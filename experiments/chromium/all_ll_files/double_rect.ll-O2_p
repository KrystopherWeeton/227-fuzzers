; ModuleID = '../../third_party/blink/renderer/platform/geometry/double_rect.cc'
source_filename = "../../third_party/blink/renderer/platform/geometry/double_rect.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::DoubleRect" = type { %"class.blink::DoublePoint", %"class.blink::DoubleSize" }
%"class.blink::DoublePoint" = type { double, double }
%"class.blink::DoubleSize" = type { double, double }
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::IntSize" = type { i32, i32 }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::LayoutRect" = type { %"class.blink::LayoutPoint", %"class.blink::LayoutSize" }
%"class.blink::LayoutPoint" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"class.blink::LayoutSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [6 x i8] c"%s %s\00", align 1

@_ZN5blink10DoubleRectC1ERKNS_7IntRectE = hidden unnamed_addr alias void (%"class.blink::DoubleRect"*, %"class.blink::IntRect"*), void (%"class.blink::DoubleRect"*, %"class.blink::IntRect"*)* @_ZN5blink10DoubleRectC2ERKNS_7IntRectE
@_ZN5blink10DoubleRectC1ERKNS_9FloatRectE = hidden unnamed_addr alias void (%"class.blink::DoubleRect"*, %"class.blink::FloatRect"*), void (%"class.blink::DoubleRect"*, %"class.blink::FloatRect"*)* @_ZN5blink10DoubleRectC2ERKNS_9FloatRectE
@_ZN5blink10DoubleRectC1ERKNS_10LayoutRectE = hidden unnamed_addr alias void (%"class.blink::DoubleRect"*, %"class.blink::LayoutRect"*), void (%"class.blink::DoubleRect"*, %"class.blink::LayoutRect"*)* @_ZN5blink10DoubleRectC2ERKNS_10LayoutRectE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10DoubleRectC2ERKNS_7IntRectE(%"class.blink::DoubleRect"* nocapture, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::IntRect"* %1 to i64*
  %4 = load i64, i64* %3, align 4
  %5 = trunc i64 %4 to i32
  %6 = lshr i64 %4, 32
  %7 = trunc i64 %6 to i32
  %8 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 0, i32 0
  %9 = sitofp i32 %5 to double
  store double %9, double* %8, align 8
  %10 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 0, i32 1
  %11 = sitofp i32 %7 to double
  store double %11, double* %10, align 8
  %12 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1
  %13 = bitcast %"class.blink::IntSize"* %12 to i64*
  %14 = load i64, i64* %13, align 4
  %15 = trunc i64 %14 to i32
  %16 = lshr i64 %14, 32
  %17 = trunc i64 %16 to i32
  %18 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 1, i32 0
  %19 = sitofp i32 %15 to double
  store double %19, double* %18, align 8
  %20 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 1, i32 1
  %21 = sitofp i32 %17 to double
  store double %21, double* %20, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10DoubleRectC2ERKNS_9FloatRectE(%"class.blink::DoubleRect"* nocapture, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.blink::FloatRect"* %1 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = fpext <2 x float> %4 to <2 x double>
  %6 = bitcast %"class.blink::DoubleRect"* %0 to <2 x double>*
  store <2 x double> %5, <2 x double>* %6, align 8
  %7 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1
  %8 = bitcast %"class.blink::FloatSize"* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 1, i32 0
  %11 = fpext <2 x float> %9 to <2 x double>
  %12 = bitcast double* %10 to <2 x double>*
  store <2 x double> %11, <2 x double>* %12, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10DoubleRectC2ERKNS_10LayoutRectE(%"class.blink::DoubleRect"*, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to %"class.blink::LayoutSize"*
  %5 = bitcast %"class.blink::LayoutRect"* %1 to i64*
  %6 = load i64, i64* %5, align 4
  %7 = trunc i64 %6 to i32
  %8 = lshr i64 %6, 32
  %9 = trunc i64 %8 to i32
  %10 = sitofp i32 %7 to double
  %11 = fmul double %10, 1.562500e-02
  %12 = sitofp i32 %9 to double
  %13 = fmul double %12, 1.562500e-02
  %14 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 0, i32 0
  store double %11, double* %14, align 8
  %15 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 0, i32 1
  store double %13, double* %15, align 8
  %16 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 1
  %17 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  %18 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1
  %19 = bitcast %"class.blink::LayoutSize"* %18 to i64*
  %20 = load i64, i64* %19, align 4
  store i64 %20, i64* %3, align 8
  call void @_ZN5blink10DoubleSizeC1ERKNS_10LayoutSizeE(%"class.blink::DoubleSize"* %16, %"class.blink::LayoutSize"* nonnull dereferenceable(8) %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  ret void
}

declare void @_ZN5blink10DoubleSizeC1ERKNS_10LayoutSizeE(%"class.blink::DoubleSize"*, %"class.blink::LayoutSize"* dereferenceable(8)) unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN5blink16EnclosingIntRectERKNS_10DoubleRectE(%"class.blink::DoubleRect"* nocapture readonly dereferenceable(32)) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 0, i32 0
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = tail call double @llvm.floor.f64(double %3) #8
  %7 = fcmp ult double %6, 0x41DFFFFFFFC00000
  br i1 %7, label %8, label %13

8:                                                ; preds = %1
  %9 = fcmp ugt double %6, 0xC1E0000000000000
  br i1 %9, label %10, label %13

10:                                               ; preds = %8
  %11 = fptosi double %6 to i32
  %12 = zext i32 %11 to i64
  br label %13

13:                                               ; preds = %10, %8, %1
  %14 = phi i64 [ %12, %10 ], [ 2147483647, %1 ], [ 2147483648, %8 ]
  %15 = tail call double @llvm.floor.f64(double %5) #8
  %16 = fcmp ult double %15, 0x41DFFFFFFFC00000
  br i1 %16, label %17, label %23

17:                                               ; preds = %13
  %18 = fcmp ugt double %15, 0xC1E0000000000000
  br i1 %18, label %19, label %23

19:                                               ; preds = %17
  %20 = fptosi double %15 to i32
  %21 = zext i32 %20 to i64
  %22 = shl nuw i64 %21, 32
  br label %23

23:                                               ; preds = %13, %17, %19
  %24 = phi i64 [ %22, %19 ], [ 9223372032559808512, %13 ], [ -9223372036854775808, %17 ]
  %25 = trunc i64 %14 to i32
  %26 = lshr exact i64 %24, 32
  %27 = trunc i64 %26 to i32
  %28 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 1, i32 0
  %29 = load double, double* %28, align 8
  %30 = fadd double %3, %29
  %31 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 1, i32 1
  %32 = load double, double* %31, align 8
  %33 = fadd double %5, %32
  %34 = tail call double @llvm.ceil.f64(double %30) #8
  %35 = fcmp ult double %34, 0x41DFFFFFFFC00000
  br i1 %35, label %36, label %40

36:                                               ; preds = %23
  %37 = fcmp ugt double %34, 0xC1E0000000000000
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = fptosi double %34 to i32
  br label %40

40:                                               ; preds = %38, %36, %23
  %41 = phi i32 [ %39, %38 ], [ 2147483647, %23 ], [ -2147483648, %36 ]
  %42 = tail call double @llvm.ceil.f64(double %33) #8
  %43 = fcmp ult double %42, 0x41DFFFFFFFC00000
  br i1 %43, label %44, label %48

44:                                               ; preds = %40
  %45 = fcmp ugt double %42, 0xC1E0000000000000
  br i1 %45, label %46, label %48

46:                                               ; preds = %44
  %47 = fptosi double %42 to i32
  br label %48

48:                                               ; preds = %40, %44, %46
  %49 = phi i32 [ %47, %46 ], [ 2147483647, %40 ], [ -2147483648, %44 ]
  %50 = icmp sgt i32 %25, -1
  %51 = select i1 %50, i32 -2147483648, i32 2147483647
  %52 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %41, i32 %25) #8
  %53 = extractvalue { i32, i1 } %52, 1
  %54 = extractvalue { i32, i1 } %52, 0
  %55 = select i1 %53, i32 %51, i32 %54, !prof !2
  %56 = icmp sgt i32 %27, -1
  %57 = select i1 %56, i32 -2147483648, i32 2147483647
  %58 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %49, i32 %27) #8
  %59 = extractvalue { i32, i1 } %58, 1
  %60 = extractvalue { i32, i1 } %58, 0
  %61 = select i1 %59, i32 %57, i32 %60, !prof !2
  %62 = or i64 %24, %14
  %63 = zext i32 %61 to i64
  %64 = shl nuw i64 %63, 32
  %65 = zext i32 %55 to i64
  %66 = or i64 %64, %65
  %67 = insertvalue { i64, i64 } undef, i64 %62, 0
  %68 = insertvalue { i64, i64 } %67, i64 %66, 1
  ret { i64, i64 } %68
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN5blink15EnclosedIntRectERKNS_10DoubleRectE(%"class.blink::DoubleRect"* nocapture readonly dereferenceable(32)) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 0, i32 0
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = tail call double @llvm.ceil.f64(double %3) #8
  %7 = fcmp ult double %6, 0x41DFFFFFFFC00000
  br i1 %7, label %8, label %13

8:                                                ; preds = %1
  %9 = fcmp ugt double %6, 0xC1E0000000000000
  br i1 %9, label %10, label %13

10:                                               ; preds = %8
  %11 = fptosi double %6 to i32
  %12 = zext i32 %11 to i64
  br label %13

13:                                               ; preds = %10, %8, %1
  %14 = phi i64 [ %12, %10 ], [ 2147483647, %1 ], [ 2147483648, %8 ]
  %15 = tail call double @llvm.ceil.f64(double %5) #8
  %16 = fcmp ult double %15, 0x41DFFFFFFFC00000
  br i1 %16, label %17, label %23

17:                                               ; preds = %13
  %18 = fcmp ugt double %15, 0xC1E0000000000000
  br i1 %18, label %19, label %23

19:                                               ; preds = %17
  %20 = fptosi double %15 to i32
  %21 = zext i32 %20 to i64
  %22 = shl nuw i64 %21, 32
  br label %23

23:                                               ; preds = %13, %17, %19
  %24 = phi i64 [ %22, %19 ], [ 9223372032559808512, %13 ], [ -9223372036854775808, %17 ]
  %25 = lshr exact i64 %24, 32
  %26 = trunc i64 %25 to i32
  %27 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 1, i32 0
  %28 = load double, double* %27, align 8
  %29 = fadd double %3, %28
  %30 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 1, i32 1
  %31 = load double, double* %30, align 8
  %32 = fadd double %5, %31
  %33 = tail call double @llvm.floor.f64(double %29) #8
  %34 = fcmp ult double %33, 0x41DFFFFFFFC00000
  br i1 %34, label %35, label %40

35:                                               ; preds = %23
  %36 = fcmp ugt double %33, 0xC1E0000000000000
  br i1 %36, label %37, label %40

37:                                               ; preds = %35
  %38 = fptosi double %33 to i32
  %39 = zext i32 %38 to i64
  br label %40

40:                                               ; preds = %37, %35, %23
  %41 = phi i64 [ %39, %37 ], [ 2147483647, %23 ], [ 2147483648, %35 ]
  %42 = tail call double @llvm.floor.f64(double %32) #8
  %43 = fcmp ult double %42, 0x41DFFFFFFFC00000
  br i1 %43, label %44, label %48

44:                                               ; preds = %40
  %45 = fcmp ugt double %42, 0xC1E0000000000000
  br i1 %45, label %46, label %48

46:                                               ; preds = %44
  %47 = fptosi double %42 to i32
  br label %48

48:                                               ; preds = %40, %44, %46
  %49 = phi i32 [ %47, %46 ], [ 2147483647, %40 ], [ -2147483648, %44 ]
  %50 = sub nsw i64 %41, %14
  %51 = sub nsw i32 %49, %26
  %52 = trunc i64 %50 to i32
  %53 = icmp sgt i32 %52, 0
  %54 = icmp sgt i32 %51, 0
  %55 = select i1 %54, i32 %51, i32 0
  %56 = zext i32 %55 to i64
  %57 = shl nuw nsw i64 %56, 32
  %58 = or i64 %24, %14
  %59 = and i64 %50, 4294967295
  %60 = select i1 %53, i64 %59, i64 0
  %61 = or i64 %57, %60
  %62 = insertvalue { i64, i64 } undef, i64 %58, 0
  %63 = insertvalue { i64, i64 } %62, i64 %61, 1
  ret { i64, i64 } %63
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN5blink14RoundedIntRectERKNS_10DoubleRectE(%"class.blink::DoubleRect"* nocapture readonly dereferenceable(32)) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 0, i32 0
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = tail call double @llvm.round.f64(double %3) #8
  %7 = fcmp ult double %6, 0x41DFFFFFFFC00000
  br i1 %7, label %8, label %13

8:                                                ; preds = %1
  %9 = fcmp ugt double %6, 0xC1E0000000000000
  br i1 %9, label %10, label %13

10:                                               ; preds = %8
  %11 = fptosi double %6 to i32
  %12 = zext i32 %11 to i64
  br label %13

13:                                               ; preds = %10, %8, %1
  %14 = phi i64 [ %12, %10 ], [ 2147483647, %1 ], [ 2147483648, %8 ]
  %15 = tail call double @llvm.round.f64(double %5) #8
  %16 = fcmp ult double %15, 0x41DFFFFFFFC00000
  br i1 %16, label %17, label %23

17:                                               ; preds = %13
  %18 = fcmp ugt double %15, 0xC1E0000000000000
  br i1 %18, label %19, label %23

19:                                               ; preds = %17
  %20 = fptosi double %15 to i32
  %21 = zext i32 %20 to i64
  %22 = shl nuw i64 %21, 32
  br label %23

23:                                               ; preds = %13, %17, %19
  %24 = phi i64 [ %22, %19 ], [ 9223372032559808512, %13 ], [ -9223372036854775808, %17 ]
  %25 = or i64 %24, %14
  %26 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 1, i32 0
  %27 = load double, double* %26, align 8
  %28 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 1, i32 1
  %29 = load double, double* %28, align 8
  %30 = tail call double @llvm.round.f64(double %27) #8
  %31 = fcmp ult double %30, 0x41DFFFFFFFC00000
  br i1 %31, label %32, label %37

32:                                               ; preds = %23
  %33 = fcmp ugt double %30, 0xC1E0000000000000
  br i1 %33, label %34, label %37

34:                                               ; preds = %32
  %35 = fptosi double %30 to i32
  %36 = zext i32 %35 to i64
  br label %37

37:                                               ; preds = %34, %32, %23
  %38 = phi i64 [ %36, %34 ], [ 2147483647, %23 ], [ 2147483648, %32 ]
  %39 = tail call double @llvm.round.f64(double %29) #8
  %40 = fcmp ult double %39, 0x41DFFFFFFFC00000
  br i1 %40, label %41, label %47

41:                                               ; preds = %37
  %42 = fcmp ugt double %39, 0xC1E0000000000000
  br i1 %42, label %43, label %47

43:                                               ; preds = %41
  %44 = fptosi double %39 to i32
  %45 = zext i32 %44 to i64
  %46 = shl nuw i64 %45, 32
  br label %47

47:                                               ; preds = %37, %41, %43
  %48 = phi i64 [ %46, %43 ], [ 9223372032559808512, %37 ], [ -9223372036854775808, %41 ]
  %49 = or i64 %48, %38
  %50 = insertvalue { i64, i64 } undef, i64 %25, 0
  %51 = insertvalue { i64, i64 } %50, i64 %49, 1
  ret { i64, i64 } %51
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink10DoubleRect5ScaleEff(%"class.blink::DoubleRect"* nocapture, float, float) local_unnamed_addr #5 align 2 {
  %4 = bitcast %"class.blink::DoubleRect"* %0 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = insertelement <2 x float> undef, float %1, i32 0
  %7 = insertelement <2 x float> %6, float %2, i32 1
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = fmul <2 x double> %5, %8
  %10 = bitcast %"class.blink::DoubleRect"* %0 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 8
  %11 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 1, i32 0
  %12 = bitcast double* %11 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = fmul <2 x double> %13, %8
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_10DoubleRectE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::DoubleRect"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #8
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK5blink10DoubleRect8ToStringEv(%"class.blink::DoubleRect"* %1)
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #8
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #8
  br label %23

23:                                               ; preds = %2, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #8
  ret %"class.std::__1::basic_ostream"* %7
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink10DoubleRect8ToStringEv(%"class.blink::DoubleRect"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca <2 x i64>, align 16
  %5 = bitcast <2 x i64>* %4 to %"class.blink::DoublePoint"*
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to %"class.blink::DoubleSize"*
  %10 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #8
  %11 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  %12 = bitcast <2 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #8
  %13 = bitcast %"class.blink::DoubleRect"* %0 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8
  store <2 x i64> %14, <2 x i64>* %4, align 16
  %15 = call %"class.WTF::StringImpl"* @_ZNK5blink11DoublePoint8ToStringEv(%"class.blink::DoublePoint"* nonnull %5) #8
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"** %16, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %2, %"class.WTF::String"* nonnull %3) #8
  %17 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = select i1 %20, i8* %22, i8* %10
  %24 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #8
  %25 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #8
  %26 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #8
  %27 = getelementptr inbounds %"class.blink::DoubleRect", %"class.blink::DoubleRect"* %0, i64 0, i32 1, i32 0
  %28 = bitcast double* %27 to <2 x i64>*
  %29 = load <2 x i64>, <2 x i64>* %28, align 8
  store <2 x i64> %29, <2 x i64>* %8, align 16
  %30 = call %"class.WTF::StringImpl"* @_ZNK5blink10DoubleSize8ToStringEv(%"class.blink::DoubleSize"* nonnull %9) #8
  %31 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %30, %"class.WTF::StringImpl"** %31, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %6, %"class.WTF::String"* nonnull %7) #8
  %32 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %33 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %32, i64 0, i32 1, i32 0
  %34 = load i8, i8* %33, align 1
  %35 = icmp slt i8 %34, 0
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = select i1 %35, i8* %37, i8* %24
  %39 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* %23, i8* %38) #8
  %40 = load i8, i8* %33, align 1
  %41 = icmp slt i8 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %1
  %43 = load i8*, i8** %36, align 8
  call void @_ZdlPv(i8* %43) #9
  br label %44

44:                                               ; preds = %1, %42
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %46, label %60, label %47

47:                                               ; preds = %44
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  br i1 %51, label %54, label %56

54:                                               ; preds = %47
  %55 = add i32 %53, -1
  store i32 %55, i32* %52, align 4
  br label %56

56:                                               ; preds = %54, %47
  %57 = phi i32 [ %55, %54 ], [ %53, %47 ]
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %56
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %45) #8
  br label %60

60:                                               ; preds = %44, %56, %59
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #8
  %61 = load i8, i8* %18, align 1
  %62 = icmp slt i8 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %60
  %64 = load i8*, i8** %21, align 8
  call void @_ZdlPv(i8* %64) #9
  br label %65

65:                                               ; preds = %60, %63
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %81, label %68

68:                                               ; preds = %65
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  br i1 %72, label %75, label %77

75:                                               ; preds = %68
  %76 = add i32 %74, -1
  store i32 %76, i32* %73, align 4
  br label %77

77:                                               ; preds = %75, %68
  %78 = phi i32 [ %76, %75 ], [ %74, %68 ]
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %77
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %66) #8
  br label %81

81:                                               ; preds = %65, %77, %80
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #8
  ret %"class.WTF::StringImpl"* %39
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #3

declare %"class.WTF::StringImpl"* @_ZNK5blink11DoublePoint8ToStringEv(%"class.blink::DoublePoint"*) local_unnamed_addr #3

declare void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*) local_unnamed_addr #3

declare %"class.WTF::StringImpl"* @_ZNK5blink10DoubleSize8ToStringEv(%"class.blink::DoubleSize"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #6

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #6

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
