; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_heuristics.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_heuristics.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array.111", [4 x i8] }>
%"struct.std::__1::array.111" = type { [3 x %"struct.std::__1::array.112"] }
%"struct.std::__1::array.112" = type { [17 x float] }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.105", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.109" }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107", %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.107" = type { float* }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.109" = type { %"class.std::__1::__vector_base.110" }
%"class.std::__1::__vector_base.110" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.129" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon, %"struct.jxl::DctQuantWeightParams", %union.anon.128 }>
%union.anon = type { %"struct.std::__1::array.119", [4 x i8] }
%"struct.std::__1::array.119" = type { [3 x %"struct.std::__1::array.120"] }
%"struct.std::__1::array.120" = type { [9 x float] }
%union.anon.128 = type { i8 }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %"class.jxl::QuantEncoding"* }
%"struct.jxl::PassesEncoderState" = type { %"struct.jxl::PassesSharedState", %"class.jxl::Plane", %"class.jxl::Plane", %"class.std::__1::vector.266", %"class.std::__1::vector.279", %"class.jxl::ProgressiveSplitter", %"struct.jxl::CompressParams", %"class.std::__1::vector.287", %"class.std::__1::vector.11", %"class.std::__1::vector", float, float, %"class.std::__1::unique_ptr.294" }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.21", %"class.jxl::Plane.226", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector", %"class.jxl::Plane.226", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.264], i64 }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.205", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.205" = type { %"class.std::__1::__vector_base.206" }
%"class.std::__1::__vector_base.206" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.207" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.200 }
%union.anon.200 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.208" }
%"struct.std::__1::__compressed_pair_elem.208" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.219", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.219" = type { %"class.std::__1::__vector_base.220" }
%"class.std::__1::__vector_base.220" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane.226", i8*, i64 }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"class.jxl::Plane.21" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.227", %"class.jxl::Plane.227", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.227" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.228", %"class.std::__1::vector.4", %"class.std::__1::vector.4" }
%"class.std::__1::vector.228" = type { %"class.std::__1::__vector_base.229" }
%"class.std::__1::__vector_base.229" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.237" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.230", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.230" = type { %"class.std::__1::__vector_base.231" }
%"class.std::__1::__vector_base.231" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.232" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.238" }
%"struct.std::__1::__compressed_pair_elem.238" = type { %"struct.jxl::PatchPosition"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { i64*, i64*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64* }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.242", %"class.std::__1::vector.257" }
%"class.std::__1::vector.242" = type { %"class.std::__1::__vector_base.243" }
%"class.std::__1::__vector_base.243" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.252" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.244", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.244" = type { %"class.std::__1::__vector_base.245" }
%"class.std::__1::__vector_base.245" = type { %"struct.std::__1::pair.246"*, %"struct.std::__1::pair.246"*, %"class.std::__1::__compressed_pair.247" }
%"struct.std::__1::pair.246" = type { i64, i64 }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.248" }
%"struct.std::__1::__compressed_pair_elem.248" = type { %"struct.std::__1::pair.246"* }
%"class.std::__1::__compressed_pair.252" = type { %"struct.std::__1::__compressed_pair_elem.253" }
%"struct.std::__1::__compressed_pair_elem.253" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.257" = type { %"class.std::__1::__vector_base.258" }
%"class.std::__1::__vector_base.258" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.259" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.jxl::Spline::Point"* }
%"class.jxl::Plane.226" = type { %"struct.jxl::PlaneBase" }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.121"], %"class.std::__1::vector", %"class.std::__1::vector.11", i64, i64 }
%"class.std::__1::vector.121" = type { %"class.std::__1::__vector_base.122" }
%"class.std::__1::__vector_base.122" = type { i32*, i32*, %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { i32* }
%struct.anon.264 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.134", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.212", i64 }
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.137", %"class.std::__1::vector.144", %"class.std::__1::vector.137", %"class.std::__1::vector.151", %"class.std::__1::vector.159", %"class.std::__1::vector.168", %"class.std::__1::vector.182", %"class.std::__1::vector.11", %"class.std::__1::vector.137", %"class.std::__1::vector.11", i32, i8, %"class.std::__1::vector.11" }
%"class.std::__1::vector.144" = type { %"class.std::__1::__vector_base.145" }
%"class.std::__1::__vector_base.145" = type { i32*, i32*, %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { i32* }
%"class.std::__1::vector.151" = type { %"class.std::__1::__vector_base.152" }
%"class.std::__1::__vector_base.152" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.154" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.153", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.153" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.159" = type { %"class.std::__1::__vector_base.160" }
%"class.std::__1::__vector_base.160" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.163" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.161", %"struct.std::__1::array.162", i32, i8, [3 x i8] }>
%"struct.std::__1::array.161" = type { [17 x i32] }
%"struct.std::__1::array.162" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.168" = type { %"class.std::__1::__vector_base.169" }
%"class.std::__1::__vector_base.169" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.177" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.170" }
%"class.std::__1::vector.170" = type { %"class.std::__1::__vector_base.171" }
%"class.std::__1::__vector_base.171" = type { i16*, i16*, %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { i16* }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.182" = type { %"class.std::__1::__vector_base.183" }
%"class.std::__1::__vector_base.183" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.192" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.184", i32, %"class.std::__1::vector", %"class.std::__1::vector.185" }
%"struct.std::__1::array.184" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.185" = type { %"class.std::__1::__vector_base.186" }
%"class.std::__1::__vector_base.186" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.187" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188" }
%"struct.std::__1::__compressed_pair_elem.188" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.137" = type { %"class.std::__1::__vector_base.138" }
%"class.std::__1::__vector_base.138" = type { %"class.std::__1::vector.11"*, %"class.std::__1::vector.11"*, %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.std::__1::vector.11"* }
%"class.std::__1::vector.212" = type { %"class.std::__1::__vector_base.213" }
%"class.std::__1::__vector_base.213" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"class.jxl::Plane"* }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"class.std::__1::vector.266" = type { %"class.std::__1::__vector_base.267" }
%"class.std::__1::__vector_base.267" = type { %"class.std::__1::unique_ptr.268"*, %"class.std::__1::unique_ptr.268"*, %"class.std::__1::__compressed_pair.274" }
%"class.std::__1::unique_ptr.268" = type { %"class.std::__1::__compressed_pair.269" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"class.jxl::ACImage"* }
%"class.jxl::ACImage" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.274" = type { %"struct.std::__1::__compressed_pair_elem.275" }
%"struct.std::__1::__compressed_pair_elem.275" = type { %"class.std::__1::unique_ptr.268"* }
%"class.std::__1::vector.279" = type { %"class.std::__1::__vector_base.280" }
%"class.std::__1::__vector_base.280" = type { %"class.std::__1::unique_ptr.281"*, %"class.std::__1::unique_ptr.281"*, %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::unique_ptr.281" = type opaque
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.std::__1::unique_ptr.281"* }
%"class.jxl::ProgressiveSplitter" = type <{ %"struct.jxl::ProgressiveMode", %"class.jxl::Plane"*, float, [4 x i8] }>
%"struct.jxl::ProgressiveMode" = type { i64, [11 x %"struct.jxl::PassDefinition"] }
%"struct.jxl::PassDefinition" = type { i64, i64, i8, i64 }
%"struct.jxl::CompressParams" = type { float, i64, float, float, float, i8, [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i64, float, %"class.jxl::Plane"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair", i32, float, float, i32, i32, i8, i8, i64, i64 }
%"struct.jxl::ButteraugliParams" = type <{ float, float, float, i8, [3 x i8] }>
%"struct.jxl::ModularOptions" = type <{ i64, float, i32, %"class.std::__1::vector", float, [4 x i8], i64, i32, i32, float, i32, i8, [3 x i8], i32, i8, [7 x i8] }>
%"struct.std::__1::pair" = type { float, float }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"*, %"class.std::__1::__compressed_pair.289" }
%"struct.jxl::PassesEncoderState::PassData" = type { %"class.std::__1::vector.60", %"class.std::__1::vector.11", %"struct.jxl::EntropyEncodingData" }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"class.std::__1::vector.62"*, %"class.std::__1::vector.62"*, %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::vector.62" = type opaque
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.std::__1::vector.62"* }
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.75", i8, %"class.std::__1::vector.83", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.75" = type { %"class.std::__1::__vector_base.76" }
%"class.std::__1::__vector_base.76" = type { %"class.std::__1::vector.77"*, %"class.std::__1::vector.77"*, %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::vector.77" = type opaque
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.std::__1::vector.77"* }
%"class.std::__1::vector.83" = type { %"class.std::__1::__vector_base.84" }
%"class.std::__1::__vector_base.84" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.85" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::__compressed_pair.289" = type { %"struct.std::__1::__compressed_pair_elem.290" }
%"struct.std::__1::__compressed_pair_elem.290" = type { %"struct.jxl::PassesEncoderState::PassData"* }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { i8*, i8*, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%"class.std::__1::unique_ptr.294" = type { %"class.std::__1::__compressed_pair.295" }
%"class.std::__1::__compressed_pair.295" = type { %"struct.std::__1::__compressed_pair_elem.296" }
%"struct.std::__1::__compressed_pair_elem.296" = type { %"class.jxl::EncoderHeuristics"* }
%"class.jxl::EncoderHeuristics" = type { i32 (...)** }
%"class.jxl::ModularFrameEncoder" = type { %"class.std::__1::vector.4", %"class.std::__1::vector.11", %"class.std::__1::vector.17", %"class.std::__1::vector.46", %"class.std::__1::vector.53", %"class.std::__1::vector.60", %"class.std::__1::vector.68", %"class.std::__1::vector.60", %"struct.jxl::EntropyEncodingData", %"class.std::__1::vector.11", %"struct.jxl::FrameDimensions", %"struct.jxl::CompressParams", float, float, %"class.std::__1::vector.4", %"class.std::__1::vector.90", %"class.std::__1::vector.98", %"class.std::__1::vector.4" }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"class.jxl::Image"*, %"class.jxl::Image"*, %"class.std::__1::__compressed_pair.41" }
%"class.jxl::Image" = type <{ %"class.std::__1::vector.19", %"class.std::__1::vector.27", i64, i64, i32, i32, i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"class.jxl::Channel"*, %"class.jxl::Channel"*, %"class.std::__1::__compressed_pair.22" }
%"class.jxl::Channel" = type { %"class.jxl::Plane.21", i64, i64, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.jxl::Channel"* }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"class.jxl::Transform"*, %"class.jxl::Transform"*, %"class.std::__1::__compressed_pair.36" }
%"class.jxl::Transform" = type <{ %"class.jxl::Fields", i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.29", i32, i32, i8, i8, [6 x i8] }>
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"*, %"class.std::__1::__compressed_pair.31" }
%"struct.jxl::SqueezeParams" = type <{ %"class.jxl::Fields", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.jxl::SqueezeParams"* }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.jxl::Transform"* }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.jxl::Image"* }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"*, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"struct.jxl::ModularOptions"* }
%"class.std::__1::vector.53" = type { %"class.std::__1::__vector_base.54" }
%"class.std::__1::__vector_base.54" = type { %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*, %"class.std::__1::__compressed_pair.55" }
%"struct.jxl::PropertyDecisionNode" = type <{ i32, i16, [2 x i8], i32, i32, i32, [4 x i8], i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.jxl::PropertyDecisionNode"* }
%"class.std::__1::vector.68" = type { %"class.std::__1::__vector_base.69" }
%"class.std::__1::__vector_base.69" = type { %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"*, %"class.std::__1::__compressed_pair.70" }
%"struct.jxl::GroupHeader" = type { %"class.jxl::Fields", i8, %"struct.jxl::weighted::Header", %"class.std::__1::vector.27" }
%"struct.jxl::weighted::Header" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32, i32, i32, [4 x i32] }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"struct.jxl::GroupHeader"* }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"*, %"class.std::__1::__compressed_pair.93" }
%"struct.jxl::ModularMultiplierInfo" = type { %"struct.std::__1::array", i32 }
%"struct.std::__1::array" = type { [2 x %"struct.std::__1::array.92"] }
%"struct.std::__1::array.92" = type { [2 x i32] }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"struct.jxl::ModularMultiplierInfo"* }
%"class.std::__1::vector.98" = type { %"class.std::__1::__vector_base.99" }
%"class.std::__1::__vector_base.99" = type { %"class.std::__1::vector"*, %"class.std::__1::vector"*, %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.std::__1::vector"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.jxl::DefaultEncoderHeuristics" = type { %"class.jxl::EncoderHeuristics" }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array.300", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.301", %"struct.std::__1::array.301", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.302" }
%"struct.std::__1::array.300" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.301" = type { [8 x i32] }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.302" = type { %"class.std::__1::__function::__policy_func.306" }
%"class.std::__1::__function::__policy_func.306" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.307", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.307" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.315", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.308" }
%"class.std::__1::vector.308" = type { %"class.std::__1::__vector_base.309" }
%"class.std::__1::__vector_base.309" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.310" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.310" = type { %"struct.std::__1::__compressed_pair_elem.311" }
%"struct.std::__1::__compressed_pair_elem.311" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"class.std::__1::vector.315" = type { %"class.std::__1::__vector_base.316" }
%"class.std::__1::__vector_base.316" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.317" }
%"class.std::__1::__compressed_pair.317" = type { %"struct.std::__1::__compressed_pair_elem.318" }
%"struct.std::__1::__compressed_pair_elem.318" = type { %"class.jxl::ImageBundle"* }
%"class.jxl::ThreadPool::RunCallState" = type { %class.anon.329*, %class.anon* }
%class.anon.329 = type { %"struct.jxl::ArControlFieldHeuristics"*, %"struct.jxl::CfLHeuristics"* }
%"struct.jxl::ArControlFieldHeuristics" = type <{ %"class.std::__1::vector.322", %"class.jxl::Plane.226"*, %"class.jxl::Plane"*, i8, [7 x i8] }>
%"class.std::__1::vector.322" = type { %"class.std::__1::__vector_base.323" }
%"class.std::__1::__vector_base.323" = type { %"struct.jxl::ArControlFieldHeuristics::TempImages"*, %"struct.jxl::ArControlFieldHeuristics::TempImages"*, %"class.std::__1::__compressed_pair.324" }
%"struct.jxl::ArControlFieldHeuristics::TempImages" = type { %"class.jxl::Plane", %"class.jxl::Plane", %"class.jxl::Plane" }
%"class.std::__1::__compressed_pair.324" = type { %"struct.std::__1::__compressed_pair_elem.325" }
%"struct.std::__1::__compressed_pair_elem.325" = type { %"struct.jxl::ArControlFieldHeuristics::TempImages"* }
%"struct.jxl::CfLHeuristics" = type { %"class.jxl::Plane", %"class.std::__1::unique_ptr.105" }
%class.anon = type { %"struct.jxl::PassesEncoderState"**, %"struct.jxl::CompressParams"*, %"struct.jxl::CfLHeuristics"*, %"class.jxl::Image3"**, %"struct.jxl::AcStrategyHeuristics"*, %"struct.jxl::ArControlFieldHeuristics"*, %"class.jxl::Quantizer"* }
%"struct.jxl::AcStrategyHeuristics" = type { %"struct.jxl::ACSConfig", %"struct.jxl::PassesEncoderState"*, [54 x float] }
%"struct.jxl::ACSConfig" = type { %"class.jxl::DequantMatrices"*, float, float*, i64, float*, i64, [3 x float*], i64, float, float, float, float, float }
%class.anon.341 = type { %"class.std::__1::vector.4"* }
%struct.OccCounters = type { [256 x i64], [13 x [256 x i64]], [13 x i64] }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }

$_ZN3jxl15DequantMatricesC2Ev = comdat any

$_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEEC2EmRKS2_ = comdat any

$_ZN3jxl6Image3IfE8ShrinkToEmm = comdat any

$_ZN3jxl17EncoderHeuristicsD2Ev = comdat any

$_ZN3jxl24DefaultEncoderHeuristicsD0Ev = comdat any

$_ZN3jxl17EncoderHeuristics23CustomFixedTreeLosslessERKNS_15FrameDimensionsEPNSt3__16vectorINS_20PropertyDecisionNodeENS4_9allocatorIS6_EEEE = comdat any

$_ZN3jxl13QuantEncodingaSERKS0_ = comdat any

$_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

$_ZN3jxl11BlockCtxMapC2ERKS0_ = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl24ArControlFieldHeuristics10TempImagesENS_9allocatorIS3_EEE8__appendEm = comdat any

@__const._ZN3jxl23FindBestDequantMatricesERKNS_14CompressParamsERKNS_6Image3IfEEPNS_19ModularFrameEncoderEPNS_15DequantMatricesE.dct_params = private unnamed_addr constant %"struct.jxl::DctQuantWeightParams" <{ i64 -6148914691236517206, %"struct.std::__1::array.111" { [3 x %"struct.std::__1::array.112"] [%"struct.std::__1::array.112" { [17 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"struct.std::__1::array.112" { [17 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"struct.std::__1::array.112" { [17 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }] }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_heuristics.cc\00", align 1
@__const._ZN3jxl24DefaultEncoderHeuristics20LossyFrameHeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE.acs_heuristics = private unnamed_addr constant { { %"class.jxl::DequantMatrices"*, float, [4 x i8], float*, i64, float*, i64, [3 x float*], i64, float, float, float, float, float, [4 x i8] }, %"struct.jxl::PassesEncoderState"*, [54 x float] } { { %"class.jxl::DequantMatrices"*, float, [4 x i8], float*, i64, float*, i64, [3 x float*], i64, float, float, float, float, float, [4 x i8] } { %"class.jxl::DequantMatrices"* inttoptr (i64 -6148914691236517206 to %"class.jxl::DequantMatrices"*), float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", float* inttoptr (i64 -6148914691236517206 to float*), i64 -6148914691236517206, float* inttoptr (i64 -6148914691236517206 to float*), i64 -6148914691236517206, [3 x float*] [float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*)], i64 -6148914691236517206, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }, %"struct.jxl::PassesEncoderState"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PassesEncoderState"*), [54 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, align 8
@.str.4 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [50 x i8] c"HandlesColorConversion(cparams, *original_pixels)\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"Enc Heuristics\00", align 1
@_ZTVN3jxl24DefaultEncoderHeuristicsE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::EncoderHeuristics"*)* @_ZN3jxl17EncoderHeuristicsD2Ev to i8*), i8* bitcast (void (%"class.jxl::DefaultEncoderHeuristics"*)* @_ZN3jxl24DefaultEncoderHeuristicsD0Ev to i8*), i8* bitcast (i32 (%"class.jxl::DefaultEncoderHeuristics"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*)* @_ZN3jxl24DefaultEncoderHeuristics20LossyFrameHeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE to i8*), i8* bitcast (i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::FrameDimensions"*, %"class.std::__1::vector.53"*)* @_ZN3jxl17EncoderHeuristics23CustomFixedTreeLosslessERKNS_15FrameDimensionsEPNSt3__16vectorINS_20PropertyDecisionNodeENS4_9allocatorIS6_EEEE to i8*), i8* bitcast (i1 (%"class.jxl::DefaultEncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)* @_ZN3jxl24DefaultEncoderHeuristics22HandlesColorConversionERKNS_14CompressParamsERKNS_11ImageBundleE to i8*)] }, align 8
@_ZN3jxl15DequantMatrices14required_size_E.const = private unnamed_addr constant [17 x i64] [i64 1, i64 1, i64 1, i64 1, i64 4, i64 16, i64 2, i64 4, i64 8, i64 1, i64 1, i64 64, i64 32, i64 256, i64 128, i64 1024, i64 512], align 16
@_ZN3jxl15DequantMatrices11kQuantTableE.const = private unnamed_addr constant [27 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 13, i64 14, i64 14, i64 15, i64 16, i64 16], align 16
@.str.7 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [53 x i8] c"../../third_party/libjxl/src/lib/jxl/quant_weights.h\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"Compute()\00", align 1
@_ZZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS_18PassesEncoderStateEE13kSimpleCtxMap = internal constant [39 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01", align 16
@_ZN3jxlL14kStrategyOrderE = internal unnamed_addr constant [27 x i8] c"\00\01\01\01\02\03\04\04\05\05\06\06\01\01\01\01\01\01\07\08\08\09\0A\0A\0B\0C\0C", align 16
@.str.12 = private unnamed_addr constant [45 x i8] c"../../third_party/libjxl/src/lib/jxl/image.h\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"xsize <= orig_xsize_\00", align 1
@.str.14 = private unnamed_addr constant [21 x i8] c"ysize <= orig_ysize_\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl23FindBestDequantMatricesERKNS_14CompressParamsERKNS_6Image3IfEEPNS_19ModularFrameEncoderEPNS_15DequantMatricesE(%"struct.jxl::CompressParams"* nocapture readonly dereferenceable(360), %"class.jxl::Image3"* nocapture readnone dereferenceable(96), %"class.jxl::ModularFrameEncoder"*, %"class.jxl::DequantMatrices"*) local_unnamed_addr #0 {
  %5 = alloca [216 x i8], align 4
  %6 = alloca %"class.jxl::DequantMatrices", align 8
  %7 = alloca [68 x i8], align 4
  %8 = alloca %"class.std::__1::vector.109", align 8
  %9 = alloca %"class.jxl::QuantEncoding", align 8
  %10 = alloca [3 x float], align 4
  %11 = bitcast %"class.jxl::DequantMatrices"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 736, i8* nonnull %11) #9
  call void @_ZN3jxl15DequantMatricesC2Ev(%"class.jxl::DequantMatrices"* nonnull %6)
  %12 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = bitcast %"class.jxl::DequantMatrices"* %6 to i64*
  %14 = load i64, i64* %13, align 8
  store float* null, float** %12, align 8
  %15 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load float*, float** %15, align 8
  %17 = bitcast %"class.jxl::DequantMatrices"* %3 to i64*
  store i64 %14, i64* %17, align 8
  %18 = icmp eq float* %16, null
  br i1 %18, label %25, label %19

19:                                               ; preds = %4
  %20 = bitcast float* %16 to i8*
  %21 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %3, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %22 = load void (i8*, i8*)*, void (i8*, i8*)** %21, align 8
  %23 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %3, i64 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %24 = load i8*, i8** %23, align 8
  call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %20, void (i8*, i8*)* %22, i8* %24) #9
  br label %25

25:                                               ; preds = %19, %4
  %26 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %6, i64 0, i32 0, i32 0, i32 1, i32 0
  %27 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %3, i64 0, i32 0, i32 0, i32 1, i32 0
  %28 = bitcast %"class.hwy::AlignedFreer"* %27 to i8*
  %29 = bitcast %"class.hwy::AlignedFreer"* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 16, i1 false) #9
  %30 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %3, i64 0, i32 1
  %31 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %6, i64 0, i32 1
  %32 = bitcast float** %30 to i8*
  %33 = bitcast float** %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 688, i1 false) #9
  %34 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %3, i64 0, i32 6
  %35 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %6, i64 0, i32 6
  %36 = getelementptr inbounds %"class.std::__1::vector.109", %"class.std::__1::vector.109"* %34, i64 0, i32 0, i32 0
  %37 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %36, align 8
  %38 = icmp eq %"class.jxl::QuantEncoding"* %37, null
  br i1 %38, label %74, label %39

39:                                               ; preds = %25
  %40 = bitcast %"class.jxl::QuantEncoding"* %37 to i8*
  %41 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %3, i64 0, i32 6, i32 0, i32 1
  %42 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %41, align 8
  %43 = icmp eq %"class.jxl::QuantEncoding"* %42, %37
  br i1 %43, label %71, label %44

44:                                               ; preds = %39, %66
  %45 = phi %"class.jxl::QuantEncoding"* [ %46, %66 ], [ %42, %39 ]
  %46 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %45, i64 -1
  %47 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 0, i32 0, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %48, 7
  br i1 %49, label %50, label %66

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %45, i64 -1, i32 0, i32 3
  %52 = bitcast %union.anon* %51 to %"class.std::__1::vector.121"**
  %53 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %52, align 8
  %54 = icmp eq %"class.std::__1::vector.121"* %53, null
  br i1 %54, label %66, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %53, i64 0, i32 0, i32 0
  %57 = load i32*, i32** %56, align 8
  %58 = icmp eq i32* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = ptrtoint i32* %57 to i64
  %61 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %53, i64 0, i32 0, i32 1
  %62 = bitcast i32** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast i32* %57 to i8*
  call void @_ZdlPv(i8* %63) #11
  br label %64

64:                                               ; preds = %59, %55
  %65 = bitcast %"class.std::__1::vector.121"* %53 to i8*
  call void @_ZdlPv(i8* %65) #11
  br label %66

66:                                               ; preds = %64, %50, %44
  %67 = icmp eq %"class.jxl::QuantEncoding"* %46, %37
  br i1 %67, label %68, label %44

68:                                               ; preds = %66
  %69 = bitcast %"class.std::__1::vector.109"* %34 to i8**
  %70 = load i8*, i8** %69, align 8
  br label %71

71:                                               ; preds = %68, %39
  %72 = phi i8* [ %70, %68 ], [ %40, %39 ]
  store %"class.jxl::QuantEncoding"* %37, %"class.jxl::QuantEncoding"** %41, align 8
  call void @_ZdlPv(i8* %72) #11
  %73 = bitcast %"class.std::__1::vector.109"* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 24, i1 false) #9
  br label %74

74:                                               ; preds = %25, %71
  %75 = bitcast %"class.std::__1::vector.109"* %35 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 8
  %77 = bitcast %"class.std::__1::vector.109"* %34 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %77, align 8
  %78 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %6, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %79 = bitcast %"class.jxl::QuantEncoding"** %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %3, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %82 = bitcast %"class.jxl::QuantEncoding"** %81 to i64*
  store i64 %80, i64* %82, align 8
  %83 = bitcast %"class.std::__1::vector.109"* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %83, i8 0, i64 24, i1 false) #9
  %84 = load float*, float** %12, align 8
  %85 = icmp eq float* %84, null
  store float* null, float** %12, align 8
  br i1 %85, label %92, label %86

86:                                               ; preds = %74
  %87 = bitcast float* %84 to i8*
  %88 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %6, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %89 = load void (i8*, i8*)*, void (i8*, i8*)** %88, align 8
  %90 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %6, i64 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %91 = load i8*, i8** %90, align 8
  call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %87, void (i8*, i8*)* %89, i8* %91) #9
  br label %92

92:                                               ; preds = %74, %86
  call void @llvm.lifetime.end.p0i8(i64 736, i8* nonnull %11) #9
  %93 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 5
  %94 = load i8, i8* %93, align 4, !range !2
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %193, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 6, i64 0
  %98 = load float, float* %97, align 8
  %99 = fdiv float 1.000000e+00, %98
  %100 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 6, i64 1
  %101 = load float, float* %100, align 4
  %102 = fdiv float 1.000000e+00, %101
  %103 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 6, i64 2
  %104 = load float, float* %103, align 8
  %105 = fdiv float 1.000000e+00, %104
  %106 = getelementptr inbounds [68 x i8], [68 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %106)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %106, i8* align 4 bitcast (float* getelementptr inbounds (%"struct.jxl::DctQuantWeightParams", %"struct.jxl::DctQuantWeightParams"* @__const._ZN3jxl23FindBestDequantMatricesERKNS_14CompressParamsERKNS_6Image3IfEEPNS_19ModularFrameEncoderEPNS_15DequantMatricesE.dct_params, i64 0, i32 1, i32 0, i64 2, i32 0, i64 1) to i8*), i64 68, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %106, i8 0, i64 64, i1 false)
  %107 = bitcast %"class.std::__1::vector.109"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %107) #9
  %108 = getelementptr inbounds %"class.std::__1::vector.109", %"class.std::__1::vector.109"* %8, i64 0, i32 0, i32 0
  %109 = getelementptr inbounds %"class.std::__1::vector.109", %"class.std::__1::vector.109"* %8, i64 0, i32 0, i32 1
  %110 = bitcast %"class.jxl::QuantEncoding"* %9 to i8*
  %111 = bitcast %"class.std::__1::vector.109"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %111, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %110) #9
  %112 = getelementptr inbounds [216 x i8], [216 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %112)
  %113 = getelementptr inbounds [216 x i8], [216 x i8]* %5, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %113, i8 0, i64 212, i1 false), !alias.scope !3, !noalias !6
  %114 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %9, i64 0, i32 0, i32 0
  store i32 6, i32* %114, align 8, !alias.scope !6
  %115 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %9, i64 0, i32 0, i32 2, i32 0
  store i64 1, i64* %115, align 8
  %116 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %9, i64 0, i32 0, i32 2, i32 1, i32 0, i64 0, i32 0, i64 0
  store float %99, float* %116, align 8
  %117 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %9, i64 0, i32 0, i32 2, i32 1, i32 0, i64 0, i32 0, i64 1
  %118 = bitcast float* %117 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %118, i8 0, i64 64, i1 false)
  %119 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %9, i64 0, i32 0, i32 2, i32 1, i32 0, i64 1, i32 0, i64 0
  store float %102, float* %119, align 4
  %120 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %9, i64 0, i32 0, i32 2, i32 1, i32 0, i64 1, i32 0, i64 1
  %121 = bitcast float* %120 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %121, i8 0, i64 64, i1 false)
  %122 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %9, i64 0, i32 0, i32 2, i32 1, i32 0, i64 2, i32 0, i64 0
  store float %105, float* %122, align 8
  %123 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %9, i64 0, i32 0, i32 2, i32 1, i32 0, i64 2, i32 0, i64 1
  %124 = bitcast float* %123 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %124, i8* nonnull align 4 %106, i64 68, i1 false)
  %125 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %9, i64 0, i32 0, i32 3
  %126 = bitcast %union.anon* %125 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %126, i8 0, i64 108, i1 false) #9, !alias.scope !6
  %127 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %9, i64 0, i32 0, i32 3, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %127, i8* nonnull align 4 %112, i64 216, i1 false) #9
  %128 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %9, i64 0, i32 0, i32 5, i32 0
  store i8 0, i8* %128, align 8, !alias.scope !6
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %112)
  call void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEEC2EmRKS2_(%"class.std::__1::vector.109"* nonnull %8, i64 17, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %9)
  %129 = load i32, i32* %114, align 8
  %130 = icmp eq i32 %129, 7
  br i1 %130, label %131, label %146

131:                                              ; preds = %96
  %132 = bitcast %union.anon* %125 to %"class.std::__1::vector.121"**
  %133 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %132, align 8
  %134 = icmp eq %"class.std::__1::vector.121"* %133, null
  br i1 %134, label %146, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %133, i64 0, i32 0, i32 0
  %137 = load i32*, i32** %136, align 8
  %138 = icmp eq i32* %137, null
  br i1 %138, label %144, label %139

139:                                              ; preds = %135
  %140 = ptrtoint i32* %137 to i64
  %141 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %133, i64 0, i32 0, i32 1
  %142 = bitcast i32** %141 to i64*
  store i64 %140, i64* %142, align 8
  %143 = bitcast i32* %137 to i8*
  call void @_ZdlPv(i8* %143) #11
  br label %144

144:                                              ; preds = %139, %135
  %145 = bitcast %"class.std::__1::vector.121"* %133 to i8*
  call void @_ZdlPv(i8* %145) #11
  br label %146

146:                                              ; preds = %96, %131, %144
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %110) #9
  call void @_ZN3jxl24DequantMatricesSetCustomEPNS_15DequantMatricesERKNSt3__16vectorINS_13QuantEncodingENS2_9allocatorIS4_EEEEPNS_19ModularFrameEncoderE(%"class.jxl::DequantMatrices"* %3, %"class.std::__1::vector.109"* nonnull dereferenceable(24) %8, %"class.jxl::ModularFrameEncoder"* %2) #9
  %147 = bitcast [3 x float]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %147) #9
  %148 = getelementptr inbounds [3 x float], [3 x float]* %10, i64 0, i64 0
  %149 = getelementptr inbounds [3 x float], [3 x float]* %10, i64 0, i64 1
  %150 = getelementptr inbounds [3 x float], [3 x float]* %10, i64 0, i64 2
  %151 = load float, float* %97, align 8
  %152 = fdiv float 1.000000e+00, %151
  store float %152, float* %148, align 4
  %153 = load float, float* %100, align 4
  %154 = fdiv float 1.000000e+00, %153
  store float %154, float* %149, align 4
  %155 = load float, float* %103, align 8
  %156 = fdiv float 1.000000e+00, %155
  store float %156, float* %150, align 4
  call void @_ZN3jxl26DequantMatricesSetCustomDCEPNS_15DequantMatricesEPKf(%"class.jxl::DequantMatrices"* %3, float* nonnull %148) #9
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %147) #9
  %157 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %108, align 8
  %158 = icmp eq %"class.jxl::QuantEncoding"* %157, null
  br i1 %158, label %192, label %159

159:                                              ; preds = %146
  %160 = bitcast %"class.jxl::QuantEncoding"* %157 to i8*
  %161 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %109, align 8
  %162 = icmp eq %"class.jxl::QuantEncoding"* %161, %157
  br i1 %162, label %190, label %163

163:                                              ; preds = %159, %185
  %164 = phi %"class.jxl::QuantEncoding"* [ %165, %185 ], [ %161, %159 ]
  %165 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %164, i64 -1
  %166 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %165, i64 0, i32 0, i32 0
  %167 = load i32, i32* %166, align 8
  %168 = icmp eq i32 %167, 7
  br i1 %168, label %169, label %185

169:                                              ; preds = %163
  %170 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %164, i64 -1, i32 0, i32 3
  %171 = bitcast %union.anon* %170 to %"class.std::__1::vector.121"**
  %172 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %171, align 8
  %173 = icmp eq %"class.std::__1::vector.121"* %172, null
  br i1 %173, label %185, label %174

174:                                              ; preds = %169
  %175 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %172, i64 0, i32 0, i32 0
  %176 = load i32*, i32** %175, align 8
  %177 = icmp eq i32* %176, null
  br i1 %177, label %183, label %178

178:                                              ; preds = %174
  %179 = ptrtoint i32* %176 to i64
  %180 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %172, i64 0, i32 0, i32 1
  %181 = bitcast i32** %180 to i64*
  store i64 %179, i64* %181, align 8
  %182 = bitcast i32* %176 to i8*
  call void @_ZdlPv(i8* %182) #11
  br label %183

183:                                              ; preds = %178, %174
  %184 = bitcast %"class.std::__1::vector.121"* %172 to i8*
  call void @_ZdlPv(i8* %184) #11
  br label %185

185:                                              ; preds = %183, %169, %163
  %186 = icmp eq %"class.jxl::QuantEncoding"* %165, %157
  br i1 %186, label %187, label %163

187:                                              ; preds = %185
  %188 = bitcast %"class.std::__1::vector.109"* %8 to i8**
  %189 = load i8*, i8** %188, align 8
  br label %190

190:                                              ; preds = %187, %159
  %191 = phi i8* [ %189, %187 ], [ %160, %159 ]
  store %"class.jxl::QuantEncoding"* %157, %"class.jxl::QuantEncoding"** %109, align 8
  call void @_ZdlPv(i8* %191) #11
  br label %192

192:                                              ; preds = %146, %190
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %107) #9
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %106)
  br label %193

193:                                              ; preds = %92, %192
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15DequantMatricesC2Ev(%"class.jxl::DequantMatrices"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca [216 x i8], align 4
  %3 = alloca [112 x i8], align 4
  %4 = alloca [216 x i8], align 4
  %5 = alloca %"class.jxl::QuantEncoding", align 8
  %6 = alloca [51 x i64], align 16
  %7 = alloca %"class.jxl::QuantEncoding", align 8
  %8 = bitcast %"class.jxl::DequantMatrices"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #9
  %9 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 0
  %10 = bitcast float* %9 to <4 x float>*
  store <4 x float> <float 0x3F30000000000000, float 0x3F60000000000000, float 3.906250e-03, float 4.096000e+03>, <4 x float>* %10, align 4
  %11 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 1
  store float 5.120000e+02, float* %11, align 4
  %12 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 2
  store float 2.560000e+02, float* %12, align 4
  %13 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 6
  %14 = bitcast %"class.std::__1::vector.109"* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #9
  %15 = bitcast %"class.jxl::QuantEncoding"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %15) #9
  %16 = getelementptr inbounds [216 x i8], [216 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %16)
  %17 = getelementptr inbounds [112 x i8], [112 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %17)
  %18 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %18)
  %19 = getelementptr inbounds [216 x i8], [216 x i8]* %2, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 212, i1 false), !alias.scope !9, !noalias !12
  %20 = getelementptr inbounds [112 x i8], [112 x i8]* %3, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 108, i1 false), !alias.scope !9, !noalias !12
  %21 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 212, i1 false), !alias.scope !9, !noalias !12
  %22 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 0
  store i32 0, i32* %22, align 8, !alias.scope !12
  %23 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* nonnull align 4 %16, i64 216, i1 false) #9
  %24 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 2, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %24, i8* nonnull align 4 %17, i64 112, i1 false) #9
  %25 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 3, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* nonnull align 4 %18, i64 216, i1 false) #9
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 5, i32 0
  store i8 0, i8* %26, align 8, !alias.scope !12
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %18)
  call void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.109"* %13, i64 17, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %5) #9
  %27 = load i32, i32* %22, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %45

29:                                               ; preds = %1
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon* %30 to %"class.std::__1::vector.121"**
  %32 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.121"* %32, null
  br i1 %33, label %45, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %32, i64 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = icmp eq i32* %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = ptrtoint i32* %36 to i64
  %40 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %32, i64 0, i32 0, i32 1
  %41 = bitcast i32** %40 to i64*
  store i64 %39, i64* %41, align 8
  %42 = bitcast i32* %36 to i8*
  call void @_ZdlPv(i8* %42) #11
  br label %43

43:                                               ; preds = %38, %34
  %44 = bitcast %"class.std::__1::vector.121"* %32 to i8*
  call void @_ZdlPv(i8* %44) #11
  br label %45

45:                                               ; preds = %1, %29, %43
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %15) #9
  %46 = bitcast [51 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 408, i8* nonnull %46) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 408, i1 false)
  %47 = bitcast %"class.jxl::QuantEncoding"* %7 to i8*
  %48 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 1, i64 0
  %50 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 2, i32 2, i64 0
  %51 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3, i32 1, i64 0
  %52 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 5, i32 0
  %53 = getelementptr inbounds %"class.std::__1::vector.109", %"class.std::__1::vector.109"* %13, i64 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3
  %55 = bitcast %union.anon* %54 to %"class.std::__1::vector.121"**
  br label %56

56:                                               ; preds = %78, %45
  %57 = phi i64 [ 0, %45 ], [ %93, %78 ]
  %58 = phi i64 [ 0, %45 ], [ %92, %78 ]
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %47) #9
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %18)
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 212, i1 false), !alias.scope !15, !noalias !18
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 108, i1 false), !alias.scope !15, !noalias !18
  call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 212, i1 false), !alias.scope !15, !noalias !18
  store i32 0, i32* %48, align 8, !alias.scope !18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* nonnull align 4 %16, i64 216, i1 false) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %50, i8* nonnull align 4 %17, i64 112, i1 false) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* nonnull align 4 %18, i64 216, i1 false) #9
  store i8 0, i8* %52, align 8, !alias.scope !18
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %18)
  %59 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %53, align 8
  %60 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %59, i64 %57
  %61 = call dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"* %60, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %7)
  %62 = load i32, i32* %48, align 8
  %63 = icmp eq i32 %62, 7
  br i1 %63, label %64, label %78

64:                                               ; preds = %56
  %65 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %55, align 8
  %66 = icmp eq %"class.std::__1::vector.121"* %65, null
  br i1 %66, label %78, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %65, i64 0, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %76, label %71

71:                                               ; preds = %67
  %72 = ptrtoint i32* %69 to i64
  %73 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %65, i64 0, i32 0, i32 1
  %74 = bitcast i32** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = bitcast i32* %69 to i8*
  call void @_ZdlPv(i8* %75) #11
  br label %76

76:                                               ; preds = %71, %67
  %77 = bitcast %"class.std::__1::vector.121"* %65 to i8*
  call void @_ZdlPv(i8* %77) #11
  br label %78

78:                                               ; preds = %56, %64, %76
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %47) #9
  %79 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices14required_size_E.const, i64 0, i64 %57
  %80 = load i64, i64* %79, align 8
  %81 = shl i64 %80, 6
  %82 = mul nuw nsw i64 %57, 3
  %83 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %82
  store i64 %58, i64* %83, align 8
  %84 = add i64 %81, %58
  %85 = add nuw nsw i64 %82, 1
  %86 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %85
  store i64 %84, i64* %86, align 8
  %87 = shl i64 %80, 7
  %88 = add i64 %87, %58
  %89 = add nuw nsw i64 %82, 2
  %90 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %89
  store i64 %88, i64* %90, align 8
  %91 = mul i64 %80, 192
  %92 = add i64 %91, %58
  %93 = add nuw nsw i64 %57, 1
  %94 = icmp eq i64 %93, 17
  br i1 %94, label %95, label %56

95:                                               ; preds = %78, %114
  %96 = phi i64 [ %123, %114 ], [ 0, %78 ]
  %97 = mul nuw nsw i64 %96, 3
  %98 = getelementptr %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 5, i64 %97
  %99 = bitcast i64* %98 to i8*
  %100 = getelementptr inbounds [27 x i64], [27 x i64]* @_ZN3jxl15DequantMatrices11kQuantTableE.const, i64 0, i64 %96
  %101 = load i64, i64* %100, align 16
  %102 = mul i64 %101, 3
  %103 = getelementptr [51 x i64], [51 x i64]* %6, i64 0, i64 %102
  %104 = bitcast i64* %103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %104, i64 24, i1 false)
  %105 = or i64 %96, 1
  %106 = icmp eq i64 %105, 27
  br i1 %106, label %107, label %114

107:                                              ; preds = %95
  %108 = call i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"* %0) #9
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %113, label %110

110:                                              ; preds = %107
  %111 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 393, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0)) #9
  %112 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

113:                                              ; preds = %107
  call void @llvm.lifetime.end.p0i8(i64 408, i8* nonnull %46) #9
  ret void

114:                                              ; preds = %95
  %115 = mul nuw nsw i64 %105, 3
  %116 = getelementptr %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 5, i64 %115
  %117 = bitcast i64* %116 to i8*
  %118 = getelementptr inbounds [27 x i64], [27 x i64]* @_ZN3jxl15DequantMatrices11kQuantTableE.const, i64 0, i64 %105
  %119 = load i64, i64* %118, align 8
  %120 = mul i64 %119, 3
  %121 = getelementptr [51 x i64], [51 x i64]* %6, i64 0, i64 %120
  %122 = bitcast i64* %121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %122, i64 24, i1 false)
  %123 = add nuw nsw i64 %96, 2
  br label %95
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEEC2EmRKS2_(%"class.std::__1::vector.109"*, i64, %"class.jxl::QuantEncoding"* dereferenceable(560)) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.std::__1::vector.109"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #9
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %80, label %6

6:                                                ; preds = %3
  %7 = icmp ugt i64 %1, 32940614417338485
  br i1 %7, label %8, label %10

8:                                                ; preds = %6
  %9 = bitcast %"class.std::__1::vector.109"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %9) #12
  unreachable

10:                                               ; preds = %6
  %11 = mul i64 %1, 560
  %12 = tail call i8* @_Znwm(i64 %11) #11
  %13 = bitcast i8* %12 to %"class.jxl::QuantEncoding"*
  %14 = getelementptr inbounds %"class.std::__1::vector.109", %"class.std::__1::vector.109"* %0, i64 0, i32 0, i32 1
  %15 = bitcast %"class.jxl::QuantEncoding"** %14 to i8**
  store i8* %12, i8** %15, align 8
  %16 = bitcast %"class.std::__1::vector.109"* %0 to i8**
  store i8* %12, i8** %16, align 8
  %17 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %13, i64 %1
  %18 = getelementptr inbounds %"class.std::__1::vector.109", %"class.std::__1::vector.109"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.jxl::QuantEncoding"* %17, %"class.jxl::QuantEncoding"** %18, align 8
  %19 = bitcast %"class.jxl::QuantEncoding"** %14 to i64*
  %20 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %21 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %22 = bitcast %union.anon* %21 to %"class.std::__1::vector.121"**
  br label %23

23:                                               ; preds = %75, %10
  %24 = phi %"class.jxl::QuantEncoding"* [ %13, %10 ], [ %76, %75 ]
  %25 = bitcast %"class.jxl::QuantEncoding"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %20, i64 553, i1 false) #9
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %75

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon* %30 to %"class.std::__1::vector.121"**
  %32 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.121"* %32, null
  br i1 %33, label %75, label %34

34:                                               ; preds = %29
  %35 = tail call i8* @_Znwm(i64 24) #11
  %36 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %22, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #9
  %37 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.121"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %34
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %35 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #12
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #11
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %35, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %35 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %35, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #9
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %71, %34
  %74 = bitcast %union.anon* %30 to i8**
  store i8* %35, i8** %74, align 8
  br label %75

75:                                               ; preds = %73, %29, %23
  %76 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 1
  %77 = icmp eq %"class.jxl::QuantEncoding"* %76, %17
  br i1 %77, label %78, label %23

78:                                               ; preds = %75
  %79 = ptrtoint %"class.jxl::QuantEncoding"* %17 to i64
  store i64 %79, i64* %19, align 8
  br label %80

80:                                               ; preds = %3, %78
  ret void
}

declare void @_ZN3jxl24DequantMatricesSetCustomEPNS_15DequantMatricesERKNSt3__16vectorINS_13QuantEncodingENS2_9allocatorIS4_EEEEPNS_19ModularFrameEncoderE(%"class.jxl::DequantMatrices"*, %"class.std::__1::vector.109"* dereferenceable(24), %"class.jxl::ModularFrameEncoder"*) local_unnamed_addr #2

declare void @_ZN3jxl26DequantMatricesSetCustomDCEPNS_15DequantMatricesEPKf(%"class.jxl::DequantMatrices"*, float*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN3jxl24DefaultEncoderHeuristics22HandlesColorConversionERKNS_14CompressParamsERKNS_11ImageBundleE(%"class.jxl::DefaultEncoderHeuristics"* nocapture readnone, %"struct.jxl::CompressParams"* nocapture readonly dereferenceable(360), %"class.jxl::ImageBundle"* nocapture readonly dereferenceable(368)) unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 17
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %46, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 19
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %46, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 7
  %13 = load i32, i32* %12, align 4
  %14 = icmp sgt i32 %13, 3
  br i1 %14, label %15, label %46

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 49
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 1
  br i1 %18, label %19, label %46

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 11
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %46

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %1, i64 0, i32 14
  %25 = load i8, i8* %24, align 8, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %46

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %2, i64 0, i32 9
  %29 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %28, align 8
  %30 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %29, i64 0, i32 17, i32 0, i32 0
  %31 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %30, align 8
  %32 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %29, i64 0, i32 17, i32 0, i32 1
  %33 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %32, align 8
  %34 = icmp eq %"struct.jxl::ExtraChannelInfo"* %31, %33
  br i1 %34, label %43, label %37

35:                                               ; preds = %37
  %36 = icmp eq %"struct.jxl::ExtraChannelInfo"* %42, %33
  br i1 %36, label %43, label %37

37:                                               ; preds = %27, %35
  %38 = phi %"struct.jxl::ExtraChannelInfo"* [ %42, %35 ], [ %31, %27 ]
  %39 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %38, i64 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  %42 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %38, i64 1
  br i1 %41, label %43, label %35

43:                                               ; preds = %35, %37, %27
  %44 = phi %"struct.jxl::ExtraChannelInfo"* [ null, %27 ], [ %38, %37 ], [ null, %35 ]
  %45 = icmp eq %"struct.jxl::ExtraChannelInfo"* %44, null
  br label %46

46:                                               ; preds = %23, %7, %3, %43, %19, %15, %11
  %47 = phi i1 [ false, %23 ], [ false, %19 ], [ false, %15 ], [ false, %11 ], [ false, %7 ], [ false, %3 ], [ %45, %43 ]
  ret i1 %47
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl24DefaultEncoderHeuristics20LossyFrameHeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE(%"class.jxl::DefaultEncoderHeuristics"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ImageBundle"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*) unnamed_addr #0 align 2 {
  %8 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %9 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %10 = alloca double, align 8
  %11 = alloca %"class.jxl::ThreadPool", align 8
  %12 = alloca %class.anon.341, align 8
  %13 = alloca %"struct.jxl::BlockCtxMap", align 8
  %14 = alloca %"class.std::__1::vector.4", align 8
  %15 = alloca %"class.std::__1::vector.11", align 8
  %16 = alloca %"class.std::__1::vector.11", align 8
  %17 = alloca %"class.std::__1::vector.11", align 8
  %18 = alloca %"struct.jxl::PassesEncoderState"*, align 8
  %19 = alloca %"class.jxl::Image3"*, align 8
  %20 = alloca %"class.jxl::Splines", align 8
  %21 = alloca %"struct.jxl::ArControlFieldHeuristics", align 8
  %22 = alloca %"struct.jxl::AcStrategyHeuristics", align 8
  %23 = alloca %"struct.jxl::CfLHeuristics", align 8
  %24 = alloca %"class.jxl::Image3", align 8
  %25 = alloca %"class.jxl::Plane", align 8
  %26 = alloca %"class.jxl::Plane", align 8
  %27 = alloca %class.anon, align 8
  %28 = alloca %class.anon.329, align 8
  store %"struct.jxl::PassesEncoderState"* %1, %"struct.jxl::PassesEncoderState"** %18, align 8
  store %"class.jxl::Image3"* %4, %"class.jxl::Image3"** %19, align 8
  %29 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 6
  %30 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 1, i32 4
  %31 = load i64, i64* %30, align 8
  %32 = and i64 %31, 1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %51, label %34

34:                                               ; preds = %7
  %35 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %29, i64 0, i32 0
  %36 = load float, float* %35, align 8
  %37 = fadd float %36, -1.000000e+00
  %38 = fdiv float %37, 0x3FE3333340000000
  %39 = fcmp olt float %38, 1.000000e+00
  %40 = fmul float %38, 7.500000e-01
  %41 = fadd float %40, 2.500000e-01
  %42 = select i1 %39, float %41, float 1.000000e+00
  %43 = fcmp olt float %38, 0.000000e+00
  %44 = select i1 %43, float 1.000000e+00, float %42
  %45 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 9, i32 0
  %46 = tail call i32 @_ZN3jxl17GetNoiseParameterERKNS_6Image3IfEEPNS_11NoiseParamsEf(%"class.jxl::Image3"* dereferenceable(96) %4, %"struct.jxl::NoiseParams"* %45, float %44) #9
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %51, label %48

48:                                               ; preds = %34
  %49 = load i64, i64* %30, align 8
  %50 = and i64 %49, -2
  store i64 %50, i64* %30, align 8
  br label %51

51:                                               ; preds = %48, %34, %7
  %52 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 1, i32 15
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, 1
  br i1 %54, label %58, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 6, i32 49
  %57 = load i64, i64* %56, align 8
  tail call void @_ZN3jxl15DownsampleImageEPNS_6Image3IfEEm(%"class.jxl::Image3"* %4, i64 %57) #9
  tail call void @_ZN3jxl30PadImageToBlockMultipleInPlaceEPNS_6Image3IfEE(%"class.jxl::Image3"* %4) #9
  br label %58

58:                                               ; preds = %51, %55
  %59 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 6, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %84

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 6, i32 2
  %64 = load float, float* %63, align 8
  %65 = fcmp ogt float %64, 0.000000e+00
  br i1 %65, label %66, label %79

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 2, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = uitofp i64 %68 to float
  %70 = fmul float %64, %69
  %71 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 2, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = uitofp i64 %72 to float
  %74 = fmul float %70, %73
  %75 = fmul float %74, 1.250000e-01
  %76 = fpext float %75 to double
  %77 = fadd double %76, 5.000000e-01
  %78 = fptoui double %77 to i64
  br label %79

79:                                               ; preds = %62, %66
  %80 = phi i64 [ 0, %62 ], [ %78, %66 ]
  %81 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 6, i32 2
  %82 = load float, float* %81, align 8
  %83 = fcmp ogt float %82, 0.000000e+00
  br i1 %83, label %84, label %86

84:                                               ; preds = %58, %79
  %85 = phi i64 [ %80, %79 ], [ %60, %58 ]
  store i64 %85, i64* %59, align 8
  br label %90

86:                                               ; preds = %79
  %87 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %29, i64 0, i32 0
  %88 = load float, float* %87, align 8
  %89 = fcmp olt float %88, 0.000000e+00
  br i1 %89, label %1499, label %90

90:                                               ; preds = %86, %84
  %91 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 6, i32 7
  %92 = load i32, i32* %91, align 4
  %93 = icmp slt i32 %92, 4
  br i1 %93, label %94, label %193

94:                                               ; preds = %90
  %95 = bitcast %"class.jxl::Splines"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %95) #9
  call void @_ZN3jxl11FindSplinesERKNS_6Image3IfEE(%"class.jxl::Splines"* nonnull sret %20, %"class.jxl::Image3"* dereferenceable(96) %4) #9
  %96 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 9, i32 2
  %97 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %20, i64 0, i32 0
  %98 = load i32, i32* %97, align 8
  %99 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %96, i64 0, i32 0
  store i32 %98, i32* %99, align 8
  %100 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 9, i32 2, i32 1
  %101 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %20, i64 0, i32 1
  %102 = getelementptr inbounds %"class.std::__1::vector.242", %"class.std::__1::vector.242"* %100, i64 0, i32 0, i32 0
  %103 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %102, align 8
  %104 = icmp eq %"class.jxl::QuantizedSpline"* %103, null
  br i1 %104, label %129, label %105

105:                                              ; preds = %94
  %106 = bitcast %"class.jxl::QuantizedSpline"* %103 to i8*
  %107 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 9, i32 2, i32 1, i32 0, i32 1
  %108 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %107, align 8
  %109 = icmp eq %"class.jxl::QuantizedSpline"* %108, %103
  br i1 %109, label %126, label %110

110:                                              ; preds = %105, %121
  %111 = phi %"class.jxl::QuantizedSpline"* [ %112, %121 ], [ %108, %105 ]
  %112 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %111, i64 -1
  %113 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %112, i64 0, i32 0, i32 0, i32 0
  %114 = load %"struct.std::__1::pair.246"*, %"struct.std::__1::pair.246"** %113, align 8
  %115 = icmp eq %"struct.std::__1::pair.246"* %114, null
  br i1 %115, label %121, label %116

116:                                              ; preds = %110
  %117 = ptrtoint %"struct.std::__1::pair.246"* %114 to i64
  %118 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %111, i64 -1, i32 0, i32 0, i32 1
  %119 = bitcast %"struct.std::__1::pair.246"** %118 to i64*
  store i64 %117, i64* %119, align 8
  %120 = bitcast %"struct.std::__1::pair.246"* %114 to i8*
  call void @_ZdlPv(i8* %120) #11
  br label %121

121:                                              ; preds = %116, %110
  %122 = icmp eq %"class.jxl::QuantizedSpline"* %112, %103
  br i1 %122, label %123, label %110

123:                                              ; preds = %121
  %124 = bitcast %"class.std::__1::vector.242"* %100 to i8**
  %125 = load i8*, i8** %124, align 8
  br label %126

126:                                              ; preds = %123, %105
  %127 = phi i8* [ %125, %123 ], [ %106, %105 ]
  store %"class.jxl::QuantizedSpline"* %103, %"class.jxl::QuantizedSpline"** %107, align 8
  call void @_ZdlPv(i8* %127) #11
  %128 = bitcast %"class.std::__1::vector.242"* %100 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %128, i8 0, i64 24, i1 false) #9
  br label %129

129:                                              ; preds = %126, %94
  %130 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %20, i64 0, i32 1, i32 0, i32 1
  %131 = bitcast %"class.std::__1::vector.242"* %101 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8
  %133 = bitcast %"class.std::__1::vector.242"* %100 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %133, align 8
  %134 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %20, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %135 = bitcast %"class.jxl::QuantizedSpline"** %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 9, i32 2, i32 1, i32 0, i32 2, i32 0, i32 0
  %138 = bitcast %"class.jxl::QuantizedSpline"** %137 to i64*
  store i64 %136, i64* %138, align 8
  %139 = bitcast %"class.std::__1::vector.242"* %101 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %139, i8 0, i64 24, i1 false) #9
  %140 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 9, i32 2, i32 2
  %141 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %20, i64 0, i32 2
  %142 = getelementptr inbounds %"class.std::__1::vector.257", %"class.std::__1::vector.257"* %140, i64 0, i32 0, i32 0
  %143 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %142, align 8
  %144 = icmp eq %"struct.jxl::Spline::Point"* %143, null
  br i1 %144, label %151, label %145

145:                                              ; preds = %129
  %146 = ptrtoint %"struct.jxl::Spline::Point"* %143 to i64
  %147 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 9, i32 2, i32 2, i32 0, i32 1
  %148 = bitcast %"struct.jxl::Spline::Point"** %147 to i64*
  store i64 %146, i64* %148, align 8
  %149 = bitcast %"struct.jxl::Spline::Point"* %143 to i8*
  call void @_ZdlPv(i8* %149) #11
  %150 = bitcast %"class.std::__1::vector.257"* %140 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %150, i8 0, i64 24, i1 false) #9
  br label %151

151:                                              ; preds = %129, %145
  %152 = bitcast %"class.std::__1::vector.257"* %141 to <2 x i64>*
  %153 = load <2 x i64>, <2 x i64>* %152, align 8
  %154 = bitcast %"class.std::__1::vector.257"* %140 to <2 x i64>*
  store <2 x i64> %153, <2 x i64>* %154, align 8
  %155 = getelementptr inbounds %"class.jxl::Splines", %"class.jxl::Splines"* %20, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %156 = bitcast %"struct.jxl::Spline::Point"** %155 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 9, i32 2, i32 2, i32 0, i32 2, i32 0, i32 0
  %159 = bitcast %"struct.jxl::Spline::Point"** %158 to i64*
  store i64 %157, i64* %159, align 8
  %160 = bitcast %"class.std::__1::vector.257"* %141 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %160, i8 0, i64 24, i1 false) #9
  %161 = getelementptr inbounds %"class.std::__1::vector.242", %"class.std::__1::vector.242"* %101, i64 0, i32 0, i32 0
  %162 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %161, align 8
  %163 = icmp eq %"class.jxl::QuantizedSpline"* %162, null
  br i1 %163, label %186, label %164

164:                                              ; preds = %151
  %165 = bitcast %"class.jxl::QuantizedSpline"* %162 to i8*
  %166 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %130, align 8
  %167 = icmp eq %"class.jxl::QuantizedSpline"* %166, %162
  br i1 %167, label %184, label %168

168:                                              ; preds = %164, %179
  %169 = phi %"class.jxl::QuantizedSpline"* [ %170, %179 ], [ %166, %164 ]
  %170 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %169, i64 -1
  %171 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %170, i64 0, i32 0, i32 0, i32 0
  %172 = load %"struct.std::__1::pair.246"*, %"struct.std::__1::pair.246"** %171, align 8
  %173 = icmp eq %"struct.std::__1::pair.246"* %172, null
  br i1 %173, label %179, label %174

174:                                              ; preds = %168
  %175 = ptrtoint %"struct.std::__1::pair.246"* %172 to i64
  %176 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %169, i64 -1, i32 0, i32 0, i32 1
  %177 = bitcast %"struct.std::__1::pair.246"** %176 to i64*
  store i64 %175, i64* %177, align 8
  %178 = bitcast %"struct.std::__1::pair.246"* %172 to i8*
  call void @_ZdlPv(i8* %178) #11
  br label %179

179:                                              ; preds = %174, %168
  %180 = icmp eq %"class.jxl::QuantizedSpline"* %170, %162
  br i1 %180, label %181, label %168

181:                                              ; preds = %179
  %182 = bitcast %"class.std::__1::vector.242"* %101 to i8**
  %183 = load i8*, i8** %182, align 8
  br label %184

184:                                              ; preds = %181, %164
  %185 = phi i8* [ %183, %181 ], [ %165, %164 ]
  store %"class.jxl::QuantizedSpline"* %162, %"class.jxl::QuantizedSpline"** %130, align 8
  call void @_ZdlPv(i8* %185) #11
  br label %186

186:                                              ; preds = %151, %184
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %95) #9
  %187 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %19, align 8
  %188 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 8
  %189 = call i32 @_ZNK3jxl7Splines12SubtractFromEPNS_6Image3IfEERKNS_19ColorCorrelationMapE(%"class.jxl::Splines"* %96, %"class.jxl::Image3"* %187, %"struct.jxl::ColorCorrelationMap"* dereferenceable(104) %188) #9
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %1499

191:                                              ; preds = %186
  %192 = load i32, i32* %91, align 4
  br label %193

193:                                              ; preds = %191, %90
  %194 = phi i32 [ %192, %191 ], [ %92, %90 ]
  %195 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 6, i32 19
  %196 = load i32, i32* %195, align 4
  switch i32 %196, label %197 [
    i32 1, label %199
    i32 0, label %204
  ]

197:                                              ; preds = %193
  %198 = icmp slt i32 %194, 4
  br i1 %198, label %199, label %204

199:                                              ; preds = %193, %197
  %200 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %19, align 8
  %201 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %18, align 8
  call void @_ZN3jxl23FindBestPatchDictionaryERKNS_6Image3IfEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEb(%"class.jxl::Image3"* dereferenceable(96) %200, %"struct.jxl::PassesEncoderState"* %201, %"class.jxl::ThreadPool"* %5, %"struct.jxl::AuxOut"* %6, i1 zeroext true) #9
  %202 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 9, i32 1
  %203 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %19, align 8
  call void @_ZN3jxl22PatchDictionaryEncoder12SubtractFromERKNS_15PatchDictionaryEPNS_6Image3IfEE(%"class.jxl::PatchDictionary"* dereferenceable(80) %202, %"class.jxl::Image3"* %203) #9
  br label %204

204:                                              ; preds = %193, %199, %197
  %205 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %29, i64 0, i32 0
  %206 = load float, float* %205, align 8
  %207 = call float @_ZN3jxl14InitialQuantDCEf(float %206) #9
  %208 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %18, align 8
  %209 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %208, i64 0, i32 0, i32 5
  %210 = load float, float* %205, align 8
  %211 = fdiv float 0x3FE947AE20000000, %210
  call void @_ZN3jxl9Quantizer26ComputeGlobalScaleAndQuantEfff(%"class.jxl::Quantizer"* %209, float %207, float %211, float 0.000000e+00) #9
  %212 = bitcast %"struct.jxl::ArControlFieldHeuristics"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %212) #9
  %213 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics", %"struct.jxl::ArControlFieldHeuristics"* %21, i64 0, i32 1
  %214 = bitcast %"class.jxl::Plane.226"** %213 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %214, i8 -86, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %212, i8 0, i64 24, i1 false) #9
  %215 = bitcast %"struct.jxl::AcStrategyHeuristics"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 328, i8* nonnull %215) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %215, i8* align 8 bitcast ({ { %"class.jxl::DequantMatrices"*, float, [4 x i8], float*, i64, float*, i64, [3 x float*], i64, float, float, float, float, float, [4 x i8] }, %"struct.jxl::PassesEncoderState"*, [54 x float] }* @__const._ZN3jxl24DefaultEncoderHeuristics20LossyFrameHeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPNS_10ThreadPoolEPNS_6AuxOutE.acs_heuristics to i8*), i64 328, i1 false)
  %216 = bitcast %"struct.jxl::CfLHeuristics"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %216) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %216, i8 0, i64 56, i1 false) #9
  %217 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %19, align 8
  %218 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %217, i64 0, i32 0, i64 0, i32 0, i32 0
  %219 = load i32, i32* %218, align 8
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %221, label %388

221:                                              ; preds = %204
  %222 = bitcast %"class.jxl::DefaultEncoderHeuristics"* %0 to i1 (%"class.jxl::DefaultEncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)***
  %223 = load i1 (%"class.jxl::DefaultEncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)**, i1 (%"class.jxl::DefaultEncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)*** %222, align 8
  %224 = getelementptr inbounds i1 (%"class.jxl::DefaultEncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)*, i1 (%"class.jxl::DefaultEncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)** %223, i64 4
  %225 = load i1 (%"class.jxl::DefaultEncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)*, i1 (%"class.jxl::DefaultEncoderHeuristics"*, %"struct.jxl::CompressParams"*, %"class.jxl::ImageBundle"*)** %224, align 8
  %226 = call zeroext i1 %225(%"class.jxl::DefaultEncoderHeuristics"* %0, %"struct.jxl::CompressParams"* dereferenceable(360) %29, %"class.jxl::ImageBundle"* dereferenceable(368) %3) #9
  br i1 %226, label %230, label %227

227:                                              ; preds = %221
  %228 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 317, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.5, i64 0, i64 0)) #9
  %229 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

230:                                              ; preds = %221
  %231 = bitcast %"class.jxl::Image3"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %231) #9
  %232 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %233 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %232, align 8
  %234 = icmp eq %"struct.jxl::jpeg::JPEGData"* %233, null
  br i1 %234, label %235, label %248

235:                                              ; preds = %230
  %236 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %237 = load i32, i32* %236, align 8
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %239, label %257

239:                                              ; preds = %235
  %240 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %241 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %240, align 8
  %242 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %243 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %242, align 8
  %244 = icmp eq %"class.jxl::Plane"* %241, %243
  br i1 %244, label %257, label %245

245:                                              ; preds = %239
  %246 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %241, i64 0, i32 0, i32 0
  %247 = load i32, i32* %246, align 8
  br label %257

248:                                              ; preds = %230
  %249 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %233, i64 0, i32 1
  %250 = load i32, i32* %249, align 8
  %251 = sext i32 %250 to i64
  %252 = add nsw i64 %251, 7
  %253 = and i64 %252, -8
  %254 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %233, i64 0, i32 2
  %255 = load i32, i32* %254, align 4
  %256 = sext i32 %255 to i64
  br label %276

257:                                              ; preds = %235, %239, %245
  %258 = phi i32 [ %237, %235 ], [ 0, %239 ], [ %247, %245 ]
  %259 = zext i32 %258 to i64
  %260 = add nuw nsw i64 %259, 7
  %261 = and i64 %260, 8589934584
  %262 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  %265 = icmp eq i32 %263, 0
  br i1 %265, label %266, label %276

266:                                              ; preds = %257
  %267 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %268 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %267, align 8
  %269 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %270 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %269, align 8
  %271 = icmp eq %"class.jxl::Plane"* %268, %270
  br i1 %271, label %276, label %272

272:                                              ; preds = %266
  %273 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %268, i64 0, i32 0, i32 1
  %274 = load i32, i32* %273, align 4
  %275 = zext i32 %274 to i64
  br label %276

276:                                              ; preds = %248, %257, %266, %272
  %277 = phi i64 [ %253, %248 ], [ %261, %272 ], [ %261, %266 ], [ %261, %257 ]
  %278 = phi i64 [ %256, %248 ], [ %275, %272 ], [ 0, %266 ], [ %264, %257 ]
  %279 = add nsw i64 %278, 7
  %280 = and i64 %279, -8
  %281 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %24, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %281, i64 %277, i64 %280, i64 4) #9
  %282 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %24, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %282, i64 %277, i64 %280, i64 4) #9
  %283 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %24, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %283, i64 %277, i64 %280, i64 4) #9
  %284 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %19, align 8
  %285 = bitcast %"class.jxl::Image3"* %284 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %285, i8* nonnull align 8 %231, i64 24, i1 false) #9
  %286 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %284, i64 0, i32 0, i64 0, i32 0, i32 5
  %287 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %24, i64 0, i32 0, i64 0, i32 0, i32 5
  %288 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %287, i64 0, i32 0, i32 0, i32 0
  %289 = bitcast %"class.std::__1::unique_ptr"* %287 to i64*
  %290 = load i64, i64* %289, align 8
  store i8* null, i8** %288, align 8
  %291 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %286, i64 0, i32 0, i32 0, i32 0
  %292 = load i8*, i8** %291, align 8
  %293 = bitcast %"class.std::__1::unique_ptr"* %286 to i64*
  store i64 %290, i64* %293, align 8
  %294 = icmp eq i8* %292, null
  br i1 %294, label %296, label %295

295:                                              ; preds = %276
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %292) #9
  br label %296

296:                                              ; preds = %295, %276
  %297 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %24, i64 0, i32 0, i64 1
  %298 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %284, i64 0, i32 0, i64 1
  %299 = bitcast %"class.jxl::Plane"* %298 to i8*
  %300 = bitcast %"class.jxl::Plane"* %297 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %299, i8* align 8 %300, i64 24, i1 false) #9
  %301 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %284, i64 0, i32 0, i64 1, i32 0, i32 5
  %302 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %24, i64 0, i32 0, i64 1, i32 0, i32 5
  %303 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %302, i64 0, i32 0, i32 0, i32 0
  %304 = bitcast %"class.std::__1::unique_ptr"* %302 to i64*
  %305 = load i64, i64* %304, align 8
  store i8* null, i8** %303, align 8
  %306 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %301, i64 0, i32 0, i32 0, i32 0
  %307 = load i8*, i8** %306, align 8
  %308 = bitcast %"class.std::__1::unique_ptr"* %301 to i64*
  store i64 %305, i64* %308, align 8
  %309 = icmp eq i8* %307, null
  br i1 %309, label %311, label %310

310:                                              ; preds = %296
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %307) #9
  br label %311

311:                                              ; preds = %310, %296
  %312 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %24, i64 0, i32 0, i64 2
  %313 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %284, i64 0, i32 0, i64 2
  %314 = bitcast %"class.jxl::Plane"* %313 to i8*
  %315 = bitcast %"class.jxl::Plane"* %312 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %314, i8* align 8 %315, i64 24, i1 false) #9
  %316 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %284, i64 0, i32 0, i64 2, i32 0, i32 5
  %317 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %24, i64 0, i32 0, i64 2, i32 0, i32 5
  %318 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %317, i64 0, i32 0, i32 0, i32 0
  %319 = bitcast %"class.std::__1::unique_ptr"* %317 to i64*
  %320 = load i64, i64* %319, align 8
  store i8* null, i8** %318, align 8
  %321 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %316, i64 0, i32 0, i32 0, i32 0
  %322 = load i8*, i8** %321, align 8
  %323 = bitcast %"class.std::__1::unique_ptr"* %316 to i64*
  store i64 %320, i64* %323, align 8
  %324 = icmp eq i8* %322, null
  br i1 %324, label %326, label %325

325:                                              ; preds = %311
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %322) #9
  br label %326

326:                                              ; preds = %311, %325
  %327 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %24, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %328 = load i8*, i8** %327, align 8
  store i8* null, i8** %327, align 8
  %329 = icmp eq i8* %328, null
  br i1 %329, label %331, label %330

330:                                              ; preds = %326
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %328) #9
  br label %331

331:                                              ; preds = %330, %326
  %332 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %24, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %333 = load i8*, i8** %332, align 8
  store i8* null, i8** %332, align 8
  %334 = icmp eq i8* %333, null
  br i1 %334, label %336, label %335

335:                                              ; preds = %331
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %333) #9
  br label %336

336:                                              ; preds = %335, %331
  %337 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %24, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %338 = load i8*, i8** %337, align 8
  store i8* null, i8** %337, align 8
  %339 = icmp eq i8* %338, null
  br i1 %339, label %341, label %340

340:                                              ; preds = %336
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %338) #9
  br label %341

341:                                              ; preds = %336, %340
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %231) #9
  %342 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %19, align 8
  %343 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %232, align 8
  %344 = icmp eq %"struct.jxl::jpeg::JPEGData"* %343, null
  br i1 %344, label %345, label %358

345:                                              ; preds = %341
  %346 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %347 = load i32, i32* %346, align 8
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %365

349:                                              ; preds = %345
  %350 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %351 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %350, align 8
  %352 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %353 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %352, align 8
  %354 = icmp eq %"class.jxl::Plane"* %351, %353
  br i1 %354, label %365, label %355

355:                                              ; preds = %349
  %356 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %351, i64 0, i32 0, i32 0
  %357 = load i32, i32* %356, align 8
  br label %365

358:                                              ; preds = %341
  %359 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %343, i64 0, i32 1
  %360 = load i32, i32* %359, align 8
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %343, i64 0, i32 2
  %363 = load i32, i32* %362, align 4
  %364 = sext i32 %363 to i64
  br label %382

365:                                              ; preds = %345, %349, %355
  %366 = phi i32 [ %347, %345 ], [ 0, %349 ], [ %357, %355 ]
  %367 = zext i32 %366 to i64
  %368 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %369 = load i32, i32* %368, align 4
  %370 = zext i32 %369 to i64
  %371 = icmp eq i32 %369, 0
  br i1 %371, label %372, label %382

372:                                              ; preds = %365
  %373 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 0
  %374 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %373, align 8
  %375 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 12, i32 0, i32 1
  %376 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %375, align 8
  %377 = icmp eq %"class.jxl::Plane"* %374, %376
  br i1 %377, label %382, label %378

378:                                              ; preds = %372
  %379 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %374, i64 0, i32 0, i32 1
  %380 = load i32, i32* %379, align 4
  %381 = zext i32 %380 to i64
  br label %382

382:                                              ; preds = %358, %365, %372, %378
  %383 = phi i64 [ %361, %358 ], [ %367, %378 ], [ %367, %372 ], [ %367, %365 ]
  %384 = phi i64 [ %364, %358 ], [ %381, %378 ], [ 0, %372 ], [ %370, %365 ]
  call void @_ZN3jxl6Image3IfE8ShrinkToEmm(%"class.jxl::Image3"* %342, i64 %383, i64 %384)
  %385 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %19, align 8
  %386 = call %"class.jxl::ImageBundle"* @_ZN3jxl5ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS0_(%"class.jxl::ImageBundle"* dereferenceable(368) %3, %"class.jxl::ThreadPool"* %5, %"class.jxl::Image3"* %385, %"class.jxl::ImageBundle"* null) #9
  %387 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %19, align 8
  call void @_ZN3jxl30PadImageToBlockMultipleInPlaceEPNS_6Image3IfEE(%"class.jxl::Image3"* %387) #9
  br label %388

388:                                              ; preds = %204, %382
  %389 = load i32, i32* %91, align 4
  %390 = icmp sgt i32 %389, 5
  br i1 %390, label %395, label %391

391:                                              ; preds = %388
  %392 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 6, i32 3
  %393 = load float, float* %392, align 4
  %394 = fcmp ogt float %393, 0.000000e+00
  br i1 %394, label %395, label %473

395:                                              ; preds = %391, %388
  %396 = bitcast %"class.jxl::Plane"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %396) #9
  %397 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 2, i32 8
  %398 = load i64, i64* %397, align 8
  %399 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 2, i32 9
  %400 = load i64, i64* %399, align 8
  %401 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %25, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %401, i64 %398, i64 %400, i64 4) #9
  %402 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %18, align 8
  %403 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %402, i64 0, i32 1
  %404 = bitcast %"class.jxl::Plane"* %403 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %404, i8* nonnull align 8 %396, i64 24, i1 false) #9
  %405 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %402, i64 0, i32 1, i32 0, i32 5
  %406 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %25, i64 0, i32 0, i32 5
  %407 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %406, i64 0, i32 0, i32 0, i32 0
  %408 = bitcast %"class.std::__1::unique_ptr"* %406 to i64*
  %409 = load i64, i64* %408, align 8
  store i8* null, i8** %407, align 8
  %410 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %405, i64 0, i32 0, i32 0, i32 0
  %411 = load i8*, i8** %410, align 8
  %412 = bitcast %"class.std::__1::unique_ptr"* %405 to i64*
  store i64 %409, i64* %412, align 8
  %413 = icmp eq i8* %411, null
  br i1 %413, label %414, label %416

414:                                              ; preds = %395
  %415 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %25, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %415, align 8
  br label %422

416:                                              ; preds = %395
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %411) #9
  %417 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %25, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %418 = load i8*, i8** %417, align 8
  %419 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %25, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %419, align 8
  %420 = icmp eq i8* %418, null
  br i1 %420, label %422, label %421

421:                                              ; preds = %416
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %418) #9
  br label %422

422:                                              ; preds = %414, %416, %421
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %396) #9
  %423 = load i32, i32* %91, align 4
  %424 = icmp eq i32 %423, 7
  %425 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 6, i32 3
  %426 = load float, float* %425, align 4
  %427 = fcmp ogt float %426, 0.000000e+00
  %428 = or i1 %424, %427
  br i1 %428, label %429, label %506

429:                                              ; preds = %422
  %430 = fcmp ogt float %426, 0.000000e+00
  br i1 %430, label %434, label %431

431:                                              ; preds = %429
  %432 = load float, float* %205, align 8
  %433 = fdiv float 0x3FE947AE20000000, %432
  br label %434

434:                                              ; preds = %429, %431
  %435 = phi float [ %433, %431 ], [ %426, %429 ]
  %436 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %18, align 8
  %437 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %436, i64 0, i32 1, i32 0, i32 1
  %438 = load i32, i32* %437, align 4
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %506, label %440

440:                                              ; preds = %434
  %441 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %436, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %442 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %436, i64 0, i32 1, i32 0, i32 4
  %443 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %436, i64 0, i32 1, i32 0, i32 0
  %444 = load i32, i32* %443, align 8
  br label %445

445:                                              ; preds = %460, %440
  %446 = phi i32 [ %438, %440 ], [ %461, %460 ]
  %447 = phi i32 [ %444, %440 ], [ %462, %460 ]
  %448 = phi i64 [ 0, %440 ], [ %463, %460 ]
  %449 = load i8*, i8** %441, align 8
  %450 = load i64, i64* %442, align 8
  %451 = mul i64 %450, %448
  %452 = getelementptr inbounds i8, i8* %449, i64 %451
  %453 = ptrtoint i8* %452 to i64
  %454 = and i64 %453, 63
  %455 = icmp eq i64 %454, 0
  call void @llvm.assume(i1 %455) #9
  %456 = bitcast i8* %452 to float*
  %457 = icmp eq i32 %447, 0
  br i1 %457, label %460, label %466

458:                                              ; preds = %466
  %459 = load i32, i32* %437, align 4
  br label %460

460:                                              ; preds = %458, %445
  %461 = phi i32 [ %459, %458 ], [ %446, %445 ]
  %462 = phi i32 [ %470, %458 ], [ 0, %445 ]
  %463 = add nuw nsw i64 %448, 1
  %464 = zext i32 %461 to i64
  %465 = icmp ult i64 %463, %464
  br i1 %465, label %445, label %506

466:                                              ; preds = %445, %466
  %467 = phi i64 [ %469, %466 ], [ 0, %445 ]
  %468 = getelementptr inbounds float, float* %456, i64 %467
  store float %435, float* %468, align 4
  %469 = add nuw nsw i64 %467, 1
  %470 = load i32, i32* %443, align 8
  %471 = zext i32 %470 to i64
  %472 = icmp ult i64 %469, %471
  br i1 %472, label %466, label %458

473:                                              ; preds = %391
  %474 = load float, float* %205, align 8
  %475 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 1, i32 26, i32 2
  %476 = load i8, i8* %475, align 1, !range !2
  %477 = icmp eq i8 %476, 0
  %478 = fmul float %474, 0x3FE75C2900000000
  %479 = select i1 %477, float %478, float %474
  %480 = bitcast %"class.jxl::Plane"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %480) #9
  %481 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %19, align 8
  %482 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 2
  %483 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %18, align 8
  %484 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %483, i64 0, i32 2
  call void @_ZN3jxl17InitialQuantFieldEfRKNS_6Image3IfEERKNS_15FrameDimensionsEPNS_10ThreadPoolEfPNS_5PlaneIfEE(%"class.jxl::Plane"* nonnull sret %26, float %479, %"class.jxl::Image3"* dereferenceable(96) %481, %"struct.jxl::FrameDimensions"* dereferenceable(144) %482, %"class.jxl::ThreadPool"* %5, float 1.000000e+00, %"class.jxl::Plane"* %484) #9
  %485 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %18, align 8
  %486 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %485, i64 0, i32 1
  %487 = bitcast %"class.jxl::Plane"* %486 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %487, i8* nonnull align 8 %480, i64 24, i1 false) #9
  %488 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %485, i64 0, i32 1, i32 0, i32 5
  %489 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %26, i64 0, i32 0, i32 5
  %490 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %489, i64 0, i32 0, i32 0, i32 0
  %491 = bitcast %"class.std::__1::unique_ptr"* %489 to i64*
  %492 = load i64, i64* %491, align 8
  store i8* null, i8** %490, align 8
  %493 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %488, i64 0, i32 0, i32 0, i32 0
  %494 = load i8*, i8** %493, align 8
  %495 = bitcast %"class.std::__1::unique_ptr"* %488 to i64*
  store i64 %492, i64* %495, align 8
  %496 = icmp eq i8* %494, null
  br i1 %496, label %497, label %499

497:                                              ; preds = %473
  %498 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %26, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %498, align 8
  br label %505

499:                                              ; preds = %473
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %494) #9
  %500 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %26, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %501 = load i8*, i8** %500, align 8
  %502 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %26, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %502, align 8
  %503 = icmp eq i8* %501, null
  br i1 %503, label %505, label %504

504:                                              ; preds = %499
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %501) #9
  br label %505

505:                                              ; preds = %497, %499, %504
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %480) #9
  br label %506

506:                                              ; preds = %460, %422, %434, %505
  %507 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %1, i64 0, i32 0, i32 1, i32 26, i32 2
  %508 = load i8, i8* %507, align 1, !range !2
  %509 = icmp eq i8 %508, 0
  br i1 %509, label %512, label %510

510:                                              ; preds = %506
  %511 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %19, align 8
  call void @_ZN3jxl15GaborishInverseEPNS_6Image3IfEEfPNS_10ThreadPoolE(%"class.jxl::Image3"* %511, float 0x3FEFB50D60000000, %"class.jxl::ThreadPool"* %5) #9
  br label %512

512:                                              ; preds = %506, %510
  %513 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %19, align 8
  call void @_ZN3jxl13CfLHeuristics4InitERKNS_6Image3IfEE(%"struct.jxl::CfLHeuristics"* nonnull %23, %"class.jxl::Image3"* dereferenceable(96) %513) #9
  %514 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %19, align 8
  %515 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %18, align 8
  call void @_ZN3jxl20AcStrategyHeuristics4InitERKNS_6Image3IfEEPNS_18PassesEncoderStateE(%"struct.jxl::AcStrategyHeuristics"* nonnull %22, %"class.jxl::Image3"* dereferenceable(96) %514, %"struct.jxl::PassesEncoderState"* %515) #9
  %516 = bitcast %class.anon* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %516) #9
  %517 = getelementptr inbounds %class.anon, %class.anon* %27, i64 0, i32 0
  store %"struct.jxl::PassesEncoderState"** %18, %"struct.jxl::PassesEncoderState"*** %517, align 8
  %518 = getelementptr inbounds %class.anon, %class.anon* %27, i64 0, i32 1
  store %"struct.jxl::CompressParams"* %29, %"struct.jxl::CompressParams"** %518, align 8
  %519 = getelementptr inbounds %class.anon, %class.anon* %27, i64 0, i32 2
  store %"struct.jxl::CfLHeuristics"* %23, %"struct.jxl::CfLHeuristics"** %519, align 8
  %520 = getelementptr inbounds %class.anon, %class.anon* %27, i64 0, i32 3
  store %"class.jxl::Image3"** %19, %"class.jxl::Image3"*** %520, align 8
  %521 = getelementptr inbounds %class.anon, %class.anon* %27, i64 0, i32 4
  store %"struct.jxl::AcStrategyHeuristics"* %22, %"struct.jxl::AcStrategyHeuristics"** %521, align 8
  %522 = getelementptr inbounds %class.anon, %class.anon* %27, i64 0, i32 5
  store %"struct.jxl::ArControlFieldHeuristics"* %21, %"struct.jxl::ArControlFieldHeuristics"** %522, align 8
  %523 = getelementptr inbounds %class.anon, %class.anon* %27, i64 0, i32 6
  store %"class.jxl::Quantizer"* %209, %"class.jxl::Quantizer"** %523, align 8
  %524 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %18, align 8
  %525 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %524, i64 0, i32 0, i32 2, i32 8
  %526 = load i64, i64* %525, align 8
  %527 = add i64 %526, 7
  %528 = lshr i64 %527, 3
  %529 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %524, i64 0, i32 0, i32 2, i32 9
  %530 = load i64, i64* %529, align 8
  %531 = add i64 %530, 7
  %532 = lshr i64 %531, 3
  %533 = mul i64 %532, %528
  %534 = trunc i64 %533 to i32
  %535 = bitcast %class.anon.329* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %535) #9
  %536 = getelementptr inbounds %class.anon.329, %class.anon.329* %28, i64 0, i32 0
  store %"struct.jxl::ArControlFieldHeuristics"* %21, %"struct.jxl::ArControlFieldHeuristics"** %536, align 8
  %537 = getelementptr inbounds %class.anon.329, %class.anon.329* %28, i64 0, i32 1
  store %"struct.jxl::CfLHeuristics"* %23, %"struct.jxl::CfLHeuristics"** %537, align 8
  %538 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %538) #9
  store double 0xFFFFFFFFFFFFFFFF, double* %10, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), double* nonnull %10) #9
  %539 = icmp eq %"class.jxl::ThreadPool"* %5, null
  br i1 %539, label %540, label %551

540:                                              ; preds = %512
  %541 = bitcast %"class.jxl::ThreadPool"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %541) #9
  %542 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 0
  %543 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %542, align 8
  %544 = bitcast i8** %543 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %11, %"class.jxl::ThreadPool"** %544, align 8
  %545 = icmp eq i32 %534, 0
  br i1 %545, label %562, label %546

546:                                              ; preds = %540
  %547 = bitcast %"class.jxl::ThreadPool::RunCallState"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %547) #9
  %548 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %8, i64 0, i32 0
  %549 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %8, i64 0, i32 1
  store %class.anon.329* %28, %class.anon.329** %548, align 8
  store %class.anon* %27, %class.anon** %549, align 8
  %550 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %541, i8* nonnull %547, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_24DefaultEncoderHeuristics20LossyFrameHeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_0ZNS2_20LossyFrameHeuristicsES4_S6_S9_SC_SD_SF_E3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_24DefaultEncoderHeuristics20LossyFrameHeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_0ZNS2_20LossyFrameHeuristicsES4_S6_S9_SC_SD_SF_E3$_1E12CallDataFuncEPvjm", i32 0, i32 %534) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %547) #9
  br label %562

551:                                              ; preds = %512
  %552 = icmp eq i32 %534, 0
  br i1 %552, label %564, label %553

553:                                              ; preds = %551
  %554 = bitcast %"class.jxl::ThreadPool::RunCallState"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %554) #9
  %555 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %9, i64 0, i32 0
  %556 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %9, i64 0, i32 1
  store %class.anon.329* %28, %class.anon.329** %555, align 8
  store %class.anon* %27, %class.anon** %556, align 8
  %557 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 0
  %558 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %557, align 8
  %559 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 1
  %560 = load i8*, i8** %559, align 8
  %561 = call i32 %558(i8* %560, i8* nonnull %554, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_24DefaultEncoderHeuristics20LossyFrameHeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_0ZNS2_20LossyFrameHeuristicsES4_S6_S9_SC_SD_SF_E3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_24DefaultEncoderHeuristics20LossyFrameHeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_0ZNS2_20LossyFrameHeuristicsES4_S6_S9_SC_SD_SF_E3$_1E12CallDataFuncEPvjm", i32 0, i32 %534) #9
  br label %562

562:                                              ; preds = %540, %546, %553
  %563 = phi i8* [ %554, %553 ], [ %541, %546 ], [ %541, %540 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %563) #9
  br label %564

564:                                              ; preds = %562, %551
  %565 = load double, double* %10, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), double %565) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %538) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %535) #9
  call void @_ZN3jxl20AcStrategyHeuristics8FinalizeEPNS_6AuxOutE(%"struct.jxl::AcStrategyHeuristics"* nonnull %22, %"struct.jxl::AuxOut"* %6) #9
  %566 = load i32, i32* %91, align 4
  %567 = icmp slt i32 %566, 6
  br i1 %567, label %568, label %572

568:                                              ; preds = %564
  %569 = icmp sgt i32 %566, 3
  %570 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %18, align 8
  %571 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %570, i64 0, i32 0, i32 8
  call void @_ZN3jxl13CfLHeuristics9ComputeDCEbPNS_19ColorCorrelationMapE(%"struct.jxl::CfLHeuristics"* nonnull %23, i1 zeroext %569, %"struct.jxl::ColorCorrelationMap"* %571) #9
  br label %572

572:                                              ; preds = %568, %564
  %573 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %18, align 8
  %574 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %573, i64 0, i32 0, i32 4
  call void @_ZN3jxl23FindBestDequantMatricesERKNS_14CompressParamsERKNS_6Image3IfEEPNS_19ModularFrameEncoderEPNS_15DequantMatricesE(%"struct.jxl::CompressParams"* dereferenceable(360) %29, %"class.jxl::Image3"* dereferenceable(96) undef, %"class.jxl::ModularFrameEncoder"* %2, %"class.jxl::DequantMatrices"* %574)
  %575 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %19, align 8
  %576 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %18, align 8
  call void @_ZN3jxl17FindBestQuantizerEPKNS_11ImageBundleERKNS_6Image3IfEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEd(%"class.jxl::ImageBundle"* %3, %"class.jxl::Image3"* dereferenceable(96) %575, %"struct.jxl::PassesEncoderState"* %576, %"class.jxl::ThreadPool"* %5, %"struct.jxl::AuxOut"* %6, double 1.000000e+00) #9
  %577 = load i32, i32* %91, align 4
  %578 = icmp eq i32 %577, 7
  br i1 %578, label %1450, label %579

579:                                              ; preds = %572
  %580 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %18, align 8
  %581 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 6, i32 8
  %582 = load i64, i64* %581, align 8
  %583 = icmp eq i64 %582, 0
  br i1 %583, label %690, label %584

584:                                              ; preds = %579
  %585 = bitcast %"struct.jxl::BlockCtxMap"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %585) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %585, i8 -86, i64 136, i1 false) #9
  %586 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 0, i32 15
  call void @_ZN3jxl11BlockCtxMapC2ERKS0_(%"struct.jxl::BlockCtxMap"* nonnull %13, %"struct.jxl::BlockCtxMap"* dereferenceable(136) %586) #9
  %587 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 2
  %588 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %589 = bitcast i8** %588 to i64*
  %590 = load i64, i64* %589, align 8
  %591 = bitcast %"class.std::__1::vector.11"* %587 to i64*
  %592 = load i64, i64* %591, align 8
  %593 = sub i64 %590, %592
  %594 = icmp ult i64 %593, 39
  %595 = inttoptr i64 %592 to i8*
  br i1 %594, label %621, label %596

596:                                              ; preds = %584
  %597 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 2, i32 0, i32 1
  %598 = bitcast i8** %597 to i64*
  %599 = load i64, i64* %598, align 8
  %600 = sub i64 %599, %592
  %601 = icmp ult i64 %600, 39
  %602 = getelementptr inbounds [39 x i8], [39 x i8]* @_ZZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS_18PassesEncoderStateEE13kSimpleCtxMap, i64 0, i64 %600
  %603 = select i1 %601, i8* %602, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @_ZZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS_18PassesEncoderStateEE13kSimpleCtxMap, i64 1, i64 0)
  %604 = ptrtoint i8* %603 to i64
  %605 = sub i64 %604, ptrtoint ([39 x i8]* @_ZZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS_18PassesEncoderStateEE13kSimpleCtxMap to i64)
  %606 = icmp eq i64 %605, 0
  br i1 %606, label %608, label %607

607:                                              ; preds = %596
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %595, i8* align 16 getelementptr inbounds ([39 x i8], [39 x i8]* @_ZZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS_18PassesEncoderStateEE13kSimpleCtxMap, i64 0, i64 0), i64 %605, i1 false) #9
  br label %608

608:                                              ; preds = %607, %596
  br i1 %601, label %609, label %619

609:                                              ; preds = %608
  %610 = load i64, i64* %598, align 8
  %611 = sub i64 ptrtoint (i8* getelementptr inbounds ([39 x i8], [39 x i8]* @_ZZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS_18PassesEncoderStateEE13kSimpleCtxMap, i64 1, i64 0) to i64), %604
  %612 = icmp sgt i64 %611, 0
  br i1 %612, label %613, label %617

613:                                              ; preds = %609
  %614 = inttoptr i64 %610 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %614, i8* align 1 %603, i64 %611, i1 false) #9
  %615 = getelementptr inbounds i8, i8* %614, i64 %611
  %616 = ptrtoint i8* %615 to i64
  br label %617

617:                                              ; preds = %613, %609
  %618 = phi i64 [ %616, %613 ], [ %610, %609 ]
  store i64 %618, i64* %598, align 8
  br label %643

619:                                              ; preds = %608
  %620 = getelementptr inbounds i8, i8* %595, i64 %605
  store i8* %620, i8** %597, align 8
  br label %643

621:                                              ; preds = %584
  %622 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %587, i64 0, i32 0, i32 0
  %623 = icmp eq i64 %592, 0
  br i1 %623, label %628, label %624

624:                                              ; preds = %621
  %625 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 2, i32 0, i32 1
  %626 = bitcast i8** %625 to i64*
  store i64 %592, i64* %626, align 8
  call void @_ZdlPv(i8* nonnull %595) #11
  %627 = bitcast %"class.std::__1::vector.11"* %587 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %627, i8 0, i64 24, i1 false) #9
  br label %630

628:                                              ; preds = %621
  %629 = icmp ult i64 %590, 4611686018427387903
  br i1 %629, label %630, label %635

630:                                              ; preds = %628, %624
  %631 = phi i64 [ 0, %624 ], [ %590, %628 ]
  %632 = shl i64 %631, 1
  %633 = icmp ugt i64 %632, 39
  %634 = select i1 %633, i64 %632, i64 39
  br label %635

635:                                              ; preds = %630, %628
  %636 = phi i64 [ %634, %630 ], [ 9223372036854775807, %628 ]
  %637 = call i8* @_Znwm(i64 %636) #11
  %638 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 2, i32 0, i32 1
  store i8* %637, i8** %622, align 8
  %639 = getelementptr inbounds i8, i8* %637, i64 %636
  store i8* %639, i8** %588, align 8
  %640 = bitcast i8** %638 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %637, i8* align 16 getelementptr inbounds ([39 x i8], [39 x i8]* @_ZZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS_18PassesEncoderStateEE13kSimpleCtxMap, i64 0, i64 0), i64 39, i1 false) #9
  %641 = getelementptr inbounds i8, i8* %637, i64 39
  %642 = ptrtoint i8* %641 to i64
  store i64 %642, i64* %640, align 8
  br label %643

643:                                              ; preds = %635, %619, %617
  %644 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 3
  %645 = bitcast i64* %644 to <2 x i64>*
  store <2 x i64> <i64 2, i64 1>, <2 x i64>* %645, align 8
  %646 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 2, i32 0, i32 0
  %647 = load i8*, i8** %646, align 8
  %648 = icmp eq i8* %647, null
  br i1 %648, label %653, label %649

649:                                              ; preds = %643
  %650 = ptrtoint i8* %647 to i64
  %651 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 2, i32 0, i32 1
  %652 = bitcast i8** %651 to i64*
  store i64 %650, i64* %652, align 8
  call void @_ZdlPv(i8* nonnull %647) #11
  br label %653

653:                                              ; preds = %649, %643
  %654 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 1, i32 0, i32 0
  %655 = load i32*, i32** %654, align 8
  %656 = icmp eq i32* %655, null
  br i1 %656, label %662, label %657

657:                                              ; preds = %653
  %658 = ptrtoint i32* %655 to i64
  %659 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 1, i32 0, i32 1
  %660 = bitcast i32** %659 to i64*
  store i64 %658, i64* %660, align 8
  %661 = bitcast i32* %655 to i8*
  call void @_ZdlPv(i8* %661) #11
  br label %662

662:                                              ; preds = %657, %653
  %663 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 0, i64 2, i32 0, i32 0
  %664 = load i32*, i32** %663, align 8
  %665 = icmp eq i32* %664, null
  br i1 %665, label %671, label %666

666:                                              ; preds = %662
  %667 = ptrtoint i32* %664 to i64
  %668 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 0, i64 2, i32 0, i32 1
  %669 = bitcast i32** %668 to i64*
  store i64 %667, i64* %669, align 8
  %670 = bitcast i32* %664 to i8*
  call void @_ZdlPv(i8* %670) #11
  br label %671

671:                                              ; preds = %666, %662
  %672 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 0, i64 1, i32 0, i32 0
  %673 = load i32*, i32** %672, align 8
  %674 = icmp eq i32* %673, null
  br i1 %674, label %680, label %675

675:                                              ; preds = %671
  %676 = ptrtoint i32* %673 to i64
  %677 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 0, i64 1, i32 0, i32 1
  %678 = bitcast i32** %677 to i64*
  store i64 %676, i64* %678, align 8
  %679 = bitcast i32* %673 to i8*
  call void @_ZdlPv(i8* %679) #11
  br label %680

680:                                              ; preds = %675, %671
  %681 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 0, i64 0, i32 0, i32 0
  %682 = load i32*, i32** %681, align 8
  %683 = icmp eq i32* %682, null
  br i1 %683, label %689, label %684

684:                                              ; preds = %680
  %685 = ptrtoint i32* %682 to i64
  %686 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %13, i64 0, i32 0, i64 0, i32 0, i32 1
  %687 = bitcast i32** %686 to i64*
  store i64 %685, i64* %687, align 8
  %688 = bitcast i32* %682 to i8*
  call void @_ZdlPv(i8* %688) #11
  br label %689

689:                                              ; preds = %684, %680
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %585) #9
  br label %1450

690:                                              ; preds = %579
  %691 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 6, i32 7
  %692 = load i32, i32* %691, align 4
  %693 = icmp eq i32 %692, 7
  br i1 %693, label %1450, label %694

694:                                              ; preds = %690
  %695 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 0, i32 6, i32 0, i32 0
  %696 = load i32, i32* %695, align 8
  %697 = zext i32 %696 to i64
  %698 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 0, i32 6, i32 0, i32 1
  %699 = load i32, i32* %698, align 4
  %700 = zext i32 %699 to i64
  %701 = mul nuw i64 %700, %697
  %702 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 6, i32 0
  %703 = load float, float* %702, align 8
  %704 = fmul float %703, 1.024000e+03
  %705 = fptoui float %704 to i64
  %706 = icmp ult i64 %701, %705
  br i1 %706, label %1450, label %707

707:                                              ; preds = %694
  %708 = call i8* @_Znwm(i64 28776) #11
  %709 = bitcast i8* %708 to %struct.OccCounters*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %708, i8 0, i64 28776, i1 false) #9
  %710 = icmp eq i32 %699, 0
  br i1 %710, label %763, label %711

711:                                              ; preds = %707
  %712 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 0, i32 6, i32 0, i32 5, i32 0, i32 0, i32 0
  %713 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 0, i32 6, i32 0, i32 4
  %714 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 0, i32 3, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %715 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 0, i32 3, i32 0, i32 0, i32 4
  %716 = load i8*, i8** %712, align 8
  %717 = load i64, i64* %713, align 8
  %718 = load i8*, i8** %714, align 8
  %719 = load i64, i64* %715, align 8
  br label %720

720:                                              ; preds = %735, %711
  %721 = phi i32 [ %696, %711 ], [ %736, %735 ]
  %722 = phi i64 [ 0, %711 ], [ %737, %735 ]
  %723 = mul i64 %722, %717
  %724 = getelementptr inbounds i8, i8* %716, i64 %723
  %725 = ptrtoint i8* %724 to i64
  %726 = and i64 %725, 63
  %727 = icmp eq i64 %726, 0
  call void @llvm.assume(i1 %727) #9
  %728 = bitcast i8* %724 to i32*
  %729 = mul i64 %722, %719
  %730 = getelementptr inbounds i8, i8* %718, i64 %729
  %731 = ptrtoint i8* %730 to i64
  %732 = and i64 %731, 63
  %733 = icmp eq i64 %732, 0
  call void @llvm.assume(i1 %733) #9
  %734 = icmp eq i32 %721, 0
  br i1 %734, label %735, label %739

735:                                              ; preds = %739, %720
  %736 = phi i32 [ 0, %720 ], [ %696, %739 ]
  %737 = add nuw nsw i64 %722, 1
  %738 = icmp eq i64 %737, %700
  br i1 %738, label %763, label %720

739:                                              ; preds = %720, %739
  %740 = phi i64 [ %761, %739 ], [ 0, %720 ]
  %741 = getelementptr inbounds i8, i8* %730, i64 %740
  %742 = load i8, i8* %741, align 1
  %743 = lshr i8 %742, 1
  %744 = zext i8 %743 to i64
  %745 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %744
  %746 = load i8, i8* %745, align 1
  %747 = getelementptr inbounds i32, i32* %728, i64 %740
  %748 = load i32, i32* %747, align 4
  %749 = add nsw i32 %748, -1
  %750 = sext i32 %749 to i64
  %751 = getelementptr inbounds %struct.OccCounters, %struct.OccCounters* %709, i64 0, i32 0, i64 %750
  %752 = load i64, i64* %751, align 8
  %753 = add i64 %752, 1
  store i64 %753, i64* %751, align 8
  %754 = zext i8 %746 to i64
  %755 = getelementptr inbounds %struct.OccCounters, %struct.OccCounters* %709, i64 0, i32 1, i64 %754, i64 %750
  %756 = load i64, i64* %755, align 8
  %757 = add i64 %756, 1
  store i64 %757, i64* %755, align 8
  %758 = getelementptr inbounds %struct.OccCounters, %struct.OccCounters* %709, i64 0, i32 2, i64 %754
  %759 = load i64, i64* %758, align 8
  %760 = add i64 %759, 1
  store i64 %760, i64* %758, align 8
  %761 = add nuw nsw i64 %740, 1
  %762 = icmp ult i64 %761, %697
  br i1 %762, label %739, label %735

763:                                              ; preds = %735, %707
  %764 = fmul float %703, 8.192000e+03
  %765 = fptoui float %764 to i64
  %766 = icmp uge i64 %701, %765
  %767 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 0, i32 15, i32 1
  %768 = bitcast %"class.std::__1::vector"* %767 to i64*
  %769 = load i64, i64* %768, align 8
  %770 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 0, i32 15, i32 1, i32 0, i32 1
  %771 = bitcast i32** %770 to i64*
  store i64 %769, i64* %771, align 8
  %772 = zext i1 %766 to i64
  %773 = lshr i64 %701, %772
  %774 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 0, i32 15, i32 1, i32 0, i32 2, i32 0, i32 0
  %775 = bitcast i32** %774 to i64*
  %776 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %767, i64 0, i32 0, i32 0
  br label %809

777:                                              ; preds = %957
  %778 = bitcast %"class.std::__1::vector.4"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %778) #9
  %779 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %14, i64 0, i32 0, i32 0
  %780 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %14, i64 0, i32 0, i32 1
  %781 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  %782 = load i64, i64* %771, align 8
  %783 = load i64, i64* %768, align 8
  %784 = sub i64 %782, %783
  %785 = ashr exact i64 %784, 2
  %786 = mul i64 %785, 13
  %787 = add i64 %786, 13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %778, i8 0, i64 24, i1 false) #9
  %788 = icmp eq i64 %787, 0
  br i1 %788, label %789, label %790

789:                                              ; preds = %794, %777
  br label %1115

790:                                              ; preds = %777
  %791 = icmp ugt i64 %787, 2305843009213693951
  br i1 %791, label %792, label %794

792:                                              ; preds = %790
  %793 = bitcast %"class.std::__1::vector.4"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %793) #12
  unreachable

794:                                              ; preds = %790
  %795 = shl i64 %787, 3
  %796 = call i8* @_Znwm(i64 %795) #11
  %797 = bitcast i8* %796 to i64*
  %798 = bitcast %"class.std::__1::vector.4"* %14 to i8**
  store i8* %796, i8** %798, align 8
  %799 = getelementptr inbounds i64, i64* %797, i64 %787
  store i64* %799, i64** %781, align 8
  %800 = bitcast i64** %780 to i64*
  %801 = ptrtoint i8* %796 to i64
  %802 = add nsw i64 %786, 12
  %803 = getelementptr i64, i64* %797, i64 %802
  %804 = ptrtoint i64* %803 to i64
  %805 = sub i64 8, %801
  %806 = add i64 %805, %804
  %807 = and i64 %806, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %796, i8 0, i64 %807, i1 false) #9
  %808 = ptrtoint i64* %799 to i64
  store i64 %808, i64* %800, align 8
  br label %789

809:                                              ; preds = %957, %763
  %810 = phi i64 [ 0, %763 ], [ %961, %957 ]
  %811 = phi i64 [ 0, %763 ], [ %817, %957 ]
  %812 = phi i64 [ 1, %763 ], [ %960, %957 ]
  %813 = phi i64 [ %773, %763 ], [ %959, %957 ]
  %814 = phi i64 [ 256, %763 ], [ %958, %957 ]
  %815 = getelementptr inbounds %struct.OccCounters, %struct.OccCounters* %709, i64 0, i32 0, i64 %810
  %816 = load i64, i64* %815, align 8
  %817 = add i64 %816, %811
  %818 = icmp ugt i64 %817, %813
  br i1 %818, label %819, label %890

819:                                              ; preds = %809
  %820 = icmp eq i64 %810, 0
  br i1 %820, label %883, label %821

821:                                              ; preds = %819
  %822 = load i32*, i32** %770, align 8
  %823 = load i32*, i32** %774, align 8
  %824 = icmp eq i32* %822, %823
  %825 = ptrtoint i32* %823 to i64
  br i1 %824, label %830, label %826

826:                                              ; preds = %821
  %827 = trunc i64 %810 to i32
  store i32 %827, i32* %822, align 4
  %828 = getelementptr inbounds i32, i32* %822, i64 1
  %829 = ptrtoint i32* %828 to i64
  store i64 %829, i64* %771, align 8
  br label %883

830:                                              ; preds = %821
  %831 = ptrtoint i32* %822 to i64
  %832 = load i64, i64* %768, align 8
  %833 = sub i64 %831, %832
  %834 = ashr exact i64 %833, 2
  %835 = add nsw i64 %834, 1
  %836 = icmp ugt i64 %835, 4611686018427387903
  br i1 %836, label %837, label %839

837:                                              ; preds = %830
  %838 = bitcast %"class.std::__1::vector"* %767 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %838) #12
  unreachable

839:                                              ; preds = %830
  %840 = sub i64 %825, %832
  %841 = ashr exact i64 %840, 2
  %842 = icmp ult i64 %841, 2305843009213693951
  br i1 %842, label %843, label %851

843:                                              ; preds = %839
  %844 = ashr exact i64 %840, 1
  %845 = icmp ult i64 %844, %835
  %846 = select i1 %845, i64 %835, i64 %844
  %847 = icmp eq i64 %846, 0
  br i1 %847, label %856, label %848

848:                                              ; preds = %843
  %849 = icmp ugt i64 %846, 4611686018427387903
  br i1 %849, label %850, label %851

850:                                              ; preds = %848
  call void @abort() #12
  unreachable

851:                                              ; preds = %848, %839
  %852 = phi i64 [ %846, %848 ], [ 4611686018427387903, %839 ]
  %853 = shl i64 %852, 2
  %854 = call i8* @_Znwm(i64 %853) #11
  %855 = bitcast i8* %854 to i32*
  br label %856

856:                                              ; preds = %851, %843
  %857 = phi i64 [ %852, %851 ], [ 0, %843 ]
  %858 = phi i32* [ %855, %851 ], [ null, %843 ]
  %859 = getelementptr inbounds i32, i32* %858, i64 %834
  %860 = getelementptr inbounds i32, i32* %858, i64 %857
  %861 = ptrtoint i32* %860 to i64
  %862 = trunc i64 %810 to i32
  store i32 %862, i32* %859, align 4
  %863 = getelementptr inbounds i32, i32* %859, i64 1
  %864 = ptrtoint i32* %863 to i64
  %865 = load i32*, i32** %776, align 8
  %866 = load i64, i64* %771, align 8
  %867 = ptrtoint i32* %865 to i64
  %868 = sub i64 %866, %867
  %869 = ashr exact i64 %868, 2
  %870 = sub nsw i64 0, %869
  %871 = getelementptr inbounds i32, i32* %859, i64 %870
  %872 = ptrtoint i32* %871 to i64
  %873 = icmp sgt i64 %868, 0
  br i1 %873, label %874, label %878

874:                                              ; preds = %856
  %875 = bitcast i32* %871 to i8*
  %876 = bitcast i32* %865 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %875, i8* align 4 %876, i64 %868, i1 false) #9
  %877 = load i32*, i32** %776, align 8
  br label %878

878:                                              ; preds = %874, %856
  %879 = phi i32* [ %865, %856 ], [ %877, %874 ]
  store i64 %872, i64* %768, align 8
  store i64 %864, i64* %771, align 8
  store i64 %861, i64* %775, align 8
  %880 = icmp eq i32* %879, null
  br i1 %880, label %883, label %881

881:                                              ; preds = %878
  %882 = bitcast i32* %879 to i8*
  call void @_ZdlPv(i8* %882) #11
  br label %883

883:                                              ; preds = %881, %878, %826, %819
  br label %884

884:                                              ; preds = %883, %884
  %885 = phi i64 [ %886, %884 ], [ %812, %883 ]
  %886 = add i64 %885, 1
  %887 = mul i64 %886, %701
  %888 = lshr i64 %887, %772
  %889 = icmp ugt i64 %817, %888
  br i1 %889, label %884, label %957

890:                                              ; preds = %809
  %891 = load i64, i64* %771, align 8
  %892 = load i64, i64* %768, align 8
  %893 = sub i64 %891, %892
  %894 = ashr exact i64 %893, 2
  %895 = add nsw i64 %894, 1
  %896 = icmp ugt i64 %812, %895
  %897 = inttoptr i64 %891 to i32*
  br i1 %896, label %898, label %957

898:                                              ; preds = %890
  %899 = add nuw nsw i64 %810, 4294967295
  %900 = and i64 %899, 4294967295
  %901 = icmp eq i64 %814, %900
  %902 = icmp ne i64 %810, 0
  %903 = and i1 %902, %901
  br i1 %903, label %904, label %957

904:                                              ; preds = %898
  %905 = load i32*, i32** %774, align 8
  %906 = icmp eq i32* %905, %897
  br i1 %906, label %911, label %907

907:                                              ; preds = %904
  %908 = trunc i64 %810 to i32
  store i32 %908, i32* %897, align 4
  %909 = getelementptr inbounds i32, i32* %897, i64 1
  %910 = ptrtoint i32* %909 to i64
  store i64 %910, i64* %771, align 8
  br label %957

911:                                              ; preds = %904
  %912 = icmp ugt i64 %895, 4611686018427387903
  br i1 %912, label %913, label %915

913:                                              ; preds = %911
  %914 = bitcast %"class.std::__1::vector"* %767 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %914) #12
  unreachable

915:                                              ; preds = %911
  %916 = icmp ult i64 %894, 2305843009213693951
  br i1 %916, label %917, label %925

917:                                              ; preds = %915
  %918 = ashr exact i64 %893, 1
  %919 = icmp ult i64 %918, %895
  %920 = select i1 %919, i64 %895, i64 %918
  %921 = icmp eq i64 %920, 0
  br i1 %921, label %930, label %922

922:                                              ; preds = %917
  %923 = icmp ugt i64 %920, 4611686018427387903
  br i1 %923, label %924, label %925

924:                                              ; preds = %922
  call void @abort() #12
  unreachable

925:                                              ; preds = %922, %915
  %926 = phi i64 [ %920, %922 ], [ 4611686018427387903, %915 ]
  %927 = shl i64 %926, 2
  %928 = call i8* @_Znwm(i64 %927) #11
  %929 = bitcast i8* %928 to i32*
  br label %930

930:                                              ; preds = %925, %917
  %931 = phi i64 [ %926, %925 ], [ 0, %917 ]
  %932 = phi i32* [ %929, %925 ], [ null, %917 ]
  %933 = getelementptr inbounds i32, i32* %932, i64 %894
  %934 = getelementptr inbounds i32, i32* %932, i64 %931
  %935 = ptrtoint i32* %934 to i64
  %936 = trunc i64 %810 to i32
  store i32 %936, i32* %933, align 4
  %937 = getelementptr inbounds i32, i32* %933, i64 1
  %938 = ptrtoint i32* %937 to i64
  %939 = load i32*, i32** %776, align 8
  %940 = load i64, i64* %771, align 8
  %941 = ptrtoint i32* %939 to i64
  %942 = sub i64 %940, %941
  %943 = ashr exact i64 %942, 2
  %944 = sub nsw i64 0, %943
  %945 = getelementptr inbounds i32, i32* %933, i64 %944
  %946 = ptrtoint i32* %945 to i64
  %947 = icmp sgt i64 %942, 0
  br i1 %947, label %948, label %952

948:                                              ; preds = %930
  %949 = bitcast i32* %945 to i8*
  %950 = bitcast i32* %939 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %949, i8* align 4 %950, i64 %942, i1 false) #9
  %951 = load i32*, i32** %776, align 8
  br label %952

952:                                              ; preds = %948, %930
  %953 = phi i32* [ %939, %930 ], [ %951, %948 ]
  store i64 %946, i64* %768, align 8
  store i64 %938, i64* %771, align 8
  store i64 %935, i64* %775, align 8
  %954 = icmp eq i32* %953, null
  br i1 %954, label %957, label %955

955:                                              ; preds = %952
  %956 = bitcast i32* %953 to i8*
  call void @_ZdlPv(i8* %956) #11
  br label %957

957:                                              ; preds = %884, %955, %952, %907, %898, %890
  %958 = phi i64 [ %814, %898 ], [ %814, %890 ], [ %814, %907 ], [ %814, %952 ], [ %814, %955 ], [ %810, %884 ]
  %959 = phi i64 [ %813, %898 ], [ %813, %890 ], [ %813, %907 ], [ %813, %952 ], [ %813, %955 ], [ %888, %884 ]
  %960 = phi i64 [ %812, %898 ], [ %812, %890 ], [ %812, %907 ], [ %812, %952 ], [ %812, %955 ], [ %886, %884 ]
  %961 = add nuw nsw i64 %810, 1
  %962 = icmp eq i64 %961, 256
  br i1 %962, label %777, label %809

963:                                              ; preds = %1139
  %964 = bitcast %"class.std::__1::vector.11"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %964) #9
  %965 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %15, i64 0, i32 0, i32 0
  %966 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %15, i64 0, i32 0, i32 1
  %967 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %15, i64 0, i32 0, i32 2, i32 0, i32 0
  %968 = load i64, i64* %771, align 8
  %969 = load i64, i64* %768, align 8
  %970 = sub i64 %968, %969
  %971 = ashr exact i64 %970, 2
  %972 = mul i64 %971, 13
  %973 = add i64 %972, 13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %964, i8 0, i64 24, i1 false) #9
  %974 = icmp eq i64 %973, 0
  br i1 %974, label %1056, label %975

975:                                              ; preds = %963
  %976 = icmp slt i64 %973, 0
  br i1 %976, label %977, label %979

977:                                              ; preds = %975
  %978 = bitcast %"class.std::__1::vector.11"* %15 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %978) #12
  unreachable

979:                                              ; preds = %975
  %980 = call i8* @_Znwm(i64 %973) #11
  store i8* %980, i8** %965, align 8
  %981 = getelementptr inbounds i8, i8* %980, i64 %973
  store i8* %981, i8** %967, align 8
  %982 = bitcast i8** %966 to i64*
  %983 = ptrtoint i8* %980 to i64
  %984 = sub i64 %973, %983
  %985 = getelementptr i8, i8* %980, i64 %984
  %986 = ptrtoint i8* %985 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %980, i8 0, i64 %986, i1 false) #9
  %987 = ptrtoint i8* %981 to i64
  store i64 %987, i64* %982, align 8
  %988 = icmp ult i64 %973, 32
  br i1 %988, label %989, label %992

989:                                              ; preds = %1054, %979
  %990 = phi i32 [ 0, %979 ], [ %994, %1054 ]
  %991 = phi i8* [ %980, %979 ], [ %995, %1054 ]
  br label %1059

992:                                              ; preds = %979
  %993 = and i64 %973, -32
  %994 = trunc i64 %993 to i32
  %995 = getelementptr i8, i8* %980, i64 %993
  %996 = add i64 %993, -32
  %997 = lshr exact i64 %996, 5
  %998 = add nuw nsw i64 %997, 1
  %999 = and i64 %998, 3
  %1000 = icmp ult i64 %996, 96
  br i1 %1000, label %1037, label %1001

1001:                                             ; preds = %992
  %1002 = sub nsw i64 %998, %999
  br label %1003

1003:                                             ; preds = %1003, %1001
  %1004 = phi i64 [ 0, %1001 ], [ %1033, %1003 ]
  %1005 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %1001 ], [ %1034, %1003 ]
  %1006 = phi i64 [ %1002, %1001 ], [ %1035, %1003 ]
  %1007 = getelementptr i8, i8* %980, i64 %1004
  %1008 = add <16 x i8> %1005, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %1009 = bitcast i8* %1007 to <16 x i8>*
  store <16 x i8> %1005, <16 x i8>* %1009, align 1
  %1010 = getelementptr i8, i8* %1007, i64 16
  %1011 = bitcast i8* %1010 to <16 x i8>*
  store <16 x i8> %1008, <16 x i8>* %1011, align 1
  %1012 = or i64 %1004, 32
  %1013 = add <16 x i8> %1005, <i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32>
  %1014 = getelementptr i8, i8* %980, i64 %1012
  %1015 = add <16 x i8> %1005, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %1016 = bitcast i8* %1014 to <16 x i8>*
  store <16 x i8> %1013, <16 x i8>* %1016, align 1
  %1017 = getelementptr i8, i8* %1014, i64 16
  %1018 = bitcast i8* %1017 to <16 x i8>*
  store <16 x i8> %1015, <16 x i8>* %1018, align 1
  %1019 = or i64 %1004, 64
  %1020 = add <16 x i8> %1005, <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>
  %1021 = getelementptr i8, i8* %980, i64 %1019
  %1022 = add <16 x i8> %1005, <i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80>
  %1023 = bitcast i8* %1021 to <16 x i8>*
  store <16 x i8> %1020, <16 x i8>* %1023, align 1
  %1024 = getelementptr i8, i8* %1021, i64 16
  %1025 = bitcast i8* %1024 to <16 x i8>*
  store <16 x i8> %1022, <16 x i8>* %1025, align 1
  %1026 = or i64 %1004, 96
  %1027 = add <16 x i8> %1005, <i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96>
  %1028 = getelementptr i8, i8* %980, i64 %1026
  %1029 = add <16 x i8> %1005, <i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112>
  %1030 = bitcast i8* %1028 to <16 x i8>*
  store <16 x i8> %1027, <16 x i8>* %1030, align 1
  %1031 = getelementptr i8, i8* %1028, i64 16
  %1032 = bitcast i8* %1031 to <16 x i8>*
  store <16 x i8> %1029, <16 x i8>* %1032, align 1
  %1033 = add i64 %1004, 128
  %1034 = xor <16 x i8> %1005, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1035 = add i64 %1006, -4
  %1036 = icmp eq i64 %1035, 0
  br i1 %1036, label %1037, label %1003, !llvm.loop !21

1037:                                             ; preds = %1003, %992
  %1038 = phi i64 [ 0, %992 ], [ %1033, %1003 ]
  %1039 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %992 ], [ %1034, %1003 ]
  %1040 = icmp eq i64 %999, 0
  br i1 %1040, label %1054, label %1041

1041:                                             ; preds = %1037, %1041
  %1042 = phi i64 [ %1050, %1041 ], [ %1038, %1037 ]
  %1043 = phi <16 x i8> [ %1051, %1041 ], [ %1039, %1037 ]
  %1044 = phi i64 [ %1052, %1041 ], [ %999, %1037 ]
  %1045 = getelementptr i8, i8* %980, i64 %1042
  %1046 = add <16 x i8> %1043, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %1047 = bitcast i8* %1045 to <16 x i8>*
  store <16 x i8> %1043, <16 x i8>* %1047, align 1
  %1048 = getelementptr i8, i8* %1045, i64 16
  %1049 = bitcast i8* %1048 to <16 x i8>*
  store <16 x i8> %1046, <16 x i8>* %1049, align 1
  %1050 = add i64 %1042, 32
  %1051 = add <16 x i8> %1043, <i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32>
  %1052 = add i64 %1044, -1
  %1053 = icmp eq i64 %1052, 0
  br i1 %1053, label %1054, label %1041, !llvm.loop !23

1054:                                             ; preds = %1041, %1037
  %1055 = icmp eq i64 %973, %993
  br i1 %1055, label %1066, label %989

1056:                                             ; preds = %963
  %1057 = bitcast i8** %966 to i64*
  %1058 = bitcast %"class.std::__1::vector.11"* %15 to i64*
  br label %1071

1059:                                             ; preds = %989, %1059
  %1060 = phi i32 [ %1064, %1059 ], [ %990, %989 ]
  %1061 = phi i8* [ %1063, %1059 ], [ %991, %989 ]
  %1062 = trunc i32 %1060 to i8
  store i8 %1062, i8* %1061, align 1
  %1063 = getelementptr inbounds i8, i8* %1061, i64 1
  %1064 = add nuw nsw i32 %1060, 1
  %1065 = icmp eq i8* %1063, %981
  br i1 %1065, label %1066, label %1059, !llvm.loop !25

1066:                                             ; preds = %1059, %1054
  %1067 = load i64, i64* %982, align 8
  %1068 = bitcast %"class.std::__1::vector.11"* %15 to i64*
  %1069 = load i64, i64* %1068, align 8
  %1070 = inttoptr i64 %1069 to i8*
  br label %1071

1071:                                             ; preds = %1066, %1056
  %1072 = phi i64* [ %1058, %1056 ], [ %1068, %1066 ]
  %1073 = phi i64* [ %1057, %1056 ], [ %982, %1066 ]
  %1074 = phi i64 [ 0, %1056 ], [ %1069, %1066 ]
  %1075 = phi i8* [ null, %1056 ], [ %1070, %1066 ]
  %1076 = phi i64 [ 0, %1056 ], [ %1067, %1066 ]
  %1077 = bitcast %"class.std::__1::vector.11"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1077) #9
  %1078 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %16, i64 0, i32 0, i32 0
  %1079 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %16, i64 0, i32 0, i32 1
  %1080 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %16, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1077, i8 0, i64 24, i1 false) #9
  %1081 = sub i64 %1076, %1074
  %1082 = icmp eq i64 %1081, 0
  br i1 %1082, label %1083, label %1085

1083:                                             ; preds = %1071
  %1084 = bitcast i8** %1079 to i64*
  br label %1103

1085:                                             ; preds = %1071
  %1086 = icmp slt i64 %1081, 0
  br i1 %1086, label %1087, label %1089

1087:                                             ; preds = %1085
  %1088 = bitcast %"class.std::__1::vector.11"* %16 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1088) #12
  unreachable

1089:                                             ; preds = %1085
  %1090 = call i8* @_Znwm(i64 %1081) #11
  store i8* %1090, i8** %1079, align 8
  store i8* %1090, i8** %1078, align 8
  %1091 = getelementptr inbounds i8, i8* %1090, i64 %1081
  store i8* %1091, i8** %1080, align 8
  %1092 = bitcast i8** %1079 to i64*
  %1093 = ptrtoint i8* %1075 to i64
  %1094 = sub i64 %1076, %1093
  %1095 = icmp sgt i64 %1094, 0
  %1096 = ptrtoint i8* %1090 to i64
  br i1 %1095, label %1097, label %1100

1097:                                             ; preds = %1089
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %1090, i8* align 1 %1075, i64 %1094, i1 false) #9
  %1098 = getelementptr inbounds i8, i8* %1090, i64 %1094
  %1099 = ptrtoint i8* %1098 to i64
  br label %1100

1100:                                             ; preds = %1097, %1089
  %1101 = phi i64 [ %1099, %1097 ], [ %1096, %1089 ]
  %1102 = phi i8* [ %1098, %1097 ], [ %1090, %1089 ]
  store i64 %1101, i64* %1092, align 8
  br label %1103

1103:                                             ; preds = %1100, %1083
  %1104 = phi i64* [ %1084, %1083 ], [ %1092, %1100 ]
  %1105 = phi i8* [ null, %1083 ], [ %1102, %1100 ]
  %1106 = phi i8* [ null, %1083 ], [ %1090, %1100 ]
  %1107 = phi i64 [ 0, %1083 ], [ %1096, %1100 ]
  %1108 = phi i64 [ 0, %1083 ], [ %1101, %1100 ]
  %1109 = bitcast %"class.std::__1::vector.11"* %16 to i64*
  %1110 = sub i64 %1108, %1107
  %1111 = icmp ugt i64 %1110, 5
  br i1 %1111, label %1112, label %1165

1112:                                             ; preds = %1103
  %1113 = bitcast %class.anon.341* %12 to i8*
  %1114 = getelementptr inbounds %class.anon.341, %class.anon.341* %12, i64 0, i32 0
  br label %1171

1115:                                             ; preds = %789, %1142
  %1116 = phi i64 [ %1144, %1142 ], [ %783, %789 ]
  %1117 = phi i64 [ %1143, %1142 ], [ %782, %789 ]
  %1118 = phi i64 [ %1140, %1142 ], [ 0, %789 ]
  %1119 = phi i64 [ %1132, %1142 ], [ 0, %789 ]
  %1120 = sub i64 %1117, %1116
  %1121 = ashr exact i64 %1120, 2
  %1122 = icmp ult i64 %1119, %1121
  br i1 %1122, label %1123, label %1131

1123:                                             ; preds = %1115
  %1124 = inttoptr i64 %1116 to i32*
  %1125 = getelementptr inbounds i32, i32* %1124, i64 %1119
  %1126 = load i32, i32* %1125, align 4
  %1127 = zext i32 %1126 to i64
  %1128 = icmp eq i64 %1118, %1127
  %1129 = zext i1 %1128 to i64
  %1130 = add nuw i64 %1119, %1129
  br label %1131

1131:                                             ; preds = %1123, %1115
  %1132 = phi i64 [ %1119, %1115 ], [ %1130, %1123 ]
  %1133 = getelementptr inbounds %struct.OccCounters, %struct.OccCounters* %709, i64 0, i32 1, i64 0, i64 %1118
  %1134 = load i64, i64* %1133, align 8
  %1135 = load i64*, i64** %779, align 8
  %1136 = getelementptr inbounds i64, i64* %1135, i64 %1132
  %1137 = load i64, i64* %1136, align 8
  %1138 = add i64 %1137, %1134
  store i64 %1138, i64* %1136, align 8
  br label %1145

1139:                                             ; preds = %1145
  %1140 = add nuw nsw i64 %1118, 1
  %1141 = icmp eq i64 %1140, 256
  br i1 %1141, label %963, label %1142

1142:                                             ; preds = %1139
  %1143 = load i64, i64* %771, align 8
  %1144 = load i64, i64* %768, align 8
  br label %1115

1145:                                             ; preds = %1131, %1145
  %1146 = phi i64 [ 1, %1131 ], [ %1160, %1145 ]
  %1147 = load i64, i64* %771, align 8
  %1148 = load i64, i64* %768, align 8
  %1149 = getelementptr inbounds %struct.OccCounters, %struct.OccCounters* %709, i64 0, i32 1, i64 %1146, i64 %1118
  %1150 = load i64, i64* %1149, align 8
  %1151 = sub i64 %1147, %1148
  %1152 = ashr exact i64 %1151, 2
  %1153 = add nsw i64 %1152, 1
  %1154 = mul i64 %1153, %1146
  %1155 = add i64 %1154, %1132
  %1156 = load i64*, i64** %779, align 8
  %1157 = getelementptr inbounds i64, i64* %1156, i64 %1155
  %1158 = load i64, i64* %1157, align 8
  %1159 = add i64 %1158, %1150
  store i64 %1159, i64* %1157, align 8
  %1160 = add nuw nsw i64 %1146, 1
  %1161 = icmp eq i64 %1160, 13
  br i1 %1161, label %1139, label %1145

1162:                                             ; preds = %1171
  %1163 = load i64, i64* %1073, align 8
  %1164 = load i64, i64* %1072, align 8
  br label %1165

1165:                                             ; preds = %1162, %1103
  %1166 = phi i64 [ %1164, %1162 ], [ %1074, %1103 ]
  %1167 = phi i64 [ %1163, %1162 ], [ %1076, %1103 ]
  %1168 = icmp eq i64 %1167, %1166
  %1169 = inttoptr i64 %1166 to i8*
  %1170 = inttoptr i64 %1167 to i8*
  br i1 %1168, label %1237, label %1218

1171:                                             ; preds = %1171, %1112
  %1172 = phi i8* [ %1105, %1112 ], [ %1212, %1171 ]
  %1173 = phi i8* [ %1106, %1112 ], [ %1217, %1171 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1113) #9
  store %"class.std::__1::vector.4"* %14, %"class.std::__1::vector.4"** %1114, align 8
  call fastcc void @"_ZNSt3__16__sortIRZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS1_18PassesEncoderStateEE3$_2PhEEvT0_S8_T_"(i8* %1173, i8* %1172, %class.anon.341* nonnull dereferenceable(8) %12) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1113) #9
  %1174 = load i8*, i8** %1079, align 8
  %1175 = getelementptr inbounds i8, i8* %1174, i64 -1
  %1176 = load i8, i8* %1175, align 1
  %1177 = zext i8 %1176 to i64
  %1178 = load i64*, i64** %779, align 8
  %1179 = getelementptr inbounds i64, i64* %1178, i64 %1177
  %1180 = load i64, i64* %1179, align 8
  %1181 = ptrtoint i8* %1174 to i64
  %1182 = load i64, i64* %1109, align 8
  %1183 = add i64 %1181, -2
  %1184 = sub i64 %1183, %1182
  %1185 = inttoptr i64 %1182 to i8*
  %1186 = getelementptr inbounds i8, i8* %1185, i64 %1184
  %1187 = load i8, i8* %1186, align 1
  %1188 = zext i8 %1187 to i64
  %1189 = getelementptr inbounds i64, i64* %1178, i64 %1188
  %1190 = load i64, i64* %1189, align 8
  %1191 = add i64 %1190, %1180
  store i64 %1191, i64* %1189, align 8
  %1192 = load i8*, i8** %1079, align 8
  %1193 = getelementptr inbounds i8, i8* %1192, i64 -1
  %1194 = load i8, i8* %1193, align 1
  %1195 = zext i8 %1194 to i64
  %1196 = load i64*, i64** %779, align 8
  %1197 = getelementptr inbounds i64, i64* %1196, i64 %1195
  store i64 0, i64* %1197, align 8
  %1198 = load i64, i64* %1104, align 8
  %1199 = load i64, i64* %1109, align 8
  %1200 = add i64 %1198, -2
  %1201 = sub i64 %1200, %1199
  %1202 = inttoptr i64 %1199 to i8*
  %1203 = getelementptr inbounds i8, i8* %1202, i64 %1201
  %1204 = load i8, i8* %1203, align 1
  %1205 = inttoptr i64 %1198 to i8*
  %1206 = getelementptr inbounds i8, i8* %1205, i64 -1
  %1207 = load i8, i8* %1206, align 1
  %1208 = zext i8 %1207 to i64
  %1209 = load i8*, i8** %965, align 8
  %1210 = getelementptr inbounds i8, i8* %1209, i64 %1208
  store i8 %1204, i8* %1210, align 1
  %1211 = load i8*, i8** %1079, align 8
  %1212 = getelementptr inbounds i8, i8* %1211, i64 -1
  store i8* %1212, i8** %1079, align 8
  %1213 = ptrtoint i8* %1212 to i64
  %1214 = load i64, i64* %1109, align 8
  %1215 = sub i64 %1213, %1214
  %1216 = icmp ugt i64 %1215, 5
  %1217 = inttoptr i64 %1214 to i8*
  br i1 %1216, label %1171, label %1162

1218:                                             ; preds = %1165, %1281
  %1219 = phi i8* [ %1282, %1281 ], [ %1169, %1165 ]
  %1220 = phi i64 [ %1283, %1281 ], [ %1166, %1165 ]
  %1221 = phi i64 [ %1284, %1281 ], [ %1166, %1165 ]
  %1222 = phi i8* [ %1285, %1281 ], [ %1170, %1165 ]
  %1223 = phi i8* [ %1286, %1281 ], [ %1169, %1165 ]
  %1224 = phi i8* [ %1287, %1281 ], [ %1169, %1165 ]
  %1225 = phi i8* [ %1288, %1281 ], [ %1169, %1165 ]
  %1226 = phi i64 [ %1289, %1281 ], [ %1166, %1165 ]
  %1227 = phi i64 [ %1290, %1281 ], [ %1166, %1165 ]
  %1228 = phi i64 [ %1291, %1281 ], [ %1167, %1165 ]
  %1229 = phi i8* [ %1295, %1281 ], [ %1169, %1165 ]
  %1230 = phi i64 [ %1292, %1281 ], [ 0, %1165 ]
  %1231 = getelementptr inbounds i8, i8* %1229, i64 %1230
  %1232 = load i8, i8* %1231, align 1
  %1233 = zext i8 %1232 to i64
  %1234 = getelementptr inbounds i8, i8* %1229, i64 %1233
  %1235 = load i8, i8* %1234, align 1
  %1236 = icmp eq i8 %1235, %1232
  br i1 %1236, label %1281, label %1267

1237:                                             ; preds = %1281, %1165
  %1238 = phi i8* [ %1169, %1165 ], [ %1282, %1281 ]
  %1239 = phi i64 [ %1166, %1165 ], [ %1283, %1281 ]
  %1240 = phi i64 [ %1166, %1165 ], [ %1284, %1281 ]
  %1241 = phi i8* [ %1170, %1165 ], [ %1285, %1281 ]
  %1242 = phi i8* [ %1169, %1165 ], [ %1286, %1281 ]
  %1243 = phi i8* [ %1169, %1165 ], [ %1287, %1281 ]
  %1244 = phi i8* [ %1169, %1165 ], [ %1288, %1281 ]
  %1245 = phi i64 [ %1166, %1165 ], [ %1289, %1281 ]
  %1246 = phi i64 [ %1166, %1165 ], [ %1291, %1281 ]
  %1247 = phi i64 [ 0, %1165 ], [ %1293, %1281 ]
  %1248 = bitcast %"class.std::__1::vector.11"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1248) #9
  %1249 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %17, i64 0, i32 0, i32 0
  %1250 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %17, i64 0, i32 0, i32 1
  %1251 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %17, i64 0, i32 0, i32 2, i32 0, i32 0
  %1252 = trunc i64 %1247 to i8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1248, i8 0, i64 24, i1 false) #9
  %1253 = icmp eq i64 %1247, 0
  br i1 %1253, label %1263, label %1254

1254:                                             ; preds = %1237
  %1255 = icmp slt i64 %1247, 0
  br i1 %1255, label %1256, label %1258

1256:                                             ; preds = %1254
  %1257 = bitcast %"class.std::__1::vector.11"* %17 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1257) #12
  unreachable

1258:                                             ; preds = %1254
  %1259 = call i8* @_Znwm(i64 %1247) #11
  store i8* %1259, i8** %1249, align 8
  %1260 = getelementptr inbounds i8, i8* %1259, i64 %1247
  store i8* %1260, i8** %1251, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %1259, i8 %1252, i64 %1247, i1 false) #9
  %1261 = bitcast i8** %1250 to i64*
  %1262 = ptrtoint i8* %1260 to i64
  store i64 %1262, i64* %1261, align 8
  br label %1263

1263:                                             ; preds = %1258, %1237
  %1264 = phi i8* [ null, %1237 ], [ %1259, %1258 ]
  %1265 = sub i64 %1246, %1245
  %1266 = icmp eq i64 %1265, 0
  br i1 %1266, label %1299, label %1347

1267:                                             ; preds = %1218, %1267
  %1268 = phi i8 [ %1275, %1267 ], [ %1235, %1218 ]
  %1269 = phi i8* [ %1271, %1267 ], [ %1231, %1218 ]
  store i8 %1268, i8* %1269, align 1
  %1270 = load i8*, i8** %965, align 8
  %1271 = getelementptr inbounds i8, i8* %1270, i64 %1230
  %1272 = load i8, i8* %1271, align 1
  %1273 = zext i8 %1272 to i64
  %1274 = getelementptr inbounds i8, i8* %1270, i64 %1273
  %1275 = load i8, i8* %1274, align 1
  %1276 = icmp eq i8 %1275, %1272
  br i1 %1276, label %1277, label %1267

1277:                                             ; preds = %1267
  %1278 = ptrtoint i8* %1270 to i64
  %1279 = load i64, i64* %1073, align 8
  %1280 = inttoptr i64 %1279 to i8*
  br label %1281

1281:                                             ; preds = %1277, %1218
  %1282 = phi i8* [ %1270, %1277 ], [ %1219, %1218 ]
  %1283 = phi i64 [ %1278, %1277 ], [ %1220, %1218 ]
  %1284 = phi i64 [ %1278, %1277 ], [ %1221, %1218 ]
  %1285 = phi i8* [ %1280, %1277 ], [ %1222, %1218 ]
  %1286 = phi i8* [ %1270, %1277 ], [ %1223, %1218 ]
  %1287 = phi i8* [ %1270, %1277 ], [ %1224, %1218 ]
  %1288 = phi i8* [ %1270, %1277 ], [ %1225, %1218 ]
  %1289 = phi i64 [ %1278, %1277 ], [ %1226, %1218 ]
  %1290 = phi i64 [ %1278, %1277 ], [ %1227, %1218 ]
  %1291 = phi i64 [ %1279, %1277 ], [ %1228, %1218 ]
  %1292 = add nuw i64 %1230, 1
  %1293 = sub i64 %1291, %1290
  %1294 = icmp ult i64 %1292, %1293
  %1295 = inttoptr i64 %1290 to i8*
  br i1 %1294, label %1218, label %1237

1296:                                             ; preds = %1366
  %1297 = inttoptr i64 %1377 to i8*
  %1298 = inttoptr i64 %1376 to i8*
  br label %1299

1299:                                             ; preds = %1296, %1263
  %1300 = phi i8* [ %1238, %1263 ], [ %1297, %1296 ]
  %1301 = phi i64 [ %1239, %1263 ], [ %1377, %1296 ]
  %1302 = phi i64 [ %1240, %1263 ], [ %1377, %1296 ]
  %1303 = phi i64 [ %1246, %1263 ], [ %1376, %1296 ]
  %1304 = phi i8* [ %1241, %1263 ], [ %1298, %1296 ]
  %1305 = phi i8* [ %1242, %1263 ], [ %1297, %1296 ]
  %1306 = phi i64 [ 0, %1263 ], [ %1369, %1296 ]
  %1307 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 0, i32 15, i32 2
  %1308 = icmp eq %"class.std::__1::vector.11"* %1307, %15
  br i1 %1308, label %1313, label %1309

1309:                                             ; preds = %1299
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.11"* %1307, i8* %1305, i8* %1304) #9
  %1310 = load i64, i64* %1073, align 8
  %1311 = load i64, i64* %1072, align 8
  %1312 = inttoptr i64 %1311 to i8*
  br label %1313

1313:                                             ; preds = %1309, %1299
  %1314 = phi i8* [ %1300, %1299 ], [ %1312, %1309 ]
  %1315 = phi i64 [ %1301, %1299 ], [ %1311, %1309 ]
  %1316 = phi i64 [ %1302, %1299 ], [ %1311, %1309 ]
  %1317 = phi i64 [ %1303, %1299 ], [ %1310, %1309 ]
  %1318 = sub i64 %1317, %1316
  %1319 = mul i64 %1318, 3
  %1320 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 0, i32 15, i32 2, i32 0, i32 1
  %1321 = bitcast i8** %1320 to i64*
  %1322 = load i64, i64* %1321, align 8
  %1323 = bitcast %"class.std::__1::vector.11"* %1307 to i64*
  %1324 = load i64, i64* %1323, align 8
  %1325 = sub i64 %1322, %1324
  %1326 = icmp ugt i64 %1319, %1325
  %1327 = inttoptr i64 %1324 to i8*
  br i1 %1326, label %1328, label %1333

1328:                                             ; preds = %1313
  %1329 = sub i64 %1319, %1325
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.11"* %1307, i64 %1329) #9
  %1330 = load i64, i64* %1073, align 8
  %1331 = load i64, i64* %1072, align 8
  %1332 = inttoptr i64 %1331 to i8*
  br label %1337

1333:                                             ; preds = %1313
  %1334 = icmp ult i64 %1319, %1325
  br i1 %1334, label %1335, label %1337

1335:                                             ; preds = %1333
  %1336 = getelementptr inbounds i8, i8* %1327, i64 %1319
  store i8* %1336, i8** %1320, align 8
  br label %1337

1337:                                             ; preds = %1335, %1333, %1328
  %1338 = phi i8* [ %1332, %1328 ], [ %1314, %1333 ], [ %1314, %1335 ]
  %1339 = phi i64 [ %1331, %1328 ], [ %1315, %1333 ], [ %1315, %1335 ]
  %1340 = phi i64 [ %1330, %1328 ], [ %1317, %1333 ], [ %1317, %1335 ]
  %1341 = sub i64 %1340, %1339
  %1342 = mul i64 %1341, 3
  %1343 = icmp ult i64 %1341, %1342
  br i1 %1343, label %1344, label %1383

1344:                                             ; preds = %1337
  %1345 = trunc i64 %1306 to i8
  %1346 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %1307, i64 0, i32 0, i32 0
  br label %1433

1347:                                             ; preds = %1263, %1381
  %1348 = phi i8* [ %1380, %1381 ], [ %1243, %1263 ]
  %1349 = phi i8* [ %1382, %1381 ], [ %1264, %1263 ]
  %1350 = phi i8* [ %1380, %1381 ], [ %1244, %1263 ]
  %1351 = phi i64 [ %1378, %1381 ], [ %1265, %1263 ]
  %1352 = phi i64 [ %1375, %1381 ], [ 0, %1263 ]
  %1353 = phi i64 [ %1369, %1381 ], [ 0, %1263 ]
  %1354 = getelementptr inbounds i8, i8* %1350, i64 %1352
  %1355 = load i8, i8* %1354, align 1
  %1356 = zext i8 %1355 to i64
  %1357 = getelementptr inbounds i8, i8* %1349, i64 %1356
  %1358 = load i8, i8* %1357, align 1
  %1359 = zext i8 %1358 to i64
  %1360 = icmp eq i64 %1351, %1359
  br i1 %1360, label %1361, label %1366

1361:                                             ; preds = %1347
  %1362 = add i64 %1353, 1
  %1363 = trunc i64 %1353 to i8
  store i8 %1363, i8* %1357, align 1
  %1364 = load i8*, i8** %965, align 8
  %1365 = load i8*, i8** %1249, align 8
  br label %1366

1366:                                             ; preds = %1361, %1347
  %1367 = phi i8* [ %1365, %1361 ], [ %1349, %1347 ]
  %1368 = phi i8* [ %1364, %1361 ], [ %1348, %1347 ]
  %1369 = phi i64 [ %1362, %1361 ], [ %1353, %1347 ]
  %1370 = getelementptr inbounds i8, i8* %1368, i64 %1352
  %1371 = load i8, i8* %1370, align 1
  %1372 = zext i8 %1371 to i64
  %1373 = getelementptr inbounds i8, i8* %1367, i64 %1372
  %1374 = load i8, i8* %1373, align 1
  store i8 %1374, i8* %1370, align 1
  %1375 = add nuw i64 %1352, 1
  %1376 = load i64, i64* %1073, align 8
  %1377 = load i64, i64* %1072, align 8
  %1378 = sub i64 %1376, %1377
  %1379 = icmp ult i64 %1375, %1378
  %1380 = inttoptr i64 %1377 to i8*
  br i1 %1379, label %1381, label %1296

1381:                                             ; preds = %1366
  %1382 = load i8*, i8** %1249, align 8
  br label %1347

1383:                                             ; preds = %1433, %1337
  %1384 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %1307, i64 0, i32 0, i32 0
  %1385 = load i8*, i8** %1384, align 8
  %1386 = load i8*, i8** %1320, align 8
  %1387 = ptrtoint i8* %1385 to i64
  %1388 = icmp eq i8* %1385, %1386
  br i1 %1388, label %1403, label %1389

1389:                                             ; preds = %1383
  %1390 = getelementptr inbounds i8, i8* %1385, i64 1
  %1391 = icmp eq i8* %1390, %1386
  br i1 %1391, label %1403, label %1392

1392:                                             ; preds = %1389, %1392
  %1393 = phi i8* [ %1401, %1392 ], [ %1390, %1389 ]
  %1394 = phi i64 [ %1400, %1392 ], [ %1387, %1389 ]
  %1395 = ptrtoint i8* %1393 to i64
  %1396 = inttoptr i64 %1394 to i8*
  %1397 = load i8, i8* %1396, align 1
  %1398 = load i8, i8* %1393, align 1
  %1399 = icmp ult i8 %1397, %1398
  %1400 = select i1 %1399, i64 %1395, i64 %1394
  %1401 = getelementptr inbounds i8, i8* %1393, i64 1
  %1402 = icmp eq i8* %1401, %1386
  br i1 %1402, label %1403, label %1392

1403:                                             ; preds = %1392, %1389, %1383
  %1404 = phi i64 [ %1387, %1383 ], [ %1387, %1389 ], [ %1400, %1392 ]
  %1405 = inttoptr i64 %1404 to i8*
  %1406 = load i8, i8* %1405, align 1
  %1407 = zext i8 %1406 to i64
  %1408 = add nuw nsw i64 %1407, 1
  %1409 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %580, i64 0, i32 0, i32 15, i32 3
  store i64 %1408, i64* %1409, align 8
  %1410 = load i8*, i8** %1249, align 8
  %1411 = icmp eq i8* %1410, null
  br i1 %1411, label %1415, label %1412

1412:                                             ; preds = %1403
  %1413 = ptrtoint i8* %1410 to i64
  %1414 = bitcast i8** %1250 to i64*
  store i64 %1413, i64* %1414, align 8
  call void @_ZdlPv(i8* nonnull %1410) #11
  br label %1415

1415:                                             ; preds = %1412, %1403
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1248) #9
  %1416 = load i8*, i8** %1078, align 8
  %1417 = icmp eq i8* %1416, null
  br i1 %1417, label %1420, label %1418

1418:                                             ; preds = %1415
  %1419 = ptrtoint i8* %1416 to i64
  store i64 %1419, i64* %1104, align 8
  call void @_ZdlPv(i8* nonnull %1416) #11
  br label %1420

1420:                                             ; preds = %1418, %1415
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1077) #9
  %1421 = load i8*, i8** %965, align 8
  %1422 = icmp eq i8* %1421, null
  br i1 %1422, label %1425, label %1423

1423:                                             ; preds = %1420
  %1424 = ptrtoint i8* %1421 to i64
  store i64 %1424, i64* %1073, align 8
  call void @_ZdlPv(i8* nonnull %1421) #11
  br label %1425

1425:                                             ; preds = %1423, %1420
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %964) #9
  %1426 = load i64*, i64** %779, align 8
  %1427 = icmp eq i64* %1426, null
  br i1 %1427, label %1432, label %1428

1428:                                             ; preds = %1425
  %1429 = ptrtoint i64* %1426 to i64
  %1430 = bitcast i64** %780 to i64*
  store i64 %1429, i64* %1430, align 8
  %1431 = bitcast i64* %1426 to i8*
  call void @_ZdlPv(i8* %1431) #11
  br label %1432

1432:                                             ; preds = %1428, %1425
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %778) #9
  call void @_ZdlPv(i8* nonnull %708) #11
  br label %1450

1433:                                             ; preds = %1433, %1344
  %1434 = phi i8* [ %1338, %1344 ], [ %1449, %1433 ]
  %1435 = phi i64 [ %1341, %1344 ], [ %1446, %1433 ]
  %1436 = phi i64 [ %1341, %1344 ], [ %1443, %1433 ]
  %1437 = urem i64 %1436, %1435
  %1438 = getelementptr inbounds i8, i8* %1434, i64 %1437
  %1439 = load i8, i8* %1438, align 1
  %1440 = add i8 %1439, %1345
  %1441 = load i8*, i8** %1346, align 8
  %1442 = getelementptr inbounds i8, i8* %1441, i64 %1436
  store i8 %1440, i8* %1442, align 1
  %1443 = add nuw i64 %1436, 1
  %1444 = load i64, i64* %1073, align 8
  %1445 = load i64, i64* %1072, align 8
  %1446 = sub i64 %1444, %1445
  %1447 = mul i64 %1446, 3
  %1448 = icmp ult i64 %1443, %1447
  %1449 = inttoptr i64 %1445 to i8*
  br i1 %1448, label %1433, label %1383

1450:                                             ; preds = %1432, %694, %690, %689, %572
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %516) #9
  %1451 = getelementptr inbounds %"struct.jxl::CfLHeuristics", %"struct.jxl::CfLHeuristics"* %23, i64 0, i32 1, i32 0, i32 0, i32 0
  %1452 = load float*, float** %1451, align 8
  store float* null, float** %1451, align 8
  %1453 = icmp eq float* %1452, null
  br i1 %1453, label %1460, label %1454

1454:                                             ; preds = %1450
  %1455 = bitcast float* %1452 to i8*
  %1456 = getelementptr inbounds %"struct.jxl::CfLHeuristics", %"struct.jxl::CfLHeuristics"* %23, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %1457 = load void (i8*, i8*)*, void (i8*, i8*)** %1456, align 8
  %1458 = getelementptr inbounds %"struct.jxl::CfLHeuristics", %"struct.jxl::CfLHeuristics"* %23, i64 0, i32 1, i32 0, i32 1, i32 0, i32 1
  %1459 = load i8*, i8** %1458, align 8
  call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %1455, void (i8*, i8*)* %1457, i8* %1459) #9
  br label %1460

1460:                                             ; preds = %1454, %1450
  %1461 = getelementptr inbounds %"struct.jxl::CfLHeuristics", %"struct.jxl::CfLHeuristics"* %23, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1462 = load i8*, i8** %1461, align 8
  store i8* null, i8** %1461, align 8
  %1463 = icmp eq i8* %1462, null
  br i1 %1463, label %1465, label %1464

1464:                                             ; preds = %1460
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1462) #9
  br label %1465

1465:                                             ; preds = %1460, %1464
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %216) #9
  call void @llvm.lifetime.end.p0i8(i64 328, i8* nonnull %215) #9
  %1466 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics", %"struct.jxl::ArControlFieldHeuristics"* %21, i64 0, i32 0, i32 0, i32 0
  %1467 = load %"struct.jxl::ArControlFieldHeuristics::TempImages"*, %"struct.jxl::ArControlFieldHeuristics::TempImages"** %1466, align 8
  %1468 = icmp eq %"struct.jxl::ArControlFieldHeuristics::TempImages"* %1467, null
  br i1 %1468, label %1498, label %1469

1469:                                             ; preds = %1465
  %1470 = bitcast %"struct.jxl::ArControlFieldHeuristics::TempImages"* %1467 to i8*
  %1471 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics", %"struct.jxl::ArControlFieldHeuristics"* %21, i64 0, i32 0, i32 0, i32 1
  %1472 = load %"struct.jxl::ArControlFieldHeuristics::TempImages"*, %"struct.jxl::ArControlFieldHeuristics::TempImages"** %1471, align 8
  %1473 = icmp eq %"struct.jxl::ArControlFieldHeuristics::TempImages"* %1472, %1467
  br i1 %1473, label %1496, label %1474

1474:                                             ; preds = %1469, %1491
  %1475 = phi %"struct.jxl::ArControlFieldHeuristics::TempImages"* [ %1476, %1491 ], [ %1472, %1469 ]
  %1476 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %1475, i64 -1
  %1477 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %1475, i64 -1, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1478 = load i8*, i8** %1477, align 8
  store i8* null, i8** %1477, align 8
  %1479 = icmp eq i8* %1478, null
  br i1 %1479, label %1481, label %1480

1480:                                             ; preds = %1474
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1478) #9
  br label %1481

1481:                                             ; preds = %1480, %1474
  %1482 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %1475, i64 -1, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1483 = load i8*, i8** %1482, align 8
  store i8* null, i8** %1482, align 8
  %1484 = icmp eq i8* %1483, null
  br i1 %1484, label %1486, label %1485

1485:                                             ; preds = %1481
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1483) #9
  br label %1486

1486:                                             ; preds = %1485, %1481
  %1487 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %1475, i64 -1, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1488 = load i8*, i8** %1487, align 8
  store i8* null, i8** %1487, align 8
  %1489 = icmp eq i8* %1488, null
  br i1 %1489, label %1491, label %1490

1490:                                             ; preds = %1486
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1488) #9
  br label %1491

1491:                                             ; preds = %1490, %1486
  %1492 = icmp eq %"struct.jxl::ArControlFieldHeuristics::TempImages"* %1476, %1467
  br i1 %1492, label %1493, label %1474

1493:                                             ; preds = %1491
  %1494 = bitcast %"struct.jxl::ArControlFieldHeuristics"* %21 to i8**
  %1495 = load i8*, i8** %1494, align 8
  br label %1496

1496:                                             ; preds = %1493, %1469
  %1497 = phi i8* [ %1495, %1493 ], [ %1470, %1469 ]
  store %"struct.jxl::ArControlFieldHeuristics::TempImages"* %1467, %"struct.jxl::ArControlFieldHeuristics::TempImages"** %1471, align 8
  call void @_ZdlPv(i8* %1497) #11
  br label %1498

1498:                                             ; preds = %1465, %1496
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %212) #9
  br label %1499

1499:                                             ; preds = %186, %86, %1498
  %1500 = phi i32 [ 0, %1498 ], [ 1, %86 ], [ %189, %186 ]
  ret i32 %1500
}

declare i32 @_ZN3jxl17GetNoiseParameterERKNS_6Image3IfEEPNS_11NoiseParamsEf(%"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::NoiseParams"*, float) local_unnamed_addr #2

declare void @_ZN3jxl15DownsampleImageEPNS_6Image3IfEEm(%"class.jxl::Image3"*, i64) local_unnamed_addr #2

declare void @_ZN3jxl30PadImageToBlockMultipleInPlaceEPNS_6Image3IfEE(%"class.jxl::Image3"*) local_unnamed_addr #2

declare void @_ZN3jxl11FindSplinesERKNS_6Image3IfEE(%"class.jxl::Splines"* sret, %"class.jxl::Image3"* dereferenceable(96)) local_unnamed_addr #2

declare i32 @_ZNK3jxl7Splines12SubtractFromEPNS_6Image3IfEERKNS_19ColorCorrelationMapE(%"class.jxl::Splines"*, %"class.jxl::Image3"*, %"struct.jxl::ColorCorrelationMap"* dereferenceable(104)) local_unnamed_addr #2

declare void @_ZN3jxl23FindBestPatchDictionaryERKNS_6Image3IfEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEb(%"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::PassesEncoderState"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*, i1 zeroext) local_unnamed_addr #2

declare void @_ZN3jxl22PatchDictionaryEncoder12SubtractFromERKNS_15PatchDictionaryEPNS_6Image3IfEE(%"class.jxl::PatchDictionary"* dereferenceable(80), %"class.jxl::Image3"*) local_unnamed_addr #2

declare float @_ZN3jxl14InitialQuantDCEf(float) local_unnamed_addr #2

declare void @_ZN3jxl9Quantizer26ComputeGlobalScaleAndQuantEfff(%"class.jxl::Quantizer"*, float, float, float) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6Image3IfE8ShrinkToEmm(%"class.jxl::Image3"*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = trunc i64 %1 to i32
  %5 = trunc i64 %2 to i32
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %10, label %13

10:                                               ; preds = %33, %21, %3
  %11 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.12, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0)) #9
  %12 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = icmp ult i64 %16, %2
  br i1 %17, label %18, label %21

18:                                               ; preds = %40, %28, %13
  %19 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.12, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i64 0, i64 0)) #9
  %20 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  store i32 %4, i32* %22, align 8
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  store i32 %5, i32* %23, align 4
  %24 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = zext i32 %25 to i64
  %27 = icmp ult i64 %26, %1
  br i1 %27, label %10, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  %32 = icmp ult i64 %31, %2
  br i1 %32, label %18, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 0
  store i32 %4, i32* %34, align 8
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 1
  store i32 %5, i32* %35, align 4
  %36 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 2
  %37 = load i32, i32* %36, align 8
  %38 = zext i32 %37 to i64
  %39 = icmp ult i64 %38, %1
  br i1 %39, label %10, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = icmp ult i64 %43, %2
  br i1 %44, label %18, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 0
  store i32 %4, i32* %46, align 8
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 1
  store i32 %5, i32* %47, align 4
  ret void
}

declare %"class.jxl::ImageBundle"* @_ZN3jxl5ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS0_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*) local_unnamed_addr #2

declare void @_ZN3jxl17InitialQuantFieldEfRKNS_6Image3IfEERKNS_15FrameDimensionsEPNS_10ThreadPoolEfPNS_5PlaneIfEE(%"class.jxl::Plane"* sret, float, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::FrameDimensions"* dereferenceable(144), %"class.jxl::ThreadPool"*, float, %"class.jxl::Plane"*) local_unnamed_addr #2

declare void @_ZN3jxl15GaborishInverseEPNS_6Image3IfEEfPNS_10ThreadPoolE(%"class.jxl::Image3"*, float, %"class.jxl::ThreadPool"*) local_unnamed_addr #2

declare void @_ZN3jxl13CfLHeuristics4InitERKNS_6Image3IfEE(%"struct.jxl::CfLHeuristics"*, %"class.jxl::Image3"* dereferenceable(96)) local_unnamed_addr #2

declare void @_ZN3jxl20AcStrategyHeuristics4InitERKNS_6Image3IfEEPNS_18PassesEncoderStateE(%"struct.jxl::AcStrategyHeuristics"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::PassesEncoderState"*) local_unnamed_addr #2

declare void @_ZN3jxl20AcStrategyHeuristics8FinalizeEPNS_6AuxOutE(%"struct.jxl::AcStrategyHeuristics"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare void @_ZN3jxl13CfLHeuristics9ComputeDCEbPNS_19ColorCorrelationMapE(%"struct.jxl::CfLHeuristics"*, i1 zeroext, %"struct.jxl::ColorCorrelationMap"*) local_unnamed_addr #2

declare void @_ZN3jxl17FindBestQuantizerEPKNS_11ImageBundleERKNS_6Image3IfEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEd(%"class.jxl::ImageBundle"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::PassesEncoderState"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl17EncoderHeuristicsD2Ev(%"class.jxl::EncoderHeuristics"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl24DefaultEncoderHeuristicsD0Ev(%"class.jxl::DefaultEncoderHeuristics"*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %"class.jxl::DefaultEncoderHeuristics"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3jxl17EncoderHeuristics23CustomFixedTreeLosslessERKNS_15FrameDimensionsEPNSt3__16vectorINS_20PropertyDecisionNodeENS4_9allocatorIS6_EEEE(%"class.jxl::EncoderHeuristics"*, %"struct.jxl::FrameDimensions"* dereferenceable(144), %"class.std::__1::vector.53"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 7
  br i1 %5, label %6, label %22

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %8 = bitcast %union.anon* %7 to %"class.std::__1::vector.121"**
  %9 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %8, align 8
  %10 = icmp eq %"class.std::__1::vector.121"* %9, null
  br i1 %10, label %22, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %9, i64 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint i32* %13 to i64
  %17 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %9, i64 0, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #11
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"class.std::__1::vector.121"* %9 to i8*
  tail call void @_ZdlPv(i8* %21) #11
  br label %22

22:                                               ; preds = %6, %20, %2
  %23 = bitcast %"class.jxl::QuantEncoding"* %1 to i8*
  %24 = bitcast %"class.jxl::QuantEncoding"* %0 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %23, i64 553, i1 false)
  %25 = load i32, i32* %3, align 8
  %26 = icmp eq i32 %25, 7
  br i1 %26, label %27, label %75

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %29 = bitcast %union.anon* %28 to %"class.std::__1::vector.121"**
  %30 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %29, align 8
  %31 = icmp eq %"class.std::__1::vector.121"* %30, null
  br i1 %31, label %75, label %32

32:                                               ; preds = %27
  %33 = tail call i8* @_Znwm(i64 24) #11
  %34 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %1, i64 0, i32 0, i32 3
  %35 = bitcast %union.anon* %34 to %"class.std::__1::vector.121"**
  %36 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %35, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #9
  %37 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.121"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %32
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #12
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #11
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %33, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %33 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %33, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #9
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %32, %71
  %74 = bitcast %union.anon* %28 to i8**
  store i8* %33, i8** %74, align 8
  br label %75

75:                                               ; preds = %27, %73, %22
  ret %"class.jxl::QuantEncoding"* %0
}

declare i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.109"*, i64, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.109", %"class.std::__1::vector.109"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.jxl::QuantEncoding"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.109", %"class.std::__1::vector.109"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.jxl::QuantEncoding"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 560
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %80, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"class.jxl::QuantEncoding"*
  %15 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %78, label %17

17:                                               ; preds = %13
  %18 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %19 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %20 = bitcast %union.anon* %19 to %"class.std::__1::vector.121"**
  br label %23

21:                                               ; preds = %75
  %22 = ptrtoint %"class.jxl::QuantEncoding"* %15 to i64
  br label %78

23:                                               ; preds = %75, %17
  %24 = phi %"class.jxl::QuantEncoding"* [ %14, %17 ], [ %76, %75 ]
  %25 = bitcast %"class.jxl::QuantEncoding"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %18, i64 553, i1 false) #9
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %75

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon* %30 to %"class.std::__1::vector.121"**
  %32 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.121"* %32, null
  br i1 %33, label %75, label %34

34:                                               ; preds = %29
  %35 = tail call i8* @_Znwm(i64 24) #11
  %36 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %20, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #9
  %37 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.121"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %34
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %35 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #12
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #11
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %35, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %35 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %35, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #9
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %71, %34
  %74 = bitcast %union.anon* %30 to i8**
  store i8* %35, i8** %74, align 8
  br label %75

75:                                               ; preds = %73, %29, %23
  %76 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 1
  %77 = icmp eq %"class.jxl::QuantEncoding"* %76, %15
  br i1 %77, label %21, label %23

78:                                               ; preds = %13, %21
  %79 = phi i64 [ %22, %21 ], [ %9, %13 ]
  store i64 %79, i64* %8, align 8
  br label %229

80:                                               ; preds = %3
  %81 = bitcast %"class.std::__1::vector.109"* %0 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %9, %82
  %84 = sdiv exact i64 %83, 560
  %85 = add i64 %84, %1
  %86 = icmp ugt i64 %85, 32940614417338485
  br i1 %86, label %87, label %89

87:                                               ; preds = %80
  %88 = bitcast %"class.std::__1::vector.109"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %88) #12
  unreachable

89:                                               ; preds = %80
  %90 = sub i64 %6, %82
  %91 = sdiv exact i64 %90, 560
  %92 = icmp ult i64 %91, 16470307208669242
  br i1 %92, label %93, label %98

93:                                               ; preds = %89
  %94 = shl nsw i64 %91, 1
  %95 = icmp ult i64 %94, %85
  %96 = select i1 %95, i64 %85, i64 %94
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %103, label %98

98:                                               ; preds = %89, %93
  %99 = phi i64 [ %96, %93 ], [ 32940614417338485, %89 ]
  %100 = mul i64 %99, 560
  %101 = tail call i8* @_Znwm(i64 %100) #11
  %102 = bitcast i8* %101 to %"class.jxl::QuantEncoding"*
  br label %103

103:                                              ; preds = %98, %93
  %104 = phi i64 [ %99, %98 ], [ 0, %93 ]
  %105 = phi %"class.jxl::QuantEncoding"* [ %102, %98 ], [ null, %93 ]
  %106 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %84
  %107 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %104
  %108 = ptrtoint %"class.jxl::QuantEncoding"* %107 to i64
  %109 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %106, i64 %1
  %110 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %111 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %112 = bitcast %union.anon* %111 to %"class.std::__1::vector.121"**
  br label %113

113:                                              ; preds = %165, %103
  %114 = phi %"class.jxl::QuantEncoding"* [ %106, %103 ], [ %166, %165 ]
  %115 = bitcast %"class.jxl::QuantEncoding"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %110, i64 553, i1 false) #9
  %116 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = icmp eq i32 %117, 7
  br i1 %118, label %119, label %165

119:                                              ; preds = %113
  %120 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 3
  %121 = bitcast %union.anon* %120 to %"class.std::__1::vector.121"**
  %122 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %121, align 8
  %123 = icmp eq %"class.std::__1::vector.121"* %122, null
  br i1 %123, label %165, label %124

124:                                              ; preds = %119
  %125 = tail call i8* @_Znwm(i64 24) #11
  %126 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %112, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %125, i8 0, i64 24, i1 false) #9
  %127 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %126, i64 0, i32 0, i32 1
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.std::__1::vector.121"* %126 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = sub i64 %129, %131
  %133 = ashr exact i64 %132, 2
  %134 = icmp eq i64 %132, 0
  br i1 %134, label %163, label %135

135:                                              ; preds = %124
  %136 = icmp ugt i64 %133, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %135
  %138 = bitcast i8* %125 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %138) #12
  unreachable

139:                                              ; preds = %135
  %140 = tail call i8* @_Znwm(i64 %132) #11
  %141 = bitcast i8* %140 to i32*
  %142 = getelementptr inbounds i8, i8* %125, i64 8
  %143 = bitcast i8* %142 to i8**
  store i8* %140, i8** %143, align 8
  %144 = bitcast i8* %125 to i8**
  store i8* %140, i8** %144, align 8
  %145 = getelementptr inbounds i32, i32* %141, i64 %133
  %146 = getelementptr inbounds i8, i8* %125, i64 16
  %147 = bitcast i8* %146 to i32**
  store i32* %145, i32** %147, align 8
  %148 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %126, i64 0, i32 0, i32 0
  %149 = load i32*, i32** %148, align 8
  %150 = load i64, i64* %128, align 8
  %151 = bitcast i8* %142 to i64*
  %152 = ptrtoint i8* %140 to i64
  %153 = ptrtoint i32* %149 to i64
  %154 = sub i64 %150, %153
  %155 = icmp sgt i64 %154, 0
  br i1 %155, label %156, label %161

156:                                              ; preds = %139
  %157 = lshr exact i64 %154, 2
  %158 = bitcast i32* %149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %140, i8* align 4 %158, i64 %154, i1 false) #9
  %159 = getelementptr inbounds i32, i32* %141, i64 %157
  %160 = ptrtoint i32* %159 to i64
  br label %161

161:                                              ; preds = %156, %139
  %162 = phi i64 [ %160, %156 ], [ %152, %139 ]
  store i64 %162, i64* %151, align 8
  br label %163

163:                                              ; preds = %161, %124
  %164 = bitcast %union.anon* %120 to i8**
  store i8* %125, i8** %164, align 8
  br label %165

165:                                              ; preds = %113, %119, %163
  %166 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 1
  %167 = icmp eq %"class.jxl::QuantEncoding"* %109, %166
  br i1 %167, label %168, label %113

168:                                              ; preds = %165
  %169 = ptrtoint %"class.jxl::QuantEncoding"* %109 to i64
  %170 = getelementptr inbounds %"class.std::__1::vector.109", %"class.std::__1::vector.109"* %0, i64 0, i32 0, i32 0
  %171 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %170, align 8
  %172 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  %173 = icmp eq %"class.jxl::QuantEncoding"* %172, %171
  br i1 %173, label %174, label %176

174:                                              ; preds = %168
  %175 = ptrtoint %"class.jxl::QuantEncoding"* %171 to i64
  br label %194

176:                                              ; preds = %168, %189
  %177 = phi %"class.jxl::QuantEncoding"* [ %179, %189 ], [ %106, %168 ]
  %178 = phi %"class.jxl::QuantEncoding"* [ %180, %189 ], [ %172, %168 ]
  %179 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %177, i64 -1
  %180 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1
  %181 = bitcast %"class.jxl::QuantEncoding"* %179 to i8*
  %182 = bitcast %"class.jxl::QuantEncoding"* %180 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %181, i8* align 8 %182, i64 553, i1 false) #9
  %183 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %179, i64 0, i32 0, i32 0
  %184 = load i32, i32* %183, align 8
  %185 = icmp eq i32 %184, 7
  br i1 %185, label %186, label %189

186:                                              ; preds = %176
  %187 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1, i32 0, i32 3
  %188 = bitcast %union.anon* %187 to %"class.std::__1::vector.121"**
  store %"class.std::__1::vector.121"* null, %"class.std::__1::vector.121"** %188, align 8
  br label %189

189:                                              ; preds = %186, %176
  %190 = icmp eq %"class.jxl::QuantEncoding"* %180, %171
  br i1 %190, label %191, label %176

191:                                              ; preds = %189
  %192 = load i64, i64* %81, align 8
  %193 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  br label %194

194:                                              ; preds = %174, %191
  %195 = phi %"class.jxl::QuantEncoding"* [ %171, %174 ], [ %193, %191 ]
  %196 = phi %"class.jxl::QuantEncoding"* [ %106, %174 ], [ %179, %191 ]
  %197 = phi i64 [ %175, %174 ], [ %192, %191 ]
  %198 = ptrtoint %"class.jxl::QuantEncoding"* %196 to i64
  store i64 %198, i64* %81, align 8
  store i64 %169, i64* %8, align 8
  store i64 %108, i64* %5, align 8
  %199 = inttoptr i64 %197 to %"class.jxl::QuantEncoding"*
  %200 = icmp eq %"class.jxl::QuantEncoding"* %195, %199
  br i1 %200, label %225, label %201

201:                                              ; preds = %194, %223
  %202 = phi %"class.jxl::QuantEncoding"* [ %203, %223 ], [ %195, %194 ]
  %203 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1
  %204 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %203, i64 0, i32 0, i32 0
  %205 = load i32, i32* %204, align 8
  %206 = icmp eq i32 %205, 7
  br i1 %206, label %207, label %223

207:                                              ; preds = %201
  %208 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1, i32 0, i32 3
  %209 = bitcast %union.anon* %208 to %"class.std::__1::vector.121"**
  %210 = load %"class.std::__1::vector.121"*, %"class.std::__1::vector.121"** %209, align 8
  %211 = icmp eq %"class.std::__1::vector.121"* %210, null
  br i1 %211, label %223, label %212

212:                                              ; preds = %207
  %213 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %210, i64 0, i32 0, i32 0
  %214 = load i32*, i32** %213, align 8
  %215 = icmp eq i32* %214, null
  br i1 %215, label %221, label %216

216:                                              ; preds = %212
  %217 = ptrtoint i32* %214 to i64
  %218 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %210, i64 0, i32 0, i32 1
  %219 = bitcast i32** %218 to i64*
  store i64 %217, i64* %219, align 8
  %220 = bitcast i32* %214 to i8*
  tail call void @_ZdlPv(i8* %220) #11
  br label %221

221:                                              ; preds = %216, %212
  %222 = bitcast %"class.std::__1::vector.121"* %210 to i8*
  tail call void @_ZdlPv(i8* %222) #11
  br label %223

223:                                              ; preds = %221, %207, %201
  %224 = icmp eq %"class.jxl::QuantEncoding"* %203, %199
  br i1 %224, label %225, label %201

225:                                              ; preds = %223, %194
  %226 = icmp eq i64 %197, 0
  br i1 %226, label %229, label %227

227:                                              ; preds = %225
  %228 = inttoptr i64 %197 to i8*
  tail call void @_ZdlPv(i8* %228) #11
  br label %229

229:                                              ; preds = %227, %225, %78
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

declare void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8*, void (i8*, i8*)*, i8*) local_unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11BlockCtxMapC2ERKS0_(%"struct.jxl::BlockCtxMap"*, %"struct.jxl::BlockCtxMap"* dereferenceable(136)) unnamed_addr #5 comdat align 2 {
  %3 = bitcast %"struct.jxl::BlockCtxMap"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #9
  %4 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %5 = bitcast i32** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"struct.jxl::BlockCtxMap"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %41, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 0
  %14 = icmp ugt i64 %10, 4611686018427387903
  br i1 %14, label %15, label %18

15:                                               ; preds = %155, %118, %12
  %16 = phi %"class.std::__1::vector.121"* [ %13, %12 ], [ %42, %118 ], [ %144, %155 ]
  %17 = bitcast %"class.std::__1::vector.121"* %16 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %17) #12
  unreachable

18:                                               ; preds = %12
  %19 = tail call i8* @_Znwm(i64 %9) #11
  %20 = bitcast i8* %19 to i32*
  %21 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %22 = bitcast i32** %21 to i8**
  store i8* %19, i8** %22, align 8
  %23 = bitcast %"struct.jxl::BlockCtxMap"* %0 to i8**
  store i8* %19, i8** %23, align 8
  %24 = getelementptr inbounds i32, i32* %20, i64 %10
  %25 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %24, i32** %25, align 8
  %26 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  %27 = load i32*, i32** %26, align 8
  %28 = load i64, i64* %5, align 8
  %29 = bitcast i32** %21 to i64*
  %30 = ptrtoint i8* %19 to i64
  %31 = ptrtoint i32* %27 to i64
  %32 = sub i64 %28, %31
  %33 = icmp sgt i64 %32, 0
  br i1 %33, label %34, label %39

34:                                               ; preds = %18
  %35 = lshr exact i64 %32, 2
  %36 = bitcast i32* %27 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %19, i8* align 4 %36, i64 %32, i1 false) #9
  %37 = getelementptr inbounds i32, i32* %20, i64 %35
  %38 = ptrtoint i32* %37 to i64
  br label %39

39:                                               ; preds = %34, %18
  %40 = phi i64 [ %38, %34 ], [ %30, %18 ]
  store i64 %40, i64* %29, align 8
  br label %41

41:                                               ; preds = %2, %39
  %42 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 1
  %43 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 1
  %44 = bitcast %"class.std::__1::vector.121"* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #9
  %45 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 1, i32 0, i32 1
  %46 = bitcast i32** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.std::__1::vector.121"* %43 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %47, %49
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  br i1 %52, label %143, label %118

53:                                               ; preds = %180
  %54 = icmp ugt i64 %190, 4611686018427387903
  br i1 %54, label %55, label %57

55:                                               ; preds = %53
  %56 = bitcast %"class.std::__1::vector"* %181 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %56) #12
  unreachable

57:                                               ; preds = %53
  %58 = tail call i8* @_Znwm(i64 %189) #11
  %59 = bitcast i8* %58 to i32*
  %60 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 1, i32 0, i32 1
  %61 = bitcast i32** %60 to i8**
  store i8* %58, i8** %61, align 8
  %62 = bitcast %"class.std::__1::vector"* %181 to i8**
  store i8* %58, i8** %62, align 8
  %63 = getelementptr inbounds i32, i32* %59, i64 %190
  %64 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store i32* %63, i32** %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %182, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %185, align 8
  %68 = bitcast i32** %60 to i64*
  %69 = ptrtoint i8* %58 to i64
  %70 = ptrtoint i32* %66 to i64
  %71 = sub i64 %67, %70
  %72 = icmp sgt i64 %71, 0
  br i1 %72, label %73, label %78

73:                                               ; preds = %57
  %74 = lshr exact i64 %71, 2
  %75 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %58, i8* align 4 %75, i64 %71, i1 false) #9
  %76 = getelementptr inbounds i32, i32* %59, i64 %74
  %77 = ptrtoint i32* %76 to i64
  br label %78

78:                                               ; preds = %73, %57
  %79 = phi i64 [ %77, %73 ], [ %69, %57 ]
  store i64 %79, i64* %68, align 8
  br label %80

80:                                               ; preds = %180, %78
  %81 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 2
  %82 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 2
  %83 = bitcast %"class.std::__1::vector.11"* %81 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %83, i8 0, i64 24, i1 false) #9
  %84 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 2, i32 0, i32 1
  %85 = bitcast i8** %84 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %"class.std::__1::vector.11"* %82 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = sub i64 %86, %88
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %113, label %91

91:                                               ; preds = %80
  %92 = icmp slt i64 %89, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %91
  %94 = bitcast %"class.std::__1::vector.11"* %81 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %94) #12
  unreachable

95:                                               ; preds = %91
  %96 = tail call i8* @_Znwm(i64 %89) #11
  %97 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 2, i32 0, i32 1
  store i8* %96, i8** %97, align 8
  %98 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %81, i64 0, i32 0, i32 0
  store i8* %96, i8** %98, align 8
  %99 = getelementptr inbounds i8, i8* %96, i64 %89
  %100 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  store i8* %99, i8** %100, align 8
  %101 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %82, i64 0, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = load i64, i64* %85, align 8
  %104 = bitcast i8** %97 to i64*
  %105 = ptrtoint i8* %102 to i64
  %106 = sub i64 %103, %105
  %107 = icmp sgt i64 %106, 0
  br i1 %107, label %108, label %110

108:                                              ; preds = %95
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %96, i8* align 1 %102, i64 %106, i1 false) #9
  %109 = getelementptr inbounds i8, i8* %96, i64 %106
  br label %110

110:                                              ; preds = %108, %95
  %111 = phi i8* [ %109, %108 ], [ %96, %95 ]
  %112 = ptrtoint i8* %111 to i64
  store i64 %112, i64* %104, align 8
  br label %113

113:                                              ; preds = %80, %110
  %114 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 3
  %115 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 3
  %116 = bitcast i64* %114 to i8*
  %117 = bitcast i64* %115 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* align 8 %117, i64 16, i1 false)
  ret void

118:                                              ; preds = %41
  %119 = icmp ugt i64 %51, 4611686018427387903
  br i1 %119, label %15, label %120

120:                                              ; preds = %118
  %121 = tail call i8* @_Znwm(i64 %50) #11
  %122 = bitcast i8* %121 to i32*
  %123 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 1, i32 0, i32 1
  %124 = bitcast i32** %123 to i8**
  store i8* %121, i8** %124, align 8
  %125 = bitcast %"class.std::__1::vector.121"* %42 to i8**
  store i8* %121, i8** %125, align 8
  %126 = getelementptr inbounds i32, i32* %122, i64 %51
  %127 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 1, i32 0, i32 2, i32 0, i32 0
  store i32* %126, i32** %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %43, i64 0, i32 0, i32 0
  %129 = load i32*, i32** %128, align 8
  %130 = load i64, i64* %46, align 8
  %131 = bitcast i32** %123 to i64*
  %132 = ptrtoint i8* %121 to i64
  %133 = ptrtoint i32* %129 to i64
  %134 = sub i64 %130, %133
  %135 = icmp sgt i64 %134, 0
  br i1 %135, label %136, label %141

136:                                              ; preds = %120
  %137 = lshr exact i64 %134, 2
  %138 = bitcast i32* %129 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %121, i8* align 4 %138, i64 %134, i1 false) #9
  %139 = getelementptr inbounds i32, i32* %122, i64 %137
  %140 = ptrtoint i32* %139 to i64
  br label %141

141:                                              ; preds = %136, %120
  %142 = phi i64 [ %140, %136 ], [ %132, %120 ]
  store i64 %142, i64* %131, align 8
  br label %143

143:                                              ; preds = %141, %41
  %144 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 2
  %145 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 2
  %146 = bitcast %"class.std::__1::vector.121"* %144 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %146, i8 0, i64 24, i1 false) #9
  %147 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 2, i32 0, i32 1
  %148 = bitcast i32** %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = bitcast %"class.std::__1::vector.121"* %145 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = sub i64 %149, %151
  %153 = ashr exact i64 %152, 2
  %154 = icmp eq i64 %152, 0
  br i1 %154, label %180, label %155

155:                                              ; preds = %143
  %156 = icmp ugt i64 %153, 4611686018427387903
  br i1 %156, label %15, label %157

157:                                              ; preds = %155
  %158 = tail call i8* @_Znwm(i64 %152) #11
  %159 = bitcast i8* %158 to i32*
  %160 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 2, i32 0, i32 1
  %161 = bitcast i32** %160 to i8**
  store i8* %158, i8** %161, align 8
  %162 = bitcast %"class.std::__1::vector.121"* %144 to i8**
  store i8* %158, i8** %162, align 8
  %163 = getelementptr inbounds i32, i32* %159, i64 %153
  %164 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 2, i32 0, i32 2, i32 0, i32 0
  store i32* %163, i32** %164, align 8
  %165 = getelementptr inbounds %"class.std::__1::vector.121", %"class.std::__1::vector.121"* %145, i64 0, i32 0, i32 0
  %166 = load i32*, i32** %165, align 8
  %167 = load i64, i64* %148, align 8
  %168 = bitcast i32** %160 to i64*
  %169 = ptrtoint i8* %158 to i64
  %170 = ptrtoint i32* %166 to i64
  %171 = sub i64 %167, %170
  %172 = icmp sgt i64 %171, 0
  br i1 %172, label %173, label %178

173:                                              ; preds = %157
  %174 = lshr exact i64 %171, 2
  %175 = bitcast i32* %166 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %158, i8* align 4 %175, i64 %171, i1 false) #9
  %176 = getelementptr inbounds i32, i32* %159, i64 %174
  %177 = ptrtoint i32* %176 to i64
  br label %178

178:                                              ; preds = %173, %157
  %179 = phi i64 [ %177, %173 ], [ %169, %157 ]
  store i64 %179, i64* %168, align 8
  br label %180

180:                                              ; preds = %178, %143
  %181 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 1
  %182 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 1
  %183 = bitcast %"class.std::__1::vector"* %181 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %183, i8 0, i64 24, i1 false) #9
  %184 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 1, i32 0, i32 1
  %185 = bitcast i32** %184 to i64*
  %186 = load i64, i64* %185, align 8
  %187 = bitcast %"class.std::__1::vector"* %182 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = sub i64 %186, %188
  %190 = ashr exact i64 %189, 2
  %191 = icmp eq i64 %189, 0
  br i1 %191, label %80, label %53
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare void @llvm.assume(i1) #9

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__16__sortIRZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS1_18PassesEncoderStateEE3$_2PhEEvT0_S8_T_"(i8*, i8*, %class.anon.341* readonly dereferenceable(8)) unnamed_addr #0 {
  %4 = getelementptr inbounds %class.anon.341, %class.anon.341* %2, i64 0, i32 0
  br label %5

5:                                                ; preds = %487, %3
  %6 = phi i8* [ %1, %3 ], [ %462, %487 ]
  %7 = phi i8* [ %0, %3 ], [ %14, %487 ]
  %8 = ptrtoint i8* %6 to i64
  %9 = getelementptr inbounds i8, i8* %6, i64 -1
  %10 = ptrtoint i8* %6 to i64
  br label %11

11:                                               ; preds = %496, %5
  %12 = phi i8* [ %7, %5 ], [ %497, %496 ]
  br label %13

13:                                               ; preds = %408, %11
  %14 = phi i8* [ %12, %11 ], [ %393, %408 ]
  %15 = ptrtoint i8* %14 to i64
  %16 = sub i64 %8, %15
  switch i64 %16, label %140 [
    i64 0, label %500
    i64 1, label %500
    i64 2, label %17
    i64 3, label %32
    i64 4, label %81
    i64 5, label %86
  ]

17:                                               ; preds = %13
  %18 = getelementptr inbounds i8, i8* %6, i64 -1
  %19 = load i8, i8* %18, align 1
  %20 = load i8, i8* %14, align 1
  %21 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %22 = zext i8 %19 to i64
  %23 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %21, i64 0, i32 0, i32 0
  %24 = load i64*, i64** %23, align 8
  %25 = getelementptr inbounds i64, i64* %24, i64 %22
  %26 = load i64, i64* %25, align 8
  %27 = zext i8 %20 to i64
  %28 = getelementptr inbounds i64, i64* %24, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = icmp ugt i64 %26, %29
  br i1 %30, label %31, label %500

31:                                               ; preds = %17
  store i8 %19, i8* %14, align 1
  store i8 %20, i8* %18, align 1
  br label %500

32:                                               ; preds = %13
  %33 = getelementptr inbounds i8, i8* %14, i64 1
  %34 = getelementptr inbounds i8, i8* %6, i64 -1
  %35 = load i8, i8* %33, align 1
  %36 = load i8, i8* %14, align 1
  %37 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %38 = zext i8 %35 to i64
  %39 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %37, i64 0, i32 0, i32 0
  %40 = load i64*, i64** %39, align 8
  %41 = getelementptr inbounds i64, i64* %40, i64 %38
  %42 = load i64, i64* %41, align 8
  %43 = zext i8 %36 to i64
  %44 = getelementptr inbounds i64, i64* %40, i64 %43
  %45 = load i64, i64* %44, align 8
  %46 = icmp ugt i64 %42, %45
  %47 = load i8, i8* %34, align 1
  %48 = zext i8 %47 to i64
  %49 = getelementptr inbounds i64, i64* %40, i64 %48
  %50 = load i64, i64* %49, align 8
  %51 = icmp ugt i64 %50, %42
  br i1 %46, label %67, label %52

52:                                               ; preds = %32
  br i1 %51, label %53, label %500

53:                                               ; preds = %52
  store i8 %47, i8* %33, align 1
  store i8 %35, i8* %34, align 1
  %54 = load i8, i8* %33, align 1
  %55 = load i8, i8* %14, align 1
  %56 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %57 = zext i8 %54 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %56, i64 0, i32 0, i32 0
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 %57
  %61 = load i64, i64* %60, align 8
  %62 = zext i8 %55 to i64
  %63 = getelementptr inbounds i64, i64* %59, i64 %62
  %64 = load i64, i64* %63, align 8
  %65 = icmp ugt i64 %61, %64
  br i1 %65, label %66, label %500

66:                                               ; preds = %53
  store i8 %54, i8* %14, align 1
  store i8 %55, i8* %33, align 1
  br label %500

67:                                               ; preds = %32
  br i1 %51, label %68, label %69

68:                                               ; preds = %67
  store i8 %47, i8* %14, align 1
  store i8 %36, i8* %34, align 1
  br label %500

69:                                               ; preds = %67
  store i8 %35, i8* %14, align 1
  store i8 %36, i8* %33, align 1
  %70 = load i8, i8* %34, align 1
  %71 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %72 = zext i8 %70 to i64
  %73 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %71, i64 0, i32 0, i32 0
  %74 = load i64*, i64** %73, align 8
  %75 = getelementptr inbounds i64, i64* %74, i64 %72
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds i64, i64* %74, i64 %43
  %78 = load i64, i64* %77, align 8
  %79 = icmp ugt i64 %76, %78
  br i1 %79, label %80, label %500

80:                                               ; preds = %69
  store i8 %70, i8* %33, align 1
  store i8 %36, i8* %34, align 1
  br label %500

81:                                               ; preds = %13
  %82 = getelementptr inbounds i8, i8* %14, i64 1
  %83 = getelementptr inbounds i8, i8* %14, i64 2
  %84 = getelementptr inbounds i8, i8* %6, i64 -1
  %85 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS1_18PassesEncoderStateEE3$_2PhEEjT0_S8_S8_S8_T_"(i8* %14, i8* %82, i8* %83, i8* %84, %class.anon.341* dereferenceable(8) %2)
  br label %500

86:                                               ; preds = %13
  %87 = getelementptr inbounds i8, i8* %14, i64 1
  %88 = getelementptr inbounds i8, i8* %14, i64 2
  %89 = getelementptr inbounds i8, i8* %14, i64 3
  %90 = getelementptr inbounds i8, i8* %6, i64 -1
  %91 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS1_18PassesEncoderStateEE3$_2PhEEjT0_S8_S8_S8_T_"(i8* %14, i8* %87, i8* %88, i8* %89, %class.anon.341* dereferenceable(8) %2) #9
  %92 = load i8, i8* %90, align 1
  %93 = load i8, i8* %89, align 1
  %94 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %95 = zext i8 %92 to i64
  %96 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %94, i64 0, i32 0, i32 0
  %97 = load i64*, i64** %96, align 8
  %98 = getelementptr inbounds i64, i64* %97, i64 %95
  %99 = load i64, i64* %98, align 8
  %100 = zext i8 %93 to i64
  %101 = getelementptr inbounds i64, i64* %97, i64 %100
  %102 = load i64, i64* %101, align 8
  %103 = icmp ugt i64 %99, %102
  br i1 %103, label %104, label %500

104:                                              ; preds = %86
  store i8 %92, i8* %89, align 1
  store i8 %93, i8* %90, align 1
  %105 = load i8, i8* %89, align 1
  %106 = load i8, i8* %88, align 1
  %107 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %108 = zext i8 %105 to i64
  %109 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %107, i64 0, i32 0, i32 0
  %110 = load i64*, i64** %109, align 8
  %111 = getelementptr inbounds i64, i64* %110, i64 %108
  %112 = load i64, i64* %111, align 8
  %113 = zext i8 %106 to i64
  %114 = getelementptr inbounds i64, i64* %110, i64 %113
  %115 = load i64, i64* %114, align 8
  %116 = icmp ugt i64 %112, %115
  br i1 %116, label %117, label %500

117:                                              ; preds = %104
  store i8 %105, i8* %88, align 1
  store i8 %106, i8* %89, align 1
  %118 = load i8, i8* %87, align 1
  %119 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %120 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %119, i64 0, i32 0, i32 0
  %121 = load i64*, i64** %120, align 8
  %122 = getelementptr inbounds i64, i64* %121, i64 %108
  %123 = load i64, i64* %122, align 8
  %124 = zext i8 %118 to i64
  %125 = getelementptr inbounds i64, i64* %121, i64 %124
  %126 = load i64, i64* %125, align 8
  %127 = icmp ugt i64 %123, %126
  br i1 %127, label %128, label %500

128:                                              ; preds = %117
  store i8 %105, i8* %87, align 1
  store i8 %118, i8* %88, align 1
  %129 = load i8, i8* %14, align 1
  %130 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %131 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %130, i64 0, i32 0, i32 0
  %132 = load i64*, i64** %131, align 8
  %133 = getelementptr inbounds i64, i64* %132, i64 %108
  %134 = load i64, i64* %133, align 8
  %135 = zext i8 %129 to i64
  %136 = getelementptr inbounds i64, i64* %132, i64 %135
  %137 = load i64, i64* %136, align 8
  %138 = icmp ugt i64 %134, %137
  br i1 %138, label %139, label %500

139:                                              ; preds = %128
  store i8 %105, i8* %14, align 1
  store i8 %129, i8* %87, align 1
  br label %500

140:                                              ; preds = %13
  %141 = icmp slt i64 %16, 31
  br i1 %141, label %142, label %228

142:                                              ; preds = %140
  %143 = getelementptr inbounds i8, i8* %14, i64 2
  %144 = getelementptr inbounds i8, i8* %14, i64 1
  %145 = load i8, i8* %144, align 1
  %146 = load i8, i8* %14, align 1
  %147 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %148 = zext i8 %145 to i64
  %149 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %147, i64 0, i32 0, i32 0
  %150 = load i64*, i64** %149, align 8
  %151 = getelementptr inbounds i64, i64* %150, i64 %148
  %152 = load i64, i64* %151, align 8
  %153 = zext i8 %146 to i64
  %154 = getelementptr inbounds i64, i64* %150, i64 %153
  %155 = load i64, i64* %154, align 8
  %156 = icmp ugt i64 %152, %155
  %157 = load i8, i8* %143, align 1
  %158 = zext i8 %157 to i64
  %159 = getelementptr inbounds i64, i64* %150, i64 %158
  %160 = load i64, i64* %159, align 8
  %161 = icmp ugt i64 %160, %152
  br i1 %156, label %173, label %162

162:                                              ; preds = %142
  br i1 %161, label %163, label %185

163:                                              ; preds = %162
  store i8 %157, i8* %144, align 1
  store i8 %145, i8* %143, align 1
  %164 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %165 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %164, i64 0, i32 0, i32 0
  %166 = load i64*, i64** %165, align 8
  %167 = getelementptr inbounds i64, i64* %166, i64 %158
  %168 = load i64, i64* %167, align 8
  %169 = getelementptr inbounds i64, i64* %166, i64 %153
  %170 = load i64, i64* %169, align 8
  %171 = icmp ugt i64 %168, %170
  br i1 %171, label %172, label %185

172:                                              ; preds = %163
  store i8 %157, i8* %14, align 1
  store i8 %146, i8* %144, align 1
  br label %185

173:                                              ; preds = %142
  br i1 %161, label %174, label %175

174:                                              ; preds = %173
  store i8 %157, i8* %14, align 1
  store i8 %146, i8* %143, align 1
  br label %185

175:                                              ; preds = %173
  store i8 %145, i8* %14, align 1
  store i8 %146, i8* %144, align 1
  %176 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %177 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %176, i64 0, i32 0, i32 0
  %178 = load i64*, i64** %177, align 8
  %179 = getelementptr inbounds i64, i64* %178, i64 %158
  %180 = load i64, i64* %179, align 8
  %181 = getelementptr inbounds i64, i64* %178, i64 %153
  %182 = load i64, i64* %181, align 8
  %183 = icmp ugt i64 %180, %182
  br i1 %183, label %184, label %185

184:                                              ; preds = %175
  store i8 %157, i8* %144, align 1
  store i8 %146, i8* %143, align 1
  br label %185

185:                                              ; preds = %184, %175, %174, %172, %163, %162
  %186 = phi i8 [ %157, %162 ], [ %145, %163 ], [ %145, %172 ], [ %146, %174 ], [ %157, %175 ], [ %146, %184 ]
  %187 = getelementptr inbounds i8, i8* %14, i64 3
  %188 = icmp eq i8* %187, %6
  br i1 %188, label %500, label %189

189:                                              ; preds = %185, %226
  %190 = phi i8 [ %227, %226 ], [ %186, %185 ]
  %191 = phi i8* [ %224, %226 ], [ %187, %185 ]
  %192 = phi i8* [ %191, %226 ], [ %143, %185 ]
  %193 = load i8, i8* %191, align 1
  %194 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %195 = zext i8 %193 to i64
  %196 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %194, i64 0, i32 0, i32 0
  %197 = load i64*, i64** %196, align 8
  %198 = getelementptr inbounds i64, i64* %197, i64 %195
  %199 = load i64, i64* %198, align 8
  %200 = zext i8 %190 to i64
  %201 = getelementptr inbounds i64, i64* %197, i64 %200
  %202 = load i64, i64* %201, align 8
  %203 = icmp ugt i64 %199, %202
  br i1 %203, label %204, label %223

204:                                              ; preds = %189, %209
  %205 = phi i8 [ %211, %209 ], [ %190, %189 ]
  %206 = phi i8* [ %207, %209 ], [ %191, %189 ]
  %207 = phi i8* [ %210, %209 ], [ %192, %189 ]
  store i8 %205, i8* %206, align 1
  %208 = icmp eq i8* %207, %14
  br i1 %208, label %221, label %209

209:                                              ; preds = %204
  %210 = getelementptr inbounds i8, i8* %207, i64 -1
  %211 = load i8, i8* %210, align 1
  %212 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %213 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %212, i64 0, i32 0, i32 0
  %214 = load i64*, i64** %213, align 8
  %215 = getelementptr inbounds i64, i64* %214, i64 %195
  %216 = load i64, i64* %215, align 8
  %217 = zext i8 %211 to i64
  %218 = getelementptr inbounds i64, i64* %214, i64 %217
  %219 = load i64, i64* %218, align 8
  %220 = icmp ugt i64 %216, %219
  br i1 %220, label %204, label %221

221:                                              ; preds = %209, %204
  %222 = phi i8* [ %14, %204 ], [ %207, %209 ]
  store i8 %193, i8* %222, align 1
  br label %223

223:                                              ; preds = %221, %189
  %224 = getelementptr inbounds i8, i8* %191, i64 1
  %225 = icmp eq i8* %224, %6
  br i1 %225, label %500, label %226

226:                                              ; preds = %223
  %227 = load i8, i8* %191, align 1
  br label %189

228:                                              ; preds = %140
  %229 = icmp sgt i64 %16, 999
  %230 = lshr i64 %16, 1
  %231 = getelementptr inbounds i8, i8* %14, i64 %230
  br i1 %229, label %232, label %293

232:                                              ; preds = %228
  %233 = lshr i64 %16, 2
  %234 = getelementptr inbounds i8, i8* %14, i64 %233
  %235 = getelementptr inbounds i8, i8* %231, i64 %233
  %236 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS1_18PassesEncoderStateEE3$_2PhEEjT0_S8_S8_S8_T_"(i8* %14, i8* %234, i8* %231, i8* %235, %class.anon.341* dereferenceable(8) %2) #9
  %237 = load i8, i8* %9, align 1
  %238 = load i8, i8* %235, align 1
  %239 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %240 = zext i8 %237 to i64
  %241 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %239, i64 0, i32 0, i32 0
  %242 = load i64*, i64** %241, align 8
  %243 = getelementptr inbounds i64, i64* %242, i64 %240
  %244 = load i64, i64* %243, align 8
  %245 = zext i8 %238 to i64
  %246 = getelementptr inbounds i64, i64* %242, i64 %245
  %247 = load i64, i64* %246, align 8
  %248 = icmp ugt i64 %244, %247
  br i1 %248, label %249, label %340

249:                                              ; preds = %232
  store i8 %237, i8* %235, align 1
  store i8 %238, i8* %9, align 1
  %250 = add i32 %236, 1
  %251 = load i8, i8* %235, align 1
  %252 = load i8, i8* %231, align 1
  %253 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %254 = zext i8 %251 to i64
  %255 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %253, i64 0, i32 0, i32 0
  %256 = load i64*, i64** %255, align 8
  %257 = getelementptr inbounds i64, i64* %256, i64 %254
  %258 = load i64, i64* %257, align 8
  %259 = zext i8 %252 to i64
  %260 = getelementptr inbounds i64, i64* %256, i64 %259
  %261 = load i64, i64* %260, align 8
  %262 = icmp ugt i64 %258, %261
  br i1 %262, label %263, label %340

263:                                              ; preds = %249
  store i8 %251, i8* %231, align 1
  store i8 %252, i8* %235, align 1
  %264 = add i32 %236, 2
  %265 = load i8, i8* %231, align 1
  %266 = load i8, i8* %234, align 1
  %267 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %268 = zext i8 %265 to i64
  %269 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %267, i64 0, i32 0, i32 0
  %270 = load i64*, i64** %269, align 8
  %271 = getelementptr inbounds i64, i64* %270, i64 %268
  %272 = load i64, i64* %271, align 8
  %273 = zext i8 %266 to i64
  %274 = getelementptr inbounds i64, i64* %270, i64 %273
  %275 = load i64, i64* %274, align 8
  %276 = icmp ugt i64 %272, %275
  br i1 %276, label %277, label %340

277:                                              ; preds = %263
  store i8 %265, i8* %234, align 1
  store i8 %266, i8* %231, align 1
  %278 = add i32 %236, 3
  %279 = load i8, i8* %234, align 1
  %280 = load i8, i8* %14, align 1
  %281 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %282 = zext i8 %279 to i64
  %283 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %281, i64 0, i32 0, i32 0
  %284 = load i64*, i64** %283, align 8
  %285 = getelementptr inbounds i64, i64* %284, i64 %282
  %286 = load i64, i64* %285, align 8
  %287 = zext i8 %280 to i64
  %288 = getelementptr inbounds i64, i64* %284, i64 %287
  %289 = load i64, i64* %288, align 8
  %290 = icmp ugt i64 %286, %289
  br i1 %290, label %291, label %340

291:                                              ; preds = %277
  store i8 %279, i8* %14, align 1
  store i8 %280, i8* %234, align 1
  %292 = add i32 %236, 4
  br label %340

293:                                              ; preds = %228
  %294 = load i8, i8* %231, align 1
  %295 = load i8, i8* %14, align 1
  %296 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %297 = zext i8 %294 to i64
  %298 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %296, i64 0, i32 0, i32 0
  %299 = load i64*, i64** %298, align 8
  %300 = getelementptr inbounds i64, i64* %299, i64 %297
  %301 = load i64, i64* %300, align 8
  %302 = zext i8 %295 to i64
  %303 = getelementptr inbounds i64, i64* %299, i64 %302
  %304 = load i64, i64* %303, align 8
  %305 = icmp ugt i64 %301, %304
  %306 = load i8, i8* %9, align 1
  %307 = zext i8 %306 to i64
  %308 = getelementptr inbounds i64, i64* %299, i64 %307
  %309 = load i64, i64* %308, align 8
  %310 = icmp ugt i64 %309, %301
  br i1 %305, label %326, label %311

311:                                              ; preds = %293
  br i1 %310, label %312, label %340

312:                                              ; preds = %311
  store i8 %306, i8* %231, align 1
  store i8 %294, i8* %9, align 1
  %313 = load i8, i8* %231, align 1
  %314 = load i8, i8* %14, align 1
  %315 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %316 = zext i8 %313 to i64
  %317 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %315, i64 0, i32 0, i32 0
  %318 = load i64*, i64** %317, align 8
  %319 = getelementptr inbounds i64, i64* %318, i64 %316
  %320 = load i64, i64* %319, align 8
  %321 = zext i8 %314 to i64
  %322 = getelementptr inbounds i64, i64* %318, i64 %321
  %323 = load i64, i64* %322, align 8
  %324 = icmp ugt i64 %320, %323
  br i1 %324, label %325, label %340

325:                                              ; preds = %312
  store i8 %313, i8* %14, align 1
  store i8 %314, i8* %231, align 1
  br label %340

326:                                              ; preds = %293
  br i1 %310, label %327, label %328

327:                                              ; preds = %326
  store i8 %306, i8* %14, align 1
  store i8 %295, i8* %9, align 1
  br label %340

328:                                              ; preds = %326
  store i8 %294, i8* %14, align 1
  store i8 %295, i8* %231, align 1
  %329 = load i8, i8* %9, align 1
  %330 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %331 = zext i8 %329 to i64
  %332 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %330, i64 0, i32 0, i32 0
  %333 = load i64*, i64** %332, align 8
  %334 = getelementptr inbounds i64, i64* %333, i64 %331
  %335 = load i64, i64* %334, align 8
  %336 = getelementptr inbounds i64, i64* %333, i64 %302
  %337 = load i64, i64* %336, align 8
  %338 = icmp ugt i64 %335, %337
  br i1 %338, label %339, label %340

339:                                              ; preds = %328
  store i8 %329, i8* %231, align 1
  store i8 %295, i8* %9, align 1
  br label %340

340:                                              ; preds = %339, %328, %327, %325, %312, %311, %291, %277, %263, %249, %232
  %341 = phi i32 [ %292, %291 ], [ %278, %277 ], [ %264, %263 ], [ %250, %249 ], [ %236, %232 ], [ 1, %327 ], [ 0, %311 ], [ 2, %325 ], [ 1, %312 ], [ 2, %339 ], [ 1, %328 ]
  %342 = load i8, i8* %14, align 1
  %343 = load i8, i8* %231, align 1
  %344 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %345 = zext i8 %342 to i64
  %346 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %344, i64 0, i32 0, i32 0
  %347 = load i64*, i64** %346, align 8
  %348 = getelementptr inbounds i64, i64* %347, i64 %345
  %349 = load i64, i64* %348, align 8
  %350 = zext i8 %343 to i64
  %351 = getelementptr inbounds i64, i64* %347, i64 %350
  %352 = load i64, i64* %351, align 8
  %353 = icmp ugt i64 %349, %352
  br i1 %353, label %419, label %354

354:                                              ; preds = %340, %411
  %355 = phi i8* [ %356, %411 ], [ %9, %340 ]
  %356 = getelementptr inbounds i8, i8* %355, i64 -1
  %357 = icmp eq i8* %14, %356
  br i1 %357, label %358, label %411

358:                                              ; preds = %354
  %359 = getelementptr inbounds i8, i8* %14, i64 1
  %360 = load i8, i8* %9, align 1
  %361 = zext i8 %360 to i64
  %362 = getelementptr inbounds i64, i64* %347, i64 %361
  %363 = load i64, i64* %362, align 8
  %364 = icmp ugt i64 %349, %363
  br i1 %364, label %379, label %365

365:                                              ; preds = %358
  %366 = icmp eq i8* %359, %9
  br i1 %366, label %500, label %367

367:                                              ; preds = %365, %376
  %368 = phi i8* [ %377, %376 ], [ %359, %365 ]
  %369 = load i8, i8* %368, align 1
  %370 = zext i8 %369 to i64
  %371 = getelementptr inbounds i64, i64* %347, i64 %370
  %372 = load i64, i64* %371, align 8
  %373 = icmp ugt i64 %349, %372
  br i1 %373, label %374, label %376

374:                                              ; preds = %367
  store i8 %360, i8* %368, align 1
  store i8 %369, i8* %9, align 1
  %375 = getelementptr inbounds i8, i8* %368, i64 1
  br label %379

376:                                              ; preds = %367
  %377 = getelementptr inbounds i8, i8* %368, i64 1
  %378 = icmp eq i8* %377, %9
  br i1 %378, label %500, label %367

379:                                              ; preds = %374, %358
  %380 = phi i8* [ %359, %358 ], [ %375, %374 ]
  %381 = icmp eq i8* %380, %9
  br i1 %381, label %500, label %382

382:                                              ; preds = %379, %410
  %383 = phi i8* [ %399, %410 ], [ %380, %379 ]
  %384 = phi i8* [ %402, %410 ], [ %9, %379 ]
  %385 = load i8, i8* %14, align 1
  %386 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %387 = zext i8 %385 to i64
  %388 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %386, i64 0, i32 0, i32 0
  %389 = load i64*, i64** %388, align 8
  %390 = getelementptr inbounds i64, i64* %389, i64 %387
  %391 = load i64, i64* %390, align 8
  br label %392

392:                                              ; preds = %392, %382
  %393 = phi i8* [ %383, %382 ], [ %399, %392 ]
  %394 = load i8, i8* %393, align 1
  %395 = zext i8 %394 to i64
  %396 = getelementptr inbounds i64, i64* %389, i64 %395
  %397 = load i64, i64* %396, align 8
  %398 = icmp ugt i64 %391, %397
  %399 = getelementptr inbounds i8, i8* %393, i64 1
  br i1 %398, label %400, label %392

400:                                              ; preds = %392, %400
  %401 = phi i8* [ %402, %400 ], [ %384, %392 ]
  %402 = getelementptr inbounds i8, i8* %401, i64 -1
  %403 = load i8, i8* %402, align 1
  %404 = zext i8 %403 to i64
  %405 = getelementptr inbounds i64, i64* %389, i64 %404
  %406 = load i64, i64* %405, align 8
  %407 = icmp ugt i64 %391, %406
  br i1 %407, label %400, label %408

408:                                              ; preds = %400
  %409 = icmp ult i8* %393, %402
  br i1 %409, label %410, label %13

410:                                              ; preds = %408
  store i8 %403, i8* %393, align 1
  store i8 %394, i8* %402, align 1
  br label %382

411:                                              ; preds = %354
  %412 = load i8, i8* %356, align 1
  %413 = zext i8 %412 to i64
  %414 = getelementptr inbounds i64, i64* %347, i64 %413
  %415 = load i64, i64* %414, align 8
  %416 = icmp ugt i64 %415, %352
  br i1 %416, label %417, label %354

417:                                              ; preds = %411
  store i8 %412, i8* %14, align 1
  store i8 %342, i8* %356, align 1
  %418 = add i32 %341, 1
  br label %419

419:                                              ; preds = %340, %417
  %420 = phi i32 [ %418, %417 ], [ %341, %340 ]
  %421 = phi i8* [ %356, %417 ], [ %9, %340 ]
  %422 = ptrtoint i8* %14 to i64
  %423 = getelementptr inbounds i8, i8* %14, i64 1
  %424 = icmp ult i8* %423, %421
  br i1 %424, label %425, label %459

425:                                              ; preds = %419, %455
  %426 = phi i8* [ %458, %455 ], [ %231, %419 ]
  %427 = phi i32 [ %456, %455 ], [ %420, %419 ]
  %428 = phi i8* [ %444, %455 ], [ %423, %419 ]
  %429 = phi i8* [ %447, %455 ], [ %421, %419 ]
  %430 = load i8, i8* %426, align 1
  %431 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %432 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %431, i64 0, i32 0, i32 0
  %433 = load i64*, i64** %432, align 8
  %434 = zext i8 %430 to i64
  %435 = getelementptr inbounds i64, i64* %433, i64 %434
  %436 = load i64, i64* %435, align 8
  br label %437

437:                                              ; preds = %437, %425
  %438 = phi i8* [ %428, %425 ], [ %444, %437 ]
  %439 = load i8, i8* %438, align 1
  %440 = zext i8 %439 to i64
  %441 = getelementptr inbounds i64, i64* %433, i64 %440
  %442 = load i64, i64* %441, align 8
  %443 = icmp ugt i64 %442, %436
  %444 = getelementptr inbounds i8, i8* %438, i64 1
  br i1 %443, label %437, label %445

445:                                              ; preds = %437, %445
  %446 = phi i8* [ %447, %445 ], [ %429, %437 ]
  %447 = getelementptr inbounds i8, i8* %446, i64 -1
  %448 = load i8, i8* %447, align 1
  %449 = zext i8 %448 to i64
  %450 = getelementptr inbounds i64, i64* %433, i64 %449
  %451 = load i64, i64* %450, align 8
  %452 = icmp ugt i64 %451, %436
  br i1 %452, label %453, label %445

453:                                              ; preds = %445
  %454 = icmp ugt i8* %438, %447
  br i1 %454, label %459, label %455

455:                                              ; preds = %453
  store i8 %448, i8* %438, align 1
  store i8 %439, i8* %447, align 1
  %456 = add i32 %427, 1
  %457 = icmp eq i8* %426, %438
  %458 = select i1 %457, i8* %447, i8* %426
  br label %425

459:                                              ; preds = %453, %419
  %460 = phi i8* [ %231, %419 ], [ %426, %453 ]
  %461 = phi i32 [ %420, %419 ], [ %427, %453 ]
  %462 = phi i8* [ %423, %419 ], [ %438, %453 ]
  %463 = icmp eq i8* %462, %460
  br i1 %463, label %479, label %464

464:                                              ; preds = %459
  %465 = load i8, i8* %460, align 1
  %466 = load i8, i8* %462, align 1
  %467 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %4, align 8
  %468 = zext i8 %465 to i64
  %469 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %467, i64 0, i32 0, i32 0
  %470 = load i64*, i64** %469, align 8
  %471 = getelementptr inbounds i64, i64* %470, i64 %468
  %472 = load i64, i64* %471, align 8
  %473 = zext i8 %466 to i64
  %474 = getelementptr inbounds i64, i64* %470, i64 %473
  %475 = load i64, i64* %474, align 8
  %476 = icmp ugt i64 %472, %475
  br i1 %476, label %477, label %479

477:                                              ; preds = %464
  store i8 %465, i8* %462, align 1
  store i8 %466, i8* %460, align 1
  %478 = add i32 %461, 1
  br label %479

479:                                              ; preds = %459, %477, %464
  %480 = phi i32 [ %478, %477 ], [ %461, %464 ], [ %461, %459 ]
  %481 = icmp eq i32 %480, 0
  br i1 %481, label %482, label %489

482:                                              ; preds = %479
  %483 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS1_18PassesEncoderStateEE3$_2PhEEbT0_S8_T_"(i8* %14, i8* %462, %class.anon.341* dereferenceable(8) %2)
  %484 = getelementptr inbounds i8, i8* %462, i64 1
  %485 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS1_18PassesEncoderStateEE3$_2PhEEbT0_S8_T_"(i8* %484, i8* %6, %class.anon.341* dereferenceable(8) %2)
  br i1 %485, label %486, label %488

486:                                              ; preds = %482
  br i1 %483, label %500, label %487

487:                                              ; preds = %486, %498
  br label %5

488:                                              ; preds = %482
  br i1 %483, label %496, label %489

489:                                              ; preds = %488, %479
  %490 = ptrtoint i8* %462 to i64
  %491 = sub i64 %490, %422
  %492 = sub i64 %10, %490
  %493 = icmp slt i64 %491, %492
  br i1 %493, label %494, label %498

494:                                              ; preds = %489
  tail call fastcc void @"_ZNSt3__16__sortIRZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS1_18PassesEncoderStateEE3$_2PhEEvT0_S8_T_"(i8* %14, i8* %462, %class.anon.341* dereferenceable(8) %2)
  %495 = getelementptr inbounds i8, i8* %462, i64 1
  br label %496

496:                                              ; preds = %494, %488
  %497 = phi i8* [ %484, %488 ], [ %495, %494 ]
  br label %11

498:                                              ; preds = %489
  %499 = getelementptr inbounds i8, i8* %462, i64 1
  tail call fastcc void @"_ZNSt3__16__sortIRZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS1_18PassesEncoderStateEE3$_2PhEEvT0_S8_T_"(i8* %499, i8* %6, %class.anon.341* dereferenceable(8) %2)
  br label %487

500:                                              ; preds = %486, %379, %13, %13, %365, %376, %223, %185, %139, %128, %117, %104, %86, %80, %69, %68, %66, %53, %52, %17, %31, %81
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS1_18PassesEncoderStateEE3$_2PhEEjT0_S8_S8_S8_T_"(i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, %class.anon.341* nocapture readonly dereferenceable(8)) unnamed_addr #10 {
  %6 = load i8, i8* %1, align 1
  %7 = load i8, i8* %0, align 1
  %8 = getelementptr inbounds %class.anon.341, %class.anon.341* %4, i64 0, i32 0
  %9 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %8, align 8
  %10 = zext i8 %6 to i64
  %11 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %9, i64 0, i32 0, i32 0
  %12 = load i64*, i64** %11, align 8
  %13 = getelementptr inbounds i64, i64* %12, i64 %10
  %14 = load i64, i64* %13, align 8
  %15 = zext i8 %7 to i64
  %16 = getelementptr inbounds i64, i64* %12, i64 %15
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %14, %17
  %19 = load i8, i8* %2, align 1
  %20 = zext i8 %19 to i64
  %21 = getelementptr inbounds i64, i64* %12, i64 %20
  %22 = load i64, i64* %21, align 8
  %23 = icmp ugt i64 %22, %14
  br i1 %18, label %41, label %24

24:                                               ; preds = %5
  br i1 %23, label %25, label %55

25:                                               ; preds = %24
  store i8 %19, i8* %1, align 1
  store i8 %6, i8* %2, align 1
  %26 = load i8, i8* %1, align 1
  %27 = load i8, i8* %0, align 1
  %28 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %8, align 8
  %29 = zext i8 %26 to i64
  %30 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %28, i64 0, i32 0, i32 0
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds i64, i64* %31, i64 %29
  %33 = load i64, i64* %32, align 8
  %34 = zext i8 %27 to i64
  %35 = getelementptr inbounds i64, i64* %31, i64 %34
  %36 = load i64, i64* %35, align 8
  %37 = icmp ugt i64 %33, %36
  br i1 %37, label %38, label %55

38:                                               ; preds = %25
  store i8 %26, i8* %0, align 1
  store i8 %27, i8* %1, align 1
  %39 = load i8, i8* %2, align 1
  %40 = zext i8 %39 to i64
  br label %55

41:                                               ; preds = %5
  br i1 %23, label %42, label %43

42:                                               ; preds = %41
  store i8 %19, i8* %0, align 1
  store i8 %7, i8* %2, align 1
  br label %55

43:                                               ; preds = %41
  store i8 %6, i8* %0, align 1
  store i8 %7, i8* %1, align 1
  %44 = load i8, i8* %2, align 1
  %45 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %8, align 8
  %46 = zext i8 %44 to i64
  %47 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %45, i64 0, i32 0, i32 0
  %48 = load i64*, i64** %47, align 8
  %49 = getelementptr inbounds i64, i64* %48, i64 %46
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds i64, i64* %48, i64 %15
  %52 = load i64, i64* %51, align 8
  %53 = icmp ugt i64 %50, %52
  br i1 %53, label %54, label %55

54:                                               ; preds = %43
  store i8 %44, i8* %1, align 1
  store i8 %7, i8* %2, align 1
  br label %55

55:                                               ; preds = %24, %25, %38, %42, %43, %54
  %56 = phi i64 [ %20, %24 ], [ %10, %25 ], [ %40, %38 ], [ %15, %42 ], [ %46, %43 ], [ %15, %54 ]
  %57 = phi i8 [ %19, %24 ], [ %6, %25 ], [ %39, %38 ], [ %7, %42 ], [ %44, %43 ], [ %7, %54 ]
  %58 = phi i32 [ 0, %24 ], [ 1, %25 ], [ 2, %38 ], [ 1, %42 ], [ 1, %43 ], [ 2, %54 ]
  %59 = load i8, i8* %3, align 1
  %60 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %8, align 8
  %61 = zext i8 %59 to i64
  %62 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %60, i64 0, i32 0, i32 0
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds i64, i64* %63, i64 %61
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds i64, i64* %63, i64 %56
  %67 = load i64, i64* %66, align 8
  %68 = icmp ugt i64 %65, %67
  br i1 %68, label %69, label %99

69:                                               ; preds = %55
  store i8 %59, i8* %2, align 1
  store i8 %57, i8* %3, align 1
  %70 = add nuw nsw i32 %58, 1
  %71 = load i8, i8* %2, align 1
  %72 = load i8, i8* %1, align 1
  %73 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %8, align 8
  %74 = zext i8 %71 to i64
  %75 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %73, i64 0, i32 0, i32 0
  %76 = load i64*, i64** %75, align 8
  %77 = getelementptr inbounds i64, i64* %76, i64 %74
  %78 = load i64, i64* %77, align 8
  %79 = zext i8 %72 to i64
  %80 = getelementptr inbounds i64, i64* %76, i64 %79
  %81 = load i64, i64* %80, align 8
  %82 = icmp ugt i64 %78, %81
  br i1 %82, label %83, label %99

83:                                               ; preds = %69
  store i8 %71, i8* %1, align 1
  store i8 %72, i8* %2, align 1
  %84 = add nuw nsw i32 %58, 2
  %85 = load i8, i8* %1, align 1
  %86 = load i8, i8* %0, align 1
  %87 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %8, align 8
  %88 = zext i8 %85 to i64
  %89 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %87, i64 0, i32 0, i32 0
  %90 = load i64*, i64** %89, align 8
  %91 = getelementptr inbounds i64, i64* %90, i64 %88
  %92 = load i64, i64* %91, align 8
  %93 = zext i8 %86 to i64
  %94 = getelementptr inbounds i64, i64* %90, i64 %93
  %95 = load i64, i64* %94, align 8
  %96 = icmp ugt i64 %92, %95
  br i1 %96, label %97, label %99

97:                                               ; preds = %83
  store i8 %85, i8* %0, align 1
  store i8 %86, i8* %1, align 1
  %98 = add nuw nsw i32 %58, 3
  br label %99

99:                                               ; preds = %69, %97, %83, %55
  %100 = phi i32 [ %98, %97 ], [ %84, %83 ], [ %70, %69 ], [ %58, %55 ]
  ret i32 %100
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS1_18PassesEncoderStateEE3$_2PhEEbT0_S8_T_"(i8*, i8*, %class.anon.341* nocapture readonly dereferenceable(8)) unnamed_addr #0 {
  %4 = ptrtoint i8* %1 to i64
  %5 = ptrtoint i8* %0 to i64
  %6 = sub i64 %4, %5
  switch i64 %6, label %133 [
    i64 0, label %227
    i64 1, label %227
    i64 2, label %7
    i64 3, label %23
    i64 4, label %73
    i64 5, label %78
  ]

7:                                                ; preds = %3
  %8 = getelementptr inbounds i8, i8* %1, i64 -1
  %9 = load i8, i8* %8, align 1
  %10 = load i8, i8* %0, align 1
  %11 = getelementptr inbounds %class.anon.341, %class.anon.341* %2, i64 0, i32 0
  %12 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %11, align 8
  %13 = zext i8 %9 to i64
  %14 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %12, i64 0, i32 0, i32 0
  %15 = load i64*, i64** %14, align 8
  %16 = getelementptr inbounds i64, i64* %15, i64 %13
  %17 = load i64, i64* %16, align 8
  %18 = zext i8 %10 to i64
  %19 = getelementptr inbounds i64, i64* %15, i64 %18
  %20 = load i64, i64* %19, align 8
  %21 = icmp ugt i64 %17, %20
  br i1 %21, label %22, label %227

22:                                               ; preds = %7
  store i8 %9, i8* %0, align 1
  store i8 %10, i8* %8, align 1
  br label %227

23:                                               ; preds = %3
  %24 = getelementptr inbounds i8, i8* %0, i64 1
  %25 = getelementptr inbounds i8, i8* %1, i64 -1
  %26 = load i8, i8* %24, align 1
  %27 = load i8, i8* %0, align 1
  %28 = getelementptr inbounds %class.anon.341, %class.anon.341* %2, i64 0, i32 0
  %29 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %28, align 8
  %30 = zext i8 %26 to i64
  %31 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %29, i64 0, i32 0, i32 0
  %32 = load i64*, i64** %31, align 8
  %33 = getelementptr inbounds i64, i64* %32, i64 %30
  %34 = load i64, i64* %33, align 8
  %35 = zext i8 %27 to i64
  %36 = getelementptr inbounds i64, i64* %32, i64 %35
  %37 = load i64, i64* %36, align 8
  %38 = icmp ugt i64 %34, %37
  %39 = load i8, i8* %25, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds i64, i64* %32, i64 %40
  %42 = load i64, i64* %41, align 8
  %43 = icmp ugt i64 %42, %34
  br i1 %38, label %59, label %44

44:                                               ; preds = %23
  br i1 %43, label %45, label %227

45:                                               ; preds = %44
  store i8 %39, i8* %24, align 1
  store i8 %26, i8* %25, align 1
  %46 = load i8, i8* %24, align 1
  %47 = load i8, i8* %0, align 1
  %48 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %28, align 8
  %49 = zext i8 %46 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %48, i64 0, i32 0, i32 0
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds i64, i64* %51, i64 %49
  %53 = load i64, i64* %52, align 8
  %54 = zext i8 %47 to i64
  %55 = getelementptr inbounds i64, i64* %51, i64 %54
  %56 = load i64, i64* %55, align 8
  %57 = icmp ugt i64 %53, %56
  br i1 %57, label %58, label %227

58:                                               ; preds = %45
  store i8 %46, i8* %0, align 1
  store i8 %47, i8* %24, align 1
  br label %227

59:                                               ; preds = %23
  br i1 %43, label %60, label %61

60:                                               ; preds = %59
  store i8 %39, i8* %0, align 1
  store i8 %27, i8* %25, align 1
  br label %227

61:                                               ; preds = %59
  store i8 %26, i8* %0, align 1
  store i8 %27, i8* %24, align 1
  %62 = load i8, i8* %25, align 1
  %63 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %28, align 8
  %64 = zext i8 %62 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %63, i64 0, i32 0, i32 0
  %66 = load i64*, i64** %65, align 8
  %67 = getelementptr inbounds i64, i64* %66, i64 %64
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds i64, i64* %66, i64 %35
  %70 = load i64, i64* %69, align 8
  %71 = icmp ugt i64 %68, %70
  br i1 %71, label %72, label %227

72:                                               ; preds = %61
  store i8 %62, i8* %24, align 1
  store i8 %27, i8* %25, align 1
  br label %227

73:                                               ; preds = %3
  %74 = getelementptr inbounds i8, i8* %0, i64 1
  %75 = getelementptr inbounds i8, i8* %0, i64 2
  %76 = getelementptr inbounds i8, i8* %1, i64 -1
  %77 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS1_18PassesEncoderStateEE3$_2PhEEjT0_S8_S8_S8_T_"(i8* %0, i8* %74, i8* %75, i8* %76, %class.anon.341* dereferenceable(8) %2)
  br label %227

78:                                               ; preds = %3
  %79 = getelementptr inbounds i8, i8* %0, i64 1
  %80 = getelementptr inbounds i8, i8* %0, i64 2
  %81 = getelementptr inbounds i8, i8* %0, i64 3
  %82 = getelementptr inbounds i8, i8* %1, i64 -1
  %83 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl12_GLOBAL__N_125FindBestBlockEntropyModelERNS1_18PassesEncoderStateEE3$_2PhEEjT0_S8_S8_S8_T_"(i8* %0, i8* %79, i8* %80, i8* %81, %class.anon.341* dereferenceable(8) %2) #9
  %84 = load i8, i8* %82, align 1
  %85 = load i8, i8* %81, align 1
  %86 = getelementptr inbounds %class.anon.341, %class.anon.341* %2, i64 0, i32 0
  %87 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %86, align 8
  %88 = zext i8 %84 to i64
  %89 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %87, i64 0, i32 0, i32 0
  %90 = load i64*, i64** %89, align 8
  %91 = getelementptr inbounds i64, i64* %90, i64 %88
  %92 = load i64, i64* %91, align 8
  %93 = zext i8 %85 to i64
  %94 = getelementptr inbounds i64, i64* %90, i64 %93
  %95 = load i64, i64* %94, align 8
  %96 = icmp ugt i64 %92, %95
  br i1 %96, label %97, label %227

97:                                               ; preds = %78
  store i8 %84, i8* %81, align 1
  store i8 %85, i8* %82, align 1
  %98 = load i8, i8* %81, align 1
  %99 = load i8, i8* %80, align 1
  %100 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %86, align 8
  %101 = zext i8 %98 to i64
  %102 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %100, i64 0, i32 0, i32 0
  %103 = load i64*, i64** %102, align 8
  %104 = getelementptr inbounds i64, i64* %103, i64 %101
  %105 = load i64, i64* %104, align 8
  %106 = zext i8 %99 to i64
  %107 = getelementptr inbounds i64, i64* %103, i64 %106
  %108 = load i64, i64* %107, align 8
  %109 = icmp ugt i64 %105, %108
  br i1 %109, label %110, label %227

110:                                              ; preds = %97
  store i8 %98, i8* %80, align 1
  store i8 %99, i8* %81, align 1
  %111 = load i8, i8* %79, align 1
  %112 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %86, align 8
  %113 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %112, i64 0, i32 0, i32 0
  %114 = load i64*, i64** %113, align 8
  %115 = getelementptr inbounds i64, i64* %114, i64 %101
  %116 = load i64, i64* %115, align 8
  %117 = zext i8 %111 to i64
  %118 = getelementptr inbounds i64, i64* %114, i64 %117
  %119 = load i64, i64* %118, align 8
  %120 = icmp ugt i64 %116, %119
  br i1 %120, label %121, label %227

121:                                              ; preds = %110
  store i8 %98, i8* %79, align 1
  store i8 %111, i8* %80, align 1
  %122 = load i8, i8* %0, align 1
  %123 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %86, align 8
  %124 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %123, i64 0, i32 0, i32 0
  %125 = load i64*, i64** %124, align 8
  %126 = getelementptr inbounds i64, i64* %125, i64 %101
  %127 = load i64, i64* %126, align 8
  %128 = zext i8 %122 to i64
  %129 = getelementptr inbounds i64, i64* %125, i64 %128
  %130 = load i64, i64* %129, align 8
  %131 = icmp ugt i64 %127, %130
  br i1 %131, label %132, label %227

132:                                              ; preds = %121
  store i8 %98, i8* %0, align 1
  store i8 %122, i8* %79, align 1
  br label %227

133:                                              ; preds = %3
  %134 = getelementptr inbounds i8, i8* %0, i64 2
  %135 = getelementptr inbounds i8, i8* %0, i64 1
  %136 = load i8, i8* %135, align 1
  %137 = load i8, i8* %0, align 1
  %138 = getelementptr inbounds %class.anon.341, %class.anon.341* %2, i64 0, i32 0
  %139 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %138, align 8
  %140 = zext i8 %136 to i64
  %141 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %139, i64 0, i32 0, i32 0
  %142 = load i64*, i64** %141, align 8
  %143 = getelementptr inbounds i64, i64* %142, i64 %140
  %144 = load i64, i64* %143, align 8
  %145 = zext i8 %137 to i64
  %146 = getelementptr inbounds i64, i64* %142, i64 %145
  %147 = load i64, i64* %146, align 8
  %148 = icmp ugt i64 %144, %147
  %149 = load i8, i8* %134, align 1
  %150 = zext i8 %149 to i64
  %151 = getelementptr inbounds i64, i64* %142, i64 %150
  %152 = load i64, i64* %151, align 8
  %153 = icmp ugt i64 %152, %144
  br i1 %148, label %165, label %154

154:                                              ; preds = %133
  br i1 %153, label %155, label %177

155:                                              ; preds = %154
  store i8 %149, i8* %135, align 1
  store i8 %136, i8* %134, align 1
  %156 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %138, align 8
  %157 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %156, i64 0, i32 0, i32 0
  %158 = load i64*, i64** %157, align 8
  %159 = getelementptr inbounds i64, i64* %158, i64 %150
  %160 = load i64, i64* %159, align 8
  %161 = getelementptr inbounds i64, i64* %158, i64 %145
  %162 = load i64, i64* %161, align 8
  %163 = icmp ugt i64 %160, %162
  br i1 %163, label %164, label %177

164:                                              ; preds = %155
  store i8 %149, i8* %0, align 1
  store i8 %137, i8* %135, align 1
  br label %177

165:                                              ; preds = %133
  br i1 %153, label %166, label %167

166:                                              ; preds = %165
  store i8 %149, i8* %0, align 1
  store i8 %137, i8* %134, align 1
  br label %177

167:                                              ; preds = %165
  store i8 %136, i8* %0, align 1
  store i8 %137, i8* %135, align 1
  %168 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %138, align 8
  %169 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %168, i64 0, i32 0, i32 0
  %170 = load i64*, i64** %169, align 8
  %171 = getelementptr inbounds i64, i64* %170, i64 %150
  %172 = load i64, i64* %171, align 8
  %173 = getelementptr inbounds i64, i64* %170, i64 %145
  %174 = load i64, i64* %173, align 8
  %175 = icmp ugt i64 %172, %174
  br i1 %175, label %176, label %177

176:                                              ; preds = %167
  store i8 %149, i8* %135, align 1
  store i8 %137, i8* %134, align 1
  br label %177

177:                                              ; preds = %154, %155, %164, %166, %167, %176
  %178 = phi i8 [ %149, %154 ], [ %136, %155 ], [ %136, %164 ], [ %137, %166 ], [ %149, %167 ], [ %137, %176 ]
  %179 = getelementptr inbounds i8, i8* %0, i64 3
  %180 = icmp eq i8* %179, %1
  br i1 %180, label %227, label %181

181:                                              ; preds = %177, %222
  %182 = phi i8 [ %223, %222 ], [ %178, %177 ]
  %183 = phi i8* [ %220, %222 ], [ %179, %177 ]
  %184 = phi i32 [ %219, %222 ], [ 0, %177 ]
  %185 = phi i8* [ %183, %222 ], [ %134, %177 ]
  %186 = load i8, i8* %183, align 1
  %187 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %138, align 8
  %188 = zext i8 %186 to i64
  %189 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %187, i64 0, i32 0, i32 0
  %190 = load i64*, i64** %189, align 8
  %191 = getelementptr inbounds i64, i64* %190, i64 %188
  %192 = load i64, i64* %191, align 8
  %193 = zext i8 %182 to i64
  %194 = getelementptr inbounds i64, i64* %190, i64 %193
  %195 = load i64, i64* %194, align 8
  %196 = icmp ugt i64 %192, %195
  br i1 %196, label %197, label %218

197:                                              ; preds = %181, %202
  %198 = phi i8 [ %204, %202 ], [ %182, %181 ]
  %199 = phi i8* [ %200, %202 ], [ %183, %181 ]
  %200 = phi i8* [ %203, %202 ], [ %185, %181 ]
  store i8 %198, i8* %199, align 1
  %201 = icmp eq i8* %200, %0
  br i1 %201, label %214, label %202

202:                                              ; preds = %197
  %203 = getelementptr inbounds i8, i8* %200, i64 -1
  %204 = load i8, i8* %203, align 1
  %205 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %138, align 8
  %206 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %205, i64 0, i32 0, i32 0
  %207 = load i64*, i64** %206, align 8
  %208 = getelementptr inbounds i64, i64* %207, i64 %188
  %209 = load i64, i64* %208, align 8
  %210 = zext i8 %204 to i64
  %211 = getelementptr inbounds i64, i64* %207, i64 %210
  %212 = load i64, i64* %211, align 8
  %213 = icmp ugt i64 %209, %212
  br i1 %213, label %197, label %214

214:                                              ; preds = %197, %202
  %215 = phi i8* [ %0, %197 ], [ %200, %202 ]
  store i8 %186, i8* %215, align 1
  %216 = add i32 %184, 1
  %217 = icmp eq i32 %216, 8
  br i1 %217, label %224, label %218

218:                                              ; preds = %214, %181
  %219 = phi i32 [ %216, %214 ], [ %184, %181 ]
  %220 = getelementptr inbounds i8, i8* %183, i64 1
  %221 = icmp eq i8* %220, %1
  br i1 %221, label %227, label %222

222:                                              ; preds = %218
  %223 = load i8, i8* %183, align 1
  br label %181

224:                                              ; preds = %214
  %225 = getelementptr inbounds i8, i8* %183, i64 1
  %226 = icmp eq i8* %225, %1
  br label %227

227:                                              ; preds = %218, %224, %177, %132, %121, %110, %97, %78, %72, %61, %60, %58, %45, %44, %7, %22, %3, %3, %73
  %228 = phi i1 [ true, %73 ], [ true, %3 ], [ true, %3 ], [ true, %22 ], [ true, %7 ], [ true, %44 ], [ true, %45 ], [ true, %58 ], [ true, %60 ], [ true, %61 ], [ true, %72 ], [ true, %78 ], [ true, %97 ], [ true, %110 ], [ true, %121 ], [ true, %132 ], [ true, %177 ], [ %226, %224 ], [ true, %218 ]
  ret i1 %228
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.11"*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8* %2 to i64
  %5 = ptrtoint i8* %1 to i64
  %6 = sub i64 %4, %5
  %7 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector.11"* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp ugt i64 %6, %12
  %14 = inttoptr i64 %11 to i8*
  br i1 %13, label %40, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %11
  %20 = icmp ugt i64 %6, %19
  %21 = getelementptr inbounds i8, i8* %1, i64 %19
  %22 = select i1 %20, i8* %21, i8* %2
  %23 = ptrtoint i8* %22 to i64
  %24 = sub i64 %23, %5
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %15
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %1, i64 %24, i1 false) #9
  br label %27

27:                                               ; preds = %15, %26
  br i1 %20, label %28, label %38

28:                                               ; preds = %27
  %29 = load i64, i64* %17, align 8
  %30 = sub i64 %4, %23
  %31 = icmp sgt i64 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %28
  %33 = inttoptr i64 %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %22, i64 %30, i1 false) #9
  %34 = getelementptr inbounds i8, i8* %33, i64 %30
  %35 = ptrtoint i8* %34 to i64
  br label %36

36:                                               ; preds = %28, %32
  %37 = phi i64 [ %35, %32 ], [ %29, %28 ]
  store i64 %37, i64* %17, align 8
  br label %66

38:                                               ; preds = %27
  %39 = getelementptr inbounds i8, i8* %14, i64 %24
  store i8* %39, i8** %16, align 8
  br label %66

40:                                               ; preds = %3
  %41 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 0
  %42 = icmp eq i64 %11, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 1
  %45 = bitcast i8** %44 to i64*
  store i64 %11, i64* %45, align 8
  tail call void @_ZdlPv(i8* nonnull %14) #11
  %46 = bitcast %"class.std::__1::vector.11"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 24, i1 false) #9
  br label %47

47:                                               ; preds = %40, %43
  %48 = phi i64 [ %9, %40 ], [ 0, %43 ]
  %49 = icmp slt i64 %6, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %47
  %51 = bitcast %"class.std::__1::vector.11"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %51) #12
  unreachable

52:                                               ; preds = %47
  %53 = icmp ult i64 %48, 4611686018427387903
  br i1 %53, label %54, label %58

54:                                               ; preds = %52
  %55 = shl i64 %48, 1
  %56 = icmp ult i64 %55, %6
  %57 = select i1 %56, i64 %6, i64 %55
  br label %58

58:                                               ; preds = %54, %52
  %59 = phi i64 [ %57, %54 ], [ 9223372036854775807, %52 ]
  %60 = tail call i8* @_Znwm(i64 %59) #11
  %61 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 1
  store i8* %60, i8** %61, align 8
  store i8* %60, i8** %41, align 8
  %62 = getelementptr inbounds i8, i8* %60, i64 %59
  store i8* %62, i8** %7, align 8
  %63 = bitcast i8** %61 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %60, i8* align 1 %1, i64 %6, i1 false) #9
  %64 = getelementptr inbounds i8, i8* %60, i64 %6
  %65 = ptrtoint i8* %64 to i64
  store i64 %65, i64* %63, align 8
  br label %66

66:                                               ; preds = %36, %38, %58
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.11"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #9
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.11"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.11"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #12
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #11
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #9
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #9
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #11
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #2

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #2

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #2

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIZNS_24DefaultEncoderHeuristics20LossyFrameHeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_0ZNS2_20LossyFrameHeuristicsES4_S6_S9_SC_SD_SF_E3$_1E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to %class.anon.329**
  %4 = load %class.anon.329*, %class.anon.329** %3, align 8
  %5 = getelementptr inbounds %class.anon.329, %class.anon.329* %4, i64 0, i32 0
  %6 = load %"struct.jxl::ArControlFieldHeuristics"*, %"struct.jxl::ArControlFieldHeuristics"** %5, align 8
  %7 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics", %"struct.jxl::ArControlFieldHeuristics"* %6, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.jxl::ArControlFieldHeuristics::TempImages"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"struct.jxl::ArControlFieldHeuristics"* %6 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = sdiv exact i64 %12, 96
  %14 = icmp ult i64 %13, %1
  %15 = inttoptr i64 %11 to %"struct.jxl::ArControlFieldHeuristics::TempImages"*
  %16 = inttoptr i64 %9 to %"struct.jxl::ArControlFieldHeuristics::TempImages"*
  br i1 %14, label %17, label %20

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics", %"struct.jxl::ArControlFieldHeuristics"* %6, i64 0, i32 0
  %19 = sub i64 %1, %13
  tail call void @_ZNSt3__16vectorIN3jxl24ArControlFieldHeuristics10TempImagesENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.322"* %18, i64 %19) #9
  br label %45

20:                                               ; preds = %2
  %21 = icmp ugt i64 %13, %1
  br i1 %21, label %22, label %45

22:                                               ; preds = %20
  %23 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %15, i64 %1
  %24 = icmp eq %"struct.jxl::ArControlFieldHeuristics::TempImages"* %23, %16
  br i1 %24, label %44, label %25

25:                                               ; preds = %22, %42
  %26 = phi %"struct.jxl::ArControlFieldHeuristics::TempImages"* [ %27, %42 ], [ %16, %22 ]
  %27 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %26, i64 -1
  %28 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %26, i64 -1, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  store i8* null, i8** %28, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %32, label %31

31:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %29) #9
  br label %32

32:                                               ; preds = %31, %25
  %33 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %26, i64 -1, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  store i8* null, i8** %33, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %34) #9
  br label %37

37:                                               ; preds = %36, %32
  %38 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %26, i64 -1, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  store i8* null, i8** %38, align 8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %42, label %41

41:                                               ; preds = %37
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #9
  br label %42

42:                                               ; preds = %41, %37
  %43 = icmp eq %"struct.jxl::ArControlFieldHeuristics::TempImages"* %27, %23
  br i1 %43, label %44, label %25

44:                                               ; preds = %42, %22
  store %"struct.jxl::ArControlFieldHeuristics::TempImages"* %23, %"struct.jxl::ArControlFieldHeuristics::TempImages"** %7, align 8
  br label %45

45:                                               ; preds = %44, %20, %17
  %46 = getelementptr inbounds %class.anon.329, %class.anon.329* %4, i64 0, i32 1
  %47 = load %"struct.jxl::CfLHeuristics"*, %"struct.jxl::CfLHeuristics"** %46, align 8
  %48 = mul i64 %1, 1376256
  %49 = tail call i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64 %48, i8* (i8*, i64)* null, i8* null) #9, !noalias !27
  %50 = ptrtoint i8* %49 to i64
  %51 = getelementptr inbounds %"struct.jxl::CfLHeuristics", %"struct.jxl::CfLHeuristics"* %47, i64 0, i32 1
  %52 = getelementptr inbounds %"class.std::__1::unique_ptr.105", %"class.std::__1::unique_ptr.105"* %51, i64 0, i32 0, i32 0, i32 0
  %53 = load float*, float** %52, align 8
  %54 = bitcast %"class.std::__1::unique_ptr.105"* %51 to i64*
  store i64 %50, i64* %54, align 8
  %55 = icmp eq float* %53, null
  br i1 %55, label %62, label %56

56:                                               ; preds = %45
  %57 = bitcast float* %53 to i8*
  %58 = getelementptr inbounds %"struct.jxl::CfLHeuristics", %"struct.jxl::CfLHeuristics"* %47, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %59 = load void (i8*, i8*)*, void (i8*, i8*)** %58, align 8
  %60 = getelementptr inbounds %"struct.jxl::CfLHeuristics", %"struct.jxl::CfLHeuristics"* %47, i64 0, i32 1, i32 0, i32 1, i32 0, i32 1
  %61 = load i8*, i8** %60, align 8
  tail call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %57, void (i8*, i8*)* %59, i8* %61) #9
  br label %62

62:                                               ; preds = %45, %56
  %63 = getelementptr inbounds %"struct.jxl::CfLHeuristics", %"struct.jxl::CfLHeuristics"* %47, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %64 = bitcast void (i8*, i8*)** %63 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 16, i1 false) #9
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIZNS_24DefaultEncoderHeuristics20LossyFrameHeuristicsEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPKNS_11ImageBundleEPNS_6Image3IfEEPS0_PNS_6AuxOutEE3$_0ZNS2_20LossyFrameHeuristicsES4_S6_S9_SC_SD_SF_E3$_1E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %class.anon**
  %7 = load %class.anon*, %class.anon** %6, align 8
  %8 = zext i32 %1 to i64
  %9 = getelementptr inbounds %class.anon, %class.anon* %7, i64 0, i32 0
  %10 = load %"struct.jxl::PassesEncoderState"**, %"struct.jxl::PassesEncoderState"*** %9, align 8
  %11 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %10, align 8
  %12 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %11, i64 0, i32 0, i32 2, i32 8
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, 7
  %15 = lshr i64 %14, 3
  %16 = urem i64 %8, %15
  %17 = udiv i64 %8, %15
  %18 = shl nuw nsw i64 %17, 3
  %19 = add nuw nsw i64 %18, 8
  %20 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %11, i64 0, i32 0, i32 2, i32 9
  %21 = load i64, i64* %20, align 8
  %22 = icmp ult i64 %21, %19
  %23 = select i1 %22, i64 %21, i64 %19
  %24 = shl nuw nsw i64 %16, 3
  %25 = add nuw nsw i64 %24, 8
  %26 = icmp ult i64 %13, %25
  %27 = select i1 %26, i64 %13, i64 %25
  %28 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %28) #9
  %29 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %30 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %31 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  %32 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  %33 = sub nsw i64 %27, %24
  %34 = sub nsw i64 %23, %18
  store i64 %24, i64* %29, align 8
  store i64 %18, i64* %30, align 8
  store i64 %33, i64* %31, align 8
  store i64 %34, i64* %32, align 8
  %35 = getelementptr inbounds %class.anon, %class.anon* %7, i64 0, i32 1
  %36 = load %"struct.jxl::CompressParams"*, %"struct.jxl::CompressParams"** %35, align 8
  %37 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %36, i64 0, i32 7
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, 4
  br i1 %39, label %40, label %49

40:                                               ; preds = %3
  %41 = getelementptr inbounds %class.anon, %class.anon* %7, i64 0, i32 2
  %42 = load %"struct.jxl::CfLHeuristics"*, %"struct.jxl::CfLHeuristics"** %41, align 8
  %43 = getelementptr inbounds %class.anon, %class.anon* %7, i64 0, i32 3
  %44 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %43, align 8
  %45 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %44, align 8
  %46 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %10, align 8
  %47 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %46, i64 0, i32 0, i32 4
  %48 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %46, i64 0, i32 0, i32 8
  call void @_ZN3jxl13CfLHeuristics11ComputeTileERKNS_4RectERKNS_6Image3IfEERKNS_15DequantMatricesEPKNS_15AcStrategyImageEPKNS_9QuantizerEbmPNS_19ColorCorrelationMapE(%"struct.jxl::CfLHeuristics"* %42, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::Image3"* dereferenceable(96) %45, %"class.jxl::DequantMatrices"* dereferenceable(736) %47, %"class.jxl::AcStrategyImage"* null, %"class.jxl::Quantizer"* null, i1 zeroext false, i64 %2, %"struct.jxl::ColorCorrelationMap"* %48) #9
  br label %49

49:                                               ; preds = %40, %3
  %50 = getelementptr inbounds %class.anon, %class.anon* %7, i64 0, i32 4
  %51 = load %"struct.jxl::AcStrategyHeuristics"*, %"struct.jxl::AcStrategyHeuristics"** %50, align 8
  call void @_ZN3jxl20AcStrategyHeuristics11ProcessRectERKNS_4RectE(%"struct.jxl::AcStrategyHeuristics"* %51, %"class.jxl::Rect"* nonnull dereferenceable(32) %4) #9
  %52 = getelementptr inbounds %class.anon, %class.anon* %7, i64 0, i32 5
  %53 = load %"struct.jxl::ArControlFieldHeuristics"*, %"struct.jxl::ArControlFieldHeuristics"** %52, align 8
  %54 = getelementptr inbounds %class.anon, %class.anon* %7, i64 0, i32 3
  %55 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %54, align 8
  %56 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %55, align 8
  %57 = load %"struct.jxl::PassesEncoderState"**, %"struct.jxl::PassesEncoderState"*** %9, align 8
  %58 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %57, align 8
  call void @_ZN3jxl24ArControlFieldHeuristics7RunRectERKNS_4RectERKNS_6Image3IfEEPNS_18PassesEncoderStateEm(%"struct.jxl::ArControlFieldHeuristics"* %53, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::Image3"* dereferenceable(96) %56, %"struct.jxl::PassesEncoderState"* %58, i64 %2) #9
  %59 = load %"struct.jxl::PassesEncoderState"**, %"struct.jxl::PassesEncoderState"*** %9, align 8
  %60 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %59, align 8
  %61 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %60, i64 0, i32 0, i32 3
  %62 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %60, i64 0, i32 1
  call void @_ZN3jxl16AdjustQuantFieldERKNS_15AcStrategyImageERKNS_4RectEPNS_5PlaneIfEE(%"class.jxl::AcStrategyImage"* dereferenceable(48) %61, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::Plane"* %62) #9
  %63 = getelementptr inbounds %class.anon, %class.anon* %7, i64 0, i32 6
  %64 = load %"class.jxl::Quantizer"*, %"class.jxl::Quantizer"** %63, align 8
  %65 = load %"struct.jxl::PassesEncoderState"**, %"struct.jxl::PassesEncoderState"*** %9, align 8
  %66 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %65, align 8
  %67 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %66, i64 0, i32 1
  %68 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %66, i64 0, i32 0, i32 6
  call void @_ZN3jxl9Quantizer17SetQuantFieldRectERKNS_5PlaneIfEERKNS_4RectEPNS1_IiEE(%"class.jxl::Quantizer"* %64, %"class.jxl::Plane"* dereferenceable(32) %67, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::Plane.21"* %68) #9
  %69 = load %"struct.jxl::CompressParams"*, %"struct.jxl::CompressParams"** %35, align 8
  %70 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %69, i64 0, i32 7
  %71 = load i32, i32* %70, align 4
  %72 = icmp slt i32 %71, 6
  br i1 %72, label %73, label %85

73:                                               ; preds = %49
  %74 = getelementptr inbounds %class.anon, %class.anon* %7, i64 0, i32 2
  %75 = load %"struct.jxl::CfLHeuristics"*, %"struct.jxl::CfLHeuristics"** %74, align 8
  %76 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %54, align 8
  %77 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %76, align 8
  %78 = load %"struct.jxl::PassesEncoderState"**, %"struct.jxl::PassesEncoderState"*** %9, align 8
  %79 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %78, align 8
  %80 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %79, i64 0, i32 0, i32 4
  %81 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %79, i64 0, i32 0, i32 3
  %82 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %79, i64 0, i32 0, i32 5
  %83 = icmp sgt i32 %71, 3
  %84 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %79, i64 0, i32 0, i32 8
  call void @_ZN3jxl13CfLHeuristics11ComputeTileERKNS_4RectERKNS_6Image3IfEERKNS_15DequantMatricesEPKNS_15AcStrategyImageEPKNS_9QuantizerEbmPNS_19ColorCorrelationMapE(%"struct.jxl::CfLHeuristics"* %75, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::Image3"* dereferenceable(96) %77, %"class.jxl::DequantMatrices"* dereferenceable(736) %80, %"class.jxl::AcStrategyImage"* %81, %"class.jxl::Quantizer"* %82, i1 zeroext %83, i64 %2, %"struct.jxl::ColorCorrelationMap"* %84) #9
  br label %85

85:                                               ; preds = %49, %73
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %28) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl24ArControlFieldHeuristics10TempImagesENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.322"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.322", %"class.std::__1::vector.322"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::ArControlFieldHeuristics::TempImages"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.322", %"class.std::__1::vector.322"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::ArControlFieldHeuristics::TempImages"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 96
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::ArControlFieldHeuristics::TempImages"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %13, i64 %18, i32 0, i32 0, i32 0
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 96
  %25 = add i64 %23, 96
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #9
  %27 = ptrtoint %"struct.jxl::ArControlFieldHeuristics::TempImages"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %143

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.322"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 96
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 192153584101141162
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.322"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #12
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 96
  %42 = icmp ult i64 %41, 96076792050570581
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 192153584101141162, %39 ]
  %50 = mul i64 %49, 96
  %51 = tail call i8* @_Znwm(i64 %50) #11
  %52 = bitcast i8* %51 to %"struct.jxl::ArControlFieldHeuristics::TempImages"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"struct.jxl::ArControlFieldHeuristics::TempImages"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %55, i64 %34
  %57 = ptrtoint %"struct.jxl::ArControlFieldHeuristics::TempImages"* %56 to i64
  %58 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %55, i64 %54
  %59 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"struct.jxl::ArControlFieldHeuristics::TempImages"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 96, i1 false) #9
  %64 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %61, i64 1
  %65 = ptrtoint %"struct.jxl::ArControlFieldHeuristics::TempImages"* %64 to i64
  %66 = icmp eq %"struct.jxl::ArControlFieldHeuristics::TempImages"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"struct.jxl::ArControlFieldHeuristics::TempImages"* %58 to i64
  %69 = ptrtoint %"struct.jxl::ArControlFieldHeuristics::TempImages"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.322", %"class.std::__1::vector.322"* %0, i64 0, i32 0, i32 0
  %71 = load %"struct.jxl::ArControlFieldHeuristics::TempImages"*, %"struct.jxl::ArControlFieldHeuristics::TempImages"** %70, align 8
  %72 = load %"struct.jxl::ArControlFieldHeuristics::TempImages"*, %"struct.jxl::ArControlFieldHeuristics::TempImages"** %6, align 8
  %73 = icmp eq %"struct.jxl::ArControlFieldHeuristics::TempImages"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"struct.jxl::ArControlFieldHeuristics::TempImages"* %71 to i64
  br label %114

76:                                               ; preds = %67, %76
  %77 = phi %"struct.jxl::ArControlFieldHeuristics::TempImages"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"struct.jxl::ArControlFieldHeuristics::TempImages"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %77, i64 -1
  %80 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %78, i64 -1
  %81 = bitcast %"struct.jxl::ArControlFieldHeuristics::TempImages"* %79 to i8*
  %82 = bitcast %"struct.jxl::ArControlFieldHeuristics::TempImages"* %80 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 24, i1 false) #9
  %83 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %77, i64 -1, i32 0, i32 0, i32 5
  %84 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %78, i64 -1, i32 0, i32 0, i32 5
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 0, i32 0, i32 0, i32 0
  %86 = bitcast %"class.std::__1::unique_ptr"* %84 to i64*
  %87 = load i64, i64* %86, align 8
  store i8* null, i8** %85, align 8
  %88 = bitcast %"class.std::__1::unique_ptr"* %83 to i64*
  store i64 %87, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %77, i64 -1, i32 1
  %90 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %78, i64 -1, i32 1
  %91 = bitcast %"class.jxl::Plane"* %89 to i8*
  %92 = bitcast %"class.jxl::Plane"* %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 24, i1 false) #9
  %93 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %77, i64 -1, i32 1, i32 0, i32 5
  %94 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %78, i64 -1, i32 1, i32 0, i32 5
  %95 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %94, i64 0, i32 0, i32 0, i32 0
  %96 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  %97 = load i64, i64* %96, align 8
  store i8* null, i8** %95, align 8
  %98 = bitcast %"class.std::__1::unique_ptr"* %93 to i64*
  store i64 %97, i64* %98, align 8
  %99 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %77, i64 -1, i32 2
  %100 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %78, i64 -1, i32 2
  %101 = bitcast %"class.jxl::Plane"* %99 to i8*
  %102 = bitcast %"class.jxl::Plane"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %101, i8* align 8 %102, i64 24, i1 false) #9
  %103 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %77, i64 -1, i32 2, i32 0, i32 5
  %104 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %78, i64 -1, i32 2, i32 0, i32 5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store i8* null, i8** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = icmp eq %"struct.jxl::ArControlFieldHeuristics::TempImages"* %80, %71
  br i1 %109, label %110, label %76

110:                                              ; preds = %76
  %111 = ptrtoint %"struct.jxl::ArControlFieldHeuristics::TempImages"* %79 to i64
  %112 = load i64, i64* %31, align 8
  %113 = load %"struct.jxl::ArControlFieldHeuristics::TempImages"*, %"struct.jxl::ArControlFieldHeuristics::TempImages"** %6, align 8
  br label %114

114:                                              ; preds = %74, %110
  %115 = phi %"struct.jxl::ArControlFieldHeuristics::TempImages"* [ %71, %74 ], [ %113, %110 ]
  %116 = phi i64 [ %57, %74 ], [ %111, %110 ]
  %117 = phi i64 [ %75, %74 ], [ %112, %110 ]
  store i64 %116, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %118 = inttoptr i64 %117 to %"struct.jxl::ArControlFieldHeuristics::TempImages"*
  %119 = icmp eq %"struct.jxl::ArControlFieldHeuristics::TempImages"* %115, %118
  br i1 %119, label %139, label %120

120:                                              ; preds = %114, %137
  %121 = phi %"struct.jxl::ArControlFieldHeuristics::TempImages"* [ %122, %137 ], [ %115, %114 ]
  %122 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %121, i64 -1
  %123 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %121, i64 -1, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %124 = load i8*, i8** %123, align 8
  store i8* null, i8** %123, align 8
  %125 = icmp eq i8* %124, null
  br i1 %125, label %127, label %126

126:                                              ; preds = %120
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %124) #9
  br label %127

127:                                              ; preds = %126, %120
  %128 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %121, i64 -1, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %129 = load i8*, i8** %128, align 8
  store i8* null, i8** %128, align 8
  %130 = icmp eq i8* %129, null
  br i1 %130, label %132, label %131

131:                                              ; preds = %127
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %129) #9
  br label %132

132:                                              ; preds = %131, %127
  %133 = getelementptr inbounds %"struct.jxl::ArControlFieldHeuristics::TempImages", %"struct.jxl::ArControlFieldHeuristics::TempImages"* %121, i64 -1, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %134 = load i8*, i8** %133, align 8
  store i8* null, i8** %133, align 8
  %135 = icmp eq i8* %134, null
  br i1 %135, label %137, label %136

136:                                              ; preds = %132
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %134) #9
  br label %137

137:                                              ; preds = %136, %132
  %138 = icmp eq %"struct.jxl::ArControlFieldHeuristics::TempImages"* %122, %118
  br i1 %138, label %139, label %120

139:                                              ; preds = %137, %114
  %140 = icmp eq i64 %117, 0
  br i1 %140, label %143, label %141

141:                                              ; preds = %139
  %142 = inttoptr i64 %117 to i8*
  tail call void @_ZdlPv(i8* %142) #11
  br label %143

143:                                              ; preds = %141, %139, %28
  ret void
}

declare i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64, i8* (i8*, i64)*, i8*) local_unnamed_addr #2

declare void @_ZN3jxl13CfLHeuristics11ComputeTileERKNS_4RectERKNS_6Image3IfEERKNS_15DequantMatricesEPKNS_15AcStrategyImageEPKNS_9QuantizerEbmPNS_19ColorCorrelationMapE(%"struct.jxl::CfLHeuristics"*, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::DequantMatrices"* dereferenceable(736), %"class.jxl::AcStrategyImage"*, %"class.jxl::Quantizer"*, i1 zeroext, i64, %"struct.jxl::ColorCorrelationMap"*) local_unnamed_addr #2

declare void @_ZN3jxl20AcStrategyHeuristics11ProcessRectERKNS_4RectE(%"struct.jxl::AcStrategyHeuristics"*, %"class.jxl::Rect"* dereferenceable(32)) local_unnamed_addr #2

declare void @_ZN3jxl24ArControlFieldHeuristics7RunRectERKNS_4RectERKNS_6Image3IfEEPNS_18PassesEncoderStateEm(%"struct.jxl::ArControlFieldHeuristics"*, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::PassesEncoderState"*, i64) local_unnamed_addr #2

declare void @_ZN3jxl16AdjustQuantFieldERKNS_15AcStrategyImageERKNS_4RectEPNS_5PlaneIfEE(%"class.jxl::AcStrategyImage"* dereferenceable(48), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Plane"*) local_unnamed_addr #2

declare void @_ZN3jxl9Quantizer17SetQuantFieldRectERKNS_5PlaneIfEERKNS_4RectEPNS1_IiEE(%"class.jxl::Quantizer"*, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Plane.21"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!5 = distinct !{!5, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3jxl13QuantEncoding3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!8 = distinct !{!8, !"_ZN3jxl13QuantEncoding3DCTERKNS_20DctQuantWeightParamsE"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!11 = distinct !{!11, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!14 = distinct !{!14, !"_ZN3jxl13QuantEncoding7LibraryEh"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!17 = distinct !{!17, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!20 = distinct !{!20, !"_ZN3jxl13QuantEncoding7LibraryEh"}
!21 = distinct !{!21, !22}
!22 = !{!"llvm.loop.isvectorized", i32 1}
!23 = distinct !{!23, !24}
!24 = !{!"llvm.loop.unroll.disable"}
!25 = distinct !{!25, !26, !22}
!26 = !{!"llvm.loop.unroll.runtime.disable"}
!27 = !{!28, !30}
!28 = distinct !{!28, !29, !"_ZN3hwy15AllocateAlignedIfEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvS7_mEPFvS7_S7_ES7_: argument 0"}
!29 = distinct !{!29, !"_ZN3hwy15AllocateAlignedIfEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvS7_mEPFvS7_S7_ES7_"}
!30 = distinct !{!30, !31, !"_ZN3hwy15AllocateAlignedIfEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm: argument 0"}
!31 = distinct !{!31, !"_ZN3hwy15AllocateAlignedIfEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm"}
