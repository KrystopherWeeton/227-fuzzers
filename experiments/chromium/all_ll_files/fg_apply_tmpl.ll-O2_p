; ModuleID = '../../third_party/dav1d/libdav1d/src/fg_apply_tmpl.c'
source_filename = "../../third_party/dav1d/libdav1d/src/fg_apply_tmpl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Dav1dFilmGrainDSPContext = type { void ([82 x i8]*, %struct.Dav1dFilmGrainData*)*, [3 x void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)*], void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i64, i8*, [82 x i8]*, i32, i32)*, [3 x void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)*] }
%struct.Dav1dFilmGrainData = type { i32, i32, [14 x [2 x i8]], i32, [2 x i32], [2 x [10 x [2 x i8]]], i32, i32, [24 x i8], [2 x [28 x i8]], i64, i32, [2 x i32], [2 x i32], [2 x i32], i32, i32 }
%struct.Dav1dPicture = type { %struct.Dav1dSequenceHeader*, %struct.Dav1dFrameHeader*, [3 x i8*], [2 x i64], %struct.Dav1dPictureParameters, %struct.Dav1dDataProps, %struct.Dav1dContentLightLevel*, %struct.Dav1dMasteringDisplay*, %struct.Dav1dITUTT35*, [4 x i64], %struct.Dav1dRef*, %struct.Dav1dRef*, %struct.Dav1dRef*, %struct.Dav1dRef*, %struct.Dav1dRef*, [4 x i64], %struct.Dav1dRef*, i8* }
%struct.Dav1dSequenceHeader = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [32 x %struct.Dav1dSequenceHeaderOperatingPoint], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [32 x %struct.Dav1dSequenceHeaderOperatingParameterInfo] }
%struct.Dav1dSequenceHeaderOperatingPoint = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.Dav1dSequenceHeaderOperatingParameterInfo = type { i32, i32, i32 }
%struct.Dav1dFrameHeader = type { %struct.anon, i32, [2 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [32 x %struct.Dav1dFrameHeaderOperatingPoint], i32, i32, i32, %struct.anon.0, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32, %struct.anon.1, %struct.anon.2, %struct.anon.3, %struct.anon.4, i32, %struct.anon.7, %struct.anon.8, %struct.anon.9, i32, i32, i32, i32, [2 x i32], i32, i32, [7 x %struct.Dav1dWarpedMotionParams] }
%struct.anon = type { %struct.Dav1dFilmGrainData, i32, i32 }
%struct.Dav1dFrameHeaderOperatingPoint = type { i32 }
%struct.anon.0 = type { i32, i32 }
%struct.anon.1 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i16], [65 x i16], i32 }
%struct.anon.2 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon.3 = type { i32, i32, i32, i32, %struct.Dav1dSegmentationDataSet, [8 x i32], [8 x i32] }
%struct.Dav1dSegmentationDataSet = type { [8 x %struct.Dav1dSegmentationData], i32, i32 }
%struct.Dav1dSegmentationData = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon.4 = type { %struct.anon.5, %struct.anon.6 }
%struct.anon.5 = type { i32, i32 }
%struct.anon.6 = type { i32, i32, i32 }
%struct.anon.7 = type { [2 x i32], i32, i32, i32, i32, %struct.Dav1dLoopfilterModeRefDeltas, i32 }
%struct.Dav1dLoopfilterModeRefDeltas = type { [2 x i32], [8 x i32] }
%struct.anon.8 = type { i32, i32, [8 x i32], [8 x i32] }
%struct.anon.9 = type { [3 x i32], [2 x i32] }
%struct.Dav1dWarpedMotionParams = type { i32, [6 x i32], %union.anon }
%union.anon = type { %struct.anon.10 }
%struct.anon.10 = type { i16, i16, i16, i16 }
%struct.Dav1dPictureParameters = type { i32, i32, i32, i32 }
%struct.Dav1dDataProps = type { i64, i64, i64, i64, %struct.Dav1dUserData }
%struct.Dav1dUserData = type { i8*, %struct.Dav1dRef* }
%struct.Dav1dContentLightLevel = type { i32, i32 }
%struct.Dav1dMasteringDisplay = type { [3 x [2 x i16]], [2 x i16], i32, i32 }
%struct.Dav1dITUTT35 = type { i8, i8, i64, i8* }
%struct.Dav1dRef = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden void @dav1d_apply_grain_8bpc(%struct.Dav1dFilmGrainDSPContext* nocapture readonly, %struct.Dav1dPicture* nocapture readonly, %struct.Dav1dPicture* nocapture readonly) local_unnamed_addr #0 {
  %4 = alloca [3 x [74 x [82 x i8]]], align 16
  %5 = alloca [3 x [256 x i8]], align 16
  %6 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 1
  %7 = load %struct.Dav1dFrameHeader*, %struct.Dav1dFrameHeader** %6, align 8
  %8 = bitcast %struct.Dav1dFrameHeader* %7 to i8*
  %9 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds [3 x [74 x [82 x i8]]], [3 x [74 x [82 x i8]]]* %4, i64 0, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 18204, i8* nonnull %10) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 18204, i1 false)
  %11 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 768, i8* nonnull %11) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 768, i1 false)
  %12 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 0
  %13 = load void ([82 x i8]*, %struct.Dav1dFilmGrainData*)*, void ([82 x i8]*, %struct.Dav1dFilmGrainData*)** %12, align 8
  %14 = getelementptr inbounds [3 x [74 x [82 x i8]]], [3 x [74 x [82 x i8]]]* %4, i64 0, i64 0, i64 0
  call void %13([82 x i8]* nonnull %14, %struct.Dav1dFilmGrainData* %9) #2
  %15 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 4, i64 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %22

18:                                               ; preds = %3
  %19 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %18, %3
  %23 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 4, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = add i32 %24, -1
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 1, i64 %26
  %28 = load void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)*, void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)** %27, align 8
  %29 = getelementptr inbounds [3 x [74 x [82 x i8]]], [3 x [74 x [82 x i8]]]* %4, i64 0, i64 1, i64 0
  call void %28([82 x i8]* %29, [82 x i8]* nonnull %14, %struct.Dav1dFilmGrainData* %9, i64 0) #2
  br label %30

30:                                               ; preds = %18, %22
  %31 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 4, i64 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 3
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %34, %30
  %39 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 4, i32 2
  %40 = load i32, i32* %39, align 8
  %41 = add i32 %40, -1
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 1, i64 %42
  %44 = load void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)*, void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)** %43, align 8
  %45 = getelementptr inbounds [3 x [74 x [82 x i8]]], [3 x [74 x [82 x i8]]]* %4, i64 0, i64 2, i64 0
  call void %44([82 x i8]* %45, [82 x i8]* nonnull %14, %struct.Dav1dFilmGrainData* %9, i64 1) #2
  br label %46

46:                                               ; preds = %34, %38
  %47 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %279, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 4, i32 3
  %52 = load i32, i32* %51, align 4
  %53 = shl i32 1, %52
  %54 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 2, i64 0, i64 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %50
  %58 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 2, i64 0, i64 1
  br label %65

59:                                               ; preds = %65, %50
  %60 = phi i8 [ 0, %50 ], [ %70, %65 ]
  %61 = add i32 %48, -1
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %77

63:                                               ; preds = %59
  %64 = zext i32 %61 to i64
  br label %169

65:                                               ; preds = %65, %57
  %66 = phi i64 [ 0, %57 ], [ %69, %65 ]
  %67 = load i8, i8* %58, align 1
  %68 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %66
  store i8 %67, i8* %68, align 1
  %69 = add nuw nsw i64 %66, 1
  %70 = load i8, i8* %54, align 1
  %71 = zext i8 %70 to i64
  %72 = icmp ult i64 %69, %71
  br i1 %72, label %65, label %59

73:                                               ; preds = %252, %248, %169
  %74 = icmp eq i64 %176, %64
  br i1 %74, label %77, label %75

75:                                               ; preds = %73
  %76 = load i8, i8* %177, align 1
  br label %169

77:                                               ; preds = %73, %59
  %78 = sext i32 %61 to i64
  %79 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 2, i64 %78, i64 0
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = icmp sgt i32 %53, %81
  br i1 %82, label %83, label %279

83:                                               ; preds = %77
  %84 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 2, i64 %78, i64 1
  %85 = zext i8 %80 to i64
  %86 = zext i32 %53 to i64
  %87 = sub nsw i64 %86, %85
  %88 = icmp ult i64 %87, 32
  br i1 %88, label %89, label %107

89:                                               ; preds = %167, %107, %83
  %90 = phi i64 [ %85, %107 ], [ %85, %83 ], [ %118, %167 ]
  %91 = sub nsw i64 %86, %90
  %92 = xor i64 %90, -1
  %93 = add nsw i64 %92, %86
  %94 = and i64 %91, 3
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %104, label %96

96:                                               ; preds = %89, %96
  %97 = phi i64 [ %101, %96 ], [ %90, %89 ]
  %98 = phi i64 [ %102, %96 ], [ %94, %89 ]
  %99 = load i8, i8* %84, align 1
  %100 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %97
  store i8 %99, i8* %100, align 1
  %101 = add nuw nsw i64 %97, 1
  %102 = add i64 %98, -1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %96, !llvm.loop !2

104:                                              ; preds = %96, %89
  %105 = phi i64 [ %90, %89 ], [ %101, %96 ]
  %106 = icmp ult i64 %93, 3
  br i1 %106, label %279, label %264

107:                                              ; preds = %83
  %108 = getelementptr [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %85
  %109 = getelementptr [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %86
  %110 = shl nsw i64 %78, 1
  %111 = add nsw i64 %110, 10
  %112 = getelementptr i8, i8* %8, i64 %111
  %113 = icmp ult i8* %108, %112
  %114 = icmp ult i8* %84, %109
  %115 = and i1 %113, %114
  br i1 %115, label %89, label %116

116:                                              ; preds = %107
  %117 = and i64 %87, -32
  %118 = add nsw i64 %117, %85
  %119 = add nsw i64 %117, -32
  %120 = lshr exact i64 %119, 5
  %121 = add nuw nsw i64 %120, 1
  %122 = and i64 %121, 1
  %123 = icmp eq i64 %119, 0
  br i1 %123, label %153, label %124

124:                                              ; preds = %116
  %125 = sub nuw nsw i64 %121, %122
  %126 = load i8, i8* %84, align 1, !alias.scope !4
  %127 = insertelement <16 x i8> undef, i8 %126, i32 0
  %128 = shufflevector <16 x i8> %127, <16 x i8> undef, <16 x i32> zeroinitializer
  %129 = insertelement <16 x i8> undef, i8 %126, i32 0
  %130 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> zeroinitializer
  %131 = load i8, i8* %84, align 1, !alias.scope !4
  %132 = insertelement <16 x i8> undef, i8 %131, i32 0
  %133 = shufflevector <16 x i8> %132, <16 x i8> undef, <16 x i32> zeroinitializer
  %134 = insertelement <16 x i8> undef, i8 %131, i32 0
  %135 = shufflevector <16 x i8> %134, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %136

136:                                              ; preds = %136, %124
  %137 = phi i64 [ 0, %124 ], [ %150, %136 ]
  %138 = phi i64 [ %125, %124 ], [ %151, %136 ]
  %139 = add i64 %137, %85
  %140 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %139
  %141 = bitcast i8* %140 to <16 x i8>*
  store <16 x i8> %128, <16 x i8>* %141, align 1, !alias.scope !7, !noalias !4
  %142 = getelementptr inbounds i8, i8* %140, i64 16
  %143 = bitcast i8* %142 to <16 x i8>*
  store <16 x i8> %130, <16 x i8>* %143, align 1, !alias.scope !7, !noalias !4
  %144 = or i64 %137, 32
  %145 = add i64 %144, %85
  %146 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %145
  %147 = bitcast i8* %146 to <16 x i8>*
  store <16 x i8> %133, <16 x i8>* %147, align 1, !alias.scope !7, !noalias !4
  %148 = getelementptr inbounds i8, i8* %146, i64 16
  %149 = bitcast i8* %148 to <16 x i8>*
  store <16 x i8> %135, <16 x i8>* %149, align 1, !alias.scope !7, !noalias !4
  %150 = add i64 %137, 64
  %151 = add i64 %138, -2
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %136, !llvm.loop !9

153:                                              ; preds = %136, %116
  %154 = phi i64 [ 0, %116 ], [ %150, %136 ]
  %155 = icmp eq i64 %122, 0
  br i1 %155, label %167, label %156

156:                                              ; preds = %153
  %157 = add i64 %154, %85
  %158 = load i8, i8* %84, align 1, !alias.scope !4
  %159 = insertelement <16 x i8> undef, i8 %158, i32 0
  %160 = shufflevector <16 x i8> %159, <16 x i8> undef, <16 x i32> zeroinitializer
  %161 = insertelement <16 x i8> undef, i8 %158, i32 0
  %162 = shufflevector <16 x i8> %161, <16 x i8> undef, <16 x i32> zeroinitializer
  %163 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %157
  %164 = bitcast i8* %163 to <16 x i8>*
  store <16 x i8> %160, <16 x i8>* %164, align 1, !alias.scope !7, !noalias !4
  %165 = getelementptr inbounds i8, i8* %163, i64 16
  %166 = bitcast i8* %165 to <16 x i8>*
  store <16 x i8> %162, <16 x i8>* %166, align 1, !alias.scope !7, !noalias !4
  br label %167

167:                                              ; preds = %153, %156
  %168 = icmp eq i64 %87, %117
  br i1 %168, label %279, label %89

169:                                              ; preds = %75, %63
  %170 = phi i8 [ %60, %63 ], [ %76, %75 ]
  %171 = phi i64 [ 0, %63 ], [ %176, %75 ]
  %172 = zext i8 %170 to i32
  %173 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 2, i64 %171, i64 1
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = add nuw nsw i64 %171, 1
  %177 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 2, i64 %176, i64 0
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 2, i64 %176, i64 1
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = sub nsw i32 %179, %172
  %184 = sub nsw i32 %182, %175
  %185 = ashr i32 %183, 1
  %186 = add nsw i32 %185, 65536
  %187 = sdiv i32 %186, %183
  %188 = mul nsw i32 %184, %187
  %189 = icmp sgt i32 %183, 0
  br i1 %189, label %190, label %73

190:                                              ; preds = %169
  %191 = zext i8 %170 to i64
  %192 = zext i32 %183 to i64
  %193 = sub nsw i32 %179, %172
  %194 = zext i32 %193 to i64
  %195 = icmp ult i32 %193, 16
  br i1 %195, label %250, label %196

196:                                              ; preds = %190
  %197 = and i64 %194, 4294967280
  %198 = insertelement <16 x i32> undef, i32 %188, i32 0
  %199 = shufflevector <16 x i32> %198, <16 x i32> undef, <16 x i32> zeroinitializer
  %200 = insertelement <16 x i8> undef, i8 %174, i32 0
  %201 = shufflevector <16 x i8> %200, <16 x i8> undef, <16 x i32> zeroinitializer
  %202 = add nsw i64 %197, -16
  %203 = lshr exact i64 %202, 4
  %204 = add nuw nsw i64 %203, 1
  %205 = and i64 %204, 1
  %206 = icmp eq i64 %202, 0
  br i1 %206, label %235, label %207

207:                                              ; preds = %196
  %208 = sub nuw nsw i64 %204, %205
  br label %209

209:                                              ; preds = %209, %207
  %210 = phi i64 [ 0, %207 ], [ %231, %209 ]
  %211 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %207 ], [ %232, %209 ]
  %212 = phi i64 [ %208, %207 ], [ %233, %209 ]
  %213 = mul nsw <16 x i32> %199, %211
  %214 = add nsw <16 x i32> %213, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %215 = lshr <16 x i32> %214, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %216 = trunc <16 x i32> %215 to <16 x i8>
  %217 = add <16 x i8> %201, %216
  %218 = add nuw nsw i64 %210, %191
  %219 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %218
  %220 = bitcast i8* %219 to <16 x i8>*
  store <16 x i8> %217, <16 x i8>* %220, align 1
  %221 = or i64 %210, 16
  %222 = add <16 x i32> %211, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %223 = mul nsw <16 x i32> %199, %222
  %224 = add nsw <16 x i32> %223, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %225 = lshr <16 x i32> %224, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %226 = trunc <16 x i32> %225 to <16 x i8>
  %227 = add <16 x i8> %201, %226
  %228 = add nuw nsw i64 %221, %191
  %229 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %228
  %230 = bitcast i8* %229 to <16 x i8>*
  store <16 x i8> %227, <16 x i8>* %230, align 1
  %231 = add i64 %210, 32
  %232 = add <16 x i32> %211, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %233 = add i64 %212, -2
  %234 = icmp eq i64 %233, 0
  br i1 %234, label %235, label %209, !llvm.loop !11

235:                                              ; preds = %209, %196
  %236 = phi i64 [ 0, %196 ], [ %231, %209 ]
  %237 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %196 ], [ %232, %209 ]
  %238 = icmp eq i64 %205, 0
  br i1 %238, label %248, label %239

239:                                              ; preds = %235
  %240 = mul nsw <16 x i32> %199, %237
  %241 = add nsw <16 x i32> %240, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %242 = lshr <16 x i32> %241, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %243 = trunc <16 x i32> %242 to <16 x i8>
  %244 = add <16 x i8> %201, %243
  %245 = add nuw nsw i64 %236, %191
  %246 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %245
  %247 = bitcast i8* %246 to <16 x i8>*
  store <16 x i8> %244, <16 x i8>* %247, align 1
  br label %248

248:                                              ; preds = %235, %239
  %249 = icmp eq i64 %197, %194
  br i1 %249, label %73, label %250

250:                                              ; preds = %248, %190
  %251 = phi i64 [ 0, %190 ], [ %197, %248 ]
  br label %252

252:                                              ; preds = %250, %252
  %253 = phi i64 [ %262, %252 ], [ %251, %250 ]
  %254 = trunc i64 %253 to i32
  %255 = mul nsw i32 %188, %254
  %256 = add nsw i32 %255, 32768
  %257 = lshr i32 %256, 16
  %258 = trunc i32 %257 to i8
  %259 = add i8 %174, %258
  %260 = add nuw nsw i64 %253, %191
  %261 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %260
  store i8 %259, i8* %261, align 1
  %262 = add nuw nsw i64 %253, 1
  %263 = icmp eq i64 %262, %192
  br i1 %263, label %73, label %252, !llvm.loop !12

264:                                              ; preds = %104, %264
  %265 = phi i64 [ %277, %264 ], [ %105, %104 ]
  %266 = load i8, i8* %84, align 1
  %267 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %265
  store i8 %266, i8* %267, align 1
  %268 = add nuw nsw i64 %265, 1
  %269 = load i8, i8* %84, align 1
  %270 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %268
  store i8 %269, i8* %270, align 1
  %271 = add nuw nsw i64 %265, 2
  %272 = load i8, i8* %84, align 1
  %273 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %271
  store i8 %272, i8* %273, align 1
  %274 = add nuw nsw i64 %265, 3
  %275 = load i8, i8* %84, align 1
  %276 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 0, i64 %274
  store i8 %275, i8* %276, align 1
  %277 = add nuw nsw i64 %265, 4
  %278 = icmp eq i64 %277, %86
  br i1 %278, label %279, label %264, !llvm.loop !14

279:                                              ; preds = %104, %264, %167, %77, %46
  %280 = load i32, i32* %15, align 8
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %511, label %282

282:                                              ; preds = %279
  %283 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 4, i32 3
  %284 = load i32, i32* %283, align 4
  %285 = shl i32 1, %284
  %286 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 0, i64 0, i64 0
  %287 = load i8, i8* %286, align 1
  %288 = icmp eq i8 %287, 0
  br i1 %288, label %291, label %289

289:                                              ; preds = %282
  %290 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 0, i64 0, i64 1
  br label %297

291:                                              ; preds = %297, %282
  %292 = phi i8 [ 0, %282 ], [ %302, %297 ]
  %293 = add i32 %280, -1
  %294 = icmp sgt i32 %293, 0
  br i1 %294, label %295, label %309

295:                                              ; preds = %291
  %296 = zext i32 %293 to i64
  br label %401

297:                                              ; preds = %297, %289
  %298 = phi i64 [ 0, %289 ], [ %301, %297 ]
  %299 = load i8, i8* %290, align 1
  %300 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %298
  store i8 %299, i8* %300, align 1
  %301 = add nuw nsw i64 %298, 1
  %302 = load i8, i8* %286, align 1
  %303 = zext i8 %302 to i64
  %304 = icmp ult i64 %301, %303
  br i1 %304, label %297, label %291

305:                                              ; preds = %484, %480, %401
  %306 = icmp eq i64 %408, %296
  br i1 %306, label %309, label %307

307:                                              ; preds = %305
  %308 = load i8, i8* %409, align 1
  br label %401

309:                                              ; preds = %305, %291
  %310 = sext i32 %293 to i64
  %311 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 0, i64 %310, i64 0
  %312 = load i8, i8* %311, align 1
  %313 = zext i8 %312 to i32
  %314 = icmp sgt i32 %285, %313
  br i1 %314, label %315, label %511

315:                                              ; preds = %309
  %316 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 0, i64 %310, i64 1
  %317 = zext i8 %312 to i64
  %318 = zext i32 %285 to i64
  %319 = sub nsw i64 %318, %317
  %320 = icmp ult i64 %319, 32
  br i1 %320, label %321, label %339

321:                                              ; preds = %399, %339, %315
  %322 = phi i64 [ %317, %339 ], [ %317, %315 ], [ %350, %399 ]
  %323 = sub nsw i64 %318, %322
  %324 = xor i64 %322, -1
  %325 = add nsw i64 %324, %318
  %326 = and i64 %323, 3
  %327 = icmp eq i64 %326, 0
  br i1 %327, label %336, label %328

328:                                              ; preds = %321, %328
  %329 = phi i64 [ %333, %328 ], [ %322, %321 ]
  %330 = phi i64 [ %334, %328 ], [ %326, %321 ]
  %331 = load i8, i8* %316, align 1
  %332 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %329
  store i8 %331, i8* %332, align 1
  %333 = add nuw nsw i64 %329, 1
  %334 = add i64 %330, -1
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %336, label %328, !llvm.loop !15

336:                                              ; preds = %328, %321
  %337 = phi i64 [ %322, %321 ], [ %333, %328 ]
  %338 = icmp ult i64 %325, 3
  br i1 %338, label %511, label %496

339:                                              ; preds = %315
  %340 = getelementptr [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %317
  %341 = getelementptr [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %318
  %342 = shl nsw i64 %310, 1
  %343 = add nsw i64 %342, 50
  %344 = getelementptr i8, i8* %8, i64 %343
  %345 = icmp ult i8* %340, %344
  %346 = icmp ult i8* %316, %341
  %347 = and i1 %345, %346
  br i1 %347, label %321, label %348

348:                                              ; preds = %339
  %349 = and i64 %319, -32
  %350 = add nsw i64 %349, %317
  %351 = add nsw i64 %349, -32
  %352 = lshr exact i64 %351, 5
  %353 = add nuw nsw i64 %352, 1
  %354 = and i64 %353, 1
  %355 = icmp eq i64 %351, 0
  br i1 %355, label %385, label %356

356:                                              ; preds = %348
  %357 = sub nuw nsw i64 %353, %354
  %358 = load i8, i8* %316, align 1, !alias.scope !16
  %359 = insertelement <16 x i8> undef, i8 %358, i32 0
  %360 = shufflevector <16 x i8> %359, <16 x i8> undef, <16 x i32> zeroinitializer
  %361 = insertelement <16 x i8> undef, i8 %358, i32 0
  %362 = shufflevector <16 x i8> %361, <16 x i8> undef, <16 x i32> zeroinitializer
  %363 = load i8, i8* %316, align 1, !alias.scope !16
  %364 = insertelement <16 x i8> undef, i8 %363, i32 0
  %365 = shufflevector <16 x i8> %364, <16 x i8> undef, <16 x i32> zeroinitializer
  %366 = insertelement <16 x i8> undef, i8 %363, i32 0
  %367 = shufflevector <16 x i8> %366, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %368

368:                                              ; preds = %368, %356
  %369 = phi i64 [ 0, %356 ], [ %382, %368 ]
  %370 = phi i64 [ %357, %356 ], [ %383, %368 ]
  %371 = add i64 %369, %317
  %372 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %371
  %373 = bitcast i8* %372 to <16 x i8>*
  store <16 x i8> %360, <16 x i8>* %373, align 1, !alias.scope !19, !noalias !16
  %374 = getelementptr inbounds i8, i8* %372, i64 16
  %375 = bitcast i8* %374 to <16 x i8>*
  store <16 x i8> %362, <16 x i8>* %375, align 1, !alias.scope !19, !noalias !16
  %376 = or i64 %369, 32
  %377 = add i64 %376, %317
  %378 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %377
  %379 = bitcast i8* %378 to <16 x i8>*
  store <16 x i8> %365, <16 x i8>* %379, align 1, !alias.scope !19, !noalias !16
  %380 = getelementptr inbounds i8, i8* %378, i64 16
  %381 = bitcast i8* %380 to <16 x i8>*
  store <16 x i8> %367, <16 x i8>* %381, align 1, !alias.scope !19, !noalias !16
  %382 = add i64 %369, 64
  %383 = add i64 %370, -2
  %384 = icmp eq i64 %383, 0
  br i1 %384, label %385, label %368, !llvm.loop !21

385:                                              ; preds = %368, %348
  %386 = phi i64 [ 0, %348 ], [ %382, %368 ]
  %387 = icmp eq i64 %354, 0
  br i1 %387, label %399, label %388

388:                                              ; preds = %385
  %389 = add i64 %386, %317
  %390 = load i8, i8* %316, align 1, !alias.scope !16
  %391 = insertelement <16 x i8> undef, i8 %390, i32 0
  %392 = shufflevector <16 x i8> %391, <16 x i8> undef, <16 x i32> zeroinitializer
  %393 = insertelement <16 x i8> undef, i8 %390, i32 0
  %394 = shufflevector <16 x i8> %393, <16 x i8> undef, <16 x i32> zeroinitializer
  %395 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %389
  %396 = bitcast i8* %395 to <16 x i8>*
  store <16 x i8> %392, <16 x i8>* %396, align 1, !alias.scope !19, !noalias !16
  %397 = getelementptr inbounds i8, i8* %395, i64 16
  %398 = bitcast i8* %397 to <16 x i8>*
  store <16 x i8> %394, <16 x i8>* %398, align 1, !alias.scope !19, !noalias !16
  br label %399

399:                                              ; preds = %385, %388
  %400 = icmp eq i64 %319, %349
  br i1 %400, label %511, label %321

401:                                              ; preds = %307, %295
  %402 = phi i8 [ %292, %295 ], [ %308, %307 ]
  %403 = phi i64 [ 0, %295 ], [ %408, %307 ]
  %404 = zext i8 %402 to i32
  %405 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 0, i64 %403, i64 1
  %406 = load i8, i8* %405, align 1
  %407 = zext i8 %406 to i32
  %408 = add nuw nsw i64 %403, 1
  %409 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 0, i64 %408, i64 0
  %410 = load i8, i8* %409, align 1
  %411 = zext i8 %410 to i32
  %412 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 0, i64 %408, i64 1
  %413 = load i8, i8* %412, align 1
  %414 = zext i8 %413 to i32
  %415 = sub nsw i32 %411, %404
  %416 = sub nsw i32 %414, %407
  %417 = ashr i32 %415, 1
  %418 = add nsw i32 %417, 65536
  %419 = sdiv i32 %418, %415
  %420 = mul nsw i32 %416, %419
  %421 = icmp sgt i32 %415, 0
  br i1 %421, label %422, label %305

422:                                              ; preds = %401
  %423 = zext i8 %402 to i64
  %424 = zext i32 %415 to i64
  %425 = sub nsw i32 %411, %404
  %426 = zext i32 %425 to i64
  %427 = icmp ult i32 %425, 16
  br i1 %427, label %482, label %428

428:                                              ; preds = %422
  %429 = and i64 %426, 4294967280
  %430 = insertelement <16 x i32> undef, i32 %420, i32 0
  %431 = shufflevector <16 x i32> %430, <16 x i32> undef, <16 x i32> zeroinitializer
  %432 = insertelement <16 x i8> undef, i8 %406, i32 0
  %433 = shufflevector <16 x i8> %432, <16 x i8> undef, <16 x i32> zeroinitializer
  %434 = add nsw i64 %429, -16
  %435 = lshr exact i64 %434, 4
  %436 = add nuw nsw i64 %435, 1
  %437 = and i64 %436, 1
  %438 = icmp eq i64 %434, 0
  br i1 %438, label %467, label %439

439:                                              ; preds = %428
  %440 = sub nuw nsw i64 %436, %437
  br label %441

441:                                              ; preds = %441, %439
  %442 = phi i64 [ 0, %439 ], [ %463, %441 ]
  %443 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %439 ], [ %464, %441 ]
  %444 = phi i64 [ %440, %439 ], [ %465, %441 ]
  %445 = mul nsw <16 x i32> %431, %443
  %446 = add nsw <16 x i32> %445, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %447 = lshr <16 x i32> %446, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %448 = trunc <16 x i32> %447 to <16 x i8>
  %449 = add <16 x i8> %433, %448
  %450 = add nuw nsw i64 %442, %423
  %451 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %450
  %452 = bitcast i8* %451 to <16 x i8>*
  store <16 x i8> %449, <16 x i8>* %452, align 1
  %453 = or i64 %442, 16
  %454 = add <16 x i32> %443, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %455 = mul nsw <16 x i32> %431, %454
  %456 = add nsw <16 x i32> %455, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %457 = lshr <16 x i32> %456, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %458 = trunc <16 x i32> %457 to <16 x i8>
  %459 = add <16 x i8> %433, %458
  %460 = add nuw nsw i64 %453, %423
  %461 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %460
  %462 = bitcast i8* %461 to <16 x i8>*
  store <16 x i8> %459, <16 x i8>* %462, align 1
  %463 = add i64 %442, 32
  %464 = add <16 x i32> %443, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %465 = add i64 %444, -2
  %466 = icmp eq i64 %465, 0
  br i1 %466, label %467, label %441, !llvm.loop !22

467:                                              ; preds = %441, %428
  %468 = phi i64 [ 0, %428 ], [ %463, %441 ]
  %469 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %428 ], [ %464, %441 ]
  %470 = icmp eq i64 %437, 0
  br i1 %470, label %480, label %471

471:                                              ; preds = %467
  %472 = mul nsw <16 x i32> %431, %469
  %473 = add nsw <16 x i32> %472, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %474 = lshr <16 x i32> %473, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %475 = trunc <16 x i32> %474 to <16 x i8>
  %476 = add <16 x i8> %433, %475
  %477 = add nuw nsw i64 %468, %423
  %478 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %477
  %479 = bitcast i8* %478 to <16 x i8>*
  store <16 x i8> %476, <16 x i8>* %479, align 1
  br label %480

480:                                              ; preds = %467, %471
  %481 = icmp eq i64 %429, %426
  br i1 %481, label %305, label %482

482:                                              ; preds = %480, %422
  %483 = phi i64 [ 0, %422 ], [ %429, %480 ]
  br label %484

484:                                              ; preds = %482, %484
  %485 = phi i64 [ %494, %484 ], [ %483, %482 ]
  %486 = trunc i64 %485 to i32
  %487 = mul nsw i32 %420, %486
  %488 = add nsw i32 %487, 32768
  %489 = lshr i32 %488, 16
  %490 = trunc i32 %489 to i8
  %491 = add i8 %406, %490
  %492 = add nuw nsw i64 %485, %423
  %493 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %492
  store i8 %491, i8* %493, align 1
  %494 = add nuw nsw i64 %485, 1
  %495 = icmp eq i64 %494, %424
  br i1 %495, label %305, label %484, !llvm.loop !23

496:                                              ; preds = %336, %496
  %497 = phi i64 [ %509, %496 ], [ %337, %336 ]
  %498 = load i8, i8* %316, align 1
  %499 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %497
  store i8 %498, i8* %499, align 1
  %500 = add nuw nsw i64 %497, 1
  %501 = load i8, i8* %316, align 1
  %502 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %500
  store i8 %501, i8* %502, align 1
  %503 = add nuw nsw i64 %497, 2
  %504 = load i8, i8* %316, align 1
  %505 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %503
  store i8 %504, i8* %505, align 1
  %506 = add nuw nsw i64 %497, 3
  %507 = load i8, i8* %316, align 1
  %508 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 %506
  store i8 %507, i8* %508, align 1
  %509 = add nuw nsw i64 %497, 4
  %510 = icmp eq i64 %509, %318
  br i1 %510, label %511, label %496, !llvm.loop !24

511:                                              ; preds = %336, %496, %399, %309, %279
  %512 = load i32, i32* %31, align 4
  %513 = icmp eq i32 %512, 0
  br i1 %513, label %743, label %514

514:                                              ; preds = %511
  %515 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 4, i32 3
  %516 = load i32, i32* %515, align 4
  %517 = shl i32 1, %516
  %518 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 1, i64 0, i64 0
  %519 = load i8, i8* %518, align 1
  %520 = icmp eq i8 %519, 0
  br i1 %520, label %523, label %521

521:                                              ; preds = %514
  %522 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 1, i64 0, i64 1
  br label %529

523:                                              ; preds = %529, %514
  %524 = phi i8 [ 0, %514 ], [ %534, %529 ]
  %525 = add i32 %512, -1
  %526 = icmp sgt i32 %525, 0
  br i1 %526, label %527, label %541

527:                                              ; preds = %523
  %528 = zext i32 %525 to i64
  br label %633

529:                                              ; preds = %529, %521
  %530 = phi i64 [ 0, %521 ], [ %533, %529 ]
  %531 = load i8, i8* %522, align 1
  %532 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %530
  store i8 %531, i8* %532, align 1
  %533 = add nuw nsw i64 %530, 1
  %534 = load i8, i8* %518, align 1
  %535 = zext i8 %534 to i64
  %536 = icmp ult i64 %533, %535
  br i1 %536, label %529, label %523

537:                                              ; preds = %716, %712, %633
  %538 = icmp eq i64 %640, %528
  br i1 %538, label %541, label %539

539:                                              ; preds = %537
  %540 = load i8, i8* %641, align 1
  br label %633

541:                                              ; preds = %537, %523
  %542 = sext i32 %525 to i64
  %543 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 1, i64 %542, i64 0
  %544 = load i8, i8* %543, align 1
  %545 = zext i8 %544 to i32
  %546 = icmp sgt i32 %517, %545
  br i1 %546, label %547, label %743

547:                                              ; preds = %541
  %548 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 1, i64 %542, i64 1
  %549 = zext i8 %544 to i64
  %550 = zext i32 %517 to i64
  %551 = sub nsw i64 %550, %549
  %552 = icmp ult i64 %551, 32
  br i1 %552, label %553, label %571

553:                                              ; preds = %631, %571, %547
  %554 = phi i64 [ %549, %571 ], [ %549, %547 ], [ %582, %631 ]
  %555 = sub nsw i64 %550, %554
  %556 = xor i64 %554, -1
  %557 = add nsw i64 %556, %550
  %558 = and i64 %555, 3
  %559 = icmp eq i64 %558, 0
  br i1 %559, label %568, label %560

560:                                              ; preds = %553, %560
  %561 = phi i64 [ %565, %560 ], [ %554, %553 ]
  %562 = phi i64 [ %566, %560 ], [ %558, %553 ]
  %563 = load i8, i8* %548, align 1
  %564 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %561
  store i8 %563, i8* %564, align 1
  %565 = add nuw nsw i64 %561, 1
  %566 = add i64 %562, -1
  %567 = icmp eq i64 %566, 0
  br i1 %567, label %568, label %560, !llvm.loop !25

568:                                              ; preds = %560, %553
  %569 = phi i64 [ %554, %553 ], [ %565, %560 ]
  %570 = icmp ult i64 %557, 3
  br i1 %570, label %743, label %728

571:                                              ; preds = %547
  %572 = getelementptr [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %549
  %573 = getelementptr [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %550
  %574 = shl nsw i64 %542, 1
  %575 = add nsw i64 %574, 70
  %576 = getelementptr i8, i8* %8, i64 %575
  %577 = icmp ult i8* %572, %576
  %578 = icmp ult i8* %548, %573
  %579 = and i1 %577, %578
  br i1 %579, label %553, label %580

580:                                              ; preds = %571
  %581 = and i64 %551, -32
  %582 = add nsw i64 %581, %549
  %583 = add nsw i64 %581, -32
  %584 = lshr exact i64 %583, 5
  %585 = add nuw nsw i64 %584, 1
  %586 = and i64 %585, 1
  %587 = icmp eq i64 %583, 0
  br i1 %587, label %617, label %588

588:                                              ; preds = %580
  %589 = sub nuw nsw i64 %585, %586
  %590 = load i8, i8* %548, align 1, !alias.scope !26
  %591 = insertelement <16 x i8> undef, i8 %590, i32 0
  %592 = shufflevector <16 x i8> %591, <16 x i8> undef, <16 x i32> zeroinitializer
  %593 = insertelement <16 x i8> undef, i8 %590, i32 0
  %594 = shufflevector <16 x i8> %593, <16 x i8> undef, <16 x i32> zeroinitializer
  %595 = load i8, i8* %548, align 1, !alias.scope !26
  %596 = insertelement <16 x i8> undef, i8 %595, i32 0
  %597 = shufflevector <16 x i8> %596, <16 x i8> undef, <16 x i32> zeroinitializer
  %598 = insertelement <16 x i8> undef, i8 %595, i32 0
  %599 = shufflevector <16 x i8> %598, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %600

600:                                              ; preds = %600, %588
  %601 = phi i64 [ 0, %588 ], [ %614, %600 ]
  %602 = phi i64 [ %589, %588 ], [ %615, %600 ]
  %603 = add i64 %601, %549
  %604 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %603
  %605 = bitcast i8* %604 to <16 x i8>*
  store <16 x i8> %592, <16 x i8>* %605, align 1, !alias.scope !29, !noalias !26
  %606 = getelementptr inbounds i8, i8* %604, i64 16
  %607 = bitcast i8* %606 to <16 x i8>*
  store <16 x i8> %594, <16 x i8>* %607, align 1, !alias.scope !29, !noalias !26
  %608 = or i64 %601, 32
  %609 = add i64 %608, %549
  %610 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %609
  %611 = bitcast i8* %610 to <16 x i8>*
  store <16 x i8> %597, <16 x i8>* %611, align 1, !alias.scope !29, !noalias !26
  %612 = getelementptr inbounds i8, i8* %610, i64 16
  %613 = bitcast i8* %612 to <16 x i8>*
  store <16 x i8> %599, <16 x i8>* %613, align 1, !alias.scope !29, !noalias !26
  %614 = add i64 %601, 64
  %615 = add i64 %602, -2
  %616 = icmp eq i64 %615, 0
  br i1 %616, label %617, label %600, !llvm.loop !31

617:                                              ; preds = %600, %580
  %618 = phi i64 [ 0, %580 ], [ %614, %600 ]
  %619 = icmp eq i64 %586, 0
  br i1 %619, label %631, label %620

620:                                              ; preds = %617
  %621 = add i64 %618, %549
  %622 = load i8, i8* %548, align 1, !alias.scope !26
  %623 = insertelement <16 x i8> undef, i8 %622, i32 0
  %624 = shufflevector <16 x i8> %623, <16 x i8> undef, <16 x i32> zeroinitializer
  %625 = insertelement <16 x i8> undef, i8 %622, i32 0
  %626 = shufflevector <16 x i8> %625, <16 x i8> undef, <16 x i32> zeroinitializer
  %627 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %621
  %628 = bitcast i8* %627 to <16 x i8>*
  store <16 x i8> %624, <16 x i8>* %628, align 1, !alias.scope !29, !noalias !26
  %629 = getelementptr inbounds i8, i8* %627, i64 16
  %630 = bitcast i8* %629 to <16 x i8>*
  store <16 x i8> %626, <16 x i8>* %630, align 1, !alias.scope !29, !noalias !26
  br label %631

631:                                              ; preds = %617, %620
  %632 = icmp eq i64 %551, %581
  br i1 %632, label %743, label %553

633:                                              ; preds = %539, %527
  %634 = phi i8 [ %524, %527 ], [ %540, %539 ]
  %635 = phi i64 [ 0, %527 ], [ %640, %539 ]
  %636 = zext i8 %634 to i32
  %637 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 1, i64 %635, i64 1
  %638 = load i8, i8* %637, align 1
  %639 = zext i8 %638 to i32
  %640 = add nuw nsw i64 %635, 1
  %641 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 1, i64 %640, i64 0
  %642 = load i8, i8* %641, align 1
  %643 = zext i8 %642 to i32
  %644 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 5, i64 1, i64 %640, i64 1
  %645 = load i8, i8* %644, align 1
  %646 = zext i8 %645 to i32
  %647 = sub nsw i32 %643, %636
  %648 = sub nsw i32 %646, %639
  %649 = ashr i32 %647, 1
  %650 = add nsw i32 %649, 65536
  %651 = sdiv i32 %650, %647
  %652 = mul nsw i32 %648, %651
  %653 = icmp sgt i32 %647, 0
  br i1 %653, label %654, label %537

654:                                              ; preds = %633
  %655 = zext i8 %634 to i64
  %656 = zext i32 %647 to i64
  %657 = sub nsw i32 %643, %636
  %658 = zext i32 %657 to i64
  %659 = icmp ult i32 %657, 16
  br i1 %659, label %714, label %660

660:                                              ; preds = %654
  %661 = and i64 %658, 4294967280
  %662 = insertelement <16 x i32> undef, i32 %652, i32 0
  %663 = shufflevector <16 x i32> %662, <16 x i32> undef, <16 x i32> zeroinitializer
  %664 = insertelement <16 x i8> undef, i8 %638, i32 0
  %665 = shufflevector <16 x i8> %664, <16 x i8> undef, <16 x i32> zeroinitializer
  %666 = add nsw i64 %661, -16
  %667 = lshr exact i64 %666, 4
  %668 = add nuw nsw i64 %667, 1
  %669 = and i64 %668, 1
  %670 = icmp eq i64 %666, 0
  br i1 %670, label %699, label %671

671:                                              ; preds = %660
  %672 = sub nuw nsw i64 %668, %669
  br label %673

673:                                              ; preds = %673, %671
  %674 = phi i64 [ 0, %671 ], [ %695, %673 ]
  %675 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %671 ], [ %696, %673 ]
  %676 = phi i64 [ %672, %671 ], [ %697, %673 ]
  %677 = mul nsw <16 x i32> %663, %675
  %678 = add nsw <16 x i32> %677, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %679 = lshr <16 x i32> %678, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %680 = trunc <16 x i32> %679 to <16 x i8>
  %681 = add <16 x i8> %665, %680
  %682 = add nuw nsw i64 %674, %655
  %683 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %682
  %684 = bitcast i8* %683 to <16 x i8>*
  store <16 x i8> %681, <16 x i8>* %684, align 1
  %685 = or i64 %674, 16
  %686 = add <16 x i32> %675, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %687 = mul nsw <16 x i32> %663, %686
  %688 = add nsw <16 x i32> %687, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %689 = lshr <16 x i32> %688, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %690 = trunc <16 x i32> %689 to <16 x i8>
  %691 = add <16 x i8> %665, %690
  %692 = add nuw nsw i64 %685, %655
  %693 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %692
  %694 = bitcast i8* %693 to <16 x i8>*
  store <16 x i8> %691, <16 x i8>* %694, align 1
  %695 = add i64 %674, 32
  %696 = add <16 x i32> %675, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %697 = add i64 %676, -2
  %698 = icmp eq i64 %697, 0
  br i1 %698, label %699, label %673, !llvm.loop !32

699:                                              ; preds = %673, %660
  %700 = phi i64 [ 0, %660 ], [ %695, %673 ]
  %701 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %660 ], [ %696, %673 ]
  %702 = icmp eq i64 %669, 0
  br i1 %702, label %712, label %703

703:                                              ; preds = %699
  %704 = mul nsw <16 x i32> %663, %701
  %705 = add nsw <16 x i32> %704, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %706 = lshr <16 x i32> %705, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %707 = trunc <16 x i32> %706 to <16 x i8>
  %708 = add <16 x i8> %665, %707
  %709 = add nuw nsw i64 %700, %655
  %710 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %709
  %711 = bitcast i8* %710 to <16 x i8>*
  store <16 x i8> %708, <16 x i8>* %711, align 1
  br label %712

712:                                              ; preds = %699, %703
  %713 = icmp eq i64 %661, %658
  br i1 %713, label %537, label %714

714:                                              ; preds = %712, %654
  %715 = phi i64 [ 0, %654 ], [ %661, %712 ]
  br label %716

716:                                              ; preds = %714, %716
  %717 = phi i64 [ %726, %716 ], [ %715, %714 ]
  %718 = trunc i64 %717 to i32
  %719 = mul nsw i32 %652, %718
  %720 = add nsw i32 %719, 32768
  %721 = lshr i32 %720, 16
  %722 = trunc i32 %721 to i8
  %723 = add i8 %638, %722
  %724 = add nuw nsw i64 %717, %655
  %725 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %724
  store i8 %723, i8* %725, align 1
  %726 = add nuw nsw i64 %717, 1
  %727 = icmp eq i64 %726, %656
  br i1 %727, label %537, label %716, !llvm.loop !33

728:                                              ; preds = %568, %728
  %729 = phi i64 [ %741, %728 ], [ %569, %568 ]
  %730 = load i8, i8* %548, align 1
  %731 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %729
  store i8 %730, i8* %731, align 1
  %732 = add nuw nsw i64 %729, 1
  %733 = load i8, i8* %548, align 1
  %734 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %732
  store i8 %733, i8* %734, align 1
  %735 = add nuw nsw i64 %729, 2
  %736 = load i8, i8* %548, align 1
  %737 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %735
  store i8 %736, i8* %737, align 1
  %738 = add nuw nsw i64 %729, 3
  %739 = load i8, i8* %548, align 1
  %740 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 %738
  store i8 %739, i8* %740, align 1
  %741 = add nuw nsw i64 %729, 4
  %742 = icmp eq i64 %741, %550
  br i1 %742, label %743, label %728, !llvm.loop !34

743:                                              ; preds = %568, %728, %631, %541, %511
  %744 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 3, i64 0
  %745 = load i64, i64* %744, align 8
  %746 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 3, i64 0
  %747 = load i64, i64* %746, align 8
  %748 = icmp eq i64 %745, %747
  call void @llvm.assume(i1 %748)
  %749 = load i32, i32* %47, align 4
  %750 = icmp eq i32 %749, 0
  br i1 %750, label %751, label %771

751:                                              ; preds = %743
  %752 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 4, i32 1
  %753 = load i32, i32* %752, align 4
  %754 = sext i32 %753 to i64
  %755 = mul nsw i64 %745, %754
  %756 = icmp slt i64 %755, 0
  %757 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 2, i64 0
  %758 = load i8*, i8** %757, align 8
  br i1 %756, label %759, label %768

759:                                              ; preds = %751
  %760 = getelementptr inbounds i8, i8* %758, i64 %755
  %761 = sub i64 0, %745
  %762 = getelementptr inbounds i8, i8* %760, i64 %761
  %763 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 2, i64 0
  %764 = load i8*, i8** %763, align 8
  %765 = getelementptr inbounds i8, i8* %764, i64 %755
  %766 = getelementptr inbounds i8, i8* %765, i64 %761
  %767 = sub nsw i64 0, %755
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %762, i8* align 1 %766, i64 %767, i1 false)
  br label %771

768:                                              ; preds = %751
  %769 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 2, i64 0
  %770 = load i8*, i8** %769, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %758, i8* align 1 %770, i64 %755, i1 false)
  br label %771

771:                                              ; preds = %759, %768, %743
  %772 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 4, i32 2
  %773 = load i32, i32* %772, align 8
  %774 = icmp eq i32 %773, 0
  br i1 %774, label %836, label %775

775:                                              ; preds = %771
  %776 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 3
  %777 = load i32, i32* %776, align 4
  %778 = icmp eq i32 %777, 0
  br i1 %778, label %779, label %836

779:                                              ; preds = %775
  %780 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 3, i64 1
  %781 = load i64, i64* %780, align 8
  %782 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 3, i64 1
  %783 = load i64, i64* %782, align 8
  %784 = icmp eq i64 %781, %783
  call void @llvm.assume(i1 %784)
  %785 = icmp eq i32 %773, 1
  %786 = zext i1 %785 to i32
  %787 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 4, i32 1
  %788 = load i32, i32* %787, align 4
  %789 = add nsw i32 %788, %786
  %790 = ashr i32 %789, %786
  %791 = sext i32 %790 to i64
  %792 = mul nsw i64 %781, %791
  %793 = icmp slt i64 %792, 0
  %794 = load i32, i32* %15, align 8
  %795 = icmp ne i32 %794, 0
  br i1 %793, label %796, label %822

796:                                              ; preds = %779
  br i1 %795, label %808, label %797

797:                                              ; preds = %796
  %798 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 2, i64 1
  %799 = load i8*, i8** %798, align 8
  %800 = getelementptr inbounds i8, i8* %799, i64 %792
  %801 = sub i64 0, %781
  %802 = getelementptr inbounds i8, i8* %800, i64 %801
  %803 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 2, i64 1
  %804 = load i8*, i8** %803, align 8
  %805 = getelementptr inbounds i8, i8* %804, i64 %792
  %806 = getelementptr inbounds i8, i8* %805, i64 %801
  %807 = sub nsw i64 0, %792
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %802, i8* align 1 %806, i64 %807, i1 false)
  br label %808

808:                                              ; preds = %797, %796
  %809 = load i32, i32* %31, align 4
  %810 = icmp eq i32 %809, 0
  br i1 %810, label %811, label %836

811:                                              ; preds = %808
  %812 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 2, i64 2
  %813 = load i8*, i8** %812, align 8
  %814 = getelementptr inbounds i8, i8* %813, i64 %792
  %815 = sub i64 0, %781
  %816 = getelementptr inbounds i8, i8* %814, i64 %815
  %817 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 2, i64 2
  %818 = load i8*, i8** %817, align 8
  %819 = getelementptr inbounds i8, i8* %818, i64 %792
  %820 = getelementptr inbounds i8, i8* %819, i64 %815
  %821 = sub nsw i64 0, %792
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %816, i8* align 1 %820, i64 %821, i1 false)
  br label %836

822:                                              ; preds = %779
  br i1 %795, label %828, label %823

823:                                              ; preds = %822
  %824 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 2, i64 1
  %825 = load i8*, i8** %824, align 8
  %826 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 2, i64 1
  %827 = load i8*, i8** %826, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %825, i8* align 1 %827, i64 %792, i1 false)
  br label %828

828:                                              ; preds = %823, %822
  %829 = load i32, i32* %31, align 4
  %830 = icmp eq i32 %829, 0
  br i1 %830, label %831, label %836

831:                                              ; preds = %828
  %832 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 2, i64 2
  %833 = load i8*, i8** %832, align 8
  %834 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 2, i64 2
  %835 = load i8*, i8** %834, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %833, i8* align 1 %835, i64 %792, i1 false)
  br label %836

836:                                              ; preds = %811, %831, %828, %808, %775, %771
  %837 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 4, i32 1
  %838 = load i32, i32* %837, align 4
  %839 = load i32, i32* %772, align 8
  %840 = icmp eq i32 %839, 1
  %841 = zext i1 %840 to i32
  %842 = icmp ne i32 %839, 3
  %843 = zext i1 %842 to i32
  %844 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 4, i32 0
  %845 = load i32, i32* %844, align 8
  %846 = add nsw i32 %845, %843
  %847 = ashr i32 %846, %843
  %848 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 0
  %849 = load %struct.Dav1dSequenceHeader*, %struct.Dav1dSequenceHeader** %848, align 8
  %850 = getelementptr inbounds %struct.Dav1dSequenceHeader, %struct.Dav1dSequenceHeader* %849, i64 0, i32 6
  %851 = load i32, i32* %850, align 4
  %852 = icmp eq i32 %851, 0
  %853 = zext i1 %852 to i32
  %854 = icmp sgt i32 %838, 0
  br i1 %854, label %855, label %880

855:                                              ; preds = %836
  %856 = add nuw nsw i32 %838, 31
  %857 = ashr i32 %856, 5
  %858 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 2, i64 0
  %859 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 2
  %860 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 2, i64 0
  %861 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %7, i64 0, i32 0, i32 0, i32 3
  %862 = zext i1 %840 to i64
  %863 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 3, i64 1
  %864 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 3, i64 1
  %865 = sext i32 %857 to i64
  %866 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 2, i64 1
  %867 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 2, i64 1
  %868 = getelementptr inbounds [3 x [74 x [82 x i8]]], [3 x [74 x [82 x i8]]]* %4, i64 0, i64 1, i64 0
  %869 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 2, i64 2
  %870 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 2, i64 2
  %871 = getelementptr inbounds [3 x [74 x [82 x i8]]], [3 x [74 x [82 x i8]]]* %4, i64 0, i64 2, i64 0
  %872 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 2, i64 1
  %873 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 2, i64 1
  %874 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 1, i64 0
  %875 = getelementptr inbounds [3 x [74 x [82 x i8]]], [3 x [74 x [82 x i8]]]* %4, i64 0, i64 1, i64 0
  %876 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %1, i64 0, i32 2, i64 2
  %877 = getelementptr inbounds %struct.Dav1dPicture, %struct.Dav1dPicture* %2, i64 0, i32 2, i64 2
  %878 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %5, i64 0, i64 2, i64 0
  %879 = getelementptr inbounds [3 x [74 x [82 x i8]]], [3 x [74 x [82 x i8]]]* %4, i64 0, i64 2, i64 0
  br label %881

880:                                              ; preds = %1028, %836
  call void @llvm.lifetime.end.p0i8(i64 768, i8* nonnull %11) #2
  call void @llvm.lifetime.end.p0i8(i64 18204, i8* nonnull %10) #2
  ret void

881:                                              ; preds = %855, %1028
  %882 = phi i64 [ 0, %855 ], [ %1029, %1028 ]
  %883 = load i8*, i8** %858, align 8
  %884 = shl nsw i64 %882, 5
  %885 = load i64, i64* %746, align 8
  %886 = mul nsw i64 %885, %884
  %887 = getelementptr inbounds i8, i8* %883, i64 %886
  %888 = load i32, i32* %47, align 4
  %889 = icmp eq i32 %888, 0
  br i1 %889, label %904, label %890

890:                                              ; preds = %881
  %891 = load i32, i32* %837, align 4
  %892 = trunc i64 %884 to i32
  %893 = sub nsw i32 %891, %892
  %894 = icmp slt i32 %893, 32
  %895 = select i1 %894, i32 %893, i32 32
  %896 = load void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i64, i8*, [82 x i8]*, i32, i32)*, void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i64, i8*, [82 x i8]*, i32, i32)** %859, align 8
  %897 = load i8*, i8** %860, align 8
  %898 = load i64, i64* %744, align 8
  %899 = mul nsw i64 %898, %884
  %900 = getelementptr inbounds i8, i8* %897, i64 %899
  %901 = load i32, i32* %844, align 8
  %902 = sext i32 %901 to i64
  %903 = trunc i64 %882 to i32
  call void %896(i8* %900, i8* %887, i64 %898, %struct.Dav1dFilmGrainData* %9, i64 %902, i8* nonnull %11, [82 x i8]* nonnull %14, i32 %895, i32 %903) #2
  br label %904

904:                                              ; preds = %881, %890
  %905 = load i32, i32* %15, align 8
  %906 = icmp eq i32 %905, 0
  br i1 %906, label %907, label %913

907:                                              ; preds = %904
  %908 = load i32, i32* %31, align 4
  %909 = icmp eq i32 %908, 0
  br i1 %909, label %910, label %913

910:                                              ; preds = %907
  %911 = load i32, i32* %861, align 4
  %912 = icmp eq i32 %911, 0
  br i1 %912, label %1028, label %913

913:                                              ; preds = %910, %907, %904
  %914 = load i32, i32* %837, align 4
  %915 = trunc i64 %884 to i32
  %916 = sub nsw i32 %914, %915
  %917 = icmp slt i32 %916, 32
  %918 = select i1 %917, i32 %916, i32 32
  %919 = add nsw i32 %918, %841
  %920 = ashr i32 %919, %841
  %921 = load i32, i32* %844, align 8
  %922 = and i32 %921, %843
  %923 = icmp ne i32 %922, 0
  %924 = icmp sgt i32 %920, 0
  %925 = and i1 %923, %924
  br i1 %925, label %926, label %979

926:                                              ; preds = %913
  %927 = add nsw i32 %921, -1
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds i8, i8* %887, i64 %928
  %930 = load i8, i8* %929, align 1
  %931 = sext i32 %921 to i64
  %932 = getelementptr inbounds i8, i8* %887, i64 %931
  store i8 %930, i8* %932, align 1
  %933 = icmp eq i32 %920, 1
  br i1 %933, label %979, label %934

934:                                              ; preds = %926
  %935 = add i32 %920, -1
  %936 = and i32 %935, 1
  %937 = icmp eq i32 %920, 2
  br i1 %937, label %965, label %938

938:                                              ; preds = %934
  %939 = sub i32 %935, %936
  br label %940

940:                                              ; preds = %940, %938
  %941 = phi i8* [ %887, %938 ], [ %955, %940 ]
  %942 = phi i32 [ %939, %938 ], [ %963, %940 ]
  %943 = load i64, i64* %746, align 8
  %944 = shl i64 %943, %862
  %945 = getelementptr inbounds i8, i8* %941, i64 %944
  %946 = load i32, i32* %844, align 8
  %947 = add nsw i32 %946, -1
  %948 = sext i32 %947 to i64
  %949 = getelementptr inbounds i8, i8* %945, i64 %948
  %950 = load i8, i8* %949, align 1
  %951 = sext i32 %946 to i64
  %952 = getelementptr inbounds i8, i8* %945, i64 %951
  store i8 %950, i8* %952, align 1
  %953 = load i64, i64* %746, align 8
  %954 = shl i64 %953, %862
  %955 = getelementptr inbounds i8, i8* %945, i64 %954
  %956 = load i32, i32* %844, align 8
  %957 = add nsw i32 %956, -1
  %958 = sext i32 %957 to i64
  %959 = getelementptr inbounds i8, i8* %955, i64 %958
  %960 = load i8, i8* %959, align 1
  %961 = sext i32 %956 to i64
  %962 = getelementptr inbounds i8, i8* %955, i64 %961
  store i8 %960, i8* %962, align 1
  %963 = add i32 %942, -2
  %964 = icmp eq i32 %963, 0
  br i1 %964, label %965, label %940

965:                                              ; preds = %940, %934
  %966 = phi i8* [ %887, %934 ], [ %955, %940 ]
  %967 = icmp eq i32 %936, 0
  br i1 %967, label %979, label %968

968:                                              ; preds = %965
  %969 = load i64, i64* %746, align 8
  %970 = shl i64 %969, %862
  %971 = getelementptr inbounds i8, i8* %966, i64 %970
  %972 = load i32, i32* %844, align 8
  %973 = add nsw i32 %972, -1
  %974 = sext i32 %973 to i64
  %975 = getelementptr inbounds i8, i8* %971, i64 %974
  %976 = load i8, i8* %975, align 1
  %977 = sext i32 %972 to i64
  %978 = getelementptr inbounds i8, i8* %971, i64 %977
  store i8 %976, i8* %978, align 1
  br label %979

979:                                              ; preds = %968, %965, %926, %913
  %980 = load i64, i64* %863, align 8
  %981 = mul nsw i64 %980, %884
  %982 = ashr i64 %981, %862
  %983 = load i32, i32* %861, align 4
  %984 = icmp eq i32 %983, 0
  br i1 %984, label %1009, label %985

985:                                              ; preds = %979
  %986 = load i32, i32* %772, align 8
  %987 = add i32 %986, -1
  %988 = zext i32 %987 to i64
  %989 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 3, i64 %988
  %990 = load void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)*, void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)** %989, align 8
  %991 = load i8*, i8** %866, align 8
  %992 = getelementptr inbounds i8, i8* %991, i64 %982
  %993 = load i8*, i8** %867, align 8
  %994 = getelementptr inbounds i8, i8* %993, i64 %982
  %995 = load i64, i64* %864, align 8
  %996 = load i64, i64* %746, align 8
  %997 = trunc i64 %882 to i32
  call void %990(i8* %992, i8* %994, i64 %995, %struct.Dav1dFilmGrainData* %9, i32 %847, i8* nonnull %11, [82 x i8]* %868, i32 %920, i32 %997, i8* %887, i64 %996, i32 0, i32 %853) #2
  %998 = load i32, i32* %772, align 8
  %999 = add i32 %998, -1
  %1000 = zext i32 %999 to i64
  %1001 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 3, i64 %1000
  %1002 = load void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)*, void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)** %1001, align 8
  %1003 = load i8*, i8** %869, align 8
  %1004 = getelementptr inbounds i8, i8* %1003, i64 %982
  %1005 = load i8*, i8** %870, align 8
  %1006 = getelementptr inbounds i8, i8* %1005, i64 %982
  %1007 = load i64, i64* %864, align 8
  %1008 = load i64, i64* %746, align 8
  call void %1002(i8* %1004, i8* %1006, i64 %1007, %struct.Dav1dFilmGrainData* %9, i32 %847, i8* nonnull %11, [82 x i8]* %871, i32 %920, i32 %997, i8* %887, i64 %1008, i32 1, i32 %853) #2
  br label %1028

1009:                                             ; preds = %979
  %1010 = load i32, i32* %15, align 4
  %1011 = icmp eq i32 %1010, 0
  br i1 %1011, label %1025, label %1012

1012:                                             ; preds = %1009
  %1013 = load i32, i32* %772, align 8
  %1014 = add i32 %1013, -1
  %1015 = zext i32 %1014 to i64
  %1016 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 3, i64 %1015
  %1017 = load void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)*, void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)** %1016, align 8
  %1018 = load i8*, i8** %872, align 8
  %1019 = getelementptr inbounds i8, i8* %1018, i64 %982
  %1020 = load i8*, i8** %873, align 8
  %1021 = getelementptr inbounds i8, i8* %1020, i64 %982
  %1022 = load i64, i64* %864, align 8
  %1023 = load i64, i64* %746, align 8
  %1024 = trunc i64 %882 to i32
  call void %1017(i8* %1019, i8* %1021, i64 %1022, %struct.Dav1dFilmGrainData* %9, i32 %847, i8* %874, [82 x i8]* %875, i32 %920, i32 %1024, i8* %887, i64 %1023, i32 0, i32 %853) #2
  br label %1025

1025:                                             ; preds = %1009, %1012
  %1026 = load i32, i32* %31, align 4
  %1027 = icmp eq i32 %1026, 0
  br i1 %1027, label %1028, label %1031

1028:                                             ; preds = %1025, %1031, %985, %910
  %1029 = add nuw nsw i64 %882, 1
  %1030 = icmp slt i64 %1029, %865
  br i1 %1030, label %881, label %880

1031:                                             ; preds = %1025
  %1032 = load i32, i32* %772, align 8
  %1033 = add i32 %1032, -1
  %1034 = zext i32 %1033 to i64
  %1035 = getelementptr inbounds %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dFilmGrainDSPContext* %0, i64 0, i32 3, i64 %1034
  %1036 = load void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)*, void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)** %1035, align 8
  %1037 = load i8*, i8** %876, align 8
  %1038 = getelementptr inbounds i8, i8* %1037, i64 %982
  %1039 = load i8*, i8** %877, align 8
  %1040 = getelementptr inbounds i8, i8* %1039, i64 %982
  %1041 = load i64, i64* %864, align 8
  %1042 = load i64, i64* %746, align 8
  %1043 = trunc i64 %882 to i32
  call void %1036(i8* %1038, i8* %1040, i64 %1041, %struct.Dav1dFilmGrainData* %9, i32 %847, i8* %878, [82 x i8]* %879, i32 %920, i32 %1043, i8* %887, i64 %1042, i32 1, i32 %853) #2
  br label %1028
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @llvm.assume(i1) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !13, !10}
!13 = !{!"llvm.loop.unroll.runtime.disable"}
!14 = distinct !{!14, !10}
!15 = distinct !{!15, !3}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !10}
!22 = distinct !{!22, !10}
!23 = distinct !{!23, !13, !10}
!24 = distinct !{!24, !10}
!25 = distinct !{!25, !3}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = !{!30}
!30 = distinct !{!30, !28}
!31 = distinct !{!31, !10}
!32 = distinct !{!32, !10}
!33 = distinct !{!33, !13, !10}
!34 = distinct !{!34, !10}
