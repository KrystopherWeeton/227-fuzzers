; ModuleID = '../../mojo/public/cpp/system/wait.cc'
source_filename = "../../mojo/public/cpp/system/wait.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.MojoHandleSignalsState = type { i32, i32 }
%"class.mojo::Handle" = type { i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::TrapHandle" }
%"class.mojo::TrapHandle" = type { %"class.mojo::Handle" }
%struct.MojoTrapEvent = type { i32, i32, i64, i32, %struct.MojoHandleSignalsState }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.1, i8, [7 x i8] }>
%class.scoped_refptr.1 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.2", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%struct.MojoAddTriggerOptions = type { i32, i32 }
%struct.MojoArmTrapOptions = type { i32, i32 }
%"class.mojo::(anonymous namespace)::TriggerContext" = type { %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::WaitableEvent", i32, %struct.MojoHandleSignalsState, [4 x i8] }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.scoped_refptr*, %class.scoped_refptr*, %"class.std::__1::__compressed_pair.4" }
%class.scoped_refptr = type { %"class.mojo::(anonymous namespace)::TriggerContext"* }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.scoped_refptr* }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { %"class.base::WaitableEvent"**, %"class.base::WaitableEvent"**, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.base::WaitableEvent"** }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.mojo::HandleSignalsState" = type { %struct.MojoHandleSignalsState }

@__const._ZN4mojo8WaitManyEPKNS_6HandleEPKjmPmP22MojoHandleSignalsState.blocking_event = private unnamed_addr constant { i32, i32, i64, i32, %struct.MojoHandleSignalsState, [4 x i8] } { i32 32, i32 0, i64 0, i32 0, %struct.MojoHandleSignalsState zeroinitializer, [4 x i8] zeroinitializer }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4mojo4WaitENS_6HandleEjjP22MojoHandleSignalsState(%"class.mojo::Handle"* nocapture readonly, i32, i32, %struct.MojoHandleSignalsState*) local_unnamed_addr #0 {
  %5 = alloca %"class.mojo::ScopedHandleBase", align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.MojoTrapEvent, align 8
  %8 = bitcast %"class.mojo::ScopedHandleBase"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #7
  %9 = getelementptr inbounds %"class.mojo::ScopedHandleBase", %"class.mojo::ScopedHandleBase"* %5, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %9, align 4
  %10 = call i32 @_ZN4mojo10CreateTrapEPFvPK13MojoTrapEventEPNS_16ScopedHandleBaseINS_10TrapHandleEEE(void (%struct.MojoTrapEvent*)* nonnull @_ZN4mojo12_GLOBAL__N_114TriggerContext14OnNotificationEPK13MojoTrapEvent, %"class.mojo::ScopedHandleBase"* nonnull %5) #7
  %11 = call i8* @_Znwm(i64 40) #8
  %12 = bitcast i8* %11 to i32*
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %11, i64 8
  %14 = bitcast i8* %13 to %"class.base::WaitableEvent"*
  call void @_ZN4base13WaitableEventC1ENS0_11ResetPolicyENS0_12InitialStateE(%"class.base::WaitableEvent"* %14, i32 1, i32 1) #7
  %15 = getelementptr inbounds i8, i8* %11, i64 24
  %16 = bitcast i8* %15 to i32*
  store i32 2, i32* %16, align 8
  %17 = getelementptr inbounds i8, i8* %11, i64 28
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds i8, i8* %11, i64 32
  %20 = bitcast i8* %19 to i32*
  store i32 0, i32* %20, align 4
  %21 = atomicrmw add i32* %12, i32 1 monotonic
  %22 = atomicrmw add i32* %12, i32 1 monotonic
  %23 = load i32, i32* %9, align 4
  %24 = getelementptr inbounds %"class.mojo::Handle", %"class.mojo::Handle"* %0, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = ptrtoint i8* %11 to i64
  %27 = call i32 @MojoAddTrigger(i32 %23, i32 %25, i32 %1, i32 %2, i64 %26, %struct.MojoAddTriggerOptions* null) #7
  %28 = icmp eq i32 %27, 3
  br i1 %28, label %29, label %33

29:                                               ; preds = %4
  %30 = atomicrmw sub i32* %12, i32 1 acq_rel
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %32, label %58

32:                                               ; preds = %29
  call void @_ZN4base13WaitableEventD1Ev(%"class.base::WaitableEvent"* %14) #7
  call void @_ZdlPv(i8* nonnull %11) #8
  br label %58

33:                                               ; preds = %4
  %34 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #7
  store i32 1, i32* %6, align 4
  %35 = bitcast %struct.MojoTrapEvent* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %35, i8* align 8 bitcast ({ i32, i32, i64, i32, %struct.MojoHandleSignalsState, [4 x i8] }* @__const._ZN4mojo8WaitManyEPKNS_6HandleEPKjmPmP22MojoHandleSignalsState.blocking_event to i8*), i64 32, i1 false)
  %36 = load i32, i32* %9, align 4
  %37 = call i32 @MojoArmTrap(i32 %36, %struct.MojoArmTrapOptions* null, i32* nonnull %6, %struct.MojoTrapEvent* nonnull %7) #7
  %38 = icmp eq i32 %37, 9
  br i1 %38, label %39, label %49

39:                                               ; preds = %33
  %40 = icmp eq %struct.MojoHandleSignalsState* %3, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %39
  %42 = getelementptr inbounds %struct.MojoTrapEvent, %struct.MojoTrapEvent* %7, i64 0, i32 4
  %43 = bitcast %struct.MojoHandleSignalsState* %42 to i64*
  %44 = bitcast %struct.MojoHandleSignalsState* %3 to i64*
  %45 = load i64, i64* %43, align 4
  store i64 %45, i64* %44, align 4
  br label %46

46:                                               ; preds = %39, %41
  %47 = getelementptr inbounds %struct.MojoTrapEvent, %struct.MojoTrapEvent* %7, i64 0, i32 3
  %48 = load i32, i32* %47, align 8
  br label %56

49:                                               ; preds = %33
  notail call void @_ZN4base13WaitableEvent4WaitEv(%"class.base::WaitableEvent"* %14) #7
  %50 = load i32, i32* %16, align 8
  %51 = icmp eq %struct.MojoHandleSignalsState* %3, null
  br i1 %51, label %56, label %52

52:                                               ; preds = %49
  %53 = bitcast i8* %17 to i64*
  %54 = load i64, i64* %53, align 4
  %55 = bitcast %struct.MojoHandleSignalsState* %3 to i64*
  store i64 %54, i64* %55, align 4
  br label %56

56:                                               ; preds = %52, %49, %46
  %57 = phi i32 [ %48, %46 ], [ %50, %49 ], [ %50, %52 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #7
  br label %58

58:                                               ; preds = %29, %56, %32
  %59 = phi i32 [ %57, %56 ], [ 3, %29 ], [ 3, %32 ]
  %60 = atomicrmw sub i32* %12, i32 1 acq_rel
  %61 = icmp eq i32 %60, 1
  br i1 %61, label %62, label %63

62:                                               ; preds = %58
  call void @_ZN4base13WaitableEventD1Ev(%"class.base::WaitableEvent"* %14) #7
  call void @_ZdlPv(i8* nonnull %11) #8
  br label %63

63:                                               ; preds = %58, %62
  %64 = load i32, i32* %9, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %68, label %66

66:                                               ; preds = %63
  %67 = call i32 @MojoClose(i32 %64) #7
  br label %68

68:                                               ; preds = %63, %66
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #7
  ret i32 %59
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN4mojo10CreateTrapEPFvPK13MojoTrapEventEPNS_16ScopedHandleBaseINS_10TrapHandleEEE(void (%struct.MojoTrapEvent*)*, %"class.mojo::ScopedHandleBase"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4mojo12_GLOBAL__N_114TriggerContext14OnNotificationEPK13MojoTrapEvent(%struct.MojoTrapEvent* nocapture readonly) #0 align 2 {
  %2 = getelementptr inbounds %struct.MojoTrapEvent, %struct.MojoTrapEvent* %0, i64 0, i32 2
  %3 = bitcast i64* %2 to %"class.mojo::(anonymous namespace)::TriggerContext"**
  %4 = load %"class.mojo::(anonymous namespace)::TriggerContext"*, %"class.mojo::(anonymous namespace)::TriggerContext"** %3, align 8
  %5 = getelementptr inbounds %struct.MojoTrapEvent, %struct.MojoTrapEvent* %0, i64 0, i32 3
  %6 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %4, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %16

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.MojoTrapEvent, %struct.MojoTrapEvent* %0, i64 0, i32 4
  %11 = bitcast %struct.MojoHandleSignalsState* %10 to i64*
  %12 = load i64, i64* %11, align 4
  %13 = load i32, i32* %5, align 8
  store i32 %13, i32* %6, align 8
  %14 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %4, i64 0, i32 4
  %15 = bitcast %struct.MojoHandleSignalsState* %14 to i64*
  store i64 %12, i64* %15, align 4
  br label %16

16:                                               ; preds = %1, %9
  %17 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %4, i64 0, i32 2
  tail call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %17) #7
  %18 = load i32, i32* %5, align 8
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %31

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw sub i32* %21, i32 1 acq_rel
  %23 = icmp ne i32 %22, 1
  %24 = icmp eq %"class.mojo::(anonymous namespace)::TriggerContext"* %4, null
  %25 = or i1 %24, %23
  br i1 %25, label %31, label %26

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %4, i64 0, i32 0
  %28 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %27, i64 2
  %29 = bitcast %"class.base::RefCountedThreadSafe"* %28 to %"class.base::WaitableEvent"*
  tail call void @_ZN4base13WaitableEventD1Ev(%"class.base::WaitableEvent"* %29) #7
  %30 = bitcast %"class.mojo::(anonymous namespace)::TriggerContext"* %4 to i8*
  tail call void @_ZdlPv(i8* %30) #8
  br label %31

31:                                               ; preds = %26, %20, %16
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare i32 @MojoAddTrigger(i32, i32, i32, i32, i64, %struct.MojoAddTriggerOptions*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @MojoArmTrap(i32, %struct.MojoArmTrapOptions*, i32*, %struct.MojoTrapEvent*) local_unnamed_addr #2

declare void @_ZN4base13WaitableEvent4WaitEv(%"class.base::WaitableEvent"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4mojo8WaitManyEPKNS_6HandleEPKjmPmP22MojoHandleSignalsState(%"class.mojo::Handle"* readonly, i32* readonly, i64, i64*, %struct.MojoHandleSignalsState*) local_unnamed_addr #0 {
  %6 = alloca i64, align 8
  %7 = alloca %"class.mojo::ScopedHandleBase", align 4
  %8 = alloca %"class.std::__1::vector", align 8
  %9 = alloca %"class.std::__1::vector.9", align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.MojoTrapEvent, align 8
  %12 = icmp ne %"class.mojo::Handle"* %0, null
  %13 = icmp ne i32* %1, null
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %253

15:                                               ; preds = %5
  %16 = bitcast %"class.mojo::ScopedHandleBase"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #7
  %17 = getelementptr inbounds %"class.mojo::ScopedHandleBase", %"class.mojo::ScopedHandleBase"* %7, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %17, align 4
  %18 = call i32 @_ZN4mojo10CreateTrapEPFvPK13MojoTrapEventEPNS_16ScopedHandleBaseINS_10TrapHandleEEE(void (%struct.MojoTrapEvent*)* nonnull @_ZN4mojo12_GLOBAL__N_114TriggerContext14OnNotificationEPK13MojoTrapEvent, %"class.mojo::ScopedHandleBase"* nonnull %7) #7
  %19 = bitcast %"class.std::__1::vector"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #7
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 0, i64 24, i1 false) #7
  %23 = icmp eq i64 %2, 0
  br i1 %23, label %43, label %24

24:                                               ; preds = %15
  %25 = icmp ugt i64 %2, 2305843009213693951
  br i1 %25, label %26, label %28

26:                                               ; preds = %24
  %27 = bitcast %"class.std::__1::vector"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %27) #9
  unreachable

28:                                               ; preds = %24
  %29 = shl i64 %2, 3
  %30 = call i8* @_Znwm(i64 %29) #8
  %31 = bitcast i8* %30 to %class.scoped_refptr*
  %32 = bitcast %"class.std::__1::vector"* %8 to i8**
  store i8* %30, i8** %32, align 8
  %33 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %31, i64 %2
  store %class.scoped_refptr* %33, %class.scoped_refptr** %22, align 8
  %34 = bitcast %class.scoped_refptr** %21 to i64*
  %35 = ptrtoint i8* %30 to i64
  %36 = add nsw i64 %2, -1
  %37 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %31, i64 %36, i32 0
  %38 = ptrtoint %"class.mojo::(anonymous namespace)::TriggerContext"** %37 to i64
  %39 = sub i64 8, %35
  %40 = add i64 %39, %38
  %41 = and i64 %40, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 0, i64 %41, i1 false) #7
  %42 = ptrtoint %class.scoped_refptr* %33 to i64
  store i64 %42, i64* %34, align 8
  br label %43

43:                                               ; preds = %15, %28
  %44 = bitcast %"class.std::__1::vector.9"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %44) #7
  %45 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %9, i64 0, i32 0, i32 0
  %46 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %9, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 0, i64 24, i1 false) #7
  br i1 %23, label %135, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %49 = shl i64 %2, 3
  %50 = call i8* @_Znwm(i64 %49) #8
  %51 = bitcast i8* %50 to %"class.base::WaitableEvent"**
  %52 = bitcast %"class.std::__1::vector.9"* %9 to i8**
  store i8* %50, i8** %52, align 8
  %53 = getelementptr inbounds %"class.base::WaitableEvent"*, %"class.base::WaitableEvent"** %51, i64 %2
  store %"class.base::WaitableEvent"** %53, %"class.base::WaitableEvent"*** %48, align 8
  %54 = bitcast %"class.base::WaitableEvent"*** %46 to i64*
  %55 = ptrtoint i8* %50 to i64
  %56 = add nsw i64 %2, -1
  %57 = getelementptr %"class.base::WaitableEvent"*, %"class.base::WaitableEvent"** %51, i64 %56
  %58 = ptrtoint %"class.base::WaitableEvent"** %57 to i64
  %59 = sub i64 8, %55
  %60 = add i64 %59, %58
  %61 = and i64 %60, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 0, i64 %61, i1 false) #7
  %62 = ptrtoint %"class.base::WaitableEvent"** %53 to i64
  store i64 %62, i64* %54, align 8
  br label %63

63:                                               ; preds = %126, %47
  %64 = phi i64 [ 0, %47 ], [ %133, %126 ]
  %65 = call i8* @_Znwm(i64 40) #8
  %66 = bitcast i8* %65 to i32*
  store i32 0, i32* %66, align 4
  %67 = getelementptr inbounds i8, i8* %65, i64 8
  %68 = bitcast i8* %67 to %"class.base::WaitableEvent"*
  call void @_ZN4base13WaitableEventC1ENS0_11ResetPolicyENS0_12InitialStateE(%"class.base::WaitableEvent"* %68, i32 1, i32 1) #7
  %69 = getelementptr inbounds i8, i8* %65, i64 24
  %70 = bitcast i8* %69 to i32*
  store i32 2, i32* %70, align 8
  %71 = getelementptr inbounds i8, i8* %65, i64 28
  %72 = bitcast i8* %71 to i32*
  store i32 0, i32* %72, align 4
  %73 = getelementptr inbounds i8, i8* %65, i64 32
  %74 = bitcast i8* %73 to i32*
  store i32 0, i32* %74, align 4
  %75 = load %class.scoped_refptr*, %class.scoped_refptr** %20, align 8
  %76 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %75, i64 %64
  %77 = atomicrmw add i32* %66, i32 1 monotonic
  %78 = ptrtoint i8* %65 to i64
  %79 = bitcast %class.scoped_refptr* %76 to i64*
  %80 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %76, i64 0, i32 0
  %81 = load %"class.mojo::(anonymous namespace)::TriggerContext"*, %"class.mojo::(anonymous namespace)::TriggerContext"** %80, align 8
  store i64 %78, i64* %79, align 8
  %82 = icmp eq %"class.mojo::(anonymous namespace)::TriggerContext"* %81, null
  br i1 %82, label %92, label %83

83:                                               ; preds = %63
  %84 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %81, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = atomicrmw sub i32* %84, i32 1 acq_rel
  %86 = icmp eq i32 %85, 1
  br i1 %86, label %87, label %92

87:                                               ; preds = %83
  %88 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %81, i64 0, i32 0
  %89 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %88, i64 2
  %90 = bitcast %"class.base::RefCountedThreadSafe"* %89 to %"class.base::WaitableEvent"*
  call void @_ZN4base13WaitableEventD1Ev(%"class.base::WaitableEvent"* %90) #7
  %91 = bitcast %"class.mojo::(anonymous namespace)::TriggerContext"* %81 to i8*
  call void @_ZdlPv(i8* %91) #8
  br label %92

92:                                               ; preds = %63, %83, %87
  %93 = load %class.scoped_refptr*, %class.scoped_refptr** %20, align 8
  %94 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %93, i64 %64, i32 0
  %95 = load %"class.mojo::(anonymous namespace)::TriggerContext"*, %"class.mojo::(anonymous namespace)::TriggerContext"** %94, align 8
  %96 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %95, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = atomicrmw add i32* %96, i32 1 monotonic
  %98 = load i32, i32* %17, align 4
  %99 = getelementptr inbounds %"class.mojo::Handle", %"class.mojo::Handle"* %0, i64 %64, i32 0
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds i32, i32* %1, i64 %64
  %102 = load i32, i32* %101, align 4
  %103 = load %class.scoped_refptr*, %class.scoped_refptr** %20, align 8
  %104 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %103, i64 %64, i32 0
  %105 = bitcast %"class.mojo::(anonymous namespace)::TriggerContext"** %104 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = call i32 @MojoAddTrigger(i32 %98, i32 %100, i32 %102, i32 1, i64 %106, %struct.MojoAddTriggerOptions* null) #7
  %108 = icmp eq i32 %107, 3
  br i1 %108, label %109, label %126

109:                                              ; preds = %92
  %110 = icmp eq i64* %3, null
  br i1 %110, label %112, label %111

111:                                              ; preds = %109
  store i64 %64, i64* %3, align 8
  br label %112

112:                                              ; preds = %109, %111
  %113 = load %class.scoped_refptr*, %class.scoped_refptr** %20, align 8
  %114 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %113, i64 %64, i32 0
  %115 = load %"class.mojo::(anonymous namespace)::TriggerContext"*, %"class.mojo::(anonymous namespace)::TriggerContext"** %114, align 8
  %116 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %115, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = atomicrmw sub i32* %116, i32 1 acq_rel
  %118 = icmp ne i32 %117, 1
  %119 = icmp eq %"class.mojo::(anonymous namespace)::TriggerContext"* %115, null
  %120 = or i1 %119, %118
  br i1 %120, label %210, label %121

121:                                              ; preds = %112
  %122 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %115, i64 0, i32 0
  %123 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %122, i64 2
  %124 = bitcast %"class.base::RefCountedThreadSafe"* %123 to %"class.base::WaitableEvent"*
  call void @_ZN4base13WaitableEventD1Ev(%"class.base::WaitableEvent"* %124) #7
  %125 = bitcast %"class.mojo::(anonymous namespace)::TriggerContext"* %115 to i8*
  call void @_ZdlPv(i8* %125) #8
  br label %210

126:                                              ; preds = %92
  %127 = load %class.scoped_refptr*, %class.scoped_refptr** %20, align 8
  %128 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %127, i64 %64, i32 0
  %129 = load %"class.mojo::(anonymous namespace)::TriggerContext"*, %"class.mojo::(anonymous namespace)::TriggerContext"** %128, align 8
  %130 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %129, i64 0, i32 2
  %131 = load %"class.base::WaitableEvent"**, %"class.base::WaitableEvent"*** %45, align 8
  %132 = getelementptr inbounds %"class.base::WaitableEvent"*, %"class.base::WaitableEvent"** %131, i64 %64
  store %"class.base::WaitableEvent"* %130, %"class.base::WaitableEvent"** %132, align 8
  %133 = add nuw i64 %64, 1
  %134 = icmp eq i64 %133, %2
  br i1 %134, label %135, label %63

135:                                              ; preds = %126, %43
  %136 = phi %"class.base::WaitableEvent"** [ null, %43 ], [ %131, %126 ]
  %137 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %137) #7
  store i32 1, i32* %10, align 4
  %138 = bitcast %struct.MojoTrapEvent* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %138) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %138, i8* align 8 bitcast ({ i32, i32, i64, i32, %struct.MojoHandleSignalsState, [4 x i8] }* @__const._ZN4mojo8WaitManyEPKNS_6HandleEPKjmPmP22MojoHandleSignalsState.blocking_event to i8*), i64 32, i1 false)
  %139 = load i32, i32* %17, align 4
  %140 = call i32 @MojoArmTrap(i32 %139, %struct.MojoArmTrapOptions* null, i32* nonnull %10, %struct.MojoTrapEvent* nonnull %11) #7
  %141 = icmp eq i32 %140, 9
  br i1 %141, label %142, label %162

142:                                              ; preds = %135
  br i1 %23, label %177, label %143

143:                                              ; preds = %142
  %144 = load %class.scoped_refptr*, %class.scoped_refptr** %20, align 8
  %145 = getelementptr inbounds %struct.MojoTrapEvent, %struct.MojoTrapEvent* %11, i64 0, i32 2
  %146 = load i64, i64* %145, align 8
  br label %147

147:                                              ; preds = %159, %143
  %148 = phi i64 [ 0, %143 ], [ %160, %159 ]
  %149 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %144, i64 %148, i32 0
  %150 = bitcast %"class.mojo::(anonymous namespace)::TriggerContext"** %149 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = icmp eq i64 %151, %146
  br i1 %152, label %153, label %159

153:                                              ; preds = %147
  %154 = getelementptr inbounds %struct.MojoTrapEvent, %struct.MojoTrapEvent* %11, i64 0, i32 3
  %155 = load i32, i32* %154, align 8
  %156 = getelementptr inbounds %struct.MojoTrapEvent, %struct.MojoTrapEvent* %11, i64 0, i32 4
  %157 = bitcast %struct.MojoHandleSignalsState* %156 to i64*
  %158 = load i64, i64* %157, align 4
  br label %177

159:                                              ; preds = %147
  %160 = add nuw i64 %148, 1
  %161 = icmp eq i64 %160, %2
  br i1 %161, label %177, label %147

162:                                              ; preds = %135
  %163 = bitcast %"class.base::WaitableEvent"*** %46 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = ptrtoint %"class.base::WaitableEvent"** %136 to i64
  %166 = sub i64 %164, %165
  %167 = ashr exact i64 %166, 3
  %168 = notail call i64 @_ZN4base13WaitableEvent8WaitManyEPPS0_m(%"class.base::WaitableEvent"** %136, i64 %167) #7
  %169 = load %class.scoped_refptr*, %class.scoped_refptr** %20, align 8
  %170 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %169, i64 %168, i32 0
  %171 = load %"class.mojo::(anonymous namespace)::TriggerContext"*, %"class.mojo::(anonymous namespace)::TriggerContext"** %170, align 8
  %172 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %171, i64 0, i32 3
  %173 = load i32, i32* %172, align 8
  %174 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %171, i64 0, i32 4
  %175 = bitcast %struct.MojoHandleSignalsState* %174 to i64*
  %176 = load i64, i64* %175, align 4
  br label %177

177:                                              ; preds = %159, %142, %153, %162
  %178 = phi i64 [ %168, %162 ], [ %148, %153 ], [ 0, %142 ], [ %2, %159 ]
  %179 = phi i32 [ %173, %162 ], [ %155, %153 ], [ 2, %142 ], [ 2, %159 ]
  %180 = phi i64 [ %176, %162 ], [ %158, %153 ], [ 0, %142 ], [ 0, %159 ]
  %181 = icmp eq i64* %3, null
  br i1 %181, label %183, label %182

182:                                              ; preds = %177
  store i64 %178, i64* %3, align 8
  br label %183

183:                                              ; preds = %177, %182
  %184 = icmp ne %struct.MojoHandleSignalsState* %4, null
  %185 = icmp ne i64 %2, 0
  %186 = and i1 %184, %185
  br i1 %186, label %187, label %209

187:                                              ; preds = %183
  %188 = bitcast i64* %6 to i8*
  %189 = bitcast i64* %6 to %"struct.mojo::HandleSignalsState"*
  %190 = bitcast i64* %6 to i32*
  %191 = getelementptr inbounds %"struct.mojo::HandleSignalsState", %"struct.mojo::HandleSignalsState"* %189, i64 0, i32 0, i32 1
  %192 = bitcast i64* %6 to %struct.MojoHandleSignalsState*
  %193 = getelementptr inbounds %struct.MojoHandleSignalsState, %struct.MojoHandleSignalsState* %4, i64 %178
  %194 = bitcast %struct.MojoHandleSignalsState* %193 to i64*
  br label %195

195:                                              ; preds = %206, %187
  %196 = phi i64 [ 0, %187 ], [ %207, %206 ]
  %197 = icmp eq i64 %196, %178
  br i1 %197, label %198, label %199

198:                                              ; preds = %195
  store i64 %180, i64* %194, align 4
  br label %206

199:                                              ; preds = %195
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %188)
  store i32 0, i32* %190, align 8
  store i32 0, i32* %191, align 4
  %200 = getelementptr inbounds %"class.mojo::Handle", %"class.mojo::Handle"* %0, i64 %196, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = call i32 @MojoQueryHandleSignalsState(i32 %201, %struct.MojoHandleSignalsState* nonnull %192) #7
  %203 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %188)
  %204 = getelementptr inbounds %struct.MojoHandleSignalsState, %struct.MojoHandleSignalsState* %4, i64 %196
  %205 = bitcast %struct.MojoHandleSignalsState* %204 to i64*
  store i64 %203, i64* %205, align 4
  br label %206

206:                                              ; preds = %198, %199
  %207 = add nuw i64 %196, 1
  %208 = icmp eq i64 %207, %2
  br i1 %208, label %209, label %195

209:                                              ; preds = %206, %183
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %138) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %137) #7
  br label %210

210:                                              ; preds = %121, %112, %209
  %211 = phi i32 [ %179, %209 ], [ 3, %112 ], [ 3, %121 ]
  %212 = load %"class.base::WaitableEvent"**, %"class.base::WaitableEvent"*** %45, align 8
  %213 = icmp eq %"class.base::WaitableEvent"** %212, null
  br i1 %213, label %218, label %214

214:                                              ; preds = %210
  %215 = ptrtoint %"class.base::WaitableEvent"** %212 to i64
  %216 = bitcast %"class.base::WaitableEvent"*** %46 to i64*
  store i64 %215, i64* %216, align 8
  %217 = bitcast %"class.base::WaitableEvent"** %212 to i8*
  call void @_ZdlPv(i8* %217) #8
  br label %218

218:                                              ; preds = %210, %214
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %44) #7
  %219 = load %class.scoped_refptr*, %class.scoped_refptr** %20, align 8
  %220 = icmp eq %class.scoped_refptr* %219, null
  br i1 %220, label %247, label %221

221:                                              ; preds = %218
  %222 = bitcast %class.scoped_refptr* %219 to i8*
  %223 = load %class.scoped_refptr*, %class.scoped_refptr** %21, align 8
  %224 = icmp eq %class.scoped_refptr* %223, %219
  br i1 %224, label %245, label %225

225:                                              ; preds = %221, %240
  %226 = phi %class.scoped_refptr* [ %227, %240 ], [ %223, %221 ]
  %227 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %226, i64 -1
  %228 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %227, i64 0, i32 0
  %229 = load %"class.mojo::(anonymous namespace)::TriggerContext"*, %"class.mojo::(anonymous namespace)::TriggerContext"** %228, align 8
  %230 = icmp eq %"class.mojo::(anonymous namespace)::TriggerContext"* %229, null
  br i1 %230, label %240, label %231

231:                                              ; preds = %225
  %232 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %229, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %233 = atomicrmw sub i32* %232, i32 1 acq_rel
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %235, label %240

235:                                              ; preds = %231
  %236 = getelementptr inbounds %"class.mojo::(anonymous namespace)::TriggerContext", %"class.mojo::(anonymous namespace)::TriggerContext"* %229, i64 0, i32 0
  %237 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %236, i64 2
  %238 = bitcast %"class.base::RefCountedThreadSafe"* %237 to %"class.base::WaitableEvent"*
  call void @_ZN4base13WaitableEventD1Ev(%"class.base::WaitableEvent"* %238) #7
  %239 = bitcast %"class.mojo::(anonymous namespace)::TriggerContext"* %229 to i8*
  call void @_ZdlPv(i8* %239) #8
  br label %240

240:                                              ; preds = %235, %231, %225
  %241 = icmp eq %class.scoped_refptr* %227, %219
  br i1 %241, label %242, label %225

242:                                              ; preds = %240
  %243 = bitcast %"class.std::__1::vector"* %8 to i8**
  %244 = load i8*, i8** %243, align 8
  br label %245

245:                                              ; preds = %242, %221
  %246 = phi i8* [ %244, %242 ], [ %222, %221 ]
  store %class.scoped_refptr* %219, %class.scoped_refptr** %21, align 8
  call void @_ZdlPv(i8* %246) #8
  br label %247

247:                                              ; preds = %218, %245
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #7
  %248 = load i32, i32* %17, align 4
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %252, label %250

250:                                              ; preds = %247
  %251 = call i32 @MojoClose(i32 %248) #7
  br label %252

252:                                              ; preds = %247, %250
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #7
  br label %253

253:                                              ; preds = %5, %252
  %254 = phi i32 [ %211, %252 ], [ 3, %5 ]
  ret i32 %254
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @_ZN4base13WaitableEvent8WaitManyEPPS0_m(%"class.base::WaitableEvent"**, i64) local_unnamed_addr #2

declare void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"*) local_unnamed_addr #2

declare void @_ZN4base13WaitableEventC1ENS0_11ResetPolicyENS0_12InitialStateE(%"class.base::WaitableEvent"*, i32, i32) unnamed_addr #2

declare i32 @MojoQueryHandleSignalsState(i32, %struct.MojoHandleSignalsState*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4base13WaitableEventD1Ev(%"class.base::WaitableEvent"*) unnamed_addr #5

declare i32 @MojoClose(i32) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
