; ModuleID = '../../third_party/icu/source/common/ucnv_u16.cpp'
source_filename = "../../third_party/icu/source/common/ucnv_u16.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.UConverterImpl = type { i32, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)*, void (%struct.UConverterSharedData*)*, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)*, void (%struct.UConverter*)*, void (%struct.UConverter*, i32)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, i32 (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverter*, i8*, i32*)*, i8* (%struct.UConverter*)*, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)*, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)*, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* }
%struct.UConverterSharedData = type { i32, i32, i8*, %struct.UConverterStaticData*, i8, i8, %struct.UConverterImpl*, i32, %struct.UConverterMBCSTable }
%struct.UConverterStaticData = type { i32, [60 x i8], i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }
%struct.UConverterMBCSTable = type { i8, i8, i8, i32, [256 x i32]*, [256 x i32]*, i16*, %struct._MBCSToUFallback*, i16*, i16*, [64 x i16], i8*, i8*, i32, i8, i8, i8, i16, i32, i8*, i8*, %struct.UConverterSharedData*, i32* }
%struct._MBCSToUFallback = type { i32, i32 }
%struct.UConverterLoadArgs = type { i32, i32, i8, i8, i16, i32, i8*, i8*, i8* }
%struct.UConverter = type { void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)*, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)*, i8*, i8*, i8*, i8*, %struct.UConverterSharedData*, i32, i8, i8, i8, i8, i8, [7 x i8], i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], [32 x i8], [2 x i16], [2 x i16], [32 x i16], i32, [19 x i16], [31 x i8], i8, i8, i8, i32 }
%struct.UConverterFromUnicodeArgs = type { i16, i8, %struct.UConverter*, i16*, i16*, i8*, i8*, i32* }
%struct.UConverterToUnicodeArgs = type { i16, i8, %struct.UConverter*, i8*, i8*, i16*, i16*, i32* }
%struct.USetAdder = type { %struct.USet*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)*, void (%struct.USet*, i16*, i32)*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)* }
%struct.USet = type opaque

@_ZL12_UTF16BEImpl = internal constant %struct.UConverterImpl { i32 5, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* null, void (%struct.UConverterSharedData*)* null, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* @_ZL12_UTF16BEOpenP10UConverterP18UConverterLoadArgsP10UErrorCode, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* @_ZL13_UTF16BEResetP10UConverter21UConverterResetChoice, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL28_UTF16BEToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL28_UTF16BEToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @_ZL30_UTF16BEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @_ZL30_UTF16BEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode, i32 (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL20_UTF16BEGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverter*, i8*, i32*)* null, i8* (%struct.UConverter*)* @_ZL15_UTF16BEGetNamePK10UConverter, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* null, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @ucnv_getNonSurrogateUnicodeSet_69, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null }, align 8
@_UTF16BEData_69 = hidden constant %struct.UConverterSharedData { i32 296, i32 -1, i8* null, %struct.UConverterStaticData* bitcast ({ i32, <{ [8 x i8], [52 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }* @_ZL18_UTF16BEStaticData to %struct.UConverterStaticData*), i8 0, i8 0, %struct.UConverterImpl* @_ZL12_UTF16BEImpl, i32 0, %struct.UConverterMBCSTable zeroinitializer }, align 8
@_ZL12_UTF16LEImpl = internal constant %struct.UConverterImpl { i32 6, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* null, void (%struct.UConverterSharedData*)* null, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* @_ZL12_UTF16LEOpenP10UConverterP18UConverterLoadArgsP10UErrorCode, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* @_ZL13_UTF16LEResetP10UConverter21UConverterResetChoice, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL28_UTF16LEToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL28_UTF16LEToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @_ZL30_UTF16LEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @_ZL30_UTF16LEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode, i32 (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL20_UTF16LEGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverter*, i8*, i32*)* null, i8* (%struct.UConverter*)* @_ZL15_UTF16LEGetNamePK10UConverter, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* null, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @ucnv_getNonSurrogateUnicodeSet_69, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null }, align 8
@_UTF16LEData_69 = hidden constant %struct.UConverterSharedData { i32 296, i32 -1, i8* null, %struct.UConverterStaticData* bitcast ({ i32, <{ [8 x i8], [52 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }* @_ZL18_UTF16LEStaticData to %struct.UConverterStaticData*), i8 0, i8 0, %struct.UConverterImpl* @_ZL12_UTF16LEImpl, i32 0, %struct.UConverterMBCSTable zeroinitializer }, align 8
@_ZL10_UTF16Impl = internal constant %struct.UConverterImpl { i32 29, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* null, void (%struct.UConverterSharedData*)* null, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* @_ZL10_UTF16OpenP10UConverterP18UConverterLoadArgsP10UErrorCode, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* @_ZL11_UTF16ResetP10UConverter21UConverterResetChoice, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL26_UTF16ToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL26_UTF16ToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @_ZL30_UTF16LEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @_ZL30_UTF16LEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode, i32 (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL18_UTF16GetNextUCharP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverter*, i8*, i32*)* null, i8* (%struct.UConverter*)* @_ZL13_UTF16GetNamePK10UConverter, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* null, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @ucnv_getNonSurrogateUnicodeSet_69, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null }, align 8
@_UTF16Data_69 = hidden constant %struct.UConverterSharedData { i32 296, i32 -1, i8* null, %struct.UConverterStaticData* bitcast ({ i32, <{ i8, i8, i8, i8, i8, i8, [54 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }* @_ZL16_UTF16StaticData to %struct.UConverterStaticData*), i8 0, i8 0, %struct.UConverterImpl* @_ZL10_UTF16Impl, i32 0, %struct.UConverterMBCSTable zeroinitializer }, align 8
@_ZL12_UTF16v2Impl = internal constant %struct.UConverterImpl { i32 29, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* null, void (%struct.UConverterSharedData*)* null, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* @_ZL10_UTF16OpenP10UConverterP18UConverterLoadArgsP10UErrorCode, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* @_ZL11_UTF16ResetP10UConverter21UConverterResetChoice, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL26_UTF16ToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL26_UTF16ToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @_ZL30_UTF16BEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @_ZL30_UTF16BEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode, i32 (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL18_UTF16GetNextUCharP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverter*, i8*, i32*)* null, i8* (%struct.UConverter*)* @_ZL13_UTF16GetNamePK10UConverter, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* null, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @ucnv_getNonSurrogateUnicodeSet_69, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null }, align 8
@_UTF16v2Data_69 = hidden constant %struct.UConverterSharedData { i32 296, i32 -1, i8* null, %struct.UConverterStaticData* bitcast ({ i32, <{ [16 x i8], [44 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }* @_ZL18_UTF16v2StaticData to %struct.UConverterStaticData*), i8 0, i8 0, %struct.UConverterImpl* @_ZL12_UTF16v2Impl, i32 0, %struct.UConverterMBCSTable zeroinitializer }, align 8
@_ZL18_UTF16BEStaticData = internal constant { i32, <{ [8 x i8], [52 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] } { i32 100, <{ [8 x i8], [52 x i8] }> <{ [8 x i8] c"UTF-16BE", [52 x i8] zeroinitializer }>, i32 1200, i8 0, i8 5, i8 2, i8 2, [4 x i8] c"\FF\FD\00\00", i8 2, i8 0, i8 0, i8 0, i8 0, [19 x i8] zeroinitializer }, align 4
@_ZZL30_UTF16BEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCodeE3bom = internal constant [2 x i8] c"\FE\FF", align 1
@.str = private unnamed_addr constant [9 x i8] c"UTF-16BE\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"UTF-16BE,version=1\00", align 1
@_ZL18_UTF16LEStaticData = internal constant { i32, <{ [8 x i8], [52 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] } { i32 100, <{ [8 x i8], [52 x i8] }> <{ [8 x i8] c"UTF-16LE", [52 x i8] zeroinitializer }>, i32 1202, i8 0, i8 6, i8 2, i8 2, [4 x i8] c"\FD\FF\00\00", i8 2, i8 0, i8 0, i8 0, i8 0, [19 x i8] zeroinitializer }, align 4
@_ZZL30_UTF16LEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCodeE3bom = internal constant [2 x i8] c"\FF\FE", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"UTF-16LE\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"UTF-16LE,version=1\00", align 1
@_ZL16_UTF16StaticData = internal constant { i32, <{ i8, i8, i8, i8, i8, i8, [54 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] } { i32 100, <{ i8, i8, i8, i8, i8, i8, [54 x i8] }> <{ i8 85, i8 84, i8 70, i8 45, i8 49, i8 54, [54 x i8] zeroinitializer }>, i32 1204, i8 0, i8 29, i8 2, i8 2, [4 x i8] c"\FD\FF\00\00", i8 2, i8 0, i8 0, i8 0, i8 0, [19 x i8] zeroinitializer }, align 4
@.str.7 = private unnamed_addr constant [7 x i8] c"UTF-16\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"UTF-16,version=1\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"UTF-16,version=2\00", align 1
@_ZL18_UTF16v2StaticData = internal constant { i32, <{ [16 x i8], [44 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] } { i32 100, <{ [16 x i8], [44 x i8] }> <{ [16 x i8] c"UTF-16,version=2", [44 x i8] zeroinitializer }>, i32 1204, i8 0, i8 29, i8 2, i8 2, [4 x i8] c"\FF\FD\00\00", i8 2, i8 0, i8 0, i8 0, i8 0, [19 x i8] zeroinitializer }, align 4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL12_UTF16BEOpenP10UConverterP18UConverterLoadArgsP10UErrorCode(%struct.UConverter* nocapture, %struct.UConverterLoadArgs* nocapture readnone, i32* nocapture) #0 {
  %4 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 14
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %16

8:                                                ; preds = %3
  %9 = and i32 %5, 15
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 15
  %12 = select i1 %10, i32 8, i32 0
  store i32 %12, i32* %11, align 4
  %13 = icmp eq i32 %9, 1
  br i1 %13, label %14, label %17

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 16
  store i32 1, i32* %15, align 8
  br label %17

16:                                               ; preds = %3
  store i32 1, i32* %2, align 4
  br label %17

17:                                               ; preds = %14, %8, %16
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL13_UTF16BEResetP10UConverter21UConverterResetChoice(%struct.UConverter* nocapture, i32) #0 {
  %3 = icmp slt i32 %1, 2
  %4 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %5 = load i32, i32* %4, align 8
  br i1 %3, label %6, label %12

6:                                                ; preds = %2
  %7 = and i32 %5, 15
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 15
  %10 = select i1 %8, i32 8, i32 0
  store i32 %10, i32* %9, align 4
  %11 = icmp eq i32 %1, 1
  br i1 %11, label %17, label %12

12:                                               ; preds = %2, %6
  %13 = and i32 %5, 15
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %17

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 16
  store i32 1, i32* %16, align 8
  br label %17

17:                                               ; preds = %6, %15, %12
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZL28_UTF16BEToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #1 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %4 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %5 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 8
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  tail call void @_ZL26_UTF16ToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* %0, i32* %1)
  br label %343

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = ptrtoint i8* %11 to i64
  %16 = sub i64 %14, %15
  %17 = trunc i64 %16 to i32
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %9
  %20 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 14
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %343, label %23

23:                                               ; preds = %19, %9
  %24 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 5
  %25 = load i16*, i16** %24, align 8
  %26 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 6
  %27 = load i16*, i16** %26, align 8
  %28 = icmp ult i16* %25, %27
  br i1 %28, label %30, label %29

29:                                               ; preds = %23
  store i32 15, i32* %1, align 4
  br label %343

30:                                               ; preds = %23
  %31 = ptrtoint i16* %27 to i64
  %32 = ptrtoint i16* %25 to i64
  %33 = sub i64 %31, %32
  %34 = lshr exact i64 %33, 1
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 7
  %37 = load i32*, i32** %36, align 8
  %38 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 14
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %30
  %42 = trunc i32 %39 to i8
  %43 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  store i8 %42, i8* %43, align 1
  %44 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 1, i8* %44, align 8
  store i32 0, i32* %38, align 8
  %45 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  br label %51

46:                                               ; preds = %30
  %47 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  %48 = load i8, i8* %47, align 8
  %49 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  %50 = icmp eq i8 %48, 0
  br i1 %50, label %145, label %51

51:                                               ; preds = %41, %46
  %52 = phi i8* [ %45, %41 ], [ %49, %46 ]
  %53 = phi i8 [ 1, %41 ], [ %48, %46 ]
  %54 = sext i8 %53 to i32
  %55 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %56 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 1
  br label %57

57:                                               ; preds = %134, %51
  %58 = phi i8* [ %11, %51 ], [ %62, %134 ]
  %59 = phi i32 [ %17, %51 ], [ %68, %134 ]
  %60 = phi i32 [ %54, %51 ], [ %64, %134 ]
  %61 = phi i32 [ 0, %51 ], [ %67, %134 ]
  %62 = getelementptr inbounds i8, i8* %58, i64 1
  %63 = load i8, i8* %58, align 1
  %64 = add i32 %60, 1
  %65 = zext i32 %60 to i64
  %66 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %65
  store i8 %63, i8* %66, align 1
  %67 = add i32 %61, 1
  %68 = add i32 %59, -1
  switch i32 %60, label %134 [
    i32 1, label %69
    i32 3, label %90
  ]

69:                                               ; preds = %57
  %70 = load i8, i8* %55, align 1
  %71 = zext i8 %70 to i16
  %72 = shl nuw i16 %71, 8
  %73 = load i8, i8* %56, align 1
  %74 = zext i8 %73 to i16
  %75 = or i16 %72, %74
  %76 = zext i16 %75 to i32
  %77 = and i32 %76, 63488
  %78 = icmp eq i32 %77, 55296
  br i1 %78, label %87, label %79

79:                                               ; preds = %69
  %80 = getelementptr inbounds i16, i16* %25, i64 1
  store i16 %75, i16* %25, align 2
  %81 = icmp eq i32* %37, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds i32, i32* %37, i64 1
  store i32 -1, i32* %37, align 4
  br label %84

84:                                               ; preds = %79, %82
  %85 = phi i32* [ %83, %82 ], [ null, %79 ]
  %86 = add i32 %35, -1
  br label %136

87:                                               ; preds = %69
  %88 = and i32 %76, 1024
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %134, label %136

90:                                               ; preds = %57
  %91 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 2
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i16
  %94 = shl nuw i16 %93, 8
  %95 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 3
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i16
  %98 = or i16 %94, %97
  %99 = and i16 %93, 252
  %100 = icmp eq i16 %99, 220
  br i1 %100, label %101, label %122

101:                                              ; preds = %90
  %102 = load i8, i8* %55, align 1
  %103 = zext i8 %102 to i16
  %104 = shl nuw i16 %103, 8
  %105 = load i8, i8* %56, align 1
  %106 = zext i8 %105 to i16
  %107 = or i16 %104, %106
  %108 = getelementptr inbounds i16, i16* %25, i64 1
  store i16 %107, i16* %25, align 2
  %109 = icmp ugt i32 %35, 1
  br i1 %109, label %110, label %119

110:                                              ; preds = %101
  %111 = getelementptr inbounds i16, i16* %25, i64 2
  store i16 %98, i16* %108, align 2
  %112 = icmp eq i32* %37, null
  br i1 %112, label %116, label %113

113:                                              ; preds = %110
  %114 = getelementptr inbounds i32, i32* %37, i64 1
  store i32 -1, i32* %37, align 4
  %115 = getelementptr inbounds i32, i32* %37, i64 2
  store i32 -1, i32* %114, align 4
  br label %116

116:                                              ; preds = %110, %113
  %117 = phi i32* [ %115, %113 ], [ null, %110 ]
  %118 = add i32 %35, -2
  br label %136

119:                                              ; preds = %101
  %120 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 30, i64 0
  store i16 %98, i16* %120, align 8
  %121 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 23
  store i8 1, i8* %121, align 1
  store i32 15, i32* %1, align 4
  br label %136

122:                                              ; preds = %90
  store i32 12, i32* %1, align 4
  %123 = bitcast i8** %10 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = ptrtoint i8* %62 to i64
  %126 = sub i64 %124, %125
  %127 = icmp sgt i64 %126, 1
  br i1 %127, label %128, label %130

128:                                              ; preds = %122
  %129 = getelementptr inbounds i8, i8* %58, i64 -1
  br label %143

130:                                              ; preds = %122
  %131 = load i8, i8* %91, align 1
  %132 = zext i8 %131 to i32
  %133 = or i32 %132, 256
  store i32 %133, i32* %38, align 8
  br label %143

134:                                              ; preds = %57, %87
  %135 = icmp eq i32 %68, 0
  br i1 %135, label %136, label %57

136:                                              ; preds = %87, %134, %84, %119, %116
  %137 = phi i16* [ %80, %84 ], [ %111, %116 ], [ %108, %119 ], [ %25, %134 ], [ %25, %87 ]
  %138 = phi i32* [ %85, %84 ], [ %117, %116 ], [ %37, %119 ], [ %37, %134 ], [ %37, %87 ]
  %139 = phi i32 [ %86, %84 ], [ %118, %116 ], [ 0, %119 ], [ %35, %134 ], [ %35, %87 ]
  %140 = phi i32 [ 0, %84 ], [ 0, %116 ], [ 0, %119 ], [ 2, %87 ], [ %64, %134 ]
  %141 = phi i16 [ 0, %84 ], [ 0, %116 ], [ 0, %119 ], [ %75, %87 ], [ 0, %134 ]
  %142 = trunc i32 %140 to i8
  store i8 %142, i8* %52, align 8
  br label %145

143:                                              ; preds = %128, %130
  %144 = phi i8* [ %129, %128 ], [ %58, %130 ]
  store i8 2, i8* %52, align 8
  store i8* %144, i8** %10, align 8
  store i16* %25, i16** %24, align 8
  store i32* %37, i32** %36, align 8
  br label %343

145:                                              ; preds = %136, %46
  %146 = phi i8* [ %49, %46 ], [ %52, %136 ]
  %147 = phi i8* [ %11, %46 ], [ %62, %136 ]
  %148 = phi i16* [ %25, %46 ], [ %137, %136 ]
  %149 = phi i32* [ %37, %46 ], [ %138, %136 ]
  %150 = phi i32 [ %35, %46 ], [ %139, %136 ]
  %151 = phi i32 [ %17, %46 ], [ %68, %136 ]
  %152 = phi i32 [ 0, %46 ], [ %67, %136 ]
  %153 = phi i16 [ 0, %46 ], [ %141, %136 ]
  %154 = shl i32 %150, 1
  %155 = icmp ugt i32 %154, %151
  %156 = and i32 %151, -2
  %157 = select i1 %155, i32 %156, i32 %154
  %158 = icmp eq i16 %153, 0
  %159 = icmp ne i32 %157, 0
  %160 = and i1 %158, %159
  br i1 %160, label %161, label %279

161:                                              ; preds = %145
  %162 = sub i32 %151, %157
  %163 = lshr exact i32 %157, 1
  %164 = sub i32 %150, %163
  %165 = icmp eq i32* %149, null
  br i1 %165, label %166, label %209

166:                                              ; preds = %161, %203
  %167 = phi i8* [ %204, %203 ], [ %147, %161 ]
  %168 = phi i16* [ %205, %203 ], [ %148, %161 ]
  %169 = phi i32 [ %207, %203 ], [ %163, %161 ]
  %170 = load i8, i8* %167, align 1
  %171 = zext i8 %170 to i16
  %172 = shl nuw i16 %171, 8
  %173 = getelementptr inbounds i8, i8* %167, i64 1
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i16
  %176 = or i16 %172, %175
  %177 = getelementptr inbounds i8, i8* %167, i64 2
  %178 = zext i16 %176 to i32
  %179 = and i32 %178, 63488
  %180 = icmp eq i32 %179, 55296
  br i1 %180, label %183, label %181

181:                                              ; preds = %166
  %182 = getelementptr inbounds i16, i16* %168, i64 1
  store i16 %176, i16* %168, align 2
  br label %203

183:                                              ; preds = %166
  %184 = and i32 %178, 1024
  %185 = icmp eq i32 %184, 0
  %186 = icmp ugt i32 %169, 1
  %187 = and i1 %186, %185
  br i1 %187, label %188, label %260

188:                                              ; preds = %183
  %189 = load i8, i8* %177, align 1
  %190 = zext i8 %189 to i16
  %191 = and i16 %190, 252
  %192 = icmp eq i16 %191, 220
  br i1 %192, label %193, label %268

193:                                              ; preds = %188
  %194 = shl nuw i16 %190, 8
  %195 = getelementptr inbounds i8, i8* %167, i64 3
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i16
  %198 = or i16 %194, %197
  %199 = getelementptr inbounds i8, i8* %167, i64 4
  %200 = add i32 %169, -1
  %201 = getelementptr inbounds i16, i16* %168, i64 1
  store i16 %176, i16* %168, align 2
  %202 = getelementptr inbounds i16, i16* %168, i64 2
  store i16 %198, i16* %201, align 2
  br label %203

203:                                              ; preds = %181, %193
  %204 = phi i8* [ %199, %193 ], [ %177, %181 ]
  %205 = phi i16* [ %202, %193 ], [ %182, %181 ]
  %206 = phi i32 [ %200, %193 ], [ %169, %181 ]
  %207 = add i32 %206, -1
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %321, label %166

209:                                              ; preds = %161, %249
  %210 = phi i8* [ %253, %249 ], [ %147, %161 ]
  %211 = phi i16* [ %254, %249 ], [ %148, %161 ]
  %212 = phi i32* [ %256, %249 ], [ %149, %161 ]
  %213 = phi i32 [ %258, %249 ], [ %163, %161 ]
  %214 = phi i32 [ %257, %249 ], [ %152, %161 ]
  %215 = load i8, i8* %210, align 1
  %216 = zext i8 %215 to i16
  %217 = shl nuw i16 %216, 8
  %218 = getelementptr inbounds i8, i8* %210, i64 1
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i16
  %221 = or i16 %217, %220
  %222 = getelementptr inbounds i8, i8* %210, i64 2
  %223 = zext i16 %221 to i32
  %224 = and i32 %223, 63488
  %225 = icmp eq i32 %224, 55296
  br i1 %225, label %228, label %226

226:                                              ; preds = %209
  %227 = getelementptr inbounds i16, i16* %211, i64 1
  store i16 %221, i16* %211, align 2
  br label %249

228:                                              ; preds = %209
  %229 = and i32 %223, 1024
  %230 = icmp eq i32 %229, 0
  %231 = icmp ugt i32 %213, 1
  %232 = and i1 %231, %230
  br i1 %232, label %233, label %260

233:                                              ; preds = %228
  %234 = load i8, i8* %222, align 1
  %235 = zext i8 %234 to i16
  %236 = and i16 %235, 252
  %237 = icmp eq i16 %236, 220
  br i1 %237, label %238, label %268

238:                                              ; preds = %233
  %239 = shl nuw i16 %235, 8
  %240 = getelementptr inbounds i8, i8* %210, i64 3
  %241 = load i8, i8* %240, align 1
  %242 = zext i8 %241 to i16
  %243 = or i16 %239, %242
  %244 = getelementptr inbounds i8, i8* %210, i64 4
  %245 = add i32 %213, -1
  %246 = getelementptr inbounds i16, i16* %211, i64 1
  store i16 %221, i16* %211, align 2
  %247 = getelementptr inbounds i16, i16* %211, i64 2
  store i16 %243, i16* %246, align 2
  %248 = getelementptr inbounds i32, i32* %212, i64 1
  store i32 %214, i32* %212, align 4
  br label %249

249:                                              ; preds = %226, %238
  %250 = phi i64 [ 1, %226 ], [ 2, %238 ]
  %251 = phi i32* [ %212, %226 ], [ %248, %238 ]
  %252 = phi i32 [ 2, %226 ], [ 4, %238 ]
  %253 = phi i8* [ %222, %226 ], [ %244, %238 ]
  %254 = phi i16* [ %227, %226 ], [ %247, %238 ]
  %255 = phi i32 [ %213, %226 ], [ %245, %238 ]
  %256 = getelementptr inbounds i32, i32* %212, i64 %250
  store i32 %214, i32* %251, align 4
  %257 = add i32 %214, %252
  %258 = add i32 %255, -1
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %321, label %209

260:                                              ; preds = %228, %183
  %261 = phi i8* [ %177, %183 ], [ %222, %228 ]
  %262 = phi i16* [ %168, %183 ], [ %211, %228 ]
  %263 = phi i32* [ null, %183 ], [ %212, %228 ]
  %264 = phi i32 [ %169, %183 ], [ %213, %228 ]
  %265 = phi i32 [ %152, %183 ], [ %214, %228 ]
  %266 = phi i16 [ %176, %183 ], [ %221, %228 ]
  %267 = icmp eq i32 %264, 0
  br i1 %267, label %321, label %268

268:                                              ; preds = %233, %188, %260
  %269 = phi i16 [ %266, %260 ], [ %176, %188 ], [ %221, %233 ]
  %270 = phi i32 [ %265, %260 ], [ %152, %188 ], [ %214, %233 ]
  %271 = phi i32 [ %264, %260 ], [ %169, %188 ], [ %213, %233 ]
  %272 = phi i32* [ %263, %260 ], [ null, %188 ], [ %212, %233 ]
  %273 = phi i16* [ %262, %260 ], [ %168, %188 ], [ %211, %233 ]
  %274 = phi i8* [ %261, %260 ], [ %177, %188 ], [ %222, %233 ]
  %275 = shl i32 %271, 1
  %276 = add i32 %162, -2
  %277 = add i32 %276, %275
  %278 = add i32 %271, %164
  br label %279

279:                                              ; preds = %268, %145
  %280 = phi i8* [ %274, %268 ], [ %147, %145 ]
  %281 = phi i16* [ %273, %268 ], [ %148, %145 ]
  %282 = phi i32* [ %272, %268 ], [ %149, %145 ]
  %283 = phi i32 [ %278, %268 ], [ %150, %145 ]
  %284 = phi i32 [ %277, %268 ], [ %151, %145 ]
  %285 = phi i32 [ %270, %268 ], [ %152, %145 ]
  %286 = phi i16 [ %269, %268 ], [ %153, %145 ]
  %287 = icmp eq i16 %286, 0
  br i1 %287, label %321, label %288

288:                                              ; preds = %279
  %289 = lshr i16 %286, 8
  %290 = trunc i16 %289 to i8
  %291 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  store i8 %290, i8* %291, align 1
  %292 = trunc i16 %286 to i8
  %293 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 1
  store i8 %292, i8* %293, align 1
  store i8 2, i8* %146, align 8
  %294 = and i16 %286, 1024
  %295 = icmp eq i16 %294, 0
  br i1 %295, label %296, label %320

296:                                              ; preds = %288
  %297 = icmp ugt i32 %284, 1
  br i1 %297, label %298, label %321

298:                                              ; preds = %296
  %299 = load i8, i8* %280, align 1
  %300 = zext i8 %299 to i16
  %301 = shl nuw i16 %300, 8
  %302 = getelementptr inbounds i8, i8* %280, i64 1
  %303 = load i8, i8* %302, align 1
  %304 = zext i8 %303 to i16
  %305 = or i16 %301, %304
  %306 = and i16 %300, 252
  %307 = icmp eq i16 %306, 220
  br i1 %307, label %308, label %319

308:                                              ; preds = %298
  %309 = getelementptr inbounds i8, i8* %280, i64 2
  %310 = add i32 %284, -2
  %311 = getelementptr inbounds i16, i16* %281, i64 1
  store i16 %286, i16* %281, align 2
  %312 = icmp eq i32* %282, null
  br i1 %312, label %315, label %313

313:                                              ; preds = %308
  %314 = getelementptr inbounds i32, i32* %282, i64 1
  store i32 %285, i32* %282, align 4
  br label %315

315:                                              ; preds = %308, %313
  %316 = phi i32* [ %314, %313 ], [ null, %308 ]
  %317 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 30, i64 0
  store i16 %305, i16* %317, align 8
  %318 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 23
  store i8 1, i8* %318, align 1
  store i8 0, i8* %146, align 8
  store i32 15, i32* %1, align 4
  br label %321

319:                                              ; preds = %298
  store i32 12, i32* %1, align 4
  br label %321

320:                                              ; preds = %288
  store i32 12, i32* %1, align 4
  br label %321

321:                                              ; preds = %249, %203, %260, %279, %320, %296, %315, %319
  %322 = phi i32 [ %283, %315 ], [ %283, %319 ], [ %283, %296 ], [ %283, %320 ], [ %283, %279 ], [ %164, %260 ], [ %164, %203 ], [ %164, %249 ]
  %323 = phi i8* [ %309, %315 ], [ %280, %319 ], [ %280, %296 ], [ %280, %320 ], [ %280, %279 ], [ %261, %260 ], [ %204, %203 ], [ %253, %249 ]
  %324 = phi i16* [ %311, %315 ], [ %281, %319 ], [ %281, %296 ], [ %281, %320 ], [ %281, %279 ], [ %262, %260 ], [ %205, %203 ], [ %254, %249 ]
  %325 = phi i32* [ %316, %315 ], [ %282, %319 ], [ %282, %296 ], [ %282, %320 ], [ %282, %279 ], [ %263, %260 ], [ null, %203 ], [ %256, %249 ]
  %326 = phi i32 [ %310, %315 ], [ %284, %319 ], [ %284, %296 ], [ %284, %320 ], [ %284, %279 ], [ %162, %260 ], [ %162, %203 ], [ %162, %249 ]
  %327 = load i32, i32* %1, align 4
  %328 = icmp slt i32 %327, 1
  %329 = icmp ne i32 %326, 0
  %330 = and i1 %329, %328
  br i1 %330, label %331, label %341

331:                                              ; preds = %321
  %332 = icmp eq i32 %322, 0
  br i1 %332, label %333, label %334

333:                                              ; preds = %331
  store i32 15, i32* %1, align 4
  br label %341

334:                                              ; preds = %331
  %335 = getelementptr inbounds i8, i8* %323, i64 1
  %336 = load i8, i8* %323, align 1
  %337 = load i8, i8* %146, align 8
  %338 = add i8 %337, 1
  store i8 %338, i8* %146, align 8
  %339 = sext i8 %337 to i64
  %340 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %339
  store i8 %336, i8* %340, align 1
  br label %341

341:                                              ; preds = %334, %333, %321
  %342 = phi i8* [ %323, %333 ], [ %335, %334 ], [ %323, %321 ]
  store i8* %342, i8** %10, align 8
  store i16* %324, i16** %24, align 8
  store i32* %325, i32** %36, align 8
  br label %343

343:                                              ; preds = %143, %19, %341, %29, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL30_UTF16BEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs*, i32*) #2 {
  %3 = alloca i8*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to [4 x i8]*
  %7 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #7
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %8 = bitcast i32** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #7
  store i32* inttoptr (i64 -6148914691236517206 to i32*), i32** %4, align 8
  %9 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  %10 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 1
  %11 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 2
  %12 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 3
  %13 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 3
  store i32 -1431655766, i32* %5, align 4
  %14 = load i16*, i16** %13, align 8
  %15 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 4
  %16 = bitcast i16** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = ptrtoint i16* %14 to i64
  %19 = sub i64 %17, %18
  %20 = lshr exact i64 %19, 1
  %21 = trunc i64 %20 to i32
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %319, label %23

23:                                               ; preds = %2
  %24 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %25 = load %struct.UConverter*, %struct.UConverter** %24, align 8
  %26 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %25, i64 0, i32 16
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %34

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %31 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  tail call void @ucnv_fromUWriteBytes_69(%struct.UConverter* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @_ZZL30_UTF16BEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCodeE3bom, i64 0, i64 0), i32 2, i8** %30, i8* %32, i32** %33, i32 -1, i32* %1) #7
  store i32 0, i32* %26, align 8
  br label %34

34:                                               ; preds = %29, %23
  %35 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %36 = load i8*, i8** %35, align 8
  store i8* %36, i8** %3, align 8
  %37 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %38 = load i8*, i8** %37, align 8
  %39 = icmp ult i8* %36, %38
  br i1 %39, label %41, label %40

40:                                               ; preds = %34
  store i32 15, i32* %1, align 4
  br label %319

41:                                               ; preds = %34
  %42 = ptrtoint i8* %38 to i64
  %43 = ptrtoint i8* %36 to i64
  %44 = sub i64 %42, %43
  %45 = trunc i64 %44 to i32
  %46 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  %47 = bitcast i32** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast i32** %4 to i64*
  store i64 %48, i64* %49, align 8
  %50 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %25, i64 0, i32 17
  %51 = load i32, i32* %50, align 4
  %52 = trunc i32 %51 to i16
  %53 = and i32 %51, 65535
  %54 = icmp eq i32 %53, 0
  %55 = inttoptr i64 %48 to i32*
  br i1 %54, label %93, label %56

56:                                               ; preds = %41
  %57 = load i16, i16* %14, align 2
  %58 = and i16 %57, -1024
  %59 = icmp eq i16 %58, -9216
  %60 = icmp ugt i32 %45, 3
  %61 = and i1 %60, %59
  br i1 %61, label %62, label %93

62:                                               ; preds = %56
  %63 = getelementptr inbounds i16, i16* %14, i64 1
  %64 = add i32 %21, -1
  %65 = lshr i32 %51, 8
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %36, align 1
  %67 = trunc i32 %51 to i8
  %68 = load i8*, i8** %3, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 1
  store i8 %67, i8* %69, align 1
  %70 = lshr i16 %57, 8
  %71 = trunc i16 %70 to i8
  %72 = load i8*, i8** %3, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 2
  store i8 %71, i8* %73, align 1
  %74 = trunc i16 %57 to i8
  %75 = load i8*, i8** %3, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 3
  store i8 %74, i8* %76, align 1
  %77 = load i8*, i8** %3, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 4
  store i8* %78, i8** %3, align 8
  %79 = add i32 %45, -4
  %80 = load i32*, i32** %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %91, label %82

82:                                               ; preds = %62
  %83 = getelementptr inbounds i32, i32* %80, i64 1
  store i32* %83, i32** %4, align 8
  store i32 -1, i32* %80, align 4
  %84 = load i32*, i32** %4, align 8
  %85 = getelementptr inbounds i32, i32* %84, i64 1
  store i32* %85, i32** %4, align 8
  store i32 -1, i32* %84, align 4
  %86 = load i32*, i32** %4, align 8
  %87 = getelementptr inbounds i32, i32* %86, i64 1
  store i32* %87, i32** %4, align 8
  store i32 -1, i32* %86, align 4
  %88 = load i32*, i32** %4, align 8
  %89 = getelementptr inbounds i32, i32* %88, i64 1
  store i32* %89, i32** %4, align 8
  store i32 -1, i32* %88, align 4
  %90 = load i32*, i32** %4, align 8
  br label %91

91:                                               ; preds = %82, %62
  %92 = phi i32* [ %90, %82 ], [ null, %62 ]
  store i32 0, i32* %50, align 4
  br label %95

93:                                               ; preds = %41, %56
  %94 = icmp eq i16 %52, 0
  br i1 %94, label %95, label %257

95:                                               ; preds = %91, %93
  %96 = phi i32* [ %92, %91 ], [ %55, %93 ]
  %97 = phi i32 [ 1, %91 ], [ 0, %93 ]
  %98 = phi i32 [ %64, %91 ], [ %21, %93 ]
  %99 = phi i32 [ %79, %91 ], [ %45, %93 ]
  %100 = phi i16* [ %63, %91 ], [ %14, %93 ]
  %101 = shl i32 %98, 1
  %102 = icmp ugt i32 %101, %99
  %103 = and i32 %99, -2
  %104 = select i1 %102, i32 %103, i32 %101
  %105 = sub i32 %99, %104
  %106 = lshr exact i32 %104, 1
  %107 = sub i32 %98, %106
  %108 = icmp eq i32* %96, null
  %109 = icmp eq i32 %104, 0
  br i1 %108, label %111, label %110

110:                                              ; preds = %95
  br i1 %109, label %229, label %162

111:                                              ; preds = %95
  br i1 %109, label %229, label %112

112:                                              ; preds = %111, %156
  %113 = phi i32 [ %160, %156 ], [ %106, %111 ]
  %114 = phi i16* [ %158, %156 ], [ %100, %111 ]
  %115 = getelementptr inbounds i16, i16* %114, i64 1
  %116 = load i16, i16* %114, align 2
  %117 = zext i16 %116 to i32
  %118 = and i32 %117, 63488
  %119 = icmp eq i32 %118, 55296
  br i1 %119, label %129, label %120

120:                                              ; preds = %112
  %121 = lshr i16 %116, 8
  %122 = trunc i16 %121 to i8
  %123 = load i8*, i8** %3, align 8
  store i8 %122, i8* %123, align 1
  %124 = trunc i16 %116 to i8
  %125 = load i8*, i8** %3, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 1
  store i8 %124, i8* %126, align 1
  %127 = load i8*, i8** %3, align 8
  %128 = getelementptr inbounds i8, i8* %127, i64 2
  br label %156

129:                                              ; preds = %112
  %130 = and i32 %117, 1024
  %131 = icmp eq i32 %130, 0
  %132 = icmp ugt i32 %113, 1
  %133 = and i1 %132, %131
  br i1 %133, label %134, label %244

134:                                              ; preds = %129
  %135 = load i16, i16* %115, align 2
  %136 = and i16 %135, -1024
  %137 = icmp eq i16 %136, -9216
  br i1 %137, label %138, label %244

138:                                              ; preds = %134
  %139 = getelementptr inbounds i16, i16* %114, i64 2
  %140 = add i32 %113, -1
  %141 = lshr i16 %116, 8
  %142 = trunc i16 %141 to i8
  %143 = load i8*, i8** %3, align 8
  store i8 %142, i8* %143, align 1
  %144 = trunc i16 %116 to i8
  %145 = load i8*, i8** %3, align 8
  %146 = getelementptr inbounds i8, i8* %145, i64 1
  store i8 %144, i8* %146, align 1
  %147 = lshr i16 %135, 8
  %148 = trunc i16 %147 to i8
  %149 = load i8*, i8** %3, align 8
  %150 = getelementptr inbounds i8, i8* %149, i64 2
  store i8 %148, i8* %150, align 1
  %151 = trunc i16 %135 to i8
  %152 = load i8*, i8** %3, align 8
  %153 = getelementptr inbounds i8, i8* %152, i64 3
  store i8 %151, i8* %153, align 1
  %154 = load i8*, i8** %3, align 8
  %155 = getelementptr inbounds i8, i8* %154, i64 4
  br label %156

156:                                              ; preds = %138, %120
  %157 = phi i8* [ %128, %120 ], [ %155, %138 ]
  %158 = phi i16* [ %115, %120 ], [ %139, %138 ]
  %159 = phi i32 [ %113, %120 ], [ %140, %138 ]
  store i8* %157, i8** %3, align 8
  %160 = add i32 %159, -1
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %229, label %112

162:                                              ; preds = %110, %221
  %163 = phi i32 [ %225, %221 ], [ %106, %110 ]
  %164 = phi i32 [ %223, %221 ], [ %97, %110 ]
  %165 = phi i16* [ %222, %221 ], [ %100, %110 ]
  %166 = getelementptr inbounds i16, i16* %165, i64 1
  %167 = load i16, i16* %165, align 2
  %168 = zext i16 %167 to i32
  %169 = and i32 %168, 63488
  %170 = icmp eq i32 %169, 55296
  br i1 %170, label %185, label %171

171:                                              ; preds = %162
  %172 = lshr i16 %167, 8
  %173 = trunc i16 %172 to i8
  %174 = load i8*, i8** %3, align 8
  store i8 %173, i8* %174, align 1
  %175 = trunc i16 %167 to i8
  %176 = load i8*, i8** %3, align 8
  %177 = getelementptr inbounds i8, i8* %176, i64 1
  store i8 %175, i8* %177, align 1
  %178 = load i8*, i8** %3, align 8
  %179 = getelementptr inbounds i8, i8* %178, i64 2
  store i8* %179, i8** %3, align 8
  %180 = load i32*, i32** %4, align 8
  %181 = getelementptr inbounds i32, i32* %180, i64 1
  store i32* %181, i32** %4, align 8
  store i32 %164, i32* %180, align 4
  %182 = add i32 %164, 1
  %183 = load i32*, i32** %4, align 8
  %184 = getelementptr inbounds i32, i32* %183, i64 1
  store i32* %184, i32** %4, align 8
  store i32 %164, i32* %183, align 4
  br label %221

185:                                              ; preds = %162
  %186 = and i32 %168, 1024
  %187 = icmp eq i32 %186, 0
  %188 = icmp ugt i32 %163, 1
  %189 = and i1 %188, %187
  br i1 %189, label %190, label %227

190:                                              ; preds = %185
  %191 = load i16, i16* %166, align 2
  %192 = and i16 %191, -1024
  %193 = icmp eq i16 %192, -9216
  br i1 %193, label %194, label %244

194:                                              ; preds = %190
  %195 = getelementptr inbounds i16, i16* %165, i64 2
  %196 = add i32 %163, -1
  %197 = lshr i16 %167, 8
  %198 = trunc i16 %197 to i8
  %199 = load i8*, i8** %3, align 8
  store i8 %198, i8* %199, align 1
  %200 = trunc i16 %167 to i8
  %201 = load i8*, i8** %3, align 8
  %202 = getelementptr inbounds i8, i8* %201, i64 1
  store i8 %200, i8* %202, align 1
  %203 = lshr i16 %191, 8
  %204 = trunc i16 %203 to i8
  %205 = load i8*, i8** %3, align 8
  %206 = getelementptr inbounds i8, i8* %205, i64 2
  store i8 %204, i8* %206, align 1
  %207 = trunc i16 %191 to i8
  %208 = load i8*, i8** %3, align 8
  %209 = getelementptr inbounds i8, i8* %208, i64 3
  store i8 %207, i8* %209, align 1
  %210 = load i8*, i8** %3, align 8
  %211 = getelementptr inbounds i8, i8* %210, i64 4
  store i8* %211, i8** %3, align 8
  %212 = load i32*, i32** %4, align 8
  %213 = getelementptr inbounds i32, i32* %212, i64 1
  store i32* %213, i32** %4, align 8
  store i32 %164, i32* %212, align 4
  %214 = load i32*, i32** %4, align 8
  %215 = getelementptr inbounds i32, i32* %214, i64 1
  store i32* %215, i32** %4, align 8
  store i32 %164, i32* %214, align 4
  %216 = load i32*, i32** %4, align 8
  %217 = getelementptr inbounds i32, i32* %216, i64 1
  store i32* %217, i32** %4, align 8
  store i32 %164, i32* %216, align 4
  %218 = load i32*, i32** %4, align 8
  %219 = getelementptr inbounds i32, i32* %218, i64 1
  store i32* %219, i32** %4, align 8
  store i32 %164, i32* %218, align 4
  %220 = add i32 %164, 2
  br label %221

221:                                              ; preds = %194, %171
  %222 = phi i16* [ %195, %194 ], [ %166, %171 ]
  %223 = phi i32 [ %220, %194 ], [ %182, %171 ]
  %224 = phi i32 [ %196, %194 ], [ %163, %171 ]
  %225 = add i32 %224, -1
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %229, label %162

227:                                              ; preds = %185
  %228 = icmp eq i32 %163, 0
  br i1 %228, label %229, label %244

229:                                              ; preds = %221, %156, %110, %111, %227
  %230 = phi i32 [ %164, %227 ], [ %97, %111 ], [ %97, %110 ], [ %97, %156 ], [ %223, %221 ]
  %231 = phi i16* [ %166, %227 ], [ %100, %111 ], [ %100, %110 ], [ %158, %156 ], [ %222, %221 ]
  %232 = icmp ne i32 %107, 0
  %233 = icmp ne i32 %105, 0
  %234 = and i1 %233, %232
  br i1 %234, label %235, label %303

235:                                              ; preds = %229
  %236 = getelementptr inbounds i16, i16* %231, i64 1
  %237 = load i16, i16* %231, align 2
  %238 = and i16 %237, -2048
  %239 = icmp eq i16 %238, -10240
  br i1 %239, label %251, label %240

240:                                              ; preds = %235
  %241 = lshr i16 %237, 8
  %242 = trunc i16 %241 to i8
  store i8 %242, i8* %9, align 4
  %243 = trunc i16 %237 to i8
  store i8 %243, i8* %10, align 1
  br label %292

244:                                              ; preds = %190, %129, %134, %227
  %245 = phi i32 [ %163, %227 ], [ %113, %134 ], [ %113, %129 ], [ %163, %190 ]
  %246 = phi i16 [ %167, %227 ], [ %116, %134 ], [ %116, %129 ], [ %167, %190 ]
  %247 = phi i32 [ %164, %227 ], [ %97, %134 ], [ %97, %129 ], [ %164, %190 ]
  %248 = phi i16* [ %166, %227 ], [ %115, %134 ], [ %115, %129 ], [ %166, %190 ]
  %249 = shl i32 %245, 1
  %250 = add i32 %249, %105
  br label %251

251:                                              ; preds = %244, %235
  %252 = phi i16* [ %236, %235 ], [ %248, %244 ]
  %253 = phi i32 [ %105, %235 ], [ %250, %244 ]
  %254 = phi i32 [ %230, %235 ], [ %247, %244 ]
  %255 = phi i16 [ %237, %235 ], [ %246, %244 ]
  %256 = icmp eq i16 %255, 0
  br i1 %256, label %286, label %257

257:                                              ; preds = %93, %251
  %258 = phi i16 [ %255, %251 ], [ %52, %93 ]
  %259 = phi i32 [ %254, %251 ], [ 0, %93 ]
  %260 = phi i32 [ %253, %251 ], [ %45, %93 ]
  %261 = phi i16* [ %252, %251 ], [ %14, %93 ]
  %262 = and i16 %258, 1024
  %263 = icmp eq i16 %262, 0
  br i1 %263, label %264, label %280

264:                                              ; preds = %257
  %265 = load i16*, i16** %15, align 8
  %266 = icmp ult i16* %261, %265
  br i1 %266, label %267, label %281

267:                                              ; preds = %264
  %268 = load i16, i16* %261, align 2
  %269 = and i16 %268, -1024
  %270 = icmp eq i16 %269, -9216
  br i1 %270, label %271, label %279

271:                                              ; preds = %267
  %272 = getelementptr inbounds i16, i16* %261, i64 1
  %273 = lshr i16 %258, 8
  %274 = trunc i16 %273 to i8
  store i8 %274, i8* %9, align 4
  %275 = trunc i16 %258 to i8
  store i8 %275, i8* %10, align 1
  %276 = lshr i16 %268, 8
  %277 = trunc i16 %276 to i8
  store i8 %277, i8* %11, align 2
  %278 = trunc i16 %268 to i8
  store i8 %278, i8* %12, align 1
  br label %281

279:                                              ; preds = %267
  store i32 12, i32* %1, align 4
  br label %281

280:                                              ; preds = %257
  store i32 12, i32* %1, align 4
  br label %281

281:                                              ; preds = %279, %271, %264, %280
  %282 = phi i16* [ %272, %271 ], [ %261, %279 ], [ %261, %264 ], [ %261, %280 ]
  %283 = phi i32 [ 4, %271 ], [ 0, %279 ], [ 0, %264 ], [ 0, %280 ]
  %284 = phi i16 [ 0, %271 ], [ %258, %279 ], [ %258, %264 ], [ %258, %280 ]
  %285 = zext i16 %284 to i32
  store i32 %285, i32* %50, align 4
  br label %286

286:                                              ; preds = %251, %281
  %287 = phi i32 [ %259, %281 ], [ %254, %251 ]
  %288 = phi i32 [ %260, %281 ], [ %253, %251 ]
  %289 = phi i16* [ %282, %281 ], [ %252, %251 ]
  %290 = phi i32 [ %283, %281 ], [ %107, %251 ]
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %303, label %292

292:                                              ; preds = %240, %286
  %293 = phi i32 [ 2, %240 ], [ %290, %286 ]
  %294 = phi i16* [ %236, %240 ], [ %289, %286 ]
  %295 = phi i32 [ %230, %240 ], [ %287, %286 ]
  %296 = load i8*, i8** %37, align 8
  call void @ucnv_fromUWriteBytes_69(%struct.UConverter* %25, i8* nonnull %9, i32 %293, i8** nonnull %3, i8* %296, i32** nonnull %4, i32 %295, i32* %1) #7
  %297 = bitcast i8** %37 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = bitcast i8** %3 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = sub i64 %298, %300
  %302 = trunc i64 %301 to i32
  br label %303

303:                                              ; preds = %229, %286, %292
  %304 = phi i16* [ %294, %292 ], [ %289, %286 ], [ %231, %229 ]
  %305 = phi i32 [ %302, %292 ], [ %288, %286 ], [ %105, %229 ]
  %306 = load i32, i32* %1, align 4
  %307 = icmp sgt i32 %306, 0
  br i1 %307, label %314, label %308

308:                                              ; preds = %303
  %309 = load i16*, i16** %15, align 8
  %310 = icmp ult i16* %304, %309
  %311 = icmp eq i32 %305, 0
  %312 = and i1 %311, %310
  br i1 %312, label %313, label %314

313:                                              ; preds = %308
  store i32 15, i32* %1, align 4
  br label %314

314:                                              ; preds = %303, %313, %308
  store i16* %304, i16** %13, align 8
  %315 = bitcast i8** %3 to i64*
  %316 = load i64, i64* %315, align 8
  %317 = bitcast i8** %35 to i64*
  store i64 %316, i64* %317, align 8
  %318 = load i64, i64* %49, align 8
  store i64 %318, i64* %47, align 8
  br label %319

319:                                              ; preds = %2, %314, %40
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @_ZL20_UTF16BEGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #0 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %4 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %5 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 8
  br i1 %7, label %178, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %13 = load i8*, i8** %12, align 8
  %14 = icmp ult i8* %10, %13
  br i1 %14, label %16, label %15

15:                                               ; preds = %8
  store i32 8, i32* %1, align 4
  br label %178

16:                                               ; preds = %8
  %17 = getelementptr inbounds i8, i8* %10, i64 2
  %18 = icmp ugt i8* %17, %13
  br i1 %18, label %19, label %25

19:                                               ; preds = %16
  %20 = getelementptr inbounds i8, i8* %10, i64 1
  %21 = load i8, i8* %10, align 1
  %22 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  store i8 %21, i8* %22, align 1
  %23 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %24 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %23, i64 0, i32 12
  store i8 1, i8* %24, align 8
  store i8* %20, i8** %9, align 8
  store i32 11, i32* %1, align 4
  br label %178

25:                                               ; preds = %16
  %26 = load i8, i8* %10, align 1
  %27 = zext i8 %26 to i32
  %28 = shl nuw nsw i32 %27, 8
  %29 = getelementptr inbounds i8, i8* %10, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = or i32 %28, %31
  %33 = and i32 %27, 248
  %34 = icmp eq i32 %33, 216
  br i1 %34, label %35, label %175

35:                                               ; preds = %25
  %36 = and i32 %27, 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %166

38:                                               ; preds = %35
  %39 = getelementptr inbounds i8, i8* %10, i64 4
  %40 = icmp ugt i8* %39, %13
  br i1 %40, label %46, label %41

41:                                               ; preds = %38
  %42 = load i8, i8* %17, align 1
  %43 = zext i8 %42 to i32
  %44 = and i32 %43, 252
  %45 = icmp eq i32 %44, 220
  br i1 %45, label %156, label %166

46:                                               ; preds = %38
  %47 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %48 = ptrtoint i8* %13 to i64
  %49 = sub i64 %48, %11
  %50 = trunc i64 %49 to i8
  %51 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 %50, i8* %51, align 8
  %52 = ptrtoint i8* %13 to i64
  %53 = sub i64 %52, %11
  %54 = icmp ult i64 %53, 32
  br i1 %54, label %145, label %55

55:                                               ; preds = %46
  %56 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %57 = sub i64 0, %11
  %58 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %57
  %59 = ptrtoint i8* %58 to i64
  %60 = getelementptr i8, i8* %13, i64 %59
  %61 = icmp ult i8* %56, %13
  %62 = icmp ult i8* %10, %60
  %63 = and i1 %61, %62
  br i1 %63, label %145, label %64

64:                                               ; preds = %55
  %65 = and i64 %53, -32
  %66 = getelementptr i8, i8* %10, i64 %65
  %67 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %65
  %68 = add i64 %65, -32
  %69 = lshr exact i64 %68, 5
  %70 = add nuw nsw i64 %69, 1
  %71 = and i64 %70, 3
  %72 = icmp ult i64 %68, 96
  br i1 %72, label %124, label %73

73:                                               ; preds = %64
  %74 = sub nsw i64 %70, %71
  br label %75

75:                                               ; preds = %75, %73
  %76 = phi i64 [ 0, %73 ], [ %121, %75 ]
  %77 = phi i64 [ %74, %73 ], [ %122, %75 ]
  %78 = getelementptr i8, i8* %10, i64 %76
  %79 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %76
  %80 = bitcast i8* %78 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !2
  %82 = getelementptr i8, i8* %78, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !2
  %85 = bitcast i8* %79 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !5, !noalias !2
  %86 = getelementptr i8, i8* %79, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !5, !noalias !2
  %88 = or i64 %76, 32
  %89 = getelementptr i8, i8* %10, i64 %88
  %90 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %88
  %91 = bitcast i8* %89 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !2
  %93 = getelementptr i8, i8* %89, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !2
  %96 = bitcast i8* %90 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !5, !noalias !2
  %97 = getelementptr i8, i8* %90, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !5, !noalias !2
  %99 = or i64 %76, 64
  %100 = getelementptr i8, i8* %10, i64 %99
  %101 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %99
  %102 = bitcast i8* %100 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1, !alias.scope !2
  %104 = getelementptr i8, i8* %100, i64 16
  %105 = bitcast i8* %104 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1, !alias.scope !2
  %107 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %107, align 1, !alias.scope !5, !noalias !2
  %108 = getelementptr i8, i8* %101, i64 16
  %109 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %109, align 1, !alias.scope !5, !noalias !2
  %110 = or i64 %76, 96
  %111 = getelementptr i8, i8* %10, i64 %110
  %112 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %110
  %113 = bitcast i8* %111 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !2
  %115 = getelementptr i8, i8* %111, i64 16
  %116 = bitcast i8* %115 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1, !alias.scope !2
  %118 = bitcast i8* %112 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %118, align 1, !alias.scope !5, !noalias !2
  %119 = getelementptr i8, i8* %112, i64 16
  %120 = bitcast i8* %119 to <16 x i8>*
  store <16 x i8> %117, <16 x i8>* %120, align 1, !alias.scope !5, !noalias !2
  %121 = add i64 %76, 128
  %122 = add i64 %77, -4
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %75, !llvm.loop !7

124:                                              ; preds = %75, %64
  %125 = phi i64 [ 0, %64 ], [ %121, %75 ]
  %126 = icmp eq i64 %71, 0
  br i1 %126, label %143, label %127

127:                                              ; preds = %124, %127
  %128 = phi i64 [ %140, %127 ], [ %125, %124 ]
  %129 = phi i64 [ %141, %127 ], [ %71, %124 ]
  %130 = getelementptr i8, i8* %10, i64 %128
  %131 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %128
  %132 = bitcast i8* %130 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 1, !alias.scope !2
  %134 = getelementptr i8, i8* %130, i64 16
  %135 = bitcast i8* %134 to <16 x i8>*
  %136 = load <16 x i8>, <16 x i8>* %135, align 1, !alias.scope !2
  %137 = bitcast i8* %131 to <16 x i8>*
  store <16 x i8> %133, <16 x i8>* %137, align 1, !alias.scope !5, !noalias !2
  %138 = getelementptr i8, i8* %131, i64 16
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %136, <16 x i8>* %139, align 1, !alias.scope !5, !noalias !2
  %140 = add i64 %128, 32
  %141 = add i64 %129, -1
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %127, !llvm.loop !9

143:                                              ; preds = %127, %124
  %144 = icmp eq i64 %53, %65
  br i1 %144, label %155, label %145

145:                                              ; preds = %143, %55, %46
  %146 = phi i8* [ %10, %55 ], [ %10, %46 ], [ %66, %143 ]
  %147 = phi i8* [ %47, %55 ], [ %47, %46 ], [ %67, %143 ]
  br label %148

148:                                              ; preds = %145, %148
  %149 = phi i8* [ %151, %148 ], [ %146, %145 ]
  %150 = phi i8* [ %153, %148 ], [ %147, %145 ]
  %151 = getelementptr inbounds i8, i8* %149, i64 1
  %152 = load i8, i8* %149, align 1
  %153 = getelementptr inbounds i8, i8* %150, i64 1
  store i8 %152, i8* %150, align 1
  %154 = icmp eq i8* %151, %13
  br i1 %154, label %155, label %148, !llvm.loop !11

155:                                              ; preds = %148, %143
  store i32 11, i32* %1, align 4
  br label %175

156:                                              ; preds = %41
  %157 = shl nuw nsw i32 %43, 8
  %158 = getelementptr inbounds i8, i8* %10, i64 3
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = or i32 %157, %160
  %162 = shl nuw nsw i32 %32, 10
  %163 = add nsw i32 %162, -56613888
  %164 = add nsw i32 %163, %161
  %165 = icmp slt i32 %164, 0
  br i1 %165, label %166, label %175

166:                                              ; preds = %35, %41, %156
  %167 = phi i8* [ %39, %156 ], [ %17, %41 ], [ %17, %35 ]
  %168 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %169 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 2, i8* %169, align 8
  %170 = getelementptr inbounds i8, i8* %167, i64 -2
  %171 = load i8, i8* %170, align 1
  store i8 %171, i8* %168, align 1
  %172 = getelementptr inbounds i8, i8* %167, i64 -1
  %173 = load i8, i8* %172, align 1
  %174 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 1
  store i8 %173, i8* %174, align 1
  store i32 12, i32* %1, align 4
  br label %175

175:                                              ; preds = %155, %156, %166, %25
  %176 = phi i8* [ %167, %166 ], [ %39, %156 ], [ %17, %25 ], [ %13, %155 ]
  %177 = phi i32 [ 65535, %166 ], [ %164, %156 ], [ %32, %25 ], [ 65535, %155 ]
  store i8* %176, i8** %9, align 8
  br label %178

178:                                              ; preds = %2, %175, %19, %15
  %179 = phi i32 [ 65535, %15 ], [ 65535, %19 ], [ %177, %175 ], [ -9, %2 ]
  ret i32 %179
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i8* @_ZL15_UTF16BEGetNamePK10UConverter(%struct.UConverter* nocapture readonly) #3 {
  %2 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 15
  %5 = icmp eq i32 %4, 0
  %6 = select i1 %5, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0)
  ret i8* %6
}

declare void @ucnv_getNonSurrogateUnicodeSet_69(%struct.UConverter*, %struct.USetAdder*, i32, i32*) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZL26_UTF16ToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #1 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %4 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %5 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 7
  %10 = load i32*, i32** %9, align 8
  %11 = ptrtoint i32* %10 to i64
  %12 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 15
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i8* %6, %8
  br i1 %14, label %15, label %173

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %17 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  %18 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 6
  %19 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 7
  %20 = bitcast i8** %5 to i64*
  br label %21

21:                                               ; preds = %15, %77
  %22 = phi i32 [ 0, %15 ], [ %80, %77 ]
  %23 = phi i32 [ %13, %15 ], [ %79, %77 ]
  %24 = phi i8* [ %6, %15 ], [ %78, %77 ]
  br label %25

25:                                               ; preds = %21, %86
  %26 = phi i32 [ %23, %21 ], [ %88, %86 ]
  %27 = phi i8* [ %24, %21 ], [ %87, %86 ]
  %28 = load i32, i32* %1, align 4
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %90, label %30

30:                                               ; preds = %25
  switch i32 %26, label %86 [
    i32 0, label %31
    i32 1, label %34
    i32 8, label %82
    i32 9, label %84
  ]

31:                                               ; preds = %30
  %32 = getelementptr inbounds i8, i8* %27, i64 1
  %33 = load i8, i8* %27, align 1
  store i8 %33, i8* %16, align 1
  store i8 1, i8* %17, align 8
  br label %86

34:                                               ; preds = %30
  %35 = load i8, i8* %27, align 1
  %36 = load i8, i8* %16, align 1
  %37 = icmp eq i8 %36, -2
  %38 = icmp eq i8 %35, -1
  %39 = and i1 %38, %37
  br i1 %39, label %40, label %43

40:                                               ; preds = %34
  %41 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %18, align 8
  %42 = icmp eq %struct.UConverterSharedData* %41, @_UTF16LEData_69
  br i1 %42, label %73, label %58

43:                                               ; preds = %34
  %44 = icmp eq i8 %36, -1
  %45 = icmp eq i8 %35, -2
  %46 = and i1 %45, %44
  %47 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %18, align 8
  br i1 %46, label %48, label %50

48:                                               ; preds = %43
  %49 = icmp eq %struct.UConverterSharedData* %47, @_UTF16BEData_69
  br i1 %49, label %73, label %58

50:                                               ; preds = %43
  %51 = icmp eq %struct.UConverterSharedData* %47, @_UTF16Data_69
  %52 = icmp eq %struct.UConverterSharedData* %47, @_UTF16v2Data_69
  %53 = or i1 %51, %52
  br i1 %53, label %54, label %65

54:                                               ; preds = %50
  %55 = load i32, i32* %19, align 8
  %56 = and i32 %55, 15
  %57 = icmp eq i32 %56, 1
  br i1 %57, label %73, label %65

58:                                               ; preds = %40, %48
  %59 = phi i32 [ 8, %40 ], [ 9, %48 ]
  %60 = getelementptr inbounds i8, i8* %27, i64 1
  store i8 0, i8* %17, align 8
  %61 = load i64, i64* %20, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = sub i64 %62, %61
  %64 = trunc i64 %63 to i32
  br label %77

65:                                               ; preds = %50, %54
  %66 = load i8*, i8** %5, align 8
  %67 = icmp eq i8* %27, %66
  br i1 %67, label %69, label %68

68:                                               ; preds = %65
  store i8 0, i8* %17, align 8
  br label %69

69:                                               ; preds = %65, %68
  %70 = phi i8* [ %66, %68 ], [ %27, %65 ]
  %71 = icmp eq %struct.UConverterSharedData* %47, @_UTF16LEData_69
  %72 = select i1 %71, i32 9, i32 8
  br label %77

73:                                               ; preds = %54, %48, %40
  %74 = phi i32 [ 8, %54 ], [ 8, %48 ], [ 9, %40 ]
  %75 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 1
  store i8 %35, i8* %75, align 1
  store i8 2, i8* %17, align 8
  %76 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %76, i8** %5, align 8
  store i32 %74, i32* %12, align 4
  store i32 18, i32* %1, align 4
  br label %185

77:                                               ; preds = %69, %58
  %78 = phi i8* [ %60, %58 ], [ %70, %69 ]
  %79 = phi i32 [ %59, %58 ], [ %72, %69 ]
  %80 = phi i32 [ %64, %58 ], [ %22, %69 ]
  store i32 %79, i32* %12, align 4
  %81 = icmp ult i8* %78, %8
  br i1 %81, label %21, label %90

82:                                               ; preds = %30
  store i8* %27, i8** %5, align 8
  tail call void @_ZL28_UTF16BEToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* %0, i32* %1)
  %83 = load i8*, i8** %5, align 8
  br label %86

84:                                               ; preds = %30
  store i8* %27, i8** %5, align 8
  tail call void @_ZL28_UTF16LEToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* %0, i32* %1)
  %85 = load i8*, i8** %5, align 8
  br label %86

86:                                               ; preds = %30, %84, %82, %31
  %87 = phi i8* [ %27, %30 ], [ %85, %84 ], [ %83, %82 ], [ %32, %31 ]
  %88 = phi i32 [ %26, %30 ], [ 9, %84 ], [ 8, %82 ], [ 1, %31 ]
  %89 = icmp ult i8* %87, %8
  br i1 %89, label %25, label %90

90:                                               ; preds = %77, %86, %25
  %91 = phi i32 [ %22, %25 ], [ %22, %86 ], [ %80, %77 ]
  %92 = phi i8* [ %87, %86 ], [ %27, %25 ], [ %78, %77 ]
  %93 = phi i32 [ %88, %86 ], [ %26, %25 ], [ %79, %77 ]
  %94 = icmp ne i32* %10, null
  %95 = icmp ne i32 %91, 0
  %96 = and i1 %94, %95
  br i1 %96, label %97, label %173

97:                                               ; preds = %90
  %98 = load i32*, i32** %9, align 8
  %99 = icmp ult i32* %10, %98
  br i1 %99, label %100, label %173

100:                                              ; preds = %97
  %101 = bitcast i32* %98 to i8*
  %102 = xor i64 %11, -1
  %103 = getelementptr i8, i8* %101, i64 %102
  %104 = ptrtoint i8* %103 to i64
  %105 = lshr i64 %104, 2
  %106 = add nuw nsw i64 %105, 1
  %107 = icmp ult i64 %106, 8
  br i1 %107, label %165, label %108

108:                                              ; preds = %100
  %109 = and i64 %106, 9223372036854775800
  %110 = getelementptr i32, i32* %10, i64 %109
  %111 = insertelement <4 x i32> undef, i32 %91, i32 0
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> zeroinitializer
  %113 = insertelement <4 x i32> undef, i32 %91, i32 0
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> zeroinitializer
  %115 = add nsw i64 %109, -8
  %116 = lshr exact i64 %115, 3
  %117 = add nuw nsw i64 %116, 1
  %118 = and i64 %117, 1
  %119 = icmp eq i64 %115, 0
  br i1 %119, label %149, label %120

120:                                              ; preds = %108
  %121 = sub nuw nsw i64 %117, %118
  br label %122

122:                                              ; preds = %122, %120
  %123 = phi i64 [ 0, %120 ], [ %146, %122 ]
  %124 = phi i64 [ %121, %120 ], [ %147, %122 ]
  %125 = getelementptr i32, i32* %10, i64 %123
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 4
  %128 = getelementptr i32, i32* %125, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4
  %131 = add nsw <4 x i32> %127, %112
  %132 = add nsw <4 x i32> %130, %114
  %133 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %133, align 4
  %134 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %132, <4 x i32>* %134, align 4
  %135 = or i64 %123, 8
  %136 = getelementptr i32, i32* %10, i64 %135
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = getelementptr i32, i32* %136, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4
  %142 = add nsw <4 x i32> %138, %112
  %143 = add nsw <4 x i32> %141, %114
  %144 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %144, align 4
  %145 = bitcast i32* %139 to <4 x i32>*
  store <4 x i32> %143, <4 x i32>* %145, align 4
  %146 = add i64 %123, 16
  %147 = add i64 %124, -2
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %122, !llvm.loop !12

149:                                              ; preds = %122, %108
  %150 = phi i64 [ 0, %108 ], [ %146, %122 ]
  %151 = icmp eq i64 %118, 0
  br i1 %151, label %163, label %152

152:                                              ; preds = %149
  %153 = getelementptr i32, i32* %10, i64 %150
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4
  %156 = getelementptr i32, i32* %153, i64 4
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4
  %159 = add nsw <4 x i32> %155, %112
  %160 = add nsw <4 x i32> %158, %114
  %161 = bitcast i32* %153 to <4 x i32>*
  store <4 x i32> %159, <4 x i32>* %161, align 4
  %162 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %162, align 4
  br label %163

163:                                              ; preds = %149, %152
  %164 = icmp eq i64 %106, %109
  br i1 %164, label %173, label %165

165:                                              ; preds = %163, %100
  %166 = phi i32* [ %10, %100 ], [ %110, %163 ]
  br label %167

167:                                              ; preds = %165, %167
  %168 = phi i32* [ %169, %167 ], [ %166, %165 ]
  %169 = getelementptr inbounds i32, i32* %168, i64 1
  %170 = load i32, i32* %168, align 4
  %171 = add nsw i32 %170, %91
  store i32 %171, i32* %168, align 4
  %172 = icmp ult i32* %169, %98
  br i1 %172, label %167, label %173, !llvm.loop !13

173:                                              ; preds = %167, %163, %2, %97, %90
  %174 = phi i32 [ %93, %97 ], [ %93, %90 ], [ %13, %2 ], [ %93, %163 ], [ %93, %167 ]
  %175 = phi i8* [ %92, %97 ], [ %92, %90 ], [ %6, %2 ], [ %92, %163 ], [ %92, %167 ]
  store i8* %175, i8** %5, align 8
  %176 = icmp eq i8* %175, %8
  br i1 %176, label %177, label %184

177:                                              ; preds = %173
  %178 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 1
  %179 = load i8, i8* %178, align 2
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %184, label %181

181:                                              ; preds = %177
  switch i32 %174, label %184 [
    i32 9, label %183
    i32 8, label %182
  ]

182:                                              ; preds = %181
  tail call void @_ZL28_UTF16BEToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* %0, i32* %1)
  br label %184

183:                                              ; preds = %181
  tail call void @_ZL28_UTF16LEToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* %0, i32* %1)
  br label %184

184:                                              ; preds = %177, %182, %183, %181, %173
  store i32 %174, i32* %12, align 4
  br label %185

185:                                              ; preds = %184, %73
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZL28_UTF16LEToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #1 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %4 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %5 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 8
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  tail call void @_ZL26_UTF16ToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* %0, i32* %1)
  br label %343

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = ptrtoint i8* %11 to i64
  %16 = sub i64 %14, %15
  %17 = trunc i64 %16 to i32
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %9
  %20 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 14
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %343, label %23

23:                                               ; preds = %19, %9
  %24 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 5
  %25 = load i16*, i16** %24, align 8
  %26 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 6
  %27 = load i16*, i16** %26, align 8
  %28 = icmp ult i16* %25, %27
  br i1 %28, label %30, label %29

29:                                               ; preds = %23
  store i32 15, i32* %1, align 4
  br label %343

30:                                               ; preds = %23
  %31 = ptrtoint i16* %27 to i64
  %32 = ptrtoint i16* %25 to i64
  %33 = sub i64 %31, %32
  %34 = lshr exact i64 %33, 1
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 7
  %37 = load i32*, i32** %36, align 8
  %38 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 14
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %30
  %42 = trunc i32 %39 to i8
  %43 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  store i8 %42, i8* %43, align 1
  %44 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 1, i8* %44, align 8
  store i32 0, i32* %38, align 8
  %45 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  br label %51

46:                                               ; preds = %30
  %47 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  %48 = load i8, i8* %47, align 8
  %49 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  %50 = icmp eq i8 %48, 0
  br i1 %50, label %145, label %51

51:                                               ; preds = %41, %46
  %52 = phi i8* [ %45, %41 ], [ %49, %46 ]
  %53 = phi i8 [ 1, %41 ], [ %48, %46 ]
  %54 = sext i8 %53 to i32
  %55 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %56 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 1
  br label %57

57:                                               ; preds = %134, %51
  %58 = phi i8* [ %11, %51 ], [ %62, %134 ]
  %59 = phi i32 [ %17, %51 ], [ %68, %134 ]
  %60 = phi i32 [ %54, %51 ], [ %64, %134 ]
  %61 = phi i32 [ 0, %51 ], [ %67, %134 ]
  %62 = getelementptr inbounds i8, i8* %58, i64 1
  %63 = load i8, i8* %58, align 1
  %64 = add i32 %60, 1
  %65 = zext i32 %60 to i64
  %66 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %65
  store i8 %63, i8* %66, align 1
  %67 = add i32 %61, 1
  %68 = add i32 %59, -1
  switch i32 %60, label %134 [
    i32 1, label %69
    i32 3, label %90
  ]

69:                                               ; preds = %57
  %70 = load i8, i8* %56, align 1
  %71 = zext i8 %70 to i16
  %72 = shl nuw i16 %71, 8
  %73 = load i8, i8* %55, align 1
  %74 = zext i8 %73 to i16
  %75 = or i16 %72, %74
  %76 = zext i16 %75 to i32
  %77 = and i32 %76, 63488
  %78 = icmp eq i32 %77, 55296
  br i1 %78, label %87, label %79

79:                                               ; preds = %69
  %80 = getelementptr inbounds i16, i16* %25, i64 1
  store i16 %75, i16* %25, align 2
  %81 = icmp eq i32* %37, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds i32, i32* %37, i64 1
  store i32 -1, i32* %37, align 4
  br label %84

84:                                               ; preds = %79, %82
  %85 = phi i32* [ %83, %82 ], [ null, %79 ]
  %86 = add i32 %35, -1
  br label %136

87:                                               ; preds = %69
  %88 = and i32 %76, 1024
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %134, label %136

90:                                               ; preds = %57
  %91 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 3
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i16
  %94 = shl nuw i16 %93, 8
  %95 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 2
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i16
  %98 = or i16 %94, %97
  %99 = and i16 %93, 252
  %100 = icmp eq i16 %99, 220
  br i1 %100, label %101, label %122

101:                                              ; preds = %90
  %102 = load i8, i8* %56, align 1
  %103 = zext i8 %102 to i16
  %104 = shl nuw i16 %103, 8
  %105 = load i8, i8* %55, align 1
  %106 = zext i8 %105 to i16
  %107 = or i16 %104, %106
  %108 = getelementptr inbounds i16, i16* %25, i64 1
  store i16 %107, i16* %25, align 2
  %109 = icmp ugt i32 %35, 1
  br i1 %109, label %110, label %119

110:                                              ; preds = %101
  %111 = getelementptr inbounds i16, i16* %25, i64 2
  store i16 %98, i16* %108, align 2
  %112 = icmp eq i32* %37, null
  br i1 %112, label %116, label %113

113:                                              ; preds = %110
  %114 = getelementptr inbounds i32, i32* %37, i64 1
  store i32 -1, i32* %37, align 4
  %115 = getelementptr inbounds i32, i32* %37, i64 2
  store i32 -1, i32* %114, align 4
  br label %116

116:                                              ; preds = %110, %113
  %117 = phi i32* [ %115, %113 ], [ null, %110 ]
  %118 = add i32 %35, -2
  br label %136

119:                                              ; preds = %101
  %120 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 30, i64 0
  store i16 %98, i16* %120, align 8
  %121 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 23
  store i8 1, i8* %121, align 1
  store i32 15, i32* %1, align 4
  br label %136

122:                                              ; preds = %90
  store i32 12, i32* %1, align 4
  %123 = bitcast i8** %10 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = ptrtoint i8* %62 to i64
  %126 = sub i64 %124, %125
  %127 = icmp sgt i64 %126, 1
  br i1 %127, label %128, label %130

128:                                              ; preds = %122
  %129 = getelementptr inbounds i8, i8* %58, i64 -1
  br label %143

130:                                              ; preds = %122
  %131 = load i8, i8* %95, align 1
  %132 = zext i8 %131 to i32
  %133 = or i32 %132, 256
  store i32 %133, i32* %38, align 8
  br label %143

134:                                              ; preds = %57, %87
  %135 = icmp eq i32 %68, 0
  br i1 %135, label %136, label %57

136:                                              ; preds = %87, %134, %84, %119, %116
  %137 = phi i16* [ %80, %84 ], [ %111, %116 ], [ %108, %119 ], [ %25, %134 ], [ %25, %87 ]
  %138 = phi i32* [ %85, %84 ], [ %117, %116 ], [ %37, %119 ], [ %37, %134 ], [ %37, %87 ]
  %139 = phi i32 [ %86, %84 ], [ %118, %116 ], [ 0, %119 ], [ %35, %134 ], [ %35, %87 ]
  %140 = phi i32 [ 0, %84 ], [ 0, %116 ], [ 0, %119 ], [ 2, %87 ], [ %64, %134 ]
  %141 = phi i16 [ 0, %84 ], [ 0, %116 ], [ 0, %119 ], [ %75, %87 ], [ 0, %134 ]
  %142 = trunc i32 %140 to i8
  store i8 %142, i8* %52, align 8
  br label %145

143:                                              ; preds = %128, %130
  %144 = phi i8* [ %129, %128 ], [ %58, %130 ]
  store i8 2, i8* %52, align 8
  store i8* %144, i8** %10, align 8
  store i16* %25, i16** %24, align 8
  store i32* %37, i32** %36, align 8
  br label %343

145:                                              ; preds = %136, %46
  %146 = phi i8* [ %49, %46 ], [ %52, %136 ]
  %147 = phi i8* [ %11, %46 ], [ %62, %136 ]
  %148 = phi i16* [ %25, %46 ], [ %137, %136 ]
  %149 = phi i32* [ %37, %46 ], [ %138, %136 ]
  %150 = phi i32 [ %35, %46 ], [ %139, %136 ]
  %151 = phi i32 [ %17, %46 ], [ %68, %136 ]
  %152 = phi i32 [ 0, %46 ], [ %67, %136 ]
  %153 = phi i16 [ 0, %46 ], [ %141, %136 ]
  %154 = shl i32 %150, 1
  %155 = icmp ugt i32 %154, %151
  %156 = and i32 %151, -2
  %157 = select i1 %155, i32 %156, i32 %154
  %158 = icmp eq i16 %153, 0
  %159 = icmp ne i32 %157, 0
  %160 = and i1 %158, %159
  br i1 %160, label %161, label %279

161:                                              ; preds = %145
  %162 = sub i32 %151, %157
  %163 = lshr exact i32 %157, 1
  %164 = sub i32 %150, %163
  %165 = icmp eq i32* %149, null
  br i1 %165, label %166, label %209

166:                                              ; preds = %161, %203
  %167 = phi i8* [ %204, %203 ], [ %147, %161 ]
  %168 = phi i16* [ %205, %203 ], [ %148, %161 ]
  %169 = phi i32 [ %207, %203 ], [ %163, %161 ]
  %170 = getelementptr inbounds i8, i8* %167, i64 1
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i16
  %173 = shl nuw i16 %172, 8
  %174 = load i8, i8* %167, align 1
  %175 = zext i8 %174 to i16
  %176 = or i16 %173, %175
  %177 = getelementptr inbounds i8, i8* %167, i64 2
  %178 = zext i16 %176 to i32
  %179 = and i32 %178, 63488
  %180 = icmp eq i32 %179, 55296
  br i1 %180, label %183, label %181

181:                                              ; preds = %166
  %182 = getelementptr inbounds i16, i16* %168, i64 1
  store i16 %176, i16* %168, align 2
  br label %203

183:                                              ; preds = %166
  %184 = and i32 %178, 1024
  %185 = icmp eq i32 %184, 0
  %186 = icmp ugt i32 %169, 1
  %187 = and i1 %186, %185
  br i1 %187, label %188, label %260

188:                                              ; preds = %183
  %189 = getelementptr inbounds i8, i8* %167, i64 3
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i16
  %192 = and i16 %191, 252
  %193 = icmp eq i16 %192, 220
  br i1 %193, label %194, label %268

194:                                              ; preds = %188
  %195 = shl nuw i16 %191, 8
  %196 = load i8, i8* %177, align 1
  %197 = zext i8 %196 to i16
  %198 = or i16 %195, %197
  %199 = getelementptr inbounds i8, i8* %167, i64 4
  %200 = add i32 %169, -1
  %201 = getelementptr inbounds i16, i16* %168, i64 1
  store i16 %176, i16* %168, align 2
  %202 = getelementptr inbounds i16, i16* %168, i64 2
  store i16 %198, i16* %201, align 2
  br label %203

203:                                              ; preds = %181, %194
  %204 = phi i8* [ %199, %194 ], [ %177, %181 ]
  %205 = phi i16* [ %202, %194 ], [ %182, %181 ]
  %206 = phi i32 [ %200, %194 ], [ %169, %181 ]
  %207 = add i32 %206, -1
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %321, label %166

209:                                              ; preds = %161, %249
  %210 = phi i8* [ %253, %249 ], [ %147, %161 ]
  %211 = phi i16* [ %254, %249 ], [ %148, %161 ]
  %212 = phi i32* [ %256, %249 ], [ %149, %161 ]
  %213 = phi i32 [ %258, %249 ], [ %163, %161 ]
  %214 = phi i32 [ %257, %249 ], [ %152, %161 ]
  %215 = getelementptr inbounds i8, i8* %210, i64 1
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i16
  %218 = shl nuw i16 %217, 8
  %219 = load i8, i8* %210, align 1
  %220 = zext i8 %219 to i16
  %221 = or i16 %218, %220
  %222 = getelementptr inbounds i8, i8* %210, i64 2
  %223 = zext i16 %221 to i32
  %224 = and i32 %223, 63488
  %225 = icmp eq i32 %224, 55296
  br i1 %225, label %228, label %226

226:                                              ; preds = %209
  %227 = getelementptr inbounds i16, i16* %211, i64 1
  store i16 %221, i16* %211, align 2
  br label %249

228:                                              ; preds = %209
  %229 = and i32 %223, 1024
  %230 = icmp eq i32 %229, 0
  %231 = icmp ugt i32 %213, 1
  %232 = and i1 %231, %230
  br i1 %232, label %233, label %260

233:                                              ; preds = %228
  %234 = getelementptr inbounds i8, i8* %210, i64 3
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i16
  %237 = and i16 %236, 252
  %238 = icmp eq i16 %237, 220
  br i1 %238, label %239, label %268

239:                                              ; preds = %233
  %240 = shl nuw i16 %236, 8
  %241 = load i8, i8* %222, align 1
  %242 = zext i8 %241 to i16
  %243 = or i16 %240, %242
  %244 = getelementptr inbounds i8, i8* %210, i64 4
  %245 = add i32 %213, -1
  %246 = getelementptr inbounds i16, i16* %211, i64 1
  store i16 %221, i16* %211, align 2
  %247 = getelementptr inbounds i16, i16* %211, i64 2
  store i16 %243, i16* %246, align 2
  %248 = getelementptr inbounds i32, i32* %212, i64 1
  store i32 %214, i32* %212, align 4
  br label %249

249:                                              ; preds = %226, %239
  %250 = phi i64 [ 1, %226 ], [ 2, %239 ]
  %251 = phi i32* [ %212, %226 ], [ %248, %239 ]
  %252 = phi i32 [ 2, %226 ], [ 4, %239 ]
  %253 = phi i8* [ %222, %226 ], [ %244, %239 ]
  %254 = phi i16* [ %227, %226 ], [ %247, %239 ]
  %255 = phi i32 [ %213, %226 ], [ %245, %239 ]
  %256 = getelementptr inbounds i32, i32* %212, i64 %250
  store i32 %214, i32* %251, align 4
  %257 = add i32 %214, %252
  %258 = add i32 %255, -1
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %321, label %209

260:                                              ; preds = %228, %183
  %261 = phi i8* [ %177, %183 ], [ %222, %228 ]
  %262 = phi i16* [ %168, %183 ], [ %211, %228 ]
  %263 = phi i32* [ null, %183 ], [ %212, %228 ]
  %264 = phi i32 [ %169, %183 ], [ %213, %228 ]
  %265 = phi i32 [ %152, %183 ], [ %214, %228 ]
  %266 = phi i16 [ %176, %183 ], [ %221, %228 ]
  %267 = icmp eq i32 %264, 0
  br i1 %267, label %321, label %268

268:                                              ; preds = %233, %188, %260
  %269 = phi i16 [ %266, %260 ], [ %176, %188 ], [ %221, %233 ]
  %270 = phi i32 [ %265, %260 ], [ %152, %188 ], [ %214, %233 ]
  %271 = phi i32 [ %264, %260 ], [ %169, %188 ], [ %213, %233 ]
  %272 = phi i32* [ %263, %260 ], [ null, %188 ], [ %212, %233 ]
  %273 = phi i16* [ %262, %260 ], [ %168, %188 ], [ %211, %233 ]
  %274 = phi i8* [ %261, %260 ], [ %177, %188 ], [ %222, %233 ]
  %275 = shl i32 %271, 1
  %276 = add i32 %162, -2
  %277 = add i32 %276, %275
  %278 = add i32 %271, %164
  br label %279

279:                                              ; preds = %268, %145
  %280 = phi i8* [ %274, %268 ], [ %147, %145 ]
  %281 = phi i16* [ %273, %268 ], [ %148, %145 ]
  %282 = phi i32* [ %272, %268 ], [ %149, %145 ]
  %283 = phi i32 [ %278, %268 ], [ %150, %145 ]
  %284 = phi i32 [ %277, %268 ], [ %151, %145 ]
  %285 = phi i32 [ %270, %268 ], [ %152, %145 ]
  %286 = phi i16 [ %269, %268 ], [ %153, %145 ]
  %287 = icmp eq i16 %286, 0
  br i1 %287, label %321, label %288

288:                                              ; preds = %279
  %289 = trunc i16 %286 to i8
  %290 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  store i8 %289, i8* %290, align 1
  %291 = lshr i16 %286, 8
  %292 = trunc i16 %291 to i8
  %293 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 1
  store i8 %292, i8* %293, align 1
  store i8 2, i8* %146, align 8
  %294 = and i16 %286, 1024
  %295 = icmp eq i16 %294, 0
  br i1 %295, label %296, label %320

296:                                              ; preds = %288
  %297 = icmp ugt i32 %284, 1
  br i1 %297, label %298, label %321

298:                                              ; preds = %296
  %299 = getelementptr inbounds i8, i8* %280, i64 1
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i16
  %302 = shl nuw i16 %301, 8
  %303 = load i8, i8* %280, align 1
  %304 = zext i8 %303 to i16
  %305 = or i16 %302, %304
  %306 = and i16 %301, 252
  %307 = icmp eq i16 %306, 220
  br i1 %307, label %308, label %319

308:                                              ; preds = %298
  %309 = getelementptr inbounds i8, i8* %280, i64 2
  %310 = add i32 %284, -2
  %311 = getelementptr inbounds i16, i16* %281, i64 1
  store i16 %286, i16* %281, align 2
  %312 = icmp eq i32* %282, null
  br i1 %312, label %315, label %313

313:                                              ; preds = %308
  %314 = getelementptr inbounds i32, i32* %282, i64 1
  store i32 %285, i32* %282, align 4
  br label %315

315:                                              ; preds = %308, %313
  %316 = phi i32* [ %314, %313 ], [ null, %308 ]
  %317 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 30, i64 0
  store i16 %305, i16* %317, align 8
  %318 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 23
  store i8 1, i8* %318, align 1
  store i8 0, i8* %146, align 8
  store i32 15, i32* %1, align 4
  br label %321

319:                                              ; preds = %298
  store i32 12, i32* %1, align 4
  br label %321

320:                                              ; preds = %288
  store i32 12, i32* %1, align 4
  br label %321

321:                                              ; preds = %249, %203, %260, %279, %320, %296, %315, %319
  %322 = phi i32 [ %283, %315 ], [ %283, %319 ], [ %283, %296 ], [ %283, %320 ], [ %283, %279 ], [ %164, %260 ], [ %164, %203 ], [ %164, %249 ]
  %323 = phi i8* [ %309, %315 ], [ %280, %319 ], [ %280, %296 ], [ %280, %320 ], [ %280, %279 ], [ %261, %260 ], [ %204, %203 ], [ %253, %249 ]
  %324 = phi i16* [ %311, %315 ], [ %281, %319 ], [ %281, %296 ], [ %281, %320 ], [ %281, %279 ], [ %262, %260 ], [ %205, %203 ], [ %254, %249 ]
  %325 = phi i32* [ %316, %315 ], [ %282, %319 ], [ %282, %296 ], [ %282, %320 ], [ %282, %279 ], [ %263, %260 ], [ null, %203 ], [ %256, %249 ]
  %326 = phi i32 [ %310, %315 ], [ %284, %319 ], [ %284, %296 ], [ %284, %320 ], [ %284, %279 ], [ %162, %260 ], [ %162, %203 ], [ %162, %249 ]
  %327 = load i32, i32* %1, align 4
  %328 = icmp slt i32 %327, 1
  %329 = icmp ne i32 %326, 0
  %330 = and i1 %329, %328
  br i1 %330, label %331, label %341

331:                                              ; preds = %321
  %332 = icmp eq i32 %322, 0
  br i1 %332, label %333, label %334

333:                                              ; preds = %331
  store i32 15, i32* %1, align 4
  br label %341

334:                                              ; preds = %331
  %335 = getelementptr inbounds i8, i8* %323, i64 1
  %336 = load i8, i8* %323, align 1
  %337 = load i8, i8* %146, align 8
  %338 = add i8 %337, 1
  store i8 %338, i8* %146, align 8
  %339 = sext i8 %337 to i64
  %340 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %339
  store i8 %336, i8* %340, align 1
  br label %341

341:                                              ; preds = %334, %333, %321
  %342 = phi i8* [ %323, %333 ], [ %335, %334 ], [ %323, %321 ]
  store i8* %342, i8** %10, align 8
  store i16* %324, i16** %24, align 8
  store i32* %325, i32** %36, align 8
  br label %343

343:                                              ; preds = %143, %19, %341, %29, %8
  ret void
}

declare void @ucnv_fromUWriteBytes_69(%struct.UConverter*, i8*, i32, i8**, i8*, i32**, i32, i32*) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL12_UTF16LEOpenP10UConverterP18UConverterLoadArgsP10UErrorCode(%struct.UConverter* nocapture, %struct.UConverterLoadArgs* nocapture readnone, i32* nocapture) #0 {
  %4 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 14
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %16

8:                                                ; preds = %3
  %9 = and i32 %5, 15
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 15
  %12 = select i1 %10, i32 8, i32 0
  store i32 %12, i32* %11, align 4
  %13 = icmp eq i32 %9, 1
  br i1 %13, label %14, label %17

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 16
  store i32 1, i32* %15, align 8
  br label %17

16:                                               ; preds = %3
  store i32 1, i32* %2, align 4
  br label %17

17:                                               ; preds = %14, %8, %16
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL13_UTF16LEResetP10UConverter21UConverterResetChoice(%struct.UConverter* nocapture, i32) #0 {
  %3 = icmp slt i32 %1, 2
  %4 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %5 = load i32, i32* %4, align 8
  br i1 %3, label %6, label %12

6:                                                ; preds = %2
  %7 = and i32 %5, 15
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 15
  %10 = select i1 %8, i32 8, i32 0
  store i32 %10, i32* %9, align 4
  %11 = icmp eq i32 %1, 1
  br i1 %11, label %17, label %12

12:                                               ; preds = %2, %6
  %13 = and i32 %5, 15
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %17

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 16
  store i32 1, i32* %16, align 8
  br label %17

17:                                               ; preds = %6, %15, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL30_UTF16LEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs*, i32*) #2 {
  %3 = alloca i8*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to [4 x i8]*
  %7 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #7
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %8 = bitcast i32** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #7
  store i32* inttoptr (i64 -6148914691236517206 to i32*), i32** %4, align 8
  %9 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  %10 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 1
  %11 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 2
  %12 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 3
  %13 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 3
  store i32 -1431655766, i32* %5, align 4
  %14 = load i16*, i16** %13, align 8
  %15 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 4
  %16 = bitcast i16** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = ptrtoint i16* %14 to i64
  %19 = sub i64 %17, %18
  %20 = lshr exact i64 %19, 1
  %21 = trunc i64 %20 to i32
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %319, label %23

23:                                               ; preds = %2
  %24 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %25 = load %struct.UConverter*, %struct.UConverter** %24, align 8
  %26 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %25, i64 0, i32 16
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %34

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %31 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  tail call void @ucnv_fromUWriteBytes_69(%struct.UConverter* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @_ZZL30_UTF16LEFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCodeE3bom, i64 0, i64 0), i32 2, i8** %30, i8* %32, i32** %33, i32 -1, i32* %1) #7
  store i32 0, i32* %26, align 8
  br label %34

34:                                               ; preds = %29, %23
  %35 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %36 = load i8*, i8** %35, align 8
  store i8* %36, i8** %3, align 8
  %37 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %38 = load i8*, i8** %37, align 8
  %39 = icmp ult i8* %36, %38
  br i1 %39, label %41, label %40

40:                                               ; preds = %34
  store i32 15, i32* %1, align 4
  br label %319

41:                                               ; preds = %34
  %42 = ptrtoint i8* %36 to i64
  %43 = bitcast i8** %35 to i64*
  %44 = ptrtoint i8* %38 to i64
  %45 = sub i64 %44, %42
  %46 = trunc i64 %45 to i32
  %47 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  %48 = bitcast i32** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast i32** %4 to i64*
  store i64 %49, i64* %50, align 8
  %51 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %25, i64 0, i32 17
  %52 = load i32, i32* %51, align 4
  %53 = trunc i32 %52 to i16
  %54 = and i32 %52, 65535
  %55 = icmp eq i32 %54, 0
  %56 = inttoptr i64 %49 to i32*
  br i1 %55, label %94, label %57

57:                                               ; preds = %41
  %58 = load i16, i16* %14, align 2
  %59 = and i16 %58, -1024
  %60 = icmp eq i16 %59, -9216
  %61 = icmp ugt i32 %46, 3
  %62 = and i1 %61, %60
  br i1 %62, label %63, label %94

63:                                               ; preds = %57
  %64 = getelementptr inbounds i16, i16* %14, i64 1
  %65 = add i32 %21, -1
  %66 = trunc i32 %52 to i8
  store i8 %66, i8* %36, align 1
  %67 = lshr i32 %52, 8
  %68 = trunc i32 %67 to i8
  %69 = load i8*, i8** %3, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 1
  store i8 %68, i8* %70, align 1
  %71 = trunc i16 %58 to i8
  %72 = load i8*, i8** %3, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 2
  store i8 %71, i8* %73, align 1
  %74 = lshr i16 %58, 8
  %75 = trunc i16 %74 to i8
  %76 = load i8*, i8** %3, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 3
  store i8 %75, i8* %77, align 1
  %78 = load i8*, i8** %3, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 4
  store i8* %79, i8** %3, align 8
  %80 = add i32 %46, -4
  %81 = load i32*, i32** %4, align 8
  %82 = icmp eq i32* %81, null
  br i1 %82, label %92, label %83

83:                                               ; preds = %63
  %84 = getelementptr inbounds i32, i32* %81, i64 1
  store i32* %84, i32** %4, align 8
  store i32 -1, i32* %81, align 4
  %85 = load i32*, i32** %4, align 8
  %86 = getelementptr inbounds i32, i32* %85, i64 1
  store i32* %86, i32** %4, align 8
  store i32 -1, i32* %85, align 4
  %87 = load i32*, i32** %4, align 8
  %88 = getelementptr inbounds i32, i32* %87, i64 1
  store i32* %88, i32** %4, align 8
  store i32 -1, i32* %87, align 4
  %89 = load i32*, i32** %4, align 8
  %90 = getelementptr inbounds i32, i32* %89, i64 1
  store i32* %90, i32** %4, align 8
  store i32 -1, i32* %89, align 4
  %91 = load i32*, i32** %4, align 8
  br label %92

92:                                               ; preds = %83, %63
  %93 = phi i32* [ %91, %83 ], [ null, %63 ]
  store i32 0, i32* %51, align 4
  br label %96

94:                                               ; preds = %41, %57
  %95 = icmp eq i16 %53, 0
  br i1 %95, label %96, label %258

96:                                               ; preds = %92, %94
  %97 = phi i32* [ %93, %92 ], [ %56, %94 ]
  %98 = phi i32 [ 1, %92 ], [ 0, %94 ]
  %99 = phi i32 [ %65, %92 ], [ %21, %94 ]
  %100 = phi i32 [ %80, %92 ], [ %46, %94 ]
  %101 = phi i16* [ %64, %92 ], [ %14, %94 ]
  %102 = shl i32 %99, 1
  %103 = icmp ugt i32 %102, %100
  %104 = and i32 %100, -2
  %105 = select i1 %103, i32 %104, i32 %102
  %106 = sub i32 %100, %105
  %107 = lshr exact i32 %105, 1
  %108 = sub i32 %99, %107
  %109 = icmp eq i32* %97, null
  %110 = icmp eq i32 %105, 0
  br i1 %109, label %112, label %111

111:                                              ; preds = %96
  br i1 %110, label %230, label %163

112:                                              ; preds = %96
  br i1 %110, label %230, label %113

113:                                              ; preds = %112, %157
  %114 = phi i32 [ %161, %157 ], [ %107, %112 ]
  %115 = phi i16* [ %159, %157 ], [ %101, %112 ]
  %116 = getelementptr inbounds i16, i16* %115, i64 1
  %117 = load i16, i16* %115, align 2
  %118 = zext i16 %117 to i32
  %119 = and i32 %118, 63488
  %120 = icmp eq i32 %119, 55296
  br i1 %120, label %130, label %121

121:                                              ; preds = %113
  %122 = trunc i16 %117 to i8
  %123 = load i8*, i8** %3, align 8
  store i8 %122, i8* %123, align 1
  %124 = lshr i16 %117, 8
  %125 = trunc i16 %124 to i8
  %126 = load i8*, i8** %3, align 8
  %127 = getelementptr inbounds i8, i8* %126, i64 1
  store i8 %125, i8* %127, align 1
  %128 = load i8*, i8** %3, align 8
  %129 = getelementptr inbounds i8, i8* %128, i64 2
  br label %157

130:                                              ; preds = %113
  %131 = and i32 %118, 1024
  %132 = icmp eq i32 %131, 0
  %133 = icmp ugt i32 %114, 1
  %134 = and i1 %133, %132
  br i1 %134, label %135, label %245

135:                                              ; preds = %130
  %136 = load i16, i16* %116, align 2
  %137 = and i16 %136, -1024
  %138 = icmp eq i16 %137, -9216
  br i1 %138, label %139, label %245

139:                                              ; preds = %135
  %140 = getelementptr inbounds i16, i16* %115, i64 2
  %141 = add i32 %114, -1
  %142 = trunc i16 %117 to i8
  %143 = load i8*, i8** %3, align 8
  store i8 %142, i8* %143, align 1
  %144 = lshr i16 %117, 8
  %145 = trunc i16 %144 to i8
  %146 = load i8*, i8** %3, align 8
  %147 = getelementptr inbounds i8, i8* %146, i64 1
  store i8 %145, i8* %147, align 1
  %148 = trunc i16 %136 to i8
  %149 = load i8*, i8** %3, align 8
  %150 = getelementptr inbounds i8, i8* %149, i64 2
  store i8 %148, i8* %150, align 1
  %151 = lshr i16 %136, 8
  %152 = trunc i16 %151 to i8
  %153 = load i8*, i8** %3, align 8
  %154 = getelementptr inbounds i8, i8* %153, i64 3
  store i8 %152, i8* %154, align 1
  %155 = load i8*, i8** %3, align 8
  %156 = getelementptr inbounds i8, i8* %155, i64 4
  br label %157

157:                                              ; preds = %139, %121
  %158 = phi i8* [ %129, %121 ], [ %156, %139 ]
  %159 = phi i16* [ %116, %121 ], [ %140, %139 ]
  %160 = phi i32 [ %114, %121 ], [ %141, %139 ]
  store i8* %158, i8** %3, align 8
  %161 = add i32 %160, -1
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %230, label %113

163:                                              ; preds = %111, %222
  %164 = phi i32 [ %226, %222 ], [ %107, %111 ]
  %165 = phi i32 [ %224, %222 ], [ %98, %111 ]
  %166 = phi i16* [ %223, %222 ], [ %101, %111 ]
  %167 = getelementptr inbounds i16, i16* %166, i64 1
  %168 = load i16, i16* %166, align 2
  %169 = zext i16 %168 to i32
  %170 = and i32 %169, 63488
  %171 = icmp eq i32 %170, 55296
  br i1 %171, label %186, label %172

172:                                              ; preds = %163
  %173 = trunc i16 %168 to i8
  %174 = load i8*, i8** %3, align 8
  store i8 %173, i8* %174, align 1
  %175 = lshr i16 %168, 8
  %176 = trunc i16 %175 to i8
  %177 = load i8*, i8** %3, align 8
  %178 = getelementptr inbounds i8, i8* %177, i64 1
  store i8 %176, i8* %178, align 1
  %179 = load i8*, i8** %3, align 8
  %180 = getelementptr inbounds i8, i8* %179, i64 2
  store i8* %180, i8** %3, align 8
  %181 = load i32*, i32** %4, align 8
  %182 = getelementptr inbounds i32, i32* %181, i64 1
  store i32* %182, i32** %4, align 8
  store i32 %165, i32* %181, align 4
  %183 = add i32 %165, 1
  %184 = load i32*, i32** %4, align 8
  %185 = getelementptr inbounds i32, i32* %184, i64 1
  store i32* %185, i32** %4, align 8
  store i32 %165, i32* %184, align 4
  br label %222

186:                                              ; preds = %163
  %187 = and i32 %169, 1024
  %188 = icmp eq i32 %187, 0
  %189 = icmp ugt i32 %164, 1
  %190 = and i1 %189, %188
  br i1 %190, label %191, label %228

191:                                              ; preds = %186
  %192 = load i16, i16* %167, align 2
  %193 = and i16 %192, -1024
  %194 = icmp eq i16 %193, -9216
  br i1 %194, label %195, label %245

195:                                              ; preds = %191
  %196 = getelementptr inbounds i16, i16* %166, i64 2
  %197 = add i32 %164, -1
  %198 = trunc i16 %168 to i8
  %199 = load i8*, i8** %3, align 8
  store i8 %198, i8* %199, align 1
  %200 = lshr i16 %168, 8
  %201 = trunc i16 %200 to i8
  %202 = load i8*, i8** %3, align 8
  %203 = getelementptr inbounds i8, i8* %202, i64 1
  store i8 %201, i8* %203, align 1
  %204 = trunc i16 %192 to i8
  %205 = load i8*, i8** %3, align 8
  %206 = getelementptr inbounds i8, i8* %205, i64 2
  store i8 %204, i8* %206, align 1
  %207 = lshr i16 %192, 8
  %208 = trunc i16 %207 to i8
  %209 = load i8*, i8** %3, align 8
  %210 = getelementptr inbounds i8, i8* %209, i64 3
  store i8 %208, i8* %210, align 1
  %211 = load i8*, i8** %3, align 8
  %212 = getelementptr inbounds i8, i8* %211, i64 4
  store i8* %212, i8** %3, align 8
  %213 = load i32*, i32** %4, align 8
  %214 = getelementptr inbounds i32, i32* %213, i64 1
  store i32* %214, i32** %4, align 8
  store i32 %165, i32* %213, align 4
  %215 = load i32*, i32** %4, align 8
  %216 = getelementptr inbounds i32, i32* %215, i64 1
  store i32* %216, i32** %4, align 8
  store i32 %165, i32* %215, align 4
  %217 = load i32*, i32** %4, align 8
  %218 = getelementptr inbounds i32, i32* %217, i64 1
  store i32* %218, i32** %4, align 8
  store i32 %165, i32* %217, align 4
  %219 = load i32*, i32** %4, align 8
  %220 = getelementptr inbounds i32, i32* %219, i64 1
  store i32* %220, i32** %4, align 8
  store i32 %165, i32* %219, align 4
  %221 = add i32 %165, 2
  br label %222

222:                                              ; preds = %195, %172
  %223 = phi i16* [ %196, %195 ], [ %167, %172 ]
  %224 = phi i32 [ %221, %195 ], [ %183, %172 ]
  %225 = phi i32 [ %197, %195 ], [ %164, %172 ]
  %226 = add i32 %225, -1
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %230, label %163

228:                                              ; preds = %186
  %229 = icmp eq i32 %164, 0
  br i1 %229, label %230, label %245

230:                                              ; preds = %222, %157, %111, %112, %228
  %231 = phi i32 [ %165, %228 ], [ %98, %112 ], [ %98, %111 ], [ %98, %157 ], [ %224, %222 ]
  %232 = phi i16* [ %167, %228 ], [ %101, %112 ], [ %101, %111 ], [ %159, %157 ], [ %223, %222 ]
  %233 = icmp ne i32 %108, 0
  %234 = icmp ne i32 %106, 0
  %235 = and i1 %234, %233
  br i1 %235, label %236, label %304

236:                                              ; preds = %230
  %237 = getelementptr inbounds i16, i16* %232, i64 1
  %238 = load i16, i16* %232, align 2
  %239 = and i16 %238, -2048
  %240 = icmp eq i16 %239, -10240
  br i1 %240, label %252, label %241

241:                                              ; preds = %236
  %242 = trunc i16 %238 to i8
  store i8 %242, i8* %9, align 4
  %243 = lshr i16 %238, 8
  %244 = trunc i16 %243 to i8
  store i8 %244, i8* %10, align 1
  br label %293

245:                                              ; preds = %191, %130, %135, %228
  %246 = phi i32 [ %164, %228 ], [ %114, %135 ], [ %114, %130 ], [ %164, %191 ]
  %247 = phi i16 [ %168, %228 ], [ %117, %135 ], [ %117, %130 ], [ %168, %191 ]
  %248 = phi i32 [ %165, %228 ], [ %98, %135 ], [ %98, %130 ], [ %165, %191 ]
  %249 = phi i16* [ %167, %228 ], [ %116, %135 ], [ %116, %130 ], [ %167, %191 ]
  %250 = shl i32 %246, 1
  %251 = add i32 %250, %106
  br label %252

252:                                              ; preds = %245, %236
  %253 = phi i16* [ %237, %236 ], [ %249, %245 ]
  %254 = phi i32 [ %106, %236 ], [ %251, %245 ]
  %255 = phi i32 [ %231, %236 ], [ %248, %245 ]
  %256 = phi i16 [ %238, %236 ], [ %247, %245 ]
  %257 = icmp eq i16 %256, 0
  br i1 %257, label %287, label %258

258:                                              ; preds = %94, %252
  %259 = phi i16 [ %256, %252 ], [ %53, %94 ]
  %260 = phi i32 [ %255, %252 ], [ 0, %94 ]
  %261 = phi i32 [ %254, %252 ], [ %46, %94 ]
  %262 = phi i16* [ %253, %252 ], [ %14, %94 ]
  %263 = and i16 %259, 1024
  %264 = icmp eq i16 %263, 0
  br i1 %264, label %265, label %281

265:                                              ; preds = %258
  %266 = load i16*, i16** %15, align 8
  %267 = icmp ult i16* %262, %266
  br i1 %267, label %268, label %282

268:                                              ; preds = %265
  %269 = load i16, i16* %262, align 2
  %270 = and i16 %269, -1024
  %271 = icmp eq i16 %270, -9216
  br i1 %271, label %272, label %280

272:                                              ; preds = %268
  %273 = getelementptr inbounds i16, i16* %262, i64 1
  %274 = trunc i16 %259 to i8
  store i8 %274, i8* %9, align 4
  %275 = lshr i16 %259, 8
  %276 = trunc i16 %275 to i8
  store i8 %276, i8* %10, align 1
  %277 = trunc i16 %269 to i8
  store i8 %277, i8* %11, align 2
  %278 = lshr i16 %269, 8
  %279 = trunc i16 %278 to i8
  store i8 %279, i8* %12, align 1
  br label %282

280:                                              ; preds = %268
  store i32 12, i32* %1, align 4
  br label %282

281:                                              ; preds = %258
  store i32 12, i32* %1, align 4
  br label %282

282:                                              ; preds = %280, %272, %265, %281
  %283 = phi i16* [ %273, %272 ], [ %262, %280 ], [ %262, %265 ], [ %262, %281 ]
  %284 = phi i32 [ 4, %272 ], [ 0, %280 ], [ 0, %265 ], [ 0, %281 ]
  %285 = phi i16 [ 0, %272 ], [ %259, %280 ], [ %259, %265 ], [ %259, %281 ]
  %286 = zext i16 %285 to i32
  store i32 %286, i32* %51, align 4
  br label %287

287:                                              ; preds = %252, %282
  %288 = phi i32 [ %260, %282 ], [ %255, %252 ]
  %289 = phi i32 [ %261, %282 ], [ %254, %252 ]
  %290 = phi i16* [ %283, %282 ], [ %253, %252 ]
  %291 = phi i32 [ %284, %282 ], [ %108, %252 ]
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %304, label %293

293:                                              ; preds = %241, %287
  %294 = phi i32 [ 2, %241 ], [ %291, %287 ]
  %295 = phi i16* [ %237, %241 ], [ %290, %287 ]
  %296 = phi i32 [ %231, %241 ], [ %288, %287 ]
  %297 = load i8*, i8** %37, align 8
  call void @ucnv_fromUWriteBytes_69(%struct.UConverter* %25, i8* nonnull %9, i32 %294, i8** nonnull %3, i8* %297, i32** nonnull %4, i32 %296, i32* %1) #7
  %298 = bitcast i8** %37 to i64*
  %299 = load i64, i64* %298, align 8
  %300 = bitcast i8** %3 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = sub i64 %299, %301
  %303 = trunc i64 %302 to i32
  br label %304

304:                                              ; preds = %230, %287, %293
  %305 = phi i16* [ %295, %293 ], [ %290, %287 ], [ %232, %230 ]
  %306 = phi i32 [ %303, %293 ], [ %289, %287 ], [ %106, %230 ]
  %307 = load i32, i32* %1, align 4
  %308 = icmp sgt i32 %307, 0
  br i1 %308, label %315, label %309

309:                                              ; preds = %304
  %310 = load i16*, i16** %15, align 8
  %311 = icmp ult i16* %305, %310
  %312 = icmp eq i32 %306, 0
  %313 = and i1 %312, %311
  br i1 %313, label %314, label %315

314:                                              ; preds = %309
  store i32 15, i32* %1, align 4
  br label %315

315:                                              ; preds = %304, %314, %309
  store i16* %305, i16** %13, align 8
  %316 = bitcast i8** %3 to i64*
  %317 = load i64, i64* %316, align 8
  store i64 %317, i64* %43, align 8
  %318 = load i64, i64* %50, align 8
  store i64 %318, i64* %48, align 8
  br label %319

319:                                              ; preds = %2, %315, %40
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @_ZL20_UTF16LEGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #0 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %4 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %5 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 8
  br i1 %7, label %177, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %13 = load i8*, i8** %12, align 8
  %14 = icmp ult i8* %10, %13
  br i1 %14, label %16, label %15

15:                                               ; preds = %8
  store i32 8, i32* %1, align 4
  br label %177

16:                                               ; preds = %8
  %17 = getelementptr inbounds i8, i8* %10, i64 2
  %18 = icmp ugt i8* %17, %13
  %19 = getelementptr inbounds i8, i8* %10, i64 1
  br i1 %18, label %20, label %25

20:                                               ; preds = %16
  %21 = load i8, i8* %10, align 1
  %22 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  store i8 %21, i8* %22, align 1
  %23 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %24 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %23, i64 0, i32 12
  store i8 1, i8* %24, align 8
  store i8* %19, i8** %9, align 8
  store i32 11, i32* %1, align 4
  br label %177

25:                                               ; preds = %16
  %26 = load i8, i8* %19, align 1
  %27 = zext i8 %26 to i32
  %28 = shl nuw nsw i32 %27, 8
  %29 = load i8, i8* %10, align 1
  %30 = zext i8 %29 to i32
  %31 = or i32 %28, %30
  %32 = and i32 %27, 248
  %33 = icmp eq i32 %32, 216
  br i1 %33, label %34, label %174

34:                                               ; preds = %25
  %35 = and i32 %27, 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %165

37:                                               ; preds = %34
  %38 = getelementptr inbounds i8, i8* %10, i64 4
  %39 = icmp ugt i8* %38, %13
  br i1 %39, label %46, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds i8, i8* %10, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = and i32 %43, 252
  %45 = icmp eq i32 %44, 220
  br i1 %45, label %156, label %165

46:                                               ; preds = %37
  %47 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %48 = ptrtoint i8* %13 to i64
  %49 = sub i64 %48, %11
  %50 = trunc i64 %49 to i8
  %51 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 %50, i8* %51, align 8
  %52 = ptrtoint i8* %13 to i64
  %53 = sub i64 %52, %11
  %54 = icmp ult i64 %53, 32
  br i1 %54, label %145, label %55

55:                                               ; preds = %46
  %56 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %57 = sub i64 0, %11
  %58 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %57
  %59 = ptrtoint i8* %58 to i64
  %60 = getelementptr i8, i8* %13, i64 %59
  %61 = icmp ult i8* %56, %13
  %62 = icmp ult i8* %10, %60
  %63 = and i1 %61, %62
  br i1 %63, label %145, label %64

64:                                               ; preds = %55
  %65 = and i64 %53, -32
  %66 = getelementptr i8, i8* %10, i64 %65
  %67 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %65
  %68 = add i64 %65, -32
  %69 = lshr exact i64 %68, 5
  %70 = add nuw nsw i64 %69, 1
  %71 = and i64 %70, 3
  %72 = icmp ult i64 %68, 96
  br i1 %72, label %124, label %73

73:                                               ; preds = %64
  %74 = sub nsw i64 %70, %71
  br label %75

75:                                               ; preds = %75, %73
  %76 = phi i64 [ 0, %73 ], [ %121, %75 ]
  %77 = phi i64 [ %74, %73 ], [ %122, %75 ]
  %78 = getelementptr i8, i8* %10, i64 %76
  %79 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %76
  %80 = bitcast i8* %78 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !15
  %82 = getelementptr i8, i8* %78, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !15
  %85 = bitcast i8* %79 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !18, !noalias !15
  %86 = getelementptr i8, i8* %79, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !18, !noalias !15
  %88 = or i64 %76, 32
  %89 = getelementptr i8, i8* %10, i64 %88
  %90 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %88
  %91 = bitcast i8* %89 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !15
  %93 = getelementptr i8, i8* %89, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !15
  %96 = bitcast i8* %90 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !18, !noalias !15
  %97 = getelementptr i8, i8* %90, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !18, !noalias !15
  %99 = or i64 %76, 64
  %100 = getelementptr i8, i8* %10, i64 %99
  %101 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %99
  %102 = bitcast i8* %100 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1, !alias.scope !15
  %104 = getelementptr i8, i8* %100, i64 16
  %105 = bitcast i8* %104 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1, !alias.scope !15
  %107 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %107, align 1, !alias.scope !18, !noalias !15
  %108 = getelementptr i8, i8* %101, i64 16
  %109 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %109, align 1, !alias.scope !18, !noalias !15
  %110 = or i64 %76, 96
  %111 = getelementptr i8, i8* %10, i64 %110
  %112 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %110
  %113 = bitcast i8* %111 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !15
  %115 = getelementptr i8, i8* %111, i64 16
  %116 = bitcast i8* %115 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1, !alias.scope !15
  %118 = bitcast i8* %112 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %118, align 1, !alias.scope !18, !noalias !15
  %119 = getelementptr i8, i8* %112, i64 16
  %120 = bitcast i8* %119 to <16 x i8>*
  store <16 x i8> %117, <16 x i8>* %120, align 1, !alias.scope !18, !noalias !15
  %121 = add i64 %76, 128
  %122 = add i64 %77, -4
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %75, !llvm.loop !20

124:                                              ; preds = %75, %64
  %125 = phi i64 [ 0, %64 ], [ %121, %75 ]
  %126 = icmp eq i64 %71, 0
  br i1 %126, label %143, label %127

127:                                              ; preds = %124, %127
  %128 = phi i64 [ %140, %127 ], [ %125, %124 ]
  %129 = phi i64 [ %141, %127 ], [ %71, %124 ]
  %130 = getelementptr i8, i8* %10, i64 %128
  %131 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %128
  %132 = bitcast i8* %130 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 1, !alias.scope !15
  %134 = getelementptr i8, i8* %130, i64 16
  %135 = bitcast i8* %134 to <16 x i8>*
  %136 = load <16 x i8>, <16 x i8>* %135, align 1, !alias.scope !15
  %137 = bitcast i8* %131 to <16 x i8>*
  store <16 x i8> %133, <16 x i8>* %137, align 1, !alias.scope !18, !noalias !15
  %138 = getelementptr i8, i8* %131, i64 16
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %136, <16 x i8>* %139, align 1, !alias.scope !18, !noalias !15
  %140 = add i64 %128, 32
  %141 = add i64 %129, -1
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %127, !llvm.loop !21

143:                                              ; preds = %127, %124
  %144 = icmp eq i64 %53, %65
  br i1 %144, label %155, label %145

145:                                              ; preds = %143, %55, %46
  %146 = phi i8* [ %10, %55 ], [ %10, %46 ], [ %66, %143 ]
  %147 = phi i8* [ %47, %55 ], [ %47, %46 ], [ %67, %143 ]
  br label %148

148:                                              ; preds = %145, %148
  %149 = phi i8* [ %151, %148 ], [ %146, %145 ]
  %150 = phi i8* [ %153, %148 ], [ %147, %145 ]
  %151 = getelementptr inbounds i8, i8* %149, i64 1
  %152 = load i8, i8* %149, align 1
  %153 = getelementptr inbounds i8, i8* %150, i64 1
  store i8 %152, i8* %150, align 1
  %154 = icmp eq i8* %151, %13
  br i1 %154, label %155, label %148, !llvm.loop !22

155:                                              ; preds = %148, %143
  store i32 11, i32* %1, align 4
  br label %174

156:                                              ; preds = %40
  %157 = shl nuw nsw i32 %43, 8
  %158 = load i8, i8* %17, align 1
  %159 = zext i8 %158 to i32
  %160 = or i32 %157, %159
  %161 = shl nuw nsw i32 %31, 10
  %162 = add nsw i32 %161, -56613888
  %163 = add nsw i32 %162, %160
  %164 = icmp slt i32 %163, 0
  br i1 %164, label %165, label %174

165:                                              ; preds = %34, %40, %156
  %166 = phi i8* [ %38, %156 ], [ %17, %40 ], [ %17, %34 ]
  %167 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %168 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 2, i8* %168, align 8
  %169 = getelementptr inbounds i8, i8* %166, i64 -2
  %170 = load i8, i8* %169, align 1
  store i8 %170, i8* %167, align 1
  %171 = getelementptr inbounds i8, i8* %166, i64 -1
  %172 = load i8, i8* %171, align 1
  %173 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 1
  store i8 %172, i8* %173, align 1
  store i32 12, i32* %1, align 4
  br label %174

174:                                              ; preds = %155, %156, %165, %25
  %175 = phi i8* [ %166, %165 ], [ %38, %156 ], [ %17, %25 ], [ %13, %155 ]
  %176 = phi i32 [ 65535, %165 ], [ %163, %156 ], [ %31, %25 ], [ 65535, %155 ]
  store i8* %175, i8** %9, align 8
  br label %177

177:                                              ; preds = %2, %174, %20, %15
  %178 = phi i32 [ 65535, %15 ], [ 65535, %20 ], [ %176, %174 ], [ -9, %2 ]
  ret i32 %178
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i8* @_ZL15_UTF16LEGetNamePK10UConverter(%struct.UConverter* nocapture readonly) #3 {
  %2 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 15
  %5 = icmp eq i32 %4, 0
  %6 = select i1 %5, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)
  ret i8* %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL10_UTF16OpenP10UConverterP18UConverterLoadArgsP10UErrorCode(%struct.UConverter* nocapture, %struct.UConverterLoadArgs* nocapture readonly, i32* nocapture) #0 {
  %4 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 15
  %7 = icmp ult i32 %6, 3
  br i1 %7, label %8, label %22

8:                                                ; preds = %3
  %9 = icmp eq i32 %6, 2
  br i1 %9, label %10, label %19

10:                                               ; preds = %8
  %11 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 2
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  store %struct.UConverterSharedData* @_UTF16v2Data_69, %struct.UConverterSharedData** %15, align 8
  %16 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 5
  %17 = bitcast i8** %16 to i32**
  %18 = load i32*, i32** %17, align 8
  store i32 65023, i32* %18, align 1
  br label %19

19:                                               ; preds = %10, %14, %8
  %20 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 15
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 16
  store i32 1, i32* %21, align 8
  br label %23

22:                                               ; preds = %3
  store i32 1, i32* %2, align 4
  br label %23

23:                                               ; preds = %22, %19
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZL11_UTF16ResetP10UConverter21UConverterResetChoice(%struct.UConverter* nocapture, i32) #6 {
  %3 = icmp slt i32 %1, 2
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 15
  store i32 0, i32* %5, align 4
  %6 = icmp eq i32 %1, 1
  br i1 %6, label %9, label %7

7:                                                ; preds = %2, %4
  %8 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 16
  store i32 1, i32* %8, align 8
  br label %9

9:                                                ; preds = %4, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @_ZL18_UTF16GetNextUCharP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #0 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %4 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %5 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 15
  %6 = load i32, i32* %5, align 4
  switch i32 %6, label %11 [
    i32 8, label %7
    i32 9, label %9
  ]

7:                                                ; preds = %2
  %8 = tail call i32 @_ZL20_UTF16BEGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* %0, i32* %1)
  br label %11

9:                                                ; preds = %2
  %10 = tail call i32 @_ZL20_UTF16LEGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* %0, i32* %1)
  br label %11

11:                                               ; preds = %2, %9, %7
  %12 = phi i32 [ %10, %9 ], [ %8, %7 ], [ -9, %2 ]
  ret i32 %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i8* @_ZL13_UTF16GetNamePK10UConverter(%struct.UConverter* nocapture readonly) #3 {
  %2 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 15
  %5 = icmp eq i32 %4, 1
  %6 = select i1 %5, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0)
  %7 = icmp eq i32 %4, 0
  %8 = select i1 %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0), i8* %6
  ret i8* %8
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !8}
!13 = distinct !{!13, !14, !8}
!14 = !{!"llvm.loop.unroll.runtime.disable"}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !8}
!21 = distinct !{!21, !10}
!22 = distinct !{!22, !8}
