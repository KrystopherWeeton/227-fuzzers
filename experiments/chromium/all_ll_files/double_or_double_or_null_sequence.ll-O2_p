; ModuleID = 'gen/third_party/blink/renderer/bindings/core/v8/double_or_double_or_null_sequence.cc'
source_filename = "gen/third_party/blink/renderer/bindings/core/v8/double_or_double_or_null_sequence.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.absl::optional"*, i32, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { double }
%"class.blink::DoubleOrDoubleOrNullSequence" = type { i32, double, %"class.WTF::Vector" }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.127", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.143", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.155", %"class.std::__1::unique_ptr.161", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.167", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.35", %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.49", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.63", %"class.std::__1::unique_ptr.63", %"class.std::__1::unique_ptr.70", %"class.std::__1::unique_ptr.77", %"class.std::__1::unique_ptr.84", %"class.std::__1::unique_ptr.107", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.31" }
%"struct.std::__1::__atomic_base.31" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.blink::Worklist.38"* }
%"class.blink::Worklist.38" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.blink::Worklist.45"* }
%"class.blink::Worklist.45" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.blink::Worklist.52"* }
%"class.blink::Worklist.52" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.blink::Worklist.59"* }
%"class.blink::Worklist.59" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.blink::Worklist.66"* }
%"class.blink::Worklist.66" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.blink::Worklist.73"* }
%"class.blink::Worklist.73" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.blink::Worklist.80"* }
%"class.blink::Worklist.80" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.87", %"class.std::__1::__compressed_pair.94", %"class.std::__1::__compressed_pair.99", %"class.std::__1::__compressed_pair.101", [4 x i8] }>
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89", %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { i64 }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { float }
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.110", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.119" }
%"class.WTF::Vector.119" = type { %"class.WTF::VectorBuffer.120" }
%"class.WTF::VectorBuffer.120" = type { %"class.WTF::VectorBufferBase.121" }
%"class.WTF::VectorBufferBase.121" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.135" }
%"class.WTF::VectorBuffer.135" = type { %"class.WTF::VectorBufferBase.136" }
%"class.WTF::VectorBufferBase.136" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.143" = type { %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.149" }
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.38"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.45"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.52"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.59"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.66"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.171" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.167" = type { %"struct.std::__1::__atomic_base.168" }
%"struct.std::__1::__atomic_base.168" = type { %"struct.std::__1::__cxx_atomic_impl.169" }
%"struct.std::__1::__cxx_atomic_impl.169" = type { %"struct.std::__1::__cxx_atomic_base_impl.170" }
%"struct.std::__1::__cxx_atomic_base_impl.170" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.v8::Value" = type { i8 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.WTF::String" = type { %class.scoped_refptr.176 }
%class.scoped_refptr.176 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.177" }
%"struct.std::__1::atomic.177" = type { %"struct.std::__1::__atomic_base.178" }
%"struct.std::__1::__atomic_base.178" = type { %"struct.std::__1::__atomic_base.179" }
%"struct.std::__1::__atomic_base.179" = type { %"struct.std::__1::__cxx_atomic_impl.180" }
%"struct.std::__1::__cxx_atomic_impl.180" = type { %"struct.std::__1::__cxx_atomic_base_impl.181" }
%"struct.std::__1::__cxx_atomic_base_impl.181" = type { i32 }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::ScriptIterator" = type { %"class.v8::Isolate"*, %"class.v8::Local.182", %"class.v8::Local", %"class.v8::Local.183", %"class.v8::Local.183", i8, %"class.v8::MaybeLocal" }
%"class.v8::Local.182" = type { %"class.v8::Object"* }
%"class.v8::Object" = type { i8 }
%"class.v8::Local" = type { %"class.v8::Value"* }
%"class.v8::Local.183" = type { %"class.v8::String"* }
%"class.v8::String" = type { i8 }
%"class.v8::MaybeLocal" = type { %"class.v8::Value"* }
%"class.v8::Number" = type { i8 }
%"class.v8::Array" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.187" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188" }
%"struct.std::__1::__compressed_pair_elem.188" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.189 }
%union.anon.189 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.v8::Context" = type { i8 }
%"class.blink::ExecutionContext" = type opaque
%"class.absl::optional.198" = type { %"class.absl::optional_internal::optional_data.199" }
%"class.absl::optional_internal::optional_data.199" = type { %"class.absl::optional_internal::optional_data_base.200" }
%"class.absl::optional_internal::optional_data_base.200" = type { %"class.absl::optional_internal::optional_data_dtor_base.201" }
%"class.absl::optional_internal::optional_data_dtor_base.201" = type { i8, %union.anon.202 }
%union.anon.202 = type { %"class.blink::RuntimeCallTimerScope" }
%"class.blink::RuntimeCallTimerScope" = type { %"class.blink::RuntimeCallStats"*, %"class.blink::RuntimeCallTimer" }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }

$_ZN3WTF6VectorIN4absl8optionalIdEELj0ENS_18PartitionAllocatorEEaSERKS5_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN4absl8optionalIdEEEEmm = comdat any

$_ZN5blink8bindings29CreateIDLSequenceFromIteratorINS_11IDLNullableINS_30IDLFloatingPointNumberTypeBaseIdLNS0_30IDLFloatingPointNumberConvModeE0EEEEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENS_14ScriptIteratorERNS_14ExceptionStateE = comdat any

$_ZN3WTF6VectorIN4absl8optionalIdEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_ = comdat any

$_ZN5blink20ToV8SequenceInternalIN3WTF6VectorIN4absl8optionalIdEELj0ENS1_18PartitionAllocatorEEEEEN2v85LocalINS8_5ArrayEEERKT_NS9_INS8_6ObjectEEEPNS8_7IsolateE = comdat any

@__const._ZN5blink17NativeValueTraitsINS_28DoubleOrDoubleOrNullSequenceEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE.impl = private unnamed_addr constant { i32, [4 x i8], double, %"class.WTF::Vector" } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", double 0xFFFFFFFFFFFFFFFF, %"class.WTF::Vector" { %"class.WTF::VectorBuffer" { %"class.WTF::VectorBufferBase" { %"class.absl::optional"* inttoptr (i64 -6148914691236517206 to %"class.absl::optional"*), i32 -1431655766, i32 -1431655766 } } } }, align 8
@.str = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.1 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN4absl8optionalIdEEEEPKcv = private unnamed_addr constant [70 x i8] c"const char *WTF::GetStringWithTypeName() [T = absl::optional<double>]\00", align 1
@_ZN5blink26RuntimeEnabledFeaturesBase36is_blink_runtime_call_stats_enabled_E = external local_unnamed_addr global i8, align 1

@_ZN5blink28DoubleOrDoubleOrNullSequenceC1Ev = hidden unnamed_addr alias void (%"class.blink::DoubleOrDoubleOrNullSequence"*), void (%"class.blink::DoubleOrDoubleOrNullSequence"*)* @_ZN5blink28DoubleOrDoubleOrNullSequenceC2Ev
@_ZN5blink28DoubleOrDoubleOrNullSequenceC1ERKS0_ = hidden unnamed_addr alias void (%"class.blink::DoubleOrDoubleOrNullSequence"*, %"class.blink::DoubleOrDoubleOrNullSequence"*), void (%"class.blink::DoubleOrDoubleOrNullSequence"*, %"class.blink::DoubleOrDoubleOrNullSequence"*)* @_ZN5blink28DoubleOrDoubleOrNullSequenceC2ERKS0_
@_ZN5blink28DoubleOrDoubleOrNullSequenceD1Ev = hidden unnamed_addr alias void (%"class.blink::DoubleOrDoubleOrNullSequence"*), void (%"class.blink::DoubleOrDoubleOrNullSequence"*)* @_ZN5blink28DoubleOrDoubleOrNullSequenceD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28DoubleOrDoubleOrNullSequenceC2Ev(%"class.blink::DoubleOrDoubleOrNullSequence"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 2
  %4 = bitcast %"class.WTF::Vector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false) #10
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK5blink28DoubleOrDoubleOrNullSequence11GetAsDoubleEv(%"class.blink::DoubleOrDoubleOrNullSequence"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 1
  %3 = load double, double* %2, align 8
  ret double %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink28DoubleOrDoubleOrNullSequence9SetDoubleEd(%"class.blink::DoubleOrDoubleOrNullSequence"* nocapture, double) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 1
  store double %1, double* %3, align 8
  %4 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 0
  store i32 1, i32* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28DoubleOrDoubleOrNullSequence10FromDoubleEd(%"class.blink::DoubleOrDoubleOrNullSequence"* noalias nocapture sret, double) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::DoubleOrDoubleOrNullSequence"* %0 to i64*
  store i64 -6148914691236517206, i64* %3, align 8
  %4 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 2
  %6 = bitcast %"class.WTF::Vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #10
  %7 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 1
  store double %1, double* %7, align 8
  store i32 1, i32* %4, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(16) %"class.WTF::Vector"* @_ZNK5blink28DoubleOrDoubleOrNullSequence25GetAsDoubleOrNullSequenceEv(%"class.blink::DoubleOrDoubleOrNullSequence"* readnone) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 2
  ret %"class.WTF::Vector"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28DoubleOrDoubleOrNullSequence23SetDoubleOrNullSequenceERKN3WTF6VectorIN4absl8optionalIdEELj0ENS1_18PartitionAllocatorEEE(%"class.blink::DoubleOrDoubleOrNullSequence"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 2
  %4 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIN4absl8optionalIdEELj0ENS_18PartitionAllocatorEEaSERKS5_(%"class.WTF::Vector"* %3, %"class.WTF::Vector"* dereferenceable(16) %1)
  %5 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 0
  store i32 2, i32* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIN4absl8optionalIdEELj0ENS_18PartitionAllocatorEEaSERKS5_(%"class.WTF::Vector"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector"* %1, %0
  br i1 %3, label %91, label %4, !prof !2

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %4
  store i32 %8, i32* %5, align 4
  br label %61

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp ugt i32 %8, %13
  br i1 %14, label %15, label %61

15:                                               ; preds = %11
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %27, label %17

17:                                               ; preds = %15
  %18 = icmp eq i32 %6, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  store i32 0, i32* %5, align 4
  br label %20

20:                                               ; preds = %19, %17
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.absl::optional"*, %"class.absl::optional"** %21, align 8
  %23 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %23 monotonic, align 8
  store i32 0, i32* %12, align 8
  %24 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %22, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %24) #10
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %12, align 8
  br label %27

27:                                               ; preds = %15, %20
  %28 = phi i32 [ 0, %15 ], [ %26, %20 ]
  %29 = phi i32 [ %8, %15 ], [ %25, %20 ]
  %30 = icmp ult i32 %28, %29
  br i1 %30, label %31, label %61, !prof !3

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %33 = load %"class.absl::optional"*, %"class.absl::optional"** %32, align 8
  %34 = icmp eq %"class.absl::optional"* %33, null
  %35 = zext i32 %29 to i64
  %36 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN4absl8optionalIdEEEEmm(i64 %35) #10
  %37 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %36, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN4absl8optionalIdEEEEPKcv, i64 0, i64 0)) #10
  br i1 %34, label %38, label %43

38:                                               ; preds = %31
  %39 = ptrtoint i8* %37 to i64
  %40 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %39, i64* %40 monotonic, align 8
  %41 = lshr i64 %36, 4
  %42 = trunc i64 %41 to i32
  store i32 %42, i32* %12, align 8
  br label %61

43:                                               ; preds = %31
  %44 = lshr i64 %36, 4
  %45 = ptrtoint i8* %37 to i64
  %46 = load %"class.absl::optional"*, %"class.absl::optional"** %32, align 8
  %47 = icmp ne i8* %37, null
  %48 = icmp ne %"class.absl::optional"* %46, null
  %49 = and i1 %47, %48
  br i1 %49, label %50, label %56, !prof !3

50:                                               ; preds = %43
  %51 = load i32, i32* %5, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %46, i64 0, i32 0, i32 0, i32 0, i32 0
  %54 = shl nuw nsw i64 %52, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %37, i8* align 8 %53, i64 %54, i1 false) #10
  %55 = load %"class.absl::optional"*, %"class.absl::optional"** %32, align 8
  br label %56

56:                                               ; preds = %50, %43
  %57 = phi %"class.absl::optional"* [ %46, %43 ], [ %55, %50 ]
  %58 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %57, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %58) #10
  %59 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %45, i64* %59 monotonic, align 8
  %60 = trunc i64 %44 to i32
  store i32 %60, i32* %12, align 8
  br label %61

61:                                               ; preds = %56, %38, %27, %11, %10
  %62 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %63 = load %"class.absl::optional"*, %"class.absl::optional"** %62, align 8
  %64 = load i32, i32* %5, align 4
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %67 = load %"class.absl::optional"*, %"class.absl::optional"** %66, align 8
  %68 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %67, i64 0, i32 0, i32 0, i32 0, i32 0
  %69 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %63, i64 0, i32 0, i32 0, i32 0, i32 0
  %70 = shl nuw nsw i64 %65, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 %70, i1 false) #10
  %71 = load %"class.absl::optional"*, %"class.absl::optional"** %62, align 8
  %72 = load i32, i32* %5, align 4
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %71, i64 %73
  %75 = load %"class.absl::optional"*, %"class.absl::optional"** %66, align 8
  %76 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %75, i64 %73
  %77 = icmp ne %"class.absl::optional"* %76, null
  %78 = icmp ne %"class.absl::optional"* %74, null
  %79 = and i1 %78, %77
  br i1 %79, label %80, label %89, !prof !3

80:                                               ; preds = %61
  %81 = load i32, i32* %7, align 4
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %71, i64 %82
  %84 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %76, i64 0, i32 0, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %74, i64 0, i32 0, i32 0, i32 0, i32 0
  %86 = ptrtoint %"class.absl::optional"* %83 to i64
  %87 = ptrtoint %"class.absl::optional"* %74 to i64
  %88 = sub i64 %86, %87
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 %88, i1 false) #10
  br label %89

89:                                               ; preds = %61, %80
  %90 = load i32, i32* %7, align 4
  store i32 %90, i32* %5, align 4
  br label %91

91:                                               ; preds = %2, %89
  ret %"class.WTF::Vector"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28DoubleOrDoubleOrNullSequence24FromDoubleOrNullSequenceERKN3WTF6VectorIN4absl8optionalIdEELj0ENS1_18PartitionAllocatorEEE(%"class.blink::DoubleOrDoubleOrNullSequence"* noalias sret, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::DoubleOrDoubleOrNullSequence"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 bitcast ({ i32, [4 x i8], double, %"class.WTF::Vector" }* @__const._ZN5blink17NativeValueTraitsINS_28DoubleOrDoubleOrNullSequenceEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE.impl to i8*), i64 16, i1 false)
  %4 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 0
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 2
  %6 = bitcast %"class.WTF::Vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #10
  %7 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIN4absl8optionalIdEELj0ENS_18PartitionAllocatorEEaSERKS5_(%"class.WTF::Vector"* %5, %"class.WTF::Vector"* dereferenceable(16) %1) #10
  store i32 2, i32* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28DoubleOrDoubleOrNullSequenceC2ERKS0_(%"class.blink::DoubleOrDoubleOrNullSequence"* nocapture, %"class.blink::DoubleOrDoubleOrNullSequence"* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::DoubleOrDoubleOrNullSequence"* %0 to i8*
  %4 = bitcast %"class.blink::DoubleOrDoubleOrNullSequence"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 16, i1 false)
  %5 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 0
  store %"class.absl::optional"* null, %"class.absl::optional"** %8, align 8
  %9 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  store i32 0, i32* %9, align 8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %20, label %11

11:                                               ; preds = %2
  %12 = zext i32 %7 to i64
  %13 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN4absl8optionalIdEEEEmm(i64 %12) #10
  %14 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %13, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN4absl8optionalIdEEEEPKcv, i64 0, i64 0)) #10
  %15 = ptrtoint i8* %14 to i64
  %16 = bitcast %"class.WTF::Vector"* %5 to i64*
  store atomic i64 %15, i64* %16 monotonic, align 8
  %17 = lshr i64 %13, 4
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %9, align 8
  %19 = bitcast i8* %14 to %"class.absl::optional"*
  br label %20

20:                                               ; preds = %11, %2
  %21 = phi %"class.absl::optional"* [ null, %2 ], [ %19, %11 ]
  %22 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %26 = load %"class.absl::optional"*, %"class.absl::optional"** %25, align 8
  %27 = icmp ne %"class.absl::optional"* %21, null
  %28 = icmp ne %"class.absl::optional"* %26, null
  %29 = and i1 %27, %28
  br i1 %29, label %30, label %36, !prof !3

30:                                               ; preds = %20
  %31 = load i32, i32* %22, align 4
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %21, i64 0, i32 0, i32 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %26, i64 0, i32 0, i32 0, i32 0, i32 0
  %35 = shl nuw nsw i64 %32, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 %35, i1 false) #10
  br label %36

36:                                               ; preds = %20, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28DoubleOrDoubleOrNullSequenceD2Ev(%"class.blink::DoubleOrDoubleOrNullSequence"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.absl::optional"*, %"class.absl::optional"** %2, align 8
  %4 = icmp eq %"class.absl::optional"* %3, null
  br i1 %4, label %12, label %5, !prof !3

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9, !prof !2

9:                                                ; preds = %5
  store i32 0, i32* %6, align 4
  br label %10

10:                                               ; preds = %9, %5
  %11 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %11) #10
  store %"class.absl::optional"* null, %"class.absl::optional"** %2, align 8
  br label %12

12:                                               ; preds = %1, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(32) %"class.blink::DoubleOrDoubleOrNullSequence"* @_ZN5blink28DoubleOrDoubleOrNullSequenceaSERKS0_(%"class.blink::DoubleOrDoubleOrNullSequence"* returned, %"class.blink::DoubleOrDoubleOrNullSequence"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::DoubleOrDoubleOrNullSequence"* %0 to i8*
  %4 = bitcast %"class.blink::DoubleOrDoubleOrNullSequence"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 16, i1 false)
  %5 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %1, i64 0, i32 2
  %7 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIN4absl8optionalIdEELj0ENS_18PartitionAllocatorEEaSERKS5_(%"class.WTF::Vector"* %5, %"class.WTF::Vector"* dereferenceable(16) %6)
  ret %"class.blink::DoubleOrDoubleOrNullSequence"* %0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK5blink28DoubleOrDoubleOrNullSequence5TraceEPNS_7VisitorE(%"class.blink::DoubleOrDoubleOrNullSequence"* nocapture, %"class.blink::Visitor"* nocapture) local_unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink30V8DoubleOrDoubleOrNullSequence6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEERNS_28DoubleOrDoubleOrNullSequenceENS_23UnionTypeConversionModeERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::DoubleOrDoubleOrNullSequence"* dereferenceable(32), i32, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.blink::ScriptIterator", align 8
  %7 = alloca %"class.WTF::Vector", align 8
  %8 = icmp eq %"class.v8::Value"* %1, null
  br i1 %8, label %81, label %9

9:                                                ; preds = %5
  %10 = icmp eq i32 %3, 0
  br i1 %10, label %11, label %32

11:                                               ; preds = %9
  %12 = bitcast %"class.v8::Value"* %1 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = and i64 %13, 3
  %15 = icmp eq i64 %14, 1
  br i1 %15, label %16, label %32

16:                                               ; preds = %11
  %17 = add i64 %13, -1
  %18 = inttoptr i64 %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = and i64 %13, -4294967296
  %21 = zext i32 %19 to i64
  %22 = or i64 %20, %21
  %23 = add i64 %22, 7
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24, align 2
  %26 = icmp eq i16 %25, 67
  br i1 %26, label %27, label %32

27:                                               ; preds = %16
  %28 = add i64 %13, 23
  %29 = inttoptr i64 %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = ashr i32 %30, 1
  switch i32 %31, label %32 [
    i32 5, label %81
    i32 3, label %81
  ]

32:                                               ; preds = %27, %16, %11, %9
  %33 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* nonnull %1) #10
  br i1 %33, label %34, label %66

34:                                               ; preds = %32
  %35 = bitcast %"class.blink::ScriptIterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %35) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 56, i1 false)
  %36 = bitcast %"class.v8::Value"* %1 to %"class.v8::Object"*
  call void @_ZN5blink14ScriptIterator12FromIterableEPN2v87IsolateENS1_5LocalINS1_6ObjectEEERNS_14ExceptionStateE(%"class.blink::ScriptIterator"* nonnull sret %6, %"class.v8::Isolate"* %0, %"class.v8::Object"* nonnull %36, %"class.blink::ExceptionState"* dereferenceable(72) %4) #10
  %37 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %4, i64 0, i32 4
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %80

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"class.blink::ScriptIterator", %"class.blink::ScriptIterator"* %6, i64 0, i32 1, i32 0
  %42 = load %"class.v8::Object"*, %"class.v8::Object"** %41, align 8
  %43 = icmp eq %"class.v8::Object"* %42, null
  br i1 %43, label %65, label %44

44:                                               ; preds = %40
  %45 = bitcast %"class.WTF::Vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #10
  %46 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %7, i64 0, i32 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %7, i64 0, i32 0, i32 0, i32 2
  %48 = bitcast %"class.WTF::Vector"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 -86, i64 16, i1 false)
  call void @_ZN5blink8bindings29CreateIDLSequenceFromIteratorINS_11IDLNullableINS_30IDLFloatingPointNumberTypeBaseIdLNS0_30IDLFloatingPointNumberConvModeE0EEEEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENS_14ScriptIteratorERNS_14ExceptionStateE(%"class.WTF::Vector"* nonnull sret %7, %"class.v8::Isolate"* %0, %"class.blink::ScriptIterator"* nonnull byval(%"class.blink::ScriptIterator") align 8 %6, %"class.blink::ExceptionState"* dereferenceable(72) %4) #10
  %49 = load i32, i32* %37, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %44
  %52 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %2, i64 0, i32 2
  %53 = call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIN4absl8optionalIdEELj0ENS_18PartitionAllocatorEEaSERKS5_(%"class.WTF::Vector"* %52, %"class.WTF::Vector"* nonnull dereferenceable(16) %7) #10
  %54 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %2, i64 0, i32 0
  store i32 2, i32* %54, align 8
  br label %55

55:                                               ; preds = %44, %51
  %56 = load %"class.absl::optional"*, %"class.absl::optional"** %46, align 8
  %57 = icmp eq %"class.absl::optional"* %56, null
  br i1 %57, label %64, label %58, !prof !3

58:                                               ; preds = %55
  %59 = load i32, i32* %47, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %62, label %61, !prof !2

61:                                               ; preds = %58
  store i32 0, i32* %47, align 4
  br label %62

62:                                               ; preds = %61, %58
  %63 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %56, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %63) #10
  store %"class.absl::optional"* null, %"class.absl::optional"** %46, align 8
  br label %64

64:                                               ; preds = %55, %62
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %35) #10
  br label %81

65:                                               ; preds = %40
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %35) #10
  br label %66

66:                                               ; preds = %65, %32
  %67 = call zeroext i1 @_ZNK2v85Value8IsNumberEv(%"class.v8::Value"* nonnull %1) #10
  %68 = call double @_ZN5blink18ToRestrictedDoubleEPN2v87IsolateENS0_5LocalINS0_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %1, %"class.blink::ExceptionState"* dereferenceable(72) %4) #10
  %69 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %4, i64 0, i32 4
  %70 = load i32, i32* %69, align 8
  %71 = icmp ne i32 %70, 0
  br i1 %67, label %72, label %76

72:                                               ; preds = %66
  br i1 %71, label %81, label %73

73:                                               ; preds = %72
  %74 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %2, i64 0, i32 1
  store double %68, double* %74, align 8
  %75 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %2, i64 0, i32 0
  store i32 1, i32* %75, align 8
  br label %81

76:                                               ; preds = %66
  br i1 %71, label %81, label %77

77:                                               ; preds = %76
  %78 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %2, i64 0, i32 1
  store double %68, double* %78, align 8
  %79 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %2, i64 0, i32 0
  store i32 1, i32* %79, align 8
  br label %81

80:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %35) #10
  br label %81

81:                                               ; preds = %27, %27, %77, %76, %73, %72, %80, %64, %5
  ret void
}

declare zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN5blink14ScriptIterator12FromIterableEPN2v87IsolateENS1_5LocalINS1_6ObjectEEERNS_14ExceptionStateE(%"class.blink::ScriptIterator"* sret, %"class.v8::Isolate"*, %"class.v8::Object"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare zeroext i1 @_ZNK2v85Value8IsNumberEv(%"class.v8::Value"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::Value"* @_ZN5blink4ToV8ERKNS_28DoubleOrDoubleOrNullSequenceEN2v85LocalINS3_6ObjectEEEPNS3_7IsolateE(%"class.blink::DoubleOrDoubleOrNullSequence"* dereferenceable(32), %"class.v8::Object"*, %"class.v8::Isolate"*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %19 [
    i32 0, label %6
    i32 1, label %10
    i32 2, label %15
  ]

6:                                                ; preds = %3
  %7 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %8 = add i64 %7, 176
  %9 = inttoptr i64 %8 to %"class.v8::Value"*
  br label %19

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = tail call %"class.v8::Number"* @_ZN2v86Number3NewEPNS_7IsolateEd(%"class.v8::Isolate"* %2, double %12) #10
  %14 = bitcast %"class.v8::Number"* %13 to %"class.v8::Value"*
  br label %19

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 2
  %17 = tail call %"class.v8::Array"* @_ZN5blink20ToV8SequenceInternalIN3WTF6VectorIN4absl8optionalIdEELj0ENS1_18PartitionAllocatorEEEEEN2v85LocalINS8_5ArrayEEERKT_NS9_INS8_6ObjectEEEPNS8_7IsolateE(%"class.WTF::Vector"* dereferenceable(16) %16, %"class.v8::Object"* %1, %"class.v8::Isolate"* %2) #10
  %18 = bitcast %"class.v8::Array"* %17 to %"class.v8::Value"*
  br label %19

19:                                               ; preds = %3, %15, %10, %6
  %20 = phi %"class.v8::Value"* [ %18, %15 ], [ %14, %10 ], [ %9, %6 ], [ null, %3 ]
  ret %"class.v8::Value"* %20
}

declare %"class.v8::Number"* @_ZN2v86Number3NewEPNS_7IsolateEd(%"class.v8::Isolate"*, double) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17NativeValueTraitsINS_28DoubleOrDoubleOrNullSequenceEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.blink::DoubleOrDoubleOrNullSequence"* noalias sret, %"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = bitcast %"class.blink::DoubleOrDoubleOrNullSequence"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 bitcast ({ i32, [4 x i8], double, %"class.WTF::Vector" }* @__const._ZN5blink17NativeValueTraitsINS_28DoubleOrDoubleOrNullSequenceEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE.impl to i8*), i64 16, i1 false)
  %6 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 0
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %"class.blink::DoubleOrDoubleOrNullSequence", %"class.blink::DoubleOrDoubleOrNullSequence"* %0, i64 0, i32 2
  %8 = bitcast %"class.WTF::Vector"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false) #10
  tail call void @_ZN5blink30V8DoubleOrDoubleOrNullSequence6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEERNS_28DoubleOrDoubleOrNullSequenceENS_23UnionTypeConversionModeERNS_14ExceptionStateE(%"class.v8::Isolate"* %1, %"class.v8::Value"* %2, %"class.blink::DoubleOrDoubleOrNullSequence"* dereferenceable(32) %0, i32 1, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #5

declare double @_ZN5blink18ToRestrictedDoubleEPN2v87IsolateENS0_5LocalINS0_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN4absl8optionalIdEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 134086656
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 134086656) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 4
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #5

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #5

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8bindings29CreateIDLSequenceFromIteratorINS_11IDLNullableINS_30IDLFloatingPointNumberTypeBaseIdLNS0_30IDLFloatingPointNumberConvModeE0EEEEEEENS_17NativeValueTraitsINS_11IDLSequenceIT_EEvE8ImplTypeEPN2v87IsolateENS_14ScriptIteratorERNS_14ExceptionStateE(%"class.WTF::Vector"* noalias sret, %"class.v8::Isolate"*, %"class.blink::ScriptIterator"* byval(%"class.blink::ScriptIterator") align 8, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.WTF::Vector", align 8
  %6 = alloca %"class.absl::optional", align 8
  %7 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %1) #10
  %8 = tail call %"class.blink::ExecutionContext"* @_ZN5blink18ToExecutionContextEN2v85LocalINS0_7ContextEEE(%"class.v8::Context"* %7) #10
  %9 = bitcast %"class.WTF::Vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 16, i1 false) #10
  %13 = call zeroext i1 @_ZN5blink14ScriptIterator4NextEPNS_16ExecutionContextERNS_14ExceptionStateEN2v85LocalINS5_5ValueEEE(%"class.blink::ScriptIterator"* nonnull %2, %"class.blink::ExecutionContext"* %8, %"class.blink::ExceptionState"* dereferenceable(72) %3, %"class.v8::Value"* null) #10
  br i1 %13, label %14, label %66

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.blink::ScriptIterator", %"class.blink::ScriptIterator"* %2, i64 0, i32 6, i32 0
  %16 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %18 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  br label %19

19:                                               ; preds = %14, %64
  %20 = load %"class.v8::Value"*, %"class.v8::Value"** %15, align 8
  %21 = icmp eq %"class.v8::Value"* %20, null
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %19
  call void @_ZN2v82V812ToLocalEmptyEv() #10
  br label %23

23:                                               ; preds = %19, %22
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #10
  %24 = bitcast %"class.v8::Value"* %20 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = and i64 %25, 3
  %27 = icmp eq i64 %26, 1
  br i1 %27, label %28, label %44

28:                                               ; preds = %23
  %29 = add i64 %25, -1
  %30 = inttoptr i64 %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = and i64 %25, -4294967296
  %33 = zext i32 %31 to i64
  %34 = or i64 %32, %33
  %35 = add i64 %34, 7
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36, align 2
  %38 = icmp eq i16 %37, 67
  br i1 %38, label %39, label %44

39:                                               ; preds = %28
  %40 = add i64 %25, 23
  %41 = inttoptr i64 %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = ashr i32 %42, 1
  switch i32 %43, label %44 [
    i32 5, label %46
    i32 3, label %46
  ]

44:                                               ; preds = %39, %28, %23
  %45 = call double @_ZN5blink18ToRestrictedDoubleEPN2v87IsolateENS0_5LocalINS0_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %1, %"class.v8::Value"* %20, %"class.blink::ExceptionState"* dereferenceable(72) %3) #10
  br label %46

46:                                               ; preds = %39, %39, %44
  %47 = phi i8 [ 1, %44 ], [ 0, %39 ], [ 0, %39 ]
  %48 = phi double [ %45, %44 ], [ undef, %39 ], [ undef, %39 ]
  store i8 %47, i8* %16, align 8
  store double %48, double* %17, align 8
  %49 = load i32, i32* %18, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %46
  %52 = bitcast %"class.WTF::Vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 16, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #10
  br label %81

53:                                               ; preds = %46
  %54 = load i32, i32* %12, align 4
  %55 = load i32, i32* %11, align 8
  %56 = icmp eq i32 %54, %55
  br i1 %56, label %63, label %57, !prof !2

57:                                               ; preds = %53
  %58 = load %"class.absl::optional"*, %"class.absl::optional"** %10, align 8
  %59 = zext i32 %54 to i64
  %60 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %58, i64 %59, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* nonnull align 8 %16, i64 16, i1 false) #10
  %61 = load i32, i32* %12, align 4
  %62 = add i32 %61, 1
  store i32 %62, i32* %12, align 4
  br label %64

63:                                               ; preds = %53
  call void @_ZN3WTF6VectorIN4absl8optionalIdEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector"* nonnull %5, %"class.absl::optional"* nonnull dereferenceable(16) %6) #10
  br label %64

64:                                               ; preds = %57, %63
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #10
  %65 = call zeroext i1 @_ZN5blink14ScriptIterator4NextEPNS_16ExecutionContextERNS_14ExceptionStateEN2v85LocalINS5_5ValueEEE(%"class.blink::ScriptIterator"* nonnull %2, %"class.blink::ExecutionContext"* %8, %"class.blink::ExceptionState"* dereferenceable(72) %3, %"class.v8::Value"* null) #10
  br i1 %65, label %19, label %66

66:                                               ; preds = %64, %4
  %67 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %68 = load i32, i32* %67, align 8
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %72, label %70

70:                                               ; preds = %66
  %71 = bitcast %"class.WTF::Vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 0, i64 16, i1 false) #10
  br label %81

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %74 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %75 = bitcast %"class.WTF::Vector"* %5 to i64*
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store i64 0, i64* %76, align 8
  %77 = load i64, i64* %75, align 8
  %78 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %75 monotonic, align 8
  store atomic i64 %77, i64* %78 monotonic, align 8
  %79 = load i32, i32* %11, align 8
  store i32 %79, i32* %73, align 8
  store i32 0, i32* %11, align 8
  %80 = load i32, i32* %12, align 4
  store i32 %80, i32* %74, align 4
  store i32 0, i32* %12, align 4
  br label %81

81:                                               ; preds = %51, %72, %70
  %82 = load %"class.absl::optional"*, %"class.absl::optional"** %10, align 8
  %83 = icmp eq %"class.absl::optional"* %82, null
  br i1 %83, label %90, label %84, !prof !3

84:                                               ; preds = %81
  %85 = load i32, i32* %12, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %88, label %87, !prof !2

87:                                               ; preds = %84
  store i32 0, i32* %12, align 4
  br label %88

88:                                               ; preds = %87, %84
  %89 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %82, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %89) #10
  store %"class.absl::optional"* null, %"class.absl::optional"** %10, align 8
  br label %90

90:                                               ; preds = %81, %88
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #10
  ret void
}

declare %"class.blink::ExecutionContext"* @_ZN5blink18ToExecutionContextEN2v85LocalINS0_7ContextEEE(%"class.v8::Context"*) local_unnamed_addr #5

declare %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"*) local_unnamed_addr #5

declare zeroext i1 @_ZN5blink14ScriptIterator4NextEPNS_16ExecutionContextERNS_14ExceptionStateEN2v85LocalINS5_5ValueEEE(%"class.blink::ScriptIterator"*, %"class.blink::ExecutionContext"*, %"class.blink::ExceptionState"* dereferenceable(72), %"class.v8::Value"*) local_unnamed_addr #5

declare void @_ZN2v82V812ToLocalEmptyEv() local_unnamed_addr #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN4absl8optionalIdEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector"*, %"class.absl::optional"* dereferenceable(16)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.absl::optional"*, %"class.absl::optional"** %6, align 8
  %8 = icmp ugt %"class.absl::optional"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 %10
  %12 = icmp ugt %"class.absl::optional"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq %"class.absl::optional"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN4absl8optionalIdEEEEmm(i64 %26) #10
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN4absl8optionalIdEEEEPKcv, i64 0, i64 0)) #10
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 4
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.absl::optional"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 4
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.absl::optional"*, %"class.absl::optional"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.absl::optional"* %38, null
  %41 = and i1 %39, %40
  br i1 %41, label %42, label %48, !prof !3

42:                                               ; preds = %35
  %43 = load i32, i32* %3, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %38, i64 0, i32 0, i32 0, i32 0, i32 0
  %46 = shl nuw nsw i64 %44, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* align 8 %45, i64 %46, i1 false) #10
  %47 = load %"class.absl::optional"*, %"class.absl::optional"** %6, align 8
  br label %48

48:                                               ; preds = %42, %35
  %49 = phi %"class.absl::optional"* [ %38, %35 ], [ %47, %42 ]
  %50 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %49, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #10
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.absl::optional"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.absl::optional"* %1 to i64
  %56 = ptrtoint %"class.absl::optional"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 4
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !3

69:                                               ; preds = %54
  %70 = icmp eq %"class.absl::optional"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN4absl8optionalIdEEEEmm(i64 %71) #10
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN4absl8optionalIdEEEEPKcv, i64 0, i64 0)) #10
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.absl::optional"*, %"class.absl::optional"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.absl::optional"* %78, null
  %81 = and i1 %79, %80
  br i1 %81, label %82, label %88, !prof !3

82:                                               ; preds = %77
  %83 = load i32, i32* %3, align 4
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %78, i64 0, i32 0, i32 0, i32 0, i32 0
  %86 = shl nuw nsw i64 %84, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* align 8 %85, i64 %86, i1 false) #10
  %87 = load %"class.absl::optional"*, %"class.absl::optional"** %6, align 8
  br label %88

88:                                               ; preds = %82, %77
  %89 = phi %"class.absl::optional"* [ %78, %77 ], [ %87, %82 ]
  %90 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %89, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #10
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %88, %75
  %93 = lshr i64 %72, 4
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.absl::optional"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.absl::optional"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %97, i64 %58
  br label %99

99:                                               ; preds = %48, %29, %13, %96
  %100 = phi %"class.absl::optional"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %48 ]
  %101 = phi %"class.absl::optional"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %48 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %100, i64 %103, i32 0, i32 0, i32 0, i32 0
  %105 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %101, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 16, i1 false) #10
  %106 = load i32, i32* %3, align 4
  %107 = add i32 %106, 1
  store i32 %107, i32* %3, align 4
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::Array"* @_ZN5blink20ToV8SequenceInternalIN3WTF6VectorIN4absl8optionalIdEELj0ENS1_18PartitionAllocatorEEEEEN2v85LocalINS8_5ArrayEEERKT_NS9_INS8_6ObjectEEEPNS8_7IsolateE(%"class.WTF::Vector"* dereferenceable(16), %"class.v8::Object"*, %"class.v8::Isolate"*) local_unnamed_addr #8 comdat {
  %4 = alloca %"class.absl::optional.198", align 8
  %5 = getelementptr inbounds %"class.absl::optional.198", %"class.absl::optional.198"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #10
  %6 = bitcast %"class.absl::optional.198"* %4 to i64*
  store i64 -6148914691236517206, i64* %6, align 8
  store i8 0, i8* %5, align 8
  %7 = getelementptr inbounds %"class.absl::optional.198", %"class.absl::optional.198"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %union.anon.202* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 48, i1 false) #10
  %9 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase36is_blink_runtime_call_stats_enabled_E, align 1, !range !4
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %25, label %11, !prof !3

11:                                               ; preds = %3
  %12 = tail call %"class.blink::RuntimeCallStats"* @_ZN5blink16RuntimeCallStats4FromEPN2v87IsolateE(%"class.v8::Isolate"* %2) #10
  %13 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %12, i64 0, i32 3
  %14 = bitcast %"class.base::TickClock"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.absl::optional.198", %"class.absl::optional.198"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.blink::RuntimeCallStats"* %12, %"class.blink::RuntimeCallStats"** %16, align 8
  %17 = getelementptr inbounds %"class.absl::optional.198", %"class.absl::optional.198"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %18 = getelementptr inbounds %"class.absl::optional.198", %"class.absl::optional.198"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %19 = getelementptr inbounds %"class.absl::optional.198", %"class.absl::optional.198"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 4
  %20 = bitcast i64* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false) #10
  %21 = bitcast %"class.base::TickClock"** %19 to i64*
  store i64 %15, i64* %21, align 8
  %22 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %12, i64 0, i32 2, i64 5
  %23 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %12, i64 0, i32 0
  %24 = load %"class.blink::RuntimeCallTimer"*, %"class.blink::RuntimeCallTimer"** %23, align 8
  call void @_ZN5blink16RuntimeCallTimer5StartEPNS_18RuntimeCallCounterEPS0_(%"class.blink::RuntimeCallTimer"* %17, %"class.blink::RuntimeCallCounter"* %22, %"class.blink::RuntimeCallTimer"* %24) #10
  store %"class.blink::RuntimeCallTimer"* %17, %"class.blink::RuntimeCallTimer"** %23, align 8
  store i8 1, i8* %5, align 8
  br label %25

25:                                               ; preds = %3, %11
  %26 = call %"class.v8::Context"* @_ZN2v86Object15CreationContextEv(%"class.v8::Object"* %1) #10
  call void @_ZN2v87Context5EnterEv(%"class.v8::Context"* %26) #10
  %27 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %28, -1
  br i1 %29, label %31, label %30, !prof !3

30:                                               ; preds = %25
  call void @llvm.trap() #10
  unreachable

31:                                               ; preds = %25
  %32 = call %"class.v8::Array"* @_ZN2v85Array3NewEPNS_7IsolateEi(%"class.v8::Isolate"* %2, i32 %28) #10
  %33 = ptrtoint %"class.v8::Array"* %32 to i64
  call void @_ZN2v87Context4ExitEv(%"class.v8::Context"* %26) #10
  %34 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %2) #10
  %35 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.absl::optional"*, %"class.absl::optional"** %35, align 8
  %37 = load i32, i32* %27, align 4
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %36, i64 %38
  %40 = icmp eq i32 %37, 0
  br i1 %40, label %73, label %41

41:                                               ; preds = %31
  %42 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %43 = add i64 %42, 176
  %44 = inttoptr i64 %43 to %"class.v8::Value"*
  %45 = add i64 %42, 160
  %46 = bitcast %"class.v8::Array"* %32 to %"class.v8::Object"*
  br label %47

47:                                               ; preds = %41, %69
  %48 = phi i32 [ 0, %41 ], [ %70, %69 ]
  %49 = phi %"class.absl::optional"* [ %36, %41 ], [ %71, %69 ]
  %50 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %49, i64 0, i32 0, i32 0, i32 0, i32 0
  %51 = load i8, i8* %50, align 8, !range !4
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %58, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %49, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %55 = load double, double* %54, align 8
  %56 = call %"class.v8::Number"* @_ZN2v86Number3NewEPNS_7IsolateEd(%"class.v8::Isolate"* %2, double %55) #10
  %57 = bitcast %"class.v8::Number"* %56 to %"class.v8::Value"*
  br label %58

58:                                               ; preds = %47, %53
  %59 = phi %"class.v8::Value"* [ %57, %53 ], [ %44, %47 ]
  %60 = ptrtoint %"class.v8::Value"* %59 to i64
  %61 = icmp eq %"class.v8::Value"* %59, null
  %62 = select i1 %61, i64 %45, i64 %60
  %63 = inttoptr i64 %62 to %"class.v8::Value"*
  %64 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEEjNS1_INS_5ValueEEE(%"class.v8::Object"* %46, %"class.v8::Context"* %34, i32 %48, %"class.v8::Value"* %63) #10
  %65 = trunc i16 %64 to i8
  %66 = icmp eq i8 %65, 0
  %67 = icmp ult i16 %64, 256
  %68 = or i1 %67, %66
  br i1 %68, label %73, label %69, !prof !5

69:                                               ; preds = %58
  %70 = add i32 %48, 1
  %71 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %49, i64 1
  %72 = icmp eq %"class.absl::optional"* %71, %39
  br i1 %72, label %73, label %47

73:                                               ; preds = %69, %58, %31
  %74 = phi i64 [ %33, %31 ], [ 0, %58 ], [ %33, %69 ]
  %75 = load i8, i8* %5, align 8, !range !4
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %83, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds %"class.absl::optional.198", %"class.absl::optional.198"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %79 = load %"class.blink::RuntimeCallStats"*, %"class.blink::RuntimeCallStats"** %78, align 8
  %80 = getelementptr inbounds %"class.absl::optional.198", %"class.absl::optional.198"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %81 = call %"class.blink::RuntimeCallTimer"* @_ZN5blink16RuntimeCallTimer4StopEv(%"class.blink::RuntimeCallTimer"* %80) #10
  %82 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %79, i64 0, i32 0
  store %"class.blink::RuntimeCallTimer"* %81, %"class.blink::RuntimeCallTimer"** %82, align 8
  store i8 0, i8* %5, align 8
  br label %83

83:                                               ; preds = %73, %77
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #10
  %84 = inttoptr i64 %74 to %"class.v8::Array"*
  ret %"class.v8::Array"* %84
}

declare %"class.blink::RuntimeCallStats"* @_ZN5blink16RuntimeCallStats4FromEPN2v87IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #5

declare %"class.v8::Context"* @_ZN2v86Object15CreationContextEv(%"class.v8::Object"*) local_unnamed_addr #5

declare %"class.v8::Array"* @_ZN2v85Array3NewEPNS_7IsolateEi(%"class.v8::Isolate"*, i32) local_unnamed_addr #5

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEEjNS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, i32, %"class.v8::Value"*) local_unnamed_addr #5

declare %"class.blink::RuntimeCallTimer"* @_ZN5blink16RuntimeCallTimer4StopEv(%"class.blink::RuntimeCallTimer"*) local_unnamed_addr #5

declare void @_ZN5blink16RuntimeCallTimer5StartEPNS_18RuntimeCallCounterEPS0_(%"class.blink::RuntimeCallTimer"*, %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*) local_unnamed_addr #5

declare void @_ZN2v87Context5EnterEv(%"class.v8::Context"*) local_unnamed_addr #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

declare void @_ZN2v87Context4ExitEv(%"class.v8::Context"*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
!5 = !{!"branch_weights", i32 2002, i32 2000}
