; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/ethread.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/ethread.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.14 }
%union.anon.14 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, %union.anon.10, %union.anon.12, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i32, i32 }
%union.anon.10 = type { %struct.anon.11 }
%struct.anon.11 = type { i32, i32 }
%union.anon.12 = type { %struct.anon.13 }
%struct.anon.13 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.AV1_COMP*, %struct.ThreadData*, i32, i32 }
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVxWorkerInterface = type { void (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)*, void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)* }
%union.pthread_mutexattr_t = type { i32 }
%union.pthread_condattr_t = type { i32 }
%struct.aom_write_bit_buffer = type opaque
%struct.FrameHeaderInfo = type { i8*, i64, i64 }
%struct.PackBSParams = type { %struct.aom_write_bit_buffer*, %struct.TileBufferEnc, i32*, i8*, i8*, i64, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.TileBufferEnc = type { i8*, i64 }
%struct.CdefSearchCtx = type { %struct.yv12_buffer_config*, %struct.CommonModeInfoParams*, [3 x %struct.macroblockd_plane], void (i16*, i32, i8*, i32, i32, i32, i32, i32)*, i64 (i8*, i32, i16*, %struct.cdef_list*, i32, i8, i32, i32, i32)*, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [3 x i32], [3 x i32], [3 x i32], i32, i32, [2 x [64 x i64]*], i32*, i32 }

@.str = private unnamed_addr constant [38 x i8] c"Failed to allocate enc_row_mt->mutex_\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"Failed to allocate gm_sync->mutex_\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"Failed to allocate cdef_sync->mutex_\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Tile encoder thread creation failed\00", align 1
@.str.4 = private unnamed_addr constant [36 x i8] c"Failed to allocate mt_info->workers\00", align 1
@.str.5 = private unnamed_addr constant [42 x i8] c"Failed to allocate mt_info->tile_thr_data\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"aom enc worker\00", align 1
@.str.7 = private unnamed_addr constant [35 x i8] c"Failed to allocate thread_data->td\00", align 1
@.str.8 = private unnamed_addr constant [49 x i8] c"Failed to allocate thread_data->td->tmp_conv_dst\00", align 1
@.str.9 = private unnamed_addr constant [53 x i8] c"Failed to allocate thread_data->td->inter_modes_info\00", align 1
@.str.10 = private unnamed_addr constant [60 x i8] c"Failed to allocate thread_data->td->hash_value_buffer[x][y]\00", align 1
@.str.11 = private unnamed_addr constant [43 x i8] c"Failed to allocate thread_data->td->counts\00", align 1
@.str.12 = private unnamed_addr constant [51 x i8] c"Failed to allocate thread_data->td->palette_buffer\00", align 1
@.str.13 = private unnamed_addr constant [53 x i8] c"Failed to allocate thread_data->td->tmp_pred_bufs[j]\00", align 1
@.str.14 = private unnamed_addr constant [56 x i8] c"Failed to allocate thread_data->td->pixel_gradient_info\00", align 1
@.str.15 = private unnamed_addr constant [44 x i8] c"Failed to allocate thread_data->td->vt64x64\00", align 1
@.str.16 = private unnamed_addr constant [41 x i8] c"Failed to allocate thread_data->td->tctx\00", align 1
@.str.17 = private unnamed_addr constant [37 x i8] c"Failed to allocate obmc_buffer->wsrc\00", align 1
@.str.18 = private unnamed_addr constant [37 x i8] c"Failed to allocate obmc_buffer->mask\00", align 1
@.str.19 = private unnamed_addr constant [43 x i8] c"Failed to allocate obmc_buffer->above_pred\00", align 1
@.str.20 = private unnamed_addr constant [42 x i8] c"Failed to allocate obmc_buffer->left_pred\00", align 1
@.str.21 = private unnamed_addr constant [31 x i8] c"Failed to allocate bufs->pred0\00", align 1
@.str.22 = private unnamed_addr constant [31 x i8] c"Failed to allocate bufs->pred1\00", align 1
@.str.23 = private unnamed_addr constant [35 x i8] c"Failed to allocate bufs->residual1\00", align 1
@.str.24 = private unnamed_addr constant [32 x i8] c"Failed to allocate bufs->diff10\00", align 1
@.str.25 = private unnamed_addr constant [43 x i8] c"Failed to allocate bufs->tmp_best_mask_buf\00", align 1
@.str.26 = private unnamed_addr constant [48 x i8] c"Failed to allocate thread_data->td->mb.mv_costs\00", align 1
@.str.27 = private unnamed_addr constant [48 x i8] c"Failed to allocate thread_data->td->mb.dv_costs\00", align 1
@.str.28 = private unnamed_addr constant [45 x i8] c"Failed to allocate mb->plane[plane].src_diff\00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"Failed to allocate mb->e_mbd.seg_mask\00", align 1
@.str.30 = private unnamed_addr constant [41 x i8] c"Failed to allocate mb->winner_mode_stats\00", align 1
@.str.31 = private unnamed_addr constant [27 x i8] c"Failed to encode tile data\00", align 1
@.str.32 = private unnamed_addr constant [38 x i8] c"Failed to allocate this_tile->row_ctx\00", align 1
@.str.33 = private unnamed_addr constant [39 x i8] c"Failed to allocate row_mt_sync->mutex_\00", align 1
@.str.34 = private unnamed_addr constant [38 x i8] c"Failed to allocate row_mt_sync->cond_\00", align 1
@.str.35 = private unnamed_addr constant [50 x i8] c"Failed to allocate row_mt_sync->num_finished_cols\00", align 1
@.str.36 = private unnamed_addr constant [24 x i8] c"Invalid value of planes\00", align 1
@.str.37 = private unnamed_addr constant [40 x i8] c"Failed to allocate pack_bs_sync->mutex_\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @av1_row_mt_sync_read_dummy(%struct.AV1EncRowMultiThreadSync* nocapture, i32, i32) local_unnamed_addr #0 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @av1_row_mt_sync_write_dummy(%struct.AV1EncRowMultiThreadSync* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_row_mt_sync_read(%struct.AV1EncRowMultiThreadSync* nocapture readonly, i32, i32) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.AV1EncRowMultiThreadSync, %struct.AV1EncRowMultiThreadSync* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.AV1EncRowMultiThreadSync, %struct.AV1EncRowMultiThreadSync* %0, i64 0, i32 0
  %9 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %8, align 8
  %10 = add nsw i32 %1, -1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %9, i64 %11
  %13 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %12) #9
  %14 = getelementptr inbounds %struct.AV1EncRowMultiThreadSync, %struct.AV1EncRowMultiThreadSync* %0, i64 0, i32 2
  %15 = load i32*, i32** %14, align 8
  %16 = getelementptr inbounds i32, i32* %15, i64 %11
  %17 = load i32, i32* %16, align 4
  %18 = sub nsw i32 %17, %5
  %19 = icmp slt i32 %18, %2
  br i1 %19, label %20, label %31

20:                                               ; preds = %7
  %21 = getelementptr inbounds %struct.AV1EncRowMultiThreadSync, %struct.AV1EncRowMultiThreadSync* %0, i64 0, i32 1
  br label %22

22:                                               ; preds = %20, %22
  %23 = load %union.pthread_cond_t*, %union.pthread_cond_t** %21, align 8
  %24 = getelementptr inbounds %union.pthread_cond_t, %union.pthread_cond_t* %23, i64 %11
  %25 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %24, %union.pthread_mutex_t* %12) #9
  %26 = load i32*, i32** %14, align 8
  %27 = getelementptr inbounds i32, i32* %26, i64 %11
  %28 = load i32, i32* %27, align 4
  %29 = sub nsw i32 %28, %5
  %30 = icmp slt i32 %29, %2
  br i1 %30, label %22, label %31

31:                                               ; preds = %22, %7
  %32 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %12) #9
  br label %33

33:                                               ; preds = %3, %31
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #3

declare i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_row_mt_sync_write(%struct.AV1EncRowMultiThreadSync* nocapture readonly, i32, i32, i32) local_unnamed_addr #1 {
  %5 = getelementptr inbounds %struct.AV1EncRowMultiThreadSync, %struct.AV1EncRowMultiThreadSync* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = add nsw i32 %3, -1
  %8 = icmp sgt i32 %7, %2
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = add nsw i32 %6, %3
  br label %14

11:                                               ; preds = %4
  %12 = srem i32 %2, %6
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %31

14:                                               ; preds = %9, %11
  %15 = phi i32 [ %10, %9 ], [ %2, %11 ]
  %16 = getelementptr inbounds %struct.AV1EncRowMultiThreadSync, %struct.AV1EncRowMultiThreadSync* %0, i64 0, i32 0
  %17 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %16, align 8
  %18 = sext i32 %1 to i64
  %19 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %17, i64 %18
  %20 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %19) #9
  %21 = getelementptr inbounds %struct.AV1EncRowMultiThreadSync, %struct.AV1EncRowMultiThreadSync* %0, i64 0, i32 2
  %22 = load i32*, i32** %21, align 8
  %23 = getelementptr inbounds i32, i32* %22, i64 %18
  store i32 %15, i32* %23, align 4
  %24 = getelementptr inbounds %struct.AV1EncRowMultiThreadSync, %struct.AV1EncRowMultiThreadSync* %0, i64 0, i32 1
  %25 = load %union.pthread_cond_t*, %union.pthread_cond_t** %24, align 8
  %26 = getelementptr inbounds %union.pthread_cond_t, %union.pthread_cond_t* %25, i64 %18
  %27 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* %26) #9
  %28 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %16, align 8
  %29 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %28, i64 %18
  %30 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %29) #9
  br label %31

31:                                               ; preds = %14, %11
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_cond_signal(%union.pthread_cond_t*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_row_mt_mem_dealloc(%struct.AV1_COMP* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %84

7:                                                ; preds = %1
  %8 = icmp sgt i32 %3, 0
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 55
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 2, i32 4
  %11 = sext i32 %3 to i64
  %12 = zext i32 %5 to i64
  %13 = zext i32 %3 to i64
  br label %14

14:                                               ; preds = %81, %7
  %15 = phi i64 [ 0, %7 ], [ %82, %81 ]
  br i1 %8, label %16, label %81

16:                                               ; preds = %14
  %17 = mul nsw i64 %15, %11
  br label %18

18:                                               ; preds = %78, %16
  %19 = phi i64 [ 0, %16 ], [ %79, %78 ]
  %20 = add nsw i64 %19, %17
  %21 = load %struct.TileDataEnc*, %struct.TileDataEnc** %9, align 8
  %22 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %21, i64 %20, i32 6
  %23 = icmp eq %struct.AV1EncRowMultiThreadSync* %22, null
  br i1 %23, label %71, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.AV1EncRowMultiThreadSync, %struct.AV1EncRowMultiThreadSync* %22, i64 0, i32 0
  %26 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %25, align 8
  %27 = icmp eq %union.pthread_mutex_t* %26, null
  br i1 %27, label %45, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %21, i64 %20, i32 6, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %42

32:                                               ; preds = %28, %32
  %33 = phi i64 [ %37, %32 ], [ 0, %28 ]
  %34 = phi %union.pthread_mutex_t* [ %41, %32 ], [ %26, %28 ]
  %35 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %34, i64 %33
  %36 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %35) #9
  %37 = add nuw nsw i64 %33, 1
  %38 = load i32, i32* %29, align 4
  %39 = sext i32 %38 to i64
  %40 = icmp slt i64 %37, %39
  %41 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %25, align 8
  br i1 %40, label %32, label %42

42:                                               ; preds = %32, %28
  %43 = phi %union.pthread_mutex_t* [ %26, %28 ], [ %41, %32 ]
  %44 = bitcast %union.pthread_mutex_t* %43 to i8*
  tail call void @aom_free(i8* %44) #9
  br label %45

45:                                               ; preds = %42, %24
  %46 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %21, i64 %20, i32 6, i32 1
  %47 = load %union.pthread_cond_t*, %union.pthread_cond_t** %46, align 8
  %48 = icmp eq %union.pthread_cond_t* %47, null
  br i1 %48, label %66, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %21, i64 %20, i32 6, i32 4
  %51 = load i32, i32* %50, align 4
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %63

53:                                               ; preds = %49, %53
  %54 = phi i64 [ %58, %53 ], [ 0, %49 ]
  %55 = phi %union.pthread_cond_t* [ %62, %53 ], [ %47, %49 ]
  %56 = getelementptr inbounds %union.pthread_cond_t, %union.pthread_cond_t* %55, i64 %54
  %57 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %56) #9
  %58 = add nuw nsw i64 %54, 1
  %59 = load i32, i32* %50, align 4
  %60 = sext i32 %59 to i64
  %61 = icmp slt i64 %58, %60
  %62 = load %union.pthread_cond_t*, %union.pthread_cond_t** %46, align 8
  br i1 %61, label %53, label %63

63:                                               ; preds = %53, %49
  %64 = phi %union.pthread_cond_t* [ %47, %49 ], [ %62, %53 ]
  %65 = bitcast %union.pthread_cond_t* %64 to i8*
  tail call void @aom_free(i8* %65) #9
  br label %66

66:                                               ; preds = %63, %45
  %67 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %21, i64 %20, i32 6, i32 2
  %68 = bitcast i32** %67 to i8**
  %69 = load i8*, i8** %68, align 8
  tail call void @aom_free(i8* %69) #9
  %70 = bitcast %struct.AV1EncRowMultiThreadSync* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %70, i8 0, i64 40, i1 false) #9
  br label %71

71:                                               ; preds = %18, %66
  %72 = load i8, i8* %10, align 16
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %71
  %75 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %21, i64 %20, i32 3
  %76 = bitcast %struct.frame_contexts** %75 to i8**
  %77 = load i8*, i8** %76, align 16
  tail call void @aom_free(i8* %77) #9
  br label %78

78:                                               ; preds = %71, %74
  %79 = add nuw nsw i64 %19, 1
  %80 = icmp eq i64 %79, %13
  br i1 %80, label %81, label %18

81:                                               ; preds = %78, %14
  %82 = add nuw nsw i64 %15, 1
  %83 = icmp eq i64 %82, %12
  br i1 %83, label %84, label %14

84:                                               ; preds = %81, %1
  %85 = bitcast i32* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 16, i1 false)
  ret void
}

declare void @aom_free(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_create_second_pass_workers(%struct.AV1_COMP*, i32) local_unnamed_addr #1 {
  %3 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 35
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %25, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 5
  %9 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %8, align 8
  %10 = icmp eq %union.pthread_mutex_t* %9, null
  br i1 %10, label %11, label %25

11:                                               ; preds = %7
  %12 = tail call i8* @aom_malloc(i64 40) #9
  %13 = bitcast %union.pthread_mutex_t** %8 to i8**
  store i8* %12, i8** %13, align 8
  %14 = icmp eq i8* %12, null
  %15 = bitcast i8* %12 to %union.pthread_mutex_t*
  br i1 %14, label %16, label %20

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %18 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %17, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %18, i32 2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0)) #9
  %19 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %8, align 8
  br label %20

20:                                               ; preds = %11, %16
  %21 = phi %union.pthread_mutex_t* [ %15, %11 ], [ %19, %16 ]
  %22 = icmp eq %union.pthread_mutex_t* %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %20
  %24 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %21, %union.pthread_mutexattr_t* null) #9
  br label %25

25:                                               ; preds = %7, %23, %20, %2
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 12, i32 2
  %27 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %26, align 8
  %28 = icmp eq %union.pthread_mutex_t* %27, null
  br i1 %28, label %29, label %43

29:                                               ; preds = %25
  %30 = tail call i8* @aom_malloc(i64 40) #9
  %31 = bitcast %union.pthread_mutex_t** %26 to i8**
  store i8* %30, i8** %31, align 8
  %32 = icmp eq i8* %30, null
  %33 = bitcast i8* %30 to %union.pthread_mutex_t*
  br i1 %32, label %34, label %38

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %36 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %35, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %36, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0)) #9
  %37 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %26, align 8
  br label %38

38:                                               ; preds = %29, %34
  %39 = phi %union.pthread_mutex_t* [ %33, %29 ], [ %37, %34 ]
  %40 = icmp eq %union.pthread_mutex_t* %39, null
  br i1 %40, label %43, label %41

41:                                               ; preds = %38
  %42 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %39, %union.pthread_mutexattr_t* null) #9
  br label %43

43:                                               ; preds = %38, %41, %25
  %44 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 14, i32 0
  %45 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %44, align 8
  %46 = icmp eq %union.pthread_mutex_t* %45, null
  br i1 %46, label %47, label %61

47:                                               ; preds = %43
  %48 = tail call i8* @aom_malloc(i64 40) #9
  %49 = bitcast %union.pthread_mutex_t** %44 to i8**
  store i8* %48, i8** %49, align 8
  %50 = icmp eq i8* %48, null
  %51 = bitcast i8* %48 to %union.pthread_mutex_t*
  br i1 %50, label %52, label %56

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %54 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %53, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %54, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0)) #9
  %55 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %44, align 8
  br label %56

56:                                               ; preds = %47, %52
  %57 = phi %union.pthread_mutex_t* [ %51, %47 ], [ %55, %52 ]
  %58 = icmp eq %union.pthread_mutex_t* %57, null
  br i1 %58, label %61, label %59

59:                                               ; preds = %56
  %60 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %57, %union.pthread_mutexattr_t* null) #9
  br label %61

61:                                               ; preds = %56, %59, %43
  %62 = icmp sgt i32 %1, 0
  br i1 %62, label %63, label %80

63:                                               ; preds = %61
  %64 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 4
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 5
  %66 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3
  %67 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %3, i64 0, i32 1
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %69 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %3, i64 0, i32 2
  %70 = sext i32 %1 to i64
  %71 = add nsw i64 %70, -1
  %72 = load %struct.AVxWorker*, %struct.AVxWorker** %64, align 8
  %73 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %72, i64 %71
  %74 = load %struct.EncWorkerData*, %struct.EncWorkerData** %65, align 8
  %75 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %74, i64 %71, i32 0
  store %struct.AV1_COMP* %0, %struct.AV1_COMP** %75, align 8
  %76 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %74, i64 %71, i32 3
  %77 = trunc i64 %71 to i32
  store i32 %77, i32* %76, align 4
  %78 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %74, i64 %71, i32 2
  store i32 %77, i32* %78, align 8
  %79 = icmp sgt i64 %71, 0
  br i1 %79, label %81, label %89

80:                                               ; preds = %89, %61
  ret void

81:                                               ; preds = %63, %96
  %82 = phi %struct.AVxWorker* [ %101, %96 ], [ %73, %63 ]
  %83 = phi i64 [ %99, %96 ], [ %71, %63 ]
  %84 = load i32 (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)** %67, align 8
  %85 = tail call i32 %84(%struct.AVxWorker* %82) #9
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %96

87:                                               ; preds = %81
  %88 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %68, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %88, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0)) #9
  br label %96

89:                                               ; preds = %96, %63
  %90 = phi i64 [ %71, %63 ], [ %99, %96 ]
  %91 = phi %struct.AVxWorker* [ %73, %63 ], [ %101, %96 ]
  %92 = phi %struct.EncWorkerData* [ %74, %63 ], [ %102, %96 ]
  %93 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %92, i64 %90, i32 1
  store %struct.ThreadData* %66, %struct.ThreadData** %93, align 8
  %94 = load i32 (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)** %69, align 8
  %95 = tail call i32 %94(%struct.AVxWorker* %91) #9
  br label %80

96:                                               ; preds = %81, %87
  %97 = load i32 (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)** %69, align 8
  %98 = tail call i32 %97(%struct.AVxWorker* %82) #9
  %99 = add nsw i64 %83, -1
  %100 = load %struct.AVxWorker*, %struct.AVxWorker** %64, align 8
  %101 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %100, i64 %99
  %102 = load %struct.EncWorkerData*, %struct.EncWorkerData** %65, align 8
  %103 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %102, i64 %99, i32 0
  store %struct.AV1_COMP* %0, %struct.AV1_COMP** %103, align 8
  %104 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %102, i64 %99, i32 3
  %105 = trunc i64 %99 to i32
  store i32 %105, i32* %104, align 4
  %106 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %102, i64 %99, i32 2
  store i32 %105, i32* %106, align 8
  %107 = icmp sgt i64 %99, 0
  br i1 %107, label %81, label %89
}

declare %struct.AVxWorkerInterface* @aom_get_worker_interface() local_unnamed_addr #4

declare i8* @aom_malloc(i64) local_unnamed_addr #4

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_create_workers(%struct.AV1_COMP*, i32) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %4 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  %5 = sext i32 %1 to i64
  %6 = mul nsw i64 %5, 56
  %7 = tail call i8* @aom_malloc(i64 %6) #9
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 4
  %9 = bitcast %struct.AVxWorker** %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = icmp eq i8* %7, null
  br i1 %10, label %11, label %14

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %13 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %12, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %13, i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0)) #9
  br label %14

14:                                               ; preds = %2, %11
  %15 = tail call i8* @aom_calloc(i64 %5, i64 24) #9
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 5
  %17 = bitcast %struct.EncWorkerData** %16 to i8**
  store i8* %15, i8** %17, align 8
  %18 = icmp eq i8* %15, null
  br i1 %18, label %19, label %22

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %21 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %20, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %21, i32 2, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #9
  br label %22

22:                                               ; preds = %14, %19
  %23 = icmp sgt i32 %1, 0
  br i1 %23, label %24, label %35

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %4, i64 0, i32 0
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 0
  %28 = add nsw i64 %5, -1
  %29 = load %struct.AVxWorker*, %struct.AVxWorker** %8, align 8
  %30 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %29, i64 %28
  %31 = load %struct.EncWorkerData*, %struct.EncWorkerData** %16, align 8
  %32 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %25, align 8
  tail call void %32(%struct.AVxWorker* %30) #9
  %33 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %29, i64 %28, i32 2
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i8** %33, align 8
  %34 = icmp sgt i64 %28, 0
  br i1 %34, label %39, label %36

35:                                               ; preds = %36, %22
  ret void

36:                                               ; preds = %63, %24
  %37 = load i32, i32* %27, align 8
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %27, align 8
  br label %35

39:                                               ; preds = %24, %63
  %40 = phi %struct.EncWorkerData* [ %69, %63 ], [ %31, %24 ]
  %41 = phi i64 [ %66, %63 ], [ %28, %24 ]
  %42 = tail call i8* @aom_memalign(i64 32, i64 128000) #9
  %43 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %40, i64 %41, i32 1
  %44 = bitcast %struct.ThreadData** %43 to i8**
  store i8* %42, i8** %44, align 8
  %45 = icmp eq i8* %42, null
  br i1 %45, label %46, label %49

46:                                               ; preds = %39
  %47 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %26, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %47, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0)) #9
  %48 = load i8*, i8** %44, align 8
  br label %49

49:                                               ; preds = %39, %46
  %50 = phi i8* [ %42, %39 ], [ %48, %46 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %50, i8 0, i64 128000, i1 false)
  %51 = load %struct.ThreadData*, %struct.ThreadData** %43, align 8
  %52 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %51, i64 0, i32 3
  tail call void @av1_setup_shared_coeff_buffer(%struct.AV1Common* %3, %struct.PC_TREE_SHARED_BUFFERS* %52) #9
  %53 = tail call i8* @aom_memalign(i64 32, i64 32768) #9
  %54 = load %struct.ThreadData*, %struct.ThreadData** %43, align 8
  %55 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %54, i64 0, i32 11
  %56 = bitcast i16** %55 to i8**
  store i8* %53, i8** %56, align 16
  %57 = load %struct.ThreadData*, %struct.ThreadData** %43, align 8
  %58 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %57, i64 0, i32 11
  %59 = load i16*, i16** %58, align 16
  %60 = icmp eq i16* %59, null
  br i1 %60, label %61, label %63

61:                                               ; preds = %49
  %62 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %26, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %62, i32 2, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.8, i64 0, i64 0)) #9
  br label %63

63:                                               ; preds = %49, %61
  %64 = load i32, i32* %27, align 8
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %27, align 8
  %66 = add nsw i64 %41, -1
  %67 = load %struct.AVxWorker*, %struct.AVxWorker** %8, align 8
  %68 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %67, i64 %66
  %69 = load %struct.EncWorkerData*, %struct.EncWorkerData** %16, align 8
  %70 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %25, align 8
  tail call void %70(%struct.AVxWorker* %68) #9
  %71 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %67, i64 %66, i32 2
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i8** %71, align 8
  %72 = icmp sgt i64 %66, 0
  br i1 %72, label %39, label %36
}

declare i8* @aom_calloc(i64, i64) local_unnamed_addr #4

declare i8* @aom_memalign(i64, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @av1_setup_shared_coeff_buffer(%struct.AV1Common*, %struct.PC_TREE_SHARED_BUFFERS*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_get_max_num_workers(%struct.AV1_COMP* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 2
  %7 = bitcast i32* %6 to <8 x i32>*
  %8 = load <8 x i32>, <8 x i32>* %7, align 4
  %9 = shufflevector <8 x i32> %8, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = icmp sgt <8 x i32> %8, %9
  %11 = select <8 x i1> %10, <8 x i32> %8, <8 x i32> %9
  %12 = shufflevector <8 x i32> %11, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = icmp sgt <8 x i32> %11, %12
  %14 = select <8 x i1> %13, <8 x i32> %11, <8 x i32> %12
  %15 = shufflevector <8 x i32> %14, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = icmp sgt <8 x i32> %14, %15
  %17 = select <8 x i1> %16, <8 x i32> %14, <8 x i32> %15
  %18 = extractelement <8 x i32> %17, i32 0
  %19 = icmp sgt i32 %18, %5
  %20 = select i1 %19, i32 %18, i32 %5
  %21 = icmp sgt i32 %20, %3
  %22 = select i1 %21, i32 %20, i32 %3
  %23 = icmp sgt i32 %22, 0
  %24 = select i1 %23, i32 %22, i32 0
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 29
  %26 = load i32, i32* %25, align 8
  %27 = icmp slt i32 %24, %26
  %28 = select i1 %27, i32 %24, i32 %26
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_encode_tiles_mt(%struct.AV1_COMP*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 4
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 56
  %9 = load i32, i32* %8, align 16
  %10 = mul nsw i32 %5, %3
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  tail call void @av1_alloc_tile_data(%struct.AV1_COMP* %0) #9
  br label %13

13:                                               ; preds = %12, %1
  tail call void @av1_init_tile_data(%struct.AV1_COMP* %0) #9
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 3
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call fastcc void @create_enc_workers(%struct.AV1_COMP* %0, i32 %7)
  br label %23

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = icmp slt i32 %7, %20
  %22 = select i1 %21, i32 %7, i32 %20
  br label %23

23:                                               ; preds = %18, %17
  %24 = phi i32 [ %7, %17 ], [ %22, %18 ]
  tail call fastcc void @prepare_enc_workers(%struct.AV1_COMP* %0, i32 (i8*, i8*)* nonnull @enc_worker_hook, i32 %24)
  %25 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  %26 = icmp sgt i32 %24, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  br label %68

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 4
  %31 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %25, i64 0, i32 3
  %32 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %25, i64 0, i32 4
  %33 = sext i32 %24 to i64
  %34 = add nsw i64 %33, -1
  %35 = load %struct.AVxWorker*, %struct.AVxWorker** %30, align 8
  %36 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %35, i64 %34
  %37 = icmp eq i64 %34, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %29, %38
  %39 = phi %struct.AVxWorker* [ %44, %38 ], [ %36, %29 ]
  %40 = phi i64 [ %42, %38 ], [ %34, %29 ]
  %41 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %31, align 8
  tail call void %41(%struct.AVxWorker* %39) #9
  %42 = add nsw i64 %40, -1
  %43 = load %struct.AVxWorker*, %struct.AVxWorker** %30, align 8
  %44 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %43, i64 %42
  %45 = icmp eq i64 %42, 0
  br i1 %45, label %46, label %38

46:                                               ; preds = %38, %29
  %47 = phi %struct.AVxWorker* [ %36, %29 ], [ %44, %38 ]
  %48 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %32, align 8
  tail call void %48(%struct.AVxWorker* %47) #9
  %49 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  %50 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %49, i64 0, i32 2
  br label %53

51:                                               ; preds = %53
  %52 = icmp eq i32 %63, 0
  br i1 %52, label %68, label %65

53:                                               ; preds = %53, %46
  %54 = phi i64 [ %33, %46 ], [ %56, %53 ]
  %55 = phi i32 [ 0, %46 ], [ %63, %53 ]
  %56 = add nsw i64 %54, -1
  %57 = load %struct.AVxWorker*, %struct.AVxWorker** %30, align 8
  %58 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %57, i64 %56
  %59 = load i32 (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)** %50, align 8
  %60 = tail call i32 %59(%struct.AVxWorker* %58) #9
  %61 = icmp eq i32 %60, 0
  %62 = zext i1 %61 to i32
  %63 = or i32 %55, %62
  %64 = icmp sgt i64 %56, 0
  br i1 %64, label %53, label %51

65:                                               ; preds = %51
  %66 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %67 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %66, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %67, i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.31, i64 0, i64 0)) #9
  br label %68

68:                                               ; preds = %27, %51, %65
  tail call fastcc void @accumulate_counters_enc_workers(%struct.AV1_COMP* %0, i32 %24)
  ret void
}

declare void @av1_alloc_tile_data(%struct.AV1_COMP*) local_unnamed_addr #4

declare void @av1_init_tile_data(%struct.AV1_COMP*) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @create_enc_workers(%struct.AV1_COMP*, i32) unnamed_addr #6 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %12

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 5
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 4, i32 0
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 35
  %11 = sext i32 %1 to i64
  br label %14

12:                                               ; preds = %180, %2
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 3
  store i32 1, i32* %13, align 8
  ret void

14:                                               ; preds = %4, %180
  %15 = phi i64 [ %11, %4 ], [ %16, %180 ]
  %16 = add nsw i64 %15, -1
  %17 = load %struct.EncWorkerData*, %struct.EncWorkerData** %5, align 8
  %18 = icmp sgt i64 %16, 0
  %19 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %17, i64 %16, i32 1
  br i1 %18, label %20, label %165

20:                                               ; preds = %14
  %21 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  tail call void @av1_setup_sms_tree(%struct.AV1_COMP* %0, %struct.ThreadData* %21) #9
  %22 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %23 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %22, i64 0, i32 8
  %24 = tail call i8* @aom_memalign(i64 16, i64 65536) #9
  %25 = bitcast %struct.OBMCBuffer* %23 to i8**
  store i8* %24, i8** %25, align 8
  %26 = icmp eq i8* %24, null
  br i1 %26, label %27, label %29

27:                                               ; preds = %20
  %28 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %28, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.17, i64 0, i64 0)) #9
  br label %29

29:                                               ; preds = %27, %20
  %30 = tail call i8* @aom_memalign(i64 16, i64 65536) #9
  %31 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %22, i64 0, i32 8, i32 1
  %32 = bitcast i32** %31 to i8**
  store i8* %30, i8** %32, align 8
  %33 = icmp eq i8* %30, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %35, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.18, i64 0, i64 0)) #9
  br label %36

36:                                               ; preds = %34, %29
  %37 = tail call i8* @aom_memalign(i64 16, i64 49152) #9
  %38 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %22, i64 0, i32 8, i32 2
  store i8* %37, i8** %38, align 8
  %39 = icmp eq i8* %37, null
  br i1 %39, label %40, label %42

40:                                               ; preds = %36
  %41 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %41, i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.19, i64 0, i64 0)) #9
  br label %42

42:                                               ; preds = %40, %36
  %43 = tail call i8* @aom_memalign(i64 16, i64 49152) #9
  %44 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %22, i64 0, i32 8, i32 3
  store i8* %43, i8** %44, align 8
  %45 = icmp eq i8* %43, null
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  %47 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %47, i32 2, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20, i64 0, i64 0)) #9
  br label %48

48:                                               ; preds = %42, %46
  %49 = tail call i8* @aom_malloc(i64 348168) #9
  %50 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %51 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %50, i64 0, i32 6
  %52 = bitcast %struct.inter_modes_info** %51 to i8**
  store i8* %49, i8** %52, align 8
  %53 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %54 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %53, i64 0, i32 6
  %55 = load %struct.inter_modes_info*, %struct.inter_modes_info** %54, align 8
  %56 = icmp eq %struct.inter_modes_info* %55, null
  br i1 %56, label %57, label %59

57:                                               ; preds = %48
  %58 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %58, i32 2, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.9, i64 0, i64 0)) #9
  br label %59

59:                                               ; preds = %48, %57
  %60 = tail call i8* @aom_malloc(i64 16384) #9
  %61 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %62 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %61, i64 0, i32 7, i64 0, i64 0
  %63 = bitcast i32** %62 to i8**
  store i8* %60, i8** %63, align 8
  %64 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %65 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %64, i64 0, i32 7, i64 0, i64 0
  %66 = load i32*, i32** %65, align 8
  %67 = icmp eq i32* %66, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %59
  %69 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %69, i32 2, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.10, i64 0, i64 0)) #9
  br label %70

70:                                               ; preds = %59, %68
  %71 = tail call i8* @aom_malloc(i64 16384) #9
  %72 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %73 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %72, i64 0, i32 7, i64 0, i64 1
  %74 = bitcast i32** %73 to i8**
  store i8* %71, i8** %74, align 8
  %75 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %76 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %75, i64 0, i32 7, i64 0, i64 1
  %77 = load i32*, i32** %76, align 8
  %78 = icmp eq i32* %77, null
  br i1 %78, label %181, label %183

79:                                               ; preds = %205
  %80 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %80, i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.11, i64 0, i64 0)) #9
  br label %81

81:                                               ; preds = %205, %79
  %82 = tail call i8* @aom_memalign(i64 16, i64 36864) #9
  %83 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %84 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %83, i64 0, i32 9
  %85 = bitcast %struct.PALETTE_BUFFER** %84 to i8**
  store i8* %82, i8** %85, align 16
  %86 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %87 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %86, i64 0, i32 9
  %88 = load %struct.PALETTE_BUFFER*, %struct.PALETTE_BUFFER** %87, align 16
  %89 = icmp eq %struct.PALETTE_BUFFER* %88, null
  br i1 %89, label %90, label %93

90:                                               ; preds = %81
  %91 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %91, i32 2, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.12, i64 0, i64 0)) #9
  %92 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  br label %93

93:                                               ; preds = %81, %90
  %94 = phi %struct.ThreadData* [ %86, %81 ], [ %92, %90 ]
  %95 = tail call i8* @aom_memalign(i64 16, i64 32768) #9
  %96 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %94, i64 0, i32 10, i32 0
  store i8* %95, i8** %96, align 8
  %97 = icmp eq i8* %95, null
  br i1 %97, label %98, label %100

98:                                               ; preds = %93
  %99 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %99, i32 2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.21, i64 0, i64 0)) #9
  br label %100

100:                                              ; preds = %98, %93
  %101 = tail call i8* @aom_memalign(i64 16, i64 32768) #9
  %102 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %94, i64 0, i32 10, i32 1
  store i8* %101, i8** %102, align 8
  %103 = icmp eq i8* %101, null
  br i1 %103, label %104, label %106

104:                                              ; preds = %100
  %105 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %105, i32 2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.22, i64 0, i64 0)) #9
  br label %106

106:                                              ; preds = %104, %100
  %107 = tail call i8* @aom_memalign(i64 32, i64 32768) #9
  %108 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %94, i64 0, i32 10, i32 2
  %109 = bitcast i16** %108 to i8**
  store i8* %107, i8** %109, align 8
  %110 = icmp eq i8* %107, null
  br i1 %110, label %111, label %113

111:                                              ; preds = %106
  %112 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %112, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.23, i64 0, i64 0)) #9
  br label %113

113:                                              ; preds = %111, %106
  %114 = tail call i8* @aom_memalign(i64 32, i64 32768) #9
  %115 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %94, i64 0, i32 10, i32 3
  %116 = bitcast i16** %115 to i8**
  store i8* %114, i8** %116, align 8
  %117 = icmp eq i8* %114, null
  br i1 %117, label %118, label %120

118:                                              ; preds = %113
  %119 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %119, i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.24, i64 0, i64 0)) #9
  br label %120

120:                                              ; preds = %118, %113
  %121 = tail call i8* @aom_malloc(i64 32768) #9
  %122 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %94, i64 0, i32 10, i32 4
  store i8* %121, i8** %122, align 8
  %123 = icmp eq i8* %121, null
  br i1 %123, label %124, label %126

124:                                              ; preds = %120
  %125 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %125, i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.25, i64 0, i64 0)) #9
  br label %126

126:                                              ; preds = %120, %124
  %127 = tail call i8* @aom_memalign(i64 32, i64 98304) #9
  %128 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %129 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %128, i64 0, i32 12, i64 0
  store i8* %127, i8** %129, align 8
  %130 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %131 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %130, i64 0, i32 12, i64 0
  %132 = load i8*, i8** %131, align 8
  %133 = icmp eq i8* %132, null
  br i1 %133, label %134, label %136

134:                                              ; preds = %126
  %135 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %135, i32 2, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.13, i64 0, i64 0)) #9
  br label %136

136:                                              ; preds = %126, %134
  %137 = tail call i8* @aom_memalign(i64 32, i64 98304) #9
  %138 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %139 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %138, i64 0, i32 12, i64 1
  store i8* %137, i8** %139, align 8
  %140 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %141 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %140, i64 0, i32 12, i64 1
  %142 = load i8*, i8** %141, align 8
  %143 = icmp eq i8* %142, null
  br i1 %143, label %214, label %216

144:                                              ; preds = %216
  %145 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %145, i32 2, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.14, i64 0, i64 0)) #9
  br label %146

146:                                              ; preds = %216, %144
  %147 = load i8, i8* %9, align 16
  %148 = icmp eq i8 %147, 2
  br i1 %148, label %149, label %166

149:                                              ; preds = %146
  %150 = load %struct.SequenceHeader*, %struct.SequenceHeader** %8, align 16
  %151 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %150, i64 0, i32 7
  %152 = load i8, i8* %151, align 4
  %153 = icmp eq i8 %152, 12
  %154 = select i1 %153, i64 43664, i64 174656
  %155 = tail call i8* @aom_malloc(i64 %154) #9
  %156 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %157 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %156, i64 0, i32 19
  %158 = bitcast %struct.VP64x64** %157 to i8**
  store i8* %155, i8** %158, align 16
  %159 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %160 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %159, i64 0, i32 19
  %161 = load %struct.VP64x64*, %struct.VP64x64** %160, align 16
  %162 = icmp eq %struct.VP64x64* %161, null
  br i1 %162, label %163, label %166

163:                                              ; preds = %149
  %164 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %164, i32 2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i64 0, i64 0)) #9
  br label %166

165:                                              ; preds = %14
  store %struct.ThreadData* %6, %struct.ThreadData** %19, align 8
  br label %166

166:                                              ; preds = %146, %149, %163, %165
  %167 = load i8, i8* %10, align 1, !range !2
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %180, label %169

169:                                              ; preds = %166
  %170 = tail call i8* @aom_memalign(i64 16, i64 21264) #9
  %171 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %172 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %171, i64 0, i32 18
  %173 = bitcast %struct.frame_contexts** %172 to i8**
  store i8* %170, i8** %173, align 8
  %174 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %175 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %174, i64 0, i32 18
  %176 = load %struct.frame_contexts*, %struct.frame_contexts** %175, align 8
  %177 = icmp eq %struct.frame_contexts* %176, null
  br i1 %177, label %178, label %180

178:                                              ; preds = %169
  %179 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %179, i32 2, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.16, i64 0, i64 0)) #9
  br label %180

180:                                              ; preds = %169, %166, %178
  br i1 %18, label %14, label %12

181:                                              ; preds = %70
  %182 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %182, i32 2, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.10, i64 0, i64 0)) #9
  br label %183

183:                                              ; preds = %181, %70
  %184 = tail call i8* @aom_malloc(i64 16384) #9
  %185 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %186 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %185, i64 0, i32 7, i64 1, i64 0
  %187 = bitcast i32** %186 to i8**
  store i8* %184, i8** %187, align 8
  %188 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %189 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %188, i64 0, i32 7, i64 1, i64 0
  %190 = load i32*, i32** %189, align 8
  %191 = icmp eq i32* %190, null
  br i1 %191, label %192, label %194

192:                                              ; preds = %183
  %193 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %193, i32 2, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.10, i64 0, i64 0)) #9
  br label %194

194:                                              ; preds = %192, %183
  %195 = tail call i8* @aom_malloc(i64 16384) #9
  %196 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %197 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %196, i64 0, i32 7, i64 1, i64 1
  %198 = bitcast i32** %197 to i8**
  store i8* %195, i8** %198, align 8
  %199 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %200 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %199, i64 0, i32 7, i64 1, i64 1
  %201 = load i32*, i32** %200, align 8
  %202 = icmp eq i32* %201, null
  br i1 %202, label %203, label %205

203:                                              ; preds = %194
  %204 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %204, i32 2, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.10, i64 0, i64 0)) #9
  br label %205

205:                                              ; preds = %203, %194
  %206 = tail call i8* @aom_calloc(i64 1, i64 192) #9
  %207 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %208 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %207, i64 0, i32 2
  %209 = bitcast %struct.FRAME_COUNTS** %208 to i8**
  store i8* %206, i8** %209, align 8
  %210 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %211 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %210, i64 0, i32 2
  %212 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %211, align 8
  %213 = icmp eq %struct.FRAME_COUNTS* %212, null
  br i1 %213, label %79, label %81

214:                                              ; preds = %136
  %215 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %7, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %215, i32 2, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.13, i64 0, i64 0)) #9
  br label %216

216:                                              ; preds = %214, %136
  %217 = load %struct.SequenceHeader*, %struct.SequenceHeader** %8, align 16
  %218 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %217, i64 0, i32 27
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = lshr i32 2, %220
  %222 = sext i32 %221 to i64
  %223 = shl nsw i64 %222, 16
  %224 = tail call i8* @aom_malloc(i64 %223) #9
  %225 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %226 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %225, i64 0, i32 24
  %227 = bitcast %struct.PixelLevelGradientInfo** %226 to i8**
  store i8* %224, i8** %227, align 16
  %228 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %229 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %228, i64 0, i32 24
  %230 = load %struct.PixelLevelGradientInfo*, %struct.PixelLevelGradientInfo** %229, align 16
  %231 = icmp eq %struct.PixelLevelGradientInfo* %230, null
  br i1 %231, label %144, label %146
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @prepare_enc_workers(%struct.AV1_COMP*, i32 (i8*, i8*)*, i32) unnamed_addr #6 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %33

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 4
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 5
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3
  %9 = bitcast %struct.ThreadData* %8 to i8*
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1
  %11 = bitcast %struct.RD_COUNTS* %10 to i8*
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 22, i32 2
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 21
  %15 = bitcast %struct.MvCosts** %14 to i8**
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 22, i32 3
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 22
  %18 = bitcast %struct.IntraBCMVCosts** %17 to i8**
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 7
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4
  %23 = bitcast %struct.FRAME_COUNTS* %22 to i8*
  %24 = sext i32 %2 to i64
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 50, i32 0, i64 0, i64 0
  %26 = bitcast i32** %25 to i8**
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 50, i32 0, i64 0, i64 1
  %28 = bitcast i32** %27 to i8**
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 50, i32 0, i64 1, i64 0
  %30 = bitcast i32** %29 to i8**
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 50, i32 0, i64 1, i64 1
  %32 = bitcast i32** %31 to i8**
  br label %34

33:                                               ; preds = %221, %3
  ret void

34:                                               ; preds = %223, %5
  %35 = phi i64 [ %24, %5 ], [ %36, %223 ]
  %36 = add nsw i64 %35, -1
  %37 = load %struct.AVxWorker*, %struct.AVxWorker** %6, align 8
  %38 = load %struct.EncWorkerData*, %struct.EncWorkerData** %7, align 8
  %39 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %38, i64 %36
  %40 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %37, i64 %36, i32 3
  store i32 (i8*, i8*)* %1, i32 (i8*, i8*)** %40, align 8
  %41 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %37, i64 %36, i32 4
  %42 = bitcast i8** %41 to %struct.EncWorkerData**
  store %struct.EncWorkerData* %39, %struct.EncWorkerData** %42, align 8
  %43 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %37, i64 %36, i32 5
  store i8* null, i8** %43, align 8
  %44 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %39, i64 0, i32 0
  store %struct.AV1_COMP* %0, %struct.AV1_COMP** %44, align 8
  %45 = icmp eq i64 %36, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %34
  %47 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %38, i64 0, i32 1
  store %struct.ThreadData* %8, %struct.ThreadData** %47, align 8
  br label %48

48:                                               ; preds = %46, %34
  %49 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %38, i64 %36, i32 1
  %50 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %51 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %50, i64 0, i32 13
  store i32 0, i32* %51, align 8
  %52 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %53 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %52, i64 0, i32 14
  store i32 0, i32* %53, align 4
  %54 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %55 = icmp eq %struct.ThreadData* %54, %8
  br i1 %55, label %157, label %56

56:                                               ; preds = %48
  %57 = bitcast %struct.ThreadData* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %57, i8* align 16 %9, i64 124144, i1 false)
  %58 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %59 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %58, i64 0, i32 1
  %60 = bitcast %struct.RD_COUNTS* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %60, i8* align 16 %11, i64 1432, i1 false)
  %61 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %62 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %61, i64 0, i32 0, i32 9
  %63 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %61, i64 0, i32 8
  %64 = bitcast %struct.OBMCBuffer* %62 to i8*
  %65 = bitcast %struct.OBMCBuffer* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %64, i8* align 16 %65, i64 32, i1 false)
  %66 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %67 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %66, i64 0, i32 6
  %68 = bitcast %struct.inter_modes_info** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %66, i64 0, i32 0, i32 45
  %71 = bitcast %struct.inter_modes_info** %70 to i64*
  store i64 %69, i64* %71, align 16
  %72 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %73 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %72, i64 0, i32 7, i64 0, i64 0
  %74 = bitcast i32** %73 to i8**
  %75 = load i8*, i8** %74, align 8
  %76 = load i8*, i8** %26, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %75, i8* align 4 %76, i64 16384, i1 false)
  %77 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %78 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %77, i64 0, i32 7, i64 0, i64 0
  %79 = bitcast i32** %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %77, i64 0, i32 0, i32 50, i32 0, i64 0, i64 0
  %82 = bitcast i32** %81 to i64*
  store i64 %80, i64* %82, align 8
  %83 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %84 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %83, i64 0, i32 7, i64 0, i64 1
  %85 = bitcast i32** %84 to i8**
  %86 = load i8*, i8** %85, align 8
  %87 = load i8*, i8** %28, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %86, i8* align 4 %87, i64 16384, i1 false)
  %88 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %89 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %88, i64 0, i32 7, i64 0, i64 1
  %90 = bitcast i32** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %88, i64 0, i32 0, i32 50, i32 0, i64 0, i64 1
  %93 = bitcast i32** %92 to i64*
  store i64 %91, i64* %93, align 8
  %94 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %95 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %94, i64 0, i32 7, i64 1, i64 0
  %96 = bitcast i32** %95 to i8**
  %97 = load i8*, i8** %96, align 8
  %98 = load i8*, i8** %30, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 16384, i1 false)
  %99 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %100 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %99, i64 0, i32 7, i64 1, i64 0
  %101 = bitcast i32** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %99, i64 0, i32 0, i32 50, i32 0, i64 1, i64 0
  %104 = bitcast i32** %103 to i64*
  store i64 %102, i64* %104, align 8
  %105 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %106 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %105, i64 0, i32 7, i64 1, i64 1
  %107 = bitcast i32** %106 to i8**
  %108 = load i8*, i8** %107, align 8
  %109 = load i8*, i8** %32, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 %109, i64 16384, i1 false)
  %110 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %111 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %110, i64 0, i32 7, i64 1, i64 1
  %112 = bitcast i32** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %110, i64 0, i32 0, i32 50, i32 0, i64 1, i64 1
  %115 = bitcast i32** %114 to i64*
  store i64 %113, i64* %115, align 8
  %116 = load i32, i32* %12, align 8
  %117 = icmp ult i32 %116, 3
  br i1 %117, label %118, label %136

118:                                              ; preds = %56
  %119 = tail call i8* @aom_malloc(i64 524328) #9
  %120 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %121 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %120, i64 0, i32 0, i32 21
  %122 = bitcast %struct.MvCosts** %121 to i8**
  store i8* %119, i8** %122, align 16
  %123 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %124 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %123, i64 0, i32 0, i32 21
  %125 = load %struct.MvCosts*, %struct.MvCosts** %124, align 16
  %126 = icmp eq %struct.MvCosts* %125, null
  br i1 %126, label %127, label %130

127:                                              ; preds = %118
  %128 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %13, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %128, i32 2, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.26, i64 0, i64 0)) #9
  %129 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  br label %130

130:                                              ; preds = %118, %127
  %131 = phi %struct.ThreadData* [ %123, %118 ], [ %129, %127 ]
  %132 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %131, i64 0, i32 0, i32 21
  %133 = bitcast %struct.MvCosts** %132 to i8**
  %134 = load i8*, i8** %133, align 16
  %135 = load i8*, i8** %15, align 16
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %134, i8* align 8 %135, i64 524328, i1 false)
  br label %136

136:                                              ; preds = %130, %56
  %137 = load i32, i32* %16, align 4
  %138 = icmp ult i32 %137, 3
  br i1 %138, label %139, label %157

139:                                              ; preds = %136
  %140 = tail call i8* @aom_malloc(i64 262168) #9
  %141 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %142 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %141, i64 0, i32 0, i32 22
  %143 = bitcast %struct.IntraBCMVCosts** %142 to i8**
  store i8* %140, i8** %143, align 8
  %144 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %145 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %144, i64 0, i32 0, i32 22
  %146 = load %struct.IntraBCMVCosts*, %struct.IntraBCMVCosts** %145, align 8
  %147 = icmp eq %struct.IntraBCMVCosts* %146, null
  br i1 %147, label %148, label %151

148:                                              ; preds = %139
  %149 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %13, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %149, i32 2, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.27, i64 0, i64 0)) #9
  %150 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  br label %151

151:                                              ; preds = %139, %148
  %152 = phi %struct.ThreadData* [ %144, %139 ], [ %150, %148 ]
  %153 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %152, i64 0, i32 0, i32 22
  %154 = bitcast %struct.IntraBCMVCosts** %153 to i8**
  %155 = load i8*, i8** %154, align 8
  %156 = load i8*, i8** %18, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %155, i8* align 8 %156, i64 262168, i1 false)
  br label %157

157:                                              ; preds = %48, %136, %151
  %158 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %159 = load i32, i32* %19, align 4
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %165

161:                                              ; preds = %157
  %162 = tail call i8* @aom_malloc(i64 3170544) #9
  %163 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %158, i64 0, i32 0, i32 58, i32 3
  %164 = bitcast %struct.TxbRdRecords** %163 to i8**
  store i8* %162, i8** %164, align 8
  br label %165

165:                                              ; preds = %161, %157
  %166 = load %struct.SequenceHeader*, %struct.SequenceHeader** %20, align 16
  %167 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %166, i64 0, i32 27
  %168 = load i8, i8* %167, align 1
  %169 = icmp eq i8 %168, 0
  %170 = select i1 %169, i64 3, i64 1
  br label %175

171:                                              ; preds = %196
  %172 = tail call i8* @aom_memalign(i64 16, i64 32768) #9
  %173 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %158, i64 0, i32 0, i32 2, i32 50
  store i8* %172, i8** %173, align 16
  %174 = icmp eq i8* %172, null
  br i1 %174, label %199, label %201

175:                                              ; preds = %196, %165
  %176 = phi i64 [ 0, %165 ], [ %197, %196 ]
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %185, label %178

178:                                              ; preds = %175
  %179 = load %struct.SequenceHeader*, %struct.SequenceHeader** %20, align 16
  %180 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %179, i64 0, i32 32
  %181 = load i32, i32* %180, align 8
  %182 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %179, i64 0, i32 33
  %183 = load i32, i32* %182, align 4
  %184 = add nsw i32 %183, %181
  br label %185

185:                                              ; preds = %178, %175
  %186 = phi i32 [ %184, %178 ], [ 0, %175 ]
  %187 = lshr i32 16384, %186
  %188 = sext i32 %187 to i64
  %189 = shl nsw i64 %188, 1
  %190 = tail call i8* @aom_memalign(i64 32, i64 %189) #9
  %191 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %158, i64 0, i32 0, i32 0, i64 %176, i32 0
  %192 = bitcast i16** %191 to i8**
  store i8* %190, i8** %192, align 8
  %193 = icmp eq i8* %190, null
  br i1 %193, label %194, label %196

194:                                              ; preds = %185
  %195 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %13, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %195, i32 2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.28, i64 0, i64 0)) #9
  br label %196

196:                                              ; preds = %194, %185
  %197 = add nuw nsw i64 %176, 1
  %198 = icmp eq i64 %197, %170
  br i1 %198, label %171, label %175

199:                                              ; preds = %171
  %200 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %13, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %200, i32 2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i64 0, i64 0)) #9
  br label %201

201:                                              ; preds = %199, %171
  %202 = load i8, i8* %21, align 16
  %203 = and i8 %202, -3
  %204 = icmp eq i8 %203, 0
  %205 = select i1 %204, i64 49896, i64 16632
  %206 = tail call i8* @aom_malloc(i64 %205) #9
  %207 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %158, i64 0, i32 0, i32 42
  %208 = bitcast %struct.WinnerModeStats** %207 to i8**
  store i8* %206, i8** %208, align 16
  %209 = icmp eq i8* %206, null
  br i1 %209, label %210, label %212

210:                                              ; preds = %201
  %211 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %13, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %211, i32 2, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.30, i64 0, i64 0)) #9
  br label %212

212:                                              ; preds = %201, %210
  %213 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %214 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %213, i64 0, i32 0
  tail call void @av1_init_cyclic_refresh_counters(%struct.macroblock* %214) #9
  %215 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %216 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %215, i64 0, i32 2
  %217 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %216, align 8
  %218 = icmp eq %struct.FRAME_COUNTS* %217, %22
  br i1 %218, label %221, label %219

219:                                              ; preds = %212
  %220 = bitcast %struct.FRAME_COUNTS* %217 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %220, i8* align 16 %23, i64 192, i1 false)
  br label %221

221:                                              ; preds = %212, %219
  %222 = icmp sgt i64 %36, 0
  br i1 %222, label %223, label %33

223:                                              ; preds = %221
  %224 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %225 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %224, i64 0, i32 9
  %226 = bitcast %struct.PALETTE_BUFFER** %225 to i64*
  %227 = load i64, i64* %226, align 16
  %228 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %224, i64 0, i32 0, i32 10
  %229 = bitcast %struct.PALETTE_BUFFER** %228 to i64*
  store i64 %227, i64* %229, align 16
  %230 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %231 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %230, i64 0, i32 0, i32 11
  %232 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %230, i64 0, i32 10
  %233 = bitcast %struct.CompoundTypeRdBuffers* %231 to i8*
  %234 = bitcast %struct.CompoundTypeRdBuffers* %232 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %233, i8* align 8 %234, i64 40, i1 false)
  %235 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %236 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %235, i64 0, i32 11
  %237 = bitcast i16** %236 to i64*
  %238 = load i64, i64* %237, align 16
  %239 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %235, i64 0, i32 0, i32 12
  %240 = bitcast i16** %239 to i64*
  store i64 %238, i64* %240, align 16
  %241 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %242 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %241, i64 0, i32 12, i64 0
  %243 = bitcast i8** %242 to i64*
  %244 = load i64, i64* %243, align 8
  %245 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %241, i64 0, i32 0, i32 14, i64 0
  %246 = bitcast i8** %245 to i64*
  store i64 %244, i64* %246, align 8
  %247 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %248 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %247, i64 0, i32 12, i64 1
  %249 = bitcast i8** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %247, i64 0, i32 0, i32 14, i64 1
  %252 = bitcast i8** %251 to i64*
  store i64 %250, i64* %252, align 8
  %253 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %254 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %253, i64 0, i32 24
  %255 = bitcast %struct.PixelLevelGradientInfo** %254 to i64*
  %256 = load i64, i64* %255, align 16
  %257 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %253, i64 0, i32 0, i32 53
  %258 = bitcast %struct.PixelLevelGradientInfo** %257 to i64*
  store i64 %256, i64* %258, align 8
  %259 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %260 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %259, i64 0, i32 0, i32 12
  %261 = bitcast i16** %260 to i64*
  %262 = load i64, i64* %261, align 16
  %263 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %259, i64 0, i32 0, i32 2, i32 53
  %264 = bitcast i16** %263 to i64*
  store i64 %262, i64* %264, align 16
  %265 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %266 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %265, i64 0, i32 0, i32 14, i64 0
  %267 = bitcast i8** %266 to i64*
  %268 = load i64, i64* %267, align 8
  %269 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %265, i64 0, i32 0, i32 2, i32 54, i64 0
  %270 = bitcast i8** %269 to i64*
  store i64 %268, i64* %270, align 8
  %271 = load %struct.ThreadData*, %struct.ThreadData** %49, align 8
  %272 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %271, i64 0, i32 0, i32 14, i64 1
  %273 = bitcast i8** %272 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %271, i64 0, i32 0, i32 2, i32 54, i64 1
  %276 = bitcast i8** %275 to i64*
  store i64 %274, i64* %276, align 8
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @enc_worker_hook(i8* nocapture readonly, i8* nocapture readnone) #1 {
  %3 = bitcast i8* %0 to %struct.AV1_COMP**
  %4 = load %struct.AV1_COMP*, %struct.AV1_COMP** %3, align 8
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 8, i32 38, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 8, i32 38, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds i8, i8* %0, i64 16
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = mul nsw i32 %8, %6
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %39

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 55
  %16 = getelementptr inbounds i8, i8* %0, i64 8
  %17 = bitcast i8* %16 to %struct.ThreadData**
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 61, i32 0
  br label %19

19:                                               ; preds = %37, %14
  %20 = phi i32 [ %6, %14 ], [ %38, %37 ]
  %21 = phi i32 [ %11, %14 ], [ %35, %37 ]
  %22 = sdiv i32 %21, %6
  %23 = srem i32 %21, %6
  %24 = load %struct.TileDataEnc*, %struct.TileDataEnc** %15, align 8
  %25 = mul nsw i32 %20, %22
  %26 = add nsw i32 %25, %23
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %24, i64 %27, i32 2
  %29 = load %struct.ThreadData*, %struct.ThreadData** %17, align 8
  %30 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %29, i64 0, i32 0, i32 2, i32 39
  store %struct.frame_contexts* %28, %struct.frame_contexts** %30, align 8
  %31 = load %struct.ThreadData*, %struct.ThreadData** %17, align 8
  %32 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %31, i64 0, i32 0, i32 6
  store %struct.frame_contexts* %28, %struct.frame_contexts** %32, align 8
  %33 = load %struct.ThreadData*, %struct.ThreadData** %17, align 8
  tail call void @av1_encode_tile(%struct.AV1_COMP* %4, %struct.ThreadData* %33, i32 %22, i32 %23) #9
  %34 = load i32, i32* %18, align 8
  %35 = add nsw i32 %34, %21
  %36 = icmp slt i32 %35, %12
  br i1 %36, label %37, label %39

37:                                               ; preds = %19
  %38 = load i32, i32* %5, align 8
  br label %19

39:                                               ; preds = %19, %2
  ret i32 1
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @accumulate_counters_enc_workers(%struct.AV1_COMP*, i32) unnamed_addr #6 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %63

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 4
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 63
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 72
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 5
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 22, i32 2
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 22, i32 3
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 0, i64 0
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 0, i64 1
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 0, i64 2
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 1
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 2
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 5, i64 0
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 5, i64 1
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 58, i32 4
  %23 = sext i32 %1 to i64
  %24 = getelementptr %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 0
  %25 = getelementptr %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 0
  %26 = bitcast %struct.MB_MODE_INFO_EXT_FRAME** %25 to %struct.FRAME_COUNTS*
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 0
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = bitcast i32* %27 to <4 x i32>*
  %30 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 4
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = bitcast i32* %30 to <4 x i32>*
  %33 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 8
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = bitcast i32* %33 to <4 x i32>*
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 12
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = bitcast i32* %36 to <4 x i32>*
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 16
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = bitcast i32* %39 to <4 x i32>*
  %42 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 20
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = bitcast i32* %42 to <4 x i32>*
  %45 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 24
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = bitcast i32* %45 to <4 x i32>*
  %48 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 28
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = bitcast i32* %48 to <4 x i32>*
  %51 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 32
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = bitcast i32* %51 to <4 x i32>*
  %54 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 36
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = bitcast i32* %54 to <4 x i32>*
  %57 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 40
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = bitcast i32* %57 to <4 x i32>*
  %60 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 44
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = bitcast i32* %60 to <4 x i32>*
  br label %64

63:                                               ; preds = %144, %372, %2
  ret void

64:                                               ; preds = %4, %372
  %65 = phi i64 [ %23, %4 ], [ %66, %372 ]
  %66 = add nsw i64 %65, -1
  %67 = load %struct.AVxWorker*, %struct.AVxWorker** %5, align 8
  %68 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %67, i64 %66, i32 4
  %69 = bitcast i8** %68 to %struct.EncWorkerData**
  %70 = load %struct.EncWorkerData*, %struct.EncWorkerData** %69, align 8
  %71 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %70, i64 0, i32 1
  %72 = load %struct.ThreadData*, %struct.ThreadData** %71, align 8
  %73 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %72, i64 0, i32 13
  %74 = load i32, i32* %73, align 8
  %75 = load i32, i32* %6, align 4
  %76 = or i32 %75, %74
  store i32 %76, i32* %6, align 4
  %77 = load %struct.ThreadData*, %struct.ThreadData** %71, align 8
  %78 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %77, i64 0, i32 14
  %79 = load i32, i32* %78, align 4
  %80 = load i32, i32* %7, align 4
  %81 = or i32 %80, %79
  store i32 %81, i32* %7, align 4
  %82 = load i8, i8* %8, align 8
  %83 = icmp eq i8 %82, 3
  br i1 %83, label %84, label %92

84:                                               ; preds = %64
  %85 = load i8, i8* %9, align 16
  %86 = and i8 %85, -3
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %92, label %88

88:                                               ; preds = %84
  %89 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %10, align 8
  %90 = load %struct.ThreadData*, %struct.ThreadData** %71, align 8
  %91 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %90, i64 0, i32 0
  tail call void @av1_accumulate_cyclic_refresh_counters(%struct.CYCLIC_REFRESH* %89, %struct.macroblock* %91) #9
  br label %92

92:                                               ; preds = %84, %88, %64
  %93 = load %struct.ThreadData*, %struct.ThreadData** %71, align 8
  %94 = icmp eq %struct.ThreadData* %93, %11
  br i1 %94, label %110, label %95

95:                                               ; preds = %92
  %96 = load i32, i32* %12, align 8
  %97 = icmp ult i32 %96, 3
  br i1 %97, label %98, label %102

98:                                               ; preds = %95
  %99 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %93, i64 0, i32 0, i32 21
  %100 = bitcast %struct.MvCosts** %99 to i8**
  %101 = load i8*, i8** %100, align 16
  tail call void @aom_free(i8* %101) #9
  br label %102

102:                                              ; preds = %98, %95
  %103 = load i32, i32* %13, align 4
  %104 = icmp ult i32 %103, 3
  br i1 %104, label %105, label %110

105:                                              ; preds = %102
  %106 = load %struct.ThreadData*, %struct.ThreadData** %71, align 8
  %107 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %106, i64 0, i32 0, i32 22
  %108 = bitcast %struct.IntraBCMVCosts** %107 to i8**
  %109 = load i8*, i8** %108, align 8
  tail call void @aom_free(i8* %109) #9
  br label %110

110:                                              ; preds = %92, %102, %105
  %111 = load %struct.ThreadData*, %struct.ThreadData** %71, align 8
  %112 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %111, i64 0, i32 0, i32 58, i32 3
  %113 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %112, align 8
  %114 = icmp eq %struct.TxbRdRecords* %113, null
  br i1 %114, label %117, label %115

115:                                              ; preds = %110
  %116 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %113, i64 0, i32 0, i32 0, i64 0, i32 0
  tail call void @aom_free(i8* %116) #9
  store %struct.TxbRdRecords* null, %struct.TxbRdRecords** %112, align 8
  br label %117

117:                                              ; preds = %115, %110
  %118 = load %struct.SequenceHeader*, %struct.SequenceHeader** %14, align 16
  %119 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %118, i64 0, i32 27
  %120 = load i8, i8* %119, align 1
  %121 = icmp eq i8 %120, 0
  %122 = select i1 %121, i64 3, i64 1
  br label %127

123:                                              ; preds = %134
  %124 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %111, i64 0, i32 0, i32 2, i32 50
  %125 = load i8*, i8** %124, align 16
  %126 = icmp eq i8* %125, null
  br i1 %126, label %138, label %137

127:                                              ; preds = %134, %117
  %128 = phi i64 [ 0, %117 ], [ %135, %134 ]
  %129 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %111, i64 0, i32 0, i32 0, i64 %128, i32 0
  %130 = load i16*, i16** %129, align 8
  %131 = icmp eq i16* %130, null
  br i1 %131, label %134, label %132

132:                                              ; preds = %127
  %133 = bitcast i16* %130 to i8*
  tail call void @aom_free(i8* nonnull %133) #9
  store i16* null, i16** %129, align 8
  br label %134

134:                                              ; preds = %132, %127
  %135 = add nuw nsw i64 %128, 1
  %136 = icmp eq i64 %135, %122
  br i1 %136, label %123, label %127

137:                                              ; preds = %123
  tail call void @aom_free(i8* nonnull %125) #9
  store i8* null, i8** %124, align 16
  br label %138

138:                                              ; preds = %137, %123
  %139 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %111, i64 0, i32 0, i32 42
  %140 = load %struct.WinnerModeStats*, %struct.WinnerModeStats** %139, align 16
  %141 = icmp eq %struct.WinnerModeStats* %140, null
  br i1 %141, label %144, label %142

142:                                              ; preds = %138
  %143 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %140, i64 0, i32 0, i32 0
  tail call void @aom_free(i8* %143) #9
  store %struct.WinnerModeStats* null, %struct.WinnerModeStats** %139, align 16
  br label %144

144:                                              ; preds = %138, %142
  %145 = icmp sgt i64 %66, 0
  br i1 %145, label %146, label %63

146:                                              ; preds = %144
  %147 = load %struct.ThreadData*, %struct.ThreadData** %71, align 8
  %148 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %147, i64 0, i32 2
  %149 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %148, align 8
  %150 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 1, i32 0, i64 0, i64 0
  %151 = icmp ult i32* %24, %150
  %152 = icmp ult %struct.FRAME_COUNTS* %149, %26
  %153 = and i1 %151, %152
  br i1 %153, label %214, label %154

154:                                              ; preds = %146
  %155 = bitcast %struct.FRAME_COUNTS* %149 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4, !alias.scope !3
  %157 = load <4 x i32>, <4 x i32>* %28, align 4, !alias.scope !6, !noalias !3
  %158 = add <4 x i32> %157, %156
  store <4 x i32> %158, <4 x i32>* %29, align 4, !alias.scope !6, !noalias !3
  %159 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 4
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4, !alias.scope !3
  %162 = load <4 x i32>, <4 x i32>* %31, align 4, !alias.scope !6, !noalias !3
  %163 = add <4 x i32> %162, %161
  store <4 x i32> %163, <4 x i32>* %32, align 4, !alias.scope !6, !noalias !3
  %164 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 8
  %165 = bitcast i32* %164 to <4 x i32>*
  %166 = load <4 x i32>, <4 x i32>* %165, align 4, !alias.scope !3
  %167 = load <4 x i32>, <4 x i32>* %34, align 4, !alias.scope !6, !noalias !3
  %168 = add <4 x i32> %167, %166
  store <4 x i32> %168, <4 x i32>* %35, align 4, !alias.scope !6, !noalias !3
  %169 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 12
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4, !alias.scope !3
  %172 = load <4 x i32>, <4 x i32>* %37, align 4, !alias.scope !6, !noalias !3
  %173 = add <4 x i32> %172, %171
  store <4 x i32> %173, <4 x i32>* %38, align 4, !alias.scope !6, !noalias !3
  %174 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 16
  %175 = bitcast i32* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 4, !alias.scope !3
  %177 = load <4 x i32>, <4 x i32>* %40, align 4, !alias.scope !6, !noalias !3
  %178 = add <4 x i32> %177, %176
  store <4 x i32> %178, <4 x i32>* %41, align 4, !alias.scope !6, !noalias !3
  %179 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 20
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 4, !alias.scope !3
  %182 = load <4 x i32>, <4 x i32>* %43, align 4, !alias.scope !6, !noalias !3
  %183 = add <4 x i32> %182, %181
  store <4 x i32> %183, <4 x i32>* %44, align 4, !alias.scope !6, !noalias !3
  %184 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 24
  %185 = bitcast i32* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 4, !alias.scope !3
  %187 = load <4 x i32>, <4 x i32>* %46, align 4, !alias.scope !6, !noalias !3
  %188 = add <4 x i32> %187, %186
  store <4 x i32> %188, <4 x i32>* %47, align 4, !alias.scope !6, !noalias !3
  %189 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 28
  %190 = bitcast i32* %189 to <4 x i32>*
  %191 = load <4 x i32>, <4 x i32>* %190, align 4, !alias.scope !3
  %192 = load <4 x i32>, <4 x i32>* %49, align 4, !alias.scope !6, !noalias !3
  %193 = add <4 x i32> %192, %191
  store <4 x i32> %193, <4 x i32>* %50, align 4, !alias.scope !6, !noalias !3
  %194 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 32
  %195 = bitcast i32* %194 to <4 x i32>*
  %196 = load <4 x i32>, <4 x i32>* %195, align 4, !alias.scope !3
  %197 = load <4 x i32>, <4 x i32>* %52, align 4, !alias.scope !6, !noalias !3
  %198 = add <4 x i32> %197, %196
  store <4 x i32> %198, <4 x i32>* %53, align 4, !alias.scope !6, !noalias !3
  %199 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 36
  %200 = bitcast i32* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 4, !alias.scope !3
  %202 = load <4 x i32>, <4 x i32>* %55, align 4, !alias.scope !6, !noalias !3
  %203 = add <4 x i32> %202, %201
  store <4 x i32> %203, <4 x i32>* %56, align 4, !alias.scope !6, !noalias !3
  %204 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 40
  %205 = bitcast i32* %204 to <4 x i32>*
  %206 = load <4 x i32>, <4 x i32>* %205, align 4, !alias.scope !3
  %207 = load <4 x i32>, <4 x i32>* %58, align 4, !alias.scope !6, !noalias !3
  %208 = add <4 x i32> %207, %206
  store <4 x i32> %208, <4 x i32>* %59, align 4, !alias.scope !6, !noalias !3
  %209 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 44
  %210 = bitcast i32* %209 to <4 x i32>*
  %211 = load <4 x i32>, <4 x i32>* %210, align 4, !alias.scope !3
  %212 = load <4 x i32>, <4 x i32>* %61, align 4, !alias.scope !6, !noalias !3
  %213 = add <4 x i32> %212, %211
  store <4 x i32> %213, <4 x i32>* %62, align 4, !alias.scope !6, !noalias !3
  br label %241

214:                                              ; preds = %146, %214
  %215 = phi i64 [ %239, %214 ], [ 0, %146 ]
  %216 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 %215
  %217 = load i32, i32* %216, align 4
  %218 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 %215
  %219 = load i32, i32* %218, align 4
  %220 = add i32 %219, %217
  store i32 %220, i32* %218, align 4
  %221 = or i64 %215, 1
  %222 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 %221
  %225 = load i32, i32* %224, align 4
  %226 = add i32 %225, %223
  store i32 %226, i32* %224, align 4
  %227 = or i64 %215, 2
  %228 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 %227
  %231 = load i32, i32* %230, align 4
  %232 = add i32 %231, %229
  store i32 %232, i32* %230, align 4
  %233 = or i64 %215, 3
  %234 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %149, i64 0, i32 0, i64 0, i64 %233
  %235 = load i32, i32* %234, align 4
  %236 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 4, i32 0, i64 0, i64 %233
  %237 = load i32, i32* %236, align 4
  %238 = add i32 %237, %235
  store i32 %238, i32* %236, align 4
  %239 = add nuw nsw i64 %215, 4
  %240 = icmp eq i64 %239, 48
  br i1 %240, label %241, label %214, !llvm.loop !8

241:                                              ; preds = %214, %154
  %242 = load %struct.ThreadData*, %struct.ThreadData** %71, align 8
  %243 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 0, i64 0
  %244 = load i64, i64* %243, align 8
  %245 = load i64, i64* %15, align 8
  %246 = add nsw i64 %245, %244
  store i64 %246, i64* %15, align 8
  %247 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 0, i64 1
  %248 = load i64, i64* %247, align 8
  %249 = load i64, i64* %16, align 8
  %250 = add nsw i64 %249, %248
  store i64 %250, i64* %16, align 8
  %251 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 0, i64 2
  %252 = load i64, i64* %251, align 8
  %253 = load i64, i64* %17, align 8
  %254 = add nsw i64 %253, %252
  store i64 %254, i64* %17, align 8
  %255 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 1
  %256 = load i32, i32* %255, align 8
  %257 = load i32, i32* %18, align 8
  %258 = or i32 %257, %256
  store i32 %258, i32* %18, align 8
  %259 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 2
  %260 = load i32, i32* %259, align 4
  %261 = load i32, i32* %19, align 4
  %262 = or i32 %261, %260
  store i32 %262, i32* %19, align 4
  br label %263

263:                                              ; preds = %263, %241
  %264 = phi i64 [ 0, %241 ], [ %345, %263 ]
  %265 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 0
  %266 = load i32, i32* %265, align 4
  %267 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 0
  %268 = load i32, i32* %267, align 4
  %269 = add nsw i32 %268, %266
  store i32 %269, i32* %267, align 4
  %270 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 1
  %271 = load i32, i32* %270, align 4
  %272 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 1
  %273 = load i32, i32* %272, align 4
  %274 = add nsw i32 %273, %271
  store i32 %274, i32* %272, align 4
  %275 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 2
  %276 = load i32, i32* %275, align 4
  %277 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 2
  %278 = load i32, i32* %277, align 4
  %279 = add nsw i32 %278, %276
  store i32 %279, i32* %277, align 4
  %280 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 3
  %281 = load i32, i32* %280, align 4
  %282 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 3
  %283 = load i32, i32* %282, align 4
  %284 = add nsw i32 %283, %281
  store i32 %284, i32* %282, align 4
  %285 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 4
  %286 = load i32, i32* %285, align 4
  %287 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 4
  %288 = load i32, i32* %287, align 4
  %289 = add nsw i32 %288, %286
  store i32 %289, i32* %287, align 4
  %290 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 5
  %291 = load i32, i32* %290, align 4
  %292 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 5
  %293 = load i32, i32* %292, align 4
  %294 = add nsw i32 %293, %291
  store i32 %294, i32* %292, align 4
  %295 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 6
  %296 = load i32, i32* %295, align 4
  %297 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 6
  %298 = load i32, i32* %297, align 4
  %299 = add nsw i32 %298, %296
  store i32 %299, i32* %297, align 4
  %300 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 7
  %301 = load i32, i32* %300, align 4
  %302 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 7
  %303 = load i32, i32* %302, align 4
  %304 = add nsw i32 %303, %301
  store i32 %304, i32* %302, align 4
  %305 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 8
  %306 = load i32, i32* %305, align 4
  %307 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 8
  %308 = load i32, i32* %307, align 4
  %309 = add nsw i32 %308, %306
  store i32 %309, i32* %307, align 4
  %310 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 9
  %311 = load i32, i32* %310, align 4
  %312 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 9
  %313 = load i32, i32* %312, align 4
  %314 = add nsw i32 %313, %311
  store i32 %314, i32* %312, align 4
  %315 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 10
  %316 = load i32, i32* %315, align 4
  %317 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 10
  %318 = load i32, i32* %317, align 4
  %319 = add nsw i32 %318, %316
  store i32 %319, i32* %317, align 4
  %320 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 11
  %321 = load i32, i32* %320, align 4
  %322 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 11
  %323 = load i32, i32* %322, align 4
  %324 = add nsw i32 %323, %321
  store i32 %324, i32* %322, align 4
  %325 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 12
  %326 = load i32, i32* %325, align 4
  %327 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 12
  %328 = load i32, i32* %327, align 4
  %329 = add nsw i32 %328, %326
  store i32 %329, i32* %327, align 4
  %330 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 13
  %331 = load i32, i32* %330, align 4
  %332 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 13
  %333 = load i32, i32* %332, align 4
  %334 = add nsw i32 %333, %331
  store i32 %334, i32* %332, align 4
  %335 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 14
  %336 = load i32, i32* %335, align 4
  %337 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 14
  %338 = load i32, i32* %337, align 4
  %339 = add nsw i32 %338, %336
  store i32 %339, i32* %337, align 4
  %340 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 3, i64 %264, i64 15
  %341 = load i32, i32* %340, align 4
  %342 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 3, i64 %264, i64 15
  %343 = load i32, i32* %342, align 4
  %344 = add nsw i32 %343, %341
  store i32 %344, i32* %342, align 4
  %345 = add nuw nsw i64 %264, 1
  %346 = icmp eq i64 %345, 19
  br i1 %346, label %347, label %263

347:                                              ; preds = %263, %347
  %348 = phi i64 [ %370, %347 ], [ 0, %263 ]
  %349 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 4, i64 %348, i64 0
  %350 = load i32, i32* %349, align 4
  %351 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 4, i64 %348, i64 0
  %352 = load i32, i32* %351, align 4
  %353 = add nsw i32 %352, %350
  store i32 %353, i32* %351, align 4
  %354 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 4, i64 %348, i64 1
  %355 = load i32, i32* %354, align 4
  %356 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 4, i64 %348, i64 1
  %357 = load i32, i32* %356, align 4
  %358 = add nsw i32 %357, %355
  store i32 %358, i32* %356, align 4
  %359 = or i64 %348, 1
  %360 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 4, i64 %359, i64 0
  %361 = load i32, i32* %360, align 4
  %362 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 4, i64 %359, i64 0
  %363 = load i32, i32* %362, align 4
  %364 = add nsw i32 %363, %361
  store i32 %364, i32* %362, align 4
  %365 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 4, i64 %359, i64 1
  %366 = load i32, i32* %365, align 4
  %367 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 1, i32 4, i64 %359, i64 1
  %368 = load i32, i32* %367, align 4
  %369 = add nsw i32 %368, %366
  store i32 %369, i32* %367, align 4
  %370 = add nuw nsw i64 %348, 2
  %371 = icmp eq i64 %370, 22
  br i1 %371, label %372, label %347

372:                                              ; preds = %347
  %373 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 5, i64 0
  %374 = load i32, i32* %373, align 4
  %375 = load i32, i32* %20, align 4
  %376 = add nsw i32 %375, %374
  store i32 %376, i32* %20, align 4
  %377 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %242, i64 0, i32 1, i32 5, i64 1
  %378 = load i32, i32* %377, align 4
  %379 = load i32, i32* %21, align 4
  %380 = add nsw i32 %379, %378
  store i32 %380, i32* %21, align 4
  %381 = load %struct.ThreadData*, %struct.ThreadData** %71, align 8
  %382 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %381, i64 0, i32 0, i32 58, i32 4
  %383 = load i32, i32* %382, align 16
  %384 = load i32, i32* %22, align 16
  %385 = add i32 %384, %383
  store i32 %385, i32* %22, align 16
  br i1 %145, label %64, label %63
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_accumulate_frame_counts(%struct.FRAME_COUNTS* nocapture, %struct.FRAME_COUNTS* nocapture readonly) local_unnamed_addr #7 {
  %3 = getelementptr %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 1
  %4 = getelementptr %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 1
  %5 = icmp ugt %struct.FRAME_COUNTS* %4, %0
  %6 = icmp ugt %struct.FRAME_COUNTS* %3, %1
  %7 = and i1 %5, %6
  br i1 %7, label %104, label %8

8:                                                ; preds = %2
  %9 = bitcast %struct.FRAME_COUNTS* %1 to <4 x i32>*
  %10 = load <4 x i32>, <4 x i32>* %9, align 4, !alias.scope !10
  %11 = bitcast %struct.FRAME_COUNTS* %0 to <4 x i32>*
  %12 = load <4 x i32>, <4 x i32>* %11, align 4, !alias.scope !13, !noalias !10
  %13 = add <4 x i32> %12, %10
  %14 = bitcast %struct.FRAME_COUNTS* %0 to <4 x i32>*
  store <4 x i32> %13, <4 x i32>* %14, align 4, !alias.scope !13, !noalias !10
  %15 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 4
  %16 = bitcast i32* %15 to <4 x i32>*
  %17 = load <4 x i32>, <4 x i32>* %16, align 4, !alias.scope !10
  %18 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 4
  %19 = bitcast i32* %18 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 4, !alias.scope !13, !noalias !10
  %21 = add <4 x i32> %20, %17
  %22 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %22, align 4, !alias.scope !13, !noalias !10
  %23 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 8
  %24 = bitcast i32* %23 to <4 x i32>*
  %25 = load <4 x i32>, <4 x i32>* %24, align 4, !alias.scope !10
  %26 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 8
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4, !alias.scope !13, !noalias !10
  %29 = add <4 x i32> %28, %25
  %30 = bitcast i32* %26 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %30, align 4, !alias.scope !13, !noalias !10
  %31 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 12
  %32 = bitcast i32* %31 to <4 x i32>*
  %33 = load <4 x i32>, <4 x i32>* %32, align 4, !alias.scope !10
  %34 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 12
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4, !alias.scope !13, !noalias !10
  %37 = add <4 x i32> %36, %33
  %38 = bitcast i32* %34 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %38, align 4, !alias.scope !13, !noalias !10
  %39 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 16
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !alias.scope !10
  %42 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 16
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4, !alias.scope !13, !noalias !10
  %45 = add <4 x i32> %44, %41
  %46 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> %45, <4 x i32>* %46, align 4, !alias.scope !13, !noalias !10
  %47 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 20
  %48 = bitcast i32* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 4, !alias.scope !10
  %50 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 20
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 4, !alias.scope !13, !noalias !10
  %53 = add <4 x i32> %52, %49
  %54 = bitcast i32* %50 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %54, align 4, !alias.scope !13, !noalias !10
  %55 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 24
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4, !alias.scope !10
  %58 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 24
  %59 = bitcast i32* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 4, !alias.scope !13, !noalias !10
  %61 = add <4 x i32> %60, %57
  %62 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %62, align 4, !alias.scope !13, !noalias !10
  %63 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 28
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4, !alias.scope !10
  %66 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 28
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4, !alias.scope !13, !noalias !10
  %69 = add <4 x i32> %68, %65
  %70 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %70, align 4, !alias.scope !13, !noalias !10
  %71 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 32
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4, !alias.scope !10
  %74 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 32
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 4, !alias.scope !13, !noalias !10
  %77 = add <4 x i32> %76, %73
  %78 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %78, align 4, !alias.scope !13, !noalias !10
  %79 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 36
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !10
  %82 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 36
  %83 = bitcast i32* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 4, !alias.scope !13, !noalias !10
  %85 = add <4 x i32> %84, %81
  %86 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %86, align 4, !alias.scope !13, !noalias !10
  %87 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 40
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !10
  %90 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 40
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !13, !noalias !10
  %93 = add <4 x i32> %92, %89
  %94 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %94, align 4, !alias.scope !13, !noalias !10
  %95 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 44
  %96 = bitcast i32* %95 to <4 x i32>*
  %97 = load <4 x i32>, <4 x i32>* %96, align 4, !alias.scope !10
  %98 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 44
  %99 = bitcast i32* %98 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !13, !noalias !10
  %101 = add <4 x i32> %100, %97
  %102 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %102, align 4, !alias.scope !13, !noalias !10
  br label %103

103:                                              ; preds = %104, %8
  ret void

104:                                              ; preds = %2, %104
  %105 = phi i64 [ %129, %104 ], [ 0, %2 ]
  %106 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 %105
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 %105
  %109 = load i32, i32* %108, align 4
  %110 = add i32 %109, %107
  store i32 %110, i32* %108, align 4
  %111 = or i64 %105, 1
  %112 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 %111
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 %111
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %115, %113
  store i32 %116, i32* %114, align 4
  %117 = or i64 %105, 2
  %118 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 %117
  %119 = load i32, i32* %118, align 4
  %120 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 %117
  %121 = load i32, i32* %120, align 4
  %122 = add i32 %121, %119
  store i32 %122, i32* %120, align 4
  %123 = or i64 %105, 3
  %124 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1, i64 0, i32 0, i64 0, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %0, i64 0, i32 0, i64 0, i64 %123
  %127 = load i32, i32* %126, align 4
  %128 = add i32 %127, %125
  store i32 %128, i32* %126, align 4
  %129 = add nuw nsw i64 %105, 4
  %130 = icmp eq i64 %129, 48
  br i1 %130, label %103, label %104, !llvm.loop !15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_encode_tiles_row_mt(%struct.AV1_COMP*) local_unnamed_addr #1 {
  %2 = alloca %struct.TileInfo, align 8
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 4, i64 0
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 4
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 56
  %12 = load i32, i32* %11, align 16
  %13 = mul nsw i32 %7, %5
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %15, label %16

15:                                               ; preds = %1
  tail call void @av1_row_mt_mem_dealloc(%struct.AV1_COMP* %0)
  tail call void @av1_alloc_tile_data(%struct.AV1_COMP* %0) #9
  br label %16

16:                                               ; preds = %15, %1
  tail call void @av1_init_tile_data(%struct.AV1_COMP* %0) #9
  %17 = load i32, i32* %4, align 8
  %18 = load i32, i32* %6, align 4
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %52

20:                                               ; preds = %16
  %21 = icmp sgt i32 %17, 0
  %22 = bitcast %struct.TileInfo* %2 to i8*
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 55
  br label %24

24:                                               ; preds = %28, %20
  %25 = phi i32 [ 0, %20 ], [ %29, %28 ]
  %26 = phi i32 [ 0, %20 ], [ %30, %28 ]
  %27 = phi i32 [ 0, %20 ], [ %31, %28 ]
  br i1 %21, label %33, label %28

28:                                               ; preds = %33, %24
  %29 = phi i32 [ %25, %24 ], [ %47, %33 ]
  %30 = phi i32 [ %26, %24 ], [ %49, %33 ]
  %31 = add nuw nsw i32 %27, 1
  %32 = icmp eq i32 %31, %18
  br i1 %32, label %52, label %24

33:                                               ; preds = %24, %33
  %34 = phi i32 [ %47, %33 ], [ %25, %24 ]
  %35 = phi i32 [ %49, %33 ], [ %26, %24 ]
  %36 = phi i32 [ %50, %33 ], [ 0, %24 ]
  %37 = load i32, i32* %4, align 8
  %38 = mul nsw i32 %37, %27
  %39 = add nsw i32 %38, %36
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 24, i1 false) #9
  %40 = load %struct.TileDataEnc*, %struct.TileDataEnc** %23, align 8
  %41 = sext i32 %39 to i64
  %42 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %40, i64 %41, i32 0
  %43 = bitcast %struct.TileInfo* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 16 %43, i64 24, i1 false) #9
  %44 = tail call i32 @av1_get_sb_rows_in_tile(%struct.AV1Common* %3, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %42) #9
  %45 = tail call i32 @av1_get_sb_cols_in_tile(%struct.AV1Common* %3, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %2) #9
  %46 = icmp sgt i32 %34, %44
  %47 = select i1 %46, i32 %34, i32 %44
  %48 = icmp sgt i32 %35, %45
  %49 = select i1 %48, i32 %35, i32 %45
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #9
  %50 = add nuw nsw i32 %36, 1
  %51 = icmp eq i32 %50, %17
  br i1 %51, label %28, label %33

52:                                               ; preds = %28, %16
  %53 = phi i32 [ 0, %16 ], [ %29, %28 ]
  %54 = phi i32 [ 0, %16 ], [ %30, %28 ]
  %55 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, %5
  br i1 %57, label %58, label %71

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = icmp eq i32 %60, %7
  br i1 %61, label %62, label %71

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 2
  %64 = load i32, i32* %63, align 8
  %65 = icmp eq i32 %64, %53
  br i1 %65, label %66, label %71

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 3
  %68 = load i32, i32* %67, align 4
  %69 = add nsw i32 %54, -1
  %70 = icmp eq i32 %68, %69
  br i1 %70, label %177, label %71

71:                                               ; preds = %66, %62, %58, %52
  tail call void @av1_row_mt_mem_dealloc(%struct.AV1_COMP* %0)
  %72 = load i32, i32* %4, align 8
  %73 = load i32, i32* %6, align 4
  %74 = icmp sgt i32 %73, 0
  br i1 %74, label %75, label %172

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 2, i32 4
  %77 = load i8, i8* %76, align 16
  %78 = icmp sgt i32 %72, 0
  %79 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 55
  %80 = sext i32 %53 to i64
  %81 = mul nsw i64 %80, 40
  %82 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %83 = icmp sgt i32 %53, 0
  %84 = zext i32 %53 to i64
  %85 = icmp eq i32 %53, 1
  %86 = mul nsw i64 %80, 48
  %87 = shl nsw i64 %80, 2
  %88 = icmp eq i8 %77, 0
  %89 = icmp sgt i32 %54, 2
  %90 = select i1 %89, i32 %54, i32 2
  %91 = add nsw i32 %90, -1
  %92 = zext i32 %91 to i64
  %93 = mul nuw nsw i64 %92, 21264
  %94 = sext i32 %72 to i64
  %95 = zext i32 %73 to i64
  %96 = zext i32 %72 to i64
  br label %97

97:                                               ; preds = %169, %75
  %98 = phi i64 [ 0, %75 ], [ %170, %169 ]
  br i1 %78, label %99, label %169

99:                                               ; preds = %97
  %100 = mul nsw i64 %98, %94
  br label %101

101:                                              ; preds = %166, %99
  %102 = phi i64 [ 0, %99 ], [ %167, %166 ]
  %103 = add nsw i64 %102, %100
  %104 = load %struct.TileDataEnc*, %struct.TileDataEnc** %79, align 8
  %105 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %104, i64 %103, i32 6
  %106 = tail call i8* @aom_malloc(i64 %81) #9
  %107 = getelementptr inbounds %struct.AV1EncRowMultiThreadSync, %struct.AV1EncRowMultiThreadSync* %105, i64 0, i32 0
  %108 = bitcast %struct.AV1EncRowMultiThreadSync* %105 to i8**
  store i8* %106, i8** %108, align 8
  %109 = icmp eq i8* %106, null
  %110 = bitcast i8* %106 to %union.pthread_mutex_t*
  br i1 %109, label %111, label %114

111:                                              ; preds = %101
  %112 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %82, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %112, i32 2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.33, i64 0, i64 0)) #9
  %113 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %107, align 8
  br label %114

114:                                              ; preds = %111, %101
  %115 = phi %union.pthread_mutex_t* [ %110, %101 ], [ %113, %111 ]
  %116 = icmp ne %union.pthread_mutex_t* %115, null
  %117 = and i1 %83, %116
  br i1 %117, label %118, label %127

118:                                              ; preds = %114
  %119 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %115, %union.pthread_mutexattr_t* null) #9
  br i1 %85, label %127, label %120

120:                                              ; preds = %118, %120
  %121 = phi i64 [ %125, %120 ], [ 1, %118 ]
  %122 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %107, align 8
  %123 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %122, i64 %121
  %124 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* %123, %union.pthread_mutexattr_t* null) #9
  %125 = add nuw nsw i64 %121, 1
  %126 = icmp eq i64 %125, %84
  br i1 %126, label %127, label %120

127:                                              ; preds = %120, %118, %114
  %128 = tail call i8* @aom_malloc(i64 %86) #9
  %129 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %104, i64 %103, i32 6, i32 1
  %130 = bitcast %union.pthread_cond_t** %129 to i8**
  store i8* %128, i8** %130, align 8
  %131 = icmp eq i8* %128, null
  %132 = bitcast i8* %128 to %union.pthread_cond_t*
  br i1 %131, label %133, label %136

133:                                              ; preds = %127
  %134 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %82, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %134, i32 2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.34, i64 0, i64 0)) #9
  %135 = load %union.pthread_cond_t*, %union.pthread_cond_t** %129, align 8
  br label %136

136:                                              ; preds = %133, %127
  %137 = phi %union.pthread_cond_t* [ %132, %127 ], [ %135, %133 ]
  %138 = icmp ne %union.pthread_cond_t* %137, null
  %139 = and i1 %83, %138
  br i1 %139, label %140, label %149

140:                                              ; preds = %136
  %141 = tail call i32 @pthread_cond_init(%union.pthread_cond_t* nonnull %137, %union.pthread_condattr_t* null) #9
  br i1 %85, label %149, label %142

142:                                              ; preds = %140, %142
  %143 = phi i64 [ %147, %142 ], [ 1, %140 ]
  %144 = load %union.pthread_cond_t*, %union.pthread_cond_t** %129, align 8
  %145 = getelementptr inbounds %union.pthread_cond_t, %union.pthread_cond_t* %144, i64 %143
  %146 = tail call i32 @pthread_cond_init(%union.pthread_cond_t* %145, %union.pthread_condattr_t* null) #9
  %147 = add nuw nsw i64 %143, 1
  %148 = icmp eq i64 %147, %84
  br i1 %148, label %149, label %142

149:                                              ; preds = %142, %140, %136
  %150 = tail call i8* @aom_malloc(i64 %87) #9
  %151 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %104, i64 %103, i32 6, i32 2
  %152 = bitcast i32** %151 to i8**
  store i8* %150, i8** %152, align 8
  %153 = icmp eq i8* %150, null
  br i1 %153, label %154, label %156

154:                                              ; preds = %149
  %155 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %82, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %155, i32 2, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.35, i64 0, i64 0)) #9
  br label %156

156:                                              ; preds = %154, %149
  %157 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %104, i64 %103, i32 6, i32 4
  store i32 %53, i32* %157, align 4
  %158 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %104, i64 %103, i32 6, i32 3
  store i32 1, i32* %158, align 8
  %159 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %104, i64 %103, i32 3
  store %struct.frame_contexts* null, %struct.frame_contexts** %159, align 16
  br i1 %88, label %166, label %160

160:                                              ; preds = %156
  %161 = tail call i8* @aom_memalign(i64 16, i64 %93) #9
  %162 = bitcast %struct.frame_contexts** %159 to i8**
  store i8* %161, i8** %162, align 16
  %163 = icmp eq i8* %161, null
  br i1 %163, label %164, label %166

164:                                              ; preds = %160
  %165 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %82, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %165, i32 2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.32, i64 0, i64 0)) #9
  br label %166

166:                                              ; preds = %164, %160, %156
  %167 = add nuw nsw i64 %102, 1
  %168 = icmp eq i64 %167, %96
  br i1 %168, label %169, label %101

169:                                              ; preds = %166, %97
  %170 = add nuw nsw i64 %98, 1
  %171 = icmp eq i64 %170, %95
  br i1 %171, label %172, label %97

172:                                              ; preds = %169, %71
  store i32 %72, i32* %55, align 4
  %173 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 0
  store i32 %73, i32* %173, align 8
  %174 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 2
  store i32 %53, i32* %174, align 8
  %175 = add nsw i32 %54, -1
  %176 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 3
  store i32 %175, i32* %176, align 4
  br label %177

177:                                              ; preds = %66, %172
  %178 = bitcast i32* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %178, i8 -1, i64 256, i1 false)
  %179 = icmp sgt i32 %7, 0
  br i1 %179, label %180, label %199

180:                                              ; preds = %177
  %181 = icmp sgt i32 %5, 0
  %182 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 55
  %183 = sext i32 %53 to i64
  %184 = shl nsw i64 %183, 2
  %185 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %186 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 40, i32 1, i64 0
  %187 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 40, i32 1, i64 1
  %188 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 40, i32 1, i64 2
  %189 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 45
  %190 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 40, i32 0
  %191 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 40, i32 2
  %192 = sext i32 %5 to i64
  %193 = zext i32 %7 to i64
  %194 = zext i32 %5 to i64
  br label %195

195:                                              ; preds = %203, %180
  %196 = phi i64 [ 0, %180 ], [ %204, %203 ]
  br i1 %181, label %197, label %203

197:                                              ; preds = %195
  %198 = mul nsw i64 %196, %192
  br label %206

199:                                              ; preds = %203, %177
  %200 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 3
  %201 = load i32, i32* %200, align 8
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %274, label %275

203:                                              ; preds = %263, %195
  %204 = add nuw nsw i64 %196, 1
  %205 = icmp eq i64 %204, %193
  br i1 %205, label %199, label %195

206:                                              ; preds = %263, %197
  %207 = phi i64 [ 0, %197 ], [ %272, %263 ]
  %208 = add nsw i64 %207, %198
  %209 = load %struct.TileDataEnc*, %struct.TileDataEnc** %182, align 8
  %210 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %209, i64 %208
  %211 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %209, i64 %208, i32 6, i32 2
  %212 = bitcast i32** %211 to i8**
  %213 = load i8*, i8** %212, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %213, i8 -1, i64 %184, i1 false)
  %214 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %210, i64 0, i32 0, i32 0
  %215 = load i32, i32* %214, align 16
  %216 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %209, i64 %208, i32 6, i32 5
  store i32 %215, i32* %216, align 8
  %217 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %209, i64 %208, i32 6, i32 6
  store i32 0, i32* %217, align 4
  tail call void @av1_inter_mode_data_init(%struct.TileDataEnc* %210) #9
  %218 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %209, i64 %208, i32 0, i32 2
  %219 = load i32, i32* %218, align 8
  %220 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %209, i64 %208, i32 0, i32 3
  %221 = load i32, i32* %220, align 4
  %222 = load %struct.SequenceHeader*, %struct.SequenceHeader** %185, align 16
  %223 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %222, i64 0, i32 27
  %224 = load i8, i8* %223, align 1
  %225 = icmp eq i8 %224, 0
  %226 = sub i32 %221, %219
  %227 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %222, i64 0, i32 9
  %228 = load i32, i32* %227, align 4
  %229 = shl nsw i32 -1, %228
  %230 = xor i32 %229, -1
  %231 = add nsw i32 %226, %230
  %232 = and i32 %231, %229
  %233 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %222, i64 0, i32 32
  %234 = load i32, i32* %233, align 8
  %235 = ashr i32 %219, %234
  %236 = ashr i32 %232, %234
  %237 = load i8**, i8*** %186, align 8
  %238 = getelementptr inbounds i8*, i8** %237, i64 %196
  %239 = load i8*, i8** %238, align 8
  %240 = sext i32 %219 to i64
  %241 = getelementptr inbounds i8, i8* %239, i64 %240
  %242 = sext i32 %232 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %241, i8 0, i64 %242, i1 false) #9
  br i1 %225, label %243, label %263

243:                                              ; preds = %206
  %244 = load i8**, i8*** %187, align 8
  %245 = getelementptr inbounds i8*, i8** %244, i64 %196
  %246 = load i8*, i8** %245, align 8
  %247 = icmp eq i8* %246, null
  br i1 %247, label %261, label %248

248:                                              ; preds = %243
  %249 = load i8**, i8*** %188, align 8
  %250 = getelementptr inbounds i8*, i8** %249, i64 %196
  %251 = load i8*, i8** %250, align 8
  %252 = icmp eq i8* %251, null
  br i1 %252, label %261, label %253

253:                                              ; preds = %248
  %254 = sext i32 %235 to i64
  %255 = getelementptr inbounds i8, i8* %246, i64 %254
  %256 = sext i32 %236 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %255, i8 0, i64 %256, i1 false) #9
  %257 = load i8**, i8*** %188, align 8
  %258 = getelementptr inbounds i8*, i8** %257, i64 %196
  %259 = load i8*, i8** %258, align 8
  %260 = getelementptr inbounds i8, i8* %259, i64 %254
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %260, i8 0, i64 %256, i1 false) #9
  br label %263

261:                                              ; preds = %248, %243
  %262 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %189, align 16
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %262, i32 7, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.36, i64 0, i64 0)) #9
  br label %263

263:                                              ; preds = %206, %253, %261
  %264 = load i8**, i8*** %190, align 8
  %265 = getelementptr inbounds i8*, i8** %264, i64 %196
  %266 = load i8*, i8** %265, align 8
  %267 = getelementptr inbounds i8, i8* %266, i64 %240
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %267, i8 0, i64 %242, i1 false) #9
  %268 = load i8**, i8*** %191, align 8
  %269 = getelementptr inbounds i8*, i8** %268, i64 %196
  %270 = load i8*, i8** %269, align 8
  %271 = getelementptr inbounds i8, i8* %270, i64 %240
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %271, i8 64, i64 %242, i1 false) #9
  %272 = add nuw nsw i64 %207, 1
  %273 = icmp eq i64 %272, %194
  br i1 %273, label %203, label %206

274:                                              ; preds = %199
  tail call fastcc void @create_enc_workers(%struct.AV1_COMP* %0, i32 %10)
  br label %280

275:                                              ; preds = %199
  %276 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 0
  %277 = load i32, i32* %276, align 8
  %278 = icmp slt i32 %10, %277
  %279 = select i1 %278, i32 %10, i32 %277
  br label %280

280:                                              ; preds = %275, %274
  %281 = phi i32 [ %10, %274 ], [ %279, %275 ]
  %282 = icmp sgt i32 %281, 0
  br i1 %282, label %283, label %331

283:                                              ; preds = %280
  %284 = zext i32 %281 to i64
  %285 = add nsw i64 %284, -1
  %286 = and i64 %284, 3
  %287 = icmp ult i64 %285, 3
  br i1 %287, label %316, label %288

288:                                              ; preds = %283
  %289 = sub nsw i64 %284, %286
  br label %290

290:                                              ; preds = %290, %288
  %291 = phi i64 [ 0, %288 ], [ %313, %290 ]
  %292 = phi i32 [ 0, %288 ], [ %312, %290 ]
  %293 = phi i64 [ %289, %288 ], [ %314, %290 ]
  %294 = add nsw i32 %292, 1
  %295 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 4, i64 %291
  store i32 %292, i32* %295, align 4
  %296 = icmp eq i32 %294, %13
  %297 = select i1 %296, i32 0, i32 %294
  %298 = or i64 %291, 1
  %299 = add nsw i32 %297, 1
  %300 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 4, i64 %298
  store i32 %297, i32* %300, align 4
  %301 = icmp eq i32 %299, %13
  %302 = select i1 %301, i32 0, i32 %299
  %303 = or i64 %291, 2
  %304 = add nsw i32 %302, 1
  %305 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 4, i64 %303
  store i32 %302, i32* %305, align 4
  %306 = icmp eq i32 %304, %13
  %307 = select i1 %306, i32 0, i32 %304
  %308 = or i64 %291, 3
  %309 = add nsw i32 %307, 1
  %310 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 4, i64 %308
  store i32 %307, i32* %310, align 4
  %311 = icmp eq i32 %309, %13
  %312 = select i1 %311, i32 0, i32 %309
  %313 = add nuw nsw i64 %291, 4
  %314 = add i64 %293, -4
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %316, label %290

316:                                              ; preds = %290, %283
  %317 = phi i64 [ 0, %283 ], [ %313, %290 ]
  %318 = phi i32 [ 0, %283 ], [ %312, %290 ]
  %319 = icmp eq i64 %286, 0
  br i1 %319, label %331, label %320

320:                                              ; preds = %316, %320
  %321 = phi i64 [ %328, %320 ], [ %317, %316 ]
  %322 = phi i32 [ %327, %320 ], [ %318, %316 ]
  %323 = phi i64 [ %329, %320 ], [ %286, %316 ]
  %324 = add nsw i32 %322, 1
  %325 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 4, i64 %321
  store i32 %322, i32* %325, align 4
  %326 = icmp eq i32 %324, %13
  %327 = select i1 %326, i32 0, i32 %324
  %328 = add nuw nsw i64 %321, 1
  %329 = add i64 %323, -1
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %331, label %320, !llvm.loop !16

331:                                              ; preds = %316, %320, %280
  tail call fastcc void @prepare_enc_workers(%struct.AV1_COMP* %0, i32 (i8*, i8*)* nonnull @enc_row_mt_worker_hook, i32 %281)
  %332 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  br i1 %282, label %335, label %333

333:                                              ; preds = %331
  %334 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  br label %374

335:                                              ; preds = %331
  %336 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 4
  %337 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %332, i64 0, i32 3
  %338 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %332, i64 0, i32 4
  %339 = sext i32 %281 to i64
  %340 = add nsw i64 %339, -1
  %341 = load %struct.AVxWorker*, %struct.AVxWorker** %336, align 8
  %342 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %341, i64 %340
  %343 = icmp eq i64 %340, 0
  br i1 %343, label %352, label %344

344:                                              ; preds = %335, %344
  %345 = phi %struct.AVxWorker* [ %350, %344 ], [ %342, %335 ]
  %346 = phi i64 [ %348, %344 ], [ %340, %335 ]
  %347 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %337, align 8
  tail call void %347(%struct.AVxWorker* %345) #9
  %348 = add nsw i64 %346, -1
  %349 = load %struct.AVxWorker*, %struct.AVxWorker** %336, align 8
  %350 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %349, i64 %348
  %351 = icmp eq i64 %348, 0
  br i1 %351, label %352, label %344

352:                                              ; preds = %344, %335
  %353 = phi %struct.AVxWorker* [ %342, %335 ], [ %350, %344 ]
  %354 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %338, align 8
  tail call void %354(%struct.AVxWorker* %353) #9
  %355 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  %356 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %355, i64 0, i32 2
  br label %359

357:                                              ; preds = %359
  %358 = icmp eq i32 %369, 0
  br i1 %358, label %374, label %371

359:                                              ; preds = %359, %352
  %360 = phi i64 [ %339, %352 ], [ %362, %359 ]
  %361 = phi i32 [ 0, %352 ], [ %369, %359 ]
  %362 = add nsw i64 %360, -1
  %363 = load %struct.AVxWorker*, %struct.AVxWorker** %336, align 8
  %364 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %363, i64 %362
  %365 = load i32 (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)** %356, align 8
  %366 = tail call i32 %365(%struct.AVxWorker* %364) #9
  %367 = icmp eq i32 %366, 0
  %368 = zext i1 %367 to i32
  %369 = or i32 %361, %368
  %370 = icmp sgt i64 %362, 0
  br i1 %370, label %359, label %357

371:                                              ; preds = %357
  %372 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %373 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %372, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %373, i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.31, i64 0, i64 0)) #9
  br label %374

374:                                              ; preds = %333, %357, %371
  %375 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 33, i32 2
  %376 = load i32, i32* %375, align 8
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %502, label %378

378:                                              ; preds = %374
  %379 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2
  %380 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %381 = load %struct.SequenceHeader*, %struct.SequenceHeader** %380, align 16
  %382 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %381, i64 0, i32 8
  %383 = load i32, i32* %382, align 8
  %384 = load i32, i32* %6, align 4
  %385 = icmp sgt i32 %384, 0
  br i1 %385, label %386, label %502

386:                                              ; preds = %378
  %387 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %381, i64 0, i32 27
  %388 = load i8, i8* %387, align 1
  %389 = icmp eq i8 %388, 0
  %390 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 55
  %391 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %392 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 9
  %393 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 33, i32 4
  %394 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 47
  %395 = load i32, i32* %4, align 8
  %396 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 48, i64 0
  %397 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 48, i64 1
  %398 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 48, i64 2
  %399 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 48, i64 3
  %400 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 48, i64 0
  %401 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 48, i64 1
  %402 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 48, i64 2
  %403 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 48, i64 3
  br label %404

404:                                              ; preds = %412, %386
  %405 = phi i32 [ %384, %386 ], [ %413, %412 ]
  %406 = phi i32 [ %395, %386 ], [ %414, %412 ]
  %407 = phi i32 [ %395, %386 ], [ %415, %412 ]
  %408 = phi i32 [ 0, %386 ], [ %416, %412 ]
  %409 = icmp sgt i32 %407, 0
  br i1 %409, label %418, label %412

410:                                              ; preds = %436
  %411 = load i32, i32* %6, align 4
  br label %412

412:                                              ; preds = %410, %404
  %413 = phi i32 [ %411, %410 ], [ %405, %404 ]
  %414 = phi i32 [ %437, %410 ], [ %406, %404 ]
  %415 = phi i32 [ %437, %410 ], [ %407, %404 ]
  %416 = add nuw nsw i32 %408, 1
  %417 = icmp slt i32 %416, %413
  br i1 %417, label %404, label %502

418:                                              ; preds = %404, %436
  %419 = phi i32 [ %437, %436 ], [ %406, %404 ]
  %420 = phi i32 [ %437, %436 ], [ %407, %404 ]
  %421 = phi i32 [ %438, %436 ], [ 0, %404 ]
  %422 = load %struct.TileDataEnc*, %struct.TileDataEnc** %390, align 8
  %423 = mul nsw i32 %420, %408
  %424 = add nsw i32 %423, %421
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %422, i64 %425, i32 0, i32 0
  %427 = load i32, i32* %426, align 4
  %428 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %422, i64 %425, i32 0, i32 1
  %429 = load i32, i32* %428, align 4
  %430 = icmp slt i32 %427, %429
  br i1 %430, label %431, label %436

431:                                              ; preds = %418
  %432 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %422, i64 %425, i32 0, i32 2
  %433 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %422, i64 %425, i32 0, i32 3
  br label %440

434:                                              ; preds = %454
  %435 = load i32, i32* %4, align 8
  br label %436

436:                                              ; preds = %434, %418
  %437 = phi i32 [ %435, %434 ], [ %419, %418 ]
  %438 = add nuw nsw i32 %421, 1
  %439 = icmp slt i32 %438, %437
  br i1 %439, label %418, label %410

440:                                              ; preds = %458, %431
  %441 = phi i32 [ %427, %431 ], [ %459, %458 ]
  %442 = phi i32 [ %427, %431 ], [ %455, %458 ]
  %443 = icmp eq i32 %442, %441
  br i1 %443, label %444, label %450

444:                                              ; preds = %440
  %445 = load %struct.SequenceHeader*, %struct.SequenceHeader** %380, align 16
  %446 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %445, i64 0, i32 27
  %447 = load i8, i8* %446, align 1
  %448 = icmp eq i8 %447, 0
  %449 = select i1 %448, i32 3, i32 1
  tail call void @av1_reset_loop_filter_delta(%struct.macroblockd* %379, i32 %449) #9
  br label %450

450:                                              ; preds = %444, %440
  %451 = load i32, i32* %432, align 4
  %452 = load i32, i32* %433, align 4
  %453 = icmp slt i32 %451, %452
  br i1 %453, label %460, label %454

454:                                              ; preds = %498, %450
  %455 = add nsw i32 %442, %383
  %456 = load i32, i32* %428, align 4
  %457 = icmp slt i32 %455, %456
  br i1 %457, label %458, label %434

458:                                              ; preds = %454
  %459 = load i32, i32* %426, align 4
  br label %440

460:                                              ; preds = %450, %498
  %461 = phi i32 [ %499, %498 ], [ %451, %450 ]
  %462 = load i32, i32* %391, align 4
  %463 = mul nsw i32 %462, %442
  %464 = add nsw i32 %463, %461
  %465 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %392, align 16
  %466 = sext i32 %464 to i64
  %467 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %465, i64 %466
  %468 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %467, align 8
  %469 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %468, i64 0, i32 23
  %470 = load i8, i8* %469, align 8
  %471 = icmp eq i8 %470, 1
  br i1 %471, label %472, label %487

472:                                              ; preds = %460
  %473 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %468, i64 0, i32 0
  %474 = load i8, i8* %473, align 8
  %475 = load %struct.SequenceHeader*, %struct.SequenceHeader** %380, align 16
  %476 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %475, i64 0, i32 7
  %477 = load i8, i8* %476, align 4
  %478 = icmp eq i8 %474, %477
  br i1 %478, label %482, label %487

479:                                              ; preds = %508, %482
  %480 = load i8, i8* %394, align 16
  %481 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %468, i64 0, i32 26
  store i8 %480, i8* %481, align 2
  br label %498

482:                                              ; preds = %472
  %483 = load i8, i8* %400, align 1
  %484 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %468, i64 0, i32 27, i64 0
  store i8 %483, i8* %484, align 1
  %485 = load i8, i8* %401, align 1
  %486 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %468, i64 0, i32 27, i64 1
  store i8 %485, i8* %486, align 1
  br i1 %389, label %508, label %479

487:                                              ; preds = %472, %460
  %488 = load i32, i32* %393, align 8
  %489 = icmp eq i32 %488, 0
  br i1 %489, label %495, label %490

490:                                              ; preds = %487
  %491 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %468, i64 0, i32 27, i64 0
  %492 = load i8, i8* %491, align 1
  store i8 %492, i8* %396, align 1
  %493 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %468, i64 0, i32 27, i64 1
  %494 = load i8, i8* %493, align 1
  store i8 %494, i8* %397, align 1
  br i1 %389, label %503, label %498

495:                                              ; preds = %487
  %496 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %468, i64 0, i32 26
  %497 = load i8, i8* %496, align 2
  store i8 %497, i8* %394, align 16
  br label %498

498:                                              ; preds = %490, %503, %495, %479
  %499 = add nsw i32 %461, %383
  %500 = load i32, i32* %433, align 4
  %501 = icmp slt i32 %499, %500
  br i1 %501, label %460, label %454

502:                                              ; preds = %412, %378, %374
  tail call fastcc void @accumulate_counters_enc_workers(%struct.AV1_COMP* %0, i32 %281)
  ret void

503:                                              ; preds = %490
  %504 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %468, i64 0, i32 27, i64 2
  %505 = load i8, i8* %504, align 1
  store i8 %505, i8* %398, align 1
  %506 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %468, i64 0, i32 27, i64 3
  %507 = load i8, i8* %506, align 1
  store i8 %507, i8* %399, align 1
  br label %498

508:                                              ; preds = %482
  %509 = load i8, i8* %402, align 1
  %510 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %468, i64 0, i32 27, i64 2
  store i8 %509, i8* %510, align 1
  %511 = load i8, i8* %403, align 1
  %512 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %468, i64 0, i32 27, i64 3
  store i8 %511, i8* %512, align 1
  br label %479
}

declare void @av1_inter_mode_data_init(%struct.TileDataEnc*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @enc_row_mt_worker_hook(i8* nocapture readonly, i8* nocapture readnone) #1 {
  %3 = bitcast i8* %0 to %struct.AV1_COMP**
  %4 = load %struct.AV1_COMP*, %struct.AV1_COMP** %3, align 8
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 8
  %6 = getelementptr inbounds i8, i8* %0, i64 20
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 61, i32 7, i32 4, i64 %9
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 61, i32 7, i32 5
  %13 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %12, align 8
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 55
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 8, i32 35
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 8, i32 38, i32 0
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 8, i32 38, i32 1
  %18 = getelementptr inbounds i8, i8* %0, i64 8
  %19 = bitcast i8* %18 to %struct.ThreadData**
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 8, i32 40, i32 0
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 8, i32 40, i32 2
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 8, i32 40, i32 1, i64 0
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 8, i32 40, i32 1, i64 1
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %4, i64 0, i32 8, i32 40, i32 1, i64 2
  br label %25

25:                                               ; preds = %194, %2
  %26 = phi i32 [ %11, %2 ], [ %131, %194 ]
  %27 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %13) #9
  %28 = load %struct.TileDataEnc*, %struct.TileDataEnc** %14, align 8
  %29 = sext i32 %26 to i64
  %30 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %28, i64 %29, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %28, i64 %29, i32 6, i32 5
  %33 = load i32, i32* %32, align 8
  %34 = icmp slt i32 %33, %31
  br i1 %34, label %35, label %43

35:                                               ; preds = %25
  %36 = load %struct.SequenceHeader*, %struct.SequenceHeader** %15, align 16
  %37 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %36, i64 0, i32 8
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %28, i64 %29, i32 6, i32 6
  %40 = load i32, i32* %39, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %39, align 4
  %42 = add nsw i32 %38, %33
  br label %123

43:                                               ; preds = %25
  %44 = load i32, i32* %16, align 8
  %45 = load i32, i32* %17, align 4
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %121

47:                                               ; preds = %43
  %48 = icmp sgt i32 %44, 0
  %49 = sext i32 %44 to i64
  %50 = zext i32 %45 to i64
  %51 = zext i32 %44 to i64
  br label %52

52:                                               ; preds = %61, %47
  %53 = phi i64 [ 0, %47 ], [ %65, %61 ]
  %54 = phi i32 [ 2147483647, %47 ], [ %64, %61 ]
  %55 = phi i32 [ 0, %47 ], [ %63, %61 ]
  %56 = phi i32 [ -1, %47 ], [ %62, %61 ]
  br i1 %48, label %57, label %61

57:                                               ; preds = %52
  %58 = mul nsw i64 %53, %49
  br label %67

59:                                               ; preds = %61
  %60 = icmp eq i32 %62, -1
  br i1 %60, label %121, label %106

61:                                               ; preds = %100, %52
  %62 = phi i32 [ %56, %52 ], [ %101, %100 ]
  %63 = phi i32 [ %55, %52 ], [ %102, %100 ]
  %64 = phi i32 [ %54, %52 ], [ %103, %100 ]
  %65 = add nuw nsw i64 %53, 1
  %66 = icmp eq i64 %65, %50
  br i1 %66, label %59, label %52

67:                                               ; preds = %100, %57
  %68 = phi i64 [ 0, %57 ], [ %104, %100 ]
  %69 = phi i32 [ %54, %57 ], [ %103, %100 ]
  %70 = phi i32 [ %55, %57 ], [ %102, %100 ]
  %71 = phi i32 [ %56, %57 ], [ %101, %100 ]
  %72 = add nsw i64 %68, %58
  %73 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %28, i64 %72, i32 0
  %74 = tail call i32 @av1_get_sb_rows_in_tile(%struct.AV1Common* %5, %struct.TileInfo* byval(%struct.TileInfo) align 8 %73) #9
  %75 = tail call i32 @av1_get_sb_cols_in_tile(%struct.AV1Common* %5, %struct.TileInfo* byval(%struct.TileInfo) align 8 %73) #9
  %76 = add nsw i32 %75, 1
  %77 = ashr i32 %76, 1
  %78 = icmp slt i32 %77, %74
  %79 = select i1 %78, i32 %77, i32 %74
  %80 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %28, i64 %72, i32 6, i32 6
  %81 = load i32, i32* %80, align 4
  %82 = icmp slt i32 %81, %79
  br i1 %82, label %83, label %100

83:                                               ; preds = %67
  %84 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %28, i64 %72, i32 0, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %28, i64 %72, i32 6, i32 5
  %87 = load i32, i32* %86, align 8
  %88 = sub nsw i32 %85, %87
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %90, label %100

90:                                               ; preds = %83
  %91 = icmp slt i32 %81, %69
  %92 = select i1 %91, i32 0, i32 %70
  %93 = select i1 %91, i32 %81, i32 %69
  %94 = icmp sle i32 %81, %69
  %95 = icmp sgt i32 %88, %92
  %96 = and i1 %94, %95
  %97 = trunc i64 %72 to i32
  %98 = select i1 %96, i32 %97, i32 %71
  %99 = select i1 %96, i32 %88, i32 %92
  br label %100

100:                                              ; preds = %90, %83, %67
  %101 = phi i32 [ %71, %67 ], [ %71, %83 ], [ %98, %90 ]
  %102 = phi i32 [ %70, %67 ], [ %70, %83 ], [ %99, %90 ]
  %103 = phi i32 [ %69, %67 ], [ %69, %83 ], [ %93, %90 ]
  %104 = add nuw nsw i64 %68, 1
  %105 = icmp eq i64 %104, %51
  br i1 %105, label %61, label %67

106:                                              ; preds = %59
  %107 = sext i32 %62 to i64
  %108 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %28, i64 %107, i32 0, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %28, i64 %107, i32 6, i32 5
  %111 = load i32, i32* %110, align 8
  %112 = icmp slt i32 %111, %109
  br i1 %112, label %113, label %129

113:                                              ; preds = %106
  %114 = load %struct.SequenceHeader*, %struct.SequenceHeader** %15, align 16
  %115 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %114, i64 0, i32 8
  %116 = load i32, i32* %115, align 8
  %117 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %28, i64 %107, i32 6, i32 6
  %118 = load i32, i32* %117, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %117, align 4
  %120 = add nsw i32 %116, %111
  br label %123

121:                                              ; preds = %59, %43
  %122 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %13) #9
  ret i32 1

123:                                              ; preds = %35, %113
  %124 = phi i32* [ %110, %113 ], [ %32, %35 ]
  %125 = phi i32 [ %120, %113 ], [ %42, %35 ]
  %126 = phi i64 [ %107, %113 ], [ %29, %35 ]
  %127 = phi i32 [ %62, %113 ], [ %26, %35 ]
  %128 = phi i32 [ %111, %113 ], [ %33, %35 ]
  store i32 %125, i32* %124, align 8
  br label %129

129:                                              ; preds = %123, %106
  %130 = phi i64 [ %107, %106 ], [ %126, %123 ]
  %131 = phi i32 [ %62, %106 ], [ %127, %123 ]
  %132 = phi i32 [ -1, %106 ], [ %128, %123 ]
  %133 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %13) #9
  %134 = load %struct.TileDataEnc*, %struct.TileDataEnc** %14, align 8
  %135 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %134, i64 %130, i32 0, i32 4
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %134, i64 %130, i32 0, i32 5
  %138 = load i32, i32* %137, align 4
  %139 = load %struct.ThreadData*, %struct.ThreadData** %19, align 8
  %140 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %139, i64 0, i32 18
  %141 = bitcast %struct.frame_contexts** %140 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %139, i64 0, i32 0, i32 2, i32 39
  %144 = bitcast %struct.frame_contexts** %143 to i64*
  store i64 %142, i64* %144, align 8
  %145 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %134, i64 %130, i32 2
  %146 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %139, i64 0, i32 0, i32 6
  store %struct.frame_contexts* %145, %struct.frame_contexts** %146, align 8
  %147 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %134, i64 %130, i32 4
  %148 = load i8, i8* %147, align 8
  %149 = icmp eq i8 %148, 0
  %150 = inttoptr i64 %142 to i8*
  br i1 %149, label %160, label %151

151:                                              ; preds = %129
  %152 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %134, i64 %130, i32 3
  %153 = bitcast %struct.frame_contexts** %152 to i64*
  %154 = load i64, i64* %153, align 16
  %155 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %139, i64 0, i32 0, i32 5
  %156 = bitcast %struct.frame_contexts** %155 to i64*
  store i64 %154, i64* %156, align 16
  %157 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %134, i64 %130, i32 0, i32 0
  %158 = load i32, i32* %157, align 4
  %159 = icmp eq i32 %132, %158
  br i1 %159, label %160, label %162

160:                                              ; preds = %129, %151
  %161 = bitcast %struct.frame_contexts* %145 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %150, i8* align 16 %161, i64 21264, i1 false)
  br label %162

162:                                              ; preds = %160, %151
  %163 = sext i32 %136 to i64
  %164 = load %struct.SequenceHeader*, %struct.SequenceHeader** %15, align 16
  %165 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %164, i64 0, i32 27
  %166 = load i8, i8* %165, align 1
  %167 = icmp eq i8 %166, 0
  %168 = load i8**, i8*** %22, align 8
  %169 = getelementptr inbounds i8*, i8** %168, i64 %163
  %170 = bitcast i8** %169 to i64*
  %171 = load i64, i64* %170, align 8
  %172 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %139, i64 0, i32 0, i32 2, i32 23, i64 0
  %173 = bitcast i8** %172 to i64*
  store i64 %171, i64* %173, align 8
  br i1 %167, label %200, label %174

174:                                              ; preds = %162, %200
  %175 = load i8**, i8*** %20, align 8
  %176 = getelementptr inbounds i8*, i8** %175, i64 %163
  %177 = bitcast i8** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %139, i64 0, i32 0, i32 2, i32 25
  %180 = bitcast i8** %179 to i64*
  store i64 %178, i64* %180, align 8
  %181 = load i8**, i8*** %21, align 8
  %182 = getelementptr inbounds i8*, i8** %181, i64 %163
  %183 = bitcast i8** %182 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %139, i64 0, i32 0, i32 2, i32 27
  %186 = bitcast i8** %185 to i64*
  store i64 %184, i64* %186, align 16
  %187 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %139, i64 0, i32 0, i32 2, i32 51
  %188 = load %struct.SequenceHeader*, %struct.SequenceHeader** %15, align 16
  tail call void @cfl_init(%struct.cfl_ctx* %187, %struct.SequenceHeader* %188) #9
  %189 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %139, i64 0, i32 0, i32 58, i32 3
  %190 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %189, align 8
  %191 = icmp eq %struct.TxbRdRecords* %190, null
  br i1 %191, label %194, label %192

192:                                              ; preds = %174
  %193 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %190, i64 0, i32 0, i32 3
  tail call void @av1_crc32c_calculator_init(%struct._CRC32C* %193) #9
  br label %194

194:                                              ; preds = %174, %192
  tail call void @av1_encode_sb_row(%struct.AV1_COMP* %4, %struct.ThreadData* %139, i32 %136, i32 %138, i32 %132) #9
  %195 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %13) #9
  %196 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %134, i64 %130, i32 6, i32 6
  %197 = load i32, i32* %196, align 4
  %198 = add nsw i32 %197, -1
  store i32 %198, i32* %196, align 4
  %199 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %13) #9
  br label %25

200:                                              ; preds = %162
  %201 = load i8**, i8*** %23, align 8
  %202 = getelementptr inbounds i8*, i8** %201, i64 %163
  %203 = bitcast i8** %202 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %139, i64 0, i32 0, i32 2, i32 23, i64 1
  %206 = bitcast i8** %205 to i64*
  store i64 %204, i64* %206, align 8
  %207 = load i8**, i8*** %24, align 8
  %208 = getelementptr inbounds i8*, i8** %207, i64 %163
  %209 = bitcast i8** %208 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %139, i64 0, i32 0, i32 2, i32 23, i64 2
  %212 = bitcast i8** %211 to i64*
  store i64 %210, i64* %212, align 8
  br label %174
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_write_tile_obu_mt(%struct.AV1_COMP*, i8*, i32* nocapture, %struct.aom_write_bit_buffer*, i8 zeroext, %struct.FrameHeaderInfo*, i32*, i32* nocapture, i32* nocapture, i8**) local_unnamed_addr #1 {
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca [512 x i32], align 16
  %15 = alloca [512 x i64], align 16
  %16 = alloca [512 x %struct.PackBSParams], align 16
  %17 = alloca [512 x i32], align 16
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 9
  %19 = load i32, i32* %18, align 4
  %20 = bitcast [512 x %struct.PackBSParams]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 45056, i8* nonnull %20) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 45056, i1 false)
  %21 = bitcast [512 x i32]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %21) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 0, i64 2048, i1 false)
  br label %406

22:                                               ; preds = %406
  %23 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 0
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = mul i32 %28, %26
  %30 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 79
  %31 = load i32, i32* %30, align 4
  %32 = add i32 %29, -1
  %33 = add i32 %32, %31
  %34 = sdiv i32 %33, %31
  %35 = bitcast [512 x i32]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %35) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 0, i64 2048, i1 false) #9
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %37 = bitcast %struct.aom_internal_error_info** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 13
  %40 = bitcast %struct.aom_internal_error_info** %39 to i64*
  store i64 %38, i64* %40, align 8
  %41 = icmp sgt i32 %29, 0
  br i1 %41, label %42, label %89

42:                                               ; preds = %22
  %43 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 55
  %44 = zext i32 %32 to i64
  %45 = zext i32 %29 to i64
  %46 = load %struct.TileDataEnc*, %struct.TileDataEnc** %43, align 8
  br label %47

47:                                               ; preds = %47, %42
  %48 = phi i64 [ 0, %42 ], [ %87, %47 ]
  %49 = phi i32 [ 1, %42 ], [ %67, %47 ]
  %50 = phi i32 [ 0, %42 ], [ %86, %47 ]
  %51 = phi i32 [ 0, %42 ], [ %85, %47 ]
  %52 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %46, i64 %48, i32 0, i32 3
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %46, i64 %48, i32 0, i32 2
  %55 = load i32, i32* %54, align 4
  %56 = sub nsw i32 %53, %55
  %57 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %46, i64 %48, i32 0, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %46, i64 %48, i32 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = sub nsw i32 %58, %60
  %62 = mul nsw i32 %61, %56
  %63 = add nsw i32 %50, 1
  %64 = icmp eq i32 %63, %34
  %65 = icmp eq i64 %48, %44
  %66 = or i1 %65, %64
  %67 = zext i1 %66 to i32
  %68 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %48, i32 8
  store i32 0, i32* %68, align 8
  %69 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %48, i32 6
  store i8 %4, i8* %69, align 8
  %70 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %48, i32 0
  store %struct.aom_write_bit_buffer* %3, %struct.aom_write_bit_buffer** %70, align 8
  %71 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %48, i32 7
  store i32 0, i32* %71, align 4
  %72 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %48, i32 12
  store i32 %67, i32* %72, align 8
  %73 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %48, i32 13
  store i32 %49, i32* %73, align 4
  %74 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %46, i64 %48, i32 0, i32 5
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %48, i32 11
  store i32 %75, i32* %76, align 4
  %77 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %46, i64 %48, i32 0, i32 4
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %48, i32 10
  store i32 %78, i32* %79, align 8
  %80 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %48, i32 9
  store i32 %62, i32* %80, align 4
  %81 = zext i32 %51 to i64
  %82 = getelementptr inbounds [512 x i32], [512 x i32]* %14, i64 0, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = add nsw i32 %83, %62
  store i32 %84, i32* %82, align 4
  %85 = add nuw nsw i32 %51, %67
  %86 = select i1 %66, i32 0, i32 %63
  %87 = add nuw nsw i64 %48, 1
  %88 = icmp eq i64 %87, %45
  br i1 %88, label %89, label %47

89:                                               ; preds = %47, %22
  %90 = bitcast [512 x i64]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %90) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %90, i8 0, i64 4096, i1 false) #9
  %91 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 87
  %92 = load i64, i64* %91, align 16
  %93 = icmp sgt i32 %31, 0
  br i1 %93, label %94, label %102

94:                                               ; preds = %89
  %95 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %96 = load i32, i32* %95, align 16
  %97 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %98 = load i32, i32* %97, align 4
  %99 = mul nsw i32 %98, %96
  %100 = sext i32 %99 to i64
  %101 = sext i32 %34 to i64
  br label %107

102:                                              ; preds = %124, %89
  %103 = phi i64 [ %92, %89 ], [ %125, %124 ]
  %104 = phi i8* [ %1, %89 ], [ %131, %124 ]
  br i1 %41, label %105, label %197

105:                                              ; preds = %102
  %106 = zext i32 %29 to i64
  br label %141

107:                                              ; preds = %124, %94
  %108 = phi i64 [ 0, %94 ], [ %136, %124 ]
  %109 = phi i64 [ 0, %94 ], [ %137, %124 ]
  %110 = phi i32 [ %31, %94 ], [ %138, %124 ]
  %111 = phi i8* [ %1, %94 ], [ %131, %124 ]
  %112 = phi i64 [ %92, %94 ], [ %125, %124 ]
  %113 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %108
  %114 = add nsw i32 %110, -1
  %115 = zext i32 %114 to i64
  %116 = icmp eq i64 %109, %115
  br i1 %116, label %124, label %117

117:                                              ; preds = %107
  %118 = getelementptr inbounds [512 x i32], [512 x i32]* %14, i64 0, i64 %109
  %119 = load i32, i32* %118, align 4
  %120 = sext i32 %119 to i64
  %121 = mul i64 %92, %120
  %122 = udiv i64 %121, %100
  %123 = sub i64 %112, %122
  br label %124

124:                                              ; preds = %117, %107
  %125 = phi i64 [ %123, %117 ], [ 0, %107 ]
  %126 = phi i64 [ %122, %117 ], [ %112, %107 ]
  %127 = getelementptr inbounds [512 x i64], [512 x i64]* %15, i64 0, i64 %109
  %128 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %108, i32 3
  store i8* %111, i8** %128, align 8
  %129 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %108, i32 4
  store i8* %111, i8** %129, align 8
  %130 = trunc i64 %108 to i32
  call void @av1_write_obu_tg_tile_headers(%struct.AV1_COMP* %0, %struct.macroblock* %24, %struct.PackBSParams* %113, i32 %130) #9
  %131 = getelementptr inbounds i8, i8* %111, i64 %126
  %132 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %108, i32 8
  %133 = load i32, i32* %132, align 8
  %134 = sext i32 %133 to i64
  %135 = sub i64 %126, %134
  store i64 %135, i64* %127, align 8
  %136 = add nsw i64 %108, %101
  %137 = add nuw nsw i64 %109, 1
  %138 = load i32, i32* %30, align 4
  %139 = sext i32 %138 to i64
  %140 = icmp slt i64 %137, %139
  br i1 %140, label %107, label %102

141:                                              ; preds = %187, %105
  %142 = phi i64 [ 0, %105 ], [ %195, %187 ]
  %143 = phi i64 [ %92, %105 ], [ %157, %187 ]
  %144 = phi i32 [ 0, %105 ], [ %193, %187 ]
  %145 = phi i8* [ %1, %105 ], [ %190, %187 ]
  %146 = phi i8* [ %104, %105 ], [ %194, %187 ]
  %147 = phi i64 [ %103, %105 ], [ %173, %187 ]
  %148 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %142, i32 13
  %149 = load i32, i32* %148, align 4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %155, label %151

151:                                              ; preds = %141
  %152 = zext i32 %144 to i64
  %153 = getelementptr inbounds [512 x i64], [512 x i64]* %15, i64 0, i64 %152
  %154 = load i64, i64* %153, align 8
  br label %155

155:                                              ; preds = %151, %141
  %156 = phi i64 [ %147, %141 ], [ %154, %151 ]
  %157 = phi i64 [ %143, %141 ], [ %154, %151 ]
  %158 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %142, i32 12
  %159 = load i32, i32* %158, align 8
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %172

161:                                              ; preds = %155
  %162 = zext i32 %144 to i64
  %163 = getelementptr inbounds [512 x i32], [512 x i32]* %14, i64 0, i64 %162
  %164 = load i32, i32* %163, align 4
  %165 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %142, i32 9
  %166 = load i32, i32* %165, align 4
  %167 = sext i32 %166 to i64
  %168 = mul i64 %157, %167
  %169 = sext i32 %164 to i64
  %170 = udiv i64 %168, %169
  %171 = sub i64 %156, %170
  br label %172

172:                                              ; preds = %161, %155
  %173 = phi i64 [ %171, %161 ], [ 0, %155 ]
  %174 = phi i64 [ %170, %161 ], [ %156, %155 ]
  %175 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %142, i32 5
  store i64 %174, i64* %175, align 8
  %176 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %142, i32 3
  br i1 %150, label %185, label %177

177:                                              ; preds = %172
  %178 = load i8*, i8** %176, align 8
  %179 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %142, i32 4
  %180 = load i8*, i8** %179, align 8
  %181 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %142, i32 8
  %182 = load i32, i32* %181, align 8
  %183 = sext i32 %182 to i64
  %184 = add i64 %174, %183
  store i64 %184, i64* %175, align 8
  br label %187

185:                                              ; preds = %172
  store i8* %146, i8** %176, align 8
  %186 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %142, i32 4
  store i8* %145, i8** %186, align 8
  br label %187

187:                                              ; preds = %185, %177
  %188 = phi i64 [ %184, %177 ], [ %174, %185 ]
  %189 = phi i8* [ %178, %177 ], [ %146, %185 ]
  %190 = phi i8* [ %180, %177 ], [ %145, %185 ]
  %191 = xor i1 %160, true
  %192 = zext i1 %191 to i32
  %193 = add nuw nsw i32 %144, %192
  %194 = getelementptr inbounds i8, i8* %189, i64 %188
  %195 = add nuw nsw i64 %142, 1
  %196 = icmp eq i64 %195, %106
  br i1 %196, label %197, label %141

197:                                              ; preds = %187, %102
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %90) #9
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %35) #9
  %198 = icmp sgt i32 %19, 0
  br i1 %198, label %199, label %205

199:                                              ; preds = %197
  %200 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 4
  %201 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 5
  %202 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3
  %203 = bitcast %struct.ThreadData* %202 to i8*
  %204 = sext i32 %19 to i64
  br label %212

205:                                              ; preds = %228, %197
  %206 = load i32, i32* %27, align 4
  %207 = load i32, i32* %25, align 8
  %208 = mul nsw i32 %207, %206
  %209 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 11, i32 0
  %210 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %209, align 8
  %211 = icmp eq %union.pthread_mutex_t* %210, null
  br i1 %211, label %240, label %253

212:                                              ; preds = %228, %199
  %213 = phi i64 [ %204, %199 ], [ %214, %228 ]
  %214 = add nsw i64 %213, -1
  %215 = load %struct.AVxWorker*, %struct.AVxWorker** %200, align 8
  %216 = load %struct.EncWorkerData*, %struct.EncWorkerData** %201, align 8
  %217 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %216, i64 %214
  %218 = icmp eq i64 %214, 0
  br i1 %218, label %219, label %221

219:                                              ; preds = %212
  %220 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %216, i64 0, i32 1
  store %struct.ThreadData* %202, %struct.ThreadData** %220, align 8
  br label %221

221:                                              ; preds = %219, %212
  %222 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %216, i64 %214, i32 1
  %223 = load %struct.ThreadData*, %struct.ThreadData** %222, align 8
  %224 = icmp eq %struct.ThreadData* %223, %202
  br i1 %224, label %228, label %225

225:                                              ; preds = %221
  %226 = bitcast %struct.ThreadData* %223 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %226, i8* align 16 %203, i64 124144, i1 false) #9
  %227 = load %struct.ThreadData*, %struct.ThreadData** %222, align 8
  br label %228

228:                                              ; preds = %225, %221
  %229 = phi %struct.ThreadData* [ %202, %221 ], [ %227, %225 ]
  %230 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %217, i64 0, i32 0
  store %struct.AV1_COMP* %0, %struct.AV1_COMP** %230, align 8
  %231 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %216, i64 %214, i32 2
  %232 = trunc i64 %214 to i32
  store i32 %232, i32* %231, align 8
  %233 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %216, i64 %214, i32 3
  store i32 %232, i32* %233, align 4
  call void @av1_reset_pack_bs_thread_data(%struct.ThreadData* %229) #9
  %234 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %215, i64 %214, i32 3
  store i32 (i8*, i8*)* @pack_bs_worker_hook, i32 (i8*, i8*)** %234, align 8
  %235 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %215, i64 %214, i32 4
  %236 = bitcast i8** %235 to %struct.EncWorkerData**
  store %struct.EncWorkerData* %217, %struct.EncWorkerData** %236, align 8
  %237 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %215, i64 %214, i32 5
  %238 = bitcast i8** %237 to %struct.PackBSParams**
  store %struct.PackBSParams* %23, %struct.PackBSParams** %238, align 8
  %239 = icmp sgt i64 %214, 0
  br i1 %239, label %212, label %205

240:                                              ; preds = %205
  %241 = call i8* @aom_malloc(i64 40) #9
  %242 = bitcast %union.pthread_mutex_t** %209 to i8**
  store i8* %241, i8** %242, align 8
  %243 = icmp eq i8* %241, null
  %244 = bitcast i8* %241 to %union.pthread_mutex_t*
  br i1 %243, label %245, label %248

245:                                              ; preds = %240
  %246 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %36, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %246, i32 2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.37, i64 0, i64 0)) #9
  %247 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %209, align 8
  br label %248

248:                                              ; preds = %245, %240
  %249 = phi %union.pthread_mutex_t* [ %244, %240 ], [ %247, %245 ]
  %250 = icmp eq %union.pthread_mutex_t* %249, null
  br i1 %250, label %253, label %251

251:                                              ; preds = %248
  %252 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %249, %union.pthread_mutexattr_t* null) #9
  br label %253

253:                                              ; preds = %251, %248, %205
  %254 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 11, i32 2
  store i32 0, i32* %254, align 8
  %255 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 11, i32 1, i64 0
  %256 = bitcast %struct.PackBSTileOrder* %255 to i8*
  %257 = and i32 %208, 65535
  %258 = zext i32 %257 to i64
  %259 = shl nuw nsw i32 %257, 3
  %260 = zext i32 %259 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %256, i8 0, i64 %260, i1 false) #9
  %261 = icmp eq i32 %257, 0
  br i1 %261, label %272, label %262

262:                                              ; preds = %253, %262
  %263 = phi i16 [ %269, %262 ], [ 0, %253 ]
  %264 = zext i16 %263 to i64
  %265 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %264, i32 9
  %266 = load i32, i32* %265, align 4
  %267 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 11, i32 1, i64 %264, i32 1
  store i32 %266, i32* %267, align 4
  %268 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 11, i32 1, i64 %264, i32 0
  store i16 %263, i16* %268, align 4
  %269 = add i16 %263, 1
  %270 = zext i16 %269 to i32
  %271 = icmp ugt i32 %257, %270
  br i1 %271, label %262, label %272

272:                                              ; preds = %262, %253
  call void @qsort(i8* %256, i64 %258, i64 8, i32 (i8*, i8*)* nonnull @compare_tile_order) #9
  %273 = call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  br i1 %198, label %276, label %274

274:                                              ; preds = %272
  %275 = call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  br label %314

276:                                              ; preds = %272
  %277 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 4
  %278 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %273, i64 0, i32 3
  %279 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %273, i64 0, i32 4
  %280 = sext i32 %19 to i64
  %281 = add nsw i64 %280, -1
  %282 = load %struct.AVxWorker*, %struct.AVxWorker** %277, align 8
  %283 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %282, i64 %281
  %284 = icmp eq i64 %281, 0
  br i1 %284, label %293, label %285

285:                                              ; preds = %276, %285
  %286 = phi %struct.AVxWorker* [ %291, %285 ], [ %283, %276 ]
  %287 = phi i64 [ %289, %285 ], [ %281, %276 ]
  %288 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %278, align 8
  call void %288(%struct.AVxWorker* %286) #9
  %289 = add nsw i64 %287, -1
  %290 = load %struct.AVxWorker*, %struct.AVxWorker** %277, align 8
  %291 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %290, i64 %289
  %292 = icmp eq i64 %289, 0
  br i1 %292, label %293, label %285

293:                                              ; preds = %285, %276
  %294 = phi %struct.AVxWorker* [ %283, %276 ], [ %291, %285 ]
  %295 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %279, align 8
  call void %295(%struct.AVxWorker* %294) #9
  %296 = call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  %297 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %296, i64 0, i32 2
  br label %300

298:                                              ; preds = %300
  %299 = icmp eq i32 %310, 0
  br i1 %299, label %314, label %312

300:                                              ; preds = %300, %293
  %301 = phi i64 [ %280, %293 ], [ %303, %300 ]
  %302 = phi i32 [ 0, %293 ], [ %310, %300 ]
  %303 = add nsw i64 %301, -1
  %304 = load %struct.AVxWorker*, %struct.AVxWorker** %277, align 8
  %305 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %304, i64 %303
  %306 = load i32 (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)** %297, align 8
  %307 = call i32 %306(%struct.AVxWorker* %305) #9
  %308 = icmp eq i32 %307, 0
  %309 = zext i1 %308 to i32
  %310 = or i32 %302, %309
  %311 = icmp sgt i64 %303, 0
  br i1 %311, label %300, label %298

312:                                              ; preds = %298
  %313 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %36, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %313, i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.31, i64 0, i64 0)) #9
  br label %314

314:                                              ; preds = %274, %298, %312
  %315 = load i32, i32* %25, align 4
  %316 = load i32, i32* %27, align 4
  %317 = mul i32 %316, %315
  %318 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %318) #9
  store i64 0, i64* %11, align 8
  %319 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %319) #9
  store i32 1, i32* %12, align 4
  %320 = icmp sgt i32 %317, 0
  br i1 %320, label %321, label %324

321:                                              ; preds = %314
  %322 = bitcast i32* %13 to i8*
  %323 = zext i32 %317 to i64
  br label %328

324:                                              ; preds = %387, %314
  br i1 %198, label %325, label %405

325:                                              ; preds = %324
  %326 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 5
  %327 = sext i32 %19 to i64
  br label %398

328:                                              ; preds = %387, %321
  %329 = phi i64 [ 0, %321 ], [ %396, %387 ]
  %330 = phi i64 [ 0, %321 ], [ %393, %387 ]
  %331 = phi i64 [ 0, %321 ], [ %391, %387 ]
  %332 = phi i8* [ %1, %321 ], [ %351, %387 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %322) #9
  store i32 0, i32* %13, align 4
  %333 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %329, i32 13
  %334 = load i32, i32* %333, align 4
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %336, label %338

336:                                              ; preds = %328
  %337 = load i64, i64* %11, align 8
  br label %349

338:                                              ; preds = %328
  %339 = load i32, i32* %2, align 4
  %340 = zext i32 %339 to i64
  %341 = getelementptr inbounds i8, i8* %1, i64 %340
  %342 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %329, i32 8
  %343 = load i32, i32* %342, align 8
  %344 = sext i32 %343 to i64
  store i64 %344, i64* %11, align 8
  %345 = load i8*, i8** %9, align 8
  %346 = getelementptr inbounds i8, i8* %345, i64 %344
  store i8* %346, i8** %9, align 8
  %347 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %329, i32 7
  %348 = load i32, i32* %347, align 4
  store i32 %348, i32* %8, align 4
  br label %349

349:                                              ; preds = %338, %336
  %350 = phi i64 [ %344, %338 ], [ %337, %336 ]
  %351 = phi i8* [ %341, %338 ], [ %332, %336 ]
  %352 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %329, i32 1, i32 1
  %353 = load i64, i64* %352, align 8
  %354 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %329, i32 12
  %355 = load i32, i32* %354, align 8
  %356 = icmp eq i32 %355, 0
  %357 = select i1 %356, i64 4, i64 0
  %358 = add i64 %353, %350
  %359 = add i64 %358, %357
  store i64 %359, i64* %11, align 8
  %360 = load i32, i32* %7, align 4
  %361 = zext i32 %360 to i64
  %362 = icmp ugt i64 %353, %361
  br i1 %362, label %365, label %363

363:                                              ; preds = %349
  %364 = trunc i64 %353 to i32
  br label %368

365:                                              ; preds = %349
  %366 = trunc i64 %329 to i32
  store i32 %366, i32* %6, align 4
  %367 = trunc i64 %353 to i32
  store i32 %367, i32* %7, align 4
  br label %368

368:                                              ; preds = %363, %365
  %369 = phi i32 [ %364, %363 ], [ %367, %365 ]
  %370 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %329, i32 2
  %371 = load i32*, i32** %370, align 8
  %372 = load i32, i32* %371, align 4
  %373 = add i32 %372, %369
  store i32 %373, i32* %13, align 4
  %374 = icmp eq i64 %329, 0
  br i1 %374, label %379, label %375

375:                                              ; preds = %368
  %376 = getelementptr inbounds i8, i8* %1, i64 %330
  %377 = getelementptr inbounds i8, i8* %1, i64 %331
  %378 = zext i32 %373 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %376, i8* align 1 %377, i64 %378, i1 false) #9
  br label %379

379:                                              ; preds = %375, %368
  br i1 %356, label %387, label %380

380:                                              ; preds = %379
  %381 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %329, i32 0
  %382 = load %struct.aom_write_bit_buffer*, %struct.aom_write_bit_buffer** %381, align 8
  %383 = load i32, i32* %8, align 4
  %384 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %329, i32 6
  %385 = load i8, i8* %384, align 8
  call void @av1_write_last_tile_info(%struct.AV1_COMP* %0, %struct.FrameHeaderInfo* %5, %struct.aom_write_bit_buffer* %382, i64* nonnull %11, i8* %351, i32* nonnull %13, i8** %9, i32* %6, i32* nonnull %12, i32 %383, i8 zeroext %385) #9
  %386 = load i32, i32* %13, align 4
  br label %387

387:                                              ; preds = %380, %379
  %388 = phi i32 [ %373, %379 ], [ %386, %380 ]
  %389 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %329, i32 5
  %390 = load i64, i64* %389, align 8
  %391 = add i64 %390, %331
  %392 = zext i32 %388 to i64
  %393 = add i64 %330, %392
  %394 = load i32, i32* %2, align 4
  %395 = add i32 %394, %388
  store i32 %395, i32* %2, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %322) #9
  %396 = add nuw nsw i64 %329, 1
  %397 = icmp eq i64 %396, %323
  br i1 %397, label %324, label %328

398:                                              ; preds = %398, %325
  %399 = phi i64 [ %327, %325 ], [ %400, %398 ]
  %400 = add nsw i64 %399, -1
  %401 = load %struct.EncWorkerData*, %struct.EncWorkerData** %326, align 8
  %402 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %401, i64 %400, i32 1
  %403 = load %struct.ThreadData*, %struct.ThreadData** %402, align 8
  call void @av1_accumulate_pack_bs_thread_data(%struct.AV1_COMP* %0, %struct.ThreadData* %403) #9
  %404 = icmp sgt i64 %400, 0
  br i1 %404, label %398, label %405

405:                                              ; preds = %398, %324
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %319) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %318) #9
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %21) #9
  call void @llvm.lifetime.end.p0i8(i64 45056, i8* nonnull %20) #9
  ret void

406:                                              ; preds = %406, %10
  %407 = phi i64 [ 0, %10 ], [ %419, %406 ]
  %408 = getelementptr inbounds [512 x i32], [512 x i32]* %17, i64 0, i64 %407
  %409 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %407, i32 2
  store i32* %408, i32** %409, align 8
  %410 = or i64 %407, 1
  %411 = getelementptr inbounds [512 x i32], [512 x i32]* %17, i64 0, i64 %410
  %412 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %410, i32 2
  store i32* %411, i32** %412, align 8
  %413 = or i64 %407, 2
  %414 = getelementptr inbounds [512 x i32], [512 x i32]* %17, i64 0, i64 %413
  %415 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %413, i32 2
  store i32* %414, i32** %415, align 8
  %416 = or i64 %407, 3
  %417 = getelementptr inbounds [512 x i32], [512 x i32]* %17, i64 0, i64 %416
  %418 = getelementptr inbounds [512 x %struct.PackBSParams], [512 x %struct.PackBSParams]* %16, i64 0, i64 %416, i32 2
  store i32* %417, i32** %418, align 8
  %419 = add nuw nsw i64 %407, 4
  %420 = icmp eq i64 %419, 512
  br i1 %420, label %22, label %406
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pack_bs_worker_hook(i8* nocapture readonly, i8*) #1 {
  %3 = bitcast i8* %1 to %struct.PackBSParams*
  %4 = bitcast i8* %0 to %struct.AV1_COMP**
  %5 = load %struct.AV1_COMP*, %struct.AV1_COMP** %4, align 8
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %5, i64 0, i32 8, i32 38, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %5, i64 0, i32 8, i32 38, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = mul nsw i32 %9, %7
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %5, i64 0, i32 61, i32 11, i32 0
  %12 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %11, align 8
  %13 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %12) #9
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %5, i64 0, i32 61, i32 11, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, %10
  br i1 %16, label %21, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %5, i64 0, i32 55
  %19 = getelementptr inbounds i8, i8* %0, i64 8
  %20 = bitcast i8* %19 to %struct.ThreadData**
  br label %24

21:                                               ; preds = %24, %2
  %22 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %11, align 8
  %23 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %22) #9
  ret i32 1

24:                                               ; preds = %17, %24
  %25 = phi i32 [ %15, %17 ], [ %41, %24 ]
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %14, align 8
  %27 = sext i32 %25 to i64
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %5, i64 0, i32 61, i32 11, i32 1, i64 %27, i32 0
  %29 = load i16, i16* %28, align 8
  %30 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %11, align 8
  %31 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %30) #9
  %32 = load %struct.TileDataEnc*, %struct.TileDataEnc** %18, align 8
  %33 = zext i16 %29 to i64
  %34 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %32, i64 %33, i32 2
  %35 = load %struct.ThreadData*, %struct.ThreadData** %20, align 8
  %36 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %35, i64 0, i32 0, i32 2, i32 39
  store %struct.frame_contexts* %34, %struct.frame_contexts** %36, align 8
  %37 = load %struct.ThreadData*, %struct.ThreadData** %20, align 8
  %38 = getelementptr inbounds %struct.PackBSParams, %struct.PackBSParams* %3, i64 %33
  tail call void @av1_pack_tile_info(%struct.AV1_COMP* %5, %struct.ThreadData* %37, %struct.PackBSParams* %38) #9
  %39 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %11, align 8
  %40 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %39) #9
  %41 = load i32, i32* %14, align 8
  %42 = icmp eq i32 %41, %10
  br i1 %42, label %21, label %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_cdef_mt_dealloc(%struct.AV1CdefSyncData* nocapture readonly) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.AV1CdefSyncData, %struct.AV1CdefSyncData* %0, i64 0, i32 0
  %3 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %2, align 8
  %4 = icmp eq %union.pthread_mutex_t* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* nonnull %3) #9
  %7 = bitcast %struct.AV1CdefSyncData* %0 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @aom_free(i8* %8) #9
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_cdef_mse_calc_frame_mt(%struct.AV1Common* nocapture readonly, %struct.MultiThreadInfo*, %struct.CdefSearchCtx*) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.MultiThreadInfo, %struct.MultiThreadInfo* %1, i64 0, i32 14
  %5 = getelementptr inbounds %struct.MultiThreadInfo, %struct.MultiThreadInfo* %1, i64 0, i32 1, i64 6
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.AV1CdefSyncData, %struct.AV1CdefSyncData* %4, i64 0, i32 0
  %8 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %7, align 8
  %9 = icmp eq %union.pthread_mutex_t* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %3
  %11 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %8, %union.pthread_mutexattr_t* null) #9
  br label %12

12:                                               ; preds = %3, %10
  %13 = getelementptr inbounds %struct.MultiThreadInfo, %struct.MultiThreadInfo* %1, i64 0, i32 14, i32 2
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %struct.MultiThreadInfo, %struct.MultiThreadInfo* %1, i64 0, i32 14, i32 3
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %struct.MultiThreadInfo, %struct.MultiThreadInfo* %1, i64 0, i32 14, i32 4
  store i32 0, i32* %15, align 8
  %16 = icmp sgt i32 %6, 0
  br i1 %16, label %17, label %66

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.MultiThreadInfo, %struct.MultiThreadInfo* %1, i64 0, i32 4
  %19 = sext i32 %6 to i64
  %20 = and i64 %19, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %17
  %23 = add nsw i64 %19, -1
  %24 = load %struct.AVxWorker*, %struct.AVxWorker** %18, align 8
  %25 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %24, i64 %23, i32 3
  store i32 (i8*, i8*)* @cdef_filter_block_worker_hook, i32 (i8*, i8*)** %25, align 8
  %26 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %24, i64 %23, i32 4
  %27 = bitcast i8** %26 to %struct.AV1CdefSyncData**
  store %struct.AV1CdefSyncData* %4, %struct.AV1CdefSyncData** %27, align 8
  %28 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %24, i64 %23, i32 5
  %29 = bitcast i8** %28 to %struct.CdefSearchCtx**
  store %struct.CdefSearchCtx* %2, %struct.CdefSearchCtx** %29, align 8
  br label %30

30:                                               ; preds = %17, %22
  %31 = phi i64 [ %19, %17 ], [ %23, %22 ]
  %32 = icmp eq i32 %6, 1
  br i1 %32, label %50, label %33

33:                                               ; preds = %30, %33
  %34 = phi i64 [ %42, %33 ], [ %31, %30 ]
  %35 = add nsw i64 %34, -1
  %36 = load %struct.AVxWorker*, %struct.AVxWorker** %18, align 8
  %37 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %36, i64 %35, i32 3
  store i32 (i8*, i8*)* @cdef_filter_block_worker_hook, i32 (i8*, i8*)** %37, align 8
  %38 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %36, i64 %35, i32 4
  %39 = bitcast i8** %38 to %struct.AV1CdefSyncData**
  store %struct.AV1CdefSyncData* %4, %struct.AV1CdefSyncData** %39, align 8
  %40 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %36, i64 %35, i32 5
  %41 = bitcast i8** %40 to %struct.CdefSearchCtx**
  store %struct.CdefSearchCtx* %2, %struct.CdefSearchCtx** %41, align 8
  %42 = add nsw i64 %34, -2
  %43 = load %struct.AVxWorker*, %struct.AVxWorker** %18, align 8
  %44 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %43, i64 %42, i32 3
  store i32 (i8*, i8*)* @cdef_filter_block_worker_hook, i32 (i8*, i8*)** %44, align 8
  %45 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %43, i64 %42, i32 4
  %46 = bitcast i8** %45 to %struct.AV1CdefSyncData**
  store %struct.AV1CdefSyncData* %4, %struct.AV1CdefSyncData** %46, align 8
  %47 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %43, i64 %42, i32 5
  %48 = bitcast i8** %47 to %struct.CdefSearchCtx**
  store %struct.CdefSearchCtx* %2, %struct.CdefSearchCtx** %48, align 8
  %49 = icmp sgt i64 %42, 0
  br i1 %49, label %33, label %50

50:                                               ; preds = %33, %30
  %51 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  %52 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %51, i64 0, i32 3
  %53 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %51, i64 0, i32 4
  %54 = add nsw i64 %19, -1
  %55 = load %struct.AVxWorker*, %struct.AVxWorker** %18, align 8
  %56 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %55, i64 %54
  %57 = icmp eq i64 %54, 0
  br i1 %57, label %69, label %58

58:                                               ; preds = %50, %58
  %59 = phi %struct.AVxWorker* [ %64, %58 ], [ %56, %50 ]
  %60 = phi i64 [ %62, %58 ], [ %54, %50 ]
  %61 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %52, align 8
  tail call void %61(%struct.AVxWorker* %59) #9
  %62 = add nsw i64 %60, -1
  %63 = load %struct.AVxWorker*, %struct.AVxWorker** %18, align 8
  %64 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %63, i64 %62
  %65 = icmp eq i64 %62, 0
  br i1 %65, label %69, label %58

66:                                               ; preds = %12
  %67 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  %68 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  br label %91

69:                                               ; preds = %58, %50
  %70 = phi %struct.AVxWorker* [ %56, %50 ], [ %64, %58 ]
  %71 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %53, align 8
  tail call void %71(%struct.AVxWorker* %70) #9
  %72 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #9
  %73 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %72, i64 0, i32 2
  br label %76

74:                                               ; preds = %76
  %75 = icmp eq i32 %86, 0
  br i1 %75, label %91, label %88

76:                                               ; preds = %76, %69
  %77 = phi i64 [ %19, %69 ], [ %79, %76 ]
  %78 = phi i32 [ 0, %69 ], [ %86, %76 ]
  %79 = add nsw i64 %77, -1
  %80 = load %struct.AVxWorker*, %struct.AVxWorker** %18, align 8
  %81 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %80, i64 %79
  %82 = load i32 (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)** %73, align 8
  %83 = tail call i32 %82(%struct.AVxWorker* %81) #9
  %84 = icmp eq i32 %83, 0
  %85 = zext i1 %84 to i32
  %86 = or i32 %78, %85
  %87 = icmp sgt i64 %79, 0
  br i1 %87, label %76, label %74

88:                                               ; preds = %74
  %89 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 1
  %90 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %89, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %90, i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.31, i64 0, i64 0)) #9
  br label %91

91:                                               ; preds = %66, %74, %88
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @cdef_filter_block_worker_hook(i8* nocapture, i8*) #1 {
  %3 = bitcast i8* %1 to %struct.CdefSearchCtx*
  %4 = bitcast i8* %0 to %union.pthread_mutex_t**
  %5 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %4, align 8
  %6 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %5) #9
  %7 = getelementptr inbounds i8, i8* %1, i64 7936
  %8 = bitcast i8* %7 to i32*
  %9 = getelementptr inbounds i8, i8* %1, i64 7940
  %10 = bitcast i8* %9 to i32*
  %11 = getelementptr inbounds i8, i8* %0, i64 16
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %123

15:                                               ; preds = %2
  %16 = getelementptr inbounds i8, i8* %1, i64 8
  %17 = bitcast i8* %16 to %struct.CommonModeInfoParams**
  %18 = getelementptr inbounds i8, i8* %0, i64 20
  %19 = bitcast i8* %18 to i32*
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds i8, i8* %1, i64 7968
  %23 = bitcast i8* %22 to i32*
  br label %24

24:                                               ; preds = %15, %116
  %25 = load i32, i32* %8, align 8
  %26 = load i32, i32* %10, align 4
  %27 = load i32, i32* %19, align 4
  %28 = load i32, i32* %21, align 8
  br label %29

29:                                               ; preds = %102, %24
  %30 = phi i32 [ %100, %102 ], [ %27, %24 ]
  %31 = phi i32 [ 0, %102 ], [ %28, %24 ]
  %32 = shl nsw i32 %30, 4
  %33 = and i32 %30, 1
  %34 = icmp eq i32 %33, 0
  br label %35

35:                                               ; preds = %29, %96
  %36 = phi i32 [ %97, %96 ], [ %31, %29 ]
  %37 = load %struct.CommonModeInfoParams*, %struct.CommonModeInfoParams** %17, align 8
  %38 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %37, i64 0, i32 9
  %39 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %38, align 8
  %40 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %37, i64 0, i32 11
  %41 = load i32, i32* %40, align 4
  %42 = mul nsw i32 %41, %32
  %43 = shl nsw i32 %36, 4
  %44 = add nsw i32 %42, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %39, i64 %45
  %47 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %46, align 8
  %48 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %37, i64 0, i32 3
  %49 = load i32, i32* %48, align 4
  %50 = sub nsw i32 %49, %32
  %51 = icmp slt i32 %50, 16
  %52 = select i1 %51, i32 %50, i32 16
  %53 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %37, i64 0, i32 4
  %54 = load i32, i32* %53, align 8
  %55 = sub nsw i32 %54, %43
  %56 = icmp sgt i32 %50, 0
  br i1 %56, label %57, label %96

57:                                               ; preds = %35
  %58 = icmp slt i32 %55, 16
  %59 = select i1 %58, i32 %55, i32 16
  %60 = sext i32 %42 to i64
  %61 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %39, i64 %60
  %62 = sext i32 %43 to i64
  %63 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %61, i64 %62
  %64 = icmp sgt i32 %55, 0
  %65 = sext i32 %41 to i64
  %66 = sext i32 %59 to i64
  br label %67

67:                                               ; preds = %80, %57
  %68 = phi i32 [ 0, %57 ], [ %81, %80 ]
  %69 = phi %struct.MB_MODE_INFO** [ %63, %57 ], [ %82, %80 ]
  br i1 %64, label %72, label %80

70:                                               ; preds = %72
  %71 = icmp slt i64 %79, %66
  br i1 %71, label %72, label %80

72:                                               ; preds = %67, %70
  %73 = phi i64 [ %79, %70 ], [ 0, %67 ]
  %74 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %69, i64 %73
  %75 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %74, align 8
  %76 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %75, i64 0, i32 23
  %77 = load i8, i8* %76, align 8
  %78 = icmp eq i8 %77, 0
  %79 = add nuw nsw i64 %73, 1
  br i1 %78, label %84, label %70

80:                                               ; preds = %70, %67
  %81 = add nuw nsw i32 %68, 1
  %82 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %69, i64 %65
  %83 = icmp slt i32 %81, %52
  br i1 %83, label %67, label %96

84:                                               ; preds = %72
  %85 = and i32 %36, 1
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %47, i64 0, i32 0
  %89 = load i8, i8* %88, align 8
  %90 = and i8 %89, -2
  %91 = icmp eq i8 %90, 14
  br i1 %91, label %96, label %92

92:                                               ; preds = %87, %84
  br i1 %34, label %103, label %93

93:                                               ; preds = %92
  %94 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %47, i64 0, i32 0
  %95 = load i8, i8* %94, align 8
  switch i8 %95, label %103 [
    i8 15, label %96
    i8 13, label %96
  ]

96:                                               ; preds = %80, %93, %93, %87, %35
  %97 = add nsw i32 %36, 1
  store i32 %97, i32* %21, align 8
  %98 = icmp eq i32 %97, %26
  br i1 %98, label %99, label %35

99:                                               ; preds = %96
  %100 = add nsw i32 %30, 1
  store i32 %100, i32* %19, align 4
  %101 = icmp eq i32 %100, %25
  br i1 %101, label %115, label %102

102:                                              ; preds = %99
  store i32 0, i32* %21, align 8
  br label %29

103:                                              ; preds = %93, %92
  %104 = load i32, i32* %23, align 8
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %23, align 8
  %106 = load i32, i32* %21, align 8
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %21, align 8
  %108 = icmp eq i32 %107, %26
  br i1 %108, label %109, label %116

109:                                              ; preds = %103
  %110 = load i32, i32* %19, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %19, align 4
  %112 = icmp eq i32 %111, %25
  br i1 %112, label %113, label %114

113:                                              ; preds = %109
  store i32 1, i32* %12, align 8
  br label %116

114:                                              ; preds = %109
  store i32 0, i32* %21, align 8
  br label %116

115:                                              ; preds = %99
  store i32 1, i32* %12, align 8
  br label %123

116:                                              ; preds = %103, %113, %114
  %117 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %4, align 8
  %118 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %117) #9
  tail call void @av1_cdef_mse_calc_block(%struct.CdefSearchCtx* %3, i32 %30, i32 %36, i32 %104) #9
  %119 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %4, align 8
  %120 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %119) #9
  %121 = load i32, i32* %12, align 8
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %24, label %123

123:                                              ; preds = %116, %2, %115
  %124 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %4, align 8
  %125 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %124) #9
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @compute_num_mod_workers(%struct.AV1_COMP*, i32) local_unnamed_addr #1 {
  %3 = alloca %struct.TileInfo, align 8
  %4 = alloca %struct.TileInfo, align 8
  %5 = alloca %struct.TileInfo, align 8
  %6 = alloca %struct.TileInfo, align 8
  %7 = alloca %struct.TileInfo, align 8
  %8 = alloca %struct.TileInfo, align 8
  %9 = alloca %struct.TileInfo, align 8
  %10 = alloca %struct.TileInfo, align 8
  switch i32 %1, label %432 [
    i32 0, label %11
    i32 1, label %64
    i32 2, label %125
    i32 3, label %174
    i32 4, label %175
    i32 5, label %224
    i32 6, label %273
    i32 7, label %322
    i32 8, label %371
    i32 9, label %420
  ]

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %432, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 29
  %17 = load i32, i32* %16, align 8
  %18 = icmp slt i32 %17, 2
  br i1 %18, label %432, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 35
  %21 = load i8, i8* %20, align 1, !range !2
  %22 = icmp eq i8 %21, 0
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  br i1 %22, label %56, label %24

24:                                               ; preds = %19
  %25 = bitcast %struct.TileInfo* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #9
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 24, i1 false) #9
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %52

31:                                               ; preds = %24
  %32 = icmp sgt i32 %27, 0
  br label %33

33:                                               ; preds = %36, %31
  %34 = phi i32 [ 0, %31 ], [ %38, %36 ]
  %35 = phi i32 [ 0, %31 ], [ %37, %36 ]
  br i1 %32, label %40, label %36

36:                                               ; preds = %40, %33
  %37 = phi i32 [ %35, %33 ], [ %49, %40 ]
  %38 = add nuw nsw i32 %34, 1
  %39 = icmp eq i32 %38, %29
  br i1 %39, label %52, label %33

40:                                               ; preds = %33, %40
  %41 = phi i32 [ %50, %40 ], [ 0, %33 ]
  %42 = phi i32 [ %49, %40 ], [ %35, %33 ]
  call void @av1_tile_init(%struct.TileInfo* nonnull %10, %struct.AV1Common* %23, i32 %34, i32 %41) #9
  %43 = call i32 @av1_get_sb_rows_in_tile(%struct.AV1Common* %23, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %10) #9
  %44 = call i32 @av1_get_sb_cols_in_tile(%struct.AV1Common* %23, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %10) #9
  %45 = add nsw i32 %44, 1
  %46 = ashr i32 %45, 1
  %47 = icmp slt i32 %46, %43
  %48 = select i1 %47, i32 %46, i32 %43
  %49 = add nsw i32 %48, %42
  %50 = add nuw nsw i32 %41, 1
  %51 = icmp eq i32 %50, %27
  br i1 %51, label %36, label %40

52:                                               ; preds = %36, %24
  %53 = phi i32 [ 0, %24 ], [ %37, %36 ]
  %54 = icmp sgt i32 %53, %17
  %55 = select i1 %54, i32 %17, i32 %53
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #9
  br label %432

56:                                               ; preds = %19
  %57 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = mul nsw i32 %60, %58
  %62 = icmp sgt i32 %61, %17
  %63 = select i1 %62, i32 %17, i32 %61
  br label %432

64:                                               ; preds = %2
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 2
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 29
  %69 = load i32, i32* %68, align 8
  %70 = icmp slt i32 %69, 2
  br i1 %67, label %117, label %71

71:                                               ; preds = %64
  br i1 %70, label %432, label %72

72:                                               ; preds = %71
  %73 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 35
  %74 = load i8, i8* %73, align 1, !range !2
  %75 = icmp eq i8 %74, 0
  %76 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  br i1 %75, label %109, label %77

77:                                               ; preds = %72
  %78 = bitcast %struct.TileInfo* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %78) #9
  %79 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 -86, i64 24, i1 false) #9
  %80 = load i32, i32* %79, align 8
  %81 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = icmp sgt i32 %82, 0
  br i1 %83, label %84, label %105

84:                                               ; preds = %77
  %85 = icmp sgt i32 %80, 0
  br label %86

86:                                               ; preds = %89, %84
  %87 = phi i32 [ 0, %84 ], [ %91, %89 ]
  %88 = phi i32 [ 0, %84 ], [ %90, %89 ]
  br i1 %85, label %93, label %89

89:                                               ; preds = %93, %86
  %90 = phi i32 [ %88, %86 ], [ %102, %93 ]
  %91 = add nuw nsw i32 %87, 1
  %92 = icmp eq i32 %91, %82
  br i1 %92, label %105, label %86

93:                                               ; preds = %86, %93
  %94 = phi i32 [ %103, %93 ], [ 0, %86 ]
  %95 = phi i32 [ %102, %93 ], [ %88, %86 ]
  call void @av1_tile_init(%struct.TileInfo* nonnull %9, %struct.AV1Common* %76, i32 %87, i32 %94) #9
  %96 = call i32 @av1_get_sb_rows_in_tile(%struct.AV1Common* %76, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %9) #9
  %97 = call i32 @av1_get_sb_cols_in_tile(%struct.AV1Common* %76, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %9) #9
  %98 = add nsw i32 %97, 1
  %99 = ashr i32 %98, 1
  %100 = icmp slt i32 %99, %96
  %101 = select i1 %100, i32 %99, i32 %96
  %102 = add nsw i32 %101, %95
  %103 = add nuw nsw i32 %94, 1
  %104 = icmp eq i32 %103, %80
  br i1 %104, label %89, label %93

105:                                              ; preds = %89, %77
  %106 = phi i32 [ 0, %77 ], [ %90, %89 ]
  %107 = icmp sgt i32 %106, %69
  %108 = select i1 %107, i32 %69, i32 %106
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %78) #9
  br label %432

109:                                              ; preds = %72
  %110 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %111 = load i32, i32* %110, align 8
  %112 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = mul nsw i32 %113, %111
  %115 = icmp sgt i32 %114, %69
  %116 = select i1 %115, i32 %69, i32 %114
  br label %432

117:                                              ; preds = %64
  br i1 %70, label %432, label %118

118:                                              ; preds = %117
  %119 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %120 = load i32, i32* %119, align 4
  %121 = add nsw i32 %120, 31
  %122 = sdiv i32 %121, 32
  %123 = icmp slt i32 %69, %122
  %124 = select i1 %123, i32 %69, i32 %122
  br label %432

125:                                              ; preds = %2
  %126 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 29
  %127 = load i32, i32* %126, align 8
  %128 = icmp slt i32 %127, 2
  br i1 %128, label %432, label %129

129:                                              ; preds = %125
  %130 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 35
  %131 = load i8, i8* %130, align 1, !range !2
  %132 = icmp eq i8 %131, 0
  %133 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  br i1 %132, label %166, label %134

134:                                              ; preds = %129
  %135 = bitcast %struct.TileInfo* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %135) #9
  %136 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %135, i8 -86, i64 24, i1 false) #9
  %137 = load i32, i32* %136, align 8
  %138 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %139 = load i32, i32* %138, align 4
  %140 = icmp sgt i32 %139, 0
  br i1 %140, label %141, label %162

141:                                              ; preds = %134
  %142 = icmp sgt i32 %137, 0
  br label %143

143:                                              ; preds = %146, %141
  %144 = phi i32 [ 0, %141 ], [ %148, %146 ]
  %145 = phi i32 [ 0, %141 ], [ %147, %146 ]
  br i1 %142, label %150, label %146

146:                                              ; preds = %150, %143
  %147 = phi i32 [ %145, %143 ], [ %159, %150 ]
  %148 = add nuw nsw i32 %144, 1
  %149 = icmp eq i32 %148, %139
  br i1 %149, label %162, label %143

150:                                              ; preds = %143, %150
  %151 = phi i32 [ %160, %150 ], [ 0, %143 ]
  %152 = phi i32 [ %159, %150 ], [ %145, %143 ]
  call void @av1_tile_init(%struct.TileInfo* nonnull %8, %struct.AV1Common* %133, i32 %144, i32 %151) #9
  %153 = call i32 @av1_get_sb_rows_in_tile(%struct.AV1Common* %133, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %8) #9
  %154 = call i32 @av1_get_sb_cols_in_tile(%struct.AV1Common* %133, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %8) #9
  %155 = add nsw i32 %154, 1
  %156 = ashr i32 %155, 1
  %157 = icmp slt i32 %156, %153
  %158 = select i1 %157, i32 %156, i32 %153
  %159 = add nsw i32 %158, %152
  %160 = add nuw nsw i32 %151, 1
  %161 = icmp eq i32 %160, %137
  br i1 %161, label %146, label %150

162:                                              ; preds = %146, %134
  %163 = phi i32 [ 0, %134 ], [ %147, %146 ]
  %164 = icmp sgt i32 %163, %127
  %165 = select i1 %164, i32 %127, i32 %163
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %135) #9
  br label %432

166:                                              ; preds = %129
  %167 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %168 = load i32, i32* %167, align 8
  %169 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %170 = load i32, i32* %169, align 4
  %171 = mul nsw i32 %170, %168
  %172 = icmp sgt i32 %171, %127
  %173 = select i1 %172, i32 %127, i32 %171
  br label %432

174:                                              ; preds = %2
  br label %432

175:                                              ; preds = %2
  %176 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 29
  %177 = load i32, i32* %176, align 8
  %178 = icmp slt i32 %177, 2
  br i1 %178, label %432, label %179

179:                                              ; preds = %175
  %180 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 35
  %181 = load i8, i8* %180, align 1, !range !2
  %182 = icmp eq i8 %181, 0
  %183 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  br i1 %182, label %216, label %184

184:                                              ; preds = %179
  %185 = bitcast %struct.TileInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %185) #9
  %186 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %185, i8 -86, i64 24, i1 false) #9
  %187 = load i32, i32* %186, align 8
  %188 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %189 = load i32, i32* %188, align 4
  %190 = icmp sgt i32 %189, 0
  br i1 %190, label %191, label %212

191:                                              ; preds = %184
  %192 = icmp sgt i32 %187, 0
  br label %193

193:                                              ; preds = %196, %191
  %194 = phi i32 [ 0, %191 ], [ %198, %196 ]
  %195 = phi i32 [ 0, %191 ], [ %197, %196 ]
  br i1 %192, label %200, label %196

196:                                              ; preds = %200, %193
  %197 = phi i32 [ %195, %193 ], [ %209, %200 ]
  %198 = add nuw nsw i32 %194, 1
  %199 = icmp eq i32 %198, %189
  br i1 %199, label %212, label %193

200:                                              ; preds = %193, %200
  %201 = phi i32 [ %210, %200 ], [ 0, %193 ]
  %202 = phi i32 [ %209, %200 ], [ %195, %193 ]
  call void @av1_tile_init(%struct.TileInfo* nonnull %7, %struct.AV1Common* %183, i32 %194, i32 %201) #9
  %203 = call i32 @av1_get_sb_rows_in_tile(%struct.AV1Common* %183, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %7) #9
  %204 = call i32 @av1_get_sb_cols_in_tile(%struct.AV1Common* %183, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %7) #9
  %205 = add nsw i32 %204, 1
  %206 = ashr i32 %205, 1
  %207 = icmp slt i32 %206, %203
  %208 = select i1 %207, i32 %206, i32 %203
  %209 = add nsw i32 %208, %202
  %210 = add nuw nsw i32 %201, 1
  %211 = icmp eq i32 %210, %187
  br i1 %211, label %196, label %200

212:                                              ; preds = %196, %184
  %213 = phi i32 [ 0, %184 ], [ %197, %196 ]
  %214 = icmp sgt i32 %213, %177
  %215 = select i1 %214, i32 %177, i32 %213
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %185) #9
  br label %432

216:                                              ; preds = %179
  %217 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %218 = load i32, i32* %217, align 8
  %219 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %220 = load i32, i32* %219, align 4
  %221 = mul nsw i32 %220, %218
  %222 = icmp sgt i32 %221, %177
  %223 = select i1 %222, i32 %177, i32 %221
  br label %432

224:                                              ; preds = %2
  %225 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 29
  %226 = load i32, i32* %225, align 8
  %227 = icmp slt i32 %226, 2
  br i1 %227, label %432, label %228

228:                                              ; preds = %224
  %229 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 35
  %230 = load i8, i8* %229, align 1, !range !2
  %231 = icmp eq i8 %230, 0
  %232 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  br i1 %231, label %265, label %233

233:                                              ; preds = %228
  %234 = bitcast %struct.TileInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %234) #9
  %235 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %234, i8 -86, i64 24, i1 false) #9
  %236 = load i32, i32* %235, align 8
  %237 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %238 = load i32, i32* %237, align 4
  %239 = icmp sgt i32 %238, 0
  br i1 %239, label %240, label %261

240:                                              ; preds = %233
  %241 = icmp sgt i32 %236, 0
  br label %242

242:                                              ; preds = %245, %240
  %243 = phi i32 [ 0, %240 ], [ %247, %245 ]
  %244 = phi i32 [ 0, %240 ], [ %246, %245 ]
  br i1 %241, label %249, label %245

245:                                              ; preds = %249, %242
  %246 = phi i32 [ %244, %242 ], [ %258, %249 ]
  %247 = add nuw nsw i32 %243, 1
  %248 = icmp eq i32 %247, %238
  br i1 %248, label %261, label %242

249:                                              ; preds = %242, %249
  %250 = phi i32 [ %259, %249 ], [ 0, %242 ]
  %251 = phi i32 [ %258, %249 ], [ %244, %242 ]
  call void @av1_tile_init(%struct.TileInfo* nonnull %6, %struct.AV1Common* %232, i32 %243, i32 %250) #9
  %252 = call i32 @av1_get_sb_rows_in_tile(%struct.AV1Common* %232, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %6) #9
  %253 = call i32 @av1_get_sb_cols_in_tile(%struct.AV1Common* %232, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %6) #9
  %254 = add nsw i32 %253, 1
  %255 = ashr i32 %254, 1
  %256 = icmp slt i32 %255, %252
  %257 = select i1 %256, i32 %255, i32 %252
  %258 = add nsw i32 %257, %251
  %259 = add nuw nsw i32 %250, 1
  %260 = icmp eq i32 %259, %236
  br i1 %260, label %245, label %249

261:                                              ; preds = %245, %233
  %262 = phi i32 [ 0, %233 ], [ %246, %245 ]
  %263 = icmp sgt i32 %262, %226
  %264 = select i1 %263, i32 %226, i32 %262
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %234) #9
  br label %432

265:                                              ; preds = %228
  %266 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %267 = load i32, i32* %266, align 8
  %268 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %269 = load i32, i32* %268, align 4
  %270 = mul nsw i32 %269, %267
  %271 = icmp sgt i32 %270, %226
  %272 = select i1 %271, i32 %226, i32 %270
  br label %432

273:                                              ; preds = %2
  %274 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 29
  %275 = load i32, i32* %274, align 8
  %276 = icmp slt i32 %275, 2
  br i1 %276, label %432, label %277

277:                                              ; preds = %273
  %278 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 35
  %279 = load i8, i8* %278, align 1, !range !2
  %280 = icmp eq i8 %279, 0
  %281 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  br i1 %280, label %314, label %282

282:                                              ; preds = %277
  %283 = bitcast %struct.TileInfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %283) #9
  %284 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %283, i8 -86, i64 24, i1 false) #9
  %285 = load i32, i32* %284, align 8
  %286 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %287 = load i32, i32* %286, align 4
  %288 = icmp sgt i32 %287, 0
  br i1 %288, label %289, label %310

289:                                              ; preds = %282
  %290 = icmp sgt i32 %285, 0
  br label %291

291:                                              ; preds = %294, %289
  %292 = phi i32 [ 0, %289 ], [ %296, %294 ]
  %293 = phi i32 [ 0, %289 ], [ %295, %294 ]
  br i1 %290, label %298, label %294

294:                                              ; preds = %298, %291
  %295 = phi i32 [ %293, %291 ], [ %307, %298 ]
  %296 = add nuw nsw i32 %292, 1
  %297 = icmp eq i32 %296, %287
  br i1 %297, label %310, label %291

298:                                              ; preds = %291, %298
  %299 = phi i32 [ %308, %298 ], [ 0, %291 ]
  %300 = phi i32 [ %307, %298 ], [ %293, %291 ]
  call void @av1_tile_init(%struct.TileInfo* nonnull %5, %struct.AV1Common* %281, i32 %292, i32 %299) #9
  %301 = call i32 @av1_get_sb_rows_in_tile(%struct.AV1Common* %281, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %5) #9
  %302 = call i32 @av1_get_sb_cols_in_tile(%struct.AV1Common* %281, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %5) #9
  %303 = add nsw i32 %302, 1
  %304 = ashr i32 %303, 1
  %305 = icmp slt i32 %304, %301
  %306 = select i1 %305, i32 %304, i32 %301
  %307 = add nsw i32 %306, %300
  %308 = add nuw nsw i32 %299, 1
  %309 = icmp eq i32 %308, %285
  br i1 %309, label %294, label %298

310:                                              ; preds = %294, %282
  %311 = phi i32 [ 0, %282 ], [ %295, %294 ]
  %312 = icmp sgt i32 %311, %275
  %313 = select i1 %312, i32 %275, i32 %311
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %283) #9
  br label %432

314:                                              ; preds = %277
  %315 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %316 = load i32, i32* %315, align 8
  %317 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %318 = load i32, i32* %317, align 4
  %319 = mul nsw i32 %318, %316
  %320 = icmp sgt i32 %319, %275
  %321 = select i1 %320, i32 %275, i32 %319
  br label %432

322:                                              ; preds = %2
  %323 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 29
  %324 = load i32, i32* %323, align 8
  %325 = icmp slt i32 %324, 2
  br i1 %325, label %432, label %326

326:                                              ; preds = %322
  %327 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 35
  %328 = load i8, i8* %327, align 1, !range !2
  %329 = icmp eq i8 %328, 0
  %330 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  br i1 %329, label %363, label %331

331:                                              ; preds = %326
  %332 = bitcast %struct.TileInfo* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %332) #9
  %333 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %332, i8 -86, i64 24, i1 false) #9
  %334 = load i32, i32* %333, align 8
  %335 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %336 = load i32, i32* %335, align 4
  %337 = icmp sgt i32 %336, 0
  br i1 %337, label %338, label %359

338:                                              ; preds = %331
  %339 = icmp sgt i32 %334, 0
  br label %340

340:                                              ; preds = %343, %338
  %341 = phi i32 [ 0, %338 ], [ %345, %343 ]
  %342 = phi i32 [ 0, %338 ], [ %344, %343 ]
  br i1 %339, label %347, label %343

343:                                              ; preds = %347, %340
  %344 = phi i32 [ %342, %340 ], [ %356, %347 ]
  %345 = add nuw nsw i32 %341, 1
  %346 = icmp eq i32 %345, %336
  br i1 %346, label %359, label %340

347:                                              ; preds = %340, %347
  %348 = phi i32 [ %357, %347 ], [ 0, %340 ]
  %349 = phi i32 [ %356, %347 ], [ %342, %340 ]
  call void @av1_tile_init(%struct.TileInfo* nonnull %4, %struct.AV1Common* %330, i32 %341, i32 %348) #9
  %350 = call i32 @av1_get_sb_rows_in_tile(%struct.AV1Common* %330, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %4) #9
  %351 = call i32 @av1_get_sb_cols_in_tile(%struct.AV1Common* %330, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %4) #9
  %352 = add nsw i32 %351, 1
  %353 = ashr i32 %352, 1
  %354 = icmp slt i32 %353, %350
  %355 = select i1 %354, i32 %353, i32 %350
  %356 = add nsw i32 %355, %349
  %357 = add nuw nsw i32 %348, 1
  %358 = icmp eq i32 %357, %334
  br i1 %358, label %343, label %347

359:                                              ; preds = %343, %331
  %360 = phi i32 [ 0, %331 ], [ %344, %343 ]
  %361 = icmp sgt i32 %360, %324
  %362 = select i1 %361, i32 %324, i32 %360
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %332) #9
  br label %432

363:                                              ; preds = %326
  %364 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %365 = load i32, i32* %364, align 8
  %366 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %367 = load i32, i32* %366, align 4
  %368 = mul nsw i32 %367, %365
  %369 = icmp sgt i32 %368, %324
  %370 = select i1 %369, i32 %324, i32 %368
  br label %432

371:                                              ; preds = %2
  %372 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 29
  %373 = load i32, i32* %372, align 8
  %374 = icmp slt i32 %373, 2
  br i1 %374, label %432, label %375

375:                                              ; preds = %371
  %376 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 35
  %377 = load i8, i8* %376, align 1, !range !2
  %378 = icmp eq i8 %377, 0
  %379 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  br i1 %378, label %412, label %380

380:                                              ; preds = %375
  %381 = bitcast %struct.TileInfo* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %381) #9
  %382 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %381, i8 -86, i64 24, i1 false) #9
  %383 = load i32, i32* %382, align 8
  %384 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %385 = load i32, i32* %384, align 4
  %386 = icmp sgt i32 %385, 0
  br i1 %386, label %387, label %408

387:                                              ; preds = %380
  %388 = icmp sgt i32 %383, 0
  br label %389

389:                                              ; preds = %392, %387
  %390 = phi i32 [ 0, %387 ], [ %394, %392 ]
  %391 = phi i32 [ 0, %387 ], [ %393, %392 ]
  br i1 %388, label %396, label %392

392:                                              ; preds = %396, %389
  %393 = phi i32 [ %391, %389 ], [ %405, %396 ]
  %394 = add nuw nsw i32 %390, 1
  %395 = icmp eq i32 %394, %385
  br i1 %395, label %408, label %389

396:                                              ; preds = %389, %396
  %397 = phi i32 [ %406, %396 ], [ 0, %389 ]
  %398 = phi i32 [ %405, %396 ], [ %391, %389 ]
  call void @av1_tile_init(%struct.TileInfo* nonnull %3, %struct.AV1Common* %379, i32 %390, i32 %397) #9
  %399 = call i32 @av1_get_sb_rows_in_tile(%struct.AV1Common* %379, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %3) #9
  %400 = call i32 @av1_get_sb_cols_in_tile(%struct.AV1Common* %379, %struct.TileInfo* nonnull byval(%struct.TileInfo) align 8 %3) #9
  %401 = add nsw i32 %400, 1
  %402 = ashr i32 %401, 1
  %403 = icmp slt i32 %402, %399
  %404 = select i1 %403, i32 %402, i32 %399
  %405 = add nsw i32 %404, %398
  %406 = add nuw nsw i32 %397, 1
  %407 = icmp eq i32 %406, %383
  br i1 %407, label %392, label %396

408:                                              ; preds = %392, %380
  %409 = phi i32 [ 0, %380 ], [ %393, %392 ]
  %410 = icmp sgt i32 %409, %373
  %411 = select i1 %410, i32 %373, i32 %409
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %381) #9
  br label %432

412:                                              ; preds = %375
  %413 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %414 = load i32, i32* %413, align 8
  %415 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %416 = load i32, i32* %415, align 4
  %417 = mul nsw i32 %416, %414
  %418 = icmp sgt i32 %417, %373
  %419 = select i1 %418, i32 %373, i32 %417
  br label %432

420:                                              ; preds = %2
  %421 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 29
  %422 = load i32, i32* %421, align 8
  %423 = icmp slt i32 %422, 2
  br i1 %423, label %432, label %424

424:                                              ; preds = %420
  %425 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %426 = load i32, i32* %425, align 8
  %427 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %428 = load i32, i32* %427, align 4
  %429 = mul nsw i32 %428, %426
  %430 = icmp sgt i32 %429, %422
  %431 = select i1 %430, i32 %422, i32 %429
  br label %432

432:                                              ; preds = %424, %420, %412, %408, %371, %363, %359, %322, %314, %310, %273, %265, %261, %224, %216, %212, %175, %166, %162, %125, %118, %117, %109, %105, %71, %56, %52, %15, %11, %2, %174
  %433 = phi i32 [ 0, %2 ], [ 1, %174 ], [ 0, %11 ], [ %55, %52 ], [ %63, %56 ], [ 1, %15 ], [ %124, %118 ], [ 1, %117 ], [ %108, %105 ], [ %116, %109 ], [ 1, %71 ], [ %165, %162 ], [ %173, %166 ], [ 1, %125 ], [ %215, %212 ], [ %223, %216 ], [ 1, %175 ], [ %264, %261 ], [ %272, %265 ], [ 1, %224 ], [ %313, %310 ], [ %321, %314 ], [ 1, %273 ], [ %362, %359 ], [ %370, %363 ], [ 1, %322 ], [ %411, %408 ], [ %419, %412 ], [ 1, %371 ], [ %431, %424 ], [ 1, %420 ]
  ret i32 %433
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_compute_num_workers_for_mt(%struct.AV1_COMP*) local_unnamed_addr #1 {
  %2 = tail call i32 @compute_num_mod_workers(%struct.AV1_COMP* %0, i32 0)
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 0
  store i32 %2, i32* %3, align 4
  %4 = tail call i32 @compute_num_mod_workers(%struct.AV1_COMP* %0, i32 1)
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 1
  store i32 %4, i32* %5, align 4
  %6 = tail call i32 @compute_num_mod_workers(%struct.AV1_COMP* %0, i32 2)
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 2
  store i32 %6, i32* %7, align 4
  %8 = tail call i32 @compute_num_mod_workers(%struct.AV1_COMP* %0, i32 3)
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 3
  store i32 %8, i32* %9, align 4
  %10 = tail call i32 @compute_num_mod_workers(%struct.AV1_COMP* %0, i32 4)
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 4
  store i32 %10, i32* %11, align 4
  %12 = tail call i32 @compute_num_mod_workers(%struct.AV1_COMP* %0, i32 5)
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 5
  store i32 %12, i32* %13, align 4
  %14 = tail call i32 @compute_num_mod_workers(%struct.AV1_COMP* %0, i32 6)
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 6
  store i32 %14, i32* %15, align 4
  %16 = tail call i32 @compute_num_mod_workers(%struct.AV1_COMP* %0, i32 7)
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 7
  store i32 %16, i32* %17, align 4
  %18 = tail call i32 @compute_num_mod_workers(%struct.AV1_COMP* %0, i32 8)
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 8
  store i32 %18, i32* %19, align 4
  %20 = tail call i32 @compute_num_mod_workers(%struct.AV1_COMP* %0, i32 9)
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 9
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_cond_destroy(%union.pthread_cond_t*) local_unnamed_addr #3

declare void @av1_setup_sms_tree(%struct.AV1_COMP*, %struct.ThreadData*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @av1_init_cyclic_refresh_counters(%struct.macroblock*) local_unnamed_addr #4

declare void @av1_encode_tile(%struct.AV1_COMP*, %struct.ThreadData*, i32, i32) local_unnamed_addr #4

declare void @av1_accumulate_cyclic_refresh_counters(%struct.CYCLIC_REFRESH*, %struct.macroblock*) local_unnamed_addr #4

declare i32 @av1_get_sb_rows_in_tile(%struct.AV1Common*, %struct.TileInfo* byval(%struct.TileInfo) align 8) local_unnamed_addr #4

declare i32 @av1_get_sb_cols_in_tile(%struct.AV1Common*, %struct.TileInfo* byval(%struct.TileInfo) align 8) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_cond_init(%union.pthread_cond_t*, %union.pthread_condattr_t*) local_unnamed_addr #3

declare void @cfl_init(%struct.cfl_ctx*, %struct.SequenceHeader*) local_unnamed_addr #4

declare void @av1_crc32c_calculator_init(%struct._CRC32C*) local_unnamed_addr #4

declare void @av1_encode_sb_row(%struct.AV1_COMP*, %struct.ThreadData*, i32, i32, i32) local_unnamed_addr #4

declare void @av1_reset_loop_filter_delta(%struct.macroblockd*, i32) local_unnamed_addr #4

declare void @av1_write_obu_tg_tile_headers(%struct.AV1_COMP*, %struct.macroblock*, %struct.PackBSParams*, i32) local_unnamed_addr #4

declare void @av1_reset_pack_bs_thread_data(%struct.ThreadData*) local_unnamed_addr #4

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #8

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @compare_tile_order(i8* nocapture readonly, i8* nocapture readonly) #5 {
  %3 = getelementptr inbounds i8, i8* %0, i64 4
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds i8, i8* %1, i64 4
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = icmp sgt i32 %5, %8
  br i1 %9, label %19, label %10

10:                                               ; preds = %2
  %11 = icmp eq i32 %5, %8
  br i1 %11, label %12, label %19

12:                                               ; preds = %10
  %13 = bitcast i8* %0 to i16*
  %14 = load i16, i16* %13, align 4
  %15 = bitcast i8* %1 to i16*
  %16 = load i16, i16* %15, align 4
  %17 = icmp ugt i16 %14, %16
  %18 = select i1 %17, i32 1, i32 -1
  br label %19

19:                                               ; preds = %10, %2, %12
  %20 = phi i32 [ %18, %12 ], [ -1, %2 ], [ 1, %10 ]
  ret i32 %20
}

declare void @av1_pack_tile_info(%struct.AV1_COMP*, %struct.ThreadData*, %struct.PackBSParams*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

declare void @av1_write_last_tile_info(%struct.AV1_COMP*, %struct.FrameHeaderInfo*, %struct.aom_write_bit_buffer*, i64*, i8*, i32*, i8**, i32*, i32*, i32, i8 zeroext) local_unnamed_addr #4

declare void @av1_accumulate_pack_bs_thread_data(%struct.AV1_COMP*, %struct.ThreadData*) local_unnamed_addr #4

declare void @av1_cdef_mse_calc_block(%struct.CdefSearchCtx*, i32, i32, i32) local_unnamed_addr #4

declare void @av1_tile_init(%struct.TileInfo*, %struct.AV1Common*, i32, i32) local_unnamed_addr #4

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !9}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.unroll.disable"}
