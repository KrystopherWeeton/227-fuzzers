; ModuleID = '../../v8/src/interpreter/bytecode-array-writer.cc'
source_filename = "../../v8/src/interpreter/bytecode-array-writer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::interpreter::BytecodeArrayWriter" = type <{ i32, i32, i32, [4 x i8], %"class.v8::internal::ZoneVector", i32, [4 x i8], %"class.v8::internal::SourcePositionTableBuilder", %"class.v8::internal::interpreter::ConstantArrayBuilder"*, i8, [7 x i8], i64, i8, i8, i8, [5 x i8] }>
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::SourcePositionTableBuilder" = type { i32, %"class.v8::internal::ZoneVector", %"struct.v8::internal::PositionTableEntry" }
%"struct.v8::internal::PositionTableEntry" = type <{ i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.5" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.14" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.8", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i64 }
%"class.std::__1::set.14" = type { %"class.std::__1::__tree.15" }
%"class.std::__1::__tree.15" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.8", %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::interpreter::ConstantArrayBuilder" = type { [3 x %"struct.v8::internal::interpreter::ConstantArrayBuilder::ConstantArraySlice"*], %"class.v8::base::TemplateHashMapImpl", %"class.v8::internal::ZoneMap", %"class.v8::internal::ZoneVector.37", %"class.v8::internal::ZoneMap.44", i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.v8::internal::interpreter::ConstantArrayBuilder::ConstantArraySlice" = type { i64, i64, i64, i8, %"class.v8::internal::ZoneVector.21" }
%"class.v8::internal::ZoneVector.21" = type { %"class.std::__1::vector.22" }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"class.v8::internal::interpreter::ConstantArrayBuilder::Entry"*, %"class.v8::internal::interpreter::ConstantArrayBuilder::Entry"*, %"class.std::__1::__compressed_pair.27" }
%"class.v8::internal::interpreter::ConstantArrayBuilder::Entry" = type <{ %union.anon, i8, [7 x i8] }>
%union.anon = type { %"class.v8::internal::Handle.24" }
%"class.v8::internal::Handle.24" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28", %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.v8::internal::interpreter::ConstantArrayBuilder::Entry"* }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.v8::internal::ZoneAllocator.30" }
%"class.v8::internal::ZoneAllocator.30" = type { %"class.v8::internal::Zone"* }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<long, unsigned int, v8::base::KeyEqualityMatcher<long>, v8::internal::ZoneAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<long, unsigned int, v8::base::KeyEqualityMatcher<long>, v8::internal::ZoneAllocationPolicy>::Impl" = type { %"class.v8::internal::ZoneAllocationPolicy", %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"class.v8::internal::ZoneAllocationPolicy" = type { %"class.v8::internal::Zone"* }
%"struct.v8::base::TemplateHashMapEntry" = type opaque
%"class.v8::internal::ZoneMap" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.31" }
%"class.std::__1::__tree.31" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.9", %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.v8::internal::ZoneAllocator.34" }
%"class.v8::internal::ZoneAllocator.34" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::internal::ZoneVector.37" = type { %"class.std::__1::vector.38" }
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.40" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41", %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.std::__1::pair"* }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.v8::internal::ZoneAllocator.43" }
%"class.v8::internal::ZoneAllocator.43" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneMap.44" = type { %"class.std::__1::map.45" }
%"class.std::__1::map.45" = type { %"class.std::__1::__tree.46" }
%"class.std::__1::__tree.46" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.47", %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.9", %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.v8::internal::ZoneAllocator.49" }
%"class.v8::internal::ZoneAllocator.49" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr.61", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.693", %"class.std::__1::unique_ptr.714", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.724", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.859", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.872", void (i32, %"class.v8::SharedArrayBuffer"*, i64, i64, double, %"class.v8::Isolate::AtomicsWaitWakeHandle"*, i8*)*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.882", void (%"class.v8::Context"*, %"class.v8::Module"*, %"class.v8::Object"*)*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.893", %"struct.std::__1::atomic.218", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.968", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.1013"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.1026", i32, i8, i8, i32, i32, %"class.std::__1::vector.1032", %"class.std::__1::vector.1032", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.1039", i64, %"class.std::__1::unordered_map.1040", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.589", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.226", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1096", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1134", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, %"class.v8::Value"* (%"class.v8::Context"*, %"class.v8::Value"*, %"class.v8::Array"*)*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1168", %"class.std::__1::vector.1172", %"class.std::__1::vector.1172", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic.55", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic.55" = type { %"struct.std::__1::__atomic_base.56" }
%"struct.std::__1::__atomic_base.56" = type { %"struct.std::__1::__cxx_atomic_impl.57" }
%"struct.std::__1::__cxx_atomic_impl.57" = type { %"struct.std::__1::__cxx_atomic_base_impl.58" }
%"struct.std::__1::__cxx_atomic_base_impl.58" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle.59", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle.59" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic", i64, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic.91", %"class.std::__1::vector.95", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.212", %"class.std::__1::unique_ptr.212", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.227", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic", i64, i8, %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.231", %"class.std::__1::vector.231", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.238", %"class.std::__1::unique_ptr.244", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.374", %"class.std::__1::unique_ptr.380", %"class.std::__1::unique_ptr.386", %"class.std::__1::unique_ptr.425", %"class.std::__1::unique_ptr.464", %"class.std::__1::unique_ptr.494", %"class.std::__1::unique_ptr.500", %"class.std::__1::unique_ptr.510", %"class.std::__1::unique_ptr.516", %"class.std::__1::unique_ptr.516", %"class.std::__1::unique_ptr.522", %"class.std::__1::unique_ptr.528", %"class.std::__1::unique_ptr.528", %"class.std::__1::unique_ptr.534", %"class.std::__1::unique_ptr.540", %"class.std::__1::shared_ptr.546", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.551", %"class.std::__1::unique_ptr.577", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.583", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.596", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.396", i8, [7 x i8], %"class.std::__1::unordered_map.602", %"class.std::__1::unordered_map.628", %"class.std::__1::unordered_map.602", %"class.std::__1::unordered_map.652", %"class.std::__1::vector.680", i8, %"class.std::__1::unique_ptr.687", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.67", %"class.std::__1::__compressed_pair.75", %"class.std::__1::__compressed_pair.80", %"class.std::__1::__compressed_pair.82", [4 x i8] }>
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69", %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.86", %"struct.std::__1::atomic.86", %"struct.std::__1::atomic.86" }
%"struct.std::__1::atomic.86" = type { %"struct.std::__1::__atomic_base.87" }
%"struct.std::__1::__atomic_base.87" = type { %"struct.std::__1::__atomic_base.88" }
%"struct.std::__1::__atomic_base.88" = type { %"struct.std::__1::__cxx_atomic_impl.89" }
%"struct.std::__1::__cxx_atomic_impl.89" = type { %"struct.std::__1::__cxx_atomic_base_impl.90" }
%"struct.std::__1::__cxx_atomic_base_impl.90" = type { i64 }
%"struct.std::__1::atomic.91" = type { %"struct.std::__1::__atomic_base.92" }
%"struct.std::__1::__atomic_base.92" = type { %"struct.std::__1::__cxx_atomic_impl.93" }
%"struct.std::__1::__cxx_atomic_impl.93" = type { %"struct.std::__1::__cxx_atomic_base_impl.94" }
%"struct.std::__1::__cxx_atomic_base_impl.94" = type { i32 }
%"class.std::__1::vector.95" = type { %"class.std::__1::__vector_base.96" }
%"class.std::__1::__vector_base.96" = type { %"struct.std::__1::pair.97"*, %"struct.std::__1::pair.97"*, %"class.std::__1::__compressed_pair.98" }
%"struct.std::__1::pair.97" = type opaque
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"struct.std::__1::pair.97"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.169" }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic"*, %"class.std::__1::unique_ptr.163" }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic", i64 }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.103", %"class.std::__1::vector.103", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.105" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.110" }
%"class.std::__1::__hash_table.110" = type <{ %"class.std::__1::unique_ptr.111", %"class.std::__1::__compressed_pair.121", %"class.std::__1::__compressed_pair.126", %"class.std::__1::__compressed_pair.128", [4 x i8] }>
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113", %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"struct.std::__1::__hash_node_base.114"** }
%"struct.std::__1::__hash_node_base.114" = type { %"struct.std::__1::__hash_node_base.114"* }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"class.std::__1::__bucket_list_deallocator.116" }
%"class.std::__1::__bucket_list_deallocator.116" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"struct.std::__1::__hash_node_base.114" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic", %"struct.std::__1::atomic.86", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set.144"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.152", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.86", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.86", %"struct.std::__1::atomic.133", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.133" = type { %"struct.std::__1::__atomic_base.134" }
%"struct.std::__1::__atomic_base.134" = type { %"struct.std::__1::__cxx_atomic_impl.135" }
%"struct.std::__1::__cxx_atomic_impl.135" = type { %"struct.std::__1::__cxx_atomic_base_impl.136" }
%"struct.std::__1::__cxx_atomic_base_impl.136" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.137" }
%"class.std::__1::vector.137" = type { %"class.std::__1::__vector_base.138" }
%"class.std::__1::__vector_base.138" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.139" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set.144" = type { %"class.std::__1::__tree.145" }
%"class.std::__1::__tree.145" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.146", %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::atomic.152" = type { %"struct.std::__1::__atomic_base.153" }
%"struct.std::__1::__atomic_base.153" = type { %"struct.std::__1::__cxx_atomic_impl.154" }
%"struct.std::__1::__cxx_atomic_impl.154" = type { %"struct.std::__1::__cxx_atomic_base_impl.155" }
%"struct.std::__1::__cxx_atomic_base_impl.155" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.156", i8, [7 x i8] }>
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { i64*, i64*, %"class.std::__1::__compressed_pair.158" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.163" = type { %"class.std::__1::__compressed_pair.164" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { %"struct.std::__1::pair.171"*, %"struct.std::__1::pair.171"*, %"class.std::__1::__compressed_pair.172" }
%"struct.std::__1::pair.171" = type { i32, i64 }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"struct.std::__1::pair.171"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic", i64, %"struct.std::__1::atomic" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic", i32, %"struct.std::__1::atomic", %"class.v8::base::Mutex", %"struct.std::__1::atomic" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.177" }
%"class.std::__1::unordered_map.177" = type { %"class.std::__1::__hash_table.178" }
%"class.std::__1::__hash_table.178" = type <{ %"class.std::__1::unique_ptr.179", %"class.std::__1::__compressed_pair.189", %"class.std::__1::__compressed_pair.194", %"class.std::__1::__compressed_pair.199", [4 x i8] }>
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181", %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"struct.std::__1::__hash_node_base.182"** }
%"struct.std::__1::__hash_node_base.182" = type { %"struct.std::__1::__hash_node_base.182"* }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"class.std::__1::__bucket_list_deallocator.184" }
%"class.std::__1::__bucket_list_deallocator.184" = type { %"class.std::__1::__compressed_pair.185" }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"struct.std::__1::__hash_node_base.182" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.205", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.205" = type { %"class.std::__1::__vector_base.206" }
%"class.std::__1::__vector_base.206" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.207" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.208" }
%"struct.std::__1::__compressed_pair_elem.208" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1101", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1105", %"class.std::__1::unique_ptr.1111", %"class.std::__1::unique_ptr.540", %"class.std::__1::vector.1117", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1101" = type { %"struct.std::__1::__atomic_base.1102" }
%"struct.std::__1::__atomic_base.1102" = type { %"struct.std::__1::__cxx_atomic_impl.1103" }
%"struct.std::__1::__cxx_atomic_impl.1103" = type { %"struct.std::__1::__cxx_atomic_base_impl.1104" }
%"struct.std::__1::__cxx_atomic_base_impl.1104" = type { i32 }
%"class.std::__1::unique_ptr.1105" = type { %"class.std::__1::__compressed_pair.1106" }
%"class.std::__1::__compressed_pair.1106" = type { %"struct.std::__1::__compressed_pair_elem.1107" }
%"struct.std::__1::__compressed_pair_elem.1107" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.852" }
%"class.std::__1::vector.852" = type { %"class.std::__1::__vector_base.853" }
%"class.std::__1::__vector_base.853" = type { i64**, i64**, %"class.std::__1::__compressed_pair.854" }
%"class.std::__1::__compressed_pair.854" = type { %"struct.std::__1::__compressed_pair_elem.855" }
%"struct.std::__1::__compressed_pair_elem.855" = type { i64** }
%"class.std::__1::unique_ptr.1111" = type { %"class.std::__1::__compressed_pair.1112" }
%"class.std::__1::__compressed_pair.1112" = type { %"struct.std::__1::__compressed_pair_elem.1113" }
%"struct.std::__1::__compressed_pair_elem.1113" = type { %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.852", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1117" = type { %"class.std::__1::__vector_base.1118" }
%"class.std::__1::__vector_base.1118" = type { %"struct.std::__1::pair.1119"*, %"struct.std::__1::pair.1119"*, %"class.std::__1::__compressed_pair.1120" }
%"struct.std::__1::pair.1119" = type opaque
%"class.std::__1::__compressed_pair.1120" = type { %"struct.std::__1::__compressed_pair_elem.1121" }
%"struct.std::__1::__compressed_pair_elem.1121" = type { %"struct.std::__1::pair.1119"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.218", %"struct.std::__1::atomic.222", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.222" = type { %"struct.std::__1::__atomic_base.223" }
%"struct.std::__1::__atomic_base.223" = type { %"struct.std::__1::__cxx_atomic_impl.224" }
%"struct.std::__1::__cxx_atomic_impl.224" = type { %"struct.std::__1::__cxx_atomic_base_impl.225" }
%"struct.std::__1::__cxx_atomic_base_impl.225" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.226" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.227" = type { %"struct.std::__1::__atomic_base.228" }
%"struct.std::__1::__atomic_base.228" = type { %"struct.std::__1::__cxx_atomic_impl.229" }
%"struct.std::__1::__cxx_atomic_impl.229" = type { %"struct.std::__1::__cxx_atomic_base_impl.230" }
%"struct.std::__1::__cxx_atomic_base_impl.230" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.std::__1::vector.231" = type { %"class.std::__1::__vector_base.232" }
%"class.std::__1::__vector_base.232" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.233" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.234" }
%"struct.std::__1::__compressed_pair_elem.234" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.238" = type { %"class.std::__1::__compressed_pair.239" }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.240" }
%"struct.std::__1::__compressed_pair_elem.240" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.244" = type { %"class.std::__1::__compressed_pair.245" }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246" }
%"struct.std::__1::__compressed_pair_elem.246" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.286", %"class.std::__1::unique_ptr.292", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.346", %"class.std::__1::vector.346", %"class.std::__1::vector.346", %"class.std::__1::vector.353", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.247", %"class.std::__1::vector.248", %"class.std::__1::vector.255", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.247" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.248" = type { %"class.std::__1::__vector_base.249" }
%"class.std::__1::__vector_base.249" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.250" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.250" = type { %"struct.std::__1::__compressed_pair_elem.251" }
%"struct.std::__1::__compressed_pair_elem.251" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.255" = type { %"class.std::__1::__vector_base.256" }
%"class.std::__1::__vector_base.256" = type { %"class.std::__1::unique_ptr.257"*, %"class.std::__1::unique_ptr.257"*, %"class.std::__1::__compressed_pair.258" }
%"class.std::__1::unique_ptr.257" = type opaque
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.259" }
%"struct.std::__1::__compressed_pair_elem.259" = type { %"class.std::__1::unique_ptr.257"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.263", %"class.v8::internal::Worklist.265", %"class.v8::internal::Worklist.265", %"class.v8::internal::Worklist.265", %"class.v8::internal::Worklist.267", %"class.v8::internal::Worklist.269", %"class.v8::internal::Worklist.271", %"class.v8::internal::Worklist.273", %"class.v8::internal::Worklist.275", %"class.v8::internal::Worklist.277" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.263" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.265" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.267" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.269" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.271" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.273" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.275" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.277" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.279", i8, i64 }
%"class.std::__1::vector.279" = type { %"class.std::__1::__vector_base.280" }
%"class.std::__1::__vector_base.280" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.281" }
%"class.std::__1::__compressed_pair.281" = type { %"struct.std::__1::__compressed_pair_elem.282" }
%"struct.std::__1::__compressed_pair_elem.282" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.286" = type { %"class.std::__1::__compressed_pair.287" }
%"class.std::__1::__compressed_pair.287" = type { %"struct.std::__1::__compressed_pair_elem.288" }
%"struct.std::__1::__compressed_pair_elem.288" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.292" = type { %"class.std::__1::__compressed_pair.293" }
%"class.std::__1::__compressed_pair.293" = type { %"struct.std::__1::__compressed_pair_elem.294" }
%"struct.std::__1::__compressed_pair_elem.294" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.295" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.247"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.295" = type { %"class.std::__1::__hash_table.296" }
%"class.std::__1::__hash_table.296" = type <{ %"class.std::__1::unique_ptr.297", %"class.std::__1::__compressed_pair.307", %"class.std::__1::__compressed_pair.312", %"class.std::__1::__compressed_pair.315", [4 x i8] }>
%"class.std::__1::unique_ptr.297" = type { %"class.std::__1::__compressed_pair.298" }
%"class.std::__1::__compressed_pair.298" = type { %"struct.std::__1::__compressed_pair_elem.299", %"struct.std::__1::__compressed_pair_elem.301" }
%"struct.std::__1::__compressed_pair_elem.299" = type { %"struct.std::__1::__hash_node_base.300"** }
%"struct.std::__1::__hash_node_base.300" = type { %"struct.std::__1::__hash_node_base.300"* }
%"struct.std::__1::__compressed_pair_elem.301" = type { %"class.std::__1::__bucket_list_deallocator.302" }
%"class.std::__1::__bucket_list_deallocator.302" = type { %"class.std::__1::__compressed_pair.303" }
%"class.std::__1::__compressed_pair.303" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.307" = type { %"struct.std::__1::__compressed_pair_elem.308" }
%"struct.std::__1::__compressed_pair_elem.308" = type { %"struct.std::__1::__hash_node_base.300" }
%"class.std::__1::__compressed_pair.312" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.322" }
%"class.std::__1::unordered_map.322" = type { %"class.std::__1::__hash_table.323" }
%"class.std::__1::__hash_table.323" = type <{ %"class.std::__1::unique_ptr.324", %"class.std::__1::__compressed_pair.334", %"class.std::__1::__compressed_pair.339", %"class.std::__1::__compressed_pair.342", [4 x i8] }>
%"class.std::__1::unique_ptr.324" = type { %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326", %"struct.std::__1::__compressed_pair_elem.328" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"struct.std::__1::__hash_node_base.327"** }
%"struct.std::__1::__hash_node_base.327" = type { %"struct.std::__1::__hash_node_base.327"* }
%"struct.std::__1::__compressed_pair_elem.328" = type { %"class.std::__1::__bucket_list_deallocator.329" }
%"class.std::__1::__bucket_list_deallocator.329" = type { %"class.std::__1::__compressed_pair.330" }
%"class.std::__1::__compressed_pair.330" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.335" }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"struct.std::__1::__hash_node_base.327" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.342" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.std::__1::vector.346" = type { %"class.std::__1::__vector_base.347" }
%"class.std::__1::__vector_base.347" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.348" }
%"class.std::__1::__compressed_pair.348" = type { %"struct.std::__1::__compressed_pair_elem.349" }
%"struct.std::__1::__compressed_pair_elem.349" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.353" = type { %"class.std::__1::__vector_base.354" }
%"class.std::__1::__vector_base.354" = type { %"struct.std::__1::pair.355"*, %"struct.std::__1::pair.355"*, %"class.std::__1::__compressed_pair.356" }
%"struct.std::__1::pair.355" = type opaque
%"class.std::__1::__compressed_pair.356" = type { %"struct.std::__1::__compressed_pair_elem.357" }
%"struct.std::__1::__compressed_pair_elem.357" = type { %"struct.std::__1::pair.355"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.361", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.346"], [3 x %"class.std::__1::vector.346"], i8, %"struct.std::__1::atomic.218", [6 x i8], %"class.std::__1::vector.346", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.361" = type { %"class.std::__1::__compressed_pair.362" }
%"class.std::__1::__compressed_pair.362" = type { %"struct.std::__1::__compressed_pair_elem.363" }
%"struct.std::__1::__compressed_pair_elem.363" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.371"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.346", %"class.std::__1::vector.346", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.371" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.374" = type { %"class.std::__1::__compressed_pair.375" }
%"class.std::__1::__compressed_pair.375" = type { %"struct.std::__1::__compressed_pair_elem.376" }
%"struct.std::__1::__compressed_pair_elem.376" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.380" = type { %"class.std::__1::__compressed_pair.381" }
%"class.std::__1::__compressed_pair.381" = type { %"struct.std::__1::__compressed_pair_elem.382" }
%"struct.std::__1::__compressed_pair_elem.382" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.386" = type { %"class.std::__1::__compressed_pair.387" }
%"class.std::__1::__compressed_pair.387" = type { %"struct.std::__1::__compressed_pair_elem.388" }
%"struct.std::__1::__compressed_pair_elem.388" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.396", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.389"], %"class.std::__1::unique_ptr.361" }
%"class.std::__1::vector.389" = type { %"class.std::__1::__vector_base.390" }
%"class.std::__1::__vector_base.390" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.391" }
%"class.std::__1::__compressed_pair.391" = type { %"struct.std::__1::__compressed_pair_elem.392" }
%"struct.std::__1::__compressed_pair_elem.392" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.425" = type { %"class.std::__1::__compressed_pair.426" }
%"class.std::__1::__compressed_pair.426" = type { %"struct.std::__1::__compressed_pair_elem.427" }
%"struct.std::__1::__compressed_pair_elem.427" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.428", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.432", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.437" }
%"struct.std::__1::atomic.428" = type { %"struct.std::__1::__atomic_base.429" }
%"struct.std::__1::__atomic_base.429" = type { %"struct.std::__1::__cxx_atomic_impl.430" }
%"struct.std::__1::__cxx_atomic_impl.430" = type { %"struct.std::__1::__cxx_atomic_base_impl.431" }
%"struct.std::__1::__cxx_atomic_base_impl.431" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.432" = type { %"struct.std::__1::__atomic_base.433" }
%"struct.std::__1::__atomic_base.433" = type { %"struct.std::__1::__cxx_atomic_impl.434" }
%"struct.std::__1::__cxx_atomic_impl.434" = type { %"struct.std::__1::__cxx_atomic_base_impl.435" }
%"struct.std::__1::__cxx_atomic_base_impl.435" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.437" = type { %"class.std::__1::__hash_table.438" }
%"class.std::__1::__hash_table.438" = type <{ %"class.std::__1::unique_ptr.439", %"class.std::__1::__compressed_pair.449", %"class.std::__1::__compressed_pair.454", %"class.std::__1::__compressed_pair.457", [4 x i8] }>
%"class.std::__1::unique_ptr.439" = type { %"class.std::__1::__compressed_pair.440" }
%"class.std::__1::__compressed_pair.440" = type { %"struct.std::__1::__compressed_pair_elem.441", %"struct.std::__1::__compressed_pair_elem.443" }
%"struct.std::__1::__compressed_pair_elem.441" = type { %"struct.std::__1::__hash_node_base.442"** }
%"struct.std::__1::__hash_node_base.442" = type { %"struct.std::__1::__hash_node_base.442"* }
%"struct.std::__1::__compressed_pair_elem.443" = type { %"class.std::__1::__bucket_list_deallocator.444" }
%"class.std::__1::__bucket_list_deallocator.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.449" = type { %"struct.std::__1::__compressed_pair_elem.450" }
%"struct.std::__1::__compressed_pair_elem.450" = type { %"struct.std::__1::__hash_node_base.442" }
%"class.std::__1::__compressed_pair.454" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.457" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.std::__1::unique_ptr.464" = type { %"class.std::__1::__compressed_pair.465" }
%"class.std::__1::__compressed_pair.465" = type { %"struct.std::__1::__compressed_pair_elem.466" }
%"struct.std::__1::__compressed_pair_elem.466" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.361", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic", %"struct.std::__1::atomic.218", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.467", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.467" = type { %"class.std::__1::__hash_table.468" }
%"class.std::__1::__hash_table.468" = type <{ %"class.std::__1::unique_ptr.469", %"class.std::__1::__compressed_pair.479", %"class.std::__1::__compressed_pair.484", %"class.std::__1::__compressed_pair.487", [4 x i8] }>
%"class.std::__1::unique_ptr.469" = type { %"class.std::__1::__compressed_pair.470" }
%"class.std::__1::__compressed_pair.470" = type { %"struct.std::__1::__compressed_pair_elem.471", %"struct.std::__1::__compressed_pair_elem.473" }
%"struct.std::__1::__compressed_pair_elem.471" = type { %"struct.std::__1::__hash_node_base.472"** }
%"struct.std::__1::__hash_node_base.472" = type { %"struct.std::__1::__hash_node_base.472"* }
%"struct.std::__1::__compressed_pair_elem.473" = type { %"class.std::__1::__bucket_list_deallocator.474" }
%"class.std::__1::__bucket_list_deallocator.474" = type { %"class.std::__1::__compressed_pair.475" }
%"class.std::__1::__compressed_pair.475" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.479" = type { %"struct.std::__1::__compressed_pair_elem.480" }
%"struct.std::__1::__compressed_pair_elem.480" = type { %"struct.std::__1::__hash_node_base.472" }
%"class.std::__1::__compressed_pair.484" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.487" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.std::__1::unique_ptr.494" = type { %"class.std::__1::__compressed_pair.495" }
%"class.std::__1::__compressed_pair.495" = type { %"struct.std::__1::__compressed_pair_elem.496" }
%"struct.std::__1::__compressed_pair_elem.496" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.500" = type { %"class.std::__1::__compressed_pair.501" }
%"class.std::__1::__compressed_pair.501" = type { %"struct.std::__1::__compressed_pair_elem.502" }
%"struct.std::__1::__compressed_pair_elem.502" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.503" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.503" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"class.std::__1::unique_ptr.510" = type { %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.512" }
%"struct.std::__1::__compressed_pair_elem.512" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.516" = type { %"class.std::__1::__compressed_pair.517" }
%"class.std::__1::__compressed_pair.517" = type { %"struct.std::__1::__compressed_pair_elem.518" }
%"struct.std::__1::__compressed_pair_elem.518" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.522" = type { %"class.std::__1::__compressed_pair.523" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.524" }
%"struct.std::__1::__compressed_pair_elem.524" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.528" = type { %"class.std::__1::__compressed_pair.529" }
%"class.std::__1::__compressed_pair.529" = type { %"struct.std::__1::__compressed_pair_elem.530" }
%"struct.std::__1::__compressed_pair_elem.530" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.534" = type { %"class.std::__1::__compressed_pair.535" }
%"class.std::__1::__compressed_pair.535" = type { %"struct.std::__1::__compressed_pair_elem.536" }
%"struct.std::__1::__compressed_pair_elem.536" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.540" = type { %"class.std::__1::__compressed_pair.541" }
%"class.std::__1::__compressed_pair.541" = type { %"struct.std::__1::__compressed_pair_elem.542" }
%"struct.std::__1::__compressed_pair_elem.542" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.546" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.547", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.5", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.547" = type { %"struct.std::__1::__atomic_base.548" }
%"struct.std::__1::__atomic_base.548" = type { %"struct.std::__1::__cxx_atomic_impl.549" }
%"struct.std::__1::__cxx_atomic_impl.549" = type { %"struct.std::__1::__cxx_atomic_base_impl.550" }
%"struct.std::__1::__cxx_atomic_base_impl.550" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.551" = type { %"class.std::__1::__hash_table.552" }
%"class.std::__1::__hash_table.552" = type <{ %"class.std::__1::unique_ptr.553", %"class.std::__1::__compressed_pair.563", %"class.std::__1::__compressed_pair.568", %"class.std::__1::__compressed_pair.571", [4 x i8] }>
%"class.std::__1::unique_ptr.553" = type { %"class.std::__1::__compressed_pair.554" }
%"class.std::__1::__compressed_pair.554" = type { %"struct.std::__1::__compressed_pair_elem.555", %"struct.std::__1::__compressed_pair_elem.557" }
%"struct.std::__1::__compressed_pair_elem.555" = type { %"struct.std::__1::__hash_node_base.556"** }
%"struct.std::__1::__hash_node_base.556" = type { %"struct.std::__1::__hash_node_base.556"* }
%"struct.std::__1::__compressed_pair_elem.557" = type { %"class.std::__1::__bucket_list_deallocator.558" }
%"class.std::__1::__bucket_list_deallocator.558" = type { %"class.std::__1::__compressed_pair.559" }
%"class.std::__1::__compressed_pair.559" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.563" = type { %"struct.std::__1::__compressed_pair_elem.564" }
%"struct.std::__1::__compressed_pair_elem.564" = type { %"struct.std::__1::__hash_node_base.556" }
%"class.std::__1::__compressed_pair.568" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.std::__1::unique_ptr.577" = type { %"class.std::__1::__compressed_pair.578" }
%"class.std::__1::__compressed_pair.578" = type { %"struct.std::__1::__compressed_pair_elem.579" }
%"struct.std::__1::__compressed_pair_elem.579" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.583" = type { %"class.std::__1::__compressed_pair.584" }
%"class.std::__1::__compressed_pair.584" = type { %"struct.std::__1::__compressed_pair_elem.585" }
%"struct.std::__1::__compressed_pair_elem.585" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.589", %"class.std::__1::vector.589" }
%"class.std::__1::unique_ptr.596" = type { %"class.std::__1::__compressed_pair.597" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.598" }
%"struct.std::__1::__compressed_pair_elem.598" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set.396" = type { %"class.std::__1::__hash_table.397" }
%"class.std::__1::__hash_table.397" = type <{ %"class.std::__1::unique_ptr.398", %"class.std::__1::__compressed_pair.408", %"class.std::__1::__compressed_pair.413", %"class.std::__1::__compressed_pair.417", [4 x i8] }>
%"class.std::__1::unique_ptr.398" = type { %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.400", %"struct.std::__1::__compressed_pair_elem.402" }
%"struct.std::__1::__compressed_pair_elem.400" = type { %"struct.std::__1::__hash_node_base.401"** }
%"struct.std::__1::__hash_node_base.401" = type { %"struct.std::__1::__hash_node_base.401"* }
%"struct.std::__1::__compressed_pair_elem.402" = type { %"class.std::__1::__bucket_list_deallocator.403" }
%"class.std::__1::__bucket_list_deallocator.403" = type { %"class.std::__1::__compressed_pair.404" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.408" = type { %"struct.std::__1::__compressed_pair_elem.409" }
%"struct.std::__1::__compressed_pair_elem.409" = type { %"struct.std::__1::__hash_node_base.401" }
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.417" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.std::__1::unordered_map.628" = type { %"class.std::__1::__hash_table.629" }
%"class.std::__1::__hash_table.629" = type <{ %"class.std::__1::unique_ptr.630", %"class.std::__1::__compressed_pair.640", %"class.std::__1::__compressed_pair.645", %"class.std::__1::__compressed_pair.648", [4 x i8] }>
%"class.std::__1::unique_ptr.630" = type { %"class.std::__1::__compressed_pair.631" }
%"class.std::__1::__compressed_pair.631" = type { %"struct.std::__1::__compressed_pair_elem.632", %"struct.std::__1::__compressed_pair_elem.634" }
%"struct.std::__1::__compressed_pair_elem.632" = type { %"struct.std::__1::__hash_node_base.633"** }
%"struct.std::__1::__hash_node_base.633" = type { %"struct.std::__1::__hash_node_base.633"* }
%"struct.std::__1::__compressed_pair_elem.634" = type { %"class.std::__1::__bucket_list_deallocator.635" }
%"class.std::__1::__bucket_list_deallocator.635" = type { %"class.std::__1::__compressed_pair.636" }
%"class.std::__1::__compressed_pair.636" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.641" }
%"struct.std::__1::__compressed_pair_elem.641" = type { %"struct.std::__1::__hash_node_base.633" }
%"class.std::__1::__compressed_pair.645" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.648" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.std::__1::unordered_map.602" = type { %"class.std::__1::__hash_table.603" }
%"class.std::__1::__hash_table.603" = type <{ %"class.std::__1::unique_ptr.604", %"class.std::__1::__compressed_pair.614", %"class.std::__1::__compressed_pair.619", %"class.std::__1::__compressed_pair.622", [4 x i8] }>
%"class.std::__1::unique_ptr.604" = type { %"class.std::__1::__compressed_pair.605" }
%"class.std::__1::__compressed_pair.605" = type { %"struct.std::__1::__compressed_pair_elem.606", %"struct.std::__1::__compressed_pair_elem.608" }
%"struct.std::__1::__compressed_pair_elem.606" = type { %"struct.std::__1::__hash_node_base.607"** }
%"struct.std::__1::__hash_node_base.607" = type { %"struct.std::__1::__hash_node_base.607"* }
%"struct.std::__1::__compressed_pair_elem.608" = type { %"class.std::__1::__bucket_list_deallocator.609" }
%"class.std::__1::__bucket_list_deallocator.609" = type { %"class.std::__1::__compressed_pair.610" }
%"class.std::__1::__compressed_pair.610" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.614" = type { %"struct.std::__1::__compressed_pair_elem.615" }
%"struct.std::__1::__compressed_pair_elem.615" = type { %"struct.std::__1::__hash_node_base.607" }
%"class.std::__1::__compressed_pair.619" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.622" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.std::__1::unordered_map.652" = type { %"class.std::__1::__hash_table.653" }
%"class.std::__1::__hash_table.653" = type <{ %"class.std::__1::unique_ptr.654", %"class.std::__1::__compressed_pair.664", %"class.std::__1::__compressed_pair.669", %"class.std::__1::__compressed_pair.674", [4 x i8] }>
%"class.std::__1::unique_ptr.654" = type { %"class.std::__1::__compressed_pair.655" }
%"class.std::__1::__compressed_pair.655" = type { %"struct.std::__1::__compressed_pair_elem.656", %"struct.std::__1::__compressed_pair_elem.658" }
%"struct.std::__1::__compressed_pair_elem.656" = type { %"struct.std::__1::__hash_node_base.657"** }
%"struct.std::__1::__hash_node_base.657" = type { %"struct.std::__1::__hash_node_base.657"* }
%"struct.std::__1::__compressed_pair_elem.658" = type { %"class.std::__1::__bucket_list_deallocator.659" }
%"class.std::__1::__bucket_list_deallocator.659" = type { %"class.std::__1::__compressed_pair.660" }
%"class.std::__1::__compressed_pair.660" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.664" = type { %"struct.std::__1::__compressed_pair_elem.665" }
%"struct.std::__1::__compressed_pair_elem.665" = type { %"struct.std::__1::__hash_node_base.657" }
%"class.std::__1::__compressed_pair.669" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.674" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.std::__1::vector.680" = type { %"class.std::__1::__vector_base.681" }
%"class.std::__1::__vector_base.681" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.682" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.682" = type { %"struct.std::__1::__compressed_pair_elem.683" }
%"struct.std::__1::__compressed_pair_elem.683" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.687" = type { %"class.std::__1::__compressed_pair.688" }
%"class.std::__1::__compressed_pair.688" = type { %"struct.std::__1::__compressed_pair_elem.689" }
%"struct.std::__1::__compressed_pair_elem.689" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.589" }
%"class.std::__1::shared_ptr.693" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.205", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.694", %"class.std::__1::unique_ptr.708" }
%"class.std::__1::unique_ptr.694" = type { %"class.std::__1::__compressed_pair.695" }
%"class.std::__1::__compressed_pair.695" = type { %"struct.std::__1::__compressed_pair_elem.696" }
%"struct.std::__1::__compressed_pair_elem.696" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.697" }
%"class.std::__1::vector.697" = type { %"class.std::__1::__vector_base.698" }
%"class.std::__1::__vector_base.698" = type { %"class.std::__1::unique_ptr.699"*, %"class.std::__1::unique_ptr.699"*, %"class.std::__1::__compressed_pair.700" }
%"class.std::__1::unique_ptr.699" = type { %"class.std::__1::__compressed_pair.1188" }
%"class.std::__1::__compressed_pair.1188" = type { %"struct.std::__1::__compressed_pair_elem.1189" }
%"struct.std::__1::__compressed_pair_elem.1189" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.700" = type { %"struct.std::__1::__compressed_pair_elem.701" }
%"struct.std::__1::__compressed_pair_elem.701" = type { %"class.std::__1::unique_ptr.699"* }
%"class.std::__1::unique_ptr.708" = type { %"class.std::__1::__compressed_pair.709" }
%"class.std::__1::__compressed_pair.709" = type { %"struct.std::__1::__compressed_pair_elem.710" }
%"struct.std::__1::__compressed_pair_elem.710" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::unique_ptr.714" = type { %"class.std::__1::__compressed_pair.715" }
%"class.std::__1::__compressed_pair.715" = type { %"struct.std::__1::__compressed_pair_elem.716" }
%"struct.std::__1::__compressed_pair_elem.716" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.717", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.717" = type { %"struct.std::__1::__atomic_base.718" }
%"struct.std::__1::__atomic_base.718" = type { %"struct.std::__1::__cxx_atomic_impl.719" }
%"struct.std::__1::__cxx_atomic_impl.719" = type { %"struct.std::__1::__cxx_atomic_base_impl.720" }
%"struct.std::__1::__cxx_atomic_base_impl.720" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.724" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.725", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.725" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.726", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.726" = type { %"class.std::__1::__vector_base.727" }
%"class.std::__1::__vector_base.727" = type { %"class.std::__1::unique_ptr.728"*, %"class.std::__1::unique_ptr.728"*, %"class.std::__1::__compressed_pair.729" }
%"class.std::__1::unique_ptr.728" = type opaque
%"class.std::__1::__compressed_pair.729" = type { %"struct.std::__1::__compressed_pair_elem.730" }
%"struct.std::__1::__compressed_pair_elem.730" = type { %"class.std::__1::unique_ptr.728"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon.734 }
%union.anon.734 = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.735", %"class.std::__1::unique_ptr.741", %"struct.std::__1::atomic.218", %"class.std::__1::unique_ptr.747", %"class.std::__1::unique_ptr.753", %"class.std::__1::unique_ptr.759", %"class.std::__1::unique_ptr.765", %"class.std::__1::unique_ptr.771", %"class.std::__1::set.777", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.735" = type { %"class.std::__1::__compressed_pair.736" }
%"class.std::__1::__compressed_pair.736" = type { %"struct.std::__1::__compressed_pair_elem.737" }
%"struct.std::__1::__compressed_pair_elem.737" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.741" = type { %"class.std::__1::__compressed_pair.742" }
%"class.std::__1::__compressed_pair.742" = type { %"struct.std::__1::__compressed_pair_elem.743" }
%"struct.std::__1::__compressed_pair_elem.743" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.747" = type { %"class.std::__1::__compressed_pair.748" }
%"class.std::__1::__compressed_pair.748" = type { %"struct.std::__1::__compressed_pair_elem.749" }
%"struct.std::__1::__compressed_pair_elem.749" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.753" = type { %"class.std::__1::__compressed_pair.754" }
%"class.std::__1::__compressed_pair.754" = type { %"struct.std::__1::__compressed_pair_elem.755" }
%"struct.std::__1::__compressed_pair_elem.755" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.759" = type { %"class.std::__1::__compressed_pair.760" }
%"class.std::__1::__compressed_pair.760" = type { %"struct.std::__1::__compressed_pair_elem.761" }
%"struct.std::__1::__compressed_pair_elem.761" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.765" = type { %"class.std::__1::__compressed_pair.766" }
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.771" = type { %"class.std::__1::__compressed_pair.772" }
%"class.std::__1::__compressed_pair.772" = type { %"struct.std::__1::__compressed_pair_elem.773" }
%"struct.std::__1::__compressed_pair_elem.773" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.777" = type { %"class.std::__1::__tree.778" }
%"class.std::__1::__tree.778" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.779", %"class.std::__1::__compressed_pair.783" }
%"class.std::__1::__compressed_pair.779" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.783" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.787" }
%"class.v8::internal::TaggedImpl.787" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.786" }
%"class.v8::internal::TaggedImpl.786" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.788", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.788" = type { %"class.std::__1::__compressed_pair.789" }
%"class.std::__1::__compressed_pair.789" = type { %"struct.std::__1::__compressed_pair_elem.790" }
%"struct.std::__1::__compressed_pair_elem.790" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.794", %"class.v8::internal::DetachableVector.795", %"class.v8::internal::DetachableVector.794", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.795" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.794" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.796", %"class.std::__1::vector.802", %"class.std::__1::unique_ptr.809", %"class.std::__1::vector.816", %"class.std::__1::unique_ptr.823", i64, %"class.std::__1::vector.829", %"class.std::__1::vector.837", %"class.std::__1::vector.845", i8, i8, i32 }
%"class.std::__1::unique_ptr.796" = type { %"class.std::__1::__compressed_pair.797" }
%"class.std::__1::__compressed_pair.797" = type { %"struct.std::__1::__compressed_pair_elem.798" }
%"struct.std::__1::__compressed_pair_elem.798" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.802" = type { %"class.std::__1::__vector_base.803" }
%"class.std::__1::__vector_base.803" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.804" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.804" = type { %"struct.std::__1::__compressed_pair_elem.805" }
%"struct.std::__1::__compressed_pair_elem.805" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.809" = type { %"class.std::__1::__compressed_pair.810" }
%"class.std::__1::__compressed_pair.810" = type { %"struct.std::__1::__compressed_pair_elem.811" }
%"struct.std::__1::__compressed_pair_elem.811" = type { %"class.v8::internal::GlobalHandles::NodeSpace.812"* }
%"class.v8::internal::GlobalHandles::NodeSpace.812" = type opaque
%"class.std::__1::vector.816" = type { %"class.std::__1::__vector_base.817" }
%"class.std::__1::__vector_base.817" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.818" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.818" = type { %"struct.std::__1::__compressed_pair_elem.819" }
%"struct.std::__1::__compressed_pair_elem.819" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.823" = type { %"class.std::__1::__compressed_pair.824" }
%"class.std::__1::__compressed_pair.824" = type { %"struct.std::__1::__compressed_pair_elem.825" }
%"struct.std::__1::__compressed_pair_elem.825" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.829" = type { %"class.std::__1::__vector_base.830" }
%"class.std::__1::__vector_base.830" = type { %"struct.std::__1::pair.831"*, %"struct.std::__1::pair.831"*, %"class.std::__1::__compressed_pair.832" }
%"struct.std::__1::pair.831" = type opaque
%"class.std::__1::__compressed_pair.832" = type { %"struct.std::__1::__compressed_pair_elem.833" }
%"struct.std::__1::__compressed_pair_elem.833" = type { %"struct.std::__1::pair.831"* }
%"class.std::__1::vector.837" = type { %"class.std::__1::__vector_base.838" }
%"class.std::__1::__vector_base.838" = type { %"struct.std::__1::pair.839"*, %"struct.std::__1::pair.839"*, %"class.std::__1::__compressed_pair.840" }
%"struct.std::__1::pair.839" = type opaque
%"class.std::__1::__compressed_pair.840" = type { %"struct.std::__1::__compressed_pair_elem.841" }
%"struct.std::__1::__compressed_pair_elem.841" = type { %"struct.std::__1::pair.839"* }
%"class.std::__1::vector.845" = type { %"class.std::__1::__vector_base.846" }
%"class.std::__1::__vector_base.846" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.847" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.std::__1::__compressed_pair.847" = type { %"struct.std::__1::__compressed_pair_elem.848" }
%"struct.std::__1::__compressed_pair_elem.848" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.852", %"class.std::__1::vector.859" }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.866" }
%"class.std::__1::unique_ptr.866" = type { %"class.std::__1::__compressed_pair.867" }
%"class.std::__1::__compressed_pair.867" = type { %"struct.std::__1::__compressed_pair_elem.868" }
%"struct.std::__1::__compressed_pair_elem.868" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.859" = type { %"class.std::__1::__vector_base.860" }
%"class.std::__1::__vector_base.860" = type { i32*, i32*, %"class.std::__1::__compressed_pair.861" }
%"class.std::__1::__compressed_pair.861" = type { %"struct.std::__1::__compressed_pair_elem.862" }
%"struct.std::__1::__compressed_pair_elem.862" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"struct.std::__1::atomic.872" = type { %"struct.std::__1::__atomic_base.873" }
%"struct.std::__1::__atomic_base.873" = type { %"struct.std::__1::__cxx_atomic_impl.874" }
%"struct.std::__1::__cxx_atomic_impl.874" = type { %"struct.std::__1::__cxx_atomic_base_impl.875" }
%"struct.std::__1::__cxx_atomic_base_impl.875" = type { i32 }
%"class.v8::SharedArrayBuffer" = type { i8 }
%"class.v8::Isolate::AtomicsWaitWakeHandle" = type { i8 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.882" = type { %"struct.std::__1::__atomic_base.883" }
%"struct.std::__1::__atomic_base.883" = type { %"struct.std::__1::__cxx_atomic_impl.884" }
%"struct.std::__1::__cxx_atomic_impl.884" = type { %"struct.std::__1::__cxx_atomic_base_impl.885" }
%"struct.std::__1::__cxx_atomic_base_impl.885" = type { i32 }
%"class.v8::Context" = type { i8 }
%"class.v8::Module" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.887" }
%"class.std::__1::__compressed_pair.887" = type { %"struct.std::__1::__compressed_pair_elem.888" }
%"struct.std::__1::__compressed_pair_elem.888" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.889 }
%union.anon.889 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.893" = type { %"class.std::__1::__hash_table.894" }
%"class.std::__1::__hash_table.894" = type <{ %"class.std::__1::unique_ptr.895", %"class.std::__1::__compressed_pair.905", %"class.std::__1::__compressed_pair.910", %"class.std::__1::__compressed_pair.913", [4 x i8] }>
%"class.std::__1::unique_ptr.895" = type { %"class.std::__1::__compressed_pair.896" }
%"class.std::__1::__compressed_pair.896" = type { %"struct.std::__1::__compressed_pair_elem.897", %"struct.std::__1::__compressed_pair_elem.899" }
%"struct.std::__1::__compressed_pair_elem.897" = type { %"struct.std::__1::__hash_node_base.898"** }
%"struct.std::__1::__hash_node_base.898" = type { %"struct.std::__1::__hash_node_base.898"* }
%"struct.std::__1::__compressed_pair_elem.899" = type { %"class.std::__1::__bucket_list_deallocator.900" }
%"class.std::__1::__bucket_list_deallocator.900" = type { %"class.std::__1::__compressed_pair.901" }
%"class.std::__1::__compressed_pair.901" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.905" = type { %"struct.std::__1::__compressed_pair_elem.906" }
%"struct.std::__1::__compressed_pair_elem.906" = type { %"struct.std::__1::__hash_node_base.898" }
%"class.std::__1::__compressed_pair.910" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.913" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::atomic.218" = type { %"struct.std::__1::__atomic_base.219" }
%"struct.std::__1::__atomic_base.219" = type { %"struct.std::__1::__cxx_atomic_impl.220" }
%"struct.std::__1::__cxx_atomic_impl.220" = type { %"struct.std::__1::__cxx_atomic_base_impl.221" }
%"struct.std::__1::__cxx_atomic_base_impl.221" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.919", %"class.v8::internal::Handle.925", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.926", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.919" = type { %"class.std::__1::__compressed_pair.920" }
%"class.std::__1::__compressed_pair.920" = type { %"struct.std::__1::__compressed_pair_elem.921" }
%"struct.std::__1::__compressed_pair_elem.921" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.925" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.926" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.927", %"class.std::__1::vector.933", %"class.std::__1::unique_ptr.941", %"class.std::__1::unique_ptr.947", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.953", %"class.std::__1::vector.959", %"struct.std::__1::pair.967" }
%"class.std::__1::unique_ptr.927" = type { %"class.std::__1::__compressed_pair.928" }
%"class.std::__1::__compressed_pair.928" = type { %"struct.std::__1::__compressed_pair_elem.929" }
%"struct.std::__1::__compressed_pair_elem.929" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.933" = type { %"class.std::__1::__vector_base.934" }
%"class.std::__1::__vector_base.934" = type { %"class.std::__1::unique_ptr.935"*, %"class.std::__1::unique_ptr.935"*, %"class.std::__1::__compressed_pair.936" }
%"class.std::__1::unique_ptr.935" = type opaque
%"class.std::__1::__compressed_pair.936" = type { %"struct.std::__1::__compressed_pair_elem.937" }
%"struct.std::__1::__compressed_pair_elem.937" = type { %"class.std::__1::unique_ptr.935"* }
%"class.std::__1::unique_ptr.941" = type { %"class.std::__1::__compressed_pair.942" }
%"class.std::__1::__compressed_pair.942" = type { %"struct.std::__1::__compressed_pair_elem.943" }
%"struct.std::__1::__compressed_pair_elem.943" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.947" = type { %"class.std::__1::__compressed_pair.948" }
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.949" }
%"struct.std::__1::__compressed_pair_elem.949" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.953" = type { %"class.std::__1::__compressed_pair.954" }
%"class.std::__1::__compressed_pair.954" = type { %"struct.std::__1::__compressed_pair_elem.955" }
%"struct.std::__1::__compressed_pair_elem.955" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.959" = type { %"class.std::__1::__vector_base.960" }
%"class.std::__1::__vector_base.960" = type { %"struct.std::__1::pair.961"*, %"struct.std::__1::pair.961"*, %"class.std::__1::__compressed_pair.962" }
%"struct.std::__1::pair.961" = type opaque
%"class.std::__1::__compressed_pair.962" = type { %"struct.std::__1::__compressed_pair_elem.963" }
%"struct.std::__1::__compressed_pair_elem.963" = type { %"struct.std::__1::pair.961"* }
%"struct.std::__1::pair.967" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.60"*, i16, i8*)*, i8* }
%"class.v8::Local.60" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.968" = type { %"class.std::__1::__compressed_pair.969" }
%"class.std::__1::__compressed_pair.969" = type { %"struct.std::__1::__compressed_pair_elem.970" }
%"struct.std::__1::__compressed_pair_elem.970" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.971", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.971" = type { %"class.std::__1::__hash_table.972" }
%"class.std::__1::__hash_table.972" = type <{ %"class.std::__1::unique_ptr.973", %"class.std::__1::__compressed_pair.983", %"class.std::__1::__compressed_pair.988", %"class.std::__1::__compressed_pair.992", [4 x i8] }>
%"class.std::__1::unique_ptr.973" = type { %"class.std::__1::__compressed_pair.974" }
%"class.std::__1::__compressed_pair.974" = type { %"struct.std::__1::__compressed_pair_elem.975", %"struct.std::__1::__compressed_pair_elem.977" }
%"struct.std::__1::__compressed_pair_elem.975" = type { %"struct.std::__1::__hash_node_base.976"** }
%"struct.std::__1::__hash_node_base.976" = type { %"struct.std::__1::__hash_node_base.976"* }
%"struct.std::__1::__compressed_pair_elem.977" = type { %"class.std::__1::__bucket_list_deallocator.978" }
%"class.std::__1::__bucket_list_deallocator.978" = type { %"class.std::__1::__compressed_pair.979" }
%"class.std::__1::__compressed_pair.979" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.983" = type { %"struct.std::__1::__compressed_pair_elem.984" }
%"struct.std::__1::__compressed_pair_elem.984" = type { %"struct.std::__1::__hash_node_base.976" }
%"class.std::__1::__compressed_pair.988" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.992" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.v8::internal::AstStringConstants" = type { %"class.v8::internal::Zone", %"class.v8::base::TemplateHashMapImpl.1000", i64, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"* }
%"class.v8::base::TemplateHashMapImpl.1000" = type { %"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" = type { %"struct.v8::base::TemplateHashMapEntry.1001"*, i32, i32 }
%"struct.v8::base::TemplateHashMapEntry.1001" = type <{ %union.anon.1193, i32, [4 x i8] }>
%union.anon.1193 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::AstRawString" = type <{ %union.anon.25, %"class.v8::internal::Vector", i32, i8, [3 x i8] }>
%union.anon.25 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Vector" = type { i8*, i64 }
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.1008" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.1002"**, %"struct.std::__1::pair.1002"**, %"struct.std::__1::pair.1002"**, %"class.std::__1::__compressed_pair.1003" }
%"struct.std::__1::pair.1002" = type opaque
%"class.std::__1::__compressed_pair.1003" = type { %"struct.std::__1::__compressed_pair_elem.1004" }
%"struct.std::__1::__compressed_pair_elem.1004" = type { %"struct.std::__1::pair.1002"** }
%"class.std::__1::__compressed_pair.1008" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::String" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.1013" = type { %"class.std::__1::__vector_base.1014" }
%"class.std::__1::__vector_base.1014" = type { %"class.v8::internal::Handle.1015"*, %"class.v8::internal::Handle.1015"*, %"class.std::__1::__compressed_pair.1016" }
%"class.v8::internal::Handle.1015" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.1016" = type { %"struct.std::__1::__compressed_pair_elem.1017" }
%"struct.std::__1::__compressed_pair_elem.1017" = type { %"class.v8::internal::Handle.1015"* }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type { %"class.v8::MicrotaskQueue", i64, i64, i64, i64*, i64, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::MicrotaskQueue"*, i32, i32, i32, i8, %"class.std::__1::vector.1021" }
%"class.v8::MicrotaskQueue" = type { i32 (...)** }
%"class.std::__1::vector.1021" = type { %"class.std::__1::__vector_base.1022" }
%"class.std::__1::__vector_base.1022" = type { %"struct.std::__1::pair.1002"*, %"struct.std::__1::pair.1002"*, %"class.std::__1::__compressed_pair.1023" }
%"class.std::__1::__compressed_pair.1023" = type { %"struct.std::__1::__compressed_pair_elem.1024" }
%"struct.std::__1::__compressed_pair_elem.1024" = type { %"struct.std::__1::pair.1002"* }
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector.1025", [128 x i8] }
%"class.v8::internal::Vector.1025" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.877", i32, %"class.v8::Local.60" }
%"class.v8::Local.877" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.1026" = type { %"class.std::__1::__compressed_pair.1027" }
%"class.std::__1::__compressed_pair.1027" = type { %"struct.std::__1::__compressed_pair_elem.1028" }
%"struct.std::__1::__compressed_pair_elem.1028" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1032" = type { %"class.std::__1::__vector_base.1033" }
%"class.std::__1::__vector_base.1033" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.1034" }
%"class.std::__1::__compressed_pair.1034" = type { %"struct.std::__1::__compressed_pair_elem.1035" }
%"struct.std::__1::__compressed_pair_elem.1035" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.1039" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.1040" = type { %"class.std::__1::__hash_table.1041" }
%"class.std::__1::__hash_table.1041" = type <{ %"class.std::__1::unique_ptr.1042", %"class.std::__1::__compressed_pair.1052", %"class.std::__1::__compressed_pair.1057", %"class.std::__1::__compressed_pair.1060", [4 x i8] }>
%"class.std::__1::unique_ptr.1042" = type { %"class.std::__1::__compressed_pair.1043" }
%"class.std::__1::__compressed_pair.1043" = type { %"struct.std::__1::__compressed_pair_elem.1044", %"struct.std::__1::__compressed_pair_elem.1046" }
%"struct.std::__1::__compressed_pair_elem.1044" = type { %"struct.std::__1::__hash_node_base.1045"** }
%"struct.std::__1::__hash_node_base.1045" = type { %"struct.std::__1::__hash_node_base.1045"* }
%"struct.std::__1::__compressed_pair_elem.1046" = type { %"class.std::__1::__bucket_list_deallocator.1047" }
%"class.std::__1::__bucket_list_deallocator.1047" = type { %"class.std::__1::__compressed_pair.1048" }
%"class.std::__1::__compressed_pair.1048" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.1052" = type { %"struct.std::__1::__compressed_pair_elem.1053" }
%"struct.std::__1::__compressed_pair_elem.1053" = type { %"struct.std::__1::__hash_node_base.1045" }
%"class.std::__1::__compressed_pair.1057" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.1060" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.589" = type { %"class.std::__1::__vector_base.590" }
%"class.std::__1::__vector_base.590" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.591" }
%"class.std::__1::__compressed_pair.591" = type { %"struct.std::__1::__compressed_pair_elem.592" }
%"struct.std::__1::__compressed_pair_elem.592" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.226" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1064", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1093", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1094", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1064" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1089, %union.anon.1091, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1089 = type { i64 }
%union.anon.1091 = type { i64 }
%"class.std::__1::weak_ptr.1093" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1094" = type { %"class.v8::PersistentBase.1095" }
%"class.v8::PersistentBase.1095" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1065", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1065" = type { %"class.std::__1::__hash_table.1066" }
%"class.std::__1::__hash_table.1066" = type <{ %"class.std::__1::unique_ptr.1067", %"class.std::__1::__compressed_pair.1077", %"class.std::__1::__compressed_pair.1082", %"class.std::__1::__compressed_pair.1085", [4 x i8] }>
%"class.std::__1::unique_ptr.1067" = type { %"class.std::__1::__compressed_pair.1068" }
%"class.std::__1::__compressed_pair.1068" = type { %"struct.std::__1::__compressed_pair_elem.1069", %"struct.std::__1::__compressed_pair_elem.1071" }
%"struct.std::__1::__compressed_pair_elem.1069" = type { %"struct.std::__1::__hash_node_base.1070"** }
%"struct.std::__1::__hash_node_base.1070" = type { %"struct.std::__1::__hash_node_base.1070"* }
%"struct.std::__1::__compressed_pair_elem.1071" = type { %"class.std::__1::__bucket_list_deallocator.1072" }
%"class.std::__1::__bucket_list_deallocator.1072" = type { %"class.std::__1::__compressed_pair.1073" }
%"class.std::__1::__compressed_pair.1073" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.1077" = type { %"struct.std::__1::__compressed_pair_elem.1078" }
%"struct.std::__1::__compressed_pair_elem.1078" = type { %"struct.std::__1::__hash_node_base.1070" }
%"class.std::__1::__compressed_pair.1082" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.1085" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1096" = type { %"class.std::__1::__compressed_pair.1097" }
%"class.std::__1::__compressed_pair.1097" = type { %"struct.std::__1::__compressed_pair_elem.1098" }
%"struct.std::__1::__compressed_pair_elem.1098" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1125", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.std::__1::unique_ptr.1125" = type { %"class.std::__1::__compressed_pair.1126" }
%"class.std::__1::__compressed_pair.1126" = type { %"struct.std::__1::__compressed_pair_elem.1127" }
%"struct.std::__1::__compressed_pair_elem.1127" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1134" = type { %"class.std::__1::__compressed_pair.1135" }
%"class.std::__1::__compressed_pair.1135" = type { %"struct.std::__1::__compressed_pair_elem.1136" }
%"struct.std::__1::__compressed_pair_elem.1136" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.878", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.878" = type { %"class.v8::Context"* }
%"class.v8::Array" = type { i8 }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1142" }
%"class.std::__1::unordered_map.1142" = type { %"class.std::__1::__hash_table.1143" }
%"class.std::__1::__hash_table.1143" = type <{ %"class.std::__1::unique_ptr.1144", %"class.std::__1::__compressed_pair.1154", %"class.std::__1::__compressed_pair.1159", %"class.std::__1::__compressed_pair.1162", [4 x i8] }>
%"class.std::__1::unique_ptr.1144" = type { %"class.std::__1::__compressed_pair.1145" }
%"class.std::__1::__compressed_pair.1145" = type { %"struct.std::__1::__compressed_pair_elem.1146", %"struct.std::__1::__compressed_pair_elem.1148" }
%"struct.std::__1::__compressed_pair_elem.1146" = type { %"struct.std::__1::__hash_node_base.1147"** }
%"struct.std::__1::__hash_node_base.1147" = type { %"struct.std::__1::__hash_node_base.1147"* }
%"struct.std::__1::__compressed_pair_elem.1148" = type { %"class.std::__1::__bucket_list_deallocator.1149" }
%"class.std::__1::__bucket_list_deallocator.1149" = type { %"class.std::__1::__compressed_pair.1150" }
%"class.std::__1::__compressed_pair.1150" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.1154" = type { %"struct.std::__1::__compressed_pair_elem.1155" }
%"struct.std::__1::__compressed_pair_elem.1155" = type { %"struct.std::__1::__hash_node_base.1147" }
%"class.std::__1::__compressed_pair.1159" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.1162" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::atomic.1168" = type { %"struct.std::__1::__atomic_base.1169" }
%"struct.std::__1::__atomic_base.1169" = type { %"struct.std::__1::__cxx_atomic_impl.1170" }
%"struct.std::__1::__cxx_atomic_impl.1170" = type { %"struct.std::__1::__cxx_atomic_base_impl.1171" }
%"struct.std::__1::__cxx_atomic_base_impl.1171" = type { %"class.std::__1::vector.1172"* }
%"class.std::__1::vector.1172" = type { %"class.std::__1::__vector_base.1173" }
%"class.std::__1::__vector_base.1173" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1174" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1174" = type { %"struct.std::__1::__compressed_pair_elem.1175" }
%"struct.std::__1::__compressed_pair_elem.1175" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::FactoryBase" = type { i8 }
%"class.v8::internal::FactoryBase.1099" = type { i8 }
%"class.v8::internal::interpreter::BytecodeNode" = type { i8, [5 x i32], i32, i8, %"class.v8::internal::interpreter::BytecodeSourceInfo" }
%"class.v8::internal::interpreter::BytecodeSourceInfo" = type { i8, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.v8::internal::interpreter::BytecodeLabel" = type { i8, i64 }
%"class.v8::internal::interpreter::BytecodeLoopHeader" = type { i64 }
%"class.v8::internal::interpreter::BytecodeJumpTable" = type { i64, i64, i32, i32 }
%"class.v8::internal::interpreter::HandlerTableBuilder" = type { %"class.v8::internal::ZoneVector.1181" }
%"class.v8::internal::ZoneVector.1181" = type { %"class.std::__1::vector.1182" }
%"class.std::__1::vector.1182" = type { %"class.std::__1::__vector_base.1183" }
%"class.std::__1::__vector_base.1183" = type { %"struct.v8::internal::interpreter::HandlerTableBuilder::Entry"*, %"struct.v8::internal::interpreter::HandlerTableBuilder::Entry"*, %"class.std::__1::__compressed_pair.1184" }
%"struct.v8::internal::interpreter::HandlerTableBuilder::Entry" = type { i64, i64, i64, %"class.v8::internal::interpreter::Register", i32 }
%"class.v8::internal::interpreter::Register" = type { i32 }
%"class.std::__1::__compressed_pair.1184" = type { %"struct.std::__1::__compressed_pair_elem.1185", %"struct.std::__1::__compressed_pair_elem.1186" }
%"struct.std::__1::__compressed_pair_elem.1185" = type { %"struct.v8::internal::interpreter::HandlerTableBuilder::Entry"* }
%"struct.std::__1::__compressed_pair_elem.1186" = type { %"class.v8::internal::ZoneAllocator.1187" }
%"class.v8::internal::ZoneAllocator.1187" = type { %"class.v8::internal::Zone"* }

$_ZN2v88internal11interpreter19BytecodeArrayWriter15ToBytecodeArrayINS0_7IsolateEEENS0_6HandleINS0_13BytecodeArrayEEEPT_iiNS5_INS0_9ByteArrayEEE = comdat any

$_ZN2v88internal11interpreter19BytecodeArrayWriter15ToBytecodeArrayINS0_12LocalIsolateEEENS0_6HandleINS0_13BytecodeArrayEEEPT_iiNS5_INS0_9ByteArrayEEE = comdat any

$_ZN2v88internal11interpreter19BytecodeArrayWriter21ToSourcePositionTableINS0_7IsolateEEENS0_6HandleINS0_9ByteArrayEEEPT_ = comdat any

$_ZN2v88internal11interpreter19BytecodeArrayWriter21ToSourcePositionTableINS0_12LocalIsolateEEENS0_6HandleINS0_9ByteArrayEEEPT_ = comdat any

$_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE8__appendEm = comdat any

@_ZN2v88internal11interpreter19BytecodeArrayWriter24kMaxSizeOfPackedBytecodeE = hidden local_unnamed_addr constant i64 22, align 8
@_ZN2v88internal42FLAG_ignition_elide_noneffectful_bytecodesE = external local_unnamed_addr global i8, align 1
@.str = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.2 = private unnamed_addr constant [40 x i8] c"current_offset >= loop_header->offset()\00", align 1
@.str.3 = private unnamed_addr constant [50 x i8] c"current_offset <= static_cast<size_t>(kMaxUInt32)\00", align 1
@_ZN2v88internal11interpreter9Bytecodes20kImplicitRegisterUseE = external local_unnamed_addr constant [0 x i8], align 1
@_ZN2v88internal11interpreter9Bytecodes13kOperandSizesE = external local_unnamed_addr constant [3 x [197 x i8*]], align 16
@_ZN2v88internal11interpreter9Bytecodes17kOperandTypeInfosE = external local_unnamed_addr constant [0 x i8*], align 8
@switch.table._ZN2v88internal11interpreter19BytecodeArrayWriter25PatchJumpWith16BitOperandEmi = private unnamed_addr constant [22 x i8] c"\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\93\94\90\91\8B\8C\8D\8E\8F\92", align 1

@_ZN2v88internal11interpreter19BytecodeArrayWriterC1EPNS0_4ZoneEPNS1_20ConstantArrayBuilderENS0_26SourcePositionTableBuilder13RecordingModeE = hidden unnamed_addr alias void (%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::Zone"*, %"class.v8::internal::interpreter::ConstantArrayBuilder"*, i32), void (%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::Zone"*, %"class.v8::internal::interpreter::ConstantArrayBuilder"*, i32)* @_ZN2v88internal11interpreter19BytecodeArrayWriterC2EPNS0_4ZoneEPNS1_20ConstantArrayBuilderENS0_26SourcePositionTableBuilder13RecordingModeE

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal11interpreter19BytecodeArrayWriter15ToBytecodeArrayINS0_7IsolateEEENS0_6HandleINS0_13BytecodeArrayEEEPT_iiNS5_INS0_9ByteArrayEEE(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::Isolate"*, i32, i32, i64*) local_unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %7 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %6 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = trunc i64 %12 to i32
  %14 = shl nsw i32 %2, 3
  %15 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 8
  %16 = load %"class.v8::internal::interpreter::ConstantArrayBuilder"*, %"class.v8::internal::interpreter::ConstantArrayBuilder"** %15, align 8
  %17 = tail call i64* @_ZN2v88internal11interpreter20ConstantArrayBuilder12ToFixedArrayINS0_7IsolateEEENS0_6HandleINS0_10FixedArrayEEEPT_(%"class.v8::internal::interpreter::ConstantArrayBuilder"* %16, %"class.v8::internal::Isolate"* %1) #6
  %18 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::FactoryBase"*
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE16NewBytecodeArrayEiPKhiiNS0_6HandleINS0_10FixedArrayEEE(%"class.v8::internal::FactoryBase"* %18, i32 %13, i8* %20, i32 %14, i32 %3, i64* %17) #6
  %22 = load i64, i64* %21, align 8
  %23 = load i64, i64* %4, align 8
  %24 = add i64 %22, 11
  %25 = inttoptr i64 %24 to i32*
  %26 = trunc i64 %23 to i32
  store atomic volatile i32 %26, i32* %25 monotonic, align 4
  %27 = and i64 %23, 1
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %40, label %29

29:                                               ; preds = %5
  %30 = and i64 %22, -262144
  %31 = or i64 %30, 8
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = and i64 %33, 262144
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %29
  %37 = or i64 %30, 16
  %38 = inttoptr i64 %37 to %"class.v8::internal::Heap"**
  %39 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %38, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %39, i64 %22, i64 %24, i64 %23) #6
  br label %40

40:                                               ; preds = %36, %29, %5
  %41 = and i64 %23, -262144
  %42 = or i64 %41, 8
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = and i64 %44, 24
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %40
  %48 = and i64 %22, -262144
  %49 = or i64 %48, 8
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = and i64 %51, 24
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %47
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %22, i64 %24, i64 %23) #6
  br label %55

55:                                               ; preds = %40, %47, %54
  ret i64* %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64* @_ZN2v88internal11interpreter20ConstantArrayBuilder12ToFixedArrayINS0_7IsolateEEENS0_6HandleINS0_10FixedArrayEEEPT_(%"class.v8::internal::interpreter::ConstantArrayBuilder"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE16NewBytecodeArrayEiPKhiiNS0_6HandleINS0_10FixedArrayEEE(%"class.v8::internal::FactoryBase"*, i32, i8*, i32, i32, i64*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal11interpreter19BytecodeArrayWriter15ToBytecodeArrayINS0_12LocalIsolateEEENS0_6HandleINS0_13BytecodeArrayEEEPT_iiNS5_INS0_9ByteArrayEEE(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::LocalIsolate"*, i32, i32, i64*) local_unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %7 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %6 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = trunc i64 %12 to i32
  %14 = shl nsw i32 %2, 3
  %15 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 8
  %16 = load %"class.v8::internal::interpreter::ConstantArrayBuilder"*, %"class.v8::internal::interpreter::ConstantArrayBuilder"** %15, align 8
  %17 = tail call i64* @_ZN2v88internal11interpreter20ConstantArrayBuilder12ToFixedArrayINS0_12LocalIsolateEEENS0_6HandleINS0_10FixedArrayEEEPT_(%"class.v8::internal::interpreter::ConstantArrayBuilder"* %16, %"class.v8::internal::LocalIsolate"* %1) #6
  %18 = bitcast %"class.v8::internal::LocalIsolate"* %1 to %"class.v8::internal::FactoryBase.1099"*
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE16NewBytecodeArrayEiPKhiiNS0_6HandleINS0_10FixedArrayEEE(%"class.v8::internal::FactoryBase.1099"* %18, i32 %13, i8* %20, i32 %14, i32 %3, i64* %17) #6
  %22 = load i64, i64* %21, align 8
  %23 = load i64, i64* %4, align 8
  %24 = add i64 %22, 11
  %25 = inttoptr i64 %24 to i32*
  %26 = trunc i64 %23 to i32
  store atomic volatile i32 %26, i32* %25 monotonic, align 4
  %27 = and i64 %23, 1
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %40, label %29

29:                                               ; preds = %5
  %30 = and i64 %22, -262144
  %31 = or i64 %30, 8
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = and i64 %33, 262144
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %29
  %37 = or i64 %30, 16
  %38 = inttoptr i64 %37 to %"class.v8::internal::Heap"**
  %39 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %38, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %39, i64 %22, i64 %24, i64 %23) #6
  br label %40

40:                                               ; preds = %36, %29, %5
  %41 = and i64 %23, -262144
  %42 = or i64 %41, 8
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = and i64 %44, 24
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %40
  %48 = and i64 %22, -262144
  %49 = or i64 %48, 8
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = and i64 %51, 24
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %47
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %22, i64 %24, i64 %23) #6
  br label %55

55:                                               ; preds = %40, %47, %54
  ret i64* %21
}

declare i64* @_ZN2v88internal11interpreter20ConstantArrayBuilder12ToFixedArrayINS0_12LocalIsolateEEENS0_6HandleINS0_10FixedArrayEEEPT_(%"class.v8::internal::interpreter::ConstantArrayBuilder"*, %"class.v8::internal::LocalIsolate"*) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE16NewBytecodeArrayEiPKhiiNS0_6HandleINS0_10FixedArrayEEE(%"class.v8::internal::FactoryBase.1099"*, i32, i8*, i32, i32, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal11interpreter19BytecodeArrayWriter21ToSourcePositionTableINS0_7IsolateEEENS0_6HandleINS0_9ByteArrayEEEPT_(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 7
  %4 = getelementptr inbounds %"class.v8::internal::SourcePositionTableBuilder", %"class.v8::internal::SourcePositionTableBuilder"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 2
  br i1 %6, label %9, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 107
  br label %11

9:                                                ; preds = %2
  %10 = tail call i64* @_ZN2v88internal26SourcePositionTableBuilder21ToSourcePositionTableINS0_7IsolateEEENS0_6HandleINS0_9ByteArrayEEEPT_(%"class.v8::internal::SourcePositionTableBuilder"* %3, %"class.v8::internal::Isolate"* %1) #6
  br label %11

11:                                               ; preds = %9, %7
  %12 = phi i64* [ %8, %7 ], [ %10, %9 ]
  ret i64* %12
}

declare i64* @_ZN2v88internal26SourcePositionTableBuilder21ToSourcePositionTableINS0_7IsolateEEENS0_6HandleINS0_9ByteArrayEEEPT_(%"class.v8::internal::SourcePositionTableBuilder"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal11interpreter19BytecodeArrayWriter21ToSourcePositionTableINS0_12LocalIsolateEEENS0_6HandleINS0_9ByteArrayEEEPT_(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::LocalIsolate"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 7
  %4 = getelementptr inbounds %"class.v8::internal::SourcePositionTableBuilder", %"class.v8::internal::SourcePositionTableBuilder"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 2
  br i1 %6, label %11, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = getelementptr inbounds i64, i64* %9, i64 107
  br label %13

11:                                               ; preds = %2
  %12 = tail call i64* @_ZN2v88internal26SourcePositionTableBuilder21ToSourcePositionTableINS0_12LocalIsolateEEENS0_6HandleINS0_9ByteArrayEEEPT_(%"class.v8::internal::SourcePositionTableBuilder"* %3, %"class.v8::internal::LocalIsolate"* %1) #6
  br label %13

13:                                               ; preds = %11, %7
  %14 = phi i64* [ %10, %7 ], [ %12, %11 ]
  ret i64* %14
}

declare i64* @_ZN2v88internal26SourcePositionTableBuilder21ToSourcePositionTableINS0_12LocalIsolateEEENS0_6HandleINS0_9ByteArrayEEEPT_(%"class.v8::internal::SourcePositionTableBuilder"*, %"class.v8::internal::LocalIsolate"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriterC2EPNS0_4ZoneEPNS1_20ConstantArrayBuilderENS0_26SourcePositionTableBuilder13RecordingModeE(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::Zone"*, %"class.v8::internal::interpreter::ConstantArrayBuilder"*, i32) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 0
  store i32 127, i32* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 1
  store i32 32639, i32* %6, align 4
  %7 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 2
  store i32 2139062143, i32* %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4
  %9 = ptrtoint %"class.v8::internal::Zone"* %1 to i64
  %10 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 1
  %11 = bitcast %"struct.std::__1::__compressed_pair_elem.0"* %10 to i64*
  %12 = bitcast %"class.v8::internal::ZoneVector"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #6
  store i64 %9, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 5
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 7
  tail call void @_ZN2v88internal26SourcePositionTableBuilderC1EPNS0_4ZoneENS1_13RecordingModeE(%"class.v8::internal::SourcePositionTableBuilder"* %14, %"class.v8::internal::Zone"* %1, i32 %3) #6
  %15 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 8
  store %"class.v8::internal::interpreter::ConstantArrayBuilder"* %2, %"class.v8::internal::interpreter::ConstantArrayBuilder"** %15, align 8
  %16 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  store i8 -60, i8* %16, align 8
  %17 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 11
  store i64 0, i64* %17, align 8
  %18 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 12
  store i8 0, i8* %18, align 8
  %19 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 13
  %20 = load i8, i8* @_ZN2v88internal42FLAG_ignition_elide_noneffectful_bytecodesE, align 1, !range !2
  store i8 %20, i8* %19, align 1
  %21 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 14
  store i8 0, i8* %21, align 2
  %22 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %23 = bitcast i8** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.v8::internal::ZoneVector"* %8 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %24, %26
  %28 = icmp ult i64 %27, 512
  br i1 %28, label %29, label %173

29:                                               ; preds = %4
  %30 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %32, %26
  %34 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %35 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %35, i64 0, i32 2
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %35, i64 0, i32 3
  %39 = load i64, i64* %38, align 8
  %40 = sub i64 %39, %37
  %41 = icmp ult i64 %40, 512
  br i1 %41, label %42, label %44, !prof !3

42:                                               ; preds = %29
  %43 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %35, i64 512) #6
  br label %46

44:                                               ; preds = %29
  %45 = add i64 %37, 512
  store i64 %45, i64* %36, align 8
  br label %46

46:                                               ; preds = %44, %42
  %47 = phi i64 [ %43, %42 ], [ %37, %44 ]
  %48 = inttoptr i64 %47 to i8*
  %49 = getelementptr inbounds i8, i8* %48, i64 %33
  %50 = ptrtoint i8* %49 to i64
  %51 = getelementptr inbounds i8, i8* %48, i64 512
  %52 = ptrtoint i8* %51 to i64
  %53 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %8, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i8*, i8** %30, align 8
  %56 = ptrtoint i8* %55 to i64
  %57 = icmp eq i8* %55, %54
  br i1 %57, label %171, label %58

58:                                               ; preds = %46
  %59 = ptrtoint i8* %54 to i64
  %60 = ptrtoint i8* %55 to i64
  %61 = sub i64 %60, %59
  %62 = icmp ult i64 %61, 16
  br i1 %62, label %158, label %63

63:                                               ; preds = %58
  %64 = sub i64 %32, %56
  %65 = sub i64 %64, %26
  %66 = getelementptr i8, i8* %54, i64 %65
  %67 = ptrtoint i8* %66 to i64
  %68 = getelementptr i8, i8* %48, i64 %67
  %69 = icmp ult i8* %68, %55
  %70 = icmp ult i8* %54, %49
  %71 = and i1 %69, %70
  br i1 %71, label %158, label %72

72:                                               ; preds = %63
  %73 = and i64 %61, -16
  %74 = sub i64 0, %73
  %75 = getelementptr i8, i8* %49, i64 %74
  %76 = sub i64 0, %73
  %77 = getelementptr i8, i8* %55, i64 %76
  %78 = add i64 %73, -16
  %79 = lshr exact i64 %78, 4
  %80 = add nuw nsw i64 %79, 1
  %81 = and i64 %80, 3
  %82 = icmp ult i64 %78, 48
  br i1 %82, label %135, label %83

83:                                               ; preds = %72
  %84 = sub nsw i64 %80, %81
  %85 = getelementptr i8, i8* %49, i64 -1
  %86 = getelementptr inbounds i8, i8* %85, i64 -8
  %87 = getelementptr inbounds i8, i8* %55, i64 -16
  %88 = getelementptr inbounds i8, i8* %86, i64 -7
  %89 = getelementptr i8, i8* %49, i64 -1
  %90 = getelementptr inbounds i8, i8* %89, i64 -8
  %91 = getelementptr inbounds i8, i8* %55, i64 -16
  %92 = getelementptr inbounds i8, i8* %90, i64 -7
  %93 = getelementptr i8, i8* %49, i64 -1
  %94 = getelementptr inbounds i8, i8* %93, i64 -8
  %95 = getelementptr inbounds i8, i8* %55, i64 -16
  %96 = getelementptr inbounds i8, i8* %94, i64 -7
  %97 = getelementptr i8, i8* %49, i64 -1
  %98 = getelementptr inbounds i8, i8* %97, i64 -8
  %99 = getelementptr inbounds i8, i8* %55, i64 -16
  %100 = getelementptr inbounds i8, i8* %98, i64 -7
  br label %101

101:                                              ; preds = %101, %83
  %102 = phi i64 [ 0, %83 ], [ %132, %101 ]
  %103 = phi i64 [ %84, %83 ], [ %133, %101 ]
  %104 = sub i64 0, %102
  %105 = sub i64 0, %102
  %106 = getelementptr inbounds i8, i8* %87, i64 %105
  %107 = bitcast i8* %106 to <2 x i64>*
  %108 = load <2 x i64>, <2 x i64>* %107, align 1, !alias.scope !4
  %109 = getelementptr inbounds i8, i8* %88, i64 %104
  %110 = bitcast i8* %109 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %110, align 1, !alias.scope !7, !noalias !4
  %111 = sub nuw nsw i64 -16, %102
  %112 = sub nuw nsw i64 -16, %102
  %113 = getelementptr inbounds i8, i8* %91, i64 %112
  %114 = bitcast i8* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1, !alias.scope !4
  %116 = getelementptr inbounds i8, i8* %92, i64 %111
  %117 = bitcast i8* %116 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %117, align 1, !alias.scope !7, !noalias !4
  %118 = sub nuw nsw i64 -32, %102
  %119 = sub nuw nsw i64 -32, %102
  %120 = getelementptr inbounds i8, i8* %95, i64 %119
  %121 = bitcast i8* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 1, !alias.scope !4
  %123 = getelementptr inbounds i8, i8* %96, i64 %118
  %124 = bitcast i8* %123 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %124, align 1, !alias.scope !7, !noalias !4
  %125 = sub nuw nsw i64 -48, %102
  %126 = sub nuw nsw i64 -48, %102
  %127 = getelementptr inbounds i8, i8* %99, i64 %126
  %128 = bitcast i8* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 1, !alias.scope !4
  %130 = getelementptr inbounds i8, i8* %100, i64 %125
  %131 = bitcast i8* %130 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %131, align 1, !alias.scope !7, !noalias !4
  %132 = add i64 %102, 64
  %133 = add i64 %103, -4
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %101, !llvm.loop !9

135:                                              ; preds = %101, %72
  %136 = phi i64 [ 0, %72 ], [ %132, %101 ]
  %137 = icmp eq i64 %81, 0
  br i1 %137, label %156, label %138

138:                                              ; preds = %135
  %139 = getelementptr i8, i8* %49, i64 -1
  %140 = getelementptr inbounds i8, i8* %139, i64 -8
  %141 = getelementptr inbounds i8, i8* %55, i64 -16
  %142 = getelementptr inbounds i8, i8* %140, i64 -7
  br label %143

143:                                              ; preds = %143, %138
  %144 = phi i64 [ %136, %138 ], [ %153, %143 ]
  %145 = phi i64 [ %81, %138 ], [ %154, %143 ]
  %146 = sub i64 0, %144
  %147 = sub i64 0, %144
  %148 = getelementptr inbounds i8, i8* %141, i64 %147
  %149 = bitcast i8* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 1, !alias.scope !4
  %151 = getelementptr inbounds i8, i8* %142, i64 %146
  %152 = bitcast i8* %151 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %152, align 1, !alias.scope !7, !noalias !4
  %153 = add i64 %144, 16
  %154 = add i64 %145, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %143, !llvm.loop !11

156:                                              ; preds = %143, %135
  %157 = icmp eq i64 %61, %73
  br i1 %157, label %168, label %158

158:                                              ; preds = %156, %63, %58
  %159 = phi i8* [ %49, %63 ], [ %49, %58 ], [ %75, %156 ]
  %160 = phi i8* [ %55, %63 ], [ %55, %58 ], [ %77, %156 ]
  br label %161

161:                                              ; preds = %158, %161
  %162 = phi i8* [ %164, %161 ], [ %159, %158 ]
  %163 = phi i8* [ %165, %161 ], [ %160, %158 ]
  %164 = getelementptr inbounds i8, i8* %162, i64 -1
  %165 = getelementptr inbounds i8, i8* %163, i64 -1
  %166 = load i8, i8* %165, align 1
  store i8 %166, i8* %164, align 1
  %167 = icmp eq i8* %165, %54
  br i1 %167, label %168, label %161, !llvm.loop !13

168:                                              ; preds = %161, %156
  %169 = phi i8* [ %75, %156 ], [ %164, %161 ]
  %170 = ptrtoint i8* %169 to i64
  br label %171

171:                                              ; preds = %168, %46
  %172 = phi i64 [ %50, %46 ], [ %170, %168 ]
  store i64 %172, i64* %25, align 8
  store i64 %50, i64* %31, align 8
  store i64 %52, i64* %23, align 8
  br label %173

173:                                              ; preds = %4, %171
  ret void
}

declare void @_ZN2v88internal26SourcePositionTableBuilderC1EPNS0_4ZoneENS1_13RecordingModeE(%"class.v8::internal::SourcePositionTableBuilder"*, %"class.v8::internal::Zone"*, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter5WriteEPNS1_12BytecodeNodeE(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::interpreter::BytecodeNode"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 14
  %4 = load i8, i8* %3, align 2, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %95

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 0
  %8 = load i8, i8* %7, align 4
  switch i8 %8, label %11 [
    i8 -88, label %9
    i8 -90, label %9
    i8 -89, label %9
    i8 -77, label %9
    i8 -119, label %9
    i8 -118, label %9
    i8 -82, label %9
  ]

9:                                                ; preds = %6, %6, %6, %6, %6, %6, %6
  store i8 1, i8* %3, align 2
  %10 = load i8, i8* %7, align 4
  br label %11

11:                                               ; preds = %6, %9
  %12 = phi i8 [ %8, %6 ], [ %10, %9 ]
  %13 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 4, i32 0
  %14 = load i8, i8* %13, align 4
  %15 = icmp ne i8 %14, 0
  %16 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 13
  %17 = load i8, i8* %16, align 1, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %73, label %19

19:                                               ; preds = %11
  %20 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  %21 = load i8, i8* %20, align 8
  %22 = add i8 %21, -11
  %23 = icmp ult i8 %22, 13
  br i1 %23, label %24, label %60

24:                                               ; preds = %19
  %25 = zext i8 %12 to i64
  %26 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2v88internal11interpreter9Bytecodes20kImplicitRegisterUseE, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 2
  br i1 %28, label %29, label %60

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 12
  %31 = load i8, i8* %30, align 8, !range !2
  %32 = icmp eq i8 %31, 0
  %33 = xor i1 %15, true
  %34 = or i1 %32, %33
  br i1 %34, label %35, label %60

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %37 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 11
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %40 = bitcast i8** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.std::__1::vector"* %36 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %41, %43
  %45 = icmp ugt i64 %38, %44
  %46 = inttoptr i64 %43 to i8*
  br i1 %45, label %47, label %50

47:                                               ; preds = %35
  %48 = sub i64 %38, %44
  tail call void @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE8__appendEm(%"class.std::__1::vector"* %36, i64 %48) #6
  %49 = load i8, i8* %30, align 8, !range !2
  br label %54

50:                                               ; preds = %35
  %51 = icmp ult i64 %38, %44
  br i1 %51, label %52, label %54

52:                                               ; preds = %50
  %53 = getelementptr inbounds i8, i8* %46, i64 %38
  store i8* %53, i8** %39, align 8
  br label %54

54:                                               ; preds = %52, %50, %47
  %55 = phi i8 [ %49, %47 ], [ %31, %50 ], [ %31, %52 ]
  %56 = zext i8 %55 to i32
  %57 = zext i1 %15 to i32
  %58 = or i32 %56, %57
  %59 = icmp ne i32 %58, 0
  br label %60

60:                                               ; preds = %54, %29, %24, %19
  %61 = phi i1 [ %59, %54 ], [ %15, %24 ], [ %15, %19 ], [ %15, %29 ]
  store i8 %12, i8* %20, align 8
  %62 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 12
  %63 = zext i1 %61 to i8
  store i8 %63, i8* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %65 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %66 = bitcast i8** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"class.std::__1::vector"* %64 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = sub i64 %67, %69
  %71 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 11
  store i64 %70, i64* %71, align 8
  %72 = load i8, i8* %13, align 4
  br label %73

73:                                               ; preds = %11, %60
  %74 = phi i8 [ %14, %11 ], [ %72, %60 ]
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %94, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %78 = bitcast i8** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %81 = bitcast %"class.std::__1::vector"* %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %79, %82
  %84 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 7
  %85 = shl i64 %83, 32
  %86 = ashr exact i64 %85, 32
  %87 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 4, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = add nsw i32 %88, 1
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 1
  %92 = and i64 %91, -140735340871682
  %93 = icmp eq i8 %74, 2
  tail call void @_ZN2v88internal26SourcePositionTableBuilder11AddPositionEmNS0_14SourcePositionEb(%"class.v8::internal::SourcePositionTableBuilder"* %84, i64 %86, i64 %92, i1 zeroext %93) #6
  br label %94

94:                                               ; preds = %73, %76
  tail call void @_ZN2v88internal11interpreter19BytecodeArrayWriter12EmitBytecodeEPKNS1_12BytecodeNodeE(%"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, %"class.v8::internal::interpreter::BytecodeNode"* %1)
  br label %95

95:                                               ; preds = %2, %94
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter21UpdateExitSeenInBlockENS1_8BytecodeE(%"class.v8::internal::interpreter::BytecodeArrayWriter"* nocapture, i8 zeroext) local_unnamed_addr #3 align 2 {
  switch i8 %1, label %5 [
    i8 -88, label %3
    i8 -90, label %3
    i8 -89, label %3
    i8 -77, label %3
    i8 -119, label %3
    i8 -118, label %3
    i8 -82, label %3
  ]

3:                                                ; preds = %2, %2, %2, %2, %2, %2, %2
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 14
  store i8 1, i8* %4, align 2
  br label %5

5:                                                ; preds = %2, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter22MaybeElideLastBytecodeENS1_8BytecodeEb(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, i8 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 13
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %60, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  %9 = load i8, i8* %8, align 8
  %10 = add i8 %9, -11
  %11 = icmp ult i8 %10, 13
  br i1 %11, label %12, label %48

12:                                               ; preds = %7
  %13 = zext i8 %1 to i64
  %14 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2v88internal11interpreter9Bytecodes20kImplicitRegisterUseE, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 2
  br i1 %16, label %17, label %48

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 12
  %19 = load i8, i8* %18, align 8, !range !2
  %20 = icmp eq i8 %19, 0
  %21 = xor i1 %2, true
  %22 = or i1 %20, %21
  br i1 %22, label %23, label %48

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %25 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 11
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %28 = bitcast i8** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.std::__1::vector"* %24 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %29, %31
  %33 = icmp ugt i64 %26, %32
  %34 = inttoptr i64 %31 to i8*
  br i1 %33, label %35, label %38

35:                                               ; preds = %23
  %36 = sub i64 %26, %32
  tail call void @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE8__appendEm(%"class.std::__1::vector"* %24, i64 %36) #6
  %37 = load i8, i8* %18, align 8, !range !2
  br label %42

38:                                               ; preds = %23
  %39 = icmp ult i64 %26, %32
  br i1 %39, label %40, label %42

40:                                               ; preds = %38
  %41 = getelementptr inbounds i8, i8* %34, i64 %26
  store i8* %41, i8** %27, align 8
  br label %42

42:                                               ; preds = %35, %38, %40
  %43 = phi i8 [ %37, %35 ], [ %19, %38 ], [ %19, %40 ]
  %44 = zext i8 %43 to i32
  %45 = zext i1 %2 to i32
  %46 = or i32 %44, %45
  %47 = icmp ne i32 %46, 0
  br label %48

48:                                               ; preds = %17, %42, %12, %7
  %49 = phi i1 [ %47, %42 ], [ %2, %12 ], [ %2, %7 ], [ %2, %17 ]
  store i8 %1, i8* %8, align 8
  %50 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 12
  %51 = zext i1 %49 to i8
  store i8 %51, i8* %50, align 8
  %52 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %53 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %54 = bitcast i8** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %"class.std::__1::vector"* %52 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = sub i64 %55, %57
  %59 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 11
  store i64 %58, i64* %59, align 8
  br label %60

60:                                               ; preds = %3, %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter25UpdateSourcePositionTableEPKNS1_12BytecodeNodeE(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::interpreter::BytecodeNode"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 4, i32 0
  %4 = load i8, i8* %3, align 4
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %24, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %11 = bitcast %"class.std::__1::vector"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %9, %12
  %14 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 7
  %15 = shl i64 %13, 32
  %16 = ashr exact i64 %15, 32
  %17 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 4, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 1
  %20 = sext i32 %19 to i64
  %21 = shl nsw i64 %20, 1
  %22 = and i64 %21, -140735340871682
  %23 = icmp eq i8 %4, 2
  tail call void @_ZN2v88internal26SourcePositionTableBuilder11AddPositionEmNS0_14SourcePositionEb(%"class.v8::internal::SourcePositionTableBuilder"* %14, i64 %16, i64 %22, i1 zeroext %23) #6
  br label %24

24:                                               ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter12EmitBytecodeEPKNS1_12BytecodeNodeE(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::interpreter::BytecodeNode"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 0
  %4 = load i8, i8* %3, align 4
  %5 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 3
  %6 = load i8, i8* %5, align 4
  switch i8 %6, label %11 [
    i8 1, label %7
    i8 4, label %12
    i8 2, label %10
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  br label %189

10:                                               ; preds = %2
  br label %12

11:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

12:                                               ; preds = %2, %10
  %13 = phi i8 [ 0, %10 ], [ 1, %2 ]
  %14 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = icmp ult i8* %16, %18
  %20 = ptrtoint i8* %18 to i64
  br i1 %19, label %21, label %25

21:                                               ; preds = %12
  store i8 %13, i8* %16, align 1
  %22 = getelementptr inbounds i8, i8* %16, i64 1
  %23 = ptrtoint i8* %22 to i64
  %24 = bitcast i8** %15 to i64*
  store i64 %23, i64* %24, align 8
  br label %189

25:                                               ; preds = %12
  %26 = ptrtoint i8* %16 to i64
  %27 = bitcast i8** %15 to i64*
  %28 = bitcast %"class.std::__1::vector"* %14 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %26, %29
  %31 = add i64 %30, 1
  %32 = icmp ugt i64 %31, 2147483647
  br i1 %32, label %33, label %35

33:                                               ; preds = %25
  %34 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %34) #7
  unreachable

35:                                               ; preds = %25
  %36 = bitcast i8** %17 to i64*
  %37 = sub i64 %20, %29
  %38 = icmp ult i64 %37, 1073741823
  br i1 %38, label %39, label %44

39:                                               ; preds = %35
  %40 = shl i64 %37, 1
  %41 = icmp ult i64 %40, %31
  %42 = select i1 %41, i64 %31, i64 %40
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %63, label %44

44:                                               ; preds = %39, %35
  %45 = phi i64 [ %42, %39 ], [ 2147483647, %35 ]
  %46 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %47 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %46, align 8
  %48 = add nuw nsw i64 %45, 7
  %49 = and i64 %48, -8
  %50 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %47, i64 0, i32 2
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %47, i64 0, i32 3
  %53 = load i64, i64* %52, align 8
  %54 = sub i64 %53, %51
  %55 = icmp ugt i64 %49, %54
  br i1 %55, label %56, label %58, !prof !3

56:                                               ; preds = %44
  %57 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %47, i64 %49) #6
  br label %60

58:                                               ; preds = %44
  %59 = add i64 %51, %49
  store i64 %59, i64* %50, align 8
  br label %60

60:                                               ; preds = %58, %56
  %61 = phi i64 [ %57, %56 ], [ %51, %58 ]
  %62 = inttoptr i64 %61 to i8*
  br label %63

63:                                               ; preds = %60, %39
  %64 = phi i64 [ %45, %60 ], [ 0, %39 ]
  %65 = phi i8* [ %62, %60 ], [ null, %39 ]
  %66 = getelementptr inbounds i8, i8* %65, i64 %30
  %67 = getelementptr inbounds i8, i8* %65, i64 %64
  %68 = ptrtoint i8* %67 to i64
  store i8 %13, i8* %66, align 1
  %69 = getelementptr inbounds i8, i8* %66, i64 1
  %70 = ptrtoint i8* %69 to i64
  %71 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = load i8*, i8** %15, align 8
  %74 = ptrtoint i8* %73 to i64
  %75 = icmp eq i8* %73, %72
  br i1 %75, label %186, label %76

76:                                               ; preds = %63
  %77 = ptrtoint i8* %72 to i64
  %78 = ptrtoint i8* %73 to i64
  %79 = sub i64 %78, %77
  %80 = icmp ult i64 %79, 16
  br i1 %80, label %176, label %81

81:                                               ; preds = %76
  %82 = sub i64 %26, %74
  %83 = sub i64 %82, %29
  %84 = getelementptr i8, i8* %72, i64 %83
  %85 = ptrtoint i8* %84 to i64
  %86 = getelementptr i8, i8* %65, i64 %85
  %87 = icmp ult i8* %86, %73
  %88 = icmp ult i8* %72, %66
  %89 = and i1 %87, %88
  br i1 %89, label %176, label %90

90:                                               ; preds = %81
  %91 = and i64 %79, -16
  %92 = sub i64 0, %91
  %93 = getelementptr i8, i8* %66, i64 %92
  %94 = sub i64 0, %91
  %95 = getelementptr i8, i8* %73, i64 %94
  %96 = add i64 %91, -16
  %97 = lshr exact i64 %96, 4
  %98 = add nuw nsw i64 %97, 1
  %99 = and i64 %98, 3
  %100 = icmp ult i64 %96, 48
  br i1 %100, label %153, label %101

101:                                              ; preds = %90
  %102 = sub nsw i64 %98, %99
  %103 = getelementptr i8, i8* %66, i64 -1
  %104 = getelementptr inbounds i8, i8* %103, i64 -8
  %105 = getelementptr inbounds i8, i8* %73, i64 -16
  %106 = getelementptr inbounds i8, i8* %104, i64 -7
  %107 = getelementptr i8, i8* %66, i64 -1
  %108 = getelementptr inbounds i8, i8* %107, i64 -8
  %109 = getelementptr inbounds i8, i8* %73, i64 -16
  %110 = getelementptr inbounds i8, i8* %108, i64 -7
  %111 = getelementptr i8, i8* %66, i64 -1
  %112 = getelementptr inbounds i8, i8* %111, i64 -8
  %113 = getelementptr inbounds i8, i8* %73, i64 -16
  %114 = getelementptr inbounds i8, i8* %112, i64 -7
  %115 = getelementptr i8, i8* %66, i64 -1
  %116 = getelementptr inbounds i8, i8* %115, i64 -8
  %117 = getelementptr inbounds i8, i8* %73, i64 -16
  %118 = getelementptr inbounds i8, i8* %116, i64 -7
  br label %119

119:                                              ; preds = %119, %101
  %120 = phi i64 [ 0, %101 ], [ %150, %119 ]
  %121 = phi i64 [ %102, %101 ], [ %151, %119 ]
  %122 = sub i64 0, %120
  %123 = sub i64 0, %120
  %124 = getelementptr inbounds i8, i8* %105, i64 %123
  %125 = bitcast i8* %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 1, !alias.scope !14
  %127 = getelementptr inbounds i8, i8* %106, i64 %122
  %128 = bitcast i8* %127 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %128, align 1, !alias.scope !17, !noalias !14
  %129 = sub nuw nsw i64 -16, %120
  %130 = sub nuw nsw i64 -16, %120
  %131 = getelementptr inbounds i8, i8* %109, i64 %130
  %132 = bitcast i8* %131 to <2 x i64>*
  %133 = load <2 x i64>, <2 x i64>* %132, align 1, !alias.scope !14
  %134 = getelementptr inbounds i8, i8* %110, i64 %129
  %135 = bitcast i8* %134 to <2 x i64>*
  store <2 x i64> %133, <2 x i64>* %135, align 1, !alias.scope !17, !noalias !14
  %136 = sub nuw nsw i64 -32, %120
  %137 = sub nuw nsw i64 -32, %120
  %138 = getelementptr inbounds i8, i8* %113, i64 %137
  %139 = bitcast i8* %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 1, !alias.scope !14
  %141 = getelementptr inbounds i8, i8* %114, i64 %136
  %142 = bitcast i8* %141 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %142, align 1, !alias.scope !17, !noalias !14
  %143 = sub nuw nsw i64 -48, %120
  %144 = sub nuw nsw i64 -48, %120
  %145 = getelementptr inbounds i8, i8* %117, i64 %144
  %146 = bitcast i8* %145 to <2 x i64>*
  %147 = load <2 x i64>, <2 x i64>* %146, align 1, !alias.scope !14
  %148 = getelementptr inbounds i8, i8* %118, i64 %143
  %149 = bitcast i8* %148 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %149, align 1, !alias.scope !17, !noalias !14
  %150 = add i64 %120, 64
  %151 = add i64 %121, -4
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %119, !llvm.loop !19

153:                                              ; preds = %119, %90
  %154 = phi i64 [ 0, %90 ], [ %150, %119 ]
  %155 = icmp eq i64 %99, 0
  br i1 %155, label %174, label %156

156:                                              ; preds = %153
  %157 = getelementptr i8, i8* %66, i64 -1
  %158 = getelementptr inbounds i8, i8* %157, i64 -8
  %159 = getelementptr inbounds i8, i8* %73, i64 -16
  %160 = getelementptr inbounds i8, i8* %158, i64 -7
  br label %161

161:                                              ; preds = %161, %156
  %162 = phi i64 [ %154, %156 ], [ %171, %161 ]
  %163 = phi i64 [ %99, %156 ], [ %172, %161 ]
  %164 = sub i64 0, %162
  %165 = sub i64 0, %162
  %166 = getelementptr inbounds i8, i8* %159, i64 %165
  %167 = bitcast i8* %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 1, !alias.scope !14
  %169 = getelementptr inbounds i8, i8* %160, i64 %164
  %170 = bitcast i8* %169 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %170, align 1, !alias.scope !17, !noalias !14
  %171 = add i64 %162, 16
  %172 = add i64 %163, -1
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %161, !llvm.loop !20

174:                                              ; preds = %161, %153
  %175 = icmp eq i64 %79, %91
  br i1 %175, label %186, label %176

176:                                              ; preds = %174, %81, %76
  %177 = phi i8* [ %66, %81 ], [ %66, %76 ], [ %93, %174 ]
  %178 = phi i8* [ %73, %81 ], [ %73, %76 ], [ %95, %174 ]
  br label %179

179:                                              ; preds = %176, %179
  %180 = phi i8* [ %182, %179 ], [ %177, %176 ]
  %181 = phi i8* [ %183, %179 ], [ %178, %176 ]
  %182 = getelementptr inbounds i8, i8* %180, i64 -1
  %183 = getelementptr inbounds i8, i8* %181, i64 -1
  %184 = load i8, i8* %183, align 1
  store i8 %184, i8* %182, align 1
  %185 = icmp eq i8* %183, %72
  br i1 %185, label %186, label %179, !llvm.loop !21

186:                                              ; preds = %179, %174, %63
  %187 = phi i8* [ %66, %63 ], [ %93, %174 ], [ %182, %179 ]
  %188 = ptrtoint i8* %187 to i64
  store i64 %188, i64* %28, align 8
  store i64 %70, i64* %27, align 8
  store i64 %68, i64* %36, align 8
  br label %189

189:                                              ; preds = %7, %186, %21
  %190 = phi i8* [ %9, %7 ], [ %69, %186 ], [ %22, %21 ]
  %191 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %192 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %193 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %194 = load i8*, i8** %193, align 8
  %195 = icmp ult i8* %190, %194
  %196 = ptrtoint i8* %194 to i64
  br i1 %195, label %197, label %201

197:                                              ; preds = %189
  store i8 %4, i8* %190, align 1
  %198 = getelementptr inbounds i8, i8* %190, i64 1
  %199 = ptrtoint i8* %198 to i64
  %200 = bitcast i8** %192 to i64*
  store i64 %199, i64* %200, align 8
  br label %365

201:                                              ; preds = %189
  %202 = ptrtoint i8* %190 to i64
  %203 = bitcast i8** %192 to i64*
  %204 = bitcast %"class.std::__1::vector"* %191 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = sub i64 %202, %205
  %207 = add i64 %206, 1
  %208 = icmp ugt i64 %207, 2147483647
  br i1 %208, label %209, label %211

209:                                              ; preds = %201
  %210 = bitcast %"class.std::__1::vector"* %191 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %210) #7
  unreachable

211:                                              ; preds = %201
  %212 = bitcast i8** %193 to i64*
  %213 = sub i64 %196, %205
  %214 = icmp ult i64 %213, 1073741823
  br i1 %214, label %215, label %220

215:                                              ; preds = %211
  %216 = shl i64 %213, 1
  %217 = icmp ult i64 %216, %207
  %218 = select i1 %217, i64 %207, i64 %216
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %239, label %220

220:                                              ; preds = %215, %211
  %221 = phi i64 [ %218, %215 ], [ 2147483647, %211 ]
  %222 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %223 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %222, align 8
  %224 = add nuw nsw i64 %221, 7
  %225 = and i64 %224, -8
  %226 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %223, i64 0, i32 2
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %223, i64 0, i32 3
  %229 = load i64, i64* %228, align 8
  %230 = sub i64 %229, %227
  %231 = icmp ugt i64 %225, %230
  br i1 %231, label %232, label %234, !prof !3

232:                                              ; preds = %220
  %233 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %223, i64 %225) #6
  br label %236

234:                                              ; preds = %220
  %235 = add i64 %227, %225
  store i64 %235, i64* %226, align 8
  br label %236

236:                                              ; preds = %234, %232
  %237 = phi i64 [ %233, %232 ], [ %227, %234 ]
  %238 = inttoptr i64 %237 to i8*
  br label %239

239:                                              ; preds = %236, %215
  %240 = phi i64 [ %221, %236 ], [ 0, %215 ]
  %241 = phi i8* [ %238, %236 ], [ null, %215 ]
  %242 = getelementptr inbounds i8, i8* %241, i64 %206
  %243 = getelementptr inbounds i8, i8* %241, i64 %240
  %244 = ptrtoint i8* %243 to i64
  store i8 %4, i8* %242, align 1
  %245 = getelementptr inbounds i8, i8* %242, i64 1
  %246 = ptrtoint i8* %245 to i64
  %247 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %191, i64 0, i32 0, i32 0
  %248 = load i8*, i8** %247, align 8
  %249 = load i8*, i8** %192, align 8
  %250 = ptrtoint i8* %249 to i64
  %251 = icmp eq i8* %249, %248
  br i1 %251, label %362, label %252

252:                                              ; preds = %239
  %253 = ptrtoint i8* %248 to i64
  %254 = ptrtoint i8* %249 to i64
  %255 = sub i64 %254, %253
  %256 = icmp ult i64 %255, 16
  br i1 %256, label %352, label %257

257:                                              ; preds = %252
  %258 = sub i64 %202, %250
  %259 = sub i64 %258, %205
  %260 = getelementptr i8, i8* %248, i64 %259
  %261 = ptrtoint i8* %260 to i64
  %262 = getelementptr i8, i8* %241, i64 %261
  %263 = icmp ult i8* %262, %249
  %264 = icmp ult i8* %248, %242
  %265 = and i1 %263, %264
  br i1 %265, label %352, label %266

266:                                              ; preds = %257
  %267 = and i64 %255, -16
  %268 = sub i64 0, %267
  %269 = getelementptr i8, i8* %242, i64 %268
  %270 = sub i64 0, %267
  %271 = getelementptr i8, i8* %249, i64 %270
  %272 = add i64 %267, -16
  %273 = lshr exact i64 %272, 4
  %274 = add nuw nsw i64 %273, 1
  %275 = and i64 %274, 3
  %276 = icmp ult i64 %272, 48
  br i1 %276, label %329, label %277

277:                                              ; preds = %266
  %278 = sub nsw i64 %274, %275
  %279 = getelementptr i8, i8* %242, i64 -1
  %280 = getelementptr inbounds i8, i8* %279, i64 -8
  %281 = getelementptr inbounds i8, i8* %249, i64 -16
  %282 = getelementptr inbounds i8, i8* %280, i64 -7
  %283 = getelementptr i8, i8* %242, i64 -1
  %284 = getelementptr inbounds i8, i8* %283, i64 -8
  %285 = getelementptr inbounds i8, i8* %249, i64 -16
  %286 = getelementptr inbounds i8, i8* %284, i64 -7
  %287 = getelementptr i8, i8* %242, i64 -1
  %288 = getelementptr inbounds i8, i8* %287, i64 -8
  %289 = getelementptr inbounds i8, i8* %249, i64 -16
  %290 = getelementptr inbounds i8, i8* %288, i64 -7
  %291 = getelementptr i8, i8* %242, i64 -1
  %292 = getelementptr inbounds i8, i8* %291, i64 -8
  %293 = getelementptr inbounds i8, i8* %249, i64 -16
  %294 = getelementptr inbounds i8, i8* %292, i64 -7
  br label %295

295:                                              ; preds = %295, %277
  %296 = phi i64 [ 0, %277 ], [ %326, %295 ]
  %297 = phi i64 [ %278, %277 ], [ %327, %295 ]
  %298 = sub i64 0, %296
  %299 = sub i64 0, %296
  %300 = getelementptr inbounds i8, i8* %281, i64 %299
  %301 = bitcast i8* %300 to <2 x i64>*
  %302 = load <2 x i64>, <2 x i64>* %301, align 1, !alias.scope !22
  %303 = getelementptr inbounds i8, i8* %282, i64 %298
  %304 = bitcast i8* %303 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %304, align 1, !alias.scope !25, !noalias !22
  %305 = sub nuw nsw i64 -16, %296
  %306 = sub nuw nsw i64 -16, %296
  %307 = getelementptr inbounds i8, i8* %285, i64 %306
  %308 = bitcast i8* %307 to <2 x i64>*
  %309 = load <2 x i64>, <2 x i64>* %308, align 1, !alias.scope !22
  %310 = getelementptr inbounds i8, i8* %286, i64 %305
  %311 = bitcast i8* %310 to <2 x i64>*
  store <2 x i64> %309, <2 x i64>* %311, align 1, !alias.scope !25, !noalias !22
  %312 = sub nuw nsw i64 -32, %296
  %313 = sub nuw nsw i64 -32, %296
  %314 = getelementptr inbounds i8, i8* %289, i64 %313
  %315 = bitcast i8* %314 to <2 x i64>*
  %316 = load <2 x i64>, <2 x i64>* %315, align 1, !alias.scope !22
  %317 = getelementptr inbounds i8, i8* %290, i64 %312
  %318 = bitcast i8* %317 to <2 x i64>*
  store <2 x i64> %316, <2 x i64>* %318, align 1, !alias.scope !25, !noalias !22
  %319 = sub nuw nsw i64 -48, %296
  %320 = sub nuw nsw i64 -48, %296
  %321 = getelementptr inbounds i8, i8* %293, i64 %320
  %322 = bitcast i8* %321 to <2 x i64>*
  %323 = load <2 x i64>, <2 x i64>* %322, align 1, !alias.scope !22
  %324 = getelementptr inbounds i8, i8* %294, i64 %319
  %325 = bitcast i8* %324 to <2 x i64>*
  store <2 x i64> %323, <2 x i64>* %325, align 1, !alias.scope !25, !noalias !22
  %326 = add i64 %296, 64
  %327 = add i64 %297, -4
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %329, label %295, !llvm.loop !27

329:                                              ; preds = %295, %266
  %330 = phi i64 [ 0, %266 ], [ %326, %295 ]
  %331 = icmp eq i64 %275, 0
  br i1 %331, label %350, label %332

332:                                              ; preds = %329
  %333 = getelementptr i8, i8* %242, i64 -1
  %334 = getelementptr inbounds i8, i8* %333, i64 -8
  %335 = getelementptr inbounds i8, i8* %249, i64 -16
  %336 = getelementptr inbounds i8, i8* %334, i64 -7
  br label %337

337:                                              ; preds = %337, %332
  %338 = phi i64 [ %330, %332 ], [ %347, %337 ]
  %339 = phi i64 [ %275, %332 ], [ %348, %337 ]
  %340 = sub i64 0, %338
  %341 = sub i64 0, %338
  %342 = getelementptr inbounds i8, i8* %335, i64 %341
  %343 = bitcast i8* %342 to <2 x i64>*
  %344 = load <2 x i64>, <2 x i64>* %343, align 1, !alias.scope !22
  %345 = getelementptr inbounds i8, i8* %336, i64 %340
  %346 = bitcast i8* %345 to <2 x i64>*
  store <2 x i64> %344, <2 x i64>* %346, align 1, !alias.scope !25, !noalias !22
  %347 = add i64 %338, 16
  %348 = add i64 %339, -1
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %350, label %337, !llvm.loop !28

350:                                              ; preds = %337, %329
  %351 = icmp eq i64 %255, %267
  br i1 %351, label %362, label %352

352:                                              ; preds = %350, %257, %252
  %353 = phi i8* [ %242, %257 ], [ %242, %252 ], [ %269, %350 ]
  %354 = phi i8* [ %249, %257 ], [ %249, %252 ], [ %271, %350 ]
  br label %355

355:                                              ; preds = %352, %355
  %356 = phi i8* [ %358, %355 ], [ %353, %352 ]
  %357 = phi i8* [ %359, %355 ], [ %354, %352 ]
  %358 = getelementptr inbounds i8, i8* %356, i64 -1
  %359 = getelementptr inbounds i8, i8* %357, i64 -1
  %360 = load i8, i8* %359, align 1
  store i8 %360, i8* %358, align 1
  %361 = icmp eq i8* %359, %248
  br i1 %361, label %362, label %355, !llvm.loop !29

362:                                              ; preds = %355, %350, %239
  %363 = phi i8* [ %242, %239 ], [ %269, %350 ], [ %358, %355 ]
  %364 = ptrtoint i8* %363 to i64
  store i64 %364, i64* %204, align 8
  store i64 %246, i64* %203, align 8
  store i64 %244, i64* %212, align 8
  br label %365

365:                                              ; preds = %197, %362
  %366 = phi i8* [ %198, %197 ], [ %245, %362 ]
  %367 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 2
  %368 = load i32, i32* %367, align 4
  %369 = lshr i8 %6, 1
  %370 = zext i8 %369 to i64
  %371 = zext i8 %4 to i64
  %372 = getelementptr inbounds [3 x [197 x i8*]], [3 x [197 x i8*]]* @_ZN2v88internal11interpreter9Bytecodes13kOperandSizesE, i64 0, i64 %370, i64 %371
  %373 = load i8*, i8** %372, align 8
  %374 = icmp sgt i32 %368, 0
  br i1 %374, label %375, label %382

375:                                              ; preds = %365
  %376 = bitcast i8** %192 to i64*
  %377 = bitcast %"class.std::__1::vector"* %191 to i64*
  %378 = bitcast i8** %193 to i64*
  %379 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %380 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %191, i64 0, i32 0, i32 0
  %381 = zext i32 %368 to i64
  br label %383

382:                                              ; preds = %1575, %365
  ret void

383:                                              ; preds = %1575, %375
  %384 = phi i8* [ %366, %375 ], [ %1576, %1575 ]
  %385 = phi i8* [ %366, %375 ], [ %1577, %1575 ]
  %386 = phi i8* [ %366, %375 ], [ %1578, %1575 ]
  %387 = phi i64 [ 0, %375 ], [ %1579, %1575 ]
  %388 = getelementptr inbounds i8, i8* %373, i64 %387
  %389 = load i8, i8* %388, align 1
  switch i8 %389, label %1575 [
    i8 0, label %390
    i8 1, label %391
    i8 2, label %560
    i8 4, label %897
  ]

390:                                              ; preds = %383
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

391:                                              ; preds = %383
  %392 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 1, i64 %387
  %393 = load i32, i32* %392, align 4
  %394 = trunc i32 %393 to i8
  %395 = load i8*, i8** %193, align 8
  %396 = icmp ult i8* %384, %395
  %397 = ptrtoint i8* %395 to i64
  br i1 %396, label %398, label %401

398:                                              ; preds = %391
  store i8 %394, i8* %384, align 1
  %399 = getelementptr inbounds i8, i8* %384, i64 1
  %400 = ptrtoint i8* %399 to i64
  store i64 %400, i64* %376, align 8
  br label %1575

401:                                              ; preds = %391
  %402 = ptrtoint i8* %384 to i64
  %403 = load i64, i64* %377, align 8
  %404 = sub i64 %402, %403
  %405 = add i64 %404, 1
  %406 = icmp ugt i64 %405, 2147483647
  br i1 %406, label %407, label %409

407:                                              ; preds = %401
  %408 = bitcast %"class.std::__1::vector"* %191 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %408) #7
  unreachable

409:                                              ; preds = %401
  %410 = sub i64 %397, %403
  %411 = icmp ult i64 %410, 1073741823
  br i1 %411, label %412, label %417

412:                                              ; preds = %409
  %413 = shl i64 %410, 1
  %414 = icmp ult i64 %413, %405
  %415 = select i1 %414, i64 %405, i64 %413
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %435, label %417

417:                                              ; preds = %412, %409
  %418 = phi i64 [ %415, %412 ], [ 2147483647, %409 ]
  %419 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %379, align 8
  %420 = add nuw nsw i64 %418, 7
  %421 = and i64 %420, -8
  %422 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %419, i64 0, i32 2
  %423 = load i64, i64* %422, align 8
  %424 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %419, i64 0, i32 3
  %425 = load i64, i64* %424, align 8
  %426 = sub i64 %425, %423
  %427 = icmp ugt i64 %421, %426
  br i1 %427, label %428, label %430, !prof !3

428:                                              ; preds = %417
  %429 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %419, i64 %421) #6
  br label %432

430:                                              ; preds = %417
  %431 = add i64 %423, %421
  store i64 %431, i64* %422, align 8
  br label %432

432:                                              ; preds = %430, %428
  %433 = phi i64 [ %429, %428 ], [ %423, %430 ]
  %434 = inttoptr i64 %433 to i8*
  br label %435

435:                                              ; preds = %432, %412
  %436 = phi i64 [ %418, %432 ], [ 0, %412 ]
  %437 = phi i8* [ %434, %432 ], [ null, %412 ]
  %438 = getelementptr inbounds i8, i8* %437, i64 %404
  %439 = getelementptr inbounds i8, i8* %437, i64 %436
  %440 = ptrtoint i8* %439 to i64
  store i8 %394, i8* %438, align 1
  %441 = getelementptr inbounds i8, i8* %438, i64 1
  %442 = ptrtoint i8* %441 to i64
  %443 = load i8*, i8** %380, align 8
  %444 = load i8*, i8** %192, align 8
  %445 = ptrtoint i8* %444 to i64
  %446 = icmp eq i8* %444, %443
  br i1 %446, label %557, label %447

447:                                              ; preds = %435
  %448 = ptrtoint i8* %443 to i64
  %449 = ptrtoint i8* %444 to i64
  %450 = sub i64 %449, %448
  %451 = icmp ult i64 %450, 16
  br i1 %451, label %547, label %452

452:                                              ; preds = %447
  %453 = sub i64 %402, %445
  %454 = sub i64 %453, %403
  %455 = getelementptr i8, i8* %443, i64 %454
  %456 = ptrtoint i8* %455 to i64
  %457 = getelementptr i8, i8* %437, i64 %456
  %458 = icmp ult i8* %457, %444
  %459 = icmp ult i8* %443, %438
  %460 = and i1 %458, %459
  br i1 %460, label %547, label %461

461:                                              ; preds = %452
  %462 = and i64 %450, -16
  %463 = sub i64 0, %462
  %464 = getelementptr i8, i8* %438, i64 %463
  %465 = sub i64 0, %462
  %466 = getelementptr i8, i8* %444, i64 %465
  %467 = add i64 %462, -16
  %468 = lshr exact i64 %467, 4
  %469 = add nuw nsw i64 %468, 1
  %470 = and i64 %469, 3
  %471 = icmp ult i64 %467, 48
  br i1 %471, label %524, label %472

472:                                              ; preds = %461
  %473 = sub nsw i64 %469, %470
  %474 = getelementptr i8, i8* %438, i64 -1
  %475 = getelementptr inbounds i8, i8* %474, i64 -8
  %476 = getelementptr inbounds i8, i8* %444, i64 -16
  %477 = getelementptr inbounds i8, i8* %475, i64 -7
  %478 = getelementptr i8, i8* %438, i64 -1
  %479 = getelementptr inbounds i8, i8* %478, i64 -8
  %480 = getelementptr inbounds i8, i8* %444, i64 -16
  %481 = getelementptr inbounds i8, i8* %479, i64 -7
  %482 = getelementptr i8, i8* %438, i64 -1
  %483 = getelementptr inbounds i8, i8* %482, i64 -8
  %484 = getelementptr inbounds i8, i8* %444, i64 -16
  %485 = getelementptr inbounds i8, i8* %483, i64 -7
  %486 = getelementptr i8, i8* %438, i64 -1
  %487 = getelementptr inbounds i8, i8* %486, i64 -8
  %488 = getelementptr inbounds i8, i8* %444, i64 -16
  %489 = getelementptr inbounds i8, i8* %487, i64 -7
  br label %490

490:                                              ; preds = %490, %472
  %491 = phi i64 [ 0, %472 ], [ %521, %490 ]
  %492 = phi i64 [ %473, %472 ], [ %522, %490 ]
  %493 = sub i64 0, %491
  %494 = sub i64 0, %491
  %495 = getelementptr inbounds i8, i8* %476, i64 %494
  %496 = bitcast i8* %495 to <2 x i64>*
  %497 = load <2 x i64>, <2 x i64>* %496, align 1, !alias.scope !30
  %498 = getelementptr inbounds i8, i8* %477, i64 %493
  %499 = bitcast i8* %498 to <2 x i64>*
  store <2 x i64> %497, <2 x i64>* %499, align 1, !alias.scope !33, !noalias !30
  %500 = sub nuw nsw i64 -16, %491
  %501 = sub nuw nsw i64 -16, %491
  %502 = getelementptr inbounds i8, i8* %480, i64 %501
  %503 = bitcast i8* %502 to <2 x i64>*
  %504 = load <2 x i64>, <2 x i64>* %503, align 1, !alias.scope !30
  %505 = getelementptr inbounds i8, i8* %481, i64 %500
  %506 = bitcast i8* %505 to <2 x i64>*
  store <2 x i64> %504, <2 x i64>* %506, align 1, !alias.scope !33, !noalias !30
  %507 = sub nuw nsw i64 -32, %491
  %508 = sub nuw nsw i64 -32, %491
  %509 = getelementptr inbounds i8, i8* %484, i64 %508
  %510 = bitcast i8* %509 to <2 x i64>*
  %511 = load <2 x i64>, <2 x i64>* %510, align 1, !alias.scope !30
  %512 = getelementptr inbounds i8, i8* %485, i64 %507
  %513 = bitcast i8* %512 to <2 x i64>*
  store <2 x i64> %511, <2 x i64>* %513, align 1, !alias.scope !33, !noalias !30
  %514 = sub nuw nsw i64 -48, %491
  %515 = sub nuw nsw i64 -48, %491
  %516 = getelementptr inbounds i8, i8* %488, i64 %515
  %517 = bitcast i8* %516 to <2 x i64>*
  %518 = load <2 x i64>, <2 x i64>* %517, align 1, !alias.scope !30
  %519 = getelementptr inbounds i8, i8* %489, i64 %514
  %520 = bitcast i8* %519 to <2 x i64>*
  store <2 x i64> %518, <2 x i64>* %520, align 1, !alias.scope !33, !noalias !30
  %521 = add i64 %491, 64
  %522 = add i64 %492, -4
  %523 = icmp eq i64 %522, 0
  br i1 %523, label %524, label %490, !llvm.loop !35

524:                                              ; preds = %490, %461
  %525 = phi i64 [ 0, %461 ], [ %521, %490 ]
  %526 = icmp eq i64 %470, 0
  br i1 %526, label %545, label %527

527:                                              ; preds = %524
  %528 = getelementptr i8, i8* %438, i64 -1
  %529 = getelementptr inbounds i8, i8* %528, i64 -8
  %530 = getelementptr inbounds i8, i8* %444, i64 -16
  %531 = getelementptr inbounds i8, i8* %529, i64 -7
  br label %532

532:                                              ; preds = %532, %527
  %533 = phi i64 [ %525, %527 ], [ %542, %532 ]
  %534 = phi i64 [ %470, %527 ], [ %543, %532 ]
  %535 = sub i64 0, %533
  %536 = sub i64 0, %533
  %537 = getelementptr inbounds i8, i8* %530, i64 %536
  %538 = bitcast i8* %537 to <2 x i64>*
  %539 = load <2 x i64>, <2 x i64>* %538, align 1, !alias.scope !30
  %540 = getelementptr inbounds i8, i8* %531, i64 %535
  %541 = bitcast i8* %540 to <2 x i64>*
  store <2 x i64> %539, <2 x i64>* %541, align 1, !alias.scope !33, !noalias !30
  %542 = add i64 %533, 16
  %543 = add i64 %534, -1
  %544 = icmp eq i64 %543, 0
  br i1 %544, label %545, label %532, !llvm.loop !36

545:                                              ; preds = %532, %524
  %546 = icmp eq i64 %450, %462
  br i1 %546, label %557, label %547

547:                                              ; preds = %545, %452, %447
  %548 = phi i8* [ %438, %452 ], [ %438, %447 ], [ %464, %545 ]
  %549 = phi i8* [ %444, %452 ], [ %444, %447 ], [ %466, %545 ]
  br label %550

550:                                              ; preds = %547, %550
  %551 = phi i8* [ %553, %550 ], [ %548, %547 ]
  %552 = phi i8* [ %554, %550 ], [ %549, %547 ]
  %553 = getelementptr inbounds i8, i8* %551, i64 -1
  %554 = getelementptr inbounds i8, i8* %552, i64 -1
  %555 = load i8, i8* %554, align 1
  store i8 %555, i8* %553, align 1
  %556 = icmp eq i8* %554, %443
  br i1 %556, label %557, label %550, !llvm.loop !37

557:                                              ; preds = %550, %545, %435
  %558 = phi i8* [ %438, %435 ], [ %464, %545 ], [ %553, %550 ]
  %559 = ptrtoint i8* %558 to i64
  store i64 %559, i64* %377, align 8
  store i64 %442, i64* %376, align 8
  store i64 %440, i64* %378, align 8
  br label %1575

560:                                              ; preds = %383
  %561 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 1, i64 %387
  %562 = load i32, i32* %561, align 4
  %563 = trunc i32 %562 to i16
  %564 = trunc i32 %562 to i8
  %565 = lshr i16 %563, 8
  %566 = trunc i16 %565 to i8
  %567 = load i8*, i8** %193, align 8
  %568 = icmp eq i8* %385, %567
  br i1 %568, label %574, label %569

569:                                              ; preds = %560
  store i8 %564, i8* %385, align 1
  %570 = getelementptr inbounds i8, i8* %385, i64 1
  %571 = ptrtoint i8* %570 to i64
  store i64 %571, i64* %376, align 8
  %572 = load i8*, i8** %193, align 8
  %573 = ptrtoint i8* %572 to i64
  br label %732

574:                                              ; preds = %560
  %575 = ptrtoint i8* %567 to i64
  %576 = load i64, i64* %377, align 8
  %577 = sub i64 %575, %576
  %578 = add i64 %577, 1
  %579 = icmp ugt i64 %578, 2147483647
  br i1 %579, label %580, label %582

580:                                              ; preds = %574
  %581 = bitcast %"class.std::__1::vector"* %191 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %581) #7
  unreachable

582:                                              ; preds = %574
  %583 = icmp ult i64 %577, 1073741823
  br i1 %583, label %584, label %589

584:                                              ; preds = %582
  %585 = shl i64 %577, 1
  %586 = icmp ult i64 %585, %578
  %587 = select i1 %586, i64 %578, i64 %585
  %588 = icmp eq i64 %587, 0
  br i1 %588, label %607, label %589

589:                                              ; preds = %584, %582
  %590 = phi i64 [ %587, %584 ], [ 2147483647, %582 ]
  %591 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %379, align 8
  %592 = add nuw nsw i64 %590, 7
  %593 = and i64 %592, -8
  %594 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %591, i64 0, i32 2
  %595 = load i64, i64* %594, align 8
  %596 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %591, i64 0, i32 3
  %597 = load i64, i64* %596, align 8
  %598 = sub i64 %597, %595
  %599 = icmp ugt i64 %593, %598
  br i1 %599, label %600, label %602, !prof !3

600:                                              ; preds = %589
  %601 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %591, i64 %593) #6
  br label %604

602:                                              ; preds = %589
  %603 = add i64 %595, %593
  store i64 %603, i64* %594, align 8
  br label %604

604:                                              ; preds = %602, %600
  %605 = phi i64 [ %601, %600 ], [ %595, %602 ]
  %606 = inttoptr i64 %605 to i8*
  br label %607

607:                                              ; preds = %604, %584
  %608 = phi i64 [ %590, %604 ], [ 0, %584 ]
  %609 = phi i8* [ %606, %604 ], [ null, %584 ]
  %610 = getelementptr inbounds i8, i8* %609, i64 %577
  %611 = getelementptr inbounds i8, i8* %609, i64 %608
  %612 = ptrtoint i8* %611 to i64
  store i8 %564, i8* %610, align 1
  %613 = getelementptr inbounds i8, i8* %610, i64 1
  %614 = ptrtoint i8* %613 to i64
  %615 = load i8*, i8** %380, align 8
  %616 = load i8*, i8** %192, align 8
  %617 = ptrtoint i8* %616 to i64
  %618 = icmp eq i8* %616, %615
  br i1 %618, label %729, label %619

619:                                              ; preds = %607
  %620 = ptrtoint i8* %615 to i64
  %621 = ptrtoint i8* %616 to i64
  %622 = sub i64 %621, %620
  %623 = icmp ult i64 %622, 16
  br i1 %623, label %719, label %624

624:                                              ; preds = %619
  %625 = sub i64 %575, %617
  %626 = sub i64 %625, %576
  %627 = getelementptr i8, i8* %615, i64 %626
  %628 = ptrtoint i8* %627 to i64
  %629 = getelementptr i8, i8* %609, i64 %628
  %630 = icmp ult i8* %629, %616
  %631 = icmp ult i8* %615, %610
  %632 = and i1 %630, %631
  br i1 %632, label %719, label %633

633:                                              ; preds = %624
  %634 = and i64 %622, -16
  %635 = sub i64 0, %634
  %636 = getelementptr i8, i8* %610, i64 %635
  %637 = sub i64 0, %634
  %638 = getelementptr i8, i8* %616, i64 %637
  %639 = add i64 %634, -16
  %640 = lshr exact i64 %639, 4
  %641 = add nuw nsw i64 %640, 1
  %642 = and i64 %641, 3
  %643 = icmp ult i64 %639, 48
  br i1 %643, label %696, label %644

644:                                              ; preds = %633
  %645 = sub nsw i64 %641, %642
  %646 = getelementptr i8, i8* %610, i64 -1
  %647 = getelementptr inbounds i8, i8* %646, i64 -8
  %648 = getelementptr inbounds i8, i8* %616, i64 -16
  %649 = getelementptr inbounds i8, i8* %647, i64 -7
  %650 = getelementptr i8, i8* %610, i64 -1
  %651 = getelementptr inbounds i8, i8* %650, i64 -8
  %652 = getelementptr inbounds i8, i8* %616, i64 -16
  %653 = getelementptr inbounds i8, i8* %651, i64 -7
  %654 = getelementptr i8, i8* %610, i64 -1
  %655 = getelementptr inbounds i8, i8* %654, i64 -8
  %656 = getelementptr inbounds i8, i8* %616, i64 -16
  %657 = getelementptr inbounds i8, i8* %655, i64 -7
  %658 = getelementptr i8, i8* %610, i64 -1
  %659 = getelementptr inbounds i8, i8* %658, i64 -8
  %660 = getelementptr inbounds i8, i8* %616, i64 -16
  %661 = getelementptr inbounds i8, i8* %659, i64 -7
  br label %662

662:                                              ; preds = %662, %644
  %663 = phi i64 [ 0, %644 ], [ %693, %662 ]
  %664 = phi i64 [ %645, %644 ], [ %694, %662 ]
  %665 = sub i64 0, %663
  %666 = sub i64 0, %663
  %667 = getelementptr inbounds i8, i8* %648, i64 %666
  %668 = bitcast i8* %667 to <2 x i64>*
  %669 = load <2 x i64>, <2 x i64>* %668, align 1, !alias.scope !38
  %670 = getelementptr inbounds i8, i8* %649, i64 %665
  %671 = bitcast i8* %670 to <2 x i64>*
  store <2 x i64> %669, <2 x i64>* %671, align 1, !alias.scope !41, !noalias !38
  %672 = sub nuw nsw i64 -16, %663
  %673 = sub nuw nsw i64 -16, %663
  %674 = getelementptr inbounds i8, i8* %652, i64 %673
  %675 = bitcast i8* %674 to <2 x i64>*
  %676 = load <2 x i64>, <2 x i64>* %675, align 1, !alias.scope !38
  %677 = getelementptr inbounds i8, i8* %653, i64 %672
  %678 = bitcast i8* %677 to <2 x i64>*
  store <2 x i64> %676, <2 x i64>* %678, align 1, !alias.scope !41, !noalias !38
  %679 = sub nuw nsw i64 -32, %663
  %680 = sub nuw nsw i64 -32, %663
  %681 = getelementptr inbounds i8, i8* %656, i64 %680
  %682 = bitcast i8* %681 to <2 x i64>*
  %683 = load <2 x i64>, <2 x i64>* %682, align 1, !alias.scope !38
  %684 = getelementptr inbounds i8, i8* %657, i64 %679
  %685 = bitcast i8* %684 to <2 x i64>*
  store <2 x i64> %683, <2 x i64>* %685, align 1, !alias.scope !41, !noalias !38
  %686 = sub nuw nsw i64 -48, %663
  %687 = sub nuw nsw i64 -48, %663
  %688 = getelementptr inbounds i8, i8* %660, i64 %687
  %689 = bitcast i8* %688 to <2 x i64>*
  %690 = load <2 x i64>, <2 x i64>* %689, align 1, !alias.scope !38
  %691 = getelementptr inbounds i8, i8* %661, i64 %686
  %692 = bitcast i8* %691 to <2 x i64>*
  store <2 x i64> %690, <2 x i64>* %692, align 1, !alias.scope !41, !noalias !38
  %693 = add i64 %663, 64
  %694 = add i64 %664, -4
  %695 = icmp eq i64 %694, 0
  br i1 %695, label %696, label %662, !llvm.loop !43

696:                                              ; preds = %662, %633
  %697 = phi i64 [ 0, %633 ], [ %693, %662 ]
  %698 = icmp eq i64 %642, 0
  br i1 %698, label %717, label %699

699:                                              ; preds = %696
  %700 = getelementptr i8, i8* %610, i64 -1
  %701 = getelementptr inbounds i8, i8* %700, i64 -8
  %702 = getelementptr inbounds i8, i8* %616, i64 -16
  %703 = getelementptr inbounds i8, i8* %701, i64 -7
  br label %704

704:                                              ; preds = %704, %699
  %705 = phi i64 [ %697, %699 ], [ %714, %704 ]
  %706 = phi i64 [ %642, %699 ], [ %715, %704 ]
  %707 = sub i64 0, %705
  %708 = sub i64 0, %705
  %709 = getelementptr inbounds i8, i8* %702, i64 %708
  %710 = bitcast i8* %709 to <2 x i64>*
  %711 = load <2 x i64>, <2 x i64>* %710, align 1, !alias.scope !38
  %712 = getelementptr inbounds i8, i8* %703, i64 %707
  %713 = bitcast i8* %712 to <2 x i64>*
  store <2 x i64> %711, <2 x i64>* %713, align 1, !alias.scope !41, !noalias !38
  %714 = add i64 %705, 16
  %715 = add i64 %706, -1
  %716 = icmp eq i64 %715, 0
  br i1 %716, label %717, label %704, !llvm.loop !44

717:                                              ; preds = %704, %696
  %718 = icmp eq i64 %622, %634
  br i1 %718, label %729, label %719

719:                                              ; preds = %717, %624, %619
  %720 = phi i8* [ %610, %624 ], [ %610, %619 ], [ %636, %717 ]
  %721 = phi i8* [ %616, %624 ], [ %616, %619 ], [ %638, %717 ]
  br label %722

722:                                              ; preds = %719, %722
  %723 = phi i8* [ %725, %722 ], [ %720, %719 ]
  %724 = phi i8* [ %726, %722 ], [ %721, %719 ]
  %725 = getelementptr inbounds i8, i8* %723, i64 -1
  %726 = getelementptr inbounds i8, i8* %724, i64 -1
  %727 = load i8, i8* %726, align 1
  store i8 %727, i8* %725, align 1
  %728 = icmp eq i8* %726, %615
  br i1 %728, label %729, label %722, !llvm.loop !45

729:                                              ; preds = %722, %717, %607
  %730 = phi i8* [ %610, %607 ], [ %636, %717 ], [ %725, %722 ]
  %731 = ptrtoint i8* %730 to i64
  store i64 %731, i64* %377, align 8
  store i64 %614, i64* %376, align 8
  store i64 %612, i64* %378, align 8
  br label %732

732:                                              ; preds = %569, %729
  %733 = phi i64 [ %573, %569 ], [ %612, %729 ]
  %734 = phi i8* [ %572, %569 ], [ %611, %729 ]
  %735 = phi i8* [ %570, %569 ], [ %613, %729 ]
  %736 = icmp eq i8* %735, %734
  br i1 %736, label %740, label %737

737:                                              ; preds = %732
  store i8 %566, i8* %735, align 1
  %738 = getelementptr inbounds i8, i8* %735, i64 1
  %739 = ptrtoint i8* %738 to i64
  store i64 %739, i64* %376, align 8
  br label %1575

740:                                              ; preds = %732
  %741 = load i64, i64* %377, align 8
  %742 = sub i64 %733, %741
  %743 = add i64 %742, 1
  %744 = icmp ugt i64 %743, 2147483647
  br i1 %744, label %745, label %747

745:                                              ; preds = %740
  %746 = bitcast %"class.std::__1::vector"* %191 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %746) #7
  unreachable

747:                                              ; preds = %740
  %748 = icmp ult i64 %742, 1073741823
  br i1 %748, label %749, label %754

749:                                              ; preds = %747
  %750 = shl i64 %742, 1
  %751 = icmp ult i64 %750, %743
  %752 = select i1 %751, i64 %743, i64 %750
  %753 = icmp eq i64 %752, 0
  br i1 %753, label %772, label %754

754:                                              ; preds = %749, %747
  %755 = phi i64 [ %752, %749 ], [ 2147483647, %747 ]
  %756 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %379, align 8
  %757 = add nuw nsw i64 %755, 7
  %758 = and i64 %757, -8
  %759 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %756, i64 0, i32 2
  %760 = load i64, i64* %759, align 8
  %761 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %756, i64 0, i32 3
  %762 = load i64, i64* %761, align 8
  %763 = sub i64 %762, %760
  %764 = icmp ugt i64 %758, %763
  br i1 %764, label %765, label %767, !prof !3

765:                                              ; preds = %754
  %766 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %756, i64 %758) #6
  br label %769

767:                                              ; preds = %754
  %768 = add i64 %760, %758
  store i64 %768, i64* %759, align 8
  br label %769

769:                                              ; preds = %767, %765
  %770 = phi i64 [ %766, %765 ], [ %760, %767 ]
  %771 = inttoptr i64 %770 to i8*
  br label %772

772:                                              ; preds = %769, %749
  %773 = phi i64 [ %755, %769 ], [ 0, %749 ]
  %774 = phi i8* [ %771, %769 ], [ null, %749 ]
  %775 = getelementptr inbounds i8, i8* %774, i64 %742
  %776 = getelementptr inbounds i8, i8* %774, i64 %773
  %777 = ptrtoint i8* %776 to i64
  store i8 %566, i8* %775, align 1
  %778 = getelementptr inbounds i8, i8* %775, i64 1
  %779 = ptrtoint i8* %778 to i64
  %780 = load i8*, i8** %380, align 8
  %781 = load i8*, i8** %192, align 8
  %782 = ptrtoint i8* %781 to i64
  %783 = icmp eq i8* %781, %780
  br i1 %783, label %894, label %784

784:                                              ; preds = %772
  %785 = ptrtoint i8* %780 to i64
  %786 = ptrtoint i8* %781 to i64
  %787 = sub i64 %786, %785
  %788 = icmp ult i64 %787, 16
  br i1 %788, label %884, label %789

789:                                              ; preds = %784
  %790 = sub i64 %733, %782
  %791 = sub i64 %790, %741
  %792 = getelementptr i8, i8* %780, i64 %791
  %793 = ptrtoint i8* %792 to i64
  %794 = getelementptr i8, i8* %774, i64 %793
  %795 = icmp ult i8* %794, %781
  %796 = icmp ult i8* %780, %775
  %797 = and i1 %795, %796
  br i1 %797, label %884, label %798

798:                                              ; preds = %789
  %799 = and i64 %787, -16
  %800 = sub i64 0, %799
  %801 = getelementptr i8, i8* %775, i64 %800
  %802 = sub i64 0, %799
  %803 = getelementptr i8, i8* %781, i64 %802
  %804 = add i64 %799, -16
  %805 = lshr exact i64 %804, 4
  %806 = add nuw nsw i64 %805, 1
  %807 = and i64 %806, 3
  %808 = icmp ult i64 %804, 48
  br i1 %808, label %861, label %809

809:                                              ; preds = %798
  %810 = sub nsw i64 %806, %807
  %811 = getelementptr i8, i8* %775, i64 -1
  %812 = getelementptr inbounds i8, i8* %811, i64 -8
  %813 = getelementptr inbounds i8, i8* %781, i64 -16
  %814 = getelementptr inbounds i8, i8* %812, i64 -7
  %815 = getelementptr i8, i8* %775, i64 -1
  %816 = getelementptr inbounds i8, i8* %815, i64 -8
  %817 = getelementptr inbounds i8, i8* %781, i64 -16
  %818 = getelementptr inbounds i8, i8* %816, i64 -7
  %819 = getelementptr i8, i8* %775, i64 -1
  %820 = getelementptr inbounds i8, i8* %819, i64 -8
  %821 = getelementptr inbounds i8, i8* %781, i64 -16
  %822 = getelementptr inbounds i8, i8* %820, i64 -7
  %823 = getelementptr i8, i8* %775, i64 -1
  %824 = getelementptr inbounds i8, i8* %823, i64 -8
  %825 = getelementptr inbounds i8, i8* %781, i64 -16
  %826 = getelementptr inbounds i8, i8* %824, i64 -7
  br label %827

827:                                              ; preds = %827, %809
  %828 = phi i64 [ 0, %809 ], [ %858, %827 ]
  %829 = phi i64 [ %810, %809 ], [ %859, %827 ]
  %830 = sub i64 0, %828
  %831 = sub i64 0, %828
  %832 = getelementptr inbounds i8, i8* %813, i64 %831
  %833 = bitcast i8* %832 to <2 x i64>*
  %834 = load <2 x i64>, <2 x i64>* %833, align 1, !alias.scope !46
  %835 = getelementptr inbounds i8, i8* %814, i64 %830
  %836 = bitcast i8* %835 to <2 x i64>*
  store <2 x i64> %834, <2 x i64>* %836, align 1, !alias.scope !49, !noalias !46
  %837 = sub nuw nsw i64 -16, %828
  %838 = sub nuw nsw i64 -16, %828
  %839 = getelementptr inbounds i8, i8* %817, i64 %838
  %840 = bitcast i8* %839 to <2 x i64>*
  %841 = load <2 x i64>, <2 x i64>* %840, align 1, !alias.scope !46
  %842 = getelementptr inbounds i8, i8* %818, i64 %837
  %843 = bitcast i8* %842 to <2 x i64>*
  store <2 x i64> %841, <2 x i64>* %843, align 1, !alias.scope !49, !noalias !46
  %844 = sub nuw nsw i64 -32, %828
  %845 = sub nuw nsw i64 -32, %828
  %846 = getelementptr inbounds i8, i8* %821, i64 %845
  %847 = bitcast i8* %846 to <2 x i64>*
  %848 = load <2 x i64>, <2 x i64>* %847, align 1, !alias.scope !46
  %849 = getelementptr inbounds i8, i8* %822, i64 %844
  %850 = bitcast i8* %849 to <2 x i64>*
  store <2 x i64> %848, <2 x i64>* %850, align 1, !alias.scope !49, !noalias !46
  %851 = sub nuw nsw i64 -48, %828
  %852 = sub nuw nsw i64 -48, %828
  %853 = getelementptr inbounds i8, i8* %825, i64 %852
  %854 = bitcast i8* %853 to <2 x i64>*
  %855 = load <2 x i64>, <2 x i64>* %854, align 1, !alias.scope !46
  %856 = getelementptr inbounds i8, i8* %826, i64 %851
  %857 = bitcast i8* %856 to <2 x i64>*
  store <2 x i64> %855, <2 x i64>* %857, align 1, !alias.scope !49, !noalias !46
  %858 = add i64 %828, 64
  %859 = add i64 %829, -4
  %860 = icmp eq i64 %859, 0
  br i1 %860, label %861, label %827, !llvm.loop !51

861:                                              ; preds = %827, %798
  %862 = phi i64 [ 0, %798 ], [ %858, %827 ]
  %863 = icmp eq i64 %807, 0
  br i1 %863, label %882, label %864

864:                                              ; preds = %861
  %865 = getelementptr i8, i8* %775, i64 -1
  %866 = getelementptr inbounds i8, i8* %865, i64 -8
  %867 = getelementptr inbounds i8, i8* %781, i64 -16
  %868 = getelementptr inbounds i8, i8* %866, i64 -7
  br label %869

869:                                              ; preds = %869, %864
  %870 = phi i64 [ %862, %864 ], [ %879, %869 ]
  %871 = phi i64 [ %807, %864 ], [ %880, %869 ]
  %872 = sub i64 0, %870
  %873 = sub i64 0, %870
  %874 = getelementptr inbounds i8, i8* %867, i64 %873
  %875 = bitcast i8* %874 to <2 x i64>*
  %876 = load <2 x i64>, <2 x i64>* %875, align 1, !alias.scope !46
  %877 = getelementptr inbounds i8, i8* %868, i64 %872
  %878 = bitcast i8* %877 to <2 x i64>*
  store <2 x i64> %876, <2 x i64>* %878, align 1, !alias.scope !49, !noalias !46
  %879 = add i64 %870, 16
  %880 = add i64 %871, -1
  %881 = icmp eq i64 %880, 0
  br i1 %881, label %882, label %869, !llvm.loop !52

882:                                              ; preds = %869, %861
  %883 = icmp eq i64 %787, %799
  br i1 %883, label %894, label %884

884:                                              ; preds = %882, %789, %784
  %885 = phi i8* [ %775, %789 ], [ %775, %784 ], [ %801, %882 ]
  %886 = phi i8* [ %781, %789 ], [ %781, %784 ], [ %803, %882 ]
  br label %887

887:                                              ; preds = %884, %887
  %888 = phi i8* [ %890, %887 ], [ %885, %884 ]
  %889 = phi i8* [ %891, %887 ], [ %886, %884 ]
  %890 = getelementptr inbounds i8, i8* %888, i64 -1
  %891 = getelementptr inbounds i8, i8* %889, i64 -1
  %892 = load i8, i8* %891, align 1
  store i8 %892, i8* %890, align 1
  %893 = icmp eq i8* %891, %780
  br i1 %893, label %894, label %887, !llvm.loop !53

894:                                              ; preds = %887, %882, %772
  %895 = phi i8* [ %775, %772 ], [ %801, %882 ], [ %890, %887 ]
  %896 = ptrtoint i8* %895 to i64
  store i64 %896, i64* %377, align 8
  store i64 %779, i64* %376, align 8
  store i64 %777, i64* %378, align 8
  br label %1575

897:                                              ; preds = %383
  %898 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 1, i64 %387
  %899 = bitcast i32* %898 to i8*
  %900 = load i8*, i8** %193, align 8
  %901 = icmp eq i8* %386, %900
  br i1 %901, label %908, label %902

902:                                              ; preds = %897
  %903 = load i8, i8* %899, align 1
  store i8 %903, i8* %386, align 1
  %904 = getelementptr inbounds i8, i8* %386, i64 1
  %905 = ptrtoint i8* %904 to i64
  store i64 %905, i64* %376, align 8
  %906 = load i8*, i8** %193, align 8
  %907 = ptrtoint i8* %906 to i64
  br label %1067

908:                                              ; preds = %897
  %909 = ptrtoint i8* %900 to i64
  %910 = load i64, i64* %377, align 8
  %911 = sub i64 %909, %910
  %912 = add i64 %911, 1
  %913 = icmp ugt i64 %912, 2147483647
  br i1 %913, label %914, label %916

914:                                              ; preds = %908
  %915 = bitcast %"class.std::__1::vector"* %191 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %915) #7
  unreachable

916:                                              ; preds = %908
  %917 = icmp ult i64 %911, 1073741823
  br i1 %917, label %918, label %923

918:                                              ; preds = %916
  %919 = shl i64 %911, 1
  %920 = icmp ult i64 %919, %912
  %921 = select i1 %920, i64 %912, i64 %919
  %922 = icmp eq i64 %921, 0
  br i1 %922, label %941, label %923

923:                                              ; preds = %918, %916
  %924 = phi i64 [ %921, %918 ], [ 2147483647, %916 ]
  %925 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %379, align 8
  %926 = add nuw nsw i64 %924, 7
  %927 = and i64 %926, -8
  %928 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %925, i64 0, i32 2
  %929 = load i64, i64* %928, align 8
  %930 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %925, i64 0, i32 3
  %931 = load i64, i64* %930, align 8
  %932 = sub i64 %931, %929
  %933 = icmp ugt i64 %927, %932
  br i1 %933, label %934, label %936, !prof !3

934:                                              ; preds = %923
  %935 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %925, i64 %927) #6
  br label %938

936:                                              ; preds = %923
  %937 = add i64 %929, %927
  store i64 %937, i64* %928, align 8
  br label %938

938:                                              ; preds = %936, %934
  %939 = phi i64 [ %935, %934 ], [ %929, %936 ]
  %940 = inttoptr i64 %939 to i8*
  br label %941

941:                                              ; preds = %938, %918
  %942 = phi i64 [ %924, %938 ], [ 0, %918 ]
  %943 = phi i8* [ %940, %938 ], [ null, %918 ]
  %944 = getelementptr inbounds i8, i8* %943, i64 %911
  %945 = getelementptr inbounds i8, i8* %943, i64 %942
  %946 = ptrtoint i8* %945 to i64
  %947 = load i8, i8* %899, align 1
  store i8 %947, i8* %944, align 1
  %948 = getelementptr inbounds i8, i8* %944, i64 1
  %949 = ptrtoint i8* %948 to i64
  %950 = load i8*, i8** %380, align 8
  %951 = load i8*, i8** %192, align 8
  %952 = ptrtoint i8* %951 to i64
  %953 = icmp eq i8* %951, %950
  br i1 %953, label %1064, label %954

954:                                              ; preds = %941
  %955 = ptrtoint i8* %950 to i64
  %956 = ptrtoint i8* %951 to i64
  %957 = sub i64 %956, %955
  %958 = icmp ult i64 %957, 16
  br i1 %958, label %1054, label %959

959:                                              ; preds = %954
  %960 = sub i64 %909, %952
  %961 = sub i64 %960, %910
  %962 = getelementptr i8, i8* %950, i64 %961
  %963 = ptrtoint i8* %962 to i64
  %964 = getelementptr i8, i8* %943, i64 %963
  %965 = icmp ult i8* %964, %951
  %966 = icmp ult i8* %950, %944
  %967 = and i1 %965, %966
  br i1 %967, label %1054, label %968

968:                                              ; preds = %959
  %969 = and i64 %957, -16
  %970 = sub i64 0, %969
  %971 = getelementptr i8, i8* %944, i64 %970
  %972 = sub i64 0, %969
  %973 = getelementptr i8, i8* %951, i64 %972
  %974 = add i64 %969, -16
  %975 = lshr exact i64 %974, 4
  %976 = add nuw nsw i64 %975, 1
  %977 = and i64 %976, 3
  %978 = icmp ult i64 %974, 48
  br i1 %978, label %1031, label %979

979:                                              ; preds = %968
  %980 = sub nsw i64 %976, %977
  %981 = getelementptr i8, i8* %944, i64 -1
  %982 = getelementptr inbounds i8, i8* %981, i64 -8
  %983 = getelementptr inbounds i8, i8* %951, i64 -16
  %984 = getelementptr inbounds i8, i8* %982, i64 -7
  %985 = getelementptr i8, i8* %944, i64 -1
  %986 = getelementptr inbounds i8, i8* %985, i64 -8
  %987 = getelementptr inbounds i8, i8* %951, i64 -16
  %988 = getelementptr inbounds i8, i8* %986, i64 -7
  %989 = getelementptr i8, i8* %944, i64 -1
  %990 = getelementptr inbounds i8, i8* %989, i64 -8
  %991 = getelementptr inbounds i8, i8* %951, i64 -16
  %992 = getelementptr inbounds i8, i8* %990, i64 -7
  %993 = getelementptr i8, i8* %944, i64 -1
  %994 = getelementptr inbounds i8, i8* %993, i64 -8
  %995 = getelementptr inbounds i8, i8* %951, i64 -16
  %996 = getelementptr inbounds i8, i8* %994, i64 -7
  br label %997

997:                                              ; preds = %997, %979
  %998 = phi i64 [ 0, %979 ], [ %1028, %997 ]
  %999 = phi i64 [ %980, %979 ], [ %1029, %997 ]
  %1000 = sub i64 0, %998
  %1001 = sub i64 0, %998
  %1002 = getelementptr inbounds i8, i8* %983, i64 %1001
  %1003 = bitcast i8* %1002 to <2 x i64>*
  %1004 = load <2 x i64>, <2 x i64>* %1003, align 1, !alias.scope !54
  %1005 = getelementptr inbounds i8, i8* %984, i64 %1000
  %1006 = bitcast i8* %1005 to <2 x i64>*
  store <2 x i64> %1004, <2 x i64>* %1006, align 1, !alias.scope !57, !noalias !54
  %1007 = sub nuw nsw i64 -16, %998
  %1008 = sub nuw nsw i64 -16, %998
  %1009 = getelementptr inbounds i8, i8* %987, i64 %1008
  %1010 = bitcast i8* %1009 to <2 x i64>*
  %1011 = load <2 x i64>, <2 x i64>* %1010, align 1, !alias.scope !54
  %1012 = getelementptr inbounds i8, i8* %988, i64 %1007
  %1013 = bitcast i8* %1012 to <2 x i64>*
  store <2 x i64> %1011, <2 x i64>* %1013, align 1, !alias.scope !57, !noalias !54
  %1014 = sub nuw nsw i64 -32, %998
  %1015 = sub nuw nsw i64 -32, %998
  %1016 = getelementptr inbounds i8, i8* %991, i64 %1015
  %1017 = bitcast i8* %1016 to <2 x i64>*
  %1018 = load <2 x i64>, <2 x i64>* %1017, align 1, !alias.scope !54
  %1019 = getelementptr inbounds i8, i8* %992, i64 %1014
  %1020 = bitcast i8* %1019 to <2 x i64>*
  store <2 x i64> %1018, <2 x i64>* %1020, align 1, !alias.scope !57, !noalias !54
  %1021 = sub nuw nsw i64 -48, %998
  %1022 = sub nuw nsw i64 -48, %998
  %1023 = getelementptr inbounds i8, i8* %995, i64 %1022
  %1024 = bitcast i8* %1023 to <2 x i64>*
  %1025 = load <2 x i64>, <2 x i64>* %1024, align 1, !alias.scope !54
  %1026 = getelementptr inbounds i8, i8* %996, i64 %1021
  %1027 = bitcast i8* %1026 to <2 x i64>*
  store <2 x i64> %1025, <2 x i64>* %1027, align 1, !alias.scope !57, !noalias !54
  %1028 = add i64 %998, 64
  %1029 = add i64 %999, -4
  %1030 = icmp eq i64 %1029, 0
  br i1 %1030, label %1031, label %997, !llvm.loop !59

1031:                                             ; preds = %997, %968
  %1032 = phi i64 [ 0, %968 ], [ %1028, %997 ]
  %1033 = icmp eq i64 %977, 0
  br i1 %1033, label %1052, label %1034

1034:                                             ; preds = %1031
  %1035 = getelementptr i8, i8* %944, i64 -1
  %1036 = getelementptr inbounds i8, i8* %1035, i64 -8
  %1037 = getelementptr inbounds i8, i8* %951, i64 -16
  %1038 = getelementptr inbounds i8, i8* %1036, i64 -7
  br label %1039

1039:                                             ; preds = %1039, %1034
  %1040 = phi i64 [ %1032, %1034 ], [ %1049, %1039 ]
  %1041 = phi i64 [ %977, %1034 ], [ %1050, %1039 ]
  %1042 = sub i64 0, %1040
  %1043 = sub i64 0, %1040
  %1044 = getelementptr inbounds i8, i8* %1037, i64 %1043
  %1045 = bitcast i8* %1044 to <2 x i64>*
  %1046 = load <2 x i64>, <2 x i64>* %1045, align 1, !alias.scope !54
  %1047 = getelementptr inbounds i8, i8* %1038, i64 %1042
  %1048 = bitcast i8* %1047 to <2 x i64>*
  store <2 x i64> %1046, <2 x i64>* %1048, align 1, !alias.scope !57, !noalias !54
  %1049 = add i64 %1040, 16
  %1050 = add i64 %1041, -1
  %1051 = icmp eq i64 %1050, 0
  br i1 %1051, label %1052, label %1039, !llvm.loop !60

1052:                                             ; preds = %1039, %1031
  %1053 = icmp eq i64 %957, %969
  br i1 %1053, label %1064, label %1054

1054:                                             ; preds = %1052, %959, %954
  %1055 = phi i8* [ %944, %959 ], [ %944, %954 ], [ %971, %1052 ]
  %1056 = phi i8* [ %951, %959 ], [ %951, %954 ], [ %973, %1052 ]
  br label %1057

1057:                                             ; preds = %1054, %1057
  %1058 = phi i8* [ %1060, %1057 ], [ %1055, %1054 ]
  %1059 = phi i8* [ %1061, %1057 ], [ %1056, %1054 ]
  %1060 = getelementptr inbounds i8, i8* %1058, i64 -1
  %1061 = getelementptr inbounds i8, i8* %1059, i64 -1
  %1062 = load i8, i8* %1061, align 1
  store i8 %1062, i8* %1060, align 1
  %1063 = icmp eq i8* %1061, %950
  br i1 %1063, label %1064, label %1057, !llvm.loop !61

1064:                                             ; preds = %1057, %1052, %941
  %1065 = phi i8* [ %944, %941 ], [ %971, %1052 ], [ %1060, %1057 ]
  %1066 = ptrtoint i8* %1065 to i64
  store i64 %1066, i64* %377, align 8
  store i64 %949, i64* %376, align 8
  store i64 %946, i64* %378, align 8
  br label %1067

1067:                                             ; preds = %902, %1064
  %1068 = phi i64 [ %907, %902 ], [ %946, %1064 ]
  %1069 = phi i8* [ %906, %902 ], [ %945, %1064 ]
  %1070 = phi i8* [ %904, %902 ], [ %948, %1064 ]
  %1071 = getelementptr inbounds i8, i8* %899, i64 1
  %1072 = icmp eq i8* %1070, %1069
  br i1 %1072, label %1079, label %1073

1073:                                             ; preds = %1067
  %1074 = load i8, i8* %1071, align 1
  store i8 %1074, i8* %1070, align 1
  %1075 = getelementptr inbounds i8, i8* %1070, i64 1
  %1076 = ptrtoint i8* %1075 to i64
  store i64 %1076, i64* %376, align 8
  %1077 = load i8*, i8** %193, align 8
  %1078 = ptrtoint i8* %1077 to i64
  br label %1237

1079:                                             ; preds = %1067
  %1080 = load i64, i64* %377, align 8
  %1081 = sub i64 %1068, %1080
  %1082 = add i64 %1081, 1
  %1083 = icmp ugt i64 %1082, 2147483647
  br i1 %1083, label %1084, label %1086

1084:                                             ; preds = %1079
  %1085 = bitcast %"class.std::__1::vector"* %191 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1085) #7
  unreachable

1086:                                             ; preds = %1079
  %1087 = icmp ult i64 %1081, 1073741823
  br i1 %1087, label %1088, label %1093

1088:                                             ; preds = %1086
  %1089 = shl i64 %1081, 1
  %1090 = icmp ult i64 %1089, %1082
  %1091 = select i1 %1090, i64 %1082, i64 %1089
  %1092 = icmp eq i64 %1091, 0
  br i1 %1092, label %1111, label %1093

1093:                                             ; preds = %1088, %1086
  %1094 = phi i64 [ %1091, %1088 ], [ 2147483647, %1086 ]
  %1095 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %379, align 8
  %1096 = add nuw nsw i64 %1094, 7
  %1097 = and i64 %1096, -8
  %1098 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1095, i64 0, i32 2
  %1099 = load i64, i64* %1098, align 8
  %1100 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1095, i64 0, i32 3
  %1101 = load i64, i64* %1100, align 8
  %1102 = sub i64 %1101, %1099
  %1103 = icmp ugt i64 %1097, %1102
  br i1 %1103, label %1104, label %1106, !prof !3

1104:                                             ; preds = %1093
  %1105 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1095, i64 %1097) #6
  br label %1108

1106:                                             ; preds = %1093
  %1107 = add i64 %1099, %1097
  store i64 %1107, i64* %1098, align 8
  br label %1108

1108:                                             ; preds = %1106, %1104
  %1109 = phi i64 [ %1105, %1104 ], [ %1099, %1106 ]
  %1110 = inttoptr i64 %1109 to i8*
  br label %1111

1111:                                             ; preds = %1108, %1088
  %1112 = phi i64 [ %1094, %1108 ], [ 0, %1088 ]
  %1113 = phi i8* [ %1110, %1108 ], [ null, %1088 ]
  %1114 = getelementptr inbounds i8, i8* %1113, i64 %1081
  %1115 = getelementptr inbounds i8, i8* %1113, i64 %1112
  %1116 = ptrtoint i8* %1115 to i64
  %1117 = load i8, i8* %1071, align 1
  store i8 %1117, i8* %1114, align 1
  %1118 = getelementptr inbounds i8, i8* %1114, i64 1
  %1119 = ptrtoint i8* %1118 to i64
  %1120 = load i8*, i8** %380, align 8
  %1121 = load i8*, i8** %192, align 8
  %1122 = ptrtoint i8* %1121 to i64
  %1123 = icmp eq i8* %1121, %1120
  br i1 %1123, label %1234, label %1124

1124:                                             ; preds = %1111
  %1125 = ptrtoint i8* %1120 to i64
  %1126 = ptrtoint i8* %1121 to i64
  %1127 = sub i64 %1126, %1125
  %1128 = icmp ult i64 %1127, 16
  br i1 %1128, label %1224, label %1129

1129:                                             ; preds = %1124
  %1130 = sub i64 %1068, %1122
  %1131 = sub i64 %1130, %1080
  %1132 = getelementptr i8, i8* %1120, i64 %1131
  %1133 = ptrtoint i8* %1132 to i64
  %1134 = getelementptr i8, i8* %1113, i64 %1133
  %1135 = icmp ult i8* %1134, %1121
  %1136 = icmp ult i8* %1120, %1114
  %1137 = and i1 %1135, %1136
  br i1 %1137, label %1224, label %1138

1138:                                             ; preds = %1129
  %1139 = and i64 %1127, -16
  %1140 = sub i64 0, %1139
  %1141 = getelementptr i8, i8* %1114, i64 %1140
  %1142 = sub i64 0, %1139
  %1143 = getelementptr i8, i8* %1121, i64 %1142
  %1144 = add i64 %1139, -16
  %1145 = lshr exact i64 %1144, 4
  %1146 = add nuw nsw i64 %1145, 1
  %1147 = and i64 %1146, 3
  %1148 = icmp ult i64 %1144, 48
  br i1 %1148, label %1201, label %1149

1149:                                             ; preds = %1138
  %1150 = sub nsw i64 %1146, %1147
  %1151 = getelementptr i8, i8* %1114, i64 -1
  %1152 = getelementptr inbounds i8, i8* %1151, i64 -8
  %1153 = getelementptr inbounds i8, i8* %1121, i64 -16
  %1154 = getelementptr inbounds i8, i8* %1152, i64 -7
  %1155 = getelementptr i8, i8* %1114, i64 -1
  %1156 = getelementptr inbounds i8, i8* %1155, i64 -8
  %1157 = getelementptr inbounds i8, i8* %1121, i64 -16
  %1158 = getelementptr inbounds i8, i8* %1156, i64 -7
  %1159 = getelementptr i8, i8* %1114, i64 -1
  %1160 = getelementptr inbounds i8, i8* %1159, i64 -8
  %1161 = getelementptr inbounds i8, i8* %1121, i64 -16
  %1162 = getelementptr inbounds i8, i8* %1160, i64 -7
  %1163 = getelementptr i8, i8* %1114, i64 -1
  %1164 = getelementptr inbounds i8, i8* %1163, i64 -8
  %1165 = getelementptr inbounds i8, i8* %1121, i64 -16
  %1166 = getelementptr inbounds i8, i8* %1164, i64 -7
  br label %1167

1167:                                             ; preds = %1167, %1149
  %1168 = phi i64 [ 0, %1149 ], [ %1198, %1167 ]
  %1169 = phi i64 [ %1150, %1149 ], [ %1199, %1167 ]
  %1170 = sub i64 0, %1168
  %1171 = sub i64 0, %1168
  %1172 = getelementptr inbounds i8, i8* %1153, i64 %1171
  %1173 = bitcast i8* %1172 to <2 x i64>*
  %1174 = load <2 x i64>, <2 x i64>* %1173, align 1, !alias.scope !62
  %1175 = getelementptr inbounds i8, i8* %1154, i64 %1170
  %1176 = bitcast i8* %1175 to <2 x i64>*
  store <2 x i64> %1174, <2 x i64>* %1176, align 1, !alias.scope !65, !noalias !62
  %1177 = sub nuw nsw i64 -16, %1168
  %1178 = sub nuw nsw i64 -16, %1168
  %1179 = getelementptr inbounds i8, i8* %1157, i64 %1178
  %1180 = bitcast i8* %1179 to <2 x i64>*
  %1181 = load <2 x i64>, <2 x i64>* %1180, align 1, !alias.scope !62
  %1182 = getelementptr inbounds i8, i8* %1158, i64 %1177
  %1183 = bitcast i8* %1182 to <2 x i64>*
  store <2 x i64> %1181, <2 x i64>* %1183, align 1, !alias.scope !65, !noalias !62
  %1184 = sub nuw nsw i64 -32, %1168
  %1185 = sub nuw nsw i64 -32, %1168
  %1186 = getelementptr inbounds i8, i8* %1161, i64 %1185
  %1187 = bitcast i8* %1186 to <2 x i64>*
  %1188 = load <2 x i64>, <2 x i64>* %1187, align 1, !alias.scope !62
  %1189 = getelementptr inbounds i8, i8* %1162, i64 %1184
  %1190 = bitcast i8* %1189 to <2 x i64>*
  store <2 x i64> %1188, <2 x i64>* %1190, align 1, !alias.scope !65, !noalias !62
  %1191 = sub nuw nsw i64 -48, %1168
  %1192 = sub nuw nsw i64 -48, %1168
  %1193 = getelementptr inbounds i8, i8* %1165, i64 %1192
  %1194 = bitcast i8* %1193 to <2 x i64>*
  %1195 = load <2 x i64>, <2 x i64>* %1194, align 1, !alias.scope !62
  %1196 = getelementptr inbounds i8, i8* %1166, i64 %1191
  %1197 = bitcast i8* %1196 to <2 x i64>*
  store <2 x i64> %1195, <2 x i64>* %1197, align 1, !alias.scope !65, !noalias !62
  %1198 = add i64 %1168, 64
  %1199 = add i64 %1169, -4
  %1200 = icmp eq i64 %1199, 0
  br i1 %1200, label %1201, label %1167, !llvm.loop !67

1201:                                             ; preds = %1167, %1138
  %1202 = phi i64 [ 0, %1138 ], [ %1198, %1167 ]
  %1203 = icmp eq i64 %1147, 0
  br i1 %1203, label %1222, label %1204

1204:                                             ; preds = %1201
  %1205 = getelementptr i8, i8* %1114, i64 -1
  %1206 = getelementptr inbounds i8, i8* %1205, i64 -8
  %1207 = getelementptr inbounds i8, i8* %1121, i64 -16
  %1208 = getelementptr inbounds i8, i8* %1206, i64 -7
  br label %1209

1209:                                             ; preds = %1209, %1204
  %1210 = phi i64 [ %1202, %1204 ], [ %1219, %1209 ]
  %1211 = phi i64 [ %1147, %1204 ], [ %1220, %1209 ]
  %1212 = sub i64 0, %1210
  %1213 = sub i64 0, %1210
  %1214 = getelementptr inbounds i8, i8* %1207, i64 %1213
  %1215 = bitcast i8* %1214 to <2 x i64>*
  %1216 = load <2 x i64>, <2 x i64>* %1215, align 1, !alias.scope !62
  %1217 = getelementptr inbounds i8, i8* %1208, i64 %1212
  %1218 = bitcast i8* %1217 to <2 x i64>*
  store <2 x i64> %1216, <2 x i64>* %1218, align 1, !alias.scope !65, !noalias !62
  %1219 = add i64 %1210, 16
  %1220 = add i64 %1211, -1
  %1221 = icmp eq i64 %1220, 0
  br i1 %1221, label %1222, label %1209, !llvm.loop !68

1222:                                             ; preds = %1209, %1201
  %1223 = icmp eq i64 %1127, %1139
  br i1 %1223, label %1234, label %1224

1224:                                             ; preds = %1222, %1129, %1124
  %1225 = phi i8* [ %1114, %1129 ], [ %1114, %1124 ], [ %1141, %1222 ]
  %1226 = phi i8* [ %1121, %1129 ], [ %1121, %1124 ], [ %1143, %1222 ]
  br label %1227

1227:                                             ; preds = %1224, %1227
  %1228 = phi i8* [ %1230, %1227 ], [ %1225, %1224 ]
  %1229 = phi i8* [ %1231, %1227 ], [ %1226, %1224 ]
  %1230 = getelementptr inbounds i8, i8* %1228, i64 -1
  %1231 = getelementptr inbounds i8, i8* %1229, i64 -1
  %1232 = load i8, i8* %1231, align 1
  store i8 %1232, i8* %1230, align 1
  %1233 = icmp eq i8* %1231, %1120
  br i1 %1233, label %1234, label %1227, !llvm.loop !69

1234:                                             ; preds = %1227, %1222, %1111
  %1235 = phi i8* [ %1114, %1111 ], [ %1141, %1222 ], [ %1230, %1227 ]
  %1236 = ptrtoint i8* %1235 to i64
  store i64 %1236, i64* %377, align 8
  store i64 %1119, i64* %376, align 8
  store i64 %1116, i64* %378, align 8
  br label %1237

1237:                                             ; preds = %1073, %1234
  %1238 = phi i64 [ %1078, %1073 ], [ %1116, %1234 ]
  %1239 = phi i8* [ %1077, %1073 ], [ %1115, %1234 ]
  %1240 = phi i8* [ %1075, %1073 ], [ %1118, %1234 ]
  %1241 = getelementptr inbounds i8, i8* %899, i64 2
  %1242 = icmp eq i8* %1240, %1239
  br i1 %1242, label %1249, label %1243

1243:                                             ; preds = %1237
  %1244 = load i8, i8* %1241, align 1
  store i8 %1244, i8* %1240, align 1
  %1245 = getelementptr inbounds i8, i8* %1240, i64 1
  %1246 = ptrtoint i8* %1245 to i64
  store i64 %1246, i64* %376, align 8
  %1247 = load i8*, i8** %193, align 8
  %1248 = ptrtoint i8* %1247 to i64
  br label %1407

1249:                                             ; preds = %1237
  %1250 = load i64, i64* %377, align 8
  %1251 = sub i64 %1238, %1250
  %1252 = add i64 %1251, 1
  %1253 = icmp ugt i64 %1252, 2147483647
  br i1 %1253, label %1254, label %1256

1254:                                             ; preds = %1249
  %1255 = bitcast %"class.std::__1::vector"* %191 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1255) #7
  unreachable

1256:                                             ; preds = %1249
  %1257 = icmp ult i64 %1251, 1073741823
  br i1 %1257, label %1258, label %1263

1258:                                             ; preds = %1256
  %1259 = shl i64 %1251, 1
  %1260 = icmp ult i64 %1259, %1252
  %1261 = select i1 %1260, i64 %1252, i64 %1259
  %1262 = icmp eq i64 %1261, 0
  br i1 %1262, label %1281, label %1263

1263:                                             ; preds = %1258, %1256
  %1264 = phi i64 [ %1261, %1258 ], [ 2147483647, %1256 ]
  %1265 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %379, align 8
  %1266 = add nuw nsw i64 %1264, 7
  %1267 = and i64 %1266, -8
  %1268 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1265, i64 0, i32 2
  %1269 = load i64, i64* %1268, align 8
  %1270 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1265, i64 0, i32 3
  %1271 = load i64, i64* %1270, align 8
  %1272 = sub i64 %1271, %1269
  %1273 = icmp ugt i64 %1267, %1272
  br i1 %1273, label %1274, label %1276, !prof !3

1274:                                             ; preds = %1263
  %1275 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1265, i64 %1267) #6
  br label %1278

1276:                                             ; preds = %1263
  %1277 = add i64 %1269, %1267
  store i64 %1277, i64* %1268, align 8
  br label %1278

1278:                                             ; preds = %1276, %1274
  %1279 = phi i64 [ %1275, %1274 ], [ %1269, %1276 ]
  %1280 = inttoptr i64 %1279 to i8*
  br label %1281

1281:                                             ; preds = %1278, %1258
  %1282 = phi i64 [ %1264, %1278 ], [ 0, %1258 ]
  %1283 = phi i8* [ %1280, %1278 ], [ null, %1258 ]
  %1284 = getelementptr inbounds i8, i8* %1283, i64 %1251
  %1285 = getelementptr inbounds i8, i8* %1283, i64 %1282
  %1286 = ptrtoint i8* %1285 to i64
  %1287 = load i8, i8* %1241, align 1
  store i8 %1287, i8* %1284, align 1
  %1288 = getelementptr inbounds i8, i8* %1284, i64 1
  %1289 = ptrtoint i8* %1288 to i64
  %1290 = load i8*, i8** %380, align 8
  %1291 = load i8*, i8** %192, align 8
  %1292 = ptrtoint i8* %1291 to i64
  %1293 = icmp eq i8* %1291, %1290
  br i1 %1293, label %1404, label %1294

1294:                                             ; preds = %1281
  %1295 = ptrtoint i8* %1290 to i64
  %1296 = ptrtoint i8* %1291 to i64
  %1297 = sub i64 %1296, %1295
  %1298 = icmp ult i64 %1297, 16
  br i1 %1298, label %1394, label %1299

1299:                                             ; preds = %1294
  %1300 = sub i64 %1238, %1292
  %1301 = sub i64 %1300, %1250
  %1302 = getelementptr i8, i8* %1290, i64 %1301
  %1303 = ptrtoint i8* %1302 to i64
  %1304 = getelementptr i8, i8* %1283, i64 %1303
  %1305 = icmp ult i8* %1304, %1291
  %1306 = icmp ult i8* %1290, %1284
  %1307 = and i1 %1305, %1306
  br i1 %1307, label %1394, label %1308

1308:                                             ; preds = %1299
  %1309 = and i64 %1297, -16
  %1310 = sub i64 0, %1309
  %1311 = getelementptr i8, i8* %1284, i64 %1310
  %1312 = sub i64 0, %1309
  %1313 = getelementptr i8, i8* %1291, i64 %1312
  %1314 = add i64 %1309, -16
  %1315 = lshr exact i64 %1314, 4
  %1316 = add nuw nsw i64 %1315, 1
  %1317 = and i64 %1316, 3
  %1318 = icmp ult i64 %1314, 48
  br i1 %1318, label %1371, label %1319

1319:                                             ; preds = %1308
  %1320 = sub nsw i64 %1316, %1317
  %1321 = getelementptr i8, i8* %1284, i64 -1
  %1322 = getelementptr inbounds i8, i8* %1321, i64 -8
  %1323 = getelementptr inbounds i8, i8* %1291, i64 -16
  %1324 = getelementptr inbounds i8, i8* %1322, i64 -7
  %1325 = getelementptr i8, i8* %1284, i64 -1
  %1326 = getelementptr inbounds i8, i8* %1325, i64 -8
  %1327 = getelementptr inbounds i8, i8* %1291, i64 -16
  %1328 = getelementptr inbounds i8, i8* %1326, i64 -7
  %1329 = getelementptr i8, i8* %1284, i64 -1
  %1330 = getelementptr inbounds i8, i8* %1329, i64 -8
  %1331 = getelementptr inbounds i8, i8* %1291, i64 -16
  %1332 = getelementptr inbounds i8, i8* %1330, i64 -7
  %1333 = getelementptr i8, i8* %1284, i64 -1
  %1334 = getelementptr inbounds i8, i8* %1333, i64 -8
  %1335 = getelementptr inbounds i8, i8* %1291, i64 -16
  %1336 = getelementptr inbounds i8, i8* %1334, i64 -7
  br label %1337

1337:                                             ; preds = %1337, %1319
  %1338 = phi i64 [ 0, %1319 ], [ %1368, %1337 ]
  %1339 = phi i64 [ %1320, %1319 ], [ %1369, %1337 ]
  %1340 = sub i64 0, %1338
  %1341 = sub i64 0, %1338
  %1342 = getelementptr inbounds i8, i8* %1323, i64 %1341
  %1343 = bitcast i8* %1342 to <2 x i64>*
  %1344 = load <2 x i64>, <2 x i64>* %1343, align 1, !alias.scope !70
  %1345 = getelementptr inbounds i8, i8* %1324, i64 %1340
  %1346 = bitcast i8* %1345 to <2 x i64>*
  store <2 x i64> %1344, <2 x i64>* %1346, align 1, !alias.scope !73, !noalias !70
  %1347 = sub nuw nsw i64 -16, %1338
  %1348 = sub nuw nsw i64 -16, %1338
  %1349 = getelementptr inbounds i8, i8* %1327, i64 %1348
  %1350 = bitcast i8* %1349 to <2 x i64>*
  %1351 = load <2 x i64>, <2 x i64>* %1350, align 1, !alias.scope !70
  %1352 = getelementptr inbounds i8, i8* %1328, i64 %1347
  %1353 = bitcast i8* %1352 to <2 x i64>*
  store <2 x i64> %1351, <2 x i64>* %1353, align 1, !alias.scope !73, !noalias !70
  %1354 = sub nuw nsw i64 -32, %1338
  %1355 = sub nuw nsw i64 -32, %1338
  %1356 = getelementptr inbounds i8, i8* %1331, i64 %1355
  %1357 = bitcast i8* %1356 to <2 x i64>*
  %1358 = load <2 x i64>, <2 x i64>* %1357, align 1, !alias.scope !70
  %1359 = getelementptr inbounds i8, i8* %1332, i64 %1354
  %1360 = bitcast i8* %1359 to <2 x i64>*
  store <2 x i64> %1358, <2 x i64>* %1360, align 1, !alias.scope !73, !noalias !70
  %1361 = sub nuw nsw i64 -48, %1338
  %1362 = sub nuw nsw i64 -48, %1338
  %1363 = getelementptr inbounds i8, i8* %1335, i64 %1362
  %1364 = bitcast i8* %1363 to <2 x i64>*
  %1365 = load <2 x i64>, <2 x i64>* %1364, align 1, !alias.scope !70
  %1366 = getelementptr inbounds i8, i8* %1336, i64 %1361
  %1367 = bitcast i8* %1366 to <2 x i64>*
  store <2 x i64> %1365, <2 x i64>* %1367, align 1, !alias.scope !73, !noalias !70
  %1368 = add i64 %1338, 64
  %1369 = add i64 %1339, -4
  %1370 = icmp eq i64 %1369, 0
  br i1 %1370, label %1371, label %1337, !llvm.loop !75

1371:                                             ; preds = %1337, %1308
  %1372 = phi i64 [ 0, %1308 ], [ %1368, %1337 ]
  %1373 = icmp eq i64 %1317, 0
  br i1 %1373, label %1392, label %1374

1374:                                             ; preds = %1371
  %1375 = getelementptr i8, i8* %1284, i64 -1
  %1376 = getelementptr inbounds i8, i8* %1375, i64 -8
  %1377 = getelementptr inbounds i8, i8* %1291, i64 -16
  %1378 = getelementptr inbounds i8, i8* %1376, i64 -7
  br label %1379

1379:                                             ; preds = %1379, %1374
  %1380 = phi i64 [ %1372, %1374 ], [ %1389, %1379 ]
  %1381 = phi i64 [ %1317, %1374 ], [ %1390, %1379 ]
  %1382 = sub i64 0, %1380
  %1383 = sub i64 0, %1380
  %1384 = getelementptr inbounds i8, i8* %1377, i64 %1383
  %1385 = bitcast i8* %1384 to <2 x i64>*
  %1386 = load <2 x i64>, <2 x i64>* %1385, align 1, !alias.scope !70
  %1387 = getelementptr inbounds i8, i8* %1378, i64 %1382
  %1388 = bitcast i8* %1387 to <2 x i64>*
  store <2 x i64> %1386, <2 x i64>* %1388, align 1, !alias.scope !73, !noalias !70
  %1389 = add i64 %1380, 16
  %1390 = add i64 %1381, -1
  %1391 = icmp eq i64 %1390, 0
  br i1 %1391, label %1392, label %1379, !llvm.loop !76

1392:                                             ; preds = %1379, %1371
  %1393 = icmp eq i64 %1297, %1309
  br i1 %1393, label %1404, label %1394

1394:                                             ; preds = %1392, %1299, %1294
  %1395 = phi i8* [ %1284, %1299 ], [ %1284, %1294 ], [ %1311, %1392 ]
  %1396 = phi i8* [ %1291, %1299 ], [ %1291, %1294 ], [ %1313, %1392 ]
  br label %1397

1397:                                             ; preds = %1394, %1397
  %1398 = phi i8* [ %1400, %1397 ], [ %1395, %1394 ]
  %1399 = phi i8* [ %1401, %1397 ], [ %1396, %1394 ]
  %1400 = getelementptr inbounds i8, i8* %1398, i64 -1
  %1401 = getelementptr inbounds i8, i8* %1399, i64 -1
  %1402 = load i8, i8* %1401, align 1
  store i8 %1402, i8* %1400, align 1
  %1403 = icmp eq i8* %1401, %1290
  br i1 %1403, label %1404, label %1397, !llvm.loop !77

1404:                                             ; preds = %1397, %1392, %1281
  %1405 = phi i8* [ %1284, %1281 ], [ %1311, %1392 ], [ %1400, %1397 ]
  %1406 = ptrtoint i8* %1405 to i64
  store i64 %1406, i64* %377, align 8
  store i64 %1289, i64* %376, align 8
  store i64 %1286, i64* %378, align 8
  br label %1407

1407:                                             ; preds = %1243, %1404
  %1408 = phi i64 [ %1248, %1243 ], [ %1286, %1404 ]
  %1409 = phi i8* [ %1247, %1243 ], [ %1285, %1404 ]
  %1410 = phi i8* [ %1245, %1243 ], [ %1288, %1404 ]
  %1411 = getelementptr inbounds i8, i8* %899, i64 3
  %1412 = icmp eq i8* %1410, %1409
  br i1 %1412, label %1417, label %1413

1413:                                             ; preds = %1407
  %1414 = load i8, i8* %1411, align 1
  store i8 %1414, i8* %1410, align 1
  %1415 = getelementptr inbounds i8, i8* %1410, i64 1
  %1416 = ptrtoint i8* %1415 to i64
  store i64 %1416, i64* %376, align 8
  br label %1575

1417:                                             ; preds = %1407
  %1418 = load i64, i64* %377, align 8
  %1419 = sub i64 %1408, %1418
  %1420 = add i64 %1419, 1
  %1421 = icmp ugt i64 %1420, 2147483647
  br i1 %1421, label %1422, label %1424

1422:                                             ; preds = %1417
  %1423 = bitcast %"class.std::__1::vector"* %191 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1423) #7
  unreachable

1424:                                             ; preds = %1417
  %1425 = icmp ult i64 %1419, 1073741823
  br i1 %1425, label %1426, label %1431

1426:                                             ; preds = %1424
  %1427 = shl i64 %1419, 1
  %1428 = icmp ult i64 %1427, %1420
  %1429 = select i1 %1428, i64 %1420, i64 %1427
  %1430 = icmp eq i64 %1429, 0
  br i1 %1430, label %1449, label %1431

1431:                                             ; preds = %1426, %1424
  %1432 = phi i64 [ %1429, %1426 ], [ 2147483647, %1424 ]
  %1433 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %379, align 8
  %1434 = add nuw nsw i64 %1432, 7
  %1435 = and i64 %1434, -8
  %1436 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1433, i64 0, i32 2
  %1437 = load i64, i64* %1436, align 8
  %1438 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1433, i64 0, i32 3
  %1439 = load i64, i64* %1438, align 8
  %1440 = sub i64 %1439, %1437
  %1441 = icmp ugt i64 %1435, %1440
  br i1 %1441, label %1442, label %1444, !prof !3

1442:                                             ; preds = %1431
  %1443 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1433, i64 %1435) #6
  br label %1446

1444:                                             ; preds = %1431
  %1445 = add i64 %1437, %1435
  store i64 %1445, i64* %1436, align 8
  br label %1446

1446:                                             ; preds = %1444, %1442
  %1447 = phi i64 [ %1443, %1442 ], [ %1437, %1444 ]
  %1448 = inttoptr i64 %1447 to i8*
  br label %1449

1449:                                             ; preds = %1446, %1426
  %1450 = phi i64 [ %1432, %1446 ], [ 0, %1426 ]
  %1451 = phi i8* [ %1448, %1446 ], [ null, %1426 ]
  %1452 = getelementptr inbounds i8, i8* %1451, i64 %1419
  %1453 = getelementptr inbounds i8, i8* %1451, i64 %1450
  %1454 = ptrtoint i8* %1453 to i64
  %1455 = load i8, i8* %1411, align 1
  store i8 %1455, i8* %1452, align 1
  %1456 = getelementptr inbounds i8, i8* %1452, i64 1
  %1457 = ptrtoint i8* %1456 to i64
  %1458 = load i8*, i8** %380, align 8
  %1459 = load i8*, i8** %192, align 8
  %1460 = ptrtoint i8* %1459 to i64
  %1461 = icmp eq i8* %1459, %1458
  br i1 %1461, label %1572, label %1462

1462:                                             ; preds = %1449
  %1463 = ptrtoint i8* %1458 to i64
  %1464 = ptrtoint i8* %1459 to i64
  %1465 = sub i64 %1464, %1463
  %1466 = icmp ult i64 %1465, 16
  br i1 %1466, label %1562, label %1467

1467:                                             ; preds = %1462
  %1468 = sub i64 %1408, %1460
  %1469 = sub i64 %1468, %1418
  %1470 = getelementptr i8, i8* %1458, i64 %1469
  %1471 = ptrtoint i8* %1470 to i64
  %1472 = getelementptr i8, i8* %1451, i64 %1471
  %1473 = icmp ult i8* %1472, %1459
  %1474 = icmp ult i8* %1458, %1452
  %1475 = and i1 %1473, %1474
  br i1 %1475, label %1562, label %1476

1476:                                             ; preds = %1467
  %1477 = and i64 %1465, -16
  %1478 = sub i64 0, %1477
  %1479 = getelementptr i8, i8* %1452, i64 %1478
  %1480 = sub i64 0, %1477
  %1481 = getelementptr i8, i8* %1459, i64 %1480
  %1482 = add i64 %1477, -16
  %1483 = lshr exact i64 %1482, 4
  %1484 = add nuw nsw i64 %1483, 1
  %1485 = and i64 %1484, 3
  %1486 = icmp ult i64 %1482, 48
  br i1 %1486, label %1539, label %1487

1487:                                             ; preds = %1476
  %1488 = sub nsw i64 %1484, %1485
  %1489 = getelementptr i8, i8* %1452, i64 -1
  %1490 = getelementptr inbounds i8, i8* %1489, i64 -8
  %1491 = getelementptr inbounds i8, i8* %1459, i64 -16
  %1492 = getelementptr inbounds i8, i8* %1490, i64 -7
  %1493 = getelementptr i8, i8* %1452, i64 -1
  %1494 = getelementptr inbounds i8, i8* %1493, i64 -8
  %1495 = getelementptr inbounds i8, i8* %1459, i64 -16
  %1496 = getelementptr inbounds i8, i8* %1494, i64 -7
  %1497 = getelementptr i8, i8* %1452, i64 -1
  %1498 = getelementptr inbounds i8, i8* %1497, i64 -8
  %1499 = getelementptr inbounds i8, i8* %1459, i64 -16
  %1500 = getelementptr inbounds i8, i8* %1498, i64 -7
  %1501 = getelementptr i8, i8* %1452, i64 -1
  %1502 = getelementptr inbounds i8, i8* %1501, i64 -8
  %1503 = getelementptr inbounds i8, i8* %1459, i64 -16
  %1504 = getelementptr inbounds i8, i8* %1502, i64 -7
  br label %1505

1505:                                             ; preds = %1505, %1487
  %1506 = phi i64 [ 0, %1487 ], [ %1536, %1505 ]
  %1507 = phi i64 [ %1488, %1487 ], [ %1537, %1505 ]
  %1508 = sub i64 0, %1506
  %1509 = sub i64 0, %1506
  %1510 = getelementptr inbounds i8, i8* %1491, i64 %1509
  %1511 = bitcast i8* %1510 to <2 x i64>*
  %1512 = load <2 x i64>, <2 x i64>* %1511, align 1, !alias.scope !78
  %1513 = getelementptr inbounds i8, i8* %1492, i64 %1508
  %1514 = bitcast i8* %1513 to <2 x i64>*
  store <2 x i64> %1512, <2 x i64>* %1514, align 1, !alias.scope !81, !noalias !78
  %1515 = sub nuw nsw i64 -16, %1506
  %1516 = sub nuw nsw i64 -16, %1506
  %1517 = getelementptr inbounds i8, i8* %1495, i64 %1516
  %1518 = bitcast i8* %1517 to <2 x i64>*
  %1519 = load <2 x i64>, <2 x i64>* %1518, align 1, !alias.scope !78
  %1520 = getelementptr inbounds i8, i8* %1496, i64 %1515
  %1521 = bitcast i8* %1520 to <2 x i64>*
  store <2 x i64> %1519, <2 x i64>* %1521, align 1, !alias.scope !81, !noalias !78
  %1522 = sub nuw nsw i64 -32, %1506
  %1523 = sub nuw nsw i64 -32, %1506
  %1524 = getelementptr inbounds i8, i8* %1499, i64 %1523
  %1525 = bitcast i8* %1524 to <2 x i64>*
  %1526 = load <2 x i64>, <2 x i64>* %1525, align 1, !alias.scope !78
  %1527 = getelementptr inbounds i8, i8* %1500, i64 %1522
  %1528 = bitcast i8* %1527 to <2 x i64>*
  store <2 x i64> %1526, <2 x i64>* %1528, align 1, !alias.scope !81, !noalias !78
  %1529 = sub nuw nsw i64 -48, %1506
  %1530 = sub nuw nsw i64 -48, %1506
  %1531 = getelementptr inbounds i8, i8* %1503, i64 %1530
  %1532 = bitcast i8* %1531 to <2 x i64>*
  %1533 = load <2 x i64>, <2 x i64>* %1532, align 1, !alias.scope !78
  %1534 = getelementptr inbounds i8, i8* %1504, i64 %1529
  %1535 = bitcast i8* %1534 to <2 x i64>*
  store <2 x i64> %1533, <2 x i64>* %1535, align 1, !alias.scope !81, !noalias !78
  %1536 = add i64 %1506, 64
  %1537 = add i64 %1507, -4
  %1538 = icmp eq i64 %1537, 0
  br i1 %1538, label %1539, label %1505, !llvm.loop !83

1539:                                             ; preds = %1505, %1476
  %1540 = phi i64 [ 0, %1476 ], [ %1536, %1505 ]
  %1541 = icmp eq i64 %1485, 0
  br i1 %1541, label %1560, label %1542

1542:                                             ; preds = %1539
  %1543 = getelementptr i8, i8* %1452, i64 -1
  %1544 = getelementptr inbounds i8, i8* %1543, i64 -8
  %1545 = getelementptr inbounds i8, i8* %1459, i64 -16
  %1546 = getelementptr inbounds i8, i8* %1544, i64 -7
  br label %1547

1547:                                             ; preds = %1547, %1542
  %1548 = phi i64 [ %1540, %1542 ], [ %1557, %1547 ]
  %1549 = phi i64 [ %1485, %1542 ], [ %1558, %1547 ]
  %1550 = sub i64 0, %1548
  %1551 = sub i64 0, %1548
  %1552 = getelementptr inbounds i8, i8* %1545, i64 %1551
  %1553 = bitcast i8* %1552 to <2 x i64>*
  %1554 = load <2 x i64>, <2 x i64>* %1553, align 1, !alias.scope !78
  %1555 = getelementptr inbounds i8, i8* %1546, i64 %1550
  %1556 = bitcast i8* %1555 to <2 x i64>*
  store <2 x i64> %1554, <2 x i64>* %1556, align 1, !alias.scope !81, !noalias !78
  %1557 = add i64 %1548, 16
  %1558 = add i64 %1549, -1
  %1559 = icmp eq i64 %1558, 0
  br i1 %1559, label %1560, label %1547, !llvm.loop !84

1560:                                             ; preds = %1547, %1539
  %1561 = icmp eq i64 %1465, %1477
  br i1 %1561, label %1572, label %1562

1562:                                             ; preds = %1560, %1467, %1462
  %1563 = phi i8* [ %1452, %1467 ], [ %1452, %1462 ], [ %1479, %1560 ]
  %1564 = phi i8* [ %1459, %1467 ], [ %1459, %1462 ], [ %1481, %1560 ]
  br label %1565

1565:                                             ; preds = %1562, %1565
  %1566 = phi i8* [ %1568, %1565 ], [ %1563, %1562 ]
  %1567 = phi i8* [ %1569, %1565 ], [ %1564, %1562 ]
  %1568 = getelementptr inbounds i8, i8* %1566, i64 -1
  %1569 = getelementptr inbounds i8, i8* %1567, i64 -1
  %1570 = load i8, i8* %1569, align 1
  store i8 %1570, i8* %1568, align 1
  %1571 = icmp eq i8* %1569, %1458
  br i1 %1571, label %1572, label %1565, !llvm.loop !85

1572:                                             ; preds = %1565, %1560, %1449
  %1573 = phi i8* [ %1452, %1449 ], [ %1479, %1560 ], [ %1568, %1565 ]
  %1574 = ptrtoint i8* %1573 to i64
  store i64 %1574, i64* %377, align 8
  store i64 %1457, i64* %376, align 8
  store i64 %1454, i64* %378, align 8
  br label %1575

1575:                                             ; preds = %1572, %1413, %894, %737, %557, %398, %383
  %1576 = phi i8* [ %1456, %1572 ], [ %1415, %1413 ], [ %778, %894 ], [ %738, %737 ], [ %441, %557 ], [ %399, %398 ], [ %384, %383 ]
  %1577 = phi i8* [ %1456, %1572 ], [ %1415, %1413 ], [ %778, %894 ], [ %738, %737 ], [ %441, %557 ], [ %399, %398 ], [ %385, %383 ]
  %1578 = phi i8* [ %1456, %1572 ], [ %1415, %1413 ], [ %778, %894 ], [ %738, %737 ], [ %441, %557 ], [ %399, %398 ], [ %386, %383 ]
  %1579 = add nuw nsw i64 %387, 1
  %1580 = icmp eq i64 %1579, %381
  br i1 %1580, label %382, label %383
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter9WriteJumpEPNS1_12BytecodeNodeEPNS1_13BytecodeLabelE(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::interpreter::BytecodeNode"* nocapture, %"class.v8::internal::interpreter::BytecodeLabel"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 14
  %5 = load i8, i8* %4, align 2, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %96

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 0
  %9 = load i8, i8* %8, align 4
  switch i8 %9, label %12 [
    i8 -88, label %10
    i8 -90, label %10
    i8 -89, label %10
    i8 -77, label %10
    i8 -119, label %10
    i8 -118, label %10
    i8 -82, label %10
  ]

10:                                               ; preds = %7, %7, %7, %7, %7, %7, %7
  store i8 1, i8* %4, align 2
  %11 = load i8, i8* %8, align 4
  br label %12

12:                                               ; preds = %7, %10
  %13 = phi i8 [ %9, %7 ], [ %11, %10 ]
  %14 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 4, i32 0
  %15 = load i8, i8* %14, align 4
  %16 = icmp ne i8 %15, 0
  %17 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 13
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %74, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  %22 = load i8, i8* %21, align 8
  %23 = add i8 %22, -11
  %24 = icmp ult i8 %23, 13
  br i1 %24, label %25, label %61

25:                                               ; preds = %20
  %26 = zext i8 %13 to i64
  %27 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2v88internal11interpreter9Bytecodes20kImplicitRegisterUseE, i64 0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 2
  br i1 %29, label %30, label %61

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 12
  %32 = load i8, i8* %31, align 8, !range !2
  %33 = icmp eq i8 %32, 0
  %34 = xor i1 %16, true
  %35 = or i1 %33, %34
  br i1 %35, label %36, label %61

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %38 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 11
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %41 = bitcast i8** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector"* %37 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = icmp ugt i64 %39, %45
  %47 = inttoptr i64 %44 to i8*
  br i1 %46, label %48, label %51

48:                                               ; preds = %36
  %49 = sub i64 %39, %45
  tail call void @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE8__appendEm(%"class.std::__1::vector"* %37, i64 %49) #6
  %50 = load i8, i8* %31, align 8, !range !2
  br label %55

51:                                               ; preds = %36
  %52 = icmp ult i64 %39, %45
  br i1 %52, label %53, label %55

53:                                               ; preds = %51
  %54 = getelementptr inbounds i8, i8* %47, i64 %39
  store i8* %54, i8** %40, align 8
  br label %55

55:                                               ; preds = %53, %51, %48
  %56 = phi i8 [ %50, %48 ], [ %32, %51 ], [ %32, %53 ]
  %57 = zext i8 %56 to i32
  %58 = zext i1 %16 to i32
  %59 = or i32 %57, %58
  %60 = icmp ne i32 %59, 0
  br label %61

61:                                               ; preds = %55, %30, %25, %20
  %62 = phi i1 [ %60, %55 ], [ %16, %25 ], [ %16, %20 ], [ %16, %30 ]
  store i8 %13, i8* %21, align 8
  %63 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 12
  %64 = zext i1 %62 to i8
  store i8 %64, i8* %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %66 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %67 = bitcast i8** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.std::__1::vector"* %65 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %68, %70
  %72 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 11
  store i64 %71, i64* %72, align 8
  %73 = load i8, i8* %14, align 4
  br label %74

74:                                               ; preds = %12, %61
  %75 = phi i8 [ %15, %12 ], [ %73, %61 ]
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %95, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %79 = bitcast i8** %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %82 = bitcast %"class.std::__1::vector"* %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %80, %83
  %85 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 7
  %86 = shl i64 %84, 32
  %87 = ashr exact i64 %86, 32
  %88 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 4, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = add nsw i32 %89, 1
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 1
  %93 = and i64 %92, -140735340871682
  %94 = icmp eq i8 %75, 2
  tail call void @_ZN2v88internal26SourcePositionTableBuilder11AddPositionEmNS0_14SourcePositionEb(%"class.v8::internal::SourcePositionTableBuilder"* %85, i64 %87, i64 %93, i1 zeroext %94) #6
  br label %95

95:                                               ; preds = %74, %77
  tail call void @_ZN2v88internal11interpreter19BytecodeArrayWriter8EmitJumpEPNS1_12BytecodeNodeEPNS1_13BytecodeLabelE(%"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, %"class.v8::internal::interpreter::BytecodeNode"* %1, %"class.v8::internal::interpreter::BytecodeLabel"* %2)
  br label %96

96:                                               ; preds = %3, %95
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter8EmitJumpEPNS1_12BytecodeNodeEPNS1_13BytecodeLabelE(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::interpreter::BytecodeNode"* nocapture, %"class.v8::internal::interpreter::BytecodeLabel"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 5
  %12 = load i32, i32* %11, align 8
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %11, align 8
  %14 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeLabel", %"class.v8::internal::interpreter::BytecodeLabel"* %2, i64 0, i32 1
  store i64 %10, i64* %14, align 8
  %15 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 8
  %16 = load %"class.v8::internal::interpreter::ConstantArrayBuilder"*, %"class.v8::internal::interpreter::ConstantArrayBuilder"** %15, align 8
  %17 = tail call zeroext i8 @_ZN2v88internal11interpreter20ConstantArrayBuilder19CreateReservedEntryEv(%"class.v8::internal::interpreter::ConstantArrayBuilder"* %16) #6
  switch i8 %17, label %115 [
    i8 0, label %18
    i8 1, label %19
    i8 2, label %51
    i8 4, label %83
  ]

18:                                               ; preds = %3
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 1, i64 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 0
  %24 = load i8, i8* %23, align 4
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds [0 x i8*], [0 x i8*]* @_ZN2v88internal11interpreter9Bytecodes17kOperandTypeInfosE, i64 0, i64 %25
  %27 = load i8*, i8** %26, align 8
  %28 = load i8, i8* %27, align 1
  switch i8 %28, label %115 [
    i8 1, label %29
    i8 2, label %42
  ]

29:                                               ; preds = %19
  %30 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 3
  %31 = add i32 %21, 128
  %32 = icmp ult i32 %31, 256
  br i1 %32, label %37, label %33

33:                                               ; preds = %29
  %34 = add i32 %21, 32768
  %35 = icmp ult i32 %34, 65536
  %36 = select i1 %35, i8 2, i8 4
  br label %37

37:                                               ; preds = %33, %29
  %38 = phi i8 [ 1, %29 ], [ %36, %33 ]
  %39 = load i8, i8* %30, align 1
  %40 = icmp ult i8 %39, %38
  %41 = select i1 %40, i8 %38, i8 %39
  store i8 %41, i8* %30, align 4
  br label %115

42:                                               ; preds = %19
  %43 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 3
  %44 = icmp ult i32 %21, 256
  %45 = icmp ult i32 %21, 65536
  %46 = select i1 %45, i8 2, i8 4
  %47 = select i1 %44, i8 1, i8 %46
  %48 = load i8, i8* %43, align 1
  %49 = icmp ult i8 %48, %47
  %50 = select i1 %49, i8 %47, i8 %48
  store i8 %50, i8* %43, align 4
  br label %115

51:                                               ; preds = %3
  %52 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 1, i64 0
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 0
  %56 = load i8, i8* %55, align 4
  %57 = zext i8 %56 to i64
  %58 = getelementptr inbounds [0 x i8*], [0 x i8*]* @_ZN2v88internal11interpreter9Bytecodes17kOperandTypeInfosE, i64 0, i64 %57
  %59 = load i8*, i8** %58, align 8
  %60 = load i8, i8* %59, align 1
  switch i8 %60, label %115 [
    i8 1, label %61
    i8 2, label %74
  ]

61:                                               ; preds = %51
  %62 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 3
  %63 = add i32 %53, 128
  %64 = icmp ult i32 %63, 256
  br i1 %64, label %69, label %65

65:                                               ; preds = %61
  %66 = add i32 %53, 32768
  %67 = icmp ult i32 %66, 65536
  %68 = select i1 %67, i8 2, i8 4
  br label %69

69:                                               ; preds = %65, %61
  %70 = phi i8 [ 1, %61 ], [ %68, %65 ]
  %71 = load i8, i8* %62, align 1
  %72 = icmp ult i8 %71, %70
  %73 = select i1 %72, i8 %70, i8 %71
  store i8 %73, i8* %62, align 4
  br label %115

74:                                               ; preds = %51
  %75 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 3
  %76 = icmp ult i32 %53, 256
  %77 = icmp ult i32 %53, 65536
  %78 = select i1 %77, i8 2, i8 4
  %79 = select i1 %76, i8 1, i8 %78
  %80 = load i8, i8* %75, align 1
  %81 = icmp ult i8 %80, %79
  %82 = select i1 %81, i8 %79, i8 %80
  store i8 %82, i8* %75, align 4
  br label %115

83:                                               ; preds = %3
  %84 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 2
  %85 = load i32, i32* %84, align 8
  %86 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 1, i64 0
  store i32 %85, i32* %86, align 4
  %87 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 0
  %88 = load i8, i8* %87, align 4
  %89 = zext i8 %88 to i64
  %90 = getelementptr inbounds [0 x i8*], [0 x i8*]* @_ZN2v88internal11interpreter9Bytecodes17kOperandTypeInfosE, i64 0, i64 %89
  %91 = load i8*, i8** %90, align 8
  %92 = load i8, i8* %91, align 1
  switch i8 %92, label %115 [
    i8 1, label %93
    i8 2, label %106
  ]

93:                                               ; preds = %83
  %94 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 3
  %95 = add i32 %85, 128
  %96 = icmp ult i32 %95, 256
  br i1 %96, label %101, label %97

97:                                               ; preds = %93
  %98 = add i32 %85, 32768
  %99 = icmp ult i32 %98, 65536
  %100 = select i1 %99, i8 2, i8 4
  br label %101

101:                                              ; preds = %97, %93
  %102 = phi i8 [ 1, %93 ], [ %100, %97 ]
  %103 = load i8, i8* %94, align 1
  %104 = icmp ult i8 %103, %102
  %105 = select i1 %104, i8 %102, i8 %103
  store i8 %105, i8* %94, align 4
  br label %115

106:                                              ; preds = %83
  %107 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 3
  %108 = icmp ult i32 %85, 256
  %109 = icmp ult i32 %85, 65536
  %110 = select i1 %109, i8 2, i8 4
  %111 = select i1 %108, i8 1, i8 %110
  %112 = load i8, i8* %107, align 1
  %113 = icmp ult i8 %112, %111
  %114 = select i1 %113, i8 %111, i8 %112
  store i8 %114, i8* %107, align 4
  br label %115

115:                                              ; preds = %106, %101, %83, %74, %69, %51, %42, %37, %19, %3
  tail call void @_ZN2v88internal11interpreter19BytecodeArrayWriter12EmitBytecodeEPKNS1_12BytecodeNodeE(%"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, %"class.v8::internal::interpreter::BytecodeNode"* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter13WriteJumpLoopEPNS1_12BytecodeNodeEPNS1_18BytecodeLoopHeaderE(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::interpreter::BytecodeNode"* nocapture, %"class.v8::internal::interpreter::BytecodeLoopHeader"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 14
  %5 = load i8, i8* %4, align 2, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %96

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 0
  %9 = load i8, i8* %8, align 4
  switch i8 %9, label %12 [
    i8 -88, label %10
    i8 -90, label %10
    i8 -89, label %10
    i8 -77, label %10
    i8 -119, label %10
    i8 -118, label %10
    i8 -82, label %10
  ]

10:                                               ; preds = %7, %7, %7, %7, %7, %7, %7
  store i8 1, i8* %4, align 2
  %11 = load i8, i8* %8, align 4
  br label %12

12:                                               ; preds = %7, %10
  %13 = phi i8 [ %9, %7 ], [ %11, %10 ]
  %14 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 4, i32 0
  %15 = load i8, i8* %14, align 4
  %16 = icmp ne i8 %15, 0
  %17 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 13
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %74, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  %22 = load i8, i8* %21, align 8
  %23 = add i8 %22, -11
  %24 = icmp ult i8 %23, 13
  br i1 %24, label %25, label %61

25:                                               ; preds = %20
  %26 = zext i8 %13 to i64
  %27 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2v88internal11interpreter9Bytecodes20kImplicitRegisterUseE, i64 0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 2
  br i1 %29, label %30, label %61

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 12
  %32 = load i8, i8* %31, align 8, !range !2
  %33 = icmp eq i8 %32, 0
  %34 = xor i1 %16, true
  %35 = or i1 %33, %34
  br i1 %35, label %36, label %61

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %38 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 11
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %41 = bitcast i8** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector"* %37 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = icmp ugt i64 %39, %45
  %47 = inttoptr i64 %44 to i8*
  br i1 %46, label %48, label %51

48:                                               ; preds = %36
  %49 = sub i64 %39, %45
  tail call void @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE8__appendEm(%"class.std::__1::vector"* %37, i64 %49) #6
  %50 = load i8, i8* %31, align 8, !range !2
  br label %55

51:                                               ; preds = %36
  %52 = icmp ult i64 %39, %45
  br i1 %52, label %53, label %55

53:                                               ; preds = %51
  %54 = getelementptr inbounds i8, i8* %47, i64 %39
  store i8* %54, i8** %40, align 8
  br label %55

55:                                               ; preds = %53, %51, %48
  %56 = phi i8 [ %50, %48 ], [ %32, %51 ], [ %32, %53 ]
  %57 = zext i8 %56 to i32
  %58 = zext i1 %16 to i32
  %59 = or i32 %57, %58
  %60 = icmp ne i32 %59, 0
  br label %61

61:                                               ; preds = %55, %30, %25, %20
  %62 = phi i1 [ %60, %55 ], [ %16, %25 ], [ %16, %20 ], [ %16, %30 ]
  store i8 %13, i8* %21, align 8
  %63 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 12
  %64 = zext i1 %62 to i8
  store i8 %64, i8* %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %66 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %67 = bitcast i8** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.std::__1::vector"* %65 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %68, %70
  %72 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 11
  store i64 %71, i64* %72, align 8
  %73 = load i8, i8* %14, align 4
  br label %74

74:                                               ; preds = %12, %61
  %75 = phi i8 [ %15, %12 ], [ %73, %61 ]
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %95, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %79 = bitcast i8** %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %82 = bitcast %"class.std::__1::vector"* %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %80, %83
  %85 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 7
  %86 = shl i64 %84, 32
  %87 = ashr exact i64 %86, 32
  %88 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 4, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = add nsw i32 %89, 1
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 1
  %93 = and i64 %92, -140735340871682
  %94 = icmp eq i8 %75, 2
  tail call void @_ZN2v88internal26SourcePositionTableBuilder11AddPositionEmNS0_14SourcePositionEb(%"class.v8::internal::SourcePositionTableBuilder"* %85, i64 %87, i64 %93, i1 zeroext %94) #6
  br label %95

95:                                               ; preds = %74, %77
  tail call void @_ZN2v88internal11interpreter19BytecodeArrayWriter12EmitJumpLoopEPNS1_12BytecodeNodeEPNS1_18BytecodeLoopHeaderE(%"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, %"class.v8::internal::interpreter::BytecodeNode"* %1, %"class.v8::internal::interpreter::BytecodeLoopHeader"* %2)
  br label %96

96:                                               ; preds = %3, %95
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter12EmitJumpLoopEPNS1_12BytecodeNodeEPNS1_18BytecodeLoopHeaderE(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::interpreter::BytecodeNode"* nocapture, %"class.v8::internal::interpreter::BytecodeLoopHeader"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeLoopHeader", %"class.v8::internal::interpreter::BytecodeLoopHeader"* %2, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ult i64 %10, %12
  br i1 %13, label %14, label %15, !prof !3

14:                                               ; preds = %3
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0)) #7
  unreachable

15:                                               ; preds = %3
  %16 = icmp ult i64 %10, 4294967296
  br i1 %16, label %18, label %17, !prof !86

17:                                               ; preds = %15
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.3, i64 0, i64 0)) #7
  unreachable

18:                                               ; preds = %15
  %19 = sub i64 %10, %12
  %20 = trunc i64 %19 to i32
  %21 = icmp ugt i32 %20, 255
  %22 = zext i1 %21 to i32
  %23 = add i32 %22, %20
  %24 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 1, i64 0
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 0
  %26 = load i8, i8* %25, align 4
  %27 = zext i8 %26 to i64
  %28 = getelementptr inbounds [0 x i8*], [0 x i8*]* @_ZN2v88internal11interpreter9Bytecodes17kOperandTypeInfosE, i64 0, i64 %27
  %29 = load i8*, i8** %28, align 8
  %30 = load i8, i8* %29, align 1
  switch i8 %30, label %56 [
    i8 1, label %31
    i8 2, label %44
  ]

31:                                               ; preds = %18
  %32 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 3
  %33 = add i32 %23, 128
  %34 = icmp ult i32 %33, 256
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = add i32 %23, 32768
  %37 = icmp ult i32 %36, 65536
  %38 = select i1 %37, i8 2, i8 4
  br label %39

39:                                               ; preds = %35, %31
  %40 = phi i8 [ 1, %31 ], [ %38, %35 ]
  %41 = load i8, i8* %32, align 1
  %42 = icmp ult i8 %41, %40
  %43 = select i1 %42, i8 %40, i8 %41
  br label %53

44:                                               ; preds = %18
  %45 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 3
  %46 = icmp ult i32 %23, 256
  %47 = icmp ult i32 %23, 65536
  %48 = select i1 %47, i8 2, i8 4
  %49 = select i1 %46, i8 1, i8 %48
  %50 = load i8, i8* %45, align 1
  %51 = icmp ult i8 %50, %49
  %52 = select i1 %51, i8 %49, i8 %50
  br label %53

53:                                               ; preds = %44, %39
  %54 = phi i8* [ %32, %39 ], [ %45, %44 ]
  %55 = phi i8 [ %43, %39 ], [ %52, %44 ]
  store i8 %55, i8* %54, align 4
  br label %56

56:                                               ; preds = %53, %18
  tail call void @_ZN2v88internal11interpreter19BytecodeArrayWriter12EmitBytecodeEPKNS1_12BytecodeNodeE(%"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, %"class.v8::internal::interpreter::BytecodeNode"* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter11WriteSwitchEPNS1_12BytecodeNodeEPNS1_17BytecodeJumpTableE(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::interpreter::BytecodeNode"* nocapture readonly, %"class.v8::internal::interpreter::BytecodeJumpTable"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 14
  %5 = load i8, i8* %4, align 2, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %109

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 0
  %9 = load i8, i8* %8, align 4
  switch i8 %9, label %12 [
    i8 -88, label %10
    i8 -90, label %10
    i8 -89, label %10
    i8 -77, label %10
    i8 -119, label %10
    i8 -118, label %10
    i8 -82, label %10
  ]

10:                                               ; preds = %7, %7, %7, %7, %7, %7, %7
  store i8 1, i8* %4, align 2
  %11 = load i8, i8* %8, align 4
  br label %12

12:                                               ; preds = %7, %10
  %13 = phi i8 [ %9, %7 ], [ %11, %10 ]
  %14 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 4, i32 0
  %15 = load i8, i8* %14, align 4
  %16 = icmp ne i8 %15, 0
  %17 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 13
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %74, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  %22 = load i8, i8* %21, align 8
  %23 = add i8 %22, -11
  %24 = icmp ult i8 %23, 13
  br i1 %24, label %25, label %61

25:                                               ; preds = %20
  %26 = zext i8 %13 to i64
  %27 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2v88internal11interpreter9Bytecodes20kImplicitRegisterUseE, i64 0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 2
  br i1 %29, label %30, label %61

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 12
  %32 = load i8, i8* %31, align 8, !range !2
  %33 = icmp eq i8 %32, 0
  %34 = xor i1 %16, true
  %35 = or i1 %33, %34
  br i1 %35, label %36, label %61

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %38 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 11
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %41 = bitcast i8** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector"* %37 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = icmp ugt i64 %39, %45
  %47 = inttoptr i64 %44 to i8*
  br i1 %46, label %48, label %51

48:                                               ; preds = %36
  %49 = sub i64 %39, %45
  tail call void @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE8__appendEm(%"class.std::__1::vector"* %37, i64 %49) #6
  %50 = load i8, i8* %31, align 8, !range !2
  br label %55

51:                                               ; preds = %36
  %52 = icmp ult i64 %39, %45
  br i1 %52, label %53, label %55

53:                                               ; preds = %51
  %54 = getelementptr inbounds i8, i8* %47, i64 %39
  store i8* %54, i8** %40, align 8
  br label %55

55:                                               ; preds = %53, %51, %48
  %56 = phi i8 [ %50, %48 ], [ %32, %51 ], [ %32, %53 ]
  %57 = zext i8 %56 to i32
  %58 = zext i1 %16 to i32
  %59 = or i32 %57, %58
  %60 = icmp ne i32 %59, 0
  br label %61

61:                                               ; preds = %55, %30, %25, %20
  %62 = phi i1 [ %60, %55 ], [ %16, %25 ], [ %16, %20 ], [ %16, %30 ]
  store i8 %13, i8* %21, align 8
  %63 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 12
  %64 = zext i1 %62 to i8
  store i8 %64, i8* %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %66 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %67 = bitcast i8** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.std::__1::vector"* %65 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %68, %70
  %72 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 11
  store i64 %71, i64* %72, align 8
  %73 = load i8, i8* %14, align 4
  br label %74

74:                                               ; preds = %12, %61
  %75 = phi i8 [ %15, %12 ], [ %73, %61 ]
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %95, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %79 = bitcast i8** %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %82 = bitcast %"class.std::__1::vector"* %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %80, %83
  %85 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 7
  %86 = shl i64 %84, 32
  %87 = ashr exact i64 %86, 32
  %88 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 4, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = add nsw i32 %89, 1
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 1
  %93 = and i64 %92, -140735340871682
  %94 = icmp eq i8 %75, 2
  tail call void @_ZN2v88internal26SourcePositionTableBuilder11AddPositionEmNS0_14SourcePositionEb(%"class.v8::internal::SourcePositionTableBuilder"* %85, i64 %87, i64 %93, i1 zeroext %94) #6
  br label %95

95:                                               ; preds = %74, %77
  %96 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %97 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %98 = bitcast i8** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.std::__1::vector"* %96 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = sub i64 %99, %101
  %103 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 3
  %104 = load i8, i8* %103, align 4
  %105 = icmp ugt i8 %104, 1
  %106 = zext i1 %105 to i64
  %107 = add i64 %102, %106
  %108 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeJumpTable", %"class.v8::internal::interpreter::BytecodeJumpTable"* %2, i64 0, i32 1
  store i64 %107, i64* %108, align 8
  tail call void @_ZN2v88internal11interpreter19BytecodeArrayWriter12EmitBytecodeEPKNS1_12BytecodeNodeE(%"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, %"class.v8::internal::interpreter::BytecodeNode"* %1) #6
  br label %109

109:                                              ; preds = %3, %95
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter10EmitSwitchEPNS1_12BytecodeNodeEPNS1_17BytecodeJumpTableE(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::interpreter::BytecodeNode"* nocapture readonly, %"class.v8::internal::interpreter::BytecodeJumpTable"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeNode", %"class.v8::internal::interpreter::BytecodeNode"* %1, i64 0, i32 3
  %12 = load i8, i8* %11, align 4
  %13 = icmp ugt i8 %12, 1
  %14 = zext i1 %13 to i64
  %15 = add i64 %10, %14
  %16 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeJumpTable", %"class.v8::internal::interpreter::BytecodeJumpTable"* %2, i64 0, i32 1
  store i64 %15, i64* %16, align 8
  tail call void @_ZN2v88internal11interpreter19BytecodeArrayWriter12EmitBytecodeEPKNS1_12BytecodeNodeE(%"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, %"class.v8::internal::interpreter::BytecodeNode"* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter9BindLabelEPNS1_13BytecodeLabelE(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, %"class.v8::internal::interpreter::BytecodeLabel"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeLabel", %"class.v8::internal::interpreter::BytecodeLabel"* %1, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  tail call void @_ZN2v88internal11interpreter19BytecodeArrayWriter9PatchJumpEmm(%"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 %9, i64 %11)
  %12 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeLabel", %"class.v8::internal::interpreter::BytecodeLabel"* %1, i64 0, i32 0
  store i8 1, i8* %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  store i8 -60, i8* %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 14
  store i8 0, i8* %14, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter9PatchJumpEmm(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = icmp ugt i64 %10, %2
  br i1 %11, label %14, label %12

12:                                               ; preds = %3
  %13 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %13) #7
  unreachable

14:                                               ; preds = %3
  %15 = inttoptr i64 %9 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %2
  %17 = load i8, i8* %16, align 1
  %18 = sub i64 %1, %2
  %19 = trunc i64 %18 to i32
  %20 = icmp ult i8 %17, 4
  br i1 %20, label %21, label %32

21:                                               ; preds = %14
  %22 = add nsw i32 %19, -1
  %23 = add nuw i64 %2, 1
  %24 = icmp ugt i64 %10, %23
  br i1 %24, label %27, label %25

25:                                               ; preds = %21
  %26 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %26) #7
  unreachable

27:                                               ; preds = %21
  %28 = zext i8 %17 to i32
  %29 = shl nuw nsw i32 %28, 3
  %30 = lshr i32 67240962, %29
  %31 = trunc i32 %30 to i8
  switch i8 %31, label %35 [
    i8 4, label %34
    i8 2, label %33
  ]

32:                                               ; preds = %14
  tail call void @_ZN2v88internal11interpreter19BytecodeArrayWriter24PatchJumpWith8BitOperandEmi(%"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 %2, i32 %19)
  br label %36

33:                                               ; preds = %27
  tail call void @_ZN2v88internal11interpreter19BytecodeArrayWriter25PatchJumpWith16BitOperandEmi(%"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 %23, i32 %22)
  br label %36

34:                                               ; preds = %27
  tail call void @_ZN2v88internal11interpreter19BytecodeArrayWriter25PatchJumpWith32BitOperandEmi(%"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 %23, i32 %22)
  br label %36

35:                                               ; preds = %27
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

36:                                               ; preds = %34, %33, %32
  %37 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 5
  %38 = load i32, i32* %37, align 8
  %39 = add nsw i32 %38, -1
  store i32 %39, i32* %37, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter15StartBasicBlockEv(%"class.v8::internal::interpreter::BytecodeArrayWriter"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  store i8 -60, i8* %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 14
  store i8 0, i8* %3, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter14BindLoopHeaderEPNS1_18BytecodeLoopHeaderE(%"class.v8::internal::interpreter::BytecodeArrayWriter"* nocapture, %"class.v8::internal::interpreter::BytecodeLoopHeader"* nocapture) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeLoopHeader", %"class.v8::internal::interpreter::BytecodeLoopHeader"* %1, i64 0, i32 0
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  store i8 -60, i8* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 14
  store i8 0, i8* %12, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter18BindJumpTableEntryEPNS1_17BytecodeJumpTableEi(%"class.v8::internal::interpreter::BytecodeArrayWriter"* nocapture, %"class.v8::internal::interpreter::BytecodeJumpTable"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeJumpTable", %"class.v8::internal::interpreter::BytecodeJumpTable"* %1, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 8
  %15 = load %"class.v8::internal::interpreter::ConstantArrayBuilder"*, %"class.v8::internal::interpreter::ConstantArrayBuilder"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeJumpTable", %"class.v8::internal::interpreter::BytecodeJumpTable"* %1, i64 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = sext i32 %2 to i64
  %19 = add i64 %17, %18
  %20 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeJumpTable", %"class.v8::internal::interpreter::BytecodeJumpTable"* %1, i64 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = sub i64 %19, %22
  %24 = shl i64 %13, 32
  %25 = ashr exact i64 %24, 31
  tail call void @_ZN2v88internal11interpreter20ConstantArrayBuilder15SetJumpTableSmiEmNS0_3SmiE(%"class.v8::internal::interpreter::ConstantArrayBuilder"* %15, i64 %23, i64 %25) #6
  %26 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  store i8 -60, i8* %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 14
  store i8 0, i8* %27, align 2
  ret void
}

declare void @_ZN2v88internal11interpreter20ConstantArrayBuilder15SetJumpTableSmiEmNS0_3SmiE(%"class.v8::internal::interpreter::ConstantArrayBuilder"*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter17BindHandlerTargetEPNS1_19HandlerTableBuilderEi(%"class.v8::internal::interpreter::BytecodeArrayWriter"* nocapture, %"class.v8::internal::interpreter::HandlerTableBuilder"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  store i8 -60, i8* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 14
  store i8 0, i8* %12, align 2
  tail call void @_ZN2v88internal11interpreter19HandlerTableBuilder16SetHandlerTargetEim(%"class.v8::internal::interpreter::HandlerTableBuilder"* %1, i32 %2, i64 %10) #6
  ret void
}

declare void @_ZN2v88internal11interpreter19HandlerTableBuilder16SetHandlerTargetEim(%"class.v8::internal::interpreter::HandlerTableBuilder"*, i32, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter18BindTryRegionStartEPNS1_19HandlerTableBuilderEi(%"class.v8::internal::interpreter::BytecodeArrayWriter"* nocapture, %"class.v8::internal::interpreter::HandlerTableBuilder"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  store i8 -60, i8* %11, align 8
  tail call void @_ZN2v88internal11interpreter19HandlerTableBuilder17SetTryRegionStartEim(%"class.v8::internal::interpreter::HandlerTableBuilder"* %1, i32 %2, i64 %10) #6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter22InvalidateLastBytecodeEv(%"class.v8::internal::interpreter::BytecodeArrayWriter"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  store i8 -60, i8* %2, align 8
  ret void
}

declare void @_ZN2v88internal11interpreter19HandlerTableBuilder17SetTryRegionStartEim(%"class.v8::internal::interpreter::HandlerTableBuilder"*, i32, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter16BindTryRegionEndEPNS1_19HandlerTableBuilderEi(%"class.v8::internal::interpreter::BytecodeArrayWriter"* nocapture, %"class.v8::internal::interpreter::HandlerTableBuilder"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 9
  store i8 -60, i8* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %6 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector"* %5 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  tail call void @_ZN2v88internal11interpreter19HandlerTableBuilder15SetTryRegionEndEim(%"class.v8::internal::interpreter::HandlerTableBuilder"* %1, i32 %2, i64 %11) #6
  ret void
}

declare void @_ZN2v88internal11interpreter19HandlerTableBuilder15SetTryRegionEndEim(%"class.v8::internal::interpreter::HandlerTableBuilder"*, i32, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter30SetFunctionEntrySourcePositionEi(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 7
  %4 = add nsw i32 %1, 1
  %5 = sext i32 %4 to i64
  %6 = shl nsw i64 %5, 1
  %7 = and i64 %6, -140735340871682
  tail call void @_ZN2v88internal26SourcePositionTableBuilder11AddPositionEmNS0_14SourcePositionEb(%"class.v8::internal::SourcePositionTableBuilder"* %3, i64 -1, i64 %7, i1 zeroext false) #6
  ret void
}

declare void @_ZN2v88internal26SourcePositionTableBuilder11AddPositionEmNS0_14SourcePositionEb(%"class.v8::internal::SourcePositionTableBuilder"*, i64, i64, i1 zeroext) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN2v88internal11interpreter26GetJumpWithConstantOperandENS1_8BytecodeE(i8 zeroext) local_unnamed_addr #0 {
  %2 = add i8 %0, 119
  %3 = icmp ult i8 %2, 22
  br i1 %3, label %5, label %4

4:                                                ; preds = %5, %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

5:                                                ; preds = %1
  %6 = zext i8 %2 to i32
  %7 = lshr i32 4190209, %6
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %4, label %10

10:                                               ; preds = %5
  %11 = sext i8 %2 to i64
  %12 = getelementptr inbounds [22 x i8], [22 x i8]* @switch.table._ZN2v88internal11interpreter19BytecodeArrayWriter25PatchJumpWith16BitOperandEmi, i64 0, i64 %11
  %13 = load i8, i8* %12, align 1
  ret i8 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter24PatchJumpWith8BitOperandEmi(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, i64, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = icmp ugt i64 %10, %1
  br i1 %11, label %14, label %12

12:                                               ; preds = %3
  %13 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %13) #7
  unreachable

14:                                               ; preds = %3
  %15 = add nuw i64 %1, 1
  %16 = icmp ult i32 %2, 256
  %17 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 8
  %18 = load %"class.v8::internal::interpreter::ConstantArrayBuilder"*, %"class.v8::internal::interpreter::ConstantArrayBuilder"** %17, align 8
  br i1 %16, label %19, label %28

19:                                               ; preds = %14
  tail call void @_ZN2v88internal11interpreter20ConstantArrayBuilder20DiscardReservedEntryENS1_11OperandSizeE(%"class.v8::internal::interpreter::ConstantArrayBuilder"* %18, i8 zeroext 1) #6
  %20 = load i64, i64* %6, align 8
  %21 = load i64, i64* %8, align 8
  %22 = sub i64 %20, %21
  %23 = icmp ugt i64 %22, %15
  br i1 %23, label %26, label %24

24:                                               ; preds = %19
  %25 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %25) #7
  unreachable

26:                                               ; preds = %19
  %27 = trunc i32 %2 to i8
  br label %64

28:                                               ; preds = %14
  %29 = inttoptr i64 %9 to i8*
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  %31 = load i8, i8* %30, align 1
  %32 = sext i32 %2 to i64
  %33 = shl nsw i64 %32, 1
  %34 = tail call i64 @_ZN2v88internal11interpreter20ConstantArrayBuilder19CommitReservedEntryENS1_11OperandSizeENS0_3SmiE(%"class.v8::internal::interpreter::ConstantArrayBuilder"* %18, i8 zeroext 1, i64 %33) #6
  %35 = add i8 %31, 119
  %36 = icmp ult i8 %35, 22
  br i1 %36, label %38, label %37

37:                                               ; preds = %38, %28
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

38:                                               ; preds = %28
  %39 = zext i8 %35 to i32
  %40 = lshr i32 4190209, %39
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %37, label %43

43:                                               ; preds = %38
  %44 = load i64, i64* %6, align 8
  %45 = load i64, i64* %8, align 8
  %46 = sub i64 %44, %45
  %47 = icmp ugt i64 %46, %1
  br i1 %47, label %50, label %48

48:                                               ; preds = %43
  %49 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %49) #7
  unreachable

50:                                               ; preds = %43
  %51 = sext i8 %35 to i64
  %52 = getelementptr inbounds [22 x i8], [22 x i8]* @switch.table._ZN2v88internal11interpreter19BytecodeArrayWriter25PatchJumpWith16BitOperandEmi, i64 0, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = inttoptr i64 %45 to i8*
  %55 = getelementptr inbounds i8, i8* %54, i64 %1
  store i8 %53, i8* %55, align 1
  %56 = load i64, i64* %6, align 8
  %57 = load i64, i64* %8, align 8
  %58 = sub i64 %56, %57
  %59 = icmp ugt i64 %58, %15
  br i1 %59, label %62, label %60

60:                                               ; preds = %50
  %61 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %61) #7
  unreachable

62:                                               ; preds = %50
  %63 = trunc i64 %34 to i8
  br label %64

64:                                               ; preds = %62, %26
  %65 = phi i64 [ %57, %62 ], [ %21, %26 ]
  %66 = phi i8 [ %63, %62 ], [ %27, %26 ]
  %67 = inttoptr i64 %65 to i8*
  %68 = getelementptr inbounds i8, i8* %67, i64 %15
  store i8 %66, i8* %68, align 1
  ret void
}

declare void @_ZN2v88internal11interpreter20ConstantArrayBuilder20DiscardReservedEntryENS1_11OperandSizeE(%"class.v8::internal::interpreter::ConstantArrayBuilder"*, i8 zeroext) local_unnamed_addr #2

declare i64 @_ZN2v88internal11interpreter20ConstantArrayBuilder19CommitReservedEntryENS1_11OperandSizeENS0_3SmiE(%"class.v8::internal::interpreter::ConstantArrayBuilder"*, i8 zeroext, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter25PatchJumpWith16BitOperandEmi(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, i64, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca i16, align 2
  %5 = bitcast i16* %4 to [2 x i8]*
  %6 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %7 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %6 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp ugt i64 %12, %1
  br i1 %13, label %16, label %14

14:                                               ; preds = %3
  %15 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %15) #7
  unreachable

16:                                               ; preds = %3
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  %19 = load i8, i8* %18, align 1
  %20 = add nuw i64 %1, 1
  %21 = bitcast i16* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %21) #6
  %22 = icmp ult i32 %2, 65536
  %23 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 8
  %24 = load %"class.v8::internal::interpreter::ConstantArrayBuilder"*, %"class.v8::internal::interpreter::ConstantArrayBuilder"** %23, align 8
  br i1 %22, label %25, label %27

25:                                               ; preds = %16
  tail call void @_ZN2v88internal11interpreter20ConstantArrayBuilder20DiscardReservedEntryENS1_11OperandSizeE(%"class.v8::internal::interpreter::ConstantArrayBuilder"* %24, i8 zeroext 2) #6
  %26 = trunc i32 %2 to i16
  br label %53

27:                                               ; preds = %16
  %28 = sext i32 %2 to i64
  %29 = shl nsw i64 %28, 1
  %30 = tail call i64 @_ZN2v88internal11interpreter20ConstantArrayBuilder19CommitReservedEntryENS1_11OperandSizeENS0_3SmiE(%"class.v8::internal::interpreter::ConstantArrayBuilder"* %24, i8 zeroext 2, i64 %29) #6
  %31 = add i8 %19, 119
  %32 = icmp ult i8 %31, 22
  br i1 %32, label %34, label %33

33:                                               ; preds = %34, %27
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

34:                                               ; preds = %27
  %35 = zext i8 %31 to i32
  %36 = lshr i32 4190209, %35
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %33, label %39

39:                                               ; preds = %34
  %40 = load i64, i64* %8, align 8
  %41 = load i64, i64* %10, align 8
  %42 = sub i64 %40, %41
  %43 = icmp ugt i64 %42, %1
  br i1 %43, label %46, label %44

44:                                               ; preds = %39
  %45 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %45) #7
  unreachable

46:                                               ; preds = %39
  %47 = sext i8 %31 to i64
  %48 = getelementptr inbounds [22 x i8], [22 x i8]* @switch.table._ZN2v88internal11interpreter19BytecodeArrayWriter25PatchJumpWith16BitOperandEmi, i64 0, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = inttoptr i64 %41 to i8*
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  store i8 %49, i8* %51, align 1
  %52 = trunc i64 %30 to i16
  br label %53

53:                                               ; preds = %46, %25
  %54 = phi i16 [ %26, %25 ], [ %52, %46 ]
  store i16 %54, i16* %4, align 2
  %55 = add i64 %1, 2
  %56 = load i64, i64* %8, align 8
  %57 = load i64, i64* %10, align 8
  %58 = sub i64 %56, %57
  %59 = icmp ugt i64 %58, %20
  br i1 %59, label %62, label %60

60:                                               ; preds = %53
  %61 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %61) #7
  unreachable

62:                                               ; preds = %53
  %63 = trunc i16 %54 to i8
  %64 = inttoptr i64 %57 to i8*
  %65 = getelementptr inbounds i8, i8* %64, i64 %20
  store i8 %63, i8* %65, align 1
  %66 = load i64, i64* %8, align 8
  %67 = load i64, i64* %10, align 8
  %68 = sub i64 %66, %67
  %69 = icmp ugt i64 %68, %55
  br i1 %69, label %72, label %70

70:                                               ; preds = %62
  %71 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %71) #7
  unreachable

72:                                               ; preds = %62
  %73 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i64 0, i64 1
  %74 = load i8, i8* %73, align 1
  %75 = inttoptr i64 %67 to i8*
  %76 = getelementptr inbounds i8, i8* %75, i64 %55
  store i8 %74, i8* %76, align 1
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %21) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter19BytecodeArrayWriter25PatchJumpWith32BitOperandEmi(%"class.v8::internal::interpreter::BytecodeArrayWriter"*, i64, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to [4 x i8]*
  %6 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 8
  %7 = load %"class.v8::internal::interpreter::ConstantArrayBuilder"*, %"class.v8::internal::interpreter::ConstantArrayBuilder"** %6, align 8
  tail call void @_ZN2v88internal11interpreter20ConstantArrayBuilder20DiscardReservedEntryENS1_11OperandSizeE(%"class.v8::internal::interpreter::ConstantArrayBuilder"* %7, i8 zeroext 4) #6
  %8 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #6
  store i32 %2, i32* %4, align 4
  %9 = add i64 %1, 1
  %10 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0
  %11 = add i64 %1, 2
  %12 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeArrayWriter"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::vector"* %10 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = icmp ugt i64 %17, %9
  br i1 %18, label %21, label %19

19:                                               ; preds = %3
  %20 = bitcast %"class.std::__1::vector"* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %20) #7
  unreachable

21:                                               ; preds = %3
  %22 = trunc i32 %2 to i8
  %23 = inttoptr i64 %16 to i8*
  %24 = getelementptr inbounds i8, i8* %23, i64 %9
  store i8 %22, i8* %24, align 1
  %25 = add i64 %1, 3
  %26 = load i64, i64* %13, align 8
  %27 = load i64, i64* %15, align 8
  %28 = sub i64 %26, %27
  %29 = icmp ugt i64 %28, %11
  br i1 %29, label %32, label %30

30:                                               ; preds = %21
  %31 = bitcast %"class.std::__1::vector"* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %31) #7
  unreachable

32:                                               ; preds = %21
  %33 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 1
  %34 = load i8, i8* %33, align 1
  %35 = inttoptr i64 %27 to i8*
  %36 = getelementptr inbounds i8, i8* %35, i64 %11
  store i8 %34, i8* %36, align 1
  %37 = add i64 %1, 4
  %38 = load i64, i64* %13, align 8
  %39 = load i64, i64* %15, align 8
  %40 = sub i64 %38, %39
  %41 = icmp ugt i64 %40, %25
  br i1 %41, label %44, label %42

42:                                               ; preds = %32
  %43 = bitcast %"class.std::__1::vector"* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %43) #7
  unreachable

44:                                               ; preds = %32
  %45 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 2
  %46 = load i8, i8* %45, align 2
  %47 = inttoptr i64 %39 to i8*
  %48 = getelementptr inbounds i8, i8* %47, i64 %25
  store i8 %46, i8* %48, align 1
  %49 = load i64, i64* %13, align 8
  %50 = load i64, i64* %15, align 8
  %51 = sub i64 %49, %50
  %52 = icmp ugt i64 %51, %37
  br i1 %52, label %55, label %53

53:                                               ; preds = %44
  %54 = bitcast %"class.std::__1::vector"* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %54) #7
  unreachable

55:                                               ; preds = %44
  %56 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 3
  %57 = load i8, i8* %56, align 1
  %58 = inttoptr i64 %50 to i8*
  %59 = getelementptr inbounds i8, i8* %58, i64 %37
  store i8 %57, i8* %59, align 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #6
  ret void
}

declare zeroext i8 @_ZN2v88internal11interpreter20ConstantArrayBuilder19CreateReservedEntryEv(%"class.v8::internal::interpreter::ConstantArrayBuilder"*) local_unnamed_addr #2

declare void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"*, i64, i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64, i64, i64) local_unnamed_addr #2

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #6
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %189

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp ugt i64 %26, 2147483647
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #7
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 1073741823
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %57, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 2147483647, %30 ]
  %40 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %41 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %40, align 8
  %42 = add nuw nsw i64 %39, 7
  %43 = and i64 %42, -8
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %41, i64 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %41, i64 0, i32 3
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %47, %45
  %49 = icmp ugt i64 %43, %48
  br i1 %49, label %50, label %52, !prof !3

50:                                               ; preds = %38
  %51 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %41, i64 %43) #6
  br label %54

52:                                               ; preds = %38
  %53 = add i64 %45, %43
  store i64 %53, i64* %44, align 8
  br label %54

54:                                               ; preds = %52, %50
  %55 = phi i64 [ %51, %50 ], [ %45, %52 ]
  %56 = inttoptr i64 %55 to i8*
  br label %57

57:                                               ; preds = %54, %33
  %58 = phi i64 [ %39, %54 ], [ 0, %33 ]
  %59 = phi i8* [ %56, %54 ], [ null, %33 ]
  %60 = getelementptr inbounds i8, i8* %59, i64 %25
  %61 = ptrtoint i8* %60 to i64
  %62 = getelementptr inbounds i8, i8* %59, i64 %58
  %63 = getelementptr inbounds i8, i8* %60, i64 %1
  %64 = sub i64 %1, %61
  %65 = getelementptr i8, i8* %60, i64 %64
  %66 = ptrtoint i8* %65 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 0, i64 %66, i1 false) #6
  %67 = ptrtoint i8* %62 to i64
  %68 = ptrtoint i8* %63 to i64
  %69 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = load i8*, i8** %6, align 8
  %72 = ptrtoint i8* %71 to i64
  %73 = icmp eq i8* %71, %70
  br i1 %73, label %187, label %74

74:                                               ; preds = %57
  %75 = ptrtoint i8* %70 to i64
  %76 = ptrtoint i8* %71 to i64
  %77 = sub i64 %76, %75
  %78 = icmp ult i64 %77, 16
  br i1 %78, label %174, label %79

79:                                               ; preds = %74
  %80 = sub i64 %8, %72
  %81 = sub i64 %80, %24
  %82 = getelementptr i8, i8* %70, i64 %81
  %83 = ptrtoint i8* %82 to i64
  %84 = getelementptr i8, i8* %59, i64 %83
  %85 = icmp ult i8* %84, %71
  %86 = icmp ult i8* %70, %60
  %87 = and i1 %85, %86
  br i1 %87, label %174, label %88

88:                                               ; preds = %79
  %89 = and i64 %77, -16
  %90 = sub i64 0, %89
  %91 = getelementptr i8, i8* %60, i64 %90
  %92 = sub i64 0, %89
  %93 = getelementptr i8, i8* %71, i64 %92
  %94 = add i64 %89, -16
  %95 = lshr exact i64 %94, 4
  %96 = add nuw nsw i64 %95, 1
  %97 = and i64 %96, 3
  %98 = icmp ult i64 %94, 48
  br i1 %98, label %151, label %99

99:                                               ; preds = %88
  %100 = sub nsw i64 %96, %97
  %101 = getelementptr i8, i8* %60, i64 -1
  %102 = getelementptr inbounds i8, i8* %101, i64 -8
  %103 = getelementptr inbounds i8, i8* %71, i64 -16
  %104 = getelementptr inbounds i8, i8* %102, i64 -7
  %105 = getelementptr i8, i8* %60, i64 -1
  %106 = getelementptr inbounds i8, i8* %105, i64 -8
  %107 = getelementptr inbounds i8, i8* %71, i64 -16
  %108 = getelementptr inbounds i8, i8* %106, i64 -7
  %109 = getelementptr i8, i8* %60, i64 -1
  %110 = getelementptr inbounds i8, i8* %109, i64 -8
  %111 = getelementptr inbounds i8, i8* %71, i64 -16
  %112 = getelementptr inbounds i8, i8* %110, i64 -7
  %113 = getelementptr i8, i8* %60, i64 -1
  %114 = getelementptr inbounds i8, i8* %113, i64 -8
  %115 = getelementptr inbounds i8, i8* %71, i64 -16
  %116 = getelementptr inbounds i8, i8* %114, i64 -7
  br label %117

117:                                              ; preds = %117, %99
  %118 = phi i64 [ 0, %99 ], [ %148, %117 ]
  %119 = phi i64 [ %100, %99 ], [ %149, %117 ]
  %120 = sub i64 0, %118
  %121 = sub i64 0, %118
  %122 = getelementptr inbounds i8, i8* %103, i64 %121
  %123 = bitcast i8* %122 to <2 x i64>*
  %124 = load <2 x i64>, <2 x i64>* %123, align 1, !alias.scope !87
  %125 = getelementptr inbounds i8, i8* %104, i64 %120
  %126 = bitcast i8* %125 to <2 x i64>*
  store <2 x i64> %124, <2 x i64>* %126, align 1, !alias.scope !90, !noalias !87
  %127 = sub nuw nsw i64 -16, %118
  %128 = sub nuw nsw i64 -16, %118
  %129 = getelementptr inbounds i8, i8* %107, i64 %128
  %130 = bitcast i8* %129 to <2 x i64>*
  %131 = load <2 x i64>, <2 x i64>* %130, align 1, !alias.scope !87
  %132 = getelementptr inbounds i8, i8* %108, i64 %127
  %133 = bitcast i8* %132 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %133, align 1, !alias.scope !90, !noalias !87
  %134 = sub nuw nsw i64 -32, %118
  %135 = sub nuw nsw i64 -32, %118
  %136 = getelementptr inbounds i8, i8* %111, i64 %135
  %137 = bitcast i8* %136 to <2 x i64>*
  %138 = load <2 x i64>, <2 x i64>* %137, align 1, !alias.scope !87
  %139 = getelementptr inbounds i8, i8* %112, i64 %134
  %140 = bitcast i8* %139 to <2 x i64>*
  store <2 x i64> %138, <2 x i64>* %140, align 1, !alias.scope !90, !noalias !87
  %141 = sub nuw nsw i64 -48, %118
  %142 = sub nuw nsw i64 -48, %118
  %143 = getelementptr inbounds i8, i8* %115, i64 %142
  %144 = bitcast i8* %143 to <2 x i64>*
  %145 = load <2 x i64>, <2 x i64>* %144, align 1, !alias.scope !87
  %146 = getelementptr inbounds i8, i8* %116, i64 %141
  %147 = bitcast i8* %146 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %147, align 1, !alias.scope !90, !noalias !87
  %148 = add i64 %118, 64
  %149 = add i64 %119, -4
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %117, !llvm.loop !92

151:                                              ; preds = %117, %88
  %152 = phi i64 [ 0, %88 ], [ %148, %117 ]
  %153 = icmp eq i64 %97, 0
  br i1 %153, label %172, label %154

154:                                              ; preds = %151
  %155 = getelementptr i8, i8* %60, i64 -1
  %156 = getelementptr inbounds i8, i8* %155, i64 -8
  %157 = getelementptr inbounds i8, i8* %71, i64 -16
  %158 = getelementptr inbounds i8, i8* %156, i64 -7
  br label %159

159:                                              ; preds = %159, %154
  %160 = phi i64 [ %152, %154 ], [ %169, %159 ]
  %161 = phi i64 [ %97, %154 ], [ %170, %159 ]
  %162 = sub i64 0, %160
  %163 = sub i64 0, %160
  %164 = getelementptr inbounds i8, i8* %157, i64 %163
  %165 = bitcast i8* %164 to <2 x i64>*
  %166 = load <2 x i64>, <2 x i64>* %165, align 1, !alias.scope !87
  %167 = getelementptr inbounds i8, i8* %158, i64 %162
  %168 = bitcast i8* %167 to <2 x i64>*
  store <2 x i64> %166, <2 x i64>* %168, align 1, !alias.scope !90, !noalias !87
  %169 = add i64 %160, 16
  %170 = add i64 %161, -1
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %159, !llvm.loop !93

172:                                              ; preds = %159, %151
  %173 = icmp eq i64 %77, %89
  br i1 %173, label %184, label %174

174:                                              ; preds = %172, %79, %74
  %175 = phi i8* [ %60, %79 ], [ %60, %74 ], [ %91, %172 ]
  %176 = phi i8* [ %71, %79 ], [ %71, %74 ], [ %93, %172 ]
  br label %177

177:                                              ; preds = %174, %177
  %178 = phi i8* [ %180, %177 ], [ %175, %174 ]
  %179 = phi i8* [ %181, %177 ], [ %176, %174 ]
  %180 = getelementptr inbounds i8, i8* %178, i64 -1
  %181 = getelementptr inbounds i8, i8* %179, i64 -1
  %182 = load i8, i8* %181, align 1
  store i8 %182, i8* %180, align 1
  %183 = icmp eq i8* %181, %70
  br i1 %183, label %184, label %177, !llvm.loop !94

184:                                              ; preds = %177, %172
  %185 = phi i8* [ %91, %172 ], [ %180, %177 ]
  %186 = ptrtoint i8* %185 to i64
  br label %187

187:                                              ; preds = %184, %57
  %188 = phi i64 [ %61, %57 ], [ %186, %184 ]
  store i64 %188, i64* %23, align 8
  store i64 %68, i64* %7, align 8
  store i64 %67, i64* %4, align 8
  br label %189

189:                                              ; preds = %187, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !10}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !12}
!21 = distinct !{!21, !10}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !12}
!29 = distinct !{!29, !10}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !10}
!36 = distinct !{!36, !12}
!37 = distinct !{!37, !10}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !10}
!44 = distinct !{!44, !12}
!45 = distinct !{!45, !10}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = distinct !{!51, !10}
!52 = distinct !{!52, !12}
!53 = distinct !{!53, !10}
!54 = !{!55}
!55 = distinct !{!55, !56}
!56 = distinct !{!56, !"LVerDomain"}
!57 = !{!58}
!58 = distinct !{!58, !56}
!59 = distinct !{!59, !10}
!60 = distinct !{!60, !12}
!61 = distinct !{!61, !10}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !10}
!68 = distinct !{!68, !12}
!69 = distinct !{!69, !10}
!70 = !{!71}
!71 = distinct !{!71, !72}
!72 = distinct !{!72, !"LVerDomain"}
!73 = !{!74}
!74 = distinct !{!74, !72}
!75 = distinct !{!75, !10}
!76 = distinct !{!76, !12}
!77 = distinct !{!77, !10}
!78 = !{!79}
!79 = distinct !{!79, !80}
!80 = distinct !{!80, !"LVerDomain"}
!81 = !{!82}
!82 = distinct !{!82, !80}
!83 = distinct !{!83, !10}
!84 = distinct !{!84, !12}
!85 = distinct !{!85, !10}
!86 = !{!"branch_weights", i32 2000, i32 1}
!87 = !{!88}
!88 = distinct !{!88, !89}
!89 = distinct !{!89, !"LVerDomain"}
!90 = !{!91}
!91 = distinct !{!91, !89}
!92 = distinct !{!92, !10}
!93 = distinct !{!93, !12}
!94 = distinct !{!94, !10}
