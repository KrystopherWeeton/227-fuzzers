; ModuleID = '../../components/viz/common/resources/bitmap_allocation.cc'
source_filename = "../../components/viz/common/resources/bitmap_allocation.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::MappedReadOnlyRegion" = type { %"class.base::ReadOnlySharedMemoryRegion", %"class.base::WritableSharedMemoryMapping" }
%"class.base::ReadOnlySharedMemoryRegion" = type { %"class.base::subtle::PlatformSharedMemoryRegion" }
%"class.base::subtle::PlatformSharedMemoryRegion" = type { %"struct.base::subtle::ScopedFDPair", i32, i64, %"class.base::UnguessableToken" }
%"struct.base::subtle::ScopedFDPair" = type { %"class.base::ScopedGeneric", %"class.base::ScopedGeneric" }
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.base::WritableSharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.base::SharedMemoryMapping" = type { i32 (...)**, i8*, i64, i64, %"class.base::UnguessableToken" }
%"class.gfx::Size" = type { i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz17bitmap_allocation20AllocateSharedBitmapERKN3gfx4SizeENS_14ResourceFormatE(%"struct.base::MappedReadOnlyRegion"* noalias sret, %"class.gfx::Size"* nocapture readonly dereferenceable(8), i32) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %48, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %48, label %17

17:                                               ; preds = %13
  %18 = tail call i32 @_ZN3viz12BitsPerPixelENS_14ResourceFormatE(i32 %2) #4
  %19 = sext i32 %18 to i64
  %20 = icmp slt i32 %18, 0
  br i1 %20, label %48, label %21

21:                                               ; preds = %17
  %22 = icmp slt i32 %11, 0
  %23 = icmp ne i32 %18, 0
  %24 = and i1 %22, %23
  br i1 %24, label %48, label %25, !prof !2

25:                                               ; preds = %21
  %26 = sext i32 %11 to i64
  %27 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %19, i64 %26) #4
  %28 = extractvalue { i64, i1 } %27, 1
  %29 = extractvalue { i64, i1 } %27, 0
  %30 = select i1 %28, i64 0, i64 %29
  %31 = icmp ugt i64 %30, -8
  %32 = or i1 %28, %31
  br i1 %32, label %48, label %33

33:                                               ; preds = %25
  %34 = icmp eq i64 %30, 0
  %35 = add nsw i64 %30, 7
  %36 = lshr i64 %35, 3
  %37 = select i1 %34, i64 0, i64 %36
  %38 = load i32, i32* %14, align 4
  %39 = icmp slt i32 %38, 0
  %40 = icmp ne i64 %37, 0
  %41 = and i1 %40, %39
  br i1 %41, label %48, label %42, !prof !2

42:                                               ; preds = %33
  %43 = sext i32 %38 to i64
  %44 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %37, i64 %43) #4
  %45 = extractvalue { i64, i1 } %44, 1
  br i1 %45, label %48, label %46

46:                                               ; preds = %42
  %47 = extractvalue { i64, i1 } %44, 0
  br label %55

48:                                               ; preds = %13, %25, %17, %21, %42, %33, %3
  %49 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49)
  store i32 %2, i32* %4, align 4
  %50 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %50) #4
  %51 = load i32, i32* %10, align 4
  store i32 %51, i32* %5, align 4
  %52 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #4
  %53 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %54 = load i32, i32* %53, align 4
  store i32 %54, i32* %6, align 4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %50) #4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %52) #4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %49) #4
  call void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64 2147483647) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49)
  br label %55

55:                                               ; preds = %46, %48
  %56 = phi i64 [ 0, %48 ], [ %47, %46 ]
  %57 = bitcast %"struct.base::MappedReadOnlyRegion"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 -86, i64 112, i1 false)
  call void @_ZN4base26ReadOnlySharedMemoryRegion6CreateEm(%"struct.base::MappedReadOnlyRegion"* sret %0, i64 %56) #4
  %58 = getelementptr inbounds %"struct.base::MappedReadOnlyRegion", %"struct.base::MappedReadOnlyRegion"* %0, i64 0, i32 0
  %59 = call zeroext i1 @_ZNK4base26ReadOnlySharedMemoryRegion7IsValidEv(%"class.base::ReadOnlySharedMemoryRegion"* %58) #4
  br i1 %59, label %60, label %64

60:                                               ; preds = %55
  %61 = getelementptr inbounds %"struct.base::MappedReadOnlyRegion", %"struct.base::MappedReadOnlyRegion"* %0, i64 0, i32 1, i32 0, i32 1
  %62 = load i8*, i8** %61, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %64, label %71

64:                                               ; preds = %60, %55
  %65 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %65)
  store i32 %2, i32* %7, align 4
  %66 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %66) #4
  %67 = load i32, i32* %10, align 4
  store i32 %67, i32* %8, align 4
  %68 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %68) #4
  %69 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %70 = load i32, i32* %69, align 4
  store i32 %70, i32* %9, align 4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %66) #4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %68) #4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %65) #4
  call void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64 %56) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %66) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %65)
  br label %71

71:                                               ; preds = %60, %64
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN4base26ReadOnlySharedMemoryRegion6CreateEm(%"struct.base::MappedReadOnlyRegion"* sret, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4base5debug5AliasEPKv(i8*) local_unnamed_addr #2

declare void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64) local_unnamed_addr #2

declare zeroext i1 @_ZNK4base26ReadOnlySharedMemoryRegion7IsValidEv(%"class.base::ReadOnlySharedMemoryRegion"*) local_unnamed_addr #2

declare i32 @_ZN3viz12BitsPerPixelENS_14ResourceFormatE(i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 4001}
