; ModuleID = '../../third_party/libwebp/src/dsp/lossless_enc_sse2.c'
source_filename = "../../third_party/libwebp/src/dsp/lossless_enc_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8LMultipliers = type { i8, i8, i8 }

@VP8LSubtractGreenFromBlueAndRed = external local_unnamed_addr global void (i32*, i32)*, align 8
@VP8LTransformColor = external local_unnamed_addr global void (%struct.VP8LMultipliers*, i32*, i32)*, align 8
@VP8LCollectColorBlueTransforms = external local_unnamed_addr global void (i32*, i32, i32, i32, i32, i32, i32*)*, align 8
@VP8LCollectColorRedTransforms = external local_unnamed_addr global void (i32*, i32, i32, i32, i32, i32*)*, align 8
@VP8LAddVector = external local_unnamed_addr global void (i32*, i32*, i32*, i32)*, align 8
@VP8LAddVectorEq = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8
@VP8LCombinedShannonEntropy = external local_unnamed_addr global float (i32*, i32*)*, align 8
@VP8LVectorMismatch = external local_unnamed_addr global i32 (i32*, i32*, i32)*, align 8
@VP8LBundleColorMap = external local_unnamed_addr global void (i8*, i32, i32, i32*)*, align 8
@VP8LPredictorsSub = external local_unnamed_addr global [16 x void (i32*, i32*, i32, i32*)*], align 16
@kSLog2Table = external local_unnamed_addr constant [256 x float], align 16
@VP8LFastSLog2Slow = external local_unnamed_addr global float (i32)*, align 8
@VP8LPredictorsSub_C = external local_unnamed_addr global [16 x void (i32*, i32*, i32, i32*)*], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @VP8LEncDspInitSSE2() local_unnamed_addr #0 {
  store void (i32*, i32)* @SubtractGreenFromBlueAndRed_SSE2, void (i32*, i32)** @VP8LSubtractGreenFromBlueAndRed, align 8
  store void (%struct.VP8LMultipliers*, i32*, i32)* @TransformColor_SSE2, void (%struct.VP8LMultipliers*, i32*, i32)** @VP8LTransformColor, align 8
  store void (i32*, i32, i32, i32, i32, i32, i32*)* @CollectColorBlueTransforms_SSE2, void (i32*, i32, i32, i32, i32, i32, i32*)** @VP8LCollectColorBlueTransforms, align 8
  store void (i32*, i32, i32, i32, i32, i32*)* @CollectColorRedTransforms_SSE2, void (i32*, i32, i32, i32, i32, i32*)** @VP8LCollectColorRedTransforms, align 8
  store void (i32*, i32*, i32*, i32)* @AddVector_SSE2, void (i32*, i32*, i32*, i32)** @VP8LAddVector, align 8
  store void (i32*, i32*, i32)* @AddVectorEq_SSE2, void (i32*, i32*, i32)** @VP8LAddVectorEq, align 8
  store float (i32*, i32*)* @CombinedShannonEntropy_SSE2, float (i32*, i32*)** @VP8LCombinedShannonEntropy, align 8
  store i32 (i32*, i32*, i32)* @VectorMismatch_SSE2, i32 (i32*, i32*, i32)** @VP8LVectorMismatch, align 8
  store void (i8*, i32, i32, i32*)* @BundleColorMap_SSE2, void (i8*, i32, i32, i32*)** @VP8LBundleColorMap, align 8
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorSub0_SSE2, void (i32*, i32*, i32, i32*)* @PredictorSub1_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast ([16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorSub2_SSE2, void (i32*, i32*, i32, i32*)* @PredictorSub3_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 2) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorSub4_SSE2, void (i32*, i32*, i32, i32*)* @PredictorSub5_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 4) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorSub6_SSE2, void (i32*, i32*, i32, i32*)* @PredictorSub7_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 6) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorSub8_SSE2, void (i32*, i32*, i32, i32*)* @PredictorSub9_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 8) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorSub10_SSE2, void (i32*, i32*, i32, i32*)* @PredictorSub11_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 10) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorSub12_SSE2, void (i32*, i32*, i32, i32*)* @PredictorSub13_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 12) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorSub0_SSE2, void (i32*, i32*, i32, i32*)* @PredictorSub0_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 14) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @SubtractGreenFromBlueAndRed_SSE2(i32*, i32) #1 {
  %3 = icmp slt i32 %1, 4
  br i1 %3, label %25, label %4

4:                                                ; preds = %2
  %5 = sext i32 %1 to i64
  br label %6

6:                                                ; preds = %4, %6
  %7 = phi i64 [ 0, %4 ], [ %22, %6 ]
  %8 = phi i64 [ 4, %4 ], [ %20, %6 ]
  %9 = getelementptr inbounds i32, i32* %0, i64 %7
  %10 = bitcast i32* %9 to <2 x i64>*
  %11 = load <2 x i64>, <2 x i64>* %10, align 1
  %12 = bitcast <2 x i64> %11 to <8 x i16>
  %13 = lshr <8 x i16> %12, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %14 = shufflevector <8 x i16> %13, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 2, i32 2, i32 4, i32 undef, i32 6, i32 undef>
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 4, i32 6, i32 6>
  %16 = bitcast <2 x i64> %11 to <16 x i8>
  %17 = bitcast <8 x i16> %15 to <16 x i8>
  %18 = sub <16 x i8> %16, %17
  %19 = bitcast i32* %9 to <16 x i8>*
  store <16 x i8> %18, <16 x i8>* %19, align 1
  %20 = add nuw nsw i64 %8, 4
  %21 = icmp sgt i64 %20, %5
  %22 = add nuw nsw i64 %7, 4
  br i1 %21, label %23, label %6

23:                                               ; preds = %6
  %24 = and i32 %1, -4
  br label %25

25:                                               ; preds = %23, %2
  %26 = phi i32 [ 0, %2 ], [ %24, %23 ]
  %27 = icmp eq i32 %26, %1
  br i1 %27, label %32, label %28

28:                                               ; preds = %25
  %29 = zext i32 %26 to i64
  %30 = getelementptr inbounds i32, i32* %0, i64 %29
  %31 = sub nsw i32 %1, %26
  tail call void @VP8LSubtractGreenFromBlueAndRed_C(i32* %30, i32 %31) #6
  br label %32

32:                                               ; preds = %25, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @TransformColor_SSE2(%struct.VP8LMultipliers*, i32*, i32) #1 {
  %4 = icmp slt i32 %2, 4
  br i1 %4, label %61, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %0, i64 0, i32 2
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i16
  %9 = shl nuw i16 %8, 8
  %10 = ashr exact i16 %9, 5
  %11 = zext i16 %10 to i32
  %12 = shl nuw i32 %11, 16
  %13 = insertelement <4 x i32> undef, i32 %12, i32 0
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> zeroinitializer
  %15 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %0, i64 0, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i16
  %18 = shl nuw i16 %17, 8
  %19 = ashr exact i16 %18, 5
  %20 = zext i16 %19 to i32
  %21 = shl nuw i32 %20, 16
  %22 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %0, i64 0, i32 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i16
  %25 = shl nuw i16 %24, 8
  %26 = ashr exact i16 %25, 5
  %27 = zext i16 %26 to i32
  %28 = or i32 %21, %27
  %29 = insertelement <4 x i32> undef, i32 %28, i32 0
  %30 = shufflevector <4 x i32> %29, <4 x i32> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x i32> %30 to <8 x i16>
  %32 = bitcast <4 x i32> %14 to <8 x i16>
  %33 = sext i32 %2 to i64
  br label %34

34:                                               ; preds = %5, %34
  %35 = phi i64 [ 0, %5 ], [ %58, %34 ]
  %36 = phi i64 [ 4, %5 ], [ %56, %34 ]
  %37 = getelementptr inbounds i32, i32* %1, i64 %35
  %38 = bitcast i32* %37 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 1
  %40 = bitcast <2 x i64> %39 to <8 x i16>
  %41 = and <8 x i16> %40, <i16 -256, i16 undef, i16 -256, i16 undef, i16 -256, i16 undef, i16 -256, i16 undef>
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 2, i32 2, i32 4, i32 undef, i32 6, i32 undef>
  %43 = shufflevector <8 x i16> %42, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 4, i32 6, i32 6>
  %44 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %43, <8 x i16> %31) #6
  %45 = shl <8 x i16> %40, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %46 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %45, <8 x i16> %32) #6
  %47 = bitcast <8 x i16> %46 to <4 x i32>
  %48 = lshr <4 x i32> %47, <i32 16, i32 16, i32 16, i32 16>
  %49 = bitcast <4 x i32> %48 to <16 x i8>
  %50 = bitcast <8 x i16> %44 to <16 x i8>
  %51 = add <16 x i8> %49, %50
  %52 = bitcast <2 x i64> %39 to <16 x i8>
  %53 = and <16 x i8> %51, <i8 -1, i8 0, i8 -1, i8 0, i8 -1, i8 0, i8 -1, i8 0, i8 -1, i8 0, i8 -1, i8 0, i8 -1, i8 0, i8 -1, i8 0>
  %54 = sub <16 x i8> %52, %53
  %55 = bitcast i32* %37 to <16 x i8>*
  store <16 x i8> %54, <16 x i8>* %55, align 1
  %56 = add nuw nsw i64 %36, 4
  %57 = icmp sgt i64 %56, %33
  %58 = add nuw nsw i64 %35, 4
  br i1 %57, label %59, label %34

59:                                               ; preds = %34
  %60 = and i32 %2, -4
  br label %61

61:                                               ; preds = %59, %3
  %62 = phi i32 [ 0, %3 ], [ %60, %59 ]
  %63 = icmp eq i32 %62, %2
  br i1 %63, label %68, label %64

64:                                               ; preds = %61
  %65 = zext i32 %62 to i64
  %66 = getelementptr inbounds i32, i32* %1, i64 %65
  %67 = sub nsw i32 %2, %62
  tail call void @VP8LTransformColor_C(%struct.VP8LMultipliers* %0, i32* %66, i32 %67) #6
  br label %68

68:                                               ; preds = %61, %64
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @CollectColorBlueTransforms_SSE2(i32*, i32, i32, i32, i32, i32, i32*) #1 {
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %115

9:                                                ; preds = %7
  %10 = shl i32 %4, 24
  %11 = ashr exact i32 %10, 21
  %12 = and i32 %11, 65528
  %13 = insertelement <4 x i32> undef, i32 %12, i32 0
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> zeroinitializer
  %15 = shl i32 %5, 24
  %16 = ashr exact i32 %15, 5
  %17 = insertelement <4 x i32> undef, i32 %16, i32 0
  %18 = shufflevector <4 x i32> %17, <4 x i32> undef, <4 x i32> zeroinitializer
  %19 = icmp slt i32 %2, 8
  %20 = bitcast <4 x i32> %18 to <8 x i16>
  %21 = bitcast <4 x i32> %14 to <8 x i16>
  %22 = sext i32 %2 to i64
  %23 = sext i32 %1 to i64
  %24 = zext i32 %3 to i64
  br label %25

25:                                               ; preds = %112, %9
  %26 = phi i64 [ 0, %9 ], [ %113, %112 ]
  %27 = mul nsw i64 %26, %23
  %28 = getelementptr inbounds i32, i32* %0, i64 %27
  br i1 %19, label %112, label %29

29:                                               ; preds = %25, %29
  %30 = phi i64 [ %111, %29 ], [ 0, %25 ]
  %31 = phi i64 [ %109, %29 ], [ 8, %25 ]
  %32 = getelementptr inbounds i32, i32* %28, i64 %30
  %33 = bitcast i32* %32 to <2 x i64>*
  %34 = load <2 x i64>, <2 x i64>* %33, align 1
  %35 = or i64 %30, 4
  %36 = getelementptr inbounds i32, i32* %28, i64 %35
  %37 = bitcast i32* %36 to <2 x i64>*
  %38 = load <2 x i64>, <2 x i64>* %37, align 1
  %39 = bitcast <2 x i64> %34 to <8 x i16>
  %40 = shl <8 x i16> %39, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %41 = bitcast <2 x i64> %38 to <8 x i16>
  %42 = shl <8 x i16> %41, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %43 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %40, <8 x i16> %20) #6
  %44 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %42, <8 x i16> %20) #6
  %45 = and <8 x i16> %39, <i16 -256, i16 0, i16 -256, i16 0, i16 -256, i16 0, i16 -256, i16 0>
  %46 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %45, <8 x i16> %21) #6
  %47 = and <8 x i16> %41, <i16 -256, i16 0, i16 -256, i16 0, i16 -256, i16 0, i16 -256, i16 0>
  %48 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %47, <8 x i16> %21) #6
  %49 = bitcast <2 x i64> %34 to <16 x i8>
  %50 = bitcast <8 x i16> %46 to <16 x i8>
  %51 = sub <16 x i8> %49, %50
  %52 = bitcast <2 x i64> %38 to <16 x i8>
  %53 = bitcast <8 x i16> %48 to <16 x i8>
  %54 = sub <16 x i8> %52, %53
  %55 = bitcast <8 x i16> %43 to <4 x i32>
  %56 = lshr <4 x i32> %55, <i32 16, i32 16, i32 16, i32 16>
  %57 = bitcast <8 x i16> %44 to <4 x i32>
  %58 = lshr <4 x i32> %57, <i32 16, i32 16, i32 16, i32 16>
  %59 = bitcast <4 x i32> %56 to <16 x i8>
  %60 = sub <16 x i8> %51, %59
  %61 = bitcast <4 x i32> %58 to <16 x i8>
  %62 = sub <16 x i8> %54, %61
  %63 = bitcast <16 x i8> %60 to <4 x i32>
  %64 = and <4 x i32> %63, <i32 255, i32 255, i32 255, i32 255>
  %65 = bitcast <16 x i8> %62 to <4 x i32>
  %66 = and <4 x i32> %65, <i32 255, i32 255, i32 255, i32 255>
  %67 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %64, <4 x i32> %66) #6
  %68 = bitcast <8 x i16> %67 to <2 x i64>
  %69 = extractelement <2 x i64> %68, i32 0
  %70 = and i64 %69, 65535
  %71 = getelementptr inbounds i32, i32* %6, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %71, align 4
  %74 = extractelement <8 x i16> %67, i32 1
  %75 = zext i16 %74 to i64
  %76 = getelementptr inbounds i32, i32* %6, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %76, align 4
  %79 = extractelement <8 x i16> %67, i32 2
  %80 = zext i16 %79 to i64
  %81 = getelementptr inbounds i32, i32* %6, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %81, align 4
  %84 = extractelement <8 x i16> %67, i32 3
  %85 = zext i16 %84 to i64
  %86 = getelementptr inbounds i32, i32* %6, i64 %85
  %87 = load i32, i32* %86, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %86, align 4
  %89 = extractelement <8 x i16> %67, i32 4
  %90 = zext i16 %89 to i64
  %91 = getelementptr inbounds i32, i32* %6, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %91, align 4
  %94 = extractelement <8 x i16> %67, i32 5
  %95 = zext i16 %94 to i64
  %96 = getelementptr inbounds i32, i32* %6, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %96, align 4
  %99 = extractelement <8 x i16> %67, i32 6
  %100 = zext i16 %99 to i64
  %101 = getelementptr inbounds i32, i32* %6, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %101, align 4
  %104 = extractelement <8 x i16> %67, i32 7
  %105 = zext i16 %104 to i64
  %106 = getelementptr inbounds i32, i32* %6, i64 %105
  %107 = load i32, i32* %106, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %106, align 4
  %109 = add nuw nsw i64 %31, 8
  %110 = icmp sgt i64 %109, %22
  %111 = add nuw nsw i64 %30, 8
  br i1 %110, label %112, label %29

112:                                              ; preds = %29, %25
  %113 = add nuw nsw i64 %26, 1
  %114 = icmp eq i64 %113, %24
  br i1 %114, label %115, label %25

115:                                              ; preds = %112, %7
  %116 = and i32 %2, 7
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %124, label %118

118:                                              ; preds = %115
  %119 = sext i32 %2 to i64
  %120 = getelementptr inbounds i32, i32* %0, i64 %119
  %121 = zext i32 %116 to i64
  %122 = sub nsw i64 0, %121
  %123 = getelementptr inbounds i32, i32* %120, i64 %122
  tail call void @VP8LCollectColorBlueTransforms_C(i32* %123, i32 %1, i32 %116, i32 %3, i32 %4, i32 %5, i32* %6) #6
  br label %124

124:                                              ; preds = %115, %118
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @CollectColorRedTransforms_SSE2(i32*, i32, i32, i32, i32, i32*) #1 {
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %101

8:                                                ; preds = %6
  %9 = shl i32 %4, 24
  %10 = ashr exact i32 %9, 21
  %11 = and i32 %10, 65528
  %12 = insertelement <4 x i32> undef, i32 %11, i32 0
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> zeroinitializer
  %14 = icmp slt i32 %2, 8
  %15 = bitcast <4 x i32> %13 to <8 x i16>
  %16 = sext i32 %2 to i64
  %17 = sext i32 %1 to i64
  %18 = zext i32 %3 to i64
  br label %19

19:                                               ; preds = %98, %8
  %20 = phi i64 [ 0, %8 ], [ %99, %98 ]
  %21 = mul nsw i64 %20, %17
  %22 = getelementptr inbounds i32, i32* %0, i64 %21
  br i1 %14, label %98, label %23

23:                                               ; preds = %19, %23
  %24 = phi i64 [ %97, %23 ], [ 0, %19 ]
  %25 = phi i64 [ %95, %23 ], [ 8, %19 ]
  %26 = getelementptr inbounds i32, i32* %22, i64 %24
  %27 = bitcast i32* %26 to <2 x i64>*
  %28 = load <2 x i64>, <2 x i64>* %27, align 1
  %29 = or i64 %24, 4
  %30 = getelementptr inbounds i32, i32* %22, i64 %29
  %31 = bitcast i32* %30 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 1
  %33 = bitcast <2 x i64> %28 to <4 x i32>
  %34 = lshr <4 x i32> %33, <i32 16, i32 16, i32 16, i32 16>
  %35 = bitcast <2 x i64> %32 to <4 x i32>
  %36 = lshr <4 x i32> %35, <i32 16, i32 16, i32 16, i32 16>
  %37 = bitcast <2 x i64> %28 to <8 x i16>
  %38 = and <8 x i16> %37, <i16 -256, i16 0, i16 -256, i16 0, i16 -256, i16 0, i16 -256, i16 0>
  %39 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %38, <8 x i16> %15) #6
  %40 = bitcast <2 x i64> %32 to <8 x i16>
  %41 = and <8 x i16> %40, <i16 -256, i16 0, i16 -256, i16 0, i16 -256, i16 0, i16 -256, i16 0>
  %42 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %41, <8 x i16> %15) #6
  %43 = bitcast <4 x i32> %34 to <16 x i8>
  %44 = bitcast <8 x i16> %39 to <16 x i8>
  %45 = sub <16 x i8> %43, %44
  %46 = bitcast <4 x i32> %36 to <16 x i8>
  %47 = bitcast <8 x i16> %42 to <16 x i8>
  %48 = sub <16 x i8> %46, %47
  %49 = bitcast <16 x i8> %45 to <4 x i32>
  %50 = and <4 x i32> %49, <i32 255, i32 255, i32 255, i32 255>
  %51 = bitcast <16 x i8> %48 to <4 x i32>
  %52 = and <4 x i32> %51, <i32 255, i32 255, i32 255, i32 255>
  %53 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %50, <4 x i32> %52) #6
  %54 = bitcast <8 x i16> %53 to <2 x i64>
  %55 = extractelement <2 x i64> %54, i32 0
  %56 = and i64 %55, 65535
  %57 = getelementptr inbounds i32, i32* %5, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %57, align 4
  %60 = extractelement <8 x i16> %53, i32 1
  %61 = zext i16 %60 to i64
  %62 = getelementptr inbounds i32, i32* %5, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %62, align 4
  %65 = extractelement <8 x i16> %53, i32 2
  %66 = zext i16 %65 to i64
  %67 = getelementptr inbounds i32, i32* %5, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %67, align 4
  %70 = extractelement <8 x i16> %53, i32 3
  %71 = zext i16 %70 to i64
  %72 = getelementptr inbounds i32, i32* %5, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %72, align 4
  %75 = extractelement <8 x i16> %53, i32 4
  %76 = zext i16 %75 to i64
  %77 = getelementptr inbounds i32, i32* %5, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %77, align 4
  %80 = extractelement <8 x i16> %53, i32 5
  %81 = zext i16 %80 to i64
  %82 = getelementptr inbounds i32, i32* %5, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %82, align 4
  %85 = extractelement <8 x i16> %53, i32 6
  %86 = zext i16 %85 to i64
  %87 = getelementptr inbounds i32, i32* %5, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %87, align 4
  %90 = extractelement <8 x i16> %53, i32 7
  %91 = zext i16 %90 to i64
  %92 = getelementptr inbounds i32, i32* %5, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %92, align 4
  %95 = add nuw nsw i64 %25, 8
  %96 = icmp sgt i64 %95, %16
  %97 = add nuw nsw i64 %24, 8
  br i1 %96, label %98, label %23

98:                                               ; preds = %23, %19
  %99 = add nuw nsw i64 %20, 1
  %100 = icmp eq i64 %99, %18
  br i1 %100, label %101, label %19

101:                                              ; preds = %98, %6
  %102 = and i32 %2, 7
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %110, label %104

104:                                              ; preds = %101
  %105 = sext i32 %2 to i64
  %106 = getelementptr inbounds i32, i32* %0, i64 %105
  %107 = zext i32 %102 to i64
  %108 = sub nsw i64 0, %107
  %109 = getelementptr inbounds i32, i32* %106, i64 %108
  tail call void @VP8LCollectColorRedTransforms_C(i32* %109, i32 %1, i32 %102, i32 %3, i32 %4, i32* %5) #6
  br label %110

110:                                              ; preds = %101, %104
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @AddVector_SSE2(i32* nocapture readonly, i32* nocapture readonly, i32* nocapture, i32) #2 {
  %5 = icmp slt i32 %3, 16
  br i1 %5, label %10, label %6

6:                                                ; preds = %4
  %7 = sext i32 %3 to i64
  br label %134

8:                                                ; preds = %134
  %9 = and i32 %3, -16
  br label %10

10:                                               ; preds = %8, %4
  %11 = phi i32 [ 0, %4 ], [ %9, %8 ]
  %12 = icmp slt i32 %11, %3
  br i1 %12, label %13, label %210

13:                                               ; preds = %10
  %14 = zext i32 %11 to i64
  %15 = zext i32 %3 to i64
  %16 = sub nsw i64 %15, %14
  %17 = icmp ult i64 %16, 8
  br i1 %17, label %18, label %40

18:                                               ; preds = %132, %40, %13
  %19 = phi i64 [ %14, %40 ], [ %14, %13 ], [ %56, %132 ]
  %20 = sub nsw i64 %15, %19
  %21 = xor i64 %19, -1
  %22 = add nsw i64 %21, %15
  %23 = and i64 %20, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %37, label %25

25:                                               ; preds = %18, %25
  %26 = phi i64 [ %34, %25 ], [ %19, %18 ]
  %27 = phi i64 [ %35, %25 ], [ %23, %18 ]
  %28 = getelementptr inbounds i32, i32* %0, i64 %26
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds i32, i32* %1, i64 %26
  %31 = load i32, i32* %30, align 4
  %32 = add i32 %31, %29
  %33 = getelementptr inbounds i32, i32* %2, i64 %26
  store i32 %32, i32* %33, align 4
  %34 = add nuw nsw i64 %26, 1
  %35 = add i64 %27, -1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %25, !llvm.loop !2

37:                                               ; preds = %25, %18
  %38 = phi i64 [ %19, %18 ], [ %34, %25 ]
  %39 = icmp ult i64 %22, 3
  br i1 %39, label %210, label %179

40:                                               ; preds = %13
  %41 = getelementptr i32, i32* %2, i64 %14
  %42 = getelementptr i32, i32* %2, i64 %15
  %43 = getelementptr i32, i32* %0, i64 %14
  %44 = getelementptr i32, i32* %0, i64 %15
  %45 = getelementptr i32, i32* %1, i64 %14
  %46 = getelementptr i32, i32* %1, i64 %15
  %47 = icmp ult i32* %41, %44
  %48 = icmp ult i32* %43, %42
  %49 = and i1 %47, %48
  %50 = icmp ult i32* %41, %46
  %51 = icmp ult i32* %45, %42
  %52 = and i1 %50, %51
  %53 = or i1 %49, %52
  br i1 %53, label %18, label %54

54:                                               ; preds = %40
  %55 = and i64 %16, -8
  %56 = add nsw i64 %55, %14
  %57 = add nsw i64 %55, -8
  %58 = lshr exact i64 %57, 3
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 1
  %61 = icmp eq i64 %57, 0
  br i1 %61, label %109, label %62

62:                                               ; preds = %54
  %63 = sub nuw nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %106, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %107, %64 ]
  %67 = add i64 %65, %14
  %68 = getelementptr inbounds i32, i32* %0, i64 %67
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4, !alias.scope !4
  %71 = getelementptr inbounds i32, i32* %68, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4, !alias.scope !4
  %74 = getelementptr inbounds i32, i32* %1, i64 %67
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 4, !alias.scope !7
  %77 = getelementptr inbounds i32, i32* %74, i64 4
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4, !alias.scope !7
  %80 = add <4 x i32> %76, %70
  %81 = add <4 x i32> %79, %73
  %82 = getelementptr inbounds i32, i32* %2, i64 %67
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %83, align 4, !alias.scope !9, !noalias !11
  %84 = getelementptr inbounds i32, i32* %82, i64 4
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %85, align 4, !alias.scope !9, !noalias !11
  %86 = or i64 %65, 8
  %87 = add i64 %86, %14
  %88 = getelementptr inbounds i32, i32* %0, i64 %87
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4, !alias.scope !4
  %91 = getelementptr inbounds i32, i32* %88, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !4
  %94 = getelementptr inbounds i32, i32* %1, i64 %87
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !alias.scope !7
  %97 = getelementptr inbounds i32, i32* %94, i64 4
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4, !alias.scope !7
  %100 = add <4 x i32> %96, %90
  %101 = add <4 x i32> %99, %93
  %102 = getelementptr inbounds i32, i32* %2, i64 %87
  %103 = bitcast i32* %102 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %103, align 4, !alias.scope !9, !noalias !11
  %104 = getelementptr inbounds i32, i32* %102, i64 4
  %105 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %105, align 4, !alias.scope !9, !noalias !11
  %106 = add i64 %65, 16
  %107 = add i64 %66, -2
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %64, !llvm.loop !12

109:                                              ; preds = %64, %54
  %110 = phi i64 [ 0, %54 ], [ %106, %64 ]
  %111 = icmp eq i64 %60, 0
  br i1 %111, label %132, label %112

112:                                              ; preds = %109
  %113 = add i64 %110, %14
  %114 = getelementptr inbounds i32, i32* %0, i64 %113
  %115 = bitcast i32* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 4, !alias.scope !4
  %117 = getelementptr inbounds i32, i32* %114, i64 4
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !4
  %120 = getelementptr inbounds i32, i32* %1, i64 %113
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !7
  %123 = getelementptr inbounds i32, i32* %120, i64 4
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 4, !alias.scope !7
  %126 = add <4 x i32> %122, %116
  %127 = add <4 x i32> %125, %119
  %128 = getelementptr inbounds i32, i32* %2, i64 %113
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 4, !alias.scope !9, !noalias !11
  %130 = getelementptr inbounds i32, i32* %128, i64 4
  %131 = bitcast i32* %130 to <4 x i32>*
  store <4 x i32> %127, <4 x i32>* %131, align 4, !alias.scope !9, !noalias !11
  br label %132

132:                                              ; preds = %109, %112
  %133 = icmp eq i64 %16, %55
  br i1 %133, label %210, label %18

134:                                              ; preds = %6, %134
  %135 = phi i64 [ 0, %6 ], [ %178, %134 ]
  %136 = phi i64 [ 16, %6 ], [ %176, %134 ]
  %137 = getelementptr inbounds i32, i32* %0, i64 %135
  %138 = bitcast i32* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 1
  %140 = or i64 %135, 4
  %141 = getelementptr inbounds i32, i32* %0, i64 %140
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 1
  %144 = or i64 %135, 8
  %145 = getelementptr inbounds i32, i32* %0, i64 %144
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 1
  %148 = or i64 %135, 12
  %149 = getelementptr inbounds i32, i32* %0, i64 %148
  %150 = bitcast i32* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 1
  %152 = getelementptr inbounds i32, i32* %1, i64 %135
  %153 = bitcast i32* %152 to <4 x i32>*
  %154 = load <4 x i32>, <4 x i32>* %153, align 1
  %155 = getelementptr inbounds i32, i32* %1, i64 %140
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 1
  %158 = getelementptr inbounds i32, i32* %1, i64 %144
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 1
  %161 = getelementptr inbounds i32, i32* %1, i64 %148
  %162 = bitcast i32* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 1
  %164 = getelementptr inbounds i32, i32* %2, i64 %135
  %165 = add <4 x i32> %154, %139
  %166 = bitcast i32* %164 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %166, align 1
  %167 = getelementptr inbounds i32, i32* %2, i64 %140
  %168 = add <4 x i32> %157, %143
  %169 = bitcast i32* %167 to <4 x i32>*
  store <4 x i32> %168, <4 x i32>* %169, align 1
  %170 = getelementptr inbounds i32, i32* %2, i64 %144
  %171 = add <4 x i32> %160, %147
  %172 = bitcast i32* %170 to <4 x i32>*
  store <4 x i32> %171, <4 x i32>* %172, align 1
  %173 = getelementptr inbounds i32, i32* %2, i64 %148
  %174 = add <4 x i32> %163, %151
  %175 = bitcast i32* %173 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %175, align 1
  %176 = add nuw nsw i64 %136, 16
  %177 = icmp sgt i64 %176, %7
  %178 = add nuw nsw i64 %135, 16
  br i1 %177, label %8, label %134

179:                                              ; preds = %37, %179
  %180 = phi i64 [ %208, %179 ], [ %38, %37 ]
  %181 = getelementptr inbounds i32, i32* %0, i64 %180
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds i32, i32* %1, i64 %180
  %184 = load i32, i32* %183, align 4
  %185 = add i32 %184, %182
  %186 = getelementptr inbounds i32, i32* %2, i64 %180
  store i32 %185, i32* %186, align 4
  %187 = add nuw nsw i64 %180, 1
  %188 = getelementptr inbounds i32, i32* %0, i64 %187
  %189 = load i32, i32* %188, align 4
  %190 = getelementptr inbounds i32, i32* %1, i64 %187
  %191 = load i32, i32* %190, align 4
  %192 = add i32 %191, %189
  %193 = getelementptr inbounds i32, i32* %2, i64 %187
  store i32 %192, i32* %193, align 4
  %194 = add nuw nsw i64 %180, 2
  %195 = getelementptr inbounds i32, i32* %0, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = getelementptr inbounds i32, i32* %1, i64 %194
  %198 = load i32, i32* %197, align 4
  %199 = add i32 %198, %196
  %200 = getelementptr inbounds i32, i32* %2, i64 %194
  store i32 %199, i32* %200, align 4
  %201 = add nuw nsw i64 %180, 3
  %202 = getelementptr inbounds i32, i32* %0, i64 %201
  %203 = load i32, i32* %202, align 4
  %204 = getelementptr inbounds i32, i32* %1, i64 %201
  %205 = load i32, i32* %204, align 4
  %206 = add i32 %205, %203
  %207 = getelementptr inbounds i32, i32* %2, i64 %201
  store i32 %206, i32* %207, align 4
  %208 = add nuw nsw i64 %180, 4
  %209 = icmp eq i64 %208, %15
  br i1 %209, label %210, label %179, !llvm.loop !14

210:                                              ; preds = %37, %179, %132, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @AddVectorEq_SSE2(i32* nocapture readonly, i32* nocapture, i32) #2 {
  %4 = icmp slt i32 %2, 16
  br i1 %4, label %9, label %5

5:                                                ; preds = %3
  %6 = sext i32 %2 to i64
  br label %120

7:                                                ; preds = %120
  %8 = and i32 %2, -16
  br label %9

9:                                                ; preds = %7, %3
  %10 = phi i32 [ 0, %3 ], [ %8, %7 ]
  %11 = icmp slt i32 %10, %2
  br i1 %11, label %12, label %184

12:                                               ; preds = %9
  %13 = zext i32 %10 to i64
  %14 = zext i32 %2 to i64
  %15 = sub nsw i64 %14, %13
  %16 = icmp ult i64 %15, 8
  br i1 %16, label %17, label %38

17:                                               ; preds = %118, %38, %12
  %18 = phi i64 [ %13, %38 ], [ %13, %12 ], [ %48, %118 ]
  %19 = sub nsw i64 %14, %18
  %20 = xor i64 %18, -1
  %21 = add nsw i64 %20, %14
  %22 = and i64 %19, 3
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %35, label %24

24:                                               ; preds = %17, %24
  %25 = phi i64 [ %32, %24 ], [ %18, %17 ]
  %26 = phi i64 [ %33, %24 ], [ %22, %17 ]
  %27 = getelementptr inbounds i32, i32* %0, i64 %25
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds i32, i32* %1, i64 %25
  %30 = load i32, i32* %29, align 4
  %31 = add i32 %30, %28
  store i32 %31, i32* %29, align 4
  %32 = add nuw nsw i64 %25, 1
  %33 = add i64 %26, -1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %24, !llvm.loop !15

35:                                               ; preds = %24, %17
  %36 = phi i64 [ %18, %17 ], [ %32, %24 ]
  %37 = icmp ult i64 %21, 3
  br i1 %37, label %184, label %157

38:                                               ; preds = %12
  %39 = getelementptr i32, i32* %1, i64 %13
  %40 = getelementptr i32, i32* %1, i64 %14
  %41 = getelementptr i32, i32* %0, i64 %13
  %42 = getelementptr i32, i32* %0, i64 %14
  %43 = icmp ult i32* %39, %42
  %44 = icmp ult i32* %41, %40
  %45 = and i1 %43, %44
  br i1 %45, label %17, label %46

46:                                               ; preds = %38
  %47 = and i64 %15, -8
  %48 = add nsw i64 %47, %13
  %49 = add nsw i64 %47, -8
  %50 = lshr exact i64 %49, 3
  %51 = add nuw nsw i64 %50, 1
  %52 = and i64 %51, 1
  %53 = icmp eq i64 %49, 0
  br i1 %53, label %97, label %54

54:                                               ; preds = %46
  %55 = sub nuw nsw i64 %51, %52
  br label %56

56:                                               ; preds = %56, %54
  %57 = phi i64 [ 0, %54 ], [ %94, %56 ]
  %58 = phi i64 [ %55, %54 ], [ %95, %56 ]
  %59 = add i64 %57, %13
  %60 = getelementptr inbounds i32, i32* %0, i64 %59
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 4, !alias.scope !16
  %63 = getelementptr inbounds i32, i32* %60, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4, !alias.scope !16
  %66 = getelementptr inbounds i32, i32* %1, i64 %59
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4, !alias.scope !19, !noalias !16
  %69 = getelementptr inbounds i32, i32* %66, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4, !alias.scope !19, !noalias !16
  %72 = add <4 x i32> %68, %62
  %73 = add <4 x i32> %71, %65
  %74 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %74, align 4, !alias.scope !19, !noalias !16
  %75 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %73, <4 x i32>* %75, align 4, !alias.scope !19, !noalias !16
  %76 = or i64 %57, 8
  %77 = add i64 %76, %13
  %78 = getelementptr inbounds i32, i32* %0, i64 %77
  %79 = bitcast i32* %78 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4, !alias.scope !16
  %81 = getelementptr inbounds i32, i32* %78, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4, !alias.scope !16
  %84 = getelementptr inbounds i32, i32* %1, i64 %77
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4, !alias.scope !19, !noalias !16
  %87 = getelementptr inbounds i32, i32* %84, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !19, !noalias !16
  %90 = add <4 x i32> %86, %80
  %91 = add <4 x i32> %89, %83
  %92 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %90, <4 x i32>* %92, align 4, !alias.scope !19, !noalias !16
  %93 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %93, align 4, !alias.scope !19, !noalias !16
  %94 = add i64 %57, 16
  %95 = add i64 %58, -2
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %56, !llvm.loop !21

97:                                               ; preds = %56, %46
  %98 = phi i64 [ 0, %46 ], [ %94, %56 ]
  %99 = icmp eq i64 %52, 0
  br i1 %99, label %118, label %100

100:                                              ; preds = %97
  %101 = add i64 %98, %13
  %102 = getelementptr inbounds i32, i32* %0, i64 %101
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !16
  %105 = getelementptr inbounds i32, i32* %102, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4, !alias.scope !16
  %108 = getelementptr inbounds i32, i32* %1, i64 %101
  %109 = bitcast i32* %108 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !19, !noalias !16
  %111 = getelementptr inbounds i32, i32* %108, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4, !alias.scope !19, !noalias !16
  %114 = add <4 x i32> %110, %104
  %115 = add <4 x i32> %113, %107
  %116 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %116, align 4, !alias.scope !19, !noalias !16
  %117 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %117, align 4, !alias.scope !19, !noalias !16
  br label %118

118:                                              ; preds = %97, %100
  %119 = icmp eq i64 %15, %47
  br i1 %119, label %184, label %17

120:                                              ; preds = %5, %120
  %121 = phi i64 [ 0, %5 ], [ %156, %120 ]
  %122 = phi i64 [ 16, %5 ], [ %154, %120 ]
  %123 = getelementptr inbounds i32, i32* %0, i64 %121
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 1
  %126 = or i64 %121, 4
  %127 = getelementptr inbounds i32, i32* %0, i64 %126
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 1
  %130 = or i64 %121, 8
  %131 = getelementptr inbounds i32, i32* %0, i64 %130
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 1
  %134 = or i64 %121, 12
  %135 = getelementptr inbounds i32, i32* %0, i64 %134
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 1
  %138 = getelementptr inbounds i32, i32* %1, i64 %121
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 1
  %141 = getelementptr inbounds i32, i32* %1, i64 %126
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 1
  %144 = getelementptr inbounds i32, i32* %1, i64 %130
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 1
  %147 = getelementptr inbounds i32, i32* %1, i64 %134
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 1
  %150 = add <4 x i32> %140, %125
  store <4 x i32> %150, <4 x i32>* %139, align 1
  %151 = add <4 x i32> %143, %129
  store <4 x i32> %151, <4 x i32>* %142, align 1
  %152 = add <4 x i32> %146, %133
  store <4 x i32> %152, <4 x i32>* %145, align 1
  %153 = add <4 x i32> %149, %137
  store <4 x i32> %153, <4 x i32>* %148, align 1
  %154 = add nuw nsw i64 %122, 16
  %155 = icmp sgt i64 %154, %6
  %156 = add nuw nsw i64 %121, 16
  br i1 %155, label %7, label %120

157:                                              ; preds = %35, %157
  %158 = phi i64 [ %182, %157 ], [ %36, %35 ]
  %159 = getelementptr inbounds i32, i32* %0, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds i32, i32* %1, i64 %158
  %162 = load i32, i32* %161, align 4
  %163 = add i32 %162, %160
  store i32 %163, i32* %161, align 4
  %164 = add nuw nsw i64 %158, 1
  %165 = getelementptr inbounds i32, i32* %0, i64 %164
  %166 = load i32, i32* %165, align 4
  %167 = getelementptr inbounds i32, i32* %1, i64 %164
  %168 = load i32, i32* %167, align 4
  %169 = add i32 %168, %166
  store i32 %169, i32* %167, align 4
  %170 = add nuw nsw i64 %158, 2
  %171 = getelementptr inbounds i32, i32* %0, i64 %170
  %172 = load i32, i32* %171, align 4
  %173 = getelementptr inbounds i32, i32* %1, i64 %170
  %174 = load i32, i32* %173, align 4
  %175 = add i32 %174, %172
  store i32 %175, i32* %173, align 4
  %176 = add nuw nsw i64 %158, 3
  %177 = getelementptr inbounds i32, i32* %0, i64 %176
  %178 = load i32, i32* %177, align 4
  %179 = getelementptr inbounds i32, i32* %1, i64 %176
  %180 = load i32, i32* %179, align 4
  %181 = add i32 %180, %178
  store i32 %181, i32* %179, align 4
  %182 = add nuw nsw i64 %158, 4
  %183 = icmp eq i64 %182, %14
  br i1 %183, label %184, label %157, !llvm.loop !22

184:                                              ; preds = %35, %157, %118, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal float @CombinedShannonEntropy_SSE2(i32* nocapture readonly, i32* nocapture readonly) #1 {
  br label %3

3:                                                ; preds = %2, %235
  %4 = phi i64 [ 0, %2 ], [ %240, %235 ]
  %5 = phi <4 x i32> [ zeroinitializer, %2 ], [ %239, %235 ]
  %6 = phi <4 x i32> [ zeroinitializer, %2 ], [ %238, %235 ]
  %7 = phi <4 x i32> [ zeroinitializer, %2 ], [ %237, %235 ]
  %8 = phi double [ 0.000000e+00, %2 ], [ %236, %235 ]
  %9 = getelementptr inbounds i32, i32* %0, i64 %4
  %10 = bitcast i32* %9 to <4 x i32>*
  %11 = load <4 x i32>, <4 x i32>* %10, align 1
  %12 = getelementptr inbounds i32, i32* %1, i64 %4
  %13 = bitcast i32* %12 to <4 x i32>*
  %14 = load <4 x i32>, <4 x i32>* %13, align 1
  %15 = icmp eq <4 x i32> %11, zeroinitializer
  %16 = sext <4 x i1> %15 to <4 x i32>
  %17 = bitcast <4 x i32> %16 to <16 x i8>
  %18 = icmp slt <16 x i8> %17, zeroinitializer
  %19 = bitcast <16 x i1> %18 to i16
  %20 = icmp eq i16 %19, -1
  %21 = extractelement <4 x i32> %11, i32 0
  %22 = extractelement <4 x i32> %14, i32 0
  br i1 %20, label %162, label %23

23:                                               ; preds = %3
  %24 = add <4 x i32> %14, %11
  %25 = add <4 x i32> %24, %7
  %26 = add <4 x i32> %11, %5
  %27 = bitcast <4 x i32> %24 to i128
  %28 = trunc i128 %27 to i32
  %29 = icmp eq i32 %28, 0
  %30 = extractelement <4 x i32> %24, i32 1
  %31 = extractelement <4 x i32> %24, i32 2
  %32 = extractelement <4 x i32> %24, i32 3
  br i1 %29, label %63, label %33

33:                                               ; preds = %23
  %34 = icmp ult i32 %28, 256
  br i1 %34, label %35, label %40

35:                                               ; preds = %33
  %36 = trunc i128 %27 to i64
  %37 = and i64 %36, 4294967295
  %38 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %37
  %39 = load float, float* %38, align 4
  br label %44

40:                                               ; preds = %33
  %41 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %42 = tail call float %41(i32 %28) #6
  %43 = load i32, i32* %9, align 4
  br label %44

44:                                               ; preds = %35, %40
  %45 = phi i32 [ %21, %35 ], [ %43, %40 ]
  %46 = phi float [ %39, %35 ], [ %42, %40 ]
  %47 = fpext float %46 to double
  %48 = fsub double %8, %47
  %49 = icmp eq i32 %45, 0
  br i1 %49, label %63, label %50

50:                                               ; preds = %44
  %51 = icmp ult i32 %45, 256
  br i1 %51, label %52, label %56

52:                                               ; preds = %50
  %53 = zext i32 %45 to i64
  %54 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %53
  %55 = load float, float* %54, align 4
  br label %59

56:                                               ; preds = %50
  %57 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %58 = tail call float %57(i32 %45) #6
  br label %59

59:                                               ; preds = %52, %56
  %60 = phi float [ %55, %52 ], [ %58, %56 ]
  %61 = fpext float %60 to double
  %62 = fsub double %48, %61
  br label %63

63:                                               ; preds = %44, %23, %59
  %64 = phi double [ %62, %59 ], [ %48, %44 ], [ %8, %23 ]
  %65 = icmp eq i32 %30, 0
  br i1 %65, label %96, label %66

66:                                               ; preds = %63
  %67 = icmp ult i32 %30, 256
  br i1 %67, label %68, label %72

68:                                               ; preds = %66
  %69 = zext i32 %30 to i64
  %70 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %69
  %71 = load float, float* %70, align 4
  br label %75

72:                                               ; preds = %66
  %73 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %74 = tail call float %73(i32 %30) #6
  br label %75

75:                                               ; preds = %68, %72
  %76 = phi float [ %71, %68 ], [ %74, %72 ]
  %77 = fpext float %76 to double
  %78 = fsub double %64, %77
  %79 = or i64 %4, 1
  %80 = getelementptr inbounds i32, i32* %0, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %96, label %83

83:                                               ; preds = %75
  %84 = icmp ult i32 %81, 256
  br i1 %84, label %85, label %89

85:                                               ; preds = %83
  %86 = zext i32 %81 to i64
  %87 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %86
  %88 = load float, float* %87, align 4
  br label %92

89:                                               ; preds = %83
  %90 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %91 = tail call float %90(i32 %81) #6
  br label %92

92:                                               ; preds = %85, %89
  %93 = phi float [ %88, %85 ], [ %91, %89 ]
  %94 = fpext float %93 to double
  %95 = fsub double %78, %94
  br label %96

96:                                               ; preds = %75, %63, %92
  %97 = phi double [ %95, %92 ], [ %78, %75 ], [ %64, %63 ]
  %98 = icmp eq i32 %31, 0
  br i1 %98, label %129, label %99

99:                                               ; preds = %96
  %100 = icmp ult i32 %31, 256
  br i1 %100, label %101, label %105

101:                                              ; preds = %99
  %102 = zext i32 %31 to i64
  %103 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %102
  %104 = load float, float* %103, align 4
  br label %108

105:                                              ; preds = %99
  %106 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %107 = tail call float %106(i32 %31) #6
  br label %108

108:                                              ; preds = %101, %105
  %109 = phi float [ %104, %101 ], [ %107, %105 ]
  %110 = fpext float %109 to double
  %111 = fsub double %97, %110
  %112 = or i64 %4, 2
  %113 = getelementptr inbounds i32, i32* %0, i64 %112
  %114 = load i32, i32* %113, align 4
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %129, label %116

116:                                              ; preds = %108
  %117 = icmp ult i32 %114, 256
  br i1 %117, label %118, label %122

118:                                              ; preds = %116
  %119 = zext i32 %114 to i64
  %120 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %119
  %121 = load float, float* %120, align 4
  br label %125

122:                                              ; preds = %116
  %123 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %124 = tail call float %123(i32 %114) #6
  br label %125

125:                                              ; preds = %118, %122
  %126 = phi float [ %121, %118 ], [ %124, %122 ]
  %127 = fpext float %126 to double
  %128 = fsub double %111, %127
  br label %129

129:                                              ; preds = %108, %96, %125
  %130 = phi double [ %128, %125 ], [ %111, %108 ], [ %97, %96 ]
  %131 = icmp eq i32 %32, 0
  br i1 %131, label %235, label %132

132:                                              ; preds = %129
  %133 = icmp ult i32 %32, 256
  br i1 %133, label %134, label %138

134:                                              ; preds = %132
  %135 = zext i32 %32 to i64
  %136 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %135
  %137 = load float, float* %136, align 4
  br label %141

138:                                              ; preds = %132
  %139 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %140 = tail call float %139(i32 %32) #6
  br label %141

141:                                              ; preds = %134, %138
  %142 = phi float [ %137, %134 ], [ %140, %138 ]
  %143 = fpext float %142 to double
  %144 = fsub double %130, %143
  %145 = or i64 %4, 3
  %146 = getelementptr inbounds i32, i32* %0, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %235, label %149

149:                                              ; preds = %141
  %150 = icmp ult i32 %147, 256
  br i1 %150, label %151, label %155

151:                                              ; preds = %149
  %152 = zext i32 %147 to i64
  %153 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %152
  %154 = load float, float* %153, align 4
  br label %158

155:                                              ; preds = %149
  %156 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %157 = tail call float %156(i32 %147) #6
  br label %158

158:                                              ; preds = %151, %155
  %159 = phi float [ %154, %151 ], [ %157, %155 ]
  %160 = fpext float %159 to double
  %161 = fsub double %144, %160
  br label %235

162:                                              ; preds = %3
  %163 = add <4 x i32> %14, %7
  %164 = icmp eq i32 %22, 0
  br i1 %164, label %178, label %165

165:                                              ; preds = %162
  %166 = icmp ult i32 %22, 256
  br i1 %166, label %167, label %171

167:                                              ; preds = %165
  %168 = zext i32 %22 to i64
  %169 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %168
  %170 = load float, float* %169, align 4
  br label %174

171:                                              ; preds = %165
  %172 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %173 = tail call float %172(i32 %22) #6
  br label %174

174:                                              ; preds = %167, %171
  %175 = phi float [ %170, %167 ], [ %173, %171 ]
  %176 = fpext float %175 to double
  %177 = fsub double %8, %176
  br label %178

178:                                              ; preds = %162, %174
  %179 = phi double [ %177, %174 ], [ %8, %162 ]
  %180 = or i64 %4, 1
  %181 = getelementptr inbounds i32, i32* %1, i64 %180
  %182 = load i32, i32* %181, align 4
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %197, label %184

184:                                              ; preds = %178
  %185 = icmp ult i32 %182, 256
  br i1 %185, label %186, label %190

186:                                              ; preds = %184
  %187 = zext i32 %182 to i64
  %188 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %187
  %189 = load float, float* %188, align 4
  br label %193

190:                                              ; preds = %184
  %191 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %192 = tail call float %191(i32 %182) #6
  br label %193

193:                                              ; preds = %186, %190
  %194 = phi float [ %189, %186 ], [ %192, %190 ]
  %195 = fpext float %194 to double
  %196 = fsub double %179, %195
  br label %197

197:                                              ; preds = %178, %193
  %198 = phi double [ %196, %193 ], [ %179, %178 ]
  %199 = or i64 %4, 2
  %200 = getelementptr inbounds i32, i32* %1, i64 %199
  %201 = load i32, i32* %200, align 4
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %216, label %203

203:                                              ; preds = %197
  %204 = icmp ult i32 %201, 256
  br i1 %204, label %205, label %209

205:                                              ; preds = %203
  %206 = zext i32 %201 to i64
  %207 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %206
  %208 = load float, float* %207, align 4
  br label %212

209:                                              ; preds = %203
  %210 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %211 = tail call float %210(i32 %201) #6
  br label %212

212:                                              ; preds = %205, %209
  %213 = phi float [ %208, %205 ], [ %211, %209 ]
  %214 = fpext float %213 to double
  %215 = fsub double %198, %214
  br label %216

216:                                              ; preds = %197, %212
  %217 = phi double [ %215, %212 ], [ %198, %197 ]
  %218 = or i64 %4, 3
  %219 = getelementptr inbounds i32, i32* %1, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %235, label %222

222:                                              ; preds = %216
  %223 = icmp ult i32 %220, 256
  br i1 %223, label %224, label %228

224:                                              ; preds = %222
  %225 = zext i32 %220 to i64
  %226 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %225
  %227 = load float, float* %226, align 4
  br label %231

228:                                              ; preds = %222
  %229 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %230 = tail call float %229(i32 %220) #6
  br label %231

231:                                              ; preds = %224, %228
  %232 = phi float [ %227, %224 ], [ %230, %228 ]
  %233 = fpext float %232 to double
  %234 = fsub double %217, %233
  br label %235

235:                                              ; preds = %158, %129, %141, %216, %231
  %236 = phi double [ %234, %231 ], [ %217, %216 ], [ %161, %158 ], [ %144, %141 ], [ %130, %129 ]
  %237 = phi <4 x i32> [ %163, %231 ], [ %163, %216 ], [ %25, %158 ], [ %25, %141 ], [ %25, %129 ]
  %238 = phi <4 x i32> [ %6, %231 ], [ %6, %216 ], [ %26, %158 ], [ %26, %141 ], [ %26, %129 ]
  %239 = phi <4 x i32> [ %5, %231 ], [ %5, %216 ], [ %26, %158 ], [ %26, %141 ], [ %26, %129 ]
  %240 = add nuw nsw i64 %4, 4
  %241 = icmp ult i64 %240, 256
  br i1 %241, label %3, label %242

242:                                              ; preds = %235
  %243 = shufflevector <4 x i32> %238, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %244 = add nsw <4 x i32> %238, %243
  %245 = shufflevector <4 x i32> %244, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %246 = add nsw <4 x i32> %244, %245
  %247 = extractelement <4 x i32> %246, i32 0
  %248 = extractelement <4 x i32> %237, i32 3
  %249 = extractelement <4 x i32> %237, i32 2
  %250 = add nsw i32 %249, %248
  %251 = extractelement <4 x i32> %237, i32 1
  %252 = add nsw i32 %250, %251
  %253 = extractelement <4 x i32> %237, i32 0
  %254 = add nsw i32 %252, %253
  %255 = icmp ult i32 %247, 256
  br i1 %255, label %256, label %260

256:                                              ; preds = %242
  %257 = zext i32 %247 to i64
  %258 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %257
  %259 = load float, float* %258, align 4
  br label %263

260:                                              ; preds = %242
  %261 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %262 = tail call float %261(i32 %247) #6
  br label %263

263:                                              ; preds = %256, %260
  %264 = phi float [ %259, %256 ], [ %262, %260 ]
  %265 = icmp ult i32 %254, 256
  br i1 %265, label %266, label %270

266:                                              ; preds = %263
  %267 = zext i32 %254 to i64
  %268 = getelementptr inbounds [256 x float], [256 x float]* @kSLog2Table, i64 0, i64 %267
  %269 = load float, float* %268, align 4
  br label %273

270:                                              ; preds = %263
  %271 = load float (i32)*, float (i32)** @VP8LFastSLog2Slow, align 8
  %272 = tail call float %271(i32 %254) #6
  br label %273

273:                                              ; preds = %266, %270
  %274 = phi float [ %269, %266 ], [ %272, %270 ]
  %275 = fadd float %264, %274
  %276 = fpext float %275 to double
  %277 = fadd double %236, %276
  %278 = fptrunc double %277 to float
  ret float %278
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @VectorMismatch_SSE2(i32* nocapture readonly, i32* nocapture readonly, i32) #3 {
  %4 = icmp sgt i32 %2, 11
  br i1 %4, label %5, label %42

5:                                                ; preds = %3, %21
  %6 = phi i32* [ %33, %21 ], [ %1, %3 ]
  %7 = phi i32* [ %32, %21 ], [ %0, %3 ]
  %8 = phi i32 [ %38, %21 ], [ 0, %3 ]
  %9 = bitcast i32* %7 to <4 x i32>*
  %10 = load <4 x i32>, <4 x i32>* %9, align 1
  %11 = bitcast i32* %6 to <4 x i32>*
  %12 = load <4 x i32>, <4 x i32>* %11, align 1
  %13 = icmp eq <4 x i32> %10, %12
  %14 = sext <4 x i1> %13 to <4 x i32>
  %15 = add nsw i32 %8, 4
  %16 = sext i32 %15 to i64
  %17 = bitcast <4 x i32> %14 to <16 x i8>
  %18 = icmp slt <16 x i8> %17, zeroinitializer
  %19 = bitcast <16 x i1> %18 to i16
  %20 = icmp eq i16 %19, -1
  br i1 %20, label %21, label %71

21:                                               ; preds = %5
  %22 = getelementptr inbounds i32, i32* %1, i64 %16
  %23 = bitcast i32* %22 to <4 x i32>*
  %24 = load <4 x i32>, <4 x i32>* %23, align 1
  %25 = getelementptr inbounds i32, i32* %0, i64 %16
  %26 = bitcast i32* %25 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 1
  %28 = icmp eq <4 x i32> %27, %24
  %29 = sext <4 x i1> %28 to <4 x i32>
  %30 = add nsw i32 %8, 8
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i32, i32* %0, i64 %31
  %33 = getelementptr inbounds i32, i32* %1, i64 %31
  %34 = bitcast <4 x i32> %29 to <16 x i8>
  %35 = icmp slt <16 x i8> %34, zeroinitializer
  %36 = bitcast <16 x i1> %35 to i16
  %37 = icmp eq i16 %36, -1
  %38 = select i1 %37, i32 %30, i32 %15
  %39 = add nsw i32 %38, 12
  %40 = icmp slt i32 %39, %2
  %41 = and i1 %37, %40
  br i1 %41, label %5, label %71

42:                                               ; preds = %3
  %43 = icmp sgt i32 %2, 3
  br i1 %43, label %44, label %71

44:                                               ; preds = %42
  %45 = bitcast i32* %0 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 1
  %47 = bitcast i32* %1 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 1
  %49 = icmp eq <4 x i32> %46, %48
  %50 = sext <4 x i1> %49 to <4 x i32>
  %51 = bitcast <4 x i32> %50 to <16 x i8>
  %52 = icmp slt <16 x i8> %51, zeroinitializer
  %53 = bitcast <16 x i1> %52 to i16
  %54 = icmp eq i16 %53, -1
  br i1 %54, label %55, label %71

55:                                               ; preds = %44
  %56 = icmp sgt i32 %2, 7
  br i1 %56, label %57, label %71

57:                                               ; preds = %55
  %58 = getelementptr inbounds i32, i32* %0, i64 4
  %59 = bitcast i32* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 1
  %61 = getelementptr inbounds i32, i32* %1, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 1
  %64 = icmp eq <4 x i32> %60, %63
  %65 = sext <4 x i1> %64 to <4 x i32>
  %66 = bitcast <4 x i32> %65 to <16 x i8>
  %67 = icmp slt <16 x i8> %66, zeroinitializer
  %68 = bitcast <16 x i1> %67 to i16
  %69 = icmp eq i16 %68, -1
  %70 = select i1 %69, i32 8, i32 4
  br label %71

71:                                               ; preds = %5, %21, %57, %42, %44, %55
  %72 = phi i32 [ 4, %55 ], [ 0, %44 ], [ 0, %42 ], [ %70, %57 ], [ %8, %5 ], [ %38, %21 ]
  %73 = icmp slt i32 %72, %2
  br i1 %73, label %74, label %91

74:                                               ; preds = %71
  %75 = sext i32 %72 to i64
  br label %76

76:                                               ; preds = %84, %74
  %77 = phi i64 [ %75, %74 ], [ %85, %84 ]
  %78 = phi i32 [ %72, %74 ], [ %86, %84 ]
  %79 = getelementptr inbounds i32, i32* %0, i64 %77
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds i32, i32* %1, i64 %77
  %82 = load i32, i32* %81, align 4
  %83 = icmp eq i32 %80, %82
  br i1 %83, label %84, label %89

84:                                               ; preds = %76
  %85 = add nsw i64 %77, 1
  %86 = add nsw i32 %78, 1
  %87 = trunc i64 %85 to i32
  %88 = icmp eq i32 %87, %2
  br i1 %88, label %91, label %76

89:                                               ; preds = %76
  %90 = trunc i64 %77 to i32
  br label %91

91:                                               ; preds = %84, %89, %71
  %92 = phi i32 [ %72, %71 ], [ %90, %89 ], [ %86, %84 ]
  ret i32 %92
}

; Function Attrs: nounwind ssp uwtable
define internal void @BundleColorMap_SSE2(i8*, i32, i32, i32*) #1 {
  switch i32 %2, label %17 [
    i32 0, label %13
    i32 1, label %9
    i32 2, label %5
  ]

5:                                                ; preds = %4
  %6 = icmp slt i32 %1, 16
  br i1 %6, label %115, label %7

7:                                                ; preds = %5
  %8 = sext i32 %1 to i64
  br label %65

9:                                                ; preds = %4
  %10 = icmp slt i32 %1, 16
  br i1 %10, label %115, label %11

11:                                               ; preds = %9
  %12 = sext i32 %1 to i64
  br label %47

13:                                               ; preds = %4
  %14 = icmp slt i32 %1, 16
  br i1 %14, label %115, label %15

15:                                               ; preds = %13
  %16 = sext i32 %1 to i64
  br label %21

17:                                               ; preds = %4
  %18 = icmp slt i32 %1, 16
  br i1 %18, label %115, label %19

19:                                               ; preds = %17
  %20 = sext i32 %1 to i64
  br label %85

21:                                               ; preds = %15, %21
  %22 = phi i64 [ 0, %15 ], [ %46, %21 ]
  %23 = phi i64 [ 16, %15 ], [ %44, %21 ]
  %24 = phi i32* [ %3, %15 ], [ %43, %21 ]
  %25 = getelementptr inbounds i8, i8* %0, i64 %22
  %26 = bitcast i8* %25 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = shufflevector <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i8> %27, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = bitcast <16 x i8> %28 to <8 x i16>
  %30 = shufflevector <8 x i16> %29, <8 x i16> <i16 -256, i16 -256, i16 -256, i16 -256, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %31 = shufflevector <8 x i16> %29, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 -256, i16 -256, i16 -256, i16 -256>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %32 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %27, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %33 = bitcast <16 x i8> %32 to <8 x i16>
  %34 = shufflevector <8 x i16> %33, <8 x i16> <i16 -256, i16 -256, i16 -256, i16 -256, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = shufflevector <8 x i16> %33, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 -256, i16 -256, i16 -256, i16 -256>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %36 = bitcast i32* %24 to <8 x i16>*
  store <8 x i16> %30, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i32, i32* %24, i64 4
  %38 = bitcast i32* %37 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %38, align 1
  %39 = getelementptr inbounds i32, i32* %24, i64 8
  %40 = bitcast i32* %39 to <8 x i16>*
  store <8 x i16> %34, <8 x i16>* %40, align 1
  %41 = getelementptr inbounds i32, i32* %24, i64 12
  %42 = bitcast i32* %41 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %42, align 1
  %43 = getelementptr inbounds i32, i32* %24, i64 16
  %44 = add nuw nsw i64 %23, 16
  %45 = icmp sgt i64 %44, %16
  %46 = add nuw nsw i64 %22, 16
  br i1 %45, label %109, label %21

47:                                               ; preds = %11, %47
  %48 = phi i64 [ 0, %11 ], [ %64, %47 ]
  %49 = phi i64 [ 16, %11 ], [ %62, %47 ]
  %50 = phi i32* [ %3, %11 ], [ %61, %47 ]
  %51 = getelementptr inbounds i8, i8* %0, i64 %48
  %52 = bitcast i8* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 1
  %54 = mul <8 x i16> %53, <i16 272, i16 272, i16 272, i16 272, i16 272, i16 272, i16 272, i16 272>
  %55 = and <8 x i16> %54, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %56 = shufflevector <8 x i16> %55, <8 x i16> <i16 -256, i16 -256, i16 -256, i16 -256, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %57 = shufflevector <8 x i16> %55, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 -256, i16 -256, i16 -256, i16 -256>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %58 = bitcast i32* %50 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %58, align 1
  %59 = getelementptr inbounds i32, i32* %50, i64 4
  %60 = bitcast i32* %59 to <8 x i16>*
  store <8 x i16> %57, <8 x i16>* %60, align 1
  %61 = getelementptr inbounds i32, i32* %50, i64 8
  %62 = add nuw nsw i64 %49, 16
  %63 = icmp sgt i64 %62, %12
  %64 = add nuw nsw i64 %48, 16
  br i1 %63, label %111, label %47

65:                                               ; preds = %7, %65
  %66 = phi i64 [ 0, %7 ], [ %84, %65 ]
  %67 = phi i64 [ 16, %7 ], [ %82, %65 ]
  %68 = phi i32* [ %3, %7 ], [ %81, %65 ]
  %69 = getelementptr inbounds i8, i8* %0, i64 %66
  %70 = bitcast i8* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 1
  %72 = mul <8 x i16> %71, <i16 260, i16 260, i16 260, i16 260, i16 260, i16 260, i16 260, i16 260>
  %73 = bitcast <8 x i16> %72 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 1080880403494997760, i64 1080880403494997760>
  %75 = bitcast <2 x i64> %74 to <4 x i32>
  %76 = lshr <4 x i32> %75, <i32 12, i32 12, i32 12, i32 12>
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = or <2 x i64> %74, <i64 -72057589759737856, i64 -72057589759737856>
  %79 = or <2 x i64> %78, %77
  %80 = bitcast i32* %68 to <2 x i64>*
  store <2 x i64> %79, <2 x i64>* %80, align 1
  %81 = getelementptr inbounds i32, i32* %68, i64 4
  %82 = add nuw nsw i64 %67, 16
  %83 = icmp sgt i64 %82, %8
  %84 = add nuw nsw i64 %66, 16
  br i1 %83, label %113, label %65

85:                                               ; preds = %19, %85
  %86 = phi i64 [ 0, %19 ], [ %106, %85 ]
  %87 = phi i64 [ 16, %19 ], [ %104, %85 ]
  %88 = phi i32* [ %3, %19 ], [ %103, %85 ]
  %89 = getelementptr inbounds i8, i8* %0, i64 %86
  %90 = bitcast i8* %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 1
  %92 = shl <2 x i64> %91, <i64 7, i64 7>
  %93 = bitcast <2 x i64> %92 to <16 x i8>
  %94 = icmp slt <16 x i8> %93, zeroinitializer
  %95 = bitcast <16 x i1> %94 to i16
  %96 = zext i16 %95 to i32
  %97 = shl nuw nsw i32 %96, 8
  %98 = and i32 %97, 65280
  %99 = or i32 %98, -16777216
  store i32 %99, i32* %88, align 4
  %100 = and i32 %96, 65280
  %101 = or i32 %100, -16777216
  %102 = getelementptr inbounds i32, i32* %88, i64 1
  store i32 %101, i32* %102, align 4
  %103 = getelementptr inbounds i32, i32* %88, i64 2
  %104 = add nuw nsw i64 %87, 16
  %105 = icmp sgt i64 %104, %20
  %106 = add nuw nsw i64 %86, 16
  br i1 %105, label %107, label %85

107:                                              ; preds = %85
  %108 = and i32 %1, -16
  br label %115

109:                                              ; preds = %21
  %110 = and i32 %1, -16
  br label %115

111:                                              ; preds = %47
  %112 = and i32 %1, -16
  br label %115

113:                                              ; preds = %65
  %114 = and i32 %1, -16
  br label %115

115:                                              ; preds = %113, %111, %109, %107, %5, %9, %13, %17
  %116 = phi i32 [ 0, %17 ], [ 0, %13 ], [ 0, %9 ], [ 0, %5 ], [ %108, %107 ], [ %110, %109 ], [ %112, %111 ], [ %114, %113 ]
  %117 = phi i32* [ %3, %17 ], [ %3, %13 ], [ %3, %9 ], [ %3, %5 ], [ %103, %107 ], [ %43, %109 ], [ %61, %111 ], [ %81, %113 ]
  %118 = icmp eq i32 %116, %1
  br i1 %118, label %123, label %119

119:                                              ; preds = %115
  %120 = zext i32 %116 to i64
  %121 = getelementptr inbounds i8, i8* %0, i64 %120
  %122 = sub nsw i32 %1, %116
  tail call void @VP8LBundleColorMap_C(i8* %121, i32 %122, i32 %2, i32* %117) #6
  br label %123

123:                                              ; preds = %115, %119
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub0_SSE2(i32*, i32* nocapture readnone, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %22, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %19, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %17, %8 ]
  %11 = getelementptr inbounds i32, i32* %0, i64 %9
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = add <16 x i8> %13, <i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1>
  %15 = getelementptr inbounds i32, i32* %3, i64 %9
  %16 = bitcast i32* %15 to <16 x i8>*
  store <16 x i8> %14, <16 x i8>* %16, align 1
  %17 = add nuw nsw i64 %10, 4
  %18 = icmp sgt i64 %17, %7
  %19 = add nuw nsw i64 %9, 4
  br i1 %18, label %20, label %8

20:                                               ; preds = %8
  %21 = and i32 %2, -4
  br label %22

22:                                               ; preds = %20, %4
  %23 = phi i32 [ 0, %4 ], [ %21, %20 ]
  %24 = icmp eq i32 %23, %2
  br i1 %24, label %31, label %25

25:                                               ; preds = %22
  %26 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 0), align 16
  %27 = zext i32 %23 to i64
  %28 = getelementptr inbounds i32, i32* %0, i64 %27
  %29 = sub nsw i32 %2, %23
  %30 = getelementptr inbounds i32, i32* %3, i64 %27
  tail call void %26(i32* %28, i32* null, i32 %29, i32* %30) #6
  br label %31

31:                                               ; preds = %22, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub1_SSE2(i32*, i32*, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %26, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %23, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %21, %8 ]
  %11 = getelementptr inbounds i32, i32* %0, i64 %9
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = add nsw i64 %9, -1
  %15 = getelementptr inbounds i32, i32* %0, i64 %14
  %16 = bitcast i32* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = sub <16 x i8> %13, %17
  %19 = getelementptr inbounds i32, i32* %3, i64 %9
  %20 = bitcast i32* %19 to <16 x i8>*
  store <16 x i8> %18, <16 x i8>* %20, align 1
  %21 = add nuw nsw i64 %10, 4
  %22 = icmp sgt i64 %21, %7
  %23 = add nuw nsw i64 %9, 4
  br i1 %22, label %24, label %8

24:                                               ; preds = %8
  %25 = and i32 %2, -4
  br label %26

26:                                               ; preds = %24, %4
  %27 = phi i32 [ 0, %4 ], [ %25, %24 ]
  %28 = icmp eq i32 %27, %2
  br i1 %28, label %38, label %29

29:                                               ; preds = %26
  %30 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 1), align 8
  %31 = zext i32 %27 to i64
  %32 = getelementptr inbounds i32, i32* %0, i64 %31
  %33 = icmp eq i32* %1, null
  %34 = getelementptr inbounds i32, i32* %1, i64 %31
  %35 = select i1 %33, i32* null, i32* %34
  %36 = sub nsw i32 %2, %27
  %37 = getelementptr inbounds i32, i32* %3, i64 %31
  tail call void %30(i32* %32, i32* %35, i32 %36, i32* %37) #6
  br label %38

38:                                               ; preds = %26, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub2_SSE2(i32*, i32*, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %25, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %22, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %20, %8 ]
  %11 = getelementptr inbounds i32, i32* %0, i64 %9
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = getelementptr inbounds i32, i32* %1, i64 %9
  %15 = bitcast i32* %14 to <16 x i8>*
  %16 = load <16 x i8>, <16 x i8>* %15, align 1
  %17 = sub <16 x i8> %13, %16
  %18 = getelementptr inbounds i32, i32* %3, i64 %9
  %19 = bitcast i32* %18 to <16 x i8>*
  store <16 x i8> %17, <16 x i8>* %19, align 1
  %20 = add nuw nsw i64 %10, 4
  %21 = icmp sgt i64 %20, %7
  %22 = add nuw nsw i64 %9, 4
  br i1 %21, label %23, label %8

23:                                               ; preds = %8
  %24 = and i32 %2, -4
  br label %25

25:                                               ; preds = %23, %4
  %26 = phi i32 [ 0, %4 ], [ %24, %23 ]
  %27 = icmp eq i32 %26, %2
  br i1 %27, label %37, label %28

28:                                               ; preds = %25
  %29 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 2), align 16
  %30 = zext i32 %26 to i64
  %31 = getelementptr inbounds i32, i32* %0, i64 %30
  %32 = icmp eq i32* %1, null
  %33 = getelementptr inbounds i32, i32* %1, i64 %30
  %34 = select i1 %32, i32* null, i32* %33
  %35 = sub nsw i32 %2, %26
  %36 = getelementptr inbounds i32, i32* %3, i64 %30
  tail call void %29(i32* %31, i32* %34, i32 %35, i32* %36) #6
  br label %37

37:                                               ; preds = %25, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub3_SSE2(i32*, i32*, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %26, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %23, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %21, %8 ]
  %11 = getelementptr inbounds i32, i32* %0, i64 %9
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = or i64 %9, 1
  %15 = getelementptr inbounds i32, i32* %1, i64 %14
  %16 = bitcast i32* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = sub <16 x i8> %13, %17
  %19 = getelementptr inbounds i32, i32* %3, i64 %9
  %20 = bitcast i32* %19 to <16 x i8>*
  store <16 x i8> %18, <16 x i8>* %20, align 1
  %21 = add nuw nsw i64 %10, 4
  %22 = icmp sgt i64 %21, %7
  %23 = add nuw nsw i64 %9, 4
  br i1 %22, label %24, label %8

24:                                               ; preds = %8
  %25 = and i32 %2, -4
  br label %26

26:                                               ; preds = %24, %4
  %27 = phi i32 [ 0, %4 ], [ %25, %24 ]
  %28 = icmp eq i32 %27, %2
  br i1 %28, label %38, label %29

29:                                               ; preds = %26
  %30 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 3), align 8
  %31 = zext i32 %27 to i64
  %32 = getelementptr inbounds i32, i32* %0, i64 %31
  %33 = icmp eq i32* %1, null
  %34 = getelementptr inbounds i32, i32* %1, i64 %31
  %35 = select i1 %33, i32* null, i32* %34
  %36 = sub nsw i32 %2, %27
  %37 = getelementptr inbounds i32, i32* %3, i64 %31
  tail call void %30(i32* %32, i32* %35, i32 %36, i32* %37) #6
  br label %38

38:                                               ; preds = %26, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub4_SSE2(i32*, i32*, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %26, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %23, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %21, %8 ]
  %11 = getelementptr inbounds i32, i32* %0, i64 %9
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = add nsw i64 %9, -1
  %15 = getelementptr inbounds i32, i32* %1, i64 %14
  %16 = bitcast i32* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = sub <16 x i8> %13, %17
  %19 = getelementptr inbounds i32, i32* %3, i64 %9
  %20 = bitcast i32* %19 to <16 x i8>*
  store <16 x i8> %18, <16 x i8>* %20, align 1
  %21 = add nuw nsw i64 %10, 4
  %22 = icmp sgt i64 %21, %7
  %23 = add nuw nsw i64 %9, 4
  br i1 %22, label %24, label %8

24:                                               ; preds = %8
  %25 = and i32 %2, -4
  br label %26

26:                                               ; preds = %24, %4
  %27 = phi i32 [ 0, %4 ], [ %25, %24 ]
  %28 = icmp eq i32 %27, %2
  br i1 %28, label %38, label %29

29:                                               ; preds = %26
  %30 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 4), align 16
  %31 = zext i32 %27 to i64
  %32 = getelementptr inbounds i32, i32* %0, i64 %31
  %33 = icmp eq i32* %1, null
  %34 = getelementptr inbounds i32, i32* %1, i64 %31
  %35 = select i1 %33, i32* null, i32* %34
  %36 = sub nsw i32 %2, %27
  %37 = getelementptr inbounds i32, i32* %3, i64 %31
  tail call void %30(i32* %32, i32* %35, i32 %36, i32* %37) #6
  br label %38

38:                                               ; preds = %26, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub5_SSE2(i32*, i32*, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %44, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %41, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %39, %8 ]
  %11 = add nsw i64 %9, -1
  %12 = getelementptr inbounds i32, i32* %0, i64 %11
  %13 = bitcast i32* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  %15 = getelementptr inbounds i32, i32* %1, i64 %9
  %16 = bitcast i32* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = or i64 %9, 1
  %19 = getelementptr inbounds i32, i32* %1, i64 %18
  %20 = bitcast i32* %19 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 1
  %22 = getelementptr inbounds i32, i32* %0, i64 %9
  %23 = bitcast i32* %22 to <16 x i8>*
  %24 = load <16 x i8>, <16 x i8>* %23, align 1
  %25 = bitcast <2 x i64> %14 to <16 x i8>
  %26 = bitcast <2 x i64> %21 to <16 x i8>
  %27 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %25, <16 x i8> %26) #6
  %28 = xor <2 x i64> %21, %14
  %29 = bitcast <2 x i64> %28 to <16 x i8>
  %30 = and <16 x i8> %29, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %31 = sub <16 x i8> %27, %30
  %32 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %31, <16 x i8> %17) #6
  %33 = xor <16 x i8> %31, %17
  %34 = and <16 x i8> %33, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %35 = sub <16 x i8> %24, %32
  %36 = add <16 x i8> %35, %34
  %37 = getelementptr inbounds i32, i32* %3, i64 %9
  %38 = bitcast i32* %37 to <16 x i8>*
  store <16 x i8> %36, <16 x i8>* %38, align 1
  %39 = add nuw nsw i64 %10, 4
  %40 = icmp sgt i64 %39, %7
  %41 = add nuw nsw i64 %9, 4
  br i1 %40, label %42, label %8

42:                                               ; preds = %8
  %43 = and i32 %2, -4
  br label %44

44:                                               ; preds = %42, %4
  %45 = phi i32 [ 0, %4 ], [ %43, %42 ]
  %46 = icmp eq i32 %45, %2
  br i1 %46, label %54, label %47

47:                                               ; preds = %44
  %48 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 5), align 8
  %49 = zext i32 %45 to i64
  %50 = getelementptr inbounds i32, i32* %0, i64 %49
  %51 = getelementptr inbounds i32, i32* %1, i64 %49
  %52 = sub nsw i32 %2, %45
  %53 = getelementptr inbounds i32, i32* %3, i64 %49
  tail call void %48(i32* %50, i32* %51, i32 %52, i32* %53) #6
  br label %54

54:                                               ; preds = %44, %47
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub6_SSE2(i32*, i32*, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %36, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %33, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %31, %8 ]
  %11 = add nsw i64 %9, -1
  %12 = getelementptr inbounds i32, i32* %0, i64 %11
  %13 = bitcast i32* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  %15 = getelementptr inbounds i32, i32* %1, i64 %11
  %16 = bitcast i32* %15 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  %18 = getelementptr inbounds i32, i32* %0, i64 %9
  %19 = bitcast i32* %18 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 1
  %21 = bitcast <2 x i64> %14 to <16 x i8>
  %22 = bitcast <2 x i64> %17 to <16 x i8>
  %23 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %21, <16 x i8> %22) #6
  %24 = xor <2 x i64> %17, %14
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  %26 = and <16 x i8> %25, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %27 = sub <16 x i8> %20, %23
  %28 = add <16 x i8> %27, %26
  %29 = getelementptr inbounds i32, i32* %3, i64 %9
  %30 = bitcast i32* %29 to <16 x i8>*
  store <16 x i8> %28, <16 x i8>* %30, align 1
  %31 = add nuw nsw i64 %10, 4
  %32 = icmp sgt i64 %31, %7
  %33 = add nuw nsw i64 %9, 4
  br i1 %32, label %34, label %8

34:                                               ; preds = %8
  %35 = and i32 %2, -4
  br label %36

36:                                               ; preds = %34, %4
  %37 = phi i32 [ 0, %4 ], [ %35, %34 ]
  %38 = icmp eq i32 %37, %2
  br i1 %38, label %46, label %39

39:                                               ; preds = %36
  %40 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 6), align 16
  %41 = zext i32 %37 to i64
  %42 = getelementptr inbounds i32, i32* %0, i64 %41
  %43 = getelementptr inbounds i32, i32* %1, i64 %41
  %44 = sub nsw i32 %2, %37
  %45 = getelementptr inbounds i32, i32* %3, i64 %41
  tail call void %40(i32* %42, i32* %43, i32 %44, i32* %45) #6
  br label %46

46:                                               ; preds = %36, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub7_SSE2(i32*, i32*, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %36, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %33, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %31, %8 ]
  %11 = add nsw i64 %9, -1
  %12 = getelementptr inbounds i32, i32* %0, i64 %11
  %13 = bitcast i32* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  %15 = getelementptr inbounds i32, i32* %1, i64 %9
  %16 = bitcast i32* %15 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  %18 = getelementptr inbounds i32, i32* %0, i64 %9
  %19 = bitcast i32* %18 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 1
  %21 = bitcast <2 x i64> %14 to <16 x i8>
  %22 = bitcast <2 x i64> %17 to <16 x i8>
  %23 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %21, <16 x i8> %22) #6
  %24 = xor <2 x i64> %17, %14
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  %26 = and <16 x i8> %25, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %27 = sub <16 x i8> %20, %23
  %28 = add <16 x i8> %27, %26
  %29 = getelementptr inbounds i32, i32* %3, i64 %9
  %30 = bitcast i32* %29 to <16 x i8>*
  store <16 x i8> %28, <16 x i8>* %30, align 1
  %31 = add nuw nsw i64 %10, 4
  %32 = icmp sgt i64 %31, %7
  %33 = add nuw nsw i64 %9, 4
  br i1 %32, label %34, label %8

34:                                               ; preds = %8
  %35 = and i32 %2, -4
  br label %36

36:                                               ; preds = %34, %4
  %37 = phi i32 [ 0, %4 ], [ %35, %34 ]
  %38 = icmp eq i32 %37, %2
  br i1 %38, label %46, label %39

39:                                               ; preds = %36
  %40 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 7), align 8
  %41 = zext i32 %37 to i64
  %42 = getelementptr inbounds i32, i32* %0, i64 %41
  %43 = getelementptr inbounds i32, i32* %1, i64 %41
  %44 = sub nsw i32 %2, %37
  %45 = getelementptr inbounds i32, i32* %3, i64 %41
  tail call void %40(i32* %42, i32* %43, i32 %44, i32* %45) #6
  br label %46

46:                                               ; preds = %36, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub8_SSE2(i32*, i32*, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %36, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %33, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %31, %8 ]
  %11 = add nsw i64 %9, -1
  %12 = getelementptr inbounds i32, i32* %1, i64 %11
  %13 = bitcast i32* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  %15 = getelementptr inbounds i32, i32* %1, i64 %9
  %16 = bitcast i32* %15 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  %18 = getelementptr inbounds i32, i32* %0, i64 %9
  %19 = bitcast i32* %18 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 1
  %21 = bitcast <2 x i64> %14 to <16 x i8>
  %22 = bitcast <2 x i64> %17 to <16 x i8>
  %23 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %21, <16 x i8> %22) #6
  %24 = xor <2 x i64> %17, %14
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  %26 = and <16 x i8> %25, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %27 = sub <16 x i8> %20, %23
  %28 = add <16 x i8> %27, %26
  %29 = getelementptr inbounds i32, i32* %3, i64 %9
  %30 = bitcast i32* %29 to <16 x i8>*
  store <16 x i8> %28, <16 x i8>* %30, align 1
  %31 = add nuw nsw i64 %10, 4
  %32 = icmp sgt i64 %31, %7
  %33 = add nuw nsw i64 %9, 4
  br i1 %32, label %34, label %8

34:                                               ; preds = %8
  %35 = and i32 %2, -4
  br label %36

36:                                               ; preds = %34, %4
  %37 = phi i32 [ 0, %4 ], [ %35, %34 ]
  %38 = icmp eq i32 %37, %2
  br i1 %38, label %46, label %39

39:                                               ; preds = %36
  %40 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 8), align 16
  %41 = zext i32 %37 to i64
  %42 = getelementptr inbounds i32, i32* %0, i64 %41
  %43 = getelementptr inbounds i32, i32* %1, i64 %41
  %44 = sub nsw i32 %2, %37
  %45 = getelementptr inbounds i32, i32* %3, i64 %41
  tail call void %40(i32* %42, i32* %43, i32 %44, i32* %45) #6
  br label %46

46:                                               ; preds = %36, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub9_SSE2(i32*, i32*, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %36, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %33, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %31, %8 ]
  %11 = getelementptr inbounds i32, i32* %1, i64 %9
  %12 = bitcast i32* %11 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  %14 = or i64 %9, 1
  %15 = getelementptr inbounds i32, i32* %1, i64 %14
  %16 = bitcast i32* %15 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  %18 = getelementptr inbounds i32, i32* %0, i64 %9
  %19 = bitcast i32* %18 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 1
  %21 = bitcast <2 x i64> %13 to <16 x i8>
  %22 = bitcast <2 x i64> %17 to <16 x i8>
  %23 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %21, <16 x i8> %22) #6
  %24 = xor <2 x i64> %17, %13
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  %26 = and <16 x i8> %25, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %27 = sub <16 x i8> %20, %23
  %28 = add <16 x i8> %27, %26
  %29 = getelementptr inbounds i32, i32* %3, i64 %9
  %30 = bitcast i32* %29 to <16 x i8>*
  store <16 x i8> %28, <16 x i8>* %30, align 1
  %31 = add nuw nsw i64 %10, 4
  %32 = icmp sgt i64 %31, %7
  %33 = add nuw nsw i64 %9, 4
  br i1 %32, label %34, label %8

34:                                               ; preds = %8
  %35 = and i32 %2, -4
  br label %36

36:                                               ; preds = %34, %4
  %37 = phi i32 [ 0, %4 ], [ %35, %34 ]
  %38 = icmp eq i32 %37, %2
  br i1 %38, label %46, label %39

39:                                               ; preds = %36
  %40 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 9), align 8
  %41 = zext i32 %37 to i64
  %42 = getelementptr inbounds i32, i32* %0, i64 %41
  %43 = getelementptr inbounds i32, i32* %1, i64 %41
  %44 = sub nsw i32 %2, %37
  %45 = getelementptr inbounds i32, i32* %3, i64 %41
  tail call void %40(i32* %42, i32* %43, i32 %44, i32* %45) #6
  br label %46

46:                                               ; preds = %36, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub10_SSE2(i32*, i32*, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %54, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %51, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %49, %8 ]
  %11 = add nsw i64 %9, -1
  %12 = getelementptr inbounds i32, i32* %0, i64 %11
  %13 = bitcast i32* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  %15 = getelementptr inbounds i32, i32* %0, i64 %9
  %16 = bitcast i32* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = getelementptr inbounds i32, i32* %1, i64 %11
  %19 = bitcast i32* %18 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 1
  %21 = getelementptr inbounds i32, i32* %1, i64 %9
  %22 = bitcast i32* %21 to <2 x i64>*
  %23 = load <2 x i64>, <2 x i64>* %22, align 1
  %24 = or i64 %9, 1
  %25 = getelementptr inbounds i32, i32* %1, i64 %24
  %26 = bitcast i32* %25 to <2 x i64>*
  %27 = load <2 x i64>, <2 x i64>* %26, align 1
  %28 = bitcast <2 x i64> %23 to <16 x i8>
  %29 = bitcast <2 x i64> %27 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %28, <16 x i8> %29) #6
  %31 = xor <2 x i64> %27, %23
  %32 = bitcast <2 x i64> %31 to <16 x i8>
  %33 = and <16 x i8> %32, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %34 = sub <16 x i8> %30, %33
  %35 = bitcast <2 x i64> %14 to <16 x i8>
  %36 = bitcast <2 x i64> %20 to <16 x i8>
  %37 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %35, <16 x i8> %36) #6
  %38 = xor <2 x i64> %20, %14
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = and <16 x i8> %39, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %41 = sub <16 x i8> %37, %40
  %42 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %34, <16 x i8> %41) #6
  %43 = xor <16 x i8> %34, %41
  %44 = and <16 x i8> %43, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %45 = sub <16 x i8> %17, %42
  %46 = add <16 x i8> %45, %44
  %47 = getelementptr inbounds i32, i32* %3, i64 %9
  %48 = bitcast i32* %47 to <16 x i8>*
  store <16 x i8> %46, <16 x i8>* %48, align 1
  %49 = add nuw nsw i64 %10, 4
  %50 = icmp sgt i64 %49, %7
  %51 = add nuw nsw i64 %9, 4
  br i1 %50, label %52, label %8

52:                                               ; preds = %8
  %53 = and i32 %2, -4
  br label %54

54:                                               ; preds = %52, %4
  %55 = phi i32 [ 0, %4 ], [ %53, %52 ]
  %56 = icmp eq i32 %55, %2
  br i1 %56, label %64, label %57

57:                                               ; preds = %54
  %58 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 10), align 16
  %59 = zext i32 %55 to i64
  %60 = getelementptr inbounds i32, i32* %0, i64 %59
  %61 = getelementptr inbounds i32, i32* %1, i64 %59
  %62 = sub nsw i32 %2, %55
  %63 = getelementptr inbounds i32, i32* %3, i64 %59
  tail call void %58(i32* %60, i32* %61, i32 %62, i32* %63) #6
  br label %64

64:                                               ; preds = %54, %57
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub11_SSE2(i32*, i32*, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %70, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %67, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %65, %8 ]
  %11 = add nsw i64 %9, -1
  %12 = getelementptr inbounds i32, i32* %0, i64 %11
  %13 = bitcast i32* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  %15 = getelementptr inbounds i32, i32* %1, i64 %9
  %16 = bitcast i32* %15 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  %18 = getelementptr inbounds i32, i32* %1, i64 %11
  %19 = bitcast i32* %18 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 1
  %21 = getelementptr inbounds i32, i32* %0, i64 %9
  %22 = bitcast i32* %21 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = bitcast <2 x i64> %17 to <4 x i32>
  %25 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %26 = shufflevector <4 x i32> %20, <4 x i32> %24, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %27 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %28 = shufflevector <4 x i32> %20, <4 x i32> %24, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %29 = bitcast <4 x i32> %25 to <16 x i8>
  %30 = bitcast <4 x i32> %26 to <16 x i8>
  %31 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %29, <16 x i8> %30) #6
  %32 = bitcast <4 x i32> %27 to <16 x i8>
  %33 = bitcast <4 x i32> %28 to <16 x i8>
  %34 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %32, <16 x i8> %33) #6
  %35 = bitcast <2 x i64> %31 to <4 x i32>
  %36 = bitcast <2 x i64> %34 to <4 x i32>
  %37 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %35, <4 x i32> %36) #6
  %38 = bitcast <2 x i64> %14 to <4 x i32>
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %40 = shufflevector <4 x i32> %20, <4 x i32> %38, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %41 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %42 = shufflevector <4 x i32> %20, <4 x i32> %38, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %43 = bitcast <4 x i32> %39 to <16 x i8>
  %44 = bitcast <4 x i32> %40 to <16 x i8>
  %45 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %43, <16 x i8> %44) #6
  %46 = bitcast <4 x i32> %41 to <16 x i8>
  %47 = bitcast <4 x i32> %42 to <16 x i8>
  %48 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %46, <16 x i8> %47) #6
  %49 = bitcast <2 x i64> %45 to <4 x i32>
  %50 = bitcast <2 x i64> %48 to <4 x i32>
  %51 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %49, <4 x i32> %50) #6
  %52 = bitcast <8 x i16> %51 to <4 x i32>
  %53 = bitcast <8 x i16> %37 to <4 x i32>
  %54 = icmp sgt <4 x i32> %52, %53
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = and <2 x i64> %14, %56
  %58 = xor <2 x i64> %56, <i64 -1, i64 -1>
  %59 = and <2 x i64> %17, %58
  %60 = or <2 x i64> %59, %57
  %61 = bitcast <2 x i64> %60 to <16 x i8>
  %62 = sub <16 x i8> %23, %61
  %63 = getelementptr inbounds i32, i32* %3, i64 %9
  %64 = bitcast i32* %63 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %64, align 1
  %65 = add nuw nsw i64 %10, 4
  %66 = icmp sgt i64 %65, %7
  %67 = add nuw nsw i64 %9, 4
  br i1 %66, label %68, label %8

68:                                               ; preds = %8
  %69 = and i32 %2, -4
  br label %70

70:                                               ; preds = %68, %4
  %71 = phi i32 [ 0, %4 ], [ %69, %68 ]
  %72 = icmp eq i32 %71, %2
  br i1 %72, label %80, label %73

73:                                               ; preds = %70
  %74 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 11), align 8
  %75 = zext i32 %71 to i64
  %76 = getelementptr inbounds i32, i32* %0, i64 %75
  %77 = getelementptr inbounds i32, i32* %1, i64 %75
  %78 = sub nsw i32 %2, %71
  %79 = getelementptr inbounds i32, i32* %3, i64 %75
  tail call void %74(i32* %76, i32* %77, i32 %78, i32* %79) #6
  br label %80

80:                                               ; preds = %70, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub12_SSE2(i32*, i32*, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %49, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %46, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %44, %8 ]
  %11 = getelementptr inbounds i32, i32* %0, i64 %9
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = add nsw i64 %9, -1
  %15 = getelementptr inbounds i32, i32* %0, i64 %14
  %16 = bitcast i32* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %20 = getelementptr inbounds i32, i32* %1, i64 %9
  %21 = bitcast i32* %20 to <16 x i8>*
  %22 = load <16 x i8>, <16 x i8>* %21, align 1
  %23 = shufflevector <16 x i8> %22, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = shufflevector <16 x i8> %22, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %25 = getelementptr inbounds i32, i32* %1, i64 %14
  %26 = bitcast i32* %25 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = shufflevector <16 x i8> %27, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %30 = bitcast <16 x i8> %23 to <8 x i16>
  %31 = bitcast <16 x i8> %28 to <8 x i16>
  %32 = bitcast <16 x i8> %24 to <8 x i16>
  %33 = bitcast <16 x i8> %29 to <8 x i16>
  %34 = bitcast <16 x i8> %18 to <8 x i16>
  %35 = add <8 x i16> %30, %34
  %36 = sub <8 x i16> %35, %31
  %37 = bitcast <16 x i8> %19 to <8 x i16>
  %38 = add <8 x i16> %32, %37
  %39 = sub <8 x i16> %38, %33
  %40 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %36, <8 x i16> %39) #6
  %41 = sub <16 x i8> %13, %40
  %42 = getelementptr inbounds i32, i32* %3, i64 %9
  %43 = bitcast i32* %42 to <16 x i8>*
  store <16 x i8> %41, <16 x i8>* %43, align 1
  %44 = add nuw nsw i64 %10, 4
  %45 = icmp sgt i64 %44, %7
  %46 = add nuw nsw i64 %9, 4
  br i1 %45, label %47, label %8

47:                                               ; preds = %8
  %48 = and i32 %2, -4
  br label %49

49:                                               ; preds = %47, %4
  %50 = phi i32 [ 0, %4 ], [ %48, %47 ]
  %51 = icmp eq i32 %50, %2
  br i1 %51, label %59, label %52

52:                                               ; preds = %49
  %53 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 12), align 16
  %54 = zext i32 %50 to i64
  %55 = getelementptr inbounds i32, i32* %0, i64 %54
  %56 = getelementptr inbounds i32, i32* %1, i64 %54
  %57 = sub nsw i32 %2, %50
  %58 = getelementptr inbounds i32, i32* %3, i64 %54
  tail call void %53(i32* %55, i32* %56, i32 %57, i32* %58) #6
  br label %59

59:                                               ; preds = %49, %52
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorSub13_SSE2(i32*, i32*, i32, i32*) #1 {
  %5 = icmp slt i32 %2, 2
  br i1 %5, label %57, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %54, %8 ]
  %10 = phi i64 [ 2, %6 ], [ %52, %8 ]
  %11 = add nsw i64 %9, -1
  %12 = getelementptr inbounds i32, i32* %0, i64 %11
  %13 = bitcast i32* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> undef, i64 %14, i32 0
  %16 = getelementptr inbounds i32, i32* %0, i64 %9
  %17 = bitcast i32* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = insertelement <2 x i64> undef, i64 %18, i32 0
  %20 = getelementptr inbounds i32, i32* %1, i64 %9
  %21 = bitcast i32* %20 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = insertelement <2 x i64> undef, i64 %22, i32 0
  %24 = getelementptr inbounds i32, i32* %1, i64 %11
  %25 = bitcast i32* %24 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = insertelement <2 x i64> undef, i64 %26, i32 0
  %28 = bitcast <2 x i64> %15 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = bitcast <2 x i64> %23 to <16 x i8>
  %31 = shufflevector <16 x i8> %30, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %32 = bitcast <2 x i64> %27 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %34 = bitcast <16 x i8> %31 to <8 x i16>
  %35 = bitcast <16 x i8> %29 to <8 x i16>
  %36 = add <8 x i16> %34, %35
  %37 = lshr <8 x i16> %36, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %38 = bitcast <16 x i8> %33 to <8 x i16>
  %39 = sub <8 x i16> %37, %38
  %40 = icmp slt <8 x i16> %37, %38
  %41 = zext <8 x i1> %40 to <8 x i16>
  %42 = add <8 x i16> %39, %41
  %43 = ashr <8 x i16> %42, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %44 = add <8 x i16> %43, %37
  %45 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %44, <8 x i16> undef) #6
  %46 = bitcast <2 x i64> %19 to <16 x i8>
  %47 = sub <16 x i8> %46, %45
  %48 = bitcast <16 x i8> %47 to <2 x i64>
  %49 = getelementptr inbounds i32, i32* %3, i64 %9
  %50 = extractelement <2 x i64> %48, i32 0
  %51 = bitcast i32* %49 to i64*
  store i64 %50, i64* %51, align 1
  %52 = add nuw nsw i64 %10, 2
  %53 = icmp sgt i64 %52, %7
  %54 = add nuw nsw i64 %9, 2
  br i1 %53, label %55, label %8

55:                                               ; preds = %8
  %56 = and i32 %2, -2
  br label %57

57:                                               ; preds = %55, %4
  %58 = phi i32 [ 0, %4 ], [ %56, %55 ]
  %59 = icmp eq i32 %58, %2
  br i1 %59, label %67, label %60

60:                                               ; preds = %57
  %61 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub_C, i64 0, i64 13), align 8
  %62 = zext i32 %58 to i64
  %63 = getelementptr inbounds i32, i32* %0, i64 %62
  %64 = getelementptr inbounds i32, i32* %1, i64 %62
  %65 = sub nsw i32 %2, %58
  %66 = getelementptr inbounds i32, i32* %3, i64 %62
  tail call void %61(i32* %63, i32* %64, i32 %65, i32* %66) #6
  br label %67

67:                                               ; preds = %57, %60
  ret void
}

declare void @VP8LSubtractGreenFromBlueAndRed_C(i32*, i32) local_unnamed_addr #4

declare void @VP8LTransformColor_C(%struct.VP8LMultipliers*, i32*, i32) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #5

declare void @VP8LCollectColorBlueTransforms_C(i32*, i32, i32, i32, i32, i32, i32*) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #5

declare void @VP8LCollectColorRedTransforms_C(i32*, i32, i32, i32, i32, i32*) local_unnamed_addr #4

declare void @VP8LBundleColorMap_C(i8*, i32, i32, i32*) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8>, <16 x i8>) #5

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8>, <16 x i8>) #5

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = !{!10}
!10 = distinct !{!10, !6}
!11 = !{!5, !8}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !13}
!15 = distinct !{!15, !3}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !13}
!22 = distinct !{!22, !13}
