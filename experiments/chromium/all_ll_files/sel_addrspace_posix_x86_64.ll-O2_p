; ModuleID = '../../native_client/src/trusted/service_runtime/arch/x86_64/sel_addrspace_posix_x86_64.c'
source_filename = "../../native_client/src/trusted/service_runtime/arch/x86_64/sel_addrspace_posix_x86_64.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rlimit = type { i64, i64 }

@.str = private unnamed_addr constant [39 x i8] c"NaClAllocateSpace(*, 0x%016lx bytes).\0A\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"Fatal error in file %s, line %d: !(%s)\0A\00", align 1
@.str.2 = private unnamed_addr constant [89 x i8] c"../../native_client/src/trusted/service_runtime/arch/x86_64/sel_addrspace_posix_x86_64.c\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"addrsp_size == FOURGIG\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"NaClAllocatePow2AlignedMemory\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"Memory allocation failed\0A\00", align 1
@.str.6 = private unnamed_addr constant [41 x i8] c"NaClAllocatePow2AlignedMemory::getrlimit\00", align 1
@.str.7 = private unnamed_addr constant [80 x i8] c"Please run \22ulimit -v unlimited\22 (bash) or \22limit vmemoryuse unlimited\22 (tcsh)\0A\00", align 1
@.str.8 = private unnamed_addr constant [71 x i8] c"and restart the app.  NaCl requires at least %ld kilobytes of virtual\0A\00", align 1
@.str.9 = private unnamed_addr constant [65 x i8] c"address space. NB: Raising the hard limit requires root access.\0A\00", align 1
@.str.10 = private unnamed_addr constant [43 x i8] c"NaClAllocateSpace: addr space at 0x%016lx\0A\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"%25s %016lx\0A\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c" Ask:\00", align 1
@.str.13 = private unnamed_addr constant [77 x i8] c"NaClAllocatePow2AlignedMemory: Failed to reserve %lx bytes of address space\0A\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"orig memory at\00", align 1
@.str.15 = private unnamed_addr constant [21 x i8] c"%25s %016lx, %016lx\0A\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"Freeing front:\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"munmap (front)\00", align 1
@.str.18 = private unnamed_addr constant [52 x i8] c"NaClAllocatePow2AlignedMemory: munmap front failed\0A\00", align 1
@.str.19 = private unnamed_addr constant [14 x i8] c"Freeing tail:\00", align 1
@.str.20 = private unnamed_addr constant [13 x i8] c"munmap (end)\00", align 1
@.str.21 = private unnamed_addr constant [51 x i8] c"NaClAllocatePow2AlignedMemory: munmap tail failed\0A\00", align 1
@.str.22 = private unnamed_addr constant [16 x i8] c"Aligned memory:\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClAllocateSpaceAslr(i8** nocapture, i64, i32) local_unnamed_addr #0 {
  %4 = alloca i64, align 8
  %5 = alloca %struct.rlimit, align 8
  %6 = bitcast %struct.rlimit* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  %7 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %5, i64 0, i32 0
  %8 = bitcast %struct.rlimit* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i64 %1) #6
  %9 = icmp eq i64 %1, 4294967296
  br i1 %9, label %11, label %10

10:                                               ; preds = %3
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.2, i64 0, i64 0), i32 137, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0)) #6
  br label %11

11:                                               ; preds = %10, %3
  tail call void @NaClAddrSpaceBeforeAlloc(i64 90194313216) #6
  %12 = tail call i32* @__errno_location() #7
  store i32 0, i32* %12, align 4
  %13 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #6
  store i64 -6148914691236517206, i64* %4, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i64 94489280512) #6
  %14 = icmp eq i32 %2, 1
  br i1 %14, label %15, label %17

15:                                               ; preds = %11
  %16 = call i32 @NaClFindAddressSpaceRandomized(i64* nonnull %4, i64 94489280512, i32 8) #6
  br label %19

17:                                               ; preds = %11
  %18 = call i32 @NaClFindAddressSpace(i64* nonnull %4, i64 94489280512) #6
  br label %19

19:                                               ; preds = %17, %15
  %20 = phi i32 [ %16, %15 ], [ %18, %17 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i64 94489280512) #6
  br label %23

23:                                               ; preds = %22, %19
  %24 = load i64, i64* %4, align 8
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i64 %24) #6
  %25 = load i64, i64* %4, align 8
  %26 = add i64 %25, 4294967295
  %27 = and i64 %26, -4294967296
  %28 = sub i64 %27, %25
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %36, label %30

30:                                               ; preds = %23
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i64 0, i64 0), i64 %25, i64 %28) #6
  %31 = bitcast i64* %4 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = call i32 @munmap(i8* %32, i64 %28) #6
  %34 = icmp eq i32 %33, -1
  br i1 %34, label %35, label %36

35:                                               ; preds = %30
  call void @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0)) #8
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.18, i64 0, i64 0)) #6
  br label %36

36:                                               ; preds = %35, %30, %23
  %37 = sub i64 4294967296, %28
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %45, label %39

39:                                               ; preds = %36
  %40 = add i64 %27, 90194313216
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i64 %40, i64 %37) #6
  %41 = inttoptr i64 %40 to i8*
  %42 = call i32 @munmap(i8* %41, i64 %37) #6
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  call void @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.20, i64 0, i64 0)) #8
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.21, i64 0, i64 0)) #6
  br label %45

45:                                               ; preds = %36, %39, %44
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i64 0, i64 0), i64 %27) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #6
  %46 = icmp eq i64 %27, 0
  br i1 %46, label %47, label %59

47:                                               ; preds = %45
  %48 = load i32, i32* %12, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %47
  call void @perror(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0)) #9
  br label %51

51:                                               ; preds = %47, %50
  call void (i32, i8*, ...) @NaClLog(i32 -2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0)) #6
  %52 = call i32 @getrlimit64(i32 9, %struct.rlimit* nonnull %5) #6
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %55, label %54

54:                                               ; preds = %51
  call void @perror(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.6, i64 0, i64 0)) #9
  br label %63

55:                                               ; preds = %51
  %56 = load i64, i64* %7, align 8
  %57 = icmp ult i64 %56, 90194313216
  br i1 %57, label %58, label %63

58:                                               ; preds = %55
  call void (i32, i8*, ...) @NaClLog(i32 -1, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.7, i64 0, i64 0)) #6
  call void (i32, i8*, ...) @NaClLog(i32 -1, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.8, i64 0, i64 0), i64 88080384) #6
  call void (i32, i8*, ...) @NaClLog(i32 -1, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.9, i64 0, i64 0)) #6
  br label %63

59:                                               ; preds = %45
  %60 = inttoptr i64 %27 to i8*
  %61 = getelementptr inbounds i8, i8* %60, i64 42949672960
  store i8* %61, i8** %0, align 8
  %62 = ptrtoint i8* %61 to i64
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.10, i64 0, i64 0), i64 %62) #6
  br label %63

63:                                               ; preds = %54, %58, %55, %59
  %64 = phi i32 [ 0, %59 ], [ 65, %55 ], [ 65, %58 ], [ 65, %54 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  ret i32 %64
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #2

declare void @NaClAddrSpaceBeforeAlloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare void @perror(i8* nocapture readonly) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @getrlimit64(i32, %struct.rlimit*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @NaClFindAddressSpaceRandomized(i64*, i64, i32) local_unnamed_addr #2

declare i32 @NaClFindAddressSpace(i64*, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @munmap(i8*, i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }
attributes #8 = { cold nounwind }
attributes #9 = { cold }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
