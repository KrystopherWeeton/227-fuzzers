; ModuleID = '../../v8/src/ast/source-range-ast-visitor.cc'
source_filename = "../../v8/src/ast/source-range-ast-visitor.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::SourceRangeAstVisitor" = type { %"class.v8::internal::AstTraversalVisitor.base", %"class.v8::internal::SourceRangeMap"*, %"class.std::__1::unordered_set" }
%"class.v8::internal::AstTraversalVisitor.base" = type <{ i64, i8, [7 x i8], %"class.v8::internal::AstNode"*, i32 }>
%"class.v8::internal::AstNode" = type { i32, i32 }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.14", %"class.std::__1::__compressed_pair.20", %"class.std::__1::__compressed_pair.25", %"class.std::__1::__compressed_pair.27", [4 x i8] }>
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16", %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i64 }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { float }
%"class.v8::internal::Expression" = type { %"class.v8::internal::AstNode" }
%"class.v8::internal::SourceRangeMap" = type { %"class.v8::internal::ZoneMap" }
%"class.v8::internal::ZoneMap" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.5" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.v8::internal::Block" = type { %"class.v8::internal::BreakableStatement", %"class.v8::internal::ZoneList", %"class.v8::internal::Scope"* }
%"class.v8::internal::BreakableStatement" = type { %"class.v8::internal::Statement" }
%"class.v8::internal::Statement" = type { %"class.v8::internal::AstNode" }
%"class.v8::internal::ZoneList" = type { %"class.v8::internal::Statement"**, i32, i32 }
%"class.v8::internal::Scope" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::VariableMap", %"class.v8::base::ThreadedListBase", %"class.v8::base::ThreadedListBase.31", %"class.v8::base::ThreadedListBase.33", %"class.v8::internal::Handle.34", i32, i32, i32, i32, i8, i16, [5 x i8] }>
%"class.v8::internal::VariableMap" = type { %"class.v8::base::PointerTemplateHashMapImpl" }
%"class.v8::base::PointerTemplateHashMapImpl" = type { %"class.v8::base::TemplateHashMapImpl" }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::KeyEqualityMatcher<void *>, v8::internal::ZoneAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::KeyEqualityMatcher<void *>, v8::internal::ZoneAllocationPolicy>::Impl" = type { %"class.v8::internal::ZoneAllocationPolicy", %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"class.v8::internal::ZoneAllocationPolicy" = type { %"class.v8::internal::Zone"* }
%"struct.v8::base::TemplateHashMapEntry" = type <{ i8*, i8*, i32, [4 x i8] }>
%"class.v8::base::ThreadedListBase" = type { %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** }
%"class.v8::internal::Variable" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, i32, i32, i16, [6 x i8] }>
%"class.v8::internal::AstRawString" = type <{ %union.anon, %"class.v8::internal::Vector", i32, i8, [3 x i8] }>
%union.anon = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Vector" = type { i8*, i64 }
%"class.v8::base::ThreadedListBase.31" = type { %"class.v8::internal::VariableProxy"*, %"class.v8::internal::VariableProxy"** }
%"class.v8::internal::VariableProxy" = type { %"class.v8::internal::Expression", %union.anon.32, %"class.v8::internal::VariableProxy"* }
%union.anon.32 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::base::ThreadedListBase.33" = type { %"class.v8::internal::Declaration"*, %"class.v8::internal::Declaration"** }
%"class.v8::internal::Declaration" = type { %"class.v8::internal::AstNode", %"class.v8::internal::Variable"*, %"class.v8::internal::Declaration"* }
%"class.v8::internal::Handle.34" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::AstTraversalVisitor" = type <{ i64, i8, [7 x i8], %"class.v8::internal::AstNode"*, i32, [4 x i8] }>
%"class.v8::internal::ZoneObject" = type { i8 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair.48" }
%"struct.std::__1::pair.48" = type { %"class.v8::internal::ZoneObject"*, %"class.v8::internal::AstNodeSourceRanges"* }
%"class.v8::internal::AstNodeSourceRanges" = type { i32 (...)** }
%"class.v8::internal::SwitchStatement" = type { %"class.v8::internal::BreakableStatement", %"class.v8::internal::Expression"*, %"class.v8::internal::ZoneList.35" }
%"class.v8::internal::ZoneList.35" = type { %"class.v8::internal::CaseClause"**, i32, i32 }
%"class.v8::internal::CaseClause" = type { %"class.v8::internal::Expression"*, %"class.v8::internal::ZoneList" }
%"class.v8::internal::FunctionLiteral" = type { %"class.v8::internal::Expression", i32, i32, i32, i32, i32, i32, %"class.v8::internal::AstConsString"*, %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::ZoneList", %"class.v8::internal::AstConsString"*, %"class.v8::internal::Handle", %"class.v8::internal::ProducedPreparseData"* }
%"class.v8::internal::DeclarationScope" = type <{ %"class.v8::internal::Scope.base", i16, i8, [2 x i8], i32, [4 x i8], %"class.v8::internal::ZoneList.36", %"class.v8::base::ThreadedListBase.37", %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, %"class.v8::internal::PreparseDataBuilder"*, %"struct.v8::internal::DeclarationScope::RareData"* }>
%"class.v8::internal::Scope.base" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::VariableMap", %"class.v8::base::ThreadedListBase", %"class.v8::base::ThreadedListBase.31", %"class.v8::base::ThreadedListBase.33", %"class.v8::internal::Handle.34", i32, i32, i32, i32, i8, i16 }>
%"class.v8::internal::ZoneList.36" = type { %"class.v8::internal::Variable"**, i32, i32 }
%"class.v8::base::ThreadedListBase.37" = type { %"class.v8::internal::SloppyBlockFunctionStatement"*, %"class.v8::internal::SloppyBlockFunctionStatement"** }
%"class.v8::internal::SloppyBlockFunctionStatement" = type { %"class.v8::internal::Statement", %"class.v8::internal::Variable"*, %"class.v8::internal::Statement"*, %"class.v8::internal::SloppyBlockFunctionStatement"* }
%"class.v8::internal::PreparseDataBuilder" = type <{ %"class.v8::internal::PreparseDataBuilder"*, %"class.v8::internal::PreparseDataBuilder::ByteData", %union.anon.40, %"class.v8::internal::DeclarationScope"*, i32, i32, i32, i8, [3 x i8] }>
%"class.v8::internal::PreparseDataBuilder::ByteData" = type <{ %union.anon.38, i8, [7 x i8] }>
%union.anon.38 = type { %struct.anon }
%struct.anon = type { %"class.std::__1::vector"*, i32 }
%"class.std::__1::vector" = type opaque
%union.anon.40 = type { %"class.v8::internal::ScopedList" }
%"class.v8::internal::ScopedList" = type { %"class.std::__1::vector.41"*, i64, i64 }
%"class.std::__1::vector.41" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8**, i8**, %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { i8** }
%"struct.v8::internal::DeclarationScope::RareData" = type { %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"* }
%"class.v8::internal::AstConsString" = type { %"class.v8::internal::Handle", %"struct.v8::internal::AstConsString::Segment" }
%"struct.v8::internal::AstConsString::Segment" = type { %"class.v8::internal::AstRawString"*, %"struct.v8::internal::AstConsString::Segment"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::ProducedPreparseData" = type { i32 (...)** }
%"class.v8::internal::TryCatchStatement" = type <{ %"class.v8::internal::TryStatement", %"class.v8::internal::Scope"*, %"class.v8::internal::Block"*, i32, [4 x i8] }>
%"class.v8::internal::TryStatement" = type { %"class.v8::internal::Statement", %"class.v8::internal::Block"* }
%"class.v8::internal::TryFinallyStatement" = type { %"class.v8::internal::TryStatement", %"class.v8::internal::Block"* }
%"class.v8::internal::ForStatement" = type { %"class.v8::internal::IterationStatement", %"class.v8::internal::Statement"*, %"class.v8::internal::Expression"*, %"class.v8::internal::Statement"* }
%"class.v8::internal::IterationStatement" = type { %"class.v8::internal::BreakableStatement", %"class.v8::internal::Statement"* }
%"class.v8::internal::ZoneList.49" = type { %"class.v8::internal::ClassLiteralProperty"**, i32, i32 }
%"class.v8::internal::ClassLiteralProperty" = type { %"class.v8::internal::LiteralProperty", i8, i8, i8, %"class.v8::internal::Variable"* }
%"class.v8::internal::LiteralProperty" = type { %"class.v8::internal::PointerWithPayload", %"class.v8::internal::Expression"* }
%"class.v8::internal::PointerWithPayload" = type { i64 }
%"class.v8::internal::InitializeClassStaticElementsStatement" = type { %"class.v8::internal::Statement", %"class.v8::internal::ZoneList.50"* }
%"class.v8::internal::ZoneList.50" = type { %"class.v8::internal::ClassLiteralStaticElement"**, i32, i32 }
%"class.v8::internal::ClassLiteralStaticElement" = type { i8, %union.anon.51 }
%union.anon.51 = type { %"class.v8::internal::ClassLiteralProperty"* }
%"class.v8::internal::ObjectLiteralProperty" = type <{ %"class.v8::internal::LiteralProperty", i8, i8, [6 x i8] }>
%"struct.v8::internal::NaryOperation::NaryOperationEntry" = type <{ %"class.v8::internal::Expression"*, i32, [4 x i8] }>
%"class.v8::internal::ClassLiteral" = type { %"class.v8::internal::Expression", i32, %"class.v8::internal::ClassScope"*, %"class.v8::internal::Expression"*, %"class.v8::internal::FunctionLiteral"*, %"class.v8::internal::ZoneList.49"*, %"class.v8::internal::ZoneList.49"*, %"class.v8::internal::FunctionLiteral"*, %"class.v8::internal::FunctionLiteral"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"* }
%"class.v8::internal::ClassScope" = type <{ %"class.v8::internal::Scope.base", [5 x i8], %"class.v8::internal::PointerWithPayload.62", %"class.v8::internal::Variable"*, i8, i8, i8, i8, [4 x i8] }>
%"class.v8::internal::PointerWithPayload.62" = type { i64 }
%"class.v8::internal::Assignment" = type { %"class.v8::internal::Expression", %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"* }
%"class.v8::internal::Conditional" = type { %"class.v8::internal::Expression", %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"* }
%"class.v8::internal::ZoneList.55" = type { %"class.v8::internal::Expression"**, i32, i32 }

$_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE10VisitBlockEPNS0_5BlockE = comdat any

$_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE20VisitSwitchStatementEPNS0_15SwitchStatementE = comdat any

$_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE20VisitFunctionLiteralEPNS0_15FunctionLiteralE = comdat any

$_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE = comdat any

$_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE17VisitForStatementEPNS0_12ForStatementE = comdat any

$_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE43VisitInitializeClassStaticElementsStatementEPNS0_38InitializeClassStaticElementsStatementE = comdat any

$_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE15VisitAssignmentEPNS0_10AssignmentE = comdat any

$_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE17VisitClassLiteralEPNS0_12ClassLiteralE = comdat any

$_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE16VisitConditionalEPNS0_11ConditionalE = comdat any

$_ZNSt3__112__hash_tableIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEE25__emplace_unique_key_argsIiJRiEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIiPvEEEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__112__hash_tableIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEE6rehashEm = comdat any

$_ZNSt3__112__hash_tableIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEE8__rehashEm = comdat any

@.str = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.1 = private unnamed_addr constant [64 x i8] c"enclosingSourceRanges->HasRange(SourceRangeKind::kContinuation)\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1

@_ZN2v88internal21SourceRangeAstVisitorC1EmPNS0_10ExpressionEPNS0_14SourceRangeMapE = hidden unnamed_addr alias void (%"class.v8::internal::SourceRangeAstVisitor"*, i64, %"class.v8::internal::Expression"*, %"class.v8::internal::SourceRangeMap"*), void (%"class.v8::internal::SourceRangeAstVisitor"*, i64, %"class.v8::internal::Expression"*, %"class.v8::internal::SourceRangeMap"*)* @_ZN2v88internal21SourceRangeAstVisitorC2EmPNS0_10ExpressionEPNS0_14SourceRangeMapE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21SourceRangeAstVisitorC2EmPNS0_10ExpressionEPNS0_14SourceRangeMapE(%"class.v8::internal::SourceRangeAstVisitor"* nocapture, i64, %"class.v8::internal::Expression"*, %"class.v8::internal::SourceRangeMap"*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %2, i64 0, i32 0
  %6 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 3
  store %"class.v8::internal::AstNode"* %5, %"class.v8::internal::AstNode"** %6, align 8
  %7 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 0
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 1
  store %"class.v8::internal::SourceRangeMap"* %3, %"class.v8::internal::SourceRangeMap"** %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 2
  %12 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 2, i32 0, i32 3
  %13 = bitcast %"class.std::__1::__compressed_pair.27"* %12 to i32*
  %14 = bitcast %"class.std::__1::unordered_set"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 32, i1 false) #8
  store i32 1065353216, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21SourceRangeAstVisitor10VisitBlockEPNS0_5BlockE(%"class.v8::internal::SourceRangeAstVisitor"*, %"class.v8::internal::Block"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.v8::internal::SourceRangeAstVisitor"* %0 to %"class.v8::internal::AstTraversalVisitor"*
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE10VisitBlockEPNS0_5BlockE(%"class.v8::internal::AstTraversalVisitor"* %3, %"class.v8::internal::Block"* %1)
  %4 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %1, i64 0, i32 1
  %5 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 1
  %6 = load %"class.v8::internal::SourceRangeMap"*, %"class.v8::internal::SourceRangeMap"** %5, align 8
  %7 = bitcast %"class.v8::internal::Block"* %1 to %"class.v8::internal::ZoneObject"*
  %8 = getelementptr inbounds %"class.v8::internal::SourceRangeMap", %"class.v8::internal::SourceRangeMap"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %9 = bitcast %"class.std::__1::__tree_end_node"* %8 to %"class.std::__1::__tree_node"**
  %10 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %9, align 8
  %11 = icmp eq %"class.std::__1::__tree_node"* %10, null
  br i1 %11, label %46, label %12

12:                                               ; preds = %2, %12
  %13 = phi %"class.std::__1::__tree_end_node"* [ %23, %12 ], [ %8, %2 ]
  %14 = phi %"class.std::__1::__tree_node"* [ %24, %12 ], [ %10, %2 ]
  %15 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %14, i64 0, i32 1, i32 0, i32 0
  %16 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %15, align 8
  %17 = icmp ult %"class.v8::internal::ZoneObject"* %16, %7
  %18 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %14, i64 0, i32 0, i32 1
  %19 = bitcast %"class.std::__1::__tree_node_base"** %18 to %"class.std::__1::__tree_node"**
  %20 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %14, i64 0, i32 0, i32 0
  %21 = bitcast %"class.std::__1::__tree_node"* %14 to %"class.std::__1::__tree_node"**
  %22 = select i1 %17, %"class.std::__1::__tree_node"** %19, %"class.std::__1::__tree_node"** %21
  %23 = select i1 %17, %"class.std::__1::__tree_end_node"* %13, %"class.std::__1::__tree_end_node"* %20
  %24 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %22, align 8
  %25 = icmp eq %"class.std::__1::__tree_node"* %24, null
  br i1 %25, label %26, label %12

26:                                               ; preds = %12
  %27 = icmp eq %"class.std::__1::__tree_end_node"* %23, %8
  br i1 %27, label %46, label %28

28:                                               ; preds = %26
  %29 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %23, i64 4
  %30 = bitcast %"class.std::__1::__tree_end_node"* %29 to %"class.v8::internal::ZoneObject"**
  %31 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %30, align 8
  %32 = icmp ugt %"class.v8::internal::ZoneObject"* %31, %7
  br i1 %32, label %46, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %23, i64 5
  %35 = bitcast %"class.std::__1::__tree_end_node"* %34 to %"class.v8::internal::AstNodeSourceRanges"**
  %36 = load %"class.v8::internal::AstNodeSourceRanges"*, %"class.v8::internal::AstNodeSourceRanges"** %35, align 8
  %37 = icmp eq %"class.v8::internal::AstNodeSourceRanges"* %36, null
  br i1 %37, label %46, label %38

38:                                               ; preds = %33
  %39 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %36 to i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)***
  %40 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)**, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*** %39, align 8
  %41 = getelementptr inbounds i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %40, i64 3
  %42 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %41, align 8
  %43 = tail call zeroext i1 %42(%"class.v8::internal::AstNodeSourceRanges"* nonnull %36, i32 2) #8
  br i1 %43, label %45, label %44, !prof !2

44:                                               ; preds = %38
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0)) #9
  unreachable

45:                                               ; preds = %38
  tail call void @_ZN2v88internal21SourceRangeAstVisitor32MaybeRemoveLastContinuationRangeEPNS0_8ZoneListIPNS0_9StatementEEE(%"class.v8::internal::SourceRangeAstVisitor"* %0, %"class.v8::internal::ZoneList"* %4)
  br label %46

46:                                               ; preds = %28, %26, %2, %33, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE10VisitBlockEPNS0_5BlockE(%"class.v8::internal::AstTraversalVisitor"*, %"class.v8::internal::Block"*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %4 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %3, %"class.v8::internal::AstNode"* %4)
  %6 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %1, i64 0, i32 2
  %7 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %6, align 8
  %8 = icmp eq %"class.v8::internal::Scope"* %7, null
  br i1 %8, label %55, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* %10, align 8
  %13 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %6, align 8
  %14 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %13, i64 0, i32 6, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %13, i64 0, i32 6, i32 1
  %16 = load %"class.v8::internal::Declaration"**, %"class.v8::internal::Declaration"*** %15, align 8
  %17 = icmp eq %"class.v8::internal::Declaration"** %14, %16
  %18 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  br i1 %17, label %19, label %21

19:                                               ; preds = %9
  %20 = load i8, i8* %18, align 8, !range !3
  br label %50

21:                                               ; preds = %9
  %22 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %23 = load i8, i8* %18, align 8, !range !3
  %24 = icmp eq i8 %23, 0
  br label %25

25:                                               ; preds = %21, %43
  %26 = phi i8 [ %23, %21 ], [ %40, %43 ]
  %27 = phi i8 [ %23, %21 ], [ 0, %43 ]
  %28 = phi i1 [ %24, %21 ], [ true, %43 ]
  %29 = phi %"class.v8::internal::Declaration"** [ %14, %21 ], [ %45, %43 ]
  %30 = bitcast %"class.v8::internal::Declaration"** %29 to %"class.v8::internal::AstNode"**
  %31 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %30, align 8
  br i1 %28, label %32, label %39

32:                                               ; preds = %25
  %33 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %34 = load i64, i64* %22, align 8
  %35 = icmp ult i64 %33, %34
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  store i8 1, i8* %18, align 8
  br label %47

37:                                               ; preds = %32
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %31) #8
  %38 = load i8, i8* %18, align 8, !range !3
  br label %39

39:                                               ; preds = %25, %37
  %40 = phi i8 [ %26, %25 ], [ %38, %37 ]
  %41 = phi i8 [ %27, %25 ], [ %38, %37 ]
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %47

43:                                               ; preds = %39
  %44 = load %"class.v8::internal::Declaration"*, %"class.v8::internal::Declaration"** %29, align 8
  %45 = getelementptr inbounds %"class.v8::internal::Declaration", %"class.v8::internal::Declaration"* %44, i64 0, i32 2
  %46 = icmp eq %"class.v8::internal::Declaration"** %45, %16
  br i1 %46, label %47, label %25

47:                                               ; preds = %43, %39, %36
  %48 = phi i8 [ 1, %36 ], [ %40, %39 ], [ %40, %43 ]
  %49 = load i32, i32* %10, align 8
  br label %50

50:                                               ; preds = %19, %47
  %51 = phi i8 [ %48, %47 ], [ %20, %19 ]
  %52 = phi i32 [ %49, %47 ], [ %12, %19 ]
  %53 = add nsw i32 %52, -1
  store i32 %53, i32* %10, align 8
  %54 = icmp eq i8 %51, 0
  br i1 %54, label %55, label %88

55:                                               ; preds = %50, %2
  %56 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %1, i64 0, i32 1, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = icmp sgt i32 %57, 0
  br i1 %58, label %59, label %88

59:                                               ; preds = %55
  %60 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %1, i64 0, i32 1, i32 0
  %61 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %62 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %63 = load i8, i8* %61, align 8, !range !3
  %64 = icmp eq i8 %63, 0
  br label %69

65:                                               ; preds = %84
  %66 = load i32, i32* %56, align 4
  %67 = sext i32 %66 to i64
  %68 = icmp slt i64 %87, %67
  br i1 %68, label %69, label %88

69:                                               ; preds = %59, %65
  %70 = phi i8 [ %63, %59 ], [ 0, %65 ]
  %71 = phi i1 [ %64, %59 ], [ true, %65 ]
  %72 = phi i64 [ 0, %59 ], [ %87, %65 ]
  %73 = load %"class.v8::internal::Statement"**, %"class.v8::internal::Statement"*** %60, align 8
  %74 = getelementptr inbounds %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %73, i64 %72
  %75 = bitcast %"class.v8::internal::Statement"** %74 to %"class.v8::internal::AstNode"**
  %76 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %75, align 8
  br i1 %71, label %77, label %84

77:                                               ; preds = %69
  %78 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %79 = load i64, i64* %62, align 8
  %80 = icmp ult i64 %78, %79
  br i1 %80, label %81, label %82

81:                                               ; preds = %77
  store i8 1, i8* %61, align 8
  br label %88

82:                                               ; preds = %77
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %76) #8
  %83 = load i8, i8* %61, align 8, !range !3
  br label %84

84:                                               ; preds = %69, %82
  %85 = phi i8 [ %70, %69 ], [ %83, %82 ]
  %86 = icmp eq i8 %85, 0
  %87 = add nuw nsw i64 %72, 1
  br i1 %86, label %65, label %88

88:                                               ; preds = %65, %84, %81, %55, %50
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21SourceRangeAstVisitor32MaybeRemoveLastContinuationRangeEPNS0_8ZoneListIPNS0_9StatementEEE(%"class.v8::internal::SourceRangeAstVisitor"* nocapture readonly, %"class.v8::internal::ZoneList"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %100, label %6

6:                                                ; preds = %2
  %7 = add nsw i32 %4, -1
  %8 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %1, i64 0, i32 0
  %9 = load %"class.v8::internal::Statement"**, %"class.v8::internal::Statement"*** %8, align 8
  %10 = sext i32 %7 to i64
  %11 = getelementptr inbounds %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %9, i64 %10
  %12 = load %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %12, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 63
  %16 = icmp eq i32 %15, 9
  br i1 %16, label %17, label %54

17:                                               ; preds = %6
  %18 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %12, i64 1
  %19 = bitcast %"class.v8::internal::Statement"* %18 to %"class.v8::internal::Expression"**
  %20 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %20, i64 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, 63
  %24 = icmp eq i32 %23, 50
  br i1 %24, label %25, label %54

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 1
  %27 = load %"class.v8::internal::SourceRangeMap"*, %"class.v8::internal::SourceRangeMap"** %26, align 8
  %28 = bitcast %"class.v8::internal::Expression"* %20 to %"class.v8::internal::ZoneObject"*
  %29 = getelementptr inbounds %"class.v8::internal::SourceRangeMap", %"class.v8::internal::SourceRangeMap"* %27, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %30 = bitcast %"class.std::__1::__tree_end_node"* %29 to %"class.std::__1::__tree_node"**
  %31 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %30, align 8
  %32 = icmp eq %"class.std::__1::__tree_node"* %31, null
  br i1 %32, label %100, label %33

33:                                               ; preds = %25, %33
  %34 = phi %"class.std::__1::__tree_end_node"* [ %44, %33 ], [ %29, %25 ]
  %35 = phi %"class.std::__1::__tree_node"* [ %45, %33 ], [ %31, %25 ]
  %36 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %35, i64 0, i32 1, i32 0, i32 0
  %37 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %36, align 8
  %38 = icmp ult %"class.v8::internal::ZoneObject"* %37, %28
  %39 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %35, i64 0, i32 0, i32 1
  %40 = bitcast %"class.std::__1::__tree_node_base"** %39 to %"class.std::__1::__tree_node"**
  %41 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %35, i64 0, i32 0, i32 0
  %42 = bitcast %"class.std::__1::__tree_node"* %35 to %"class.std::__1::__tree_node"**
  %43 = select i1 %38, %"class.std::__1::__tree_node"** %40, %"class.std::__1::__tree_node"** %42
  %44 = select i1 %38, %"class.std::__1::__tree_end_node"* %34, %"class.std::__1::__tree_end_node"* %41
  %45 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %43, align 8
  %46 = icmp eq %"class.std::__1::__tree_node"* %45, null
  br i1 %46, label %47, label %33

47:                                               ; preds = %33
  %48 = icmp eq %"class.std::__1::__tree_end_node"* %44, %29
  br i1 %48, label %100, label %49

49:                                               ; preds = %47
  %50 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %44, i64 4
  %51 = bitcast %"class.std::__1::__tree_end_node"* %50 to %"class.v8::internal::ZoneObject"**
  %52 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %51, align 8
  %53 = icmp ugt %"class.v8::internal::ZoneObject"* %52, %28
  br i1 %53, label %100, label %83

54:                                               ; preds = %17, %6
  %55 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 1
  %56 = load %"class.v8::internal::SourceRangeMap"*, %"class.v8::internal::SourceRangeMap"** %55, align 8
  %57 = bitcast %"class.v8::internal::Statement"* %12 to %"class.v8::internal::ZoneObject"*
  %58 = getelementptr inbounds %"class.v8::internal::SourceRangeMap", %"class.v8::internal::SourceRangeMap"* %56, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %59 = bitcast %"class.std::__1::__tree_end_node"* %58 to %"class.std::__1::__tree_node"**
  %60 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %59, align 8
  %61 = icmp eq %"class.std::__1::__tree_node"* %60, null
  br i1 %61, label %100, label %62

62:                                               ; preds = %54, %62
  %63 = phi %"class.std::__1::__tree_end_node"* [ %73, %62 ], [ %58, %54 ]
  %64 = phi %"class.std::__1::__tree_node"* [ %74, %62 ], [ %60, %54 ]
  %65 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %64, i64 0, i32 1, i32 0, i32 0
  %66 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %65, align 8
  %67 = icmp ult %"class.v8::internal::ZoneObject"* %66, %57
  %68 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %64, i64 0, i32 0, i32 1
  %69 = bitcast %"class.std::__1::__tree_node_base"** %68 to %"class.std::__1::__tree_node"**
  %70 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %64, i64 0, i32 0, i32 0
  %71 = bitcast %"class.std::__1::__tree_node"* %64 to %"class.std::__1::__tree_node"**
  %72 = select i1 %67, %"class.std::__1::__tree_node"** %69, %"class.std::__1::__tree_node"** %71
  %73 = select i1 %67, %"class.std::__1::__tree_end_node"* %63, %"class.std::__1::__tree_end_node"* %70
  %74 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %72, align 8
  %75 = icmp eq %"class.std::__1::__tree_node"* %74, null
  br i1 %75, label %76, label %62

76:                                               ; preds = %62
  %77 = icmp eq %"class.std::__1::__tree_end_node"* %73, %58
  br i1 %77, label %100, label %78

78:                                               ; preds = %76
  %79 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %73, i64 4
  %80 = bitcast %"class.std::__1::__tree_end_node"* %79 to %"class.v8::internal::ZoneObject"**
  %81 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %80, align 8
  %82 = icmp ugt %"class.v8::internal::ZoneObject"* %81, %57
  br i1 %82, label %100, label %83

83:                                               ; preds = %78, %49
  %84 = phi %"class.std::__1::__tree_end_node"* [ %44, %49 ], [ %73, %78 ]
  %85 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %84, i64 5
  %86 = bitcast %"class.std::__1::__tree_end_node"* %85 to %"class.v8::internal::AstNodeSourceRanges"**
  %87 = load %"class.v8::internal::AstNodeSourceRanges"*, %"class.v8::internal::AstNodeSourceRanges"** %86, align 8
  %88 = icmp eq %"class.v8::internal::AstNodeSourceRanges"* %87, null
  br i1 %88, label %100, label %89

89:                                               ; preds = %83
  %90 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %87 to i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)***
  %91 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)**, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*** %90, align 8
  %92 = getelementptr inbounds i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %91, i64 3
  %93 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %92, align 8
  %94 = tail call zeroext i1 %93(%"class.v8::internal::AstNodeSourceRanges"* nonnull %87, i32 2) #8
  br i1 %94, label %95, label %100

95:                                               ; preds = %89
  %96 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %87 to void (%"class.v8::internal::AstNodeSourceRanges"*)***
  %97 = load void (%"class.v8::internal::AstNodeSourceRanges"*)**, void (%"class.v8::internal::AstNodeSourceRanges"*)*** %96, align 8
  %98 = getelementptr inbounds void (%"class.v8::internal::AstNodeSourceRanges"*)*, void (%"class.v8::internal::AstNodeSourceRanges"*)** %97, i64 4
  %99 = load void (%"class.v8::internal::AstNodeSourceRanges"*)*, void (%"class.v8::internal::AstNodeSourceRanges"*)** %98, align 8
  tail call void %99(%"class.v8::internal::AstNodeSourceRanges"* nonnull %87) #8
  br label %100

100:                                              ; preds = %95, %89, %83, %78, %76, %54, %49, %47, %25, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21SourceRangeAstVisitor20VisitSwitchStatementEPNS0_15SwitchStatementE(%"class.v8::internal::SourceRangeAstVisitor"*, %"class.v8::internal::SwitchStatement"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.v8::internal::SourceRangeAstVisitor"* %0 to %"class.v8::internal::AstTraversalVisitor"*
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE20VisitSwitchStatementEPNS0_15SwitchStatementE(%"class.v8::internal::AstTraversalVisitor"* %3, %"class.v8::internal::SwitchStatement"* %1)
  %4 = getelementptr inbounds %"class.v8::internal::SwitchStatement", %"class.v8::internal::SwitchStatement"* %1, i64 0, i32 2, i32 0
  %5 = load %"class.v8::internal::CaseClause"**, %"class.v8::internal::CaseClause"*** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::SwitchStatement", %"class.v8::internal::SwitchStatement"* %1, i64 0, i32 2, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %"class.v8::internal::CaseClause"*, %"class.v8::internal::CaseClause"** %5, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %12, %2
  ret void

12:                                               ; preds = %2, %12
  %13 = phi %"class.v8::internal::CaseClause"** [ %16, %12 ], [ %5, %2 ]
  %14 = load %"class.v8::internal::CaseClause"*, %"class.v8::internal::CaseClause"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::CaseClause", %"class.v8::internal::CaseClause"* %14, i64 0, i32 1
  tail call void @_ZN2v88internal21SourceRangeAstVisitor32MaybeRemoveLastContinuationRangeEPNS0_8ZoneListIPNS0_9StatementEEE(%"class.v8::internal::SourceRangeAstVisitor"* %0, %"class.v8::internal::ZoneList"* %15)
  %16 = getelementptr inbounds %"class.v8::internal::CaseClause"*, %"class.v8::internal::CaseClause"** %13, i64 1
  %17 = icmp eq %"class.v8::internal::CaseClause"** %16, %9
  br i1 %17, label %11, label %12
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE20VisitSwitchStatementEPNS0_15SwitchStatementE(%"class.v8::internal::AstTraversalVisitor"*, %"class.v8::internal::SwitchStatement"*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %4 = getelementptr inbounds %"class.v8::internal::SwitchStatement", %"class.v8::internal::SwitchStatement"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %3, %"class.v8::internal::AstNode"* %4)
  %6 = getelementptr inbounds %"class.v8::internal::SwitchStatement", %"class.v8::internal::SwitchStatement"* %1, i64 0, i32 1
  %7 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %7, i64 0, i32 0
  %9 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 8, !range !3
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %74

12:                                               ; preds = %2
  %13 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %14 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %13, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %12
  store i8 1, i8* %9, align 8
  br label %74

18:                                               ; preds = %12
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %8) #8
  %19 = load i8, i8* %9, align 8, !range !3
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %74

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"class.v8::internal::SwitchStatement", %"class.v8::internal::SwitchStatement"* %1, i64 0, i32 2, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %74

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.v8::internal::SwitchStatement", %"class.v8::internal::SwitchStatement"* %1, i64 0, i32 2, i32 0
  %27 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  br label %33

28:                                               ; preds = %56, %50
  %29 = add nuw nsw i64 %34, 1
  %30 = load i32, i32* %22, align 4
  %31 = sext i32 %30 to i64
  %32 = icmp slt i64 %29, %31
  br i1 %32, label %33, label %74

33:                                               ; preds = %25, %28
  %34 = phi i64 [ 0, %25 ], [ %29, %28 ]
  %35 = load %"class.v8::internal::CaseClause"**, %"class.v8::internal::CaseClause"*** %26, align 8
  %36 = getelementptr inbounds %"class.v8::internal::CaseClause"*, %"class.v8::internal::CaseClause"** %35, i64 %34
  %37 = load %"class.v8::internal::CaseClause"*, %"class.v8::internal::CaseClause"** %36, align 8
  %38 = getelementptr inbounds %"class.v8::internal::CaseClause", %"class.v8::internal::CaseClause"* %37, i64 0, i32 0
  %39 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %38, align 8
  %40 = icmp eq %"class.v8::internal::Expression"* %39, null
  br i1 %40, label %50, label %41

41:                                               ; preds = %33
  %42 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %43 = load i64, i64* %27, align 8
  %44 = icmp ult i64 %42, %43
  br i1 %44, label %45, label %46

45:                                               ; preds = %41
  store i8 1, i8* %9, align 8
  br label %74

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %39, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %47) #8
  %48 = load i8, i8* %9, align 8, !range !3
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %50, label %74

50:                                               ; preds = %46, %33
  %51 = getelementptr inbounds %"class.v8::internal::CaseClause", %"class.v8::internal::CaseClause"* %37, i64 0, i32 1, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = icmp sgt i32 %52, 0
  br i1 %53, label %54, label %28

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"class.v8::internal::CaseClause", %"class.v8::internal::CaseClause"* %37, i64 0, i32 1, i32 0
  br label %60

56:                                               ; preds = %70
  %57 = load i32, i32* %51, align 4
  %58 = sext i32 %57 to i64
  %59 = icmp slt i64 %73, %58
  br i1 %59, label %60, label %28

60:                                               ; preds = %56, %54
  %61 = phi i64 [ 0, %54 ], [ %73, %56 ]
  %62 = load %"class.v8::internal::Statement"**, %"class.v8::internal::Statement"*** %55, align 8
  %63 = getelementptr inbounds %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %62, i64 %61
  %64 = bitcast %"class.v8::internal::Statement"** %63 to %"class.v8::internal::AstNode"**
  %65 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %64, align 8
  %66 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %67 = load i64, i64* %27, align 8
  %68 = icmp ult i64 %66, %67
  br i1 %68, label %69, label %70

69:                                               ; preds = %60
  store i8 1, i8* %9, align 8
  br label %74

70:                                               ; preds = %60
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %65) #8
  %71 = load i8, i8* %9, align 8, !range !3
  %72 = icmp eq i8 %71, 0
  %73 = add nuw nsw i64 %61, 1
  br i1 %72, label %56, label %74

74:                                               ; preds = %28, %46, %70, %69, %17, %2, %45, %21, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21SourceRangeAstVisitor20VisitFunctionLiteralEPNS0_15FunctionLiteralE(%"class.v8::internal::SourceRangeAstVisitor"*, %"class.v8::internal::FunctionLiteral"* readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %1, i64 0, i32 0, i32 0
  %4 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %0, %"class.v8::internal::AstNode"* %3) #8
  %5 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %1, i64 0, i32 8
  %6 = bitcast %"class.v8::internal::DeclarationScope"** %5 to %"class.v8::internal::Scope"**
  %7 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* %8, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %7, i64 0, i32 6, i32 0
  %12 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %7, i64 0, i32 6, i32 1
  %13 = load %"class.v8::internal::Declaration"**, %"class.v8::internal::Declaration"*** %12, align 8
  %14 = icmp eq %"class.v8::internal::Declaration"** %11, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 1
  %17 = load i8, i8* %16, align 8, !range !3
  br label %49

18:                                               ; preds = %2
  %19 = bitcast %"class.v8::internal::SourceRangeAstVisitor"* %0 to %"class.v8::internal::AstTraversalVisitor"*
  %20 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 0
  %22 = load i8, i8* %20, align 8, !range !3
  %23 = icmp eq i8 %22, 0
  br label %24

24:                                               ; preds = %18, %42
  %25 = phi i8 [ %22, %18 ], [ %39, %42 ]
  %26 = phi i8 [ %22, %18 ], [ 0, %42 ]
  %27 = phi i1 [ %23, %18 ], [ true, %42 ]
  %28 = phi %"class.v8::internal::Declaration"** [ %11, %18 ], [ %44, %42 ]
  %29 = bitcast %"class.v8::internal::Declaration"** %28 to %"class.v8::internal::AstNode"**
  %30 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %29, align 8
  br i1 %27, label %31, label %38

31:                                               ; preds = %24
  %32 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %33 = load i64, i64* %21, align 8
  %34 = icmp ult i64 %32, %33
  br i1 %34, label %35, label %36

35:                                               ; preds = %31
  store i8 1, i8* %20, align 8
  br label %46

36:                                               ; preds = %31
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %19, %"class.v8::internal::AstNode"* %30) #8
  %37 = load i8, i8* %20, align 8, !range !3
  br label %38

38:                                               ; preds = %24, %36
  %39 = phi i8 [ %25, %24 ], [ %37, %36 ]
  %40 = phi i8 [ %26, %24 ], [ %37, %36 ]
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %38
  %43 = load %"class.v8::internal::Declaration"*, %"class.v8::internal::Declaration"** %28, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Declaration", %"class.v8::internal::Declaration"* %43, i64 0, i32 2
  %45 = icmp eq %"class.v8::internal::Declaration"** %44, %13
  br i1 %45, label %46, label %24

46:                                               ; preds = %42, %38, %35
  %47 = phi i8 [ 1, %35 ], [ %39, %38 ], [ %39, %42 ]
  %48 = load i32, i32* %8, align 8
  br label %49

49:                                               ; preds = %15, %46
  %50 = phi i8 [ %47, %46 ], [ %17, %15 ]
  %51 = phi i32 [ %48, %46 ], [ %10, %15 ]
  %52 = add nsw i32 %51, -1
  store i32 %52, i32* %8, align 8
  %53 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 1
  %54 = icmp eq i8 %50, 0
  br i1 %54, label %55, label %92

55:                                               ; preds = %49
  %56 = load %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::DeclarationScope"** %5, align 8
  %57 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %56, i64 0, i32 1
  %58 = load i16, i16* %57, align 1
  %59 = trunc i16 %58 to i8
  %60 = icmp slt i8 %59, 0
  br i1 %60, label %92, label %61

61:                                               ; preds = %55
  store i32 %51, i32* %8, align 8
  %62 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %1, i64 0, i32 9, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %65, label %90

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %1, i64 0, i32 9, i32 0
  %67 = bitcast %"class.v8::internal::SourceRangeAstVisitor"* %0 to %"class.v8::internal::AstTraversalVisitor"*
  %68 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 0
  br label %73

69:                                               ; preds = %83
  %70 = load i32, i32* %62, align 4
  %71 = sext i32 %70 to i64
  %72 = icmp slt i64 %86, %71
  br i1 %72, label %73, label %87

73:                                               ; preds = %69, %65
  %74 = phi i64 [ 0, %65 ], [ %86, %69 ]
  %75 = load %"class.v8::internal::Statement"**, %"class.v8::internal::Statement"*** %66, align 8
  %76 = getelementptr inbounds %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %75, i64 %74
  %77 = bitcast %"class.v8::internal::Statement"** %76 to %"class.v8::internal::AstNode"**
  %78 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %77, align 8
  %79 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %80 = load i64, i64* %68, align 8
  %81 = icmp ult i64 %79, %80
  br i1 %81, label %82, label %83

82:                                               ; preds = %73
  store i8 1, i8* %53, align 8
  br label %87

83:                                               ; preds = %73
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %67, %"class.v8::internal::AstNode"* %78) #8
  %84 = load i8, i8* %53, align 8, !range !3
  %85 = icmp eq i8 %84, 0
  %86 = add nuw nsw i64 %74, 1
  br i1 %85, label %69, label %87

87:                                               ; preds = %69, %83, %82
  %88 = load i32, i32* %8, align 8
  %89 = add nsw i32 %88, -1
  br label %90

90:                                               ; preds = %87, %61
  %91 = phi i32 [ %89, %87 ], [ %52, %61 ]
  store i32 %91, i32* %8, align 8
  br label %92

92:                                               ; preds = %49, %55, %90
  %93 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %1, i64 0, i32 9
  tail call void @_ZN2v88internal21SourceRangeAstVisitor32MaybeRemoveLastContinuationRangeEPNS0_8ZoneListIPNS0_9StatementEEE(%"class.v8::internal::SourceRangeAstVisitor"* %0, %"class.v8::internal::ZoneList"* %93)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE20VisitFunctionLiteralEPNS0_15FunctionLiteralE(%"class.v8::internal::AstTraversalVisitor"*, %"class.v8::internal::FunctionLiteral"*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %4 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %1, i64 0, i32 0, i32 0
  %5 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %3, %"class.v8::internal::AstNode"* %4)
  %6 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %1, i64 0, i32 8
  %7 = bitcast %"class.v8::internal::DeclarationScope"** %6 to %"class.v8::internal::Scope"**
  %8 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %8, i64 0, i32 6, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %8, i64 0, i32 6, i32 1
  %14 = load %"class.v8::internal::Declaration"**, %"class.v8::internal::Declaration"*** %13, align 8
  %15 = icmp eq %"class.v8::internal::Declaration"** %12, %14
  %16 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  br i1 %15, label %17, label %19

17:                                               ; preds = %2
  %18 = load i8, i8* %16, align 8, !range !3
  br label %48

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %21 = load i8, i8* %16, align 8, !range !3
  %22 = icmp eq i8 %21, 0
  br label %23

23:                                               ; preds = %19, %41
  %24 = phi i8 [ %21, %19 ], [ %38, %41 ]
  %25 = phi i8 [ %21, %19 ], [ 0, %41 ]
  %26 = phi i1 [ %22, %19 ], [ true, %41 ]
  %27 = phi %"class.v8::internal::Declaration"** [ %12, %19 ], [ %43, %41 ]
  %28 = bitcast %"class.v8::internal::Declaration"** %27 to %"class.v8::internal::AstNode"**
  %29 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %28, align 8
  br i1 %26, label %30, label %37

30:                                               ; preds = %23
  %31 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %32 = load i64, i64* %20, align 8
  %33 = icmp ult i64 %31, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %30
  store i8 1, i8* %16, align 8
  br label %45

35:                                               ; preds = %30
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %29) #8
  %36 = load i8, i8* %16, align 8, !range !3
  br label %37

37:                                               ; preds = %23, %35
  %38 = phi i8 [ %24, %23 ], [ %36, %35 ]
  %39 = phi i8 [ %25, %23 ], [ %36, %35 ]
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %37
  %42 = load %"class.v8::internal::Declaration"*, %"class.v8::internal::Declaration"** %27, align 8
  %43 = getelementptr inbounds %"class.v8::internal::Declaration", %"class.v8::internal::Declaration"* %42, i64 0, i32 2
  %44 = icmp eq %"class.v8::internal::Declaration"** %43, %14
  br i1 %44, label %45, label %23

45:                                               ; preds = %41, %37, %34
  %46 = phi i8 [ 1, %34 ], [ %38, %37 ], [ %38, %41 ]
  %47 = load i32, i32* %9, align 8
  br label %48

48:                                               ; preds = %17, %45
  %49 = phi i8 [ %46, %45 ], [ %18, %17 ]
  %50 = phi i32 [ %47, %45 ], [ %11, %17 ]
  %51 = add nsw i32 %50, -1
  store i32 %51, i32* %9, align 8
  %52 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %53 = icmp eq i8 %49, 0
  br i1 %53, label %54, label %90

54:                                               ; preds = %48
  %55 = load %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::DeclarationScope"** %6, align 8
  %56 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %55, i64 0, i32 1
  %57 = load i16, i16* %56, align 1
  %58 = trunc i16 %57 to i8
  %59 = icmp slt i8 %58, 0
  br i1 %59, label %90, label %60

60:                                               ; preds = %54
  store i32 %50, i32* %9, align 8
  %61 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %1, i64 0, i32 9, i32 2
  %62 = load i32, i32* %61, align 4
  %63 = icmp sgt i32 %62, 0
  br i1 %63, label %64, label %88

64:                                               ; preds = %60
  %65 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %1, i64 0, i32 9, i32 0
  %66 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  br label %71

67:                                               ; preds = %81
  %68 = load i32, i32* %61, align 4
  %69 = sext i32 %68 to i64
  %70 = icmp slt i64 %84, %69
  br i1 %70, label %71, label %85

71:                                               ; preds = %67, %64
  %72 = phi i64 [ 0, %64 ], [ %84, %67 ]
  %73 = load %"class.v8::internal::Statement"**, %"class.v8::internal::Statement"*** %65, align 8
  %74 = getelementptr inbounds %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %73, i64 %72
  %75 = bitcast %"class.v8::internal::Statement"** %74 to %"class.v8::internal::AstNode"**
  %76 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %75, align 8
  %77 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %78 = load i64, i64* %66, align 8
  %79 = icmp ult i64 %77, %78
  br i1 %79, label %80, label %81

80:                                               ; preds = %71
  store i8 1, i8* %52, align 8
  br label %85

81:                                               ; preds = %71
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %76) #8
  %82 = load i8, i8* %52, align 8, !range !3
  %83 = icmp eq i8 %82, 0
  %84 = add nuw nsw i64 %72, 1
  br i1 %83, label %67, label %85

85:                                               ; preds = %67, %81, %80
  %86 = load i32, i32* %9, align 8
  %87 = add nsw i32 %86, -1
  br label %88

88:                                               ; preds = %85, %60
  %89 = phi i32 [ %87, %85 ], [ %51, %60 ]
  store i32 %89, i32* %9, align 8
  br label %90

90:                                               ; preds = %48, %54, %88
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21SourceRangeAstVisitor22VisitTryCatchStatementEPNS0_17TryCatchStatementE(%"class.v8::internal::SourceRangeAstVisitor"*, %"class.v8::internal::TryCatchStatement"* readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::TryCatchStatement", %"class.v8::internal::TryCatchStatement"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %0, %"class.v8::internal::AstNode"* %3) #8
  %5 = bitcast %"class.v8::internal::SourceRangeAstVisitor"* %0 to %"class.v8::internal::AstTraversalVisitor"*
  %6 = getelementptr inbounds %"class.v8::internal::TryCatchStatement", %"class.v8::internal::TryCatchStatement"* %1, i64 0, i32 0, i32 1
  %7 = load %"class.v8::internal::Block"*, %"class.v8::internal::Block"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %7, i64 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 1
  %10 = load i8, i8* %9, align 8, !range !3
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %31

12:                                               ; preds = %2
  %13 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %14 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %13, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %12
  store i8 1, i8* %9, align 8
  br label %31

18:                                               ; preds = %12
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %5, %"class.v8::internal::AstNode"* %8) #8
  %19 = load i8, i8* %9, align 8, !range !3
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %31

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"class.v8::internal::TryCatchStatement", %"class.v8::internal::TryCatchStatement"* %1, i64 0, i32 2
  %23 = load %"class.v8::internal::Block"*, %"class.v8::internal::Block"** %22, align 8
  %24 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %25 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = icmp ult i64 %24, %26
  br i1 %27, label %28, label %29

28:                                               ; preds = %21
  store i8 1, i8* %9, align 8
  br label %31

29:                                               ; preds = %21
  %30 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %23, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %5, %"class.v8::internal::AstNode"* %30) #8
  br label %31

31:                                               ; preds = %17, %2, %29, %28, %18
  %32 = load %"class.v8::internal::Block"*, %"class.v8::internal::Block"** %6, align 8
  %33 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %32, i64 0, i32 0, i32 0, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = and i32 %34, 63
  %36 = icmp eq i32 %35, 9
  br i1 %36, label %37, label %75

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %32, i64 0, i32 0, i32 0
  %39 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %38, i64 1
  %40 = bitcast %"class.v8::internal::Statement"* %39 to %"class.v8::internal::Expression"**
  %41 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %41, i64 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = and i32 %43, 63
  %45 = icmp eq i32 %44, 50
  br i1 %45, label %46, label %75

46:                                               ; preds = %37
  %47 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 1
  %48 = load %"class.v8::internal::SourceRangeMap"*, %"class.v8::internal::SourceRangeMap"** %47, align 8
  %49 = bitcast %"class.v8::internal::Expression"* %41 to %"class.v8::internal::ZoneObject"*
  %50 = getelementptr inbounds %"class.v8::internal::SourceRangeMap", %"class.v8::internal::SourceRangeMap"* %48, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %51 = bitcast %"class.std::__1::__tree_end_node"* %50 to %"class.std::__1::__tree_node"**
  %52 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %51, align 8
  %53 = icmp eq %"class.std::__1::__tree_node"* %52, null
  br i1 %53, label %121, label %54

54:                                               ; preds = %46, %54
  %55 = phi %"class.std::__1::__tree_end_node"* [ %65, %54 ], [ %50, %46 ]
  %56 = phi %"class.std::__1::__tree_node"* [ %66, %54 ], [ %52, %46 ]
  %57 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %56, i64 0, i32 1, i32 0, i32 0
  %58 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %57, align 8
  %59 = icmp ult %"class.v8::internal::ZoneObject"* %58, %49
  %60 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %56, i64 0, i32 0, i32 1
  %61 = bitcast %"class.std::__1::__tree_node_base"** %60 to %"class.std::__1::__tree_node"**
  %62 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %56, i64 0, i32 0, i32 0
  %63 = bitcast %"class.std::__1::__tree_node"* %56 to %"class.std::__1::__tree_node"**
  %64 = select i1 %59, %"class.std::__1::__tree_node"** %61, %"class.std::__1::__tree_node"** %63
  %65 = select i1 %59, %"class.std::__1::__tree_end_node"* %55, %"class.std::__1::__tree_end_node"* %62
  %66 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %64, align 8
  %67 = icmp eq %"class.std::__1::__tree_node"* %66, null
  br i1 %67, label %68, label %54

68:                                               ; preds = %54
  %69 = icmp eq %"class.std::__1::__tree_end_node"* %65, %50
  br i1 %69, label %121, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %65, i64 4
  %72 = bitcast %"class.std::__1::__tree_end_node"* %71 to %"class.v8::internal::ZoneObject"**
  %73 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %72, align 8
  %74 = icmp ugt %"class.v8::internal::ZoneObject"* %73, %49
  br i1 %74, label %121, label %104

75:                                               ; preds = %37, %31
  %76 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 1
  %77 = load %"class.v8::internal::SourceRangeMap"*, %"class.v8::internal::SourceRangeMap"** %76, align 8
  %78 = bitcast %"class.v8::internal::Block"* %32 to %"class.v8::internal::ZoneObject"*
  %79 = getelementptr inbounds %"class.v8::internal::SourceRangeMap", %"class.v8::internal::SourceRangeMap"* %77, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %80 = bitcast %"class.std::__1::__tree_end_node"* %79 to %"class.std::__1::__tree_node"**
  %81 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %80, align 8
  %82 = icmp eq %"class.std::__1::__tree_node"* %81, null
  br i1 %82, label %121, label %83

83:                                               ; preds = %75, %83
  %84 = phi %"class.std::__1::__tree_end_node"* [ %94, %83 ], [ %79, %75 ]
  %85 = phi %"class.std::__1::__tree_node"* [ %95, %83 ], [ %81, %75 ]
  %86 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %85, i64 0, i32 1, i32 0, i32 0
  %87 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %86, align 8
  %88 = icmp ult %"class.v8::internal::ZoneObject"* %87, %78
  %89 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %85, i64 0, i32 0, i32 1
  %90 = bitcast %"class.std::__1::__tree_node_base"** %89 to %"class.std::__1::__tree_node"**
  %91 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %85, i64 0, i32 0, i32 0
  %92 = bitcast %"class.std::__1::__tree_node"* %85 to %"class.std::__1::__tree_node"**
  %93 = select i1 %88, %"class.std::__1::__tree_node"** %90, %"class.std::__1::__tree_node"** %92
  %94 = select i1 %88, %"class.std::__1::__tree_end_node"* %84, %"class.std::__1::__tree_end_node"* %91
  %95 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %93, align 8
  %96 = icmp eq %"class.std::__1::__tree_node"* %95, null
  br i1 %96, label %97, label %83

97:                                               ; preds = %83
  %98 = icmp eq %"class.std::__1::__tree_end_node"* %94, %79
  br i1 %98, label %121, label %99

99:                                               ; preds = %97
  %100 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %94, i64 4
  %101 = bitcast %"class.std::__1::__tree_end_node"* %100 to %"class.v8::internal::ZoneObject"**
  %102 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %101, align 8
  %103 = icmp ugt %"class.v8::internal::ZoneObject"* %102, %78
  br i1 %103, label %121, label %104

104:                                              ; preds = %99, %70
  %105 = phi %"class.std::__1::__tree_end_node"* [ %65, %70 ], [ %94, %99 ]
  %106 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %105, i64 5
  %107 = bitcast %"class.std::__1::__tree_end_node"* %106 to %"class.v8::internal::AstNodeSourceRanges"**
  %108 = load %"class.v8::internal::AstNodeSourceRanges"*, %"class.v8::internal::AstNodeSourceRanges"** %107, align 8
  %109 = icmp eq %"class.v8::internal::AstNodeSourceRanges"* %108, null
  br i1 %109, label %121, label %110

110:                                              ; preds = %104
  %111 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %108 to i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)***
  %112 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)**, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*** %111, align 8
  %113 = getelementptr inbounds i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %112, i64 3
  %114 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %113, align 8
  %115 = tail call zeroext i1 %114(%"class.v8::internal::AstNodeSourceRanges"* nonnull %108, i32 2) #8
  br i1 %115, label %116, label %121

116:                                              ; preds = %110
  %117 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %108 to void (%"class.v8::internal::AstNodeSourceRanges"*)***
  %118 = load void (%"class.v8::internal::AstNodeSourceRanges"*)**, void (%"class.v8::internal::AstNodeSourceRanges"*)*** %117, align 8
  %119 = getelementptr inbounds void (%"class.v8::internal::AstNodeSourceRanges"*)*, void (%"class.v8::internal::AstNodeSourceRanges"*)** %118, i64 4
  %120 = load void (%"class.v8::internal::AstNodeSourceRanges"*)*, void (%"class.v8::internal::AstNodeSourceRanges"*)** %119, align 8
  tail call void %120(%"class.v8::internal::AstNodeSourceRanges"* nonnull %108) #8
  br label %121

121:                                              ; preds = %46, %68, %70, %75, %97, %99, %104, %110, %116
  tail call void @_ZN2v88internal21SourceRangeAstVisitor41MaybeRemoveContinuationRangeOfAsyncReturnEPNS0_17TryCatchStatementE(%"class.v8::internal::SourceRangeAstVisitor"* %0, %"class.v8::internal::TryCatchStatement"* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21SourceRangeAstVisitor28MaybeRemoveContinuationRangeEPNS0_9StatementE(%"class.v8::internal::SourceRangeAstVisitor"* nocapture readonly, %"class.v8::internal::Statement"* readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %1, i64 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 63
  %6 = icmp eq i32 %5, 9
  br i1 %6, label %7, label %44

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %1, i64 1
  %9 = bitcast %"class.v8::internal::Statement"* %8 to %"class.v8::internal::Expression"**
  %10 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %10, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 63
  %14 = icmp eq i32 %13, 50
  br i1 %14, label %15, label %44

15:                                               ; preds = %7
  %16 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 1
  %17 = load %"class.v8::internal::SourceRangeMap"*, %"class.v8::internal::SourceRangeMap"** %16, align 8
  %18 = bitcast %"class.v8::internal::Expression"* %10 to %"class.v8::internal::ZoneObject"*
  %19 = getelementptr inbounds %"class.v8::internal::SourceRangeMap", %"class.v8::internal::SourceRangeMap"* %17, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %20 = bitcast %"class.std::__1::__tree_end_node"* %19 to %"class.std::__1::__tree_node"**
  %21 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %20, align 8
  %22 = icmp eq %"class.std::__1::__tree_node"* %21, null
  br i1 %22, label %90, label %23

23:                                               ; preds = %15, %23
  %24 = phi %"class.std::__1::__tree_end_node"* [ %34, %23 ], [ %19, %15 ]
  %25 = phi %"class.std::__1::__tree_node"* [ %35, %23 ], [ %21, %15 ]
  %26 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %25, i64 0, i32 1, i32 0, i32 0
  %27 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %26, align 8
  %28 = icmp ult %"class.v8::internal::ZoneObject"* %27, %18
  %29 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %25, i64 0, i32 0, i32 1
  %30 = bitcast %"class.std::__1::__tree_node_base"** %29 to %"class.std::__1::__tree_node"**
  %31 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %25, i64 0, i32 0, i32 0
  %32 = bitcast %"class.std::__1::__tree_node"* %25 to %"class.std::__1::__tree_node"**
  %33 = select i1 %28, %"class.std::__1::__tree_node"** %30, %"class.std::__1::__tree_node"** %32
  %34 = select i1 %28, %"class.std::__1::__tree_end_node"* %24, %"class.std::__1::__tree_end_node"* %31
  %35 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %33, align 8
  %36 = icmp eq %"class.std::__1::__tree_node"* %35, null
  br i1 %36, label %37, label %23

37:                                               ; preds = %23
  %38 = icmp eq %"class.std::__1::__tree_end_node"* %34, %19
  br i1 %38, label %90, label %39

39:                                               ; preds = %37
  %40 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %34, i64 4
  %41 = bitcast %"class.std::__1::__tree_end_node"* %40 to %"class.v8::internal::ZoneObject"**
  %42 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %41, align 8
  %43 = icmp ugt %"class.v8::internal::ZoneObject"* %42, %18
  br i1 %43, label %90, label %73

44:                                               ; preds = %7, %2
  %45 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 1
  %46 = load %"class.v8::internal::SourceRangeMap"*, %"class.v8::internal::SourceRangeMap"** %45, align 8
  %47 = bitcast %"class.v8::internal::Statement"* %1 to %"class.v8::internal::ZoneObject"*
  %48 = getelementptr inbounds %"class.v8::internal::SourceRangeMap", %"class.v8::internal::SourceRangeMap"* %46, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %49 = bitcast %"class.std::__1::__tree_end_node"* %48 to %"class.std::__1::__tree_node"**
  %50 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %49, align 8
  %51 = icmp eq %"class.std::__1::__tree_node"* %50, null
  br i1 %51, label %90, label %52

52:                                               ; preds = %44, %52
  %53 = phi %"class.std::__1::__tree_end_node"* [ %63, %52 ], [ %48, %44 ]
  %54 = phi %"class.std::__1::__tree_node"* [ %64, %52 ], [ %50, %44 ]
  %55 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %54, i64 0, i32 1, i32 0, i32 0
  %56 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %55, align 8
  %57 = icmp ult %"class.v8::internal::ZoneObject"* %56, %47
  %58 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %54, i64 0, i32 0, i32 1
  %59 = bitcast %"class.std::__1::__tree_node_base"** %58 to %"class.std::__1::__tree_node"**
  %60 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %54, i64 0, i32 0, i32 0
  %61 = bitcast %"class.std::__1::__tree_node"* %54 to %"class.std::__1::__tree_node"**
  %62 = select i1 %57, %"class.std::__1::__tree_node"** %59, %"class.std::__1::__tree_node"** %61
  %63 = select i1 %57, %"class.std::__1::__tree_end_node"* %53, %"class.std::__1::__tree_end_node"* %60
  %64 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %62, align 8
  %65 = icmp eq %"class.std::__1::__tree_node"* %64, null
  br i1 %65, label %66, label %52

66:                                               ; preds = %52
  %67 = icmp eq %"class.std::__1::__tree_end_node"* %63, %48
  br i1 %67, label %90, label %68

68:                                               ; preds = %66
  %69 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %63, i64 4
  %70 = bitcast %"class.std::__1::__tree_end_node"* %69 to %"class.v8::internal::ZoneObject"**
  %71 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %70, align 8
  %72 = icmp ugt %"class.v8::internal::ZoneObject"* %71, %47
  br i1 %72, label %90, label %73

73:                                               ; preds = %68, %39
  %74 = phi %"class.std::__1::__tree_end_node"* [ %34, %39 ], [ %63, %68 ]
  %75 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %74, i64 5
  %76 = bitcast %"class.std::__1::__tree_end_node"* %75 to %"class.v8::internal::AstNodeSourceRanges"**
  %77 = load %"class.v8::internal::AstNodeSourceRanges"*, %"class.v8::internal::AstNodeSourceRanges"** %76, align 8
  %78 = icmp eq %"class.v8::internal::AstNodeSourceRanges"* %77, null
  br i1 %78, label %90, label %79

79:                                               ; preds = %73
  %80 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %77 to i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)***
  %81 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)**, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*** %80, align 8
  %82 = getelementptr inbounds i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %81, i64 3
  %83 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %82, align 8
  %84 = tail call zeroext i1 %83(%"class.v8::internal::AstNodeSourceRanges"* nonnull %77, i32 2) #8
  br i1 %84, label %85, label %90

85:                                               ; preds = %79
  %86 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %77 to void (%"class.v8::internal::AstNodeSourceRanges"*)***
  %87 = load void (%"class.v8::internal::AstNodeSourceRanges"*)**, void (%"class.v8::internal::AstNodeSourceRanges"*)*** %86, align 8
  %88 = getelementptr inbounds void (%"class.v8::internal::AstNodeSourceRanges"*)*, void (%"class.v8::internal::AstNodeSourceRanges"*)** %87, i64 4
  %89 = load void (%"class.v8::internal::AstNodeSourceRanges"*)*, void (%"class.v8::internal::AstNodeSourceRanges"*)** %88, align 8
  tail call void %89(%"class.v8::internal::AstNodeSourceRanges"* nonnull %77) #8
  br label %90

90:                                               ; preds = %68, %66, %44, %39, %37, %15, %79, %85, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21SourceRangeAstVisitor41MaybeRemoveContinuationRangeOfAsyncReturnEPNS0_17TryCatchStatementE(%"class.v8::internal::SourceRangeAstVisitor"* nocapture readonly, %"class.v8::internal::TryCatchStatement"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::TryCatchStatement", %"class.v8::internal::TryCatchStatement"* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 4
  br i1 %5, label %6, label %113

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::TryCatchStatement", %"class.v8::internal::TryCatchStatement"* %1, i64 0, i32 0, i32 1
  %8 = load %"class.v8::internal::Block"*, %"class.v8::internal::Block"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %8, i64 0, i32 1, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %8, i64 0, i32 1, i32 0
  %12 = sext i32 %10 to i64
  br label %13

13:                                               ; preds = %17, %6
  %14 = phi i64 [ %12, %6 ], [ %15, %17 ]
  %15 = add nsw i64 %14, -1
  %16 = icmp sgt i64 %14, 0
  br i1 %16, label %17, label %113

17:                                               ; preds = %13
  %18 = load %"class.v8::internal::Statement"**, %"class.v8::internal::Statement"*** %11, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %18, i64 %15
  %20 = load %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %20, i64 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, 255
  %24 = icmp eq i32 %23, 143
  br i1 %24, label %13, label %25

25:                                               ; preds = %17
  %26 = icmp eq %"class.v8::internal::Statement"* %20, null
  br i1 %26, label %113, label %27

27:                                               ; preds = %25
  %28 = and i32 %22, 63
  %29 = icmp eq i32 %28, 9
  br i1 %29, label %30, label %67

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %20, i64 1
  %32 = bitcast %"class.v8::internal::Statement"* %31 to %"class.v8::internal::Expression"**
  %33 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %33, i64 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 63
  %37 = icmp eq i32 %36, 50
  br i1 %37, label %38, label %67

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 1
  %40 = load %"class.v8::internal::SourceRangeMap"*, %"class.v8::internal::SourceRangeMap"** %39, align 8
  %41 = bitcast %"class.v8::internal::Expression"* %33 to %"class.v8::internal::ZoneObject"*
  %42 = getelementptr inbounds %"class.v8::internal::SourceRangeMap", %"class.v8::internal::SourceRangeMap"* %40, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %43 = bitcast %"class.std::__1::__tree_end_node"* %42 to %"class.std::__1::__tree_node"**
  %44 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %43, align 8
  %45 = icmp eq %"class.std::__1::__tree_node"* %44, null
  br i1 %45, label %113, label %46

46:                                               ; preds = %38, %46
  %47 = phi %"class.std::__1::__tree_end_node"* [ %57, %46 ], [ %42, %38 ]
  %48 = phi %"class.std::__1::__tree_node"* [ %58, %46 ], [ %44, %38 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %48, i64 0, i32 1, i32 0, i32 0
  %50 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %49, align 8
  %51 = icmp ult %"class.v8::internal::ZoneObject"* %50, %41
  %52 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %48, i64 0, i32 0, i32 1
  %53 = bitcast %"class.std::__1::__tree_node_base"** %52 to %"class.std::__1::__tree_node"**
  %54 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %48, i64 0, i32 0, i32 0
  %55 = bitcast %"class.std::__1::__tree_node"* %48 to %"class.std::__1::__tree_node"**
  %56 = select i1 %51, %"class.std::__1::__tree_node"** %53, %"class.std::__1::__tree_node"** %55
  %57 = select i1 %51, %"class.std::__1::__tree_end_node"* %47, %"class.std::__1::__tree_end_node"* %54
  %58 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %56, align 8
  %59 = icmp eq %"class.std::__1::__tree_node"* %58, null
  br i1 %59, label %60, label %46

60:                                               ; preds = %46
  %61 = icmp eq %"class.std::__1::__tree_end_node"* %57, %42
  br i1 %61, label %113, label %62

62:                                               ; preds = %60
  %63 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %57, i64 4
  %64 = bitcast %"class.std::__1::__tree_end_node"* %63 to %"class.v8::internal::ZoneObject"**
  %65 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %64, align 8
  %66 = icmp ugt %"class.v8::internal::ZoneObject"* %65, %41
  br i1 %66, label %113, label %96

67:                                               ; preds = %30, %27
  %68 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 1
  %69 = load %"class.v8::internal::SourceRangeMap"*, %"class.v8::internal::SourceRangeMap"** %68, align 8
  %70 = bitcast %"class.v8::internal::Statement"* %20 to %"class.v8::internal::ZoneObject"*
  %71 = getelementptr inbounds %"class.v8::internal::SourceRangeMap", %"class.v8::internal::SourceRangeMap"* %69, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %72 = bitcast %"class.std::__1::__tree_end_node"* %71 to %"class.std::__1::__tree_node"**
  %73 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %72, align 8
  %74 = icmp eq %"class.std::__1::__tree_node"* %73, null
  br i1 %74, label %113, label %75

75:                                               ; preds = %67, %75
  %76 = phi %"class.std::__1::__tree_end_node"* [ %86, %75 ], [ %71, %67 ]
  %77 = phi %"class.std::__1::__tree_node"* [ %87, %75 ], [ %73, %67 ]
  %78 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %77, i64 0, i32 1, i32 0, i32 0
  %79 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %78, align 8
  %80 = icmp ult %"class.v8::internal::ZoneObject"* %79, %70
  %81 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %77, i64 0, i32 0, i32 1
  %82 = bitcast %"class.std::__1::__tree_node_base"** %81 to %"class.std::__1::__tree_node"**
  %83 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %77, i64 0, i32 0, i32 0
  %84 = bitcast %"class.std::__1::__tree_node"* %77 to %"class.std::__1::__tree_node"**
  %85 = select i1 %80, %"class.std::__1::__tree_node"** %82, %"class.std::__1::__tree_node"** %84
  %86 = select i1 %80, %"class.std::__1::__tree_end_node"* %76, %"class.std::__1::__tree_end_node"* %83
  %87 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %85, align 8
  %88 = icmp eq %"class.std::__1::__tree_node"* %87, null
  br i1 %88, label %89, label %75

89:                                               ; preds = %75
  %90 = icmp eq %"class.std::__1::__tree_end_node"* %86, %71
  br i1 %90, label %113, label %91

91:                                               ; preds = %89
  %92 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %86, i64 4
  %93 = bitcast %"class.std::__1::__tree_end_node"* %92 to %"class.v8::internal::ZoneObject"**
  %94 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %93, align 8
  %95 = icmp ugt %"class.v8::internal::ZoneObject"* %94, %70
  br i1 %95, label %113, label %96

96:                                               ; preds = %91, %62
  %97 = phi %"class.std::__1::__tree_end_node"* [ %57, %62 ], [ %86, %91 ]
  %98 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %97, i64 5
  %99 = bitcast %"class.std::__1::__tree_end_node"* %98 to %"class.v8::internal::AstNodeSourceRanges"**
  %100 = load %"class.v8::internal::AstNodeSourceRanges"*, %"class.v8::internal::AstNodeSourceRanges"** %99, align 8
  %101 = icmp eq %"class.v8::internal::AstNodeSourceRanges"* %100, null
  br i1 %101, label %113, label %102

102:                                              ; preds = %96
  %103 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %100 to i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)***
  %104 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)**, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*** %103, align 8
  %105 = getelementptr inbounds i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %104, i64 3
  %106 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %105, align 8
  %107 = tail call zeroext i1 %106(%"class.v8::internal::AstNodeSourceRanges"* nonnull %100, i32 2) #8
  br i1 %107, label %108, label %113

108:                                              ; preds = %102
  %109 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %100 to void (%"class.v8::internal::AstNodeSourceRanges"*)***
  %110 = load void (%"class.v8::internal::AstNodeSourceRanges"*)**, void (%"class.v8::internal::AstNodeSourceRanges"*)*** %109, align 8
  %111 = getelementptr inbounds void (%"class.v8::internal::AstNodeSourceRanges"*)*, void (%"class.v8::internal::AstNodeSourceRanges"*)** %110, i64 4
  %112 = load void (%"class.v8::internal::AstNodeSourceRanges"*)*, void (%"class.v8::internal::AstNodeSourceRanges"*)** %111, align 8
  tail call void %112(%"class.v8::internal::AstNodeSourceRanges"* nonnull %100) #8
  br label %113

113:                                              ; preds = %13, %108, %102, %96, %91, %89, %67, %62, %60, %38, %25, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21SourceRangeAstVisitor24VisitTryFinallyStatementEPNS0_19TryFinallyStatementE(%"class.v8::internal::SourceRangeAstVisitor"*, %"class.v8::internal::TryFinallyStatement"* readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::TryFinallyStatement", %"class.v8::internal::TryFinallyStatement"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %0, %"class.v8::internal::AstNode"* %3) #8
  %5 = bitcast %"class.v8::internal::SourceRangeAstVisitor"* %0 to %"class.v8::internal::AstTraversalVisitor"*
  %6 = getelementptr inbounds %"class.v8::internal::TryFinallyStatement", %"class.v8::internal::TryFinallyStatement"* %1, i64 0, i32 0, i32 1
  %7 = load %"class.v8::internal::Block"*, %"class.v8::internal::Block"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %7, i64 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 1
  %10 = load i8, i8* %9, align 8, !range !3
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %31

12:                                               ; preds = %2
  %13 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %14 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %13, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %12
  store i8 1, i8* %9, align 8
  br label %31

18:                                               ; preds = %12
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %5, %"class.v8::internal::AstNode"* %8) #8
  %19 = load i8, i8* %9, align 8, !range !3
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %31

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"class.v8::internal::TryFinallyStatement", %"class.v8::internal::TryFinallyStatement"* %1, i64 0, i32 1
  %23 = load %"class.v8::internal::Block"*, %"class.v8::internal::Block"** %22, align 8
  %24 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %25 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = icmp ult i64 %24, %26
  br i1 %27, label %28, label %29

28:                                               ; preds = %21
  store i8 1, i8* %9, align 8
  br label %31

29:                                               ; preds = %21
  %30 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %23, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %5, %"class.v8::internal::AstNode"* %30) #8
  br label %31

31:                                               ; preds = %17, %2, %29, %28, %18
  %32 = load %"class.v8::internal::Block"*, %"class.v8::internal::Block"** %6, align 8
  %33 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %32, i64 0, i32 0, i32 0, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = and i32 %34, 63
  %36 = icmp eq i32 %35, 9
  br i1 %36, label %37, label %75

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %32, i64 0, i32 0, i32 0
  %39 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %38, i64 1
  %40 = bitcast %"class.v8::internal::Statement"* %39 to %"class.v8::internal::Expression"**
  %41 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %41, i64 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = and i32 %43, 63
  %45 = icmp eq i32 %44, 50
  br i1 %45, label %46, label %75

46:                                               ; preds = %37
  %47 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 1
  %48 = load %"class.v8::internal::SourceRangeMap"*, %"class.v8::internal::SourceRangeMap"** %47, align 8
  %49 = bitcast %"class.v8::internal::Expression"* %41 to %"class.v8::internal::ZoneObject"*
  %50 = getelementptr inbounds %"class.v8::internal::SourceRangeMap", %"class.v8::internal::SourceRangeMap"* %48, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %51 = bitcast %"class.std::__1::__tree_end_node"* %50 to %"class.std::__1::__tree_node"**
  %52 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %51, align 8
  %53 = icmp eq %"class.std::__1::__tree_node"* %52, null
  br i1 %53, label %121, label %54

54:                                               ; preds = %46, %54
  %55 = phi %"class.std::__1::__tree_end_node"* [ %65, %54 ], [ %50, %46 ]
  %56 = phi %"class.std::__1::__tree_node"* [ %66, %54 ], [ %52, %46 ]
  %57 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %56, i64 0, i32 1, i32 0, i32 0
  %58 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %57, align 8
  %59 = icmp ult %"class.v8::internal::ZoneObject"* %58, %49
  %60 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %56, i64 0, i32 0, i32 1
  %61 = bitcast %"class.std::__1::__tree_node_base"** %60 to %"class.std::__1::__tree_node"**
  %62 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %56, i64 0, i32 0, i32 0
  %63 = bitcast %"class.std::__1::__tree_node"* %56 to %"class.std::__1::__tree_node"**
  %64 = select i1 %59, %"class.std::__1::__tree_node"** %61, %"class.std::__1::__tree_node"** %63
  %65 = select i1 %59, %"class.std::__1::__tree_end_node"* %55, %"class.std::__1::__tree_end_node"* %62
  %66 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %64, align 8
  %67 = icmp eq %"class.std::__1::__tree_node"* %66, null
  br i1 %67, label %68, label %54

68:                                               ; preds = %54
  %69 = icmp eq %"class.std::__1::__tree_end_node"* %65, %50
  br i1 %69, label %121, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %65, i64 4
  %72 = bitcast %"class.std::__1::__tree_end_node"* %71 to %"class.v8::internal::ZoneObject"**
  %73 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %72, align 8
  %74 = icmp ugt %"class.v8::internal::ZoneObject"* %73, %49
  br i1 %74, label %121, label %104

75:                                               ; preds = %37, %31
  %76 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 1
  %77 = load %"class.v8::internal::SourceRangeMap"*, %"class.v8::internal::SourceRangeMap"** %76, align 8
  %78 = bitcast %"class.v8::internal::Block"* %32 to %"class.v8::internal::ZoneObject"*
  %79 = getelementptr inbounds %"class.v8::internal::SourceRangeMap", %"class.v8::internal::SourceRangeMap"* %77, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %80 = bitcast %"class.std::__1::__tree_end_node"* %79 to %"class.std::__1::__tree_node"**
  %81 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %80, align 8
  %82 = icmp eq %"class.std::__1::__tree_node"* %81, null
  br i1 %82, label %121, label %83

83:                                               ; preds = %75, %83
  %84 = phi %"class.std::__1::__tree_end_node"* [ %94, %83 ], [ %79, %75 ]
  %85 = phi %"class.std::__1::__tree_node"* [ %95, %83 ], [ %81, %75 ]
  %86 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %85, i64 0, i32 1, i32 0, i32 0
  %87 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %86, align 8
  %88 = icmp ult %"class.v8::internal::ZoneObject"* %87, %78
  %89 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %85, i64 0, i32 0, i32 1
  %90 = bitcast %"class.std::__1::__tree_node_base"** %89 to %"class.std::__1::__tree_node"**
  %91 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %85, i64 0, i32 0, i32 0
  %92 = bitcast %"class.std::__1::__tree_node"* %85 to %"class.std::__1::__tree_node"**
  %93 = select i1 %88, %"class.std::__1::__tree_node"** %90, %"class.std::__1::__tree_node"** %92
  %94 = select i1 %88, %"class.std::__1::__tree_end_node"* %84, %"class.std::__1::__tree_end_node"* %91
  %95 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %93, align 8
  %96 = icmp eq %"class.std::__1::__tree_node"* %95, null
  br i1 %96, label %97, label %83

97:                                               ; preds = %83
  %98 = icmp eq %"class.std::__1::__tree_end_node"* %94, %79
  br i1 %98, label %121, label %99

99:                                               ; preds = %97
  %100 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %94, i64 4
  %101 = bitcast %"class.std::__1::__tree_end_node"* %100 to %"class.v8::internal::ZoneObject"**
  %102 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %101, align 8
  %103 = icmp ugt %"class.v8::internal::ZoneObject"* %102, %78
  br i1 %103, label %121, label %104

104:                                              ; preds = %99, %70
  %105 = phi %"class.std::__1::__tree_end_node"* [ %65, %70 ], [ %94, %99 ]
  %106 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %105, i64 5
  %107 = bitcast %"class.std::__1::__tree_end_node"* %106 to %"class.v8::internal::AstNodeSourceRanges"**
  %108 = load %"class.v8::internal::AstNodeSourceRanges"*, %"class.v8::internal::AstNodeSourceRanges"** %107, align 8
  %109 = icmp eq %"class.v8::internal::AstNodeSourceRanges"* %108, null
  br i1 %109, label %121, label %110

110:                                              ; preds = %104
  %111 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %108 to i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)***
  %112 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)**, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*** %111, align 8
  %113 = getelementptr inbounds i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %112, i64 3
  %114 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %113, align 8
  %115 = tail call zeroext i1 %114(%"class.v8::internal::AstNodeSourceRanges"* nonnull %108, i32 2) #8
  br i1 %115, label %116, label %121

116:                                              ; preds = %110
  %117 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %108 to void (%"class.v8::internal::AstNodeSourceRanges"*)***
  %118 = load void (%"class.v8::internal::AstNodeSourceRanges"*)**, void (%"class.v8::internal::AstNodeSourceRanges"*)*** %117, align 8
  %119 = getelementptr inbounds void (%"class.v8::internal::AstNodeSourceRanges"*)*, void (%"class.v8::internal::AstNodeSourceRanges"*)** %118, i64 4
  %120 = load void (%"class.v8::internal::AstNodeSourceRanges"*)*, void (%"class.v8::internal::AstNodeSourceRanges"*)** %119, align 8
  tail call void %120(%"class.v8::internal::AstNodeSourceRanges"* nonnull %108) #8
  br label %121

121:                                              ; preds = %46, %68, %70, %75, %97, %99, %104, %110, %116
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"*, %"class.v8::internal::AstNode"* readnone) local_unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 1
  %5 = load %"class.v8::internal::SourceRangeMap"*, %"class.v8::internal::SourceRangeMap"** %4, align 8
  %6 = bitcast %"class.v8::internal::AstNode"* %1 to %"class.v8::internal::ZoneObject"*
  %7 = getelementptr inbounds %"class.v8::internal::SourceRangeMap", %"class.v8::internal::SourceRangeMap"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %8 = bitcast %"class.std::__1::__tree_end_node"* %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  %10 = icmp eq %"class.std::__1::__tree_node"* %9, null
  br i1 %10, label %130, label %11

11:                                               ; preds = %2, %11
  %12 = phi %"class.std::__1::__tree_end_node"* [ %22, %11 ], [ %7, %2 ]
  %13 = phi %"class.std::__1::__tree_node"* [ %23, %11 ], [ %9, %2 ]
  %14 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %13, i64 0, i32 1, i32 0, i32 0
  %15 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %14, align 8
  %16 = icmp ult %"class.v8::internal::ZoneObject"* %15, %6
  %17 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %13, i64 0, i32 0, i32 1
  %18 = bitcast %"class.std::__1::__tree_node_base"** %17 to %"class.std::__1::__tree_node"**
  %19 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %13, i64 0, i32 0, i32 0
  %20 = bitcast %"class.std::__1::__tree_node"* %13 to %"class.std::__1::__tree_node"**
  %21 = select i1 %16, %"class.std::__1::__tree_node"** %18, %"class.std::__1::__tree_node"** %20
  %22 = select i1 %16, %"class.std::__1::__tree_end_node"* %12, %"class.std::__1::__tree_end_node"* %19
  %23 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %21, align 8
  %24 = icmp eq %"class.std::__1::__tree_node"* %23, null
  br i1 %24, label %25, label %11

25:                                               ; preds = %11
  %26 = icmp eq %"class.std::__1::__tree_end_node"* %22, %7
  br i1 %26, label %130, label %27

27:                                               ; preds = %25
  %28 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %22, i64 4
  %29 = bitcast %"class.std::__1::__tree_end_node"* %28 to %"class.v8::internal::ZoneObject"**
  %30 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %29, align 8
  %31 = icmp ugt %"class.v8::internal::ZoneObject"* %30, %6
  br i1 %31, label %130, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %22, i64 5
  %34 = bitcast %"class.std::__1::__tree_end_node"* %33 to %"class.v8::internal::AstNodeSourceRanges"**
  %35 = load %"class.v8::internal::AstNodeSourceRanges"*, %"class.v8::internal::AstNodeSourceRanges"** %34, align 8
  %36 = icmp eq %"class.v8::internal::AstNodeSourceRanges"* %35, null
  br i1 %36, label %130, label %37

37:                                               ; preds = %32
  %38 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %35 to i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)***
  %39 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)**, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*** %38, align 8
  %40 = getelementptr inbounds i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %39, i64 3
  %41 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %40, align 8
  %42 = tail call zeroext i1 %41(%"class.v8::internal::AstNodeSourceRanges"* nonnull %35, i32 2) #8
  br i1 %42, label %43, label %130

43:                                               ; preds = %37
  %44 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #8
  %45 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %35 to i64 (%"class.v8::internal::AstNodeSourceRanges"*, i32)***
  %46 = load i64 (%"class.v8::internal::AstNodeSourceRanges"*, i32)**, i64 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*** %45, align 8
  %47 = getelementptr inbounds i64 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i64 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %46, i64 2
  %48 = load i64 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i64 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %47, align 8
  %49 = tail call i64 %48(%"class.v8::internal::AstNodeSourceRanges"* nonnull %35, i32 2) #8
  store i64 %49, i64* %3, align 8
  %50 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 2
  %51 = bitcast i64* %3 to i32*
  %52 = trunc i64 %49 to i32
  %53 = shl i64 %49, 32
  %54 = ashr exact i64 %53, 32
  %55 = getelementptr inbounds %"class.v8::internal::SourceRangeAstVisitor", %"class.v8::internal::SourceRangeAstVisitor"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %126, label %58

58:                                               ; preds = %43
  %59 = tail call i64 @llvm.ctpop.i64(i64 %56) #8, !range !4
  %60 = icmp ugt i64 %59, 1
  br i1 %60, label %64, label %61

61:                                               ; preds = %58
  %62 = add i64 %56, -1
  %63 = and i64 %62, %54
  br label %68

64:                                               ; preds = %58
  %65 = icmp ugt i64 %56, %54
  br i1 %65, label %68, label %66

66:                                               ; preds = %64
  %67 = urem i64 %54, %56
  br label %68

68:                                               ; preds = %66, %64, %61
  %69 = phi i64 [ %63, %61 ], [ %67, %66 ], [ %54, %64 ]
  %70 = getelementptr inbounds %"class.std::__1::unordered_set", %"class.std::__1::unordered_set"* %50, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %70, align 8
  %72 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %71, i64 %69
  %73 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %72, align 8
  %74 = icmp eq %"struct.std::__1::__hash_node_base"* %73, null
  br i1 %74, label %126, label %75

75:                                               ; preds = %68
  %76 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %73, i64 0, i32 0
  %77 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %76, align 8
  %78 = icmp eq %"struct.std::__1::__hash_node_base"* %77, null
  br i1 %78, label %126, label %79

79:                                               ; preds = %75
  %80 = add i64 %56, -1
  br i1 %60, label %81, label %103

81:                                               ; preds = %79, %99
  %82 = phi %"struct.std::__1::__hash_node_base"* [ %101, %99 ], [ %77, %79 ]
  %83 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %82, i64 1
  %84 = bitcast %"struct.std::__1::__hash_node_base"* %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = icmp eq i64 %85, %54
  br i1 %86, label %94, label %87

87:                                               ; preds = %81
  %88 = icmp ult i64 %85, %56
  br i1 %88, label %91, label %89

89:                                               ; preds = %87
  %90 = urem i64 %85, %56
  br label %91

91:                                               ; preds = %89, %87
  %92 = phi i64 [ %90, %89 ], [ %85, %87 ]
  %93 = icmp eq i64 %92, %69
  br i1 %93, label %99, label %126

94:                                               ; preds = %81
  %95 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %82, i64 2
  %96 = bitcast %"struct.std::__1::__hash_node_base"* %95 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, %52
  br i1 %98, label %121, label %99

99:                                               ; preds = %94, %91
  %100 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %82, i64 0, i32 0
  %101 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %100, align 8
  %102 = icmp eq %"struct.std::__1::__hash_node_base"* %101, null
  br i1 %102, label %126, label %81

103:                                              ; preds = %79, %117
  %104 = phi %"struct.std::__1::__hash_node_base"* [ %119, %117 ], [ %77, %79 ]
  %105 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %104, i64 1
  %106 = bitcast %"struct.std::__1::__hash_node_base"* %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = icmp eq i64 %107, %54
  br i1 %108, label %112, label %109

109:                                              ; preds = %103
  %110 = and i64 %107, %80
  %111 = icmp eq i64 %110, %69
  br i1 %111, label %117, label %126

112:                                              ; preds = %103
  %113 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %104, i64 2
  %114 = bitcast %"struct.std::__1::__hash_node_base"* %113 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = icmp eq i32 %115, %52
  br i1 %116, label %121, label %117

117:                                              ; preds = %112, %109
  %118 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %104, i64 0, i32 0
  %119 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %118, align 8
  %120 = icmp eq %"struct.std::__1::__hash_node_base"* %119, null
  br i1 %120, label %126, label %103

121:                                              ; preds = %112, %94
  %122 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %35 to void (%"class.v8::internal::AstNodeSourceRanges"*)***
  %123 = load void (%"class.v8::internal::AstNodeSourceRanges"*)**, void (%"class.v8::internal::AstNodeSourceRanges"*)*** %122, align 8
  %124 = getelementptr inbounds void (%"class.v8::internal::AstNodeSourceRanges"*)*, void (%"class.v8::internal::AstNodeSourceRanges"*)** %123, i64 4
  %125 = load void (%"class.v8::internal::AstNodeSourceRanges"*)*, void (%"class.v8::internal::AstNodeSourceRanges"*)** %124, align 8
  tail call void %125(%"class.v8::internal::AstNodeSourceRanges"* nonnull %35) #8
  br label %129

126:                                              ; preds = %109, %117, %91, %99, %68, %43, %75
  %127 = getelementptr inbounds %"class.std::__1::unordered_set", %"class.std::__1::unordered_set"* %50, i64 0, i32 0
  %128 = call { %"struct.std::__1::__hash_node_base"*, i8 } @_ZNSt3__112__hash_tableIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEE25__emplace_unique_key_argsIiJRiEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIiPvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table"* %127, i32* nonnull dereferenceable(4) %51, i32* nonnull dereferenceable(4) %51) #8
  br label %129

129:                                              ; preds = %126, %121
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #8
  br label %130

130:                                              ; preds = %27, %25, %2, %37, %32, %129
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"*, %"class.v8::internal::AstNode"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = trunc i32 %4 to i8
  %6 = and i8 %5, 63
  switch i8 %6, label %1278 [
    i8 0, label %7
    i8 1, label %10
    i8 2, label %27
    i8 3, label %57
    i8 4, label %87
    i8 5, label %89
    i8 6, label %132
    i8 7, label %175
    i8 8, label %222
    i8 9, label %239
    i8 55, label %1277
    i8 11, label %256
    i8 12, label %273
    i8 13, label %316
    i8 14, label %319
    i8 15, label %322
    i8 16, label %339
    i8 17, label %369
    i8 18, label %372
    i8 19, label %375
    i8 20, label %378
    i8 21, label %434
    i8 22, label %436
    i8 23, label %439
    i8 24, label %501
    i8 25, label %545
    i8 26, label %586
    i8 27, label %609
    i8 28, label %650
    i8 29, label %714
    i8 30, label %773
    i8 31, label %832
    i8 32, label %876
    i8 33, label %878
    i8 34, label %919
    i8 35, label %921
    i8 36, label %923
    i8 37, label %946
    i8 38, label %949
    i8 39, label %954
    i8 40, label %957
    i8 41, label %1001
    i8 42, label %1004
    i8 43, label %1007
    i8 44, label %1030
    i8 45, label %1071
    i8 46, label %1094
    i8 47, label %1118
    i8 48, label %1121
    i8 49, label %1179
    i8 50, label %1182
    i8 51, label %1205
    i8 52, label %1228
    i8 53, label %1231
    i8 54, label %1254
  ]

7:                                                ; preds = %2
  %8 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %9 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %8, %"class.v8::internal::AstNode"* %1) #8
  br label %1278

10:                                               ; preds = %2
  %11 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %12 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %11, %"class.v8::internal::AstNode"* %1) #8
  %13 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 3
  %14 = bitcast %"class.v8::internal::AstNode"* %13 to %"class.v8::internal::FunctionLiteral"**
  %15 = load %"class.v8::internal::FunctionLiteral"*, %"class.v8::internal::FunctionLiteral"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %15, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %18 = load i8, i8* %17, align 8, !range !3
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %1278

20:                                               ; preds = %10
  %21 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %22 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = icmp ult i64 %21, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %20
  store i8 1, i8* %17, align 8
  br label %1278

26:                                               ; preds = %20
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %16) #8
  br label %1278

27:                                               ; preds = %2
  %28 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %29 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %28, %"class.v8::internal::AstNode"* %1) #8
  %30 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %31 = bitcast %"class.v8::internal::AstNode"* %30 to %"class.v8::internal::Statement"**
  %32 = load %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %32, i64 0, i32 0
  %34 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %35 = load i8, i8* %34, align 8, !range !3
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %1278

37:                                               ; preds = %27
  %38 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %39 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp ult i64 %38, %40
  br i1 %41, label %42, label %43

42:                                               ; preds = %37
  store i8 1, i8* %34, align 8
  br label %1278

43:                                               ; preds = %37
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %33) #8
  %44 = load i8, i8* %34, align 8, !range !3
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %1278

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %48 = bitcast %"class.v8::internal::AstNode"* %47 to %"class.v8::internal::Expression"**
  %49 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %48, align 8
  %50 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %51 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %50, %52
  br i1 %53, label %54, label %55

54:                                               ; preds = %46
  store i8 1, i8* %34, align 8
  br label %1278

55:                                               ; preds = %46
  %56 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %49, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %56) #8
  br label %1278

57:                                               ; preds = %2
  %58 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %59 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %58, %"class.v8::internal::AstNode"* %1) #8
  %60 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %61 = bitcast %"class.v8::internal::AstNode"* %60 to %"class.v8::internal::Expression"**
  %62 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %61, align 8
  %63 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %62, i64 0, i32 0
  %64 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %65 = load i8, i8* %64, align 8, !range !3
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %67, label %1278

67:                                               ; preds = %57
  %68 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %69 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = icmp ult i64 %68, %70
  br i1 %71, label %72, label %73

72:                                               ; preds = %67
  store i8 1, i8* %64, align 8
  br label %1278

73:                                               ; preds = %67
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %63) #8
  %74 = load i8, i8* %64, align 8, !range !3
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %76, label %1278

76:                                               ; preds = %73
  %77 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %78 = bitcast %"class.v8::internal::AstNode"* %77 to %"class.v8::internal::Statement"**
  %79 = load %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %78, align 8
  %80 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %81 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %82 = load i64, i64* %81, align 8
  %83 = icmp ult i64 %80, %82
  br i1 %83, label %84, label %85

84:                                               ; preds = %76
  store i8 1, i8* %64, align 8
  br label %1278

85:                                               ; preds = %76
  %86 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %79, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %86) #8
  br label %1278

87:                                               ; preds = %2
  %88 = bitcast %"class.v8::internal::AstNode"* %1 to %"class.v8::internal::ForStatement"*
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE17VisitForStatementEPNS0_12ForStatementE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::ForStatement"* %88)
  br label %1278

89:                                               ; preds = %2
  %90 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %91 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %90, %"class.v8::internal::AstNode"* %1) #8
  %92 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %93 = bitcast %"class.v8::internal::AstNode"* %92 to %"class.v8::internal::Expression"**
  %94 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %93, align 8
  %95 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %94, i64 0, i32 0
  %96 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %97 = load i8, i8* %96, align 8, !range !3
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %99, label %1278

99:                                               ; preds = %89
  %100 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %101 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %102 = load i64, i64* %101, align 8
  %103 = icmp ult i64 %100, %102
  br i1 %103, label %104, label %105

104:                                              ; preds = %99
  store i8 1, i8* %96, align 8
  br label %1278

105:                                              ; preds = %99
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %95) #8
  %106 = load i8, i8* %96, align 8, !range !3
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %108, label %1278

108:                                              ; preds = %105
  %109 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 3
  %110 = bitcast %"class.v8::internal::AstNode"* %109 to %"class.v8::internal::Expression"**
  %111 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %110, align 8
  %112 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %113 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %114 = load i64, i64* %113, align 8
  %115 = icmp ult i64 %112, %114
  br i1 %115, label %116, label %117

116:                                              ; preds = %108
  store i8 1, i8* %96, align 8
  br label %1278

117:                                              ; preds = %108
  %118 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %111, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %118) #8
  %119 = load i8, i8* %96, align 8, !range !3
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %121, label %1278

121:                                              ; preds = %117
  %122 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %123 = bitcast %"class.v8::internal::AstNode"* %122 to %"class.v8::internal::Statement"**
  %124 = load %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %123, align 8
  %125 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %126 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %127 = load i64, i64* %126, align 8
  %128 = icmp ult i64 %125, %127
  br i1 %128, label %129, label %130

129:                                              ; preds = %121
  store i8 1, i8* %96, align 8
  br label %1278

130:                                              ; preds = %121
  %131 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %124, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %131) #8
  br label %1278

132:                                              ; preds = %2
  %133 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %134 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %133, %"class.v8::internal::AstNode"* %1) #8
  %135 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %136 = bitcast %"class.v8::internal::AstNode"* %135 to %"class.v8::internal::Expression"**
  %137 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %136, align 8
  %138 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %137, i64 0, i32 0
  %139 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %140 = load i8, i8* %139, align 8, !range !3
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %142, label %1278

142:                                              ; preds = %132
  %143 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %144 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %145 = load i64, i64* %144, align 8
  %146 = icmp ult i64 %143, %145
  br i1 %146, label %147, label %148

147:                                              ; preds = %142
  store i8 1, i8* %139, align 8
  br label %1278

148:                                              ; preds = %142
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %138) #8
  %149 = load i8, i8* %139, align 8, !range !3
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %151, label %1278

151:                                              ; preds = %148
  %152 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 3
  %153 = bitcast %"class.v8::internal::AstNode"* %152 to %"class.v8::internal::Expression"**
  %154 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %153, align 8
  %155 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %156 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %157 = load i64, i64* %156, align 8
  %158 = icmp ult i64 %155, %157
  br i1 %158, label %159, label %160

159:                                              ; preds = %151
  store i8 1, i8* %139, align 8
  br label %1278

160:                                              ; preds = %151
  %161 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %154, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %161) #8
  %162 = load i8, i8* %139, align 8, !range !3
  %163 = icmp eq i8 %162, 0
  br i1 %163, label %164, label %1278

164:                                              ; preds = %160
  %165 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %166 = bitcast %"class.v8::internal::AstNode"* %165 to %"class.v8::internal::Statement"**
  %167 = load %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %166, align 8
  %168 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %169 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %170 = load i64, i64* %169, align 8
  %171 = icmp ult i64 %168, %170
  br i1 %171, label %172, label %173

172:                                              ; preds = %164
  store i8 1, i8* %139, align 8
  br label %1278

173:                                              ; preds = %164
  %174 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %167, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %174) #8
  br label %1278

175:                                              ; preds = %2
  %176 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %177 = bitcast %"class.v8::internal::AstNode"* %1 to %"class.v8::internal::Block"*
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE10VisitBlockEPNS0_5BlockE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::Block"* %177) #8
  %178 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %179 = bitcast %"class.v8::internal::AstNode"* %178 to %"class.v8::internal::ZoneList"*
  %180 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 1
  %181 = bitcast %"class.v8::internal::AstTraversalVisitor"* %180 to %"class.v8::internal::SourceRangeMap"**
  %182 = load %"class.v8::internal::SourceRangeMap"*, %"class.v8::internal::SourceRangeMap"** %181, align 8
  %183 = bitcast %"class.v8::internal::AstNode"* %1 to %"class.v8::internal::ZoneObject"*
  %184 = getelementptr inbounds %"class.v8::internal::SourceRangeMap", %"class.v8::internal::SourceRangeMap"* %182, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %185 = bitcast %"class.std::__1::__tree_end_node"* %184 to %"class.std::__1::__tree_node"**
  %186 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %185, align 8
  %187 = icmp eq %"class.std::__1::__tree_node"* %186, null
  br i1 %187, label %1278, label %188

188:                                              ; preds = %175, %188
  %189 = phi %"class.std::__1::__tree_end_node"* [ %199, %188 ], [ %184, %175 ]
  %190 = phi %"class.std::__1::__tree_node"* [ %200, %188 ], [ %186, %175 ]
  %191 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %190, i64 0, i32 1, i32 0, i32 0
  %192 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %191, align 8
  %193 = icmp ult %"class.v8::internal::ZoneObject"* %192, %183
  %194 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %190, i64 0, i32 0, i32 1
  %195 = bitcast %"class.std::__1::__tree_node_base"** %194 to %"class.std::__1::__tree_node"**
  %196 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %190, i64 0, i32 0, i32 0
  %197 = bitcast %"class.std::__1::__tree_node"* %190 to %"class.std::__1::__tree_node"**
  %198 = select i1 %193, %"class.std::__1::__tree_node"** %195, %"class.std::__1::__tree_node"** %197
  %199 = select i1 %193, %"class.std::__1::__tree_end_node"* %189, %"class.std::__1::__tree_end_node"* %196
  %200 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %198, align 8
  %201 = icmp eq %"class.std::__1::__tree_node"* %200, null
  br i1 %201, label %202, label %188

202:                                              ; preds = %188
  %203 = icmp eq %"class.std::__1::__tree_end_node"* %199, %184
  br i1 %203, label %1278, label %204

204:                                              ; preds = %202
  %205 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %199, i64 4
  %206 = bitcast %"class.std::__1::__tree_end_node"* %205 to %"class.v8::internal::ZoneObject"**
  %207 = load %"class.v8::internal::ZoneObject"*, %"class.v8::internal::ZoneObject"** %206, align 8
  %208 = icmp ugt %"class.v8::internal::ZoneObject"* %207, %183
  br i1 %208, label %1278, label %209

209:                                              ; preds = %204
  %210 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %199, i64 5
  %211 = bitcast %"class.std::__1::__tree_end_node"* %210 to %"class.v8::internal::AstNodeSourceRanges"**
  %212 = load %"class.v8::internal::AstNodeSourceRanges"*, %"class.v8::internal::AstNodeSourceRanges"** %211, align 8
  %213 = icmp eq %"class.v8::internal::AstNodeSourceRanges"* %212, null
  br i1 %213, label %1278, label %214

214:                                              ; preds = %209
  %215 = bitcast %"class.v8::internal::AstNodeSourceRanges"* %212 to i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)***
  %216 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)**, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*** %215, align 8
  %217 = getelementptr inbounds i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %216, i64 3
  %218 = load i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)*, i1 (%"class.v8::internal::AstNodeSourceRanges"*, i32)** %217, align 8
  %219 = tail call zeroext i1 %218(%"class.v8::internal::AstNodeSourceRanges"* nonnull %212, i32 2) #8
  br i1 %219, label %221, label %220, !prof !2

220:                                              ; preds = %214
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0)) #9
  unreachable

221:                                              ; preds = %214
  tail call void @_ZN2v88internal21SourceRangeAstVisitor32MaybeRemoveLastContinuationRangeEPNS0_8ZoneListIPNS0_9StatementEEE(%"class.v8::internal::SourceRangeAstVisitor"* %176, %"class.v8::internal::ZoneList"* %179) #8
  br label %1278

222:                                              ; preds = %2
  %223 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %224 = bitcast %"class.v8::internal::AstNode"* %1 to %"class.v8::internal::SwitchStatement"*
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE20VisitSwitchStatementEPNS0_15SwitchStatementE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::SwitchStatement"* %224) #8
  %225 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %226 = bitcast %"class.v8::internal::AstNode"* %225 to %"class.v8::internal::CaseClause"***
  %227 = load %"class.v8::internal::CaseClause"**, %"class.v8::internal::CaseClause"*** %226, align 8
  %228 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 3, i32 1
  %229 = load i32, i32* %228, align 4
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds %"class.v8::internal::CaseClause"*, %"class.v8::internal::CaseClause"** %227, i64 %230
  %232 = icmp eq i32 %229, 0
  br i1 %232, label %1278, label %233

233:                                              ; preds = %222, %233
  %234 = phi %"class.v8::internal::CaseClause"** [ %237, %233 ], [ %227, %222 ]
  %235 = load %"class.v8::internal::CaseClause"*, %"class.v8::internal::CaseClause"** %234, align 8
  %236 = getelementptr inbounds %"class.v8::internal::CaseClause", %"class.v8::internal::CaseClause"* %235, i64 0, i32 1
  tail call void @_ZN2v88internal21SourceRangeAstVisitor32MaybeRemoveLastContinuationRangeEPNS0_8ZoneListIPNS0_9StatementEEE(%"class.v8::internal::SourceRangeAstVisitor"* %223, %"class.v8::internal::ZoneList"* %236) #8
  %237 = getelementptr inbounds %"class.v8::internal::CaseClause"*, %"class.v8::internal::CaseClause"** %234, i64 1
  %238 = icmp eq %"class.v8::internal::CaseClause"** %237, %231
  br i1 %238, label %1278, label %233

239:                                              ; preds = %2
  %240 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %241 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %240, %"class.v8::internal::AstNode"* %1) #8
  %242 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %243 = bitcast %"class.v8::internal::AstNode"* %242 to %"class.v8::internal::Expression"**
  %244 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %243, align 8
  %245 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %244, i64 0, i32 0
  %246 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %247 = load i8, i8* %246, align 8, !range !3
  %248 = icmp eq i8 %247, 0
  br i1 %248, label %249, label %1278

249:                                              ; preds = %239
  %250 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %251 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %252 = load i64, i64* %251, align 8
  %253 = icmp ult i64 %250, %252
  br i1 %253, label %254, label %255

254:                                              ; preds = %249
  store i8 1, i8* %246, align 8
  br label %1278

255:                                              ; preds = %249
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %245) #8
  br label %1278

256:                                              ; preds = %2
  %257 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %258 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %257, %"class.v8::internal::AstNode"* %1) #8
  %259 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %260 = bitcast %"class.v8::internal::AstNode"* %259 to %"class.v8::internal::Statement"**
  %261 = load %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %260, align 8
  %262 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %261, i64 0, i32 0
  %263 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %264 = load i8, i8* %263, align 8, !range !3
  %265 = icmp eq i8 %264, 0
  br i1 %265, label %266, label %1278

266:                                              ; preds = %256
  %267 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %268 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %269 = load i64, i64* %268, align 8
  %270 = icmp ult i64 %267, %269
  br i1 %270, label %271, label %272

271:                                              ; preds = %266
  store i8 1, i8* %263, align 8
  br label %1278

272:                                              ; preds = %266
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %262) #8
  br label %1278

273:                                              ; preds = %2
  %274 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %275 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %274, %"class.v8::internal::AstNode"* %1) #8
  %276 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %277 = bitcast %"class.v8::internal::AstNode"* %276 to %"class.v8::internal::Expression"**
  %278 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %277, align 8
  %279 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %278, i64 0, i32 0
  %280 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %281 = load i8, i8* %280, align 8, !range !3
  %282 = icmp eq i8 %281, 0
  br i1 %282, label %283, label %1278

283:                                              ; preds = %273
  %284 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %285 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %286 = load i64, i64* %285, align 8
  %287 = icmp ult i64 %284, %286
  br i1 %287, label %288, label %289

288:                                              ; preds = %283
  store i8 1, i8* %280, align 8
  br label %1278

289:                                              ; preds = %283
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %279) #8
  %290 = load i8, i8* %280, align 8, !range !3
  %291 = icmp eq i8 %290, 0
  br i1 %291, label %292, label %1278

292:                                              ; preds = %289
  %293 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %294 = bitcast %"class.v8::internal::AstNode"* %293 to %"class.v8::internal::Statement"**
  %295 = load %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %294, align 8
  %296 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %297 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %298 = load i64, i64* %297, align 8
  %299 = icmp ult i64 %296, %298
  br i1 %299, label %300, label %301

300:                                              ; preds = %292
  store i8 1, i8* %280, align 8
  br label %1278

301:                                              ; preds = %292
  %302 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %295, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %302) #8
  %303 = load i8, i8* %280, align 8, !range !3
  %304 = icmp eq i8 %303, 0
  br i1 %304, label %305, label %1278

305:                                              ; preds = %301
  %306 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 3
  %307 = bitcast %"class.v8::internal::AstNode"* %306 to %"class.v8::internal::Statement"**
  %308 = load %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %307, align 8
  %309 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %310 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %311 = load i64, i64* %310, align 8
  %312 = icmp ult i64 %309, %311
  br i1 %312, label %313, label %314

313:                                              ; preds = %305
  store i8 1, i8* %280, align 8
  br label %1278

314:                                              ; preds = %305
  %315 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %308, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %315) #8
  br label %1278

316:                                              ; preds = %2
  %317 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %318 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %317, %"class.v8::internal::AstNode"* %1) #8
  br label %1278

319:                                              ; preds = %2
  %320 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %321 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %320, %"class.v8::internal::AstNode"* %1) #8
  br label %1278

322:                                              ; preds = %2
  %323 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %324 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %323, %"class.v8::internal::AstNode"* %1) #8
  %325 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %326 = bitcast %"class.v8::internal::AstNode"* %325 to %"class.v8::internal::Expression"**
  %327 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %326, align 8
  %328 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %327, i64 0, i32 0
  %329 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %330 = load i8, i8* %329, align 8, !range !3
  %331 = icmp eq i8 %330, 0
  br i1 %331, label %332, label %1278

332:                                              ; preds = %322
  %333 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %334 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %335 = load i64, i64* %334, align 8
  %336 = icmp ult i64 %333, %335
  br i1 %336, label %337, label %338

337:                                              ; preds = %332
  store i8 1, i8* %329, align 8
  br label %1278

338:                                              ; preds = %332
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %328) #8
  br label %1278

339:                                              ; preds = %2
  %340 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %341 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %340, %"class.v8::internal::AstNode"* %1) #8
  %342 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %343 = bitcast %"class.v8::internal::AstNode"* %342 to %"class.v8::internal::Expression"**
  %344 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %343, align 8
  %345 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %344, i64 0, i32 0
  %346 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %347 = load i8, i8* %346, align 8, !range !3
  %348 = icmp eq i8 %347, 0
  br i1 %348, label %349, label %1278

349:                                              ; preds = %339
  %350 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %351 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %352 = load i64, i64* %351, align 8
  %353 = icmp ult i64 %350, %352
  br i1 %353, label %354, label %355

354:                                              ; preds = %349
  store i8 1, i8* %346, align 8
  br label %1278

355:                                              ; preds = %349
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %345) #8
  %356 = load i8, i8* %346, align 8, !range !3
  %357 = icmp eq i8 %356, 0
  br i1 %357, label %358, label %1278

358:                                              ; preds = %355
  %359 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 3
  %360 = bitcast %"class.v8::internal::AstNode"* %359 to %"class.v8::internal::Statement"**
  %361 = load %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %360, align 8
  %362 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %363 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %364 = load i64, i64* %363, align 8
  %365 = icmp ult i64 %362, %364
  br i1 %365, label %366, label %367

366:                                              ; preds = %358
  store i8 1, i8* %346, align 8
  br label %1278

367:                                              ; preds = %358
  %368 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %361, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %368) #8
  br label %1278

369:                                              ; preds = %2
  %370 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %371 = bitcast %"class.v8::internal::AstNode"* %1 to %"class.v8::internal::TryCatchStatement"*
  tail call void @_ZN2v88internal21SourceRangeAstVisitor22VisitTryCatchStatementEPNS0_17TryCatchStatementE(%"class.v8::internal::SourceRangeAstVisitor"* %370, %"class.v8::internal::TryCatchStatement"* %371)
  br label %1278

372:                                              ; preds = %2
  %373 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %374 = bitcast %"class.v8::internal::AstNode"* %1 to %"class.v8::internal::TryFinallyStatement"*
  tail call void @_ZN2v88internal21SourceRangeAstVisitor24VisitTryFinallyStatementEPNS0_19TryFinallyStatementE(%"class.v8::internal::SourceRangeAstVisitor"* %373, %"class.v8::internal::TryFinallyStatement"* %374)
  br label %1278

375:                                              ; preds = %2
  %376 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %377 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %376, %"class.v8::internal::AstNode"* %1) #8
  br label %1278

378:                                              ; preds = %2
  %379 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %380 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %379, %"class.v8::internal::AstNode"* %1) #8
  %381 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %382 = bitcast %"class.v8::internal::AstNode"* %381 to %"class.v8::internal::ZoneList.49"**
  %383 = load %"class.v8::internal::ZoneList.49"*, %"class.v8::internal::ZoneList.49"** %382, align 8
  %384 = getelementptr inbounds %"class.v8::internal::ZoneList.49", %"class.v8::internal::ZoneList.49"* %383, i64 0, i32 2
  %385 = load i32, i32* %384, align 4
  %386 = icmp sgt i32 %385, 0
  br i1 %386, label %387, label %1278

387:                                              ; preds = %378
  %388 = getelementptr inbounds %"class.v8::internal::ZoneList.49", %"class.v8::internal::ZoneList.49"* %383, i64 0, i32 0
  %389 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %390 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  br label %395

391:                                              ; preds = %429
  %392 = load i32, i32* %384, align 4
  %393 = sext i32 %392 to i64
  %394 = icmp slt i64 %433, %393
  br i1 %394, label %395, label %1278

395:                                              ; preds = %387, %391
  %396 = phi i64 [ 0, %387 ], [ %433, %391 ]
  %397 = load %"class.v8::internal::ClassLiteralProperty"**, %"class.v8::internal::ClassLiteralProperty"*** %388, align 8
  %398 = getelementptr inbounds %"class.v8::internal::ClassLiteralProperty"*, %"class.v8::internal::ClassLiteralProperty"** %397, i64 %396
  %399 = bitcast %"class.v8::internal::ClassLiteralProperty"** %398 to %"class.v8::internal::LiteralProperty"**
  %400 = load %"class.v8::internal::LiteralProperty"*, %"class.v8::internal::LiteralProperty"** %399, align 8
  %401 = getelementptr inbounds %"class.v8::internal::LiteralProperty", %"class.v8::internal::LiteralProperty"* %400, i64 0, i32 0, i32 0
  %402 = load i64, i64* %401, align 8
  %403 = and i64 %402, -2
  %404 = inttoptr i64 %403 to %"class.v8::internal::Expression"*
  %405 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %404, i64 0, i32 0
  %406 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %404, i64 0, i32 0, i32 1
  %407 = load i32, i32* %406, align 4
  %408 = and i32 %407, 63
  %409 = icmp eq i32 %408, 41
  %410 = load i8, i8* %389, align 8, !range !3
  %411 = icmp eq i8 %410, 0
  br i1 %409, label %421, label %412

412:                                              ; preds = %395
  br i1 %411, label %413, label %1278

413:                                              ; preds = %412
  %414 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %415 = load i64, i64* %390, align 8
  %416 = icmp ult i64 %414, %415
  br i1 %416, label %417, label %418

417:                                              ; preds = %413
  store i8 1, i8* %389, align 8
  br label %1278

418:                                              ; preds = %413
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %405) #8
  %419 = load i8, i8* %389, align 8, !range !3
  %420 = icmp eq i8 %419, 0
  br i1 %420, label %422, label %1278

421:                                              ; preds = %395
  br i1 %411, label %422, label %1278

422:                                              ; preds = %418, %421
  %423 = getelementptr inbounds %"class.v8::internal::LiteralProperty", %"class.v8::internal::LiteralProperty"* %400, i64 0, i32 1
  %424 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %423, align 8
  %425 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %426 = load i64, i64* %390, align 8
  %427 = icmp ult i64 %425, %426
  br i1 %427, label %428, label %429

428:                                              ; preds = %422
  store i8 1, i8* %389, align 8
  br label %1278

429:                                              ; preds = %422
  %430 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %424, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %430) #8
  %431 = load i8, i8* %389, align 8, !range !3
  %432 = icmp eq i8 %431, 0
  %433 = add nuw nsw i64 %396, 1
  br i1 %432, label %391, label %1278

434:                                              ; preds = %2
  %435 = bitcast %"class.v8::internal::AstNode"* %1 to %"class.v8::internal::InitializeClassStaticElementsStatement"*
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE43VisitInitializeClassStaticElementsStatementEPNS0_38InitializeClassStaticElementsStatementE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::InitializeClassStaticElementsStatement"* %435)
  br label %1278

436:                                              ; preds = %2
  %437 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %438 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %437, %"class.v8::internal::AstNode"* %1) #8
  br label %1278

439:                                              ; preds = %2
  %440 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %441 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %440, %"class.v8::internal::AstNode"* %1) #8
  %442 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 4, i32 1
  %443 = load i32, i32* %442, align 4
  %444 = icmp sgt i32 %443, 0
  br i1 %444, label %445, label %1278

445:                                              ; preds = %439
  %446 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 3
  %447 = bitcast %"class.v8::internal::AstNode"* %446 to %"class.v8::internal::ObjectLiteralProperty"***
  %448 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %449 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %450 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %451 = load i32, i32* %448, align 8
  %452 = load i8, i8* %449, align 8, !range !3
  %453 = icmp eq i8 %452, 0
  br label %458

454:                                              ; preds = %494
  %455 = load i32, i32* %442, align 4
  %456 = sext i32 %455 to i64
  %457 = icmp slt i64 %500, %456
  br i1 %457, label %458, label %1278

458:                                              ; preds = %445, %454
  %459 = phi i1 [ %453, %445 ], [ true, %454 ]
  %460 = phi i32 [ %451, %445 ], [ %498, %454 ]
  %461 = phi i64 [ 0, %445 ], [ %500, %454 ]
  %462 = load %"class.v8::internal::ObjectLiteralProperty"**, %"class.v8::internal::ObjectLiteralProperty"*** %447, align 8
  %463 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %462, i64 %461
  %464 = bitcast %"class.v8::internal::ObjectLiteralProperty"** %463 to %"class.v8::internal::LiteralProperty"**
  %465 = load %"class.v8::internal::LiteralProperty"*, %"class.v8::internal::LiteralProperty"** %464, align 8
  %466 = add nsw i32 %460, 1
  store i32 %466, i32* %448, align 8
  %467 = getelementptr inbounds %"class.v8::internal::LiteralProperty", %"class.v8::internal::LiteralProperty"* %465, i64 0, i32 0, i32 0
  %468 = load i64, i64* %467, align 8
  %469 = and i64 %468, -2
  %470 = inttoptr i64 %469 to %"class.v8::internal::Expression"*
  %471 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %470, i64 0, i32 0
  br i1 %459, label %472, label %477

472:                                              ; preds = %458
  %473 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %474 = load i64, i64* %450, align 8
  %475 = icmp ult i64 %473, %474
  br i1 %475, label %476, label %480

476:                                              ; preds = %472
  store i8 1, i8* %449, align 8
  br label %477

477:                                              ; preds = %458, %476
  %478 = load i32, i32* %448, align 8
  %479 = add nsw i32 %478, -1
  store i32 %479, i32* %448, align 8
  br label %1278

480:                                              ; preds = %472
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %471) #8
  %481 = load i8, i8* %449, align 8, !range !3
  %482 = load i32, i32* %448, align 8
  %483 = add nsw i32 %482, -1
  store i32 %483, i32* %448, align 8
  %484 = icmp eq i8 %481, 0
  br i1 %484, label %485, label %1278

485:                                              ; preds = %480
  store i32 %482, i32* %448, align 8
  %486 = getelementptr inbounds %"class.v8::internal::LiteralProperty", %"class.v8::internal::LiteralProperty"* %465, i64 0, i32 1
  %487 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %486, align 8
  %488 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %489 = load i64, i64* %450, align 8
  %490 = icmp ult i64 %488, %489
  br i1 %490, label %491, label %494

491:                                              ; preds = %485
  store i8 1, i8* %449, align 8
  %492 = load i32, i32* %448, align 8
  %493 = add nsw i32 %492, -1
  store i32 %493, i32* %448, align 8
  br label %1278

494:                                              ; preds = %485
  %495 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %487, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %495) #8
  %496 = load i8, i8* %449, align 8, !range !3
  %497 = load i32, i32* %448, align 8
  %498 = add nsw i32 %497, -1
  store i32 %498, i32* %448, align 8
  %499 = icmp eq i8 %496, 0
  %500 = add nuw nsw i64 %461, 1
  br i1 %499, label %454, label %1278

501:                                              ; preds = %2
  %502 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %503 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %502, %"class.v8::internal::AstNode"* %1) #8
  %504 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 4, i32 1
  %505 = load i32, i32* %504, align 4
  %506 = icmp sgt i32 %505, 0
  br i1 %506, label %507, label %1278

507:                                              ; preds = %501
  %508 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 3
  %509 = bitcast %"class.v8::internal::AstNode"* %508 to %"class.v8::internal::Expression"***
  %510 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %511 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %512 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %513 = load i32, i32* %510, align 8
  %514 = load i8, i8* %511, align 8, !range !3
  %515 = icmp eq i8 %514, 0
  br label %520

516:                                              ; preds = %539
  %517 = load i32, i32* %504, align 4
  %518 = sext i32 %517 to i64
  %519 = icmp slt i64 %544, %518
  br i1 %519, label %520, label %1278

520:                                              ; preds = %507, %516
  %521 = phi i8 [ %514, %507 ], [ 0, %516 ]
  %522 = phi i1 [ %515, %507 ], [ true, %516 ]
  %523 = phi i32 [ %513, %507 ], [ %542, %516 ]
  %524 = phi i64 [ 0, %507 ], [ %544, %516 ]
  %525 = load %"class.v8::internal::Expression"**, %"class.v8::internal::Expression"*** %509, align 8
  %526 = getelementptr inbounds %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %525, i64 %524
  %527 = bitcast %"class.v8::internal::Expression"** %526 to %"class.v8::internal::AstNode"**
  %528 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %527, align 8
  %529 = add nsw i32 %523, 1
  store i32 %529, i32* %510, align 8
  br i1 %522, label %530, label %539

530:                                              ; preds = %520
  %531 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %532 = load i64, i64* %512, align 8
  %533 = icmp ult i64 %531, %532
  br i1 %533, label %534, label %537

534:                                              ; preds = %530
  store i8 1, i8* %511, align 8
  %535 = load i32, i32* %510, align 8
  %536 = add nsw i32 %535, -1
  store i32 %536, i32* %510, align 8
  br label %1278

537:                                              ; preds = %530
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %528) #8
  %538 = load i8, i8* %511, align 8, !range !3
  br label %539

539:                                              ; preds = %520, %537
  %540 = phi i8 [ %521, %520 ], [ %538, %537 ]
  %541 = load i32, i32* %510, align 8
  %542 = add nsw i32 %541, -1
  store i32 %542, i32* %510, align 8
  %543 = icmp eq i8 %540, 0
  %544 = add nuw nsw i64 %524, 1
  br i1 %543, label %516, label %1278

545:                                              ; preds = %2
  %546 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %547 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %546, %"class.v8::internal::AstNode"* %1) #8
  %548 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %549 = load i32, i32* %548, align 8
  %550 = add nsw i32 %549, 1
  store i32 %550, i32* %548, align 8
  %551 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %552 = bitcast %"class.v8::internal::AstNode"* %551 to %"class.v8::internal::Expression"**
  %553 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %552, align 8
  %554 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %553, i64 0, i32 0
  %555 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %556 = load i8, i8* %555, align 8, !range !3
  %557 = icmp eq i8 %556, 0
  br i1 %557, label %558, label %564

558:                                              ; preds = %545
  %559 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %560 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %561 = load i64, i64* %560, align 8
  %562 = icmp ult i64 %559, %561
  br i1 %562, label %563, label %567

563:                                              ; preds = %558
  store i8 1, i8* %555, align 8
  br label %564

564:                                              ; preds = %545, %563
  %565 = load i32, i32* %548, align 8
  %566 = add nsw i32 %565, -1
  store i32 %566, i32* %548, align 8
  br label %1278

567:                                              ; preds = %558
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %554) #8
  %568 = load i8, i8* %555, align 8, !range !3
  %569 = load i32, i32* %548, align 8
  %570 = add nsw i32 %569, -1
  store i32 %570, i32* %548, align 8
  %571 = icmp eq i8 %568, 0
  br i1 %571, label %572, label %1278

572:                                              ; preds = %567
  store i32 %569, i32* %548, align 8
  %573 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %574 = bitcast %"class.v8::internal::AstNode"* %573 to %"class.v8::internal::Expression"**
  %575 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %574, align 8
  %576 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %577 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %578 = load i64, i64* %577, align 8
  %579 = icmp ult i64 %576, %578
  br i1 %579, label %580, label %581

580:                                              ; preds = %572
  store i8 1, i8* %555, align 8
  br label %583

581:                                              ; preds = %572
  %582 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %575, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %582) #8
  br label %583

583:                                              ; preds = %580, %581
  %584 = load i32, i32* %548, align 8
  %585 = add nsw i32 %584, -1
  store i32 %585, i32* %548, align 8
  br label %1278

586:                                              ; preds = %2
  %587 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %588 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %587, %"class.v8::internal::AstNode"* %1) #8
  %589 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %590 = load i32, i32* %589, align 8
  %591 = add nsw i32 %590, 1
  store i32 %591, i32* %589, align 8
  %592 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %593 = bitcast %"class.v8::internal::AstNode"* %592 to %"class.v8::internal::Expression"**
  %594 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %593, align 8
  %595 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %594, i64 0, i32 0
  %596 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %597 = load i8, i8* %596, align 8, !range !3
  %598 = icmp eq i8 %597, 0
  br i1 %598, label %599, label %606

599:                                              ; preds = %586
  %600 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %601 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %602 = load i64, i64* %601, align 8
  %603 = icmp ult i64 %600, %602
  br i1 %603, label %604, label %605

604:                                              ; preds = %599
  store i8 1, i8* %596, align 8
  br label %606

605:                                              ; preds = %599
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %595) #8
  br label %606

606:                                              ; preds = %586, %604, %605
  %607 = load i32, i32* %589, align 8
  %608 = add nsw i32 %607, -1
  store i32 %608, i32* %589, align 8
  br label %1278

609:                                              ; preds = %2
  %610 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %611 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %610, %"class.v8::internal::AstNode"* %1) #8
  %612 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %613 = load i32, i32* %612, align 8
  %614 = add nsw i32 %613, 1
  store i32 %614, i32* %612, align 8
  %615 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %616 = bitcast %"class.v8::internal::AstNode"* %615 to %"class.v8::internal::Expression"**
  %617 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %616, align 8
  %618 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %617, i64 0, i32 0
  %619 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %620 = load i8, i8* %619, align 8, !range !3
  %621 = icmp eq i8 %620, 0
  br i1 %621, label %622, label %628

622:                                              ; preds = %609
  %623 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %624 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %625 = load i64, i64* %624, align 8
  %626 = icmp ult i64 %623, %625
  br i1 %626, label %627, label %631

627:                                              ; preds = %622
  store i8 1, i8* %619, align 8
  br label %628

628:                                              ; preds = %609, %627
  %629 = load i32, i32* %612, align 8
  %630 = add nsw i32 %629, -1
  store i32 %630, i32* %612, align 8
  br label %1278

631:                                              ; preds = %622
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %618) #8
  %632 = load i8, i8* %619, align 8, !range !3
  %633 = load i32, i32* %612, align 8
  %634 = add nsw i32 %633, -1
  store i32 %634, i32* %612, align 8
  %635 = icmp eq i8 %632, 0
  br i1 %635, label %636, label %1278

636:                                              ; preds = %631
  store i32 %633, i32* %612, align 8
  %637 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %638 = bitcast %"class.v8::internal::AstNode"* %637 to %"class.v8::internal::Expression"**
  %639 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %638, align 8
  %640 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %641 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %642 = load i64, i64* %641, align 8
  %643 = icmp ult i64 %640, %642
  br i1 %643, label %644, label %645

644:                                              ; preds = %636
  store i8 1, i8* %619, align 8
  br label %647

645:                                              ; preds = %636
  %646 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %639, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %646) #8
  br label %647

647:                                              ; preds = %644, %645
  %648 = load i32, i32* %612, align 8
  %649 = add nsw i32 %648, -1
  store i32 %649, i32* %612, align 8
  br label %1278

650:                                              ; preds = %2
  %651 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %652 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %651, %"class.v8::internal::AstNode"* %1) #8
  %653 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %654 = load i32, i32* %653, align 8
  %655 = add nsw i32 %654, 1
  store i32 %655, i32* %653, align 8
  %656 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %657 = bitcast %"class.v8::internal::AstNode"* %656 to %"class.v8::internal::Expression"**
  %658 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %657, align 8
  %659 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %658, i64 0, i32 0
  %660 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %661 = load i8, i8* %660, align 8, !range !3
  %662 = icmp eq i8 %661, 0
  br i1 %662, label %663, label %669

663:                                              ; preds = %650
  %664 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %665 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %666 = load i64, i64* %665, align 8
  %667 = icmp ult i64 %664, %666
  br i1 %667, label %668, label %672

668:                                              ; preds = %663
  store i8 1, i8* %660, align 8
  br label %669

669:                                              ; preds = %650, %668
  %670 = load i32, i32* %653, align 8
  %671 = add nsw i32 %670, -1
  store i32 %671, i32* %653, align 8
  br label %1278

672:                                              ; preds = %663
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %659) #8
  %673 = load i8, i8* %660, align 8, !range !3
  %674 = load i32, i32* %653, align 8
  %675 = add nsw i32 %674, -1
  store i32 %675, i32* %653, align 8
  %676 = icmp eq i8 %673, 0
  br i1 %676, label %677, label %1278

677:                                              ; preds = %672
  %678 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %679 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 3
  %680 = bitcast %"class.v8::internal::AstNode"* %679 to i64*
  %681 = load i64, i64* %680, align 8
  %682 = bitcast %"class.v8::internal::AstNode"* %678 to i64*
  %683 = load i64, i64* %682, align 8
  %684 = icmp eq i64 %681, %683
  br i1 %684, label %1278, label %685

685:                                              ; preds = %677
  %686 = bitcast %"class.v8::internal::AstNode"* %678 to %"struct.v8::internal::NaryOperation::NaryOperationEntry"**
  %687 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  br label %694

688:                                              ; preds = %707
  %689 = load i64, i64* %680, align 8
  %690 = load i64, i64* %682, align 8
  %691 = sub i64 %689, %690
  %692 = ashr exact i64 %691, 4
  %693 = icmp ult i64 %713, %692
  br i1 %693, label %694, label %1278

694:                                              ; preds = %688, %685
  %695 = phi i32 [ %675, %685 ], [ %711, %688 ]
  %696 = phi i64 [ 0, %685 ], [ %713, %688 ]
  %697 = add nsw i32 %695, 1
  store i32 %697, i32* %653, align 8
  %698 = load %"struct.v8::internal::NaryOperation::NaryOperationEntry"*, %"struct.v8::internal::NaryOperation::NaryOperationEntry"** %686, align 8
  %699 = getelementptr inbounds %"struct.v8::internal::NaryOperation::NaryOperationEntry", %"struct.v8::internal::NaryOperation::NaryOperationEntry"* %698, i64 %696, i32 0
  %700 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %699, align 8
  %701 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %702 = load i64, i64* %687, align 8
  %703 = icmp ult i64 %701, %702
  br i1 %703, label %704, label %707

704:                                              ; preds = %694
  store i8 1, i8* %660, align 8
  %705 = load i32, i32* %653, align 8
  %706 = add nsw i32 %705, -1
  store i32 %706, i32* %653, align 8
  br label %1278

707:                                              ; preds = %694
  %708 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %700, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %708) #8
  %709 = load i8, i8* %660, align 8, !range !3
  %710 = load i32, i32* %653, align 8
  %711 = add nsw i32 %710, -1
  store i32 %711, i32* %653, align 8
  %712 = icmp eq i8 %709, 0
  %713 = add nuw i64 %696, 1
  br i1 %712, label %688, label %1278

714:                                              ; preds = %2
  %715 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %716 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %715, %"class.v8::internal::AstNode"* %1) #8
  %717 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %718 = load i32, i32* %717, align 8
  %719 = add nsw i32 %718, 1
  store i32 %719, i32* %717, align 8
  %720 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %721 = bitcast %"class.v8::internal::AstNode"* %720 to %"class.v8::internal::Expression"**
  %722 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %721, align 8
  %723 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %722, i64 0, i32 0
  %724 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %725 = load i8, i8* %724, align 8, !range !3
  %726 = icmp eq i8 %725, 0
  br i1 %726, label %727, label %733

727:                                              ; preds = %714
  %728 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %729 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %730 = load i64, i64* %729, align 8
  %731 = icmp ult i64 %728, %730
  br i1 %731, label %732, label %736

732:                                              ; preds = %727
  store i8 1, i8* %724, align 8
  br label %733

733:                                              ; preds = %714, %732
  %734 = load i32, i32* %717, align 8
  %735 = add nsw i32 %734, -1
  store i32 %735, i32* %717, align 8
  br label %1278

736:                                              ; preds = %727
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %723) #8
  %737 = load i8, i8* %724, align 8, !range !3
  %738 = load i32, i32* %717, align 8
  %739 = add nsw i32 %738, -1
  store i32 %739, i32* %717, align 8
  %740 = icmp eq i8 %737, 0
  br i1 %740, label %741, label %1278

741:                                              ; preds = %736
  %742 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 3, i32 1
  %743 = load i32, i32* %742, align 4
  %744 = icmp sgt i32 %743, 0
  br i1 %744, label %745, label %1278

745:                                              ; preds = %741
  %746 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %747 = bitcast %"class.v8::internal::AstNode"* %746 to %"class.v8::internal::Expression"***
  %748 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  br label %753

749:                                              ; preds = %767
  %750 = load i32, i32* %742, align 4
  %751 = sext i32 %750 to i64
  %752 = icmp slt i64 %772, %751
  br i1 %752, label %753, label %1278

753:                                              ; preds = %749, %745
  %754 = phi i32 [ %739, %745 ], [ %770, %749 ]
  %755 = phi i64 [ 0, %745 ], [ %772, %749 ]
  %756 = load %"class.v8::internal::Expression"**, %"class.v8::internal::Expression"*** %747, align 8
  %757 = getelementptr inbounds %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %756, i64 %755
  %758 = bitcast %"class.v8::internal::Expression"** %757 to %"class.v8::internal::AstNode"**
  %759 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %758, align 8
  %760 = add nsw i32 %754, 1
  store i32 %760, i32* %717, align 8
  %761 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %762 = load i64, i64* %748, align 8
  %763 = icmp ult i64 %761, %762
  br i1 %763, label %764, label %767

764:                                              ; preds = %753
  store i8 1, i8* %724, align 8
  %765 = load i32, i32* %717, align 8
  %766 = add nsw i32 %765, -1
  store i32 %766, i32* %717, align 8
  br label %1278

767:                                              ; preds = %753
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %759) #8
  %768 = load i8, i8* %724, align 8, !range !3
  %769 = load i32, i32* %717, align 8
  %770 = add nsw i32 %769, -1
  store i32 %770, i32* %717, align 8
  %771 = icmp eq i8 %768, 0
  %772 = add nuw nsw i64 %755, 1
  br i1 %771, label %749, label %1278

773:                                              ; preds = %2
  %774 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %775 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %774, %"class.v8::internal::AstNode"* %1) #8
  %776 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %777 = load i32, i32* %776, align 8
  %778 = add nsw i32 %777, 1
  store i32 %778, i32* %776, align 8
  %779 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %780 = bitcast %"class.v8::internal::AstNode"* %779 to %"class.v8::internal::Expression"**
  %781 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %780, align 8
  %782 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %781, i64 0, i32 0
  %783 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %784 = load i8, i8* %783, align 8, !range !3
  %785 = icmp eq i8 %784, 0
  br i1 %785, label %786, label %792

786:                                              ; preds = %773
  %787 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %788 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %789 = load i64, i64* %788, align 8
  %790 = icmp ult i64 %787, %789
  br i1 %790, label %791, label %795

791:                                              ; preds = %786
  store i8 1, i8* %783, align 8
  br label %792

792:                                              ; preds = %773, %791
  %793 = load i32, i32* %776, align 8
  %794 = add nsw i32 %793, -1
  store i32 %794, i32* %776, align 8
  br label %1278

795:                                              ; preds = %786
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %782) #8
  %796 = load i8, i8* %783, align 8, !range !3
  %797 = load i32, i32* %776, align 8
  %798 = add nsw i32 %797, -1
  store i32 %798, i32* %776, align 8
  %799 = icmp eq i8 %796, 0
  br i1 %799, label %800, label %1278

800:                                              ; preds = %795
  %801 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 3, i32 1
  %802 = load i32, i32* %801, align 4
  %803 = icmp sgt i32 %802, 0
  br i1 %803, label %804, label %1278

804:                                              ; preds = %800
  %805 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %806 = bitcast %"class.v8::internal::AstNode"* %805 to %"class.v8::internal::Expression"***
  %807 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  br label %812

808:                                              ; preds = %826
  %809 = load i32, i32* %801, align 4
  %810 = sext i32 %809 to i64
  %811 = icmp slt i64 %831, %810
  br i1 %811, label %812, label %1278

812:                                              ; preds = %808, %804
  %813 = phi i32 [ %798, %804 ], [ %829, %808 ]
  %814 = phi i64 [ 0, %804 ], [ %831, %808 ]
  %815 = load %"class.v8::internal::Expression"**, %"class.v8::internal::Expression"*** %806, align 8
  %816 = getelementptr inbounds %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %815, i64 %814
  %817 = bitcast %"class.v8::internal::Expression"** %816 to %"class.v8::internal::AstNode"**
  %818 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %817, align 8
  %819 = add nsw i32 %813, 1
  store i32 %819, i32* %776, align 8
  %820 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %821 = load i64, i64* %807, align 8
  %822 = icmp ult i64 %820, %821
  br i1 %822, label %823, label %826

823:                                              ; preds = %812
  store i8 1, i8* %783, align 8
  %824 = load i32, i32* %776, align 8
  %825 = add nsw i32 %824, -1
  store i32 %825, i32* %776, align 8
  br label %1278

826:                                              ; preds = %812
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %818) #8
  %827 = load i8, i8* %783, align 8, !range !3
  %828 = load i32, i32* %776, align 8
  %829 = add nsw i32 %828, -1
  store i32 %829, i32* %776, align 8
  %830 = icmp eq i8 %827, 0
  %831 = add nuw nsw i64 %814, 1
  br i1 %830, label %808, label %1278

832:                                              ; preds = %2
  %833 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %834 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %833, %"class.v8::internal::AstNode"* %1) #8
  %835 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 4, i32 1
  %836 = load i32, i32* %835, align 4
  %837 = icmp sgt i32 %836, 0
  br i1 %837, label %838, label %1278

838:                                              ; preds = %832
  %839 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 3
  %840 = bitcast %"class.v8::internal::AstNode"* %839 to %"class.v8::internal::Expression"***
  %841 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %842 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %843 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %844 = load i32, i32* %841, align 8
  %845 = load i8, i8* %842, align 8, !range !3
  %846 = icmp eq i8 %845, 0
  br label %851

847:                                              ; preds = %870
  %848 = load i32, i32* %835, align 4
  %849 = sext i32 %848 to i64
  %850 = icmp slt i64 %875, %849
  br i1 %850, label %851, label %1278

851:                                              ; preds = %838, %847
  %852 = phi i8 [ %845, %838 ], [ 0, %847 ]
  %853 = phi i1 [ %846, %838 ], [ true, %847 ]
  %854 = phi i32 [ %844, %838 ], [ %873, %847 ]
  %855 = phi i64 [ 0, %838 ], [ %875, %847 ]
  %856 = load %"class.v8::internal::Expression"**, %"class.v8::internal::Expression"*** %840, align 8
  %857 = getelementptr inbounds %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %856, i64 %855
  %858 = bitcast %"class.v8::internal::Expression"** %857 to %"class.v8::internal::AstNode"**
  %859 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %858, align 8
  %860 = add nsw i32 %854, 1
  store i32 %860, i32* %841, align 8
  br i1 %853, label %861, label %870

861:                                              ; preds = %851
  %862 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %863 = load i64, i64* %843, align 8
  %864 = icmp ult i64 %862, %863
  br i1 %864, label %865, label %868

865:                                              ; preds = %861
  store i8 1, i8* %842, align 8
  %866 = load i32, i32* %841, align 8
  %867 = add nsw i32 %866, -1
  store i32 %867, i32* %841, align 8
  br label %1278

868:                                              ; preds = %861
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %859) #8
  %869 = load i8, i8* %842, align 8, !range !3
  br label %870

870:                                              ; preds = %851, %868
  %871 = phi i8 [ %852, %851 ], [ %869, %868 ]
  %872 = load i32, i32* %841, align 8
  %873 = add nsw i32 %872, -1
  store i32 %873, i32* %841, align 8
  %874 = icmp eq i8 %871, 0
  %875 = add nuw nsw i64 %855, 1
  br i1 %874, label %847, label %1278

876:                                              ; preds = %2
  %877 = bitcast %"class.v8::internal::AstNode"* %1 to %"class.v8::internal::ClassLiteral"*
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE17VisitClassLiteralEPNS0_12ClassLiteralE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::ClassLiteral"* %877)
  br label %1278

878:                                              ; preds = %2
  %879 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %880 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %879, %"class.v8::internal::AstNode"* %1) #8
  %881 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %882 = load i32, i32* %881, align 8
  %883 = add nsw i32 %882, 1
  store i32 %883, i32* %881, align 8
  %884 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %885 = bitcast %"class.v8::internal::AstNode"* %884 to %"class.v8::internal::Expression"**
  %886 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %885, align 8
  %887 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %886, i64 0, i32 0
  %888 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %889 = load i8, i8* %888, align 8, !range !3
  %890 = icmp eq i8 %889, 0
  br i1 %890, label %891, label %897

891:                                              ; preds = %878
  %892 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %893 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %894 = load i64, i64* %893, align 8
  %895 = icmp ult i64 %892, %894
  br i1 %895, label %896, label %900

896:                                              ; preds = %891
  store i8 1, i8* %888, align 8
  br label %897

897:                                              ; preds = %878, %896
  %898 = load i32, i32* %881, align 8
  %899 = add nsw i32 %898, -1
  store i32 %899, i32* %881, align 8
  br label %1278

900:                                              ; preds = %891
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %887) #8
  %901 = load i8, i8* %888, align 8, !range !3
  %902 = load i32, i32* %881, align 8
  %903 = add nsw i32 %902, -1
  store i32 %903, i32* %881, align 8
  %904 = icmp eq i8 %901, 0
  br i1 %904, label %905, label %1278

905:                                              ; preds = %900
  store i32 %902, i32* %881, align 8
  %906 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %907 = bitcast %"class.v8::internal::AstNode"* %906 to %"class.v8::internal::Expression"**
  %908 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %907, align 8
  %909 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %910 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %911 = load i64, i64* %910, align 8
  %912 = icmp ult i64 %909, %911
  br i1 %912, label %913, label %914

913:                                              ; preds = %905
  store i8 1, i8* %888, align 8
  br label %916

914:                                              ; preds = %905
  %915 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %908, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %915) #8
  br label %916

916:                                              ; preds = %913, %914
  %917 = load i32, i32* %881, align 8
  %918 = add nsw i32 %917, -1
  store i32 %918, i32* %881, align 8
  br label %1278

919:                                              ; preds = %2
  %920 = bitcast %"class.v8::internal::AstNode"* %1 to %"class.v8::internal::Assignment"*
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE15VisitAssignmentEPNS0_10AssignmentE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::Assignment"* %920) #8
  br label %1278

921:                                              ; preds = %2
  %922 = bitcast %"class.v8::internal::AstNode"* %1 to %"class.v8::internal::Conditional"*
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE16VisitConditionalEPNS0_11ConditionalE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::Conditional"* %922)
  br label %1278

923:                                              ; preds = %2
  %924 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %925 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %924, %"class.v8::internal::AstNode"* %1) #8
  %926 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %927 = load i32, i32* %926, align 8
  %928 = add nsw i32 %927, 1
  store i32 %928, i32* %926, align 8
  %929 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %930 = bitcast %"class.v8::internal::AstNode"* %929 to %"class.v8::internal::Expression"**
  %931 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %930, align 8
  %932 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %931, i64 0, i32 0
  %933 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %934 = load i8, i8* %933, align 8, !range !3
  %935 = icmp eq i8 %934, 0
  br i1 %935, label %936, label %943

936:                                              ; preds = %923
  %937 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %938 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %939 = load i64, i64* %938, align 8
  %940 = icmp ult i64 %937, %939
  br i1 %940, label %941, label %942

941:                                              ; preds = %936
  store i8 1, i8* %933, align 8
  br label %943

942:                                              ; preds = %936
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %932) #8
  br label %943

943:                                              ; preds = %923, %941, %942
  %944 = load i32, i32* %926, align 8
  %945 = add nsw i32 %944, -1
  store i32 %945, i32* %926, align 8
  br label %1278

946:                                              ; preds = %2
  %947 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %948 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %947, %"class.v8::internal::AstNode"* %1) #8
  br label %1278

949:                                              ; preds = %2
  %950 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %951 = bitcast %"class.v8::internal::AstNode"* %1 to %"class.v8::internal::FunctionLiteral"*
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE20VisitFunctionLiteralEPNS0_15FunctionLiteralE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::FunctionLiteral"* %951) #8
  %952 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 6
  %953 = bitcast %"class.v8::internal::AstNode"* %952 to %"class.v8::internal::ZoneList"*
  tail call void @_ZN2v88internal21SourceRangeAstVisitor32MaybeRemoveLastContinuationRangeEPNS0_8ZoneListIPNS0_9StatementEEE(%"class.v8::internal::SourceRangeAstVisitor"* %950, %"class.v8::internal::ZoneList"* %953) #8
  br label %1278

954:                                              ; preds = %2
  %955 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %956 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %955, %"class.v8::internal::AstNode"* %1) #8
  br label %1278

957:                                              ; preds = %2
  %958 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %959 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %958, %"class.v8::internal::AstNode"* %1) #8
  %960 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %961 = load i32, i32* %960, align 8
  %962 = add nsw i32 %961, 1
  store i32 %962, i32* %960, align 8
  %963 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %964 = bitcast %"class.v8::internal::AstNode"* %963 to %"class.v8::internal::Expression"**
  %965 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %964, align 8
  %966 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %965, i64 0, i32 0
  %967 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %968 = load i8, i8* %967, align 8, !range !3
  %969 = icmp eq i8 %968, 0
  br i1 %969, label %970, label %976

970:                                              ; preds = %957
  %971 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %972 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %973 = load i64, i64* %972, align 8
  %974 = icmp ult i64 %971, %973
  br i1 %974, label %975, label %979

975:                                              ; preds = %970
  store i8 1, i8* %967, align 8
  br label %976

976:                                              ; preds = %957, %975
  %977 = load i32, i32* %960, align 8
  %978 = add nsw i32 %977, -1
  store i32 %978, i32* %960, align 8
  br label %1278

979:                                              ; preds = %970
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %966) #8
  %980 = load i8, i8* %967, align 8, !range !3
  %981 = load i32, i32* %960, align 8
  %982 = add nsw i32 %981, -1
  store i32 %982, i32* %960, align 8
  %983 = icmp eq i8 %980, 0
  br i1 %983, label %984, label %1278

984:                                              ; preds = %979
  %985 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %986 = bitcast %"class.v8::internal::AstNode"* %985 to %"class.v8::internal::Expression"**
  %987 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %986, align 8
  %988 = icmp eq %"class.v8::internal::Expression"* %987, null
  br i1 %988, label %1278, label %989

989:                                              ; preds = %984
  store i32 %981, i32* %960, align 8
  %990 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %986, align 8
  %991 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %992 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %993 = load i64, i64* %992, align 8
  %994 = icmp ult i64 %991, %993
  br i1 %994, label %995, label %996

995:                                              ; preds = %989
  store i8 1, i8* %967, align 8
  br label %998

996:                                              ; preds = %989
  %997 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %990, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %997) #8
  br label %998

998:                                              ; preds = %995, %996
  %999 = load i32, i32* %960, align 8
  %1000 = add nsw i32 %999, -1
  store i32 %1000, i32* %960, align 8
  br label %1278

1001:                                             ; preds = %2
  %1002 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1003 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1002, %"class.v8::internal::AstNode"* %1) #8
  br label %1278

1004:                                             ; preds = %2
  %1005 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1006 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1005, %"class.v8::internal::AstNode"* %1) #8
  br label %1278

1007:                                             ; preds = %2
  %1008 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1009 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1008, %"class.v8::internal::AstNode"* %1) #8
  %1010 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %1011 = load i32, i32* %1010, align 8
  %1012 = add nsw i32 %1011, 1
  store i32 %1012, i32* %1010, align 8
  %1013 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %1014 = bitcast %"class.v8::internal::AstNode"* %1013 to %"class.v8::internal::Expression"**
  %1015 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %1014, align 8
  %1016 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1015, i64 0, i32 0
  %1017 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %1018 = load i8, i8* %1017, align 8, !range !3
  %1019 = icmp eq i8 %1018, 0
  br i1 %1019, label %1020, label %1027

1020:                                             ; preds = %1007
  %1021 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %1022 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %1023 = load i64, i64* %1022, align 8
  %1024 = icmp ult i64 %1021, %1023
  br i1 %1024, label %1025, label %1026

1025:                                             ; preds = %1020
  store i8 1, i8* %1017, align 8
  br label %1027

1026:                                             ; preds = %1020
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %1016) #8
  br label %1027

1027:                                             ; preds = %1007, %1025, %1026
  %1028 = load i32, i32* %1010, align 8
  %1029 = add nsw i32 %1028, -1
  store i32 %1029, i32* %1010, align 8
  br label %1278

1030:                                             ; preds = %2
  %1031 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1032 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1031, %"class.v8::internal::AstNode"* %1) #8
  %1033 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %1034 = load i32, i32* %1033, align 8
  %1035 = add nsw i32 %1034, 1
  store i32 %1035, i32* %1033, align 8
  %1036 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %1037 = bitcast %"class.v8::internal::AstNode"* %1036 to %"class.v8::internal::Expression"**
  %1038 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %1037, align 8
  %1039 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1038, i64 0, i32 0
  %1040 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %1041 = load i8, i8* %1040, align 8, !range !3
  %1042 = icmp eq i8 %1041, 0
  br i1 %1042, label %1043, label %1049

1043:                                             ; preds = %1030
  %1044 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %1045 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %1046 = load i64, i64* %1045, align 8
  %1047 = icmp ult i64 %1044, %1046
  br i1 %1047, label %1048, label %1052

1048:                                             ; preds = %1043
  store i8 1, i8* %1040, align 8
  br label %1049

1049:                                             ; preds = %1030, %1048
  %1050 = load i32, i32* %1033, align 8
  %1051 = add nsw i32 %1050, -1
  store i32 %1051, i32* %1033, align 8
  br label %1278

1052:                                             ; preds = %1043
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %1039) #8
  %1053 = load i8, i8* %1040, align 8, !range !3
  %1054 = load i32, i32* %1033, align 8
  %1055 = add nsw i32 %1054, -1
  store i32 %1055, i32* %1033, align 8
  %1056 = icmp eq i8 %1053, 0
  br i1 %1056, label %1057, label %1278

1057:                                             ; preds = %1052
  store i32 %1054, i32* %1033, align 8
  %1058 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %1059 = bitcast %"class.v8::internal::AstNode"* %1058 to %"class.v8::internal::Expression"**
  %1060 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %1059, align 8
  %1061 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %1062 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %1063 = load i64, i64* %1062, align 8
  %1064 = icmp ult i64 %1061, %1063
  br i1 %1064, label %1065, label %1066

1065:                                             ; preds = %1057
  store i8 1, i8* %1040, align 8
  br label %1068

1066:                                             ; preds = %1057
  %1067 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1060, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %1067) #8
  br label %1068

1068:                                             ; preds = %1065, %1066
  %1069 = load i32, i32* %1033, align 8
  %1070 = add nsw i32 %1069, -1
  store i32 %1070, i32* %1033, align 8
  br label %1278

1071:                                             ; preds = %2
  %1072 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1073 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1072, %"class.v8::internal::AstNode"* %1) #8
  %1074 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %1075 = load i32, i32* %1074, align 8
  %1076 = add nsw i32 %1075, 1
  store i32 %1076, i32* %1074, align 8
  %1077 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %1078 = bitcast %"class.v8::internal::AstNode"* %1077 to %"class.v8::internal::Expression"**
  %1079 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %1078, align 8
  %1080 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1079, i64 0, i32 0
  %1081 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %1082 = load i8, i8* %1081, align 8, !range !3
  %1083 = icmp eq i8 %1082, 0
  br i1 %1083, label %1084, label %1091

1084:                                             ; preds = %1071
  %1085 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %1086 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %1087 = load i64, i64* %1086, align 8
  %1088 = icmp ult i64 %1085, %1087
  br i1 %1088, label %1089, label %1090

1089:                                             ; preds = %1084
  store i8 1, i8* %1081, align 8
  br label %1091

1090:                                             ; preds = %1084
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %1080) #8
  br label %1091

1091:                                             ; preds = %1071, %1089, %1090
  %1092 = load i32, i32* %1074, align 8
  %1093 = add nsw i32 %1092, -1
  store i32 %1093, i32* %1074, align 8
  br label %1278

1094:                                             ; preds = %2
  %1095 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1096 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1095, %"class.v8::internal::AstNode"* %1) #8
  %1097 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %1098 = load i32, i32* %1097, align 8
  %1099 = add nsw i32 %1098, 1
  store i32 %1099, i32* %1097, align 8
  %1100 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %1101 = bitcast %"class.v8::internal::AstNode"* %1100 to %"class.v8::internal::VariableProxy"**
  %1102 = load %"class.v8::internal::VariableProxy"*, %"class.v8::internal::VariableProxy"** %1101, align 8
  %1103 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %1102, i64 0, i32 0, i32 0
  %1104 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1095, %"class.v8::internal::AstNode"* %1103) #8
  %1105 = load i32, i32* %1097, align 8
  %1106 = add nsw i32 %1105, -1
  store i32 %1106, i32* %1097, align 8
  %1107 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %1108 = load i8, i8* %1107, align 8, !range !3
  %1109 = icmp eq i8 %1108, 0
  br i1 %1109, label %1110, label %1278

1110:                                             ; preds = %1094
  store i32 %1105, i32* %1097, align 8
  %1111 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %1112 = bitcast %"class.v8::internal::AstNode"* %1111 to %"class.v8::internal::VariableProxy"**
  %1113 = load %"class.v8::internal::VariableProxy"*, %"class.v8::internal::VariableProxy"** %1112, align 8
  %1114 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %1113, i64 0, i32 0, i32 0
  %1115 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1095, %"class.v8::internal::AstNode"* %1114) #8
  %1116 = load i32, i32* %1097, align 8
  %1117 = add nsw i32 %1116, -1
  store i32 %1117, i32* %1097, align 8
  br label %1278

1118:                                             ; preds = %2
  %1119 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1120 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1119, %"class.v8::internal::AstNode"* %1) #8
  br label %1278

1121:                                             ; preds = %2
  %1122 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1123 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1122, %"class.v8::internal::AstNode"* %1) #8
  %1124 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 2
  %1125 = bitcast %"class.v8::internal::AstNode"* %1124 to %"class.v8::internal::ZoneList.55"**
  %1126 = load %"class.v8::internal::ZoneList.55"*, %"class.v8::internal::ZoneList.55"** %1125, align 8
  %1127 = getelementptr inbounds %"class.v8::internal::ZoneList.55", %"class.v8::internal::ZoneList.55"* %1126, i64 0, i32 0
  %1128 = load %"class.v8::internal::Expression"**, %"class.v8::internal::Expression"*** %1127, align 8
  %1129 = getelementptr inbounds %"class.v8::internal::ZoneList.55", %"class.v8::internal::ZoneList.55"* %1126, i64 0, i32 2
  %1130 = load i32, i32* %1129, align 4
  %1131 = sext i32 %1130 to i64
  %1132 = getelementptr inbounds %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %1128, i64 %1131
  %1133 = icmp eq i32 %1130, 0
  br i1 %1133, label %1278, label %1134

1134:                                             ; preds = %1121
  %1135 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %1136 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %1137 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %1138 = load i32, i32* %1135, align 8
  %1139 = load i8, i8* %1136, align 8, !range !3
  %1140 = icmp eq i8 %1139, 0
  %1141 = bitcast %"class.v8::internal::Expression"** %1128 to %"class.v8::internal::AstNode"**
  %1142 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %1141, align 8
  %1143 = add nsw i32 %1138, 1
  store i32 %1143, i32* %1135, align 8
  br i1 %1140, label %1144, label %1151

1144:                                             ; preds = %1134
  %1145 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %1146 = load i64, i64* %1137, align 8
  %1147 = icmp ult i64 %1145, %1146
  br i1 %1147, label %1150, label %1148

1148:                                             ; preds = %1144
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %1142) #8
  %1149 = load i8, i8* %1136, align 8, !range !3
  br label %1151

1150:                                             ; preds = %1144
  store i8 1, i8* %1136, align 8
  br label %1151

1151:                                             ; preds = %1150, %1148, %1134
  %1152 = phi i8 [ %1139, %1134 ], [ 1, %1150 ], [ %1149, %1148 ]
  %1153 = load i32, i32* %1135, align 8
  %1154 = add nsw i32 %1153, -1
  store i32 %1154, i32* %1135, align 8
  %1155 = icmp ne i8 %1152, 0
  %1156 = getelementptr inbounds %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %1128, i64 1
  %1157 = icmp eq i32 %1130, 1
  %1158 = or i1 %1155, %1157
  br i1 %1158, label %1278, label %1159

1159:                                             ; preds = %1151, %1171
  %1160 = phi i32 [ %1174, %1171 ], [ %1154, %1151 ]
  %1161 = phi %"class.v8::internal::Expression"** [ %1176, %1171 ], [ %1156, %1151 ]
  %1162 = bitcast %"class.v8::internal::Expression"** %1161 to %"class.v8::internal::AstNode"**
  %1163 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %1162, align 8
  %1164 = add nsw i32 %1160, 1
  store i32 %1164, i32* %1135, align 8
  %1165 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %1166 = load i64, i64* %1137, align 8
  %1167 = icmp ult i64 %1165, %1166
  br i1 %1167, label %1168, label %1169

1168:                                             ; preds = %1159
  store i8 1, i8* %1136, align 8
  br label %1171

1169:                                             ; preds = %1159
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %1163) #8
  %1170 = load i8, i8* %1136, align 8, !range !3
  br label %1171

1171:                                             ; preds = %1168, %1169
  %1172 = phi i8 [ 1, %1168 ], [ %1170, %1169 ]
  %1173 = load i32, i32* %1135, align 8
  %1174 = add nsw i32 %1173, -1
  store i32 %1174, i32* %1135, align 8
  %1175 = icmp ne i8 %1172, 0
  %1176 = getelementptr inbounds %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %1161, i64 1
  %1177 = icmp eq %"class.v8::internal::Expression"** %1176, %1132
  %1178 = or i1 %1175, %1177
  br i1 %1178, label %1278, label %1159, !llvm.loop !5

1179:                                             ; preds = %2
  %1180 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1181 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1180, %"class.v8::internal::AstNode"* %1) #8
  br label %1278

1182:                                             ; preds = %2
  %1183 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1184 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1183, %"class.v8::internal::AstNode"* %1) #8
  %1185 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %1186 = load i32, i32* %1185, align 8
  %1187 = add nsw i32 %1186, 1
  store i32 %1187, i32* %1185, align 8
  %1188 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %1189 = bitcast %"class.v8::internal::AstNode"* %1188 to %"class.v8::internal::Expression"**
  %1190 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %1189, align 8
  %1191 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1190, i64 0, i32 0
  %1192 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %1193 = load i8, i8* %1192, align 8, !range !3
  %1194 = icmp eq i8 %1193, 0
  br i1 %1194, label %1195, label %1202

1195:                                             ; preds = %1182
  %1196 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %1197 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %1198 = load i64, i64* %1197, align 8
  %1199 = icmp ult i64 %1196, %1198
  br i1 %1199, label %1200, label %1201

1200:                                             ; preds = %1195
  store i8 1, i8* %1192, align 8
  br label %1202

1201:                                             ; preds = %1195
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %1191) #8
  br label %1202

1202:                                             ; preds = %1182, %1200, %1201
  %1203 = load i32, i32* %1185, align 8
  %1204 = add nsw i32 %1203, -1
  store i32 %1204, i32* %1185, align 8
  br label %1278

1205:                                             ; preds = %2
  %1206 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1207 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1206, %"class.v8::internal::AstNode"* %1) #8
  %1208 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %1209 = load i32, i32* %1208, align 8
  %1210 = add nsw i32 %1209, 1
  store i32 %1210, i32* %1208, align 8
  %1211 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %1212 = bitcast %"class.v8::internal::AstNode"* %1211 to %"class.v8::internal::Expression"**
  %1213 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %1212, align 8
  %1214 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1213, i64 0, i32 0
  %1215 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %1216 = load i8, i8* %1215, align 8, !range !3
  %1217 = icmp eq i8 %1216, 0
  br i1 %1217, label %1218, label %1225

1218:                                             ; preds = %1205
  %1219 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %1220 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %1221 = load i64, i64* %1220, align 8
  %1222 = icmp ult i64 %1219, %1221
  br i1 %1222, label %1223, label %1224

1223:                                             ; preds = %1218
  store i8 1, i8* %1215, align 8
  br label %1225

1224:                                             ; preds = %1218
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %1214) #8
  br label %1225

1225:                                             ; preds = %1205, %1223, %1224
  %1226 = load i32, i32* %1208, align 8
  %1227 = add nsw i32 %1226, -1
  store i32 %1227, i32* %1208, align 8
  br label %1278

1228:                                             ; preds = %2
  %1229 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1230 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1229, %"class.v8::internal::AstNode"* %1) #8
  br label %1278

1231:                                             ; preds = %2
  %1232 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1233 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1232, %"class.v8::internal::AstNode"* %1) #8
  %1234 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %1235 = load i32, i32* %1234, align 8
  %1236 = add nsw i32 %1235, 1
  store i32 %1236, i32* %1234, align 8
  %1237 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %1238 = bitcast %"class.v8::internal::AstNode"* %1237 to %"class.v8::internal::Expression"**
  %1239 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %1238, align 8
  %1240 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1239, i64 0, i32 0
  %1241 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %1242 = load i8, i8* %1241, align 8, !range !3
  %1243 = icmp eq i8 %1242, 0
  br i1 %1243, label %1244, label %1251

1244:                                             ; preds = %1231
  %1245 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %1246 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %1247 = load i64, i64* %1246, align 8
  %1248 = icmp ult i64 %1245, %1247
  br i1 %1248, label %1249, label %1250

1249:                                             ; preds = %1244
  store i8 1, i8* %1241, align 8
  br label %1251

1250:                                             ; preds = %1244
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %1240) #8
  br label %1251

1251:                                             ; preds = %1231, %1249, %1250
  %1252 = load i32, i32* %1234, align 8
  %1253 = add nsw i32 %1252, -1
  store i32 %1253, i32* %1234, align 8
  br label %1278

1254:                                             ; preds = %2
  %1255 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %1256 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %1255, %"class.v8::internal::AstNode"* %1) #8
  %1257 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %1258 = load i32, i32* %1257, align 8
  %1259 = add nsw i32 %1258, 1
  store i32 %1259, i32* %1257, align 8
  %1260 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %1, i64 1
  %1261 = bitcast %"class.v8::internal::AstNode"* %1260 to %"class.v8::internal::Expression"**
  %1262 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %1261, align 8
  %1263 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1262, i64 0, i32 0
  %1264 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %1265 = load i8, i8* %1264, align 8, !range !3
  %1266 = icmp eq i8 %1265, 0
  br i1 %1266, label %1267, label %1274

1267:                                             ; preds = %1254
  %1268 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %1269 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %1270 = load i64, i64* %1269, align 8
  %1271 = icmp ult i64 %1268, %1270
  br i1 %1271, label %1272, label %1273

1272:                                             ; preds = %1267
  store i8 1, i8* %1264, align 8
  br label %1274

1273:                                             ; preds = %1267
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %1263) #8
  br label %1274

1274:                                             ; preds = %1254, %1272, %1273
  %1275 = load i32, i32* %1257, align 8
  %1276 = add nsw i32 %1275, -1
  store i32 %1276, i32* %1257, align 8
  br label %1278

1277:                                             ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0)) #9
  unreachable

1278:                                             ; preds = %1151, %1171, %847, %870, %808, %826, %749, %767, %688, %707, %516, %539, %454, %480, %494, %421, %412, %391, %418, %429, %233, %428, %417, %354, %339, %288, %273, %147, %132, %104, %89, %72, %57, %42, %27, %865, %823, %764, %704, %534, %477, %491, %1049, %976, %897, %792, %733, %669, %628, %564, %300, %159, %116, %677, %1121, %832, %800, %741, %501, %439, %378, %222, %367, %366, %338, %337, %322, %314, %313, %272, %271, %256, %255, %254, %239, %173, %172, %130, %129, %85, %84, %55, %54, %26, %25, %10, %43, %73, %117, %105, %160, %148, %301, %289, %355, %567, %631, %672, %736, %795, %900, %979, %1052, %204, %202, %175, %1110, %1094, %1068, %998, %984, %916, %647, %583, %221, %209, %7, %87, %316, %319, %369, %372, %375, %434, %436, %606, %876, %919, %921, %943, %946, %949, %954, %1001, %1004, %1027, %1091, %1118, %1179, %1202, %1225, %1228, %1251, %1274, %2
  ret void
}

declare i64 @_ZN2v88internal23GetCurrentStackPositionEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE17VisitForStatementEPNS0_12ForStatementE(%"class.v8::internal::AstTraversalVisitor"*, %"class.v8::internal::ForStatement"*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %4 = getelementptr inbounds %"class.v8::internal::ForStatement", %"class.v8::internal::ForStatement"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %3, %"class.v8::internal::AstNode"* %4)
  %6 = getelementptr inbounds %"class.v8::internal::ForStatement", %"class.v8::internal::ForStatement"* %1, i64 0, i32 1
  %7 = load %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %6, align 8
  %8 = icmp eq %"class.v8::internal::Statement"* %7, null
  br i1 %8, label %23, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %7, i64 0, i32 0
  %11 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %12 = load i8, i8* %11, align 8, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %74

14:                                               ; preds = %9
  %15 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %16 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = icmp ult i64 %15, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %14
  store i8 1, i8* %11, align 8
  br label %74

20:                                               ; preds = %14
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %10) #8
  %21 = load i8, i8* %11, align 8, !range !3
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %74

23:                                               ; preds = %20, %2
  %24 = getelementptr inbounds %"class.v8::internal::ForStatement", %"class.v8::internal::ForStatement"* %1, i64 0, i32 2
  %25 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %24, align 8
  %26 = icmp eq %"class.v8::internal::Expression"* %25, null
  br i1 %26, label %41, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %25, i64 0, i32 0
  %29 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %30 = load i8, i8* %29, align 8, !range !3
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %74

32:                                               ; preds = %27
  %33 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %34 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %33, %35
  br i1 %36, label %37, label %38

37:                                               ; preds = %32
  store i8 1, i8* %29, align 8
  br label %74

38:                                               ; preds = %32
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %28) #8
  %39 = load i8, i8* %29, align 8, !range !3
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %74

41:                                               ; preds = %38, %23
  %42 = getelementptr inbounds %"class.v8::internal::ForStatement", %"class.v8::internal::ForStatement"* %1, i64 0, i32 3
  %43 = load %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %42, align 8
  %44 = icmp eq %"class.v8::internal::Statement"* %43, null
  br i1 %44, label %59, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %43, i64 0, i32 0
  %47 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %48 = load i8, i8* %47, align 8, !range !3
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %50, label %74

50:                                               ; preds = %45
  %51 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %52 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = icmp ult i64 %51, %53
  br i1 %54, label %55, label %56

55:                                               ; preds = %50
  store i8 1, i8* %47, align 8
  br label %74

56:                                               ; preds = %50
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %46) #8
  %57 = load i8, i8* %47, align 8, !range !3
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %63, label %74

59:                                               ; preds = %41
  %60 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %61 = load i8, i8* %60, align 8, !range !3
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %74

63:                                               ; preds = %56, %59
  %64 = getelementptr inbounds %"class.v8::internal::ForStatement", %"class.v8::internal::ForStatement"* %1, i64 0, i32 0, i32 1
  %65 = load %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %64, align 8
  %66 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %67 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = icmp ult i64 %66, %68
  br i1 %69, label %70, label %72

70:                                               ; preds = %63
  %71 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  store i8 1, i8* %71, align 8
  br label %74

72:                                               ; preds = %63
  %73 = getelementptr inbounds %"class.v8::internal::Statement", %"class.v8::internal::Statement"* %65, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %73) #8
  br label %74

74:                                               ; preds = %55, %45, %37, %27, %19, %9, %72, %70, %59, %56, %38, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE43VisitInitializeClassStaticElementsStatementEPNS0_38InitializeClassStaticElementsStatementE(%"class.v8::internal::AstTraversalVisitor"*, %"class.v8::internal::InitializeClassStaticElementsStatement"*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %4 = getelementptr inbounds %"class.v8::internal::InitializeClassStaticElementsStatement", %"class.v8::internal::InitializeClassStaticElementsStatement"* %1, i64 0, i32 0, i32 0
  %5 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %3, %"class.v8::internal::AstNode"* %4)
  %6 = getelementptr inbounds %"class.v8::internal::InitializeClassStaticElementsStatement", %"class.v8::internal::InitializeClassStaticElementsStatement"* %1, i64 0, i32 1
  %7 = load %"class.v8::internal::ZoneList.50"*, %"class.v8::internal::ZoneList.50"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::ZoneList.50", %"class.v8::internal::ZoneList.50"* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %77

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.v8::internal::ZoneList.50", %"class.v8::internal::ZoneList.50"* %7, i64 0, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %14 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  br label %15

15:                                               ; preds = %11, %72
  %16 = phi i64 [ 0, %11 ], [ %73, %72 ]
  %17 = load %"class.v8::internal::ClassLiteralStaticElement"**, %"class.v8::internal::ClassLiteralStaticElement"*** %12, align 8
  %18 = getelementptr inbounds %"class.v8::internal::ClassLiteralStaticElement"*, %"class.v8::internal::ClassLiteralStaticElement"** %17, i64 %16
  %19 = load %"class.v8::internal::ClassLiteralStaticElement"*, %"class.v8::internal::ClassLiteralStaticElement"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::ClassLiteralStaticElement", %"class.v8::internal::ClassLiteralStaticElement"* %19, i64 0, i32 0
  %21 = load i8, i8* %20, align 8
  switch i8 %21, label %72 [
    i8 0, label %22
    i8 1, label %57
  ]

22:                                               ; preds = %15
  %23 = getelementptr inbounds %"class.v8::internal::ClassLiteralStaticElement", %"class.v8::internal::ClassLiteralStaticElement"* %19, i64 0, i32 1, i32 0
  %24 = load %"class.v8::internal::ClassLiteralProperty"*, %"class.v8::internal::ClassLiteralProperty"** %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::ClassLiteralProperty", %"class.v8::internal::ClassLiteralProperty"* %24, i64 0, i32 0, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, -2
  %28 = inttoptr i64 %27 to %"class.v8::internal::Expression"*
  %29 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %28, i64 0, i32 0
  %30 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %28, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = and i32 %31, 63
  %33 = icmp eq i32 %32, 41
  %34 = load i8, i8* %13, align 8, !range !3
  %35 = icmp eq i8 %34, 0
  br i1 %33, label %45, label %36

36:                                               ; preds = %22
  br i1 %35, label %37, label %77

37:                                               ; preds = %36
  %38 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %39 = load i64, i64* %14, align 8
  %40 = icmp ult i64 %38, %39
  br i1 %40, label %41, label %42

41:                                               ; preds = %37
  store i8 1, i8* %13, align 8
  br label %77

42:                                               ; preds = %37
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %29) #8
  %43 = load i8, i8* %13, align 8, !range !3
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %46, label %77

45:                                               ; preds = %22
  br i1 %35, label %46, label %77

46:                                               ; preds = %42, %45
  %47 = getelementptr inbounds %"class.v8::internal::ClassLiteralProperty", %"class.v8::internal::ClassLiteralProperty"* %24, i64 0, i32 0, i32 1
  %48 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %47, align 8
  %49 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %50 = load i64, i64* %14, align 8
  %51 = icmp ult i64 %49, %50
  br i1 %51, label %52, label %53

52:                                               ; preds = %46
  store i8 1, i8* %13, align 8
  br label %77

53:                                               ; preds = %46
  %54 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %48, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %54) #8
  %55 = load i8, i8* %13, align 8, !range !3
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %72, label %77

57:                                               ; preds = %15
  %58 = getelementptr inbounds %"class.v8::internal::ClassLiteralStaticElement", %"class.v8::internal::ClassLiteralStaticElement"* %19, i64 0, i32 1
  %59 = bitcast %union.anon.51* %58 to %"class.v8::internal::Block"**
  %60 = load %"class.v8::internal::Block"*, %"class.v8::internal::Block"** %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Block", %"class.v8::internal::Block"* %60, i64 0, i32 0, i32 0, i32 0
  %62 = load i8, i8* %13, align 8, !range !3
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %77

64:                                               ; preds = %57
  %65 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %66 = load i64, i64* %14, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %69

68:                                               ; preds = %64
  store i8 1, i8* %13, align 8
  br label %77

69:                                               ; preds = %64
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %61) #8
  %70 = load i8, i8* %13, align 8, !range !3
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %72, label %77

72:                                               ; preds = %53, %69, %15
  %73 = add nuw nsw i64 %16, 1
  %74 = load i32, i32* %8, align 4
  %75 = sext i32 %74 to i64
  %76 = icmp slt i64 %73, %75
  br i1 %76, label %15, label %77

77:                                               ; preds = %57, %45, %36, %72, %69, %42, %53, %68, %52, %41, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE15VisitAssignmentEPNS0_10AssignmentE(%"class.v8::internal::AstTraversalVisitor"*, %"class.v8::internal::Assignment"*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %4 = getelementptr inbounds %"class.v8::internal::Assignment", %"class.v8::internal::Assignment"* %1, i64 0, i32 0, i32 0
  %5 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %3, %"class.v8::internal::AstNode"* %4)
  %6 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = add nsw i32 %7, 1
  store i32 %8, i32* %6, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Assignment", %"class.v8::internal::Assignment"* %1, i64 0, i32 1
  %10 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %10, i64 0, i32 0
  %12 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %13 = load i8, i8* %12, align 8, !range !3
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %36

15:                                               ; preds = %2
  %16 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %17 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %16, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  store i8 1, i8* %12, align 8
  br label %36

21:                                               ; preds = %15
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %11) #8
  %22 = load i8, i8* %12, align 8, !range !3
  %23 = load i32, i32* %6, align 8
  %24 = add nsw i32 %23, -1
  store i32 %24, i32* %6, align 8
  %25 = icmp eq i8 %22, 0
  br i1 %25, label %26, label %39

26:                                               ; preds = %21
  store i32 %23, i32* %6, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Assignment", %"class.v8::internal::Assignment"* %1, i64 0, i32 2
  %28 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %27, align 8
  %29 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %30 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = icmp ult i64 %29, %31
  br i1 %32, label %33, label %34

33:                                               ; preds = %26
  store i8 1, i8* %12, align 8
  br label %36

34:                                               ; preds = %26
  %35 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %28, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %35) #8
  br label %36

36:                                               ; preds = %34, %33, %20, %2
  %37 = load i32, i32* %6, align 8
  %38 = add nsw i32 %37, -1
  store i32 %38, i32* %6, align 8
  br label %39

39:                                               ; preds = %36, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE17VisitClassLiteralEPNS0_12ClassLiteralE(%"class.v8::internal::AstTraversalVisitor"*, %"class.v8::internal::ClassLiteral"*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %4 = getelementptr inbounds %"class.v8::internal::ClassLiteral", %"class.v8::internal::ClassLiteral"* %1, i64 0, i32 0, i32 0
  %5 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %3, %"class.v8::internal::AstNode"* %4)
  %6 = getelementptr inbounds %"class.v8::internal::ClassLiteral", %"class.v8::internal::ClassLiteral"* %1, i64 0, i32 3
  %7 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %6, align 8
  %8 = icmp eq %"class.v8::internal::Expression"* %7, null
  %9 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  br i1 %8, label %11, label %15

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %13 = load i8, i8* %12, align 8, !range !3
  %14 = icmp eq i8 %13, 0
  br label %36

15:                                               ; preds = %2
  %16 = add nsw i32 %10, 1
  store i32 %16, i32* %9, align 8
  %17 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %6, align 8
  %18 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %17, i64 0, i32 0
  %19 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %20 = load i8, i8* %19, align 8, !range !3
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %28

22:                                               ; preds = %15
  %23 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %24 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = icmp ult i64 %23, %25
  br i1 %26, label %27, label %31

27:                                               ; preds = %22
  store i8 1, i8* %19, align 8
  br label %28

28:                                               ; preds = %15, %27
  %29 = load i32, i32* %9, align 8
  %30 = add nsw i32 %29, -1
  store i32 %30, i32* %9, align 8
  br label %200

31:                                               ; preds = %22
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %18) #8
  %32 = load i8, i8* %19, align 8, !range !3
  %33 = load i32, i32* %9, align 8
  %34 = add nsw i32 %33, -1
  store i32 %34, i32* %9, align 8
  %35 = icmp eq i8 %32, 0
  br i1 %35, label %36, label %200

36:                                               ; preds = %11, %31
  %37 = phi i1 [ %14, %11 ], [ true, %31 ]
  %38 = phi i32 [ %10, %11 ], [ %34, %31 ]
  %39 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %40 = add nsw i32 %38, 1
  store i32 %40, i32* %39, align 8
  %41 = getelementptr inbounds %"class.v8::internal::ClassLiteral", %"class.v8::internal::ClassLiteral"* %1, i64 0, i32 4
  %42 = load %"class.v8::internal::FunctionLiteral"*, %"class.v8::internal::FunctionLiteral"** %41, align 8
  %43 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %42, i64 0, i32 0, i32 0
  %44 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  br i1 %37, label %45, label %51

45:                                               ; preds = %36
  %46 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %47 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = icmp ult i64 %46, %48
  br i1 %49, label %50, label %54

50:                                               ; preds = %45
  store i8 1, i8* %44, align 8
  br label %51

51:                                               ; preds = %36, %50
  %52 = load i32, i32* %39, align 8
  %53 = add nsw i32 %52, -1
  store i32 %53, i32* %39, align 8
  br label %200

54:                                               ; preds = %45
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %43) #8
  %55 = load i8, i8* %44, align 8, !range !3
  %56 = load i32, i32* %39, align 8
  %57 = add nsw i32 %56, -1
  store i32 %57, i32* %39, align 8
  %58 = icmp eq i8 %55, 0
  br i1 %58, label %59, label %200

59:                                               ; preds = %54
  %60 = getelementptr inbounds %"class.v8::internal::ClassLiteral", %"class.v8::internal::ClassLiteral"* %1, i64 0, i32 7
  %61 = load %"class.v8::internal::FunctionLiteral"*, %"class.v8::internal::FunctionLiteral"** %60, align 8
  %62 = icmp eq %"class.v8::internal::FunctionLiteral"* %61, null
  br i1 %62, label %78, label %63

63:                                               ; preds = %59
  store i32 %56, i32* %39, align 8
  %64 = load %"class.v8::internal::FunctionLiteral"*, %"class.v8::internal::FunctionLiteral"** %60, align 8
  %65 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %66 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = icmp ult i64 %65, %67
  br i1 %68, label %69, label %72

69:                                               ; preds = %63
  store i8 1, i8* %44, align 8
  %70 = load i32, i32* %39, align 8
  %71 = add nsw i32 %70, -1
  store i32 %71, i32* %39, align 8
  br label %200

72:                                               ; preds = %63
  %73 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %64, i64 0, i32 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %73) #8
  %74 = load i8, i8* %44, align 8, !range !3
  %75 = icmp eq i8 %74, 0
  %76 = load i32, i32* %39, align 8
  %77 = add nsw i32 %76, -1
  store i32 %77, i32* %39, align 8
  br i1 %75, label %78, label %200

78:                                               ; preds = %72, %59
  %79 = phi i32 [ %77, %72 ], [ %57, %59 ]
  %80 = getelementptr inbounds %"class.v8::internal::ClassLiteral", %"class.v8::internal::ClassLiteral"* %1, i64 0, i32 8
  %81 = load %"class.v8::internal::FunctionLiteral"*, %"class.v8::internal::FunctionLiteral"** %80, align 8
  %82 = icmp eq %"class.v8::internal::FunctionLiteral"* %81, null
  br i1 %82, label %99, label %83

83:                                               ; preds = %78
  %84 = add nsw i32 %79, 1
  store i32 %84, i32* %39, align 8
  %85 = load %"class.v8::internal::FunctionLiteral"*, %"class.v8::internal::FunctionLiteral"** %80, align 8
  %86 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %87 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %88 = load i64, i64* %87, align 8
  %89 = icmp ult i64 %86, %88
  br i1 %89, label %90, label %93

90:                                               ; preds = %83
  store i8 1, i8* %44, align 8
  %91 = load i32, i32* %39, align 8
  %92 = add nsw i32 %91, -1
  store i32 %92, i32* %39, align 8
  br label %200

93:                                               ; preds = %83
  %94 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %85, i64 0, i32 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %94) #8
  %95 = load i8, i8* %44, align 8, !range !3
  %96 = icmp eq i8 %95, 0
  %97 = load i32, i32* %39, align 8
  %98 = add nsw i32 %97, -1
  store i32 %98, i32* %39, align 8
  br i1 %96, label %99, label %200

99:                                               ; preds = %93, %78
  %100 = phi i32 [ %98, %93 ], [ %79, %78 ]
  %101 = getelementptr inbounds %"class.v8::internal::ClassLiteral", %"class.v8::internal::ClassLiteral"* %1, i64 0, i32 6
  %102 = load %"class.v8::internal::ZoneList.49"*, %"class.v8::internal::ZoneList.49"** %101, align 8
  %103 = getelementptr inbounds %"class.v8::internal::ZoneList.49", %"class.v8::internal::ZoneList.49"* %102, i64 0, i32 2
  %104 = load i32, i32* %103, align 4
  %105 = icmp sgt i32 %104, 0
  br i1 %105, label %106, label %136

106:                                              ; preds = %99
  %107 = getelementptr inbounds %"class.v8::internal::ZoneList.49", %"class.v8::internal::ZoneList.49"* %102, i64 0, i32 0
  %108 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  br label %113

109:                                              ; preds = %129
  %110 = load i32, i32* %103, align 4
  %111 = sext i32 %110 to i64
  %112 = icmp slt i64 %135, %111
  br i1 %112, label %113, label %136

113:                                              ; preds = %109, %106
  %114 = phi i32 [ %100, %106 ], [ %133, %109 ]
  %115 = phi i64 [ 0, %106 ], [ %135, %109 ]
  %116 = load %"class.v8::internal::ClassLiteralProperty"**, %"class.v8::internal::ClassLiteralProperty"*** %107, align 8
  %117 = getelementptr inbounds %"class.v8::internal::ClassLiteralProperty"*, %"class.v8::internal::ClassLiteralProperty"** %116, i64 %115
  %118 = bitcast %"class.v8::internal::ClassLiteralProperty"** %117 to %"class.v8::internal::LiteralProperty"**
  %119 = load %"class.v8::internal::LiteralProperty"*, %"class.v8::internal::LiteralProperty"** %118, align 8
  %120 = add nsw i32 %114, 1
  store i32 %120, i32* %39, align 8
  %121 = getelementptr inbounds %"class.v8::internal::LiteralProperty", %"class.v8::internal::LiteralProperty"* %119, i64 0, i32 1
  %122 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %121, align 8
  %123 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %124 = load i64, i64* %108, align 8
  %125 = icmp ult i64 %123, %124
  br i1 %125, label %126, label %129

126:                                              ; preds = %113
  store i8 1, i8* %44, align 8
  %127 = load i32, i32* %39, align 8
  %128 = add nsw i32 %127, -1
  store i32 %128, i32* %39, align 8
  br label %200

129:                                              ; preds = %113
  %130 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %122, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %130) #8
  %131 = load i8, i8* %44, align 8, !range !3
  %132 = load i32, i32* %39, align 8
  %133 = add nsw i32 %132, -1
  store i32 %133, i32* %39, align 8
  %134 = icmp eq i8 %131, 0
  %135 = add nuw nsw i64 %115, 1
  br i1 %134, label %109, label %200

136:                                              ; preds = %109, %99
  %137 = phi i32 [ %100, %99 ], [ %133, %109 ]
  %138 = getelementptr inbounds %"class.v8::internal::ClassLiteral", %"class.v8::internal::ClassLiteral"* %1, i64 0, i32 5
  %139 = load %"class.v8::internal::ZoneList.49"*, %"class.v8::internal::ZoneList.49"** %138, align 8
  %140 = getelementptr inbounds %"class.v8::internal::ZoneList.49", %"class.v8::internal::ZoneList.49"* %139, i64 0, i32 2
  %141 = load i32, i32* %140, align 4
  %142 = icmp sgt i32 %141, 0
  br i1 %142, label %143, label %200

143:                                              ; preds = %136
  %144 = getelementptr inbounds %"class.v8::internal::ZoneList.49", %"class.v8::internal::ZoneList.49"* %139, i64 0, i32 0
  %145 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  br label %150

146:                                              ; preds = %193
  %147 = load i32, i32* %140, align 4
  %148 = sext i32 %147 to i64
  %149 = icmp slt i64 %199, %148
  br i1 %149, label %150, label %200

150:                                              ; preds = %143, %146
  %151 = phi i32 [ %137, %143 ], [ %197, %146 ]
  %152 = phi i64 [ 0, %143 ], [ %199, %146 ]
  %153 = load %"class.v8::internal::ClassLiteralProperty"**, %"class.v8::internal::ClassLiteralProperty"*** %144, align 8
  %154 = getelementptr inbounds %"class.v8::internal::ClassLiteralProperty"*, %"class.v8::internal::ClassLiteralProperty"** %153, i64 %152
  %155 = bitcast %"class.v8::internal::ClassLiteralProperty"** %154 to %"class.v8::internal::LiteralProperty"**
  %156 = load %"class.v8::internal::LiteralProperty"*, %"class.v8::internal::LiteralProperty"** %155, align 8
  %157 = getelementptr inbounds %"class.v8::internal::LiteralProperty", %"class.v8::internal::LiteralProperty"* %156, i64 0, i32 0, i32 0
  %158 = load i64, i64* %157, align 8
  %159 = and i64 %158, -2
  %160 = inttoptr i64 %159 to %"class.v8::internal::Expression"*
  %161 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %160, i64 0, i32 0, i32 1
  %162 = load i32, i32* %161, align 4
  %163 = and i32 %162, 63
  %164 = icmp eq i32 %163, 41
  br i1 %164, label %182, label %165

165:                                              ; preds = %150
  %166 = add nsw i32 %151, 1
  store i32 %166, i32* %39, align 8
  %167 = load i64, i64* %157, align 8
  %168 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %169 = load i64, i64* %145, align 8
  %170 = icmp ult i64 %168, %169
  br i1 %170, label %171, label %174

171:                                              ; preds = %165
  store i8 1, i8* %44, align 8
  %172 = load i32, i32* %39, align 8
  %173 = add nsw i32 %172, -1
  store i32 %173, i32* %39, align 8
  br label %200

174:                                              ; preds = %165
  %175 = and i64 %167, -2
  %176 = inttoptr i64 %175 to %"class.v8::internal::Expression"*
  %177 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %176, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %177) #8
  %178 = load i8, i8* %44, align 8, !range !3
  %179 = load i32, i32* %39, align 8
  %180 = add nsw i32 %179, -1
  store i32 %180, i32* %39, align 8
  %181 = icmp eq i8 %178, 0
  br i1 %181, label %182, label %200

182:                                              ; preds = %150, %174
  %183 = phi i32 [ %180, %174 ], [ %151, %150 ]
  %184 = add nsw i32 %183, 1
  store i32 %184, i32* %39, align 8
  %185 = getelementptr inbounds %"class.v8::internal::LiteralProperty", %"class.v8::internal::LiteralProperty"* %156, i64 0, i32 1
  %186 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %185, align 8
  %187 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %188 = load i64, i64* %145, align 8
  %189 = icmp ult i64 %187, %188
  br i1 %189, label %190, label %193

190:                                              ; preds = %182
  store i8 1, i8* %44, align 8
  %191 = load i32, i32* %39, align 8
  %192 = add nsw i32 %191, -1
  store i32 %192, i32* %39, align 8
  br label %200

193:                                              ; preds = %182
  %194 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %186, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %194) #8
  %195 = load i8, i8* %44, align 8, !range !3
  %196 = load i32, i32* %39, align 8
  %197 = add nsw i32 %196, -1
  store i32 %197, i32* %39, align 8
  %198 = icmp eq i8 %195, 0
  %199 = add nuw nsw i64 %152, 1
  br i1 %198, label %146, label %200

200:                                              ; preds = %129, %146, %174, %193, %126, %171, %190, %90, %69, %51, %28, %136, %93, %72, %54, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE16VisitConditionalEPNS0_11ConditionalE(%"class.v8::internal::AstTraversalVisitor"*, %"class.v8::internal::Conditional"*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.v8::internal::AstTraversalVisitor"* %0 to %"class.v8::internal::SourceRangeAstVisitor"*
  %4 = getelementptr inbounds %"class.v8::internal::Conditional", %"class.v8::internal::Conditional"* %1, i64 0, i32 0, i32 0
  %5 = tail call zeroext i1 @_ZN2v88internal21SourceRangeAstVisitor9VisitNodeEPNS0_7AstNodeE(%"class.v8::internal::SourceRangeAstVisitor"* %3, %"class.v8::internal::AstNode"* %4)
  %6 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = add nsw i32 %7, 1
  store i32 %8, i32* %6, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Conditional", %"class.v8::internal::Conditional"* %1, i64 0, i32 1
  %10 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %10, i64 0, i32 0
  %12 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 1
  %13 = load i8, i8* %12, align 8, !range !3
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %21

15:                                               ; preds = %2
  %16 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %17 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %16, %18
  br i1 %19, label %20, label %24

20:                                               ; preds = %15
  store i8 1, i8* %12, align 8
  br label %21

21:                                               ; preds = %2, %20
  %22 = load i32, i32* %6, align 8
  %23 = add nsw i32 %22, -1
  store i32 %23, i32* %6, align 8
  br label %58

24:                                               ; preds = %15
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %11) #8
  %25 = load i8, i8* %12, align 8, !range !3
  %26 = load i32, i32* %6, align 8
  %27 = add nsw i32 %26, -1
  store i32 %27, i32* %6, align 8
  %28 = icmp eq i8 %25, 0
  br i1 %28, label %29, label %58

29:                                               ; preds = %24
  store i32 %26, i32* %6, align 8
  %30 = getelementptr inbounds %"class.v8::internal::Conditional", %"class.v8::internal::Conditional"* %1, i64 0, i32 2
  %31 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %30, align 8
  %32 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %33 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = icmp ult i64 %32, %34
  br i1 %35, label %36, label %39

36:                                               ; preds = %29
  store i8 1, i8* %12, align 8
  %37 = load i32, i32* %6, align 8
  %38 = add nsw i32 %37, -1
  store i32 %38, i32* %6, align 8
  br label %58

39:                                               ; preds = %29
  %40 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %31, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %40) #8
  %41 = load i8, i8* %12, align 8, !range !3
  %42 = icmp eq i8 %41, 0
  %43 = load i32, i32* %6, align 8
  %44 = add nsw i32 %43, -1
  store i32 %44, i32* %6, align 8
  br i1 %42, label %45, label %58

45:                                               ; preds = %39
  store i32 %43, i32* %6, align 8
  %46 = getelementptr inbounds %"class.v8::internal::Conditional", %"class.v8::internal::Conditional"* %1, i64 0, i32 3
  %47 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %46, align 8
  %48 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #8
  %49 = getelementptr inbounds %"class.v8::internal::AstTraversalVisitor", %"class.v8::internal::AstTraversalVisitor"* %0, i64 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = icmp ult i64 %48, %50
  br i1 %51, label %52, label %53

52:                                               ; preds = %45
  store i8 1, i8* %12, align 8
  br label %55

53:                                               ; preds = %45
  %54 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %47, i64 0, i32 0
  tail call void @_ZN2v88internal19AstTraversalVisitorINS0_21SourceRangeAstVisitorEE25VisitNoStackOverflowCheckEPNS0_7AstNodeE(%"class.v8::internal::AstTraversalVisitor"* %0, %"class.v8::internal::AstNode"* %54) #8
  br label %55

55:                                               ; preds = %52, %53
  %56 = load i32, i32* %6, align 8
  %57 = add nsw i32 %56, -1
  store i32 %57, i32* %6, align 8
  br label %58

58:                                               ; preds = %36, %21, %39, %24, %55
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.std::__1::__hash_node_base"*, i8 } @_ZNSt3__112__hash_tableIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEE25__emplace_unique_key_argsIiJRiEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIiPvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table"*, i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = load i32, i32* %1, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %68, label %9

9:                                                ; preds = %3
  %10 = tail call i64 @llvm.ctpop.i64(i64 %7) #8, !range !4
  %11 = icmp ugt i64 %10, 1
  br i1 %11, label %15, label %12

12:                                               ; preds = %9
  %13 = add i64 %7, -1
  %14 = and i64 %13, %5
  br label %19

15:                                               ; preds = %9
  %16 = icmp ugt i64 %7, %5
  br i1 %16, label %19, label %17

17:                                               ; preds = %15
  %18 = urem i64 %5, %7
  br label %19

19:                                               ; preds = %12, %15, %17
  %20 = phi i64 [ %14, %12 ], [ %18, %17 ], [ %5, %15 ]
  %21 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %21, align 8
  %23 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %22, i64 %20
  %24 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %23, align 8
  %25 = icmp eq %"struct.std::__1::__hash_node_base"* %24, null
  br i1 %25, label %68, label %26

26:                                               ; preds = %19
  %27 = add i64 %7, -1
  br i1 %11, label %28, label %50

28:                                               ; preds = %26, %45
  %29 = phi %"struct.std::__1::__hash_node_base"* [ %31, %45 ], [ %24, %26 ]
  %30 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %29, i64 0, i32 0
  %31 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %30, align 8
  %32 = icmp eq %"struct.std::__1::__hash_node_base"* %31, null
  br i1 %32, label %68, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %31, i64 1
  %35 = bitcast %"struct.std::__1::__hash_node_base"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = icmp eq i64 %36, %5
  br i1 %37, label %45, label %38

38:                                               ; preds = %33
  %39 = icmp ult i64 %36, %7
  br i1 %39, label %42, label %40

40:                                               ; preds = %38
  %41 = urem i64 %36, %7
  br label %42

42:                                               ; preds = %40, %38
  %43 = phi i64 [ %41, %40 ], [ %36, %38 ]
  %44 = icmp eq i64 %43, %20
  br i1 %44, label %45, label %68

45:                                               ; preds = %42, %33
  %46 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %31, i64 2
  %47 = bitcast %"struct.std::__1::__hash_node_base"* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, %4
  br i1 %49, label %155, label %28

50:                                               ; preds = %26, %63
  %51 = phi %"struct.std::__1::__hash_node_base"* [ %53, %63 ], [ %24, %26 ]
  %52 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %51, i64 0, i32 0
  %53 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %52, align 8
  %54 = icmp eq %"struct.std::__1::__hash_node_base"* %53, null
  br i1 %54, label %68, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %53, i64 1
  %57 = bitcast %"struct.std::__1::__hash_node_base"* %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = icmp eq i64 %58, %5
  %60 = and i64 %58, %27
  %61 = icmp eq i64 %60, %20
  %62 = or i1 %59, %61
  br i1 %62, label %63, label %68

63:                                               ; preds = %55
  %64 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %53, i64 2
  %65 = bitcast %"struct.std::__1::__hash_node_base"* %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, %4
  br i1 %67, label %155, label %50

68:                                               ; preds = %55, %50, %42, %28, %19, %3
  %69 = phi i64 [ %20, %19 ], [ undef, %3 ], [ %20, %28 ], [ %20, %42 ], [ %20, %50 ], [ %20, %55 ]
  %70 = tail call i8* @_Znwm(i64 24) #10, !noalias !7
  %71 = getelementptr inbounds i8, i8* %70, i64 16
  %72 = bitcast i8* %71 to i32*
  %73 = load i32, i32* %2, align 4, !noalias !7
  store i32 %73, i32* %72, align 4, !noalias !7
  %74 = getelementptr inbounds i8, i8* %70, i64 8
  %75 = bitcast i8* %74 to i64*
  store i64 %5, i64* %75, align 8, !noalias !7
  %76 = bitcast i8* %70 to %"struct.std::__1::__hash_node_base"**
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %76, align 8, !noalias !7
  %77 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, 1
  %80 = uitofp i64 %79 to float
  %81 = uitofp i64 %7 to float
  %82 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %83 = load float, float* %82, align 4
  %84 = fmul float %83, %81
  %85 = fcmp olt float %84, %80
  %86 = or i1 %8, %85
  br i1 %86, label %87, label %110

87:                                               ; preds = %68
  %88 = shl i64 %7, 1
  %89 = icmp ult i64 %7, 3
  %90 = tail call i64 @llvm.ctpop.i64(i64 %7) #8, !range !4
  %91 = icmp ugt i64 %90, 1
  %92 = or i1 %89, %91
  %93 = zext i1 %92 to i64
  %94 = or i64 %88, %93
  %95 = fdiv float %80, %83
  %96 = tail call float @llvm.ceil.f32(float %95) #8
  %97 = fptoui float %96 to i64
  %98 = icmp ult i64 %94, %97
  %99 = select i1 %98, i64 %97, i64 %94
  tail call void @_ZNSt3__112__hash_tableIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEE6rehashEm(%"class.std::__1::__hash_table"* %0, i64 %99)
  %100 = load i64, i64* %6, align 8
  %101 = tail call i64 @llvm.ctpop.i64(i64 %100) #8, !range !4
  %102 = icmp ugt i64 %101, 1
  br i1 %102, label %106, label %103

103:                                              ; preds = %87
  %104 = add i64 %100, -1
  %105 = and i64 %104, %5
  br label %110

106:                                              ; preds = %87
  %107 = icmp ugt i64 %100, %5
  br i1 %107, label %110, label %108

108:                                              ; preds = %106
  %109 = urem i64 %5, %100
  br label %110

110:                                              ; preds = %108, %106, %103, %68
  %111 = phi i64 [ %7, %68 ], [ %100, %103 ], [ %100, %106 ], [ %100, %108 ]
  %112 = phi i64 [ %69, %68 ], [ %105, %103 ], [ %5, %106 ], [ %109, %108 ]
  %113 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %114 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %113, align 8
  %115 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %114, i64 %112
  %116 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %115, align 8
  %117 = icmp eq %"struct.std::__1::__hash_node_base"* %116, null
  br i1 %117, label %118, label %144

118:                                              ; preds = %110
  %119 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %120 = bitcast %"struct.std::__1::__hash_node_base"* %119 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = bitcast i8* %70 to i64*
  store i64 %121, i64* %122, align 8
  %123 = bitcast %"struct.std::__1::__hash_node_base"* %119 to i8**
  store i8* %70, i8** %123, align 8
  store %"struct.std::__1::__hash_node_base"* %119, %"struct.std::__1::__hash_node_base"** %115, align 8
  %124 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %76, align 8
  %125 = icmp eq %"struct.std::__1::__hash_node_base"* %124, null
  br i1 %125, label %151, label %126

126:                                              ; preds = %118
  %127 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %124, i64 1
  %128 = bitcast %"struct.std::__1::__hash_node_base"* %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = tail call i64 @llvm.ctpop.i64(i64 %111) #8, !range !4
  %131 = icmp ugt i64 %130, 1
  br i1 %131, label %135, label %132

132:                                              ; preds = %126
  %133 = add i64 %111, -1
  %134 = and i64 %129, %133
  br label %139

135:                                              ; preds = %126
  %136 = icmp ult i64 %129, %111
  br i1 %136, label %139, label %137

137:                                              ; preds = %135
  %138 = urem i64 %129, %111
  br label %139

139:                                              ; preds = %132, %135, %137
  %140 = phi i64 [ %134, %132 ], [ %138, %137 ], [ %129, %135 ]
  %141 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %113, align 8
  %142 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %141, i64 %140
  %143 = bitcast %"struct.std::__1::__hash_node_base"** %142 to i8**
  br label %149

144:                                              ; preds = %110
  %145 = bitcast %"struct.std::__1::__hash_node_base"* %116 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = bitcast i8* %70 to i64*
  store i64 %146, i64* %147, align 8
  %148 = bitcast %"struct.std::__1::__hash_node_base"* %116 to i8**
  br label %149

149:                                              ; preds = %139, %144
  %150 = phi i8** [ %148, %144 ], [ %143, %139 ]
  store i8* %70, i8** %150, align 8
  br label %151

151:                                              ; preds = %149, %118
  %152 = bitcast i8* %70 to %"struct.std::__1::__hash_node_base"*
  %153 = load i64, i64* %77, align 8
  %154 = add i64 %153, 1
  store i64 %154, i64* %77, align 8
  br label %155

155:                                              ; preds = %63, %45, %151
  %156 = phi i8 [ 1, %151 ], [ 0, %45 ], [ 0, %63 ]
  %157 = phi %"struct.std::__1::__hash_node_base"* [ %152, %151 ], [ %31, %45 ], [ %53, %63 ]
  %158 = insertvalue { %"struct.std::__1::__hash_node_base"*, i8 } undef, %"struct.std::__1::__hash_node_base"* %157, 0
  %159 = insertvalue { %"struct.std::__1::__hash_node_base"*, i8 } %158, i8 %156, 1
  ret { %"struct.std::__1::__hash_node_base"*, i8 } %159
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEE6rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 1
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = tail call i64 @llvm.ctpop.i64(i64 %1), !range !4
  %6 = icmp ugt i64 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %1) #8
  br label %9

9:                                                ; preds = %2, %4, %7
  %10 = phi i64 [ %8, %7 ], [ %1, %4 ], [ 2, %2 ]
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  tail call void @_ZNSt3__112__hash_tableIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %10)
  br label %45

15:                                               ; preds = %9
  %16 = icmp ult i64 %10, %12
  br i1 %16, label %17, label %45

17:                                               ; preds = %15
  %18 = icmp ugt i64 %12, 2
  %19 = tail call i64 @llvm.ctpop.i64(i64 %12) #8, !range !4
  %20 = icmp ult i64 %19, 2
  %21 = and i1 %18, %20
  %22 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = uitofp i64 %23 to float
  %25 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %26 = load float, float* %25, align 4
  %27 = fdiv float %24, %26
  %28 = tail call float @llvm.ceil.f32(float %27) #8
  %29 = fptoui float %28 to i64
  br i1 %21, label %30, label %37

30:                                               ; preds = %17
  %31 = icmp ult i64 %29, 2
  br i1 %31, label %39, label %32

32:                                               ; preds = %30
  %33 = add i64 %29, -1
  %34 = tail call i64 @llvm.ctlz.i64(i64 %33, i1 true) #8, !range !4
  %35 = sub nuw nsw i64 64, %34
  %36 = shl i64 1, %35
  br label %39

37:                                               ; preds = %17
  %38 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %29) #8
  br label %39

39:                                               ; preds = %32, %30, %37
  %40 = phi i64 [ %38, %37 ], [ %36, %32 ], [ %29, %30 ]
  %41 = icmp ult i64 %10, %40
  %42 = select i1 %41, i64 %40, i64 %10
  %43 = icmp ult i64 %42, %12
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  tail call void @_ZNSt3__112__hash_tableIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %42)
  br label %45

45:                                               ; preds = %15, %44, %39, %14
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare i64 @_ZNSt3__112__next_primeEm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEE8__rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %179, label %5

5:                                                ; preds = %2
  %6 = icmp ugt i64 %1, 2305843009213693951
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @abort() #9
  unreachable

8:                                                ; preds = %5
  %9 = shl i64 %1, 3
  %10 = tail call i8* @_Znwm(i64 %9) #10
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %13 = bitcast %"class.std::__1::__hash_table"* %0 to i8**
  store i8* %10, i8** %13, align 8
  %14 = icmp eq %"struct.std::__1::__hash_node_base"** %12, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %8
  %16 = bitcast %"struct.std::__1::__hash_node_base"** %12 to i8*
  tail call void @_ZdlPv(i8* %16) #10
  br label %17

17:                                               ; preds = %15, %8
  %18 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator", %"class.std::__1::__bucket_list_deallocator"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %18, align 8
  %19 = add i64 %1, -1
  %20 = and i64 %1, 3
  %21 = icmp ult i64 %19, 3
  br i1 %21, label %24, label %22

22:                                               ; preds = %17
  %23 = sub i64 %1, %20
  br label %40

24:                                               ; preds = %40, %17
  %25 = phi i64 [ 0, %17 ], [ %54, %40 ]
  %26 = icmp eq i64 %20, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %24, %27
  %28 = phi i64 [ %32, %27 ], [ %25, %24 ]
  %29 = phi i64 [ %33, %27 ], [ %20, %24 ]
  %30 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %31 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %30, i64 %28
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %31, align 8
  %32 = add nuw i64 %28, 1
  %33 = add i64 %29, -1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %27, !llvm.loop !10

35:                                               ; preds = %27, %24
  %36 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %37 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %36, i64 0, i32 0
  %38 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %37, align 8
  %39 = icmp eq %"struct.std::__1::__hash_node_base"* %38, null
  br i1 %39, label %187, label %57

40:                                               ; preds = %40, %22
  %41 = phi i64 [ 0, %22 ], [ %54, %40 ]
  %42 = phi i64 [ %23, %22 ], [ %55, %40 ]
  %43 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %44 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %43, i64 %41
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %44, align 8
  %45 = or i64 %41, 1
  %46 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %47 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %46, i64 %45
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %47, align 8
  %48 = or i64 %41, 2
  %49 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %50 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %49, i64 %48
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %50, align 8
  %51 = or i64 %41, 3
  %52 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %53 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %52, i64 %51
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %53, align 8
  %54 = add nuw i64 %41, 4
  %55 = add i64 %42, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %24, label %40

57:                                               ; preds = %35
  %58 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %38, i64 1
  %59 = bitcast %"struct.std::__1::__hash_node_base"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = tail call i64 @llvm.ctpop.i64(i64 %1) #8, !range !4
  %62 = icmp ugt i64 %61, 1
  br i1 %62, label %66, label %63

63:                                               ; preds = %57
  %64 = add i64 %1, -1
  %65 = and i64 %60, %64
  br label %70

66:                                               ; preds = %57
  %67 = icmp ult i64 %60, %1
  br i1 %67, label %70, label %68

68:                                               ; preds = %66
  %69 = urem i64 %60, %1
  br label %70

70:                                               ; preds = %63, %66, %68
  %71 = phi i64 [ %65, %63 ], [ %69, %68 ], [ %60, %66 ]
  %72 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %73 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %72, i64 %71
  store %"struct.std::__1::__hash_node_base"* %36, %"struct.std::__1::__hash_node_base"** %73, align 8
  %74 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %38, i64 0, i32 0
  %75 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %74, align 8
  %76 = icmp eq %"struct.std::__1::__hash_node_base"* %75, null
  br i1 %76, label %187, label %77

77:                                               ; preds = %70
  %78 = add i64 %1, -1
  br i1 %62, label %79, label %131

79:                                               ; preds = %77, %122
  %80 = phi %"struct.std::__1::__hash_node_base"* [ %126, %122 ], [ %75, %77 ]
  %81 = phi i64 [ %124, %122 ], [ %71, %77 ]
  %82 = phi %"struct.std::__1::__hash_node_base"* [ %123, %122 ], [ %38, %77 ]
  %83 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %80, i64 1
  %84 = bitcast %"struct.std::__1::__hash_node_base"* %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = icmp ult i64 %85, %1
  br i1 %86, label %89, label %87

87:                                               ; preds = %79
  %88 = urem i64 %85, %1
  br label %89

89:                                               ; preds = %87, %79
  %90 = phi i64 [ %88, %87 ], [ %85, %79 ]
  %91 = icmp eq i64 %90, %81
  br i1 %91, label %122, label %92

92:                                               ; preds = %89
  %93 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %94 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %93, i64 %90
  %95 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %94, align 8
  %96 = icmp eq %"struct.std::__1::__hash_node_base"* %95, null
  br i1 %96, label %121, label %128

97:                                               ; preds = %128, %102
  %98 = phi %"struct.std::__1::__hash_node_base"* [ %100, %102 ], [ %80, %128 ]
  %99 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %98, i64 0, i32 0
  %100 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %99, align 8
  %101 = icmp eq %"struct.std::__1::__hash_node_base"* %100, null
  br i1 %101, label %108, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %100, i64 2
  %104 = bitcast %"struct.std::__1::__hash_node_base"* %103 to i32*
  %105 = load i32, i32* %130, align 4
  %106 = load i32, i32* %104, align 4
  %107 = icmp eq i32 %105, %106
  br i1 %107, label %97, label %108

108:                                              ; preds = %102, %97
  %109 = ptrtoint %"struct.std::__1::__hash_node_base"* %100 to i64
  %110 = bitcast %"struct.std::__1::__hash_node_base"* %98 to i64*
  %111 = bitcast %"struct.std::__1::__hash_node_base"* %82 to i64*
  store i64 %109, i64* %111, align 8
  %112 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %113 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %112, i64 %90
  %114 = bitcast %"struct.std::__1::__hash_node_base"** %113 to i64**
  %115 = load i64*, i64** %114, align 8
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %110, align 8
  %117 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %118 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %117, i64 %90
  %119 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %118, align 8
  %120 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %119, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base"* %80, %"struct.std::__1::__hash_node_base"** %120, align 8
  br label %122

121:                                              ; preds = %92
  store %"struct.std::__1::__hash_node_base"* %82, %"struct.std::__1::__hash_node_base"** %94, align 8
  br label %122

122:                                              ; preds = %121, %108, %89
  %123 = phi %"struct.std::__1::__hash_node_base"* [ %80, %121 ], [ %82, %108 ], [ %80, %89 ]
  %124 = phi i64 [ %90, %121 ], [ %81, %108 ], [ %81, %89 ]
  %125 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %123, i64 0, i32 0
  %126 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %125, align 8
  %127 = icmp eq %"struct.std::__1::__hash_node_base"* %126, null
  br i1 %127, label %187, label %79

128:                                              ; preds = %92
  %129 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %80, i64 2
  %130 = bitcast %"struct.std::__1::__hash_node_base"* %129 to i32*
  br label %97

131:                                              ; preds = %77, %173
  %132 = phi %"struct.std::__1::__hash_node_base"* [ %177, %173 ], [ %75, %77 ]
  %133 = phi i64 [ %175, %173 ], [ %71, %77 ]
  %134 = phi %"struct.std::__1::__hash_node_base"* [ %174, %173 ], [ %38, %77 ]
  %135 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %132, i64 1
  %136 = bitcast %"struct.std::__1::__hash_node_base"* %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = and i64 %137, %78
  %139 = icmp eq i64 %138, %133
  br i1 %139, label %173, label %140

140:                                              ; preds = %131
  %141 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %142 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %141, i64 %138
  %143 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %142, align 8
  %144 = icmp eq %"struct.std::__1::__hash_node_base"* %143, null
  br i1 %144, label %148, label %145

145:                                              ; preds = %140
  %146 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %132, i64 2
  %147 = bitcast %"struct.std::__1::__hash_node_base"* %146 to i32*
  br label %149

148:                                              ; preds = %140
  store %"struct.std::__1::__hash_node_base"* %134, %"struct.std::__1::__hash_node_base"** %142, align 8
  br label %173

149:                                              ; preds = %145, %154
  %150 = phi %"struct.std::__1::__hash_node_base"* [ %152, %154 ], [ %132, %145 ]
  %151 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %150, i64 0, i32 0
  %152 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %151, align 8
  %153 = icmp eq %"struct.std::__1::__hash_node_base"* %152, null
  br i1 %153, label %160, label %154

154:                                              ; preds = %149
  %155 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %152, i64 2
  %156 = bitcast %"struct.std::__1::__hash_node_base"* %155 to i32*
  %157 = load i32, i32* %147, align 4
  %158 = load i32, i32* %156, align 4
  %159 = icmp eq i32 %157, %158
  br i1 %159, label %149, label %160

160:                                              ; preds = %149, %154
  %161 = ptrtoint %"struct.std::__1::__hash_node_base"* %152 to i64
  %162 = bitcast %"struct.std::__1::__hash_node_base"* %150 to i64*
  %163 = bitcast %"struct.std::__1::__hash_node_base"* %134 to i64*
  store i64 %161, i64* %163, align 8
  %164 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %165 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %164, i64 %138
  %166 = bitcast %"struct.std::__1::__hash_node_base"** %165 to i64**
  %167 = load i64*, i64** %166, align 8
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %162, align 8
  %169 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %170 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %169, i64 %138
  %171 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %170, align 8
  %172 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %171, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base"* %132, %"struct.std::__1::__hash_node_base"** %172, align 8
  br label %173

173:                                              ; preds = %131, %160, %148
  %174 = phi %"struct.std::__1::__hash_node_base"* [ %132, %148 ], [ %134, %160 ], [ %132, %131 ]
  %175 = phi i64 [ %138, %148 ], [ %133, %160 ], [ %133, %131 ]
  %176 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %174, i64 0, i32 0
  %177 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %176, align 8
  %178 = icmp eq %"struct.std::__1::__hash_node_base"* %177, null
  br i1 %178, label %187, label %131

179:                                              ; preds = %2
  %180 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %181 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %180, align 8
  store %"struct.std::__1::__hash_node_base"** null, %"struct.std::__1::__hash_node_base"*** %180, align 8
  %182 = icmp eq %"struct.std::__1::__hash_node_base"** %181, null
  br i1 %182, label %185, label %183

183:                                              ; preds = %179
  %184 = bitcast %"struct.std::__1::__hash_node_base"** %181 to i8*
  tail call void @_ZdlPv(i8* %184) #10
  br label %185

185:                                              ; preds = %179, %183
  %186 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator", %"class.std::__1::__bucket_list_deallocator"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 0, i64* %186, align 8
  br label %187

187:                                              ; preds = %173, %122, %70, %35, %185
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #7

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
!4 = !{i64 0, i64 65}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNSt3__112__hash_tableIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEE21__construct_node_hashIRiJEEENS_10unique_ptrINS_11__hash_nodeIiPvEENS_22__hash_node_destructorINS5_ISD_EEEEEEmOT_DpOT0_: argument 0"}
!9 = distinct !{!9, !"_ZNSt3__112__hash_tableIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEE21__construct_node_hashIRiJEEENS_10unique_ptrINS_11__hash_nodeIiPvEENS_22__hash_node_destructorINS5_ISD_EEEEEEmOT_DpOT0_"}
!10 = distinct !{!10, !6}
