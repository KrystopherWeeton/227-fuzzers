; ModuleID = '../../third_party/openscreen/src/cast/streaming/encoded_frame.cc'
source_filename = "../../third_party/openscreen/src/cast/streaming/encoded_frame.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.openscreen::cast::EncodedFrame" = type { i8, %"class.openscreen::cast::FrameId", %"class.openscreen::cast::FrameId", %"class.openscreen::cast::RtpTimeTicks", %"class.std::__1::chrono::time_point", %"class.std::__1::chrono::duration.1", %"class.absl::Span" }
%"class.openscreen::cast::FrameId" = type { %"class.openscreen::cast::ExpandedValueBase" }
%"class.openscreen::cast::ExpandedValueBase" = type { i64 }
%"class.openscreen::cast::RtpTimeTicks" = type { %"class.openscreen::cast::ExpandedValueBase.0" }
%"class.openscreen::cast::ExpandedValueBase.0" = type { i64 }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%"class.std::__1::chrono::duration.1" = type { i64 }
%"class.absl::Span" = type { i8*, i64 }

@_ZN10openscreen4cast12EncodedFrameC1Ev = hidden unnamed_addr alias void (%"struct.openscreen::cast::EncodedFrame"*), void (%"struct.openscreen::cast::EncodedFrame"*)* @_ZN10openscreen4cast12EncodedFrameC2Ev
@_ZN10openscreen4cast12EncodedFrameD1Ev = hidden unnamed_addr alias void (%"struct.openscreen::cast::EncodedFrame"*), void (%"struct.openscreen::cast::EncodedFrame"*)* @_ZN10openscreen4cast12EncodedFrameD2Ev
@_ZN10openscreen4cast12EncodedFrameC1EOS1_ = hidden unnamed_addr alias void (%"struct.openscreen::cast::EncodedFrame"*, %"struct.openscreen::cast::EncodedFrame"*), void (%"struct.openscreen::cast::EncodedFrame"*, %"struct.openscreen::cast::EncodedFrame"*)* @_ZN10openscreen4cast12EncodedFrameC2EOS1_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10openscreen4cast12EncodedFrameC2Ev(%"struct.openscreen::cast::EncodedFrame"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 0
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = bitcast i64* %3 to <2 x i64>*
  store <2 x i64> <i64 -9223372036854775808, i64 -9223372036854775808>, <2 x i64>* %4, align 8
  %5 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = bitcast i64* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 40, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN10openscreen4cast12EncodedFrameD2Ev(%"struct.openscreen::cast::EncodedFrame"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10openscreen4cast12EncodedFrameC2EOS1_(%"struct.openscreen::cast::EncodedFrame"* nocapture, %"struct.openscreen::cast::EncodedFrame"* nocapture readonly dereferenceable(64)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 64, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(64) %"struct.openscreen::cast::EncodedFrame"* @_ZN10openscreen4cast12EncodedFrameaSEOS1_(%"struct.openscreen::cast::EncodedFrame"* returned, %"struct.openscreen::cast::EncodedFrame"* nocapture readonly dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %1, i64 0, i32 0
  %4 = load i8, i8* %3, align 8
  %5 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 0
  store i8 %4, i8* %5, align 8
  %6 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %1, i64 0, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  store i64 %8, i64* %7, align 8
  %9 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %1, i64 0, i32 2, i32 0, i32 0
  %10 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %9, align 8
  store i64 %11, i64* %10, align 8
  %12 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 3
  %13 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %1, i64 0, i32 3
  %14 = bitcast %"class.openscreen::cast::RtpTimeTicks"* %12 to i8*
  %15 = bitcast %"class.openscreen::cast::RtpTimeTicks"* %13 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 40, i1 false)
  ret %"struct.openscreen::cast::EncodedFrame"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK10openscreen4cast12EncodedFrame14CopyMetadataToEPS1_(%"struct.openscreen::cast::EncodedFrame"* nocapture readonly, %"struct.openscreen::cast::EncodedFrame"* nocapture) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 8
  %5 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %1, i64 0, i32 0
  store i8 %4, i8* %5, align 8
  %6 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %1, i64 0, i32 1, i32 0, i32 0
  %8 = load i64, i64* %6, align 8
  store i64 %8, i64* %7, align 8
  %9 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 2, i32 0, i32 0
  %10 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %1, i64 0, i32 2, i32 0, i32 0
  %11 = load i64, i64* %9, align 8
  store i64 %11, i64* %10, align 8
  %12 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %1, i64 0, i32 3, i32 0, i32 0
  %14 = load i64, i64* %12, align 8
  store i64 %14, i64* %13, align 8
  %15 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 4, i32 0, i32 0
  %16 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %1, i64 0, i32 4, i32 0, i32 0
  %17 = load i64, i64* %15, align 8
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %0, i64 0, i32 5, i32 0
  %19 = getelementptr inbounds %"struct.openscreen::cast::EncodedFrame", %"struct.openscreen::cast::EncodedFrame"* %1, i64 0, i32 5, i32 0
  %20 = load i64, i64* %18, align 8
  store i64 %20, i64* %19, align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
