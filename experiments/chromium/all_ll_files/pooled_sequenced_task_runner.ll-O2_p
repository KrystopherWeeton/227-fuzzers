; ModuleID = '../../base/task/thread_pool/pooled_sequenced_task_runner.cc'
source_filename = "../../base/task/thread_pool/pooled_sequenced_task_runner.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::internal::PooledSequencedTaskRunner" = type { %"class.base::UpdateableSequencedTaskRunner.base", %"class.base::internal::PooledTaskRunnerDelegate"*, %class.scoped_refptr }
%"class.base::UpdateableSequencedTaskRunner.base" = type { %"class.base::SequencedTaskRunner.base" }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr = type { %"class.base::internal::Sequence"* }
%"class.base::internal::Sequence" = type { %"class.base::internal::TaskSource.base", %"class.base::SequenceToken", %"class.std::__1::queue", %"struct.std::__1::atomic.9", i8, %"class.base::internal::SequenceLocalStorageMap" }
%"class.base::internal::TaskSource.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1", %"class.base::TaskTraits", %"struct.std::__1::atomic.2", [4 x i8], %"class.base::internal::CheckedLock", %"class.base::HeapHandle", %"class.base::TaskRunner"*, i32 }>
%"class.base::RefCountedThreadSafe.1" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::TaskTraits" = type { %"struct.base::TaskTraitsExtensionStorage", i8, i8, i8, i8, i8, i8 }
%"struct.base::TaskTraitsExtensionStorage" = type { i8, %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::HeapHandle" = type { i64 }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::SequenceToken" = type { i32 }
%"class.std::__1::queue" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"struct.base::internal::Task"*, i64 }
%"struct.base::internal::Task" = type { %"struct.base::PendingTask.base", [3 x i8] }
%"struct.base::PendingTask.base" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array.8", i32, [4 x i8], i8*, i32, i8 }>
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.6 }
%class.scoped_refptr.6 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.7", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.7" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.std::__1::array.8" = type { [4 x i8*] }
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { %"class.base::TimeTicks" }
%"class.base::internal::SequenceLocalStorageMap" = type { %"class.base::flat_map" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"class.base::internal::PooledTaskRunnerDelegate" = type { i32 (...)** }
%"class.base::internal::TaskSource" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1", %"class.base::TaskTraits", %"struct.std::__1::atomic.2", [4 x i8], %"class.base::internal::CheckedLock", %"class.base::HeapHandle", %"class.base::TaskRunner"*, i32, [4 x i8] }>
%"struct.base::PendingTask" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array.8", i32, [4 x i8], i8*, i32, i8, [3 x i8] }>

@_ZTVN4base8internal25PooledSequencedTaskRunnerE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"class.base::internal::PooledSequencedTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)* @_ZN4base8internal25PooledSequencedTaskRunner15PostDelayedTaskERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeDeltaE to i8*), i8* bitcast (void (%"class.base::internal::PooledSequencedTaskRunner"*)* @_ZN4base8internal25PooledSequencedTaskRunnerD2Ev to i8*), i8* bitcast (void (%"class.base::internal::PooledSequencedTaskRunner"*)* @_ZN4base8internal25PooledSequencedTaskRunnerD0Ev to i8*), i8* bitcast (void (%"class.base::TaskRunner"*)* @_ZNK4base10TaskRunner10OnDestructEv to i8*), i8* bitcast (i1 (%"class.base::internal::PooledSequencedTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)* @_ZN4base8internal25PooledSequencedTaskRunner26PostNonNestableDelayedTaskERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeDeltaE to i8*), i8* bitcast (i1 (%"class.base::internal::PooledSequencedTaskRunner"*)* @_ZNK4base8internal25PooledSequencedTaskRunner26RunsTasksInCurrentSequenceEv to i8*), i8* bitcast (void (%"class.base::internal::PooledSequencedTaskRunner"*, i8)* @_ZN4base8internal25PooledSequencedTaskRunner14UpdatePriorityENS_12TaskPriorityE to i8*)] }, align 8

@_ZN4base8internal25PooledSequencedTaskRunnerC1ERKNS_10TaskTraitsEPNS0_24PooledTaskRunnerDelegateE = hidden unnamed_addr alias void (%"class.base::internal::PooledSequencedTaskRunner"*, %"class.base::TaskTraits"*, %"class.base::internal::PooledTaskRunnerDelegate"*), void (%"class.base::internal::PooledSequencedTaskRunner"*, %"class.base::TaskTraits"*, %"class.base::internal::PooledTaskRunnerDelegate"*)* @_ZN4base8internal25PooledSequencedTaskRunnerC2ERKNS_10TaskTraitsEPNS0_24PooledTaskRunnerDelegateE
@_ZN4base8internal25PooledSequencedTaskRunnerD1Ev = hidden unnamed_addr alias void (%"class.base::internal::PooledSequencedTaskRunner"*), void (%"class.base::internal::PooledSequencedTaskRunner"*)* @_ZN4base8internal25PooledSequencedTaskRunnerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal25PooledSequencedTaskRunnerC2ERKNS_10TaskTraitsEPNS0_24PooledTaskRunnerDelegateE(%"class.base::internal::PooledSequencedTaskRunner"*, %"class.base::TaskTraits"* dereferenceable(15), %"class.base::internal::PooledTaskRunnerDelegate"*) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.base::internal::PooledSequencedTaskRunner"* %0 to %"class.base::TaskRunner"*
  tail call void @_ZN4base10TaskRunnerC2Ev(%"class.base::TaskRunner"* %4) #6
  %5 = getelementptr inbounds %"class.base::internal::PooledSequencedTaskRunner", %"class.base::internal::PooledSequencedTaskRunner"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4base8internal25PooledSequencedTaskRunnerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.base::internal::PooledSequencedTaskRunner", %"class.base::internal::PooledSequencedTaskRunner"* %0, i64 0, i32 1
  store %"class.base::internal::PooledTaskRunnerDelegate"* %2, %"class.base::internal::PooledTaskRunnerDelegate"** %6, align 8
  %7 = tail call i8* @_Znwm(i64 168) #7
  %8 = bitcast i8* %7 to %"class.base::internal::Sequence"*
  tail call void @_ZN4base8internal8SequenceC1ERKNS_10TaskTraitsEPNS_10TaskRunnerENS0_23TaskSourceExecutionModeE(%"class.base::internal::Sequence"* nonnull %8, %"class.base::TaskTraits"* dereferenceable(15) %1, %"class.base::TaskRunner"* %4, i32 1) #6
  %9 = getelementptr inbounds i8, i8* %7, i64 8
  %10 = bitcast i8* %9 to i32*
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  %12 = getelementptr inbounds %"class.base::internal::PooledSequencedTaskRunner", %"class.base::internal::PooledSequencedTaskRunner"* %0, i64 0, i32 2, i32 0
  %13 = bitcast %"class.base::internal::Sequence"** %12 to i8**
  store i8* %7, i8** %13, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal25PooledSequencedTaskRunnerD2Ev(%"class.base::internal::PooledSequencedTaskRunner"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::PooledSequencedTaskRunner", %"class.base::internal::PooledSequencedTaskRunner"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4base8internal25PooledSequencedTaskRunnerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::PooledSequencedTaskRunner", %"class.base::internal::PooledSequencedTaskRunner"* %0, i64 0, i32 2, i32 0
  %4 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %3, align 8
  %5 = icmp eq %"class.base::internal::Sequence"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::Sequence", %"class.base::internal::Sequence"* %4, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe.1"* %12 to %"class.base::internal::TaskSource"*
  %14 = bitcast %"class.base::RefCountedThreadSafe.1"* %12 to void (%"class.base::internal::TaskSource"*)***
  %15 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %15, i64 4
  %17 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %16, align 8
  tail call void %17(%"class.base::internal::TaskSource"* nonnull %13) #6
  br label %18

18:                                               ; preds = %1, %6, %11
  %19 = bitcast %"class.base::internal::PooledSequencedTaskRunner"* %0 to %"class.base::TaskRunner"*
  tail call void @_ZN4base10TaskRunnerD2Ev(%"class.base::TaskRunner"* %19) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal25PooledSequencedTaskRunnerD0Ev(%"class.base::internal::PooledSequencedTaskRunner"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::PooledSequencedTaskRunner", %"class.base::internal::PooledSequencedTaskRunner"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4base8internal25PooledSequencedTaskRunnerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::PooledSequencedTaskRunner", %"class.base::internal::PooledSequencedTaskRunner"* %0, i64 0, i32 2, i32 0
  %4 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %3, align 8
  %5 = icmp eq %"class.base::internal::Sequence"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::Sequence", %"class.base::internal::Sequence"* %4, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe.1"* %12 to %"class.base::internal::TaskSource"*
  %14 = bitcast %"class.base::RefCountedThreadSafe.1"* %12 to void (%"class.base::internal::TaskSource"*)***
  %15 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %15, i64 4
  %17 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %16, align 8
  tail call void %17(%"class.base::internal::TaskSource"* nonnull %13) #6
  br label %18

18:                                               ; preds = %1, %6, %11
  %19 = bitcast %"class.base::internal::PooledSequencedTaskRunner"* %0 to %"class.base::TaskRunner"*
  tail call void @_ZN4base10TaskRunnerD2Ev(%"class.base::TaskRunner"* %19) #6
  %20 = bitcast %"class.base::internal::PooledSequencedTaskRunner"* %0 to i8*
  tail call void @_ZdlPv(i8* %20) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8internal25PooledSequencedTaskRunner15PostDelayedTaskERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeDeltaE(%"class.base::internal::PooledSequencedTaskRunner"* nocapture readonly, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"* nocapture, i64) unnamed_addr #0 align 2 {
  %5 = alloca %"struct.base::internal::Task", align 8
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = alloca %"struct.base::internal::Task", align 8
  %8 = getelementptr inbounds %"class.base::internal::PooledSequencedTaskRunner", %"class.base::internal::PooledSequencedTaskRunner"* %0, i64 0, i32 1
  %9 = load %"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::PooledTaskRunnerDelegate"** %8, align 8
  %10 = tail call zeroext i1 @_ZN4base8internal24PooledTaskRunnerDelegate22MatchesCurrentDelegateEPS1_(%"class.base::internal::PooledTaskRunnerDelegate"* %9) #6
  br i1 %10, label %11, label %34

11:                                               ; preds = %4
  %12 = bitcast %"struct.base::internal::Task"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 112, i1 false)
  %13 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %14 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.base::OnceCallback"* %6 to i64*
  store i64 %15, i64* %16, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %13, align 8
  %17 = tail call i64 @_ZN4base9TimeTicks3NowEv() #6
  call void @_ZN4base8internal4TaskC1ERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeTicksENS_9TimeDeltaE(%"struct.base::internal::Task"* nonnull %5, %"class.base::Location"* dereferenceable(32) %1, %"class.base::OnceCallback"* nonnull %6, i64 %17, i64 %3) #6
  %18 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %18) #6
  %19 = load %"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::PooledTaskRunnerDelegate"** %8, align 8
  call void @_ZN4base8internal4TaskC1EOS1_(%"struct.base::internal::Task"* nonnull %7, %"struct.base::internal::Task"* nonnull dereferenceable(112) %5) #6
  %20 = getelementptr inbounds %"class.base::internal::PooledSequencedTaskRunner", %"class.base::internal::PooledSequencedTaskRunner"* %0, i64 0, i32 2, i32 0
  %21 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %20, align 8
  %22 = icmp eq %"class.base::internal::Sequence"* %21, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %11
  %24 = getelementptr inbounds %"class.base::internal::Sequence", %"class.base::internal::Sequence"* %21, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw add i32* %24, i32 1 monotonic
  br label %26

26:                                               ; preds = %11, %23
  %27 = bitcast %"class.base::internal::PooledTaskRunnerDelegate"* %19 to i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)***
  %28 = load i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)**, i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)*** %27, align 8
  %29 = getelementptr inbounds i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)*, i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)** %28, i64 3
  %30 = load i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)*, i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)** %29, align 8
  %31 = call zeroext i1 %30(%"class.base::internal::PooledTaskRunnerDelegate"* %19, %"struct.base::internal::Task"* nonnull %7, %"class.base::internal::Sequence"* %21) #6
  %32 = bitcast %"struct.base::internal::Task"* %7 to %"struct.base::PendingTask"*
  call void @_ZN4base11PendingTaskD2Ev(%"struct.base::PendingTask"* nonnull %32) #6
  %33 = bitcast %"struct.base::internal::Task"* %5 to %"struct.base::PendingTask"*
  call void @_ZN4base11PendingTaskD2Ev(%"struct.base::PendingTask"* nonnull %33) #6
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %12) #6
  br label %34

34:                                               ; preds = %4, %26
  %35 = phi i1 [ %31, %26 ], [ false, %4 ]
  ret i1 %35
}

declare zeroext i1 @_ZN4base8internal24PooledTaskRunnerDelegate22MatchesCurrentDelegateEPS1_(%"class.base::internal::PooledTaskRunnerDelegate"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @_ZN4base9TimeTicks3NowEv() local_unnamed_addr #3

declare void @_ZN4base8internal4TaskC1ERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeTicksENS_9TimeDeltaE(%"struct.base::internal::Task"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"*, i64, i64) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4base8internal4TaskC1EOS1_(%"struct.base::internal::Task"*, %"struct.base::internal::Task"* dereferenceable(112)) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4base11PendingTaskD2Ev(%"struct.base::PendingTask"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8internal25PooledSequencedTaskRunner26PostNonNestableDelayedTaskERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeDeltaE(%"class.base::internal::PooledSequencedTaskRunner"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"* nocapture, i64) unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %8, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %10 = bitcast %"class.base::internal::PooledSequencedTaskRunner"* %0 to i1 (%"class.base::internal::PooledSequencedTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)***
  %11 = load i1 (%"class.base::internal::PooledSequencedTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::internal::PooledSequencedTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*** %10, align 8
  %12 = load i1 (%"class.base::internal::PooledSequencedTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::internal::PooledSequencedTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)** %11, align 8
  %13 = call zeroext i1 %12(%"class.base::internal::PooledSequencedTaskRunner"* %0, %"class.base::Location"* dereferenceable(32) %1, %"class.base::OnceCallback"* nonnull %5, i64 %3) #6
  %14 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %14) #6
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal25PooledSequencedTaskRunner26RunsTasksInCurrentSequenceEv(%"class.base::internal::PooledSequencedTaskRunner"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::SequenceToken", align 4
  %3 = getelementptr inbounds %"class.base::internal::PooledSequencedTaskRunner", %"class.base::internal::PooledSequencedTaskRunner"* %0, i64 0, i32 2, i32 0
  %4 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::Sequence", %"class.base::internal::Sequence"* %4, i64 0, i32 1
  %6 = bitcast %"class.base::SequenceToken"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #6
  %7 = tail call i32 @_ZN4base13SequenceToken19GetForCurrentThreadEv() #6
  %8 = getelementptr inbounds %"class.base::SequenceToken", %"class.base::SequenceToken"* %2, i64 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = call zeroext i1 @_ZNK4base13SequenceTokeneqERKS0_(%"class.base::SequenceToken"* %5, %"class.base::SequenceToken"* nonnull dereferenceable(4) %2) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #6
  ret i1 %9
}

declare zeroext i1 @_ZNK4base13SequenceTokeneqERKS0_(%"class.base::SequenceToken"*, %"class.base::SequenceToken"* dereferenceable(4)) local_unnamed_addr #3

declare i32 @_ZN4base13SequenceToken19GetForCurrentThreadEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal25PooledSequencedTaskRunner14UpdatePriorityENS_12TaskPriorityE(%"class.base::internal::PooledSequencedTaskRunner"* nocapture readonly, i8 zeroext) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::PooledSequencedTaskRunner", %"class.base::internal::PooledSequencedTaskRunner"* %0, i64 0, i32 1
  %4 = load %"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::PooledTaskRunnerDelegate"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::PooledSequencedTaskRunner", %"class.base::internal::PooledSequencedTaskRunner"* %0, i64 0, i32 2
  %6 = bitcast %class.scoped_refptr* %5 to %"class.base::internal::TaskSource"**
  %7 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %6, align 8
  %8 = icmp eq %"class.base::internal::TaskSource"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %7, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %2, %9
  %13 = bitcast %"class.base::internal::PooledTaskRunnerDelegate"* %4 to void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)***
  %14 = load void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)**, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)*, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)** %14, i64 6
  %16 = load void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)*, void (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::TaskSource"*, i8)** %15, align 8
  tail call void %16(%"class.base::internal::PooledTaskRunnerDelegate"* %4, %"class.base::internal::TaskSource"* %7, i8 zeroext %1) #6
  ret void
}

declare void @_ZNK4base10TaskRunner10OnDestructEv(%"class.base::TaskRunner"*) unnamed_addr #3

declare void @_ZN4base10TaskRunnerC2Ev(%"class.base::TaskRunner"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base10TaskRunnerD2Ev(%"class.base::TaskRunner"*) unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN4base8internal8SequenceC1ERKNS_10TaskTraitsEPNS_10TaskRunnerENS0_23TaskSourceExecutionModeE(%"class.base::internal::Sequence"*, %"class.base::TaskTraits"* dereferenceable(15), %"class.base::TaskRunner"*, i32) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
