; ModuleID = '../../native_client/src/trusted/interval_multiset/nacl_interval_multiset_factory.c'
source_filename = "../../native_client/src/trusted/interval_multiset/nacl_interval_multiset_factory.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NaClIntervalMultiset = type { %struct.NaClIntervalMultisetVtbl* }
%struct.NaClIntervalMultisetVtbl = type { void (%struct.NaClIntervalMultiset*)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, i32 (%struct.NaClIntervalMultiset*, i32, i32)* }
%struct.NaClIntervalListMultiset = type { %struct.NaClIntervalMultiset, %struct.NaClIntervalNode* }
%struct.NaClIntervalNode = type opaque
%struct.NaClIntervalRangeTree = type { %struct.NaClIntervalMultiset, %struct.NaClIntervalRangeTreeNode* }
%struct.NaClIntervalRangeTreeNode = type opaque

@.str = private unnamed_addr constant [25 x i8] c"NaClIntervalListMultiset\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"NaClIntervalRangeTree\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.NaClIntervalMultiset* @NaClIntervalMultisetFactory(i8* nocapture readonly) local_unnamed_addr #0 {
  %2 = tail call i32 @strcmp(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8* %0) #5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %13

4:                                                ; preds = %1
  %5 = tail call noalias i8* @malloc(i64 16) #6
  %6 = icmp eq i8* %5, null
  br i1 %6, label %25, label %7

7:                                                ; preds = %4
  %8 = bitcast i8* %5 to %struct.NaClIntervalMultiset*
  %9 = bitcast i8* %5 to %struct.NaClIntervalListMultiset*
  %10 = tail call i32 @NaClIntervalListMultisetCtor(%struct.NaClIntervalListMultiset* nonnull %9) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %25

12:                                               ; preds = %7
  tail call void @free(i8* nonnull %5) #6
  br label %25

13:                                               ; preds = %1
  %14 = tail call i32 @strcmp(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i8* %0) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %25

16:                                               ; preds = %13
  %17 = tail call noalias i8* @malloc(i64 16) #6
  %18 = icmp eq i8* %17, null
  br i1 %18, label %25, label %19

19:                                               ; preds = %16
  %20 = bitcast i8* %17 to %struct.NaClIntervalMultiset*
  %21 = bitcast i8* %17 to %struct.NaClIntervalRangeTree*
  %22 = tail call i32 @NaClIntervalRangeTreeCtor(%struct.NaClIntervalRangeTree* nonnull %21) #6
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %19
  tail call void @free(i8* nonnull %17) #6
  br label %25

25:                                               ; preds = %13, %24, %16, %19, %12, %4, %7
  %26 = phi %struct.NaClIntervalMultiset* [ %8, %7 ], [ null, %12 ], [ null, %4 ], [ %20, %19 ], [ null, %24 ], [ null, %16 ], [ null, %13 ]
  ret %struct.NaClIntervalMultiset* %26
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

declare i32 @NaClIntervalListMultisetCtor(%struct.NaClIntervalListMultiset*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

declare i32 @NaClIntervalRangeTreeCtor(%struct.NaClIntervalRangeTree*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
