; ModuleID = '../../components/viz/service/display/output_surface_frame.cc'
source_filename = "../../components/viz/service/display/output_surface_frame.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::OutputSurfaceFrame" = type { %"class.gfx::Size", %"class.absl::optional", %"class.std::__1::vector", %"class.std::__1::vector.1", i8, %"class.std::__1::unique_ptr" }
%"class.gfx::Size" = type { i32, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Rect" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gfx::Rect"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"*, %"class.std::__1::__compressed_pair.10" }
%"class.ui::LatencyInfo" = type { %"class.base::flat_map", i64, i64, i8, i8, i8, i32, float, float, i64 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.3" }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.5" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.ui::LatencyInfo"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.gfx::DelegatedInkMetadata"* }
%"class.gfx::DelegatedInkMetadata" = type <{ %"class.gfx::PointF", double, i32, [4 x i8], %"class.base::TimeTicks", %"class.gfx::RectF", %"class.base::TimeTicks", i8, [7 x i8] }>
%"class.gfx::PointF" = type { float, float }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }

@_ZN3viz18OutputSurfaceFrameC1Ev = hidden unnamed_addr alias void (%"class.viz::OutputSurfaceFrame"*), void (%"class.viz::OutputSurfaceFrame"*)* @_ZN3viz18OutputSurfaceFrameC2Ev
@_ZN3viz18OutputSurfaceFrameC1EOS0_ = hidden unnamed_addr alias void (%"class.viz::OutputSurfaceFrame"*, %"class.viz::OutputSurfaceFrame"*), void (%"class.viz::OutputSurfaceFrame"*, %"class.viz::OutputSurfaceFrame"*)* @_ZN3viz18OutputSurfaceFrameC2EOS0_
@_ZN3viz18OutputSurfaceFrameD1Ev = hidden unnamed_addr alias void (%"class.viz::OutputSurfaceFrame"*), void (%"class.viz::OutputSurfaceFrame"*)* @_ZN3viz18OutputSurfaceFrameD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz18OutputSurfaceFrameC2Ev(%"class.viz::OutputSurfaceFrame"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 5
  %4 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 0, i64* %4, align 8
  %5 = bitcast %"class.viz::OutputSurfaceFrame"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 9, i1 false)
  %6 = bitcast %"class.std::__1::vector"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 49, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz18OutputSurfaceFrameC2EOS0_(%"class.viz::OutputSurfaceFrame"* nocapture, %"class.viz::OutputSurfaceFrame"* nocapture dereferenceable(96)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.viz::OutputSurfaceFrame"* %0 to i8*
  %4 = bitcast %"class.viz::OutputSurfaceFrame"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 28, i1 false)
  %5 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 2
  %7 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #4
  %8 = bitcast %"class.std::__1::vector"* %6 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %5 to i64*
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 2, i32 0, i32 1
  %12 = bitcast %"class.gfx::Rect"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 2, i32 0, i32 1
  %15 = bitcast %"class.gfx::Rect"** %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"class.gfx::Rect"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %20 = bitcast %"class.gfx::Rect"** %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 24, i1 false) #4
  %22 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 3
  %23 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 3
  %24 = bitcast %"class.std::__1::vector.1"* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #4
  %25 = bitcast %"class.std::__1::vector.1"* %23 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.std::__1::vector.1"* %22 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 3, i32 0, i32 1
  %29 = bitcast %"class.ui::LatencyInfo"** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 3, i32 0, i32 1
  %32 = bitcast %"class.ui::LatencyInfo"** %31 to i64*
  store i64 %30, i64* %32, align 8
  %33 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %34 = bitcast %"class.ui::LatencyInfo"** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %37 = bitcast %"class.ui::LatencyInfo"** %36 to i64*
  store i64 %35, i64* %37, align 8
  %38 = bitcast %"class.std::__1::vector.1"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #4
  %39 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 4
  %40 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 4
  %41 = load i8, i8* %40, align 8, !range !2
  store i8 %41, i8* %39, align 8
  %42 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 5
  %43 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store %"class.gfx::DelegatedInkMetadata"* null, %"class.gfx::DelegatedInkMetadata"** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %47, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz18OutputSurfaceFrameD2Ev(%"class.viz::OutputSurfaceFrame"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %3 = load %"class.gfx::DelegatedInkMetadata"*, %"class.gfx::DelegatedInkMetadata"** %2, align 8
  store %"class.gfx::DelegatedInkMetadata"* null, %"class.gfx::DelegatedInkMetadata"** %2, align 8
  %4 = icmp eq %"class.gfx::DelegatedInkMetadata"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.gfx::DelegatedInkMetadata"* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #5
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %8, i64 0, i32 0, i32 0
  %10 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %9, align 8
  %11 = icmp eq %"class.ui::LatencyInfo"* %10, null
  br i1 %11, label %26, label %12

12:                                               ; preds = %7
  %13 = bitcast %"class.ui::LatencyInfo"* %10 to i8*
  %14 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 3, i32 0, i32 1
  %15 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %14, align 8
  %16 = icmp eq %"class.ui::LatencyInfo"* %15, %10
  br i1 %16, label %24, label %17

17:                                               ; preds = %12, %17
  %18 = phi %"class.ui::LatencyInfo"* [ %19, %17 ], [ %15, %12 ]
  %19 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %18, i64 -1
  tail call void @_ZN2ui11LatencyInfoD1Ev(%"class.ui::LatencyInfo"* %19) #4
  %20 = icmp eq %"class.ui::LatencyInfo"* %19, %10
  br i1 %20, label %21, label %17

21:                                               ; preds = %17
  %22 = bitcast %"class.std::__1::vector.1"* %8 to i8**
  %23 = load i8*, i8** %22, align 8
  br label %24

24:                                               ; preds = %21, %12
  %25 = phi i8* [ %23, %21 ], [ %13, %12 ]
  store %"class.ui::LatencyInfo"* %10, %"class.ui::LatencyInfo"** %14, align 8
  tail call void @_ZdlPv(i8* %25) #5
  br label %26

26:                                               ; preds = %7, %24
  %27 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 2, i32 0, i32 0
  %28 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %27, align 8
  %29 = icmp eq %"class.gfx::Rect"* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = ptrtoint %"class.gfx::Rect"* %28 to i64
  %32 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 2, i32 0, i32 1
  %33 = bitcast %"class.gfx::Rect"** %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = bitcast %"class.gfx::Rect"* %28 to i8*
  tail call void @_ZdlPv(i8* %34) #5
  br label %35

35:                                               ; preds = %26, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(96) %"class.viz::OutputSurfaceFrame"* @_ZN3viz18OutputSurfaceFrameaSEOS0_(%"class.viz::OutputSurfaceFrame"* returned, %"class.viz::OutputSurfaceFrame"* nocapture dereferenceable(96)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.viz::OutputSurfaceFrame"* %0 to i8*
  %4 = bitcast %"class.viz::OutputSurfaceFrame"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 28, i1 false)
  %5 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 2
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %8 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %7, align 8
  %9 = icmp eq %"class.gfx::Rect"* %8, null
  br i1 %9, label %16, label %10

10:                                               ; preds = %2
  %11 = ptrtoint %"class.gfx::Rect"* %8 to i64
  %12 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 2, i32 0, i32 1
  %13 = bitcast %"class.gfx::Rect"** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = bitcast %"class.gfx::Rect"* %8 to i8*
  tail call void @_ZdlPv(i8* %14) #5
  %15 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #4
  br label %16

16:                                               ; preds = %2, %10
  %17 = bitcast %"class.std::__1::vector"* %6 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.std::__1::vector"* %5 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 2, i32 0, i32 1
  %21 = bitcast %"class.gfx::Rect"** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 2, i32 0, i32 1
  %24 = bitcast %"class.gfx::Rect"** %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %26 = bitcast %"class.gfx::Rect"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %29 = bitcast %"class.gfx::Rect"** %28 to i64*
  store i64 %27, i64* %29, align 8
  %30 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 24, i1 false) #4
  %31 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 3
  %32 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 3
  %33 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %31, i64 0, i32 0, i32 0
  %34 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %33, align 8
  %35 = icmp eq %"class.ui::LatencyInfo"* %34, null
  br i1 %35, label %51, label %36

36:                                               ; preds = %16
  %37 = bitcast %"class.ui::LatencyInfo"* %34 to i8*
  %38 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 3, i32 0, i32 1
  %39 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %38, align 8
  %40 = icmp eq %"class.ui::LatencyInfo"* %39, %34
  br i1 %40, label %48, label %41

41:                                               ; preds = %36, %41
  %42 = phi %"class.ui::LatencyInfo"* [ %43, %41 ], [ %39, %36 ]
  %43 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %42, i64 -1
  tail call void @_ZN2ui11LatencyInfoD1Ev(%"class.ui::LatencyInfo"* %43) #4
  %44 = icmp eq %"class.ui::LatencyInfo"* %43, %34
  br i1 %44, label %45, label %41

45:                                               ; preds = %41
  %46 = bitcast %"class.std::__1::vector.1"* %31 to i8**
  %47 = load i8*, i8** %46, align 8
  br label %48

48:                                               ; preds = %45, %36
  %49 = phi i8* [ %47, %45 ], [ %37, %36 ]
  store %"class.ui::LatencyInfo"* %34, %"class.ui::LatencyInfo"** %38, align 8
  tail call void @_ZdlPv(i8* %49) #5
  %50 = bitcast %"class.std::__1::vector.1"* %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 24, i1 false) #4
  br label %51

51:                                               ; preds = %16, %48
  %52 = bitcast %"class.std::__1::vector.1"* %32 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %"class.std::__1::vector.1"* %31 to i64*
  store i64 %53, i64* %54, align 8
  %55 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 3, i32 0, i32 1
  %56 = bitcast %"class.ui::LatencyInfo"** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 3, i32 0, i32 1
  %59 = bitcast %"class.ui::LatencyInfo"** %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %61 = bitcast %"class.ui::LatencyInfo"** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %64 = bitcast %"class.ui::LatencyInfo"** %63 to i64*
  store i64 %62, i64* %64, align 8
  %65 = bitcast %"class.std::__1::vector.1"* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %65, i8 0, i64 24, i1 false) #4
  %66 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 4
  %67 = load i8, i8* %66, align 8, !range !2
  %68 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 4
  store i8 %67, i8* %68, align 8
  %69 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %0, i64 0, i32 5
  %70 = getelementptr inbounds %"class.viz::OutputSurfaceFrame", %"class.viz::OutputSurfaceFrame"* %1, i64 0, i32 5
  %71 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %70, i64 0, i32 0, i32 0, i32 0
  %72 = bitcast %"class.std::__1::unique_ptr"* %70 to i64*
  %73 = load i64, i64* %72, align 8
  store %"class.gfx::DelegatedInkMetadata"* null, %"class.gfx::DelegatedInkMetadata"** %71, align 8
  %74 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %69, i64 0, i32 0, i32 0, i32 0
  %75 = load %"class.gfx::DelegatedInkMetadata"*, %"class.gfx::DelegatedInkMetadata"** %74, align 8
  %76 = bitcast %"class.std::__1::unique_ptr"* %69 to i64*
  store i64 %73, i64* %76, align 8
  %77 = icmp eq %"class.gfx::DelegatedInkMetadata"* %75, null
  br i1 %77, label %80, label %78

78:                                               ; preds = %51
  %79 = bitcast %"class.gfx::DelegatedInkMetadata"* %75 to i8*
  tail call void @_ZdlPv(i8* %79) #5
  br label %80

80:                                               ; preds = %51, %78
  ret %"class.viz::OutputSurfaceFrame"* %0
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2ui11LatencyInfoD1Ev(%"class.ui::LatencyInfo"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
