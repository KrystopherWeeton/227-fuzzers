; ModuleID = '../../third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_bsd_addr.c'
source_filename = "../../third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_bsd_addr.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.malloc_type = type { %struct.malloc_type*, i64, i64, i64, i64, i64, i64, i8*, i8*, i8*, i8*, i32, i8*, %struct.witness*, i64, i32 }
%struct.witness = type opaque
%struct.iterator_control = type { %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_cond_t, i64, %struct.sctpiterators, %struct.sctp_iterator*, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%struct.sctpiterators = type { %struct.sctp_iterator*, %struct.sctp_iterator** }
%struct.sctp_iterator = type { %struct.anon.2, %struct.sctp_timer, %struct.sctp_inpcb*, %struct.sctp_tcb*, %struct.sctp_inpcb*, void (%struct.sctp_inpcb*, %struct.sctp_tcb*, i8*, i32)*, i32 (%struct.sctp_inpcb*, i8*, i32)*, i32 (%struct.sctp_inpcb*, i8*, i32)*, void (i8*, i32)*, i8*, i32, i32, i32, i32, i32, i8, i8 }
%struct.anon.2 = type { %struct.sctp_iterator*, %struct.sctp_iterator** }
%struct.sctp_timer = type { %struct.sctp_callout, i32, i8*, i8*, i8*, i8*, i32, i32 }
%struct.sctp_callout = type { %struct.anon.3, i32, i8*, void (i8*)*, i32 }
%struct.anon.3 = type { %struct.sctp_callout*, %struct.sctp_callout** }
%struct.sctp_tcb = type { %struct.socket*, %struct.sctp_inpcb*, %struct.anon.46, %struct.anon.47, %struct.anon.48, %struct.anon.49, %struct.sctp_block_entry*, %struct.sctp_association, i32, i32, i32, i32, i16, i16, %union.pthread_mutex_t, %union.pthread_mutex_t }
%struct.socket = type { i32, i16, i16, i16, i16, i32, i8*, i32, %struct.socket*, %struct.anon.8, %struct.anon.9, %struct.anon.10, i16, i16, i16, i16, %union.pthread_cond_t, i16, %struct.sigio*, i64, %struct.anon.11, %struct.sockbuf, %struct.sockbuf, void (%struct.socket*, i8*, i32)*, i8*, %struct.ucred*, %struct.label*, %struct.label*, i32, i8*, %struct.so_accf* }
%struct.anon.8 = type { %struct.socket*, %struct.socket** }
%struct.anon.9 = type { %struct.socket*, %struct.socket** }
%struct.anon.10 = type { %struct.socket*, %struct.socket** }
%struct.sigio = type opaque
%struct.anon.11 = type { %struct.aiocblist*, %struct.aiocblist** }
%struct.aiocblist = type opaque
%struct.sockbuf = type { %union.pthread_cond_t, %union.pthread_mutex_t, i16, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.mbuf = type { %struct.m_hdr, %union.anon.12 }
%struct.m_hdr = type { %struct.mbuf*, %struct.mbuf*, i8*, i32, i32, i16, [6 x i8] }
%union.anon.12 = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.pkthdr, %union.anon.15 }
%struct.pkthdr = type { %struct.ifnet*, i8*, i32, i32, i32, i16, i16, %struct.packet_tags }
%struct.ifnet = type opaque
%struct.packet_tags = type { %struct.m_tag* }
%struct.m_tag = type { %struct.anon.14, i16, i16, i32, void (%struct.m_tag*)* }
%struct.anon.14 = type { %struct.m_tag* }
%union.anon.15 = type { %struct.m_ext, [128 x i8] }
%struct.m_ext = type { i8*, void (i8*, i8*)*, i8*, i32, i32*, i32 }
%struct.ucred = type { i32, i32, i32 }
%struct.label = type opaque
%struct.so_accf = type { %struct.accept_filter*, i8*, i8* }
%struct.accept_filter = type opaque
%struct.anon.46 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.anon.47 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.anon.48 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.anon.49 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.sctp_block_entry = type { i32 }
%struct.sctp_association = type { i32, %struct.sctp_asconf_addrhead, %struct.timeval, %struct.timeval, %struct.timeval, %struct.timeval, %struct.sctp_nonpad_sndrcvinfo, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctpladdr, %struct.sctp_ifa*, %struct.sctp_nets*, %struct.sctpnetlisthead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.scheduling_data, %struct.sctp_iterator*, %struct.sctp_asconf_ackhead, %struct.sctp_tmit_chunk*, %struct.sctp_laddr*, %struct.sctp_stream_in*, %struct.sctp_stream_out*, i8*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_resethead, %struct.sctp_readhead, %struct.sctp_cc_functions, i32, %struct.sctp_ss_functions, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i32, i32, %struct.sctp_queued_to_read*, i32, i32, i32, [2 x i32], [2 x i32], [2 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, %struct.sctp_auth_chklist*, %struct.sctp_auth_chklist*, %struct.sctp_hmaclist*, %struct.sctp_hmaclist*, %struct.sctp_keyhead, %struct.sctp_authinformation, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i8, i8, i8, i32, i32, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %struct.sctp_scoping, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], i8, i8, i64, i32, i16, i32, i32, i32, i32, i32, i32, i32, i32, %struct.timeval, %struct.timeval, [4 x i64], [4 x i64] }
%struct.sctp_asconf_addrhead = type { %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** }
%struct.sctp_asconf_addr = type { %struct.anon.37, %struct.sctp_asconf_addr_param, %struct.sctp_ifa*, i8, i8 }
%struct.anon.37 = type { %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** }
%struct.sctp_asconf_addr_param = type { %struct.sctp_asconf_paramhdr, %struct.sctp_ipv6addr_param }
%struct.sctp_asconf_paramhdr = type { %struct.sctp_paramhdr, i32 }
%struct.sctp_paramhdr = type { i16, i16 }
%struct.sctp_ipv6addr_param = type { %struct.sctp_paramhdr, [16 x i8] }
%struct.sctp_nonpad_sndrcvinfo = type { i16, i16, i16, i32, i32, i32, i32, i32, i32, i16, i16 }
%struct.sctpladdr = type { %struct.sctp_laddr* }
%struct.sctp_ifa = type { %struct.anon.24, %struct.anon.25, %struct.sctp_ifn*, i8*, %union.sctp_sockstore, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.anon.24 = type { %struct.sctp_ifa*, %struct.sctp_ifa** }
%struct.anon.25 = type { %struct.sctp_ifa*, %struct.sctp_ifa** }
%struct.sctp_ifn = type { %struct.sctp_ifalist, %struct.sctp_vrf*, %struct.anon.27, %struct.anon.28, i8*, i32, i32, i32, i32, i32, i32, i32, i32, [16 x i8] }
%struct.sctp_ifalist = type { %struct.sctp_ifa* }
%struct.sctp_vrf = type { %struct.anon.26, %struct.sctp_ifalist*, %struct.sctp_ifnlist, i32, i32, i32, i32, i64, i32 }
%struct.anon.26 = type { %struct.sctp_vrf*, %struct.sctp_vrf** }
%struct.sctp_ifnlist = type { %struct.sctp_ifn* }
%struct.anon.27 = type { %struct.sctp_ifn*, %struct.sctp_ifn** }
%struct.anon.28 = type { %struct.sctp_ifn*, %struct.sctp_ifn** }
%union.sctp_sockstore = type { %struct.sockaddr_conn, [16 x i8] }
%struct.sockaddr_conn = type { i16, i16, i8* }
%struct.sctpnetlisthead = type { %struct.sctp_nets*, %struct.sctp_nets** }
%struct.sctpchunk_listhead = type { %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** }
%struct.scheduling_data = type { %struct.sctp_stream_out*, %struct.sctp_stream_out*, %union.anon.43 }
%union.anon.43 = type { %struct.sctpwheel_listhead }
%struct.sctpwheel_listhead = type { %struct.sctp_stream_out*, %struct.sctp_stream_out** }
%struct.sctp_asconf_ackhead = type { %struct.sctp_asconf_ack*, %struct.sctp_asconf_ack** }
%struct.sctp_asconf_ack = type { %struct.anon.44, i32, %struct.sctp_nets*, %struct.mbuf*, i16 }
%struct.anon.44 = type { %struct.sctp_asconf_ack*, %struct.sctp_asconf_ack** }
%struct.sctp_tmit_chunk = type { %union.anon.31, %struct.sctp_association*, %struct.timeval, %struct.mbuf*, %struct.mbuf*, %struct.sctp_nets*, %struct.anon.32, i32, i16, i16, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8 }
%union.anon.31 = type { %struct.sctp_data_chunkrec }
%struct.sctp_data_chunkrec = type { i32, i32, i16, i32, i32, i32, i32, %struct.timeval, i32, i8, i8, i8, i8, i8 }
%struct.anon.32 = type { %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** }
%struct.sctp_laddr = type { %struct.anon.35, %struct.sctp_ifa*, i32, %struct.timeval }
%struct.anon.35 = type { %struct.sctp_laddr*, %struct.sctp_laddr** }
%struct.sctp_stream_in = type { %struct.sctp_readhead, %struct.sctp_readhead, i32, i16, i8, i8 }
%struct.sctp_stream_out = type { %struct.sctp_streamhead, %union.scheduling_parameters, i32, [1 x i32], [1 x i32], i32, i32, i16, i8, i8 }
%struct.sctp_streamhead = type { %struct.sctp_stream_queue_pending*, %struct.sctp_stream_queue_pending** }
%struct.sctp_stream_queue_pending = type { %struct.mbuf*, %struct.mbuf*, %struct.timeval, %struct.sctp_nets*, %struct.anon.38, %struct.anon.39, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8 }
%struct.anon.38 = type { %struct.sctp_stream_queue_pending*, %struct.sctp_stream_queue_pending** }
%struct.anon.39 = type { %struct.sctp_stream_queue_pending*, %struct.sctp_stream_queue_pending** }
%union.scheduling_parameters = type { %struct.ss_prio }
%struct.ss_prio = type { %struct.anon.41, i16 }
%struct.anon.41 = type { %struct.sctp_stream_out*, %struct.sctp_stream_out** }
%struct.sctp_nets = type { %struct.anon.22, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_net_route, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, %struct.sctp_timer, %struct.timeval, %union.cc_control_data, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.timeval, i32, i32, i32, i16, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.anon.22 = type { %struct.sctp_nets*, %struct.sctp_nets** }
%struct.sctp_net_route = type { %struct.sctp_rtentry*, %union.sctp_sockstore, %struct.sctp_ifa* }
%struct.sctp_rtentry = type { %struct.ifnet*, %struct.ifaddr*, %struct.sctp_rt_metrics_lite, i64, %struct.mtx }
%struct.ifaddr = type { %struct.sockaddr, %union.anon.23, %struct.iface*, %struct.ifaddr* }
%struct.sockaddr = type { i16, [14 x i8] }
%union.anon.23 = type { %struct.sockaddr }
%struct.iface = type opaque
%struct.sctp_rt_metrics_lite = type { i32 }
%struct.mtx = type { i32 }
%union.cc_control_data = type { %struct.rtcc_cc }
%struct.rtcc_cc = type { %struct.timeval, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i8, i8, i8, i8, i8, i8 }
%struct.sctp_resethead = type { %struct.sctp_stream_reset_list*, %struct.sctp_stream_reset_list** }
%struct.sctp_stream_reset_list = type { %struct.anon.45, i32, i32, i32, [0 x i16] }
%struct.anon.45 = type { %struct.sctp_stream_reset_list*, %struct.sctp_stream_reset_list** }
%struct.sctp_readhead = type { %struct.sctp_queued_to_read*, %struct.sctp_queued_to_read** }
%struct.sctp_cc_functions = type { void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_association*, i32, i32, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_association*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, i32, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_pktdrop_chunk*, i32*, i32*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_nets*, %struct.sctp_tmit_chunk*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, i32 (%struct.sctp_tcb*, i32, %struct.sctp_cc_option*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.timeval*)* }
%struct.sctp_pktdrop_chunk = type { %struct.sctp_chunkhdr, i32, i32, i16, i16, [0 x i8] }
%struct.sctp_chunkhdr = type { i8, i8, i16 }
%struct.sctp_cc_option = type { i32, %struct.sctp_assoc_value }
%struct.sctp_assoc_value = type { i32, i32 }
%struct.sctp_ss_functions = type { void (%struct.sctp_tcb*, %struct.sctp_association*, i32)*, void (%struct.sctp_tcb*, %struct.sctp_association*, i32, i32)*, void (%struct.sctp_tcb*, %struct.sctp_stream_out*, %struct.sctp_stream_out*)*, void (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, %struct.sctp_stream_queue_pending*, i32)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*)*, void (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, %struct.sctp_stream_queue_pending*, i32)*, %struct.sctp_stream_out* (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_association*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_association*, %struct.sctp_stream_out*, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_association*)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, i16*)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, i16)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*)* }
%struct.sctp_queued_to_read = type { i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.sctp_nets*, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, %struct.sctp_tcb*, %struct.anon.29, %struct.anon.30, %struct.sctpchunk_listhead, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.anon.29 = type { %struct.sctp_queued_to_read*, %struct.sctp_queued_to_read** }
%struct.anon.30 = type { %struct.sctp_queued_to_read*, %struct.sctp_queued_to_read** }
%struct.sctp_auth_chklist = type { [256 x i8], i8 }
%struct.sctp_hmaclist = type { i16, i16, [0 x i16] }
%struct.sctp_keyhead = type { %struct.sctp_shared_key* }
%struct.sctp_shared_key = type { %struct.anon.36, %struct.sctp_key*, i32, i16, i8 }
%struct.anon.36 = type { %struct.sctp_shared_key*, %struct.sctp_shared_key** }
%struct.sctp_key = type { i32, [0 x i8] }
%struct.sctp_authinformation = type { %struct.sctp_key*, i32, %struct.sctp_key*, %struct.sctp_key*, %struct.sctp_key*, i16, i16, i16 }
%struct.sctp_scoping = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.timeval = type { i64, i64 }
%struct.sctp_inpcb = type { %union.anon.4, %struct.sctp_readhead, %struct.anon.33, %struct.anon.34, i32, %struct.sctpladdr, %struct.sctp_laddr*, %struct.socket*, i64, i32, i32, %struct.sctp_pcb, %struct.sctpasochead*, i64, %struct.sctpasochead, %struct.sctp_iterator*, i32, i32, i32, i32, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %struct.sctp_nonpad_sndrcvinfo, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, i32, i32, i16, i32, i32, i32, i32, %struct.sctpasochead*, i64, i32, i8*, i32 (%struct.socket*, %union.sctp_sockstore*, i8*, i64, %struct.sctp_rcvinfo*, i32, i8*)*, i32, i32 (%struct.socket*, i32, i8*)* }
%union.anon.4 = type { %struct.inpcb, [24 x i8] }
%struct.inpcb = type { %struct.anon.5, %struct.anon.6, i8*, %struct.inpcbinfo*, %struct.socket*, i32, i32, i8, i8, i8, i8, i32, [2 x i8*], %struct.in_conninfo, %struct.label*, %struct.inpcbpolicy*, %struct.anon.19, %struct.anon.20, %struct.anon.21, %struct.inpcbport*, %struct.mtx }
%struct.anon.5 = type { %struct.inpcb*, %struct.inpcb** }
%struct.anon.6 = type { %struct.inpcb*, %struct.inpcb** }
%struct.inpcbinfo = type { %struct.inpcbhead*, i32, %struct.inpcbhead*, i64, %struct.inpcbporthead*, i64, i16, i16, i16, %struct.uma_zone*, %struct.mtx, [2 x i8*] }
%struct.inpcbhead = type { %struct.inpcb* }
%struct.inpcbporthead = type { %struct.inpcbport* }
%struct.uma_zone = type opaque
%struct.in_conninfo = type { i8, i8, i16, %struct.in_endpoints }
%struct.in_endpoints = type { i16, i16, %union.anon.16, %union.anon.18 }
%union.anon.16 = type { %struct.in_addr_4in6 }
%struct.in_addr_4in6 = type { [3 x i32], %struct.in_addr }
%struct.in_addr = type { i32 }
%union.anon.18 = type { %struct.in_addr_4in6 }
%struct.inpcbpolicy = type opaque
%struct.anon.19 = type { i8, %struct.mbuf*, %struct.ip_moptions* }
%struct.ip_moptions = type opaque
%struct.anon.20 = type { %struct.mbuf*, %struct.ip6_pktopts*, %struct.icmp6_filter*, i32, i16 }
%struct.ip6_pktopts = type opaque
%struct.icmp6_filter = type opaque
%struct.anon.21 = type { %struct.inpcb*, %struct.inpcb** }
%struct.inpcbport = type { %struct.anon.7, %struct.inpcbhead, i16 }
%struct.anon.7 = type { %struct.inpcbport*, %struct.inpcbport** }
%struct.anon.33 = type { %struct.sctp_inpcb*, %struct.sctp_inpcb** }
%struct.anon.34 = type { %struct.sctp_inpcb*, %struct.sctp_inpcb** }
%struct.sctp_pcb = type { i32, [2 x [8 x i32]], i32, [7 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.sctp_keyhead, %struct.sctp_auth_chklist*, %struct.sctp_hmaclist*, i16, i32, i16, i16, i16, i16, i16, i16, i32, [20 x i8], [20 x i8], %struct.sctp_timer, i32, i32, i32, i32, i8, i32, i32, i32, i8, i8, i8, i16 }
%struct.sctpasochead = type { %struct.sctp_tcb* }
%struct.sctp_rcvinfo = type { i16, i16, i16, i32, i32, i32, i32, i32 }
%struct.sctp_base_info = type { %struct.sctp_epinfo, %struct.sctpstat, %struct.sctp_sysctl, i8, i8, %union.pthread_mutex_t, i64, i32, i32, i32, %union.pthread_mutexattr_t, i32 (i8*, i8*, i64, i8, i8)*, void (i8*, ...)*, i32 }
%struct.sctp_epinfo = type { %struct.sctpasochead*, i64, %struct.sctppcbhead*, i64, %struct.sctppcbhead*, i64, i32, %struct.sctp_vrflist*, i64, %struct.sctp_ifnlist*, i64, %struct.sctppcbhead, %struct.sctpladdr, i64, i64, i64, i64, i64, i64, i64, i64, i64, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [32 x %struct.sctpvtaghead], %struct.sctp_timer, %struct.calloutlist }
%struct.sctp_vrflist = type { %struct.sctp_vrf* }
%struct.sctppcbhead = type { %struct.sctp_inpcb* }
%struct.sctpvtaghead = type { %struct.sctp_tagblock* }
%struct.sctp_tagblock = type { %struct.anon.50, [15 x %struct.sctp_timewait] }
%struct.anon.50 = type { %struct.sctp_tagblock*, %struct.sctp_tagblock** }
%struct.sctp_timewait = type { i32, i32, i16, i16 }
%struct.calloutlist = type { %struct.sctp_callout*, %struct.sctp_callout** }
%struct.sctpstat = type { %struct.sctp_timeval, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [11 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [31 x i32] }
%struct.sctp_timeval = type { i32, i32 }
%struct.sctp_sysctl = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%union.pthread_mutexattr_t = type { i32 }

@.str = private unnamed_addr constant [9 x i8] c"sctp_map\00", align 1
@SCTP_M_MAP = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.1 = private unnamed_addr constant [10 x i8] c"sctp_stri\00", align 1
@SCTP_M_STRMI = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.2 = private unnamed_addr constant [10 x i8] c"sctp_stro\00", align 1
@SCTP_M_STRMO = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.3 = private unnamed_addr constant [10 x i8] c"sctp_aadr\00", align 1
@SCTP_M_ASC_ADDR = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.4 = private unnamed_addr constant [10 x i8] c"sctp_a_it\00", align 1
@SCTP_M_ASC_IT = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.5 = private unnamed_addr constant [10 x i8] c"sctp_atcl\00", align 1
@SCTP_M_AUTH_CL = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.6 = private unnamed_addr constant [10 x i8] c"sctp_atky\00", align 1
@SCTP_M_AUTH_KY = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.7 = private unnamed_addr constant [10 x i8] c"sctp_athm\00", align 1
@SCTP_M_AUTH_HL = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.8 = private unnamed_addr constant [10 x i8] c"sctp_athi\00", align 1
@SCTP_M_AUTH_IF = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.9 = private unnamed_addr constant [10 x i8] c"sctp_stre\00", align 1
@SCTP_M_STRESET = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.10 = private unnamed_addr constant [10 x i8] c"sctp_cmsg\00", align 1
@SCTP_M_CMSG = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.11 = private unnamed_addr constant [10 x i8] c"sctp_cpal\00", align 1
@SCTP_M_COPYAL = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.12 = private unnamed_addr constant [9 x i8] c"sctp_vrf\00", align 1
@SCTP_M_VRF = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.13 = private unnamed_addr constant [9 x i8] c"sctp_ifa\00", align 1
@SCTP_M_IFA = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.14 = private unnamed_addr constant [9 x i8] c"sctp_ifn\00", align 1
@SCTP_M_IFN = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.15 = private unnamed_addr constant [10 x i8] c"sctp_timw\00", align 1
@SCTP_M_TIMW = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.16 = private unnamed_addr constant [10 x i8] c"sctp_mvrf\00", align 1
@SCTP_M_MVRF = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.17 = private unnamed_addr constant [10 x i8] c"sctp_iter\00", align 1
@SCTP_M_ITER = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.18 = private unnamed_addr constant [11 x i8] c"sctp_socko\00", align 1
@SCTP_M_SOCKOPT = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@.str.19 = private unnamed_addr constant [11 x i8] c"sctp_mcore\00", align 1
@SCTP_M_MCORE = hidden local_unnamed_addr global [1 x %struct.malloc_type] [%struct.malloc_type { %struct.malloc_type* null, i64 0, i64 0, i64 0, i64 0, i64 0, i64 877983977, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19, i32 0, i32 0), i8* null, i8* null, i8* null, i32 0, i8* null, %struct.witness* null, i64 0, i32 0 }], align 16
@sctp_it_ctl = common hidden global %struct.iterator_control zeroinitializer, align 8
@system_base_info = external global %struct.sctp_base_info, align 8
@.str.20 = private unnamed_addr constant [46 x i8] c"ERROR: Creating sctp_iterator_thread failed.\0A\00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c"SCTP iterator\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_wakeup_iterator() local_unnamed_addr #0 {
  %1 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 2)) #4
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_cond_broadcast(%union.pthread_cond_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_startup_iterator() local_unnamed_addr #0 {
  %1 = load i64, i64* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 3), align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %3, label %13

3:                                                ; preds = %0
  %4 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 1), %union.pthread_mutexattr_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 10)) #4
  %5 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 0), %union.pthread_mutexattr_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 10)) #4
  store %struct.sctp_iterator* null, %struct.sctp_iterator** getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 4, i32 0), align 8
  store %struct.sctp_iterator** getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 4, i32 0), %struct.sctp_iterator*** getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 4, i32 1), align 8
  %6 = tail call i32 @sctp_userspace_thread_create(i64* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 3), i8* (i8*)* nonnull @sctp_iterator_thread) #4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %3
  %9 = load void (i8*, ...)*, void (i8*, ...)** getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 12), align 8
  %10 = icmp eq void (i8*, ...)* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %8
  tail call void (i8*, ...) %9(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.20, i64 0, i64 0)) #4
  br label %13

12:                                               ; preds = %3
  store i32 1, i32* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 8), align 4
  br label %13

13:                                               ; preds = %8, %0, %11, %12
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #1

declare i32 @sctp_userspace_thread_create(i64*, i8* (i8*)*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @sctp_iterator_thread(i8* nocapture readnone) #0 {
  tail call void @sctp_userspace_set_threadname(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i64 0, i64 0)) #4
  %2 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 0)) #4
  %3 = load i32, i32* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 7), align 4
  %4 = and i32 %3, 1
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %15

6:                                                ; preds = %1, %11
  %7 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 2), %union.pthread_mutex_t* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 0)) #4
  %8 = load i32, i32* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 7), align 4
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %15

11:                                               ; preds = %6
  tail call void @sctp_iterator_worker() #4
  %12 = load i32, i32* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 7), align 4
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %6, label %15

15:                                               ; preds = %11, %6, %1
  %16 = phi i32 [ %3, %1 ], [ %12, %11 ], [ %8, %6 ]
  %17 = load %struct.sctp_iterator*, %struct.sctp_iterator** getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 4, i32 0), align 8
  %18 = icmp eq %struct.sctp_iterator* %17, null
  br i1 %18, label %49, label %19

19:                                               ; preds = %15, %33
  %20 = phi %struct.sctp_iterator* [ %23, %33 ], [ %17, %15 ]
  %21 = bitcast %struct.sctp_iterator* %20 to i64*
  %22 = getelementptr inbounds %struct.sctp_iterator, %struct.sctp_iterator* %20, i64 0, i32 0, i32 0
  %23 = load %struct.sctp_iterator*, %struct.sctp_iterator** %22, align 8
  %24 = getelementptr inbounds %struct.sctp_iterator, %struct.sctp_iterator* %20, i64 0, i32 8
  %25 = load void (i8*, i32)*, void (i8*, i32)** %24, align 8
  %26 = icmp eq void (i8*, i32)* %25, null
  br i1 %26, label %33, label %27

27:                                               ; preds = %19
  %28 = getelementptr inbounds %struct.sctp_iterator, %struct.sctp_iterator* %20, i64 0, i32 9
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %struct.sctp_iterator, %struct.sctp_iterator* %20, i64 0, i32 10
  %31 = load i32, i32* %30, align 8
  tail call void %25(i8* %29, i32 %31) #4
  %32 = load %struct.sctp_iterator*, %struct.sctp_iterator** %22, align 8
  br label %33

33:                                               ; preds = %27, %19
  %34 = phi %struct.sctp_iterator* [ %23, %19 ], [ %32, %27 ]
  %35 = icmp eq %struct.sctp_iterator* %34, null
  %36 = getelementptr inbounds %struct.sctp_iterator, %struct.sctp_iterator* %20, i64 0, i32 0, i32 1
  %37 = bitcast %struct.sctp_iterator*** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.sctp_iterator, %struct.sctp_iterator* %34, i64 0, i32 0, i32 1
  %40 = bitcast %struct.sctp_iterator*** %39 to i64*
  %41 = select i1 %35, i64* bitcast (%struct.sctp_iterator*** getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 4, i32 1) to i64*), i64* %40
  store i64 %38, i64* %41, align 8
  %42 = load i64, i64* %21, align 8
  %43 = bitcast %struct.sctp_iterator*** %36 to i64**
  %44 = load i64*, i64** %43, align 8
  store i64 %42, i64* %44, align 8
  %45 = bitcast %struct.sctp_iterator* %20 to i8*
  tail call void @free(i8* %45) #4
  %46 = icmp eq %struct.sctp_iterator* %23, null
  br i1 %46, label %47, label %19

47:                                               ; preds = %33
  %48 = load i32, i32* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 7), align 4
  br label %49

49:                                               ; preds = %47, %15
  %50 = phi i32 [ %48, %47 ], [ %16, %15 ]
  %51 = or i32 %50, 2
  store i32 %51, i32* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 7), align 4
  %52 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 0)) #4
  %53 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* getelementptr inbounds (%struct.iterator_control, %struct.iterator_control* @sctp_it_ctl, i64 0, i32 2)) #4
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_init_vrf_list(i32) local_unnamed_addr #0 {
  %2 = icmp sgt i32 %0, 0
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = tail call %struct.sctp_vrf* @sctp_allocate_vrf(i32 %0) #4
  br label %5

5:                                                ; preds = %1, %3
  ret void
}

declare %struct.sctp_vrf* @sctp_allocate_vrf(i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @sctp_addr_change(%struct.ifaddr* nocapture, i32) local_unnamed_addr #3 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.mbuf* @sctp_get_mbuf_for_msg(i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %6 = trunc i32 %4 to i16
  %7 = icmp eq i32 %1, 0
  %8 = select i1 %7, i32 0, i32 2
  %9 = tail call %struct.mbuf* @m_getm2(%struct.mbuf* null, i32 %0, i32 %2, i16 signext %6, i32 %8, i32 %3) #4
  ret %struct.mbuf* %9
}

declare %struct.mbuf* @m_getm2(%struct.mbuf*, i32, i32, i16 signext, i32, i32) local_unnamed_addr #2

declare void @sctp_userspace_set_threadname(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) local_unnamed_addr #2

declare void @sctp_iterator_worker() local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
