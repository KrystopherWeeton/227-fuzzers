; ModuleID = '../../third_party/libgav1/src/src/dsp/obmc.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/obmc.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

@_ZN7libgav13dsp12_GLOBAL__N_19kObmcMaskE = internal unnamed_addr constant [62 x i8] c"-@'2;@$*059=@@\22%(+.1468:<=@@@@!#$&()+,-/02345789:;<<=>@@@@@@@@", align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp10ObmcInit_CEv() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #3
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 24, i64 0
  %3 = bitcast void (i8*, i64, i32, i32, i8*, i64)** %2 to <2 x void (i8*, i64, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_122OverlapBlendVertical_CIhEEvPvliiPKvl, void (i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_124OverlapBlendHorizontal_CIhEEvPvliiPKvl>, <2 x void (i8*, i64, i32, i32, i8*, i64)*>* %3, align 8
  %4 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #3
  %5 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %4, i64 0, i32 24, i64 0
  %6 = bitcast void (i8*, i64, i32, i32, i8*, i64)** %5 to <2 x void (i8*, i64, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_122OverlapBlendVertical_CItEEvPvliiPKvl, void (i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_124OverlapBlendHorizontal_CItEEvPvliiPKvl>, <2 x void (i8*, i64, i32, i32, i8*, i64)*>* %6, align 8
  ret void
}

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_122OverlapBlendVertical_CIhEEvPvliiPKvl(i8* nocapture, i64, i32, i32, i8* nocapture readonly, i64) #2 {
  %7 = sext i32 %3 to i64
  %8 = getelementptr inbounds [62 x i8], [62 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_19kObmcMaskE, i64 0, i64 %7
  %9 = getelementptr inbounds i8, i8* %8, i64 -2
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %29

11:                                               ; preds = %6
  %12 = icmp sgt i32 %2, 0
  %13 = zext i32 %3 to i64
  %14 = zext i32 %2 to i64
  %15 = and i64 %14, 4294967280
  %16 = add nsw i64 %15, -16
  %17 = lshr exact i64 %16, 4
  %18 = add nuw nsw i64 %17, 1
  %19 = icmp ult i32 %2, 16
  %20 = and i64 %14, 4294967280
  %21 = and i64 %18, 1
  %22 = icmp eq i64 %16, 0
  %23 = sub nuw nsw i64 %18, %21
  %24 = icmp eq i64 %21, 0
  %25 = icmp eq i64 %20, %14
  %26 = and i64 %14, 1
  %27 = icmp eq i64 %26, 0
  %28 = sub nsw i64 0, %14
  br label %30

29:                                               ; preds = %132, %6
  ret void

30:                                               ; preds = %132, %11
  %31 = phi i64 [ 0, %11 ], [ %135, %132 ]
  %32 = phi i8* [ %4, %11 ], [ %134, %132 ]
  %33 = phi i8* [ %0, %11 ], [ %133, %132 ]
  %34 = mul i64 %31, %1
  %35 = getelementptr i8, i8* %0, i64 %34
  %36 = add i64 %34, %14
  %37 = getelementptr i8, i8* %0, i64 %36
  %38 = mul i64 %31, %5
  %39 = getelementptr i8, i8* %4, i64 %38
  %40 = add i64 %38, %14
  %41 = getelementptr i8, i8* %4, i64 %40
  br i1 %12, label %42, label %132

42:                                               ; preds = %30
  %43 = getelementptr inbounds i8, i8* %9, i64 %31
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = sub nsw i32 64, %45
  br i1 %19, label %47, label %67

47:                                               ; preds = %131, %67, %42
  %48 = phi i64 [ 0, %67 ], [ 0, %42 ], [ %20, %131 ]
  %49 = xor i64 %48, -1
  br i1 %27, label %64, label %50

50:                                               ; preds = %47
  %51 = getelementptr inbounds i8, i8* %33, i64 %48
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = mul nuw nsw i32 %53, %45
  %55 = getelementptr inbounds i8, i8* %32, i64 %48
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = mul nsw i32 %46, %57
  %59 = add nuw nsw i32 %54, 32
  %60 = add nsw i32 %59, %58
  %61 = lshr i32 %60, 6
  %62 = trunc i32 %61 to i8
  store i8 %62, i8* %51, align 1
  %63 = or i64 %48, 1
  br label %64

64:                                               ; preds = %50, %47
  %65 = phi i64 [ %63, %50 ], [ %48, %47 ]
  %66 = icmp eq i64 %49, %28
  br i1 %66, label %132, label %137

67:                                               ; preds = %42
  %68 = icmp ult i8* %35, %41
  %69 = icmp ult i8* %39, %37
  %70 = and i1 %68, %69
  br i1 %70, label %47, label %71

71:                                               ; preds = %67
  %72 = insertelement <16 x i32> undef, i32 %45, i32 0
  %73 = shufflevector <16 x i32> %72, <16 x i32> undef, <16 x i32> zeroinitializer
  %74 = insertelement <16 x i32> undef, i32 %46, i32 0
  %75 = shufflevector <16 x i32> %74, <16 x i32> undef, <16 x i32> zeroinitializer
  br i1 %22, label %113, label %76

76:                                               ; preds = %71, %76
  %77 = phi i64 [ %110, %76 ], [ 0, %71 ]
  %78 = phi i64 [ %111, %76 ], [ %23, %71 ]
  %79 = getelementptr inbounds i8, i8* %33, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !2, !noalias !5
  %82 = zext <16 x i8> %81 to <16 x i32>
  %83 = mul nuw nsw <16 x i32> %73, %82
  %84 = getelementptr inbounds i8, i8* %32, i64 %77
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1, !alias.scope !5
  %87 = zext <16 x i8> %86 to <16 x i32>
  %88 = mul nsw <16 x i32> %75, %87
  %89 = add nuw nsw <16 x i32> %83, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %90 = add nsw <16 x i32> %89, %88
  %91 = lshr <16 x i32> %90, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %92 = trunc <16 x i32> %91 to <16 x i8>
  %93 = bitcast i8* %79 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %93, align 1, !alias.scope !2, !noalias !5
  %94 = or i64 %77, 16
  %95 = getelementptr inbounds i8, i8* %33, i64 %94
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1, !alias.scope !2, !noalias !5
  %98 = zext <16 x i8> %97 to <16 x i32>
  %99 = mul nuw nsw <16 x i32> %73, %98
  %100 = getelementptr inbounds i8, i8* %32, i64 %94
  %101 = bitcast i8* %100 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1, !alias.scope !5
  %103 = zext <16 x i8> %102 to <16 x i32>
  %104 = mul nsw <16 x i32> %75, %103
  %105 = add nuw nsw <16 x i32> %99, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %106 = add nsw <16 x i32> %105, %104
  %107 = lshr <16 x i32> %106, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %108 = trunc <16 x i32> %107 to <16 x i8>
  %109 = bitcast i8* %95 to <16 x i8>*
  store <16 x i8> %108, <16 x i8>* %109, align 1, !alias.scope !2, !noalias !5
  %110 = add i64 %77, 32
  %111 = add i64 %78, -2
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %76, !llvm.loop !7

113:                                              ; preds = %76, %71
  %114 = phi i64 [ 0, %71 ], [ %110, %76 ]
  br i1 %24, label %131, label %115

115:                                              ; preds = %113
  %116 = getelementptr inbounds i8, i8* %33, i64 %114
  %117 = bitcast i8* %116 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1, !alias.scope !2, !noalias !5
  %119 = zext <16 x i8> %118 to <16 x i32>
  %120 = mul nuw nsw <16 x i32> %73, %119
  %121 = getelementptr inbounds i8, i8* %32, i64 %114
  %122 = bitcast i8* %121 to <16 x i8>*
  %123 = load <16 x i8>, <16 x i8>* %122, align 1, !alias.scope !5
  %124 = zext <16 x i8> %123 to <16 x i32>
  %125 = mul nsw <16 x i32> %75, %124
  %126 = add nuw nsw <16 x i32> %120, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %127 = add nsw <16 x i32> %126, %125
  %128 = lshr <16 x i32> %127, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %129 = trunc <16 x i32> %128 to <16 x i8>
  %130 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %129, <16 x i8>* %130, align 1, !alias.scope !2, !noalias !5
  br label %131

131:                                              ; preds = %113, %115
  br i1 %25, label %132, label %47

132:                                              ; preds = %64, %137, %131, %30
  %133 = getelementptr inbounds i8, i8* %33, i64 %1
  %134 = getelementptr inbounds i8, i8* %32, i64 %5
  %135 = add nuw nsw i64 %31, 1
  %136 = icmp eq i64 %135, %13
  br i1 %136, label %29, label %30

137:                                              ; preds = %64, %137
  %138 = phi i64 [ %164, %137 ], [ %65, %64 ]
  %139 = getelementptr inbounds i8, i8* %33, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = mul nuw nsw i32 %141, %45
  %143 = getelementptr inbounds i8, i8* %32, i64 %138
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = mul nsw i32 %46, %145
  %147 = add nuw nsw i32 %142, 32
  %148 = add nsw i32 %147, %146
  %149 = lshr i32 %148, 6
  %150 = trunc i32 %149 to i8
  store i8 %150, i8* %139, align 1
  %151 = add nuw nsw i64 %138, 1
  %152 = getelementptr inbounds i8, i8* %33, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = mul nuw nsw i32 %154, %45
  %156 = getelementptr inbounds i8, i8* %32, i64 %151
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = mul nsw i32 %46, %158
  %160 = add nuw nsw i32 %155, 32
  %161 = add nsw i32 %160, %159
  %162 = lshr i32 %161, 6
  %163 = trunc i32 %162 to i8
  store i8 %163, i8* %152, align 1
  %164 = add nuw nsw i64 %138, 2
  %165 = icmp eq i64 %164, %14
  br i1 %165, label %132, label %137, !llvm.loop !9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_124OverlapBlendHorizontal_CIhEEvPvliiPKvl(i8* nocapture, i64, i32, i32, i8* nocapture readonly, i64) #2 {
  %7 = sext i32 %2 to i64
  %8 = getelementptr inbounds [62 x i8], [62 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_19kObmcMaskE, i64 0, i64 %7
  %9 = getelementptr inbounds i8, i8* %8, i64 -2
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %87

11:                                               ; preds = %6
  %12 = icmp sgt i32 %2, 0
  %13 = zext i32 %2 to i64
  %14 = icmp ult i32 %2, 16
  %15 = and i64 %13, 4294967280
  %16 = icmp eq i64 %15, %13
  %17 = and i64 %13, 1
  %18 = icmp eq i64 %17, 0
  %19 = sub nsw i64 0, %13
  br label %20

20:                                               ; preds = %88, %11
  %21 = phi i64 [ %93, %88 ], [ 0, %11 ]
  %22 = phi i8* [ %89, %88 ], [ %0, %11 ]
  %23 = phi i32 [ %91, %88 ], [ 0, %11 ]
  %24 = phi i8* [ %90, %88 ], [ %4, %11 ]
  %25 = mul i64 %21, %1
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = add i64 %25, %13
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = mul i64 %21, %5
  %30 = getelementptr i8, i8* %4, i64 %29
  %31 = add i64 %29, %13
  %32 = getelementptr i8, i8* %4, i64 %31
  br i1 %12, label %33, label %88

33:                                               ; preds = %20
  br i1 %14, label %34, label %58

34:                                               ; preds = %86, %58, %33
  %35 = phi i64 [ 0, %58 ], [ 0, %33 ], [ %15, %86 ]
  %36 = xor i64 %35, -1
  br i1 %18, label %55, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds i8, i8* %9, i64 %35
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds i8, i8* %22, i64 %35
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = mul nuw nsw i32 %43, %40
  %45 = sub nsw i32 64, %40
  %46 = getelementptr inbounds i8, i8* %24, i64 %35
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = mul nsw i32 %45, %48
  %50 = add nuw nsw i32 %44, 32
  %51 = add nsw i32 %50, %49
  %52 = lshr i32 %51, 6
  %53 = trunc i32 %52 to i8
  store i8 %53, i8* %41, align 1
  %54 = or i64 %35, 1
  br label %55

55:                                               ; preds = %37, %34
  %56 = phi i64 [ %54, %37 ], [ %35, %34 ]
  %57 = icmp eq i64 %36, %19
  br i1 %57, label %88, label %94

58:                                               ; preds = %33
  %59 = icmp ult i8* %26, %32
  %60 = icmp ult i8* %30, %28
  %61 = and i1 %59, %60
  br i1 %61, label %34, label %62

62:                                               ; preds = %58, %62
  %63 = phi i64 [ %84, %62 ], [ 0, %58 ]
  %64 = getelementptr inbounds i8, i8* %9, i64 %63
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1, !alias.scope !10
  %67 = zext <16 x i8> %66 to <16 x i32>
  %68 = getelementptr inbounds i8, i8* %22, i64 %63
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !13, !noalias !15
  %71 = zext <16 x i8> %70 to <16 x i32>
  %72 = mul nuw nsw <16 x i32> %71, %67
  %73 = sub nsw <16 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %67
  %74 = getelementptr inbounds i8, i8* %24, i64 %63
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1, !alias.scope !15
  %77 = zext <16 x i8> %76 to <16 x i32>
  %78 = mul nsw <16 x i32> %73, %77
  %79 = add nuw nsw <16 x i32> %72, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %80 = add nsw <16 x i32> %79, %78
  %81 = lshr <16 x i32> %80, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %82 = trunc <16 x i32> %81 to <16 x i8>
  %83 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %83, align 1, !alias.scope !13, !noalias !15
  %84 = add i64 %63, 16
  %85 = icmp eq i64 %84, %15
  br i1 %85, label %86, label %62, !llvm.loop !17

86:                                               ; preds = %62
  br i1 %16, label %88, label %34

87:                                               ; preds = %88, %6
  ret void

88:                                               ; preds = %55, %94, %86, %20
  %89 = getelementptr inbounds i8, i8* %22, i64 %1
  %90 = getelementptr inbounds i8, i8* %24, i64 %5
  %91 = add nuw nsw i32 %23, 1
  %92 = icmp eq i32 %91, %3
  %93 = add i64 %21, 1
  br i1 %92, label %87, label %20

94:                                               ; preds = %55, %94
  %95 = phi i64 [ %129, %94 ], [ %56, %55 ]
  %96 = getelementptr inbounds i8, i8* %9, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = getelementptr inbounds i8, i8* %22, i64 %95
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = mul nuw nsw i32 %101, %98
  %103 = sub nsw i32 64, %98
  %104 = getelementptr inbounds i8, i8* %24, i64 %95
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = mul nsw i32 %103, %106
  %108 = add nuw nsw i32 %102, 32
  %109 = add nsw i32 %108, %107
  %110 = lshr i32 %109, 6
  %111 = trunc i32 %110 to i8
  store i8 %111, i8* %99, align 1
  %112 = add nuw nsw i64 %95, 1
  %113 = getelementptr inbounds i8, i8* %9, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = getelementptr inbounds i8, i8* %22, i64 %112
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = mul nuw nsw i32 %118, %115
  %120 = sub nsw i32 64, %115
  %121 = getelementptr inbounds i8, i8* %24, i64 %112
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = mul nsw i32 %120, %123
  %125 = add nuw nsw i32 %119, 32
  %126 = add nsw i32 %125, %124
  %127 = lshr i32 %126, 6
  %128 = trunc i32 %127 to i8
  store i8 %128, i8* %116, align 1
  %129 = add nuw nsw i64 %95, 2
  %130 = icmp eq i64 %129, %13
  br i1 %130, label %88, label %94, !llvm.loop !18
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_122OverlapBlendVertical_CItEEvPvliiPKvl(i8* nocapture, i64, i32, i32, i8* nocapture readonly, i64) #2 {
  %7 = lshr i64 %1, 1
  %8 = lshr i64 %5, 1
  %9 = sext i32 %3 to i64
  %10 = getelementptr inbounds [62 x i8], [62 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_19kObmcMaskE, i64 0, i64 %9
  %11 = getelementptr inbounds i8, i8* %10, i64 -2
  %12 = icmp sgt i32 %3, 0
  br i1 %12, label %13, label %36

13:                                               ; preds = %6
  %14 = bitcast i8* %4 to i16*
  %15 = bitcast i8* %0 to i16*
  %16 = icmp sgt i32 %2, 0
  %17 = zext i32 %3 to i64
  %18 = zext i32 %2 to i64
  %19 = and i64 %1, -2
  %20 = shl nuw nsw i64 %18, 1
  %21 = and i64 %5, -2
  %22 = and i64 %18, 4294967288
  %23 = add nsw i64 %22, -8
  %24 = lshr exact i64 %23, 3
  %25 = add nuw nsw i64 %24, 1
  %26 = icmp ult i32 %2, 8
  %27 = and i64 %18, 4294967288
  %28 = and i64 %25, 1
  %29 = icmp eq i64 %23, 0
  %30 = sub nuw nsw i64 %25, %28
  %31 = icmp eq i64 %28, 0
  %32 = icmp eq i64 %27, %18
  %33 = and i64 %18, 1
  %34 = icmp eq i64 %33, 0
  %35 = sub nsw i64 0, %18
  br label %37

36:                                               ; preds = %139, %6
  ret void

37:                                               ; preds = %139, %13
  %38 = phi i64 [ 0, %13 ], [ %142, %139 ]
  %39 = phi i16* [ %14, %13 ], [ %141, %139 ]
  %40 = phi i16* [ %15, %13 ], [ %140, %139 ]
  %41 = mul i64 %19, %38
  %42 = getelementptr i8, i8* %0, i64 %41
  %43 = add i64 %20, %41
  %44 = getelementptr i8, i8* %0, i64 %43
  %45 = mul i64 %21, %38
  %46 = getelementptr i8, i8* %4, i64 %45
  %47 = add i64 %20, %45
  %48 = getelementptr i8, i8* %4, i64 %47
  br i1 %16, label %49, label %139

49:                                               ; preds = %37
  %50 = getelementptr inbounds i8, i8* %11, i64 %38
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = sub nsw i32 64, %52
  br i1 %26, label %54, label %74

54:                                               ; preds = %138, %74, %49
  %55 = phi i64 [ 0, %74 ], [ 0, %49 ], [ %27, %138 ]
  %56 = xor i64 %55, -1
  br i1 %34, label %71, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds i16, i16* %40, i64 %55
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nuw nsw i32 %60, %52
  %62 = getelementptr inbounds i16, i16* %39, i64 %55
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nsw i32 %53, %64
  %66 = add nuw nsw i32 %61, 32
  %67 = add nsw i32 %66, %65
  %68 = lshr i32 %67, 6
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %58, align 2
  %70 = or i64 %55, 1
  br label %71

71:                                               ; preds = %57, %54
  %72 = phi i64 [ %70, %57 ], [ %55, %54 ]
  %73 = icmp eq i64 %56, %35
  br i1 %73, label %139, label %144

74:                                               ; preds = %49
  %75 = icmp ult i8* %42, %48
  %76 = icmp ult i8* %46, %44
  %77 = and i1 %75, %76
  br i1 %77, label %54, label %78

78:                                               ; preds = %74
  %79 = insertelement <8 x i32> undef, i32 %52, i32 0
  %80 = shufflevector <8 x i32> %79, <8 x i32> undef, <8 x i32> zeroinitializer
  %81 = insertelement <8 x i32> undef, i32 %53, i32 0
  %82 = shufflevector <8 x i32> %81, <8 x i32> undef, <8 x i32> zeroinitializer
  br i1 %29, label %120, label %83

83:                                               ; preds = %78, %83
  %84 = phi i64 [ %117, %83 ], [ 0, %78 ]
  %85 = phi i64 [ %118, %83 ], [ %30, %78 ]
  %86 = getelementptr inbounds i16, i16* %40, i64 %84
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !19, !noalias !22
  %89 = zext <8 x i16> %88 to <8 x i32>
  %90 = mul nuw nsw <8 x i32> %80, %89
  %91 = getelementptr inbounds i16, i16* %39, i64 %84
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !22
  %94 = zext <8 x i16> %93 to <8 x i32>
  %95 = mul nsw <8 x i32> %82, %94
  %96 = add nuw nsw <8 x i32> %90, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %97 = add nsw <8 x i32> %96, %95
  %98 = lshr <8 x i32> %97, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %99 = trunc <8 x i32> %98 to <8 x i16>
  %100 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %100, align 2, !alias.scope !19, !noalias !22
  %101 = or i64 %84, 8
  %102 = getelementptr inbounds i16, i16* %40, i64 %101
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !19, !noalias !22
  %105 = zext <8 x i16> %104 to <8 x i32>
  %106 = mul nuw nsw <8 x i32> %80, %105
  %107 = getelementptr inbounds i16, i16* %39, i64 %101
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2, !alias.scope !22
  %110 = zext <8 x i16> %109 to <8 x i32>
  %111 = mul nsw <8 x i32> %82, %110
  %112 = add nuw nsw <8 x i32> %106, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %113 = add nsw <8 x i32> %112, %111
  %114 = lshr <8 x i32> %113, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %115 = trunc <8 x i32> %114 to <8 x i16>
  %116 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %116, align 2, !alias.scope !19, !noalias !22
  %117 = add i64 %84, 16
  %118 = add i64 %85, -2
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %83, !llvm.loop !24

120:                                              ; preds = %83, %78
  %121 = phi i64 [ 0, %78 ], [ %117, %83 ]
  br i1 %31, label %138, label %122

122:                                              ; preds = %120
  %123 = getelementptr inbounds i16, i16* %40, i64 %121
  %124 = bitcast i16* %123 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2, !alias.scope !19, !noalias !22
  %126 = zext <8 x i16> %125 to <8 x i32>
  %127 = mul nuw nsw <8 x i32> %80, %126
  %128 = getelementptr inbounds i16, i16* %39, i64 %121
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2, !alias.scope !22
  %131 = zext <8 x i16> %130 to <8 x i32>
  %132 = mul nsw <8 x i32> %82, %131
  %133 = add nuw nsw <8 x i32> %127, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %134 = add nsw <8 x i32> %133, %132
  %135 = lshr <8 x i32> %134, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %136 = trunc <8 x i32> %135 to <8 x i16>
  %137 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %137, align 2, !alias.scope !19, !noalias !22
  br label %138

138:                                              ; preds = %120, %122
  br i1 %32, label %139, label %54

139:                                              ; preds = %71, %144, %138, %37
  %140 = getelementptr inbounds i16, i16* %40, i64 %7
  %141 = getelementptr inbounds i16, i16* %39, i64 %8
  %142 = add nuw nsw i64 %38, 1
  %143 = icmp eq i64 %142, %17
  br i1 %143, label %36, label %37

144:                                              ; preds = %71, %144
  %145 = phi i64 [ %171, %144 ], [ %72, %71 ]
  %146 = getelementptr inbounds i16, i16* %40, i64 %145
  %147 = load i16, i16* %146, align 2
  %148 = zext i16 %147 to i32
  %149 = mul nuw nsw i32 %148, %52
  %150 = getelementptr inbounds i16, i16* %39, i64 %145
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nsw i32 %53, %152
  %154 = add nuw nsw i32 %149, 32
  %155 = add nsw i32 %154, %153
  %156 = lshr i32 %155, 6
  %157 = trunc i32 %156 to i16
  store i16 %157, i16* %146, align 2
  %158 = add nuw nsw i64 %145, 1
  %159 = getelementptr inbounds i16, i16* %40, i64 %158
  %160 = load i16, i16* %159, align 2
  %161 = zext i16 %160 to i32
  %162 = mul nuw nsw i32 %161, %52
  %163 = getelementptr inbounds i16, i16* %39, i64 %158
  %164 = load i16, i16* %163, align 2
  %165 = zext i16 %164 to i32
  %166 = mul nsw i32 %53, %165
  %167 = add nuw nsw i32 %162, 32
  %168 = add nsw i32 %167, %166
  %169 = lshr i32 %168, 6
  %170 = trunc i32 %169 to i16
  store i16 %170, i16* %159, align 2
  %171 = add nuw nsw i64 %145, 2
  %172 = icmp eq i64 %171, %18
  br i1 %172, label %139, label %144, !llvm.loop !25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_124OverlapBlendHorizontal_CItEEvPvliiPKvl(i8* nocapture, i64, i32, i32, i8* nocapture readonly, i64) #2 {
  %7 = lshr i64 %1, 1
  %8 = lshr i64 %5, 1
  %9 = sext i32 %2 to i64
  %10 = getelementptr inbounds [62 x i8], [62 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_19kObmcMaskE, i64 0, i64 %9
  %11 = getelementptr inbounds i8, i8* %10, i64 -2
  %12 = icmp sgt i32 %3, 0
  br i1 %12, label %13, label %94

13:                                               ; preds = %6
  %14 = bitcast i8* %4 to i16*
  %15 = bitcast i8* %0 to i16*
  %16 = icmp sgt i32 %2, 0
  %17 = zext i32 %2 to i64
  %18 = and i64 %1, -2
  %19 = shl nuw nsw i64 %17, 1
  %20 = and i64 %5, -2
  %21 = icmp ult i32 %2, 8
  %22 = and i64 %17, 4294967288
  %23 = icmp eq i64 %22, %17
  %24 = and i64 %17, 1
  %25 = icmp eq i64 %24, 0
  %26 = sub nsw i64 0, %17
  br label %27

27:                                               ; preds = %95, %13
  %28 = phi i64 [ %100, %95 ], [ 0, %13 ]
  %29 = phi i16* [ %96, %95 ], [ %15, %13 ]
  %30 = phi i32 [ %98, %95 ], [ 0, %13 ]
  %31 = phi i16* [ %97, %95 ], [ %14, %13 ]
  %32 = mul i64 %18, %28
  %33 = getelementptr i8, i8* %0, i64 %32
  %34 = add i64 %19, %32
  %35 = getelementptr i8, i8* %0, i64 %34
  %36 = mul i64 %20, %28
  %37 = getelementptr i8, i8* %4, i64 %36
  %38 = add i64 %19, %36
  %39 = getelementptr i8, i8* %4, i64 %38
  br i1 %16, label %40, label %95

40:                                               ; preds = %27
  br i1 %21, label %41, label %65

41:                                               ; preds = %93, %65, %40
  %42 = phi i64 [ 0, %65 ], [ 0, %40 ], [ %22, %93 ]
  %43 = xor i64 %42, -1
  br i1 %25, label %62, label %44

44:                                               ; preds = %41
  %45 = getelementptr inbounds i8, i8* %11, i64 %42
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds i16, i16* %29, i64 %42
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = mul nuw nsw i32 %50, %47
  %52 = sub nsw i32 64, %47
  %53 = getelementptr inbounds i16, i16* %31, i64 %42
  %54 = load i16, i16* %53, align 2
  %55 = zext i16 %54 to i32
  %56 = mul nsw i32 %52, %55
  %57 = add nuw nsw i32 %51, 32
  %58 = add nsw i32 %57, %56
  %59 = lshr i32 %58, 6
  %60 = trunc i32 %59 to i16
  store i16 %60, i16* %48, align 2
  %61 = or i64 %42, 1
  br label %62

62:                                               ; preds = %44, %41
  %63 = phi i64 [ %61, %44 ], [ %42, %41 ]
  %64 = icmp eq i64 %43, %26
  br i1 %64, label %95, label %101

65:                                               ; preds = %40
  %66 = icmp ult i8* %33, %39
  %67 = icmp ult i8* %37, %35
  %68 = and i1 %66, %67
  br i1 %68, label %41, label %69

69:                                               ; preds = %65, %69
  %70 = phi i64 [ %91, %69 ], [ 0, %65 ]
  %71 = getelementptr inbounds i8, i8* %11, i64 %70
  %72 = bitcast i8* %71 to <8 x i8>*
  %73 = load <8 x i8>, <8 x i8>* %72, align 1, !alias.scope !26
  %74 = zext <8 x i8> %73 to <8 x i32>
  %75 = getelementptr inbounds i16, i16* %29, i64 %70
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !alias.scope !29, !noalias !31
  %78 = zext <8 x i16> %77 to <8 x i32>
  %79 = mul nuw nsw <8 x i32> %78, %74
  %80 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %74
  %81 = getelementptr inbounds i16, i16* %31, i64 %70
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !31
  %84 = zext <8 x i16> %83 to <8 x i32>
  %85 = mul nsw <8 x i32> %80, %84
  %86 = add nuw nsw <8 x i32> %79, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %87 = add nsw <8 x i32> %86, %85
  %88 = lshr <8 x i32> %87, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %90, align 2, !alias.scope !29, !noalias !31
  %91 = add i64 %70, 8
  %92 = icmp eq i64 %91, %22
  br i1 %92, label %93, label %69, !llvm.loop !33

93:                                               ; preds = %69
  br i1 %23, label %95, label %41

94:                                               ; preds = %95, %6
  ret void

95:                                               ; preds = %62, %101, %93, %27
  %96 = getelementptr inbounds i16, i16* %29, i64 %7
  %97 = getelementptr inbounds i16, i16* %31, i64 %8
  %98 = add nuw nsw i32 %30, 1
  %99 = icmp eq i32 %98, %3
  %100 = add i64 %28, 1
  br i1 %99, label %94, label %27

101:                                              ; preds = %62, %101
  %102 = phi i64 [ %136, %101 ], [ %63, %62 ]
  %103 = getelementptr inbounds i8, i8* %11, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = getelementptr inbounds i16, i16* %29, i64 %102
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %108, %105
  %110 = sub nsw i32 64, %105
  %111 = getelementptr inbounds i16, i16* %31, i64 %102
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nsw i32 %110, %113
  %115 = add nuw nsw i32 %109, 32
  %116 = add nsw i32 %115, %114
  %117 = lshr i32 %116, 6
  %118 = trunc i32 %117 to i16
  store i16 %118, i16* %106, align 2
  %119 = add nuw nsw i64 %102, 1
  %120 = getelementptr inbounds i8, i8* %11, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = getelementptr inbounds i16, i16* %29, i64 %119
  %124 = load i16, i16* %123, align 2
  %125 = zext i16 %124 to i32
  %126 = mul nuw nsw i32 %125, %122
  %127 = sub nsw i32 64, %122
  %128 = getelementptr inbounds i16, i16* %31, i64 %119
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = mul nsw i32 %127, %130
  %132 = add nuw nsw i32 %126, 32
  %133 = add nsw i32 %132, %131
  %134 = lshr i32 %133, 6
  %135 = trunc i32 %134 to i16
  store i16 %135, i16* %123, align 2
  %136 = add nuw nsw i64 %102, 2
  %137 = icmp eq i64 %136, %17
  br i1 %137, label %95, label %101, !llvm.loop !34
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = !{!16}
!16 = distinct !{!16, !12}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !8}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !8}
!25 = distinct !{!25, !8}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = !{!30}
!30 = distinct !{!30, !28}
!31 = !{!32}
!32 = distinct !{!32, !28}
!33 = distinct !{!33, !8}
!34 = distinct !{!34, !8}
