; ModuleID = '../../third_party/abseil-cpp/absl/strings/ascii.cc'
source_filename = "../../third_party/abseil-cpp/absl/strings/ascii.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }

@_ZN4absl14ascii_internal13kPropertyBitsE = hidden local_unnamed_addr constant <{ [128 x i8], [128 x i8] }> <{ [128 x i8] c"@@@@@@@@@hHHHH@@@@@@@@@@@@@@@@@@(\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\84\84\84\84\84\84\84\84\84\84\10\10\10\10\10\10\10\85\85\85\85\85\85\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\10\10\10\10\10\10\85\85\85\85\85\85\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\10\10\10\10@", [128 x i8] zeroinitializer }>, align 16
@_ZN4absl14ascii_internal8kToLowerE = hidden local_unnamed_addr constant [256 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\1D\1E\1F !\22#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\5C]^_`abcdefghijklmnopqrstuvwxyz{|}~\7F\80\81\82\83\84\85\86\87\88\89\8A\8B\8C\8D\8E\8F\90\91\92\93\94\95\96\97\98\99\9A\9B\9C\9D\9E\9F\A0\A1\A2\A3\A4\A5\A6\A7\A8\A9\AA\AB\AC\AD\AE\AF\B0\B1\B2\B3\B4\B5\B6\B7\B8\B9\BA\BB\BC\BD\BE\BF\C0\C1\C2\C3\C4\C5\C6\C7\C8\C9\CA\CB\CC\CD\CE\CF\D0\D1\D2\D3\D4\D5\D6\D7\D8\D9\DA\DB\DC\DD\DE\DF\E0\E1\E2\E3\E4\E5\E6\E7\E8\E9\EA\EB\EC\ED\EE\EF\F0\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA\FB\FC\FD\FE\FF", align 16
@_ZN4absl14ascii_internal8kToUpperE = hidden local_unnamed_addr constant [256 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\1D\1E\1F !\22#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\5C]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~\7F\80\81\82\83\84\85\86\87\88\89\8A\8B\8C\8D\8E\8F\90\91\92\93\94\95\96\97\98\99\9A\9B\9C\9D\9E\9F\A0\A1\A2\A3\A4\A5\A6\A7\A8\A9\AA\AB\AC\AD\AE\AF\B0\B1\B2\B3\B4\B5\B6\B7\B8\B9\BA\BB\BC\BD\BE\BF\C0\C1\C2\C3\C4\C5\C6\C7\C8\C9\CA\CB\CC\CD\CE\CF\D0\D1\D2\D3\D4\D5\D6\D7\D8\D9\DA\DB\DC\DD\DE\DF\E0\E1\E2\E3\E4\E5\E6\E7\E8\E9\EA\EB\EC\ED\EE\EF\F0\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA\FB\FC\FD\FE\FF", align 16
@.str = private unnamed_addr constant [26 x i8] c"absl::string_view::substr\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl15AsciiStrToLowerEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %2 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %3 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %2, i64 0, i32 1, i32 0
  %4 = load i8, i8* %3, align 1
  %5 = icmp slt i8 %4, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  br label %14

11:                                               ; preds = %1
  %12 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %13 = zext i8 %4 to i64
  br label %14

14:                                               ; preds = %6, %11
  %15 = phi i8* [ %8, %6 ], [ %12, %11 ]
  %16 = phi i64 [ %10, %6 ], [ %13, %11 ]
  %17 = getelementptr inbounds i8, i8* %15, i64 %16
  %18 = icmp eq i64 %16, 0
  br i1 %18, label %36, label %19

19:                                               ; preds = %14
  %20 = add i64 %16, -1
  %21 = and i64 %16, 7
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %33, label %23

23:                                               ; preds = %19, %23
  %24 = phi i8* [ %30, %23 ], [ %15, %19 ]
  %25 = phi i64 [ %31, %23 ], [ %21, %19 ]
  %26 = load i8, i8* %24, align 1
  %27 = zext i8 %26 to i64
  %28 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToLowerE, i64 0, i64 %27
  %29 = load i8, i8* %28, align 1
  store i8 %29, i8* %24, align 1
  %30 = getelementptr inbounds i8, i8* %24, i64 1
  %31 = add i64 %25, -1
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %23, !llvm.loop !2

33:                                               ; preds = %23, %19
  %34 = phi i8* [ %15, %19 ], [ %30, %23 ]
  %35 = icmp ult i64 %20, 7
  br i1 %35, label %36, label %37

36:                                               ; preds = %33, %37, %14
  ret void

37:                                               ; preds = %33, %37
  %38 = phi i8* [ %78, %37 ], [ %34, %33 ]
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToLowerE, i64 0, i64 %40
  %42 = load i8, i8* %41, align 1
  store i8 %42, i8* %38, align 1
  %43 = getelementptr inbounds i8, i8* %38, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToLowerE, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  store i8 %47, i8* %43, align 1
  %48 = getelementptr inbounds i8, i8* %38, i64 2
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i64
  %51 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToLowerE, i64 0, i64 %50
  %52 = load i8, i8* %51, align 1
  store i8 %52, i8* %48, align 1
  %53 = getelementptr inbounds i8, i8* %38, i64 3
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToLowerE, i64 0, i64 %55
  %57 = load i8, i8* %56, align 1
  store i8 %57, i8* %53, align 1
  %58 = getelementptr inbounds i8, i8* %38, i64 4
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i64
  %61 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToLowerE, i64 0, i64 %60
  %62 = load i8, i8* %61, align 1
  store i8 %62, i8* %58, align 1
  %63 = getelementptr inbounds i8, i8* %38, i64 5
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i64
  %66 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToLowerE, i64 0, i64 %65
  %67 = load i8, i8* %66, align 1
  store i8 %67, i8* %63, align 1
  %68 = getelementptr inbounds i8, i8* %38, i64 6
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToLowerE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  store i8 %72, i8* %68, align 1
  %73 = getelementptr inbounds i8, i8* %38, i64 7
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i64
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToLowerE, i64 0, i64 %75
  %77 = load i8, i8* %76, align 1
  store i8 %77, i8* %73, align 1
  %78 = getelementptr inbounds i8, i8* %38, i64 8
  %79 = icmp eq i8* %78, %17
  br i1 %79, label %36, label %37
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl15AsciiStrToUpperEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %2 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %3 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %2, i64 0, i32 1, i32 0
  %4 = load i8, i8* %3, align 1
  %5 = icmp slt i8 %4, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  br label %14

11:                                               ; preds = %1
  %12 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %13 = zext i8 %4 to i64
  br label %14

14:                                               ; preds = %6, %11
  %15 = phi i8* [ %8, %6 ], [ %12, %11 ]
  %16 = phi i64 [ %10, %6 ], [ %13, %11 ]
  %17 = getelementptr inbounds i8, i8* %15, i64 %16
  %18 = icmp eq i64 %16, 0
  br i1 %18, label %36, label %19

19:                                               ; preds = %14
  %20 = add i64 %16, -1
  %21 = and i64 %16, 7
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %33, label %23

23:                                               ; preds = %19, %23
  %24 = phi i8* [ %30, %23 ], [ %15, %19 ]
  %25 = phi i64 [ %31, %23 ], [ %21, %19 ]
  %26 = load i8, i8* %24, align 1
  %27 = zext i8 %26 to i64
  %28 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToUpperE, i64 0, i64 %27
  %29 = load i8, i8* %28, align 1
  store i8 %29, i8* %24, align 1
  %30 = getelementptr inbounds i8, i8* %24, i64 1
  %31 = add i64 %25, -1
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %23, !llvm.loop !4

33:                                               ; preds = %23, %19
  %34 = phi i8* [ %15, %19 ], [ %30, %23 ]
  %35 = icmp ult i64 %20, 7
  br i1 %35, label %36, label %37

36:                                               ; preds = %33, %37, %14
  ret void

37:                                               ; preds = %33, %37
  %38 = phi i8* [ %78, %37 ], [ %34, %33 ]
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToUpperE, i64 0, i64 %40
  %42 = load i8, i8* %41, align 1
  store i8 %42, i8* %38, align 1
  %43 = getelementptr inbounds i8, i8* %38, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToUpperE, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  store i8 %47, i8* %43, align 1
  %48 = getelementptr inbounds i8, i8* %38, i64 2
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i64
  %51 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToUpperE, i64 0, i64 %50
  %52 = load i8, i8* %51, align 1
  store i8 %52, i8* %48, align 1
  %53 = getelementptr inbounds i8, i8* %38, i64 3
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToUpperE, i64 0, i64 %55
  %57 = load i8, i8* %56, align 1
  store i8 %57, i8* %53, align 1
  %58 = getelementptr inbounds i8, i8* %38, i64 4
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i64
  %61 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToUpperE, i64 0, i64 %60
  %62 = load i8, i8* %61, align 1
  store i8 %62, i8* %58, align 1
  %63 = getelementptr inbounds i8, i8* %38, i64 5
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i64
  %66 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToUpperE, i64 0, i64 %65
  %67 = load i8, i8* %66, align 1
  store i8 %67, i8* %63, align 1
  %68 = getelementptr inbounds i8, i8* %38, i64 6
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToUpperE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  store i8 %72, i8* %68, align 1
  %73 = getelementptr inbounds i8, i8* %38, i64 7
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i64
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal8kToUpperE, i64 0, i64 %75
  %77 = load i8, i8* %76, align 1
  store i8 %77, i8* %73, align 1
  %78 = getelementptr inbounds i8, i8* %38, i64 8
  %79 = icmp eq i8* %78, %17
  br i1 %79, label %36, label %37
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl26RemoveExtraAsciiWhitespaceEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %2 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %3 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %2, i64 0, i32 1, i32 0
  %4 = load i8, i8* %3, align 1
  %5 = icmp slt i8 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = zext i8 %4 to i64
  %8 = ptrtoint %"class.std::__1::basic_string"* %0 to i64
  br label %16

9:                                                ; preds = %1
  %10 = bitcast %"class.std::__1::basic_string"* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp sgt i64 %13, -1
  br i1 %14, label %16, label %15, !prof !5

15:                                               ; preds = %9
  tail call void @llvm.trap() #3
  unreachable

16:                                               ; preds = %6, %9
  %17 = phi i64 [ %11, %9 ], [ %8, %6 ]
  %18 = phi i64 [ %13, %9 ], [ %7, %6 ]
  %19 = inttoptr i64 %17 to i8*
  %20 = getelementptr inbounds i8, i8* %19, i64 %18
  %21 = icmp eq i64 %18, 0
  br i1 %21, label %33, label %22

22:                                               ; preds = %16, %30
  %23 = phi i8* [ %31, %30 ], [ %19, %16 ]
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN4absl14ascii_internal13kPropertyBitsE to [256 x i8]*), i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = and i8 %27, 8
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %22
  %31 = getelementptr inbounds i8, i8* %23, i64 1
  %32 = icmp eq i8* %31, %20
  br i1 %32, label %33, label %22

33:                                               ; preds = %30, %22, %16
  %34 = phi i8* [ %19, %16 ], [ %23, %22 ], [ %20, %30 ]
  %35 = ptrtoint i8* %34 to i64
  %36 = sub i64 %35, %17
  %37 = icmp ult i64 %18, %36
  br i1 %37, label %38, label %39, !prof !6

38:                                               ; preds = %33
  tail call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #4
  unreachable

39:                                               ; preds = %33
  %40 = sub i64 %18, %36
  %41 = icmp sgt i64 %40, -1
  br i1 %41, label %43, label %42, !prof !5

42:                                               ; preds = %39
  tail call void @llvm.trap() #3
  unreachable

43:                                               ; preds = %39
  %44 = getelementptr inbounds i8, i8* %34, i64 %40
  br label %45

45:                                               ; preds = %48, %43
  %46 = phi i8* [ %44, %43 ], [ %49, %48 ]
  %47 = icmp eq i8* %46, %34
  br i1 %47, label %58, label %48

48:                                               ; preds = %45
  %49 = getelementptr inbounds i8, i8* %46, i64 -1
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i64
  %52 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN4absl14ascii_internal13kPropertyBitsE to [256 x i8]*), i64 0, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = and i8 %53, 8
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %45

56:                                               ; preds = %48
  %57 = ptrtoint i8* %46 to i64
  br label %58

58:                                               ; preds = %45, %56
  %59 = phi i64 [ %57, %56 ], [ %35, %45 ]
  %60 = sub i64 %59, %35
  %61 = icmp ult i64 %60, %40
  %62 = select i1 %61, i64 %60, i64 %40
  %63 = icmp sgt i64 %62, -1
  br i1 %63, label %65, label %64, !prof !5

64:                                               ; preds = %58
  tail call void @llvm.trap() #3
  unreachable

65:                                               ; preds = %58
  %66 = icmp eq i64 %62, 0
  br i1 %66, label %67, label %74

67:                                               ; preds = %65
  br i1 %5, label %68, label %72

68:                                               ; preds = %67
  %69 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  store i8 0, i8* %70, align 1
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %71, align 8
  br label %130

72:                                               ; preds = %67
  %73 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  store i8 0, i8* %73, align 1
  store i8 0, i8* %3, align 1
  br label %130

74:                                               ; preds = %65
  %75 = getelementptr inbounds i8, i8* %34, i64 %62
  br i1 %5, label %76, label %79

76:                                               ; preds = %74
  %77 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  br label %81

79:                                               ; preds = %74
  %80 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %81

81:                                               ; preds = %79, %76
  %82 = phi i8* [ %78, %76 ], [ %80, %79 ]
  br label %83

83:                                               ; preds = %81, %83
  %84 = phi i1 [ %92, %83 ], [ false, %81 ]
  %85 = phi i8* [ %96, %83 ], [ %82, %81 ]
  %86 = phi i8* [ %97, %83 ], [ %34, %81 ]
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [128 x i8], [128 x i8] }>* @_ZN4absl14ascii_internal13kPropertyBitsE to [256 x i8]*), i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = and i8 %90, 8
  %92 = icmp ne i8 %91, 0
  %93 = getelementptr inbounds i8, i8* %85, i64 -1
  %94 = and i1 %84, %92
  %95 = select i1 %94, i8* %93, i8* %85
  store i8 %87, i8* %95, align 1
  %96 = getelementptr inbounds i8, i8* %95, i64 1
  %97 = getelementptr inbounds i8, i8* %86, i64 1
  %98 = icmp ult i8* %97, %75
  br i1 %98, label %83, label %99

99:                                               ; preds = %83
  %100 = load i8, i8* %3, align 1
  %101 = icmp slt i8 %100, 0
  br i1 %101, label %102, label %109

102:                                              ; preds = %99
  %103 = bitcast %"class.std::__1::basic_string"* %0 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = ptrtoint i8* %96 to i64
  %106 = sub i64 %105, %104
  %107 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %108 = load i64, i64* %107, align 8
  br label %114

109:                                              ; preds = %99
  %110 = ptrtoint i8* %96 to i64
  %111 = ptrtoint %"class.std::__1::basic_string"* %0 to i64
  %112 = sub i64 %110, %111
  %113 = zext i8 %100 to i64
  br label %114

114:                                              ; preds = %109, %102
  %115 = phi i64 [ %106, %102 ], [ %112, %109 ]
  %116 = phi i64 [ %108, %102 ], [ %113, %109 ]
  %117 = icmp ult i64 %116, %115
  br i1 %117, label %118, label %120

118:                                              ; preds = %114
  %119 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* %119) #4
  unreachable

120:                                              ; preds = %114
  br i1 %101, label %121, label %126

121:                                              ; preds = %120
  %122 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  %124 = getelementptr inbounds i8, i8* %123, i64 %115
  store i8 0, i8* %124, align 1
  %125 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %115, i64* %125, align 8
  br label %130

126:                                              ; preds = %120
  %127 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %128 = getelementptr inbounds i8, i8* %127, i64 %115
  store i8 0, i8* %128, align 1
  %129 = trunc i64 %115 to i8
  store i8 %129, i8* %3, align 1
  br label %130

130:                                              ; preds = %126, %121, %72, %68
  ret void
}

; Function Attrs: noreturn
declare void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8*) local_unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { nounwind }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = !{!"branch_weights", i32 2000, i32 1}
!6 = !{!"branch_weights", i32 1, i32 2000}
