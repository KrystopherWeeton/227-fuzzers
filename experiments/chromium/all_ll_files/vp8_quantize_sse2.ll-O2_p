; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/x86/vp8_quantize_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/x86/vp8_quantize_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }

@vp8_default_inv_zig_zag = external local_unnamed_addr constant [16 x i16], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_regular_quantize_b_sse2(%struct.block* nocapture readonly, %struct.blockd* nocapture readonly) local_unnamed_addr #0 {
  %3 = alloca <2 x i64>, align 16
  %4 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 0
  %5 = load i16*, i16** %4, align 8
  %6 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6)
  %7 = getelementptr inbounds i8, i8* %6, i64 12
  %8 = bitcast i8* %7 to i16*
  %9 = getelementptr inbounds i8, i8* %6, i64 14
  %10 = bitcast i8* %9 to i16*
  %11 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 4
  %12 = bitcast i16** %11 to <8 x i16>**
  %13 = load <8 x i16>*, <8 x i16>** %12, align 8
  %14 = load <8 x i16>, <8 x i16>* %13, align 16
  %15 = getelementptr inbounds <8 x i16>, <8 x i16>* %13, i64 0, i64 8
  %16 = bitcast i16* %15 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 16
  %18 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 1
  %19 = bitcast i16** %18 to <2 x i64>**
  %20 = load <2 x i64>*, <2 x i64>** %19, align 8
  %21 = bitcast <2 x i64>* %20 to <8 x i16>*
  %22 = load <8 x i16>, <8 x i16>* %21, align 16
  %23 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 1
  %24 = bitcast <2 x i64>* %23 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 16
  %26 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 8
  %27 = load i16, i16* %26, align 8
  %28 = sext i16 %27 to i32
  %29 = insertelement <4 x i32> undef, i32 %28, i32 0
  %30 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 5
  %31 = bitcast i16** %30 to <8 x i16>**
  %32 = load <8 x i16>*, <8 x i16>** %31, align 8
  %33 = load <8 x i16>, <8 x i16>* %32, align 16
  %34 = getelementptr inbounds <8 x i16>, <8 x i16>* %32, i64 0, i64 8
  %35 = bitcast i16* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 16
  %37 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 7
  %38 = bitcast i16** %37 to <8 x i16>**
  %39 = load <8 x i16>*, <8 x i16>** %38, align 8
  %40 = load <8 x i16>, <8 x i16>* %39, align 16
  %41 = getelementptr inbounds <8 x i16>, <8 x i16>* %39, i64 0, i64 8
  %42 = bitcast i16* %41 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 16
  %44 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 2
  %45 = bitcast i16** %44 to <8 x i16>**
  %46 = load <8 x i16>*, <8 x i16>** %45, align 8
  %47 = load <8 x i16>, <8 x i16>* %46, align 16
  %48 = getelementptr inbounds <8 x i16>, <8 x i16>* %46, i64 0, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 16
  %51 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 3
  %52 = bitcast i16** %51 to <8 x i16>**
  %53 = load <8 x i16>*, <8 x i16>** %52, align 8
  %54 = load <8 x i16>, <8 x i16>* %53, align 16
  %55 = getelementptr inbounds <8 x i16>, <8 x i16>* %53, i64 0, i64 8
  %56 = bitcast i16* %55 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 16
  %58 = bitcast i16* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %58, i8 0, i64 32, i1 false)
  %59 = bitcast <4 x i32> %29 to <8 x i16>
  %60 = sub <8 x i16> <i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %59
  %61 = shufflevector <8 x i16> %60, <8 x i16> undef, <8 x i32> zeroinitializer
  %62 = ashr <8 x i16> %22, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %63 = ashr <8 x i16> %25, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %64 = xor <8 x i16> %62, %22
  %65 = sub <8 x i16> %64, %62
  %66 = xor <8 x i16> %63, %25
  %67 = sub <8 x i16> %66, %63
  %68 = sub <8 x i16> %65, %33
  %69 = add <8 x i16> %68, %61
  %70 = sub <8 x i16> %67, %36
  %71 = add <8 x i16> %70, %61
  %72 = bitcast <2 x i64>* %3 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %72, align 16
  %73 = add <8 x i16> %40, %65
  %74 = add <8 x i16> %43, %67
  %75 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %73, <8 x i16> %47) #4
  %76 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %74, <8 x i16> %50) #4
  %77 = add <8 x i16> %75, %73
  %78 = add <8 x i16> %76, %74
  %79 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %77, <8 x i16> %14) #4
  %80 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %78, <8 x i16> %17) #4
  %81 = xor <8 x i16> %79, %62
  %82 = xor <8 x i16> %80, %63
  %83 = sub <8 x i16> %81, %62
  %84 = sub <8 x i16> %82, %63
  %85 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 6
  %86 = load i16*, i16** %85, align 8
  %87 = load i16, i16* %86, align 2
  %88 = extractelement <8 x i16> %69, i32 0
  %89 = icmp sgt i16 %87, %88
  %90 = extractelement <8 x i16> %83, i32 0
  %91 = icmp eq i16 %90, 0
  %92 = or i1 %89, %91
  %93 = extractelement <8 x i16> %69, i32 1
  %94 = extractelement <8 x i16> %83, i32 1
  %95 = extractelement <8 x i16> %69, i32 4
  %96 = extractelement <8 x i16> %83, i32 4
  %97 = extractelement <8 x i16> %71, i32 0
  %98 = extractelement <8 x i16> %84, i32 0
  %99 = extractelement <8 x i16> %69, i32 5
  %100 = extractelement <8 x i16> %83, i32 5
  %101 = extractelement <8 x i16> %69, i32 2
  %102 = extractelement <8 x i16> %83, i32 2
  %103 = extractelement <8 x i16> %69, i32 3
  %104 = extractelement <8 x i16> %83, i32 3
  %105 = extractelement <8 x i16> %69, i32 6
  %106 = extractelement <8 x i16> %83, i32 6
  %107 = extractelement <8 x i16> %71, i32 1
  %108 = extractelement <8 x i16> %84, i32 1
  %109 = extractelement <8 x i16> %71, i32 4
  %110 = extractelement <8 x i16> %84, i32 4
  %111 = extractelement <8 x i16> %71, i32 5
  %112 = extractelement <8 x i16> %84, i32 5
  %113 = extractelement <8 x i16> %71, i32 2
  %114 = extractelement <8 x i16> %84, i32 2
  %115 = extractelement <8 x i16> %69, i32 7
  %116 = extractelement <8 x i16> %83, i32 7
  %117 = extractelement <8 x i16> %71, i32 3
  %118 = extractelement <8 x i16> %84, i32 3
  %119 = extractelement <8 x i16> %84, i32 6
  %120 = extractelement <8 x i16> %84, i32 7
  br i1 %92, label %121, label %123

121:                                              ; preds = %2
  %122 = getelementptr inbounds i16, i16* %86, i64 1
  br label %125

123:                                              ; preds = %2
  store i16 %90, i16* %5, align 2
  %124 = load i16*, i16** %85, align 8
  br label %125

125:                                              ; preds = %123, %121
  %126 = phi i16* [ %122, %121 ], [ %124, %123 ]
  %127 = phi i8 [ 0, %121 ], [ 1, %123 ]
  %128 = load i16, i16* %126, align 2
  %129 = icmp slt i16 %93, %128
  %130 = icmp eq i16 %94, 0
  %131 = or i1 %129, %130
  br i1 %131, label %132, label %134

132:                                              ; preds = %125
  %133 = getelementptr inbounds i16, i16* %126, i64 1
  br label %137

134:                                              ; preds = %125
  %135 = getelementptr inbounds i16, i16* %5, i64 1
  store i16 %94, i16* %135, align 2
  %136 = load i16*, i16** %85, align 8
  br label %137

137:                                              ; preds = %134, %132
  %138 = phi i16* [ %133, %132 ], [ %136, %134 ]
  %139 = phi i8 [ %127, %132 ], [ 2, %134 ]
  %140 = load i16, i16* %138, align 2
  %141 = icmp slt i16 %95, %140
  %142 = icmp eq i16 %96, 0
  %143 = or i1 %141, %142
  br i1 %143, label %144, label %146

144:                                              ; preds = %137
  %145 = getelementptr inbounds i16, i16* %138, i64 1
  br label %149

146:                                              ; preds = %137
  %147 = getelementptr inbounds i16, i16* %5, i64 4
  store i16 %96, i16* %147, align 2
  %148 = load i16*, i16** %85, align 8
  br label %149

149:                                              ; preds = %146, %144
  %150 = phi i16* [ %145, %144 ], [ %148, %146 ]
  %151 = phi i8 [ %139, %144 ], [ 3, %146 ]
  %152 = load i16, i16* %150, align 2
  %153 = icmp sgt i16 %152, %97
  %154 = icmp eq i16 %98, 0
  %155 = or i1 %153, %154
  br i1 %155, label %156, label %158

156:                                              ; preds = %149
  %157 = getelementptr inbounds i16, i16* %150, i64 1
  br label %161

158:                                              ; preds = %149
  %159 = getelementptr inbounds i16, i16* %5, i64 8
  store i16 %98, i16* %159, align 2
  %160 = load i16*, i16** %85, align 8
  br label %161

161:                                              ; preds = %158, %156
  %162 = phi i16* [ %157, %156 ], [ %160, %158 ]
  %163 = phi i8 [ %151, %156 ], [ 4, %158 ]
  %164 = load i16, i16* %162, align 2
  %165 = icmp slt i16 %99, %164
  %166 = icmp eq i16 %100, 0
  %167 = or i1 %165, %166
  br i1 %167, label %168, label %170

168:                                              ; preds = %161
  %169 = getelementptr inbounds i16, i16* %162, i64 1
  br label %173

170:                                              ; preds = %161
  %171 = getelementptr inbounds i16, i16* %5, i64 5
  store i16 %100, i16* %171, align 2
  %172 = load i16*, i16** %85, align 8
  br label %173

173:                                              ; preds = %170, %168
  %174 = phi i16* [ %169, %168 ], [ %172, %170 ]
  %175 = phi i8 [ %163, %168 ], [ 5, %170 ]
  %176 = load i16, i16* %174, align 2
  %177 = icmp slt i16 %101, %176
  %178 = icmp eq i16 %102, 0
  %179 = or i1 %177, %178
  br i1 %179, label %180, label %182

180:                                              ; preds = %173
  %181 = getelementptr inbounds i16, i16* %174, i64 1
  br label %185

182:                                              ; preds = %173
  %183 = getelementptr inbounds i16, i16* %5, i64 2
  store i16 %102, i16* %183, align 2
  %184 = load i16*, i16** %85, align 8
  br label %185

185:                                              ; preds = %182, %180
  %186 = phi i16* [ %181, %180 ], [ %184, %182 ]
  %187 = phi i8 [ %175, %180 ], [ 6, %182 ]
  %188 = load i16, i16* %186, align 2
  %189 = icmp slt i16 %103, %188
  %190 = icmp eq i16 %104, 0
  %191 = or i1 %189, %190
  br i1 %191, label %192, label %194

192:                                              ; preds = %185
  %193 = getelementptr inbounds i16, i16* %186, i64 1
  br label %197

194:                                              ; preds = %185
  %195 = getelementptr inbounds i16, i16* %5, i64 3
  store i16 %104, i16* %195, align 2
  %196 = load i16*, i16** %85, align 8
  br label %197

197:                                              ; preds = %194, %192
  %198 = phi i16* [ %193, %192 ], [ %196, %194 ]
  %199 = phi i8 [ %187, %192 ], [ 7, %194 ]
  %200 = load i16, i16* %198, align 2
  %201 = icmp slt i16 %105, %200
  %202 = icmp eq i16 %106, 0
  %203 = or i1 %201, %202
  br i1 %203, label %204, label %206

204:                                              ; preds = %197
  %205 = getelementptr inbounds i16, i16* %198, i64 1
  br label %209

206:                                              ; preds = %197
  %207 = getelementptr inbounds i16, i16* %5, i64 6
  store i16 %106, i16* %207, align 2
  %208 = load i16*, i16** %85, align 8
  br label %209

209:                                              ; preds = %206, %204
  %210 = phi i16* [ %205, %204 ], [ %208, %206 ]
  %211 = phi i8 [ %199, %204 ], [ 8, %206 ]
  %212 = load i16, i16* %210, align 2
  %213 = icmp slt i16 %107, %212
  %214 = icmp eq i16 %108, 0
  %215 = or i1 %213, %214
  br i1 %215, label %216, label %218

216:                                              ; preds = %209
  %217 = getelementptr inbounds i16, i16* %210, i64 1
  br label %221

218:                                              ; preds = %209
  %219 = getelementptr inbounds i16, i16* %5, i64 9
  store i16 %108, i16* %219, align 2
  %220 = load i16*, i16** %85, align 8
  br label %221

221:                                              ; preds = %218, %216
  %222 = phi i16* [ %217, %216 ], [ %220, %218 ]
  %223 = phi i8 [ %211, %216 ], [ 9, %218 ]
  %224 = load i16, i16* %222, align 2
  %225 = icmp slt i16 %109, %224
  %226 = icmp eq i16 %110, 0
  %227 = or i1 %225, %226
  br i1 %227, label %228, label %230

228:                                              ; preds = %221
  %229 = getelementptr inbounds i16, i16* %222, i64 1
  br label %233

230:                                              ; preds = %221
  %231 = getelementptr inbounds i16, i16* %5, i64 12
  store i16 %110, i16* %231, align 2
  %232 = load i16*, i16** %85, align 8
  br label %233

233:                                              ; preds = %230, %228
  %234 = phi i16* [ %229, %228 ], [ %232, %230 ]
  %235 = phi i8 [ %223, %228 ], [ 10, %230 ]
  %236 = load i16, i16* %234, align 2
  %237 = icmp slt i16 %111, %236
  %238 = icmp eq i16 %112, 0
  %239 = or i1 %237, %238
  br i1 %239, label %240, label %242

240:                                              ; preds = %233
  %241 = getelementptr inbounds i16, i16* %234, i64 1
  br label %245

242:                                              ; preds = %233
  %243 = getelementptr inbounds i16, i16* %5, i64 13
  store i16 %112, i16* %243, align 2
  %244 = load i16*, i16** %85, align 8
  br label %245

245:                                              ; preds = %242, %240
  %246 = phi i16* [ %241, %240 ], [ %244, %242 ]
  %247 = phi i8 [ %235, %240 ], [ 11, %242 ]
  %248 = load i16, i16* %246, align 2
  %249 = icmp slt i16 %113, %248
  %250 = icmp eq i16 %114, 0
  %251 = or i1 %249, %250
  br i1 %251, label %252, label %254

252:                                              ; preds = %245
  %253 = getelementptr inbounds i16, i16* %246, i64 1
  br label %257

254:                                              ; preds = %245
  %255 = getelementptr inbounds i16, i16* %5, i64 10
  store i16 %114, i16* %255, align 2
  %256 = load i16*, i16** %85, align 8
  br label %257

257:                                              ; preds = %254, %252
  %258 = phi i16* [ %253, %252 ], [ %256, %254 ]
  %259 = phi i8 [ %247, %252 ], [ 12, %254 ]
  %260 = load i16, i16* %258, align 2
  %261 = icmp slt i16 %115, %260
  %262 = icmp eq i16 %116, 0
  %263 = or i1 %261, %262
  br i1 %263, label %264, label %266

264:                                              ; preds = %257
  %265 = getelementptr inbounds i16, i16* %258, i64 1
  br label %269

266:                                              ; preds = %257
  %267 = getelementptr inbounds i16, i16* %5, i64 7
  store i16 %116, i16* %267, align 2
  %268 = load i16*, i16** %85, align 8
  br label %269

269:                                              ; preds = %266, %264
  %270 = phi i16* [ %265, %264 ], [ %268, %266 ]
  %271 = phi i8 [ %259, %264 ], [ 13, %266 ]
  %272 = load i16, i16* %270, align 2
  %273 = icmp slt i16 %117, %272
  %274 = icmp eq i16 %118, 0
  %275 = or i1 %273, %274
  br i1 %275, label %276, label %278

276:                                              ; preds = %269
  %277 = getelementptr inbounds i16, i16* %270, i64 1
  br label %281

278:                                              ; preds = %269
  %279 = getelementptr inbounds i16, i16* %5, i64 11
  store i16 %118, i16* %279, align 2
  %280 = load i16*, i16** %85, align 8
  br label %281

281:                                              ; preds = %278, %276
  %282 = phi i16* [ %277, %276 ], [ %280, %278 ]
  %283 = phi i8 [ %271, %276 ], [ 14, %278 ]
  %284 = load i16, i16* %282, align 2
  %285 = load i16, i16* %8, align 4
  %286 = icmp slt i16 %285, %284
  %287 = icmp eq i16 %119, 0
  %288 = or i1 %286, %287
  br i1 %288, label %289, label %291

289:                                              ; preds = %281
  %290 = getelementptr inbounds i16, i16* %282, i64 1
  br label %294

291:                                              ; preds = %281
  %292 = getelementptr inbounds i16, i16* %5, i64 14
  store i16 %119, i16* %292, align 2
  %293 = load i16*, i16** %85, align 8
  br label %294

294:                                              ; preds = %291, %289
  %295 = phi i16* [ %290, %289 ], [ %293, %291 ]
  %296 = phi i8 [ %283, %289 ], [ 15, %291 ]
  %297 = load i16, i16* %295, align 2
  %298 = load i16, i16* %10, align 2
  %299 = icmp slt i16 %298, %297
  %300 = icmp eq i16 %120, 0
  %301 = or i1 %299, %300
  br i1 %301, label %304, label %302

302:                                              ; preds = %294
  %303 = getelementptr inbounds i16, i16* %5, i64 15
  store i16 %120, i16* %303, align 2
  br label %304

304:                                              ; preds = %294, %302
  %305 = phi i8 [ 16, %302 ], [ %296, %294 ]
  %306 = bitcast %struct.blockd* %1 to <8 x i16>**
  %307 = load <8 x i16>*, <8 x i16>** %306, align 8
  %308 = load <8 x i16>, <8 x i16>* %307, align 16
  %309 = getelementptr inbounds <8 x i16>, <8 x i16>* %307, i64 0, i64 8
  %310 = bitcast i16* %309 to <8 x i16>*
  %311 = load <8 x i16>, <8 x i16>* %310, align 16
  %312 = mul <8 x i16> %308, %54
  %313 = mul <8 x i16> %311, %57
  %314 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 1
  %315 = bitcast i16** %314 to <8 x i16>**
  %316 = load <8 x i16>*, <8 x i16>** %315, align 8
  store <8 x i16> %312, <8 x i16>* %316, align 16
  %317 = load i16*, i16** %314, align 8
  %318 = getelementptr inbounds i16, i16* %317, i64 8
  %319 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %313, <8 x i16>* %319, align 16
  %320 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 5
  %321 = load i8*, i8** %320, align 8
  store i8 %305, i8* %321, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vp8_fast_quantize_b_sse2(%struct.block* nocapture readonly, %struct.blockd* nocapture readonly) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 1
  %4 = bitcast i16** %3 to <2 x i64>**
  %5 = load <2 x i64>*, <2 x i64>** %4, align 8
  %6 = bitcast <2 x i64>* %5 to <8 x i16>*
  %7 = load <8 x i16>, <8 x i16>* %6, align 16
  %8 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 1
  %9 = bitcast <2 x i64>* %8 to <8 x i16>*
  %10 = load <8 x i16>, <8 x i16>* %9, align 16
  %11 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 7
  %12 = bitcast i16** %11 to <8 x i16>**
  %13 = load <8 x i16>*, <8 x i16>** %12, align 8
  %14 = load <8 x i16>, <8 x i16>* %13, align 16
  %15 = getelementptr inbounds <8 x i16>, <8 x i16>* %13, i64 0, i64 8
  %16 = bitcast i16* %15 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 16
  %18 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 3
  %19 = bitcast i16** %18 to <8 x i16>**
  %20 = load <8 x i16>*, <8 x i16>** %19, align 8
  %21 = load <8 x i16>, <8 x i16>* %20, align 16
  %22 = getelementptr inbounds <8 x i16>, <8 x i16>* %20, i64 0, i64 8
  %23 = bitcast i16* %22 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 16
  %25 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 3
  %26 = bitcast i16** %25 to <8 x i16>**
  %27 = load <8 x i16>*, <8 x i16>** %26, align 8
  %28 = load <8 x i16>, <8 x i16>* %27, align 16
  %29 = getelementptr inbounds <8 x i16>, <8 x i16>* %27, i64 0, i64 8
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 16
  %32 = load <2 x i64>, <2 x i64>* bitcast ([16 x i16]* @vp8_default_inv_zig_zag to <2 x i64>*), align 16
  %33 = load <2 x i64>, <2 x i64>* bitcast (i16* getelementptr inbounds ([16 x i16], [16 x i16]* @vp8_default_inv_zig_zag, i64 0, i64 8) to <2 x i64>*), align 16
  %34 = ashr <8 x i16> %7, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %35 = ashr <8 x i16> %10, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %36 = xor <8 x i16> %34, %7
  %37 = lshr <8 x i16> %7, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %38 = add <8 x i16> %36, %37
  %39 = xor <8 x i16> %35, %10
  %40 = lshr <8 x i16> %10, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %41 = add <8 x i16> %39, %40
  %42 = add <8 x i16> %38, %14
  %43 = add <8 x i16> %41, %17
  %44 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %42, <8 x i16> %21) #4
  %45 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %43, <8 x i16> %24) #4
  %46 = xor <8 x i16> %44, %34
  %47 = xor <8 x i16> %45, %35
  %48 = sub <8 x i16> %46, %34
  %49 = sub <8 x i16> %47, %35
  %50 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 0
  %51 = bitcast %struct.blockd* %1 to <8 x i16>**
  %52 = load <8 x i16>*, <8 x i16>** %51, align 8
  store <8 x i16> %48, <8 x i16>* %52, align 16
  %53 = load i16*, i16** %50, align 8
  %54 = getelementptr inbounds i16, i16* %53, i64 8
  %55 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %55, align 16
  %56 = mul <8 x i16> %48, %28
  %57 = mul <8 x i16> %49, %31
  %58 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 1
  %59 = bitcast i16** %58 to <8 x i16>**
  %60 = load <8 x i16>*, <8 x i16>** %59, align 8
  store <8 x i16> %56, <8 x i16>* %60, align 16
  %61 = load i16*, i16** %58, align 8
  %62 = getelementptr inbounds i16, i16* %61, i64 8
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %57, <8 x i16>* %63, align 16
  %64 = icmp eq <8 x i16> %48, zeroinitializer
  %65 = sext <8 x i1> %64 to <8 x i16>
  %66 = bitcast <8 x i16> %65 to <2 x i64>
  %67 = icmp eq <8 x i16> %49, zeroinitializer
  %68 = sext <8 x i1> %67 to <8 x i16>
  %69 = bitcast <8 x i16> %68 to <2 x i64>
  %70 = xor <2 x i64> %66, <i64 -1, i64 -1>
  %71 = xor <2 x i64> %69, <i64 -1, i64 -1>
  %72 = and <2 x i64> %32, %70
  %73 = and <2 x i64> %33, %71
  %74 = bitcast <2 x i64> %72 to <8 x i16>
  %75 = bitcast <2 x i64> %73 to <8 x i16>
  %76 = icmp sgt <8 x i16> %74, %75
  %77 = select <8 x i1> %76, <8 x i16> %74, <8 x i16> %75
  %78 = bitcast <8 x i16> %77 to <4 x i32>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 0>
  %80 = bitcast <4 x i32> %79 to <8 x i16>
  %81 = icmp sgt <8 x i16> %77, %80
  %82 = select <8 x i1> %81, <8 x i16> %77, <8 x i16> %80
  %83 = shufflevector <8 x i16> %82, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %84 = icmp sgt <8 x i16> %82, %83
  %85 = select <8 x i1> %84, <8 x i16> %82, <8 x i16> %83
  %86 = shufflevector <8 x i16> %85, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %87 = icmp sgt <8 x i16> %85, %86
  %88 = select <8 x i1> %87, <8 x i16> %85, <8 x i16> %86
  %89 = bitcast <8 x i16> %88 to <4 x i32>
  %90 = extractelement <4 x i32> %89, i32 0
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 5
  %93 = load i8*, i8** %92, align 8
  store i8 %91, i8* %93, align 1
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
