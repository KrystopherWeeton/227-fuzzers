; ModuleID = '../../extensions/renderer/test_native_handler.cc'
source_filename = "../../extensions/renderer/test_native_handler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.extensions::TestNativeHandler" = type { %"class.extensions::ObjectBackedNativeHandler" }
%"class.extensions::ObjectBackedNativeHandler" = type { %"class.extensions::NativeHandler.base", i32, %"class.v8::PersistentValueVector", %"class.extensions::ScriptContext"*, %"class.v8::Global" }
%"class.extensions::NativeHandler.base" = type <{ i32 (...)**, i8 }>
%"class.v8::PersistentValueVector" = type { %"class.v8::Isolate"*, %"class.std::__1::vector" }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::ObjectTemplate"* }
%"class.v8::ObjectTemplate" = type { i8 }
%"class.extensions::ScriptContext" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.extensions::WakeEventPage" = type { %"class.content::RenderThreadObserver", %class.scoped_refptr.7, %"class.std::__1::unordered_map", %"class.base::Lock" }
%"class.content::RenderThreadObserver" = type { i32 (...)** }
%class.scoped_refptr.7 = type { %"class.IPC::SyncMessageFilter"* }
%"class.IPC::SyncMessageFilter" = type { %"class.IPC::MessageFilter.base", %"class.IPC::Sender", %"class.IPC::Channel"*, %class.scoped_refptr.9, %class.scoped_refptr.9, %"class.std::__1::set", %"class.std::__1::vector.19", %"class.base::Lock", %"class.base::WaitableEvent"* }
%"class.IPC::MessageFilter.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.8" }>
%"class.base::RefCountedThreadSafe.8" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.IPC::Sender" = type { i32 (...)** }
%"class.IPC::Channel" = type <{ %"class.IPC::Sender", i8, [7 x i8] }>
%class.scoped_refptr.9 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.10" }>
%"class.base::RefCountedThreadSafe.10" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.11", %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { i64 }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.std::__1::unique_ptr"* }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.26, i8, [7 x i8] }>
%class.scoped_refptr.26 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.27", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.27" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.28" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.32", %"class.std::__1::__compressed_pair.40", %"class.std::__1::__compressed_pair.45", %"class.std::__1::__compressed_pair.47", [4 x i8] }>
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34", %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { float }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::Function" = type { i8 }
%"class.v8::Object" = type { i8 }

$_ZN10extensions17TestNativeHandlerD0Ev = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateIMN10extensions17TestNativeHandlerEFvRKN2v820FunctionCallbackInfoINS5_5ValueEEEEJNS0_17UnretainedWrapperIS4_EEEEEFvSA_EE3RunEPNS0_13BindStateBaseESA_ = comdat any

$_ZN4base8internal9BindStateIMN10extensions17TestNativeHandlerEFvRKN2v820FunctionCallbackInfoINS4_5ValueEEEEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE = comdat any

@_ZTVN10extensions17TestNativeHandlerE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.extensions::ObjectBackedNativeHandler"*)* @_ZN10extensions25ObjectBackedNativeHandlerD2Ev to i8*), i8* bitcast (void (%"class.extensions::TestNativeHandler"*)* @_ZN10extensions17TestNativeHandlerD0Ev to i8*), i8* bitcast (void (%"class.extensions::ObjectBackedNativeHandler"*)* @_ZN10extensions25ObjectBackedNativeHandler10InitializeEv to i8*), i8* bitcast (i1 (%"class.extensions::ObjectBackedNativeHandler"*)* @_ZN10extensions25ObjectBackedNativeHandler13IsInitializedEv to i8*), i8* bitcast (%"class.v8::Object"* (%"class.extensions::ObjectBackedNativeHandler"*)* @_ZN10extensions25ObjectBackedNativeHandler11NewInstanceEv to i8*), i8* bitcast (void (%"class.extensions::ObjectBackedNativeHandler"*)* @_ZN10extensions25ObjectBackedNativeHandler10InvalidateEv to i8*), i8* bitcast (void (%"class.extensions::TestNativeHandler"*)* @_ZN10extensions17TestNativeHandler9AddRoutesEv to i8*)] }, align 8
@.str = private unnamed_addr constant [17 x i8] c"GetWakeEventPage\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"0 == args.Length()\00", align 1
@.str.3 = private unnamed_addr constant [49 x i8] c"../../extensions/renderer/test_native_handler.cc\00", align 1

@_ZN10extensions17TestNativeHandlerC1EPNS_13ScriptContextE = hidden unnamed_addr alias void (%"class.extensions::TestNativeHandler"*, %"class.extensions::ScriptContext"*), void (%"class.extensions::TestNativeHandler"*, %"class.extensions::ScriptContext"*)* @_ZN10extensions17TestNativeHandlerC2EPNS_13ScriptContextE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions17TestNativeHandlerC2EPNS_13ScriptContextE(%"class.extensions::TestNativeHandler"*, %"class.extensions::ScriptContext"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.extensions::TestNativeHandler", %"class.extensions::TestNativeHandler"* %0, i64 0, i32 0
  tail call void @_ZN10extensions25ObjectBackedNativeHandlerC2EPNS_13ScriptContextE(%"class.extensions::ObjectBackedNativeHandler"* %3, %"class.extensions::ScriptContext"* %1) #7
  %4 = getelementptr inbounds %"class.extensions::TestNativeHandler", %"class.extensions::TestNativeHandler"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN10extensions17TestNativeHandlerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  ret void
}

declare void @_ZN10extensions25ObjectBackedNativeHandlerC2EPNS_13ScriptContextE(%"class.extensions::ObjectBackedNativeHandler"*, %"class.extensions::ScriptContext"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions17TestNativeHandler9AddRoutesEv(%"class.extensions::TestNativeHandler"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.base::RepeatingCallback", align 8
  %5 = getelementptr inbounds %"class.extensions::TestNativeHandler", %"class.extensions::TestNativeHandler"* %0, i64 0, i32 0
  %6 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #7
  %7 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  store i8 16, i8* %8, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 1 getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i64 16, i1 false) #7
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %10 = bitcast i64* %9 to i8*
  store i8 0, i8* %10, align 8
  %11 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #7
  %12 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  store i8 4, i8* %13, align 1
  %14 = bitcast %"class.std::__1::basic_string"* %3 to i32*
  store i32 1953719668, i32* %14, align 8
  %15 = getelementptr inbounds i8, i8* %11, i64 4
  store i8 0, i8* %15, align 4
  %16 = ptrtoint %"class.extensions::TestNativeHandler"* %0 to i64
  %17 = tail call i8* @_Znwm(i64 56) #8, !noalias !2
  %18 = bitcast i8* %17 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %18, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.v8::FunctionCallbackInfo"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN10extensions17TestNativeHandlerEFvRKN2v820FunctionCallbackInfoINS5_5ValueEEEEJNS0_17UnretainedWrapperIS4_EEEEEFvSA_EE3RunEPNS0_13BindStateBaseESA_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN10extensions17TestNativeHandlerEFvRKN2v820FunctionCallbackInfoINS4_5ValueEEEEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE) #7, !noalias !2
  %19 = getelementptr inbounds i8, i8* %17, i64 32
  %20 = bitcast i8* %19 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.extensions::TestNativeHandler"*, %"class.v8::FunctionCallbackInfo"*)* @_ZN10extensions17TestNativeHandler16GetWakeEventPageERKN2v820FunctionCallbackInfoINS1_5ValueEEE to i64), i64 0>, <2 x i64>* %20, align 8, !noalias !2
  %21 = getelementptr inbounds i8, i8* %17, i64 48
  %22 = bitcast i8* %21 to i64*
  store i64 %16, i64* %22, align 8, !noalias !2
  %23 = bitcast %"class.base::RepeatingCallback"* %4 to i8**
  store i8* %17, i8** %23, align 8, !alias.scope !2
  call void @_ZN10extensions25ObjectBackedNativeHandler20RouteHandlerFunctionERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_N4base17RepeatingCallbackIFvRKN2v820FunctionCallbackInfoINSC_5ValueEEEEEE(%"class.extensions::ObjectBackedNativeHandler"* %5, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %2, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3, %"class.base::RepeatingCallback"* nonnull %4) #7
  %24 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %4, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %24) #7
  %25 = load i8, i8* %13, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %1
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @_ZdlPv(i8* %29) #8
  br label %30

30:                                               ; preds = %1, %27
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #7
  %31 = load i8, i8* %8, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %30
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  call void @_ZdlPv(i8* %35) #8
  br label %36

36:                                               ; preds = %30, %33
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #7
  ret void
}

declare void @_ZN10extensions25ObjectBackedNativeHandler20RouteHandlerFunctionERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_N4base17RepeatingCallbackIFvRKN2v820FunctionCallbackInfoINSC_5ValueEEEEEE(%"class.extensions::ObjectBackedNativeHandler"*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), %"class.base::RepeatingCallback"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions17TestNativeHandler16GetWakeEventPageERKN2v820FunctionCallbackInfoINS1_5ValueEEE(%"class.extensions::TestNativeHandler"* nocapture readonly, %"class.v8::FunctionCallbackInfo"* nocapture readonly dereferenceable(24)) #0 align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %1, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp eq i32 %9, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEi(i32 0) #7
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEi(i32 %9) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i8* %14, i8* %15) #7
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0), i32 23, %"class.logging::CheckOpResult"* nonnull %4) #7
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #7
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  %23 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %1, i64 0, i32 0
  %24 = load i64*, i64** %23, align 8
  %25 = getelementptr inbounds i64, i64* %24, i64 3
  %26 = call %"class.extensions::WakeEventPage"* @_ZN10extensions13WakeEventPage3GetEv() #7
  %27 = getelementptr inbounds %"class.extensions::TestNativeHandler", %"class.extensions::TestNativeHandler"* %0, i64 0, i32 0, i32 3
  %28 = load %"class.extensions::ScriptContext"*, %"class.extensions::ScriptContext"** %27, align 8
  %29 = call %"class.v8::Function"* @_ZN10extensions13WakeEventPage13GetForContextEPNS_13ScriptContextE(%"class.extensions::WakeEventPage"* %26, %"class.extensions::ScriptContext"* %28) #7
  %30 = icmp eq %"class.v8::Function"* %29, null
  %31 = bitcast %"class.v8::Function"* %29 to i64*
  %32 = getelementptr inbounds i64, i64* %24, i64 2
  %33 = select i1 %30, i64* %32, i64* %31, !prof !7
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %25, align 8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare %"class.extensions::WakeEventPage"* @_ZN10extensions13WakeEventPage3GetEv() local_unnamed_addr #1

declare %"class.v8::Function"* @_ZN10extensions13WakeEventPage13GetForContextEPNS_13ScriptContextE(%"class.extensions::WakeEventPage"*, %"class.extensions::ScriptContext"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN10extensions25ObjectBackedNativeHandlerD2Ev(%"class.extensions::ObjectBackedNativeHandler"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10extensions17TestNativeHandlerD0Ev(%"class.extensions::TestNativeHandler"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.extensions::TestNativeHandler", %"class.extensions::TestNativeHandler"* %0, i64 0, i32 0
  tail call void @_ZN10extensions25ObjectBackedNativeHandlerD2Ev(%"class.extensions::ObjectBackedNativeHandler"* %2) #7
  %3 = bitcast %"class.extensions::TestNativeHandler"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #8
  ret void
}

declare void @_ZN10extensions25ObjectBackedNativeHandler10InitializeEv(%"class.extensions::ObjectBackedNativeHandler"*) unnamed_addr #1

declare zeroext i1 @_ZN10extensions25ObjectBackedNativeHandler13IsInitializedEv(%"class.extensions::ObjectBackedNativeHandler"*) unnamed_addr #1

declare %"class.v8::Object"* @_ZN10extensions25ObjectBackedNativeHandler11NewInstanceEv(%"class.extensions::ObjectBackedNativeHandler"*) unnamed_addr #1

declare void @_ZN10extensions25ObjectBackedNativeHandler10InvalidateEv(%"class.extensions::ObjectBackedNativeHandler"*) unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEi(i32) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMN10extensions17TestNativeHandlerEFvRKN2v820FunctionCallbackInfoINS5_5ValueEEEEJNS0_17UnretainedWrapperIS4_EEEEEFvSA_EE3RunEPNS0_13BindStateBaseESA_(%"class.base::internal::BindStateBase"*, %"class.v8::FunctionCallbackInfo"* dereferenceable(24)) #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = bitcast %"class.base::internal::BindStateBase"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %10 = bitcast void ()** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %6, i64 %11
  %13 = bitcast i8* %12 to %"class.extensions::TestNativeHandler"*
  %14 = and i64 %8, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %2
  %17 = bitcast i8* %12 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = add i64 %8, -1
  %20 = getelementptr i8, i8* %18, i64 %19
  %21 = bitcast i8* %20 to void (%"class.extensions::TestNativeHandler"*, %"class.v8::FunctionCallbackInfo"*)**
  %22 = load void (%"class.extensions::TestNativeHandler"*, %"class.v8::FunctionCallbackInfo"*)*, void (%"class.extensions::TestNativeHandler"*, %"class.v8::FunctionCallbackInfo"*)** %21, align 8
  br label %25

23:                                               ; preds = %2
  %24 = inttoptr i64 %8 to void (%"class.extensions::TestNativeHandler"*, %"class.v8::FunctionCallbackInfo"*)*
  br label %25

25:                                               ; preds = %16, %23
  %26 = phi void (%"class.extensions::TestNativeHandler"*, %"class.v8::FunctionCallbackInfo"*)* [ %22, %16 ], [ %24, %23 ]
  tail call void %26(%"class.extensions::TestNativeHandler"* %13, %"class.v8::FunctionCallbackInfo"* dereferenceable(24) %1) #7
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMN10extensions17TestNativeHandlerEFvRKN2v820FunctionCallbackInfoINS4_5ValueEEEEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #8
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN10extensions17TestNativeHandlerEFvRKN2v820FunctionCallbackInfoINS5_5ValueEEEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN10extensions17TestNativeHandlerEFvRKN2v820FunctionCallbackInfoINS5_5ValueEEEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base13BindRepeatingIMN10extensions17TestNativeHandlerEFvRKN2v820FunctionCallbackInfoINS3_5ValueEEEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINSB_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSG_DpOSH_: argument 0"}
!6 = distinct !{!6, !"_ZN4base13BindRepeatingIMN10extensions17TestNativeHandlerEFvRKN2v820FunctionCallbackInfoINS3_5ValueEEEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINSB_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSG_DpOSH_"}
!7 = !{!"branch_weights", i32 1, i32 2000}
