; ModuleID = '../../third_party/swiftshader/third_party/subzero/src/IceThreading.cpp'
source_filename = "../../third_party/swiftshader/third_party/subzero/src/IceThreading.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.Ice::EmitterWorkItem" = type { i32, i32, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.32", %"class.std::__1::unique_ptr.48" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.Ice::VariableDeclarationList"* }
%"class.Ice::VariableDeclarationList" = type { %"class.std::__1::unique_ptr.0", %"class.std::__1::vector", %"class.std::__1::vector.15", %"class.std::__1::vector.22" }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.llvm::BumpPtrAllocatorImpl" = type <{ i8*, i8*, %"class.llvm::SmallVector", %"class.llvm::SmallVector.3", i64, %"class.llvm::MallocAllocator", [7 x i8] }>
%"class.llvm::SmallVector" = type { %"class.llvm::SmallVectorImpl", %"struct.llvm::SmallVectorStorage" }
%"class.llvm::SmallVectorImpl" = type { %"class.llvm::SmallVectorTemplateBase" }
%"class.llvm::SmallVectorTemplateBase" = type { %"class.llvm::SmallVectorTemplateCommon" }
%"class.llvm::SmallVectorTemplateCommon" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion" }
%"class.llvm::SmallVectorBase" = type { i8*, i8*, i8* }
%"struct.llvm::AlignedCharArrayUnion" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::AlignedCharArray" = type { [8 x i8] }
%"struct.llvm::SmallVectorStorage" = type { [3 x %"struct.llvm::AlignedCharArrayUnion"] }
%"class.llvm::SmallVector.3" = type <{ %"class.llvm::SmallVectorImpl.4", %"struct.llvm::SmallVectorStorage.9", [7 x i8] }>
%"class.llvm::SmallVectorImpl.4" = type { %"class.llvm::SmallVectorTemplateBase.5" }
%"class.llvm::SmallVectorTemplateBase.5" = type { %"class.llvm::SmallVectorTemplateCommon.6" }
%"class.llvm::SmallVectorTemplateCommon.6" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.7" }
%"struct.llvm::AlignedCharArrayUnion.7" = type { %"struct.llvm::AlignedCharArray.8" }
%"struct.llvm::AlignedCharArray.8" = type { [16 x i8] }
%"struct.llvm::SmallVectorStorage.9" = type { i8 }
%"class.llvm::MallocAllocator" = type { i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.Ice::VariableDeclaration"**, %"class.Ice::VariableDeclaration"**, %"class.std::__1::__compressed_pair.12" }
%"class.Ice::VariableDeclaration" = type opaque
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.Ice::VariableDeclaration"** }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { %"class.std::__1::function"*, %"class.std::__1::function"*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.std::__1::function"* }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.std::__1::unique_ptr.0"* }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.Ice::Assembler"* }
%"class.Ice::Assembler" = type { i32 (...)**, i32, [4 x i8], %"class.llvm::BumpPtrAllocatorImpl.35", %"class.Ice::StringID", i8, i8, [6 x i8], %"class.Ice::AssemblerBuffer" }
%"class.llvm::BumpPtrAllocatorImpl.35" = type <{ i8*, i8*, %"class.llvm::SmallVector", %"class.llvm::SmallVector.3", i64, %"class.llvm::MallocAllocator", [7 x i8] }>
%"class.Ice::StringID" = type { i64 }
%"class.Ice::AssemblerBuffer" = type <{ i8, [7 x i8], i64, i64, i64, %"class.Ice::Assembler"*, %"class.std::__1::vector.38", i8, [7 x i8] }>
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"class.Ice::AssemblerFixup"**, %"class.Ice::AssemblerFixup"**, %"class.std::__1::__compressed_pair.40" }
%"class.Ice::AssemblerFixup" = type { i32 (...)**, i64, i32, i32, i8, %union.anon }
%union.anon = type { %"class.Ice::Constant"* }
%"class.Ice::Constant" = type opaque
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.Ice::AssemblerFixup"** }
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.Ice::Cfg"* }
%"class.Ice::Cfg" = type <{ %"class.std::__1::unique_ptr.0", %"class.Ice::GlobalContext"*, i32, i32, i32, [4 x i8], %"class.Ice::StringID", i32, i8, i8, i8, i8, %"class.std::__1::basic_string", %"class.Ice::CfgNode"*, %"class.std::__1::vector.192", i32, [4 x i8], %"class.std::__1::vector.197", %"class.std::__1::vector.197", %"class.std::__1::vector.197", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.203", %"class.std::__1::unique_ptr.209", %"class.std::__1::unique_ptr.215", %"class.std::__1::unique_ptr.32", %"class.std::__1::unique_ptr", %"class.std::__1::vector.221", %"class.Ice::CfgNode"*, %"class.std::__1::vector.227", i32, [4 x i8] }>
%"class.Ice::GlobalContext" = type { %"class.std::__1::mutex", %"class.llvm::BumpPtrAllocatorImpl", [16 x i8], %"class.std::__1::mutex", %"class.Ice::VariableDeclarationList", [8 x i8], %"class.std::__1::mutex", %"class.std::__1::vector.15", %"class.std::__1::mutex", %"class.std::__1::unique_ptr.51", [16 x i8], %"class.std::__1::mutex", %"class.std::__1::unique_ptr.76", [16 x i8], %"class.std::__1::mutex", %"class.std::__1::vector.82", %"class.std::__1::mutex", %"class.Ice::ErrorCode", %"class.std::__1::mutex", %"class.Ice::GlobalContext::CodeStats", %"class.std::__1::mutex", %"class.Ice::GlobalContext::TimerList", %"class.std::__1::mutex", %"class.llvm::raw_ostream"*, %"class.llvm::raw_ostream"*, %"class.llvm::raw_ostream"*, %"struct.std::__1::atomic", [63 x i8], %"class.std::__1::unique_ptr.144", i64, %"class.Ice::BoundedProducerConsumerQueue", %"class.Ice::BoundedProducerConsumerQueue.160", %"class.std::__1::unique_ptr.168", i8, %"class.std::__1::unique_ptr.174", i8, [15 x %"class.Ice::Constant"*], %"class.Ice::Constant"*, [36 x %"class.Ice::Constant"*], %"class.llvm::SmallVector.180", %"class.llvm::SmallVector.186", %"class.llvm::SmallVector.186" }
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.Ice::ConstantPool"* }
%"class.Ice::ConstantPool" = type opaque
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.83" }
%"class.std::__1::__vector_base.83" = type { %"class.Ice::JumpTableData"*, %"class.Ice::JumpTableData"*, %"class.std::__1::__compressed_pair.91" }
%"class.Ice::JumpTableData" = type { %"class.Ice::StringID", %"class.Ice::StringID", i32, %"class.std::__1::vector.84" }
%"class.std::__1::vector.84" = type { %"class.std::__1::__vector_base.85" }
%"class.std::__1::__vector_base.85" = type { i64*, i64*, %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { i64* }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.Ice::JumpTableData"* }
%"class.Ice::ErrorCode" = type <{ %"class.std::__1::error_code", i8, [7 x i8] }>
%"class.std::__1::error_code" = type { i32, %"class.std::__1::error_category"* }
%"class.std::__1::error_category" = type { i32 (...)** }
%"class.Ice::GlobalContext::CodeStats" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [6 x i32] }
%"class.Ice::GlobalContext::TimerList" = type { %"class.std::__1::vector.96" }
%"class.std::__1::vector.96" = type { %"class.std::__1::__vector_base.97" }
%"class.std::__1::__vector_base.97" = type { %"class.Ice::TimerStack"*, %"class.Ice::TimerStack"*, %"class.std::__1::__compressed_pair.139" }
%"class.Ice::TimerStack" = type { %"class.std::__1::basic_string", double, double, i64, %"class.std::__1::map", %"class.std::__1::vector.111", %"class.std::__1::vector.118", %"class.std::__1::vector.132", %"class.std::__1::vector.120", i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.104", %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { i64 }
%"class.std::__1::vector.111" = type { %"class.std::__1::__vector_base.112" }
%"class.std::__1::__vector_base.112" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::vector.118" = type { %"class.std::__1::__vector_base.119" }
%"class.std::__1::__vector_base.119" = type { %"class.Ice::TimerStack::TimerTreeNode"*, %"class.Ice::TimerStack::TimerTreeNode"*, %"class.std::__1::__compressed_pair.127" }
%"class.Ice::TimerStack::TimerTreeNode" = type { %"class.std::__1::vector.120", i64, i32, double, i64 }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.Ice::TimerStack::TimerTreeNode"* }
%"class.std::__1::vector.132" = type { %"class.std::__1::__vector_base.133" }
%"class.std::__1::__vector_base.133" = type { double*, double*, %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { double* }
%"class.std::__1::vector.120" = type { %"class.std::__1::__vector_base.121" }
%"class.std::__1::__vector_base.121" = type { i64*, i64*, %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { i64* }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.Ice::TimerStack"* }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.llvm::raw_ostream" = type <{ i32 (...)**, i8*, i8*, i8*, i32, [4 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i8 }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.Ice::ELFObjectWriter"* }
%"class.Ice::ELFObjectWriter" = type opaque
%"class.Ice::BoundedProducerConsumerQueue" = type <{ [65536 x %"class.std::__1::unique_ptr.150"], %"class.std::__1::mutex", [24 x i8], %"class.std::__1::condition_variable", i64, [8 x i8], %"class.std::__1::condition_variable", i64, [8 x i8], i64, i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.150" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.Ice::OptWorkItem"* }
%"class.Ice::OptWorkItem" = type { i32 (...)** }
%"class.std::__1::condition_variable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.156, %union.anon.158, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.156 = type { i64 }
%union.anon.158 = type { i64 }
%"class.Ice::BoundedProducerConsumerQueue.160" = type <{ [128 x %"class.std::__1::unique_ptr.161"], %"class.std::__1::mutex", [24 x i8], %"class.std::__1::condition_variable", i64, [8 x i8], %"class.std::__1::condition_variable", i64, [8 x i8], i64, i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.Ice::EmitterWorkItem"* }
%"class.std::__1::unique_ptr.168" = type { %"class.std::__1::__compressed_pair.169" }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.170" }
%"struct.std::__1::__compressed_pair_elem.170" = type { %"class.Ice::TargetDataLowering"* }
%"class.Ice::TargetDataLowering" = type opaque
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.Ice::Instrumentation"* }
%"class.Ice::Instrumentation" = type { i32 (...)**, %"class.Ice::GlobalContext"*, i8, %"class.std::__1::mutex", %"class.std::__1::condition_variable" }
%"class.llvm::SmallVector.180" = type { %"class.llvm::SmallVectorImpl.181", %"struct.llvm::SmallVectorStorage.185" }
%"class.llvm::SmallVectorImpl.181" = type { %"class.llvm::SmallVectorTemplateBase.182" }
%"class.llvm::SmallVectorTemplateBase.182" = type { %"class.llvm::SmallVectorTemplateCommon.183" }
%"class.llvm::SmallVectorTemplateCommon.183" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.184" }
%"struct.llvm::AlignedCharArrayUnion.184" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::SmallVectorStorage.185" = type { [127 x %"struct.llvm::AlignedCharArrayUnion.184"] }
%"class.llvm::SmallVector.186" = type { %"class.llvm::SmallVectorImpl.187", %"struct.llvm::SmallVectorStorage.191" }
%"class.llvm::SmallVectorImpl.187" = type { %"class.llvm::SmallVectorTemplateBase.188" }
%"class.llvm::SmallVectorTemplateBase.188" = type { %"class.llvm::SmallVectorTemplateCommon.189" }
%"class.llvm::SmallVectorTemplateCommon.189" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.190" }
%"struct.llvm::AlignedCharArrayUnion.190" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::SmallVectorStorage.191" = type { [127 x %"struct.llvm::AlignedCharArrayUnion.190"] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.100 }
%union.anon.100 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.192" = type { %"class.std::__1::__vector_base.193" }
%"class.std::__1::__vector_base.193" = type { %"class.Ice::CfgNode"**, %"class.Ice::CfgNode"**, %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195", %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.Ice::CfgNode"** }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"struct.Ice::sz_allocator" }
%"struct.Ice::sz_allocator" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::vector.197" = type { %"class.std::__1::__vector_base.198" }
%"class.std::__1::__vector_base.198" = type { %"class.Ice::Variable"**, %"class.Ice::Variable"**, %"class.std::__1::__compressed_pair.199" }
%"class.Ice::Variable" = type opaque
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.200", %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.200" = type { %"class.Ice::Variable"** }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"struct.Ice::sz_allocator.202" }
%"struct.Ice::sz_allocator.202" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.Ice::StringPool"* }
%"class.Ice::StringPool" = type { i64, %"class.std::__1::unordered_map" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.54", %"class.std::__1::__compressed_pair.63", %"class.std::__1::__compressed_pair.68", %"class.std::__1::__compressed_pair.70", [4 x i8] }>
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56", %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { float }
%"class.std::__1::unique_ptr.203" = type { %"class.std::__1::__compressed_pair.204" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205" }
%"struct.std::__1::__compressed_pair_elem.205" = type { %"class.Ice::Liveness"* }
%"class.Ice::Liveness" = type opaque
%"class.std::__1::unique_ptr.209" = type { %"class.std::__1::__compressed_pair.210" }
%"class.std::__1::__compressed_pair.210" = type { %"struct.std::__1::__compressed_pair_elem.211" }
%"struct.std::__1::__compressed_pair_elem.211" = type { %"class.Ice::TargetLowering"* }
%"class.Ice::TargetLowering" = type opaque
%"class.std::__1::unique_ptr.215" = type { %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"class.Ice::VariablesMetadata"* }
%"class.Ice::VariablesMetadata" = type opaque
%"class.std::__1::vector.221" = type { %"class.std::__1::__vector_base.222" }
%"class.std::__1::__vector_base.222" = type { %"class.Ice::InstJumpTable"**, %"class.Ice::InstJumpTable"**, %"class.std::__1::__compressed_pair.223" }
%"class.Ice::InstJumpTable" = type opaque
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.224", %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.Ice::InstJumpTable"** }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"struct.Ice::sz_allocator.226" }
%"struct.Ice::sz_allocator.226" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.Ice::CfgNode" = type opaque
%"class.std::__1::vector.227" = type { %"class.std::__1::__vector_base.228" }
%"class.std::__1::__vector_base.228" = type { %"struct.Ice::Loop"*, %"struct.Ice::Loop"*, %"class.std::__1::__compressed_pair.252" }
%"struct.Ice::Loop" = type { %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"*, %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.229" }
%"class.std::__1::__hash_table.229" = type <{ %"class.std::__1::unique_ptr.230", %"class.std::__1::__compressed_pair.239", %"class.std::__1::__compressed_pair.243", %"class.std::__1::__compressed_pair.247", [4 x i8] }>
%"class.std::__1::unique_ptr.230" = type { %"class.std::__1::__compressed_pair.231" }
%"class.std::__1::__compressed_pair.231" = type { %"struct.std::__1::__compressed_pair_elem.232", %"struct.std::__1::__compressed_pair_elem.234" }
%"struct.std::__1::__compressed_pair_elem.232" = type { %"struct.std::__1::__hash_node_base.233"** }
%"struct.std::__1::__hash_node_base.233" = type { %"struct.std::__1::__hash_node_base.233"* }
%"struct.std::__1::__compressed_pair_elem.234" = type { %"class.std::__1::__bucket_list_deallocator.235" }
%"class.std::__1::__bucket_list_deallocator.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.59", %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"struct.Ice::sz_allocator.238" }
%"struct.Ice::sz_allocator.238" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.240", %"struct.std::__1::__compressed_pair_elem.241" }
%"struct.std::__1::__compressed_pair_elem.240" = type { %"struct.std::__1::__hash_node_base.233" }
%"struct.std::__1::__compressed_pair_elem.241" = type { %"struct.Ice::sz_allocator.242" }
%"struct.Ice::sz_allocator.242" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::__compressed_pair.243" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"class.std::__1::__compressed_pair.252" = type { %"struct.std::__1::__compressed_pair_elem.253", %"struct.std::__1::__compressed_pair_elem.254" }
%"struct.std::__1::__compressed_pair_elem.253" = type { %"struct.Ice::Loop"* }
%"struct.std::__1::__compressed_pair_elem.254" = type { %"struct.Ice::sz_allocator.255" }
%"struct.Ice::sz_allocator.255" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"struct.std::__1::pair" = type { i8*, i64 }

$_ZNSt3__110unique_ptrIN3Ice23VariableDeclarationListENS_14default_deleteIS2_EEE5resetEPS2_ = comdat any

$_ZN3Ice23VariableDeclarationListD2Ev = comdat any

$_ZN3Ice23VariableDeclarationList13clearAndPurgeEv = comdat any

$_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm1048576ELm1048576EE5ResetEv = comdat any

$_ZNSt3__113__vector_baseINS_10unique_ptrIN4llvm20BumpPtrAllocatorImplINS2_15MallocAllocatorELm1048576ELm1048576EEENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEED2Ev = comdat any

$_ZNSt3__113__vector_baseINS_8functionIFvvEEENS_9allocatorIS3_EEED2Ev = comdat any

$_ZNSt3__110unique_ptrIN4llvm20BumpPtrAllocatorImplINS1_15MallocAllocatorELm1048576ELm1048576EEENS_14default_deleteIS4_EEE5resetEPS4_ = comdat any

$_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm1048576ELm1048576EED2Ev = comdat any

@_ZN3Ice15EmitterWorkItemC1Ej = hidden unnamed_addr alias void (%"class.Ice::EmitterWorkItem"*, i32), void (%"class.Ice::EmitterWorkItem"*, i32)* @_ZN3Ice15EmitterWorkItemC2Ej
@_ZN3Ice15EmitterWorkItemC1EjNSt3__110unique_ptrINS_23VariableDeclarationListENS1_14default_deleteIS3_EEEE = hidden unnamed_addr alias void (%"class.Ice::EmitterWorkItem"*, i32, %"class.Ice::VariableDeclarationList"*), void (%"class.Ice::EmitterWorkItem"*, i32, %"class.Ice::VariableDeclarationList"*)* @_ZN3Ice15EmitterWorkItemC2EjNSt3__110unique_ptrINS_23VariableDeclarationListENS1_14default_deleteIS3_EEEE
@_ZN3Ice15EmitterWorkItemC1EjNSt3__110unique_ptrINS_9AssemblerENS1_14default_deleteIS3_EEEE = hidden unnamed_addr alias void (%"class.Ice::EmitterWorkItem"*, i32, %"class.Ice::Assembler"*), void (%"class.Ice::EmitterWorkItem"*, i32, %"class.Ice::Assembler"*)* @_ZN3Ice15EmitterWorkItemC2EjNSt3__110unique_ptrINS_9AssemblerENS1_14default_deleteIS3_EEEE
@_ZN3Ice15EmitterWorkItemC1EjNSt3__110unique_ptrINS_3CfgENS1_14default_deleteIS3_EEEE = hidden unnamed_addr alias void (%"class.Ice::EmitterWorkItem"*, i32, %"class.Ice::Cfg"*), void (%"class.Ice::EmitterWorkItem"*, i32, %"class.Ice::Cfg"*)* @_ZN3Ice15EmitterWorkItemC2EjNSt3__110unique_ptrINS_3CfgENS1_14default_deleteIS3_EEEE

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZN3Ice15EmitterWorkItemC2Ej(%"class.Ice::EmitterWorkItem"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 0
  store i32 %1, i32* %3, align 8
  %4 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 1
  %5 = bitcast i32* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 28, i1 false)
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3Ice15EmitterWorkItemC2EjNSt3__110unique_ptrINS_23VariableDeclarationListENS1_14default_deleteIS3_EEEE(%"class.Ice::EmitterWorkItem"* nocapture, i32, %"class.Ice::VariableDeclarationList"*) unnamed_addr #1 align 2 {
  %4 = ptrtoint %"class.Ice::VariableDeclarationList"* %2 to i64
  %5 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 1
  store i32 1, i32* %6, align 4
  %7 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 2
  %8 = bitcast %"class.std::__1::unique_ptr"* %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 3
  %10 = bitcast %"class.std::__1::unique_ptr.32"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3Ice15EmitterWorkItemC2EjNSt3__110unique_ptrINS_9AssemblerENS1_14default_deleteIS3_EEEE(%"class.Ice::EmitterWorkItem"* nocapture, i32, %"class.Ice::Assembler"*) unnamed_addr #1 align 2 {
  %4 = ptrtoint %"class.Ice::Assembler"* %2 to i64
  %5 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 1
  store i32 2, i32* %6, align 4
  %7 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 2
  %8 = bitcast %"class.std::__1::unique_ptr"* %7 to i64*
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 3
  %10 = bitcast %"class.std::__1::unique_ptr.32"* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 4
  %12 = bitcast %"class.std::__1::unique_ptr.48"* %11 to i64*
  store i64 0, i64* %12, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3Ice15EmitterWorkItemC2EjNSt3__110unique_ptrINS_3CfgENS1_14default_deleteIS3_EEEE(%"class.Ice::EmitterWorkItem"* nocapture, i32, %"class.Ice::Cfg"*) unnamed_addr #1 align 2 {
  %4 = ptrtoint %"class.Ice::Cfg"* %2 to i64
  %5 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 1
  store i32 3, i32* %6, align 4
  %7 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 4
  %9 = bitcast %"class.std::__1::unique_ptr.48"* %8 to i64*
  %10 = bitcast %"class.std::__1::unique_ptr"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false)
  store i64 %4, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3Ice15EmitterWorkItem14setGlobalInitsENSt3__110unique_ptrINS_23VariableDeclarationListENS1_14default_deleteIS3_EEEE(%"class.Ice::EmitterWorkItem"*, %"class.Ice::VariableDeclarationList"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 2
  tail call void @_ZNSt3__110unique_ptrIN3Ice23VariableDeclarationListENS_14default_deleteIS2_EEE5resetEPS2_(%"class.std::__1::unique_ptr"* %3, %"class.Ice::VariableDeclarationList"* %1) #6
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden %"class.Ice::VariableDeclarationList"* @_ZN3Ice15EmitterWorkItem14getGlobalInitsEv(%"class.Ice::EmitterWorkItem"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.Ice::VariableDeclarationList"*, %"class.Ice::VariableDeclarationList"** %2, align 8
  store %"class.Ice::VariableDeclarationList"* null, %"class.Ice::VariableDeclarationList"** %2, align 8
  ret %"class.Ice::VariableDeclarationList"* %3
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden %"class.Ice::Assembler"* @_ZN3Ice15EmitterWorkItem6getAsmEv(%"class.Ice::EmitterWorkItem"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %3 = load %"class.Ice::Assembler"*, %"class.Ice::Assembler"** %2, align 8
  store %"class.Ice::Assembler"* null, %"class.Ice::Assembler"** %2, align 8
  ret %"class.Ice::Assembler"* %3
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden %"class.Ice::Cfg"* @_ZN3Ice15EmitterWorkItem6getCfgEv(%"class.Ice::EmitterWorkItem"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.Ice::EmitterWorkItem", %"class.Ice::EmitterWorkItem"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %3 = load %"class.Ice::Cfg"*, %"class.Ice::Cfg"** %2, align 8
  store %"class.Ice::Cfg"* null, %"class.Ice::Cfg"** %2, align 8
  ret %"class.Ice::Cfg"* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110unique_ptrIN3Ice23VariableDeclarationListENS_14default_deleteIS2_EEE5resetEPS2_(%"class.std::__1::unique_ptr"*, %"class.Ice::VariableDeclarationList"*) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.Ice::VariableDeclarationList"*, %"class.Ice::VariableDeclarationList"** %3, align 8
  store %"class.Ice::VariableDeclarationList"* %1, %"class.Ice::VariableDeclarationList"** %3, align 8
  %5 = icmp eq %"class.Ice::VariableDeclarationList"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  tail call void @_ZN3Ice23VariableDeclarationListD2Ev(%"class.Ice::VariableDeclarationList"* nonnull %4) #6
  %7 = bitcast %"class.Ice::VariableDeclarationList"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #7
  br label %8

8:                                                ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN3Ice23VariableDeclarationListD2Ev(%"class.Ice::VariableDeclarationList"*) unnamed_addr #1 comdat align 2 {
  tail call void @_ZN3Ice23VariableDeclarationList13clearAndPurgeEv(%"class.Ice::VariableDeclarationList"* %0) #8
  %2 = getelementptr inbounds %"class.Ice::VariableDeclarationList", %"class.Ice::VariableDeclarationList"* %0, i64 0, i32 3, i32 0
  tail call void @_ZNSt3__113__vector_baseINS_10unique_ptrIN4llvm20BumpPtrAllocatorImplINS2_15MallocAllocatorELm1048576ELm1048576EEENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEED2Ev(%"class.std::__1::__vector_base.23"* %2) #6
  %3 = getelementptr inbounds %"class.Ice::VariableDeclarationList", %"class.Ice::VariableDeclarationList"* %0, i64 0, i32 2, i32 0
  tail call void @_ZNSt3__113__vector_baseINS_8functionIFvvEEENS_9allocatorIS3_EEED2Ev(%"class.std::__1::__vector_base.16"* %3) #6
  %4 = getelementptr inbounds %"class.Ice::VariableDeclarationList", %"class.Ice::VariableDeclarationList"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load %"class.Ice::VariableDeclaration"**, %"class.Ice::VariableDeclaration"*** %4, align 8
  %6 = icmp eq %"class.Ice::VariableDeclaration"** %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = ptrtoint %"class.Ice::VariableDeclaration"** %5 to i64
  %9 = getelementptr inbounds %"class.Ice::VariableDeclarationList", %"class.Ice::VariableDeclarationList"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = bitcast %"class.Ice::VariableDeclaration"*** %9 to i64*
  store i64 %8, i64* %10, align 8
  %11 = bitcast %"class.Ice::VariableDeclaration"** %5 to i8*
  tail call void @_ZdlPv(i8* %11) #7
  br label %12

12:                                               ; preds = %1, %7
  %13 = getelementptr inbounds %"class.Ice::VariableDeclarationList", %"class.Ice::VariableDeclarationList"* %0, i64 0, i32 0
  tail call void @_ZNSt3__110unique_ptrIN4llvm20BumpPtrAllocatorImplINS1_15MallocAllocatorELm1048576ELm1048576EEENS_14default_deleteIS4_EEE5resetEPS4_(%"class.std::__1::unique_ptr.0"* %13, %"class.llvm::BumpPtrAllocatorImpl"* null) #6
  ret void
}

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN3Ice23VariableDeclarationList13clearAndPurgeEv(%"class.Ice::VariableDeclarationList"*) local_unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.Ice::VariableDeclarationList", %"class.Ice::VariableDeclarationList"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.llvm::BumpPtrAllocatorImpl"*, %"class.llvm::BumpPtrAllocatorImpl"** %2, align 8
  %4 = icmp eq %"class.llvm::BumpPtrAllocatorImpl"* %3, null
  br i1 %4, label %53, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.Ice::VariableDeclarationList", %"class.Ice::VariableDeclarationList"* %0, i64 0, i32 2, i32 0, i32 1
  %7 = load %"class.std::__1::function"*, %"class.std::__1::function"** %6, align 8
  %8 = getelementptr inbounds %"class.Ice::VariableDeclarationList", %"class.Ice::VariableDeclarationList"* %0, i64 0, i32 2, i32 0, i32 0
  %9 = load %"class.std::__1::function"*, %"class.std::__1::function"** %8, align 8
  %10 = icmp eq %"class.std::__1::function"* %7, %9
  br i1 %10, label %27, label %45

11:                                               ; preds = %45
  %12 = load %"class.std::__1::function"*, %"class.std::__1::function"** %6, align 8
  %13 = icmp eq %"class.std::__1::function"* %12, %47
  br i1 %13, label %27, label %14

14:                                               ; preds = %11, %25
  %15 = phi %"class.std::__1::function"* [ %16, %25 ], [ %12, %11 ]
  %16 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %15, i64 -1
  %17 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %15, i64 -1, i32 0, i32 2
  %18 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %17, align 8
  %19 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %18, i64 0, i32 1
  %20 = load void (i8*)*, void (i8*)** %19, align 8
  %21 = icmp eq void (i8*)* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %14
  %23 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %16, i64 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  tail call void %20(i8* %24) #6
  br label %25

25:                                               ; preds = %22, %14
  %26 = icmp eq %"class.std::__1::function"* %15, %46
  br i1 %26, label %27, label %14

27:                                               ; preds = %25, %5, %11
  %28 = phi %"class.std::__1::function"* [ %47, %11 ], [ %7, %5 ], [ %47, %25 ]
  store %"class.std::__1::function"* %28, %"class.std::__1::function"** %6, align 8
  %29 = getelementptr inbounds %"class.Ice::VariableDeclarationList", %"class.Ice::VariableDeclarationList"* %0, i64 0, i32 1
  %30 = bitcast %"class.std::__1::vector"* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.Ice::VariableDeclarationList", %"class.Ice::VariableDeclarationList"* %0, i64 0, i32 1, i32 0, i32 1
  %33 = bitcast %"class.Ice::VariableDeclaration"*** %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = getelementptr inbounds %"class.Ice::VariableDeclarationList", %"class.Ice::VariableDeclarationList"* %0, i64 0, i32 3, i32 0, i32 0
  %35 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %34, align 8
  %36 = getelementptr inbounds %"class.Ice::VariableDeclarationList", %"class.Ice::VariableDeclarationList"* %0, i64 0, i32 3, i32 0, i32 1
  %37 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %36, align 8
  %38 = icmp eq %"class.std::__1::unique_ptr.0"* %37, %35
  br i1 %38, label %43, label %39

39:                                               ; preds = %27, %39
  %40 = phi %"class.std::__1::unique_ptr.0"* [ %41, %39 ], [ %37, %27 ]
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %40, i64 -1
  tail call void @_ZNSt3__110unique_ptrIN4llvm20BumpPtrAllocatorImplINS1_15MallocAllocatorELm1048576ELm1048576EEENS_14default_deleteIS4_EEE5resetEPS4_(%"class.std::__1::unique_ptr.0"* %41, %"class.llvm::BumpPtrAllocatorImpl"* null) #6
  %42 = icmp eq %"class.std::__1::unique_ptr.0"* %41, %35
  br i1 %42, label %43, label %39

43:                                               ; preds = %39, %27
  store %"class.std::__1::unique_ptr.0"* %35, %"class.std::__1::unique_ptr.0"** %36, align 8
  %44 = load %"class.llvm::BumpPtrAllocatorImpl"*, %"class.llvm::BumpPtrAllocatorImpl"** %2, align 8
  tail call void @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm1048576ELm1048576EE5ResetEv(%"class.llvm::BumpPtrAllocatorImpl"* %44) #8
  br label %53

45:                                               ; preds = %5, %45
  %46 = phi %"class.std::__1::function"* [ %47, %45 ], [ %7, %5 ]
  %47 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %46, i64 -1
  %48 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %46, i64 -1, i32 0, i32 1, i32 0
  %49 = load void (%"union.std::__1::__function::__policy_storage"*)*, void (%"union.std::__1::__function::__policy_storage"*)** %48, align 8
  %50 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %47, i64 0, i32 0, i32 0
  tail call void %49(%"union.std::__1::__function::__policy_storage"* %50) #6
  %51 = load %"class.std::__1::function"*, %"class.std::__1::function"** %8, align 8
  %52 = icmp eq %"class.std::__1::function"* %47, %51
  br i1 %52, label %11, label %45

53:                                               ; preds = %1, %43
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm1048576ELm1048576EE5ResetEv(%"class.llvm::BumpPtrAllocatorImpl"*) local_unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %3 = bitcast %"class.llvm::SmallVectorTemplateCommon.6"* %2 to %"struct.std::__1::pair"**
  %4 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 1
  %6 = bitcast i8** %5 to %"struct.std::__1::pair"**
  %7 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %6, align 8
  %8 = icmp eq %"struct.std::__1::pair"* %4, %7
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = ptrtoint %"struct.std::__1::pair"* %4 to i64
  br label %21

11:                                               ; preds = %1, %11
  %12 = phi %"struct.std::__1::pair"* [ %15, %11 ], [ %4, %1 ]
  %13 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  tail call void @free(i8* %14) #6
  %15 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 1
  %16 = icmp eq %"struct.std::__1::pair"* %15, %7
  br i1 %16, label %17, label %11

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 3, i32 0
  %19 = bitcast %"class.llvm::SmallVectorImpl.4"* %18 to i64*
  %20 = load i64, i64* %19, align 8
  br label %21

21:                                               ; preds = %9, %17
  %22 = phi i64 [ %20, %17 ], [ %10, %9 ]
  %23 = bitcast i8** %5 to i64*
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 2
  %25 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %26, %28
  %30 = bitcast i8* %26 to i8**
  %31 = bitcast i8* %28 to i8**
  br i1 %29, label %54, label %32

32:                                               ; preds = %21
  %33 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 4
  store i64 0, i64* %33, align 8
  %34 = bitcast %"class.llvm::SmallVector"* %24 to i8***
  %35 = load i8*, i8** %30, align 8
  %36 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 0
  store i8* %35, i8** %36, align 8
  %37 = getelementptr inbounds i8, i8* %35, i64 1048576
  %38 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 1
  store i8* %37, i8** %38, align 8
  %39 = getelementptr inbounds i8, i8* %26, i64 8
  %40 = bitcast i8** %27 to i8***
  %41 = icmp eq i8* %39, %28
  br i1 %41, label %51, label %42

42:                                               ; preds = %32
  %43 = bitcast i8* %39 to i8**
  br label %44

44:                                               ; preds = %42, %44
  %45 = phi i8** [ %47, %44 ], [ %43, %42 ]
  %46 = load i8*, i8** %45, align 8
  tail call void @free(i8* %46) #6
  %47 = getelementptr inbounds i8*, i8** %45, i64 1
  %48 = icmp eq i8** %47, %31
  br i1 %48, label %49, label %44

49:                                               ; preds = %44
  %50 = load i8**, i8*** %34, align 8
  br label %51

51:                                               ; preds = %49, %32
  %52 = phi i8** [ %50, %49 ], [ %30, %32 ]
  %53 = getelementptr inbounds i8*, i8** %52, i64 1
  store i8** %53, i8*** %40, align 8
  br label %54

54:                                               ; preds = %21, %51
  ret void
}

; Function Attrs: nounwind optsize
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__vector_baseINS_10unique_ptrIN4llvm20BumpPtrAllocatorImplINS2_15MallocAllocatorELm1048576ELm1048576EEENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEED2Ev(%"class.std::__1::__vector_base.23"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__vector_base.23", %"class.std::__1::__vector_base.23"* %0, i64 0, i32 0
  %3 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %2, align 8
  %4 = icmp eq %"class.std::__1::unique_ptr.0"* %3, null
  br i1 %4, label %19, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.std::__1::unique_ptr.0"* %3 to i8*
  %7 = getelementptr inbounds %"class.std::__1::__vector_base.23", %"class.std::__1::__vector_base.23"* %0, i64 0, i32 1
  %8 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %7, align 8
  %9 = icmp eq %"class.std::__1::unique_ptr.0"* %8, %3
  br i1 %9, label %17, label %10

10:                                               ; preds = %5, %10
  %11 = phi %"class.std::__1::unique_ptr.0"* [ %12, %10 ], [ %8, %5 ]
  %12 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %11, i64 -1
  tail call void @_ZNSt3__110unique_ptrIN4llvm20BumpPtrAllocatorImplINS1_15MallocAllocatorELm1048576ELm1048576EEENS_14default_deleteIS4_EEE5resetEPS4_(%"class.std::__1::unique_ptr.0"* %12, %"class.llvm::BumpPtrAllocatorImpl"* null) #6
  %13 = icmp eq %"class.std::__1::unique_ptr.0"* %12, %3
  br i1 %13, label %14, label %10

14:                                               ; preds = %10
  %15 = bitcast %"class.std::__1::__vector_base.23"* %0 to i8**
  %16 = load i8*, i8** %15, align 8
  br label %17

17:                                               ; preds = %5, %14
  %18 = phi i8* [ %16, %14 ], [ %6, %5 ]
  store %"class.std::__1::unique_ptr.0"* %3, %"class.std::__1::unique_ptr.0"** %7, align 8
  tail call void @_ZdlPv(i8* %18) #7
  br label %19

19:                                               ; preds = %1, %17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__vector_baseINS_8functionIFvvEEENS_9allocatorIS3_EEED2Ev(%"class.std::__1::__vector_base.16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__vector_base.16", %"class.std::__1::__vector_base.16"* %0, i64 0, i32 0
  %3 = load %"class.std::__1::function"*, %"class.std::__1::function"** %2, align 8
  %4 = icmp eq %"class.std::__1::function"* %3, null
  br i1 %4, label %28, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.std::__1::function"* %3 to i8*
  %7 = getelementptr inbounds %"class.std::__1::__vector_base.16", %"class.std::__1::__vector_base.16"* %0, i64 0, i32 1
  %8 = load %"class.std::__1::function"*, %"class.std::__1::function"** %7, align 8
  %9 = icmp eq %"class.std::__1::function"* %8, %3
  br i1 %9, label %26, label %10

10:                                               ; preds = %5, %21
  %11 = phi %"class.std::__1::function"* [ %12, %21 ], [ %8, %5 ]
  %12 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %11, i64 -1
  %13 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %11, i64 -1, i32 0, i32 2
  %14 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %13, align 8
  %15 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %14, i64 0, i32 1
  %16 = load void (i8*)*, void (i8*)** %15, align 8
  %17 = icmp eq void (i8*)* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %12, i64 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  tail call void %16(i8* %20) #6
  br label %21

21:                                               ; preds = %18, %10
  %22 = icmp eq %"class.std::__1::function"* %12, %3
  br i1 %22, label %23, label %10

23:                                               ; preds = %21
  %24 = bitcast %"class.std::__1::__vector_base.16"* %0 to i8**
  %25 = load i8*, i8** %24, align 8
  br label %26

26:                                               ; preds = %5, %23
  %27 = phi i8* [ %25, %23 ], [ %6, %5 ]
  store %"class.std::__1::function"* %3, %"class.std::__1::function"** %7, align 8
  tail call void @_ZdlPv(i8* %27) #7
  br label %28

28:                                               ; preds = %1, %26
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110unique_ptrIN4llvm20BumpPtrAllocatorImplINS1_15MallocAllocatorELm1048576ELm1048576EEENS_14default_deleteIS4_EEE5resetEPS4_(%"class.std::__1::unique_ptr.0"*, %"class.llvm::BumpPtrAllocatorImpl"*) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.llvm::BumpPtrAllocatorImpl"*, %"class.llvm::BumpPtrAllocatorImpl"** %3, align 8
  store %"class.llvm::BumpPtrAllocatorImpl"* %1, %"class.llvm::BumpPtrAllocatorImpl"** %3, align 8
  %5 = icmp eq %"class.llvm::BumpPtrAllocatorImpl"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  tail call void @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm1048576ELm1048576EED2Ev(%"class.llvm::BumpPtrAllocatorImpl"* nonnull %4) #6
  %7 = bitcast %"class.llvm::BumpPtrAllocatorImpl"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #7
  br label %8

8:                                                ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm1048576ELm1048576EED2Ev(%"class.llvm::BumpPtrAllocatorImpl"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 2
  %3 = bitcast %"class.llvm::SmallVector"* %2 to i8***
  %4 = load i8**, i8*** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i8***
  %7 = load i8**, i8*** %6, align 8
  %8 = icmp eq i8** %4, %7
  br i1 %8, label %14, label %9

9:                                                ; preds = %1, %9
  %10 = phi i8** [ %12, %9 ], [ %4, %1 ]
  %11 = load i8*, i8** %10, align 8
  tail call void @free(i8* %11) #6
  %12 = getelementptr inbounds i8*, i8** %10, i64 1
  %13 = icmp eq i8** %12, %7
  br i1 %13, label %14, label %9

14:                                               ; preds = %9, %1
  %15 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %16 = bitcast %"class.llvm::SmallVectorTemplateCommon.6"* %15 to %"struct.std::__1::pair"**
  %17 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %16, align 8
  %18 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = bitcast i8** %18 to %"struct.std::__1::pair"**
  %20 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %19, align 8
  %21 = icmp eq %"struct.std::__1::pair"* %17, %20
  %22 = bitcast %"struct.std::__1::pair"* %17 to i8*
  br i1 %21, label %32, label %23

23:                                               ; preds = %14, %23
  %24 = phi %"struct.std::__1::pair"* [ %27, %23 ], [ %17, %14 ]
  %25 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %24, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  tail call void @free(i8* %26) #6
  %27 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %24, i64 1
  %28 = icmp eq %"struct.std::__1::pair"* %27, %20
  br i1 %28, label %29, label %23

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  br label %32

32:                                               ; preds = %29, %14
  %33 = phi i8* [ %31, %29 ], [ %22, %14 ]
  %34 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %35 = icmp eq i8* %33, %34
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  tail call void @free(i8* %33) #6
  br label %37

37:                                               ; preds = %32, %36
  %38 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %41 = icmp eq i8* %39, %40
  br i1 %41, label %43, label %42

42:                                               ; preds = %37
  tail call void @free(i8* %39) #6
  br label %43

43:                                               ; preds = %37, %42
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind optsize ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind optsize }
attributes #7 = { builtin nounwind optsize }
attributes #8 = { optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
