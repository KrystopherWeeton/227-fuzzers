; ModuleID = '../../media/video/video_encoder_info.cc'
source_filename = "../../media/video/video_encoder_info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.media::ResolutionBitrateLimit" = type { %"class.gfx::Size", i32, i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"struct.media::VideoEncoderInfo" = type { %"class.std::__1::basic_string", i8, i8, i8, i8, [5 x %"class.std::__1::vector"], %"class.std::__1::vector.6" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.media::ResolutionBitrateLimit"*, %"struct.media::ResolutionBitrateLimit"*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.media::ResolutionBitrateLimit"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN5media22ResolutionBitrateLimitC1Ev = hidden unnamed_addr alias void (%"struct.media::ResolutionBitrateLimit"*), void (%"struct.media::ResolutionBitrateLimit"*)* @_ZN5media22ResolutionBitrateLimitC2Ev
@_ZN5media22ResolutionBitrateLimitC1ERKS0_ = hidden unnamed_addr alias void (%"struct.media::ResolutionBitrateLimit"*, %"struct.media::ResolutionBitrateLimit"*), void (%"struct.media::ResolutionBitrateLimit"*, %"struct.media::ResolutionBitrateLimit"*)* @_ZN5media22ResolutionBitrateLimitC2ERKS0_
@_ZN5media22ResolutionBitrateLimitC1ERKN3gfx4SizeEiii = hidden unnamed_addr alias void (%"struct.media::ResolutionBitrateLimit"*, %"class.gfx::Size"*, i32, i32, i32), void (%"struct.media::ResolutionBitrateLimit"*, %"class.gfx::Size"*, i32, i32, i32)* @_ZN5media22ResolutionBitrateLimitC2ERKN3gfx4SizeEiii
@_ZN5media22ResolutionBitrateLimitD1Ev = hidden unnamed_addr alias void (%"struct.media::ResolutionBitrateLimit"*), void (%"struct.media::ResolutionBitrateLimit"*)* @_ZN5media22ResolutionBitrateLimitD2Ev
@_ZN5media16VideoEncoderInfoC1Ev = hidden unnamed_addr alias void (%"struct.media::VideoEncoderInfo"*), void (%"struct.media::VideoEncoderInfo"*)* @_ZN5media16VideoEncoderInfoC2Ev
@_ZN5media16VideoEncoderInfoC1ERKS0_ = hidden unnamed_addr alias void (%"struct.media::VideoEncoderInfo"*, %"struct.media::VideoEncoderInfo"*), void (%"struct.media::VideoEncoderInfo"*, %"struct.media::VideoEncoderInfo"*)* @_ZN5media16VideoEncoderInfoC2ERKS0_
@_ZN5media16VideoEncoderInfoD1Ev = hidden unnamed_addr alias void (%"struct.media::VideoEncoderInfo"*), void (%"struct.media::VideoEncoderInfo"*)* @_ZN5media16VideoEncoderInfoD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5media22ResolutionBitrateLimitC2Ev(%"struct.media::ResolutionBitrateLimit"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.media::ResolutionBitrateLimit"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 20, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media22ResolutionBitrateLimitC2ERKS0_(%"struct.media::ResolutionBitrateLimit"* nocapture, %"struct.media::ResolutionBitrateLimit"* nocapture readonly dereferenceable(20)) unnamed_addr #1 align 2 {
  %3 = bitcast %"struct.media::ResolutionBitrateLimit"* %0 to i8*
  %4 = bitcast %"struct.media::ResolutionBitrateLimit"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 20, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media22ResolutionBitrateLimitC2ERKN3gfx4SizeEiii(%"struct.media::ResolutionBitrateLimit"* nocapture, %"class.gfx::Size"* nocapture readonly dereferenceable(8), i32, i32, i32) unnamed_addr #3 align 2 {
  %6 = bitcast %"class.gfx::Size"* %1 to i64*
  %7 = bitcast %"struct.media::ResolutionBitrateLimit"* %0 to i64*
  %8 = load i64, i64* %6, align 4
  store i64 %8, i64* %7, align 4
  %9 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %0, i64 0, i32 1
  store i32 %2, i32* %9, align 4
  %10 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %0, i64 0, i32 2
  store i32 %3, i32* %10, align 4
  %11 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %0, i64 0, i32 3
  store i32 %4, i32* %11, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5media22ResolutionBitrateLimitD2Ev(%"struct.media::ResolutionBitrateLimit"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media16VideoEncoderInfoC2Ev(%"struct.media::VideoEncoderInfo"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"struct.media::VideoEncoderInfo"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #12
  %3 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 1
  store i8 1, i8* %3, align 8
  %4 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 2
  store i8 0, i8* %4, align 1
  %5 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 3
  store i8 1, i8* %5, align 2
  %6 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 4
  store i8 0, i8* %6, align 1
  %7 = getelementptr %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 0
  %8 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 144, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media16VideoEncoderInfoC2ERKS0_(%"struct.media::VideoEncoderInfo"*, %"struct.media::VideoEncoderInfo"* nocapture readonly dereferenceable(176)) unnamed_addr #1 align 2 {
  %3 = bitcast %"struct.media::VideoEncoderInfo"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = bitcast %"struct.media::VideoEncoderInfo"* %0 to i8*
  %9 = bitcast %"struct.media::VideoEncoderInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false) #12
  br label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 0
  %12 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %11, i8* %13, i64 %15) #12
  br label %16

16:                                               ; preds = %7, %10
  %17 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 1
  %18 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 1
  %19 = bitcast i8* %18 to i32*
  %20 = bitcast i8* %17 to i32*
  %21 = load i32, i32* %19, align 8
  store i32 %21, i32* %20, align 8
  br label %22

22:                                               ; preds = %56, %16
  %23 = phi i64 [ 0, %16 ], [ %57, %56 ]
  %24 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 %23
  %25 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 5, i64 %23
  %26 = bitcast %"class.std::__1::vector"* %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #12
  %27 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 5, i64 %23, i32 0, i32 1
  %28 = bitcast i8** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.std::__1::vector"* %25 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %29, %31
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %56, label %34

34:                                               ; preds = %22
  %35 = icmp slt i64 %32, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %34
  %37 = bitcast %"class.std::__1::vector"* %24 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #13
  unreachable

38:                                               ; preds = %34
  %39 = tail call i8* @_Znwm(i64 %32) #14
  %40 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 %23, i32 0, i32 1
  store i8* %39, i8** %40, align 8
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %24, i64 0, i32 0, i32 0
  store i8* %39, i8** %41, align 8
  %42 = getelementptr inbounds i8, i8* %39, i64 %32
  %43 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 %23, i32 0, i32 2, i32 0, i32 0
  store i8* %42, i8** %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = load i64, i64* %28, align 8
  %47 = bitcast i8** %40 to i64*
  %48 = ptrtoint i8* %45 to i64
  %49 = sub i64 %46, %48
  %50 = icmp sgt i64 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %38
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %39, i8* align 1 %45, i64 %49, i1 false) #12
  %52 = getelementptr inbounds i8, i8* %39, i64 %49
  br label %53

53:                                               ; preds = %51, %38
  %54 = phi i8* [ %52, %51 ], [ %39, %38 ]
  %55 = ptrtoint i8* %54 to i64
  store i64 %55, i64* %47, align 8
  br label %56

56:                                               ; preds = %22, %53
  %57 = add nuw nsw i64 %23, 1
  %58 = icmp eq i64 %57, 5
  br i1 %58, label %59, label %22

59:                                               ; preds = %56
  %60 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 6
  %61 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 6
  %62 = bitcast %"class.std::__1::vector.6"* %60 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 24, i1 false) #12
  %63 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 6, i32 0, i32 1
  %64 = bitcast %"struct.media::ResolutionBitrateLimit"** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.std::__1::vector.6"* %61 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %65, %67
  %69 = sdiv exact i64 %68, 20
  %70 = icmp eq i64 %68, 0
  br i1 %70, label %101, label %71

71:                                               ; preds = %59
  %72 = icmp ugt i64 %69, 922337203685477580
  br i1 %72, label %73, label %75

73:                                               ; preds = %71
  %74 = bitcast %"class.std::__1::vector.6"* %60 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %74) #13
  unreachable

75:                                               ; preds = %71
  %76 = tail call i8* @_Znwm(i64 %68) #14
  %77 = bitcast i8* %76 to %"struct.media::ResolutionBitrateLimit"*
  %78 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 6, i32 0, i32 1
  %79 = bitcast %"struct.media::ResolutionBitrateLimit"** %78 to i8**
  store i8* %76, i8** %79, align 8
  %80 = bitcast %"class.std::__1::vector.6"* %60 to i8**
  store i8* %76, i8** %80, align 8
  %81 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %77, i64 %69
  %82 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  store %"struct.media::ResolutionBitrateLimit"* %81, %"struct.media::ResolutionBitrateLimit"** %82, align 8
  %83 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %61, i64 0, i32 0, i32 0
  %84 = load %"struct.media::ResolutionBitrateLimit"*, %"struct.media::ResolutionBitrateLimit"** %83, align 8
  %85 = load %"struct.media::ResolutionBitrateLimit"*, %"struct.media::ResolutionBitrateLimit"** %63, align 8
  %86 = bitcast %"struct.media::ResolutionBitrateLimit"** %78 to i64*
  %87 = ptrtoint i8* %76 to i64
  %88 = icmp eq %"struct.media::ResolutionBitrateLimit"* %84, %85
  br i1 %88, label %99, label %89

89:                                               ; preds = %75, %89
  %90 = phi %"struct.media::ResolutionBitrateLimit"* [ %95, %89 ], [ %77, %75 ]
  %91 = phi %"struct.media::ResolutionBitrateLimit"* [ %94, %89 ], [ %84, %75 ]
  %92 = bitcast %"struct.media::ResolutionBitrateLimit"* %90 to i8*
  %93 = bitcast %"struct.media::ResolutionBitrateLimit"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %92, i8* align 4 %93, i64 20, i1 false) #12
  %94 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %91, i64 1
  %95 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %90, i64 1
  %96 = icmp eq %"struct.media::ResolutionBitrateLimit"* %94, %85
  br i1 %96, label %97, label %89

97:                                               ; preds = %89
  %98 = ptrtoint %"struct.media::ResolutionBitrateLimit"* %95 to i64
  br label %99

99:                                               ; preds = %97, %75
  %100 = phi i64 [ %87, %75 ], [ %98, %97 ]
  store i64 %100, i64* %86, align 8
  br label %101

101:                                              ; preds = %59, %99
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media16VideoEncoderInfoD2Ev(%"struct.media::VideoEncoderInfo"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 6, i32 0, i32 0
  %3 = load %"struct.media::ResolutionBitrateLimit"*, %"struct.media::ResolutionBitrateLimit"** %2, align 8
  %4 = icmp eq %"struct.media::ResolutionBitrateLimit"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"struct.media::ResolutionBitrateLimit"* %3 to i64
  %7 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 6, i32 0, i32 1
  %8 = bitcast %"struct.media::ResolutionBitrateLimit"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"struct.media::ResolutionBitrateLimit"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #14
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 4, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = ptrtoint i8* %12 to i64
  %16 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 4, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  store i64 %15, i64* %17, align 8
  tail call void @_ZdlPv(i8* nonnull %12) #14
  br label %18

18:                                               ; preds = %10, %14
  %19 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 3, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %30, label %26

22:                                               ; preds = %54
  %23 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  tail call void @_ZdlPv(i8* %24) #14
  br label %25

25:                                               ; preds = %54, %22
  ret void

26:                                               ; preds = %18
  %27 = ptrtoint i8* %20 to i64
  %28 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 3, i32 0, i32 1
  %29 = bitcast i8** %28 to i64*
  store i64 %27, i64* %29, align 8
  tail call void @_ZdlPv(i8* nonnull %20) #14
  br label %30

30:                                               ; preds = %26, %18
  %31 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 2, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = ptrtoint i8* %32 to i64
  %36 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 2, i32 0, i32 1
  %37 = bitcast i8** %36 to i64*
  store i64 %35, i64* %37, align 8
  tail call void @_ZdlPv(i8* nonnull %32) #14
  br label %38

38:                                               ; preds = %34, %30
  %39 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 1, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = icmp eq i8* %40, null
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = ptrtoint i8* %40 to i64
  %44 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 1, i32 0, i32 1
  %45 = bitcast i8** %44 to i64*
  store i64 %43, i64* %45, align 8
  tail call void @_ZdlPv(i8* nonnull %40) #14
  br label %46

46:                                               ; preds = %42, %38
  %47 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %54, label %50

50:                                               ; preds = %46
  %51 = ptrtoint i8* %48 to i64
  %52 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 0, i32 0, i32 1
  %53 = bitcast i8** %52 to i64*
  store i64 %51, i64* %53, align 8
  tail call void @_ZdlPv(i8* nonnull %48) #14
  br label %54

54:                                               ; preds = %50, %46
  %55 = bitcast %"struct.media::VideoEncoderInfo"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %56 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %55, i64 0, i32 1, i32 0
  %57 = load i8, i8* %56, align 1
  %58 = icmp slt i8 %57, 0
  br i1 %58, label %22, label %25
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5mediaeqERKNS_22ResolutionBitrateLimitES2_(%"struct.media::ResolutionBitrateLimit"* nocapture readonly dereferenceable(20), %"struct.media::ResolutionBitrateLimit"* nocapture readonly dereferenceable(20)) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %1, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %32

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %0, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %1, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %32

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %20, label %32

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %0, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %1, i64 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %22, %24
  br i1 %25, label %26, label %32

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %0, i64 0, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %1, i64 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %28, %30
  br label %32

32:                                               ; preds = %2, %26, %20, %14, %8
  %33 = phi i1 [ false, %20 ], [ false, %14 ], [ false, %8 ], [ %31, %26 ], [ false, %2 ]
  ret i1 %33
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5mediaeqERKNS_16VideoEncoderInfoES2_(%"struct.media::VideoEncoderInfo"* nocapture readonly dereferenceable(176), %"struct.media::VideoEncoderInfo"* nocapture readonly dereferenceable(176)) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 0
  %4 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 5, i64 0
  %5 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %3 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 5, i64 0, i32 0, i32 1
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::vector"* %4 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = icmp eq i64 %10, %16
  %18 = inttoptr i64 %9 to i8*
  %19 = inttoptr i64 %7 to i8*
  br i1 %17, label %20, label %166

20:                                               ; preds = %2
  %21 = icmp eq i8* %18, %19
  br i1 %21, label %34, label %22

22:                                               ; preds = %20
  %23 = inttoptr i64 %15 to i8*
  br label %24

24:                                               ; preds = %30, %22
  %25 = phi i8* [ %32, %30 ], [ %23, %22 ]
  %26 = phi i8* [ %31, %30 ], [ %18, %22 ]
  %27 = load i8, i8* %26, align 1
  %28 = load i8, i8* %25, align 1
  %29 = icmp eq i8 %27, %28
  br i1 %29, label %30, label %166

30:                                               ; preds = %24
  %31 = getelementptr inbounds i8, i8* %26, i64 1
  %32 = getelementptr inbounds i8, i8* %25, i64 1
  %33 = icmp eq i8* %31, %19
  br i1 %33, label %34, label %24

34:                                               ; preds = %30, %20
  %35 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 1
  %36 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 5, i64 1
  %37 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 1, i32 0, i32 1
  %38 = bitcast i8** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector"* %35 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 5, i64 1, i32 0, i32 1
  %44 = bitcast i8** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = bitcast %"class.std::__1::vector"* %36 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %45, %47
  %49 = icmp eq i64 %42, %48
  %50 = inttoptr i64 %41 to i8*
  %51 = inttoptr i64 %39 to i8*
  br i1 %49, label %168, label %166

52:                                               ; preds = %278
  %53 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"struct.media::VideoEncoderInfo"* %0 to i8*
  %56 = select i1 %282, i8* %54, i8* %55
  %57 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = bitcast %"struct.media::VideoEncoderInfo"* %1 to i8*
  %60 = select i1 %290, i8* %58, i8* %59
  %61 = icmp eq i64 %286, 0
  br i1 %282, label %68, label %62

62:                                               ; preds = %52
  br i1 %61, label %84, label %63

63:                                               ; preds = %62
  %64 = ptrtoint i8* %54 to i64
  %65 = trunc i64 %64 to i8
  %66 = load i8, i8* %60, align 1
  %67 = icmp eq i8 %66, %65
  br i1 %67, label %69, label %166

68:                                               ; preds = %52
  br i1 %61, label %84, label %81

69:                                               ; preds = %63, %76
  %70 = phi i64 [ %73, %76 ], [ %285, %63 ]
  %71 = phi i8* [ %74, %76 ], [ %55, %63 ]
  %72 = phi i8* [ %77, %76 ], [ %60, %63 ]
  %73 = add i64 %70, -1
  %74 = getelementptr inbounds i8, i8* %71, i64 1
  %75 = icmp eq i64 %73, 0
  br i1 %75, label %84, label %76

76:                                               ; preds = %69
  %77 = getelementptr inbounds i8, i8* %72, i64 1
  %78 = load i8, i8* %74, align 1
  %79 = load i8, i8* %77, align 1
  %80 = icmp eq i8 %78, %79
  br i1 %80, label %69, label %166

81:                                               ; preds = %68
  %82 = tail call i32 @bcmp(i8* %56, i8* %60, i64 %286) #12
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %166

84:                                               ; preds = %69, %62, %68, %81
  %85 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 1
  %86 = load i8, i8* %85, align 8, !range !2
  %87 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 1
  %88 = load i8, i8* %87, align 8, !range !2
  %89 = icmp eq i8 %86, %88
  br i1 %89, label %90, label %166

90:                                               ; preds = %84
  %91 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 2
  %92 = load i8, i8* %91, align 1, !range !2
  %93 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 2
  %94 = load i8, i8* %93, align 1, !range !2
  %95 = icmp eq i8 %92, %94
  br i1 %95, label %96, label %166

96:                                               ; preds = %90
  %97 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 3
  %98 = load i8, i8* %97, align 2, !range !2
  %99 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 3
  %100 = load i8, i8* %99, align 2, !range !2
  %101 = icmp eq i8 %98, %100
  br i1 %101, label %102, label %166

102:                                              ; preds = %96
  %103 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 4
  %104 = load i8, i8* %103, align 1, !range !2
  %105 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 4
  %106 = load i8, i8* %105, align 1, !range !2
  %107 = icmp eq i8 %104, %106
  br i1 %107, label %108, label %166

108:                                              ; preds = %102
  %109 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 6
  %110 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 6
  %111 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 6, i32 0, i32 1
  %112 = bitcast %"struct.media::ResolutionBitrateLimit"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.std::__1::vector.6"* %109 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = sub i64 %113, %115
  %117 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 6, i32 0, i32 1
  %118 = bitcast %"struct.media::ResolutionBitrateLimit"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.std::__1::vector.6"* %110 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = sub i64 %119, %121
  %123 = icmp eq i64 %116, %122
  %124 = inttoptr i64 %115 to %"struct.media::ResolutionBitrateLimit"*
  %125 = inttoptr i64 %113 to %"struct.media::ResolutionBitrateLimit"*
  br i1 %123, label %126, label %166

126:                                              ; preds = %108
  %127 = icmp eq %"struct.media::ResolutionBitrateLimit"* %124, %125
  br i1 %127, label %166, label %128

128:                                              ; preds = %126
  %129 = inttoptr i64 %121 to %"struct.media::ResolutionBitrateLimit"*
  br label %130

130:                                              ; preds = %128, %162
  %131 = phi %"struct.media::ResolutionBitrateLimit"* [ %164, %162 ], [ %129, %128 ]
  %132 = phi %"struct.media::ResolutionBitrateLimit"* [ %163, %162 ], [ %124, %128 ]
  %133 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %132, i64 0, i32 0, i32 0
  %134 = load i32, i32* %133, align 4
  %135 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %131, i64 0, i32 0, i32 0
  %136 = load i32, i32* %135, align 4
  %137 = icmp eq i32 %134, %136
  br i1 %137, label %138, label %166

138:                                              ; preds = %130
  %139 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %132, i64 0, i32 0, i32 1
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %131, i64 0, i32 0, i32 1
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %140, %142
  br i1 %143, label %144, label %166

144:                                              ; preds = %138
  %145 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %132, i64 0, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %131, i64 0, i32 1
  %148 = load i32, i32* %147, align 4
  %149 = icmp eq i32 %146, %148
  br i1 %149, label %150, label %166

150:                                              ; preds = %144
  %151 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %132, i64 0, i32 2
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %131, i64 0, i32 2
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %152, %154
  br i1 %155, label %156, label %166

156:                                              ; preds = %150
  %157 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %132, i64 0, i32 3
  %158 = load i32, i32* %157, align 4
  %159 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %131, i64 0, i32 3
  %160 = load i32, i32* %159, align 4
  %161 = icmp eq i32 %158, %160
  br i1 %161, label %162, label %166

162:                                              ; preds = %156
  %163 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %132, i64 1
  %164 = getelementptr inbounds %"struct.media::ResolutionBitrateLimit", %"struct.media::ResolutionBitrateLimit"* %131, i64 1
  %165 = icmp eq %"struct.media::ResolutionBitrateLimit"* %163, %125
  br i1 %165, label %166, label %130

166:                                              ; preds = %24, %172, %204, %236, %268, %76, %162, %156, %150, %144, %138, %130, %63, %2, %34, %182, %214, %246, %278, %126, %108, %81, %84, %90, %96, %102
  %167 = phi i1 [ false, %102 ], [ false, %96 ], [ false, %90 ], [ false, %84 ], [ false, %81 ], [ false, %108 ], [ true, %126 ], [ false, %278 ], [ false, %246 ], [ false, %214 ], [ false, %182 ], [ false, %34 ], [ false, %2 ], [ false, %63 ], [ false, %156 ], [ false, %150 ], [ false, %144 ], [ false, %138 ], [ false, %130 ], [ true, %162 ], [ false, %76 ], [ false, %268 ], [ false, %236 ], [ false, %204 ], [ false, %172 ], [ false, %24 ]
  ret i1 %167

168:                                              ; preds = %34
  %169 = icmp eq i8* %50, %51
  br i1 %169, label %182, label %170

170:                                              ; preds = %168
  %171 = inttoptr i64 %47 to i8*
  br label %172

172:                                              ; preds = %178, %170
  %173 = phi i8* [ %180, %178 ], [ %171, %170 ]
  %174 = phi i8* [ %179, %178 ], [ %50, %170 ]
  %175 = load i8, i8* %174, align 1
  %176 = load i8, i8* %173, align 1
  %177 = icmp eq i8 %175, %176
  br i1 %177, label %178, label %166

178:                                              ; preds = %172
  %179 = getelementptr inbounds i8, i8* %174, i64 1
  %180 = getelementptr inbounds i8, i8* %173, i64 1
  %181 = icmp eq i8* %179, %51
  br i1 %181, label %182, label %172

182:                                              ; preds = %178, %168
  %183 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 2
  %184 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 5, i64 2
  %185 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 2, i32 0, i32 1
  %186 = bitcast i8** %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = bitcast %"class.std::__1::vector"* %183 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = sub i64 %187, %189
  %191 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 5, i64 2, i32 0, i32 1
  %192 = bitcast i8** %191 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = bitcast %"class.std::__1::vector"* %184 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = sub i64 %193, %195
  %197 = icmp eq i64 %190, %196
  %198 = inttoptr i64 %189 to i8*
  %199 = inttoptr i64 %187 to i8*
  br i1 %197, label %200, label %166

200:                                              ; preds = %182
  %201 = icmp eq i8* %198, %199
  br i1 %201, label %214, label %202

202:                                              ; preds = %200
  %203 = inttoptr i64 %195 to i8*
  br label %204

204:                                              ; preds = %210, %202
  %205 = phi i8* [ %212, %210 ], [ %203, %202 ]
  %206 = phi i8* [ %211, %210 ], [ %198, %202 ]
  %207 = load i8, i8* %206, align 1
  %208 = load i8, i8* %205, align 1
  %209 = icmp eq i8 %207, %208
  br i1 %209, label %210, label %166

210:                                              ; preds = %204
  %211 = getelementptr inbounds i8, i8* %206, i64 1
  %212 = getelementptr inbounds i8, i8* %205, i64 1
  %213 = icmp eq i8* %211, %199
  br i1 %213, label %214, label %204

214:                                              ; preds = %210, %200
  %215 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 3
  %216 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 5, i64 3
  %217 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 3, i32 0, i32 1
  %218 = bitcast i8** %217 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = bitcast %"class.std::__1::vector"* %215 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = sub i64 %219, %221
  %223 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 5, i64 3, i32 0, i32 1
  %224 = bitcast i8** %223 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = bitcast %"class.std::__1::vector"* %216 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = sub i64 %225, %227
  %229 = icmp eq i64 %222, %228
  %230 = inttoptr i64 %221 to i8*
  %231 = inttoptr i64 %219 to i8*
  br i1 %229, label %232, label %166

232:                                              ; preds = %214
  %233 = icmp eq i8* %230, %231
  br i1 %233, label %246, label %234

234:                                              ; preds = %232
  %235 = inttoptr i64 %227 to i8*
  br label %236

236:                                              ; preds = %242, %234
  %237 = phi i8* [ %244, %242 ], [ %235, %234 ]
  %238 = phi i8* [ %243, %242 ], [ %230, %234 ]
  %239 = load i8, i8* %238, align 1
  %240 = load i8, i8* %237, align 1
  %241 = icmp eq i8 %239, %240
  br i1 %241, label %242, label %166

242:                                              ; preds = %236
  %243 = getelementptr inbounds i8, i8* %238, i64 1
  %244 = getelementptr inbounds i8, i8* %237, i64 1
  %245 = icmp eq i8* %243, %231
  br i1 %245, label %246, label %236

246:                                              ; preds = %242, %232
  %247 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 4
  %248 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 5, i64 4
  %249 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 5, i64 4, i32 0, i32 1
  %250 = bitcast i8** %249 to i64*
  %251 = load i64, i64* %250, align 8
  %252 = bitcast %"class.std::__1::vector"* %247 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = sub i64 %251, %253
  %255 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 5, i64 4, i32 0, i32 1
  %256 = bitcast i8** %255 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = bitcast %"class.std::__1::vector"* %248 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = sub i64 %257, %259
  %261 = icmp eq i64 %254, %260
  %262 = inttoptr i64 %253 to i8*
  %263 = inttoptr i64 %251 to i8*
  br i1 %261, label %264, label %166

264:                                              ; preds = %246
  %265 = icmp eq i8* %262, %263
  br i1 %265, label %278, label %266

266:                                              ; preds = %264
  %267 = inttoptr i64 %259 to i8*
  br label %268

268:                                              ; preds = %274, %266
  %269 = phi i8* [ %276, %274 ], [ %267, %266 ]
  %270 = phi i8* [ %275, %274 ], [ %262, %266 ]
  %271 = load i8, i8* %270, align 1
  %272 = load i8, i8* %269, align 1
  %273 = icmp eq i8 %271, %272
  br i1 %273, label %274, label %166

274:                                              ; preds = %268
  %275 = getelementptr inbounds i8, i8* %270, i64 1
  %276 = getelementptr inbounds i8, i8* %269, i64 1
  %277 = icmp eq i8* %275, %263
  br i1 %277, label %278, label %268

278:                                              ; preds = %274, %264
  %279 = bitcast %"struct.media::VideoEncoderInfo"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %280 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %279, i64 0, i32 1, i32 0
  %281 = load i8, i8* %280, align 1
  %282 = icmp slt i8 %281, 0
  %283 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %284 = load i64, i64* %283, align 8
  %285 = zext i8 %281 to i64
  %286 = select i1 %282, i64 %284, i64 %285
  %287 = bitcast %"struct.media::VideoEncoderInfo"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %288 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %287, i64 0, i32 1, i32 0
  %289 = load i8, i8* %288, align 1
  %290 = icmp slt i8 %289, 0
  %291 = getelementptr inbounds %"struct.media::VideoEncoderInfo", %"struct.media::VideoEncoderInfo"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %292 = load i64, i64* %291, align 8
  %293 = zext i8 %289 to i64
  %294 = select i1 %290, i64 %292, i64 %293
  %295 = icmp eq i64 %286, %294
  br i1 %295, label %52, label %166
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #8

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #11

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind readonly }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
