; ModuleID = '../../third_party/blink/renderer/platform/audio/up_sampler.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/up_sampler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::UpSampler" = type { i64, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.7", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::DirectConvolver"* }
%"class.blink::DirectConvolver" = type { i64, %"class.blink::AudioArray", %"class.std::__1::unique_ptr.0", %"class.blink::AudioArray" }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.blink::AudioArray"* }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.blink::SimpleFFTConvolver"* }
%"class.blink::SimpleFFTConvolver" = type { i64, %"class.blink::FFTFrame", %"class.blink::FFTFrame", %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::FFTFrame" = type { i32, i32, %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::AudioArray" = type <{ float*, float*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink10AudioArrayIfE8AllocateEm = comdat any

@.str = private unnamed_addr constant [54 x i8] c"n <= std::numeric_limits<unsigned>::max() / sizeof(T)\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"../../third_party/blink/renderer/platform/audio/audio_array.h\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"allocation_\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv = private unnamed_addr constant [72 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::AudioArray<float>]\00", align 1

@_ZN5blink9UpSamplerC1Em = hidden unnamed_addr alias void (%"class.blink::UpSampler"*, i64), void (%"class.blink::UpSampler"*, i64)* @_ZN5blink9UpSamplerC2Em

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9UpSamplerC2Em(%"class.blink::UpSampler"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::unique_ptr.0", align 8
  %4 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 0
  store i64 %1, i64* %4, align 8
  %5 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 1
  %6 = bitcast %"class.std::__1::unique_ptr"* %5 to i64*
  %7 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 2
  %8 = bitcast %"class.std::__1::unique_ptr.7"* %7 to i64*
  %9 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 3
  %10 = bitcast %"class.std::__1::unique_ptr"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 36, i1 false)
  tail call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %9, i64 %1) #8
  %11 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 4
  %12 = shl i64 %1, 1
  %13 = bitcast %"class.blink::AudioArray"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 20, i1 false) #8
  tail call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %11, i64 %12) #8
  %14 = bitcast %"class.std::__1::unique_ptr.0"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::AudioArray"* inttoptr (i64 -6148914691236517206 to %"class.blink::AudioArray"*), %"class.blink::AudioArray"** %15, align 8
  %16 = tail call noalias i8* @malloc(i64 24) #8
  %17 = bitcast i8* %16 to %"class.blink::AudioArray"*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 20, i1 false) #8
  tail call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %17, i64 128) #8
  %18 = getelementptr inbounds i8, i8* %16, i64 16
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sdiv i32 %20, 2
  %22 = icmp sgt i32 %20, 0
  br i1 %22, label %23, label %58

23:                                               ; preds = %2
  %24 = sitofp i32 %20 to double
  %25 = getelementptr inbounds i8, i8* %16, i64 8
  %26 = bitcast i8* %25 to float**
  %27 = zext i32 %20 to i64
  br label %28

28:                                               ; preds = %39, %23
  %29 = phi i64 [ 0, %23 ], [ %56, %39 ]
  %30 = trunc i64 %29 to i32
  %31 = sub nsw i32 %30, %21
  %32 = sitofp i32 %31 to double
  %33 = fadd double %32, 5.000000e-01
  %34 = fmul double %33, 0x400921FB54442D18
  %35 = fcmp une double %34, 0.000000e+00
  br i1 %35, label %36, label %39

36:                                               ; preds = %28
  %37 = tail call double @_ZN6fdlibm3sinEd(double %34) #8
  %38 = fdiv double %37, %34
  br label %39

39:                                               ; preds = %36, %28
  %40 = phi double [ %38, %36 ], [ 1.000000e+00, %28 ]
  %41 = sitofp i32 %30 to double
  %42 = fadd double %41, 5.000000e-01
  %43 = fdiv double %42, %24
  %44 = fmul double %43, 0x401921FB54442D18
  %45 = tail call double @_ZN6fdlibm3cosEd(double %44) #8
  %46 = fmul double %45, 5.000000e-01
  %47 = fsub double 4.200000e-01, %46
  %48 = fmul double %43, 0x402921FB54442D18
  %49 = tail call double @_ZN6fdlibm3cosEd(double %48) #8
  %50 = fmul double %49, 8.000000e-02
  %51 = fadd double %47, %50
  %52 = fmul double %40, %51
  %53 = fptrunc double %52 to float
  %54 = load float*, float** %26, align 8
  %55 = getelementptr inbounds float, float* %54, i64 %29
  store float %53, float* %55, align 4
  %56 = add nuw nsw i64 %29, 1
  %57 = icmp eq i64 %56, %27
  br i1 %57, label %58, label %28

58:                                               ; preds = %39, %2
  %59 = bitcast %"class.std::__1::unique_ptr.0"* %3 to i8**
  store i8* %16, i8** %59, align 8
  %60 = load i64, i64* %4, align 8
  %61 = icmp ult i64 %60, 129
  br i1 %61, label %62, label %85

62:                                               ; preds = %58
  %63 = tail call noalias i8* @malloc(i64 64) #8
  %64 = bitcast i8* %63 to %"class.blink::DirectConvolver"*
  store %"class.blink::AudioArray"* null, %"class.blink::AudioArray"** %15, align 8
  tail call void @_ZN5blink15DirectConvolverC1EmNSt3__110unique_ptrINS_10AudioArrayIfEENS1_14default_deleteIS4_EEEE(%"class.blink::DirectConvolver"* %64, i64 %60, %"class.blink::AudioArray"* %17) #8
  %65 = ptrtoint i8* %63 to i64
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %5, i64 0, i32 0, i32 0, i32 0
  %67 = load %"class.blink::DirectConvolver"*, %"class.blink::DirectConvolver"** %66, align 8
  store i64 %65, i64* %6, align 8
  %68 = icmp eq %"class.blink::DirectConvolver"* %67, null
  br i1 %68, label %105, label %69

69:                                               ; preds = %62
  %70 = getelementptr inbounds %"class.blink::DirectConvolver", %"class.blink::DirectConvolver"* %67, i64 0, i32 3
  %71 = bitcast %"class.blink::AudioArray"* %70 to i8**
  %72 = load i8*, i8** %71, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %72) #8
  %73 = getelementptr inbounds %"class.blink::DirectConvolver", %"class.blink::DirectConvolver"* %67, i64 0, i32 2, i32 0, i32 0, i32 0
  %74 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %73, align 8
  store %"class.blink::AudioArray"* null, %"class.blink::AudioArray"** %73, align 8
  %75 = icmp eq %"class.blink::AudioArray"* %74, null
  br i1 %75, label %80, label %76

76:                                               ; preds = %69
  %77 = bitcast %"class.blink::AudioArray"* %74 to i8**
  %78 = load i8*, i8** %77, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %78) #8
  %79 = bitcast %"class.blink::AudioArray"* %74 to i8*
  tail call void @free(i8* %79) #8
  br label %80

80:                                               ; preds = %76, %69
  %81 = getelementptr inbounds %"class.blink::DirectConvolver", %"class.blink::DirectConvolver"* %67, i64 0, i32 1
  %82 = bitcast %"class.blink::AudioArray"* %81 to i8**
  %83 = load i8*, i8** %82, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %83) #8
  %84 = bitcast %"class.blink::DirectConvolver"* %67 to i8*
  tail call void @free(i8* %84) #8
  br label %105

85:                                               ; preds = %58
  %86 = tail call noalias i8* @malloc(i64 288) #8
  %87 = bitcast i8* %86 to %"class.blink::SimpleFFTConvolver"*
  call void @_ZN5blink18SimpleFFTConvolverC1EmRKNSt3__110unique_ptrINS_10AudioArrayIfEENS1_14default_deleteIS4_EEEE(%"class.blink::SimpleFFTConvolver"* %87, i64 %60, %"class.std::__1::unique_ptr.0"* nonnull dereferenceable(8) %3) #8
  %88 = ptrtoint i8* %86 to i64
  %89 = getelementptr inbounds %"class.std::__1::unique_ptr.7", %"class.std::__1::unique_ptr.7"* %7, i64 0, i32 0, i32 0, i32 0
  %90 = load %"class.blink::SimpleFFTConvolver"*, %"class.blink::SimpleFFTConvolver"** %89, align 8
  store i64 %88, i64* %8, align 8
  %91 = icmp eq %"class.blink::SimpleFFTConvolver"* %90, null
  br i1 %91, label %105, label %92

92:                                               ; preds = %85
  %93 = getelementptr inbounds %"class.blink::SimpleFFTConvolver", %"class.blink::SimpleFFTConvolver"* %90, i64 0, i32 5
  %94 = bitcast %"class.blink::AudioArray"* %93 to i8**
  %95 = load i8*, i8** %94, align 8
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %95) #8
  %96 = getelementptr inbounds %"class.blink::SimpleFFTConvolver", %"class.blink::SimpleFFTConvolver"* %90, i64 0, i32 4
  %97 = bitcast %"class.blink::AudioArray"* %96 to i8**
  %98 = load i8*, i8** %97, align 8
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %98) #8
  %99 = getelementptr inbounds %"class.blink::SimpleFFTConvolver", %"class.blink::SimpleFFTConvolver"* %90, i64 0, i32 3
  %100 = bitcast %"class.blink::AudioArray"* %99 to i8**
  %101 = load i8*, i8** %100, align 8
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %101) #8
  %102 = getelementptr inbounds %"class.blink::SimpleFFTConvolver", %"class.blink::SimpleFFTConvolver"* %90, i64 0, i32 2
  call void @_ZN5blink8FFTFrameD1Ev(%"class.blink::FFTFrame"* %102) #8
  %103 = getelementptr inbounds %"class.blink::SimpleFFTConvolver", %"class.blink::SimpleFFTConvolver"* %90, i64 0, i32 1
  call void @_ZN5blink8FFTFrameD1Ev(%"class.blink::FFTFrame"* %103) #8
  %104 = bitcast %"class.blink::SimpleFFTConvolver"* %90 to i8*
  call void @free(i8* %104) #8
  br label %105

105:                                              ; preds = %85, %92, %62, %80
  %106 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %15, align 8
  store %"class.blink::AudioArray"* null, %"class.blink::AudioArray"** %15, align 8
  %107 = icmp eq %"class.blink::AudioArray"* %106, null
  br i1 %107, label %112, label %108

108:                                              ; preds = %105
  %109 = bitcast %"class.blink::AudioArray"* %106 to i8**
  %110 = load i8*, i8** %109, align 8
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %110) #8
  %111 = bitcast %"class.blink::AudioArray"* %106 to i8*
  call void @free(i8* %111) #8
  br label %112

112:                                              ; preds = %105, %108
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9UpSampler7ProcessEPKfPfm(%"class.blink::UpSampler"* nocapture readonly, float*, float* nocapture, i64) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %6 = load %"class.blink::DirectConvolver"*, %"class.blink::DirectConvolver"** %5, align 8
  %7 = icmp eq %"class.blink::DirectConvolver"* %6, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.blink::DirectConvolver", %"class.blink::DirectConvolver"* %6, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %10, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  br label %19

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %16 = load %"class.blink::SimpleFFTConvolver"*, %"class.blink::SimpleFFTConvolver"** %15, align 8
  %17 = getelementptr inbounds %"class.blink::SimpleFFTConvolver", %"class.blink::SimpleFFTConvolver"* %16, i64 0, i32 0
  %18 = load i64, i64* %17, align 8
  br label %19

19:                                               ; preds = %14, %8
  %20 = phi i64 [ %13, %8 ], [ %18, %14 ]
  %21 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 4, i32 1
  %22 = load float*, float** %21, align 8
  %23 = getelementptr inbounds float, float* %22, i64 %3
  %24 = bitcast float* %23 to i8*
  %25 = bitcast float* %1 to i8*
  %26 = shl i64 %3, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %24, i8* align 4 %25, i64 %26, i1 false)
  %27 = icmp eq i64 %3, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %19
  %29 = lshr i64 %20, 1
  %30 = sub nsw i64 0, %29
  %31 = getelementptr inbounds float, float* %23, i64 %30
  br label %37

32:                                               ; preds = %37, %19
  %33 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 3, i32 1
  %34 = load float*, float** %33, align 8
  %35 = load %"class.blink::DirectConvolver"*, %"class.blink::DirectConvolver"** %5, align 8
  %36 = icmp eq %"class.blink::DirectConvolver"* %35, null
  br i1 %36, label %52, label %50

37:                                               ; preds = %28, %37
  %38 = phi i64 [ 0, %28 ], [ %48, %37 ]
  %39 = phi i32 [ 0, %28 ], [ %47, %37 ]
  %40 = getelementptr inbounds float, float* %31, i64 %38
  %41 = bitcast float* %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = shl i32 %39, 1
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds float, float* %2, i64 %44
  %46 = bitcast float* %45 to i32*
  store i32 %42, i32* %46, align 4
  %47 = add i32 %39, 1
  %48 = zext i32 %47 to i64
  %49 = icmp ult i64 %48, %3
  br i1 %49, label %37, label %32

50:                                               ; preds = %32
  %51 = trunc i64 %3 to i32
  tail call void @_ZN5blink15DirectConvolver7ProcessEPKfPfj(%"class.blink::DirectConvolver"* nonnull %35, float* %1, float* %34, i32 %51) #8
  br label %56

52:                                               ; preds = %32
  %53 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %54 = load %"class.blink::SimpleFFTConvolver"*, %"class.blink::SimpleFFTConvolver"** %53, align 8
  %55 = trunc i64 %3 to i32
  tail call void @_ZN5blink18SimpleFFTConvolver7ProcessEPKfPfj(%"class.blink::SimpleFFTConvolver"* %54, float* %1, float* %34, i32 %55) #8
  br label %56

56:                                               ; preds = %52, %50
  br i1 %27, label %57, label %60

57:                                               ; preds = %60, %56
  %58 = bitcast float** %21 to i8**
  %59 = load i8*, i8** %58, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %24, i64 %26, i1 false)
  ret void

60:                                               ; preds = %56, %60
  %61 = phi i64 [ %72, %60 ], [ 0, %56 ]
  %62 = phi i32 [ %71, %60 ], [ 0, %56 ]
  %63 = getelementptr inbounds float, float* %34, i64 %61
  %64 = bitcast float* %63 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = shl i32 %62, 1
  %67 = or i32 %66, 1
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds float, float* %2, i64 %68
  %70 = bitcast float* %69 to i32*
  store i32 %65, i32* %70, align 4
  %71 = add i32 %62, 1
  %72 = zext i32 %71 to i64
  %73 = icmp ult i64 %72, %3
  br i1 %73, label %60, label %57
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN5blink15DirectConvolver7ProcessEPKfPfj(%"class.blink::DirectConvolver"*, float*, float*, i32) local_unnamed_addr #2

declare void @_ZN5blink18SimpleFFTConvolver7ProcessEPKfPfj(%"class.blink::SimpleFFTConvolver"*, float*, float*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9UpSampler5ResetEv(%"class.blink::UpSampler"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.blink::DirectConvolver"*, %"class.blink::DirectConvolver"** %2, align 8
  store %"class.blink::DirectConvolver"* null, %"class.blink::DirectConvolver"** %2, align 8
  %4 = icmp eq %"class.blink::DirectConvolver"* %3, null
  br i1 %4, label %21, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::DirectConvolver", %"class.blink::DirectConvolver"* %3, i64 0, i32 3
  %7 = bitcast %"class.blink::AudioArray"* %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %8) #8
  %9 = getelementptr inbounds %"class.blink::DirectConvolver", %"class.blink::DirectConvolver"* %3, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %9, align 8
  store %"class.blink::AudioArray"* null, %"class.blink::AudioArray"** %9, align 8
  %11 = icmp eq %"class.blink::AudioArray"* %10, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %5
  %13 = bitcast %"class.blink::AudioArray"* %10 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %14) #8
  %15 = bitcast %"class.blink::AudioArray"* %10 to i8*
  tail call void @free(i8* %15) #8
  br label %16

16:                                               ; preds = %12, %5
  %17 = getelementptr inbounds %"class.blink::DirectConvolver", %"class.blink::DirectConvolver"* %3, i64 0, i32 1
  %18 = bitcast %"class.blink::AudioArray"* %17 to i8**
  %19 = load i8*, i8** %18, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %19) #8
  %20 = bitcast %"class.blink::DirectConvolver"* %3 to i8*
  tail call void @free(i8* %20) #8
  br label %21

21:                                               ; preds = %1, %16
  %22 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %23 = load %"class.blink::SimpleFFTConvolver"*, %"class.blink::SimpleFFTConvolver"** %22, align 8
  store %"class.blink::SimpleFFTConvolver"* null, %"class.blink::SimpleFFTConvolver"** %22, align 8
  %24 = icmp eq %"class.blink::SimpleFFTConvolver"* %23, null
  br i1 %24, label %38, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.blink::SimpleFFTConvolver", %"class.blink::SimpleFFTConvolver"* %23, i64 0, i32 5
  %27 = bitcast %"class.blink::AudioArray"* %26 to i8**
  %28 = load i8*, i8** %27, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %28) #8
  %29 = getelementptr inbounds %"class.blink::SimpleFFTConvolver", %"class.blink::SimpleFFTConvolver"* %23, i64 0, i32 4
  %30 = bitcast %"class.blink::AudioArray"* %29 to i8**
  %31 = load i8*, i8** %30, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %31) #8
  %32 = getelementptr inbounds %"class.blink::SimpleFFTConvolver", %"class.blink::SimpleFFTConvolver"* %23, i64 0, i32 3
  %33 = bitcast %"class.blink::AudioArray"* %32 to i8**
  %34 = load i8*, i8** %33, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %34) #8
  %35 = getelementptr inbounds %"class.blink::SimpleFFTConvolver", %"class.blink::SimpleFFTConvolver"* %23, i64 0, i32 2
  tail call void @_ZN5blink8FFTFrameD1Ev(%"class.blink::FFTFrame"* %35) #8
  %36 = getelementptr inbounds %"class.blink::SimpleFFTConvolver", %"class.blink::SimpleFFTConvolver"* %23, i64 0, i32 1
  tail call void @_ZN5blink8FFTFrameD1Ev(%"class.blink::FFTFrame"* %36) #8
  %37 = bitcast %"class.blink::SimpleFFTConvolver"* %23 to i8*
  tail call void @free(i8* %37) #8
  br label %38

38:                                               ; preds = %21, %25
  %39 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 4, i32 1
  %40 = bitcast float** %39 to i8**
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 4, i32 2
  %43 = load i32, i32* %42, align 8
  %44 = zext i32 %43 to i64
  %45 = shl nuw nsw i64 %44, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %41, i8 0, i64 %45, i1 false) #8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK5blink9UpSampler13LatencyFramesEv(%"class.blink::UpSampler"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.blink::DirectConvolver"*, %"class.blink::DirectConvolver"** %2, align 8
  %4 = icmp eq %"class.blink::DirectConvolver"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::DirectConvolver", %"class.blink::DirectConvolver"* %3, i64 0, i32 2, i32 0, i32 0, i32 0
  %7 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  br label %16

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.blink::UpSampler", %"class.blink::UpSampler"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %13 = load %"class.blink::SimpleFFTConvolver"*, %"class.blink::SimpleFFTConvolver"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::SimpleFFTConvolver", %"class.blink::SimpleFFTConvolver"* %13, i64 0, i32 0
  %15 = load i64, i64* %14, align 8
  br label %16

16:                                               ; preds = %11, %5
  %17 = phi i64 [ %10, %5 ], [ %15, %11 ]
  %18 = lshr i64 %17, 1
  ret i64 %18
}

declare double @_ZN6fdlibm3sinEd(double) local_unnamed_addr #2

declare double @_ZN6fdlibm3cosEd(double) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #8
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = icmp ugt i64 %1, 1073741823
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* null, i8** %8, align 8
  br label %21

12:                                               ; preds = %2
  %13 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #8
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1073741823) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i8* %13, i8* %14) #8
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* %16, i8** %8, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 63, %"class.logging::CheckOpResult"* nonnull %4) #8
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #8
  br label %21

21:                                               ; preds = %11, %12, %18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #8
  %22 = trunc i64 %1 to i32
  %23 = shl i32 %22, 2
  %24 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 0
  %25 = load float*, float** %24, align 8
  %26 = icmp eq float* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %21
  %28 = bitcast float* %25 to i8*
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %28) #8
  br label %29

29:                                               ; preds = %21, %27
  %30 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %23, i32 32) #8
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %29
  call void @llvm.trap() #8
  unreachable

33:                                               ; preds = %29
  %34 = extractvalue { i32, i1 } %30, 0
  %35 = zext i32 %34 to i64
  %36 = call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 %35, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv, i64 0, i64 0)) #8
  %37 = bitcast %"class.blink::AudioArray"* %0 to i8**
  store i8* %36, i8** %37, align 8
  %38 = icmp eq i8* %36, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %33
  %40 = ptrtoint i8* %36 to i64
  br label %46

41:                                               ; preds = %33
  %42 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)) #8
  %43 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #8
  %44 = bitcast %"class.blink::AudioArray"* %0 to i64*
  %45 = load i64, i64* %44, align 8
  br label %46

46:                                               ; preds = %39, %41
  %47 = phi i64 [ %40, %39 ], [ %45, %41 ]
  %48 = add i64 %47, 31
  %49 = and i64 %48, -32
  %50 = inttoptr i64 %49 to float*
  %51 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 1
  store float* %50, float** %51, align 8
  %52 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 2
  store i32 %22, i32* %52, align 8
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

declare void @_ZN5blink15DirectConvolverC1EmNSt3__110unique_ptrINS_10AudioArrayIfEENS1_14default_deleteIS4_EEEE(%"class.blink::DirectConvolver"*, i64, %"class.blink::AudioArray"*) unnamed_addr #2

declare void @_ZN5blink18SimpleFFTConvolverC1EmRKNSt3__110unique_ptrINS_10AudioArrayIfEENS1_14default_deleteIS4_EEEE(%"class.blink::SimpleFFTConvolver"*, i64, %"class.std::__1::unique_ptr.0"* dereferenceable(8)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink8FFTFrameD1Ev(%"class.blink::FFTFrame"*) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
