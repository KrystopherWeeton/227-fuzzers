; ModuleID = '../../third_party/skia/src/core/SkSpriteBlitter_RGB565.cpp'
source_filename = "../../third_party/skia/src/core/SkSpriteBlitter_RGB565.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkSpriteBlitter = type { %class.SkBlitter, %class.SkPixmap, %class.SkPixmap, i32, i32, %class.SkPaint* }
%class.SkBlitter = type { i32 (...)**, %class.SkAutoMalloc }
%class.SkAutoMalloc = type { %"class.std::__1::unique_ptr", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkPaint = type <{ %class.sk_sp.7, %class.sk_sp.8, %class.sk_sp.9, %class.sk_sp.10, %class.sk_sp.11, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.7 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.8 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.sk_sp.9 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.10 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.11 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.Sprite_D16_S32 = type <{ %class.SkSpriteBlitter, i8, [7 x i8] }>
%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.Sprite_D8_S32 = type <{ %class.SkSpriteBlitter, i8, [7 x i8] }>

$_ZZN12SkArenaAlloc4makeIZNS_4makeI14Sprite_D16_S32JRK8SkPixmap11SkBlendModeEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS7_ENUlPcE_8__invokeESG_ = comdat any

$_ZN14Sprite_D16_S32D0Ev = comdat any

$_ZN14Sprite_D16_S328blitRectEiiii = comdat any

$_ZN9SkBlitter10blitAntiH2Eiijj = comdat any

$_ZN9SkBlitter10blitAntiV2Eiijj = comdat any

$_ZNK9SkBlitter20requestRowsPreservedEv = comdat any

$_ZN9SkBlitter15allocBlitMemoryEm = comdat any

$_ZZN12SkArenaAlloc4makeIZNS_4makeI13Sprite_D8_S32JRK8SkPixmap11SkBlendModeEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS7_ENUlPcE_8__invokeESG_ = comdat any

$_ZN15SkSpriteBlitterD2Ev = comdat any

$_ZN13Sprite_D8_S32D0Ev = comdat any

$_ZN13Sprite_D8_S328blitRectEiiii = comdat any

$_ZTV14Sprite_D16_S32 = comdat any

$_ZTV13Sprite_D8_S32 = comdat any

@_ZTV14Sprite_D16_S32 = linkonce_odr hidden unnamed_addr constant { [17 x i8*] } { [17 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkSpriteBlitter*)* @_ZN15SkSpriteBlitterD2Ev to i8*), i8* bitcast (void (%class.Sprite_D16_S32*)* @_ZN14Sprite_D16_S32D0Ev to i8*), i8* bitcast (void (%class.SkSpriteBlitter*, i32, i32, i32)* @_ZN15SkSpriteBlitter5blitHEiii to i8*), i8* bitcast (void (%class.SkSpriteBlitter*, i32, i32, i8*, i16*)* @_ZN15SkSpriteBlitter9blitAntiHEiiPKhPKs to i8*), i8* bitcast (void (%class.SkSpriteBlitter*, i32, i32, i32, i8)* @_ZN15SkSpriteBlitter5blitVEiiih to i8*), i8* bitcast (void (%class.Sprite_D16_S32*, i32, i32, i32, i32)* @_ZN14Sprite_D16_S328blitRectEiiii to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)* @_ZN9SkBlitter12blitAntiRectEiiiihh to i8*), i8* bitcast (void (%class.SkSpriteBlitter*, %struct.SkMask*, %struct.SkIRect*)* @_ZN15SkSpriteBlitter8blitMaskERK6SkMaskRK7SkIRect to i8*), i8* bitcast (%class.SkPixmap* (%class.SkBlitter*, i32*)* @_ZN9SkBlitter17justAnOpaqueColorEPj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiH2Eiijj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiV2Eiijj to i8*), i8* bitcast (i1 (%class.SkBlitter*)* @_ZNK9SkBlitter13isNullBlitterEv to i8*), i8* bitcast (i32 (%class.SkBlitter*)* @_ZNK9SkBlitter20requestRowsPreservedEv to i8*), i8* bitcast (i8* (%class.SkBlitter*, i64)* @_ZN9SkBlitter15allocBlitMemoryEm to i8*), i8* bitcast (i1 (%class.SkSpriteBlitter*, %class.SkPixmap*, i32, i32, %class.SkPaint*)* @_ZN15SkSpriteBlitter5setupERK8SkPixmapiiRK7SkPaint to i8*)] }, comdat, align 8
@_ZTV15SkSpriteBlitter = external unnamed_addr constant { [17 x i8*] }, align 8
@_ZTV13Sprite_D8_S32 = linkonce_odr hidden unnamed_addr constant { [17 x i8*] } { [17 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkSpriteBlitter*)* @_ZN15SkSpriteBlitterD2Ev to i8*), i8* bitcast (void (%class.Sprite_D8_S32*)* @_ZN13Sprite_D8_S32D0Ev to i8*), i8* bitcast (void (%class.SkSpriteBlitter*, i32, i32, i32)* @_ZN15SkSpriteBlitter5blitHEiii to i8*), i8* bitcast (void (%class.SkSpriteBlitter*, i32, i32, i8*, i16*)* @_ZN15SkSpriteBlitter9blitAntiHEiiPKhPKs to i8*), i8* bitcast (void (%class.SkSpriteBlitter*, i32, i32, i32, i8)* @_ZN15SkSpriteBlitter5blitVEiiih to i8*), i8* bitcast (void (%class.Sprite_D8_S32*, i32, i32, i32, i32)* @_ZN13Sprite_D8_S328blitRectEiiii to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)* @_ZN9SkBlitter12blitAntiRectEiiiihh to i8*), i8* bitcast (void (%class.SkSpriteBlitter*, %struct.SkMask*, %struct.SkIRect*)* @_ZN15SkSpriteBlitter8blitMaskERK6SkMaskRK7SkIRect to i8*), i8* bitcast (%class.SkPixmap* (%class.SkBlitter*, i32*)* @_ZN9SkBlitter17justAnOpaqueColorEPj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiH2Eiijj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiV2Eiijj to i8*), i8* bitcast (i1 (%class.SkBlitter*)* @_ZNK9SkBlitter13isNullBlitterEv to i8*), i8* bitcast (i32 (%class.SkBlitter*)* @_ZNK9SkBlitter20requestRowsPreservedEv to i8*), i8* bitcast (i8* (%class.SkBlitter*, i64)* @_ZN9SkBlitter15allocBlitMemoryEm to i8*), i8* bitcast (i1 (%class.SkSpriteBlitter*, %class.SkPixmap*, i32, i32, %class.SkPaint*)* @_ZN15SkSpriteBlitter5setupERK8SkPixmapiiRK7SkPaint to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkSpriteBlitter* @_ZN15SkSpriteBlitter10ChooseL565ERK8SkPixmapRK7SkPaintP12SkArenaAlloc(%class.SkPixmap* dereferenceable(40), %class.SkPaint* nocapture readonly dereferenceable(72), %class.SkArenaAlloc*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %1, i64 0, i32 3, i32 0
  %5 = load %class.SkColorFilter*, %class.SkColorFilter** %4, align 8
  %6 = icmp eq %class.SkColorFilter* %5, null
  br i1 %6, label %7, label %58

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %1, i64 0, i32 2, i32 0
  %9 = load %class.SkMaskFilter*, %class.SkMaskFilter** %8, align 8
  %10 = icmp eq %class.SkMaskFilter* %9, null
  br i1 %10, label %11, label %58

11:                                               ; preds = %7
  %12 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %1, i64 0, i32 5, i32 3
  %13 = load float, float* %12, align 4
  %14 = fmul float %13, 2.550000e+02
  %15 = fadd float %14, 5.000000e-01
  %16 = tail call float @llvm.floor.f32(float %15) #7
  %17 = fcmp olt float %16, 0x41DFFFFFE0000000
  %18 = select i1 %17, float %16, float 0x41DFFFFFE0000000
  %19 = fcmp ogt float %18, 0xC1DFFFFFE0000000
  %20 = select i1 %19, float %18, float 0xC1DFFFFFE0000000
  %21 = fptosi float %20 to i32
  %22 = trunc i32 %21 to i8
  %23 = icmp eq i8 %22, -1
  br i1 %23, label %24, label %58

24:                                               ; preds = %11
  %25 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, 6
  br i1 %27, label %28, label %58

28:                                               ; preds = %24
  %29 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %1, i64 0, i32 8, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = lshr i32 %30, 10
  %32 = trunc i32 %31 to i8
  switch i8 %32, label %58 [
    i8 1, label %33
    i8 3, label %33
  ]

33:                                               ; preds = %28, %28
  %34 = and i32 %30, 261120
  %35 = tail call i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc* %2, i32 137, i32 8) #7
  %36 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %2, i64 0, i32 1
  %37 = bitcast i8** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = ptrtoint i8* %35 to i64
  %40 = sub i64 %39, %38
  %41 = trunc i64 %40 to i32
  %42 = getelementptr inbounds i8, i8* %35, i64 128
  store i8* %42, i8** %36, align 8
  tail call void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc* %2, i8* (i8*)* nonnull @_ZZN12SkArenaAlloc4makeIZNS_4makeI14Sprite_D16_S32JRK8SkPixmap11SkBlendModeEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS7_ENUlPcE_8__invokeESG_, i32 %41) #7
  %43 = bitcast i8* %35 to %class.SkSpriteBlitter*
  tail call void @_ZN15SkSpriteBlitterC2ERK8SkPixmap(%class.SkSpriteBlitter* %43, %class.SkPixmap* dereferenceable(40) %0) #7
  %44 = bitcast i8* %35 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV14Sprite_D16_S32, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %44, align 8
  %45 = icmp eq i32 %34, 3072
  br i1 %45, label %46, label %55

46:                                               ; preds = %33
  %47 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 1
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = load i32, i32* %25, align 8
  %52 = tail call zeroext i1 @_Z25SkColorTypeIsAlwaysOpaque11SkColorType(i32 %51) #7
  %53 = xor i1 %52, true
  %54 = zext i1 %53 to i8
  br label %55

55:                                               ; preds = %33, %46, %50
  %56 = phi i8 [ 0, %33 ], [ 0, %46 ], [ %54, %50 ]
  %57 = getelementptr inbounds i8, i8* %35, i64 120
  store i8 %56, i8* %57, align 8
  br label %58

58:                                               ; preds = %55, %11, %28, %24, %7, %3
  %59 = phi %class.SkSpriteBlitter* [ null, %3 ], [ null, %7 ], [ %43, %55 ], [ null, %11 ], [ null, %28 ], [ null, %24 ]
  ret %class.SkSpriteBlitter* %59
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkSpriteBlitter* @_ZN15SkSpriteBlitter9ChooseLA8ERK8SkPixmapRK7SkPaintP12SkArenaAlloc(%class.SkPixmap* dereferenceable(40), %class.SkPaint* nocapture readonly dereferenceable(72), %class.SkArenaAlloc*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %1, i64 0, i32 3, i32 0
  %5 = load %class.SkColorFilter*, %class.SkColorFilter** %4, align 8
  %6 = icmp eq %class.SkColorFilter* %5, null
  br i1 %6, label %7, label %58

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %1, i64 0, i32 2, i32 0
  %9 = load %class.SkMaskFilter*, %class.SkMaskFilter** %8, align 8
  %10 = icmp eq %class.SkMaskFilter* %9, null
  br i1 %10, label %11, label %58

11:                                               ; preds = %7
  %12 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %1, i64 0, i32 5, i32 3
  %13 = load float, float* %12, align 4
  %14 = fmul float %13, 2.550000e+02
  %15 = fadd float %14, 5.000000e-01
  %16 = tail call float @llvm.floor.f32(float %15) #7
  %17 = fcmp olt float %16, 0x41DFFFFFE0000000
  %18 = select i1 %17, float %16, float 0x41DFFFFFE0000000
  %19 = fcmp ogt float %18, 0xC1DFFFFFE0000000
  %20 = select i1 %19, float %18, float 0xC1DFFFFFE0000000
  %21 = fptosi float %20 to i32
  %22 = trunc i32 %21 to i8
  %23 = icmp eq i8 %22, -1
  br i1 %23, label %24, label %58

24:                                               ; preds = %11
  %25 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, 6
  br i1 %27, label %28, label %58

28:                                               ; preds = %24
  %29 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %1, i64 0, i32 8, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = lshr i32 %30, 10
  %32 = trunc i32 %31 to i8
  switch i8 %32, label %58 [
    i8 1, label %33
    i8 3, label %33
  ]

33:                                               ; preds = %28, %28
  %34 = and i32 %30, 261120
  %35 = tail call i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc* %2, i32 137, i32 8) #7
  %36 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %2, i64 0, i32 1
  %37 = bitcast i8** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = ptrtoint i8* %35 to i64
  %40 = sub i64 %39, %38
  %41 = trunc i64 %40 to i32
  %42 = getelementptr inbounds i8, i8* %35, i64 128
  store i8* %42, i8** %36, align 8
  tail call void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc* %2, i8* (i8*)* nonnull @_ZZN12SkArenaAlloc4makeIZNS_4makeI13Sprite_D8_S32JRK8SkPixmap11SkBlendModeEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS7_ENUlPcE_8__invokeESG_, i32 %41) #7
  %43 = bitcast i8* %35 to %class.SkSpriteBlitter*
  tail call void @_ZN15SkSpriteBlitterC2ERK8SkPixmap(%class.SkSpriteBlitter* %43, %class.SkPixmap* dereferenceable(40) %0) #7
  %44 = bitcast i8* %35 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV13Sprite_D8_S32, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %44, align 8
  %45 = icmp eq i32 %34, 3072
  br i1 %45, label %46, label %55

46:                                               ; preds = %33
  %47 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 1
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = load i32, i32* %25, align 8
  %52 = tail call zeroext i1 @_Z25SkColorTypeIsAlwaysOpaque11SkColorType(i32 %51) #7
  %53 = xor i1 %52, true
  %54 = zext i1 %53 to i8
  br label %55

55:                                               ; preds = %33, %46, %50
  %56 = phi i8 [ 0, %33 ], [ 0, %46 ], [ %54, %50 ]
  %57 = getelementptr inbounds i8, i8* %35, i64 120
  store i8 %56, i8* %57, align 8
  br label %58

58:                                               ; preds = %55, %11, %28, %24, %7, %3
  %59 = phi %class.SkSpriteBlitter* [ null, %3 ], [ null, %7 ], [ %43, %55 ], [ null, %11 ], [ null, %28 ], [ null, %24 ]
  ret %class.SkSpriteBlitter* %59
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #2

declare i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #3

declare void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc*, i8* (i8*)*, i32) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZZN12SkArenaAlloc4makeIZNS_4makeI14Sprite_D16_S32JRK8SkPixmap11SkBlendModeEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS7_ENUlPcE_8__invokeESG_(i8*) #4 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -137
  %3 = bitcast i8* %2 to %class.Sprite_D16_S32*
  %4 = bitcast i8* %2 to void (%class.Sprite_D16_S32*)***
  %5 = load void (%class.Sprite_D16_S32*)**, void (%class.Sprite_D16_S32*)*** %4, align 8
  %6 = load void (%class.Sprite_D16_S32*)*, void (%class.Sprite_D16_S32*)** %5, align 8
  tail call void %6(%class.Sprite_D16_S32* %3) #7
  ret i8* %2
}

declare void @_ZN15SkSpriteBlitterC2ERK8SkPixmap(%class.SkSpriteBlitter*, %class.SkPixmap* dereferenceable(40)) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN14Sprite_D16_S32D0Ev(%class.Sprite_D16_S32*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.Sprite_D16_S32, %class.Sprite_D16_S32* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV15SkSpriteBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.Sprite_D16_S32, %class.Sprite_D16_S32* %0, i64 0, i32 0, i32 2, i32 2, i32 0, i32 0, i32 0
  %4 = load %class.SkColorSpace*, %class.SkColorSpace** %3, align 8
  %5 = icmp eq %class.SkColorSpace* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorSpace* %4 to i8*
  tail call void @_ZdlPv(i8* %11) #8
  br label %12

12:                                               ; preds = %10, %6, %1
  %13 = getelementptr inbounds %class.Sprite_D16_S32, %class.Sprite_D16_S32* %0, i64 0, i32 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %14 = load %class.SkColorSpace*, %class.SkColorSpace** %13, align 8
  %15 = icmp eq %class.SkColorSpace* %14, null
  br i1 %15, label %22, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw add i32* %17, i32 -1 acq_rel
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %22

20:                                               ; preds = %16
  %21 = bitcast %class.SkColorSpace* %14 to i8*
  tail call void @_ZdlPv(i8* %21) #8
  br label %22

22:                                               ; preds = %12, %16, %20
  %23 = getelementptr inbounds %class.Sprite_D16_S32, %class.Sprite_D16_S32* %0, i64 0, i32 0, i32 0
  tail call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %23) #7
  %24 = bitcast %class.Sprite_D16_S32* %0 to i8*
  tail call void @_ZdlPv(i8* %24) #8
  ret void
}

declare void @_ZN15SkSpriteBlitter5blitHEiii(%class.SkSpriteBlitter*, i32, i32, i32) unnamed_addr #3

declare void @_ZN15SkSpriteBlitter9blitAntiHEiiPKhPKs(%class.SkSpriteBlitter*, i32, i32, i8*, i16*) unnamed_addr #3

declare void @_ZN15SkSpriteBlitter5blitVEiiih(%class.SkSpriteBlitter*, i32, i32, i32, i8 zeroext) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN14Sprite_D16_S328blitRectEiiii(%class.Sprite_D16_S32*, i32, i32, i32, i32) unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %class.Sprite_D16_S32, %class.Sprite_D16_S32* %0, i64 0, i32 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds %class.Sprite_D16_S32, %class.Sprite_D16_S32* %0, i64 0, i32 0, i32 1, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %10, %8
  %12 = getelementptr inbounds i8, i8* %7, i64 %11
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = getelementptr inbounds %class.Sprite_D16_S32, %class.Sprite_D16_S32* %0, i64 0, i32 0, i32 3
  %17 = load i32, i32* %16, align 8
  %18 = sub nsw i32 %1, %17
  %19 = getelementptr inbounds %class.Sprite_D16_S32, %class.Sprite_D16_S32* %0, i64 0, i32 0, i32 4
  %20 = load i32, i32* %19, align 4
  %21 = sub nsw i32 %2, %20
  %22 = getelementptr inbounds %class.Sprite_D16_S32, %class.Sprite_D16_S32* %0, i64 0, i32 0, i32 2, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = sext i32 %21 to i64
  %25 = getelementptr inbounds %class.Sprite_D16_S32, %class.Sprite_D16_S32* %0, i64 0, i32 0, i32 2, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = mul i64 %26, %24
  %28 = getelementptr inbounds i8, i8* %23, i64 %27
  %29 = shl i32 %18, 2
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %28, i64 %30
  %32 = getelementptr inbounds %class.Sprite_D16_S32, %class.Sprite_D16_S32* %0, i64 0, i32 1
  %33 = icmp sgt i32 %3, 0
  %34 = zext i32 %3 to i64
  %35 = add i64 %11, %14
  %36 = shl nuw nsw i64 %34, 1
  %37 = add i64 %11, %36
  %38 = add i64 %37, %14
  %39 = add i64 %27, %30
  %40 = shl nuw nsw i64 %34, 2
  %41 = add i64 %27, %40
  %42 = add i64 %41, %30
  %43 = add i64 %11, %14
  %44 = shl nuw nsw i64 %34, 1
  %45 = add i64 %11, %44
  %46 = add i64 %45, %14
  %47 = add i64 %27, %30
  %48 = shl nuw nsw i64 %34, 2
  %49 = add i64 %27, %48
  %50 = add i64 %49, %30
  %51 = icmp ult i32 %3, 4
  %52 = and i64 %34, 4294967292
  %53 = icmp eq i64 %52, %34
  %54 = icmp ult i32 %3, 8
  %55 = and i64 %34, 4294967288
  %56 = icmp eq i64 %55, %34
  %57 = and i64 %34, 1
  %58 = icmp eq i64 %57, 0
  %59 = sub nsw i64 0, %34
  br label %60

60:                                               ; preds = %281, %5
  %61 = phi i64 [ %286, %281 ], [ 0, %5 ]
  %62 = phi i32 [ %284, %281 ], [ %4, %5 ]
  %63 = phi i8* [ %282, %281 ], [ %15, %5 ]
  %64 = phi i8* [ %283, %281 ], [ %31, %5 ]
  %65 = mul i64 %10, %61
  %66 = add i64 %43, %65
  %67 = getelementptr i8, i8* %7, i64 %66
  %68 = add i64 %46, %65
  %69 = getelementptr i8, i8* %7, i64 %68
  %70 = mul i64 %26, %61
  %71 = add i64 %47, %70
  %72 = getelementptr i8, i8* %23, i64 %71
  %73 = add i64 %50, %70
  %74 = getelementptr i8, i8* %23, i64 %73
  %75 = mul i64 %10, %61
  %76 = add i64 %35, %75
  %77 = getelementptr i8, i8* %7, i64 %76
  %78 = add i64 %38, %75
  %79 = getelementptr i8, i8* %7, i64 %78
  %80 = mul i64 %26, %61
  %81 = add i64 %39, %80
  %82 = getelementptr i8, i8* %23, i64 %81
  %83 = add i64 %42, %80
  %84 = getelementptr i8, i8* %23, i64 %83
  %85 = bitcast i8* %64 to i32*
  %86 = bitcast i8* %63 to i16*
  %87 = load i8, i8* %32, align 8, !range !2
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %193, label %89

89:                                               ; preds = %60
  br i1 %33, label %90, label %281

90:                                               ; preds = %89
  br i1 %51, label %145, label %91

91:                                               ; preds = %90
  %92 = icmp ult i8* %67, %74
  %93 = icmp ult i8* %72, %69
  %94 = and i1 %92, %93
  br i1 %94, label %145, label %95

95:                                               ; preds = %91, %95
  %96 = phi i64 [ %142, %95 ], [ 0, %91 ]
  %97 = getelementptr inbounds i32, i32* %85, i64 %96
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4, !alias.scope !3
  %100 = getelementptr inbounds i16, i16* %86, i64 %96
  %101 = bitcast i16* %100 to <4 x i16>*
  %102 = load <4 x i16>, <4 x i16>* %101, align 2, !alias.scope !6, !noalias !3
  %103 = lshr <4 x i32> %99, <i32 16, i32 16, i32 16, i32 16>
  %104 = and <4 x i32> %103, <i32 255, i32 255, i32 255, i32 255>
  %105 = lshr <4 x i32> %99, <i32 8, i32 8, i32 8, i32 8>
  %106 = and <4 x i32> %105, <i32 255, i32 255, i32 255, i32 255>
  %107 = and <4 x i32> %99, <i32 255, i32 255, i32 255, i32 255>
  %108 = zext <4 x i16> %102 to <4 x i32>
  %109 = lshr <4 x i32> %108, <i32 11, i32 11, i32 11, i32 11>
  %110 = lshr <4 x i32> %108, <i32 5, i32 5, i32 5, i32 5>
  %111 = and <4 x i32> %110, <i32 63, i32 63, i32 63, i32 63>
  %112 = and <4 x i32> %108, <i32 31, i32 31, i32 31, i32 31>
  %113 = lshr <4 x i32> %99, <i32 24, i32 24, i32 24, i32 24>
  %114 = xor <4 x i32> %113, <i32 255, i32 255, i32 255, i32 255>
  %115 = mul nuw nsw <4 x i32> %109, %114
  %116 = add nuw nsw <4 x i32> %115, <i32 16, i32 16, i32 16, i32 16>
  %117 = lshr <4 x i32> %116, <i32 5, i32 5, i32 5, i32 5>
  %118 = add nuw nsw <4 x i32> %117, %116
  %119 = lshr <4 x i32> %118, <i32 5, i32 5, i32 5, i32 5>
  %120 = add nuw nsw <4 x i32> %119, %104
  %121 = lshr <4 x i32> %120, <i32 3, i32 3, i32 3, i32 3>
  %122 = mul nuw nsw <4 x i32> %111, %114
  %123 = add nuw nsw <4 x i32> %122, <i32 32, i32 32, i32 32, i32 32>
  %124 = lshr <4 x i32> %123, <i32 6, i32 6, i32 6, i32 6>
  %125 = add nuw nsw <4 x i32> %124, %123
  %126 = lshr <4 x i32> %125, <i32 6, i32 6, i32 6, i32 6>
  %127 = add nuw nsw <4 x i32> %126, %106
  %128 = lshr <4 x i32> %127, <i32 2, i32 2, i32 2, i32 2>
  %129 = mul nuw nsw <4 x i32> %112, %114
  %130 = add nuw nsw <4 x i32> %129, <i32 16, i32 16, i32 16, i32 16>
  %131 = lshr <4 x i32> %130, <i32 5, i32 5, i32 5, i32 5>
  %132 = add nuw nsw <4 x i32> %131, %130
  %133 = lshr <4 x i32> %132, <i32 5, i32 5, i32 5, i32 5>
  %134 = add nuw nsw <4 x i32> %133, %107
  %135 = lshr <4 x i32> %134, <i32 3, i32 3, i32 3, i32 3>
  %136 = shl <4 x i32> %121, <i32 11, i32 11, i32 11, i32 11>
  %137 = shl nuw nsw <4 x i32> %128, <i32 5, i32 5, i32 5, i32 5>
  %138 = or <4 x i32> %136, %135
  %139 = or <4 x i32> %138, %137
  %140 = trunc <4 x i32> %139 to <4 x i16>
  %141 = bitcast i16* %100 to <4 x i16>*
  store <4 x i16> %140, <4 x i16>* %141, align 2, !alias.scope !6, !noalias !3
  %142 = add i64 %96, 4
  %143 = icmp eq i64 %142, %52
  br i1 %143, label %144, label %95, !llvm.loop !8

144:                                              ; preds = %95
  br i1 %53, label %281, label %145

145:                                              ; preds = %144, %91, %90
  %146 = phi i64 [ 0, %91 ], [ 0, %90 ], [ %52, %144 ]
  br label %147

147:                                              ; preds = %145, %147
  %148 = phi i64 [ %191, %147 ], [ %146, %145 ]
  %149 = getelementptr inbounds i32, i32* %85, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = getelementptr inbounds i16, i16* %86, i64 %148
  %152 = load i16, i16* %151, align 2
  %153 = lshr i32 %150, 16
  %154 = and i32 %153, 255
  %155 = lshr i32 %150, 8
  %156 = and i32 %155, 255
  %157 = and i32 %150, 255
  %158 = zext i16 %152 to i32
  %159 = lshr i32 %158, 11
  %160 = lshr i32 %158, 5
  %161 = and i32 %160, 63
  %162 = and i32 %158, 31
  %163 = lshr i32 %150, 24
  %164 = xor i32 %163, 255
  %165 = mul nuw nsw i32 %159, %164
  %166 = add nuw nsw i32 %165, 16
  %167 = lshr i32 %166, 5
  %168 = add nuw nsw i32 %167, %166
  %169 = lshr i32 %168, 5
  %170 = add nuw nsw i32 %169, %154
  %171 = lshr i32 %170, 3
  %172 = mul nuw nsw i32 %161, %164
  %173 = add nuw nsw i32 %172, 32
  %174 = lshr i32 %173, 6
  %175 = add nuw nsw i32 %174, %173
  %176 = lshr i32 %175, 6
  %177 = add nuw nsw i32 %176, %156
  %178 = lshr i32 %177, 2
  %179 = mul nuw nsw i32 %162, %164
  %180 = add nuw nsw i32 %179, 16
  %181 = lshr i32 %180, 5
  %182 = add nuw nsw i32 %181, %180
  %183 = lshr i32 %182, 5
  %184 = add nuw nsw i32 %183, %157
  %185 = lshr i32 %184, 3
  %186 = shl i32 %171, 11
  %187 = shl nuw nsw i32 %178, 5
  %188 = or i32 %186, %185
  %189 = or i32 %188, %187
  %190 = trunc i32 %189 to i16
  store i16 %190, i16* %151, align 2
  %191 = add nuw nsw i64 %148, 1
  %192 = icmp eq i64 %191, %34
  br i1 %192, label %281, label %147, !llvm.loop !10

193:                                              ; preds = %60
  br i1 %33, label %194, label %281

194:                                              ; preds = %193
  br i1 %54, label %232, label %195

195:                                              ; preds = %194
  %196 = icmp ult i8* %77, %84
  %197 = icmp ult i8* %82, %79
  %198 = and i1 %196, %197
  br i1 %198, label %232, label %199

199:                                              ; preds = %195, %199
  %200 = phi i64 [ %229, %199 ], [ 0, %195 ]
  %201 = getelementptr inbounds i32, i32* %85, i64 %200
  %202 = bitcast i32* %201 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 4, !alias.scope !11
  %204 = getelementptr inbounds i32, i32* %201, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  %206 = load <4 x i32>, <4 x i32>* %205, align 4, !alias.scope !11
  %207 = lshr <4 x i32> %203, <i32 8, i32 8, i32 8, i32 8>
  %208 = lshr <4 x i32> %206, <i32 8, i32 8, i32 8, i32 8>
  %209 = and <4 x i32> %207, <i32 63488, i32 63488, i32 63488, i32 63488>
  %210 = and <4 x i32> %208, <i32 63488, i32 63488, i32 63488, i32 63488>
  %211 = lshr <4 x i32> %203, <i32 5, i32 5, i32 5, i32 5>
  %212 = lshr <4 x i32> %206, <i32 5, i32 5, i32 5, i32 5>
  %213 = and <4 x i32> %211, <i32 2016, i32 2016, i32 2016, i32 2016>
  %214 = and <4 x i32> %212, <i32 2016, i32 2016, i32 2016, i32 2016>
  %215 = lshr <4 x i32> %203, <i32 3, i32 3, i32 3, i32 3>
  %216 = lshr <4 x i32> %206, <i32 3, i32 3, i32 3, i32 3>
  %217 = and <4 x i32> %215, <i32 31, i32 31, i32 31, i32 31>
  %218 = and <4 x i32> %216, <i32 31, i32 31, i32 31, i32 31>
  %219 = or <4 x i32> %209, %213
  %220 = or <4 x i32> %210, %214
  %221 = or <4 x i32> %219, %217
  %222 = or <4 x i32> %220, %218
  %223 = trunc <4 x i32> %221 to <4 x i16>
  %224 = trunc <4 x i32> %222 to <4 x i16>
  %225 = getelementptr inbounds i16, i16* %86, i64 %200
  %226 = bitcast i16* %225 to <4 x i16>*
  store <4 x i16> %223, <4 x i16>* %226, align 2, !alias.scope !14, !noalias !11
  %227 = getelementptr inbounds i16, i16* %225, i64 4
  %228 = bitcast i16* %227 to <4 x i16>*
  store <4 x i16> %224, <4 x i16>* %228, align 2, !alias.scope !14, !noalias !11
  %229 = add i64 %200, 8
  %230 = icmp eq i64 %229, %55
  br i1 %230, label %231, label %199, !llvm.loop !16

231:                                              ; preds = %199
  br i1 %56, label %281, label %232

232:                                              ; preds = %231, %195, %194
  %233 = phi i64 [ 0, %195 ], [ 0, %194 ], [ %55, %231 ]
  %234 = xor i64 %233, -1
  br i1 %58, label %249, label %235

235:                                              ; preds = %232
  %236 = getelementptr inbounds i32, i32* %85, i64 %233
  %237 = load i32, i32* %236, align 4
  %238 = lshr i32 %237, 8
  %239 = and i32 %238, 63488
  %240 = lshr i32 %237, 5
  %241 = and i32 %240, 2016
  %242 = lshr i32 %237, 3
  %243 = and i32 %242, 31
  %244 = or i32 %239, %241
  %245 = or i32 %244, %243
  %246 = trunc i32 %245 to i16
  %247 = getelementptr inbounds i16, i16* %86, i64 %233
  store i16 %246, i16* %247, align 2
  %248 = or i64 %233, 1
  br label %249

249:                                              ; preds = %235, %232
  %250 = phi i64 [ %248, %235 ], [ %233, %232 ]
  %251 = icmp eq i64 %234, %59
  br i1 %251, label %281, label %252

252:                                              ; preds = %249, %252
  %253 = phi i64 [ %279, %252 ], [ %250, %249 ]
  %254 = getelementptr inbounds i32, i32* %85, i64 %253
  %255 = load i32, i32* %254, align 4
  %256 = lshr i32 %255, 8
  %257 = and i32 %256, 63488
  %258 = lshr i32 %255, 5
  %259 = and i32 %258, 2016
  %260 = lshr i32 %255, 3
  %261 = and i32 %260, 31
  %262 = or i32 %257, %259
  %263 = or i32 %262, %261
  %264 = trunc i32 %263 to i16
  %265 = getelementptr inbounds i16, i16* %86, i64 %253
  store i16 %264, i16* %265, align 2
  %266 = add nuw nsw i64 %253, 1
  %267 = getelementptr inbounds i32, i32* %85, i64 %266
  %268 = load i32, i32* %267, align 4
  %269 = lshr i32 %268, 8
  %270 = and i32 %269, 63488
  %271 = lshr i32 %268, 5
  %272 = and i32 %271, 2016
  %273 = lshr i32 %268, 3
  %274 = and i32 %273, 31
  %275 = or i32 %270, %272
  %276 = or i32 %275, %274
  %277 = trunc i32 %276 to i16
  %278 = getelementptr inbounds i16, i16* %86, i64 %266
  store i16 %277, i16* %278, align 2
  %279 = add nuw nsw i64 %253, 2
  %280 = icmp eq i64 %279, %34
  br i1 %280, label %281, label %252, !llvm.loop !17

281:                                              ; preds = %147, %249, %252, %144, %231, %193, %89
  %282 = getelementptr inbounds i8, i8* %63, i64 %10
  %283 = getelementptr inbounds i8, i8* %64, i64 %26
  %284 = add nsw i32 %62, -1
  %285 = icmp eq i32 %284, 0
  %286 = add i64 %61, 1
  br i1 %285, label %287, label %60

287:                                              ; preds = %281
  ret void
}

declare void @_ZN9SkBlitter12blitAntiRectEiiiihh(%class.SkBlitter*, i32, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #3

declare void @_ZN15SkSpriteBlitter8blitMaskERK6SkMaskRK7SkIRect(%class.SkSpriteBlitter*, %struct.SkMask* dereferenceable(32), %struct.SkIRect* dereferenceable(16)) unnamed_addr #3

declare %class.SkPixmap* @_ZN9SkBlitter17justAnOpaqueColorEPj(%class.SkBlitter*, i32*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9SkBlitter10blitAntiH2Eiijj(%class.SkBlitter*, i32, i32, i32, i32) unnamed_addr #0 comdat align 2 {
  %6 = alloca [3 x i16], align 2
  %7 = alloca [2 x i8], align 1
  %8 = bitcast [3 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %8) #7
  %9 = getelementptr inbounds [3 x i16], [3 x i16]* %6, i64 0, i64 0
  %10 = getelementptr inbounds [3 x i16], [3 x i16]* %6, i64 0, i64 1
  %11 = getelementptr inbounds [3 x i16], [3 x i16]* %6, i64 0, i64 2
  %12 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %12) #7
  %13 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 1
  store i16 1, i16* %9, align 2
  store i16 1, i16* %10, align 2
  store i16 0, i16* %11, align 2
  %14 = trunc i32 %3 to i8
  store i8 %14, i8* %12, align 1
  %15 = trunc i32 %4 to i8
  store i8 %15, i8* %13, align 1
  %16 = bitcast %class.SkBlitter* %0 to void (%class.SkBlitter*, i32, i32, i8*, i16*)***
  %17 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)**, void (%class.SkBlitter*, i32, i32, i8*, i16*)*** %16, align 8
  %18 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %17, i64 3
  %19 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %18, align 8
  call void %19(%class.SkBlitter* %0, i32 %1, i32 %2, i8* nonnull %12, i16* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %8) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9SkBlitter10blitAntiV2Eiijj(%class.SkBlitter*, i32, i32, i32, i32) unnamed_addr #0 comdat align 2 {
  %6 = alloca [2 x i16], align 2
  %7 = alloca [1 x i8], align 1
  %8 = bitcast [2 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #7
  %9 = getelementptr inbounds [2 x i16], [2 x i16]* %6, i64 0, i64 0
  %10 = getelementptr inbounds [2 x i16], [2 x i16]* %6, i64 0, i64 1
  %11 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %11) #7
  store i16 1, i16* %9, align 2
  store i16 0, i16* %10, align 2
  %12 = trunc i32 %3 to i8
  store i8 %12, i8* %11, align 1
  %13 = bitcast %class.SkBlitter* %0 to void (%class.SkBlitter*, i32, i32, i8*, i16*)***
  %14 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)**, void (%class.SkBlitter*, i32, i32, i8*, i16*)*** %13, align 8
  %15 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %14, i64 3
  %16 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %15, align 8
  call void %16(%class.SkBlitter* %0, i32 %1, i32 %2, i8* nonnull %11, i16* nonnull %9) #7
  store i16 1, i16* %9, align 2
  store i16 0, i16* %10, align 2
  %17 = trunc i32 %4 to i8
  store i8 %17, i8* %11, align 1
  %18 = add nsw i32 %2, 1
  %19 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)**, void (%class.SkBlitter*, i32, i32, i8*, i16*)*** %13, align 8
  %20 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %19, i64 3
  %21 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %20, align 8
  call void %21(%class.SkBlitter* %0, i32 %1, i32 %18, i8* nonnull %11, i16* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #7
  ret void
}

declare zeroext i1 @_ZNK9SkBlitter13isNullBlitterEv(%class.SkBlitter*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK9SkBlitter20requestRowsPreservedEv(%class.SkBlitter*) unnamed_addr #0 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN9SkBlitter15allocBlitMemoryEm(%class.SkBlitter*, i64) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.SkBlitter, %class.SkBlitter* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.SkBlitter, %class.SkBlitter* %0, i64 0, i32 1, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %2
  %8 = tail call i8* @_Z15sk_malloc_flagsmj(i64 %1, i32 2) #7
  %9 = getelementptr inbounds %class.SkAutoMalloc, %class.SkAutoMalloc* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  store i8* %8, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @_Z7sk_freePv(i8* nonnull %10) #7
  br label %13

13:                                               ; preds = %12, %7
  store i64 %1, i64* %4, align 8
  br label %14

14:                                               ; preds = %2, %13
  %15 = getelementptr inbounds %class.SkAutoMalloc, %class.SkAutoMalloc* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  ret i8* %16
}

declare zeroext i1 @_ZN15SkSpriteBlitter5setupERK8SkPixmapiiRK7SkPaint(%class.SkSpriteBlitter*, %class.SkPixmap* dereferenceable(40), i32, i32, %class.SkPaint* dereferenceable(72)) unnamed_addr #3

declare zeroext i1 @_Z25SkColorTypeIsAlwaysOpaque11SkColorType(i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN9SkBlitterD2Ev(%class.SkBlitter*) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #3

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZZN12SkArenaAlloc4makeIZNS_4makeI13Sprite_D8_S32JRK8SkPixmap11SkBlendModeEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS7_ENUlPcE_8__invokeESG_(i8*) #4 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -137
  %3 = bitcast i8* %2 to %class.Sprite_D8_S32*
  %4 = bitcast i8* %2 to void (%class.Sprite_D8_S32*)***
  %5 = load void (%class.Sprite_D8_S32*)**, void (%class.Sprite_D8_S32*)*** %4, align 8
  %6 = load void (%class.Sprite_D8_S32*)*, void (%class.Sprite_D8_S32*)** %5, align 8
  tail call void %6(%class.Sprite_D8_S32* %3) #7
  ret i8* %2
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN15SkSpriteBlitterD2Ev(%class.SkSpriteBlitter*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.SkSpriteBlitter, %class.SkSpriteBlitter* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV15SkSpriteBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkSpriteBlitter, %class.SkSpriteBlitter* %0, i64 0, i32 2, i32 2, i32 0, i32 0, i32 0
  %4 = load %class.SkColorSpace*, %class.SkColorSpace** %3, align 8
  %5 = icmp eq %class.SkColorSpace* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorSpace* %4 to i8*
  tail call void @_ZdlPv(i8* %11) #8
  br label %12

12:                                               ; preds = %1, %6, %10
  %13 = getelementptr inbounds %class.SkSpriteBlitter, %class.SkSpriteBlitter* %0, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %14 = load %class.SkColorSpace*, %class.SkColorSpace** %13, align 8
  %15 = icmp eq %class.SkColorSpace* %14, null
  br i1 %15, label %22, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw add i32* %17, i32 -1 acq_rel
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %22

20:                                               ; preds = %16
  %21 = bitcast %class.SkColorSpace* %14 to i8*
  tail call void @_ZdlPv(i8* %21) #8
  br label %22

22:                                               ; preds = %12, %16, %20
  %23 = getelementptr inbounds %class.SkSpriteBlitter, %class.SkSpriteBlitter* %0, i64 0, i32 0
  tail call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %23) #7
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN13Sprite_D8_S32D0Ev(%class.Sprite_D8_S32*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.Sprite_D8_S32, %class.Sprite_D8_S32* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV15SkSpriteBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.Sprite_D8_S32, %class.Sprite_D8_S32* %0, i64 0, i32 0, i32 2, i32 2, i32 0, i32 0, i32 0
  %4 = load %class.SkColorSpace*, %class.SkColorSpace** %3, align 8
  %5 = icmp eq %class.SkColorSpace* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorSpace* %4 to i8*
  tail call void @_ZdlPv(i8* %11) #8
  br label %12

12:                                               ; preds = %10, %6, %1
  %13 = getelementptr inbounds %class.Sprite_D8_S32, %class.Sprite_D8_S32* %0, i64 0, i32 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %14 = load %class.SkColorSpace*, %class.SkColorSpace** %13, align 8
  %15 = icmp eq %class.SkColorSpace* %14, null
  br i1 %15, label %22, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw add i32* %17, i32 -1 acq_rel
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %22

20:                                               ; preds = %16
  %21 = bitcast %class.SkColorSpace* %14 to i8*
  tail call void @_ZdlPv(i8* %21) #8
  br label %22

22:                                               ; preds = %12, %16, %20
  %23 = getelementptr inbounds %class.Sprite_D8_S32, %class.Sprite_D8_S32* %0, i64 0, i32 0, i32 0
  tail call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %23) #7
  %24 = bitcast %class.Sprite_D8_S32* %0 to i8*
  tail call void @_ZdlPv(i8* %24) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN13Sprite_D8_S328blitRectEiiii(%class.Sprite_D8_S32*, i32, i32, i32, i32) unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %class.Sprite_D8_S32, %class.Sprite_D8_S32* %0, i64 0, i32 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds %class.Sprite_D8_S32, %class.Sprite_D8_S32* %0, i64 0, i32 0, i32 1, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %10, %8
  %12 = getelementptr inbounds i8, i8* %7, i64 %11
  %13 = sext i32 %1 to i64
  %14 = getelementptr inbounds i8, i8* %12, i64 %13
  %15 = getelementptr inbounds %class.Sprite_D8_S32, %class.Sprite_D8_S32* %0, i64 0, i32 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = sub nsw i32 %1, %16
  %18 = getelementptr inbounds %class.Sprite_D8_S32, %class.Sprite_D8_S32* %0, i64 0, i32 0, i32 4
  %19 = load i32, i32* %18, align 4
  %20 = sub nsw i32 %2, %19
  %21 = getelementptr inbounds %class.Sprite_D8_S32, %class.Sprite_D8_S32* %0, i64 0, i32 0, i32 2, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = sext i32 %20 to i64
  %24 = getelementptr inbounds %class.Sprite_D8_S32, %class.Sprite_D8_S32* %0, i64 0, i32 0, i32 2, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = mul i64 %25, %23
  %27 = getelementptr inbounds i8, i8* %22, i64 %26
  %28 = shl i32 %17, 2
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %27, i64 %29
  %31 = getelementptr inbounds %class.Sprite_D8_S32, %class.Sprite_D8_S32* %0, i64 0, i32 1
  %32 = icmp sgt i32 %3, 0
  %33 = zext i32 %3 to i64
  %34 = add i64 %11, %13
  %35 = add i64 %34, %33
  %36 = add i64 %26, %29
  %37 = shl nuw nsw i64 %33, 2
  %38 = add i64 %26, %37
  %39 = add i64 %38, %29
  %40 = and i64 %33, 4294967288
  %41 = add nsw i64 %40, -8
  %42 = lshr exact i64 %41, 3
  %43 = add nuw nsw i64 %42, 1
  %44 = icmp ult i32 %3, 8
  %45 = and i64 %33, 4294967288
  %46 = and i64 %43, 1
  %47 = icmp eq i64 %41, 0
  %48 = sub nuw nsw i64 %43, %46
  %49 = icmp eq i64 %46, 0
  %50 = icmp eq i64 %45, %33
  %51 = and i64 %33, 3
  %52 = icmp eq i64 %51, 0
  br label %53

53:                                               ; preds = %201, %5
  %54 = phi i64 [ %206, %201 ], [ 0, %5 ]
  %55 = phi i32 [ %204, %201 ], [ %4, %5 ]
  %56 = phi i8* [ %202, %201 ], [ %14, %5 ]
  %57 = phi i8* [ %203, %201 ], [ %30, %5 ]
  %58 = mul i64 %10, %54
  %59 = add i64 %34, %58
  %60 = getelementptr i8, i8* %7, i64 %59
  %61 = add i64 %35, %58
  %62 = getelementptr i8, i8* %7, i64 %61
  %63 = mul i64 %25, %54
  %64 = add i64 %36, %63
  %65 = getelementptr i8, i8* %22, i64 %64
  %66 = add i64 %39, %63
  %67 = getelementptr i8, i8* %22, i64 %66
  %68 = bitcast i8* %57 to i32*
  %69 = load i8, i8* %31, align 8, !range !2
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %96, label %71

71:                                               ; preds = %53
  br i1 %32, label %72, label %201

72:                                               ; preds = %71, %93
  %73 = phi i64 [ %94, %93 ], [ 0, %71 ]
  %74 = getelementptr inbounds i32, i32* %68, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %93, label %77

77:                                               ; preds = %72
  %78 = lshr i32 %75, 24
  %79 = icmp eq i32 %78, 255
  br i1 %79, label %80, label %82

80:                                               ; preds = %77
  %81 = getelementptr inbounds i8, i8* %56, i64 %73
  store i8 -1, i8* %81, align 1
  br label %93

82:                                               ; preds = %77
  %83 = xor i32 %78, 255
  %84 = getelementptr inbounds i8, i8* %56, i64 %73
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = mul nuw nsw i32 %83, 257
  %88 = mul nuw nsw i32 %87, %86
  %89 = add nuw nsw i32 %88, 127
  %90 = lshr i32 %89, 16
  %91 = add nuw nsw i32 %90, %78
  %92 = trunc i32 %91 to i8
  store i8 %92, i8* %84, align 1
  br label %93

93:                                               ; preds = %82, %80, %72
  %94 = add nuw nsw i64 %73, 1
  %95 = icmp eq i64 %94, %33
  br i1 %95, label %201, label %72

96:                                               ; preds = %53
  br i1 %32, label %97, label %201

97:                                               ; preds = %96
  br i1 %44, label %156, label %98

98:                                               ; preds = %97
  %99 = icmp ult i8* %60, %67
  %100 = icmp ult i8* %65, %62
  %101 = and i1 %99, %100
  br i1 %101, label %156, label %102

102:                                              ; preds = %98
  br i1 %47, label %138, label %103

103:                                              ; preds = %102, %103
  %104 = phi i64 [ %135, %103 ], [ 0, %102 ]
  %105 = phi i64 [ %136, %103 ], [ %48, %102 ]
  %106 = getelementptr inbounds i32, i32* %68, i64 %104
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4, !alias.scope !18
  %109 = getelementptr inbounds i32, i32* %106, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  %111 = load <4 x i32>, <4 x i32>* %110, align 4, !alias.scope !18
  %112 = lshr <4 x i32> %108, <i32 24, i32 24, i32 24, i32 24>
  %113 = lshr <4 x i32> %111, <i32 24, i32 24, i32 24, i32 24>
  %114 = trunc <4 x i32> %112 to <4 x i8>
  %115 = trunc <4 x i32> %113 to <4 x i8>
  %116 = getelementptr inbounds i8, i8* %56, i64 %104
  %117 = bitcast i8* %116 to <4 x i8>*
  store <4 x i8> %114, <4 x i8>* %117, align 1, !alias.scope !21, !noalias !18
  %118 = getelementptr inbounds i8, i8* %116, i64 4
  %119 = bitcast i8* %118 to <4 x i8>*
  store <4 x i8> %115, <4 x i8>* %119, align 1, !alias.scope !21, !noalias !18
  %120 = or i64 %104, 8
  %121 = getelementptr inbounds i32, i32* %68, i64 %120
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4, !alias.scope !18
  %124 = getelementptr inbounds i32, i32* %121, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !18
  %127 = lshr <4 x i32> %123, <i32 24, i32 24, i32 24, i32 24>
  %128 = lshr <4 x i32> %126, <i32 24, i32 24, i32 24, i32 24>
  %129 = trunc <4 x i32> %127 to <4 x i8>
  %130 = trunc <4 x i32> %128 to <4 x i8>
  %131 = getelementptr inbounds i8, i8* %56, i64 %120
  %132 = bitcast i8* %131 to <4 x i8>*
  store <4 x i8> %129, <4 x i8>* %132, align 1, !alias.scope !21, !noalias !18
  %133 = getelementptr inbounds i8, i8* %131, i64 4
  %134 = bitcast i8* %133 to <4 x i8>*
  store <4 x i8> %130, <4 x i8>* %134, align 1, !alias.scope !21, !noalias !18
  %135 = add i64 %104, 16
  %136 = add i64 %105, -2
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %103, !llvm.loop !23

138:                                              ; preds = %103, %102
  %139 = phi i64 [ 0, %102 ], [ %135, %103 ]
  br i1 %49, label %155, label %140

140:                                              ; preds = %138
  %141 = getelementptr inbounds i32, i32* %68, i64 %139
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 4, !alias.scope !18
  %144 = getelementptr inbounds i32, i32* %141, i64 4
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4, !alias.scope !18
  %147 = lshr <4 x i32> %143, <i32 24, i32 24, i32 24, i32 24>
  %148 = lshr <4 x i32> %146, <i32 24, i32 24, i32 24, i32 24>
  %149 = trunc <4 x i32> %147 to <4 x i8>
  %150 = trunc <4 x i32> %148 to <4 x i8>
  %151 = getelementptr inbounds i8, i8* %56, i64 %139
  %152 = bitcast i8* %151 to <4 x i8>*
  store <4 x i8> %149, <4 x i8>* %152, align 1, !alias.scope !21, !noalias !18
  %153 = getelementptr inbounds i8, i8* %151, i64 4
  %154 = bitcast i8* %153 to <4 x i8>*
  store <4 x i8> %150, <4 x i8>* %154, align 1, !alias.scope !21, !noalias !18
  br label %155

155:                                              ; preds = %138, %140
  br i1 %50, label %201, label %156

156:                                              ; preds = %155, %98, %97
  %157 = phi i64 [ 0, %98 ], [ 0, %97 ], [ %45, %155 ]
  %158 = xor i64 %157, -1
  %159 = add nsw i64 %158, %33
  br i1 %52, label %171, label %160

160:                                              ; preds = %156, %160
  %161 = phi i64 [ %168, %160 ], [ %157, %156 ]
  %162 = phi i64 [ %169, %160 ], [ %51, %156 ]
  %163 = getelementptr inbounds i32, i32* %68, i64 %161
  %164 = load i32, i32* %163, align 4
  %165 = lshr i32 %164, 24
  %166 = trunc i32 %165 to i8
  %167 = getelementptr inbounds i8, i8* %56, i64 %161
  store i8 %166, i8* %167, align 1
  %168 = add nuw nsw i64 %161, 1
  %169 = add i64 %162, -1
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %160, !llvm.loop !24

171:                                              ; preds = %160, %156
  %172 = phi i64 [ %157, %156 ], [ %168, %160 ]
  %173 = icmp ult i64 %159, 3
  br i1 %173, label %201, label %174

174:                                              ; preds = %171, %174
  %175 = phi i64 [ %199, %174 ], [ %172, %171 ]
  %176 = getelementptr inbounds i32, i32* %68, i64 %175
  %177 = load i32, i32* %176, align 4
  %178 = lshr i32 %177, 24
  %179 = trunc i32 %178 to i8
  %180 = getelementptr inbounds i8, i8* %56, i64 %175
  store i8 %179, i8* %180, align 1
  %181 = add nuw nsw i64 %175, 1
  %182 = getelementptr inbounds i32, i32* %68, i64 %181
  %183 = load i32, i32* %182, align 4
  %184 = lshr i32 %183, 24
  %185 = trunc i32 %184 to i8
  %186 = getelementptr inbounds i8, i8* %56, i64 %181
  store i8 %185, i8* %186, align 1
  %187 = add nuw nsw i64 %175, 2
  %188 = getelementptr inbounds i32, i32* %68, i64 %187
  %189 = load i32, i32* %188, align 4
  %190 = lshr i32 %189, 24
  %191 = trunc i32 %190 to i8
  %192 = getelementptr inbounds i8, i8* %56, i64 %187
  store i8 %191, i8* %192, align 1
  %193 = add nuw nsw i64 %175, 3
  %194 = getelementptr inbounds i32, i32* %68, i64 %193
  %195 = load i32, i32* %194, align 4
  %196 = lshr i32 %195, 24
  %197 = trunc i32 %196 to i8
  %198 = getelementptr inbounds i8, i8* %56, i64 %193
  store i8 %197, i8* %198, align 1
  %199 = add nuw nsw i64 %175, 4
  %200 = icmp eq i64 %199, %33
  br i1 %200, label %201, label %174, !llvm.loop !26

201:                                              ; preds = %93, %171, %174, %155, %96, %71
  %202 = getelementptr inbounds i8, i8* %56, i64 %10
  %203 = getelementptr inbounds i8, i8* %57, i64 %25
  %204 = add nsw i32 %55, -1
  %205 = icmp eq i32 %204, 0
  %206 = add i64 %54, 1
  br i1 %205, label %207, label %53

207:                                              ; preds = %201
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !9}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !9}
!17 = distinct !{!17, !9}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !9}
!24 = distinct !{!24, !25}
!25 = !{!"llvm.loop.unroll.disable"}
!26 = distinct !{!26, !9}
