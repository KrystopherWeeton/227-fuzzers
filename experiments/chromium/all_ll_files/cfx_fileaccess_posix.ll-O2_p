; ModuleID = '../../third_party/pdfium/core/fxcrt/cfx_fileaccess_posix.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/cfx_fileaccess_posix.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%class.CFX_FileAccess_Posix = type <{ %class.FileAccessIface, i32, [4 x i8] }>
%class.FileAccessIface = type { i32 (...)** }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.fxcrt::StringViewTemplate.7" = type { %"class.pdfium::span.8" }
%"class.pdfium::span.8" = type { %"class.fxcrt::UnownedPtr.9", i64 }
%"class.fxcrt::UnownedPtr.9" = type { i32* }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr.10" }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }

@_ZTV20CFX_FileAccess_Posix = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFX_FileAccess_Posix*)* @_ZN20CFX_FileAccess_PosixD2Ev to i8*), i8* bitcast (void (%class.CFX_FileAccess_Posix*)* @_ZN20CFX_FileAccess_PosixD0Ev to i8*), i8* bitcast (i1 (%class.CFX_FileAccess_Posix*, %"class.fxcrt::StringViewTemplate"*, i32)* @_ZN20CFX_FileAccess_Posix4OpenEN5fxcrt18StringViewTemplateIcEEj to i8*), i8* bitcast (i1 (%class.CFX_FileAccess_Posix*, %"class.fxcrt::StringViewTemplate.7"*, i32)* @_ZN20CFX_FileAccess_Posix4OpenEN5fxcrt18StringViewTemplateIwEEj to i8*), i8* bitcast (void (%class.CFX_FileAccess_Posix*)* @_ZN20CFX_FileAccess_Posix5CloseEv to i8*), i8* bitcast (i64 (%class.CFX_FileAccess_Posix*)* @_ZNK20CFX_FileAccess_Posix7GetSizeEv to i8*), i8* bitcast (i64 (%class.CFX_FileAccess_Posix*)* @_ZNK20CFX_FileAccess_Posix11GetPositionEv to i8*), i8* bitcast (i64 (%class.CFX_FileAccess_Posix*, i64)* @_ZN20CFX_FileAccess_Posix11SetPositionEl to i8*), i8* bitcast (i64 (%class.CFX_FileAccess_Posix*, i8*, i64)* @_ZN20CFX_FileAccess_Posix4ReadEPvm to i8*), i8* bitcast (i64 (%class.CFX_FileAccess_Posix*, i8*, i64)* @_ZN20CFX_FileAccess_Posix5WriteEPKvm to i8*), i8* bitcast (i64 (%class.CFX_FileAccess_Posix*, i8*, i64, i64)* @_ZN20CFX_FileAccess_Posix7ReadPosEPvml to i8*), i8* bitcast (i64 (%class.CFX_FileAccess_Posix*, i8*, i64, i64)* @_ZN20CFX_FileAccess_Posix8WritePosEPKvml to i8*), i8* bitcast (i1 (%class.CFX_FileAccess_Posix*)* @_ZN20CFX_FileAccess_Posix5FlushEv to i8*), i8* bitcast (i1 (%class.CFX_FileAccess_Posix*, i64)* @_ZN20CFX_FileAccess_Posix8TruncateEl to i8*)] }, align 8

@_ZN20CFX_FileAccess_PosixC1Ev = hidden unnamed_addr alias void (%class.CFX_FileAccess_Posix*), void (%class.CFX_FileAccess_Posix*)* @_ZN20CFX_FileAccess_PosixC2Ev
@_ZN20CFX_FileAccess_PosixD1Ev = hidden unnamed_addr alias void (%class.CFX_FileAccess_Posix*), void (%class.CFX_FileAccess_Posix*)* @_ZN20CFX_FileAccess_PosixD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden %class.FileAccessIface* @_ZN15FileAccessIface6CreateEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i8* @_Znwm(i64 16) #9
  %2 = bitcast i8* %1 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV20CFX_FileAccess_Posix, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds i8, i8* %1, i64 8
  %4 = bitcast i8* %3 to i32*
  store i32 -1, i32* %4, align 8
  %5 = bitcast i8* %1 to %class.FileAccessIface*
  ret %class.FileAccessIface* %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN20CFX_FileAccess_PosixC2Ev(%class.CFX_FileAccess_Posix* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV20CFX_FileAccess_Posix, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  store i32 -1, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_FileAccess_PosixD2Ev(%class.CFX_FileAccess_Posix* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV20CFX_FileAccess_Posix, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = tail call i32 @close(i32 %4) #10
  store i32 -1, i32* %3, align 8
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_FileAccess_Posix5CloseEv(%class.CFX_FileAccess_Posix* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = tail call i32 @close(i32 %3) #10
  store i32 -1, i32* %2, align 8
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_FileAccess_PosixD0Ev(%class.CFX_FileAccess_Posix*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV20CFX_FileAccess_Posix, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = tail call i32 @close(i32 %4) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = bitcast %class.CFX_FileAccess_Posix* %0 to i8*
  tail call void @_ZdlPv(i8* %9) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN20CFX_FileAccess_Posix4OpenEN5fxcrt18StringViewTemplateIcEEj(%class.CFX_FileAccess_Posix* nocapture, %"class.fxcrt::StringViewTemplate"* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, -1
  br i1 %6, label %21, label %7

7:                                                ; preds = %3
  %8 = and i32 %2, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %7
  %11 = and i32 %2, 2
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 66, i32 578
  br label %14

14:                                               ; preds = %7, %10
  %15 = phi i32 [ %13, %10 ], [ 0, %7 ]
  %16 = phi i32 [ 420, %10 ], [ 0, %7 ]
  %17 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = tail call i32 (i8*, i32, ...) @open64(i8* %18, i32 %15, i32 %16) #10
  store i32 %19, i32* %4, align 8
  %20 = icmp sgt i32 %19, -1
  br label %21

21:                                               ; preds = %3, %14
  %22 = phi i1 [ %20, %14 ], [ false, %3 ]
  ret i1 %22
}

; Function Attrs: nofree
declare i32 @open64(i8* nocapture readonly, i32, ...) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN20CFX_FileAccess_Posix4OpenEN5fxcrt18StringViewTemplateIwEEj(%class.CFX_FileAccess_Posix* nocapture, %"class.fxcrt::StringViewTemplate.7"* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %4 = alloca %"class.fxcrt::ByteString", align 8
  %5 = alloca %"class.fxcrt::StringViewTemplate.7", align 8
  %6 = bitcast %"class.fxcrt::ByteString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = bitcast %"class.fxcrt::StringViewTemplate.7"* %5 to i8*
  %8 = bitcast %"class.fxcrt::StringViewTemplate.7"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 %8, i64 16, i1 false)
  call void @_Z13FX_UTF8EncodeN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::ByteString"* nonnull sret %4, %"class.fxcrt::StringViewTemplate.7"* nonnull %5) #10
  %9 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %9, align 8, !noalias !2
  %11 = icmp eq %"class.fxcrt::StringDataTemplate"* %10, null
  %12 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %10, i64 0, i32 3, i64 0
  %13 = select i1 %11, i8* null, i8* %12
  %14 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = icmp sgt i32 %15, -1
  br i1 %16, label %29, label %17

17:                                               ; preds = %3
  %18 = and i32 %2, 1
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %17
  %21 = and i32 %2, 2
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, i32 66, i32 578
  br label %24

24:                                               ; preds = %20, %17
  %25 = phi i32 [ %23, %20 ], [ 0, %17 ]
  %26 = phi i32 [ 420, %20 ], [ 0, %17 ]
  %27 = call i32 (i8*, i32, ...) @open64(i8* %13, i32 %25, i32 %26) #10
  store i32 %27, i32* %14, align 8
  %28 = icmp sgt i32 %27, -1
  br label %29

29:                                               ; preds = %3, %24
  %30 = phi i1 [ %28, %24 ], [ false, %3 ]
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  ret i1 %30
}

declare void @_Z13FX_UTF8EncodeN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::ByteString"* sret, %"class.fxcrt::StringViewTemplate.7"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #6

declare i32 @close(i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK20CFX_FileAccess_Posix7GetSizeEv(%class.CFX_FileAccess_Posix* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = alloca %struct.stat, align 8
  %3 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = bitcast %struct.stat* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %7) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 144, i1 false)
  %8 = bitcast %struct.stat* %2 to %struct.stat64*
  %9 = call i32 @__fxstat64(i32 1, i32 %4, %struct.stat64* nonnull %8) #10
  %10 = getelementptr inbounds %struct.stat, %struct.stat* %2, i64 0, i32 8
  %11 = load i64, i64* %10, align 8
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %7) #10
  br label %12

12:                                               ; preds = %1, %6
  %13 = phi i64 [ %11, %6 ], [ 0, %1 ]
  ret i64 %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK20CFX_FileAccess_Posix11GetPositionEv(%class.CFX_FileAccess_Posix* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = tail call i64 @lseek64(i32 %3, i64 0, i32 1) #10
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi i64 [ %6, %5 ], [ -1, %1 ]
  ret i64 %8
}

; Function Attrs: nounwind
declare i64 @lseek64(i32, i64, i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN20CFX_FileAccess_Posix11SetPositionEl(%class.CFX_FileAccess_Posix* nocapture readonly, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call i64 @lseek64(i32 %4, i64 %1, i32 0) #10
  br label %8

8:                                                ; preds = %2, %6
  %9 = phi i64 [ %7, %6 ], [ -1, %2 ]
  ret i64 %9
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i64 @_ZN20CFX_FileAccess_Posix4ReadEPvm(%class.CFX_FileAccess_Posix* nocapture readonly, i8* nocapture, i64) unnamed_addr #7 align 2 {
  %4 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @read(i32 %5, i8* %1, i64 %2) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  ret i64 %10
}

; Function Attrs: nofree
declare i64 @read(i32, i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind ssp uwtable
define hidden i64 @_ZN20CFX_FileAccess_Posix5WriteEPKvm(%class.CFX_FileAccess_Posix* nocapture readonly, i8* nocapture readonly, i64) unnamed_addr #7 align 2 {
  %4 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @write(i32 %5, i8* %1, i64 %2) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  ret i64 %10
}

; Function Attrs: nofree
declare i64 @write(i32, i8* nocapture readonly, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN20CFX_FileAccess_Posix7ReadPosEPvml(%class.CFX_FileAccess_Posix* nocapture readonly, i8* nocapture, i64, i64) unnamed_addr #0 align 2 {
  %5 = alloca %struct.stat, align 8
  %6 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %27, label %9

9:                                                ; preds = %4
  %10 = bitcast %struct.stat* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %10) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 144, i1 false) #10
  %11 = bitcast %struct.stat* %5 to %struct.stat64*
  %12 = call i32 @__fxstat64(i32 1, i32 %7, %struct.stat64* nonnull %11) #10
  %13 = getelementptr inbounds %struct.stat, %struct.stat* %5, i64 0, i32 8
  %14 = load i64, i64* %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %10) #10
  %15 = icmp sgt i64 %14, %3
  br i1 %15, label %16, label %27

16:                                               ; preds = %9
  %17 = load i32, i32* %6, align 8
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %16
  %20 = call i64 @lseek64(i32 %17, i64 %3, i32 0) #10
  %21 = icmp eq i64 %20, -1
  br i1 %21, label %27, label %22

22:                                               ; preds = %19
  %23 = load i32, i32* %6, align 8
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %22
  %26 = call i64 @read(i32 %23, i8* %1, i64 %2) #10
  br label %27

27:                                               ; preds = %16, %25, %22, %19, %9, %4
  %28 = phi i64 [ 0, %4 ], [ 0, %9 ], [ 0, %19 ], [ %26, %25 ], [ 0, %22 ], [ 0, %16 ]
  ret i64 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN20CFX_FileAccess_Posix8WritePosEPKvml(%class.CFX_FileAccess_Posix* nocapture readonly, i8* nocapture readonly, i64, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %16, label %8

8:                                                ; preds = %4
  %9 = tail call i64 @lseek64(i32 %6, i64 %3, i32 0) #10
  %10 = icmp eq i64 %9, -1
  br i1 %10, label %16, label %11

11:                                               ; preds = %8
  %12 = load i32, i32* %5, align 8
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %11
  %15 = tail call i64 @write(i32 %12, i8* %1, i64 %2) #10
  br label %16

16:                                               ; preds = %14, %11, %8, %4
  %17 = phi i64 [ 0, %4 ], [ 0, %8 ], [ %15, %14 ], [ 0, %11 ]
  ret i64 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN20CFX_FileAccess_Posix5FlushEv(%class.CFX_FileAccess_Posix* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = tail call i32 @fsync(i32 %3) #10
  %7 = icmp sgt i32 %6, -1
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i1 [ %7, %5 ], [ false, %1 ]
  ret i1 %9
}

declare i32 @fsync(i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN20CFX_FileAccess_Posix8TruncateEl(%class.CFX_FileAccess_Posix* nocapture readonly, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_FileAccess_Posix, %class.CFX_FileAccess_Posix* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = tail call i32 @ftruncate64(i32 %4, i64 %1) #10
  %8 = icmp eq i32 %7, 0
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi i1 [ %8, %6 ], [ false, %2 ]
  ret i1 %10
}

; Function Attrs: nounwind
declare i32 @ftruncate64(i32, i64) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @__fxstat64(i32, i32, %struct.stat64*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK5fxcrt10ByteString12AsStringViewEv: argument 0"}
!4 = distinct !{!4, !"_ZNK5fxcrt10ByteString12AsStringViewEv"}
