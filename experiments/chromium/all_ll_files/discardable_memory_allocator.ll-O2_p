; ModuleID = '../../base/memory/discardable_memory_allocator.cc'
source_filename = "../../base/memory/discardable_memory_allocator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::DiscardableMemoryAllocator" = type { i32 (...)** }
%"class.base::DiscardableMemory" = type { i32 (...)** }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@_ZN4base12_GLOBAL__N_123g_discardable_allocatorE = internal unnamed_addr global %"class.base::DiscardableMemoryAllocator"* null, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base26DiscardableMemoryAllocator11SetInstanceEPS0_(%"class.base::DiscardableMemoryAllocator"*) local_unnamed_addr #0 align 2 {
  store %"class.base::DiscardableMemoryAllocator"* %0, %"class.base::DiscardableMemoryAllocator"** @_ZN4base12_GLOBAL__N_123g_discardable_allocatorE, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.base::DiscardableMemoryAllocator"* @_ZN4base26DiscardableMemoryAllocator11GetInstanceEv() local_unnamed_addr #1 align 2 {
  %1 = load %"class.base::DiscardableMemoryAllocator"*, %"class.base::DiscardableMemoryAllocator"** @_ZN4base12_GLOBAL__N_123g_discardable_allocatorE, align 8
  ret %"class.base::DiscardableMemoryAllocator"* %1
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::DiscardableMemory"* @_ZN4base26DiscardableMemoryAllocator45AllocateLockedDiscardableMemoryWithRetryOrDieEmNS_12OnceCallbackIFvvEEE(%"class.base::DiscardableMemoryAllocator"*, i64, %"class.base::OnceCallback"* nocapture) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = load %"class.base::DiscardableMemoryAllocator"*, %"class.base::DiscardableMemoryAllocator"** @_ZN4base12_GLOBAL__N_123g_discardable_allocatorE, align 8
  %6 = bitcast %"class.base::DiscardableMemoryAllocator"* %5 to %"class.base::DiscardableMemory"* (%"class.base::DiscardableMemoryAllocator"*, i64)***
  %7 = load %"class.base::DiscardableMemory"* (%"class.base::DiscardableMemoryAllocator"*, i64)**, %"class.base::DiscardableMemory"* (%"class.base::DiscardableMemoryAllocator"*, i64)*** %6, align 8
  %8 = getelementptr inbounds %"class.base::DiscardableMemory"* (%"class.base::DiscardableMemoryAllocator"*, i64)*, %"class.base::DiscardableMemory"* (%"class.base::DiscardableMemoryAllocator"*, i64)** %7, i64 2
  %9 = load %"class.base::DiscardableMemory"* (%"class.base::DiscardableMemoryAllocator"*, i64)*, %"class.base::DiscardableMemory"* (%"class.base::DiscardableMemoryAllocator"*, i64)** %8, align 8
  %10 = tail call %"class.base::DiscardableMemory"* %9(%"class.base::DiscardableMemoryAllocator"* %5, i64 %1) #6
  %11 = ptrtoint %"class.base::DiscardableMemory"* %10 to i64
  %12 = icmp eq %"class.base::DiscardableMemory"* %10, null
  br i1 %12, label %13, label %35

13:                                               ; preds = %3
  %14 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #6
  %15 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %17, i64* %18, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %15, align 8
  %19 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  %20 = inttoptr i64 %17 to %"class.base::internal::BindStateBase"*
  %21 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %20, i64 0, i32 1
  %22 = bitcast void ()** %21 to void (%"class.base::internal::BindStateBase"*)**
  %23 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %22, align 8
  tail call void %23(%"class.base::internal::BindStateBase"* %20) #6
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %19) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #6
  %24 = bitcast %"class.base::DiscardableMemoryAllocator"* %0 to void (%"class.base::DiscardableMemoryAllocator"*)***
  %25 = load void (%"class.base::DiscardableMemoryAllocator"*)**, void (%"class.base::DiscardableMemoryAllocator"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.base::DiscardableMemoryAllocator"*)*, void (%"class.base::DiscardableMemoryAllocator"*)** %25, i64 4
  %27 = load void (%"class.base::DiscardableMemoryAllocator"*)*, void (%"class.base::DiscardableMemoryAllocator"*)** %26, align 8
  call void %27(%"class.base::DiscardableMemoryAllocator"* %0) #6
  %28 = load %"class.base::DiscardableMemory"* (%"class.base::DiscardableMemoryAllocator"*, i64)**, %"class.base::DiscardableMemory"* (%"class.base::DiscardableMemoryAllocator"*, i64)*** %6, align 8
  %29 = getelementptr inbounds %"class.base::DiscardableMemory"* (%"class.base::DiscardableMemoryAllocator"*, i64)*, %"class.base::DiscardableMemory"* (%"class.base::DiscardableMemoryAllocator"*, i64)** %28, i64 2
  %30 = load %"class.base::DiscardableMemory"* (%"class.base::DiscardableMemoryAllocator"*, i64)*, %"class.base::DiscardableMemory"* (%"class.base::DiscardableMemoryAllocator"*, i64)** %29, align 8
  %31 = call %"class.base::DiscardableMemory"* %30(%"class.base::DiscardableMemoryAllocator"* %5, i64 %1) #6
  %32 = ptrtoint %"class.base::DiscardableMemory"* %31 to i64
  %33 = icmp eq %"class.base::DiscardableMemory"* %31, null
  br i1 %33, label %34, label %35

34:                                               ; preds = %13
  call void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64 %1) #6
  br label %35

35:                                               ; preds = %13, %3, %34
  %36 = phi i64 [ %11, %3 ], [ %32, %13 ], [ %32, %34 ]
  %37 = inttoptr i64 %36 to %"class.base::DiscardableMemory"*
  ret %"class.base::DiscardableMemory"* %37
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
