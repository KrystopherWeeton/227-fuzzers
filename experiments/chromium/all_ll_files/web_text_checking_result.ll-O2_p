; ModuleID = '../../third_party/blink/renderer/core/exported/web_text_checking_result.cc'
source_filename = "../../third_party/blink/renderer/core/exported/web_text_checking_result.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::TextCheckingResult" = type { i32, i32, i32, %"class.WTF::Vector", %"class.WTF::Vector.2" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"struct.blink::GrammarDetail"*, i32, i32 }
%"struct.blink::GrammarDetail" = type { i32, i32, %"class.WTF::Vector.2", %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::Vector.2" = type { %"class.WTF::VectorBuffer.3" }
%"class.WTF::VectorBuffer.3" = type { %"class.WTF::VectorBufferBase.4" }
%"class.WTF::VectorBufferBase.4" = type { %"class.WTF::String"*, i32, i32 }
%"struct.blink::WebTextCheckingResult" = type { i32, i32, i32, %"class.blink::WebVector" }
%"class.blink::WebVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::WebString"*, %"class.blink::WebString"*, %"class.std::__1::__compressed_pair" }
%"class.blink::WebString" = type { %class.scoped_refptr }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::WebString"* }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_ = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKN5blink9WebStringEEEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN3WTF6VectorIN5blink13GrammarDetailELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_ = comdat any

$_ZN3WTF15ConstructTraitsIN5blink13GrammarDetailENS_12VectorTraitsIS2_EENS_18PartitionAllocatorEE9ConstructIJRS2_EEEPS2_PvDpOT_ = comdat any

$_ZN3WTF6VectorIN5blink13GrammarDetailELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13GrammarDetailEEEmm = comdat any

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13GrammarDetailEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::GrammarDetail]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink21WebTextCheckingResultcvNS_18TextCheckingResultEEv(%"struct.blink::TextCheckingResult"* noalias sret, %"struct.blink::WebTextCheckingResult"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::WebString", align 8
  %4 = alloca %"class.WTF::Vector.2", align 8
  %5 = alloca %"struct.blink::GrammarDetail", align 8
  %6 = alloca %"class.blink::WebString", align 8
  %7 = bitcast %"struct.blink::TextCheckingResult"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 16, i1 false)
  %8 = getelementptr inbounds %"struct.blink::TextCheckingResult", %"struct.blink::TextCheckingResult"* %0, i64 0, i32 3
  %9 = bitcast %"class.WTF::Vector"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 32, i1 false) #7
  %10 = getelementptr inbounds %"struct.blink::WebTextCheckingResult", %"struct.blink::WebTextCheckingResult"* %1, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"struct.blink::TextCheckingResult", %"struct.blink::TextCheckingResult"* %0, i64 0, i32 0
  store i32 %11, i32* %12, align 8
  %13 = getelementptr inbounds %"struct.blink::WebTextCheckingResult", %"struct.blink::WebTextCheckingResult"* %1, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"struct.blink::TextCheckingResult", %"struct.blink::TextCheckingResult"* %0, i64 0, i32 1
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %"struct.blink::WebTextCheckingResult", %"struct.blink::WebTextCheckingResult"* %1, i64 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %"struct.blink::TextCheckingResult", %"struct.blink::TextCheckingResult"* %0, i64 0, i32 2
  store i32 %17, i32* %18, align 8
  %19 = bitcast %"class.WTF::Vector.2"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #7
  %20 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %4, i64 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %4, i64 0, i32 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %4, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 0, i64 16, i1 false) #7
  %23 = getelementptr inbounds %"struct.blink::WebTextCheckingResult", %"struct.blink::WebTextCheckingResult"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %24 = load %"class.blink::WebString"*, %"class.blink::WebString"** %23, align 8
  %25 = getelementptr inbounds %"struct.blink::WebTextCheckingResult", %"struct.blink::WebTextCheckingResult"* %1, i64 0, i32 3, i32 0, i32 0, i32 1
  %26 = load %"class.blink::WebString"*, %"class.blink::WebString"** %25, align 8
  %27 = icmp eq %"class.blink::WebString"* %24, %26
  br i1 %27, label %28, label %33

28:                                               ; preds = %46, %2
  %29 = getelementptr inbounds %"struct.blink::TextCheckingResult", %"struct.blink::TextCheckingResult"* %0, i64 0, i32 4
  %30 = call dereferenceable(16) %"class.WTF::Vector.2"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.2"* %29, %"class.WTF::Vector.2"* nonnull dereferenceable(16) %4)
  %31 = load i32, i32* %12, align 8
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %52, label %159

33:                                               ; preds = %2, %49
  %34 = phi i32 [ %51, %49 ], [ 0, %2 ]
  %35 = phi i32 [ %50, %49 ], [ 0, %2 ]
  %36 = phi %"class.blink::WebString"* [ %47, %49 ], [ %24, %2 ]
  %37 = icmp eq i32 %35, %34
  br i1 %37, label %45, label %38, !prof !2

38:                                               ; preds = %33
  %39 = load %"class.WTF::String"*, %"class.WTF::String"** %20, align 8
  %40 = zext i32 %35 to i64
  %41 = call %"class.WTF::StringImpl"* @_ZNK5blink9WebStringcvN3WTF6StringEEv(%"class.blink::WebString"* %36) #7
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 %40, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = load i32, i32* %22, align 4
  %44 = add i32 %43, 1
  store i32 %44, i32* %22, align 4
  br label %46

45:                                               ; preds = %33
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKN5blink9WebStringEEEvOT_(%"class.WTF::Vector.2"* nonnull %4, %"class.blink::WebString"* dereferenceable(8) %36) #7
  br label %46

46:                                               ; preds = %38, %45
  %47 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %36, i64 1
  %48 = icmp eq %"class.blink::WebString"* %47, %26
  br i1 %48, label %28, label %49

49:                                               ; preds = %46
  %50 = load i32, i32* %22, align 4
  %51 = load i32, i32* %21, align 8
  br label %33

52:                                               ; preds = %28
  %53 = bitcast %"struct.blink::GrammarDetail"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %53) #7
  %54 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %5, i64 0, i32 0
  %55 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %5, i64 0, i32 1
  %56 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %5, i64 0, i32 2, i32 0, i32 0, i32 2
  %57 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %5, i64 0, i32 3
  %58 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %57, i64 0, i32 0, i32 0
  %59 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %5, i64 0, i32 2
  %60 = bitcast %"class.WTF::Vector.2"* %59 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 24, i1 false) #7
  store i32 0, i32* %54, align 8
  %61 = load i32, i32* %16, align 8
  store i32 %61, i32* %55, align 4
  %62 = bitcast %"class.blink::WebString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62) #7
  %63 = load %"class.blink::WebString"*, %"class.blink::WebString"** %23, align 8
  %64 = load %"class.blink::WebString"*, %"class.blink::WebString"** %25, align 8
  %65 = icmp eq %"class.blink::WebString"* %63, %64
  br i1 %65, label %66, label %68

66:                                               ; preds = %52
  %67 = bitcast %"class.blink::WebString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %67) #7
  call void @_ZN5blink9WebString8FromUTF8EPKcm(%"class.blink::WebString"* nonnull sret %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0) #7
  call void @_ZN5blink9WebStringC2EOS0_(%"class.blink::WebString"* nonnull %6, %"class.blink::WebString"* nonnull dereferenceable(8) %3) #7
  call void @_ZN5blink9WebStringD1Ev(%"class.blink::WebString"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %67) #7
  br label %69

68:                                               ; preds = %52
  call void @_ZN5blink9WebStringC1ERKS0_(%"class.blink::WebString"* nonnull %6, %"class.blink::WebString"* dereferenceable(8) %63) #7
  br label %69

69:                                               ; preds = %68, %66
  %70 = call %"class.WTF::StringImpl"* @_ZNK5blink9WebStringcvN3WTF6StringEEv(%"class.blink::WebString"* nonnull %6) #7
  %71 = ptrtoint %"class.WTF::StringImpl"* %70 to i64
  %72 = bitcast %"class.WTF::String"* %57 to i64*
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  store i64 %71, i64* %72, align 8
  %74 = icmp eq %"class.WTF::StringImpl"* %73, null
  br i1 %74, label %88, label %75

75:                                               ; preds = %69
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load atomic i32, i32* %76 monotonic, align 4
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 0
  %81 = load i32, i32* %80, align 4
  br i1 %79, label %82, label %84

82:                                               ; preds = %75
  %83 = add i32 %81, -1
  store i32 %83, i32* %80, align 4
  br label %84

84:                                               ; preds = %82, %75
  %85 = phi i32 [ %83, %82 ], [ %81, %75 ]
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %73) #7
  br label %88

88:                                               ; preds = %87, %84, %69
  call void @_ZN5blink9WebStringD1Ev(%"class.blink::WebString"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62) #7
  %89 = getelementptr inbounds %"struct.blink::TextCheckingResult", %"struct.blink::TextCheckingResult"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds %"struct.blink::TextCheckingResult", %"struct.blink::TextCheckingResult"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %92 = load i32, i32* %91, align 8
  %93 = icmp eq i32 %90, %92
  br i1 %93, label %103, label %94, !prof !2

94:                                               ; preds = %88
  %95 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 0, i32 0, i32 0, i32 0
  %96 = load %"struct.blink::GrammarDetail"*, %"struct.blink::GrammarDetail"** %95, align 8
  %97 = zext i32 %90 to i64
  %98 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %96, i64 %97
  %99 = bitcast %"struct.blink::GrammarDetail"* %98 to i8*
  %100 = call %"struct.blink::GrammarDetail"* @_ZN3WTF15ConstructTraitsIN5blink13GrammarDetailENS_12VectorTraitsIS2_EENS_18PartitionAllocatorEE9ConstructIJRS2_EEEPS2_PvDpOT_(i8* %99, %"struct.blink::GrammarDetail"* nonnull dereferenceable(32) %5) #7
  %101 = load i32, i32* %89, align 4
  %102 = add i32 %101, 1
  store i32 %102, i32* %89, align 4
  br label %104

103:                                              ; preds = %88
  call void @_ZN3WTF6VectorIN5blink13GrammarDetailELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"* %8, %"struct.blink::GrammarDetail"* nonnull dereferenceable(32) %5) #7
  br label %104

104:                                              ; preds = %94, %103
  %105 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %5, i64 0, i32 3, i32 0, i32 0
  %106 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %105, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %106, null
  br i1 %107, label %121, label %108

108:                                              ; preds = %104
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %114 = load i32, i32* %113, align 4
  br i1 %112, label %115, label %117

115:                                              ; preds = %108
  %116 = add i32 %114, -1
  store i32 %116, i32* %113, align 4
  br label %117

117:                                              ; preds = %115, %108
  %118 = phi i32 [ %116, %115 ], [ %114, %108 ]
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %121

120:                                              ; preds = %117
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %106) #7
  br label %121

121:                                              ; preds = %120, %117, %104
  %122 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %59, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  %124 = icmp eq %"class.WTF::String"* %123, null
  br i1 %124, label %158, label %125, !prof !3

125:                                              ; preds = %121
  %126 = bitcast %"class.WTF::String"* %123 to i8*
  %127 = load i32, i32* %56, align 4
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %156, label %129, !prof !2

129:                                              ; preds = %125
  %130 = zext i32 %127 to i64
  %131 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %123, i64 %130
  br label %132

132:                                              ; preds = %150, %129
  %133 = phi %"class.WTF::String"* [ %151, %150 ], [ %123, %129 ]
  %134 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %133, i64 0, i32 0, i32 0
  %135 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %134, align 8
  %136 = icmp eq %"class.WTF::StringImpl"* %135, null
  br i1 %136, label %150, label %137

137:                                              ; preds = %132
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %135, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %139 = load atomic i32, i32* %138 monotonic, align 4
  %140 = and i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %135, i64 0, i32 0
  %143 = load i32, i32* %142, align 4
  br i1 %141, label %144, label %146

144:                                              ; preds = %137
  %145 = add i32 %143, -1
  store i32 %145, i32* %142, align 4
  br label %146

146:                                              ; preds = %144, %137
  %147 = phi i32 [ %145, %144 ], [ %143, %137 ]
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %150

149:                                              ; preds = %146
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %135) #7
  br label %150

150:                                              ; preds = %149, %146, %132
  %151 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %133, i64 1
  %152 = icmp eq %"class.WTF::String"* %151, %131
  br i1 %152, label %153, label %132

153:                                              ; preds = %150
  store i32 0, i32* %56, align 4
  %154 = bitcast %"class.WTF::Vector.2"* %59 to i8**
  %155 = load i8*, i8** %154, align 8
  br label %156

156:                                              ; preds = %153, %125
  %157 = phi i8* [ %155, %153 ], [ %126, %125 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %157) #7
  store %"class.WTF::String"* null, %"class.WTF::String"** %122, align 8
  br label %158

158:                                              ; preds = %121, %156
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %53) #7
  br label %159

159:                                              ; preds = %158, %28
  %160 = load %"class.WTF::String"*, %"class.WTF::String"** %20, align 8
  %161 = icmp eq %"class.WTF::String"* %160, null
  br i1 %161, label %195, label %162, !prof !3

162:                                              ; preds = %159
  %163 = bitcast %"class.WTF::String"* %160 to i8*
  %164 = load i32, i32* %22, align 4
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %193, label %166, !prof !2

166:                                              ; preds = %162
  %167 = zext i32 %164 to i64
  %168 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %160, i64 %167
  br label %169

169:                                              ; preds = %187, %166
  %170 = phi %"class.WTF::String"* [ %188, %187 ], [ %160, %166 ]
  %171 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %170, i64 0, i32 0, i32 0
  %172 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %171, align 8
  %173 = icmp eq %"class.WTF::StringImpl"* %172, null
  br i1 %173, label %187, label %174

174:                                              ; preds = %169
  %175 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %176 = load atomic i32, i32* %175 monotonic, align 4
  %177 = and i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 0, i32 0
  %180 = load i32, i32* %179, align 4
  br i1 %178, label %181, label %183

181:                                              ; preds = %174
  %182 = add i32 %180, -1
  store i32 %182, i32* %179, align 4
  br label %183

183:                                              ; preds = %181, %174
  %184 = phi i32 [ %182, %181 ], [ %180, %174 ]
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %183
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %172) #7
  br label %187

187:                                              ; preds = %186, %183, %169
  %188 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %170, i64 1
  %189 = icmp eq %"class.WTF::String"* %188, %168
  br i1 %189, label %190, label %169

190:                                              ; preds = %187
  store i32 0, i32* %22, align 4
  %191 = bitcast %"class.WTF::Vector.2"* %4 to i8**
  %192 = load i8*, i8** %191, align 8
  br label %193

193:                                              ; preds = %190, %162
  %194 = phi i8* [ %192, %190 ], [ %163, %162 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %194) #7
  store %"class.WTF::String"* null, %"class.WTF::String"** %20, align 8
  br label %195

195:                                              ; preds = %159, %193
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.2"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.2"*, %"class.WTF::Vector.2"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector.2"* %1, %0
  br i1 %3, label %219, label %4, !prof !2

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %39

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %15
  br label %17

17:                                               ; preds = %35, %10
  %18 = phi %"class.WTF::String"* [ %36, %35 ], [ %16, %10 ]
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #7
  br label %35

35:                                               ; preds = %34, %31, %17
  %36 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %37 = icmp eq %"class.WTF::String"* %36, %14
  br i1 %37, label %38, label %17

38:                                               ; preds = %35
  store i32 %8, i32* %5, align 4
  br label %116

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ugt i32 %8, %41
  br i1 %42, label %43, label %114

43:                                               ; preds = %39
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %80, label %45

45:                                               ; preds = %43
  %46 = icmp eq i32 %6, 0
  br i1 %46, label %74, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.WTF::String"*, %"class.WTF::String"** %48, align 8
  %50 = zext i32 %6 to i64
  %51 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 %50
  br label %52

52:                                               ; preds = %70, %47
  %53 = phi %"class.WTF::String"* [ %71, %70 ], [ %49, %47 ]
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #7
  br label %70

70:                                               ; preds = %69, %66, %52
  %71 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 1
  %72 = icmp eq %"class.WTF::String"* %71, %51
  br i1 %72, label %73, label %52

73:                                               ; preds = %70
  store i32 0, i32* %5, align 4
  br label %74

74:                                               ; preds = %73, %45
  %75 = bitcast %"class.WTF::Vector.2"* %0 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast %"class.WTF::Vector.2"* %0 to i64*
  store atomic i64 0, i64* %77 monotonic, align 8
  store i32 0, i32* %40, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #7
  %78 = load i32, i32* %7, align 4
  %79 = load i32, i32* %40, align 8
  br label %80

80:                                               ; preds = %43, %74
  %81 = phi i32 [ 0, %43 ], [ %79, %74 ]
  %82 = phi i32 [ %8, %43 ], [ %78, %74 ]
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %84, label %114, !prof !3

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %87 = icmp eq %"class.WTF::String"* %86, null
  %88 = zext i32 %82 to i64
  %89 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %88) #7
  %90 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %89, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #7
  br i1 %87, label %91, label %96

91:                                               ; preds = %84
  %92 = ptrtoint i8* %90 to i64
  %93 = bitcast %"class.WTF::Vector.2"* %0 to i64*
  store atomic i64 %92, i64* %93 monotonic, align 8
  %94 = lshr i64 %89, 3
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %40, align 8
  br label %114

96:                                               ; preds = %84
  %97 = lshr i64 %89, 3
  %98 = ptrtoint i8* %90 to i64
  %99 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %100 = icmp ne i8* %90, null
  %101 = icmp ne %"class.WTF::String"* %99, null
  %102 = and i1 %100, %101
  %103 = bitcast %"class.WTF::String"* %99 to i8*
  br i1 %102, label %104, label %110, !prof !3

104:                                              ; preds = %96
  %105 = load i32, i32* %5, align 4
  %106 = zext i32 %105 to i64
  %107 = shl nuw nsw i64 %106, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %90, i8* nonnull align 8 %103, i64 %107, i1 false) #7
  %108 = bitcast %"class.WTF::Vector.2"* %0 to i8**
  %109 = load i8*, i8** %108, align 8
  br label %110

110:                                              ; preds = %104, %96
  %111 = phi i8* [ %109, %104 ], [ %103, %96 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %111) #7
  %112 = bitcast %"class.WTF::Vector.2"* %0 to i64*
  store atomic i64 %98, i64* %112 monotonic, align 8
  %113 = trunc i64 %97 to i32
  store i32 %113, i32* %40, align 8
  br label %114

114:                                              ; preds = %39, %80, %91, %110
  %115 = load i32, i32* %5, align 4
  br label %116

116:                                              ; preds = %114, %38
  %117 = phi i32 [ %115, %114 ], [ %8, %38 ]
  %118 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %1, i64 0, i32 0, i32 0, i32 0
  %119 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %120 = zext i32 %117 to i64
  %121 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %119, i64 %120
  %122 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  %124 = icmp eq i32 %117, 0
  br i1 %124, label %175, label %125

125:                                              ; preds = %116, %167
  %126 = phi %"class.WTF::String"* [ %169, %167 ], [ %123, %116 ]
  %127 = phi %"class.WTF::String"* [ %168, %167 ], [ %119, %116 ]
  %128 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 0, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %148, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i33
  %140 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %139, i33 1) #7
  %141 = extractvalue { i33, i1 } %140, 1
  %142 = extractvalue { i33, i1 } %140, 0
  %143 = icmp slt i33 %142, 0
  %144 = or i1 %141, %143
  br i1 %144, label %145, label %146, !prof !2

145:                                              ; preds = %136
  tail call void @llvm.trap() #7
  unreachable

146:                                              ; preds = %136
  %147 = trunc i33 %142 to i32
  store i32 %147, i32* %137, align 4
  br label %148

148:                                              ; preds = %146, %131, %125
  %149 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %150 = bitcast %"class.WTF::String"* %126 to i64*
  %151 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 0, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  store i64 %149, i64* %150, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #7
  br label %167

167:                                              ; preds = %166, %163, %148
  %168 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 1
  %169 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 1
  %170 = icmp eq %"class.WTF::String"* %168, %121
  br i1 %170, label %171, label %125

171:                                              ; preds = %167
  %172 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %173 = load i32, i32* %5, align 4
  %174 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  br label %175

175:                                              ; preds = %171, %116
  %176 = phi %"class.WTF::String"* [ %174, %171 ], [ %123, %116 ]
  %177 = phi i32 [ %173, %171 ], [ 0, %116 ]
  %178 = phi %"class.WTF::String"* [ %172, %171 ], [ %119, %116 ]
  %179 = zext i32 %177 to i64
  %180 = load i32, i32* %7, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %181
  %183 = icmp eq i32 %177, %180
  br i1 %183, label %217, label %184

184:                                              ; preds = %175
  %185 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %176, i64 %179
  %186 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %179
  br label %187

187:                                              ; preds = %184, %211
  %188 = phi %"class.WTF::String"* [ %212, %211 ], [ %185, %184 ]
  %189 = phi %"class.WTF::String"* [ %213, %211 ], [ %186, %184 ]
  %190 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 0, i32 0, i32 0
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %192 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %191, %"class.WTF::StringImpl"** %192, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %193, label %211, label %194

194:                                              ; preds = %187
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = and i32 %196, 2
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %211

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = zext i32 %201 to i33
  %203 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %202, i33 1) #7
  %204 = extractvalue { i33, i1 } %203, 1
  %205 = extractvalue { i33, i1 } %203, 0
  %206 = icmp slt i33 %205, 0
  %207 = or i1 %204, %206
  br i1 %207, label %208, label %209, !prof !2

208:                                              ; preds = %199
  tail call void @llvm.trap() #7
  unreachable

209:                                              ; preds = %199
  %210 = trunc i33 %205 to i32
  store i32 %210, i32* %200, align 4
  br label %211

211:                                              ; preds = %209, %194, %187
  %212 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 1
  %213 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 1
  %214 = icmp eq %"class.WTF::String"* %213, %182
  br i1 %214, label %215, label %187

215:                                              ; preds = %211
  %216 = load i32, i32* %7, align 4
  br label %217

217:                                              ; preds = %215, %175
  %218 = phi i32 [ %216, %215 ], [ %177, %175 ]
  store i32 %218, i32* %5, align 4
  br label %219

219:                                              ; preds = %2, %217
  ret %"class.WTF::Vector.2"* %0
}

declare void @_ZN5blink9WebStringC1ERKS0_(%"class.blink::WebString"*, %"class.blink::WebString"* dereferenceable(8)) unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK5blink9WebStringcvN3WTF6StringEEv(%"class.blink::WebString"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink9WebStringD1Ev(%"class.blink::WebString"*) unnamed_addr #3

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKN5blink9WebStringEEEvOT_(%"class.WTF::Vector.2"*, %"class.blink::WebString"* dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 2
  %9 = add i32 %7, 1
  %10 = add i32 %9, %8
  %11 = icmp ugt i32 %10, 4
  %12 = select i1 %11, i32 %10, i32 4
  %13 = icmp ugt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  %15 = icmp ult i32 %7, %14
  %16 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::String"*, %"class.WTF::String"** %16, align 8
  br i1 %15, label %18, label %45, !prof !3

18:                                               ; preds = %2
  %19 = icmp eq %"class.WTF::String"* %17, null
  %20 = zext i32 %14 to i64
  %21 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %20) #7
  %22 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %21, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #7
  %23 = ptrtoint i8* %22 to i64
  br i1 %19, label %24, label %26

24:                                               ; preds = %18
  %25 = bitcast %"class.WTF::Vector.2"* %0 to i64*
  store atomic i64 %23, i64* %25 monotonic, align 8
  br label %41

26:                                               ; preds = %18
  %27 = load %"class.WTF::String"*, %"class.WTF::String"** %16, align 8
  %28 = icmp ne i8* %22, null
  %29 = icmp ne %"class.WTF::String"* %27, null
  %30 = and i1 %28, %29
  %31 = bitcast %"class.WTF::String"* %27 to i8*
  br i1 %30, label %32, label %38, !prof !3

32:                                               ; preds = %26
  %33 = load i32, i32* %3, align 4
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* nonnull align 8 %31, i64 %35, i1 false) #7
  %36 = bitcast %"class.WTF::Vector.2"* %0 to i8**
  %37 = load i8*, i8** %36, align 8
  br label %38

38:                                               ; preds = %32, %26
  %39 = phi i8* [ %37, %32 ], [ %31, %26 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %39) #7
  %40 = bitcast %"class.WTF::Vector.2"* %0 to i64*
  store atomic i64 %23, i64* %40 monotonic, align 8
  br label %41

41:                                               ; preds = %38, %24
  %42 = lshr i64 %21, 3
  %43 = trunc i64 %42 to i32
  store i32 %43, i32* %6, align 8
  %44 = bitcast i8* %22 to %"class.WTF::String"*
  br label %45

45:                                               ; preds = %41, %2
  %46 = phi %"class.WTF::String"* [ %17, %2 ], [ %44, %41 ]
  %47 = load i32, i32* %3, align 4
  %48 = zext i32 %47 to i64
  %49 = tail call %"class.WTF::StringImpl"* @_ZNK5blink9WebStringcvN3WTF6StringEEv(%"class.blink::WebString"* %1) #7
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %46, i64 %48, i32 0, i32 0
  store %"class.WTF::StringImpl"* %49, %"class.WTF::StringImpl"** %50, align 8
  %51 = load i32, i32* %3, align 4
  %52 = add i32 %51, 1
  store i32 %52, i32* %3, align 4
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN5blink9WebString8FromUTF8EPKcm(%"class.blink::WebString"* sret, i8*, i64) local_unnamed_addr #2

declare void @_ZN5blink9WebStringC2EOS0_(%"class.blink::WebString"*, %"class.blink::WebString"* dereferenceable(8)) unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink13GrammarDetailELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"*, %"struct.blink::GrammarDetail"* dereferenceable(32)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"struct.blink::GrammarDetail"*, %"struct.blink::GrammarDetail"** %6, align 8
  %8 = icmp ugt %"struct.blink::GrammarDetail"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %7, i64 %10
  %12 = icmp ugt %"struct.blink::GrammarDetail"* %11, %1
  br i1 %12, label %37, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %68, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq %"struct.blink::GrammarDetail"* %7, null
  br i1 %25, label %26, label %35

26:                                               ; preds = %24
  %27 = zext i32 %22 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13GrammarDetailEEEmm(i64 %27) #7
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13GrammarDetailEEEPKcv, i64 0, i64 0)) #7
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %28, 5
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %29 to %"struct.blink::GrammarDetail"*
  br label %68

35:                                               ; preds = %24
  tail call void @_ZN3WTF6VectorIN5blink13GrammarDetailELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %22) #7
  %36 = load %"struct.blink::GrammarDetail"*, %"struct.blink::GrammarDetail"** %6, align 8
  br label %68

37:                                               ; preds = %9
  %38 = ptrtoint %"struct.blink::GrammarDetail"* %1 to i64
  %39 = ptrtoint %"struct.blink::GrammarDetail"* %7 to i64
  %40 = sub i64 %38, %39
  %41 = ashr exact i64 %40, 5
  %42 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = lshr i32 %43, 2
  %45 = add i32 %43, 1
  %46 = add i32 %45, %44
  %47 = icmp ugt i32 %46, 4
  %48 = select i1 %47, i32 %46, i32 4
  %49 = icmp ugt i32 %48, %5
  %50 = select i1 %49, i32 %48, i32 %5
  %51 = icmp ult i32 %43, %50
  br i1 %51, label %52, label %65, !prof !3

52:                                               ; preds = %37
  %53 = icmp eq %"struct.blink::GrammarDetail"* %7, null
  br i1 %53, label %54, label %63

54:                                               ; preds = %52
  %55 = zext i32 %50 to i64
  %56 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13GrammarDetailEEEmm(i64 %55) #7
  %57 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %56, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13GrammarDetailEEEPKcv, i64 0, i64 0)) #7
  %58 = ptrtoint i8* %57 to i64
  %59 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = lshr i64 %56, 5
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %42, align 8
  %62 = bitcast i8* %57 to %"struct.blink::GrammarDetail"*
  br label %65

63:                                               ; preds = %52
  tail call void @_ZN3WTF6VectorIN5blink13GrammarDetailELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %50) #7
  %64 = load %"struct.blink::GrammarDetail"*, %"struct.blink::GrammarDetail"** %6, align 8
  br label %65

65:                                               ; preds = %37, %54, %63
  %66 = phi %"struct.blink::GrammarDetail"* [ %7, %37 ], [ %62, %54 ], [ %64, %63 ]
  %67 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %66, i64 %41
  br label %68

68:                                               ; preds = %35, %26, %13, %65
  %69 = phi %"struct.blink::GrammarDetail"* [ %66, %65 ], [ %7, %13 ], [ %34, %26 ], [ %36, %35 ]
  %70 = phi %"struct.blink::GrammarDetail"* [ %67, %65 ], [ %1, %13 ], [ %1, %26 ], [ %1, %35 ]
  %71 = load i32, i32* %3, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %69, i64 %72
  %74 = bitcast %"struct.blink::GrammarDetail"* %73 to i8*
  %75 = tail call %"struct.blink::GrammarDetail"* @_ZN3WTF15ConstructTraitsIN5blink13GrammarDetailENS_12VectorTraitsIS2_EENS_18PartitionAllocatorEE9ConstructIJRS2_EEEPS2_PvDpOT_(i8* %74, %"struct.blink::GrammarDetail"* dereferenceable(32) %70) #7
  %76 = load i32, i32* %3, align 4
  %77 = add i32 %76, 1
  store i32 %77, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::GrammarDetail"* @_ZN3WTF15ConstructTraitsIN5blink13GrammarDetailENS_12VectorTraitsIS2_EENS_18PartitionAllocatorEE9ConstructIJRS2_EEEPS2_PvDpOT_(i8*, %"struct.blink::GrammarDetail"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast i8* %0 to %"struct.blink::GrammarDetail"*
  %4 = bitcast %"struct.blink::GrammarDetail"* %1 to i64*
  %5 = bitcast i8* %0 to i64*
  %6 = load i64, i64* %4, align 8
  store i64 %6, i64* %5, align 8
  %7 = getelementptr inbounds i8, i8* %0, i64 8
  %8 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = bitcast i8* %7 to %"class.WTF::String"**
  store %"class.WTF::String"* null, %"class.WTF::String"** %10, align 8
  %11 = getelementptr inbounds i8, i8* %0, i64 16
  %12 = bitcast i8* %11 to i32*
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %9, 0
  br i1 %13, label %23, label %14

14:                                               ; preds = %2
  %15 = zext i32 %9 to i64
  %16 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %15) #7
  %17 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %16, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #7
  %18 = ptrtoint i8* %17 to i64
  %19 = bitcast i8* %7 to i64*
  store atomic i64 %18, i64* %19 monotonic, align 8
  %20 = lshr i64 %16, 3
  %21 = trunc i64 %20 to i32
  store i32 %21, i32* %12, align 8
  %22 = bitcast i8* %17 to %"class.WTF::String"*
  br label %23

23:                                               ; preds = %14, %2
  %24 = phi %"class.WTF::String"* [ null, %2 ], [ %22, %14 ]
  %25 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i8, i8* %0, i64 20
  %28 = bitcast i8* %27 to i32*
  store i32 %26, i32* %28, align 4
  %29 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::String"*, %"class.WTF::String"** %29, align 8
  %31 = load i32, i32* %25, align 4
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %30, i64 %32
  %34 = icmp eq i32 %31, 0
  br i1 %34, label %63, label %35

35:                                               ; preds = %23, %59
  %36 = phi %"class.WTF::String"* [ %60, %59 ], [ %24, %23 ]
  %37 = phi %"class.WTF::String"* [ %61, %59 ], [ %30, %23 ]
  %38 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %37, i64 0, i32 0, i32 0
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %36, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %39, %"class.WTF::StringImpl"** %40, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %39, null
  br i1 %41, label %59, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %59

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i33
  %51 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %50, i33 1) #7
  %52 = extractvalue { i33, i1 } %51, 1
  %53 = extractvalue { i33, i1 } %51, 0
  %54 = icmp slt i33 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %56, label %57, !prof !2

56:                                               ; preds = %47
  tail call void @llvm.trap() #7
  unreachable

57:                                               ; preds = %47
  %58 = trunc i33 %53 to i32
  store i32 %58, i32* %48, align 4
  br label %59

59:                                               ; preds = %57, %42, %35
  %60 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %36, i64 1
  %61 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %37, i64 1
  %62 = icmp eq %"class.WTF::String"* %61, %33
  br i1 %62, label %63, label %35

63:                                               ; preds = %59, %23
  %64 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %1, i64 0, i32 3, i32 0, i32 0
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  %66 = getelementptr inbounds i8, i8* %0, i64 24
  %67 = bitcast i8* %66 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %65, %"class.WTF::StringImpl"** %67, align 8
  %68 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %68, label %86, label %69

69:                                               ; preds = %63
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = load atomic i32, i32* %70 monotonic, align 4
  %72 = and i32 %71, 2
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %86

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %76 = load i32, i32* %75, align 4
  %77 = zext i32 %76 to i33
  %78 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %77, i33 1) #7
  %79 = extractvalue { i33, i1 } %78, 1
  %80 = extractvalue { i33, i1 } %78, 0
  %81 = icmp slt i33 %80, 0
  %82 = or i1 %79, %81
  br i1 %82, label %83, label %84, !prof !2

83:                                               ; preds = %74
  tail call void @llvm.trap() #7
  unreachable

84:                                               ; preds = %74
  %85 = trunc i33 %80 to i32
  store i32 %85, i32* %75, align 4
  br label %86

86:                                               ; preds = %63, %69, %84
  ret %"struct.blink::GrammarDetail"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink13GrammarDetailELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %82

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"struct.blink::GrammarDetail"*, %"struct.blink::GrammarDetail"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %80, label %14

14:                                               ; preds = %4, %76
  %15 = phi %"struct.blink::GrammarDetail"* [ %78, %76 ], [ %6, %4 ]
  %16 = phi %"struct.blink::GrammarDetail"* [ %77, %76 ], [ null, %4 ]
  %17 = bitcast %"struct.blink::GrammarDetail"* %15 to i64*
  %18 = bitcast %"struct.blink::GrammarDetail"* %16 to i64*
  %19 = load i64, i64* %17, align 8
  store i64 %19, i64* %18, align 8
  %20 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %16, i64 0, i32 2
  %21 = bitcast %"class.WTF::Vector.2"* %20 to i8*
  %22 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %15, i64 0, i32 2
  %23 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %16, i64 0, i32 2, i32 0, i32 0, i32 1
  %24 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %16, i64 0, i32 2, i32 0, i32 0, i32 2
  %25 = bitcast %"class.WTF::Vector.2"* %22 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 16, i1 false) #7
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::Vector.2"* %20 to i64*
  store atomic i64 0, i64* %25 monotonic, align 8
  store atomic i64 %26, i64* %27 monotonic, align 8
  %28 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %15, i64 0, i32 2, i32 0, i32 0, i32 1
  %29 = load i32, i32* %23, align 4
  %30 = load i32, i32* %28, align 4
  store i32 %30, i32* %23, align 4
  store i32 %29, i32* %28, align 4
  %31 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %15, i64 0, i32 2, i32 0, i32 0, i32 2
  %32 = load i32, i32* %24, align 4
  %33 = load i32, i32* %31, align 4
  store i32 %33, i32* %24, align 4
  store i32 %32, i32* %31, align 4
  %34 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %16, i64 0, i32 3
  %35 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %15, i64 0, i32 3
  %36 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %35, i64 0, i32 0, i32 0
  %37 = bitcast %"class.WTF::String"* %35 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.WTF::String"* %34 to i64*
  store i64 %38, i64* %39, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %36, align 8
  %40 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %22, i64 0, i32 0, i32 0, i32 0
  %41 = load %"class.WTF::String"*, %"class.WTF::String"** %40, align 8
  %42 = icmp eq %"class.WTF::String"* %41, null
  br i1 %42, label %76, label %43, !prof !3

43:                                               ; preds = %14
  %44 = bitcast %"class.WTF::String"* %41 to i8*
  %45 = load i32, i32* %31, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %74, label %47, !prof !2

47:                                               ; preds = %43
  %48 = zext i32 %45 to i64
  %49 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %41, i64 %48
  br label %50

50:                                               ; preds = %68, %47
  %51 = phi %"class.WTF::String"* [ %69, %68 ], [ %41, %47 ]
  %52 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %51, i64 0, i32 0, i32 0
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %52, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %53, null
  br i1 %54, label %68, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load atomic i32, i32* %56 monotonic, align 4
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 0
  %61 = load i32, i32* %60, align 4
  br i1 %59, label %62, label %64

62:                                               ; preds = %55
  %63 = add i32 %61, -1
  store i32 %63, i32* %60, align 4
  br label %64

64:                                               ; preds = %62, %55
  %65 = phi i32 [ %63, %62 ], [ %61, %55 ]
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %68

67:                                               ; preds = %64
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %53) #7
  br label %68

68:                                               ; preds = %67, %64, %50
  %69 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %51, i64 1
  %70 = icmp eq %"class.WTF::String"* %69, %49
  br i1 %70, label %71, label %50

71:                                               ; preds = %68
  store i32 0, i32* %31, align 4
  %72 = bitcast %"class.WTF::Vector.2"* %22 to i8**
  %73 = load i8*, i8** %72, align 8
  br label %74

74:                                               ; preds = %71, %43
  %75 = phi i8* [ %73, %71 ], [ %44, %43 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %75) #7
  store %"class.WTF::String"* null, %"class.WTF::String"** %40, align 8
  br label %76

76:                                               ; preds = %14, %74
  %77 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %16, i64 1
  %78 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %15, i64 1
  %79 = icmp eq %"struct.blink::GrammarDetail"* %78, %10
  br i1 %79, label %80, label %14

80:                                               ; preds = %76, %4
  %81 = bitcast %"struct.blink::GrammarDetail"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %81) #7
  br label %173

82:                                               ; preds = %2
  %83 = zext i32 %1 to i64
  %84 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13GrammarDetailEEEmm(i64 %83) #7
  %85 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %84, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13GrammarDetailEEEPKcv, i64 0, i64 0)) #7
  %86 = lshr i64 %84, 5
  %87 = ptrtoint i8* %85 to i64
  %88 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %89 = load %"struct.blink::GrammarDetail"*, %"struct.blink::GrammarDetail"** %88, align 8
  %90 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %89, i64 %92
  %94 = icmp eq i32 %91, 0
  br i1 %94, label %95, label %97

95:                                               ; preds = %82
  %96 = bitcast %"struct.blink::GrammarDetail"* %89 to i8*
  br label %168

97:                                               ; preds = %82
  %98 = bitcast i8* %85 to %"struct.blink::GrammarDetail"*
  br label %99

99:                                               ; preds = %161, %97
  %100 = phi %"struct.blink::GrammarDetail"* [ %163, %161 ], [ %89, %97 ]
  %101 = phi %"struct.blink::GrammarDetail"* [ %162, %161 ], [ %98, %97 ]
  %102 = bitcast %"struct.blink::GrammarDetail"* %100 to i64*
  %103 = bitcast %"struct.blink::GrammarDetail"* %101 to i64*
  %104 = load i64, i64* %102, align 8
  store i64 %104, i64* %103, align 8
  %105 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %101, i64 0, i32 2
  %106 = bitcast %"class.WTF::Vector.2"* %105 to i8*
  %107 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %100, i64 0, i32 2
  %108 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %101, i64 0, i32 2, i32 0, i32 0, i32 1
  %109 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %101, i64 0, i32 2, i32 0, i32 0, i32 2
  %110 = bitcast %"class.WTF::Vector.2"* %107 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 16, i1 false) #7
  %111 = load i64, i64* %110, align 8
  %112 = bitcast %"class.WTF::Vector.2"* %105 to i64*
  store atomic i64 0, i64* %110 monotonic, align 8
  store atomic i64 %111, i64* %112 monotonic, align 8
  %113 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %100, i64 0, i32 2, i32 0, i32 0, i32 1
  %114 = load i32, i32* %108, align 4
  %115 = load i32, i32* %113, align 4
  store i32 %115, i32* %108, align 4
  store i32 %114, i32* %113, align 4
  %116 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %100, i64 0, i32 2, i32 0, i32 0, i32 2
  %117 = load i32, i32* %109, align 4
  %118 = load i32, i32* %116, align 4
  store i32 %118, i32* %109, align 4
  store i32 %117, i32* %116, align 4
  %119 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %101, i64 0, i32 3
  %120 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %100, i64 0, i32 3
  %121 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %120, i64 0, i32 0, i32 0
  %122 = bitcast %"class.WTF::String"* %120 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.WTF::String"* %119 to i64*
  store i64 %123, i64* %124, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %121, align 8
  %125 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %107, i64 0, i32 0, i32 0, i32 0
  %126 = load %"class.WTF::String"*, %"class.WTF::String"** %125, align 8
  %127 = icmp eq %"class.WTF::String"* %126, null
  br i1 %127, label %161, label %128, !prof !3

128:                                              ; preds = %99
  %129 = bitcast %"class.WTF::String"* %126 to i8*
  %130 = load i32, i32* %116, align 4
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %159, label %132, !prof !2

132:                                              ; preds = %128
  %133 = zext i32 %130 to i64
  %134 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 %133
  br label %135

135:                                              ; preds = %153, %132
  %136 = phi %"class.WTF::String"* [ %154, %153 ], [ %126, %132 ]
  %137 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %136, i64 0, i32 0, i32 0
  %138 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %137, align 8
  %139 = icmp eq %"class.WTF::StringImpl"* %138, null
  br i1 %139, label %153, label %140

140:                                              ; preds = %135
  %141 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %138, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %142 = load atomic i32, i32* %141 monotonic, align 4
  %143 = and i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %138, i64 0, i32 0
  %146 = load i32, i32* %145, align 4
  br i1 %144, label %147, label %149

147:                                              ; preds = %140
  %148 = add i32 %146, -1
  store i32 %148, i32* %145, align 4
  br label %149

149:                                              ; preds = %147, %140
  %150 = phi i32 [ %148, %147 ], [ %146, %140 ]
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %153

152:                                              ; preds = %149
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %138) #7
  br label %153

153:                                              ; preds = %152, %149, %135
  %154 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %136, i64 1
  %155 = icmp eq %"class.WTF::String"* %154, %134
  br i1 %155, label %156, label %135

156:                                              ; preds = %153
  store i32 0, i32* %116, align 4
  %157 = bitcast %"class.WTF::Vector.2"* %107 to i8**
  %158 = load i8*, i8** %157, align 8
  br label %159

159:                                              ; preds = %156, %128
  %160 = phi i8* [ %158, %156 ], [ %129, %128 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %160) #7
  store %"class.WTF::String"* null, %"class.WTF::String"** %125, align 8
  br label %161

161:                                              ; preds = %99, %159
  %162 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %101, i64 1
  %163 = getelementptr inbounds %"struct.blink::GrammarDetail", %"struct.blink::GrammarDetail"* %100, i64 1
  %164 = icmp eq %"struct.blink::GrammarDetail"* %163, %93
  br i1 %164, label %165, label %99

165:                                              ; preds = %161
  %166 = bitcast %"class.WTF::Vector"* %0 to i8**
  %167 = load i8*, i8** %166, align 8
  br label %168

168:                                              ; preds = %95, %165
  %169 = phi i8* [ %167, %165 ], [ %96, %95 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %169) #7
  %170 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %87, i64* %170 monotonic, align 8
  %171 = trunc i64 %86 to i32
  %172 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %171, i32* %172, align 8
  br label %173

173:                                              ; preds = %168, %80
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13GrammarDetailEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 67043328
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 67043328) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 5
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
