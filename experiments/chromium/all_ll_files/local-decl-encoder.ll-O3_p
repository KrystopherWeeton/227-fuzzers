; ModuleID = '../../v8/src/wasm/local-decl-encoder.cc'
source_filename = "../../v8/src/wasm/local-decl-encoder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::wasm::LocalDeclEncoder" = type { %"class.v8::internal::Signature"*, %"class.v8::internal::ZoneVector", i64 }
%"class.v8::internal::Signature" = type { i64, i64, %"class.v8::internal::wasm::ValueType"* }
%"class.v8::internal::wasm::ValueType" = type { i32 }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type { i32, %"class.v8::internal::wasm::ValueType" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.5" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2v88internal4wasm16LocalDeclEncoder7PrependEPNS0_4ZoneEPPKhS7_(%"class.v8::internal::wasm::LocalDeclEncoder"* nocapture readonly, %"class.v8::internal::Zone"*, i8** nocapture, i8** nocapture) local_unnamed_addr #0 align 2 {
  %5 = bitcast i8** %3 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast i8** %2 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = tail call i64 @_ZNK2v88internal4wasm16LocalDeclEncoder4SizeEv(%"class.v8::internal::wasm::LocalDeclEncoder"* %0)
  %11 = add i64 %9, 7
  %12 = add i64 %11, %10
  %13 = and i64 %12, -8
  %14 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %15
  %19 = icmp ugt i64 %13, %18
  br i1 %19, label %20, label %22, !prof !2

20:                                               ; preds = %4
  %21 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 %13) #5
  br label %24

22:                                               ; preds = %4
  %23 = add i64 %13, %15
  store i64 %23, i64* %14, align 8
  br label %24

24:                                               ; preds = %20, %22
  %25 = phi i64 [ %21, %20 ], [ %15, %22 ]
  %26 = inttoptr i64 %25 to i8*
  %27 = tail call i64 @_ZNK2v88internal4wasm16LocalDeclEncoder4EmitEPh(%"class.v8::internal::wasm::LocalDeclEncoder"* %0, i8* %26)
  %28 = icmp eq i64 %9, 0
  br i1 %28, label %32, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds i8, i8* %26, i64 %27
  %31 = load i8*, i8** %2, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %9, i1 false) #5
  br label %32

32:                                               ; preds = %24, %29
  %33 = add i64 %27, %9
  store i8* %26, i8** %2, align 8
  %34 = getelementptr inbounds i8, i8* %26, i64 %33
  store i8* %34, i8** %3, align 8
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK2v88internal4wasm16LocalDeclEncoder4SizeEv(%"class.v8::internal::wasm::LocalDeclEncoder"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::wasm::LocalDeclEncoder", %"class.v8::internal::wasm::LocalDeclEncoder"* %0, i64 0, i32 1, i32 0
  %3 = getelementptr inbounds %"class.v8::internal::wasm::LocalDeclEncoder", %"class.v8::internal::wasm::LocalDeclEncoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %4 = bitcast %"struct.std::__1::pair"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = inttoptr i64 %7 to %"struct.std::__1::pair"*
  %11 = inttoptr i64 %5 to %"struct.std::__1::pair"*
  br label %12

12:                                               ; preds = %12, %1
  %13 = phi i64 [ %9, %1 ], [ %16, %12 ]
  %14 = phi i64 [ 0, %1 ], [ %15, %12 ]
  %15 = add nuw nsw i64 %14, 1
  %16 = lshr i64 %13, 7
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %12

18:                                               ; preds = %12
  %19 = icmp eq %"struct.std::__1::pair"* %10, %11
  br i1 %19, label %20, label %22

20:                                               ; preds = %81, %18
  %21 = phi i64 [ %15, %18 ], [ %87, %81 ]
  ret i64 %21

22:                                               ; preds = %18, %81
  %23 = phi i64 [ %87, %81 ], [ %15, %18 ]
  %24 = phi %"struct.std::__1::pair"* [ %88, %81 ], [ %10, %18 ]
  %25 = bitcast %"struct.std::__1::pair"* %24 to i64*
  %26 = load i64, i64* %25, align 4
  %27 = and i64 %26, 4294967295
  br label %28

28:                                               ; preds = %28, %22
  %29 = phi i64 [ %27, %22 ], [ %32, %28 ]
  %30 = phi i64 [ 0, %22 ], [ %31, %28 ]
  %31 = add nuw nsw i64 %30, 1
  %32 = lshr i64 %29, 7
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %28

34:                                               ; preds = %28
  %35 = lshr i64 %26, 32
  %36 = and i64 %26, 133143986176
  %37 = icmp eq i64 %36, 38654705664
  %38 = zext i1 %37 to i64
  %39 = trunc i64 %35 to i8
  %40 = and i8 %39, 31
  switch i8 %40, label %67 [
    i8 10, label %49
    i8 11, label %41
  ]

41:                                               ; preds = %34
  %42 = lshr i64 %26, 37
  %43 = trunc i64 %42 to i32
  %44 = and i32 %43, 1048575
  %45 = icmp ult i32 %44, 1000000
  %46 = add nsw i32 %44, -1000003
  %47 = icmp ult i32 %46, 2
  %48 = or i1 %45, %47
  br i1 %48, label %55, label %67

49:                                               ; preds = %34
  %50 = lshr i64 %26, 37
  %51 = trunc i64 %50 to i32
  %52 = and i32 %51, 1048575
  %53 = add nsw i32 %52, -1000003
  %54 = icmp ugt i32 %53, 1
  br i1 %54, label %55, label %67

55:                                               ; preds = %41, %49
  %56 = phi i32 [ %44, %41 ], [ %52, %49 ]
  %57 = add nsw i32 %56, -1000000
  %58 = icmp ugt i32 %57, 5
  %59 = icmp ugt i32 %56, 63
  %60 = and i1 %59, %58
  br i1 %60, label %61, label %67

61:                                               ; preds = %55, %61
  %62 = phi i64 [ %64, %61 ], [ 1, %55 ]
  %63 = phi i32 [ %65, %61 ], [ %56, %55 ]
  %64 = add nuw nsw i64 %62, 1
  %65 = lshr i32 %63, 7
  %66 = icmp ugt i32 %63, 8191
  br i1 %66, label %61, label %67

67:                                               ; preds = %61, %55, %34, %41, %49
  %68 = phi i64 [ 0, %49 ], [ 0, %41 ], [ 0, %34 ], [ 1, %55 ], [ %64, %61 ]
  %69 = and i8 %39, 30
  %70 = or i8 %69, 1
  %71 = icmp eq i8 %70, 9
  br i1 %71, label %72, label %81

72:                                               ; preds = %67
  %73 = lshr i64 %26, 37
  %74 = and i64 %73, 1048575
  br label %75

75:                                               ; preds = %75, %72
  %76 = phi i64 [ %74, %72 ], [ %79, %75 ]
  %77 = phi i64 [ 0, %72 ], [ %78, %75 ]
  %78 = add nuw nsw i64 %77, 1
  %79 = lshr i64 %76, 7
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %75

81:                                               ; preds = %75, %67
  %82 = phi i64 [ 0, %67 ], [ %78, %75 ]
  %83 = add i64 %23, 2
  %84 = add i64 %83, %38
  %85 = add i64 %84, %30
  %86 = add i64 %85, %68
  %87 = add i64 %86, %82
  %88 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %24, i64 1
  %89 = icmp eq %"struct.std::__1::pair"* %88, %11
  br i1 %89, label %20, label %22
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal4wasm16LocalDeclEncoder4EmitEPh(%"class.v8::internal::wasm::LocalDeclEncoder"* nocapture readonly, i8*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint i8* %1 to i64
  %4 = getelementptr inbounds %"class.v8::internal::wasm::LocalDeclEncoder", %"class.v8::internal::wasm::LocalDeclEncoder"* %0, i64 0, i32 1, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::wasm::LocalDeclEncoder", %"class.v8::internal::wasm::LocalDeclEncoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %6 = bitcast %"struct.std::__1::pair"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = lshr exact i64 %10, 3
  %12 = trunc i64 %11 to i32
  %13 = icmp ugt i32 %12, 127
  %14 = trunc i64 %11 to i8
  br i1 %13, label %15, label %26

15:                                               ; preds = %2, %15
  %16 = phi i8* [ %20, %15 ], [ %1, %2 ]
  %17 = phi i8 [ %23, %15 ], [ %14, %2 ]
  %18 = phi i32 [ %21, %15 ], [ %12, %2 ]
  %19 = or i8 %17, -128
  %20 = getelementptr inbounds i8, i8* %16, i64 1
  store i8 %19, i8* %16, align 1
  %21 = lshr i32 %18, 7
  %22 = icmp ugt i32 %18, 16383
  %23 = trunc i32 %21 to i8
  br i1 %22, label %15, label %24

24:                                               ; preds = %15
  %25 = trunc i32 %21 to i8
  br label %26

26:                                               ; preds = %24, %2
  %27 = phi i8* [ %1, %2 ], [ %20, %24 ]
  %28 = phi i8 [ %14, %2 ], [ %25, %24 ]
  %29 = and i8 %28, 127
  %30 = getelementptr inbounds i8, i8* %27, i64 1
  %31 = ptrtoint i8* %30 to i64
  store i8 %29, i8* %27, align 1
  %32 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %33 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %32, align 8
  %34 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %5, align 8
  %35 = icmp eq %"struct.std::__1::pair"* %33, %34
  br i1 %35, label %36, label %39

36:                                               ; preds = %176, %26
  %37 = phi i64 [ %31, %26 ], [ %177, %176 ]
  %38 = sub i64 %37, %3
  ret i64 %38

39:                                               ; preds = %26, %176
  %40 = phi i64 [ %177, %176 ], [ %31, %26 ]
  %41 = phi %"struct.std::__1::pair"* [ %178, %176 ], [ %33, %26 ]
  %42 = inttoptr i64 %40 to i8*
  %43 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %41, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %41, i64 0, i32 1, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = icmp ugt i32 %44, 127
  %48 = trunc i32 %44 to i8
  br i1 %47, label %49, label %60

49:                                               ; preds = %39, %49
  %50 = phi i8* [ %54, %49 ], [ %42, %39 ]
  %51 = phi i8 [ %57, %49 ], [ %48, %39 ]
  %52 = phi i32 [ %55, %49 ], [ %44, %39 ]
  %53 = or i8 %51, -128
  %54 = getelementptr inbounds i8, i8* %50, i64 1
  store i8 %53, i8* %50, align 1
  %55 = lshr i32 %52, 7
  %56 = icmp ugt i32 %52, 16383
  %57 = trunc i32 %55 to i8
  br i1 %56, label %49, label %58

58:                                               ; preds = %49
  %59 = trunc i32 %55 to i8
  br label %60

60:                                               ; preds = %58, %39
  %61 = phi i8* [ %42, %39 ], [ %54, %58 ]
  %62 = phi i8 [ %48, %39 ], [ %59, %58 ]
  %63 = and i8 %62, 127
  %64 = getelementptr inbounds i8, i8* %61, i64 1
  store i8 %63, i8* %61, align 1
  %65 = trunc i32 %46 to i8
  %66 = and i8 %65, 31
  switch i8 %66, label %88 [
    i8 11, label %67
    i8 10, label %72
    i8 0, label %94
    i8 8, label %79
    i8 9, label %80
    i8 1, label %81
    i8 2, label %82
    i8 3, label %83
    i8 4, label %84
    i8 5, label %85
    i8 6, label %86
    i8 7, label %87
    i8 12, label %94
  ]

67:                                               ; preds = %60
  %68 = lshr i32 %46, 5
  %69 = and i32 %68, 1048575
  %70 = add nsw i32 %69, -1000000
  %71 = icmp ult i32 %70, 6
  br i1 %71, label %89, label %94

72:                                               ; preds = %60
  %73 = lshr i32 %46, 5
  %74 = and i32 %73, 1048575
  %75 = icmp eq i32 %74, 1000004
  %76 = select i1 %75, i8 103, i8 107
  %77 = icmp eq i32 %74, 1000003
  %78 = select i1 %77, i8 106, i8 %76
  br label %94

79:                                               ; preds = %60
  br label %94

80:                                               ; preds = %60
  br label %94

81:                                               ; preds = %60
  br label %94

82:                                               ; preds = %60
  br label %94

83:                                               ; preds = %60
  br label %94

84:                                               ; preds = %60
  br label %94

85:                                               ; preds = %60
  br label %94

86:                                               ; preds = %60
  br label %94

87:                                               ; preds = %60
  br label %94

88:                                               ; preds = %60
  unreachable

89:                                               ; preds = %67
  %90 = zext i32 %70 to i48
  %91 = shl nuw nsw i48 %90, 3
  %92 = lshr i48 121411954634608, %91
  %93 = trunc i48 %92 to i8
  br label %94

94:                                               ; preds = %67, %89, %60, %60, %72, %79, %80, %81, %82, %83, %84, %85, %86, %87
  %95 = phi i8 [ 121, %87 ], [ 122, %86 ], [ 123, %85 ], [ 124, %84 ], [ 125, %83 ], [ 126, %82 ], [ 127, %81 ], [ 105, %80 ], [ 104, %79 ], [ %78, %72 ], [ 64, %60 ], [ 64, %60 ], [ %93, %89 ], [ 108, %67 ]
  store i8 %95, i8* %64, align 1
  %96 = getelementptr inbounds i8, i8* %61, i64 2
  %97 = and i32 %46, 31
  %98 = icmp eq i32 %97, 9
  br i1 %98, label %99, label %104

99:                                               ; preds = %94
  %100 = lshr i32 %46, 25
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 63
  store i8 %102, i8* %96, align 1
  %103 = getelementptr inbounds i8, i8* %61, i64 3
  br label %104

104:                                              ; preds = %99, %94
  %105 = phi i8* [ %103, %99 ], [ %96, %94 ]
  %106 = and i8 %65, 30
  %107 = or i8 %106, 1
  %108 = icmp eq i8 %107, 9
  br i1 %108, label %109, label %130

109:                                              ; preds = %104
  %110 = lshr i32 %46, 5
  %111 = and i32 %110, 1048575
  %112 = icmp ugt i32 %111, 127
  %113 = trunc i32 %110 to i8
  br i1 %112, label %114, label %125

114:                                              ; preds = %109, %114
  %115 = phi i8* [ %119, %114 ], [ %105, %109 ]
  %116 = phi i8 [ %122, %114 ], [ %113, %109 ]
  %117 = phi i32 [ %120, %114 ], [ %111, %109 ]
  %118 = or i8 %116, -128
  %119 = getelementptr inbounds i8, i8* %115, i64 1
  store i8 %118, i8* %115, align 1
  %120 = lshr i32 %117, 7
  %121 = icmp ugt i32 %117, 16383
  %122 = trunc i32 %120 to i8
  br i1 %121, label %114, label %123

123:                                              ; preds = %114
  %124 = trunc i32 %120 to i8
  br label %125

125:                                              ; preds = %123, %109
  %126 = phi i8* [ %105, %109 ], [ %119, %123 ]
  %127 = phi i8 [ %113, %109 ], [ %124, %123 ]
  %128 = and i8 %127, 127
  %129 = getelementptr inbounds i8, i8* %126, i64 1
  store i8 %128, i8* %126, align 1
  br label %130

130:                                              ; preds = %125, %104
  %131 = phi i8* [ %129, %125 ], [ %105, %104 ]
  %132 = ptrtoint i8* %131 to i64
  switch i8 %66, label %176 [
    i8 10, label %140
    i8 11, label %133
  ]

133:                                              ; preds = %130
  %134 = lshr i32 %46, 5
  %135 = and i32 %134, 1048575
  %136 = icmp ult i32 %135, 1000000
  %137 = add nsw i32 %135, -1000003
  %138 = icmp ult i32 %137, 2
  %139 = or i1 %136, %138
  br i1 %139, label %145, label %176

140:                                              ; preds = %130
  %141 = lshr i32 %46, 5
  %142 = and i32 %141, 1048575
  %143 = add nsw i32 %142, -1000003
  %144 = icmp ugt i32 %143, 1
  br i1 %144, label %145, label %176

145:                                              ; preds = %133, %140
  %146 = phi i32 [ %135, %133 ], [ %142, %140 ]
  %147 = phi i32 [ %134, %133 ], [ %141, %140 ]
  %148 = add nsw i32 %146, -1000000
  %149 = icmp ult i32 %148, 6
  br i1 %149, label %169, label %150

150:                                              ; preds = %145
  %151 = icmp ugt i32 %146, 63
  %152 = trunc i32 %147 to i8
  br i1 %151, label %153, label %164

153:                                              ; preds = %150, %153
  %154 = phi i8* [ %158, %153 ], [ %131, %150 ]
  %155 = phi i8 [ %161, %153 ], [ %152, %150 ]
  %156 = phi i32 [ %159, %153 ], [ %146, %150 ]
  %157 = or i8 %155, -128
  %158 = getelementptr inbounds i8, i8* %154, i64 1
  store i8 %157, i8* %154, align 1
  %159 = lshr i32 %156, 7
  %160 = icmp ugt i32 %156, 8191
  %161 = trunc i32 %159 to i8
  br i1 %160, label %153, label %162

162:                                              ; preds = %153
  %163 = trunc i32 %159 to i8
  br label %164

164:                                              ; preds = %162, %150
  %165 = phi i8* [ %131, %150 ], [ %158, %162 ]
  %166 = phi i8 [ %152, %150 ], [ %163, %162 ]
  %167 = getelementptr inbounds i8, i8* %165, i64 1
  %168 = ptrtoint i8* %167 to i64
  store i8 %166, i8* %165, align 1
  br label %176

169:                                              ; preds = %145
  %170 = zext i32 %148 to i48
  %171 = shl nuw nsw i48 %170, 3
  %172 = lshr i48 121390446243696, %171
  %173 = trunc i48 %172 to i8
  %174 = getelementptr inbounds i8, i8* %131, i64 1
  %175 = ptrtoint i8* %174 to i64
  store i8 %173, i8* %131, align 1
  br label %176

176:                                              ; preds = %130, %169, %164, %133, %140
  %177 = phi i64 [ %132, %140 ], [ %132, %133 ], [ %168, %164 ], [ %175, %169 ], [ %132, %130 ]
  %178 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %41, i64 1
  %179 = icmp eq %"struct.std::__1::pair"* %178, %34
  br i1 %179, label %36, label %39
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal4wasm16LocalDeclEncoder9AddLocalsEjNS1_9ValueTypeE(%"class.v8::internal::wasm::LocalDeclEncoder"*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::wasm::LocalDeclEncoder", %"class.v8::internal::wasm::LocalDeclEncoder"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::wasm::LocalDeclEncoder", %"class.v8::internal::wasm::LocalDeclEncoder"* %0, i64 0, i32 0
  %7 = load %"class.v8::internal::Signature"*, %"class.v8::internal::Signature"** %6, align 8
  %8 = icmp eq %"class.v8::internal::Signature"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %7, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  br label %12

12:                                               ; preds = %3, %9
  %13 = phi i64 [ %11, %9 ], [ 0, %3 ]
  %14 = add i64 %13, %5
  %15 = trunc i64 %14 to i32
  %16 = zext i32 %1 to i64
  %17 = add i64 %5, %16
  store i64 %17, i64* %4, align 8
  %18 = getelementptr inbounds %"class.v8::internal::wasm::LocalDeclEncoder", %"class.v8::internal::wasm::LocalDeclEncoder"* %0, i64 0, i32 1, i32 0
  %19 = getelementptr inbounds %"class.v8::internal::wasm::LocalDeclEncoder", %"class.v8::internal::wasm::LocalDeclEncoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %20 = bitcast %"struct.std::__1::pair"** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.std::__1::vector"* %18 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %21, %23
  %25 = inttoptr i64 %21 to %"struct.std::__1::pair"*
  br i1 %24, label %35, label %26

26:                                               ; preds = %12
  %27 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 -1
  %28 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 -1, i32 1, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, %2
  br i1 %30, label %31, label %35

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %27, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = add i32 %33, %1
  store %"struct.std::__1::pair"* %27, %"struct.std::__1::pair"** %19, align 8
  br label %35

35:                                               ; preds = %12, %31, %26
  %36 = phi %"struct.std::__1::pair"* [ %25, %12 ], [ %27, %31 ], [ %25, %26 ]
  %37 = phi i32 [ %1, %12 ], [ %34, %31 ], [ %1, %26 ]
  %38 = getelementptr inbounds %"class.v8::internal::wasm::LocalDeclEncoder", %"class.v8::internal::wasm::LocalDeclEncoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %39 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %38, align 8
  %40 = icmp ult %"struct.std::__1::pair"* %36, %39
  %41 = ptrtoint %"struct.std::__1::pair"* %39 to i64
  br i1 %40, label %42, label %50

42:                                               ; preds = %35
  %43 = bitcast %"struct.std::__1::pair"* %36 to i64*
  %44 = zext i32 %2 to i64
  %45 = shl nuw i64 %44, 32
  %46 = zext i32 %37 to i64
  %47 = or i64 %45, %46
  store i64 %47, i64* %43, align 4
  %48 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 1
  %49 = ptrtoint %"struct.std::__1::pair"* %48 to i64
  store i64 %49, i64* %20, align 8
  br label %276

50:                                               ; preds = %35
  %51 = ptrtoint %"struct.std::__1::pair"* %36 to i64
  %52 = sub i64 %51, %23
  %53 = ashr exact i64 %52, 3
  %54 = add nsw i64 %53, 1
  %55 = icmp ugt i64 %54, 268435455
  br i1 %55, label %56, label %58

56:                                               ; preds = %50
  %57 = bitcast %"class.std::__1::vector"* %18 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %57) #6
  unreachable

58:                                               ; preds = %50
  %59 = bitcast %"struct.std::__1::pair"** %38 to i64*
  %60 = sub i64 %41, %23
  %61 = ashr exact i64 %60, 3
  %62 = icmp ult i64 %61, 134217727
  br i1 %62, label %63, label %68

63:                                               ; preds = %58
  %64 = ashr exact i64 %60, 2
  %65 = icmp ult i64 %64, %54
  %66 = select i1 %65, i64 %54, i64 %64
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %86, label %68

68:                                               ; preds = %63, %58
  %69 = phi i64 [ %66, %63 ], [ 268435455, %58 ]
  %70 = getelementptr inbounds %"class.v8::internal::wasm::LocalDeclEncoder", %"class.v8::internal::wasm::LocalDeclEncoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %71 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %70, align 8
  %72 = shl i64 %69, 3
  %73 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %71, i64 0, i32 2
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %71, i64 0, i32 3
  %76 = load i64, i64* %75, align 8
  %77 = sub i64 %76, %74
  %78 = icmp ugt i64 %72, %77
  br i1 %78, label %79, label %81, !prof !2

79:                                               ; preds = %68
  %80 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %71, i64 %72) #5
  br label %83

81:                                               ; preds = %68
  %82 = add i64 %74, %72
  store i64 %82, i64* %73, align 8
  br label %83

83:                                               ; preds = %81, %79
  %84 = phi i64 [ %80, %79 ], [ %74, %81 ]
  %85 = inttoptr i64 %84 to %"struct.std::__1::pair"*
  br label %86

86:                                               ; preds = %83, %63
  %87 = phi i64 [ %69, %83 ], [ 0, %63 ]
  %88 = phi %"struct.std::__1::pair"* [ %85, %83 ], [ null, %63 ]
  %89 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %88, i64 %53
  %90 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %88, i64 %87
  %91 = ptrtoint %"struct.std::__1::pair"* %90 to i64
  %92 = bitcast %"struct.std::__1::pair"* %89 to i64*
  %93 = zext i32 %2 to i64
  %94 = shl nuw i64 %93, 32
  %95 = zext i32 %37 to i64
  %96 = or i64 %94, %95
  store i64 %96, i64* %92, align 4
  %97 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %89, i64 1
  %98 = ptrtoint %"struct.std::__1::pair"* %97 to i64
  %99 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %18, i64 0, i32 0, i32 0
  %100 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %99, align 8
  %101 = ptrtoint %"struct.std::__1::pair"* %100 to i64
  %102 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %19, align 8
  %103 = icmp eq %"struct.std::__1::pair"* %102, %100
  br i1 %103, label %273, label %104

104:                                              ; preds = %86
  %105 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 -1, i32 0
  %106 = ptrtoint i32* %105 to i64
  %107 = sub i64 %106, %101
  %108 = lshr i64 %107, 3
  %109 = add nuw nsw i64 %108, 1
  %110 = icmp ult i64 %109, 4
  br i1 %110, label %203, label %111

111:                                              ; preds = %104
  %112 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 -1, i32 0
  %113 = ptrtoint i32* %112 to i64
  %114 = sub i64 %113, %101
  %115 = lshr i64 %114, 3
  %116 = xor i64 %115, -1
  %117 = add nsw i64 %53, %116
  %118 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %88, i64 %117
  %119 = xor i64 %115, -1
  %120 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 %119
  %121 = icmp ult %"struct.std::__1::pair"* %118, %102
  %122 = icmp ult %"struct.std::__1::pair"* %120, %89
  %123 = and i1 %121, %122
  br i1 %123, label %203, label %124

124:                                              ; preds = %111
  %125 = and i64 %109, 4611686018427387900
  %126 = sub nsw i64 0, %125
  %127 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %89, i64 %126
  %128 = sub nsw i64 0, %125
  %129 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 %128
  %130 = add nsw i64 %125, -4
  %131 = lshr exact i64 %130, 2
  %132 = add nuw nsw i64 %131, 1
  %133 = and i64 %132, 1
  %134 = icmp eq i64 %130, 0
  br i1 %134, label %181, label %135

135:                                              ; preds = %124
  %136 = sub nuw nsw i64 %132, %133
  %137 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %89, i64 -1
  %138 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 -1
  %139 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %89, i64 -1
  %140 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 -1
  br label %141

141:                                              ; preds = %141, %135
  %142 = phi i64 [ 0, %135 ], [ %176, %141 ]
  %143 = phi i64 [ %136, %135 ], [ %177, %141 ]
  %144 = sub i64 0, %142
  %145 = sub i64 0, %142
  %146 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %137, i64 %144
  %147 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %138, i64 %145
  %148 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %147, i64 -1
  %149 = bitcast %"struct.std::__1::pair"* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 4, !alias.scope !3
  %151 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %147, i64 -2
  %152 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %151, i64 -1
  %153 = bitcast %"struct.std::__1::pair"* %152 to <2 x i64>*
  %154 = load <2 x i64>, <2 x i64>* %153, align 4, !alias.scope !3
  %155 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %146, i64 -1
  %156 = bitcast %"struct.std::__1::pair"* %155 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %156, align 4, !alias.scope !6, !noalias !3
  %157 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %146, i64 -2
  %158 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %157, i64 -1
  %159 = bitcast %"struct.std::__1::pair"* %158 to <2 x i64>*
  store <2 x i64> %154, <2 x i64>* %159, align 4, !alias.scope !6, !noalias !3
  %160 = sub nuw nsw i64 -4, %142
  %161 = sub nuw nsw i64 -4, %142
  %162 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %139, i64 %160
  %163 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %140, i64 %161
  %164 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %163, i64 -1
  %165 = bitcast %"struct.std::__1::pair"* %164 to <2 x i64>*
  %166 = load <2 x i64>, <2 x i64>* %165, align 4, !alias.scope !3
  %167 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %163, i64 -2
  %168 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %167, i64 -1
  %169 = bitcast %"struct.std::__1::pair"* %168 to <2 x i64>*
  %170 = load <2 x i64>, <2 x i64>* %169, align 4, !alias.scope !3
  %171 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %162, i64 -1
  %172 = bitcast %"struct.std::__1::pair"* %171 to <2 x i64>*
  store <2 x i64> %166, <2 x i64>* %172, align 4, !alias.scope !6, !noalias !3
  %173 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %162, i64 -2
  %174 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %173, i64 -1
  %175 = bitcast %"struct.std::__1::pair"* %174 to <2 x i64>*
  store <2 x i64> %170, <2 x i64>* %175, align 4, !alias.scope !6, !noalias !3
  %176 = add i64 %142, 8
  %177 = add i64 %143, -2
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %141, !llvm.loop !8

179:                                              ; preds = %141
  %180 = sub nuw nsw i64 -8, %142
  br label %181

181:                                              ; preds = %179, %124
  %182 = phi i64 [ 0, %124 ], [ %180, %179 ]
  %183 = icmp eq i64 %133, 0
  br i1 %183, label %201, label %184

184:                                              ; preds = %181
  %185 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %89, i64 -1
  %186 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 -1
  %187 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 %182
  %188 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %182
  %189 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %188, i64 -1
  %190 = bitcast %"struct.std::__1::pair"* %189 to <2 x i64>*
  %191 = load <2 x i64>, <2 x i64>* %190, align 4, !alias.scope !3
  %192 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %188, i64 -2
  %193 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %192, i64 -1
  %194 = bitcast %"struct.std::__1::pair"* %193 to <2 x i64>*
  %195 = load <2 x i64>, <2 x i64>* %194, align 4, !alias.scope !3
  %196 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %187, i64 -1
  %197 = bitcast %"struct.std::__1::pair"* %196 to <2 x i64>*
  store <2 x i64> %191, <2 x i64>* %197, align 4, !alias.scope !6, !noalias !3
  %198 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %187, i64 -2
  %199 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %198, i64 -1
  %200 = bitcast %"struct.std::__1::pair"* %199 to <2 x i64>*
  store <2 x i64> %195, <2 x i64>* %200, align 4, !alias.scope !6, !noalias !3
  br label %201

201:                                              ; preds = %181, %184
  %202 = icmp eq i64 %109, %125
  br i1 %202, label %273, label %203

203:                                              ; preds = %201, %111, %104
  %204 = phi %"struct.std::__1::pair"* [ %89, %111 ], [ %89, %104 ], [ %127, %201 ]
  %205 = phi %"struct.std::__1::pair"* [ %102, %111 ], [ %102, %104 ], [ %129, %201 ]
  %206 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %205, i64 -1, i32 0
  %207 = ptrtoint i32* %206 to i64
  %208 = sub i64 %207, %101
  %209 = lshr i64 %208, 3
  %210 = add nuw nsw i64 %209, 1
  %211 = and i64 %210, 7
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %224, label %213

213:                                              ; preds = %203, %213
  %214 = phi %"struct.std::__1::pair"* [ %217, %213 ], [ %204, %203 ]
  %215 = phi %"struct.std::__1::pair"* [ %218, %213 ], [ %205, %203 ]
  %216 = phi i64 [ %222, %213 ], [ %211, %203 ]
  %217 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %214, i64 -1
  %218 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %215, i64 -1
  %219 = bitcast %"struct.std::__1::pair"* %218 to i64*
  %220 = bitcast %"struct.std::__1::pair"* %217 to i64*
  %221 = load i64, i64* %219, align 4
  store i64 %221, i64* %220, align 4
  %222 = add i64 %216, -1
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %213, !llvm.loop !10

224:                                              ; preds = %213, %203
  %225 = phi %"struct.std::__1::pair"* [ undef, %203 ], [ %217, %213 ]
  %226 = phi %"struct.std::__1::pair"* [ %204, %203 ], [ %217, %213 ]
  %227 = phi %"struct.std::__1::pair"* [ %205, %203 ], [ %218, %213 ]
  %228 = icmp ult i64 %208, 56
  br i1 %228, label %273, label %229

229:                                              ; preds = %224, %229
  %230 = phi %"struct.std::__1::pair"* [ %267, %229 ], [ %226, %224 ]
  %231 = phi %"struct.std::__1::pair"* [ %268, %229 ], [ %227, %224 ]
  %232 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %230, i64 -1
  %233 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -1
  %234 = bitcast %"struct.std::__1::pair"* %233 to i64*
  %235 = bitcast %"struct.std::__1::pair"* %232 to i64*
  %236 = load i64, i64* %234, align 4
  store i64 %236, i64* %235, align 4
  %237 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %230, i64 -2
  %238 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -2
  %239 = bitcast %"struct.std::__1::pair"* %238 to i64*
  %240 = bitcast %"struct.std::__1::pair"* %237 to i64*
  %241 = load i64, i64* %239, align 4
  store i64 %241, i64* %240, align 4
  %242 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %230, i64 -3
  %243 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -3
  %244 = bitcast %"struct.std::__1::pair"* %243 to i64*
  %245 = bitcast %"struct.std::__1::pair"* %242 to i64*
  %246 = load i64, i64* %244, align 4
  store i64 %246, i64* %245, align 4
  %247 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %230, i64 -4
  %248 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -4
  %249 = bitcast %"struct.std::__1::pair"* %248 to i64*
  %250 = bitcast %"struct.std::__1::pair"* %247 to i64*
  %251 = load i64, i64* %249, align 4
  store i64 %251, i64* %250, align 4
  %252 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %230, i64 -5
  %253 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -5
  %254 = bitcast %"struct.std::__1::pair"* %253 to i64*
  %255 = bitcast %"struct.std::__1::pair"* %252 to i64*
  %256 = load i64, i64* %254, align 4
  store i64 %256, i64* %255, align 4
  %257 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %230, i64 -6
  %258 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -6
  %259 = bitcast %"struct.std::__1::pair"* %258 to i64*
  %260 = bitcast %"struct.std::__1::pair"* %257 to i64*
  %261 = load i64, i64* %259, align 4
  store i64 %261, i64* %260, align 4
  %262 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %230, i64 -7
  %263 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -7
  %264 = bitcast %"struct.std::__1::pair"* %263 to i64*
  %265 = bitcast %"struct.std::__1::pair"* %262 to i64*
  %266 = load i64, i64* %264, align 4
  store i64 %266, i64* %265, align 4
  %267 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %230, i64 -8
  %268 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -8
  %269 = bitcast %"struct.std::__1::pair"* %268 to i64*
  %270 = bitcast %"struct.std::__1::pair"* %267 to i64*
  %271 = load i64, i64* %269, align 4
  store i64 %271, i64* %270, align 4
  %272 = icmp eq %"struct.std::__1::pair"* %268, %100
  br i1 %272, label %273, label %229, !llvm.loop !12

273:                                              ; preds = %224, %229, %201, %86
  %274 = phi %"struct.std::__1::pair"* [ %89, %86 ], [ %127, %201 ], [ %225, %224 ], [ %267, %229 ]
  %275 = ptrtoint %"struct.std::__1::pair"* %274 to i64
  store i64 %275, i64* %22, align 8
  store i64 %98, i64* %20, align 8
  store i64 %91, i64* %59, align 8
  br label %276

276:                                              ; preds = %42, %273
  ret i32 %15
}

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
