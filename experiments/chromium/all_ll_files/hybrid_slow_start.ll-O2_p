; ModuleID = '../../net/third_party/quiche/src/quic/core/congestion_control/hybrid_slow_start.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/congestion_control/hybrid_slow_start.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.quic::HybridSlowStart" = type { i8, i32, %"class.quic::QuicPacketNumber", %"class.quic::QuicPacketNumber", i32, %"class.quic::QuicTime::Delta" }
%"class.quic::QuicPacketNumber" = type { i64 }
%"class.quic::QuicTime::Delta" = type { i64 }

@_ZN4quic15HybridSlowStartC1Ev = hidden unnamed_addr alias void (%"class.quic::HybridSlowStart"*), void (%"class.quic::HybridSlowStart"*)* @_ZN4quic15HybridSlowStartC2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4quic15HybridSlowStartC2Ev(%"class.quic::HybridSlowStart"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 0
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 1
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 2, i32 0
  %5 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 4
  %6 = bitcast i64* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -1, i64 16, i1 false)
  store i32 0, i32* %5, align 8
  %7 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 5, i32 0
  store i64 0, i64* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic15HybridSlowStart13OnPacketAckedENS_16QuicPacketNumberE(%"class.quic::HybridSlowStart"*, i64) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 3
  %4 = tail call zeroext i1 @_ZNK4quic16QuicPacketNumber13IsInitializedEv(%"class.quic::QuicPacketNumber"* %3) #4
  br i1 %4, label %5, label %9

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 3, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %7, %1
  br i1 %8, label %11, label %9

9:                                                ; preds = %5, %2
  %10 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 0
  store i8 0, i8* %10, align 8
  br label %11

11:                                               ; preds = %5, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4quic15HybridSlowStart12IsEndOfRoundENS_16QuicPacketNumberE(%"class.quic::HybridSlowStart"*, i64) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 3
  %4 = tail call zeroext i1 @_ZNK4quic16QuicPacketNumber13IsInitializedEv(%"class.quic::QuicPacketNumber"* %3) #4
  br i1 %4, label %5, label %9

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 3, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp ule i64 %7, %1
  br label %9

9:                                                ; preds = %5, %2
  %10 = phi i1 [ true, %2 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4quic15HybridSlowStart12OnPacketSentENS_16QuicPacketNumberE(%"class.quic::HybridSlowStart"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 2, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4quic15HybridSlowStart7RestartEv(%"class.quic::HybridSlowStart"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 0
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 1
  store i32 0, i32* %3, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4quic15HybridSlowStart17StartReceiveRoundENS_16QuicPacketNumberE(%"class.quic::HybridSlowStart"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 3, i32 0
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 5, i32 0
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 4
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 0
  store i8 1, i8* %6, align 8
  ret void
}

declare zeroext i1 @_ZNK4quic16QuicPacketNumber13IsInitializedEv(%"class.quic::QuicPacketNumber"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4quic15HybridSlowStart19ShouldExitSlowStartENS_8QuicTime5DeltaES2_m(%"class.quic::HybridSlowStart"* nocapture, i64, i64, i64) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 0
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 2, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 3, i32 0
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 5, i32 0
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 4
  store i32 0, i32* %13, align 8
  store i8 1, i8* %5, align 8
  br label %14

14:                                               ; preds = %4, %8
  %15 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %47

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = add i32 %20, 1
  store i32 %21, i32* %19, align 8
  %22 = icmp ult i32 %21, 9
  br i1 %22, label %23, label %42

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.quic::HybridSlowStart", %"class.quic::HybridSlowStart"* %0, i64 0, i32 5, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  %27 = icmp sgt i64 %25, %1
  %28 = or i1 %26, %27
  br i1 %28, label %29, label %30

29:                                               ; preds = %23
  store i64 %1, i64* %24, align 8
  br label %30

30:                                               ; preds = %23, %29
  %31 = phi i64 [ %1, %29 ], [ %25, %23 ]
  %32 = icmp eq i32 %21, 8
  br i1 %32, label %33, label %42

33:                                               ; preds = %30
  %34 = ashr i64 %2, 3
  %35 = icmp slt i64 %34, 16000
  %36 = select i1 %35, i64 %34, i64 16000
  %37 = icmp sgt i64 %36, 4000
  %38 = select i1 %37, i64 %36, i64 4000
  %39 = add nsw i64 %38, %2
  %40 = icmp slt i64 %39, %31
  br i1 %40, label %41, label %42

41:                                               ; preds = %33
  store i32 1, i32* %15, align 4
  br label %42

42:                                               ; preds = %18, %33, %41, %30
  %43 = phi i32 [ 0, %18 ], [ 0, %33 ], [ 1, %41 ], [ 0, %30 ]
  %44 = icmp ugt i64 %3, 15
  br i1 %44, label %45, label %47

45:                                               ; preds = %42
  %46 = icmp ne i32 %43, 0
  br label %47

47:                                               ; preds = %42, %45, %14
  %48 = phi i1 [ true, %14 ], [ false, %42 ], [ %46, %45 ]
  ret i1 %48
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
