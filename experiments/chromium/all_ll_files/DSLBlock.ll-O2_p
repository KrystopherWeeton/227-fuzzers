; ModuleID = '../../third_party/skia/src/sksl/dsl/DSLBlock.cpp'
source_filename = "../../third_party/skia/src/sksl/dsl/DSLBlock.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::dsl::DSLBlock" = type { %class.SkSTArray, %"class.std::__1::shared_ptr" }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [16 x i8] }
%class.SkTArray = type { %"class.std::__1::unique_ptr"*, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::Statement"* }
%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"class.std::__1::shared_ptr" = type { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::SymbolTable" = type { %"class.std::__1::shared_ptr", %"class.std::__1::vector", i8, %"class.std::__1::vector.5", %"class.std::__1::forward_list", %class.SkTHashMap, %"class.SkSL::ErrorReporter"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.SkSL::Symbol"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::Type" = type opaque
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.std::__1::unique_ptr.1"* }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"class.std::__1::unique_ptr.7"*, %"class.std::__1::unique_ptr.7"*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.SkSL::IRNode"* }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.std::__1::unique_ptr.7"* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.SkSL::String" }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.18" }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"struct.SkSL::SymbolTable::SymbolKey", %"class.SkSL::Symbol"* }
%"struct.SkSL::SymbolTable::SymbolKey" = type <{ %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%class.SkTArray.24 = type { %"class.SkSL::dsl::DSLStatement"*, i64 }
%"class.SkSL::dsl::DSLStatement" = type { %"class.std::__1::unique_ptr" }
%"class.SkSL::Block" = type <{ %"class.SkSL::Statement", %class.SkSTArray, %"class.std::__1::shared_ptr", i8, [7 x i8] }>

$_ZNSt3__111make_uniqueIN4SkSL5BlockEJi9SkSTArrayILi2ENS_10unique_ptrINS1_9StatementENS_14default_deleteIS5_EEEELb0EENS_10shared_ptrINS1_11SymbolTableEEEEEENS_11__unique_ifIT_E15__unique_singleEDpOT0_ = comdat any

$_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EEaSEOS7_ = comdat any

$_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE = comdat any

@_ZTVN4SkSL5BlockE = external unnamed_addr constant { [7 x i8*] }, align 8

@_ZN4SkSL3dsl8DSLBlockC1E9SkSTArrayILi2ENSt3__110unique_ptrINS_9StatementENS3_14default_deleteIS5_EEEELb0EENS3_10shared_ptrINS_11SymbolTableEEE = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLBlock"*, %class.SkSTArray*, %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"*), void (%"class.SkSL::dsl::DSLBlock"*, %class.SkSTArray*, %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"*)* @_ZN4SkSL3dsl8DSLBlockC2E9SkSTArrayILi2ENSt3__110unique_ptrINS_9StatementENS3_14default_deleteIS5_EEEELb0EENS3_10shared_ptrINS_11SymbolTableEEE
@_ZN4SkSL3dsl8DSLBlockC1E8SkTArrayINS0_12DSLStatementELb0EENSt3__110shared_ptrINS_11SymbolTableEEE = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLBlock"*, %class.SkTArray.24*, %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"*), void (%"class.SkSL::dsl::DSLBlock"*, %class.SkTArray.24*, %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"*)* @_ZN4SkSL3dsl8DSLBlockC2E8SkTArrayINS0_12DSLStatementELb0EENSt3__110shared_ptrINS_11SymbolTableEEE
@_ZN4SkSL3dsl8DSLBlockD1Ev = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLBlock"*), void (%"class.SkSL::dsl::DSLBlock"*)* @_ZN4SkSL3dsl8DSLBlockD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl8DSLBlockC2E9SkSTArrayILi2ENSt3__110unique_ptrINS_9StatementENS3_14default_deleteIS5_EEEELb0EENS3_10shared_ptrINS_11SymbolTableEEE(%"class.SkSL::dsl::DSLBlock"*, %class.SkSTArray*, %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"*) unnamed_addr #0 align 2 {
  %5 = ptrtoint %"class.SkSL::SymbolTable"* %2 to i64
  %6 = ptrtoint %"class.std::__1::__shared_weak_count"* %3 to i64
  %7 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %8 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %9 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %10 = bitcast i8* %9 to i64*
  %11 = bitcast i8* %7 to i8**
  store i8* %8, i8** %11, align 8
  store i64 17179869184, i64* %10, align 8
  %12 = bitcast i8* %7 to %class.SkTArray*
  %13 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %1, i64 0, i32 0, i32 0, i64 16
  %14 = bitcast i8* %13 to %class.SkTArray*
  %15 = tail call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %12, %class.SkTArray* dereferenceable(16) %14) #5
  %16 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 1
  %17 = bitcast %"class.std::__1::shared_ptr"* %16 to i64*
  store i64 %5, i64* %17, align 8
  %18 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 1, i32 1
  %19 = bitcast %"class.std::__1::__shared_weak_count"** %18 to i64*
  store i64 %6, i64* %19, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl8DSLBlockC2E8SkTArrayINS0_12DSLStatementELb0EENSt3__110shared_ptrINS_11SymbolTableEEE(%"class.SkSL::dsl::DSLBlock"*, %class.SkTArray.24* nocapture readonly, %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"*) unnamed_addr #0 align 2 {
  %5 = ptrtoint %"class.SkSL::SymbolTable"* %2 to i64
  %6 = ptrtoint %"class.std::__1::__shared_weak_count"* %3 to i64
  %7 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %8 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %9 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %10 = bitcast i8* %9 to i64*
  %11 = bitcast i8* %7 to i8**
  store i8* %8, i8** %11, align 8
  store i64 17179869184, i64* %10, align 8
  %12 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 1
  %13 = bitcast %"class.std::__1::shared_ptr"* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 1, i32 1
  %15 = bitcast %"class.std::__1::__shared_weak_count"** %14 to i64*
  store i64 %6, i64* %15, align 8
  %16 = bitcast i8* %7 to %class.SkTArray*
  %17 = getelementptr inbounds %class.SkTArray.24, %class.SkTArray.24* %1, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = lshr i64 %18, 1
  %20 = trunc i64 %19 to i32
  %21 = and i32 %20, 2147483647
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %29, label %23

23:                                               ; preds = %4
  tail call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %16, i32 %21, i32 0) #5
  %24 = load i64, i64* %10, align 8
  %25 = shl i64 %24, 32
  %26 = and i64 %25, 4294967296
  %27 = and i64 %24, -4294967297
  %28 = or i64 %26, %27
  br label %29

29:                                               ; preds = %4, %23
  %30 = phi i64 [ %28, %23 ], [ 17179869184, %4 ]
  store i64 %30, i64* %10, align 8
  %31 = getelementptr inbounds %class.SkTArray.24, %class.SkTArray.24* %1, i64 0, i32 0
  %32 = load %"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::dsl::DSLStatement"** %31, align 8
  %33 = icmp eq %"class.SkSL::dsl::DSLStatement"* %32, null
  br i1 %33, label %42, label %34

34:                                               ; preds = %29
  %35 = load i64, i64* %17, align 8
  %36 = lshr i64 %35, 1
  %37 = and i64 %36, 2147483647
  %38 = getelementptr inbounds %"class.SkSL::dsl::DSLStatement", %"class.SkSL::dsl::DSLStatement"* %32, i64 %37
  %39 = icmp eq i64 %37, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %34
  %41 = bitcast i8* %7 to %"class.std::__1::unique_ptr"**
  br label %43

42:                                               ; preds = %43, %29, %34
  ret void

43:                                               ; preds = %40, %43
  %44 = phi %"class.SkSL::dsl::DSLStatement"* [ %32, %40 ], [ %58, %43 ]
  %45 = getelementptr inbounds %"class.SkSL::dsl::DSLStatement", %"class.SkSL::dsl::DSLStatement"* %44, i64 0, i32 0, i32 0, i32 0, i32 0
  %46 = bitcast %"class.SkSL::dsl::DSLStatement"* %44 to i64*
  %47 = load i64, i64* %46, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %45, align 8
  tail call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %16, i32 1, i32 1) #5
  %48 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %41, align 8
  %49 = load i64, i64* %10, align 8
  %50 = lshr i64 %49, 1
  %51 = and i64 %50, 2147483647
  %52 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 %51
  %53 = add i64 %49, 2
  %54 = and i64 %53, 4294967294
  %55 = and i64 %49, -4294967295
  %56 = or i64 %54, %55
  store i64 %56, i64* %10, align 8
  %57 = bitcast %"class.std::__1::unique_ptr"* %52 to i64*
  store i64 %47, i64* %57, align 8
  %58 = getelementptr inbounds %"class.SkSL::dsl::DSLStatement", %"class.SkSL::dsl::DSLStatement"* %44, i64 1
  %59 = icmp eq %"class.SkSL::dsl::DSLStatement"* %58, %38
  br i1 %59, label %42, label %43
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl8DSLBlockD2Ev(%"class.SkSL::dsl::DSLBlock"*) unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = alloca %"class.SkSL::dsl::DSLStatement", align 8
  %4 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %5 = bitcast i8* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %15, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 0
  %11 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  store i32 -1, i32* %2, align 4
  %12 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 1
  %13 = call %"class.SkSL::Block"* @_ZNSt3__111make_uniqueIN4SkSL5BlockEJi9SkSTArrayILi2ENS_10unique_ptrINS1_9StatementENS_14default_deleteIS5_EEEELb0EENS_10shared_ptrINS1_11SymbolTableEEEEEENS_11__unique_ifIT_E15__unique_singleEDpOT0_(i32* nonnull dereferenceable(4) %2, %class.SkSTArray* dereferenceable(32) %10, %"class.std::__1::shared_ptr"* dereferenceable(16) %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  %14 = getelementptr inbounds %"class.SkSL::Block", %"class.SkSL::Block"* %13, i64 0, i32 0
  call void @_ZN4SkSL3dsl12DSLStatementC1ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEE(%"class.SkSL::dsl::DSLStatement"* nonnull %3, %"class.SkSL::Statement"* %14) #5
  call void @_ZN4SkSL3dsl12DSLStatementD1Ev(%"class.SkSL::dsl::DSLStatement"* nonnull %3) #5
  br label %15

15:                                               ; preds = %9, %1
  %16 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 1, i32 1
  %17 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %16, align 8
  %18 = icmp eq %"class.std::__1::__shared_weak_count"* %17, null
  br i1 %18, label %29, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %17, i64 0, i32 0, i32 1
  %21 = atomicrmw add i64* %20, i64 -1 acq_rel
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %29

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %17, i64 0, i32 0
  %25 = bitcast %"class.std::__1::__shared_weak_count"* %17 to void (%"class.std::__1::__shared_count"*)***
  %26 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %26, i64 2
  %28 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %27, align 8
  call void %28(%"class.std::__1::__shared_count"* %24) #5
  call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %17) #5
  br label %29

29:                                               ; preds = %15, %19, %23
  %30 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %31 = load i64, i64* %5, align 8
  %32 = and i64 %31, 4294967294
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %29
  %35 = bitcast i8* %30 to %"class.std::__1::unique_ptr"**
  br label %40

36:                                               ; preds = %51, %29
  %37 = phi i64 [ %31, %29 ], [ %53, %51 ]
  %38 = and i64 %37, 1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %60, label %57

40:                                               ; preds = %51, %34
  %41 = phi i64 [ 0, %34 ], [ %52, %51 ]
  %42 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %35, align 8
  %43 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 %41, i32 0, i32 0, i32 0
  %44 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %43, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %43, align 8
  %45 = icmp eq %"class.SkSL::Statement"* %44, null
  br i1 %45, label %51, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.SkSL::Statement"* %44 to void (%"class.SkSL::Statement"*)***
  %48 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %47, align 8
  %49 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %48, i64 1
  %50 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %49, align 8
  call void %50(%"class.SkSL::Statement"* nonnull %44) #5
  br label %51

51:                                               ; preds = %46, %40
  %52 = add nuw nsw i64 %41, 1
  %53 = load i64, i64* %5, align 8
  %54 = lshr i64 %53, 1
  %55 = and i64 %54, 2147483647
  %56 = icmp ult i64 %52, %55
  br i1 %56, label %40, label %36

57:                                               ; preds = %36
  %58 = bitcast i8* %30 to i8**
  %59 = load i8*, i8** %58, align 8
  call void @_Z7sk_freePv(i8* %59) #5
  br label %60

60:                                               ; preds = %36, %57
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Statement"* @_ZN4SkSL3dsl8DSLBlock7releaseEv(%"class.SkSL::dsl::DSLBlock"*) local_unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5
  store i32 -1, i32* %2, align 4
  %4 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 1
  %6 = call %"class.SkSL::Block"* @_ZNSt3__111make_uniqueIN4SkSL5BlockEJi9SkSTArrayILi2ENS_10unique_ptrINS1_9StatementENS_14default_deleteIS5_EEEELb0EENS_10shared_ptrINS1_11SymbolTableEEEEEENS_11__unique_ifIT_E15__unique_singleEDpOT0_(i32* nonnull dereferenceable(4) %2, %class.SkSTArray* dereferenceable(32) %4, %"class.std::__1::shared_ptr"* dereferenceable(16) %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5
  %7 = getelementptr inbounds %"class.SkSL::Block", %"class.SkSL::Block"* %6, i64 0, i32 0
  ret %"class.SkSL::Statement"* %7
}

declare void @_ZN4SkSL3dsl12DSLStatementC1ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEE(%"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::Statement"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4SkSL3dsl12DSLStatementD1Ev(%"class.SkSL::dsl::DSLStatement"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Block"* @_ZNSt3__111make_uniqueIN4SkSL5BlockEJi9SkSTArrayILi2ENS_10unique_ptrINS1_9StatementENS_14default_deleteIS5_EEEELb0EENS_10shared_ptrINS1_11SymbolTableEEEEEENS_11__unique_ifIT_E15__unique_singleEDpOT0_(i32* dereferenceable(4), %class.SkSTArray* dereferenceable(32), %"class.std::__1::shared_ptr"* dereferenceable(16)) local_unnamed_addr #4 comdat {
  %4 = alloca %class.SkSTArray, align 8
  %5 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 72) #5
  %6 = bitcast i8* %5 to %"class.SkSL::Block"*
  %7 = load i32, i32* %0, align 4
  %8 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %4, i64 0, i32 0, i32 0, i64 16
  %9 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %4, i64 0, i32 0, i32 0, i64 0
  %10 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %4, i64 0, i32 0, i32 0, i64 24
  %11 = bitcast i8* %10 to i64*
  %12 = bitcast i8* %8 to i8**
  store i8* %9, i8** %12, align 8
  store i64 17179869184, i64* %11, align 8
  %13 = bitcast i8* %8 to %class.SkTArray*
  %14 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %1, i64 0, i32 0, i32 0, i64 16
  %15 = bitcast i8* %14 to %class.SkTArray*
  %16 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %13, %class.SkTArray* dereferenceable(16) %15) #5
  %17 = bitcast %"class.std::__1::shared_ptr"* %2 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr"* %2, i64 0, i32 1
  %20 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %19, align 8
  %21 = bitcast %"class.std::__1::shared_ptr"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %5, i64 8
  %23 = bitcast i8* %22 to i32*
  store i32 %7, i32* %23, align 8
  %24 = getelementptr inbounds i8, i8* %5, i64 12
  %25 = bitcast i8* %24 to i32*
  store i32 16, i32* %25, align 4
  %26 = bitcast i8* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL5BlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds i8, i8* %5, i64 32
  %28 = getelementptr inbounds i8, i8* %5, i64 16
  %29 = getelementptr inbounds i8, i8* %5, i64 40
  %30 = bitcast i8* %29 to i64*
  %31 = bitcast i8* %27 to i8**
  store i8* %28, i8** %31, align 8
  store i64 17179869184, i64* %30, align 8
  %32 = bitcast i8* %27 to %class.SkTArray*
  %33 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %32, %class.SkTArray* dereferenceable(16) %13) #5
  %34 = getelementptr inbounds i8, i8* %5, i64 48
  %35 = bitcast i8* %34 to i64*
  store i64 %18, i64* %35, align 8
  %36 = getelementptr inbounds i8, i8* %5, i64 56
  %37 = bitcast i8* %36 to %"class.std::__1::__shared_weak_count"**
  store %"class.std::__1::__shared_weak_count"* %20, %"class.std::__1::__shared_weak_count"** %37, align 8
  %38 = icmp eq %"class.std::__1::__shared_weak_count"* %20, null
  br i1 %38, label %39, label %41

39:                                               ; preds = %3
  %40 = getelementptr inbounds i8, i8* %5, i64 64
  store i8 1, i8* %40, align 8
  br label %53

41:                                               ; preds = %3
  %42 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %20, i64 0, i32 0, i32 1
  %43 = atomicrmw add i64* %42, i64 1 monotonic
  %44 = getelementptr inbounds i8, i8* %5, i64 64
  store i8 1, i8* %44, align 8
  %45 = atomicrmw add i64* %42, i64 -1 acq_rel
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %53

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %20, i64 0, i32 0
  %49 = bitcast %"class.std::__1::__shared_weak_count"* %20 to void (%"class.std::__1::__shared_count"*)***
  %50 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %50, i64 2
  %52 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %51, align 8
  call void %52(%"class.std::__1::__shared_count"* %48) #5
  call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %20) #5
  br label %53

53:                                               ; preds = %39, %41, %47
  %54 = load i64, i64* %11, align 8
  %55 = and i64 %54, 4294967294
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %53
  %58 = bitcast i8* %8 to %"class.std::__1::unique_ptr"**
  br label %63

59:                                               ; preds = %74, %53
  %60 = phi i64 [ %54, %53 ], [ %76, %74 ]
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %82, label %80

63:                                               ; preds = %74, %57
  %64 = phi i64 [ 0, %57 ], [ %75, %74 ]
  %65 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %58, align 8
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %65, i64 %64, i32 0, i32 0, i32 0
  %67 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %66, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %66, align 8
  %68 = icmp eq %"class.SkSL::Statement"* %67, null
  br i1 %68, label %74, label %69

69:                                               ; preds = %63
  %70 = bitcast %"class.SkSL::Statement"* %67 to void (%"class.SkSL::Statement"*)***
  %71 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %71, i64 1
  %73 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %72, align 8
  call void %73(%"class.SkSL::Statement"* nonnull %67) #5
  br label %74

74:                                               ; preds = %69, %63
  %75 = add nuw nsw i64 %64, 1
  %76 = load i64, i64* %11, align 8
  %77 = lshr i64 %76, 1
  %78 = and i64 %77, 2147483647
  %79 = icmp ult i64 %75, %78
  br i1 %79, label %63, label %59

80:                                               ; preds = %59
  %81 = load i8*, i8** %12, align 8
  call void @_Z7sk_freePv(i8* %81) #5
  br label %82

82:                                               ; preds = %59, %80
  ret %"class.SkSL::Block"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl8DSLBlock6appendENS0_12DSLStatementE(%"class.SkSL::dsl::DSLBlock"*, %"class.SkSL::dsl::DSLStatement"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 0, i32 0, i32 0, i64 16
  %4 = bitcast i8* %3 to %class.SkTArray*
  %5 = getelementptr inbounds %"class.SkSL::dsl::DSLStatement", %"class.SkSL::dsl::DSLStatement"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.SkSL::dsl::DSLStatement"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %5, align 8
  tail call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %4, i32 1, i32 1) #5
  %8 = bitcast i8* %3 to %"class.std::__1::unique_ptr"**
  %9 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %8, align 8
  %10 = getelementptr inbounds %"class.SkSL::dsl::DSLBlock", %"class.SkSL::dsl::DSLBlock"* %0, i64 0, i32 0, i32 0, i32 0, i64 24
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = lshr i64 %12, 1
  %14 = and i64 %13, 2147483647
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %9, i64 %14
  %16 = add i64 %12, 2
  %17 = and i64 %16, 4294967294
  %18 = and i64 %12, -4294967295
  %19 = or i64 %17, %18
  store i64 %19, i64* %11, align 8
  %20 = bitcast %"class.std::__1::unique_ptr"* %15 to i64*
  store i64 %7, i64* %20, align 8
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"*) local_unnamed_addr #3

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray*, %class.SkTArray* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %class.SkTArray* %0, %1
  br i1 %3, label %76, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %59

11:                                               ; preds = %70, %4
  %12 = phi i64 [ %6, %4 ], [ %72, %70 ]
  %13 = and i64 %12, -4294967295
  store i64 %13, i64* %5, align 8
  %14 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = lshr i64 %15, 1
  %17 = trunc i64 %16 to i32
  %18 = and i32 %17, 2147483647
  tail call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %0, i32 %18, i32 0)
  %19 = load i64, i64* %14, align 8
  %20 = and i64 %19, 4294967294
  %21 = load i64, i64* %5, align 8
  %22 = and i64 %21, -4294967295
  %23 = or i64 %22, %20
  store i64 %23, i64* %5, align 8
  %24 = bitcast %class.SkTArray* %0 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = load i64, i64* %14, align 8
  %27 = and i64 %26, 4294967294
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %56, label %29

29:                                               ; preds = %11
  %30 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 0
  br label %31

31:                                               ; preds = %50, %29
  %32 = phi i64 [ 0, %29 ], [ %51, %50 ]
  %33 = shl nuw nsw i64 %32, 3
  %34 = getelementptr inbounds i8, i8* %25, i64 %33
  %35 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %30, align 8
  %36 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %35, i64 %32
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 0, i32 0, i32 0, i32 0
  %38 = bitcast %"class.std::__1::unique_ptr"* %36 to i64*
  %39 = load i64, i64* %38, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %37, align 8
  %40 = bitcast i8* %34 to i64*
  store i64 %39, i64* %40, align 8
  %41 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %30, align 8
  %42 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %41, i64 %32, i32 0, i32 0, i32 0
  %43 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %42, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %42, align 8
  %44 = icmp eq %"class.SkSL::Statement"* %43, null
  br i1 %44, label %50, label %45

45:                                               ; preds = %31
  %46 = bitcast %"class.SkSL::Statement"* %43 to void (%"class.SkSL::Statement"*)***
  %47 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %47, i64 1
  %49 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %48, align 8
  tail call void %49(%"class.SkSL::Statement"* nonnull %43) #5
  br label %50

50:                                               ; preds = %45, %31
  %51 = add nuw nsw i64 %32, 1
  %52 = load i64, i64* %14, align 8
  %53 = lshr i64 %52, 1
  %54 = and i64 %53, 2147483647
  %55 = icmp ult i64 %51, %54
  br i1 %55, label %31, label %56

56:                                               ; preds = %50, %11
  %57 = phi i64 [ %26, %11 ], [ %52, %50 ]
  %58 = and i64 %57, -4294967295
  store i64 %58, i64* %14, align 8
  br label %76

59:                                               ; preds = %9, %70
  %60 = phi i64 [ 0, %9 ], [ %71, %70 ]
  %61 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %10, align 8
  %62 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 %60, i32 0, i32 0, i32 0
  %63 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %62, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %62, align 8
  %64 = icmp eq %"class.SkSL::Statement"* %63, null
  br i1 %64, label %70, label %65

65:                                               ; preds = %59
  %66 = bitcast %"class.SkSL::Statement"* %63 to void (%"class.SkSL::Statement"*)***
  %67 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %66, align 8
  %68 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %67, i64 1
  %69 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %68, align 8
  tail call void %69(%"class.SkSL::Statement"* nonnull %63) #5
  br label %70

70:                                               ; preds = %59, %65
  %71 = add nuw nsw i64 %60, 1
  %72 = load i64, i64* %5, align 8
  %73 = lshr i64 %72, 1
  %74 = and i64 %73, 2147483647
  %75 = icmp ult i64 %71, %74
  br i1 %75, label %59, label %11

76:                                               ; preds = %2, %56
  ret %class.SkTArray* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %87

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %87, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #5
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %75, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %69, %48
  %51 = phi i64 [ 0, %48 ], [ %70, %69 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %49, align 8
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %54, i64 %51
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.std::__1::unique_ptr"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %56, align 8
  %59 = bitcast i8* %53 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %49, align 8
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 %51, i32 0, i32 0, i32 0
  %62 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %61, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %61, align 8
  %63 = icmp eq %"class.SkSL::Statement"* %62, null
  br i1 %63, label %69, label %64

64:                                               ; preds = %50
  %65 = bitcast %"class.SkSL::Statement"* %62 to void (%"class.SkSL::Statement"*)***
  %66 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %65, align 8
  %67 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %66, i64 1
  %68 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %67, align 8
  tail call void %68(%"class.SkSL::Statement"* nonnull %62) #5
  br label %69

69:                                               ; preds = %64, %50
  %70 = add nuw nsw i64 %51, 1
  %71 = load i64, i64* %4, align 8
  %72 = lshr i64 %71, 1
  %73 = and i64 %72, 2147483647
  %74 = icmp ult i64 %70, %73
  br i1 %74, label %50, label %75

75:                                               ; preds = %69, %35
  %76 = phi i64 [ %45, %35 ], [ %71, %69 ]
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %77, 0
  %79 = bitcast %class.SkTArray* %0 to i8**
  br i1 %78, label %83, label %80

80:                                               ; preds = %75
  %81 = load i8*, i8** %79, align 8
  tail call void @_Z7sk_freePv(i8* %81) #5
  %82 = load i64, i64* %4, align 8
  br label %83

83:                                               ; preds = %75, %80
  %84 = phi i64 [ %82, %80 ], [ %76, %75 ]
  store i8* %44, i8** %79, align 8
  %85 = and i64 %84, -4294967298
  %86 = or i64 %85, 1
  store i64 %86, i64* %4, align 8
  br label %87

87:                                               ; preds = %83, %32, %21
  ret void
}

declare i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
