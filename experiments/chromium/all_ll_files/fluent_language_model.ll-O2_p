; ModuleID = '../../components/language/core/browser/fluent_language_model.cc'
source_filename = "../../components/language/core/browser/fluent_language_model.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.language::FluentLanguageModel" = type { %"class.language::LanguageModel", %class.PrefService*, %"class.std::__1::basic_string", %"class.std::__1::unique_ptr.47" }
%"class.language::LanguageModel" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.language::LanguagePrefs"* }
%"class.language::LanguagePrefs" = type { %"class.std::__1::set", %class.PrefService*, %class.PrefChangeRegistrar }
%"class.std::__1::set" = type { %"class.std::__1::__tree.50" }
%"class.std::__1::__tree.50" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i64 }
%class.PrefChangeRegistrar = type { %class.PrefObserver, %"class.std::__1::map.57", %class.PrefService* }
%class.PrefObserver = type { i32 (...)** }
%"class.std::__1::map.57" = type { %"class.std::__1::__tree.58" }
%"class.std::__1::__tree.58" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.59", %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%class.PrefService = type { i32 (...)**, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.1", %class.scoped_refptr.21, %"class.base::RepeatingCallback.22", %class.scoped_refptr.23, %"class.std::__1::unordered_map" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.PrefNotifierImpl* }
%class.PrefNotifierImpl = type opaque
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.PrefValueStore* }
%class.PrefValueStore = type { i32 (...)**, [7 x %"class.PrefValueStore::PrefStoreKeeper"], %"class.base::RepeatingCallback", %class.PrefNotifier*, %"class.std::__1::map", i8, %"class.std::__1::unique_ptr.12" }
%"class.PrefValueStore::PrefStoreKeeper" = type <{ %"class.PrefStore::Observer", %class.PrefValueStore*, %class.scoped_refptr, i32, [4 x i8] }>
%"class.PrefStore::Observer" = type { i32 (...)** }
%class.scoped_refptr = type { %class.PrefStore* }
%class.PrefStore = type <{ i32 (...)**, %"class.base::RefCounted", [4 x i8] }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.4 }
%class.scoped_refptr.4 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.PrefNotifier = type opaque
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.PrefValueStore::Delegate"* }
%"class.PrefValueStore::Delegate" = type { i32 (...)** }
%class.scoped_refptr.21 = type { %class.PersistentPrefStore* }
%class.PersistentPrefStore = type { %class.WriteablePrefStore.base, [4 x i8] }
%class.WriteablePrefStore.base = type { %class.PrefStore.base }
%class.PrefStore.base = type <{ i32 (...)**, %"class.base::RefCounted" }>
%"class.base::RepeatingCallback.22" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.23 = type { %class.PrefRegistry* }
%class.PrefRegistry = type opaque
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.24", %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.39", [4 x i8] }>
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26", %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { float }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.language::LanguageModel::LanguageDetails"*, %"struct.language::LanguageModel::LanguageDetails"*, %"class.std::__1::__compressed_pair.69" }
%"struct.language::LanguageModel::LanguageDetails" = type <{ %"class.std::__1::basic_string", float, [4 x i8] }>
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.language::LanguageModel::LanguageDetails"* }
%"class.std::__1::vector.74" = type { %"class.std::__1::__vector_base.75" }
%"class.std::__1::__vector_base.75" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN8language13LanguageModel15LanguageDetailsENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_ = comdat any

@_ZTVN8language19FluentLanguageModelE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.language::FluentLanguageModel"*)* @_ZN8language19FluentLanguageModelD2Ev to i8*), i8* bitcast (void (%"class.language::FluentLanguageModel"*)* @_ZN8language19FluentLanguageModelD0Ev to i8*), i8* bitcast (void (%"class.std::__1::vector"*, %"class.language::FluentLanguageModel"*)* @_ZN8language19FluentLanguageModel12GetLanguagesEv to i8*)] }, align 8
@.str = private unnamed_addr constant [2 x i8] c",\00", align 1

@_ZN8language19FluentLanguageModelC1EP11PrefServiceRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE = hidden unnamed_addr alias void (%"class.language::FluentLanguageModel"*, %class.PrefService*, %"class.std::__1::basic_string"*), void (%"class.language::FluentLanguageModel"*, %class.PrefService*, %"class.std::__1::basic_string"*)* @_ZN8language19FluentLanguageModelC2EP11PrefServiceRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE
@_ZN8language19FluentLanguageModelD1Ev = hidden unnamed_addr alias void (%"class.language::FluentLanguageModel"*), void (%"class.language::FluentLanguageModel"*)* @_ZN8language19FluentLanguageModelD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8language19FluentLanguageModelC2EP11PrefServiceRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(%"class.language::FluentLanguageModel"*, %class.PrefService*, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %4 = ptrtoint %class.PrefService* %1 to i64
  %5 = getelementptr inbounds %"class.language::FluentLanguageModel", %"class.language::FluentLanguageModel"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN8language19FluentLanguageModelE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.language::FluentLanguageModel", %"class.language::FluentLanguageModel"* %0, i64 0, i32 1
  %7 = bitcast %class.PrefService** %6 to i64*
  store i64 %4, i64* %7, align 8
  %8 = getelementptr inbounds %"class.language::FluentLanguageModel", %"class.language::FluentLanguageModel"* %0, i64 0, i32 2
  %9 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %3
  %14 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %15 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false) #9
  br label %21

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %8, i8* %18, i64 %20) #9
  br label %21

21:                                               ; preds = %13, %16
  %22 = tail call i8* @_Znwm(i64 72) #10
  %23 = bitcast i8* %22 to %"class.language::LanguagePrefs"*
  tail call void @_ZN8language13LanguagePrefsC1EP11PrefService(%"class.language::LanguagePrefs"* nonnull %23, %class.PrefService* %1) #9
  %24 = getelementptr inbounds %"class.language::FluentLanguageModel", %"class.language::FluentLanguageModel"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %25 = bitcast %"class.language::LanguagePrefs"** %24 to i8**
  store i8* %22, i8** %25, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8language19FluentLanguageModelD2Ev(%"class.language::FluentLanguageModel"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.language::FluentLanguageModel", %"class.language::FluentLanguageModel"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN8language19FluentLanguageModelE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.language::FluentLanguageModel", %"class.language::FluentLanguageModel"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.language::LanguagePrefs"*, %"class.language::LanguagePrefs"** %3, align 8
  store %"class.language::LanguagePrefs"* null, %"class.language::LanguagePrefs"** %3, align 8
  %5 = icmp eq %"class.language::LanguagePrefs"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN8language13LanguagePrefsD1Ev(%"class.language::LanguagePrefs"* nonnull %4) #9
  %7 = bitcast %"class.language::LanguagePrefs"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.language::FluentLanguageModel", %"class.language::FluentLanguageModel"* %0, i64 0, i32 2
  %10 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call void @_ZdlPv(i8* %16) #10
  br label %17

17:                                               ; preds = %8, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8language19FluentLanguageModelD0Ev(%"class.language::FluentLanguageModel"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.language::FluentLanguageModel", %"class.language::FluentLanguageModel"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN8language19FluentLanguageModelE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.language::FluentLanguageModel", %"class.language::FluentLanguageModel"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.language::LanguagePrefs"*, %"class.language::LanguagePrefs"** %3, align 8
  store %"class.language::LanguagePrefs"* null, %"class.language::LanguagePrefs"** %3, align 8
  %5 = icmp eq %"class.language::LanguagePrefs"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN8language13LanguagePrefsD1Ev(%"class.language::LanguagePrefs"* nonnull %4) #9
  %7 = bitcast %"class.language::LanguagePrefs"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #10
  br label %8

8:                                                ; preds = %6, %1
  %9 = getelementptr inbounds %"class.language::FluentLanguageModel", %"class.language::FluentLanguageModel"* %0, i64 0, i32 2
  %10 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call void @_ZdlPv(i8* %16) #10
  br label %17

17:                                               ; preds = %8, %14
  %18 = bitcast %"class.language::FluentLanguageModel"* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8language19FluentLanguageModel12GetLanguagesEv(%"class.std::__1::vector"* noalias sret, %"class.language::FluentLanguageModel"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector.74", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"struct.language::LanguageModel::LanguageDetails", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #9
  %9 = bitcast %"class.std::__1::vector.74"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.std::__1::vector.74", %"class.std::__1::vector.74"* %3, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::vector.74", %"class.std::__1::vector.74"* %3, i64 0, i32 0, i32 1
  %12 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %13 = bitcast %"class.std::__1::vector.74"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #9
  %14 = getelementptr inbounds %"class.language::FluentLanguageModel", %"class.language::FluentLanguageModel"* %1, i64 0, i32 1
  %15 = load %class.PrefService*, %class.PrefService** %14, align 8
  %16 = getelementptr inbounds %"class.language::FluentLanguageModel", %"class.language::FluentLanguageModel"* %1, i64 0, i32 2
  call void @_ZNK11PrefService9GetStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* nonnull sret %4, %class.PrefService* %15, %"class.std::__1::basic_string"* dereferenceable(24) %16) #9
  %17 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = select i1 %20, i8* %22, i8* %12
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = zext i8 %19 to i64
  %27 = select i1 %20, i64 %25, i64 %26
  call void @_ZN4base11SplitStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector.74"* nonnull sret %3, i8* %23, i64 %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1, i32 1, i32 0) #9
  %28 = load i8, i8* %18, align 1
  %29 = icmp slt i8 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %2
  %31 = load i8*, i8** %21, align 8
  call void @_ZdlPv(i8* %31) #10
  br label %32

32:                                               ; preds = %2, %30
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #9
  %33 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %10, align 8
  %34 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %11, align 8
  %35 = icmp eq %"class.std::__1::basic_string"* %33, %34
  br i1 %35, label %48, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.language::FluentLanguageModel", %"class.language::FluentLanguageModel"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %38 = bitcast %"struct.language::LanguageModel::LanguageDetails"* %5 to i8*
  %39 = bitcast %"struct.language::LanguageModel::LanguageDetails"** %6 to i64*
  %40 = bitcast %"class.std::__1::vector"* %0 to i64*
  %41 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %5, i64 0, i32 1
  %42 = bitcast float* %41 to i32*
  %43 = bitcast %"struct.language::LanguageModel::LanguageDetails"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %43, i64 0, i32 1, i32 0
  %45 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %73

46:                                               ; preds = %113
  %47 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %10, align 8
  br label %48

48:                                               ; preds = %46, %32
  %49 = phi %"class.std::__1::basic_string"* [ %47, %46 ], [ %33, %32 ]
  %50 = icmp eq %"class.std::__1::basic_string"* %49, null
  br i1 %50, label %72, label %51

51:                                               ; preds = %48
  %52 = bitcast %"class.std::__1::basic_string"* %49 to i8*
  %53 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %11, align 8
  %54 = icmp eq %"class.std::__1::basic_string"* %53, %49
  br i1 %54, label %70, label %55

55:                                               ; preds = %51, %65
  %56 = phi %"class.std::__1::basic_string"* [ %57, %65 ], [ %53, %51 ]
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %56, i64 -1
  %58 = bitcast %"class.std::__1::basic_string"* %57 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %59 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %58, i64 0, i32 1, i32 0
  %60 = load i8, i8* %59, align 1
  %61 = icmp slt i8 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %57, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  call void @_ZdlPv(i8* %64) #10
  br label %65

65:                                               ; preds = %62, %55
  %66 = icmp eq %"class.std::__1::basic_string"* %57, %49
  br i1 %66, label %67, label %55

67:                                               ; preds = %65
  %68 = bitcast %"class.std::__1::vector.74"* %3 to i8**
  %69 = load i8*, i8** %68, align 8
  br label %70

70:                                               ; preds = %67, %51
  %71 = phi i8* [ %69, %67 ], [ %52, %51 ]
  store %"class.std::__1::basic_string"* %49, %"class.std::__1::basic_string"** %11, align 8
  call void @_ZdlPv(i8* %71) #10
  br label %72

72:                                               ; preds = %48, %70
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #9
  ret void

73:                                               ; preds = %36, %113
  %74 = phi %"class.std::__1::basic_string"* [ %33, %36 ], [ %114, %113 ]
  %75 = load %"class.language::LanguagePrefs"*, %"class.language::LanguagePrefs"** %37, align 8
  %76 = bitcast %"class.std::__1::basic_string"* %74 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %77 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %76, i64 0, i32 1, i32 0
  %78 = load i8, i8* %77, align 1
  %79 = icmp slt i8 %78, 0
  %80 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = bitcast %"class.std::__1::basic_string"* %74 to i8*
  %83 = select i1 %79, i8* %81, i8* %82
  %84 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = zext i8 %78 to i64
  %87 = select i1 %79, i64 %85, i64 %86
  %88 = call zeroext i1 @_ZNK8language13LanguagePrefs8IsFluentEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.language::LanguagePrefs"* %75, i8* %83, i64 %87) #9
  br i1 %88, label %89, label %113

89:                                               ; preds = %73
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %38) #9
  %90 = load i64, i64* %39, align 8
  %91 = load i64, i64* %40, align 8
  %92 = sub i64 %90, %91
  %93 = ashr exact i64 %92, 5
  %94 = add nsw i64 %93, 1
  %95 = uitofp i64 %94 to float
  %96 = fdiv float 1.000000e+00, %95
  call void @_ZN8language13LanguageModel15LanguageDetailsC1ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEf(%"struct.language::LanguageModel::LanguageDetails"* nonnull %5, %"class.std::__1::basic_string"* dereferenceable(24) %74, float %96) #9
  %97 = load %"struct.language::LanguageModel::LanguageDetails"*, %"struct.language::LanguageModel::LanguageDetails"** %6, align 8
  %98 = load %"struct.language::LanguageModel::LanguageDetails"*, %"struct.language::LanguageModel::LanguageDetails"** %7, align 8
  %99 = icmp ult %"struct.language::LanguageModel::LanguageDetails"* %97, %98
  br i1 %99, label %100, label %107

100:                                              ; preds = %89
  %101 = bitcast %"struct.language::LanguageModel::LanguageDetails"* %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %101, i8* nonnull align 8 %38, i64 24, i1 false) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 0, i64 24, i1 false) #9
  %102 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %97, i64 0, i32 1
  %103 = load i32, i32* %42, align 8
  %104 = bitcast float* %102 to i32*
  store i32 %103, i32* %104, align 8
  %105 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %97, i64 1
  %106 = ptrtoint %"struct.language::LanguageModel::LanguageDetails"* %105 to i64
  store i64 %106, i64* %39, align 8
  br label %112

107:                                              ; preds = %89
  call void @_ZNSt3__16vectorIN8language13LanguageModel15LanguageDetailsENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector"* %0, %"struct.language::LanguageModel::LanguageDetails"* nonnull dereferenceable(32) %5) #9
  %108 = load i8, i8* %44, align 1
  %109 = icmp slt i8 %108, 0
  br i1 %109, label %110, label %112

110:                                              ; preds = %107
  %111 = load i8*, i8** %45, align 8
  call void @_ZdlPv(i8* %111) #10
  br label %112

112:                                              ; preds = %100, %107, %110
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %38) #9
  br label %113

113:                                              ; preds = %112, %73
  %114 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %74, i64 1
  %115 = icmp eq %"class.std::__1::basic_string"* %114, %34
  br i1 %115, label %46, label %73
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN4base11SplitStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector.74"* sret, i8*, i64, i8*, i64, i32, i32) local_unnamed_addr #3

declare void @_ZNK11PrefService9GetStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* sret, %class.PrefService*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZNK8language13LanguagePrefs8IsFluentEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.language::LanguagePrefs"*, i8*, i64) local_unnamed_addr #3

declare void @_ZN8language13LanguageModel15LanguageDetailsC1ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEf(%"struct.language::LanguageModel::LanguageDetails"*, %"class.std::__1::basic_string"* dereferenceable(24), float) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN8language13LanguagePrefsC1EP11PrefService(%"class.language::LanguagePrefs"*, %class.PrefService*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN8language13LanguagePrefsD1Ev(%"class.language::LanguagePrefs"*) unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN8language13LanguageModel15LanguageDetailsENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector"*, %"struct.language::LanguageModel::LanguageDetails"* dereferenceable(32)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.language::LanguageModel::LanguageDetails"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.language::LanguageModel::LanguageDetails"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #11
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %"struct.language::LanguageModel::LanguageDetails"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"struct.language::LanguageModel::LanguageDetails"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %36, i64 %9
  %38 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %36, i64 %35
  %39 = ptrtoint %"struct.language::LanguageModel::LanguageDetails"* %38 to i64
  %40 = bitcast %"struct.language::LanguageModel::LanguageDetails"* %37 to i8*
  %41 = bitcast %"struct.language::LanguageModel::LanguageDetails"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #9
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 24, i1 false) #9
  %42 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %36, i64 %9, i32 1
  %43 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %1, i64 0, i32 1
  %44 = bitcast float* %43 to i32*
  %45 = load i32, i32* %44, align 8
  %46 = bitcast float* %42 to i32*
  store i32 %45, i32* %46, align 8
  %47 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %37, i64 1
  %48 = ptrtoint %"struct.language::LanguageModel::LanguageDetails"* %47 to i64
  %49 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %50 = load %"struct.language::LanguageModel::LanguageDetails"*, %"struct.language::LanguageModel::LanguageDetails"** %49, align 8
  %51 = ptrtoint %"struct.language::LanguageModel::LanguageDetails"* %50 to i64
  %52 = load %"struct.language::LanguageModel::LanguageDetails"*, %"struct.language::LanguageModel::LanguageDetails"** %3, align 8
  %53 = icmp eq %"struct.language::LanguageModel::LanguageDetails"* %52, %50
  br i1 %53, label %101, label %54

54:                                               ; preds = %34
  %55 = getelementptr %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %52, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = ptrtoint i8** %55 to i64
  %57 = sub i64 %56, %51
  %58 = and i64 %57, 32
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %70

60:                                               ; preds = %54
  %61 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %37, i64 -1
  %62 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %52, i64 -1
  %63 = bitcast %"struct.language::LanguageModel::LanguageDetails"* %61 to i8*
  %64 = bitcast %"struct.language::LanguageModel::LanguageDetails"* %62 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 24, i1 false) #9
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 24, i1 false) #9
  %65 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %37, i64 -1, i32 1
  %66 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %52, i64 -1, i32 1
  %67 = bitcast float* %66 to i32*
  %68 = load i32, i32* %67, align 8
  %69 = bitcast float* %65 to i32*
  store i32 %68, i32* %69, align 8
  br label %70

70:                                               ; preds = %60, %54
  %71 = phi %"struct.language::LanguageModel::LanguageDetails"* [ undef, %54 ], [ %61, %60 ]
  %72 = phi %"struct.language::LanguageModel::LanguageDetails"* [ %37, %54 ], [ %61, %60 ]
  %73 = phi %"struct.language::LanguageModel::LanguageDetails"* [ %52, %54 ], [ %62, %60 ]
  %74 = icmp ult i64 %57, 32
  br i1 %74, label %97, label %75

75:                                               ; preds = %70, %75
  %76 = phi %"struct.language::LanguageModel::LanguageDetails"* [ %87, %75 ], [ %72, %70 ]
  %77 = phi %"struct.language::LanguageModel::LanguageDetails"* [ %88, %75 ], [ %73, %70 ]
  %78 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %76, i64 -1
  %79 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %77, i64 -1
  %80 = bitcast %"struct.language::LanguageModel::LanguageDetails"* %78 to i8*
  %81 = bitcast %"struct.language::LanguageModel::LanguageDetails"* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 24, i1 false) #9
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #9
  %82 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %76, i64 -1, i32 1
  %83 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %77, i64 -1, i32 1
  %84 = bitcast float* %83 to i32*
  %85 = load i32, i32* %84, align 8
  %86 = bitcast float* %82 to i32*
  store i32 %85, i32* %86, align 8
  %87 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %76, i64 -2
  %88 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %77, i64 -2
  %89 = bitcast %"struct.language::LanguageModel::LanguageDetails"* %87 to i8*
  %90 = bitcast %"struct.language::LanguageModel::LanguageDetails"* %88 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 24, i1 false) #9
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 24, i1 false) #9
  %91 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %76, i64 -2, i32 1
  %92 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %77, i64 -2, i32 1
  %93 = bitcast float* %92 to i32*
  %94 = load i32, i32* %93, align 8
  %95 = bitcast float* %91 to i32*
  store i32 %94, i32* %95, align 8
  %96 = icmp eq %"struct.language::LanguageModel::LanguageDetails"* %88, %50
  br i1 %96, label %97, label %75

97:                                               ; preds = %75, %70
  %98 = phi %"struct.language::LanguageModel::LanguageDetails"* [ %71, %70 ], [ %87, %75 ]
  %99 = load i64, i64* %6, align 8
  %100 = load %"struct.language::LanguageModel::LanguageDetails"*, %"struct.language::LanguageModel::LanguageDetails"** %3, align 8
  br label %101

101:                                              ; preds = %34, %97
  %102 = phi %"struct.language::LanguageModel::LanguageDetails"* [ %100, %97 ], [ %50, %34 ]
  %103 = phi %"struct.language::LanguageModel::LanguageDetails"* [ %98, %97 ], [ %37, %34 ]
  %104 = phi i64 [ %99, %97 ], [ %51, %34 ]
  %105 = ptrtoint %"struct.language::LanguageModel::LanguageDetails"* %103 to i64
  store i64 %105, i64* %6, align 8
  store i64 %48, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %106 = inttoptr i64 %104 to %"struct.language::LanguageModel::LanguageDetails"*
  %107 = icmp eq %"struct.language::LanguageModel::LanguageDetails"* %102, %106
  br i1 %107, label %120, label %108

108:                                              ; preds = %101, %118
  %109 = phi %"struct.language::LanguageModel::LanguageDetails"* [ %110, %118 ], [ %102, %101 ]
  %110 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %109, i64 -1
  %111 = bitcast %"struct.language::LanguageModel::LanguageDetails"* %110 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %112 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %111, i64 0, i32 1, i32 0
  %113 = load i8, i8* %112, align 1
  %114 = icmp slt i8 %113, 0
  br i1 %114, label %115, label %118

115:                                              ; preds = %108
  %116 = getelementptr inbounds %"struct.language::LanguageModel::LanguageDetails", %"struct.language::LanguageModel::LanguageDetails"* %110, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load i8*, i8** %116, align 8
  tail call void @_ZdlPv(i8* %117) #10
  br label %118

118:                                              ; preds = %115, %108
  %119 = icmp eq %"struct.language::LanguageModel::LanguageDetails"* %110, %106
  br i1 %119, label %120, label %108

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #10
  br label %124

124:                                              ; preds = %120, %122
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
