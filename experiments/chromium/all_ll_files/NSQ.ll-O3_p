; ModuleID = '../../third_party/opus/src/silk/NSQ.c'
source_filename = "../../third_party/opus/src/silk/NSQ.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_encoder_state = type { [2 x i32], i32, i32, %struct.silk_LP_state, %struct.silk_VAD_state, %struct.silk_nsq_state, [16 x i16], i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.silk_NLSF_CB_struct*, [4 x i32], i32, i32, [3 x i8], i8, [3 x i32], %struct.SideInfoIndices, [320 x i8], i32, [322 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct._silk_resampler_state_struct, i32, i32, i32, i32, i32, i32, [3 x %struct.SideInfoIndices], [3 x [320 x i8]] }
%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }
%struct.silk_VAD_state = type { [2 x i32], [2 x i32], [2 x i32], [4 x i32], [4 x i32], i16, [4 x i32], [4 x i32], [4 x i32], i32 }
%struct.silk_nsq_state = type { [640 x i16], [640 x i32], [96 x i32], [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }

@silk_Quantization_Offsets_Q10 = external local_unnamed_addr constant [2 x [2 x i16]], align 2
@.str = private unnamed_addr constant [32 x i8] c"assertion failed: start_idx > 0\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"../../third_party/opus/src/silk/NSQ.c\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"assertion failed: ( shapingLPCOrder & 1 ) == 0\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"assertion failed: lag > 0 || signalType != TYPE_VOICED\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_NSQ_c(%struct.silk_encoder_state* nocapture readonly, %struct.silk_nsq_state*, %struct.SideInfoIndices* nocapture readonly, i16* nocapture readonly, i8* nocapture, i16*, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %16 = getelementptr inbounds %struct.SideInfoIndices, %struct.SideInfoIndices* %2, i64 0, i32 10
  %17 = load i8, i8* %16, align 2
  %18 = sext i8 %17 to i32
  %19 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 9
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 6
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.SideInfoIndices, %struct.SideInfoIndices* %2, i64 0, i32 5
  %23 = load i8, i8* %22, align 1
  %24 = ashr i8 %23, 1
  %25 = sext i8 %24 to i64
  %26 = getelementptr inbounds %struct.SideInfoIndices, %struct.SideInfoIndices* %2, i64 0, i32 6
  %27 = load i8, i8* %26, align 2
  %28 = sext i8 %27 to i64
  %29 = getelementptr inbounds [2 x [2 x i16]], [2 x [2 x i16]]* @silk_Quantization_Offsets_Q10, i64 0, i64 %25, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = sext i16 %30 to i32
  %32 = getelementptr inbounds %struct.SideInfoIndices, %struct.SideInfoIndices* %2, i64 0, i32 7
  %33 = load i8, i8* %32, align 1
  %34 = icmp ne i8 %33, 4
  %35 = zext i1 %34 to i32
  %36 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 23
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 21
  %39 = load i32, i32* %38, align 8
  %40 = add nsw i32 %39, %37
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 2
  %43 = alloca i32, i64 %41, align 16
  %44 = bitcast i32* %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %44, i8 -86, i64 %42, i1 false)
  %45 = shl nsw i64 %41, 1
  %46 = alloca i16, i64 %41, align 16
  %47 = bitcast i16* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %47, i8 -86, i64 %45, i1 false)
  %48 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 22
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = shl nsw i64 %50, 2
  %52 = alloca i32, i64 %50, align 16
  %53 = bitcast i32* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %53, i8 -86, i64 %51, i1 false)
  %54 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 8
  store i32 %37, i32* %54, align 4
  %55 = load i32, i32* %36, align 8
  %56 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 7
  store i32 %55, i32* %56, align 4
  %57 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 20
  %58 = load i32, i32* %57, align 4
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %60, label %746

60:                                               ; preds = %15
  %61 = load i32, i32* %36, align 8
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 0, i64 %62
  %64 = xor i32 %35, 1
  %65 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 11
  %66 = shl nuw nsw i32 %35, 1
  %67 = xor i32 %66, 3
  %68 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 35
  %69 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 57
  %70 = zext i32 %14 to i64
  %71 = shl i64 %70, 48
  %72 = ashr exact i64 %71, 48
  %73 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 10
  %74 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 4
  %75 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 5
  %76 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 0
  %77 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 1
  %78 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 2
  %79 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 3
  %80 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 4
  %81 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 5
  %82 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 6
  %83 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 7
  %84 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 8
  %85 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 9
  %86 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 10
  %87 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 11
  %88 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 12
  %89 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 13
  %90 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 14
  %91 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 15
  %92 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 0
  %93 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 1
  %94 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 2
  %95 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 3
  %96 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 4
  %97 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 5
  %98 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 6
  %99 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 7
  %100 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 8
  %101 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 9
  %102 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 10
  %103 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 11
  %104 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 12
  %105 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 13
  %106 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 14
  %107 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 15
  %108 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 16
  %109 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 17
  %110 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 18
  %111 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 19
  %112 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 20
  %113 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 21
  %114 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 22
  %115 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 23
  %116 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 34
  br label %117

117:                                              ; preds = %60, %726
  %118 = phi i64 [ 0, %60 ], [ %742, %726 ]
  %119 = phi i16* [ %63, %60 ], [ %741, %726 ]
  %120 = phi i32 [ %21, %60 ], [ %171, %726 ]
  %121 = phi i16* [ %3, %60 ], [ %739, %726 ]
  %122 = phi i8* [ %4, %60 ], [ %740, %726 ]
  %123 = trunc i64 %118 to i32
  %124 = lshr i32 %123, 1
  %125 = or i32 %124, %64
  %126 = shl nsw i32 %125, 4
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds i16, i16* %5, i64 %127
  %129 = mul i64 %118, 5
  %130 = and i64 %129, 4294967295
  %131 = getelementptr inbounds i16, i16* %6, i64 %130
  %132 = mul i64 %118, 24
  %133 = and i64 %132, 4294967288
  %134 = getelementptr inbounds i16, i16* %7, i64 %133
  %135 = getelementptr inbounds i32, i32* %8, i64 %118
  %136 = load i32, i32* %135, align 4
  %137 = ashr i32 %136, 2
  %138 = lshr i32 %136, 1
  %139 = shl i32 %138, 16
  %140 = or i32 %139, %137
  store i32 0, i32* %65, align 4
  %141 = load i8, i8* %22, align 1
  %142 = icmp eq i8 %141, 2
  br i1 %142, label %143, label %168

143:                                              ; preds = %117
  %144 = getelementptr inbounds i32, i32* %12, i64 %118
  %145 = load i32, i32* %144, align 4
  %146 = and i32 %67, %123
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %168

148:                                              ; preds = %143
  %149 = load i32, i32* %36, align 8
  %150 = load i32, i32* %68, align 8
  %151 = sub i32 -2, %145
  %152 = add i32 %151, %149
  %153 = sub i32 %152, %150
  %154 = icmp sgt i32 %153, 0
  br i1 %154, label %156, label %155

155:                                              ; preds = %148
  call void @celt_fatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 146) #5
  unreachable

156:                                              ; preds = %148
  %157 = sext i32 %153 to i64
  %158 = getelementptr inbounds i16, i16* %46, i64 %157
  %159 = load i32, i32* %48, align 4
  %160 = mul nsw i32 %159, %123
  %161 = add nsw i32 %160, %153
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 0, i64 %162
  %164 = sub nsw i32 %149, %153
  %165 = load i32, i32* %69, align 4
  call void @silk_LPC_analysis_filter(i16* %158, i16* %163, i16* %128, i32 %164, i32 %150, i32 %165) #6
  store i32 1, i32* %65, align 4
  %166 = load i32, i32* %36, align 8
  store i32 %166, i32* %56, align 4
  %167 = load i8, i8* %22, align 1
  br label %168

168:                                              ; preds = %143, %156, %117
  %169 = phi i32 [ 1, %156 ], [ 0, %143 ], [ 0, %117 ]
  %170 = phi i8 [ %167, %156 ], [ 2, %143 ], [ %141, %117 ]
  %171 = phi i32 [ %145, %156 ], [ %145, %143 ], [ %120, %117 ]
  %172 = getelementptr inbounds i32, i32* %12, i64 %118
  %173 = load i32, i32* %172, align 4
  %174 = getelementptr inbounds i32, i32* %11, i64 %118
  %175 = load i32, i32* %174, align 4
  %176 = icmp sgt i32 %175, 1
  %177 = select i1 %176, i32 %175, i32 1
  %178 = call i32 @llvm.ctlz.i32(i32 %177, i1 false) #6, !range !2
  %179 = add nsw i32 %178, -1
  %180 = shl i32 %177, %179
  %181 = ashr i32 %180, 16
  %182 = sdiv i32 536870911, %181
  %183 = shl i32 %182, 16
  %184 = sext i32 %180 to i64
  %185 = zext i32 %182 to i64
  %186 = shl i64 %185, 48
  %187 = ashr exact i64 %186, 29
  %188 = mul i64 %187, %184
  %189 = and i64 %188, -34359738368
  %190 = sub i64 0, %189
  %191 = ashr exact i64 %190, 32
  %192 = sext i32 %182 to i64
  %193 = mul nsw i64 %191, %192
  %194 = lshr i64 %193, 16
  %195 = trunc i64 %194 to i32
  %196 = add i32 %183, %195
  %197 = icmp ult i32 %177, 131072
  br i1 %197, label %198, label %216

198:                                              ; preds = %168
  %199 = add nsw i32 %178, -15
  %200 = ashr i32 -2147483648, %199
  %201 = lshr i32 2147483647, %199
  %202 = icmp sgt i32 %200, %201
  br i1 %202, label %203, label %208

203:                                              ; preds = %198
  %204 = icmp sgt i32 %196, %200
  br i1 %204, label %213, label %205

205:                                              ; preds = %203
  %206 = icmp slt i32 %196, %201
  %207 = select i1 %206, i32 %201, i32 %196
  br label %213

208:                                              ; preds = %198
  %209 = icmp sgt i32 %196, %201
  br i1 %209, label %213, label %210

210:                                              ; preds = %208
  %211 = icmp slt i32 %196, %200
  %212 = select i1 %211, i32 %200, i32 %196
  br label %213

213:                                              ; preds = %210, %208, %205, %203
  %214 = phi i32 [ %200, %203 ], [ %207, %205 ], [ %201, %208 ], [ %212, %210 ]
  %215 = shl i32 %214, %199
  br label %219

216:                                              ; preds = %168
  %217 = sub nsw i32 15, %178
  %218 = ashr i32 %196, %217
  br label %219

219:                                              ; preds = %216, %213
  %220 = phi i32 [ %215, %213 ], [ %218, %216 ]
  %221 = load i32, i32* %48, align 4
  %222 = icmp sgt i32 %221, 0
  br i1 %222, label %223, label %287

223:                                              ; preds = %219
  %224 = ashr i32 %220, 4
  %225 = add nsw i32 %224, 1
  %226 = ashr i32 %225, 1
  %227 = sext i32 %226 to i64
  %228 = sext i32 %221 to i64
  %229 = add nsw i64 %228, -1
  %230 = and i64 %228, 3
  %231 = icmp ult i64 %229, 3
  br i1 %231, label %271, label %232

232:                                              ; preds = %223
  %233 = sub nsw i64 %228, %230
  br label %234

234:                                              ; preds = %234, %232
  %235 = phi i64 [ 0, %232 ], [ %268, %234 ]
  %236 = phi i64 [ %233, %232 ], [ %269, %234 ]
  %237 = getelementptr inbounds i16, i16* %121, i64 %235
  %238 = load i16, i16* %237, align 2
  %239 = sext i16 %238 to i64
  %240 = mul nsw i64 %239, %227
  %241 = ashr i64 %240, 16
  %242 = trunc i64 %241 to i32
  %243 = getelementptr inbounds i32, i32* %52, i64 %235
  store i32 %242, i32* %243, align 16
  %244 = or i64 %235, 1
  %245 = getelementptr inbounds i16, i16* %121, i64 %244
  %246 = load i16, i16* %245, align 2
  %247 = sext i16 %246 to i64
  %248 = mul nsw i64 %247, %227
  %249 = ashr i64 %248, 16
  %250 = trunc i64 %249 to i32
  %251 = getelementptr inbounds i32, i32* %52, i64 %244
  store i32 %250, i32* %251, align 4
  %252 = or i64 %235, 2
  %253 = getelementptr inbounds i16, i16* %121, i64 %252
  %254 = load i16, i16* %253, align 2
  %255 = sext i16 %254 to i64
  %256 = mul nsw i64 %255, %227
  %257 = ashr i64 %256, 16
  %258 = trunc i64 %257 to i32
  %259 = getelementptr inbounds i32, i32* %52, i64 %252
  store i32 %258, i32* %259, align 8
  %260 = or i64 %235, 3
  %261 = getelementptr inbounds i16, i16* %121, i64 %260
  %262 = load i16, i16* %261, align 2
  %263 = sext i16 %262 to i64
  %264 = mul nsw i64 %263, %227
  %265 = ashr i64 %264, 16
  %266 = trunc i64 %265 to i32
  %267 = getelementptr inbounds i32, i32* %52, i64 %260
  store i32 %266, i32* %267, align 4
  %268 = add nuw nsw i64 %235, 4
  %269 = add i64 %236, -4
  %270 = icmp eq i64 %269, 0
  br i1 %270, label %271, label %234

271:                                              ; preds = %234, %223
  %272 = phi i64 [ 0, %223 ], [ %268, %234 ]
  %273 = icmp eq i64 %230, 0
  br i1 %273, label %287, label %274

274:                                              ; preds = %271, %274
  %275 = phi i64 [ %284, %274 ], [ %272, %271 ]
  %276 = phi i64 [ %285, %274 ], [ %230, %271 ]
  %277 = getelementptr inbounds i16, i16* %121, i64 %275
  %278 = load i16, i16* %277, align 2
  %279 = sext i16 %278 to i64
  %280 = mul nsw i64 %279, %227
  %281 = ashr i64 %280, 16
  %282 = trunc i64 %281 to i32
  %283 = getelementptr inbounds i32, i32* %52, i64 %275
  store i32 %282, i32* %283, align 4
  %284 = add nuw nsw i64 %275, 1
  %285 = add i64 %276, -1
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %287, label %274, !llvm.loop !3

287:                                              ; preds = %271, %274, %219
  %288 = icmp eq i32 %169, 0
  br i1 %288, label %363, label %289

289:                                              ; preds = %287
  %290 = icmp eq i64 %118, 0
  br i1 %290, label %291, label %297

291:                                              ; preds = %289
  %292 = sext i32 %220 to i64
  %293 = mul nsw i64 %72, %292
  %294 = lshr i64 %293, 14
  %295 = trunc i64 %294 to i32
  %296 = and i32 %295, -4
  br label %297

297:                                              ; preds = %291, %289
  %298 = phi i32 [ %296, %291 ], [ %220, %289 ]
  %299 = load i32, i32* %56, align 4
  %300 = sub i32 -2, %173
  %301 = add i32 %299, %300
  %302 = icmp slt i32 %301, %299
  br i1 %302, label %303, label %363

303:                                              ; preds = %297
  %304 = sext i32 %298 to i64
  %305 = sext i32 %301 to i64
  %306 = sext i32 %299 to i64
  %307 = sub nsw i64 %306, %305
  %308 = xor i64 %305, -1
  %309 = add nsw i64 %308, %306
  %310 = and i64 %307, 3
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %325, label %312

312:                                              ; preds = %303, %312
  %313 = phi i64 [ %322, %312 ], [ %305, %303 ]
  %314 = phi i64 [ %323, %312 ], [ %310, %303 ]
  %315 = getelementptr inbounds i16, i16* %46, i64 %313
  %316 = load i16, i16* %315, align 2
  %317 = sext i16 %316 to i64
  %318 = mul nsw i64 %317, %304
  %319 = lshr i64 %318, 16
  %320 = trunc i64 %319 to i32
  %321 = getelementptr inbounds i32, i32* %43, i64 %313
  store i32 %320, i32* %321, align 4
  %322 = add nsw i64 %313, 1
  %323 = add i64 %314, -1
  %324 = icmp eq i64 %323, 0
  br i1 %324, label %325, label %312, !llvm.loop !5

325:                                              ; preds = %312, %303
  %326 = phi i64 [ %305, %303 ], [ %322, %312 ]
  %327 = icmp ult i64 %309, 3
  br i1 %327, label %363, label %328

328:                                              ; preds = %325, %328
  %329 = phi i64 [ %361, %328 ], [ %326, %325 ]
  %330 = getelementptr inbounds i16, i16* %46, i64 %329
  %331 = load i16, i16* %330, align 2
  %332 = sext i16 %331 to i64
  %333 = mul nsw i64 %332, %304
  %334 = lshr i64 %333, 16
  %335 = trunc i64 %334 to i32
  %336 = getelementptr inbounds i32, i32* %43, i64 %329
  store i32 %335, i32* %336, align 4
  %337 = add nsw i64 %329, 1
  %338 = getelementptr inbounds i16, i16* %46, i64 %337
  %339 = load i16, i16* %338, align 2
  %340 = sext i16 %339 to i64
  %341 = mul nsw i64 %340, %304
  %342 = lshr i64 %341, 16
  %343 = trunc i64 %342 to i32
  %344 = getelementptr inbounds i32, i32* %43, i64 %337
  store i32 %343, i32* %344, align 4
  %345 = add nsw i64 %329, 2
  %346 = getelementptr inbounds i16, i16* %46, i64 %345
  %347 = load i16, i16* %346, align 2
  %348 = sext i16 %347 to i64
  %349 = mul nsw i64 %348, %304
  %350 = lshr i64 %349, 16
  %351 = trunc i64 %350 to i32
  %352 = getelementptr inbounds i32, i32* %43, i64 %345
  store i32 %351, i32* %352, align 4
  %353 = add nsw i64 %329, 3
  %354 = getelementptr inbounds i16, i16* %46, i64 %353
  %355 = load i16, i16* %354, align 2
  %356 = sext i16 %355 to i64
  %357 = mul nsw i64 %356, %304
  %358 = lshr i64 %357, 16
  %359 = trunc i64 %358 to i32
  %360 = getelementptr inbounds i32, i32* %43, i64 %353
  store i32 %359, i32* %360, align 4
  %361 = add nsw i64 %329, 4
  %362 = icmp eq i64 %361, %306
  br i1 %362, label %363, label %328

363:                                              ; preds = %325, %328, %297, %287
  %364 = load i32, i32* %73, align 4
  %365 = icmp eq i32 %175, %364
  br i1 %365, label %726, label %366

366:                                              ; preds = %363
  %367 = icmp slt i32 %364, 0
  %368 = sub nsw i32 0, %364
  %369 = select i1 %367, i32 %368, i32 %364
  %370 = call i32 @llvm.ctlz.i32(i32 %369, i1 false) #6, !range !2
  %371 = add nsw i32 %370, -1
  %372 = shl i32 %364, %371
  %373 = icmp slt i32 %175, 0
  %374 = sub nsw i32 0, %175
  %375 = select i1 %373, i32 %374, i32 %175
  %376 = call i32 @llvm.ctlz.i32(i32 %375, i1 false) #6, !range !2
  %377 = add nsw i32 %376, -1
  %378 = shl i32 %175, %377
  %379 = ashr i32 %378, 16
  %380 = sdiv i32 536870911, %379
  %381 = sext i32 %372 to i64
  %382 = zext i32 %380 to i64
  %383 = shl i64 %382, 48
  %384 = ashr exact i64 %383, 48
  %385 = mul nsw i64 %384, %381
  %386 = sext i32 %378 to i64
  %387 = ashr i64 %385, 16
  %388 = mul nsw i64 %387, %386
  %389 = lshr i64 %388, 29
  %390 = trunc i64 %389 to i32
  %391 = and i32 %390, -8
  %392 = sub i32 %372, %391
  %393 = sext i32 %392 to i64
  %394 = mul nsw i64 %384, %393
  %395 = lshr i64 %394, 16
  %396 = add nsw i64 %395, %387
  %397 = trunc i64 %396 to i32
  %398 = sub nsw i32 29, %376
  %399 = add nsw i32 %398, %370
  %400 = add nsw i32 %399, -16
  %401 = icmp slt i32 %400, 0
  br i1 %401, label %402, label %420

402:                                              ; preds = %366
  %403 = sub nsw i32 16, %399
  %404 = ashr i32 -2147483648, %403
  %405 = lshr i32 2147483647, %403
  %406 = icmp sgt i32 %404, %405
  br i1 %406, label %407, label %412

407:                                              ; preds = %402
  %408 = icmp slt i32 %404, %397
  br i1 %408, label %417, label %409

409:                                              ; preds = %407
  %410 = icmp sgt i32 %405, %397
  %411 = select i1 %410, i32 %405, i32 %397
  br label %417

412:                                              ; preds = %402
  %413 = icmp slt i32 %405, %397
  br i1 %413, label %417, label %414

414:                                              ; preds = %412
  %415 = icmp sgt i32 %404, %397
  %416 = select i1 %415, i32 %404, i32 %397
  br label %417

417:                                              ; preds = %414, %412, %409, %407
  %418 = phi i32 [ %404, %407 ], [ %411, %409 ], [ %405, %412 ], [ %416, %414 ]
  %419 = shl i32 %418, %403
  br label %424

420:                                              ; preds = %366
  %421 = icmp slt i32 %400, 32
  %422 = ashr i32 %397, %400
  %423 = select i1 %421, i32 %422, i32 0
  br label %424

424:                                              ; preds = %420, %417
  %425 = phi i32 [ %419, %417 ], [ %423, %420 ]
  %426 = load i32, i32* %36, align 8
  %427 = icmp sgt i32 %426, 0
  br i1 %427, label %428, label %445

428:                                              ; preds = %424
  %429 = load i32, i32* %54, align 4
  %430 = sext i32 %425 to i64
  %431 = sub i32 %429, %426
  %432 = sext i32 %431 to i64
  br label %433

433:                                              ; preds = %433, %428
  %434 = phi i64 [ %432, %428 ], [ %441, %433 ]
  %435 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 1, i64 %434
  %436 = load i32, i32* %435, align 4
  %437 = sext i32 %436 to i64
  %438 = mul nsw i64 %437, %430
  %439 = lshr i64 %438, 16
  %440 = trunc i64 %439 to i32
  store i32 %440, i32* %435, align 4
  %441 = add nsw i64 %434, 1
  %442 = load i32, i32* %54, align 4
  %443 = sext i32 %442 to i64
  %444 = icmp slt i64 %441, %443
  br i1 %444, label %433, label %445

445:                                              ; preds = %433, %424
  %446 = icmp eq i8 %170, 2
  br i1 %446, label %447, label %510

447:                                              ; preds = %445
  %448 = load i32, i32* %65, align 4
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %450, label %510

450:                                              ; preds = %447
  %451 = load i32, i32* %56, align 4
  %452 = sub i32 -2, %173
  %453 = add i32 %451, %452
  %454 = icmp slt i32 %453, %451
  br i1 %454, label %455, label %510

455:                                              ; preds = %450
  %456 = sext i32 %425 to i64
  %457 = sext i32 %453 to i64
  %458 = sext i32 %451 to i64
  %459 = sub nsw i64 %458, %457
  %460 = xor i64 %457, -1
  %461 = add nsw i64 %460, %458
  %462 = and i64 %459, 3
  %463 = icmp eq i64 %462, 0
  br i1 %463, label %476, label %464

464:                                              ; preds = %455, %464
  %465 = phi i64 [ %473, %464 ], [ %457, %455 ]
  %466 = phi i64 [ %474, %464 ], [ %462, %455 ]
  %467 = getelementptr inbounds i32, i32* %43, i64 %465
  %468 = load i32, i32* %467, align 4
  %469 = sext i32 %468 to i64
  %470 = mul nsw i64 %469, %456
  %471 = lshr i64 %470, 16
  %472 = trunc i64 %471 to i32
  store i32 %472, i32* %467, align 4
  %473 = add nsw i64 %465, 1
  %474 = add i64 %466, -1
  %475 = icmp eq i64 %474, 0
  br i1 %475, label %476, label %464, !llvm.loop !6

476:                                              ; preds = %464, %455
  %477 = phi i64 [ %457, %455 ], [ %473, %464 ]
  %478 = icmp ult i64 %461, 3
  br i1 %478, label %510, label %479

479:                                              ; preds = %476, %479
  %480 = phi i64 [ %508, %479 ], [ %477, %476 ]
  %481 = getelementptr inbounds i32, i32* %43, i64 %480
  %482 = load i32, i32* %481, align 4
  %483 = sext i32 %482 to i64
  %484 = mul nsw i64 %483, %456
  %485 = lshr i64 %484, 16
  %486 = trunc i64 %485 to i32
  store i32 %486, i32* %481, align 4
  %487 = add nsw i64 %480, 1
  %488 = getelementptr inbounds i32, i32* %43, i64 %487
  %489 = load i32, i32* %488, align 4
  %490 = sext i32 %489 to i64
  %491 = mul nsw i64 %490, %456
  %492 = lshr i64 %491, 16
  %493 = trunc i64 %492 to i32
  store i32 %493, i32* %488, align 4
  %494 = add nsw i64 %480, 2
  %495 = getelementptr inbounds i32, i32* %43, i64 %494
  %496 = load i32, i32* %495, align 4
  %497 = sext i32 %496 to i64
  %498 = mul nsw i64 %497, %456
  %499 = lshr i64 %498, 16
  %500 = trunc i64 %499 to i32
  store i32 %500, i32* %495, align 4
  %501 = add nsw i64 %480, 3
  %502 = getelementptr inbounds i32, i32* %43, i64 %501
  %503 = load i32, i32* %502, align 4
  %504 = sext i32 %503 to i64
  %505 = mul nsw i64 %504, %456
  %506 = lshr i64 %505, 16
  %507 = trunc i64 %506 to i32
  store i32 %507, i32* %502, align 4
  %508 = add nsw i64 %480, 4
  %509 = icmp eq i64 %508, %458
  br i1 %509, label %510, label %479

510:                                              ; preds = %476, %479, %450, %447, %445
  %511 = sext i32 %425 to i64
  %512 = load i32, i32* %74, align 4
  %513 = sext i32 %512 to i64
  %514 = mul nsw i64 %513, %511
  %515 = lshr i64 %514, 16
  %516 = trunc i64 %515 to i32
  store i32 %516, i32* %74, align 4
  %517 = load i32, i32* %75, align 4
  %518 = sext i32 %517 to i64
  %519 = mul nsw i64 %518, %511
  %520 = lshr i64 %519, 16
  %521 = trunc i64 %520 to i32
  store i32 %521, i32* %75, align 4
  %522 = load i32, i32* %76, align 4
  %523 = sext i32 %522 to i64
  %524 = mul nsw i64 %523, %511
  %525 = lshr i64 %524, 16
  %526 = trunc i64 %525 to i32
  store i32 %526, i32* %76, align 4
  %527 = load i32, i32* %77, align 4
  %528 = sext i32 %527 to i64
  %529 = mul nsw i64 %528, %511
  %530 = lshr i64 %529, 16
  %531 = trunc i64 %530 to i32
  store i32 %531, i32* %77, align 4
  %532 = load i32, i32* %78, align 4
  %533 = sext i32 %532 to i64
  %534 = mul nsw i64 %533, %511
  %535 = lshr i64 %534, 16
  %536 = trunc i64 %535 to i32
  store i32 %536, i32* %78, align 4
  %537 = load i32, i32* %79, align 4
  %538 = sext i32 %537 to i64
  %539 = mul nsw i64 %538, %511
  %540 = lshr i64 %539, 16
  %541 = trunc i64 %540 to i32
  store i32 %541, i32* %79, align 4
  %542 = load i32, i32* %80, align 4
  %543 = sext i32 %542 to i64
  %544 = mul nsw i64 %543, %511
  %545 = lshr i64 %544, 16
  %546 = trunc i64 %545 to i32
  store i32 %546, i32* %80, align 4
  %547 = load i32, i32* %81, align 4
  %548 = sext i32 %547 to i64
  %549 = mul nsw i64 %548, %511
  %550 = lshr i64 %549, 16
  %551 = trunc i64 %550 to i32
  store i32 %551, i32* %81, align 4
  %552 = load i32, i32* %82, align 4
  %553 = sext i32 %552 to i64
  %554 = mul nsw i64 %553, %511
  %555 = lshr i64 %554, 16
  %556 = trunc i64 %555 to i32
  store i32 %556, i32* %82, align 4
  %557 = load i32, i32* %83, align 4
  %558 = sext i32 %557 to i64
  %559 = mul nsw i64 %558, %511
  %560 = lshr i64 %559, 16
  %561 = trunc i64 %560 to i32
  store i32 %561, i32* %83, align 4
  %562 = load i32, i32* %84, align 4
  %563 = sext i32 %562 to i64
  %564 = mul nsw i64 %563, %511
  %565 = lshr i64 %564, 16
  %566 = trunc i64 %565 to i32
  store i32 %566, i32* %84, align 4
  %567 = load i32, i32* %85, align 4
  %568 = sext i32 %567 to i64
  %569 = mul nsw i64 %568, %511
  %570 = lshr i64 %569, 16
  %571 = trunc i64 %570 to i32
  store i32 %571, i32* %85, align 4
  %572 = load i32, i32* %86, align 4
  %573 = sext i32 %572 to i64
  %574 = mul nsw i64 %573, %511
  %575 = lshr i64 %574, 16
  %576 = trunc i64 %575 to i32
  store i32 %576, i32* %86, align 4
  %577 = load i32, i32* %87, align 4
  %578 = sext i32 %577 to i64
  %579 = mul nsw i64 %578, %511
  %580 = lshr i64 %579, 16
  %581 = trunc i64 %580 to i32
  store i32 %581, i32* %87, align 4
  %582 = load i32, i32* %88, align 4
  %583 = sext i32 %582 to i64
  %584 = mul nsw i64 %583, %511
  %585 = lshr i64 %584, 16
  %586 = trunc i64 %585 to i32
  store i32 %586, i32* %88, align 4
  %587 = load i32, i32* %89, align 4
  %588 = sext i32 %587 to i64
  %589 = mul nsw i64 %588, %511
  %590 = lshr i64 %589, 16
  %591 = trunc i64 %590 to i32
  store i32 %591, i32* %89, align 4
  %592 = load i32, i32* %90, align 4
  %593 = sext i32 %592 to i64
  %594 = mul nsw i64 %593, %511
  %595 = lshr i64 %594, 16
  %596 = trunc i64 %595 to i32
  store i32 %596, i32* %90, align 4
  %597 = load i32, i32* %91, align 4
  %598 = sext i32 %597 to i64
  %599 = mul nsw i64 %598, %511
  %600 = lshr i64 %599, 16
  %601 = trunc i64 %600 to i32
  store i32 %601, i32* %91, align 4
  %602 = load i32, i32* %92, align 4
  %603 = sext i32 %602 to i64
  %604 = mul nsw i64 %603, %511
  %605 = lshr i64 %604, 16
  %606 = trunc i64 %605 to i32
  store i32 %606, i32* %92, align 4
  %607 = load i32, i32* %93, align 4
  %608 = sext i32 %607 to i64
  %609 = mul nsw i64 %608, %511
  %610 = lshr i64 %609, 16
  %611 = trunc i64 %610 to i32
  store i32 %611, i32* %93, align 4
  %612 = load i32, i32* %94, align 4
  %613 = sext i32 %612 to i64
  %614 = mul nsw i64 %613, %511
  %615 = lshr i64 %614, 16
  %616 = trunc i64 %615 to i32
  store i32 %616, i32* %94, align 4
  %617 = load i32, i32* %95, align 4
  %618 = sext i32 %617 to i64
  %619 = mul nsw i64 %618, %511
  %620 = lshr i64 %619, 16
  %621 = trunc i64 %620 to i32
  store i32 %621, i32* %95, align 4
  %622 = load i32, i32* %96, align 4
  %623 = sext i32 %622 to i64
  %624 = mul nsw i64 %623, %511
  %625 = lshr i64 %624, 16
  %626 = trunc i64 %625 to i32
  store i32 %626, i32* %96, align 4
  %627 = load i32, i32* %97, align 4
  %628 = sext i32 %627 to i64
  %629 = mul nsw i64 %628, %511
  %630 = lshr i64 %629, 16
  %631 = trunc i64 %630 to i32
  store i32 %631, i32* %97, align 4
  %632 = load i32, i32* %98, align 4
  %633 = sext i32 %632 to i64
  %634 = mul nsw i64 %633, %511
  %635 = lshr i64 %634, 16
  %636 = trunc i64 %635 to i32
  store i32 %636, i32* %98, align 4
  %637 = load i32, i32* %99, align 4
  %638 = sext i32 %637 to i64
  %639 = mul nsw i64 %638, %511
  %640 = lshr i64 %639, 16
  %641 = trunc i64 %640 to i32
  store i32 %641, i32* %99, align 4
  %642 = load i32, i32* %100, align 4
  %643 = sext i32 %642 to i64
  %644 = mul nsw i64 %643, %511
  %645 = lshr i64 %644, 16
  %646 = trunc i64 %645 to i32
  store i32 %646, i32* %100, align 4
  %647 = load i32, i32* %101, align 4
  %648 = sext i32 %647 to i64
  %649 = mul nsw i64 %648, %511
  %650 = lshr i64 %649, 16
  %651 = trunc i64 %650 to i32
  store i32 %651, i32* %101, align 4
  %652 = load i32, i32* %102, align 4
  %653 = sext i32 %652 to i64
  %654 = mul nsw i64 %653, %511
  %655 = lshr i64 %654, 16
  %656 = trunc i64 %655 to i32
  store i32 %656, i32* %102, align 4
  %657 = load i32, i32* %103, align 4
  %658 = sext i32 %657 to i64
  %659 = mul nsw i64 %658, %511
  %660 = lshr i64 %659, 16
  %661 = trunc i64 %660 to i32
  store i32 %661, i32* %103, align 4
  %662 = load i32, i32* %104, align 4
  %663 = sext i32 %662 to i64
  %664 = mul nsw i64 %663, %511
  %665 = lshr i64 %664, 16
  %666 = trunc i64 %665 to i32
  store i32 %666, i32* %104, align 4
  %667 = load i32, i32* %105, align 4
  %668 = sext i32 %667 to i64
  %669 = mul nsw i64 %668, %511
  %670 = lshr i64 %669, 16
  %671 = trunc i64 %670 to i32
  store i32 %671, i32* %105, align 4
  %672 = load i32, i32* %106, align 4
  %673 = sext i32 %672 to i64
  %674 = mul nsw i64 %673, %511
  %675 = lshr i64 %674, 16
  %676 = trunc i64 %675 to i32
  store i32 %676, i32* %106, align 4
  %677 = load i32, i32* %107, align 4
  %678 = sext i32 %677 to i64
  %679 = mul nsw i64 %678, %511
  %680 = lshr i64 %679, 16
  %681 = trunc i64 %680 to i32
  store i32 %681, i32* %107, align 4
  %682 = load i32, i32* %108, align 4
  %683 = sext i32 %682 to i64
  %684 = mul nsw i64 %683, %511
  %685 = lshr i64 %684, 16
  %686 = trunc i64 %685 to i32
  store i32 %686, i32* %108, align 4
  %687 = load i32, i32* %109, align 4
  %688 = sext i32 %687 to i64
  %689 = mul nsw i64 %688, %511
  %690 = lshr i64 %689, 16
  %691 = trunc i64 %690 to i32
  store i32 %691, i32* %109, align 4
  %692 = load i32, i32* %110, align 4
  %693 = sext i32 %692 to i64
  %694 = mul nsw i64 %693, %511
  %695 = lshr i64 %694, 16
  %696 = trunc i64 %695 to i32
  store i32 %696, i32* %110, align 4
  %697 = load i32, i32* %111, align 4
  %698 = sext i32 %697 to i64
  %699 = mul nsw i64 %698, %511
  %700 = lshr i64 %699, 16
  %701 = trunc i64 %700 to i32
  store i32 %701, i32* %111, align 4
  %702 = load i32, i32* %112, align 4
  %703 = sext i32 %702 to i64
  %704 = mul nsw i64 %703, %511
  %705 = lshr i64 %704, 16
  %706 = trunc i64 %705 to i32
  store i32 %706, i32* %112, align 4
  %707 = load i32, i32* %113, align 4
  %708 = sext i32 %707 to i64
  %709 = mul nsw i64 %708, %511
  %710 = lshr i64 %709, 16
  %711 = trunc i64 %710 to i32
  store i32 %711, i32* %113, align 4
  %712 = load i32, i32* %114, align 4
  %713 = sext i32 %712 to i64
  %714 = mul nsw i64 %713, %511
  %715 = lshr i64 %714, 16
  %716 = trunc i64 %715 to i32
  store i32 %716, i32* %114, align 4
  %717 = load i32, i32* %115, align 4
  %718 = sext i32 %717 to i64
  %719 = mul nsw i64 %718, %511
  %720 = lshr i64 %719, 16
  %721 = trunc i64 %720 to i32
  store i32 %721, i32* %115, align 4
  %722 = load i32, i32* %174, align 4
  store i32 %722, i32* %73, align 4
  %723 = load i8, i8* %22, align 1
  %724 = load i32, i32* %174, align 4
  %725 = load i32, i32* %48, align 4
  br label %726

726:                                              ; preds = %363, %510
  %727 = phi i32 [ %221, %363 ], [ %725, %510 ]
  %728 = phi i32 [ %175, %363 ], [ %724, %510 ]
  %729 = phi i8 [ %170, %363 ], [ %723, %510 ]
  %730 = sext i8 %729 to i32
  %731 = getelementptr inbounds i32, i32* %9, i64 %118
  %732 = load i32, i32* %731, align 4
  %733 = getelementptr inbounds i32, i32* %10, i64 %118
  %734 = load i32, i32* %733, align 4
  %735 = load i32, i32* %116, align 4
  %736 = load i32, i32* %68, align 8
  call void @silk_noise_shape_quantizer(%struct.silk_nsq_state* %1, i32 %730, i32* nonnull %52, i8* %122, i16* %119, i32* nonnull %43, i16* %128, i16* %131, i16* %134, i32 %171, i32 %140, i32 %732, i32 %734, i32 %728, i32 %13, i32 %31, i32 %727, i32 %735, i32 %736, i32 undef)
  %737 = load i32, i32* %48, align 4
  %738 = sext i32 %737 to i64
  %739 = getelementptr inbounds i16, i16* %121, i64 %738
  %740 = getelementptr inbounds i8, i8* %122, i64 %738
  %741 = getelementptr inbounds i16, i16* %119, i64 %738
  %742 = add nuw nsw i64 %118, 1
  %743 = load i32, i32* %57, align 4
  %744 = sext i32 %743 to i64
  %745 = icmp slt i64 %742, %744
  br i1 %745, label %117, label %746

746:                                              ; preds = %726, %15
  %747 = phi i32 [ %58, %15 ], [ %743, %726 ]
  %748 = add nsw i32 %747, -1
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds i32, i32* %12, i64 %749
  %751 = load i32, i32* %750, align 4
  store i32 %751, i32* %20, align 4
  %752 = bitcast %struct.silk_nsq_state* %1 to i8*
  %753 = load i32, i32* %38, align 8
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 0, i64 %754
  %756 = bitcast i16* %755 to i8*
  %757 = load i32, i32* %36, align 8
  %758 = sext i32 %757 to i64
  %759 = shl nsw i64 %758, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %752, i8* align 2 %756, i64 %759, i1 false)
  %760 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 1
  %761 = bitcast [640 x i32]* %760 to i8*
  %762 = load i32, i32* %38, align 8
  %763 = sext i32 %762 to i64
  %764 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 1, i64 %763
  %765 = bitcast i32* %764 to i8*
  %766 = load i32, i32* %36, align 8
  %767 = sext i32 %766 to i64
  %768 = shl nsw i64 %767, 2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %761, i8* align 4 %765, i64 %768, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

declare void @silk_LPC_analysis_filter(i16*, i16*, i16*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_noise_shape_quantizer(%struct.silk_nsq_state* nocapture, i32, i32* nocapture readonly, i8* nocapture, i16* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %21 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 8
  %22 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 7
  %23 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 2
  %24 = icmp sgt i32 %16, 0
  br i1 %24, label %25, label %530

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 2, i64 15
  %27 = ashr i32 %13, 6
  %28 = sub i32 2, %9
  %29 = load i32, i32* %22, align 4
  %30 = add i32 %28, %29
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i32, i32* %5, i64 %31
  %33 = sub i32 1, %9
  %34 = load i32, i32* %21, align 4
  %35 = add i32 %33, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 1, i64 %36
  %38 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 9
  %39 = ashr i32 %18, 1
  %40 = getelementptr inbounds i16, i16* %6, i64 1
  %41 = getelementptr inbounds i16, i16* %6, i64 2
  %42 = getelementptr inbounds i16, i16* %6, i64 3
  %43 = getelementptr inbounds i16, i16* %6, i64 4
  %44 = getelementptr inbounds i16, i16* %6, i64 5
  %45 = getelementptr inbounds i16, i16* %6, i64 6
  %46 = getelementptr inbounds i16, i16* %6, i64 7
  %47 = getelementptr inbounds i16, i16* %6, i64 8
  %48 = getelementptr inbounds i16, i16* %6, i64 9
  %49 = icmp eq i32 %18, 16
  %50 = getelementptr inbounds i16, i16* %6, i64 10
  %51 = getelementptr inbounds i16, i16* %6, i64 11
  %52 = getelementptr inbounds i16, i16* %6, i64 12
  %53 = getelementptr inbounds i16, i16* %6, i64 13
  %54 = getelementptr inbounds i16, i16* %6, i64 14
  %55 = getelementptr inbounds i16, i16* %6, i64 15
  %56 = icmp eq i32 %1, 2
  %57 = getelementptr inbounds i16, i16* %7, i64 1
  %58 = getelementptr inbounds i16, i16* %7, i64 2
  %59 = getelementptr inbounds i16, i16* %7, i64 3
  %60 = getelementptr inbounds i16, i16* %7, i64 4
  %61 = and i32 %17, 1
  %62 = icmp eq i32 %61, 0
  %63 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 5
  %64 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 3, i64 0
  %65 = ashr i32 %17, 1
  %66 = icmp sgt i32 %17, 2
  %67 = sext i32 %17 to i64
  %68 = add nsw i32 %17, -1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 3, i64 %69
  %71 = getelementptr inbounds i16, i16* %8, i64 %69
  %72 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 4
  %73 = zext i32 %11 to i64
  %74 = shl i64 %73, 48
  %75 = ashr exact i64 %74, 48
  %76 = zext i32 %12 to i64
  %77 = shl i64 %76, 48
  %78 = ashr exact i64 %77, 48
  %79 = ashr i32 %12, 16
  %80 = sext i32 %79 to i64
  %81 = icmp sgt i32 %9, 0
  %82 = icmp ne i32 %1, 2
  %83 = or i1 %82, %81
  %84 = zext i32 %10 to i64
  %85 = shl i64 %84, 48
  %86 = ashr exact i64 %85, 48
  %87 = ashr i32 %10, 16
  %88 = sext i32 %87 to i64
  %89 = icmp sgt i32 %14, 2048
  %90 = lshr i32 %14, 1
  %91 = add nsw i32 %90, -512
  %92 = sub nsw i32 512, %90
  %93 = add nsw i32 %15, -944
  %94 = shl i32 %15, 16
  %95 = sub i32 61865984, %94
  %96 = ashr exact i32 %95, 16
  %97 = shl i32 %14, 16
  %98 = ashr exact i32 %97, 16
  %99 = mul nsw i32 %96, %98
  %100 = ashr exact i32 %94, 16
  %101 = mul nsw i32 %100, %98
  %102 = add nsw i32 %15, 944
  %103 = shl i32 %102, 16
  %104 = ashr exact i32 %103, 16
  %105 = mul nsw i32 %104, %98
  %106 = add i32 %15, -80
  %107 = sext i32 %27 to i64
  %108 = zext i32 %16 to i64
  %109 = load i32, i32* %38, align 4
  br label %110

110:                                              ; preds = %461, %25
  %111 = phi i32 [ %109, %25 ], [ %527, %461 ]
  %112 = phi i64 [ 0, %25 ], [ %528, %461 ]
  %113 = phi i32* [ %32, %25 ], [ %310, %461 ]
  %114 = phi i32* [ %37, %25 ], [ %408, %461 ]
  %115 = phi i32* [ %26, %25 ], [ %505, %461 ]
  %116 = mul i32 %111, 196314165
  %117 = add i32 %116, 907633515
  store i32 %117, i32* %38, align 4
  %118 = load i32, i32* %115, align 4
  %119 = sext i32 %118 to i64
  %120 = load i16, i16* %6, align 2
  %121 = sext i16 %120 to i64
  %122 = mul nsw i64 %121, %119
  %123 = lshr i64 %122, 16
  %124 = trunc i64 %123 to i32
  %125 = add i32 %39, %124
  %126 = getelementptr inbounds i32, i32* %115, i64 -1
  %127 = load i32, i32* %126, align 4
  %128 = sext i32 %127 to i64
  %129 = load i16, i16* %40, align 2
  %130 = sext i16 %129 to i64
  %131 = mul nsw i64 %130, %128
  %132 = lshr i64 %131, 16
  %133 = trunc i64 %132 to i32
  %134 = add i32 %125, %133
  %135 = getelementptr inbounds i32, i32* %115, i64 -2
  %136 = load i32, i32* %135, align 4
  %137 = sext i32 %136 to i64
  %138 = load i16, i16* %41, align 2
  %139 = sext i16 %138 to i64
  %140 = mul nsw i64 %139, %137
  %141 = lshr i64 %140, 16
  %142 = trunc i64 %141 to i32
  %143 = add i32 %134, %142
  %144 = getelementptr inbounds i32, i32* %115, i64 -3
  %145 = load i32, i32* %144, align 4
  %146 = sext i32 %145 to i64
  %147 = load i16, i16* %42, align 2
  %148 = sext i16 %147 to i64
  %149 = mul nsw i64 %148, %146
  %150 = lshr i64 %149, 16
  %151 = trunc i64 %150 to i32
  %152 = add i32 %143, %151
  %153 = getelementptr inbounds i32, i32* %115, i64 -4
  %154 = load i32, i32* %153, align 4
  %155 = sext i32 %154 to i64
  %156 = load i16, i16* %43, align 2
  %157 = sext i16 %156 to i64
  %158 = mul nsw i64 %157, %155
  %159 = lshr i64 %158, 16
  %160 = trunc i64 %159 to i32
  %161 = add i32 %152, %160
  %162 = getelementptr inbounds i32, i32* %115, i64 -5
  %163 = load i32, i32* %162, align 4
  %164 = sext i32 %163 to i64
  %165 = load i16, i16* %44, align 2
  %166 = sext i16 %165 to i64
  %167 = mul nsw i64 %166, %164
  %168 = lshr i64 %167, 16
  %169 = trunc i64 %168 to i32
  %170 = add i32 %161, %169
  %171 = getelementptr inbounds i32, i32* %115, i64 -6
  %172 = load i32, i32* %171, align 4
  %173 = sext i32 %172 to i64
  %174 = load i16, i16* %45, align 2
  %175 = sext i16 %174 to i64
  %176 = mul nsw i64 %175, %173
  %177 = lshr i64 %176, 16
  %178 = trunc i64 %177 to i32
  %179 = add i32 %170, %178
  %180 = getelementptr inbounds i32, i32* %115, i64 -7
  %181 = load i32, i32* %180, align 4
  %182 = sext i32 %181 to i64
  %183 = load i16, i16* %46, align 2
  %184 = sext i16 %183 to i64
  %185 = mul nsw i64 %184, %182
  %186 = lshr i64 %185, 16
  %187 = trunc i64 %186 to i32
  %188 = add i32 %179, %187
  %189 = getelementptr inbounds i32, i32* %115, i64 -8
  %190 = load i32, i32* %189, align 4
  %191 = sext i32 %190 to i64
  %192 = load i16, i16* %47, align 2
  %193 = sext i16 %192 to i64
  %194 = mul nsw i64 %193, %191
  %195 = lshr i64 %194, 16
  %196 = trunc i64 %195 to i32
  %197 = add i32 %188, %196
  %198 = getelementptr inbounds i32, i32* %115, i64 -9
  %199 = load i32, i32* %198, align 4
  %200 = sext i32 %199 to i64
  %201 = load i16, i16* %48, align 2
  %202 = sext i16 %201 to i64
  %203 = mul nsw i64 %202, %200
  %204 = lshr i64 %203, 16
  %205 = trunc i64 %204 to i32
  %206 = add i32 %197, %205
  br i1 %49, label %207, label %262

207:                                              ; preds = %110
  %208 = getelementptr inbounds i32, i32* %115, i64 -10
  %209 = load i32, i32* %208, align 4
  %210 = sext i32 %209 to i64
  %211 = load i16, i16* %50, align 2
  %212 = sext i16 %211 to i64
  %213 = mul nsw i64 %212, %210
  %214 = lshr i64 %213, 16
  %215 = trunc i64 %214 to i32
  %216 = add i32 %206, %215
  %217 = getelementptr inbounds i32, i32* %115, i64 -11
  %218 = load i32, i32* %217, align 4
  %219 = sext i32 %218 to i64
  %220 = load i16, i16* %51, align 2
  %221 = sext i16 %220 to i64
  %222 = mul nsw i64 %221, %219
  %223 = lshr i64 %222, 16
  %224 = trunc i64 %223 to i32
  %225 = add i32 %216, %224
  %226 = getelementptr inbounds i32, i32* %115, i64 -12
  %227 = load i32, i32* %226, align 4
  %228 = sext i32 %227 to i64
  %229 = load i16, i16* %52, align 2
  %230 = sext i16 %229 to i64
  %231 = mul nsw i64 %230, %228
  %232 = lshr i64 %231, 16
  %233 = trunc i64 %232 to i32
  %234 = add i32 %225, %233
  %235 = getelementptr inbounds i32, i32* %115, i64 -13
  %236 = load i32, i32* %235, align 4
  %237 = sext i32 %236 to i64
  %238 = load i16, i16* %53, align 2
  %239 = sext i16 %238 to i64
  %240 = mul nsw i64 %239, %237
  %241 = lshr i64 %240, 16
  %242 = trunc i64 %241 to i32
  %243 = add i32 %234, %242
  %244 = getelementptr inbounds i32, i32* %115, i64 -14
  %245 = load i32, i32* %244, align 4
  %246 = sext i32 %245 to i64
  %247 = load i16, i16* %54, align 2
  %248 = sext i16 %247 to i64
  %249 = mul nsw i64 %248, %246
  %250 = lshr i64 %249, 16
  %251 = trunc i64 %250 to i32
  %252 = add i32 %243, %251
  %253 = getelementptr inbounds i32, i32* %115, i64 -15
  %254 = load i32, i32* %253, align 4
  %255 = sext i32 %254 to i64
  %256 = load i16, i16* %55, align 2
  %257 = sext i16 %256 to i64
  %258 = mul nsw i64 %257, %255
  %259 = lshr i64 %258, 16
  %260 = trunc i64 %259 to i32
  %261 = add i32 %252, %260
  br label %262

262:                                              ; preds = %110, %207
  %263 = phi i32 [ %261, %207 ], [ %206, %110 ]
  br i1 %56, label %264, label %308

264:                                              ; preds = %262
  %265 = load i32, i32* %113, align 4
  %266 = sext i32 %265 to i64
  %267 = load i16, i16* %7, align 2
  %268 = sext i16 %267 to i64
  %269 = mul nsw i64 %268, %266
  %270 = lshr i64 %269, 16
  %271 = getelementptr inbounds i32, i32* %113, i64 -1
  %272 = load i32, i32* %271, align 4
  %273 = sext i32 %272 to i64
  %274 = load i16, i16* %57, align 2
  %275 = sext i16 %274 to i64
  %276 = mul nsw i64 %275, %273
  %277 = lshr i64 %276, 16
  %278 = getelementptr inbounds i32, i32* %113, i64 -2
  %279 = load i32, i32* %278, align 4
  %280 = sext i32 %279 to i64
  %281 = load i16, i16* %58, align 2
  %282 = sext i16 %281 to i64
  %283 = mul nsw i64 %282, %280
  %284 = lshr i64 %283, 16
  %285 = getelementptr inbounds i32, i32* %113, i64 -3
  %286 = load i32, i32* %285, align 4
  %287 = sext i32 %286 to i64
  %288 = load i16, i16* %59, align 2
  %289 = sext i16 %288 to i64
  %290 = mul nsw i64 %289, %287
  %291 = lshr i64 %290, 16
  %292 = add nuw nsw i64 %277, %270
  %293 = add nuw nsw i64 %292, %284
  %294 = add nuw nsw i64 %293, %291
  %295 = shl i64 %294, 32
  %296 = add i64 %295, 8589934592
  %297 = lshr exact i64 %296, 32
  %298 = getelementptr inbounds i32, i32* %113, i64 -4
  %299 = load i32, i32* %298, align 4
  %300 = sext i32 %299 to i64
  %301 = load i16, i16* %60, align 2
  %302 = sext i16 %301 to i64
  %303 = mul nsw i64 %302, %300
  %304 = lshr i64 %303, 16
  %305 = add nuw nsw i64 %297, %304
  %306 = trunc i64 %305 to i32
  %307 = getelementptr inbounds i32, i32* %113, i64 1
  br label %308

308:                                              ; preds = %262, %264
  %309 = phi i32 [ %306, %264 ], [ 0, %262 ]
  %310 = phi i32* [ %307, %264 ], [ %113, %262 ]
  br i1 %62, label %312, label %311

311:                                              ; preds = %308
  tail call void @celt_fatal(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 250) #5
  unreachable

312:                                              ; preds = %308
  %313 = load i32, i32* %63, align 4
  %314 = load i32, i32* %64, align 4
  store i32 %313, i32* %64, align 4
  %315 = sext i32 %313 to i64
  %316 = load i16, i16* %8, align 2
  %317 = sext i16 %316 to i64
  %318 = mul nsw i64 %317, %315
  %319 = lshr i64 %318, 16
  %320 = trunc i64 %319 to i32
  %321 = add i32 %65, %320
  br i1 %66, label %322, label %349

322:                                              ; preds = %312, %322
  %323 = phi i64 [ %347, %322 ], [ 2, %312 ]
  %324 = phi i32 [ %338, %322 ], [ %314, %312 ]
  %325 = phi i32 [ %346, %322 ], [ %321, %312 ]
  %326 = add nsw i64 %323, -1
  %327 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 3, i64 %326
  %328 = load i32, i32* %327, align 4
  store i32 %324, i32* %327, align 4
  %329 = sext i32 %324 to i64
  %330 = getelementptr inbounds i16, i16* %8, i64 %326
  %331 = load i16, i16* %330, align 2
  %332 = sext i16 %331 to i64
  %333 = mul nsw i64 %332, %329
  %334 = lshr i64 %333, 16
  %335 = trunc i64 %334 to i32
  %336 = add i32 %325, %335
  %337 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 3, i64 %323
  %338 = load i32, i32* %337, align 4
  store i32 %328, i32* %337, align 4
  %339 = sext i32 %328 to i64
  %340 = getelementptr inbounds i16, i16* %8, i64 %323
  %341 = load i16, i16* %340, align 2
  %342 = sext i16 %341 to i64
  %343 = mul nsw i64 %342, %339
  %344 = lshr i64 %343, 16
  %345 = trunc i64 %344 to i32
  %346 = add i32 %336, %345
  %347 = add nuw nsw i64 %323, 2
  %348 = icmp slt i64 %347, %67
  br i1 %348, label %322, label %349

349:                                              ; preds = %322, %312
  %350 = phi i32 [ %321, %312 ], [ %346, %322 ]
  %351 = phi i32 [ %314, %312 ], [ %338, %322 ]
  store i32 %351, i32* %70, align 4
  %352 = sext i32 %351 to i64
  %353 = load i16, i16* %71, align 2
  %354 = sext i16 %353 to i64
  %355 = mul nsw i64 %354, %352
  %356 = lshr i64 %355, 16
  %357 = trunc i64 %356 to i32
  %358 = add i32 %350, %357
  %359 = shl i32 %358, 1
  %360 = load i32, i32* %72, align 4
  %361 = sext i32 %360 to i64
  %362 = mul nsw i64 %75, %361
  %363 = lshr i64 %362, 16
  %364 = trunc i64 %363 to i32
  %365 = add i32 %359, %364
  %366 = load i32, i32* %21, align 4
  %367 = add nsw i32 %366, -1
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 1, i64 %368
  %370 = load i32, i32* %369, align 4
  %371 = sext i32 %370 to i64
  %372 = mul nsw i64 %78, %371
  %373 = lshr i64 %372, 16
  %374 = mul nsw i64 %361, %80
  %375 = lshr i64 %374, 16
  %376 = add nuw nsw i64 %373, %375
  %377 = trunc i64 %376 to i32
  br i1 %83, label %379, label %378

378:                                              ; preds = %349
  tail call void @celt_fatal(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 258) #5
  unreachable

379:                                              ; preds = %349
  %380 = shl i32 %263, 2
  %381 = sub nsw i32 %380, %365
  %382 = sub i32 %381, %377
  br i1 %81, label %383, label %404

383:                                              ; preds = %379
  %384 = load i32, i32* %114, align 4
  %385 = getelementptr inbounds i32, i32* %114, i64 -2
  %386 = load i32, i32* %385, align 4
  %387 = add nsw i32 %386, %384
  %388 = sext i32 %387 to i64
  %389 = mul nsw i64 %86, %388
  %390 = lshr i64 %389, 16
  %391 = getelementptr inbounds i32, i32* %114, i64 -1
  %392 = load i32, i32* %391, align 4
  %393 = sext i32 %392 to i64
  %394 = mul nsw i64 %393, %88
  %395 = lshr i64 %394, 16
  %396 = add nuw nsw i64 %390, %395
  %397 = trunc i64 %396 to i32
  %398 = shl i32 %397, 1
  %399 = getelementptr inbounds i32, i32* %114, i64 1
  %400 = shl i32 %382, 1
  %401 = add i32 %400, %309
  %402 = sub i32 %401, %398
  %403 = ashr i32 %402, 2
  br label %406

404:                                              ; preds = %379
  %405 = ashr i32 %382, 1
  br label %406

406:                                              ; preds = %404, %383
  %407 = phi i32 [ %403, %383 ], [ %405, %404 ]
  %408 = phi i32* [ %399, %383 ], [ %114, %404 ]
  %409 = add nsw i32 %407, 1
  %410 = ashr i32 %409, 1
  %411 = getelementptr inbounds i32, i32* %2, i64 %112
  %412 = load i32, i32* %411, align 4
  %413 = sub nsw i32 %412, %410
  %414 = load i32, i32* %38, align 4
  %415 = icmp slt i32 %414, 0
  %416 = sub nsw i32 0, %413
  %417 = select i1 %415, i32 %416, i32 %413
  %418 = icmp sgt i32 %417, -31744
  %419 = select i1 %418, i32 %417, i32 -31744
  %420 = icmp slt i32 %419, 30720
  %421 = select i1 %420, i32 %419, i32 30720
  %422 = sub nsw i32 %421, %15
  br i1 %89, label %423, label %433

423:                                              ; preds = %406
  %424 = icmp sgt i32 %422, %91
  br i1 %424, label %425, label %427

425:                                              ; preds = %423
  %426 = sub nsw i32 %422, %91
  br label %433

427:                                              ; preds = %423
  %428 = icmp slt i32 %422, %92
  br i1 %428, label %429, label %431

429:                                              ; preds = %427
  %430 = add nsw i32 %422, %91
  br label %433

431:                                              ; preds = %427
  %432 = icmp slt i32 %422, 0
  br i1 %432, label %448, label %461

433:                                              ; preds = %425, %429, %406
  %434 = phi i32 [ %422, %406 ], [ %426, %425 ], [ %430, %429 ]
  %435 = icmp sgt i32 %434, 1023
  br i1 %435, label %436, label %446

436:                                              ; preds = %433
  %437 = and i32 %434, -1024
  %438 = add i32 %106, %437
  %439 = add nsw i32 %438, 1024
  %440 = shl i32 %438, 16
  %441 = ashr exact i32 %440, 16
  %442 = mul nsw i32 %441, %98
  %443 = shl i32 %439, 16
  %444 = ashr exact i32 %443, 16
  %445 = mul nsw i32 %444, %98
  br label %461

446:                                              ; preds = %433
  %447 = ashr i32 %434, 10
  switch i32 %447, label %449 [
    i32 0, label %461
    i32 -1, label %448
  ]

448:                                              ; preds = %431, %446
  br label %461

449:                                              ; preds = %446
  %450 = and i32 %434, -1024
  %451 = or i32 %450, 80
  %452 = add nsw i32 %451, %15
  %453 = add nsw i32 %452, 1024
  %454 = shl i32 %452, 16
  %455 = sub i32 0, %454
  %456 = ashr exact i32 %455, 16
  %457 = mul nsw i32 %456, %98
  %458 = sub i32 -67108864, %454
  %459 = ashr exact i32 %458, 16
  %460 = mul nsw i32 %459, %98
  br label %461

461:                                              ; preds = %446, %431, %449, %448, %436
  %462 = phi i32 [ %438, %436 ], [ %93, %448 ], [ %452, %449 ], [ %15, %431 ], [ %15, %446 ]
  %463 = phi i32 [ %439, %436 ], [ %15, %448 ], [ %453, %449 ], [ %102, %431 ], [ %102, %446 ]
  %464 = phi i32 [ %442, %436 ], [ %99, %448 ], [ %457, %449 ], [ %101, %431 ], [ %101, %446 ]
  %465 = phi i32 [ %445, %436 ], [ %101, %448 ], [ %460, %449 ], [ %105, %431 ], [ %105, %446 ]
  %466 = sub nsw i32 %421, %462
  %467 = shl i32 %466, 16
  %468 = ashr exact i32 %467, 16
  %469 = mul nsw i32 %468, %468
  %470 = add nsw i32 %469, %464
  %471 = sub nsw i32 %421, %463
  %472 = shl i32 %471, 16
  %473 = ashr exact i32 %472, 16
  %474 = mul nsw i32 %473, %473
  %475 = add nsw i32 %474, %465
  %476 = icmp slt i32 %475, %470
  %477 = select i1 %476, i32 %463, i32 %462
  %478 = lshr i32 %477, 9
  %479 = add nuw nsw i32 %478, 1
  %480 = lshr i32 %479, 1
  %481 = trunc i32 %480 to i8
  %482 = getelementptr inbounds i8, i8* %3, i64 %112
  store i8 %481, i8* %482, align 1
  %483 = shl i32 %477, 4
  %484 = load i32, i32* %38, align 4
  %485 = icmp slt i32 %484, 0
  %486 = sub nsw i32 0, %483
  %487 = select i1 %485, i32 %486, i32 %483
  %488 = shl i32 %309, 1
  %489 = add nsw i32 %487, %488
  %490 = shl i32 %263, 4
  %491 = add nsw i32 %489, %490
  %492 = sext i32 %491 to i64
  %493 = mul nsw i64 %492, %107
  %494 = lshr i64 %493, 16
  %495 = trunc i64 %494 to i32
  %496 = ashr i32 %495, 7
  %497 = add nsw i32 %496, 1
  %498 = lshr i32 %497, 1
  %499 = icmp sgt i32 %495, 8388479
  %500 = icmp slt i32 %497, -65536
  %501 = select i1 %500, i32 32768, i32 %498
  %502 = select i1 %499, i32 32767, i32 %501
  %503 = trunc i32 %502 to i16
  %504 = getelementptr inbounds i16, i16* %4, i64 %112
  store i16 %503, i16* %504, align 2
  %505 = getelementptr inbounds i32, i32* %115, i64 1
  store i32 %491, i32* %505, align 4
  %506 = load i32, i32* %411, align 4
  %507 = shl i32 %506, 4
  %508 = sub nsw i32 %491, %507
  store i32 %508, i32* %63, align 4
  %509 = shl i32 %365, 2
  %510 = sub nsw i32 %508, %509
  store i32 %510, i32* %72, align 4
  %511 = shl i32 %377, 2
  %512 = sub nsw i32 %510, %511
  %513 = load i32, i32* %21, align 4
  %514 = sext i32 %513 to i64
  %515 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 1, i64 %514
  store i32 %512, i32* %515, align 4
  %516 = shl i32 %489, 1
  %517 = load i32, i32* %22, align 4
  %518 = sext i32 %517 to i64
  %519 = getelementptr inbounds i32, i32* %5, i64 %518
  store i32 %516, i32* %519, align 4
  %520 = load i32, i32* %21, align 4
  %521 = add nsw i32 %520, 1
  store i32 %521, i32* %21, align 4
  %522 = load i32, i32* %22, align 4
  %523 = add nsw i32 %522, 1
  store i32 %523, i32* %22, align 4
  %524 = load i32, i32* %38, align 4
  %525 = load i8, i8* %482, align 1
  %526 = sext i8 %525 to i32
  %527 = add i32 %524, %526
  store i32 %527, i32* %38, align 4
  %528 = add nuw nsw i64 %112, 1
  %529 = icmp eq i64 %528, %108
  br i1 %529, label %530, label %110

530:                                              ; preds = %461, %20
  %531 = bitcast [96 x i32]* %23 to i8*
  %532 = sext i32 %16 to i64
  %533 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 2, i64 %532
  %534 = bitcast i32* %533 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %531, i8* align 4 %534, i64 64, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { noreturn nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
