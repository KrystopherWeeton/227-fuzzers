; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/fft_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/fft_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_transpose_float_sse2(float* nocapture readonly, float* nocapture, i32) #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %16

5:                                                ; preds = %3
  %6 = sext i32 %2 to i64
  %7 = shl nsw i32 %2, 1
  %8 = sext i32 %7 to i64
  %9 = mul nsw i32 %2, 3
  %10 = sext i32 %9 to i64
  br label %11

11:                                               ; preds = %17, %5
  %12 = phi i64 [ 0, %5 ], [ %18, %17 ]
  %13 = mul nsw i64 %12, %6
  %14 = getelementptr inbounds float, float* %0, i64 %13
  %15 = getelementptr inbounds float, float* %1, i64 %12
  br label %20

16:                                               ; preds = %17, %3
  ret void

17:                                               ; preds = %20
  %18 = add nuw nsw i64 %12, 4
  %19 = icmp slt i64 %18, %6
  br i1 %19, label %11, label %16

20:                                               ; preds = %11, %20
  %21 = phi i64 [ 0, %11 ], [ %51, %20 ]
  %22 = getelementptr inbounds float, float* %14, i64 %21
  %23 = mul nsw i64 %21, %6
  %24 = getelementptr inbounds float, float* %15, i64 %23
  %25 = bitcast float* %22 to <4 x float>*
  %26 = load <4 x float>, <4 x float>* %25, align 16
  %27 = getelementptr inbounds float, float* %22, i64 %6
  %28 = bitcast float* %27 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 16
  %30 = getelementptr inbounds float, float* %22, i64 %8
  %31 = bitcast float* %30 to <4 x float>*
  %32 = load <4 x float>, <4 x float>* %31, align 16
  %33 = getelementptr inbounds float, float* %22, i64 %10
  %34 = bitcast float* %33 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 16
  %36 = shufflevector <4 x float> %26, <4 x float> %29, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %37 = shufflevector <4 x float> %32, <4 x float> %35, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %38 = shufflevector <4 x float> %26, <4 x float> %29, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %39 = shufflevector <4 x float> %32, <4 x float> %35, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %40 = shufflevector <4 x float> %36, <4 x float> %37, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %41 = shufflevector <4 x float> %37, <4 x float> %36, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %42 = shufflevector <4 x float> %38, <4 x float> %39, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %43 = shufflevector <4 x float> %39, <4 x float> %38, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %44 = bitcast float* %24 to <4 x float>*
  store <4 x float> %40, <4 x float>* %44, align 16
  %45 = getelementptr inbounds float, float* %24, i64 %6
  %46 = bitcast float* %45 to <4 x float>*
  store <4 x float> %41, <4 x float>* %46, align 16
  %47 = getelementptr inbounds float, float* %24, i64 %8
  %48 = bitcast float* %47 to <4 x float>*
  store <4 x float> %42, <4 x float>* %48, align 16
  %49 = getelementptr inbounds float, float* %24, i64 %10
  %50 = bitcast float* %49 to <4 x float>*
  store <4 x float> %43, <4 x float>* %50, align 16
  %51 = add nuw nsw i64 %21, 4
  %52 = icmp slt i64 %51, %6
  br i1 %52, label %20, label %17
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_fft_unpack_2d_output_sse2(float* readonly, float*, i32) #0 {
  %4 = sdiv i32 %2, 2
  %5 = bitcast float* %0 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = bitcast float* %1 to i32*
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds float, float* %1, i64 1
  store float 0.000000e+00, float* %8, align 4
  %9 = mul nsw i32 %4, %2
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds float, float* %0, i64 %10
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = shl nsw i32 %9, 1
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds float, float* %1, i64 %15
  %17 = bitcast float* %16 to i32*
  store i32 %13, i32* %17, align 4
  %18 = or i32 %14, 1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds float, float* %1, i64 %19
  store float 0.000000e+00, float* %20, align 4
  %21 = sext i32 %4 to i64
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = shl nsw i32 %4, 1
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %1, i64 %26
  %28 = bitcast float* %27 to i32*
  store i32 %24, i32* %28, align 4
  %29 = or i32 %25, 1
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds float, float* %1, i64 %30
  store float 0.000000e+00, float* %31, align 4
  %32 = add nsw i32 %9, %4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds float, float* %0, i64 %33
  %35 = bitcast float* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = shl nsw i32 %32, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds float, float* %1, i64 %38
  %40 = bitcast float* %39 to i32*
  store i32 %36, i32* %40, align 4
  %41 = or i32 %37, 1
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds float, float* %1, i64 %42
  store float 0.000000e+00, float* %43, align 4
  %44 = icmp sgt i32 %2, 3
  br i1 %44, label %53, label %89

45:                                               ; preds = %53
  br i1 %44, label %46, label %89

46:                                               ; preds = %45
  %47 = icmp slt i32 %4, 4
  %48 = select i1 %47, i32 %4, i32 4
  %49 = icmp sgt i32 %48, 1
  %50 = icmp sgt i32 %2, 9
  %51 = sext i32 %48 to i64
  %52 = sext i32 %2 to i64
  br label %90

53:                                               ; preds = %3, %53
  %54 = phi i64 [ %86, %53 ], [ 1, %3 ]
  %55 = phi i32 [ %87, %53 ], [ 1, %3 ]
  %56 = getelementptr inbounds float, float* %0, i64 %54
  %57 = bitcast float* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = shl nuw nsw i64 %54, 1
  %60 = getelementptr inbounds float, float* %1, i64 %59
  %61 = bitcast float* %60 to i32*
  store i32 %58, i32* %61, align 4
  %62 = add nsw i64 %54, %21
  %63 = getelementptr inbounds float, float* %0, i64 %62
  %64 = bitcast float* %63 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = or i64 %59, 1
  %67 = getelementptr inbounds float, float* %1, i64 %66
  %68 = bitcast float* %67 to i32*
  store i32 %65, i32* %68, align 4
  %69 = add nsw i64 %54, %10
  %70 = add nsw i32 %55, %9
  %71 = getelementptr inbounds float, float* %0, i64 %69
  %72 = bitcast float* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = shl nsw i32 %70, 1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds float, float* %1, i64 %75
  %77 = bitcast float* %76 to i32*
  store i32 %73, i32* %77, align 4
  %78 = add nsw i64 %69, %21
  %79 = getelementptr inbounds float, float* %0, i64 %78
  %80 = bitcast float* %79 to i32*
  %81 = load i32, i32* %80, align 4
  %82 = or i32 %74, 1
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds float, float* %1, i64 %83
  %85 = bitcast float* %84 to i32*
  store i32 %81, i32* %85, align 4
  %86 = add nuw nsw i64 %54, 1
  %87 = add nuw nsw i32 %55, 1
  %88 = icmp slt i64 %86, %21
  br i1 %88, label %53, label %45

89:                                               ; preds = %251, %3, %45
  ret void

90:                                               ; preds = %46, %251
  %91 = phi i64 [ 1, %46 ], [ %252, %251 ]
  %92 = phi i32 [ 1, %46 ], [ %253, %251 ]
  %93 = mul nsw i64 %91, %52
  %94 = mul nsw i32 %92, %2
  %95 = getelementptr inbounds float, float* %0, i64 %93
  %96 = bitcast float* %95 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = shl nsw i32 %94, 1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float* %1, i64 %99
  %101 = bitcast float* %100 to i32*
  store i32 %97, i32* %101, align 4
  %102 = add nsw i64 %91, %21
  %103 = mul nsw i64 %102, %52
  %104 = getelementptr inbounds float, float* %0, i64 %103
  %105 = bitcast float* %104 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = or i32 %98, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float* %1, i64 %108
  %110 = bitcast float* %109 to i32*
  store i32 %106, i32* %110, align 4
  %111 = add nsw i64 %93, %21
  %112 = add nsw i32 %94, %4
  %113 = getelementptr inbounds float, float* %0, i64 %111
  %114 = bitcast float* %113 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = shl nsw i32 %112, 1
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float* %1, i64 %117
  %119 = bitcast float* %118 to i32*
  store i32 %115, i32* %119, align 4
  %120 = add nsw i64 %103, %21
  %121 = getelementptr inbounds float, float* %0, i64 %120
  %122 = bitcast float* %121 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = or i32 %116, 1
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds float, float* %1, i64 %125
  %127 = bitcast float* %126 to i32*
  store i32 %123, i32* %127, align 4
  br i1 %49, label %128, label %130

128:                                              ; preds = %90
  %129 = trunc i64 %93 to i32
  br label %131

130:                                              ; preds = %131, %90
  br i1 %50, label %193, label %158

131:                                              ; preds = %128, %131
  %132 = phi i64 [ 1, %128 ], [ %155, %131 ]
  %133 = phi i32 [ 1, %128 ], [ %156, %131 ]
  %134 = add nsw i64 %132, %93
  %135 = add nsw i32 %133, %129
  %136 = getelementptr inbounds float, float* %0, i64 %134
  %137 = load float, float* %136, align 4
  %138 = add nsw i64 %132, %103
  %139 = add nsw i64 %138, %21
  %140 = getelementptr inbounds float, float* %0, i64 %139
  %141 = load float, float* %140, align 4
  %142 = fsub float %137, %141
  %143 = shl nsw i32 %135, 1
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds float, float* %1, i64 %144
  store float %142, float* %145, align 4
  %146 = getelementptr inbounds float, float* %0, i64 %138
  %147 = load float, float* %146, align 4
  %148 = add nsw i64 %134, %21
  %149 = getelementptr inbounds float, float* %0, i64 %148
  %150 = load float, float* %149, align 4
  %151 = fadd float %147, %150
  %152 = or i32 %143, 1
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds float, float* %1, i64 %153
  store float %151, float* %154, align 4
  %155 = add nuw nsw i64 %132, 1
  %156 = add nuw nsw i32 %133, 1
  %157 = icmp slt i64 %155, %51
  br i1 %157, label %131, label %130

158:                                              ; preds = %193, %130
  %159 = sub nsw i64 %52, %102
  %160 = mul nsw i64 %159, %52
  %161 = getelementptr inbounds float, float* %0, i64 %160
  %162 = bitcast float* %161 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = trunc i64 %103 to i32
  %165 = shl nsw i32 %164, 1
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %1, i64 %166
  %168 = bitcast float* %167 to i32*
  store i32 %163, i32* %168, align 4
  %169 = add nsw i64 %159, %21
  %170 = mul nsw i64 %169, %52
  %171 = getelementptr inbounds float, float* %0, i64 %170
  %172 = load float, float* %171, align 4
  %173 = fsub float -0.000000e+00, %172
  %174 = or i32 %165, 1
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds float, float* %1, i64 %175
  store float %173, float* %176, align 4
  %177 = add nsw i64 %160, %21
  %178 = getelementptr inbounds float, float* %0, i64 %177
  %179 = bitcast float* %178 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = trunc i64 %120 to i32
  %182 = shl nsw i32 %181, 1
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds float, float* %1, i64 %183
  %185 = bitcast float* %184 to i32*
  store i32 %180, i32* %185, align 4
  %186 = add nsw i64 %170, %21
  %187 = getelementptr inbounds float, float* %0, i64 %186
  %188 = load float, float* %187, align 4
  %189 = fsub float -0.000000e+00, %188
  %190 = or i32 %182, 1
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds float, float* %1, i64 %191
  store float %189, float* %192, align 4
  br i1 %49, label %224, label %223

193:                                              ; preds = %130, %193
  %194 = phi i64 [ %221, %193 ], [ 4, %130 ]
  %195 = getelementptr inbounds float, float* %95, i64 %194
  %196 = bitcast float* %195 to <4 x float>*
  %197 = load <4 x float>, <4 x float>* %196, align 16
  %198 = getelementptr inbounds float, float* %104, i64 %194
  %199 = getelementptr inbounds float, float* %198, i64 %21
  %200 = bitcast float* %199 to <4 x float>*
  %201 = load <4 x float>, <4 x float>* %200, align 16
  %202 = bitcast float* %198 to <4 x float>*
  %203 = load <4 x float>, <4 x float>* %202, align 16
  %204 = getelementptr inbounds float, float* %195, i64 %21
  %205 = bitcast float* %204 to <4 x float>*
  %206 = load <4 x float>, <4 x float>* %205, align 16
  %207 = fsub <4 x float> %197, %201
  %208 = fadd <4 x float> %203, %206
  %209 = add nsw i64 %194, %93
  %210 = trunc i64 %209 to i32
  %211 = shl i32 %210, 1
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds float, float* %1, i64 %212
  %214 = shufflevector <4 x float> %207, <4 x float> %208, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %215 = bitcast float* %213 to <4 x float>*
  store <4 x float> %214, <4 x float>* %215, align 16
  %216 = add i32 %211, 4
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds float, float* %1, i64 %217
  %219 = shufflevector <4 x float> %207, <4 x float> %208, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %220 = bitcast float* %218 to <4 x float>*
  store <4 x float> %219, <4 x float>* %220, align 16
  %221 = add nuw nsw i64 %194, 4
  %222 = icmp slt i64 %221, %21
  br i1 %222, label %193, label %158

223:                                              ; preds = %224, %158
  br i1 %50, label %255, label %251

224:                                              ; preds = %158, %224
  %225 = phi i64 [ %248, %224 ], [ 1, %158 ]
  %226 = phi i32 [ %249, %224 ], [ 1, %158 ]
  %227 = add nsw i64 %225, %160
  %228 = getelementptr inbounds float, float* %0, i64 %227
  %229 = load float, float* %228, align 4
  %230 = add nsw i64 %225, %170
  %231 = add nsw i64 %230, %21
  %232 = getelementptr inbounds float, float* %0, i64 %231
  %233 = load float, float* %232, align 4
  %234 = fadd float %229, %233
  %235 = add nsw i32 %226, %164
  %236 = shl nsw i32 %235, 1
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds float, float* %1, i64 %237
  store float %234, float* %238, align 4
  %239 = getelementptr inbounds float, float* %0, i64 %230
  %240 = load float, float* %239, align 4
  %241 = add nsw i64 %227, %21
  %242 = getelementptr inbounds float, float* %0, i64 %241
  %243 = load float, float* %242, align 4
  %244 = fsub float %243, %240
  %245 = or i32 %236, 1
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds float, float* %1, i64 %246
  store float %244, float* %247, align 4
  %248 = add nuw nsw i64 %225, 1
  %249 = add nuw nsw i32 %226, 1
  %250 = icmp slt i64 %248, %51
  br i1 %250, label %224, label %223

251:                                              ; preds = %255, %223
  %252 = add nuw nsw i64 %91, 1
  %253 = add nuw nsw i32 %92, 1
  %254 = icmp slt i64 %252, %21
  br i1 %254, label %90, label %89

255:                                              ; preds = %223, %255
  %256 = phi i64 [ %283, %255 ], [ 4, %223 ]
  %257 = getelementptr inbounds float, float* %161, i64 %256
  %258 = bitcast float* %257 to <4 x float>*
  %259 = load <4 x float>, <4 x float>* %258, align 16
  %260 = getelementptr inbounds float, float* %171, i64 %256
  %261 = getelementptr inbounds float, float* %260, i64 %21
  %262 = bitcast float* %261 to <4 x float>*
  %263 = load <4 x float>, <4 x float>* %262, align 16
  %264 = bitcast float* %260 to <4 x float>*
  %265 = load <4 x float>, <4 x float>* %264, align 16
  %266 = getelementptr inbounds float, float* %257, i64 %21
  %267 = bitcast float* %266 to <4 x float>*
  %268 = load <4 x float>, <4 x float>* %267, align 16
  %269 = fadd <4 x float> %259, %263
  %270 = fsub <4 x float> %268, %265
  %271 = add nsw i64 %256, %103
  %272 = trunc i64 %271 to i32
  %273 = shl i32 %272, 1
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds float, float* %1, i64 %274
  %276 = shufflevector <4 x float> %269, <4 x float> %270, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %277 = bitcast float* %275 to <4 x float>*
  store <4 x float> %276, <4 x float>* %277, align 16
  %278 = add i32 %273, 4
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds float, float* %1, i64 %279
  %281 = shufflevector <4 x float> %269, <4 x float> %270, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %282 = bitcast float* %280 to <4 x float>*
  store <4 x float> %281, <4 x float>* %282, align 16
  %283 = add nuw nsw i64 %256, 4
  %284 = icmp slt i64 %283, %21
  br i1 %284, label %255, label %251
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_fft4x4_float_sse2(float*, float*, float*) local_unnamed_addr #1 {
  tail call void @aom_fft_2d_gen(float* %0, float* %1, float* %2, i32 4, void (float*, float*, i32)* nonnull @aom_fft1d_4_sse2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, void (float*, float*, i32)* nonnull @aom_fft_unpack_2d_output_sse2, i32 4) #4
  ret void
}

declare void @aom_fft_2d_gen(float*, float*, float*, i32, void (float*, float*, i32)*, void (float*, float*, i32)*, void (float*, float*, i32)*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_fft1d_4_sse2(float* nocapture readonly, float* nocapture, i32) #3 {
  %4 = bitcast float* %0 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 16
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 16
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 16
  %20 = fadd <4 x float> %5, %14
  %21 = fsub <4 x float> %5, %14
  %22 = fadd <4 x float> %9, %19
  %23 = fsub <4 x float> %9, %19
  %24 = fadd <4 x float> %20, %22
  %25 = bitcast float* %1 to <4 x float>*
  store <4 x float> %24, <4 x float>* %25, align 16
  %26 = getelementptr inbounds float, float* %1, i64 %6
  %27 = bitcast float* %26 to <4 x float>*
  store <4 x float> %21, <4 x float>* %27, align 16
  %28 = getelementptr inbounds float, float* %1, i64 %11
  %29 = fsub <4 x float> %20, %22
  %30 = bitcast float* %28 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 16
  %31 = getelementptr inbounds float, float* %1, i64 %16
  %32 = fsub <4 x float> zeroinitializer, %23
  %33 = bitcast float* %31 to <4 x float>*
  store <4 x float> %32, <4 x float>* %33, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_fft8x8_float_sse2(float*, float*, float*) local_unnamed_addr #1 {
  tail call void @aom_fft_2d_gen(float* %0, float* %1, float* %2, i32 8, void (float*, float*, i32)* nonnull @aom_fft1d_8_sse2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, void (float*, float*, i32)* nonnull @aom_fft_unpack_2d_output_sse2, i32 4) #4
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_fft1d_8_sse2(float* nocapture readonly, float* nocapture, i32) #3 {
  %4 = bitcast float* %0 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 16
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 16
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 16
  %20 = shl nsw i32 %2, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to <4 x float>*
  %24 = load <4 x float>, <4 x float>* %23, align 16
  %25 = mul nsw i32 %2, 5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 16
  %30 = mul nsw i32 %2, 6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 16
  %35 = mul nsw i32 %2, 7
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to <4 x float>*
  %39 = load <4 x float>, <4 x float>* %38, align 16
  %40 = fadd <4 x float> %5, %24
  %41 = fsub <4 x float> %5, %24
  %42 = fadd <4 x float> %14, %34
  %43 = fsub <4 x float> %14, %34
  %44 = fadd <4 x float> %40, %42
  %45 = fsub <4 x float> %40, %42
  %46 = fadd <4 x float> %9, %29
  %47 = fsub <4 x float> %9, %29
  %48 = fadd <4 x float> %19, %39
  %49 = fsub <4 x float> %19, %39
  %50 = fadd <4 x float> %46, %48
  %51 = fsub <4 x float> %46, %48
  %52 = fadd <4 x float> %44, %50
  %53 = bitcast float* %1 to <4 x float>*
  store <4 x float> %52, <4 x float>* %53, align 16
  %54 = getelementptr inbounds float, float* %1, i64 %6
  %55 = fsub <4 x float> %47, %49
  %56 = fmul <4 x float> %55, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %57 = fadd <4 x float> %41, %56
  %58 = bitcast float* %54 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 16
  %59 = getelementptr inbounds float, float* %1, i64 %11
  %60 = bitcast float* %59 to <4 x float>*
  store <4 x float> %45, <4 x float>* %60, align 16
  %61 = getelementptr inbounds float, float* %1, i64 %16
  %62 = fsub <4 x float> %41, %56
  %63 = bitcast float* %61 to <4 x float>*
  store <4 x float> %62, <4 x float>* %63, align 16
  %64 = getelementptr inbounds float, float* %1, i64 %21
  %65 = fsub <4 x float> %44, %50
  %66 = bitcast float* %64 to <4 x float>*
  store <4 x float> %65, <4 x float>* %66, align 16
  %67 = getelementptr inbounds float, float* %1, i64 %26
  %68 = fsub <4 x float> zeroinitializer, %43
  %69 = fadd <4 x float> %47, %49
  %70 = fmul <4 x float> %69, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %71 = fsub <4 x float> %68, %70
  %72 = bitcast float* %67 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 16
  %73 = getelementptr inbounds float, float* %1, i64 %31
  %74 = fsub <4 x float> zeroinitializer, %51
  %75 = bitcast float* %73 to <4 x float>*
  store <4 x float> %74, <4 x float>* %75, align 16
  %76 = getelementptr inbounds float, float* %1, i64 %36
  %77 = fsub <4 x float> %43, %70
  %78 = bitcast float* %76 to <4 x float>*
  store <4 x float> %77, <4 x float>* %78, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_fft16x16_float_sse2(float*, float*, float*) local_unnamed_addr #1 {
  tail call void @aom_fft_2d_gen(float* %0, float* %1, float* %2, i32 16, void (float*, float*, i32)* nonnull @aom_fft1d_16_sse2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, void (float*, float*, i32)* nonnull @aom_fft_unpack_2d_output_sse2, i32 4) #4
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_fft1d_16_sse2(float* nocapture readonly, float* nocapture, i32) #3 {
  %4 = bitcast float* %0 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 16
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 16
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 16
  %20 = shl nsw i32 %2, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to <4 x float>*
  %24 = load <4 x float>, <4 x float>* %23, align 16
  %25 = mul nsw i32 %2, 5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 16
  %30 = mul nsw i32 %2, 6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 16
  %35 = mul nsw i32 %2, 7
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to <4 x float>*
  %39 = load <4 x float>, <4 x float>* %38, align 16
  %40 = shl nsw i32 %2, 3
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %0, i64 %41
  %43 = bitcast float* %42 to <4 x float>*
  %44 = load <4 x float>, <4 x float>* %43, align 16
  %45 = mul nsw i32 %2, 9
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 16
  %50 = mul nsw i32 %2, 10
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %0, i64 %51
  %53 = bitcast float* %52 to <4 x float>*
  %54 = load <4 x float>, <4 x float>* %53, align 16
  %55 = mul nsw i32 %2, 11
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = bitcast float* %57 to <4 x float>*
  %59 = load <4 x float>, <4 x float>* %58, align 16
  %60 = mul nsw i32 %2, 12
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %0, i64 %61
  %63 = bitcast float* %62 to <4 x float>*
  %64 = load <4 x float>, <4 x float>* %63, align 16
  %65 = mul nsw i32 %2, 13
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %0, i64 %66
  %68 = bitcast float* %67 to <4 x float>*
  %69 = load <4 x float>, <4 x float>* %68, align 16
  %70 = mul nsw i32 %2, 14
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %0, i64 %71
  %73 = bitcast float* %72 to <4 x float>*
  %74 = load <4 x float>, <4 x float>* %73, align 16
  %75 = mul nsw i32 %2, 15
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds float, float* %0, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %79 = load <4 x float>, <4 x float>* %78, align 16
  %80 = fadd <4 x float> %5, %44
  %81 = fsub <4 x float> %5, %44
  %82 = fadd <4 x float> %24, %64
  %83 = fsub <4 x float> %24, %64
  %84 = fadd <4 x float> %80, %82
  %85 = fsub <4 x float> %80, %82
  %86 = fadd <4 x float> %14, %54
  %87 = fsub <4 x float> %14, %54
  %88 = fadd <4 x float> %34, %74
  %89 = fsub <4 x float> %34, %74
  %90 = fadd <4 x float> %86, %88
  %91 = fsub <4 x float> %86, %88
  %92 = fadd <4 x float> %84, %90
  %93 = fsub <4 x float> %84, %90
  %94 = fsub <4 x float> %87, %89
  %95 = fmul <4 x float> %94, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %96 = fadd <4 x float> %81, %95
  %97 = fsub <4 x float> zeroinitializer, %83
  %98 = fadd <4 x float> %87, %89
  %99 = fmul <4 x float> %98, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %100 = fsub <4 x float> %97, %99
  %101 = fsub <4 x float> %81, %95
  %102 = fsub <4 x float> %83, %99
  %103 = fadd <4 x float> %9, %49
  %104 = fsub <4 x float> %9, %49
  %105 = fadd <4 x float> %29, %69
  %106 = fsub <4 x float> %29, %69
  %107 = fadd <4 x float> %103, %105
  %108 = fsub <4 x float> %103, %105
  %109 = fadd <4 x float> %19, %59
  %110 = fsub <4 x float> %19, %59
  %111 = fadd <4 x float> %39, %79
  %112 = fsub <4 x float> %39, %79
  %113 = fadd <4 x float> %109, %111
  %114 = fsub <4 x float> %109, %111
  %115 = fadd <4 x float> %107, %113
  %116 = fsub <4 x float> %107, %113
  %117 = fsub <4 x float> %110, %112
  %118 = fmul <4 x float> %117, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %119 = fadd <4 x float> %104, %118
  %120 = fsub <4 x float> zeroinitializer, %106
  %121 = fadd <4 x float> %110, %112
  %122 = fmul <4 x float> %121, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %123 = fsub <4 x float> %120, %122
  %124 = fsub <4 x float> %104, %118
  %125 = fsub <4 x float> %106, %122
  %126 = fadd <4 x float> %92, %115
  %127 = bitcast float* %1 to <4 x float>*
  store <4 x float> %126, <4 x float>* %127, align 16
  %128 = getelementptr inbounds float, float* %1, i64 %6
  %129 = fmul <4 x float> %119, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %130 = fmul <4 x float> %123, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %131 = fadd <4 x float> %129, %130
  %132 = fadd <4 x float> %96, %131
  %133 = bitcast float* %128 to <4 x float>*
  store <4 x float> %132, <4 x float>* %133, align 16
  %134 = getelementptr inbounds float, float* %1, i64 %11
  %135 = fsub <4 x float> %108, %114
  %136 = fmul <4 x float> %135, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %137 = fadd <4 x float> %85, %136
  %138 = bitcast float* %134 to <4 x float>*
  store <4 x float> %137, <4 x float>* %138, align 16
  %139 = getelementptr inbounds float, float* %1, i64 %16
  %140 = fmul <4 x float> %124, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %141 = fmul <4 x float> %125, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %142 = fadd <4 x float> %140, %141
  %143 = fadd <4 x float> %101, %142
  %144 = bitcast float* %139 to <4 x float>*
  store <4 x float> %143, <4 x float>* %144, align 16
  %145 = getelementptr inbounds float, float* %1, i64 %21
  %146 = bitcast float* %145 to <4 x float>*
  store <4 x float> %93, <4 x float>* %146, align 16
  %147 = getelementptr inbounds float, float* %1, i64 %26
  %148 = fsub <4 x float> zeroinitializer, %140
  %149 = fsub <4 x float> %148, %141
  %150 = fadd <4 x float> %101, %149
  %151 = bitcast float* %147 to <4 x float>*
  store <4 x float> %150, <4 x float>* %151, align 16
  %152 = getelementptr inbounds float, float* %1, i64 %31
  %153 = fsub <4 x float> %85, %136
  %154 = bitcast float* %152 to <4 x float>*
  store <4 x float> %153, <4 x float>* %154, align 16
  %155 = getelementptr inbounds float, float* %1, i64 %36
  %156 = fsub <4 x float> zeroinitializer, %129
  %157 = fsub <4 x float> %156, %130
  %158 = fadd <4 x float> %96, %157
  %159 = bitcast float* %155 to <4 x float>*
  store <4 x float> %158, <4 x float>* %159, align 16
  %160 = getelementptr inbounds float, float* %1, i64 %41
  %161 = fsub <4 x float> %92, %115
  %162 = bitcast float* %160 to <4 x float>*
  store <4 x float> %161, <4 x float>* %162, align 16
  %163 = getelementptr inbounds float, float* %1, i64 %46
  %164 = fmul <4 x float> %123, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %165 = fmul <4 x float> %119, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %166 = fsub <4 x float> %164, %165
  %167 = fadd <4 x float> %100, %166
  %168 = bitcast float* %163 to <4 x float>*
  store <4 x float> %167, <4 x float>* %168, align 16
  %169 = getelementptr inbounds float, float* %1, i64 %51
  %170 = fsub <4 x float> zeroinitializer, %91
  %171 = fadd <4 x float> %108, %114
  %172 = fmul <4 x float> %171, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %173 = fsub <4 x float> %170, %172
  %174 = bitcast float* %169 to <4 x float>*
  store <4 x float> %173, <4 x float>* %174, align 16
  %175 = getelementptr inbounds float, float* %1, i64 %56
  %176 = fmul <4 x float> %125, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %177 = fmul <4 x float> %124, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %178 = fsub <4 x float> %176, %177
  %179 = fadd <4 x float> %102, %178
  %180 = bitcast float* %175 to <4 x float>*
  store <4 x float> %179, <4 x float>* %180, align 16
  %181 = getelementptr inbounds float, float* %1, i64 %61
  %182 = fsub <4 x float> zeroinitializer, %116
  %183 = bitcast float* %181 to <4 x float>*
  store <4 x float> %182, <4 x float>* %183, align 16
  %184 = getelementptr inbounds float, float* %1, i64 %66
  %185 = fsub <4 x float> zeroinitializer, %102
  %186 = fsub <4 x float> %177, %176
  %187 = fsub <4 x float> %185, %186
  %188 = bitcast float* %184 to <4 x float>*
  store <4 x float> %187, <4 x float>* %188, align 16
  %189 = getelementptr inbounds float, float* %1, i64 %71
  %190 = fsub <4 x float> %91, %172
  %191 = bitcast float* %189 to <4 x float>*
  store <4 x float> %190, <4 x float>* %191, align 16
  %192 = getelementptr inbounds float, float* %1, i64 %76
  %193 = fsub <4 x float> zeroinitializer, %100
  %194 = fsub <4 x float> %165, %164
  %195 = fsub <4 x float> %193, %194
  %196 = bitcast float* %192 to <4 x float>*
  store <4 x float> %195, <4 x float>* %196, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_fft32x32_float_sse2(float*, float*, float*) local_unnamed_addr #1 {
  tail call void @aom_fft_2d_gen(float* %0, float* %1, float* %2, i32 32, void (float*, float*, i32)* nonnull @aom_fft1d_32_sse2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, void (float*, float*, i32)* nonnull @aom_fft_unpack_2d_output_sse2, i32 4) #4
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_fft1d_32_sse2(float* readonly, float*, i32) #3 {
  %4 = bitcast float* %0 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 16
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 16
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 16
  %20 = shl nsw i32 %2, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to <4 x float>*
  %24 = load <4 x float>, <4 x float>* %23, align 16
  %25 = mul nsw i32 %2, 5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 16
  %30 = mul nsw i32 %2, 6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 16
  %35 = mul nsw i32 %2, 7
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to <4 x float>*
  %39 = load <4 x float>, <4 x float>* %38, align 16
  %40 = shl nsw i32 %2, 3
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %0, i64 %41
  %43 = bitcast float* %42 to <4 x float>*
  %44 = load <4 x float>, <4 x float>* %43, align 16
  %45 = mul nsw i32 %2, 9
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 16
  %50 = mul nsw i32 %2, 10
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %0, i64 %51
  %53 = bitcast float* %52 to <4 x float>*
  %54 = load <4 x float>, <4 x float>* %53, align 16
  %55 = mul nsw i32 %2, 11
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = bitcast float* %57 to <4 x float>*
  %59 = load <4 x float>, <4 x float>* %58, align 16
  %60 = mul nsw i32 %2, 12
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %0, i64 %61
  %63 = bitcast float* %62 to <4 x float>*
  %64 = load <4 x float>, <4 x float>* %63, align 16
  %65 = mul nsw i32 %2, 13
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %0, i64 %66
  %68 = bitcast float* %67 to <4 x float>*
  %69 = load <4 x float>, <4 x float>* %68, align 16
  %70 = mul nsw i32 %2, 14
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %0, i64 %71
  %73 = bitcast float* %72 to <4 x float>*
  %74 = load <4 x float>, <4 x float>* %73, align 16
  %75 = mul nsw i32 %2, 15
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds float, float* %0, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %79 = load <4 x float>, <4 x float>* %78, align 16
  %80 = shl nsw i32 %2, 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float* %0, i64 %81
  %83 = bitcast float* %82 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 16
  %85 = mul nsw i32 %2, 17
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds float, float* %0, i64 %86
  %88 = bitcast float* %87 to <4 x float>*
  %89 = load <4 x float>, <4 x float>* %88, align 16
  %90 = mul nsw i32 %2, 18
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds float, float* %0, i64 %91
  %93 = bitcast float* %92 to <4 x float>*
  %94 = load <4 x float>, <4 x float>* %93, align 16
  %95 = mul nsw i32 %2, 19
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %0, i64 %96
  %98 = bitcast float* %97 to <4 x float>*
  %99 = load <4 x float>, <4 x float>* %98, align 16
  %100 = mul nsw i32 %2, 20
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %0, i64 %101
  %103 = bitcast float* %102 to <4 x float>*
  %104 = load <4 x float>, <4 x float>* %103, align 16
  %105 = mul nsw i32 %2, 21
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %0, i64 %106
  %108 = bitcast float* %107 to <4 x float>*
  %109 = load <4 x float>, <4 x float>* %108, align 16
  %110 = mul nsw i32 %2, 22
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %0, i64 %111
  %113 = bitcast float* %112 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 16
  %115 = mul nsw i32 %2, 23
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %0, i64 %116
  %118 = bitcast float* %117 to <4 x float>*
  %119 = load <4 x float>, <4 x float>* %118, align 16
  %120 = mul nsw i32 %2, 24
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %0, i64 %121
  %123 = bitcast float* %122 to <4 x float>*
  %124 = load <4 x float>, <4 x float>* %123, align 16
  %125 = mul nsw i32 %2, 25
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %0, i64 %126
  %128 = bitcast float* %127 to <4 x float>*
  %129 = load <4 x float>, <4 x float>* %128, align 16
  %130 = mul nsw i32 %2, 26
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %0, i64 %131
  %133 = bitcast float* %132 to <4 x float>*
  %134 = load <4 x float>, <4 x float>* %133, align 16
  %135 = mul nsw i32 %2, 27
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %0, i64 %136
  %138 = bitcast float* %137 to <4 x float>*
  %139 = load <4 x float>, <4 x float>* %138, align 16
  %140 = mul nsw i32 %2, 28
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %0, i64 %141
  %143 = bitcast float* %142 to <4 x float>*
  %144 = load <4 x float>, <4 x float>* %143, align 16
  %145 = mul nsw i32 %2, 29
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %0, i64 %146
  %148 = bitcast float* %147 to <4 x float>*
  %149 = load <4 x float>, <4 x float>* %148, align 16
  %150 = mul nsw i32 %2, 30
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %0, i64 %151
  %153 = bitcast float* %152 to <4 x float>*
  %154 = load <4 x float>, <4 x float>* %153, align 16
  %155 = mul nsw i32 %2, 31
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %0, i64 %156
  %158 = bitcast float* %157 to <4 x float>*
  %159 = load <4 x float>, <4 x float>* %158, align 16
  %160 = fadd <4 x float> %5, %84
  %161 = fsub <4 x float> %5, %84
  %162 = fadd <4 x float> %44, %124
  %163 = fsub <4 x float> %44, %124
  %164 = fadd <4 x float> %160, %162
  %165 = fsub <4 x float> %160, %162
  %166 = fadd <4 x float> %24, %104
  %167 = fsub <4 x float> %24, %104
  %168 = fadd <4 x float> %64, %144
  %169 = fsub <4 x float> %64, %144
  %170 = fadd <4 x float> %166, %168
  %171 = fsub <4 x float> %166, %168
  %172 = fadd <4 x float> %164, %170
  %173 = fsub <4 x float> %164, %170
  %174 = fsub <4 x float> %167, %169
  %175 = fmul <4 x float> %174, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %176 = fadd <4 x float> %161, %175
  %177 = fsub <4 x float> zeroinitializer, %163
  %178 = fadd <4 x float> %167, %169
  %179 = fmul <4 x float> %178, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %180 = fsub <4 x float> %177, %179
  %181 = fsub <4 x float> %161, %175
  %182 = fsub <4 x float> %163, %179
  %183 = fadd <4 x float> %14, %94
  %184 = fsub <4 x float> %14, %94
  %185 = fadd <4 x float> %54, %134
  %186 = fsub <4 x float> %54, %134
  %187 = fadd <4 x float> %183, %185
  %188 = fsub <4 x float> %183, %185
  %189 = fadd <4 x float> %34, %114
  %190 = fsub <4 x float> %34, %114
  %191 = fadd <4 x float> %74, %154
  %192 = fsub <4 x float> %74, %154
  %193 = fadd <4 x float> %189, %191
  %194 = fsub <4 x float> %189, %191
  %195 = fadd <4 x float> %187, %193
  %196 = fsub <4 x float> %187, %193
  %197 = fsub <4 x float> %190, %192
  %198 = fmul <4 x float> %197, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %199 = fadd <4 x float> %184, %198
  %200 = fsub <4 x float> zeroinitializer, %186
  %201 = fadd <4 x float> %190, %192
  %202 = fmul <4 x float> %201, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %203 = fsub <4 x float> %200, %202
  %204 = fsub <4 x float> %184, %198
  %205 = fsub <4 x float> %186, %202
  %206 = fadd <4 x float> %172, %195
  %207 = fsub <4 x float> %172, %195
  %208 = fmul <4 x float> %199, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %209 = fmul <4 x float> %203, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %210 = fadd <4 x float> %208, %209
  %211 = fadd <4 x float> %176, %210
  %212 = fmul <4 x float> %203, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %213 = fmul <4 x float> %199, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %214 = fsub <4 x float> %212, %213
  %215 = fadd <4 x float> %180, %214
  %216 = fsub <4 x float> %188, %194
  %217 = fmul <4 x float> %216, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %218 = fadd <4 x float> %165, %217
  %219 = fsub <4 x float> zeroinitializer, %171
  %220 = fadd <4 x float> %188, %194
  %221 = fmul <4 x float> %220, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %222 = fsub <4 x float> %219, %221
  %223 = fmul <4 x float> %204, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %224 = fmul <4 x float> %205, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %225 = fadd <4 x float> %223, %224
  %226 = fadd <4 x float> %181, %225
  %227 = fmul <4 x float> %205, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %228 = fmul <4 x float> %204, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %229 = fsub <4 x float> %227, %228
  %230 = fadd <4 x float> %182, %229
  %231 = fsub <4 x float> zeroinitializer, %223
  %232 = fsub <4 x float> %231, %224
  %233 = fadd <4 x float> %181, %232
  %234 = fsub <4 x float> zeroinitializer, %182
  %235 = fsub <4 x float> %228, %227
  %236 = fsub <4 x float> %234, %235
  %237 = fsub <4 x float> %165, %217
  %238 = fsub <4 x float> %171, %221
  %239 = fsub <4 x float> zeroinitializer, %208
  %240 = fsub <4 x float> %239, %209
  %241 = fadd <4 x float> %176, %240
  %242 = fsub <4 x float> zeroinitializer, %180
  %243 = fsub <4 x float> %213, %212
  %244 = fsub <4 x float> %242, %243
  %245 = fadd <4 x float> %9, %89
  %246 = fsub <4 x float> %9, %89
  %247 = fadd <4 x float> %49, %129
  %248 = fsub <4 x float> %49, %129
  %249 = fadd <4 x float> %245, %247
  %250 = fsub <4 x float> %245, %247
  %251 = fadd <4 x float> %29, %109
  %252 = fsub <4 x float> %29, %109
  %253 = fadd <4 x float> %69, %149
  %254 = fsub <4 x float> %69, %149
  %255 = fadd <4 x float> %251, %253
  %256 = fsub <4 x float> %251, %253
  %257 = fadd <4 x float> %249, %255
  %258 = fsub <4 x float> %249, %255
  %259 = fsub <4 x float> %252, %254
  %260 = fmul <4 x float> %259, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %261 = fadd <4 x float> %246, %260
  %262 = fsub <4 x float> zeroinitializer, %248
  %263 = fadd <4 x float> %252, %254
  %264 = fmul <4 x float> %263, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %265 = fsub <4 x float> %262, %264
  %266 = fsub <4 x float> %246, %260
  %267 = fsub <4 x float> %248, %264
  %268 = fadd <4 x float> %19, %99
  %269 = fsub <4 x float> %19, %99
  %270 = fadd <4 x float> %59, %139
  %271 = fsub <4 x float> %59, %139
  %272 = fadd <4 x float> %268, %270
  %273 = fsub <4 x float> %268, %270
  %274 = fadd <4 x float> %39, %119
  %275 = fsub <4 x float> %39, %119
  %276 = fadd <4 x float> %79, %159
  %277 = fsub <4 x float> %79, %159
  %278 = fadd <4 x float> %274, %276
  %279 = fsub <4 x float> %274, %276
  %280 = fadd <4 x float> %272, %278
  %281 = fsub <4 x float> %272, %278
  %282 = fsub <4 x float> %275, %277
  %283 = fmul <4 x float> %282, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %284 = fadd <4 x float> %269, %283
  %285 = fsub <4 x float> zeroinitializer, %271
  %286 = fadd <4 x float> %275, %277
  %287 = fmul <4 x float> %286, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %288 = fsub <4 x float> %285, %287
  %289 = fsub <4 x float> %269, %283
  %290 = fsub <4 x float> %271, %287
  %291 = fadd <4 x float> %257, %280
  %292 = fsub <4 x float> %257, %280
  %293 = fmul <4 x float> %284, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %294 = fmul <4 x float> %288, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %295 = fadd <4 x float> %293, %294
  %296 = fadd <4 x float> %261, %295
  %297 = fmul <4 x float> %288, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %298 = fmul <4 x float> %284, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %299 = fsub <4 x float> %297, %298
  %300 = fadd <4 x float> %265, %299
  %301 = fsub <4 x float> %273, %279
  %302 = fmul <4 x float> %301, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %303 = fadd <4 x float> %250, %302
  %304 = fsub <4 x float> zeroinitializer, %256
  %305 = fadd <4 x float> %273, %279
  %306 = fmul <4 x float> %305, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %307 = fsub <4 x float> %304, %306
  %308 = fmul <4 x float> %289, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %309 = fmul <4 x float> %290, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %310 = fadd <4 x float> %308, %309
  %311 = fadd <4 x float> %266, %310
  %312 = fmul <4 x float> %290, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %313 = fmul <4 x float> %289, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %314 = fsub <4 x float> %312, %313
  %315 = fadd <4 x float> %267, %314
  %316 = fsub <4 x float> zeroinitializer, %308
  %317 = fsub <4 x float> %316, %309
  %318 = fadd <4 x float> %266, %317
  %319 = fsub <4 x float> zeroinitializer, %267
  %320 = fsub <4 x float> %313, %312
  %321 = fsub <4 x float> %319, %320
  %322 = fsub <4 x float> %250, %302
  %323 = fsub <4 x float> %256, %306
  %324 = fsub <4 x float> zeroinitializer, %293
  %325 = fsub <4 x float> %324, %294
  %326 = fadd <4 x float> %261, %325
  %327 = fsub <4 x float> zeroinitializer, %265
  %328 = fsub <4 x float> %298, %297
  %329 = fsub <4 x float> %327, %328
  %330 = fadd <4 x float> %206, %291
  %331 = bitcast float* %1 to <4 x float>*
  store <4 x float> %330, <4 x float>* %331, align 16
  %332 = getelementptr inbounds float, float* %1, i64 %6
  %333 = fmul <4 x float> %296, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %334 = fmul <4 x float> %300, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %335 = fadd <4 x float> %333, %334
  %336 = fadd <4 x float> %211, %335
  %337 = bitcast float* %332 to <4 x float>*
  store <4 x float> %336, <4 x float>* %337, align 16
  %338 = getelementptr inbounds float, float* %1, i64 %11
  %339 = fmul <4 x float> %303, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %340 = fmul <4 x float> %307, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %341 = fadd <4 x float> %339, %340
  %342 = fadd <4 x float> %218, %341
  %343 = bitcast float* %338 to <4 x float>*
  store <4 x float> %342, <4 x float>* %343, align 16
  %344 = getelementptr inbounds float, float* %1, i64 %16
  %345 = fmul <4 x float> %311, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %346 = fmul <4 x float> %315, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %347 = fadd <4 x float> %345, %346
  %348 = fadd <4 x float> %226, %347
  %349 = bitcast float* %344 to <4 x float>*
  store <4 x float> %348, <4 x float>* %349, align 16
  %350 = getelementptr inbounds float, float* %1, i64 %21
  %351 = fsub <4 x float> %258, %281
  %352 = fmul <4 x float> %351, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %353 = fadd <4 x float> %173, %352
  %354 = bitcast float* %350 to <4 x float>*
  store <4 x float> %353, <4 x float>* %354, align 16
  %355 = getelementptr inbounds float, float* %1, i64 %26
  %356 = fmul <4 x float> %318, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %357 = fmul <4 x float> %321, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %358 = fadd <4 x float> %357, %356
  %359 = fadd <4 x float> %233, %358
  %360 = bitcast float* %355 to <4 x float>*
  store <4 x float> %359, <4 x float>* %360, align 16
  %361 = getelementptr inbounds float, float* %1, i64 %31
  %362 = fmul <4 x float> %322, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %363 = fmul <4 x float> %323, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %364 = fadd <4 x float> %362, %363
  %365 = fadd <4 x float> %237, %364
  %366 = bitcast float* %361 to <4 x float>*
  store <4 x float> %365, <4 x float>* %366, align 16
  %367 = getelementptr inbounds float, float* %1, i64 %36
  %368 = fmul <4 x float> %326, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %369 = fmul <4 x float> %329, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %370 = fadd <4 x float> %369, %368
  %371 = fadd <4 x float> %241, %370
  %372 = bitcast float* %367 to <4 x float>*
  store <4 x float> %371, <4 x float>* %372, align 16
  %373 = getelementptr inbounds float, float* %1, i64 %41
  %374 = bitcast float* %373 to <4 x float>*
  store <4 x float> %207, <4 x float>* %374, align 16
  %375 = getelementptr inbounds float, float* %1, i64 %46
  %376 = fsub <4 x float> zeroinitializer, %368
  %377 = fsub <4 x float> %376, %369
  %378 = fadd <4 x float> %241, %377
  %379 = bitcast float* %375 to <4 x float>*
  store <4 x float> %378, <4 x float>* %379, align 16
  %380 = getelementptr inbounds float, float* %1, i64 %51
  %381 = fsub <4 x float> zeroinitializer, %362
  %382 = fsub <4 x float> %381, %363
  %383 = fadd <4 x float> %237, %382
  %384 = bitcast float* %380 to <4 x float>*
  store <4 x float> %383, <4 x float>* %384, align 16
  %385 = getelementptr inbounds float, float* %1, i64 %56
  %386 = fsub <4 x float> zeroinitializer, %356
  %387 = fsub <4 x float> %386, %357
  %388 = fadd <4 x float> %233, %387
  %389 = bitcast float* %385 to <4 x float>*
  store <4 x float> %388, <4 x float>* %389, align 16
  %390 = getelementptr inbounds float, float* %1, i64 %61
  %391 = fsub <4 x float> %173, %352
  %392 = bitcast float* %390 to <4 x float>*
  store <4 x float> %391, <4 x float>* %392, align 16
  %393 = getelementptr inbounds float, float* %1, i64 %66
  %394 = fsub <4 x float> zeroinitializer, %345
  %395 = fsub <4 x float> %394, %346
  %396 = fadd <4 x float> %226, %395
  %397 = bitcast float* %393 to <4 x float>*
  store <4 x float> %396, <4 x float>* %397, align 16
  %398 = getelementptr inbounds float, float* %1, i64 %71
  %399 = fsub <4 x float> zeroinitializer, %339
  %400 = fsub <4 x float> %399, %340
  %401 = fadd <4 x float> %218, %400
  %402 = bitcast float* %398 to <4 x float>*
  store <4 x float> %401, <4 x float>* %402, align 16
  %403 = getelementptr inbounds float, float* %1, i64 %76
  %404 = fsub <4 x float> zeroinitializer, %333
  %405 = fsub <4 x float> %404, %334
  %406 = fadd <4 x float> %211, %405
  %407 = bitcast float* %403 to <4 x float>*
  store <4 x float> %406, <4 x float>* %407, align 16
  %408 = getelementptr inbounds float, float* %1, i64 %81
  %409 = fsub <4 x float> %206, %291
  %410 = bitcast float* %408 to <4 x float>*
  store <4 x float> %409, <4 x float>* %410, align 16
  %411 = getelementptr inbounds float, float* %1, i64 %86
  %412 = fmul <4 x float> %300, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %413 = fmul <4 x float> %296, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %414 = fsub <4 x float> %412, %413
  %415 = fadd <4 x float> %215, %414
  %416 = bitcast float* %411 to <4 x float>*
  store <4 x float> %415, <4 x float>* %416, align 16
  %417 = getelementptr inbounds float, float* %1, i64 %91
  %418 = fmul <4 x float> %307, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %419 = fmul <4 x float> %303, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %420 = fsub <4 x float> %418, %419
  %421 = fadd <4 x float> %222, %420
  %422 = bitcast float* %417 to <4 x float>*
  store <4 x float> %421, <4 x float>* %422, align 16
  %423 = getelementptr inbounds float, float* %1, i64 %96
  %424 = fmul <4 x float> %315, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %425 = fmul <4 x float> %311, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %426 = fsub <4 x float> %424, %425
  %427 = fadd <4 x float> %230, %426
  %428 = bitcast float* %423 to <4 x float>*
  store <4 x float> %427, <4 x float>* %428, align 16
  %429 = getelementptr inbounds float, float* %1, i64 %101
  %430 = fsub <4 x float> zeroinitializer, %196
  %431 = fadd <4 x float> %258, %281
  %432 = fmul <4 x float> %431, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %433 = fsub <4 x float> %430, %432
  %434 = bitcast float* %429 to <4 x float>*
  store <4 x float> %433, <4 x float>* %434, align 16
  %435 = getelementptr inbounds float, float* %1, i64 %106
  %436 = fmul <4 x float> %321, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %437 = fmul <4 x float> %318, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %438 = fsub <4 x float> %436, %437
  %439 = fadd <4 x float> %236, %438
  %440 = bitcast float* %435 to <4 x float>*
  store <4 x float> %439, <4 x float>* %440, align 16
  %441 = getelementptr inbounds float, float* %1, i64 %111
  %442 = fmul <4 x float> %323, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %443 = fmul <4 x float> %322, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %444 = fsub <4 x float> %442, %443
  %445 = fadd <4 x float> %238, %444
  %446 = bitcast float* %441 to <4 x float>*
  store <4 x float> %445, <4 x float>* %446, align 16
  %447 = getelementptr inbounds float, float* %1, i64 %116
  %448 = fmul <4 x float> %329, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %449 = fmul <4 x float> %326, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %450 = fsub <4 x float> %448, %449
  %451 = fadd <4 x float> %244, %450
  %452 = bitcast float* %447 to <4 x float>*
  store <4 x float> %451, <4 x float>* %452, align 16
  %453 = getelementptr inbounds float, float* %1, i64 %121
  %454 = fsub <4 x float> zeroinitializer, %292
  %455 = bitcast float* %453 to <4 x float>*
  store <4 x float> %454, <4 x float>* %455, align 16
  %456 = getelementptr inbounds float, float* %1, i64 %126
  %457 = fsub <4 x float> zeroinitializer, %244
  %458 = fsub <4 x float> %449, %448
  %459 = fsub <4 x float> %457, %458
  %460 = bitcast float* %456 to <4 x float>*
  store <4 x float> %459, <4 x float>* %460, align 16
  %461 = getelementptr inbounds float, float* %1, i64 %131
  %462 = fsub <4 x float> zeroinitializer, %238
  %463 = fsub <4 x float> %443, %442
  %464 = fsub <4 x float> %462, %463
  %465 = bitcast float* %461 to <4 x float>*
  store <4 x float> %464, <4 x float>* %465, align 16
  %466 = getelementptr inbounds float, float* %1, i64 %136
  %467 = fsub <4 x float> zeroinitializer, %236
  %468 = fsub <4 x float> %437, %436
  %469 = fsub <4 x float> %467, %468
  %470 = bitcast float* %466 to <4 x float>*
  store <4 x float> %469, <4 x float>* %470, align 16
  %471 = getelementptr inbounds float, float* %1, i64 %141
  %472 = fsub <4 x float> %196, %432
  %473 = bitcast float* %471 to <4 x float>*
  store <4 x float> %472, <4 x float>* %473, align 16
  %474 = getelementptr inbounds float, float* %1, i64 %146
  %475 = fsub <4 x float> zeroinitializer, %230
  %476 = fsub <4 x float> %425, %424
  %477 = fsub <4 x float> %475, %476
  %478 = bitcast float* %474 to <4 x float>*
  store <4 x float> %477, <4 x float>* %478, align 16
  %479 = getelementptr inbounds float, float* %1, i64 %151
  %480 = fsub <4 x float> zeroinitializer, %222
  %481 = fsub <4 x float> %419, %418
  %482 = fsub <4 x float> %480, %481
  %483 = bitcast float* %479 to <4 x float>*
  store <4 x float> %482, <4 x float>* %483, align 16
  %484 = getelementptr inbounds float, float* %1, i64 %156
  %485 = fsub <4 x float> zeroinitializer, %215
  %486 = fsub <4 x float> %413, %412
  %487 = fsub <4 x float> %485, %486
  %488 = bitcast float* %484 to <4 x float>*
  store <4 x float> %487, <4 x float>* %488, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_ifft4x4_float_sse2(float*, float*, float*) local_unnamed_addr #1 {
  tail call void @aom_ifft_2d_gen(float* %0, float* %1, float* %2, i32 4, void (float*, float*, i32)* nonnull @aom_fft1d_4_float, void (float*, float*, i32)* nonnull @aom_fft1d_4_sse2, void (float*, float*, i32)* nonnull @aom_ifft1d_4_sse2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, i32 4) #4
  ret void
}

declare void @aom_ifft_2d_gen(float*, float*, float*, i32, void (float*, float*, i32)*, void (float*, float*, i32)*, void (float*, float*, i32)*, void (float*, float*, i32)*, i32) local_unnamed_addr #2

declare void @aom_fft1d_4_float(float*, float*, i32) #2

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_ifft1d_4_sse2(float* nocapture readonly, float* nocapture, i32) #3 {
  %4 = bitcast float* %0 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 16
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 16
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 16
  %20 = fadd <4 x float> %5, %14
  %21 = fsub <4 x float> %5, %14
  %22 = fadd <4 x float> %9, %9
  %23 = fsub <4 x float> zeroinitializer, %19
  %24 = fsub <4 x float> %23, %19
  %25 = fadd <4 x float> %22, %20
  %26 = bitcast float* %1 to <4 x float>*
  store <4 x float> %25, <4 x float>* %26, align 16
  %27 = getelementptr inbounds float, float* %1, i64 %6
  %28 = fadd <4 x float> %21, %24
  %29 = bitcast float* %27 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 16
  %30 = getelementptr inbounds float, float* %1, i64 %11
  %31 = fsub <4 x float> %20, %22
  %32 = bitcast float* %30 to <4 x float>*
  store <4 x float> %31, <4 x float>* %32, align 16
  %33 = getelementptr inbounds float, float* %1, i64 %16
  %34 = fsub <4 x float> %21, %24
  %35 = bitcast float* %33 to <4 x float>*
  store <4 x float> %34, <4 x float>* %35, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_ifft8x8_float_sse2(float*, float*, float*) local_unnamed_addr #1 {
  tail call void @aom_ifft_2d_gen(float* %0, float* %1, float* %2, i32 8, void (float*, float*, i32)* nonnull @aom_fft1d_8_float, void (float*, float*, i32)* nonnull @aom_fft1d_8_sse2, void (float*, float*, i32)* nonnull @aom_ifft1d_8_sse2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, i32 4) #4
  ret void
}

declare void @aom_fft1d_8_float(float*, float*, i32) #2

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_ifft1d_8_sse2(float* nocapture readonly, float* nocapture, i32) #3 {
  %4 = bitcast float* %0 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 16
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 16
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 16
  %20 = shl nsw i32 %2, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to <4 x float>*
  %24 = load <4 x float>, <4 x float>* %23, align 16
  %25 = mul nsw i32 %2, 5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 16
  %30 = mul nsw i32 %2, 6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 16
  %35 = mul nsw i32 %2, 7
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to <4 x float>*
  %39 = load <4 x float>, <4 x float>* %38, align 16
  %40 = fadd <4 x float> %5, %24
  %41 = fsub <4 x float> %5, %24
  %42 = fadd <4 x float> %14, %14
  %43 = fsub <4 x float> zeroinitializer, %34
  %44 = fsub <4 x float> %43, %34
  %45 = fadd <4 x float> %42, %40
  %46 = fsub <4 x float> %40, %42
  %47 = fadd <4 x float> %41, %44
  %48 = fsub <4 x float> %41, %44
  %49 = fadd <4 x float> %9, %19
  %50 = fsub <4 x float> %39, %29
  %51 = fsub <4 x float> %9, %19
  %52 = fsub <4 x float> zeroinitializer, %29
  %53 = fsub <4 x float> %52, %39
  %54 = fsub <4 x float> %29, %39
  %55 = fsub <4 x float> %19, %9
  %56 = fsub <4 x float> zeroinitializer, %39
  %57 = fsub <4 x float> %56, %29
  %58 = fadd <4 x float> %49, %49
  %59 = fsub <4 x float> %50, %54
  %60 = fadd <4 x float> %51, %57
  %61 = fsub <4 x float> %53, %55
  %62 = fsub <4 x float> %51, %57
  %63 = fadd <4 x float> %55, %53
  %64 = fadd <4 x float> %58, %45
  %65 = bitcast float* %1 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 16
  %66 = getelementptr inbounds float, float* %1, i64 %6
  %67 = fadd <4 x float> %61, %60
  %68 = fmul <4 x float> %67, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %69 = fadd <4 x float> %47, %68
  %70 = bitcast float* %66 to <4 x float>*
  store <4 x float> %69, <4 x float>* %70, align 16
  %71 = getelementptr inbounds float, float* %1, i64 %11
  %72 = fadd <4 x float> %46, %59
  %73 = bitcast float* %71 to <4 x float>*
  store <4 x float> %72, <4 x float>* %73, align 16
  %74 = getelementptr inbounds float, float* %1, i64 %16
  %75 = fsub <4 x float> %62, %63
  %76 = fmul <4 x float> %75, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %77 = fsub <4 x float> %48, %76
  %78 = bitcast float* %74 to <4 x float>*
  store <4 x float> %77, <4 x float>* %78, align 16
  %79 = getelementptr inbounds float, float* %1, i64 %21
  %80 = fsub <4 x float> %45, %58
  %81 = bitcast float* %79 to <4 x float>*
  store <4 x float> %80, <4 x float>* %81, align 16
  %82 = getelementptr inbounds float, float* %1, i64 %26
  %83 = fmul <4 x float> %60, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %84 = fsub <4 x float> zeroinitializer, %83
  %85 = fmul <4 x float> %61, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %86 = fsub <4 x float> %84, %85
  %87 = fadd <4 x float> %47, %86
  %88 = bitcast float* %82 to <4 x float>*
  store <4 x float> %87, <4 x float>* %88, align 16
  %89 = getelementptr inbounds float, float* %1, i64 %31
  %90 = fsub <4 x float> %46, %59
  %91 = bitcast float* %89 to <4 x float>*
  store <4 x float> %90, <4 x float>* %91, align 16
  %92 = getelementptr inbounds float, float* %1, i64 %36
  %93 = fadd <4 x float> %48, %76
  %94 = bitcast float* %92 to <4 x float>*
  store <4 x float> %93, <4 x float>* %94, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_ifft16x16_float_sse2(float*, float*, float*) local_unnamed_addr #1 {
  tail call void @aom_ifft_2d_gen(float* %0, float* %1, float* %2, i32 16, void (float*, float*, i32)* nonnull @aom_fft1d_16_float, void (float*, float*, i32)* nonnull @aom_fft1d_16_sse2, void (float*, float*, i32)* nonnull @aom_ifft1d_16_sse2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, i32 4) #4
  ret void
}

declare void @aom_fft1d_16_float(float*, float*, i32) #2

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_ifft1d_16_sse2(float* nocapture readonly, float* nocapture, i32) #3 {
  %4 = bitcast float* %0 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 16
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 16
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 16
  %20 = shl nsw i32 %2, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to <4 x float>*
  %24 = load <4 x float>, <4 x float>* %23, align 16
  %25 = mul nsw i32 %2, 5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 16
  %30 = mul nsw i32 %2, 6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 16
  %35 = mul nsw i32 %2, 7
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to <4 x float>*
  %39 = load <4 x float>, <4 x float>* %38, align 16
  %40 = shl nsw i32 %2, 3
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %0, i64 %41
  %43 = bitcast float* %42 to <4 x float>*
  %44 = load <4 x float>, <4 x float>* %43, align 16
  %45 = mul nsw i32 %2, 9
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 16
  %50 = mul nsw i32 %2, 10
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %0, i64 %51
  %53 = bitcast float* %52 to <4 x float>*
  %54 = load <4 x float>, <4 x float>* %53, align 16
  %55 = mul nsw i32 %2, 11
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = bitcast float* %57 to <4 x float>*
  %59 = load <4 x float>, <4 x float>* %58, align 16
  %60 = mul nsw i32 %2, 12
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %0, i64 %61
  %63 = bitcast float* %62 to <4 x float>*
  %64 = load <4 x float>, <4 x float>* %63, align 16
  %65 = mul nsw i32 %2, 13
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %0, i64 %66
  %68 = bitcast float* %67 to <4 x float>*
  %69 = load <4 x float>, <4 x float>* %68, align 16
  %70 = mul nsw i32 %2, 14
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %0, i64 %71
  %73 = bitcast float* %72 to <4 x float>*
  %74 = load <4 x float>, <4 x float>* %73, align 16
  %75 = mul nsw i32 %2, 15
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds float, float* %0, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %79 = load <4 x float>, <4 x float>* %78, align 16
  %80 = fadd <4 x float> %5, %44
  %81 = fsub <4 x float> %5, %44
  %82 = fadd <4 x float> %24, %24
  %83 = fsub <4 x float> zeroinitializer, %64
  %84 = fsub <4 x float> %83, %64
  %85 = fadd <4 x float> %82, %80
  %86 = fsub <4 x float> %80, %82
  %87 = fadd <4 x float> %81, %84
  %88 = fsub <4 x float> %81, %84
  %89 = fadd <4 x float> %14, %34
  %90 = fsub <4 x float> %74, %54
  %91 = fsub <4 x float> %14, %34
  %92 = fsub <4 x float> zeroinitializer, %54
  %93 = fsub <4 x float> %92, %74
  %94 = fsub <4 x float> %54, %74
  %95 = fsub <4 x float> %34, %14
  %96 = fsub <4 x float> zeroinitializer, %74
  %97 = fsub <4 x float> %96, %54
  %98 = fadd <4 x float> %89, %89
  %99 = fsub <4 x float> %90, %94
  %100 = fadd <4 x float> %91, %97
  %101 = fsub <4 x float> %93, %95
  %102 = fsub <4 x float> %91, %97
  %103 = fadd <4 x float> %95, %93
  %104 = fadd <4 x float> %98, %85
  %105 = fsub <4 x float> %85, %98
  %106 = fadd <4 x float> %101, %100
  %107 = fmul <4 x float> %106, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %108 = fadd <4 x float> %87, %107
  %109 = fmul <4 x float> %100, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %110 = fsub <4 x float> zeroinitializer, %109
  %111 = fmul <4 x float> %101, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %112 = fsub <4 x float> %110, %111
  %113 = fadd <4 x float> %87, %112
  %114 = fadd <4 x float> %86, %99
  %115 = fsub <4 x float> %86, %99
  %116 = fsub <4 x float> %102, %103
  %117 = fmul <4 x float> %116, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %118 = fsub <4 x float> %88, %117
  %119 = fadd <4 x float> %88, %117
  %120 = fadd <4 x float> %9, %39
  %121 = fsub <4 x float> %79, %49
  %122 = fsub <4 x float> %9, %39
  %123 = fsub <4 x float> zeroinitializer, %49
  %124 = fsub <4 x float> %123, %79
  %125 = fadd <4 x float> %19, %29
  %126 = fsub <4 x float> %59, %69
  %127 = fsub <4 x float> %29, %19
  %128 = fsub <4 x float> zeroinitializer, %69
  %129 = fsub <4 x float> %128, %59
  %130 = fadd <4 x float> %125, %120
  %131 = fadd <4 x float> %126, %121
  %132 = fsub <4 x float> %120, %125
  %133 = fsub <4 x float> %121, %126
  %134 = fadd <4 x float> %122, %129
  %135 = fsub <4 x float> %124, %127
  %136 = fsub <4 x float> %122, %129
  %137 = fadd <4 x float> %127, %124
  %138 = fsub <4 x float> %69, %59
  %139 = fsub <4 x float> %19, %29
  %140 = fsub <4 x float> zeroinitializer, %59
  %141 = fsub <4 x float> %140, %69
  %142 = fsub <4 x float> %49, %79
  %143 = fsub <4 x float> %39, %9
  %144 = fsub <4 x float> zeroinitializer, %79
  %145 = fsub <4 x float> %144, %49
  %146 = fadd <4 x float> %138, %142
  %147 = fsub <4 x float> %125, %120
  %148 = fsub <4 x float> %138, %142
  %149 = fadd <4 x float> %139, %145
  %150 = fsub <4 x float> %141, %143
  %151 = fsub <4 x float> %139, %145
  %152 = fadd <4 x float> %143, %141
  %153 = fadd <4 x float> %130, %130
  %154 = fsub <4 x float> %131, %146
  %155 = fadd <4 x float> %150, %149
  %156 = fmul <4 x float> %155, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %157 = fadd <4 x float> %134, %156
  %158 = fsub <4 x float> %150, %149
  %159 = fmul <4 x float> %158, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %160 = fadd <4 x float> %135, %159
  %161 = fmul <4 x float> %149, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %162 = fsub <4 x float> zeroinitializer, %161
  %163 = fmul <4 x float> %150, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %164 = fsub <4 x float> %162, %163
  %165 = fadd <4 x float> %134, %164
  %166 = fsub <4 x float> %149, %150
  %167 = fmul <4 x float> %166, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %168 = fadd <4 x float> %135, %167
  %169 = fadd <4 x float> %132, %148
  %170 = fsub <4 x float> %133, %147
  %171 = fsub <4 x float> %132, %148
  %172 = fadd <4 x float> %147, %133
  %173 = fsub <4 x float> %151, %152
  %174 = fmul <4 x float> %173, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %175 = fsub <4 x float> %136, %174
  %176 = fadd <4 x float> %152, %151
  %177 = fmul <4 x float> %176, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %178 = fsub <4 x float> %137, %177
  %179 = fadd <4 x float> %136, %174
  %180 = fadd <4 x float> %137, %177
  %181 = fadd <4 x float> %153, %104
  %182 = bitcast float* %1 to <4 x float>*
  store <4 x float> %181, <4 x float>* %182, align 16
  %183 = getelementptr inbounds float, float* %1, i64 %6
  %184 = fmul <4 x float> %157, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %185 = fmul <4 x float> %160, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %186 = fadd <4 x float> %184, %185
  %187 = fadd <4 x float> %108, %186
  %188 = bitcast float* %183 to <4 x float>*
  store <4 x float> %187, <4 x float>* %188, align 16
  %189 = getelementptr inbounds float, float* %1, i64 %11
  %190 = fadd <4 x float> %169, %170
  %191 = fmul <4 x float> %190, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %192 = fadd <4 x float> %114, %191
  %193 = bitcast float* %189 to <4 x float>*
  store <4 x float> %192, <4 x float>* %193, align 16
  %194 = getelementptr inbounds float, float* %1, i64 %16
  %195 = fmul <4 x float> %175, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %196 = fmul <4 x float> %178, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %197 = fadd <4 x float> %195, %196
  %198 = fadd <4 x float> %118, %197
  %199 = bitcast float* %194 to <4 x float>*
  store <4 x float> %198, <4 x float>* %199, align 16
  %200 = getelementptr inbounds float, float* %1, i64 %21
  %201 = fadd <4 x float> %105, %154
  %202 = bitcast float* %200 to <4 x float>*
  store <4 x float> %201, <4 x float>* %202, align 16
  %203 = getelementptr inbounds float, float* %1, i64 %26
  %204 = fmul <4 x float> %165, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %205 = fmul <4 x float> %168, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %206 = fsub <4 x float> %204, %205
  %207 = fsub <4 x float> %113, %206
  %208 = bitcast float* %203 to <4 x float>*
  store <4 x float> %207, <4 x float>* %208, align 16
  %209 = getelementptr inbounds float, float* %1, i64 %31
  %210 = fsub <4 x float> %171, %172
  %211 = fmul <4 x float> %210, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %212 = fsub <4 x float> %115, %211
  %213 = bitcast float* %209 to <4 x float>*
  store <4 x float> %212, <4 x float>* %213, align 16
  %214 = getelementptr inbounds float, float* %1, i64 %36
  %215 = fmul <4 x float> %179, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %216 = fmul <4 x float> %180, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %217 = fsub <4 x float> %215, %216
  %218 = fsub <4 x float> %119, %217
  %219 = bitcast float* %214 to <4 x float>*
  store <4 x float> %218, <4 x float>* %219, align 16
  %220 = getelementptr inbounds float, float* %1, i64 %41
  %221 = fsub <4 x float> %104, %153
  %222 = bitcast float* %220 to <4 x float>*
  store <4 x float> %221, <4 x float>* %222, align 16
  %223 = getelementptr inbounds float, float* %1, i64 %46
  %224 = fsub <4 x float> zeroinitializer, %184
  %225 = fsub <4 x float> %224, %185
  %226 = fadd <4 x float> %108, %225
  %227 = bitcast float* %223 to <4 x float>*
  store <4 x float> %226, <4 x float>* %227, align 16
  %228 = getelementptr inbounds float, float* %1, i64 %51
  %229 = fmul <4 x float> %169, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %230 = fsub <4 x float> zeroinitializer, %229
  %231 = fmul <4 x float> %170, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %232 = fsub <4 x float> %230, %231
  %233 = fadd <4 x float> %114, %232
  %234 = bitcast float* %228 to <4 x float>*
  store <4 x float> %233, <4 x float>* %234, align 16
  %235 = getelementptr inbounds float, float* %1, i64 %56
  %236 = fsub <4 x float> zeroinitializer, %195
  %237 = fsub <4 x float> %236, %196
  %238 = fadd <4 x float> %118, %237
  %239 = bitcast float* %235 to <4 x float>*
  store <4 x float> %238, <4 x float>* %239, align 16
  %240 = getelementptr inbounds float, float* %1, i64 %61
  %241 = fsub <4 x float> %105, %154
  %242 = bitcast float* %240 to <4 x float>*
  store <4 x float> %241, <4 x float>* %242, align 16
  %243 = getelementptr inbounds float, float* %1, i64 %66
  %244 = fadd <4 x float> %113, %206
  %245 = bitcast float* %243 to <4 x float>*
  store <4 x float> %244, <4 x float>* %245, align 16
  %246 = getelementptr inbounds float, float* %1, i64 %71
  %247 = fadd <4 x float> %115, %211
  %248 = bitcast float* %246 to <4 x float>*
  store <4 x float> %247, <4 x float>* %248, align 16
  %249 = getelementptr inbounds float, float* %1, i64 %76
  %250 = fadd <4 x float> %119, %217
  %251 = bitcast float* %249 to <4 x float>*
  store <4 x float> %250, <4 x float>* %251, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_ifft32x32_float_sse2(float*, float*, float*) local_unnamed_addr #1 {
  tail call void @aom_ifft_2d_gen(float* %0, float* %1, float* %2, i32 32, void (float*, float*, i32)* nonnull @aom_fft1d_32_float, void (float*, float*, i32)* nonnull @aom_fft1d_32_sse2, void (float*, float*, i32)* nonnull @aom_ifft1d_32_sse2, void (float*, float*, i32)* nonnull @aom_transpose_float_sse2, i32 4) #4
  ret void
}

declare void @aom_fft1d_32_float(float*, float*, i32) #2

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @aom_ifft1d_32_sse2(float* readonly, float*, i32) #3 {
  %4 = bitcast float* %0 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 16
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16
  %10 = shl nsw i32 %2, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float, float* %0, i64 %11
  %13 = bitcast float* %12 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 16
  %15 = mul nsw i32 %2, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 16
  %20 = shl nsw i32 %2, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to <4 x float>*
  %24 = load <4 x float>, <4 x float>* %23, align 16
  %25 = mul nsw i32 %2, 5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 16
  %30 = mul nsw i32 %2, 6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 16
  %35 = mul nsw i32 %2, 7
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to <4 x float>*
  %39 = load <4 x float>, <4 x float>* %38, align 16
  %40 = shl nsw i32 %2, 3
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %0, i64 %41
  %43 = bitcast float* %42 to <4 x float>*
  %44 = load <4 x float>, <4 x float>* %43, align 16
  %45 = mul nsw i32 %2, 9
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 16
  %50 = mul nsw i32 %2, 10
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %0, i64 %51
  %53 = bitcast float* %52 to <4 x float>*
  %54 = load <4 x float>, <4 x float>* %53, align 16
  %55 = mul nsw i32 %2, 11
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = bitcast float* %57 to <4 x float>*
  %59 = load <4 x float>, <4 x float>* %58, align 16
  %60 = mul nsw i32 %2, 12
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %0, i64 %61
  %63 = bitcast float* %62 to <4 x float>*
  %64 = load <4 x float>, <4 x float>* %63, align 16
  %65 = mul nsw i32 %2, 13
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %0, i64 %66
  %68 = bitcast float* %67 to <4 x float>*
  %69 = load <4 x float>, <4 x float>* %68, align 16
  %70 = mul nsw i32 %2, 14
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %0, i64 %71
  %73 = bitcast float* %72 to <4 x float>*
  %74 = load <4 x float>, <4 x float>* %73, align 16
  %75 = mul nsw i32 %2, 15
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds float, float* %0, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %79 = load <4 x float>, <4 x float>* %78, align 16
  %80 = shl nsw i32 %2, 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float* %0, i64 %81
  %83 = bitcast float* %82 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 16
  %85 = mul nsw i32 %2, 17
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds float, float* %0, i64 %86
  %88 = bitcast float* %87 to <4 x float>*
  %89 = load <4 x float>, <4 x float>* %88, align 16
  %90 = mul nsw i32 %2, 18
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds float, float* %0, i64 %91
  %93 = bitcast float* %92 to <4 x float>*
  %94 = load <4 x float>, <4 x float>* %93, align 16
  %95 = mul nsw i32 %2, 19
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %0, i64 %96
  %98 = bitcast float* %97 to <4 x float>*
  %99 = load <4 x float>, <4 x float>* %98, align 16
  %100 = mul nsw i32 %2, 20
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %0, i64 %101
  %103 = bitcast float* %102 to <4 x float>*
  %104 = load <4 x float>, <4 x float>* %103, align 16
  %105 = mul nsw i32 %2, 21
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %0, i64 %106
  %108 = bitcast float* %107 to <4 x float>*
  %109 = load <4 x float>, <4 x float>* %108, align 16
  %110 = mul nsw i32 %2, 22
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %0, i64 %111
  %113 = bitcast float* %112 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 16
  %115 = mul nsw i32 %2, 23
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %0, i64 %116
  %118 = bitcast float* %117 to <4 x float>*
  %119 = load <4 x float>, <4 x float>* %118, align 16
  %120 = mul nsw i32 %2, 24
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %0, i64 %121
  %123 = bitcast float* %122 to <4 x float>*
  %124 = load <4 x float>, <4 x float>* %123, align 16
  %125 = mul nsw i32 %2, 25
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %0, i64 %126
  %128 = bitcast float* %127 to <4 x float>*
  %129 = load <4 x float>, <4 x float>* %128, align 16
  %130 = mul nsw i32 %2, 26
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %0, i64 %131
  %133 = bitcast float* %132 to <4 x float>*
  %134 = load <4 x float>, <4 x float>* %133, align 16
  %135 = mul nsw i32 %2, 27
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %0, i64 %136
  %138 = bitcast float* %137 to <4 x float>*
  %139 = load <4 x float>, <4 x float>* %138, align 16
  %140 = mul nsw i32 %2, 28
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %0, i64 %141
  %143 = bitcast float* %142 to <4 x float>*
  %144 = load <4 x float>, <4 x float>* %143, align 16
  %145 = mul nsw i32 %2, 29
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %0, i64 %146
  %148 = bitcast float* %147 to <4 x float>*
  %149 = load <4 x float>, <4 x float>* %148, align 16
  %150 = mul nsw i32 %2, 30
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %0, i64 %151
  %153 = bitcast float* %152 to <4 x float>*
  %154 = load <4 x float>, <4 x float>* %153, align 16
  %155 = mul nsw i32 %2, 31
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %0, i64 %156
  %158 = bitcast float* %157 to <4 x float>*
  %159 = load <4 x float>, <4 x float>* %158, align 16
  %160 = fadd <4 x float> %5, %84
  %161 = fsub <4 x float> %5, %84
  %162 = fadd <4 x float> %44, %44
  %163 = fsub <4 x float> zeroinitializer, %124
  %164 = fsub <4 x float> %163, %124
  %165 = fadd <4 x float> %162, %160
  %166 = fsub <4 x float> %160, %162
  %167 = fadd <4 x float> %161, %164
  %168 = fsub <4 x float> %161, %164
  %169 = fadd <4 x float> %24, %64
  %170 = fsub <4 x float> %144, %104
  %171 = fsub <4 x float> %24, %64
  %172 = fsub <4 x float> zeroinitializer, %104
  %173 = fsub <4 x float> %172, %144
  %174 = fsub <4 x float> %104, %144
  %175 = fsub <4 x float> %64, %24
  %176 = fsub <4 x float> zeroinitializer, %144
  %177 = fsub <4 x float> %176, %104
  %178 = fadd <4 x float> %169, %169
  %179 = fsub <4 x float> %170, %174
  %180 = fadd <4 x float> %171, %177
  %181 = fsub <4 x float> %173, %175
  %182 = fsub <4 x float> %171, %177
  %183 = fadd <4 x float> %175, %173
  %184 = fadd <4 x float> %178, %165
  %185 = fsub <4 x float> %165, %178
  %186 = fadd <4 x float> %181, %180
  %187 = fmul <4 x float> %186, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %188 = fadd <4 x float> %167, %187
  %189 = fmul <4 x float> %180, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %190 = fsub <4 x float> zeroinitializer, %189
  %191 = fmul <4 x float> %181, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %192 = fsub <4 x float> %190, %191
  %193 = fadd <4 x float> %167, %192
  %194 = fadd <4 x float> %166, %179
  %195 = fsub <4 x float> %166, %179
  %196 = fsub <4 x float> %182, %183
  %197 = fmul <4 x float> %196, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %198 = fsub <4 x float> %168, %197
  %199 = fadd <4 x float> %168, %197
  %200 = fadd <4 x float> %14, %74
  %201 = fsub <4 x float> %154, %94
  %202 = fsub <4 x float> %14, %74
  %203 = fsub <4 x float> zeroinitializer, %94
  %204 = fsub <4 x float> %203, %154
  %205 = fadd <4 x float> %34, %54
  %206 = fsub <4 x float> %114, %134
  %207 = fsub <4 x float> %54, %34
  %208 = fsub <4 x float> zeroinitializer, %134
  %209 = fsub <4 x float> %208, %114
  %210 = fadd <4 x float> %205, %200
  %211 = fadd <4 x float> %206, %201
  %212 = fsub <4 x float> %200, %205
  %213 = fsub <4 x float> %201, %206
  %214 = fadd <4 x float> %202, %209
  %215 = fsub <4 x float> %204, %207
  %216 = fsub <4 x float> %202, %209
  %217 = fadd <4 x float> %207, %204
  %218 = fsub <4 x float> %134, %114
  %219 = fsub <4 x float> %34, %54
  %220 = fsub <4 x float> zeroinitializer, %114
  %221 = fsub <4 x float> %220, %134
  %222 = fsub <4 x float> %94, %154
  %223 = fsub <4 x float> %74, %14
  %224 = fsub <4 x float> zeroinitializer, %154
  %225 = fsub <4 x float> %224, %94
  %226 = fadd <4 x float> %218, %222
  %227 = fsub <4 x float> %205, %200
  %228 = fsub <4 x float> %218, %222
  %229 = fadd <4 x float> %219, %225
  %230 = fsub <4 x float> %221, %223
  %231 = fsub <4 x float> %219, %225
  %232 = fadd <4 x float> %223, %221
  %233 = fadd <4 x float> %210, %210
  %234 = fsub <4 x float> %211, %226
  %235 = fadd <4 x float> %230, %229
  %236 = fmul <4 x float> %235, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %237 = fadd <4 x float> %214, %236
  %238 = fsub <4 x float> %230, %229
  %239 = fmul <4 x float> %238, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %240 = fadd <4 x float> %215, %239
  %241 = fmul <4 x float> %229, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %242 = fsub <4 x float> zeroinitializer, %241
  %243 = fmul <4 x float> %230, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %244 = fsub <4 x float> %242, %243
  %245 = fadd <4 x float> %214, %244
  %246 = fsub <4 x float> %229, %230
  %247 = fmul <4 x float> %246, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %248 = fadd <4 x float> %215, %247
  %249 = fadd <4 x float> %212, %228
  %250 = fsub <4 x float> %213, %227
  %251 = fsub <4 x float> %212, %228
  %252 = fadd <4 x float> %227, %213
  %253 = fsub <4 x float> %231, %232
  %254 = fmul <4 x float> %253, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %255 = fsub <4 x float> %216, %254
  %256 = fadd <4 x float> %232, %231
  %257 = fmul <4 x float> %256, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %258 = fsub <4 x float> %217, %257
  %259 = fadd <4 x float> %216, %254
  %260 = fadd <4 x float> %217, %257
  %261 = fadd <4 x float> %233, %184
  %262 = fsub <4 x float> %184, %233
  %263 = fmul <4 x float> %237, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %264 = fmul <4 x float> %240, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %265 = fadd <4 x float> %263, %264
  %266 = fadd <4 x float> %188, %265
  %267 = fsub <4 x float> zeroinitializer, %263
  %268 = fsub <4 x float> %267, %264
  %269 = fadd <4 x float> %188, %268
  %270 = fadd <4 x float> %249, %250
  %271 = fmul <4 x float> %270, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %272 = fadd <4 x float> %194, %271
  %273 = fmul <4 x float> %249, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %274 = fsub <4 x float> zeroinitializer, %273
  %275 = fmul <4 x float> %250, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %276 = fsub <4 x float> %274, %275
  %277 = fadd <4 x float> %194, %276
  %278 = fmul <4 x float> %255, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %279 = fmul <4 x float> %258, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %280 = fadd <4 x float> %278, %279
  %281 = fadd <4 x float> %198, %280
  %282 = fsub <4 x float> zeroinitializer, %278
  %283 = fsub <4 x float> %282, %279
  %284 = fadd <4 x float> %198, %283
  %285 = fadd <4 x float> %185, %234
  %286 = fsub <4 x float> %185, %234
  %287 = fmul <4 x float> %245, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %288 = fmul <4 x float> %248, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %289 = fsub <4 x float> %287, %288
  %290 = fsub <4 x float> %193, %289
  %291 = fadd <4 x float> %193, %289
  %292 = fsub <4 x float> %251, %252
  %293 = fmul <4 x float> %292, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %294 = fsub <4 x float> %195, %293
  %295 = fadd <4 x float> %195, %293
  %296 = fmul <4 x float> %259, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %297 = fmul <4 x float> %260, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %298 = fsub <4 x float> %296, %297
  %299 = fsub <4 x float> %199, %298
  %300 = fadd <4 x float> %199, %298
  %301 = fadd <4 x float> %9, %79
  %302 = fsub <4 x float> %159, %89
  %303 = fsub <4 x float> %9, %79
  %304 = fsub <4 x float> zeroinitializer, %89
  %305 = fsub <4 x float> %304, %159
  %306 = fadd <4 x float> %39, %49
  %307 = fsub <4 x float> %119, %129
  %308 = fsub <4 x float> %49, %39
  %309 = fsub <4 x float> zeroinitializer, %129
  %310 = fsub <4 x float> %309, %119
  %311 = fadd <4 x float> %306, %301
  %312 = fadd <4 x float> %307, %302
  %313 = fsub <4 x float> %301, %306
  %314 = fsub <4 x float> %302, %307
  %315 = fadd <4 x float> %303, %310
  %316 = fsub <4 x float> %305, %308
  %317 = fsub <4 x float> %303, %310
  %318 = fadd <4 x float> %308, %305
  %319 = fadd <4 x float> %29, %59
  %320 = fsub <4 x float> %139, %109
  %321 = fsub <4 x float> %29, %59
  %322 = fsub <4 x float> zeroinitializer, %109
  %323 = fsub <4 x float> %322, %139
  %324 = fadd <4 x float> %19, %69
  %325 = fsub <4 x float> %99, %149
  %326 = fsub <4 x float> %69, %19
  %327 = fsub <4 x float> zeroinitializer, %149
  %328 = fsub <4 x float> %327, %99
  %329 = fadd <4 x float> %319, %324
  %330 = fadd <4 x float> %320, %325
  %331 = fsub <4 x float> %319, %324
  %332 = fsub <4 x float> %320, %325
  %333 = fadd <4 x float> %321, %328
  %334 = fsub <4 x float> %323, %326
  %335 = fsub <4 x float> %321, %328
  %336 = fadd <4 x float> %326, %323
  %337 = fadd <4 x float> %329, %311
  %338 = fadd <4 x float> %330, %312
  %339 = fsub <4 x float> %311, %329
  %340 = fsub <4 x float> %312, %330
  %341 = fadd <4 x float> %334, %333
  %342 = fmul <4 x float> %341, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %343 = fadd <4 x float> %315, %342
  %344 = fsub <4 x float> %334, %333
  %345 = fmul <4 x float> %344, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %346 = fadd <4 x float> %316, %345
  %347 = fmul <4 x float> %333, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %348 = fsub <4 x float> zeroinitializer, %347
  %349 = fmul <4 x float> %334, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %350 = fsub <4 x float> %348, %349
  %351 = fadd <4 x float> %315, %350
  %352 = fsub <4 x float> %333, %334
  %353 = fmul <4 x float> %352, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %354 = fadd <4 x float> %316, %353
  %355 = fadd <4 x float> %313, %332
  %356 = fsub <4 x float> %314, %331
  %357 = fsub <4 x float> %313, %332
  %358 = fadd <4 x float> %331, %314
  %359 = fsub <4 x float> %335, %336
  %360 = fmul <4 x float> %359, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %361 = fsub <4 x float> %317, %360
  %362 = fadd <4 x float> %336, %335
  %363 = fmul <4 x float> %362, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %364 = fsub <4 x float> %318, %363
  %365 = fadd <4 x float> %317, %360
  %366 = fadd <4 x float> %318, %363
  %367 = fsub <4 x float> %149, %99
  %368 = fsub <4 x float> %19, %69
  %369 = fsub <4 x float> zeroinitializer, %99
  %370 = fsub <4 x float> %369, %149
  %371 = fsub <4 x float> %109, %139
  %372 = fsub <4 x float> %59, %29
  %373 = fsub <4 x float> zeroinitializer, %139
  %374 = fsub <4 x float> %373, %109
  %375 = fadd <4 x float> %371, %367
  %376 = fsub <4 x float> %324, %319
  %377 = fsub <4 x float> %367, %371
  %378 = fadd <4 x float> %368, %374
  %379 = fsub <4 x float> %370, %372
  %380 = fsub <4 x float> %368, %374
  %381 = fadd <4 x float> %372, %370
  %382 = fsub <4 x float> %129, %119
  %383 = fsub <4 x float> %39, %49
  %384 = fsub <4 x float> zeroinitializer, %119
  %385 = fsub <4 x float> %384, %129
  %386 = fsub <4 x float> %89, %159
  %387 = fsub <4 x float> %79, %9
  %388 = fsub <4 x float> zeroinitializer, %159
  %389 = fsub <4 x float> %388, %89
  %390 = fadd <4 x float> %382, %386
  %391 = fsub <4 x float> %306, %301
  %392 = fsub <4 x float> %382, %386
  %393 = fadd <4 x float> %383, %389
  %394 = fsub <4 x float> %385, %387
  %395 = fsub <4 x float> %383, %389
  %396 = fadd <4 x float> %387, %385
  %397 = fadd <4 x float> %375, %390
  %398 = fsub <4 x float> %329, %311
  %399 = fsub <4 x float> %375, %390
  %400 = fadd <4 x float> %394, %393
  %401 = fmul <4 x float> %400, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %402 = fadd <4 x float> %378, %401
  %403 = fsub <4 x float> %394, %393
  %404 = fmul <4 x float> %403, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %405 = fadd <4 x float> %379, %404
  %406 = fmul <4 x float> %393, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %407 = fsub <4 x float> zeroinitializer, %406
  %408 = fmul <4 x float> %394, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %409 = fsub <4 x float> %407, %408
  %410 = fadd <4 x float> %378, %409
  %411 = fsub <4 x float> %393, %394
  %412 = fmul <4 x float> %411, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %413 = fadd <4 x float> %379, %412
  %414 = fadd <4 x float> %376, %392
  %415 = fsub <4 x float> %377, %391
  %416 = fsub <4 x float> %376, %392
  %417 = fadd <4 x float> %391, %377
  %418 = fsub <4 x float> %395, %396
  %419 = fmul <4 x float> %418, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %420 = fsub <4 x float> %380, %419
  %421 = fadd <4 x float> %396, %395
  %422 = fmul <4 x float> %421, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %423 = fsub <4 x float> %381, %422
  %424 = fadd <4 x float> %380, %419
  %425 = fadd <4 x float> %381, %422
  %426 = fadd <4 x float> %337, %337
  %427 = fsub <4 x float> %338, %397
  %428 = fmul <4 x float> %402, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %429 = fmul <4 x float> %405, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %430 = fadd <4 x float> %428, %429
  %431 = fadd <4 x float> %343, %430
  %432 = fmul <4 x float> %405, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %433 = fmul <4 x float> %402, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %434 = fsub <4 x float> %432, %433
  %435 = fadd <4 x float> %346, %434
  %436 = fsub <4 x float> zeroinitializer, %428
  %437 = fsub <4 x float> %436, %429
  %438 = fadd <4 x float> %343, %437
  %439 = fsub <4 x float> %433, %432
  %440 = fadd <4 x float> %346, %439
  %441 = fadd <4 x float> %415, %414
  %442 = fmul <4 x float> %441, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %443 = fadd <4 x float> %355, %442
  %444 = fsub <4 x float> %415, %414
  %445 = fmul <4 x float> %444, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %446 = fadd <4 x float> %356, %445
  %447 = fmul <4 x float> %414, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %448 = fsub <4 x float> zeroinitializer, %447
  %449 = fmul <4 x float> %415, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %450 = fsub <4 x float> %448, %449
  %451 = fadd <4 x float> %355, %450
  %452 = fsub <4 x float> %414, %415
  %453 = fmul <4 x float> %452, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %454 = fadd <4 x float> %356, %453
  %455 = fmul <4 x float> %420, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %456 = fmul <4 x float> %423, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %457 = fadd <4 x float> %455, %456
  %458 = fadd <4 x float> %361, %457
  %459 = fmul <4 x float> %423, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %460 = fmul <4 x float> %420, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %461 = fsub <4 x float> %459, %460
  %462 = fadd <4 x float> %364, %461
  %463 = fsub <4 x float> zeroinitializer, %455
  %464 = fsub <4 x float> %463, %456
  %465 = fadd <4 x float> %361, %464
  %466 = fsub <4 x float> %460, %459
  %467 = fadd <4 x float> %364, %466
  %468 = fadd <4 x float> %339, %399
  %469 = fsub <4 x float> %340, %398
  %470 = fsub <4 x float> %339, %399
  %471 = fadd <4 x float> %398, %340
  %472 = fmul <4 x float> %410, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %473 = fmul <4 x float> %413, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %474 = fsub <4 x float> %472, %473
  %475 = fsub <4 x float> %351, %474
  %476 = fmul <4 x float> %413, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %477 = fsub <4 x float> zeroinitializer, %476
  %478 = fmul <4 x float> %410, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %479 = fsub <4 x float> %477, %478
  %480 = fadd <4 x float> %354, %479
  %481 = fadd <4 x float> %351, %474
  %482 = fadd <4 x float> %476, %478
  %483 = fadd <4 x float> %354, %482
  %484 = fsub <4 x float> %416, %417
  %485 = fmul <4 x float> %484, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %486 = fsub <4 x float> %357, %485
  %487 = fadd <4 x float> %417, %416
  %488 = fmul <4 x float> %487, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %489 = fsub <4 x float> %358, %488
  %490 = fadd <4 x float> %357, %485
  %491 = fadd <4 x float> %358, %488
  %492 = fmul <4 x float> %424, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %493 = fmul <4 x float> %425, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %494 = fsub <4 x float> %492, %493
  %495 = fsub <4 x float> %365, %494
  %496 = fmul <4 x float> %425, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %497 = fsub <4 x float> zeroinitializer, %496
  %498 = fmul <4 x float> %424, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %499 = fsub <4 x float> %497, %498
  %500 = fadd <4 x float> %366, %499
  %501 = fadd <4 x float> %365, %494
  %502 = fadd <4 x float> %496, %498
  %503 = fadd <4 x float> %366, %502
  %504 = fadd <4 x float> %426, %261
  %505 = bitcast float* %1 to <4 x float>*
  store <4 x float> %504, <4 x float>* %505, align 16
  %506 = getelementptr inbounds float, float* %1, i64 %6
  %507 = fmul <4 x float> %431, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %508 = fmul <4 x float> %435, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %509 = fadd <4 x float> %507, %508
  %510 = fadd <4 x float> %266, %509
  %511 = bitcast float* %506 to <4 x float>*
  store <4 x float> %510, <4 x float>* %511, align 16
  %512 = getelementptr inbounds float, float* %1, i64 %11
  %513 = fmul <4 x float> %443, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %514 = fmul <4 x float> %446, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %515 = fadd <4 x float> %513, %514
  %516 = fadd <4 x float> %272, %515
  %517 = bitcast float* %512 to <4 x float>*
  store <4 x float> %516, <4 x float>* %517, align 16
  %518 = getelementptr inbounds float, float* %1, i64 %16
  %519 = fmul <4 x float> %458, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %520 = fmul <4 x float> %462, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %521 = fadd <4 x float> %519, %520
  %522 = fadd <4 x float> %281, %521
  %523 = bitcast float* %518 to <4 x float>*
  store <4 x float> %522, <4 x float>* %523, align 16
  %524 = getelementptr inbounds float, float* %1, i64 %21
  %525 = fadd <4 x float> %468, %469
  %526 = fmul <4 x float> %525, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %527 = fadd <4 x float> %285, %526
  %528 = bitcast float* %524 to <4 x float>*
  store <4 x float> %527, <4 x float>* %528, align 16
  %529 = getelementptr inbounds float, float* %1, i64 %26
  %530 = fmul <4 x float> %475, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %531 = fmul <4 x float> %480, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %532 = fadd <4 x float> %530, %531
  %533 = fadd <4 x float> %290, %532
  %534 = bitcast float* %529 to <4 x float>*
  store <4 x float> %533, <4 x float>* %534, align 16
  %535 = getelementptr inbounds float, float* %1, i64 %31
  %536 = fmul <4 x float> %486, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %537 = fmul <4 x float> %489, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %538 = fadd <4 x float> %536, %537
  %539 = fadd <4 x float> %294, %538
  %540 = bitcast float* %535 to <4 x float>*
  store <4 x float> %539, <4 x float>* %540, align 16
  %541 = getelementptr inbounds float, float* %1, i64 %36
  %542 = fmul <4 x float> %495, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %543 = fmul <4 x float> %500, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %544 = fadd <4 x float> %542, %543
  %545 = fadd <4 x float> %299, %544
  %546 = bitcast float* %541 to <4 x float>*
  store <4 x float> %545, <4 x float>* %546, align 16
  %547 = getelementptr inbounds float, float* %1, i64 %41
  %548 = fadd <4 x float> %262, %427
  %549 = bitcast float* %547 to <4 x float>*
  store <4 x float> %548, <4 x float>* %549, align 16
  %550 = getelementptr inbounds float, float* %1, i64 %46
  %551 = fmul <4 x float> %438, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %552 = fmul <4 x float> %440, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %553 = fsub <4 x float> %551, %552
  %554 = fsub <4 x float> %269, %553
  %555 = bitcast float* %550 to <4 x float>*
  store <4 x float> %554, <4 x float>* %555, align 16
  %556 = getelementptr inbounds float, float* %1, i64 %51
  %557 = fmul <4 x float> %451, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %558 = fmul <4 x float> %454, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %559 = fsub <4 x float> %557, %558
  %560 = fsub <4 x float> %277, %559
  %561 = bitcast float* %556 to <4 x float>*
  store <4 x float> %560, <4 x float>* %561, align 16
  %562 = getelementptr inbounds float, float* %1, i64 %56
  %563 = fmul <4 x float> %465, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %564 = fmul <4 x float> %467, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %565 = fsub <4 x float> %563, %564
  %566 = fsub <4 x float> %284, %565
  %567 = bitcast float* %562 to <4 x float>*
  store <4 x float> %566, <4 x float>* %567, align 16
  %568 = getelementptr inbounds float, float* %1, i64 %61
  %569 = fsub <4 x float> %470, %471
  %570 = fmul <4 x float> %569, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %571 = fsub <4 x float> %286, %570
  %572 = bitcast float* %568 to <4 x float>*
  store <4 x float> %571, <4 x float>* %572, align 16
  %573 = getelementptr inbounds float, float* %1, i64 %66
  %574 = fmul <4 x float> %481, <float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000, float 0x3FEA9B6700000000>
  %575 = fmul <4 x float> %483, <float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000, float 0x3FE1C73AC0000000>
  %576 = fsub <4 x float> %574, %575
  %577 = fsub <4 x float> %291, %576
  %578 = bitcast float* %573 to <4 x float>*
  store <4 x float> %577, <4 x float>* %578, align 16
  %579 = getelementptr inbounds float, float* %1, i64 %71
  %580 = fmul <4 x float> %490, <float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000, float 0x3FED906CC0000000>
  %581 = fmul <4 x float> %491, <float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000, float 0x3FD87DE0E0000000>
  %582 = fsub <4 x float> %580, %581
  %583 = fsub <4 x float> %295, %582
  %584 = bitcast float* %579 to <4 x float>*
  store <4 x float> %583, <4 x float>* %584, align 16
  %585 = getelementptr inbounds float, float* %1, i64 %76
  %586 = fmul <4 x float> %501, <float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000, float 0x3FEF629740000000>
  %587 = fmul <4 x float> %503, <float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000, float 0x3FC8F8B580000000>
  %588 = fsub <4 x float> %586, %587
  %589 = fsub <4 x float> %300, %588
  %590 = bitcast float* %585 to <4 x float>*
  store <4 x float> %589, <4 x float>* %590, align 16
  %591 = getelementptr inbounds float, float* %1, i64 %81
  %592 = fsub <4 x float> %261, %426
  %593 = bitcast float* %591 to <4 x float>*
  store <4 x float> %592, <4 x float>* %593, align 16
  %594 = getelementptr inbounds float, float* %1, i64 %86
  %595 = fsub <4 x float> zeroinitializer, %507
  %596 = fsub <4 x float> %595, %508
  %597 = fadd <4 x float> %266, %596
  %598 = bitcast float* %594 to <4 x float>*
  store <4 x float> %597, <4 x float>* %598, align 16
  %599 = getelementptr inbounds float, float* %1, i64 %91
  %600 = fsub <4 x float> zeroinitializer, %513
  %601 = fsub <4 x float> %600, %514
  %602 = fadd <4 x float> %272, %601
  %603 = bitcast float* %599 to <4 x float>*
  store <4 x float> %602, <4 x float>* %603, align 16
  %604 = getelementptr inbounds float, float* %1, i64 %96
  %605 = fsub <4 x float> zeroinitializer, %519
  %606 = fsub <4 x float> %605, %520
  %607 = fadd <4 x float> %281, %606
  %608 = bitcast float* %604 to <4 x float>*
  store <4 x float> %607, <4 x float>* %608, align 16
  %609 = getelementptr inbounds float, float* %1, i64 %101
  %610 = fmul <4 x float> %468, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %611 = fsub <4 x float> zeroinitializer, %610
  %612 = fmul <4 x float> %469, <float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000, float 0x3FE6A09EE0000000>
  %613 = fsub <4 x float> %611, %612
  %614 = fadd <4 x float> %285, %613
  %615 = bitcast float* %609 to <4 x float>*
  store <4 x float> %614, <4 x float>* %615, align 16
  %616 = getelementptr inbounds float, float* %1, i64 %106
  %617 = fsub <4 x float> zeroinitializer, %530
  %618 = fsub <4 x float> %617, %531
  %619 = fadd <4 x float> %290, %618
  %620 = bitcast float* %616 to <4 x float>*
  store <4 x float> %619, <4 x float>* %620, align 16
  %621 = getelementptr inbounds float, float* %1, i64 %111
  %622 = fsub <4 x float> zeroinitializer, %536
  %623 = fsub <4 x float> %622, %537
  %624 = fadd <4 x float> %294, %623
  %625 = bitcast float* %621 to <4 x float>*
  store <4 x float> %624, <4 x float>* %625, align 16
  %626 = getelementptr inbounds float, float* %1, i64 %116
  %627 = fsub <4 x float> zeroinitializer, %542
  %628 = fsub <4 x float> %627, %543
  %629 = fadd <4 x float> %299, %628
  %630 = bitcast float* %626 to <4 x float>*
  store <4 x float> %629, <4 x float>* %630, align 16
  %631 = getelementptr inbounds float, float* %1, i64 %121
  %632 = fsub <4 x float> %262, %427
  %633 = bitcast float* %631 to <4 x float>*
  store <4 x float> %632, <4 x float>* %633, align 16
  %634 = getelementptr inbounds float, float* %1, i64 %126
  %635 = fadd <4 x float> %269, %553
  %636 = bitcast float* %634 to <4 x float>*
  store <4 x float> %635, <4 x float>* %636, align 16
  %637 = getelementptr inbounds float, float* %1, i64 %131
  %638 = fadd <4 x float> %277, %559
  %639 = bitcast float* %637 to <4 x float>*
  store <4 x float> %638, <4 x float>* %639, align 16
  %640 = getelementptr inbounds float, float* %1, i64 %136
  %641 = fadd <4 x float> %284, %565
  %642 = bitcast float* %640 to <4 x float>*
  store <4 x float> %641, <4 x float>* %642, align 16
  %643 = getelementptr inbounds float, float* %1, i64 %141
  %644 = fadd <4 x float> %286, %570
  %645 = bitcast float* %643 to <4 x float>*
  store <4 x float> %644, <4 x float>* %645, align 16
  %646 = getelementptr inbounds float, float* %1, i64 %146
  %647 = fadd <4 x float> %291, %576
  %648 = bitcast float* %646 to <4 x float>*
  store <4 x float> %647, <4 x float>* %648, align 16
  %649 = getelementptr inbounds float, float* %1, i64 %151
  %650 = fadd <4 x float> %295, %582
  %651 = bitcast float* %649 to <4 x float>*
  store <4 x float> %650, <4 x float>* %651, align 16
  %652 = getelementptr inbounds float, float* %1, i64 %156
  %653 = fadd <4 x float> %300, %588
  %654 = bitcast float* %652 to <4 x float>*
  store <4 x float> %653, <4 x float>* %654, align 16
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
