; ModuleID = '../../device/gamepad/gamepad_pad_state_provider.cc'
source_filename = "../../device/gamepad/gamepad_pad_state_provider.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.device::PadState" = type { i32, i32, i8, i8, i8, i8, %"class.device::Gamepad", void (%"class.device::Gamepad"*, %"class.device::Gamepad"*)*, i32, i32 }
%"class.device::Gamepad" = type <{ i8, i8, [128 x i16], [2 x i8], i64, i32, i32, [16 x double], i32, [32 x %"class.device::GamepadButton"], %"class.device::GamepadHapticActuator", i32, %"class.device::GamepadPose", i32, i32, i8, [3 x i8] }>
%"class.device::GamepadButton" = type <{ i8, i8, i8, i8, double }>
%"class.device::GamepadHapticActuator" = type { i8, i32 }
%"class.device::GamepadPose" = type { i8, i8, i8, %"class.device::GamepadQuaternion", %"class.device::GamepadVector", %"class.device::GamepadVector", %"class.device::GamepadVector", %"class.device::GamepadVector", %"class.device::GamepadVector" }
%"class.device::GamepadQuaternion" = type { i8, float, float, float, float }
%"class.device::GamepadVector" = type { i8, float, float, float }
%"class.device::GamepadPadStateProvider" = type { i32 (...)**, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.device::PadState"* }
%"class.device::GamepadDataFetcher" = type { i32 (...)**, %"class.device::GamepadPadStateProvider"* }

@_ZTVN6device23GamepadPadStateProviderE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.device::GamepadPadStateProvider"*)* @_ZN6device23GamepadPadStateProviderD2Ev to i8*), i8* bitcast (void (%"class.device::GamepadPadStateProvider"*)* @_ZN6device23GamepadPadStateProviderD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN6device8PadStateC1Ev = hidden unnamed_addr alias void (%"struct.device::PadState"*), void (%"struct.device::PadState"*)* @_ZN6device8PadStateC2Ev
@_ZN6device8PadStateD1Ev = hidden unnamed_addr alias void (%"struct.device::PadState"*), void (%"struct.device::PadState"*)* @_ZN6device8PadStateD2Ev
@_ZN6device23GamepadPadStateProviderD1Ev = hidden unnamed_addr alias void (%"class.device::GamepadPadStateProvider"*), void (%"class.device::GamepadPadStateProvider"*)* @_ZN6device23GamepadPadStateProviderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device8PadStateC2Ev(%"struct.device::PadState"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %0, i64 0, i32 6
  tail call void @_ZN6device7GamepadC1Ev(%"class.device::Gamepad"* %2) #10
  ret void
}

declare void @_ZN6device7GamepadC1Ev(%"class.device::Gamepad"*) unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6device8PadStateD2Ev(%"struct.device::PadState"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device23GamepadPadStateProviderC2Ev(%"class.device::GamepadPadStateProvider"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::GamepadPadStateProvider", %"class.device::GamepadPadStateProvider"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6device23GamepadPadStateProviderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.device::GamepadPadStateProvider", %"class.device::GamepadPadStateProvider"* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 0, i64* %4, align 8
  %5 = tail call i8* @_Znam(i64 3816) #11
  %6 = bitcast i8* %5 to i64*
  store i64 4, i64* %6, align 16
  %7 = getelementptr inbounds i8, i8* %5, i64 8
  %8 = getelementptr inbounds i8, i8* %5, i64 20
  %9 = bitcast i8* %8 to %"class.device::Gamepad"*
  tail call void @_ZN6device7GamepadC1Ev(%"class.device::Gamepad"* %9) #10
  %10 = getelementptr inbounds i8, i8* %5, i64 972
  %11 = bitcast i8* %10 to %"class.device::Gamepad"*
  tail call void @_ZN6device7GamepadC1Ev(%"class.device::Gamepad"* %11) #10
  %12 = getelementptr inbounds i8, i8* %5, i64 1924
  %13 = bitcast i8* %12 to %"class.device::Gamepad"*
  tail call void @_ZN6device7GamepadC1Ev(%"class.device::Gamepad"* %13) #10
  %14 = getelementptr inbounds i8, i8* %5, i64 2876
  %15 = bitcast i8* %14 to %"class.device::Gamepad"*
  tail call void @_ZN6device7GamepadC1Ev(%"class.device::Gamepad"* %15) #10
  %16 = ptrtoint i8* %7 to i64
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %3, i64 0, i32 0, i32 0, i32 0
  %18 = load %"struct.device::PadState"*, %"struct.device::PadState"** %17, align 8
  store i64 %16, i64* %4, align 8
  %19 = icmp eq %"struct.device::PadState"* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %1
  %21 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %18, i64 -1, i32 8
  %22 = bitcast i32* %21 to i8*
  tail call void @_ZdaPv(i8* %22) #11
  %23 = bitcast %"class.std::__1::unique_ptr"* %3 to i8**
  %24 = load i8*, i8** %23, align 8
  br label %25

25:                                               ; preds = %20, %1
  %26 = phi i8* [ %24, %20 ], [ %7, %1 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 952, i1 false) #10
  %27 = load %"struct.device::PadState"*, %"struct.device::PadState"** %17, align 8
  %28 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %27, i64 1
  %29 = bitcast %"struct.device::PadState"* %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 952, i1 false) #10
  %30 = load %"struct.device::PadState"*, %"struct.device::PadState"** %17, align 8
  %31 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %30, i64 2
  %32 = bitcast %"struct.device::PadState"* %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 952, i1 false) #10
  %33 = load %"struct.device::PadState"*, %"struct.device::PadState"** %17, align 8
  %34 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %33, i64 3
  %35 = bitcast %"struct.device::PadState"* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 952, i1 false) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device23GamepadPadStateProvider13ClearPadStateERNS_8PadStateE(%"class.device::GamepadPadStateProvider"* nocapture readnone, %"struct.device::PadState"* nocapture dereferenceable(952)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.device::PadState"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 952, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device23GamepadPadStateProviderD2Ev(%"class.device::GamepadPadStateProvider"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::GamepadPadStateProvider", %"class.device::GamepadPadStateProvider"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6device23GamepadPadStateProviderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.device::GamepadPadStateProvider", %"class.device::GamepadPadStateProvider"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"struct.device::PadState"*, %"struct.device::PadState"** %3, align 8
  store %"struct.device::PadState"* null, %"struct.device::PadState"** %3, align 8
  %5 = icmp eq %"struct.device::PadState"* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %4, i64 -1, i32 8
  %8 = bitcast i32* %7 to i8*
  tail call void @_ZdaPv(i8* %8) #11
  br label %9

9:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN6device23GamepadPadStateProviderD0Ev(%"class.device::GamepadPadStateProvider"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.device::PadState"* @_ZN6device23GamepadPadStateProvider11GetPadStateENS_13GamepadSourceEib(%"class.device::GamepadPadStateProvider"*, i32, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = zext i1 %3 to i8
  %6 = getelementptr inbounds %"class.device::GamepadPadStateProvider", %"class.device::GamepadPadStateProvider"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %"struct.device::PadState"*, %"struct.device::PadState"** %6, align 8
  %8 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, %1
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, %2
  br i1 %14, label %26, label %15

15:                                               ; preds = %11, %4
  %16 = icmp eq i32 %9, 0
  %17 = select i1 %16, %"struct.device::PadState"* %7, %"struct.device::PadState"* null
  %18 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 0, i32 5
  %19 = load i8, i8* %18, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  %21 = select i1 %20, %"struct.device::PadState"* %7, %"struct.device::PadState"* null
  %22 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 1
  %23 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %22, i64 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, %1
  br i1 %25, label %54, label %58

26:                                               ; preds = %88, %71, %54, %11
  %27 = phi i64 [ 0, %11 ], [ 1, %54 ], [ 2, %71 ], [ 3, %88 ]
  %28 = phi %"struct.device::PadState"* [ %7, %11 ], [ %22, %54 ], [ %67, %71 ], [ %84, %88 ]
  %29 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 %27, i32 2
  store i8 1, i8* %29, align 8
  br label %52

30:                                               ; preds = %92
  %31 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %100, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %100, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = bitcast %"class.device::GamepadPadStateProvider"* %0 to void (%"class.device::GamepadPadStateProvider"*, i32, i32)***
  %36 = load void (%"class.device::GamepadPadStateProvider"*, i32, i32)**, void (%"class.device::GamepadPadStateProvider"*, i32, i32)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.device::GamepadPadStateProvider"*, i32, i32)*, void (%"class.device::GamepadPadStateProvider"*, i32, i32)** %36, i64 2
  %38 = load void (%"class.device::GamepadPadStateProvider"*, i32, i32)*, void (%"class.device::GamepadPadStateProvider"*, i32, i32)** %37, align 8
  tail call void %38(%"class.device::GamepadPadStateProvider"* %0, i32 %32, i32 %34) #10
  br label %44

39:                                               ; preds = %92
  %40 = icmp eq %"struct.device::PadState"* %96, null
  %41 = or i1 %101, %102
  %42 = xor i1 %41, true
  %43 = or i1 %40, %42
  br i1 %43, label %52, label %44

44:                                               ; preds = %30, %39
  %45 = phi %"struct.device::PadState"* [ %100, %30 ], [ %96, %39 ]
  %46 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %45, i64 0, i32 0
  store i32 %1, i32* %46, align 8
  %47 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %45, i64 0, i32 1
  store i32 %2, i32* %47, align 4
  %48 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %45, i64 0, i32 2
  store i8 1, i8* %48, align 8
  %49 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %45, i64 0, i32 3
  store i8 1, i8* %49, align 1
  %50 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %45, i64 0, i32 4
  store i8 0, i8* %50, align 2
  %51 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %45, i64 0, i32 5
  store i8 %5, i8* %51, align 1
  br label %52

52:                                               ; preds = %26, %44, %39
  %53 = phi %"struct.device::PadState"* [ %28, %26 ], [ null, %39 ], [ %45, %44 ]
  ret %"struct.device::PadState"* %53

54:                                               ; preds = %15
  %55 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 1, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, %2
  br i1 %57, label %26, label %58

58:                                               ; preds = %54, %15
  %59 = icmp eq %"struct.device::PadState"* %17, null
  %60 = icmp eq i32 %24, 0
  %61 = select i1 %60, %"struct.device::PadState"* %22, %"struct.device::PadState"* null
  %62 = select i1 %59, %"struct.device::PadState"* %61, %"struct.device::PadState"* %17
  %63 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 1, i32 5
  %64 = load i8, i8* %63, align 1, !range !2
  %65 = icmp eq i8 %64, 0
  %66 = select i1 %65, %"struct.device::PadState"* %22, %"struct.device::PadState"* %21
  %67 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 2
  %68 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %67, i64 0, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, %1
  br i1 %70, label %71, label %75

71:                                               ; preds = %58
  %72 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 2, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, %2
  br i1 %74, label %26, label %75

75:                                               ; preds = %71, %58
  %76 = icmp eq %"struct.device::PadState"* %62, null
  %77 = icmp eq i32 %69, 0
  %78 = select i1 %77, %"struct.device::PadState"* %67, %"struct.device::PadState"* null
  %79 = select i1 %76, %"struct.device::PadState"* %78, %"struct.device::PadState"* %62
  %80 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 2, i32 5
  %81 = load i8, i8* %80, align 1, !range !2
  %82 = icmp eq i8 %81, 0
  %83 = select i1 %82, %"struct.device::PadState"* %67, %"struct.device::PadState"* %66
  %84 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 3
  %85 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %84, i64 0, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = icmp eq i32 %86, %1
  br i1 %87, label %88, label %92

88:                                               ; preds = %75
  %89 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 3, i32 1
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, %2
  br i1 %91, label %26, label %92

92:                                               ; preds = %88, %75
  %93 = icmp eq %"struct.device::PadState"* %79, null
  %94 = icmp eq i32 %86, 0
  %95 = select i1 %94, %"struct.device::PadState"* %84, %"struct.device::PadState"* null
  %96 = select i1 %93, %"struct.device::PadState"* %95, %"struct.device::PadState"* %79
  %97 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 3, i32 5
  %98 = load i8, i8* %97, align 1, !range !2
  %99 = icmp eq i8 %98, 0
  %100 = select i1 %99, %"struct.device::PadState"* %84, %"struct.device::PadState"* %83
  %101 = icmp ne %"struct.device::PadState"* %96, null
  %102 = icmp eq %"struct.device::PadState"* %100, null
  %103 = or i1 %101, %102
  %104 = xor i1 %3, true
  %105 = or i1 %103, %104
  br i1 %105, label %39, label %30
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"struct.device::PadState"* @_ZN6device23GamepadPadStateProvider20GetConnectedPadStateEj(%"class.device::GamepadPadStateProvider"* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = icmp ugt i32 %1, 3
  br i1 %3, label %13, label %4

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds %"class.device::GamepadPadStateProvider", %"class.device::GamepadPadStateProvider"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %"struct.device::PadState"*, %"struct.device::PadState"** %6, align 8
  %8 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %7, i64 %5
  %9 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %8, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, %"struct.device::PadState"* null, %"struct.device::PadState"* %8
  br label %13

13:                                               ; preds = %2, %4
  %14 = phi %"struct.device::PadState"* [ %12, %4 ], [ null, %2 ]
  ret %"struct.device::PadState"* %14
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device23GamepadPadStateProvider21InitializeDataFetcherEPNS_18GamepadDataFetcherE(%"class.device::GamepadPadStateProvider"*, %"class.device::GamepadDataFetcher"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN6device18GamepadDataFetcher18InitializeProviderEPNS_23GamepadPadStateProviderE(%"class.device::GamepadDataFetcher"* %1, %"class.device::GamepadPadStateProvider"* %0) #10
  ret void
}

declare void @_ZN6device18GamepadDataFetcher18InitializeProviderEPNS_23GamepadPadStateProviderE(%"class.device::GamepadDataFetcher"*, %"class.device::GamepadPadStateProvider"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device23GamepadPadStateProvider25MapAndSanitizeGamepadDataEPNS_8PadStateEPNS_7GamepadEb(%"class.device::GamepadPadStateProvider"* nocapture readnone, %"struct.device::PadState"*, %"class.device::Gamepad"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %1, i64 0, i32 6
  %6 = getelementptr inbounds %"class.device::Gamepad", %"class.device::Gamepad"* %5, i64 0, i32 0
  %7 = load i8, i8* %6, align 4, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.device::Gamepad", %"class.device::Gamepad"* %2, i64 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %10, i8 0, i64 920, i1 false)
  br label %88

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %1, i64 0, i32 7
  %13 = load void (%"class.device::Gamepad"*, %"class.device::Gamepad"*)*, void (%"class.device::Gamepad"*, %"class.device::Gamepad"*)** %12, align 8
  %14 = icmp eq void (%"class.device::Gamepad"*, %"class.device::Gamepad"*)* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %11
  tail call void %13(%"class.device::Gamepad"* dereferenceable(920) %5, %"class.device::Gamepad"* %2) #10
  br label %18

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.device::Gamepad", %"class.device::Gamepad"* %2, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %17, i8* align 4 %6, i64 917, i1 false)
  br label %18

18:                                               ; preds = %16, %15
  %19 = getelementptr inbounds %"class.device::Gamepad", %"class.device::Gamepad"* %2, i64 0, i32 0
  store i8 1, i8* %19, align 4
  br i1 %3, label %20, label %88

20:                                               ; preds = %18
  %21 = getelementptr inbounds %"class.device::Gamepad", %"class.device::Gamepad"* %2, i64 0, i32 5
  %22 = load i32, i32* %21, align 4
  %23 = shl nsw i32 -1, %22
  %24 = xor i32 %23, -1
  %25 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %1, i64 0, i32 8
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, %24
  %28 = icmp eq i32 %22, 0
  %29 = or i1 %27, %28
  br i1 %29, label %54, label %30

30:                                               ; preds = %20, %52
  %31 = phi i32 [ %48, %52 ], [ %22, %20 ]
  %32 = phi i32 [ %53, %52 ], [ %26, %20 ]
  %33 = phi i64 [ %49, %52 ], [ 0, %20 ]
  %34 = trunc i64 %33 to i32
  %35 = shl i32 1, %34
  %36 = and i32 %32, %35
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %47

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"class.device::Gamepad", %"class.device::Gamepad"* %2, i64 0, i32 7, i64 %33
  %40 = load double, double* %39, align 4
  %41 = tail call double @llvm.fabs.f64(double %40)
  %42 = fcmp olt double %41, 0x3FB99999A0000000
  br i1 %42, label %43, label %46

43:                                               ; preds = %38
  %44 = or i32 %32, %35
  store i32 %44, i32* %25, align 8
  %45 = load i32, i32* %21, align 4
  br label %47

46:                                               ; preds = %38
  store double 0.000000e+00, double* %39, align 4
  br label %47

47:                                               ; preds = %30, %46, %43
  %48 = phi i32 [ %31, %30 ], [ %31, %46 ], [ %45, %43 ]
  %49 = add nuw nsw i64 %33, 1
  %50 = zext i32 %48 to i64
  %51 = icmp ult i64 %49, %50
  br i1 %51, label %52, label %54

52:                                               ; preds = %47
  %53 = load i32, i32* %25, align 8
  br label %30

54:                                               ; preds = %47, %20
  %55 = getelementptr inbounds %"class.device::Gamepad", %"class.device::Gamepad"* %2, i64 0, i32 8
  %56 = load i32, i32* %55, align 4
  %57 = shl nsw i32 -1, %56
  %58 = xor i32 %57, -1
  %59 = getelementptr inbounds %"struct.device::PadState", %"struct.device::PadState"* %1, i64 0, i32 9
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, %58
  %62 = icmp eq i32 %56, 0
  %63 = or i1 %61, %62
  br i1 %63, label %88, label %64

64:                                               ; preds = %54, %86
  %65 = phi i32 [ %82, %86 ], [ %56, %54 ]
  %66 = phi i32 [ %87, %86 ], [ %60, %54 ]
  %67 = phi i64 [ %83, %86 ], [ 0, %54 ]
  %68 = trunc i64 %67 to i32
  %69 = shl i32 1, %68
  %70 = and i32 %66, %69
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %81

72:                                               ; preds = %64
  %73 = getelementptr inbounds %"class.device::Gamepad", %"class.device::Gamepad"* %2, i64 0, i32 9, i64 %67, i32 1
  %74 = load i8, i8* %73, align 1, !range !2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %76, label %79

76:                                               ; preds = %72
  %77 = or i32 %66, %69
  store i32 %77, i32* %59, align 4
  %78 = load i32, i32* %55, align 4
  br label %81

79:                                               ; preds = %72
  store i8 0, i8* %73, align 1
  %80 = getelementptr inbounds %"class.device::Gamepad", %"class.device::Gamepad"* %2, i64 0, i32 9, i64 %67, i32 4
  store double 0.000000e+00, double* %80, align 4
  br label %81

81:                                               ; preds = %64, %79, %76
  %82 = phi i32 [ %65, %64 ], [ %65, %79 ], [ %78, %76 ]
  %83 = add nuw nsw i64 %67, 1
  %84 = zext i32 %82 to i64
  %85 = icmp ult i64 %83, %84
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = load i32, i32* %59, align 4
  br label %64

88:                                               ; preds = %81, %54, %18, %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #7

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
