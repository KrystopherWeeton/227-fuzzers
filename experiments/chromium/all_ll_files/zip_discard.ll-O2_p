; ModuleID = '../../third_party/libzip/src/lib/zip_discard.c'
source_filename = "../../third_party/libzip/src/lib/zip_discard.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden void @zip_discard(%struct.zip*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.zip* %0, null
  br i1 %2, label %60, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 0
  %5 = load %struct.zip_source*, %struct.zip_source** %4, align 8
  %6 = icmp eq %struct.zip_source* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = tail call i32 @zip_source_close(%struct.zip_source* nonnull %5) #3
  %9 = load %struct.zip_source*, %struct.zip_source** %4, align 8
  tail call void @zip_source_free(%struct.zip_source* %9) #3
  br label %10

10:                                               ; preds = %3, %7
  %11 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 5
  %12 = load i8*, i8** %11, align 8
  tail call void @free(i8* %12) #3
  %13 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 6
  %14 = load %struct.zip_string*, %struct.zip_string** %13, align 8
  tail call void @_zip_string_free(%struct.zip_string* %14) #3
  %15 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 7
  %16 = load %struct.zip_string*, %struct.zip_string** %15, align 8
  tail call void @_zip_string_free(%struct.zip_string* %16) #3
  %17 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 15
  %18 = load %struct.zip_hash*, %struct.zip_hash** %17, align 8
  tail call void @_zip_hash_free(%struct.zip_hash* %18) #3
  %19 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %20 = load %struct.zip_entry*, %struct.zip_entry** %19, align 8
  %21 = icmp eq %struct.zip_entry* %20, null
  br i1 %21, label %37, label %22

22:                                               ; preds = %10
  %23 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 9
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %22, %26
  %27 = phi %struct.zip_entry* [ %33, %26 ], [ %20, %22 ]
  %28 = phi i64 [ %30, %26 ], [ 0, %22 ]
  %29 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %27, i64 %28
  tail call void @_zip_entry_finalize(%struct.zip_entry* %29) #3
  %30 = add nuw i64 %28, 1
  %31 = load i64, i64* %23, align 8
  %32 = icmp ult i64 %30, %31
  %33 = load %struct.zip_entry*, %struct.zip_entry** %19, align 8
  br i1 %32, label %26, label %34

34:                                               ; preds = %26, %22
  %35 = phi %struct.zip_entry* [ %20, %22 ], [ %33, %26 ]
  %36 = bitcast %struct.zip_entry* %35 to i8*
  tail call void @free(i8* %36) #3
  br label %37

37:                                               ; preds = %10, %34
  %38 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 12
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  %41 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 14
  %42 = load %struct.zip_source**, %struct.zip_source*** %41, align 8
  br i1 %40, label %53, label %43

43:                                               ; preds = %37, %43
  %44 = phi %struct.zip_source** [ %52, %43 ], [ %42, %37 ]
  %45 = phi i64 [ %48, %43 ], [ 0, %37 ]
  %46 = getelementptr inbounds %struct.zip_source*, %struct.zip_source** %44, i64 %45
  %47 = load %struct.zip_source*, %struct.zip_source** %46, align 8
  tail call void @_zip_source_invalidate(%struct.zip_source* %47) #3
  %48 = add nuw nsw i64 %45, 1
  %49 = load i32, i32* %38, align 8
  %50 = zext i32 %49 to i64
  %51 = icmp ult i64 %48, %50
  %52 = load %struct.zip_source**, %struct.zip_source*** %41, align 8
  br i1 %51, label %43, label %53

53:                                               ; preds = %43, %37
  %54 = phi %struct.zip_source** [ %42, %37 ], [ %52, %43 ]
  %55 = bitcast %struct.zip_source** %54 to i8*
  tail call void @free(i8* %55) #3
  %56 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 16
  %57 = load %struct.zip_progress*, %struct.zip_progress** %56, align 8
  tail call void @_zip_progress_free(%struct.zip_progress* %57) #3
  %58 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_fini(%struct.zip_error* %58) #3
  %59 = bitcast %struct.zip* %0 to i8*
  tail call void @free(i8* %59) #3
  br label %60

60:                                               ; preds = %1, %53
  ret void
}

declare i32 @zip_source_close(%struct.zip_source*) local_unnamed_addr #1

declare void @zip_source_free(%struct.zip_source*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #2

declare void @_zip_string_free(%struct.zip_string*) local_unnamed_addr #1

declare void @_zip_hash_free(%struct.zip_hash*) local_unnamed_addr #1

declare void @_zip_entry_finalize(%struct.zip_entry*) local_unnamed_addr #1

declare void @_zip_source_invalidate(%struct.zip_source*) local_unnamed_addr #1

declare void @_zip_progress_free(%struct.zip_progress*) local_unnamed_addr #1

declare void @zip_error_fini(%struct.zip_error*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
