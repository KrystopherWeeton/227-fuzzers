; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/SeparateDeclarations.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/SeparateDeclarations.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser" = type { %"class.sh::TIntermTraverser" }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.sh::TVector", %"class.std::__1::vector.20" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.sh::TSymbolTable" = type opaque
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.8" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.sh::TVector" = type { %"class.std::__1::vector.0" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.22" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TVariable" = type opaque
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.27"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.27" = type opaque
%"class.sh::TInterfaceBlock" = type opaque
%"class.sh::TStructure" = type opaque
%"class.sh::TConstantUnion" = type { %union.anon, i32 }
%union.anon = type { i32 }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.28", i8, [7 x i8] }>
%"class.sh::TVector.28" = type { %"class.std::__1::vector.29" }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { i32*, i32*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.36", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.38" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.sh::ImmutableString" = type { i8*, i64 }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_ = comdat any

@_ZTVN2sh12_GLOBAL__N_129SeparateDeclarationsTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser"*)* @_ZN2sh12_GLOBAL__N_129SeparateDeclarationsTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_129SeparateDeclarationsTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZTVN2sh18TIntermDeclarationE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh20SeparateDeclarationsEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #0 {
  %3 = alloca %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser", align 8
  %4 = bitcast %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %4) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 152, i1 false) #8
  %5 = getelementptr inbounds %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser", %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser"* %3, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %5, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* null) #8
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser", %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser"* %3, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_129SeparateDeclarationsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = bitcast %"class.sh::TIntermNode"* %1 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %8 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %8, i64 2
  %10 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %9, align 8
  call void %10(%"class.sh::TIntermNode"* %1, %"class.sh::TIntermTraverser"* nonnull %5) #8
  %11 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %5, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %1) #8
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %4) #8
  ret i1 %11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_129SeparateDeclarationsTraverserD0Ev(%"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser", %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_129SeparateDeclarationsTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TIntermDeclaration"*, align 8
  %5 = alloca %"class.sh::TIntermBlock"*, align 8
  %6 = alloca %"class.sh::TVector", align 16
  store %"class.sh::TIntermDeclaration"* %2, %"class.sh::TIntermDeclaration"** %4, align 8
  %7 = bitcast %"class.sh::TIntermDeclaration"* %2 to %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)***
  %8 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %8, i64 27
  %10 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %9, align 8
  %11 = tail call %"class.sh::TVector"* %10(%"class.sh::TIntermDeclaration"* %2) #8
  %12 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %11, i64 0, i32 0, i32 0, i32 1
  %13 = bitcast %"class.sh::TIntermNode"*** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.sh::TVector"* %11 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = ashr exact i64 %17, 3
  %19 = icmp ugt i64 %18, 1
  br i1 %19, label %20, label %355

20:                                               ; preds = %3
  %21 = bitcast %"class.sh::TIntermBlock"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #8
  store %"class.sh::TIntermBlock"* inttoptr (i64 -6148914691236517206 to %"class.sh::TIntermBlock"*), %"class.sh::TIntermBlock"** %5, align 8
  %22 = getelementptr inbounds %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser", %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser"* %0, i64 0, i32 0, i32 11, i32 0
  %23 = getelementptr inbounds %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser", %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %24 = bitcast %"class.sh::TIntermNode"*** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.std::__1::vector.0"* %22 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %25, %27
  %29 = ashr exact i64 %28, 3
  %30 = icmp ult i64 %29, 2
  br i1 %30, label %37, label %31

31:                                               ; preds = %20
  %32 = inttoptr i64 %27 to %"class.sh::TIntermNode"**
  %33 = add nsw i64 %29, -2
  %34 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %32, i64 %33
  %35 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %34, align 8
  %36 = bitcast %"class.sh::TIntermNode"* %35 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)***
  br label %37

37:                                               ; preds = %20, %31
  %38 = phi %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** [ %36, %31 ], [ null, %20 ]
  %39 = phi %"class.sh::TIntermNode"* [ %35, %31 ], [ null, %20 ]
  %40 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** %38, align 8
  %41 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %40, i64 8
  %42 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %41, align 8
  %43 = tail call %"class.sh::TIntermBlock"* %42(%"class.sh::TIntermNode"* %39) #8
  store %"class.sh::TIntermBlock"* %43, %"class.sh::TIntermBlock"** %5, align 8
  %44 = bitcast %"class.sh::TVector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %44) #8
  %45 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 0
  %46 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 1
  %47 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %44, i8 0, i64 24, i1 false) #8
  %48 = load i64, i64* %13, align 8
  %49 = load i64, i64* %15, align 8
  %50 = icmp eq i64 %48, %49
  br i1 %50, label %55, label %51

51:                                               ; preds = %37
  %52 = bitcast %"class.sh::TIntermNode"*** %46 to i64*
  %53 = bitcast %"class.sh::TVector"* %6 to i64*
  %54 = bitcast %"class.sh::TIntermNode"*** %47 to i64*
  br label %90

55:                                               ; preds = %348, %37
  %56 = getelementptr inbounds %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser", %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 1
  %57 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %56, align 8
  %58 = getelementptr inbounds %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser", %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %59 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %58, align 8
  %60 = icmp ult %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %57, %59
  br i1 %60, label %61, label %82

61:                                               ; preds = %55
  %62 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %5, align 8
  %63 = icmp eq %"class.sh::TIntermBlock"* %62, null
  %64 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %62, i64 0, i32 1
  %65 = select i1 %63, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %64
  %66 = bitcast %"class.sh::TIntermDeclaration"** %4 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %57, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %65, %"class.sh::TIntermAggregateBase"** %68, align 8
  %69 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %57, i64 0, i32 1
  %70 = bitcast %"class.sh::TIntermNode"** %69 to i64*
  store i64 %67, i64* %70, align 8
  %71 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %57, i64 0, i32 2
  %72 = bitcast %"class.sh::TVector"* %6 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 16
  %74 = bitcast %"class.sh::TVector"* %71 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %74, align 8
  %75 = bitcast %"class.sh::TIntermNode"*** %47 to i64*
  %76 = load i64, i64* %75, align 16
  %77 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %57, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %78 = bitcast %"class.sh::TIntermNode"*** %77 to i64*
  store i64 %76, i64* %78, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %44, i8 0, i64 24, i1 false) #8
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %57, i64 1
  %80 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %79 to i64
  %81 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %56 to i64*
  store i64 %80, i64* %81, align 8
  br label %89

82:                                               ; preds = %55
  %83 = getelementptr inbounds %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser", %"class.sh::(anonymous namespace)::SeparateDeclarationsTraverser"* %0, i64 0, i32 0, i32 7
  call void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector"* %83, %"class.sh::TIntermBlock"** nonnull dereferenceable(8) %5, %"class.sh::TIntermDeclaration"** nonnull dereferenceable(8) %4, %"class.sh::TVector"* nonnull dereferenceable(24) %6) #8
  %84 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %45, align 16
  %85 = icmp eq %"class.sh::TIntermNode"** %84, null
  br i1 %85, label %89, label %86

86:                                               ; preds = %82
  %87 = ptrtoint %"class.sh::TIntermNode"** %84 to i64
  %88 = bitcast %"class.sh::TIntermNode"*** %46 to i64*
  store i64 %87, i64* %88, align 8
  br label %89

89:                                               ; preds = %61, %82, %86
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %44) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #8
  br label %355

90:                                               ; preds = %51, %348
  %91 = phi i64 [ 0, %51 ], [ %349, %348 ]
  %92 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %93 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %92, i64 56) #8
  %94 = bitcast i8* %93 to i32 (...)***
  %95 = getelementptr inbounds i8, i8* %93, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 16, i1 false) #8
  %96 = getelementptr inbounds i8, i8* %93, i64 24
  %97 = bitcast i8* %96 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %94, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %97, align 8
  %98 = getelementptr inbounds i8, i8* %93, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 24, i1 false) #8
  %99 = load i64, i64* %13, align 8
  %100 = load i64, i64* %15, align 8
  %101 = sub i64 %99, %100
  %102 = ashr exact i64 %101, 3
  %103 = icmp ugt i64 %102, %91
  br i1 %103, label %106, label %104

104:                                              ; preds = %90
  %105 = bitcast %"class.sh::TVector"* %11 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %105) #9
  unreachable

106:                                              ; preds = %90
  %107 = bitcast i8* %93 to %"class.sh::TIntermDeclaration"*
  %108 = inttoptr i64 %100 to %"class.sh::TIntermNode"**
  %109 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 %91
  %110 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %109, align 8
  %111 = bitcast %"class.sh::TIntermNode"* %110 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %112 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %111, align 8
  %113 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %112, i64 4
  %114 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %113, align 8
  %115 = tail call %"class.sh::TIntermTyped"* %114(%"class.sh::TIntermNode"* %110) #8
  tail call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %107, %"class.sh::TIntermTyped"* %115) #8
  %116 = load i64, i64* %13, align 8
  %117 = load i64, i64* %15, align 8
  %118 = sub i64 %116, %117
  %119 = ashr exact i64 %118, 3
  %120 = icmp ugt i64 %119, %91
  br i1 %120, label %123, label %121

121:                                              ; preds = %106
  %122 = bitcast %"class.sh::TVector"* %11 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %122) #9
  unreachable

123:                                              ; preds = %106
  %124 = inttoptr i64 %117 to %"class.sh::TIntermNode"**
  %125 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %124, i64 %91
  %126 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %125, align 8
  %127 = getelementptr inbounds %"class.sh::TIntermNode", %"class.sh::TIntermNode"* %126, i64 0, i32 1
  %128 = bitcast %"struct.sh::TSourceLoc"* %127 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 4 %128, i64 16, i1 false) #8
  %129 = ptrtoint i8* %93 to i64
  %130 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %46, align 8
  %131 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %47, align 16
  %132 = icmp ult %"class.sh::TIntermNode"** %130, %131
  %133 = ptrtoint %"class.sh::TIntermNode"** %131 to i64
  br i1 %132, label %134, label %138

134:                                              ; preds = %123
  %135 = bitcast %"class.sh::TIntermNode"** %130 to i64*
  store i64 %129, i64* %135, align 8
  %136 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %130, i64 1
  %137 = ptrtoint %"class.sh::TIntermNode"** %136 to i64
  store i64 %137, i64* %52, align 8
  br label %348

138:                                              ; preds = %123
  %139 = ptrtoint %"class.sh::TIntermNode"** %130 to i64
  %140 = load i64, i64* %53, align 16
  %141 = sub i64 %139, %140
  %142 = ashr exact i64 %141, 3
  %143 = add nsw i64 %142, 1
  %144 = icmp ugt i64 %143, 2305843009213693951
  br i1 %144, label %145, label %147

145:                                              ; preds = %138
  %146 = bitcast %"class.sh::TVector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %146) #9
  unreachable

147:                                              ; preds = %138
  %148 = sub i64 %133, %140
  %149 = ashr exact i64 %148, 3
  %150 = icmp ult i64 %149, 1152921504606846975
  br i1 %150, label %151, label %156

151:                                              ; preds = %147
  %152 = ashr exact i64 %148, 2
  %153 = icmp ult i64 %152, %143
  %154 = select i1 %153, i64 %143, i64 %152
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %162, label %156

156:                                              ; preds = %151, %147
  %157 = phi i64 [ %154, %151 ], [ 2305843009213693951, %147 ]
  %158 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %159 = shl i64 %157, 3
  %160 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %158, i64 %159) #8
  %161 = bitcast i8* %160 to %"class.sh::TIntermNode"**
  br label %162

162:                                              ; preds = %156, %151
  %163 = phi i64 [ %157, %156 ], [ 0, %151 ]
  %164 = phi %"class.sh::TIntermNode"** [ %161, %156 ], [ null, %151 ]
  %165 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 %142
  %166 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 %163
  %167 = ptrtoint %"class.sh::TIntermNode"** %166 to i64
  %168 = bitcast %"class.sh::TIntermNode"** %165 to i64*
  store i64 %129, i64* %168, align 8
  %169 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 1
  %170 = ptrtoint %"class.sh::TIntermNode"** %169 to i64
  %171 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %45, align 16
  %172 = ptrtoint %"class.sh::TIntermNode"** %171 to i64
  %173 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %46, align 8
  %174 = icmp eq %"class.sh::TIntermNode"** %173, %171
  br i1 %174, label %345, label %175

175:                                              ; preds = %162
  %176 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %173, i64 -1
  %177 = ptrtoint %"class.sh::TIntermNode"** %176 to i64
  %178 = sub i64 %177, %172
  %179 = lshr i64 %178, 3
  %180 = add nuw nsw i64 %179, 1
  %181 = icmp ult i64 %180, 4
  br i1 %181, label %275, label %182

182:                                              ; preds = %175
  %183 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 -1
  %184 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %173, i64 -1
  %185 = ptrtoint %"class.sh::TIntermNode"** %184 to i64
  %186 = sub i64 %185, %172
  %187 = lshr i64 %186, 3
  %188 = sub nsw i64 %142, %187
  %189 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 %188
  %190 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %173, i64 -1
  %191 = sub nsw i64 0, %187
  %192 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %190, i64 %191
  %193 = icmp ult %"class.sh::TIntermNode"** %189, %173
  %194 = icmp ult %"class.sh::TIntermNode"** %192, %165
  %195 = and i1 %193, %194
  br i1 %195, label %275, label %196

196:                                              ; preds = %182
  %197 = and i64 %180, 4611686018427387900
  %198 = sub nsw i64 0, %197
  %199 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 %198
  %200 = sub nsw i64 0, %197
  %201 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %173, i64 %200
  %202 = add nsw i64 %197, -4
  %203 = lshr exact i64 %202, 2
  %204 = add nuw nsw i64 %203, 1
  %205 = and i64 %204, 1
  %206 = icmp eq i64 %202, 0
  br i1 %206, label %251, label %207

207:                                              ; preds = %196
  %208 = sub nuw nsw i64 %204, %205
  %209 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -1
  %210 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %173, i64 -1
  %211 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -1
  %212 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %173, i64 -1
  br label %213

213:                                              ; preds = %213, %207
  %214 = phi i64 [ 0, %207 ], [ %248, %213 ]
  %215 = phi i64 [ %208, %207 ], [ %249, %213 ]
  %216 = sub i64 0, %214
  %217 = sub i64 0, %214
  %218 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %209, i64 %216
  %219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %210, i64 %217
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %219, i64 -1
  %221 = bitcast %"class.sh::TIntermNode"** %220 to <2 x i64>*
  %222 = load <2 x i64>, <2 x i64>* %221, align 8, !alias.scope !2
  %223 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %219, i64 -2
  %224 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %225 = bitcast %"class.sh::TIntermNode"** %224 to <2 x i64>*
  %226 = load <2 x i64>, <2 x i64>* %225, align 8, !alias.scope !2
  %227 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -1
  %228 = bitcast %"class.sh::TIntermNode"** %227 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %228, align 8, !alias.scope !5, !noalias !2
  %229 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 -2
  %230 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %229, i64 -1
  %231 = bitcast %"class.sh::TIntermNode"** %230 to <2 x i64>*
  store <2 x i64> %226, <2 x i64>* %231, align 8, !alias.scope !5, !noalias !2
  %232 = sub nuw nsw i64 -4, %214
  %233 = sub nuw nsw i64 -4, %214
  %234 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %211, i64 %232
  %235 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %212, i64 %233
  %236 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %235, i64 -1
  %237 = bitcast %"class.sh::TIntermNode"** %236 to <2 x i64>*
  %238 = load <2 x i64>, <2 x i64>* %237, align 8, !alias.scope !2
  %239 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %235, i64 -2
  %240 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %239, i64 -1
  %241 = bitcast %"class.sh::TIntermNode"** %240 to <2 x i64>*
  %242 = load <2 x i64>, <2 x i64>* %241, align 8, !alias.scope !2
  %243 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %234, i64 -1
  %244 = bitcast %"class.sh::TIntermNode"** %243 to <2 x i64>*
  store <2 x i64> %238, <2 x i64>* %244, align 8, !alias.scope !5, !noalias !2
  %245 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %234, i64 -2
  %246 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %245, i64 -1
  %247 = bitcast %"class.sh::TIntermNode"** %246 to <2 x i64>*
  store <2 x i64> %242, <2 x i64>* %247, align 8, !alias.scope !5, !noalias !2
  %248 = add i64 %214, 8
  %249 = add i64 %215, -2
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %251, label %213, !llvm.loop !7

251:                                              ; preds = %213, %196
  %252 = phi i64 [ 0, %196 ], [ %248, %213 ]
  %253 = icmp eq i64 %205, 0
  br i1 %253, label %273, label %254

254:                                              ; preds = %251
  %255 = sub i64 0, %252
  %256 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -1
  %257 = sub i64 0, %252
  %258 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %173, i64 -1
  %259 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 %255
  %260 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %258, i64 %257
  %261 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %260, i64 -1
  %262 = bitcast %"class.sh::TIntermNode"** %261 to <2 x i64>*
  %263 = load <2 x i64>, <2 x i64>* %262, align 8, !alias.scope !2
  %264 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %260, i64 -2
  %265 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 -1
  %266 = bitcast %"class.sh::TIntermNode"** %265 to <2 x i64>*
  %267 = load <2 x i64>, <2 x i64>* %266, align 8, !alias.scope !2
  %268 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %259, i64 -1
  %269 = bitcast %"class.sh::TIntermNode"** %268 to <2 x i64>*
  store <2 x i64> %263, <2 x i64>* %269, align 8, !alias.scope !5, !noalias !2
  %270 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %259, i64 -2
  %271 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -1
  %272 = bitcast %"class.sh::TIntermNode"** %271 to <2 x i64>*
  store <2 x i64> %267, <2 x i64>* %272, align 8, !alias.scope !5, !noalias !2
  br label %273

273:                                              ; preds = %251, %254
  %274 = icmp eq i64 %180, %197
  br i1 %274, label %345, label %275

275:                                              ; preds = %273, %182, %175
  %276 = phi %"class.sh::TIntermNode"** [ %165, %182 ], [ %165, %175 ], [ %199, %273 ]
  %277 = phi %"class.sh::TIntermNode"** [ %173, %182 ], [ %173, %175 ], [ %201, %273 ]
  %278 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %277, i64 -1
  %279 = ptrtoint %"class.sh::TIntermNode"** %278 to i64
  %280 = sub i64 %279, %172
  %281 = lshr i64 %280, 3
  %282 = add nuw nsw i64 %281, 1
  %283 = and i64 %282, 7
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %296, label %285

285:                                              ; preds = %275, %285
  %286 = phi %"class.sh::TIntermNode"** [ %289, %285 ], [ %276, %275 ]
  %287 = phi %"class.sh::TIntermNode"** [ %290, %285 ], [ %277, %275 ]
  %288 = phi i64 [ %294, %285 ], [ %283, %275 ]
  %289 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %286, i64 -1
  %290 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %287, i64 -1
  %291 = bitcast %"class.sh::TIntermNode"** %290 to i64*
  %292 = load i64, i64* %291, align 8
  %293 = bitcast %"class.sh::TIntermNode"** %289 to i64*
  store i64 %292, i64* %293, align 8
  %294 = add i64 %288, -1
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %296, label %285, !llvm.loop !9

296:                                              ; preds = %285, %275
  %297 = phi %"class.sh::TIntermNode"** [ undef, %275 ], [ %289, %285 ]
  %298 = phi %"class.sh::TIntermNode"** [ %276, %275 ], [ %289, %285 ]
  %299 = phi %"class.sh::TIntermNode"** [ %277, %275 ], [ %290, %285 ]
  %300 = icmp ult i64 %280, 56
  br i1 %300, label %345, label %301

301:                                              ; preds = %296, %301
  %302 = phi %"class.sh::TIntermNode"** [ %339, %301 ], [ %298, %296 ]
  %303 = phi %"class.sh::TIntermNode"** [ %340, %301 ], [ %299, %296 ]
  %304 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %302, i64 -1
  %305 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %303, i64 -1
  %306 = bitcast %"class.sh::TIntermNode"** %305 to i64*
  %307 = load i64, i64* %306, align 8
  %308 = bitcast %"class.sh::TIntermNode"** %304 to i64*
  store i64 %307, i64* %308, align 8
  %309 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %302, i64 -2
  %310 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %303, i64 -2
  %311 = bitcast %"class.sh::TIntermNode"** %310 to i64*
  %312 = load i64, i64* %311, align 8
  %313 = bitcast %"class.sh::TIntermNode"** %309 to i64*
  store i64 %312, i64* %313, align 8
  %314 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %302, i64 -3
  %315 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %303, i64 -3
  %316 = bitcast %"class.sh::TIntermNode"** %315 to i64*
  %317 = load i64, i64* %316, align 8
  %318 = bitcast %"class.sh::TIntermNode"** %314 to i64*
  store i64 %317, i64* %318, align 8
  %319 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %302, i64 -4
  %320 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %303, i64 -4
  %321 = bitcast %"class.sh::TIntermNode"** %320 to i64*
  %322 = load i64, i64* %321, align 8
  %323 = bitcast %"class.sh::TIntermNode"** %319 to i64*
  store i64 %322, i64* %323, align 8
  %324 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %302, i64 -5
  %325 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %303, i64 -5
  %326 = bitcast %"class.sh::TIntermNode"** %325 to i64*
  %327 = load i64, i64* %326, align 8
  %328 = bitcast %"class.sh::TIntermNode"** %324 to i64*
  store i64 %327, i64* %328, align 8
  %329 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %302, i64 -6
  %330 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %303, i64 -6
  %331 = bitcast %"class.sh::TIntermNode"** %330 to i64*
  %332 = load i64, i64* %331, align 8
  %333 = bitcast %"class.sh::TIntermNode"** %329 to i64*
  store i64 %332, i64* %333, align 8
  %334 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %302, i64 -7
  %335 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %303, i64 -7
  %336 = bitcast %"class.sh::TIntermNode"** %335 to i64*
  %337 = load i64, i64* %336, align 8
  %338 = bitcast %"class.sh::TIntermNode"** %334 to i64*
  store i64 %337, i64* %338, align 8
  %339 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %302, i64 -8
  %340 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %303, i64 -8
  %341 = bitcast %"class.sh::TIntermNode"** %340 to i64*
  %342 = load i64, i64* %341, align 8
  %343 = bitcast %"class.sh::TIntermNode"** %339 to i64*
  store i64 %342, i64* %343, align 8
  %344 = icmp eq %"class.sh::TIntermNode"** %340, %171
  br i1 %344, label %345, label %301, !llvm.loop !11

345:                                              ; preds = %296, %301, %273, %162
  %346 = phi %"class.sh::TIntermNode"** [ %165, %162 ], [ %199, %273 ], [ %297, %296 ], [ %339, %301 ]
  %347 = ptrtoint %"class.sh::TIntermNode"** %346 to i64
  store i64 %347, i64* %53, align 16
  store i64 %170, i64* %52, align 8
  store i64 %167, i64* %54, align 16
  br label %348

348:                                              ; preds = %134, %345
  %349 = add nuw i64 %91, 1
  %350 = load i64, i64* %13, align 8
  %351 = load i64, i64* %15, align 8
  %352 = sub i64 %350, %351
  %353 = ashr exact i64 %352, 3
  %354 = icmp ult i64 %349, %353
  br i1 %354, label %90, label %55

355:                                              ; preds = %89, %3
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector"*, %"class.sh::TIntermBlock"** dereferenceable(8), %"class.sh::TIntermDeclaration"** dereferenceable(8), %"class.sh::TVector"* dereferenceable(24)) local_unnamed_addr #4 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 40
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #9
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 40
  %22 = icmp ult i64 %21, 230584300921369395
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 461168601842738790, %16 ]
  %30 = mul i64 %29, 40
  %31 = tail call i8* @_Znwm(i64 %30) #10
  %32 = bitcast i8* %31 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11
  %37 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %34
  %38 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %37 to i64
  %39 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1, align 8
  %40 = icmp eq %"class.sh::TIntermBlock"* %39, null
  %41 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %39, i64 0, i32 1
  %42 = select i1 %40, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %41
  %43 = bitcast %"class.sh::TIntermDeclaration"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %42, %"class.sh::TIntermAggregateBase"** %45, align 8
  %46 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 1
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i64*
  store i64 %44, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2
  %49 = bitcast %"class.sh::TVector"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #8
  %50 = bitcast %"class.sh::TVector"* %3 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.sh::TVector"* %48 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 1
  %54 = bitcast %"class.sh::TIntermNode"*** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 1
  %57 = bitcast %"class.sh::TIntermNode"*** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"class.sh::TIntermNode"*** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast %"class.sh::TVector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #8
  %64 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 1
  %65 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %66, align 8
  %68 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  %69 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %68, %67
  br i1 %69, label %70, label %72

70:                                               ; preds = %33
  %71 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %67 to i64
  br label %100

72:                                               ; preds = %33, %72
  %73 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %75, %72 ], [ %36, %33 ]
  %74 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %76, %72 ], [ %68, %33 ]
  %75 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1
  %76 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1
  %77 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %75 to i8*
  %78 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #8
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2
  %81 = bitcast %"class.sh::TVector"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #8
  %82 = bitcast %"class.sh::TVector"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.sh::TVector"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 1
  %86 = bitcast %"class.sh::TIntermNode"*** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 1
  %89 = bitcast %"class.sh::TIntermNode"*** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.sh::TIntermNode"*** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.sh::TIntermNode"*** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.sh::TVector"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #8
  %96 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76, %67
  br i1 %96, label %97, label %72

97:                                               ; preds = %72
  %98 = load i64, i64* %8, align 8
  %99 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  br label %100

100:                                              ; preds = %70, %97
  %101 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %67, %70 ], [ %99, %97 ]
  %102 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %36, %70 ], [ %75, %97 ]
  %103 = phi i64 [ %71, %70 ], [ %98, %97 ]
  %104 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %102 to i64
  store i64 %104, i64* %8, align 8
  store i64 %65, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %105 = inttoptr i64 %103 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  %106 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %101, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %100, %117
  %108 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %109, %117 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 0
  %111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %110, align 8
  %112 = icmp eq %"class.sh::TIntermNode"** %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %115 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 1
  %116 = bitcast %"class.sh::TIntermNode"*** %115 to i64*
  store i64 %114, i64* %116, align 8
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #10
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
