; ModuleID = '../../third_party/brotli/enc/literal_cost.c'
source_filename = "../../third_party/brotli/enc/literal_cost.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@kBrotliLog2Table = external hidden local_unnamed_addr constant [256 x double], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliEstimateBitCostsForLiterals(i64, i64, i64, i8*, float* nocapture) local_unnamed_addr #0 {
  %6 = alloca [3 x i64], align 16
  %7 = alloca [3 x [256 x i64]], align 16
  %8 = alloca [3 x i64], align 16
  %9 = alloca [256 x i64], align 16
  %10 = tail call i32 @BrotliIsMostlyUTF8(i8* %3, i64 %0, i64 %2, i64 %1, double 7.500000e-01) #4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %226, label %12

12:                                               ; preds = %5
  %13 = bitcast [3 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 0, i64 24, i1 false) #4
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %41, label %15

15:                                               ; preds = %12, %29
  %16 = phi i64 [ %34, %29 ], [ 0, %12 ]
  %17 = phi i64 [ %22, %29 ], [ 0, %12 ]
  %18 = add i64 %16, %0
  %19 = and i64 %18, %2
  %20 = getelementptr inbounds i8, i8* %3, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i64
  %23 = icmp sgt i8 %21, -1
  br i1 %23, label %29, label %24

24:                                               ; preds = %15
  %25 = icmp ugt i8 %21, -65
  br i1 %25, label %29, label %26

26:                                               ; preds = %24
  %27 = icmp ult i64 %17, 224
  %28 = select i1 %27, i64 0, i64 2
  br label %29

29:                                               ; preds = %26, %24, %15
  %30 = phi i64 [ 0, %15 ], [ 1, %24 ], [ %28, %26 ]
  %31 = getelementptr inbounds [3 x i64], [3 x i64]* %6, i64 0, i64 %30
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, 1
  store i64 %33, i64* %31, align 8
  %34 = add nuw i64 %16, 1
  %35 = icmp eq i64 %34, %1
  br i1 %35, label %36, label %15

36:                                               ; preds = %29
  %37 = getelementptr inbounds [3 x i64], [3 x i64]* %6, i64 0, i64 2
  %38 = load i64, i64* %37, align 16
  %39 = getelementptr inbounds [3 x i64], [3 x i64]* %6, i64 0, i64 1
  %40 = load i64, i64* %39, align 8
  br label %41

41:                                               ; preds = %36, %12
  %42 = phi i64 [ %40, %36 ], [ 0, %12 ]
  %43 = phi i64 [ %38, %36 ], [ 0, %12 ]
  %44 = add i64 %43, %42
  %45 = icmp ugt i64 %44, 24
  %46 = zext i1 %45 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #4
  %47 = bitcast [3 x [256 x i64]]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 6144, i8* nonnull %47) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %47, i8 0, i64 6144, i1 false) #4
  %48 = icmp ult i64 %1, 495
  %49 = select i1 %48, i64 %1, i64 495
  %50 = bitcast [3 x i64]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %50) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %50, i8 0, i64 24, i1 false) #4
  %51 = icmp eq i64 %49, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %75, %41
  br i1 %14, label %225, label %79

53:                                               ; preds = %41, %75
  %54 = phi i64 [ %77, %75 ], [ 0, %41 ]
  %55 = phi i64 [ %61, %75 ], [ 0, %41 ]
  %56 = phi i64 [ %76, %75 ], [ 0, %41 ]
  %57 = add i64 %54, %0
  %58 = and i64 %57, %2
  %59 = getelementptr inbounds i8, i8* %3, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i64
  %62 = getelementptr inbounds [3 x [256 x i64]], [3 x [256 x i64]]* %7, i64 0, i64 %56, i64 %61
  %63 = load i64, i64* %62, align 8
  %64 = add i64 %63, 1
  store i64 %64, i64* %62, align 8
  %65 = getelementptr inbounds [3 x i64], [3 x i64]* %8, i64 0, i64 %56
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %65, align 8
  %68 = icmp sgt i8 %60, -1
  br i1 %68, label %75, label %69

69:                                               ; preds = %53
  %70 = icmp ugt i8 %60, -65
  br i1 %70, label %75, label %71

71:                                               ; preds = %69
  %72 = icmp ugt i64 %55, 223
  %73 = and i1 %45, %72
  %74 = zext i1 %73 to i64
  br label %75

75:                                               ; preds = %71, %69, %53
  %76 = phi i64 [ 0, %53 ], [ %46, %69 ], [ %74, %71 ]
  %77 = add nuw i64 %54, 1
  %78 = icmp ult i64 %77, %49
  br i1 %78, label %53, label %52

79:                                               ; preds = %52, %219
  %80 = phi i64 [ %223, %219 ], [ 0, %52 ]
  %81 = icmp ugt i64 %80, 494
  br i1 %81, label %82, label %119

82:                                               ; preds = %79
  %83 = icmp eq i64 %80, 495
  %84 = add i64 %80, %0
  br i1 %83, label %106, label %85

85:                                               ; preds = %82
  %86 = add i64 %84, -496
  %87 = and i64 %86, %2
  %88 = getelementptr inbounds i8, i8* %3, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = icmp ult i64 %80, 497
  br i1 %90, label %97, label %91

91:                                               ; preds = %85
  %92 = add i64 %84, -497
  %93 = and i64 %92, %2
  %94 = getelementptr inbounds i8, i8* %3, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i64
  br label %97

97:                                               ; preds = %91, %85
  %98 = phi i64 [ %96, %91 ], [ 0, %85 ]
  %99 = icmp sgt i8 %89, -1
  br i1 %99, label %106, label %100

100:                                              ; preds = %97
  %101 = icmp ugt i8 %89, -65
  br i1 %101, label %106, label %102

102:                                              ; preds = %100
  %103 = icmp ugt i64 %98, 223
  %104 = and i1 %45, %103
  %105 = zext i1 %104 to i64
  br label %106

106:                                              ; preds = %102, %100, %97, %82
  %107 = phi i64 [ %105, %102 ], [ %46, %100 ], [ 0, %97 ], [ 0, %82 ]
  %108 = add i64 %84, -495
  %109 = and i64 %108, %2
  %110 = getelementptr inbounds i8, i8* %3, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = getelementptr inbounds [3 x [256 x i64]], [3 x [256 x i64]]* %7, i64 0, i64 %107, i64 %112
  %114 = load i64, i64* %113, align 8
  %115 = add i64 %114, -1
  store i64 %115, i64* %113, align 8
  %116 = getelementptr inbounds [3 x i64], [3 x i64]* %8, i64 0, i64 %107
  %117 = load i64, i64* %116, align 8
  %118 = add i64 %117, -1
  store i64 %118, i64* %116, align 8
  br label %119

119:                                              ; preds = %106, %79
  %120 = add i64 %80, 495
  %121 = icmp ult i64 %120, %1
  %122 = add i64 %80, %0
  br i1 %121, label %123, label %152

123:                                              ; preds = %119
  %124 = add i64 %122, 495
  %125 = add i64 %122, 494
  %126 = and i64 %125, %2
  %127 = getelementptr inbounds i8, i8* %3, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = add i64 %122, 493
  %130 = and i64 %129, %2
  %131 = getelementptr inbounds i8, i8* %3, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = icmp sgt i8 %128, -1
  br i1 %133, label %140, label %134

134:                                              ; preds = %123
  %135 = icmp ugt i8 %128, -65
  br i1 %135, label %140, label %136

136:                                              ; preds = %134
  %137 = icmp ugt i8 %132, -33
  %138 = and i1 %45, %137
  %139 = zext i1 %138 to i64
  br label %140

140:                                              ; preds = %136, %134, %123
  %141 = phi i64 [ 0, %123 ], [ %46, %134 ], [ %139, %136 ]
  %142 = and i64 %124, %2
  %143 = getelementptr inbounds i8, i8* %3, i64 %142
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i64
  %146 = getelementptr inbounds [3 x [256 x i64]], [3 x [256 x i64]]* %7, i64 0, i64 %141, i64 %145
  %147 = load i64, i64* %146, align 8
  %148 = add i64 %147, 1
  store i64 %148, i64* %146, align 8
  %149 = getelementptr inbounds [3 x i64], [3 x i64]* %8, i64 0, i64 %141
  %150 = load i64, i64* %149, align 8
  %151 = add i64 %150, 1
  store i64 %151, i64* %149, align 8
  br label %152

152:                                              ; preds = %119, %140
  %153 = icmp eq i64 %80, 0
  br i1 %153, label %175, label %154

154:                                              ; preds = %152
  %155 = add i64 %122, -1
  %156 = and i64 %155, %2
  %157 = getelementptr inbounds i8, i8* %3, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = icmp eq i64 %80, 1
  br i1 %159, label %166, label %160

160:                                              ; preds = %154
  %161 = add i64 %122, -2
  %162 = and i64 %161, %2
  %163 = getelementptr inbounds i8, i8* %3, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i64
  br label %166

166:                                              ; preds = %160, %154
  %167 = phi i64 [ %165, %160 ], [ 0, %154 ]
  %168 = icmp sgt i8 %158, -1
  br i1 %168, label %175, label %169

169:                                              ; preds = %166
  %170 = icmp ugt i8 %158, -65
  br i1 %170, label %175, label %171

171:                                              ; preds = %169
  %172 = icmp ugt i64 %167, 223
  %173 = and i1 %45, %172
  %174 = zext i1 %173 to i64
  br label %175

175:                                              ; preds = %171, %169, %166, %152
  %176 = phi i64 [ %174, %171 ], [ %46, %169 ], [ 0, %166 ], [ 0, %152 ]
  %177 = and i64 %122, %2
  %178 = getelementptr inbounds i8, i8* %3, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i64
  %181 = getelementptr inbounds [3 x [256 x i64]], [3 x [256 x i64]]* %7, i64 0, i64 %176, i64 %180
  %182 = load i64, i64* %181, align 8
  %183 = icmp eq i64 %182, 0
  %184 = select i1 %183, i64 1, i64 %182
  %185 = getelementptr inbounds [3 x i64], [3 x i64]* %8, i64 0, i64 %176
  %186 = load i64, i64* %185, align 8
  %187 = icmp ult i64 %186, 256
  br i1 %187, label %188, label %191

188:                                              ; preds = %175
  %189 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %186
  %190 = load double, double* %189, align 8
  br label %194

191:                                              ; preds = %175
  %192 = uitofp i64 %186 to double
  %193 = tail call double @log2(double %192) #4
  br label %194

194:                                              ; preds = %191, %188
  %195 = phi double [ %190, %188 ], [ %193, %191 ]
  %196 = icmp ult i64 %184, 256
  br i1 %196, label %197, label %200

197:                                              ; preds = %194
  %198 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %184
  %199 = load double, double* %198, align 8
  br label %203

200:                                              ; preds = %194
  %201 = uitofp i64 %184 to double
  %202 = tail call double @log2(double %201) #4
  br label %203

203:                                              ; preds = %200, %197
  %204 = phi double [ %199, %197 ], [ %202, %200 ]
  %205 = fsub double %195, %204
  %206 = fadd double %205, 2.905000e-02
  %207 = fcmp olt double %206, 1.000000e+00
  %208 = fmul double %206, 5.000000e-01
  %209 = fadd double %208, 5.000000e-01
  %210 = select i1 %207, double %209, double %206
  %211 = icmp ult i64 %80, 2000
  br i1 %211, label %212, label %219

212:                                              ; preds = %203
  %213 = sub nuw nsw i64 2000, %80
  %214 = uitofp i64 %213 to double
  %215 = fdiv double %214, 2.000000e+03
  %216 = fmul double %215, 3.500000e-01
  %217 = fsub double 0x3FE6666666666666, %216
  %218 = fadd double %217, %210
  br label %219

219:                                              ; preds = %212, %203
  %220 = phi double [ %218, %212 ], [ %210, %203 ]
  %221 = fptrunc double %220 to float
  %222 = getelementptr inbounds float, float* %4, i64 %80
  store float %221, float* %222, align 4
  %223 = add nuw i64 %80, 1
  %224 = icmp eq i64 %223, %1
  br i1 %224, label %225, label %79

225:                                              ; preds = %219, %52
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %50) #4
  call void @llvm.lifetime.end.p0i8(i64 6144, i8* nonnull %47) #4
  br label %342

226:                                              ; preds = %5
  %227 = bitcast [256 x i64]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %227) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %227, i8 0, i64 2048, i1 false)
  %228 = icmp ult i64 %1, 2000
  %229 = select i1 %228, i64 %1, i64 2000
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %248, label %231

231:                                              ; preds = %226
  %232 = and i64 %229, 1
  %233 = icmp eq i64 %229, 1
  br i1 %233, label %236, label %234

234:                                              ; preds = %231
  %235 = sub nsw i64 %229, %232
  br label %250

236:                                              ; preds = %250, %231
  %237 = phi i64 [ 0, %231 ], [ %270, %250 ]
  %238 = icmp eq i64 %232, 0
  br i1 %238, label %248, label %239

239:                                              ; preds = %236
  %240 = add i64 %237, %0
  %241 = and i64 %240, %2
  %242 = getelementptr inbounds i8, i8* %3, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = zext i8 %243 to i64
  %245 = getelementptr inbounds [256 x i64], [256 x i64]* %9, i64 0, i64 %244
  %246 = load i64, i64* %245, align 8
  %247 = add i64 %246, 1
  store i64 %247, i64* %245, align 8
  br label %248

248:                                              ; preds = %239, %236, %226
  %249 = icmp eq i64 %1, 0
  br i1 %249, label %341, label %273

250:                                              ; preds = %250, %234
  %251 = phi i64 [ 0, %234 ], [ %270, %250 ]
  %252 = phi i64 [ %235, %234 ], [ %271, %250 ]
  %253 = add i64 %251, %0
  %254 = and i64 %253, %2
  %255 = getelementptr inbounds i8, i8* %3, i64 %254
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i64
  %258 = getelementptr inbounds [256 x i64], [256 x i64]* %9, i64 0, i64 %257
  %259 = load i64, i64* %258, align 8
  %260 = add i64 %259, 1
  store i64 %260, i64* %258, align 8
  %261 = or i64 %251, 1
  %262 = add i64 %261, %0
  %263 = and i64 %262, %2
  %264 = getelementptr inbounds i8, i8* %3, i64 %263
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i64
  %267 = getelementptr inbounds [256 x i64], [256 x i64]* %9, i64 0, i64 %266
  %268 = load i64, i64* %267, align 8
  %269 = add i64 %268, 1
  store i64 %269, i64* %267, align 8
  %270 = add nuw i64 %251, 2
  %271 = add i64 %252, -2
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %236, label %250

273:                                              ; preds = %248, %329
  %274 = phi i64 [ %339, %329 ], [ 0, %248 ]
  %275 = phi i64 [ %304, %329 ], [ %229, %248 ]
  %276 = icmp ugt i64 %274, 1999
  br i1 %276, label %277, label %288

277:                                              ; preds = %273
  %278 = add i64 %274, %0
  %279 = add i64 %278, -2000
  %280 = and i64 %279, %2
  %281 = getelementptr inbounds i8, i8* %3, i64 %280
  %282 = load i8, i8* %281, align 1
  %283 = zext i8 %282 to i64
  %284 = getelementptr inbounds [256 x i64], [256 x i64]* %9, i64 0, i64 %283
  %285 = load i64, i64* %284, align 8
  %286 = add i64 %285, -1
  store i64 %286, i64* %284, align 8
  %287 = add i64 %275, -1
  br label %288

288:                                              ; preds = %277, %273
  %289 = phi i64 [ %287, %277 ], [ %275, %273 ]
  %290 = add i64 %274, 2000
  %291 = icmp ult i64 %290, %1
  %292 = add i64 %274, %0
  br i1 %291, label %293, label %303

293:                                              ; preds = %288
  %294 = add i64 %292, 2000
  %295 = and i64 %294, %2
  %296 = getelementptr inbounds i8, i8* %3, i64 %295
  %297 = load i8, i8* %296, align 1
  %298 = zext i8 %297 to i64
  %299 = getelementptr inbounds [256 x i64], [256 x i64]* %9, i64 0, i64 %298
  %300 = load i64, i64* %299, align 8
  %301 = add i64 %300, 1
  store i64 %301, i64* %299, align 8
  %302 = add i64 %289, 1
  br label %303

303:                                              ; preds = %288, %293
  %304 = phi i64 [ %302, %293 ], [ %289, %288 ]
  %305 = and i64 %292, %2
  %306 = getelementptr inbounds i8, i8* %3, i64 %305
  %307 = load i8, i8* %306, align 1
  %308 = zext i8 %307 to i64
  %309 = getelementptr inbounds [256 x i64], [256 x i64]* %9, i64 0, i64 %308
  %310 = load i64, i64* %309, align 8
  %311 = icmp eq i64 %310, 0
  %312 = select i1 %311, i64 1, i64 %310
  %313 = icmp ult i64 %304, 256
  br i1 %313, label %314, label %317

314:                                              ; preds = %303
  %315 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %304
  %316 = load double, double* %315, align 8
  br label %320

317:                                              ; preds = %303
  %318 = uitofp i64 %304 to double
  %319 = tail call double @log2(double %318) #4
  br label %320

320:                                              ; preds = %314, %317
  %321 = phi double [ %316, %314 ], [ %319, %317 ]
  %322 = icmp ult i64 %312, 256
  br i1 %322, label %323, label %326

323:                                              ; preds = %320
  %324 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %312
  %325 = load double, double* %324, align 8
  br label %329

326:                                              ; preds = %320
  %327 = uitofp i64 %312 to double
  %328 = tail call double @log2(double %327) #4
  br label %329

329:                                              ; preds = %323, %326
  %330 = phi double [ %325, %323 ], [ %328, %326 ]
  %331 = fsub double %321, %330
  %332 = fadd double %331, 2.900000e-02
  %333 = fcmp olt double %332, 1.000000e+00
  %334 = fmul double %332, 5.000000e-01
  %335 = fadd double %334, 5.000000e-01
  %336 = select i1 %333, double %335, double %332
  %337 = fptrunc double %336 to float
  %338 = getelementptr inbounds float, float* %4, i64 %274
  store float %337, float* %338, align 4
  %339 = add nuw i64 %274, 1
  %340 = icmp eq i64 %339, %1
  br i1 %340, label %341, label %273

341:                                              ; preds = %329, %248
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %227) #4
  br label %342

342:                                              ; preds = %225, %341
  ret void
}

declare hidden i32 @BrotliIsMostlyUTF8(i8*, i64, i64, i64, double) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare double @log2(double) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
