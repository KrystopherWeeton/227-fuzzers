; ModuleID = '../../media/video/gpu_video_accelerator_factories.cc'
source_filename = "../../media/video/gpu_video_accelerator_factories.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::GpuVideoAcceleratorFactories" = type { i32 (...)** }
%"class.media::VideoDecoderConfig" = type <{ i32, i32, i32, i32, %"struct.media::VideoTransformation", %"class.gfx::Size", %"class.gfx::Rect", %"class.gfx::Size", %"class.std::__1::vector", i32, %"class.media::VideoColorSpace", %"class.absl::optional", i8, [3 x i8] }>
%"struct.media::VideoTransformation" = type <{ i32, i8, [3 x i8] }>
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.media::VideoColorSpace" = type { i8, i8, i8, i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.gfx::HDRMetadata" }
%"struct.gfx::HDRMetadata" = type { %"struct.gfx::MasteringMetadata", i32, i32 }
%"struct.gfx::MasteringMetadata" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", float, float }
%"class.gfx::PointF" = type { float, float }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5media28GpuVideoAcceleratorFactories24IsDecoderConfigSupportedERKNS_18VideoDecoderConfigE(%"class.media::GpuVideoAcceleratorFactories"*, %"class.media::VideoDecoderConfig"* dereferenceable(144)) local_unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = bitcast %"class.media::GpuVideoAcceleratorFactories"* %0 to i1 (%"class.media::GpuVideoAcceleratorFactories"*)***
  %5 = load i1 (%"class.media::GpuVideoAcceleratorFactories"*)**, i1 (%"class.media::GpuVideoAcceleratorFactories"*)*** %4, align 8
  %6 = getelementptr inbounds i1 (%"class.media::GpuVideoAcceleratorFactories"*)*, i1 (%"class.media::GpuVideoAcceleratorFactories"*)** %5, i64 4
  %7 = load i1 (%"class.media::GpuVideoAcceleratorFactories"*)*, i1 (%"class.media::GpuVideoAcceleratorFactories"*)** %6, align 8
  %8 = tail call zeroext i1 %7(%"class.media::GpuVideoAcceleratorFactories"* %0) #2
  br i1 %8, label %9, label %35

9:                                                ; preds = %2
  %10 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #2
  store i64 4294967296, i64* %3, align 8
  %11 = getelementptr inbounds i64, i64* %3, i64 1
  %12 = bitcast i64* %11 to i32*
  %13 = bitcast %"class.media::GpuVideoAcceleratorFactories"* %0 to i32 (%"class.media::GpuVideoAcceleratorFactories"*, i32, %"class.media::VideoDecoderConfig"*)***
  %14 = load i32 (%"class.media::GpuVideoAcceleratorFactories"*, i32, %"class.media::VideoDecoderConfig"*)**, i32 (%"class.media::GpuVideoAcceleratorFactories"*, i32, %"class.media::VideoDecoderConfig"*)*** %13, align 8
  %15 = getelementptr inbounds i32 (%"class.media::GpuVideoAcceleratorFactories"*, i32, %"class.media::VideoDecoderConfig"*)*, i32 (%"class.media::GpuVideoAcceleratorFactories"*, i32, %"class.media::VideoDecoderConfig"*)** %14, i64 3
  %16 = load i32 (%"class.media::GpuVideoAcceleratorFactories"*, i32, %"class.media::VideoDecoderConfig"*)*, i32 (%"class.media::GpuVideoAcceleratorFactories"*, i32, %"class.media::VideoDecoderConfig"*)** %15, align 8
  %17 = call i32 %16(%"class.media::GpuVideoAcceleratorFactories"* %0, i32 0, %"class.media::VideoDecoderConfig"* dereferenceable(144) %1) #2
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %33, label %19

19:                                               ; preds = %9
  %20 = bitcast i64* %3 to i32*
  %21 = getelementptr inbounds i32, i32* %20, i64 1
  br label %22

22:                                               ; preds = %19, %22
  %23 = phi i32* [ %21, %19 ], [ %30, %22 ]
  %24 = load i32, i32* %23, align 4
  %25 = load i32 (%"class.media::GpuVideoAcceleratorFactories"*, i32, %"class.media::VideoDecoderConfig"*)**, i32 (%"class.media::GpuVideoAcceleratorFactories"*, i32, %"class.media::VideoDecoderConfig"*)*** %13, align 8
  %26 = getelementptr inbounds i32 (%"class.media::GpuVideoAcceleratorFactories"*, i32, %"class.media::VideoDecoderConfig"*)*, i32 (%"class.media::GpuVideoAcceleratorFactories"*, i32, %"class.media::VideoDecoderConfig"*)** %25, i64 3
  %27 = load i32 (%"class.media::GpuVideoAcceleratorFactories"*, i32, %"class.media::VideoDecoderConfig"*)*, i32 (%"class.media::GpuVideoAcceleratorFactories"*, i32, %"class.media::VideoDecoderConfig"*)** %26, align 8
  %28 = call i32 %27(%"class.media::GpuVideoAcceleratorFactories"* %0, i32 %24, %"class.media::VideoDecoderConfig"* dereferenceable(144) %1) #2
  %29 = icmp eq i32 %28, 1
  %30 = getelementptr inbounds i32, i32* %23, i64 1
  %31 = icmp eq i32* %30, %12
  %32 = or i1 %29, %31
  br i1 %32, label %33, label %22

33:                                               ; preds = %22, %9
  %34 = phi i32 [ %17, %9 ], [ %28, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #2
  br label %35

35:                                               ; preds = %2, %33
  %36 = phi i32 [ %34, %33 ], [ 2, %2 ]
  ret i32 %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
