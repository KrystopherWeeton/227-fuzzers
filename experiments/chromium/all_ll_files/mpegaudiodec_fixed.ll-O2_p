; ModuleID = '../../third_party/ffmpeg/libavcodec/mpegaudiodec_fixed.c'
source_filename = "../../third_party/ffmpeg/libavcodec/mpegaudiodec_fixed.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVRational = type { i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type { i32, i32, %struct.AVFrame*, %struct.AVBufferRef*, i8*, %struct.DecodeSimpleContext, %struct.AVBSFContext*, %struct.AVPacket*, %struct.AVFifoBuffer*, i8*, i32, i8*, %struct.EncodeSimpleContext, i32, i8*, i32, %struct.AVPacket*, %struct.AVFrame*, i32, i32, i64, i64, %struct.AVFrame*, %struct.AVPacket*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.DecodeSimpleContext = type { %struct.AVPacket* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVFifoBuffer = type { i8*, i8*, i8*, i8*, i32, i32 }
%struct.EncodeSimpleContext = type { %struct.AVFrame* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVCodecDefault = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.VLC = type { i32, [2 x i16]*, i32, i32 }
%struct.MPADecodeContext = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [1048 x i8], i32, i32, i32, %struct.GetBitContext, %struct.GetBitContext, [16 x i8], [2 x [1024 x i32]], [2 x i32], [24 x i8], [2 x [36 x [32 x i32]]], [2 x [576 x i32]], [2 x [2 x %struct.GranuleDef]], i32, i32, i32, %struct.AVCodecContext*, %struct.MPADSPContext, void (float*, float*, i32)*, %struct.AVFrame*, i32 }
%struct.GetBitContext = type { i8*, i8*, i32, i32, i32 }
%struct.GranuleDef = type { i8, i32, i32, i32, i32, i8, i8, [3 x i32], [3 x i32], i8, i8, [3 x i32], i32, i32, i32, [40 x i8], [12 x i8], [576 x i32] }
%struct.MPADSPContext = type { void (float*, float*, i32*, float*, i64)*, void (i32*, i32*, i32*, i16*, i64)*, void (float*, float*)*, void (i32*, i32*)*, void (float*, float*, float*, i32, i32, i32)*, void (i32*, i32*, i32*, i32, i32, i32)* }
%struct.MPADecodeHeader = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%union.unaligned_32 = type { i32 }

@.str = private unnamed_addr constant [4 x i8] c"mp3\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"MP3 (MPEG audio layer 3)\00", align 1
@.compoundliteral = internal constant [3 x i32] [i32 6, i32 1, i32 -1], align 4
@ff_mp3_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), i32 1, i32 86017, i32 1026, %struct.AVRational* null, i32* null, i32* null, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.compoundliteral, i32 0, i32 0), i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 33056, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @decode_frame, i32 (%struct.AVCodecContext*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* @flush, i32 1, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@decode_init.init_static_once = internal global i32 0, align 4
@scale_factor_mult = internal unnamed_addr global [15 x [3 x i32]] zeroinitializer, align 16
@is_table_lsf = internal unnamed_addr global [2 x [2 x [16 x i32]]] zeroinitializer, align 16
@mpegaudio_tableinit.exp2_lut = internal unnamed_addr constant [4 x double] [double 1.000000e+00, double 0x3FF306FE0A31B715, double 0x3FF6A09E667F3BCD, double 0x3FFAE89F995AD3AD], align 16
@expval_table_fixed = internal unnamed_addr global [512 x [16 x i32]] zeroinitializer, align 16
@exp_table_fixed = internal unnamed_addr global [512 x i32] zeroinitializer, align 16
@.str.3 = private unnamed_addr constant [20 x i8] c"discarding ID3 tag\0A\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"Header missing\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"incomplete frame\0A\00", align 1
@.str.6 = private unnamed_addr constant [51 x i8] c"incorrect frame size - multiple frames in buffer?\0A\00", align 1
@.str.7 = private unnamed_addr constant [40 x i8] c"Error while decoding MPEG audio frame.\0A\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"invalid old backstep %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"invalid new backstep %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"s->frame\00", align 1
@.str.12 = private unnamed_addr constant [60 x i8] c"../../third_party/ffmpeg/libavcodec/mpegaudiodec_template.c\00", align 1
@ff_mpa_synth_window_fixed = external global [0 x i32], align 4
@.str.13 = private unnamed_addr constant [18 x i8] c"CRC mismatch %X!\0A\00", align 1
@ff_scale_factor_modshift = external local_unnamed_addr global [64 x i16], align 16
@ff_mpa_sblimit_table = external local_unnamed_addr constant [5 x i32], align 16
@ff_mpa_alloc_tables = external local_unnamed_addr constant [5 x i8*], align 16
@ff_mpa_quant_bits = external local_unnamed_addr constant [17 x i32], align 16
@ff_division_tabs = external local_unnamed_addr constant [4 x i16*], align 16
@ff_mpa_quant_steps = external local_unnamed_addr constant [17 x i32], align 16
@scale_factor_mult2 = internal unnamed_addr constant [3 x [3 x i32]] [[3 x i32] [i32 11184811, i32 8877390, i32 7045989], [3 x i32] [i32 6710886, i32 5326434, i32 4227594], [3 x i32] [i32 3728270, i32 2959130, i32 2348663]], align 16
@.str.14 = private unnamed_addr constant [20 x i8] c"big_values too big\0A\00", align 1
@.str.15 = private unnamed_addr constant [20 x i8] c"invalid block type\0A\00", align 1
@ff_slen_table = external local_unnamed_addr constant [2 x [16 x i8]], align 16
@ff_lsf_nsf_table = external local_unnamed_addr constant [6 x [3 x [4 x i8]]], align 16
@ff_band_index_long = external local_unnamed_addr global [9 x [23 x i16]], align 16
@.str.16 = private unnamed_addr constant [21 x i8] c"switch point in 8khz\00", align 1
@ff_mdct_win_fixed = external local_unnamed_addr global [8 x [40 x i32]], align 16
@ff_band_size_long = external local_unnamed_addr constant [9 x [22 x i8]], align 16
@ff_mpa_pretab = external local_unnamed_addr constant [2 x [22 x i8]], align 16
@ff_band_size_short = external local_unnamed_addr constant [9 x [13 x i8]], align 16
@ff_mpa_huff_data = external local_unnamed_addr constant [32 x [2 x i8]], align 16
@ff_huff_vlc = external local_unnamed_addr global [16 x %struct.VLC], align 16
@ff_huff_quad_vlc = external local_unnamed_addr global [2 x %struct.VLC], align 16
@.str.17 = private unnamed_addr constant [35 x i8] c"overread, skip %d enddists: %d %d\0A\00", align 1
@huffman_decode.idxtab = internal unnamed_addr constant <{ [8 x i32], [8 x i32] }> <{ [8 x i32] [i32 3, i32 3, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1], [8 x i32] zeroinitializer }>, align 16
@.str.18 = private unnamed_addr constant [14 x i8] c"bits_left=%d\0A\00", align 1
@ff_table_4_3_exp = external local_unnamed_addr global [32828 x i8], align 16
@ff_table_4_3_value = external local_unnamed_addr global [32828 x i32], align 16
@is_table = internal unnamed_addr constant <{ <{ i32, i32, i32, i32, i32, i32, i32, [9 x i32] }>, <{ i32, i32, i32, i32, i32, i32, [10 x i32] }> }> <{ <{ i32, i32, i32, i32, i32, i32, i32, [9 x i32] }> <{ i32 0, i32 1772721, i32 3070444, i32 4194304, i32 5318164, i32 6615887, i32 8388608, [9 x i32] zeroinitializer }>, <{ i32, i32, i32, i32, i32, i32, [10 x i32] }> <{ i32 8388608, i32 6615887, i32 5318164, i32 4194304, i32 3070444, i32 1772721, [10 x i32] zeroinitializer }> }>, align 16

; Function Attrs: cold nounwind optsize ssp uwtable
define internal i32 @decode_init(%struct.AVCodecContext*) #0 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.MPADecodeContext**
  %4 = load %struct.MPADecodeContext*, %struct.MPADecodeContext** %3, align 8
  %5 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %4, i64 0, i32 26
  store %struct.AVCodecContext* %0, %struct.AVCodecContext** %5, align 16
  %6 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %4, i64 0, i32 27
  tail call void @ff_mpadsp_init(%struct.MPADSPContext* %6) #8
  %7 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 92
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %14

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 86030
  br i1 %13, label %14, label %15

14:                                               ; preds = %10, %1
  br label %15

15:                                               ; preds = %10, %14
  %16 = phi i32 [ 6, %14 ], [ 1, %10 ]
  %17 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 84
  store i32 %16, i32* %17, align 8
  %18 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 135
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %4, i64 0, i32 25
  store i32 %19, i32* %20, align 8
  %21 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 4
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 86029
  br i1 %23, label %24, label %26

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %4, i64 0, i32 23
  store i32 1, i32* %25, align 32
  br label %26

26:                                               ; preds = %24, %15
  %27 = tail call i32 @pthread_once(i32* nonnull @decode_init.init_static_once, void ()* nonnull @decode_init_static) #8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @decode_frame(%struct.AVCodecContext*, i8*, i32* nocapture, %struct.AVPacket* nocapture readonly) #1 {
  %5 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %8 = bitcast i8** %7 to %struct.MPADecodeContext**
  %9 = load %struct.MPADecodeContext*, %struct.MPADecodeContext** %8, align 8
  %10 = icmp eq i32 %6, 0
  br i1 %10, label %95, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8
  br label %14

14:                                               ; preds = %11, %20
  %15 = phi i32 [ %23, %20 ], [ 0, %11 ]
  %16 = phi i32 [ %22, %20 ], [ %6, %11 ]
  %17 = phi i8* [ %21, %20 ], [ %13, %11 ]
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %25

20:                                               ; preds = %14
  %21 = getelementptr inbounds i8, i8* %17, i64 1
  %22 = add nsw i32 %16, -1
  %23 = add nuw nsw i32 %15, 1
  %24 = icmp eq i32 %22, 0
  br i1 %24, label %95, label %14

25:                                               ; preds = %14
  %26 = icmp slt i32 %16, 4
  br i1 %26, label %95, label %27

27:                                               ; preds = %25
  %28 = bitcast i8* %17 to i32*
  %29 = load i32, i32* %28, align 1
  %30 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %29) #9, !srcloc !2
  %31 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 4669780) #9, !srcloc !2
  %32 = xor i32 %31, %30
  %33 = icmp ult i32 %32, 256
  br i1 %33, label %34, label %37

34:                                               ; preds = %27
  %35 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %35, i32 48, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0)) #8
  %36 = add nsw i32 %15, %16
  br label %95

37:                                               ; preds = %27
  %38 = bitcast %struct.MPADecodeContext* %9 to %struct.MPADecodeHeader*
  %39 = tail call i32 @avpriv_mpegaudio_decode_header(%struct.MPADecodeHeader* %38, i32 %30) #8
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %37
  %42 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %42, i32 16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0)) #8
  br label %95

43:                                               ; preds = %37
  %44 = icmp eq i32 %39, 1
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %9, i64 0, i32 0
  store i32 -1, i32* %46, align 32
  br label %95

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %9, i64 0, i32 6
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 83
  store i32 %49, i32* %50, align 4
  %51 = load i32, i32* %48, align 8
  %52 = icmp eq i32 %51, 1
  %53 = select i1 %52, i64 4, i64 3
  %54 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 89
  store i64 %53, i64* %54, align 8
  %55 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 9
  %56 = load i64, i64* %55, align 8
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %62

58:                                               ; preds = %47
  %59 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %9, i64 0, i32 5
  %60 = load i32, i32* %59, align 4
  %61 = sext i32 %60 to i64
  store i64 %61, i64* %55, align 8
  br label %62

62:                                               ; preds = %47, %58
  %63 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %9, i64 0, i32 0
  %64 = load i32, i32* %63, align 32
  %65 = icmp slt i32 %64, 1
  br i1 %65, label %66, label %68

66:                                               ; preds = %62
  %67 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %67, i32 16, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %95

68:                                               ; preds = %62
  %69 = icmp slt i32 %64, %16
  br i1 %69, label %70, label %73

70:                                               ; preds = %68
  %71 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %71, i32 48, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.6, i64 0, i64 0)) #8
  %72 = load i32, i32* %63, align 32
  br label %73

73:                                               ; preds = %68, %70
  %74 = phi i32 [ %72, %70 ], [ %16, %68 ]
  %75 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %9, i64 0, i32 29
  %76 = bitcast %struct.AVFrame** %75 to i8**
  store i8* %1, i8** %76, align 16
  %77 = tail call fastcc i32 @mp_decode_frame(%struct.MPADecodeContext* %9, i8* %17, i32 %74)
  %78 = icmp sgt i32 %77, -1
  br i1 %78, label %79, label %87

79:                                               ; preds = %73
  %80 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 85
  %81 = load i32, i32* %80, align 4
  %82 = load %struct.AVFrame*, %struct.AVFrame** %75, align 16
  %83 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %82, i64 0, i32 5
  store i32 %81, i32* %83, align 8
  store i32 1, i32* %2, align 4
  %84 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %9, i64 0, i32 3
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 82
  store i32 %85, i32* %86, align 8
  br label %93

87:                                               ; preds = %73
  %88 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %88, i32 16, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i64 0, i64 0)) #8
  store i32 0, i32* %2, align 4
  %89 = load i32, i32* %5, align 8
  %90 = icmp eq i32 %74, %89
  %91 = icmp ne i32 %77, -1094995529
  %92 = or i1 %91, %90
  br i1 %92, label %95, label %93

93:                                               ; preds = %87, %79
  store i32 0, i32* %63, align 32
  %94 = add nsw i32 %74, %15
  br label %95

95:                                               ; preds = %20, %4, %87, %25, %93, %66, %45, %41, %34
  %96 = phi i32 [ %36, %34 ], [ -1094995529, %41 ], [ -1094995529, %45 ], [ -1094995529, %66 ], [ %94, %93 ], [ -1094995529, %25 ], [ %77, %87 ], [ -1094995529, %4 ], [ -1094995529, %20 ]
  ret i32 %96
}

; Function Attrs: nounwind ssp uwtable
define internal void @flush(%struct.AVCodecContext* nocapture readonly) #1 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.MPADecodeContext**
  %4 = load %struct.MPADecodeContext*, %struct.MPADecodeContext** %3, align 8
  %5 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %4, i64 0, i32 17, i64 0
  %6 = bitcast [1024 x i32]* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 32 %6, i8 0, i64 8192, i1 false) #8
  %7 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %4, i64 0, i32 21, i64 0
  %8 = bitcast [576 x i32]* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 32 %8, i8 0, i64 4608, i1 false) #8
  %9 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %4, i64 0, i32 11
  store i32 0, i32* %9, align 32
  %10 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %4, i64 0, i32 24
  store i32 0, i32* %10, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @ff_mpadsp_init(%struct.MPADSPContext*) local_unnamed_addr #3

declare i32 @pthread_once(i32*, void ()*) local_unnamed_addr #3

; Function Attrs: cold nounwind optsize ssp uwtable
define internal void @decode_init_static() #0 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %22, %1 ]
  %3 = shl i64 33554432, %2
  %4 = trunc i64 %2 to i32
  %5 = shl i32 4, %4
  %6 = add nsw i32 %5, -1
  %7 = sext i32 %6 to i64
  %8 = sdiv i64 %3, %7
  %9 = shl i64 %8, 32
  %10 = ashr exact i64 %9, 32
  %11 = trunc i64 %8 to i32
  %12 = shl i32 %11, 1
  %13 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %2, i64 0
  store i32 %12, i32* %13, align 4
  %14 = mul nsw i64 %10, 13316085
  %15 = lshr i64 %14, 23
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %2, i64 1
  store i32 %16, i32* %17, align 4
  %18 = mul nsw i64 %10, 10568984
  %19 = lshr i64 %18, 23
  %20 = trunc i64 %19 to i32
  %21 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %2, i64 2
  store i32 %20, i32* %21, align 4
  %22 = add nuw nsw i64 %2, 1
  %23 = icmp eq i64 %22, 15
  br i1 %23, label %24, label %1

24:                                               ; preds = %1
  tail call fastcc void @mpegaudio_tableinit() #10
  br label %25

25:                                               ; preds = %51, %24
  %26 = phi i64 [ 0, %24 ], [ %27, %51 ]
  %27 = add nuw nsw i64 %26, 1
  %28 = trunc i64 %27 to i32
  %29 = lshr i32 %28, 1
  %30 = trunc i64 %26 to i32
  %31 = and i32 %30, 1
  %32 = xor i32 %31, 1
  %33 = zext i32 %32 to i64
  %34 = zext i32 %31 to i64
  br label %35

35:                                               ; preds = %35, %25
  %36 = phi i64 [ 0, %25 ], [ %38, %35 ]
  %37 = phi i32 [ 0, %25 ], [ %39, %35 ]
  %38 = add nuw nsw i64 %36, 1
  %39 = add nuw nsw i32 %37, 1
  %40 = xor i32 %37, -1
  %41 = mul nsw i32 %29, %40
  %42 = sitofp i32 %41 to double
  %43 = fmul nsz double %42, 2.500000e-01
  %44 = tail call nsz double @llvm.exp2.f64(double %43)
  %45 = fmul nsz double %44, 0x4160000000000000
  %46 = fadd nsz double %45, 5.000000e-01
  %47 = fptosi double %46 to i32
  %48 = getelementptr inbounds [2 x [2 x [16 x i32]]], [2 x [2 x [16 x i32]]]* @is_table_lsf, i64 0, i64 %36, i64 %33, i64 %26
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds [2 x [2 x [16 x i32]]], [2 x [2 x [16 x i32]]]* @is_table_lsf, i64 0, i64 %36, i64 %34, i64 %26
  store i32 8388608, i32* %49, align 4
  %50 = icmp eq i64 %38, 2
  br i1 %50, label %51, label %35

51:                                               ; preds = %35
  %52 = icmp eq i64 %27, 16
  br i1 %52, label %53, label %25

53:                                               ; preds = %51
  tail call void @ff_mpa_synth_init_fixed() #8
  tail call void @ff_mpegaudiodec_common_init_static() #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: cold nounwind optsize ssp uwtable
define internal fastcc void @mpegaudio_tableinit() unnamed_addr #0 {
  %1 = alloca [16 x double], align 16
  %2 = bitcast [16 x double]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %2) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2, i8 -1, i64 128, i1 false)
  br label %3

3:                                                ; preds = %3, %0
  %4 = phi i64 [ 0, %0 ], [ %10, %3 ]
  %5 = trunc i64 %4 to i32
  %6 = sitofp i32 %5 to double
  %7 = tail call nsz double @cbrt(double %6) #9
  %8 = fmul nsz double %7, %6
  %9 = getelementptr inbounds [16 x double], [16 x double]* %1, i64 0, i64 %4
  store double %8, double* %9, align 8
  %10 = add nuw nsw i64 %4, 1
  %11 = icmp eq i64 %10, 16
  br i1 %11, label %12, label %3

12:                                               ; preds = %3, %39
  %13 = phi i64 [ %43, %39 ], [ 0, %3 ]
  %14 = phi double [ %21, %39 ], [ 0x3B70000000000000, %3 ]
  %15 = icmp ne i64 %13, 0
  %16 = trunc i64 %13 to i32
  %17 = and i32 %16, 3
  %18 = icmp eq i32 %17, 0
  %19 = and i1 %15, %18
  %20 = fmul nsz double %14, 2.000000e+00
  %21 = select i1 %19, double %20, double %14
  %22 = zext i32 %17 to i64
  %23 = getelementptr inbounds [4 x double], [4 x double]* @mpegaudio_tableinit.exp2_lut, i64 0, i64 %22
  %24 = load double, double* %23, align 8
  %25 = fmul nsz double %21, %24
  %26 = fdiv nsz double %25, 1.759000e+00
  br label %27

27:                                               ; preds = %27, %12
  %28 = phi i64 [ 0, %12 ], [ %37, %27 ]
  %29 = getelementptr inbounds [16 x double], [16 x double]* %1, i64 0, i64 %28
  %30 = load double, double* %29, align 8
  %31 = fmul nsz double %26, %30
  %32 = fcmp nsz olt double %31, 0x41EFFFFFFFE00000
  %33 = tail call i64 @llvm.llrint.i64.f64(double %31)
  %34 = trunc i64 %33 to i32
  %35 = select i1 %32, i32 %34, i32 -1
  %36 = getelementptr inbounds [512 x [16 x i32]], [512 x [16 x i32]]* @expval_table_fixed, i64 0, i64 %13, i64 %28
  store i32 %35, i32* %36, align 4
  %37 = add nuw nsw i64 %28, 1
  %38 = icmp eq i64 %37, 16
  br i1 %38, label %39, label %27

39:                                               ; preds = %27
  %40 = getelementptr inbounds [512 x [16 x i32]], [512 x [16 x i32]]* @expval_table_fixed, i64 0, i64 %13, i64 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds [512 x i32], [512 x i32]* @exp_table_fixed, i64 0, i64 %13
  store i32 %41, i32* %42, align 4
  %43 = add nuw nsw i64 %13, 1
  %44 = icmp eq i64 %43, 512
  br i1 %44, label %45, label %12

45:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %2) #8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.exp2.f64(double) #4

declare void @ff_mpa_synth_init_fixed() local_unnamed_addr #3

declare void @ff_mpegaudiodec_common_init_static() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nofree nounwind readnone
declare double @cbrt(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.llrint.i64.f64(double) #4

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #3

declare i32 @avpriv_mpegaudio_decode_header(%struct.MPADecodeHeader*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @mp_decode_frame(%struct.MPADecodeContext*, i8*, i32) unnamed_addr #1 {
  %4 = alloca [2 x [32 x [3 x i8]]], align 16
  %5 = alloca [2 x [32 x i8]], align 16
  %6 = alloca [2 x [32 x i8]], align 16
  %7 = alloca [3 x i32], align 4
  %8 = alloca [576 x i32], align 16
  %9 = alloca [576 x i16], align 16
  %10 = alloca [4 x i32], align 16
  %11 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14
  %12 = getelementptr inbounds i8, i8* %1, i64 4
  %13 = add nsw i32 %2, -4
  %14 = shl nsw i32 %13, 3
  %15 = icmp ult i32 %14, 2147483135
  %16 = icmp ne i8* %12, null
  %17 = and i1 %16, %15
  %18 = select i1 %17, i32 %14, i32 0
  %19 = select i1 %17, i8* %12, i8* null
  %20 = ashr exact i32 %18, 3
  %21 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %11, i64 0, i32 0
  store i8* %19, i8** %21, align 8
  %22 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 3
  store i32 %18, i32* %22, align 4
  %23 = add nuw nsw i32 %18, 8
  %24 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 4
  store i32 %23, i32* %24, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds i8, i8* %19, i64 %25
  %27 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 1
  store i8* %26, i8** %27, align 8
  %28 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 2
  store i32 0, i32* %28, align 8
  %29 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %40, label %32

32:                                               ; preds = %3
  %33 = bitcast i8* %19 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %34) #9, !srcloc !2
  %36 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %35) #9, !srcloc !3
  %37 = icmp ult i32 %23, 16
  %38 = select i1 %37, i32 %23, i32 16
  store i32 %38, i32* %28, align 8
  %39 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 30
  store i32 %36, i32* %39, align 8
  br label %40

40:                                               ; preds = %3, %32
  %41 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 2
  %42 = load i32, i32* %41, align 8
  switch i32 %42, label %1323 [
    i32 1, label %43
    i32 2, label %383
    i32 3, label %1315
  ]

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 26
  %45 = load %struct.AVCodecContext*, %struct.AVCodecContext** %44, align 16
  %46 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %45, i64 0, i32 85
  store i32 384, i32* %46, align 4
  %47 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %47) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %47, i8 -86, i64 64, i1 false) #8
  %48 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %6, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %48) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %48, i8 -86, i64 64, i1 false) #8
  %49 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 6
  %50 = load i32, i32* %49, align 8
  %51 = icmp eq i32 %50, 1
  %52 = select i1 %51, i32 128, i32 256
  %53 = tail call fastcc i32 @handle_crc(%struct.MPADecodeContext* %0, i32 %52) #8
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %381, label %55

55:                                               ; preds = %43
  %56 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 7
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 1
  br i1 %58, label %59, label %65

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 8
  %61 = load i32, i32* %60, align 32
  %62 = shl i32 %61, 2
  %63 = add i32 %62, 4
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %65, label %80

65:                                               ; preds = %59, %55
  %66 = phi i32 [ %63, %59 ], [ 32, %55 ]
  %67 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 0
  %68 = zext i32 %66 to i64
  %69 = load i32, i32* %49, align 8
  %70 = icmp sgt i32 %69, 0
  %71 = sext i32 %69 to i64
  br label %72

72:                                               ; preds = %107, %65
  %73 = phi i64 [ 0, %65 ], [ %108, %107 ]
  br i1 %70, label %74, label %107

74:                                               ; preds = %72
  %75 = load i32, i32* %28, align 8
  %76 = load i32, i32* %24, align 8
  %77 = load i8*, i8** %67, align 8
  br label %88

78:                                               ; preds = %107
  %79 = icmp slt i32 %66, 32
  br i1 %79, label %80, label %115

80:                                               ; preds = %78, %59
  %81 = phi i32 [ %66, %78 ], [ %63, %59 ]
  %82 = phi i1 [ true, %78 ], [ false, %59 ]
  %83 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 0
  %84 = sext i32 %81 to i64
  %85 = load i32, i32* %28, align 8
  %86 = load i32, i32* %24, align 8
  %87 = load i8*, i8** %83, align 8
  br label %123

88:                                               ; preds = %88, %74
  %89 = phi i32 [ %75, %74 ], [ %102, %88 ]
  %90 = phi i64 [ 0, %74 ], [ %105, %88 ]
  %91 = lshr i32 %89, 3
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %77, i64 %92
  %94 = bitcast i8* %93 to i32*
  %95 = load i32, i32* %94, align 1
  %96 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %95) #9, !srcloc !2
  %97 = and i32 %89, 7
  %98 = shl i32 %96, %97
  %99 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %98) #9, !srcloc !3
  %100 = add i32 %89, 4
  %101 = icmp ugt i32 %76, %100
  %102 = select i1 %101, i32 %100, i32 %76
  store i32 %102, i32* %28, align 8
  %103 = trunc i32 %99 to i8
  %104 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 %90, i64 %73
  store i8 %103, i8* %104, align 1
  %105 = add nuw nsw i64 %90, 1
  %106 = icmp eq i64 %105, %71
  br i1 %106, label %107, label %88

107:                                              ; preds = %88, %72
  %108 = add nuw nsw i64 %73, 1
  %109 = icmp eq i64 %108, %68
  br i1 %109, label %78, label %72

110:                                              ; preds = %123
  br i1 %82, label %111, label %146

111:                                              ; preds = %110
  %112 = load i32, i32* %49, align 8
  %113 = zext i32 %81 to i64
  %114 = sext i32 %112 to i64
  br label %115

115:                                              ; preds = %111, %78
  %116 = phi i64 [ %114, %111 ], [ %71, %78 ]
  %117 = phi i64 [ %113, %111 ], [ %68, %78 ]
  %118 = phi i32 [ %112, %111 ], [ %69, %78 ]
  %119 = phi i32 [ %81, %111 ], [ %66, %78 ]
  %120 = phi i1 [ true, %111 ], [ false, %78 ]
  %121 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 0
  %122 = icmp sgt i32 %118, 0
  br label %142

123:                                              ; preds = %123, %80
  %124 = phi i32 [ %85, %80 ], [ %137, %123 ]
  %125 = phi i64 [ %84, %80 ], [ %140, %123 ]
  %126 = lshr i32 %124, 3
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %87, i64 %127
  %129 = bitcast i8* %128 to i32*
  %130 = load i32, i32* %129, align 1
  %131 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %130) #9, !srcloc !2
  %132 = and i32 %124, 7
  %133 = shl i32 %131, %132
  %134 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %133) #9, !srcloc !3
  %135 = add i32 %124, 4
  %136 = icmp ugt i32 %86, %135
  %137 = select i1 %136, i32 %135, i32 %86
  store i32 %137, i32* %28, align 8
  %138 = trunc i32 %134 to i8
  %139 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 0, i64 %125
  store i8 %138, i8* %139, align 1
  %140 = add nsw i64 %125, 1
  %141 = icmp eq i64 %140, 32
  br i1 %141, label %110, label %123

142:                                              ; preds = %177, %115
  %143 = phi i64 [ 0, %115 ], [ %178, %177 ]
  br i1 %122, label %151, label %177

144:                                              ; preds = %177
  %145 = sext i32 %119 to i64
  br i1 %120, label %146, label %182

146:                                              ; preds = %144, %110
  %147 = phi i64 [ %84, %110 ], [ %145, %144 ]
  %148 = phi i32 [ %81, %110 ], [ %119, %144 ]
  %149 = phi i1 [ false, %110 ], [ true, %144 ]
  %150 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 0
  br label %188

151:                                              ; preds = %142, %174
  %152 = phi i64 [ %175, %174 ], [ 0, %142 ]
  %153 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 %152, i64 %143
  %154 = load i8, i8* %153, align 1
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %174, label %156

156:                                              ; preds = %151
  %157 = load i32, i32* %28, align 8
  %158 = load i32, i32* %24, align 8
  %159 = load i8*, i8** %121, align 8
  %160 = lshr i32 %157, 3
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds i8, i8* %159, i64 %161
  %163 = bitcast i8* %162 to i32*
  %164 = load i32, i32* %163, align 1
  %165 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %164) #9, !srcloc !2
  %166 = and i32 %157, 7
  %167 = shl i32 %165, %166
  %168 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %167) #9, !srcloc !3
  %169 = add i32 %157, 6
  %170 = icmp ugt i32 %158, %169
  %171 = select i1 %170, i32 %169, i32 %158
  store i32 %171, i32* %28, align 8
  %172 = trunc i32 %168 to i8
  %173 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %6, i64 0, i64 %152, i64 %143
  store i8 %172, i8* %173, align 1
  br label %174

174:                                              ; preds = %156, %151
  %175 = add nuw nsw i64 %152, 1
  %176 = icmp eq i64 %175, %116
  br i1 %176, label %177, label %151

177:                                              ; preds = %174, %142
  %178 = add nuw nsw i64 %143, 1
  %179 = icmp eq i64 %178, %117
  br i1 %179, label %144, label %142

180:                                              ; preds = %225
  %181 = zext i32 %148 to i64
  br label %182

182:                                              ; preds = %144, %180
  %183 = phi i64 [ %181, %180 ], [ %117, %144 ]
  %184 = phi i1 [ true, %180 ], [ false, %144 ]
  %185 = phi i1 [ %149, %180 ], [ true, %144 ]
  %186 = phi i64 [ %147, %180 ], [ %145, %144 ]
  %187 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 0
  br label %228

188:                                              ; preds = %225, %146
  %189 = phi i64 [ %147, %146 ], [ %226, %225 ]
  %190 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 0, i64 %189
  %191 = load i8, i8* %190, align 1
  %192 = icmp eq i8 %191, 0
  br i1 %192, label %225, label %193

193:                                              ; preds = %188
  %194 = load i32, i32* %28, align 8
  %195 = load i32, i32* %24, align 8
  %196 = load i8*, i8** %150, align 8
  %197 = lshr i32 %194, 3
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds i8, i8* %196, i64 %198
  %200 = bitcast i8* %199 to i32*
  %201 = load i32, i32* %200, align 1
  %202 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %201) #9, !srcloc !2
  %203 = and i32 %194, 7
  %204 = shl i32 %202, %203
  %205 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %204) #9, !srcloc !3
  %206 = add i32 %194, 6
  %207 = icmp ugt i32 %195, %206
  %208 = select i1 %207, i32 %206, i32 %195
  store i32 %208, i32* %28, align 8
  %209 = trunc i32 %205 to i8
  %210 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %6, i64 0, i64 0, i64 %189
  store i8 %209, i8* %210, align 1
  %211 = lshr i32 %208, 3
  %212 = zext i32 %211 to i64
  %213 = getelementptr inbounds i8, i8* %196, i64 %212
  %214 = bitcast i8* %213 to i32*
  %215 = load i32, i32* %214, align 1
  %216 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %215) #9, !srcloc !2
  %217 = and i32 %208, 7
  %218 = shl i32 %216, %217
  %219 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %218) #9, !srcloc !3
  %220 = add i32 %208, 6
  %221 = icmp ugt i32 %195, %220
  %222 = select i1 %221, i32 %220, i32 %195
  store i32 %222, i32* %28, align 8
  %223 = trunc i32 %219 to i8
  %224 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %6, i64 0, i64 1, i64 %189
  store i8 %223, i8* %224, align 1
  br label %225

225:                                              ; preds = %193, %188
  %226 = add nsw i64 %189, 1
  %227 = icmp eq i64 %226, 32
  br i1 %227, label %180, label %188

228:                                              ; preds = %378, %182
  %229 = phi i64 [ 0, %182 ], [ %379, %378 ]
  br i1 %185, label %230, label %234

230:                                              ; preds = %228
  %231 = load i32, i32* %49, align 8
  %232 = icmp sgt i32 %231, 0
  %233 = sext i32 %231 to i64
  br label %235

234:                                              ; preds = %294, %228
  br i1 %184, label %297, label %378

235:                                              ; preds = %294, %230
  %236 = phi i64 [ 0, %230 ], [ %295, %294 ]
  br i1 %232, label %237, label %294

237:                                              ; preds = %235, %289
  %238 = phi i64 [ %292, %289 ], [ 0, %235 ]
  %239 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 %238, i64 %236
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i32
  %242 = icmp eq i8 %240, 0
  br i1 %242, label %289, label %243

243:                                              ; preds = %237
  %244 = add nuw nsw i32 %241, 1
  %245 = load i32, i32* %28, align 8
  %246 = load i32, i32* %24, align 8
  %247 = load i8*, i8** %187, align 8
  %248 = lshr i32 %245, 3
  %249 = zext i32 %248 to i64
  %250 = getelementptr inbounds i8, i8* %247, i64 %249
  %251 = bitcast i8* %250 to i32*
  %252 = load i32, i32* %251, align 1
  %253 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %252) #9, !srcloc !2
  %254 = and i32 %245, 7
  %255 = shl i32 %253, %254
  %256 = trunc i32 %244 to i8
  %257 = sub i8 0, %256
  %258 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %257, i32 %255) #9, !srcloc !3
  %259 = add i32 %245, %244
  %260 = icmp ugt i32 %246, %259
  %261 = select i1 %260, i32 %259, i32 %246
  store i32 %261, i32* %28, align 8
  %262 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %6, i64 0, i64 %238, i64 %236
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %263 to i64
  %265 = getelementptr inbounds [64 x i16], [64 x i16]* @ff_scale_factor_modshift, i64 0, i64 %264
  %266 = load i16, i16* %265, align 2
  %267 = zext i16 %266 to i32
  %268 = and i32 %267, 3
  %269 = lshr i32 %267, 2
  %270 = shl i32 -1, %241
  %271 = add i32 %270, 1
  %272 = add i32 %271, %258
  %273 = sext i32 %272 to i64
  %274 = add nsw i32 %241, -1
  %275 = sext i32 %274 to i64
  %276 = zext i32 %268 to i64
  %277 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %275, i64 %276
  %278 = load i32, i32* %277, align 4
  %279 = sext i32 %278 to i64
  %280 = mul nsw i64 %279, %273
  %281 = add nuw nsw i32 %269, %241
  %282 = add nsw i32 %281, -1
  %283 = zext i32 %282 to i64
  %284 = shl i64 1, %283
  %285 = add nsw i64 %284, %280
  %286 = zext i32 %281 to i64
  %287 = ashr i64 %285, %286
  %288 = trunc i64 %287 to i32
  br label %289

289:                                              ; preds = %243, %237
  %290 = phi i32 [ %288, %243 ], [ 0, %237 ]
  %291 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %238, i64 %229, i64 %236
  store i32 %290, i32* %291, align 4
  %292 = add nuw nsw i64 %238, 1
  %293 = icmp eq i64 %292, %233
  br i1 %293, label %294, label %237

294:                                              ; preds = %289, %235
  %295 = add nuw nsw i64 %236, 1
  %296 = icmp eq i64 %295, %183
  br i1 %296, label %234, label %235

297:                                              ; preds = %234, %373
  %298 = phi i64 [ %376, %373 ], [ %186, %234 ]
  %299 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 0, i64 %298
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i32
  %302 = icmp eq i8 %300, 0
  br i1 %302, label %371, label %303

303:                                              ; preds = %297
  %304 = add nuw nsw i32 %301, 1
  %305 = load i32, i32* %28, align 8
  %306 = load i32, i32* %24, align 8
  %307 = load i8*, i8** %187, align 8
  %308 = lshr i32 %305, 3
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds i8, i8* %307, i64 %309
  %311 = bitcast i8* %310 to i32*
  %312 = load i32, i32* %311, align 1
  %313 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %312) #9, !srcloc !2
  %314 = and i32 %305, 7
  %315 = shl i32 %313, %314
  %316 = trunc i32 %304 to i8
  %317 = sub i8 0, %316
  %318 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %317, i32 %315) #9, !srcloc !3
  %319 = add i32 %305, %304
  %320 = icmp ugt i32 %306, %319
  %321 = select i1 %320, i32 %319, i32 %306
  store i32 %321, i32* %28, align 8
  %322 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %6, i64 0, i64 0, i64 %298
  %323 = load i8, i8* %322, align 1
  %324 = zext i8 %323 to i64
  %325 = getelementptr inbounds [64 x i16], [64 x i16]* @ff_scale_factor_modshift, i64 0, i64 %324
  %326 = load i16, i16* %325, align 2
  %327 = zext i16 %326 to i32
  %328 = and i32 %327, 3
  %329 = lshr i32 %327, 2
  %330 = shl i32 -1, %301
  %331 = add i32 %330, 1
  %332 = add i32 %331, %318
  %333 = sext i32 %332 to i64
  %334 = add nsw i32 %301, -1
  %335 = sext i32 %334 to i64
  %336 = zext i32 %328 to i64
  %337 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %335, i64 %336
  %338 = load i32, i32* %337, align 4
  %339 = sext i32 %338 to i64
  %340 = mul nsw i64 %339, %333
  %341 = add nuw nsw i32 %329, %301
  %342 = add nsw i32 %341, -1
  %343 = zext i32 %342 to i64
  %344 = shl i64 1, %343
  %345 = add nsw i64 %344, %340
  %346 = zext i32 %341 to i64
  %347 = ashr i64 %345, %346
  %348 = trunc i64 %347 to i32
  %349 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 0, i64 %229, i64 %298
  store i32 %348, i32* %349, align 4
  %350 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %6, i64 0, i64 1, i64 %298
  %351 = load i8, i8* %350, align 1
  %352 = zext i8 %351 to i64
  %353 = getelementptr inbounds [64 x i16], [64 x i16]* @ff_scale_factor_modshift, i64 0, i64 %352
  %354 = load i16, i16* %353, align 2
  %355 = zext i16 %354 to i32
  %356 = and i32 %355, 3
  %357 = lshr i32 %355, 2
  %358 = zext i32 %356 to i64
  %359 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %335, i64 %358
  %360 = load i32, i32* %359, align 4
  %361 = sext i32 %360 to i64
  %362 = mul nsw i64 %361, %333
  %363 = add nuw nsw i32 %357, %301
  %364 = add nsw i32 %363, -1
  %365 = zext i32 %364 to i64
  %366 = shl i64 1, %365
  %367 = add nsw i64 %366, %362
  %368 = zext i32 %363 to i64
  %369 = ashr i64 %367, %368
  %370 = trunc i64 %369 to i32
  br label %373

371:                                              ; preds = %297
  %372 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 0, i64 %229, i64 %298
  store i32 0, i32* %372, align 4
  br label %373

373:                                              ; preds = %371, %303
  %374 = phi i32 [ %370, %303 ], [ 0, %371 ]
  %375 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 1, i64 %229, i64 %298
  store i32 %374, i32* %375, align 4
  %376 = add nsw i64 %298, 1
  %377 = icmp eq i64 %376, 32
  br i1 %377, label %378, label %297

378:                                              ; preds = %373, %234
  %379 = add nuw nsw i64 %229, 1
  %380 = icmp eq i64 %379, 12
  br i1 %380, label %381, label %228

381:                                              ; preds = %378, %43
  %382 = phi i32 [ %53, %43 ], [ 12, %378 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %48) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %47) #8
  br label %3800

383:                                              ; preds = %40
  %384 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 26
  %385 = load %struct.AVCodecContext*, %struct.AVCodecContext** %384, align 16
  %386 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %385, i64 0, i32 85
  store i32 1152, i32* %386, align 4
  %387 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %387) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %387, i8 -86, i64 64, i1 false) #8
  %388 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %6, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %388) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %388, i8 -86, i64 64, i1 false) #8
  %389 = getelementptr inbounds [2 x [32 x [3 x i8]]], [2 x [32 x [3 x i8]]]* %4, i64 0, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %389) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %389, i8 -86, i64 192, i1 false) #8
  %390 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 5
  %391 = load i32, i32* %390, align 4
  %392 = sdiv i32 %391, 1000
  %393 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 6
  %394 = load i32, i32* %393, align 8
  %395 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 3
  %396 = load i32, i32* %395, align 4
  %397 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 9
  %398 = load i32, i32* %397, align 4
  %399 = tail call i32 @ff_mpa_l2_select_table(i32 %392, i32 %394, i32 %396, i32 %398) #8
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds [5 x i32], [5 x i32]* @ff_mpa_sblimit_table, i64 0, i64 %400
  %402 = load i32, i32* %401, align 4
  %403 = getelementptr inbounds [5 x i8*], [5 x i8*]* @ff_mpa_alloc_tables, i64 0, i64 %400
  %404 = load i8*, i8** %403, align 8
  %405 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 7
  %406 = load i32, i32* %405, align 4
  %407 = icmp eq i32 %406, 1
  br i1 %407, label %408, label %413

408:                                              ; preds = %383
  %409 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 8
  %410 = load i32, i32* %409, align 32
  %411 = shl i32 %410, 2
  %412 = add i32 %411, 4
  br label %413

413:                                              ; preds = %408, %383
  %414 = phi i32 [ %412, %408 ], [ %402, %383 ]
  %415 = icmp sgt i32 %414, %402
  %416 = select i1 %415, i32 %402, i32 %414
  %417 = icmp sgt i32 %416, 0
  br i1 %417, label %418, label %424

418:                                              ; preds = %413
  %419 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 0
  %420 = sext i32 %416 to i64
  %421 = load i32, i32* %393, align 8
  %422 = icmp sgt i32 %421, 0
  %423 = sext i32 %421 to i64
  br label %434

424:                                              ; preds = %465, %413
  %425 = phi i32 [ 0, %413 ], [ %467, %465 ]
  %426 = icmp sgt i32 %402, %414
  br i1 %426, label %427, label %470

427:                                              ; preds = %424
  %428 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 0
  %429 = sext i32 %416 to i64
  %430 = sext i32 %402 to i64
  %431 = load i32, i32* %28, align 8
  %432 = load i32, i32* %24, align 8
  %433 = load i8*, i8** %428, align 8
  br label %478

434:                                              ; preds = %465, %418
  %435 = phi i64 [ 0, %418 ], [ %468, %465 ]
  %436 = phi i32 [ 0, %418 ], [ %467, %465 ]
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds i8, i8* %404, i64 %437
  %439 = load i8, i8* %438, align 1
  %440 = zext i8 %439 to i32
  br i1 %422, label %441, label %465

441:                                              ; preds = %434
  %442 = sub i8 0, %439
  %443 = load i32, i32* %28, align 8
  %444 = load i32, i32* %24, align 8
  %445 = load i8*, i8** %419, align 8
  br label %446

446:                                              ; preds = %446, %441
  %447 = phi i32 [ %443, %441 ], [ %460, %446 ]
  %448 = phi i64 [ 0, %441 ], [ %463, %446 ]
  %449 = lshr i32 %447, 3
  %450 = zext i32 %449 to i64
  %451 = getelementptr inbounds i8, i8* %445, i64 %450
  %452 = bitcast i8* %451 to i32*
  %453 = load i32, i32* %452, align 1
  %454 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %453) #9, !srcloc !2
  %455 = and i32 %447, 7
  %456 = shl i32 %454, %455
  %457 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %442, i32 %456) #9, !srcloc !3
  %458 = add i32 %447, %440
  %459 = icmp ugt i32 %444, %458
  %460 = select i1 %459, i32 %458, i32 %444
  store i32 %460, i32* %28, align 8
  %461 = trunc i32 %457 to i8
  %462 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 %448, i64 %435
  store i8 %461, i8* %462, align 1
  %463 = add nuw nsw i64 %448, 1
  %464 = icmp eq i64 %463, %423
  br i1 %464, label %465, label %446

465:                                              ; preds = %446, %434
  %466 = shl i32 1, %440
  %467 = add nsw i32 %466, %436
  %468 = add nuw nsw i64 %435, 1
  %469 = icmp slt i64 %468, %420
  br i1 %469, label %434, label %424

470:                                              ; preds = %478, %424
  %471 = icmp sgt i32 %402, 0
  br i1 %471, label %472, label %537

472:                                              ; preds = %470
  %473 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 0
  %474 = zext i32 %402 to i64
  %475 = load i32, i32* %393, align 8
  %476 = icmp sgt i32 %475, 0
  %477 = sext i32 %475 to i64
  br label %506

478:                                              ; preds = %478, %427
  %479 = phi i32 [ %431, %427 ], [ %498, %478 ]
  %480 = phi i64 [ %429, %427 ], [ %504, %478 ]
  %481 = phi i32 [ %425, %427 ], [ %503, %478 ]
  %482 = sext i32 %481 to i64
  %483 = getelementptr inbounds i8, i8* %404, i64 %482
  %484 = load i8, i8* %483, align 1
  %485 = zext i8 %484 to i32
  %486 = lshr i32 %479, 3
  %487 = zext i32 %486 to i64
  %488 = getelementptr inbounds i8, i8* %433, i64 %487
  %489 = bitcast i8* %488 to i32*
  %490 = load i32, i32* %489, align 1
  %491 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %490) #9, !srcloc !2
  %492 = and i32 %479, 7
  %493 = shl i32 %491, %492
  %494 = sub i8 0, %484
  %495 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %494, i32 %493) #9, !srcloc !3
  %496 = add i32 %479, %485
  %497 = icmp ugt i32 %432, %496
  %498 = select i1 %497, i32 %496, i32 %432
  store i32 %498, i32* %28, align 8
  %499 = trunc i32 %495 to i8
  %500 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 0, i64 %480
  store i8 %499, i8* %500, align 1
  %501 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 1, i64 %480
  store i8 %499, i8* %501, align 1
  %502 = shl i32 1, %485
  %503 = add nsw i32 %502, %481
  %504 = add nsw i64 %480, 1
  %505 = icmp slt i64 %504, %430
  br i1 %505, label %478, label %470

506:                                              ; preds = %534, %472
  %507 = phi i64 [ 0, %472 ], [ %535, %534 ]
  br i1 %476, label %508, label %534

508:                                              ; preds = %506, %531
  %509 = phi i64 [ %532, %531 ], [ 0, %506 ]
  %510 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 %509, i64 %507
  %511 = load i8, i8* %510, align 1
  %512 = icmp eq i8 %511, 0
  br i1 %512, label %531, label %513

513:                                              ; preds = %508
  %514 = load i32, i32* %28, align 8
  %515 = load i32, i32* %24, align 8
  %516 = load i8*, i8** %473, align 8
  %517 = lshr i32 %514, 3
  %518 = zext i32 %517 to i64
  %519 = getelementptr inbounds i8, i8* %516, i64 %518
  %520 = bitcast i8* %519 to i32*
  %521 = load i32, i32* %520, align 1
  %522 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %521) #9, !srcloc !2
  %523 = and i32 %514, 7
  %524 = shl i32 %522, %523
  %525 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -2, i32 %524) #9, !srcloc !3
  %526 = add i32 %514, 2
  %527 = icmp ugt i32 %515, %526
  %528 = select i1 %527, i32 %526, i32 %515
  store i32 %528, i32* %28, align 8
  %529 = trunc i32 %525 to i8
  %530 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %6, i64 0, i64 %509, i64 %507
  store i8 %529, i8* %530, align 1
  br label %531

531:                                              ; preds = %513, %508
  %532 = add nuw nsw i64 %509, 1
  %533 = icmp eq i64 %532, %477
  br i1 %533, label %534, label %508

534:                                              ; preds = %531, %506
  %535 = add nuw nsw i64 %507, 1
  %536 = icmp eq i64 %535, %474
  br i1 %536, label %537, label %506

537:                                              ; preds = %534, %470
  %538 = load i32, i32* %28, align 8
  %539 = add nsw i32 %538, -16
  %540 = tail call fastcc i32 @handle_crc(%struct.MPADecodeContext* %0, i32 %539) #8
  %541 = icmp slt i32 %540, 0
  br i1 %541, label %1313, label %542

542:                                              ; preds = %537
  br i1 %471, label %543, label %550

543:                                              ; preds = %542
  %544 = zext i32 %402 to i64
  %545 = load i32, i32* %393, align 8
  %546 = icmp sgt i32 %545, 0
  %547 = sext i32 %545 to i64
  br label %548

548:                                              ; preds = %694, %543
  %549 = phi i64 [ 0, %543 ], [ %695, %694 ]
  br i1 %546, label %554, label %694

550:                                              ; preds = %694, %542
  %551 = icmp slt i32 %402, 32
  %552 = sext i32 %416 to i64
  %553 = sext i32 %402 to i64
  br label %697

554:                                              ; preds = %548, %691
  %555 = phi i64 [ %692, %691 ], [ 0, %548 ]
  %556 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 %555, i64 %549
  %557 = load i8, i8* %556, align 1
  %558 = icmp eq i8 %557, 0
  br i1 %558, label %691, label %559

559:                                              ; preds = %554
  %560 = getelementptr inbounds [2 x [32 x [3 x i8]]], [2 x [32 x [3 x i8]]]* %4, i64 0, i64 %555, i64 %549, i64 0
  %561 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %6, i64 0, i64 %555, i64 %549
  %562 = load i8, i8* %561, align 1
  switch i8 %562, label %563 [
    i8 3, label %656
    i8 2, label %607
    i8 1, label %625
  ]

563:                                              ; preds = %559
  %564 = load i32, i32* %28, align 8
  %565 = load i32, i32* %24, align 8
  %566 = load i8*, i8** %21, align 8
  %567 = lshr i32 %564, 3
  %568 = zext i32 %567 to i64
  %569 = getelementptr inbounds i8, i8* %566, i64 %568
  %570 = bitcast i8* %569 to i32*
  %571 = load i32, i32* %570, align 1
  %572 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %571) #9, !srcloc !2
  %573 = and i32 %564, 7
  %574 = shl i32 %572, %573
  %575 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %574) #9, !srcloc !3
  %576 = add i32 %564, 6
  %577 = icmp ugt i32 %565, %576
  %578 = select i1 %577, i32 %576, i32 %565
  store i32 %578, i32* %28, align 8
  %579 = trunc i32 %575 to i8
  store i8 %579, i8* %560, align 1
  %580 = lshr i32 %578, 3
  %581 = zext i32 %580 to i64
  %582 = getelementptr inbounds i8, i8* %566, i64 %581
  %583 = bitcast i8* %582 to i32*
  %584 = load i32, i32* %583, align 1
  %585 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %584) #9, !srcloc !2
  %586 = and i32 %578, 7
  %587 = shl i32 %585, %586
  %588 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %587) #9, !srcloc !3
  %589 = add i32 %578, 6
  %590 = icmp ugt i32 %565, %589
  %591 = select i1 %590, i32 %589, i32 %565
  store i32 %591, i32* %28, align 8
  %592 = trunc i32 %588 to i8
  %593 = getelementptr inbounds [2 x [32 x [3 x i8]]], [2 x [32 x [3 x i8]]]* %4, i64 0, i64 %555, i64 %549, i64 1
  store i8 %592, i8* %593, align 1
  %594 = lshr i32 %591, 3
  %595 = zext i32 %594 to i64
  %596 = getelementptr inbounds i8, i8* %566, i64 %595
  %597 = bitcast i8* %596 to i32*
  %598 = load i32, i32* %597, align 1
  %599 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %598) #9, !srcloc !2
  %600 = and i32 %591, 7
  %601 = shl i32 %599, %600
  %602 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %601) #9, !srcloc !3
  %603 = add i32 %591, 6
  %604 = icmp ugt i32 %565, %603
  %605 = select i1 %604, i32 %603, i32 %565
  store i32 %605, i32* %28, align 8
  %606 = trunc i32 %602 to i8
  br label %687

607:                                              ; preds = %559
  %608 = load i32, i32* %28, align 8
  %609 = load i32, i32* %24, align 8
  %610 = load i8*, i8** %21, align 8
  %611 = lshr i32 %608, 3
  %612 = zext i32 %611 to i64
  %613 = getelementptr inbounds i8, i8* %610, i64 %612
  %614 = bitcast i8* %613 to i32*
  %615 = load i32, i32* %614, align 1
  %616 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %615) #9, !srcloc !2
  %617 = and i32 %608, 7
  %618 = shl i32 %616, %617
  %619 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %618) #9, !srcloc !3
  %620 = add i32 %608, 6
  %621 = icmp ugt i32 %609, %620
  %622 = select i1 %621, i32 %620, i32 %609
  store i32 %622, i32* %28, align 8
  %623 = trunc i32 %619 to i8
  store i8 %623, i8* %560, align 1
  %624 = getelementptr inbounds [2 x [32 x [3 x i8]]], [2 x [32 x [3 x i8]]]* %4, i64 0, i64 %555, i64 %549, i64 1
  store i8 %623, i8* %624, align 1
  br label %687

625:                                              ; preds = %559
  %626 = load i32, i32* %28, align 8
  %627 = load i32, i32* %24, align 8
  %628 = load i8*, i8** %21, align 8
  %629 = lshr i32 %626, 3
  %630 = zext i32 %629 to i64
  %631 = getelementptr inbounds i8, i8* %628, i64 %630
  %632 = bitcast i8* %631 to i32*
  %633 = load i32, i32* %632, align 1
  %634 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %633) #9, !srcloc !2
  %635 = and i32 %626, 7
  %636 = shl i32 %634, %635
  %637 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %636) #9, !srcloc !3
  %638 = add i32 %626, 6
  %639 = icmp ugt i32 %627, %638
  %640 = select i1 %639, i32 %638, i32 %627
  store i32 %640, i32* %28, align 8
  %641 = trunc i32 %637 to i8
  store i8 %641, i8* %560, align 1
  %642 = lshr i32 %640, 3
  %643 = zext i32 %642 to i64
  %644 = getelementptr inbounds i8, i8* %628, i64 %643
  %645 = bitcast i8* %644 to i32*
  %646 = load i32, i32* %645, align 1
  %647 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %646) #9, !srcloc !2
  %648 = and i32 %640, 7
  %649 = shl i32 %647, %648
  %650 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %649) #9, !srcloc !3
  %651 = add i32 %640, 6
  %652 = icmp ugt i32 %627, %651
  %653 = select i1 %652, i32 %651, i32 %627
  store i32 %653, i32* %28, align 8
  %654 = trunc i32 %650 to i8
  %655 = getelementptr inbounds [2 x [32 x [3 x i8]]], [2 x [32 x [3 x i8]]]* %4, i64 0, i64 %555, i64 %549, i64 2
  store i8 %654, i8* %655, align 1
  br label %687

656:                                              ; preds = %559
  %657 = load i32, i32* %28, align 8
  %658 = load i32, i32* %24, align 8
  %659 = load i8*, i8** %21, align 8
  %660 = lshr i32 %657, 3
  %661 = zext i32 %660 to i64
  %662 = getelementptr inbounds i8, i8* %659, i64 %661
  %663 = bitcast i8* %662 to i32*
  %664 = load i32, i32* %663, align 1
  %665 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %664) #9, !srcloc !2
  %666 = and i32 %657, 7
  %667 = shl i32 %665, %666
  %668 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %667) #9, !srcloc !3
  %669 = add i32 %657, 6
  %670 = icmp ugt i32 %658, %669
  %671 = select i1 %670, i32 %669, i32 %658
  store i32 %671, i32* %28, align 8
  %672 = trunc i32 %668 to i8
  store i8 %672, i8* %560, align 1
  %673 = lshr i32 %671, 3
  %674 = zext i32 %673 to i64
  %675 = getelementptr inbounds i8, i8* %659, i64 %674
  %676 = bitcast i8* %675 to i32*
  %677 = load i32, i32* %676, align 1
  %678 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %677) #9, !srcloc !2
  %679 = and i32 %671, 7
  %680 = shl i32 %678, %679
  %681 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %680) #9, !srcloc !3
  %682 = add i32 %671, 6
  %683 = icmp ugt i32 %658, %682
  %684 = select i1 %683, i32 %682, i32 %658
  store i32 %684, i32* %28, align 8
  %685 = trunc i32 %681 to i8
  %686 = getelementptr inbounds [2 x [32 x [3 x i8]]], [2 x [32 x [3 x i8]]]* %4, i64 0, i64 %555, i64 %549, i64 2
  store i8 %685, i8* %686, align 1
  br label %687

687:                                              ; preds = %563, %607, %625, %656
  %688 = phi i64 [ 1, %656 ], [ 1, %625 ], [ 2, %607 ], [ 2, %563 ]
  %689 = phi i8 [ %685, %656 ], [ %641, %625 ], [ %623, %607 ], [ %606, %563 ]
  %690 = getelementptr inbounds [2 x [32 x [3 x i8]]], [2 x [32 x [3 x i8]]]* %4, i64 0, i64 %555, i64 %549, i64 %688
  store i8 %689, i8* %690, align 1
  br label %691

691:                                              ; preds = %687, %554
  %692 = add nuw nsw i64 %555, 1
  %693 = icmp eq i64 %692, %547
  br i1 %693, label %694, label %554

694:                                              ; preds = %691, %548
  %695 = add nuw nsw i64 %549, 1
  %696 = icmp eq i64 %695, %544
  br i1 %696, label %550, label %548

697:                                              ; preds = %1310, %550
  %698 = phi i64 [ 0, %550 ], [ %1311, %1310 ]
  %699 = mul nuw nsw i64 %698, 12
  br label %700

700:                                              ; preds = %1307, %697
  %701 = phi i64 [ 0, %697 ], [ %1308, %1307 ]
  br i1 %417, label %702, label %709

702:                                              ; preds = %700
  %703 = add nuw nsw i64 %701, %699
  %704 = add nuw nsw i64 %703, 1
  %705 = add nuw nsw i64 %703, 2
  %706 = load i32, i32* %393, align 8
  %707 = icmp sgt i32 %706, 0
  %708 = sext i32 %706 to i64
  br label %715

709:                                              ; preds = %940, %700
  %710 = phi i32 [ 0, %700 ], [ %942, %940 ]
  br i1 %426, label %711, label %945

711:                                              ; preds = %709
  %712 = add nuw nsw i64 %701, %699
  %713 = add nuw nsw i64 %712, 1
  %714 = add nuw nsw i64 %712, 2
  br label %951

715:                                              ; preds = %940, %702
  %716 = phi i64 [ 0, %702 ], [ %943, %940 ]
  %717 = phi i32 [ 0, %702 ], [ %942, %940 ]
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds i8, i8* %404, i64 %718
  %720 = load i8, i8* %719, align 1
  %721 = zext i8 %720 to i32
  br i1 %707, label %722, label %940

722:                                              ; preds = %715, %935
  %723 = phi i64 [ %938, %935 ], [ 0, %715 ]
  %724 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 %723, i64 %716
  %725 = load i8, i8* %724, align 1
  %726 = icmp eq i8 %725, 0
  br i1 %726, label %932, label %727

727:                                              ; preds = %722
  %728 = zext i8 %725 to i32
  %729 = getelementptr inbounds [2 x [32 x [3 x i8]]], [2 x [32 x [3 x i8]]]* %4, i64 0, i64 %723, i64 %716, i64 %698
  %730 = load i8, i8* %729, align 1
  %731 = add nsw i32 %717, %728
  %732 = sext i32 %731 to i64
  %733 = getelementptr inbounds i8, i8* %404, i64 %732
  %734 = load i8, i8* %733, align 1
  %735 = zext i8 %734 to i64
  %736 = getelementptr inbounds [17 x i32], [17 x i32]* @ff_mpa_quant_bits, i64 0, i64 %735
  %737 = load i32, i32* %736, align 4
  %738 = icmp slt i32 %737, 0
  br i1 %738, label %847, label %739

739:                                              ; preds = %727
  %740 = trunc i32 %737 to i8
  %741 = sub i8 0, %740
  %742 = add nsw i32 %737, -1
  %743 = zext i8 %730 to i64
  %744 = getelementptr inbounds [64 x i16], [64 x i16]* @ff_scale_factor_modshift, i64 0, i64 %743
  %745 = shl i32 -1, %742
  %746 = add i32 %745, 1
  %747 = add nsw i32 %737, -2
  %748 = sext i32 %747 to i64
  %749 = load i32, i32* %28, align 8
  %750 = load i32, i32* %24, align 8
  %751 = load i8*, i8** %21, align 8
  %752 = lshr i32 %749, 3
  %753 = zext i32 %752 to i64
  %754 = getelementptr inbounds i8, i8* %751, i64 %753
  %755 = bitcast i8* %754 to i32*
  %756 = load i32, i32* %755, align 1
  %757 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %756) #9, !srcloc !2
  %758 = and i32 %749, 7
  %759 = shl i32 %757, %758
  %760 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %741, i32 %759) #9, !srcloc !3
  %761 = add i32 %749, %737
  %762 = icmp ugt i32 %750, %761
  %763 = select i1 %762, i32 %761, i32 %750
  store i32 %763, i32* %28, align 8
  %764 = load i16, i16* %744, align 2
  %765 = zext i16 %764 to i32
  %766 = and i32 %765, 3
  %767 = lshr i32 %765, 2
  %768 = add i32 %760, %746
  %769 = sext i32 %768 to i64
  %770 = zext i32 %766 to i64
  %771 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %748, i64 %770
  %772 = load i32, i32* %771, align 4
  %773 = sext i32 %772 to i64
  %774 = mul nsw i64 %773, %769
  %775 = add nsw i32 %767, %742
  %776 = add nsw i32 %775, -1
  %777 = zext i32 %776 to i64
  %778 = shl i64 1, %777
  %779 = add nsw i64 %778, %774
  %780 = zext i32 %775 to i64
  %781 = ashr i64 %779, %780
  %782 = trunc i64 %781 to i32
  %783 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %723, i64 %703, i64 %716
  store i32 %782, i32* %783, align 4
  %784 = lshr i32 %763, 3
  %785 = zext i32 %784 to i64
  %786 = getelementptr inbounds i8, i8* %751, i64 %785
  %787 = bitcast i8* %786 to i32*
  %788 = load i32, i32* %787, align 1
  %789 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %788) #9, !srcloc !2
  %790 = and i32 %763, 7
  %791 = shl i32 %789, %790
  %792 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %741, i32 %791) #9, !srcloc !3
  %793 = add i32 %763, %737
  %794 = icmp ugt i32 %750, %793
  %795 = select i1 %794, i32 %793, i32 %750
  store i32 %795, i32* %28, align 8
  %796 = load i16, i16* %744, align 2
  %797 = zext i16 %796 to i32
  %798 = and i32 %797, 3
  %799 = lshr i32 %797, 2
  %800 = add i32 %792, %746
  %801 = sext i32 %800 to i64
  %802 = zext i32 %798 to i64
  %803 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %748, i64 %802
  %804 = load i32, i32* %803, align 4
  %805 = sext i32 %804 to i64
  %806 = mul nsw i64 %805, %801
  %807 = add nsw i32 %799, %742
  %808 = add nsw i32 %807, -1
  %809 = zext i32 %808 to i64
  %810 = shl i64 1, %809
  %811 = add nsw i64 %810, %806
  %812 = zext i32 %807 to i64
  %813 = ashr i64 %811, %812
  %814 = trunc i64 %813 to i32
  %815 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %723, i64 %704, i64 %716
  store i32 %814, i32* %815, align 4
  %816 = lshr i32 %795, 3
  %817 = zext i32 %816 to i64
  %818 = getelementptr inbounds i8, i8* %751, i64 %817
  %819 = bitcast i8* %818 to i32*
  %820 = load i32, i32* %819, align 1
  %821 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %820) #9, !srcloc !2
  %822 = and i32 %795, 7
  %823 = shl i32 %821, %822
  %824 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %741, i32 %823) #9, !srcloc !3
  %825 = add i32 %795, %737
  %826 = icmp ugt i32 %750, %825
  %827 = select i1 %826, i32 %825, i32 %750
  store i32 %827, i32* %28, align 8
  %828 = load i16, i16* %744, align 2
  %829 = zext i16 %828 to i32
  %830 = and i32 %829, 3
  %831 = lshr i32 %829, 2
  %832 = add i32 %824, %746
  %833 = sext i32 %832 to i64
  %834 = zext i32 %830 to i64
  %835 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %748, i64 %834
  %836 = load i32, i32* %835, align 4
  %837 = sext i32 %836 to i64
  %838 = mul nsw i64 %837, %833
  %839 = add nsw i32 %831, %742
  %840 = add nsw i32 %839, -1
  %841 = zext i32 %840 to i64
  %842 = shl i64 1, %841
  %843 = add nsw i64 %842, %838
  %844 = zext i32 %839 to i64
  %845 = ashr i64 %843, %844
  %846 = trunc i64 %845 to i32
  br label %935

847:                                              ; preds = %727
  %848 = load i32, i32* %28, align 8
  %849 = load i32, i32* %24, align 8
  %850 = load i8*, i8** %21, align 8
  %851 = lshr i32 %848, 3
  %852 = zext i32 %851 to i64
  %853 = getelementptr inbounds i8, i8* %850, i64 %852
  %854 = bitcast i8* %853 to i32*
  %855 = load i32, i32* %854, align 1
  %856 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %855) #9, !srcloc !2
  %857 = and i32 %848, 7
  %858 = shl i32 %856, %857
  %859 = trunc i32 %737 to i8
  %860 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %859, i32 %858) #9, !srcloc !3
  %861 = sub i32 %848, %737
  %862 = icmp ugt i32 %849, %861
  %863 = select i1 %862, i32 %861, i32 %849
  store i32 %863, i32* %28, align 8
  %864 = getelementptr inbounds [4 x i16*], [4 x i16*]* @ff_division_tabs, i64 0, i64 %735
  %865 = load i16*, i16** %864, align 8
  %866 = sext i32 %860 to i64
  %867 = getelementptr inbounds i16, i16* %865, i64 %866
  %868 = load i16, i16* %867, align 2
  %869 = sext i16 %868 to i32
  %870 = getelementptr inbounds [17 x i32], [17 x i32]* @ff_mpa_quant_steps, i64 0, i64 %735
  %871 = load i32, i32* %870, align 4
  %872 = and i32 %869, 15
  %873 = zext i8 %730 to i64
  %874 = getelementptr inbounds [64 x i16], [64 x i16]* @ff_scale_factor_modshift, i64 0, i64 %873
  %875 = load i16, i16* %874, align 2
  %876 = zext i16 %875 to i32
  %877 = and i32 %876, 3
  %878 = lshr i32 %876, 2
  %879 = ashr i32 %871, 1
  %880 = sub nsw i32 %872, %879
  %881 = ashr i32 %871, 2
  %882 = sext i32 %881 to i64
  %883 = zext i32 %877 to i64
  %884 = getelementptr inbounds [3 x [3 x i32]], [3 x [3 x i32]]* @scale_factor_mult2, i64 0, i64 %882, i64 %883
  %885 = load i32, i32* %884, align 4
  %886 = mul nsw i32 %885, %880
  %887 = icmp eq i32 %878, 0
  br i1 %887, label %893, label %888

888:                                              ; preds = %847
  %889 = add nsw i32 %878, -1
  %890 = shl i32 1, %889
  %891 = add nsw i32 %890, %886
  %892 = ashr i32 %891, %878
  br label %893

893:                                              ; preds = %888, %847
  %894 = phi i32 [ %892, %888 ], [ %886, %847 ]
  %895 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %723, i64 %703, i64 %716
  store i32 %894, i32* %895, align 4
  %896 = lshr i32 %869, 4
  %897 = and i32 %896, 15
  %898 = load i16, i16* %874, align 2
  %899 = zext i16 %898 to i32
  %900 = and i32 %899, 3
  %901 = lshr i32 %899, 2
  %902 = sub nsw i32 %897, %879
  %903 = zext i32 %900 to i64
  %904 = getelementptr inbounds [3 x [3 x i32]], [3 x [3 x i32]]* @scale_factor_mult2, i64 0, i64 %882, i64 %903
  %905 = load i32, i32* %904, align 4
  %906 = mul nsw i32 %905, %902
  %907 = icmp eq i32 %901, 0
  br i1 %907, label %913, label %908

908:                                              ; preds = %893
  %909 = add nsw i32 %901, -1
  %910 = shl i32 1, %909
  %911 = add nsw i32 %910, %906
  %912 = ashr i32 %911, %901
  br label %913

913:                                              ; preds = %908, %893
  %914 = phi i32 [ %912, %908 ], [ %906, %893 ]
  %915 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %723, i64 %704, i64 %716
  store i32 %914, i32* %915, align 4
  %916 = ashr i32 %869, 8
  %917 = load i16, i16* %874, align 2
  %918 = zext i16 %917 to i32
  %919 = and i32 %918, 3
  %920 = lshr i32 %918, 2
  %921 = sub nsw i32 %916, %879
  %922 = zext i32 %919 to i64
  %923 = getelementptr inbounds [3 x [3 x i32]], [3 x [3 x i32]]* @scale_factor_mult2, i64 0, i64 %882, i64 %922
  %924 = load i32, i32* %923, align 4
  %925 = mul nsw i32 %924, %921
  %926 = icmp eq i32 %920, 0
  br i1 %926, label %935, label %927

927:                                              ; preds = %913
  %928 = add nsw i32 %920, -1
  %929 = shl i32 1, %928
  %930 = add nsw i32 %929, %925
  %931 = ashr i32 %930, %920
  br label %935

932:                                              ; preds = %722
  %933 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %723, i64 %703, i64 %716
  store i32 0, i32* %933, align 4
  %934 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %723, i64 %704, i64 %716
  store i32 0, i32* %934, align 4
  br label %935

935:                                              ; preds = %913, %927, %932, %739
  %936 = phi i32 [ 0, %932 ], [ %846, %739 ], [ %931, %927 ], [ %925, %913 ]
  %937 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %723, i64 %705, i64 %716
  store i32 %936, i32* %937, align 4
  %938 = add nuw nsw i64 %723, 1
  %939 = icmp eq i64 %938, %708
  br i1 %939, label %940, label %722

940:                                              ; preds = %935, %715
  %941 = shl i32 1, %721
  %942 = add nsw i32 %941, %717
  %943 = add nuw nsw i64 %716, 1
  %944 = icmp slt i64 %943, %552
  br i1 %944, label %715, label %709

945:                                              ; preds = %1283, %709
  br i1 %551, label %946, label %1307

946:                                              ; preds = %945
  %947 = add nuw nsw i64 %701, %699
  %948 = add nuw nsw i64 %947, 1
  %949 = add nuw nsw i64 %947, 2
  %950 = load i32, i32* %393, align 8
  br label %1290

951:                                              ; preds = %1283, %711
  %952 = phi i64 [ %552, %711 ], [ %1288, %1283 ]
  %953 = phi i32 [ %710, %711 ], [ %1287, %1283 ]
  %954 = sext i32 %953 to i64
  %955 = getelementptr inbounds i8, i8* %404, i64 %954
  %956 = load i8, i8* %955, align 1
  %957 = zext i8 %956 to i32
  %958 = getelementptr inbounds [2 x [32 x i8]], [2 x [32 x i8]]* %5, i64 0, i64 0, i64 %952
  %959 = load i8, i8* %958, align 1
  %960 = icmp eq i8 %959, 0
  br i1 %960, label %1277, label %961

961:                                              ; preds = %951
  %962 = zext i8 %959 to i32
  %963 = getelementptr inbounds [2 x [32 x [3 x i8]]], [2 x [32 x [3 x i8]]]* %4, i64 0, i64 0, i64 %952, i64 %698
  %964 = load i8, i8* %963, align 1
  %965 = getelementptr inbounds [2 x [32 x [3 x i8]]], [2 x [32 x [3 x i8]]]* %4, i64 0, i64 1, i64 %952, i64 %698
  %966 = load i8, i8* %965, align 1
  %967 = add nsw i32 %953, %962
  %968 = sext i32 %967 to i64
  %969 = getelementptr inbounds i8, i8* %404, i64 %968
  %970 = load i8, i8* %969, align 1
  %971 = zext i8 %970 to i64
  %972 = getelementptr inbounds [17 x i32], [17 x i32]* @ff_mpa_quant_bits, i64 0, i64 %971
  %973 = load i32, i32* %972, align 4
  %974 = icmp slt i32 %973, 0
  br i1 %974, label %1145, label %975

975:                                              ; preds = %961
  %976 = trunc i32 %973 to i8
  %977 = sub i8 0, %976
  %978 = add nsw i32 %973, -1
  %979 = zext i8 %964 to i64
  %980 = getelementptr inbounds [64 x i16], [64 x i16]* @ff_scale_factor_modshift, i64 0, i64 %979
  %981 = shl i32 -1, %978
  %982 = add i32 %981, 1
  %983 = add nsw i32 %973, -2
  %984 = sext i32 %983 to i64
  %985 = zext i8 %966 to i64
  %986 = getelementptr inbounds [64 x i16], [64 x i16]* @ff_scale_factor_modshift, i64 0, i64 %985
  %987 = load i32, i32* %28, align 8
  %988 = load i32, i32* %24, align 8
  %989 = load i8*, i8** %21, align 8
  %990 = lshr i32 %987, 3
  %991 = zext i32 %990 to i64
  %992 = getelementptr inbounds i8, i8* %989, i64 %991
  %993 = bitcast i8* %992 to i32*
  %994 = load i32, i32* %993, align 1
  %995 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %994) #9, !srcloc !2
  %996 = and i32 %987, 7
  %997 = shl i32 %995, %996
  %998 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %977, i32 %997) #9, !srcloc !3
  %999 = add i32 %987, %973
  %1000 = icmp ugt i32 %988, %999
  %1001 = select i1 %1000, i32 %999, i32 %988
  store i32 %1001, i32* %28, align 8
  %1002 = load i16, i16* %980, align 2
  %1003 = zext i16 %1002 to i32
  %1004 = and i32 %1003, 3
  %1005 = lshr i32 %1003, 2
  %1006 = add i32 %998, %982
  %1007 = sext i32 %1006 to i64
  %1008 = zext i32 %1004 to i64
  %1009 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %984, i64 %1008
  %1010 = load i32, i32* %1009, align 4
  %1011 = sext i32 %1010 to i64
  %1012 = mul nsw i64 %1011, %1007
  %1013 = add nsw i32 %1005, %978
  %1014 = add nsw i32 %1013, -1
  %1015 = zext i32 %1014 to i64
  %1016 = shl i64 1, %1015
  %1017 = add nsw i64 %1016, %1012
  %1018 = zext i32 %1013 to i64
  %1019 = ashr i64 %1017, %1018
  %1020 = trunc i64 %1019 to i32
  %1021 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 0, i64 %712, i64 %952
  store i32 %1020, i32* %1021, align 4
  %1022 = load i16, i16* %986, align 2
  %1023 = zext i16 %1022 to i32
  %1024 = and i32 %1023, 3
  %1025 = lshr i32 %1023, 2
  %1026 = zext i32 %1024 to i64
  %1027 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %984, i64 %1026
  %1028 = load i32, i32* %1027, align 4
  %1029 = sext i32 %1028 to i64
  %1030 = mul nsw i64 %1029, %1007
  %1031 = add nsw i32 %1025, %978
  %1032 = add nsw i32 %1031, -1
  %1033 = zext i32 %1032 to i64
  %1034 = shl i64 1, %1033
  %1035 = add nsw i64 %1034, %1030
  %1036 = zext i32 %1031 to i64
  %1037 = ashr i64 %1035, %1036
  %1038 = trunc i64 %1037 to i32
  %1039 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 1, i64 %712, i64 %952
  store i32 %1038, i32* %1039, align 4
  %1040 = load i32, i32* %28, align 8
  %1041 = load i32, i32* %24, align 8
  %1042 = load i8*, i8** %21, align 8
  %1043 = lshr i32 %1040, 3
  %1044 = zext i32 %1043 to i64
  %1045 = getelementptr inbounds i8, i8* %1042, i64 %1044
  %1046 = bitcast i8* %1045 to i32*
  %1047 = load i32, i32* %1046, align 1
  %1048 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1047) #9, !srcloc !2
  %1049 = and i32 %1040, 7
  %1050 = shl i32 %1048, %1049
  %1051 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %977, i32 %1050) #9, !srcloc !3
  %1052 = add i32 %1040, %973
  %1053 = icmp ugt i32 %1041, %1052
  %1054 = select i1 %1053, i32 %1052, i32 %1041
  store i32 %1054, i32* %28, align 8
  %1055 = load i16, i16* %980, align 2
  %1056 = zext i16 %1055 to i32
  %1057 = and i32 %1056, 3
  %1058 = lshr i32 %1056, 2
  %1059 = add i32 %1051, %982
  %1060 = sext i32 %1059 to i64
  %1061 = zext i32 %1057 to i64
  %1062 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %984, i64 %1061
  %1063 = load i32, i32* %1062, align 4
  %1064 = sext i32 %1063 to i64
  %1065 = mul nsw i64 %1064, %1060
  %1066 = add nsw i32 %1058, %978
  %1067 = add nsw i32 %1066, -1
  %1068 = zext i32 %1067 to i64
  %1069 = shl i64 1, %1068
  %1070 = add nsw i64 %1069, %1065
  %1071 = zext i32 %1066 to i64
  %1072 = ashr i64 %1070, %1071
  %1073 = trunc i64 %1072 to i32
  %1074 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 0, i64 %713, i64 %952
  store i32 %1073, i32* %1074, align 4
  %1075 = load i16, i16* %986, align 2
  %1076 = zext i16 %1075 to i32
  %1077 = and i32 %1076, 3
  %1078 = lshr i32 %1076, 2
  %1079 = zext i32 %1077 to i64
  %1080 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %984, i64 %1079
  %1081 = load i32, i32* %1080, align 4
  %1082 = sext i32 %1081 to i64
  %1083 = mul nsw i64 %1082, %1060
  %1084 = add nsw i32 %1078, %978
  %1085 = add nsw i32 %1084, -1
  %1086 = zext i32 %1085 to i64
  %1087 = shl i64 1, %1086
  %1088 = add nsw i64 %1087, %1083
  %1089 = zext i32 %1084 to i64
  %1090 = ashr i64 %1088, %1089
  %1091 = trunc i64 %1090 to i32
  %1092 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 1, i64 %713, i64 %952
  store i32 %1091, i32* %1092, align 4
  %1093 = load i32, i32* %28, align 8
  %1094 = load i32, i32* %24, align 8
  %1095 = load i8*, i8** %21, align 8
  %1096 = lshr i32 %1093, 3
  %1097 = zext i32 %1096 to i64
  %1098 = getelementptr inbounds i8, i8* %1095, i64 %1097
  %1099 = bitcast i8* %1098 to i32*
  %1100 = load i32, i32* %1099, align 1
  %1101 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1100) #9, !srcloc !2
  %1102 = and i32 %1093, 7
  %1103 = shl i32 %1101, %1102
  %1104 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %977, i32 %1103) #9, !srcloc !3
  %1105 = add i32 %1093, %973
  %1106 = icmp ugt i32 %1094, %1105
  %1107 = select i1 %1106, i32 %1105, i32 %1094
  store i32 %1107, i32* %28, align 8
  %1108 = load i16, i16* %980, align 2
  %1109 = zext i16 %1108 to i32
  %1110 = and i32 %1109, 3
  %1111 = lshr i32 %1109, 2
  %1112 = add i32 %1104, %982
  %1113 = sext i32 %1112 to i64
  %1114 = zext i32 %1110 to i64
  %1115 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %984, i64 %1114
  %1116 = load i32, i32* %1115, align 4
  %1117 = sext i32 %1116 to i64
  %1118 = mul nsw i64 %1117, %1113
  %1119 = add nsw i32 %1111, %978
  %1120 = add nsw i32 %1119, -1
  %1121 = zext i32 %1120 to i64
  %1122 = shl i64 1, %1121
  %1123 = add nsw i64 %1122, %1118
  %1124 = zext i32 %1119 to i64
  %1125 = ashr i64 %1123, %1124
  %1126 = trunc i64 %1125 to i32
  %1127 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 0, i64 %714, i64 %952
  store i32 %1126, i32* %1127, align 4
  %1128 = load i16, i16* %986, align 2
  %1129 = zext i16 %1128 to i32
  %1130 = and i32 %1129, 3
  %1131 = lshr i32 %1129, 2
  %1132 = zext i32 %1130 to i64
  %1133 = getelementptr inbounds [15 x [3 x i32]], [15 x [3 x i32]]* @scale_factor_mult, i64 0, i64 %984, i64 %1132
  %1134 = load i32, i32* %1133, align 4
  %1135 = sext i32 %1134 to i64
  %1136 = mul nsw i64 %1135, %1113
  %1137 = add nsw i32 %1131, %978
  %1138 = add nsw i32 %1137, -1
  %1139 = zext i32 %1138 to i64
  %1140 = shl i64 1, %1139
  %1141 = add nsw i64 %1140, %1136
  %1142 = zext i32 %1137 to i64
  %1143 = ashr i64 %1141, %1142
  %1144 = trunc i64 %1143 to i32
  br label %1283

1145:                                             ; preds = %961
  %1146 = load i32, i32* %28, align 8
  %1147 = load i32, i32* %24, align 8
  %1148 = load i8*, i8** %21, align 8
  %1149 = lshr i32 %1146, 3
  %1150 = zext i32 %1149 to i64
  %1151 = getelementptr inbounds i8, i8* %1148, i64 %1150
  %1152 = bitcast i8* %1151 to i32*
  %1153 = load i32, i32* %1152, align 1
  %1154 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1153) #9, !srcloc !2
  %1155 = and i32 %1146, 7
  %1156 = shl i32 %1154, %1155
  %1157 = trunc i32 %973 to i8
  %1158 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %1157, i32 %1156) #9, !srcloc !3
  %1159 = sub i32 %1146, %973
  %1160 = icmp ugt i32 %1147, %1159
  %1161 = select i1 %1160, i32 %1159, i32 %1147
  store i32 %1161, i32* %28, align 8
  %1162 = getelementptr inbounds [17 x i32], [17 x i32]* @ff_mpa_quant_steps, i64 0, i64 %971
  %1163 = load i32, i32* %1162, align 4
  %1164 = srem i32 %1158, %1163
  %1165 = sdiv i32 %1158, %1163
  %1166 = zext i8 %964 to i64
  %1167 = getelementptr inbounds [64 x i16], [64 x i16]* @ff_scale_factor_modshift, i64 0, i64 %1166
  %1168 = load i16, i16* %1167, align 2
  %1169 = zext i16 %1168 to i32
  %1170 = and i32 %1169, 3
  %1171 = lshr i32 %1169, 2
  %1172 = ashr i32 %1163, 1
  %1173 = sub nsw i32 %1164, %1172
  %1174 = ashr i32 %1163, 2
  %1175 = sext i32 %1174 to i64
  %1176 = zext i32 %1170 to i64
  %1177 = getelementptr inbounds [3 x [3 x i32]], [3 x [3 x i32]]* @scale_factor_mult2, i64 0, i64 %1175, i64 %1176
  %1178 = load i32, i32* %1177, align 4
  %1179 = mul nsw i32 %1178, %1173
  %1180 = icmp eq i32 %1171, 0
  br i1 %1180, label %1186, label %1181

1181:                                             ; preds = %1145
  %1182 = add nsw i32 %1171, -1
  %1183 = shl i32 1, %1182
  %1184 = add nsw i32 %1183, %1179
  %1185 = ashr i32 %1184, %1171
  br label %1186

1186:                                             ; preds = %1181, %1145
  %1187 = phi i32 [ %1185, %1181 ], [ %1179, %1145 ]
  %1188 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 0, i64 %712, i64 %952
  store i32 %1187, i32* %1188, align 4
  %1189 = zext i8 %966 to i64
  %1190 = getelementptr inbounds [64 x i16], [64 x i16]* @ff_scale_factor_modshift, i64 0, i64 %1189
  %1191 = load i16, i16* %1190, align 2
  %1192 = zext i16 %1191 to i32
  %1193 = and i32 %1192, 3
  %1194 = lshr i32 %1192, 2
  %1195 = zext i32 %1193 to i64
  %1196 = getelementptr inbounds [3 x [3 x i32]], [3 x [3 x i32]]* @scale_factor_mult2, i64 0, i64 %1175, i64 %1195
  %1197 = load i32, i32* %1196, align 4
  %1198 = mul nsw i32 %1197, %1173
  %1199 = icmp eq i32 %1194, 0
  br i1 %1199, label %1205, label %1200

1200:                                             ; preds = %1186
  %1201 = add nsw i32 %1194, -1
  %1202 = shl i32 1, %1201
  %1203 = add nsw i32 %1202, %1198
  %1204 = ashr i32 %1203, %1194
  br label %1205

1205:                                             ; preds = %1200, %1186
  %1206 = phi i32 [ %1204, %1200 ], [ %1198, %1186 ]
  %1207 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 1, i64 %712, i64 %952
  store i32 %1206, i32* %1207, align 4
  %1208 = srem i32 %1165, %1163
  %1209 = sdiv i32 %1165, %1163
  %1210 = load i16, i16* %1167, align 2
  %1211 = zext i16 %1210 to i32
  %1212 = and i32 %1211, 3
  %1213 = lshr i32 %1211, 2
  %1214 = sub nsw i32 %1208, %1172
  %1215 = zext i32 %1212 to i64
  %1216 = getelementptr inbounds [3 x [3 x i32]], [3 x [3 x i32]]* @scale_factor_mult2, i64 0, i64 %1175, i64 %1215
  %1217 = load i32, i32* %1216, align 4
  %1218 = mul nsw i32 %1217, %1214
  %1219 = icmp eq i32 %1213, 0
  br i1 %1219, label %1225, label %1220

1220:                                             ; preds = %1205
  %1221 = add nsw i32 %1213, -1
  %1222 = shl i32 1, %1221
  %1223 = add nsw i32 %1222, %1218
  %1224 = ashr i32 %1223, %1213
  br label %1225

1225:                                             ; preds = %1220, %1205
  %1226 = phi i32 [ %1224, %1220 ], [ %1218, %1205 ]
  %1227 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 0, i64 %713, i64 %952
  store i32 %1226, i32* %1227, align 4
  %1228 = load i16, i16* %1190, align 2
  %1229 = zext i16 %1228 to i32
  %1230 = and i32 %1229, 3
  %1231 = lshr i32 %1229, 2
  %1232 = zext i32 %1230 to i64
  %1233 = getelementptr inbounds [3 x [3 x i32]], [3 x [3 x i32]]* @scale_factor_mult2, i64 0, i64 %1175, i64 %1232
  %1234 = load i32, i32* %1233, align 4
  %1235 = mul nsw i32 %1234, %1214
  %1236 = icmp eq i32 %1231, 0
  br i1 %1236, label %1242, label %1237

1237:                                             ; preds = %1225
  %1238 = add nsw i32 %1231, -1
  %1239 = shl i32 1, %1238
  %1240 = add nsw i32 %1239, %1235
  %1241 = ashr i32 %1240, %1231
  br label %1242

1242:                                             ; preds = %1237, %1225
  %1243 = phi i32 [ %1241, %1237 ], [ %1235, %1225 ]
  %1244 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 1, i64 %713, i64 %952
  store i32 %1243, i32* %1244, align 4
  %1245 = load i16, i16* %1167, align 2
  %1246 = zext i16 %1245 to i32
  %1247 = and i32 %1246, 3
  %1248 = lshr i32 %1246, 2
  %1249 = sub nsw i32 %1209, %1172
  %1250 = zext i32 %1247 to i64
  %1251 = getelementptr inbounds [3 x [3 x i32]], [3 x [3 x i32]]* @scale_factor_mult2, i64 0, i64 %1175, i64 %1250
  %1252 = load i32, i32* %1251, align 4
  %1253 = mul nsw i32 %1252, %1249
  %1254 = icmp eq i32 %1248, 0
  br i1 %1254, label %1260, label %1255

1255:                                             ; preds = %1242
  %1256 = add nsw i32 %1248, -1
  %1257 = shl i32 1, %1256
  %1258 = add nsw i32 %1257, %1253
  %1259 = ashr i32 %1258, %1248
  br label %1260

1260:                                             ; preds = %1255, %1242
  %1261 = phi i32 [ %1259, %1255 ], [ %1253, %1242 ]
  %1262 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 0, i64 %714, i64 %952
  store i32 %1261, i32* %1262, align 4
  %1263 = load i16, i16* %1190, align 2
  %1264 = zext i16 %1263 to i32
  %1265 = and i32 %1264, 3
  %1266 = lshr i32 %1264, 2
  %1267 = zext i32 %1265 to i64
  %1268 = getelementptr inbounds [3 x [3 x i32]], [3 x [3 x i32]]* @scale_factor_mult2, i64 0, i64 %1175, i64 %1267
  %1269 = load i32, i32* %1268, align 4
  %1270 = mul nsw i32 %1269, %1249
  %1271 = icmp eq i32 %1266, 0
  br i1 %1271, label %1283, label %1272

1272:                                             ; preds = %1260
  %1273 = add nsw i32 %1266, -1
  %1274 = shl i32 1, %1273
  %1275 = add nsw i32 %1274, %1270
  %1276 = ashr i32 %1275, %1266
  br label %1283

1277:                                             ; preds = %951
  %1278 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 0, i64 %712, i64 %952
  store i32 0, i32* %1278, align 4
  %1279 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 0, i64 %713, i64 %952
  store i32 0, i32* %1279, align 4
  %1280 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 0, i64 %714, i64 %952
  store i32 0, i32* %1280, align 4
  %1281 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 1, i64 %712, i64 %952
  store i32 0, i32* %1281, align 4
  %1282 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 1, i64 %713, i64 %952
  store i32 0, i32* %1282, align 4
  br label %1283

1283:                                             ; preds = %1260, %1272, %1277, %975
  %1284 = phi i32 [ 0, %1277 ], [ %1144, %975 ], [ %1276, %1272 ], [ %1270, %1260 ]
  %1285 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 1, i64 %714, i64 %952
  store i32 %1284, i32* %1285, align 4
  %1286 = shl i32 1, %957
  %1287 = add nsw i32 %1286, %953
  %1288 = add nsw i64 %952, 1
  %1289 = icmp slt i64 %1288, %553
  br i1 %1289, label %951, label %945

1290:                                             ; preds = %1303, %946
  %1291 = phi i32 [ %950, %946 ], [ %1304, %1303 ]
  %1292 = phi i64 [ %553, %946 ], [ %1305, %1303 ]
  %1293 = icmp sgt i32 %1291, 0
  br i1 %1293, label %1294, label %1303

1294:                                             ; preds = %1290, %1294
  %1295 = phi i64 [ %1299, %1294 ], [ 0, %1290 ]
  %1296 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %1295, i64 %947, i64 %1292
  store i32 0, i32* %1296, align 4
  %1297 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %1295, i64 %948, i64 %1292
  store i32 0, i32* %1297, align 4
  %1298 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %1295, i64 %949, i64 %1292
  store i32 0, i32* %1298, align 4
  %1299 = add nuw nsw i64 %1295, 1
  %1300 = load i32, i32* %393, align 8
  %1301 = sext i32 %1300 to i64
  %1302 = icmp slt i64 %1299, %1301
  br i1 %1302, label %1294, label %1303

1303:                                             ; preds = %1294, %1290
  %1304 = phi i32 [ %1291, %1290 ], [ %1300, %1294 ]
  %1305 = add nsw i64 %1292, 1
  %1306 = icmp eq i64 %1305, 32
  br i1 %1306, label %1307, label %1290

1307:                                             ; preds = %1303, %945
  %1308 = add nuw nsw i64 %701, 3
  %1309 = icmp ult i64 %1308, 12
  br i1 %1309, label %700, label %1310

1310:                                             ; preds = %1307
  %1311 = add nuw nsw i64 %698, 1
  %1312 = icmp eq i64 %1311, 3
  br i1 %1312, label %1313, label %697

1313:                                             ; preds = %1310, %537
  %1314 = phi i32 [ %540, %537 ], [ 36, %1310 ]
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %389) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %388) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %387) #8
  br label %3800

1315:                                             ; preds = %40
  %1316 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 9
  %1317 = load i32, i32* %1316, align 4
  %1318 = icmp eq i32 %1317, 0
  %1319 = select i1 %1318, i32 1152, i32 576
  %1320 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 26
  %1321 = load %struct.AVCodecContext*, %struct.AVCodecContext** %1320, align 16
  %1322 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1321, i64 0, i32 85
  store i32 %1319, i32* %1322, align 4
  br label %1323

1323:                                             ; preds = %40, %1315
  %1324 = bitcast [576 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1152, i8* nonnull %1324) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1324, i8 -86, i64 1152, i1 false) #8
  %1325 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 9
  %1326 = load i32, i32* %1325, align 4
  %1327 = icmp eq i32 %1326, 0
  %1328 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 6
  %1329 = load i32, i32* %1328, align 8
  %1330 = icmp eq i32 %1329, 1
  br i1 %1327, label %1354, label %1331

1331:                                             ; preds = %1323
  %1332 = select i1 %1330, i32 72, i32 136
  %1333 = tail call fastcc i32 @handle_crc(%struct.MPADecodeContext* %0, i32 %1332) #8
  %1334 = load i32, i32* %28, align 8
  %1335 = load i32, i32* %24, align 8
  %1336 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 0
  %1337 = load i8*, i8** %1336, align 8
  %1338 = lshr i32 %1334, 3
  %1339 = zext i32 %1338 to i64
  %1340 = getelementptr inbounds i8, i8* %1337, i64 %1339
  %1341 = bitcast i8* %1340 to i32*
  %1342 = load i32, i32* %1341, align 1
  %1343 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1342) #9, !srcloc !2
  %1344 = and i32 %1334, 7
  %1345 = shl i32 %1343, %1344
  %1346 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -8, i32 %1345) #9, !srcloc !3
  %1347 = add i32 %1334, 8
  %1348 = icmp ugt i32 %1335, %1347
  %1349 = select i1 %1348, i32 %1347, i32 %1335
  %1350 = load i32, i32* %1328, align 8
  %1351 = add i32 %1350, %1349
  %1352 = icmp ugt i32 %1335, %1351
  %1353 = select i1 %1352, i32 %1351, i32 %1335
  store i32 %1353, i32* %28, align 8
  br label %1407

1354:                                             ; preds = %1323
  %1355 = select i1 %1330, i32 136, i32 256
  %1356 = tail call fastcc i32 @handle_crc(%struct.MPADecodeContext* %0, i32 %1355) #8
  %1357 = load i32, i32* %28, align 8
  %1358 = load i32, i32* %24, align 8
  %1359 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 0
  %1360 = load i8*, i8** %1359, align 8
  %1361 = lshr i32 %1357, 3
  %1362 = zext i32 %1361 to i64
  %1363 = getelementptr inbounds i8, i8* %1360, i64 %1362
  %1364 = bitcast i8* %1363 to i32*
  %1365 = load i32, i32* %1364, align 1
  %1366 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1365) #9, !srcloc !2
  %1367 = and i32 %1357, 7
  %1368 = shl i32 %1366, %1367
  %1369 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -9, i32 %1368) #9, !srcloc !3
  %1370 = add i32 %1357, 9
  %1371 = icmp ugt i32 %1358, %1370
  %1372 = select i1 %1371, i32 %1370, i32 %1358
  store i32 %1372, i32* %28, align 8
  %1373 = load i32, i32* %1328, align 8
  %1374 = icmp eq i32 %1373, 2
  br i1 %1374, label %1375, label %1379

1375:                                             ; preds = %1354
  %1376 = add i32 %1372, 3
  %1377 = icmp ugt i32 %1358, %1376
  %1378 = select i1 %1377, i32 %1376, i32 %1358
  store i32 %1378, i32* %28, align 8
  br label %1384

1379:                                             ; preds = %1354
  %1380 = add i32 %1372, 5
  %1381 = icmp ugt i32 %1358, %1380
  %1382 = select i1 %1381, i32 %1380, i32 %1358
  store i32 %1382, i32* %28, align 8
  %1383 = icmp sgt i32 %1373, 0
  br i1 %1383, label %1384, label %1407

1384:                                             ; preds = %1379, %1375
  %1385 = phi i32 [ %1378, %1375 ], [ %1382, %1379 ]
  %1386 = zext i32 %1373 to i64
  br label %1387

1387:                                             ; preds = %1387, %1384
  %1388 = phi i32 [ %1385, %1384 ], [ %1402, %1387 ]
  %1389 = phi i64 [ 0, %1384 ], [ %1405, %1387 ]
  %1390 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1389, i64 0, i32 0
  store i8 0, i8* %1390, align 32
  %1391 = lshr i32 %1388, 3
  %1392 = zext i32 %1391 to i64
  %1393 = getelementptr inbounds i8, i8* %1360, i64 %1392
  %1394 = bitcast i8* %1393 to i32*
  %1395 = load i32, i32* %1394, align 1
  %1396 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1395) #9, !srcloc !2
  %1397 = and i32 %1388, 7
  %1398 = shl i32 %1396, %1397
  %1399 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %1398) #9, !srcloc !3
  %1400 = add i32 %1388, 4
  %1401 = icmp ugt i32 %1358, %1400
  %1402 = select i1 %1401, i32 %1400, i32 %1358
  store i32 %1402, i32* %28, align 8
  %1403 = trunc i32 %1399 to i8
  %1404 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1389, i64 1, i32 0
  store i8 %1403, i8* %1404, align 32
  %1405 = add nuw nsw i64 %1389, 1
  %1406 = icmp eq i64 %1405, %1386
  br i1 %1406, label %1407, label %1387

1407:                                             ; preds = %1387, %1379, %1331
  %1408 = phi i8* [ %1337, %1331 ], [ %1360, %1379 ], [ %1360, %1387 ]
  %1409 = phi i32 [ %1335, %1331 ], [ %1358, %1379 ], [ %1358, %1387 ]
  %1410 = phi i32 [ %1353, %1331 ], [ %1382, %1379 ], [ %1402, %1387 ]
  %1411 = phi i32 [ %1350, %1331 ], [ %1373, %1379 ], [ %1373, %1387 ]
  %1412 = phi i32 [ 1, %1331 ], [ 2, %1379 ], [ 2, %1387 ]
  %1413 = phi i32 [ %1346, %1331 ], [ %1369, %1379 ], [ %1369, %1387 ]
  %1414 = phi i32 [ %1333, %1331 ], [ %1356, %1379 ], [ %1356, %1387 ]
  %1415 = icmp slt i32 %1414, 0
  br i1 %1415, label %3716, label %1416

1416:                                             ; preds = %1407
  %1417 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 0
  %1418 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 8
  %1419 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 4
  %1420 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 26
  %1421 = bitcast %struct.AVCodecContext** %1420 to i8**
  %1422 = zext i32 %1412 to i64
  br label %1423

1423:                                             ; preds = %1821, %1416
  %1424 = phi i8* [ %1408, %1416 ], [ %1822, %1821 ]
  %1425 = phi i8* [ %1408, %1416 ], [ %1823, %1821 ]
  %1426 = phi i8* [ %1408, %1416 ], [ %1824, %1821 ]
  %1427 = phi i32 [ %1409, %1416 ], [ %1825, %1821 ]
  %1428 = phi i32 [ %1410, %1416 ], [ %1826, %1821 ]
  %1429 = phi i32 [ %1411, %1416 ], [ %1827, %1821 ]
  %1430 = phi i64 [ 0, %1416 ], [ %1828, %1821 ]
  %1431 = icmp sgt i32 %1429, 0
  br i1 %1431, label %1432, label %1821

1432:                                             ; preds = %1423, %1786
  %1433 = phi i8* [ %1764, %1786 ], [ %1424, %1423 ]
  %1434 = phi i8* [ %1765, %1786 ], [ %1425, %1423 ]
  %1435 = phi i8* [ %1765, %1786 ], [ %1426, %1423 ]
  %1436 = phi i32 [ %1787, %1786 ], [ %1427, %1423 ]
  %1437 = phi i32 [ %1813, %1786 ], [ %1428, %1423 ]
  %1438 = phi i64 [ %1817, %1786 ], [ 0, %1423 ]
  %1439 = lshr i32 %1437, 3
  %1440 = zext i32 %1439 to i64
  %1441 = getelementptr inbounds i8, i8* %1435, i64 %1440
  %1442 = bitcast i8* %1441 to i32*
  %1443 = load i32, i32* %1442, align 1
  %1444 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1443) #9, !srcloc !2
  %1445 = and i32 %1437, 7
  %1446 = shl i32 %1444, %1445
  %1447 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -12, i32 %1446) #9, !srcloc !3
  %1448 = add i32 %1437, 12
  %1449 = icmp ugt i32 %1436, %1448
  %1450 = select i1 %1449, i32 %1448, i32 %1436
  store i32 %1450, i32* %28, align 8
  %1451 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 1
  store i32 %1447, i32* %1451, align 4
  %1452 = lshr i32 %1450, 3
  %1453 = zext i32 %1452 to i64
  %1454 = getelementptr inbounds i8, i8* %1435, i64 %1453
  %1455 = bitcast i8* %1454 to i32*
  %1456 = load i32, i32* %1455, align 1
  %1457 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1456) #9, !srcloc !2
  %1458 = and i32 %1450, 7
  %1459 = shl i32 %1457, %1458
  %1460 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -9, i32 %1459) #9, !srcloc !3
  %1461 = add i32 %1450, 9
  %1462 = icmp ugt i32 %1436, %1461
  %1463 = select i1 %1462, i32 %1461, i32 %1436
  store i32 %1463, i32* %28, align 8
  %1464 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 2
  store i32 %1460, i32* %1464, align 8
  %1465 = icmp sgt i32 %1460, 288
  br i1 %1465, label %1466, label %1468

1466:                                             ; preds = %1432
  %1467 = load i8*, i8** %1421, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1467, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0)) #8
  br label %3716

1468:                                             ; preds = %1432
  %1469 = lshr i32 %1463, 3
  %1470 = zext i32 %1469 to i64
  %1471 = getelementptr inbounds i8, i8* %1435, i64 %1470
  %1472 = bitcast i8* %1471 to i32*
  %1473 = load i32, i32* %1472, align 1
  %1474 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1473) #9, !srcloc !2
  %1475 = and i32 %1463, 7
  %1476 = shl i32 %1474, %1475
  %1477 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -8, i32 %1476) #9, !srcloc !3
  %1478 = add i32 %1463, 8
  %1479 = icmp ugt i32 %1436, %1478
  %1480 = select i1 %1479, i32 %1478, i32 %1436
  store i32 %1480, i32* %28, align 8
  %1481 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 3
  store i32 %1477, i32* %1481, align 4
  %1482 = load i32, i32* %1418, align 32
  %1483 = and i32 %1482, 3
  %1484 = icmp eq i32 %1483, 2
  br i1 %1484, label %1485, label %1487

1485:                                             ; preds = %1468
  %1486 = add nsw i32 %1477, -2
  store i32 %1486, i32* %1481, align 4
  br label %1487

1487:                                             ; preds = %1485, %1468
  %1488 = load i32, i32* %1325, align 4
  %1489 = icmp eq i32 %1488, 0
  %1490 = lshr i32 %1480, 3
  %1491 = zext i32 %1490 to i64
  %1492 = getelementptr inbounds i8, i8* %1435, i64 %1491
  %1493 = bitcast i8* %1492 to i32*
  %1494 = load i32, i32* %1493, align 1
  %1495 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1494) #9
  %1496 = and i32 %1480, 7
  %1497 = shl i32 %1495, %1496
  br i1 %1489, label %1500, label %1498

1498:                                             ; preds = %1487
  %1499 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -9, i32 %1497) #9, !srcloc !3
  br label %1502

1500:                                             ; preds = %1487
  %1501 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %1497) #9, !srcloc !3
  br label %1502

1502:                                             ; preds = %1500, %1498
  %1503 = phi i32 [ 4, %1500 ], [ 9, %1498 ]
  %1504 = phi i32 [ %1501, %1500 ], [ %1499, %1498 ]
  %1505 = add i32 %1480, %1503
  %1506 = icmp ugt i32 %1436, %1505
  %1507 = select i1 %1506, i32 %1505, i32 %1436
  store i32 %1507, i32* %28, align 8
  %1508 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 4
  store i32 %1504, i32* %1508, align 16
  %1509 = lshr i32 %1507, 3
  %1510 = zext i32 %1509 to i64
  %1511 = getelementptr inbounds i8, i8* %1435, i64 %1510
  %1512 = load i8, i8* %1511, align 1
  %1513 = and i32 %1507, 7
  %1514 = zext i8 %1512 to i32
  %1515 = shl i32 %1514, %1513
  %1516 = icmp slt i32 %1507, %1436
  %1517 = zext i1 %1516 to i32
  %1518 = add i32 %1507, %1517
  store i32 %1518, i32* %28, align 8
  %1519 = trunc i32 %1515 to i8
  %1520 = icmp sgt i8 %1519, -1
  br i1 %1520, label %1636, label %1521

1521:                                             ; preds = %1502
  %1522 = lshr i32 %1518, 3
  %1523 = zext i32 %1522 to i64
  %1524 = getelementptr inbounds i8, i8* %1435, i64 %1523
  %1525 = bitcast i8* %1524 to i32*
  %1526 = load i32, i32* %1525, align 1
  %1527 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1526) #9, !srcloc !2
  %1528 = and i32 %1518, 7
  %1529 = shl i32 %1527, %1528
  %1530 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -2, i32 %1529) #9, !srcloc !3
  %1531 = add i32 %1518, 2
  %1532 = icmp ugt i32 %1436, %1531
  %1533 = select i1 %1532, i32 %1531, i32 %1436
  store i32 %1533, i32* %28, align 8
  %1534 = trunc i32 %1530 to i8
  %1535 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 5
  store i8 %1534, i8* %1535, align 4
  %1536 = and i32 %1530, 255
  %1537 = icmp eq i32 %1536, 0
  br i1 %1537, label %1538, label %1540

1538:                                             ; preds = %1521
  %1539 = load i8*, i8** %1421, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1539, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i64 0, i64 0)) #8
  br label %3716

1540:                                             ; preds = %1521
  %1541 = lshr i32 %1533, 3
  %1542 = zext i32 %1541 to i64
  %1543 = getelementptr inbounds i8, i8* %1435, i64 %1542
  %1544 = load i8, i8* %1543, align 1
  %1545 = and i32 %1533, 7
  %1546 = zext i8 %1544 to i32
  %1547 = shl i32 %1546, %1545
  %1548 = lshr i32 %1547, 7
  %1549 = icmp slt i32 %1533, %1436
  %1550 = zext i1 %1549 to i32
  %1551 = add i32 %1533, %1550
  store i32 %1551, i32* %28, align 8
  %1552 = trunc i32 %1548 to i8
  %1553 = and i8 %1552, 1
  %1554 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 6
  store i8 %1553, i8* %1554, align 1
  %1555 = lshr i32 %1551, 3
  %1556 = zext i32 %1555 to i64
  %1557 = getelementptr inbounds i8, i8* %1435, i64 %1556
  %1558 = bitcast i8* %1557 to i32*
  %1559 = load i32, i32* %1558, align 1
  %1560 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1559) #9, !srcloc !2
  %1561 = and i32 %1551, 7
  %1562 = shl i32 %1560, %1561
  %1563 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -5, i32 %1562) #9, !srcloc !3
  %1564 = add i32 %1551, 5
  %1565 = icmp ugt i32 %1436, %1564
  %1566 = select i1 %1565, i32 %1564, i32 %1436
  store i32 %1566, i32* %28, align 8
  %1567 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 7, i64 0
  store i32 %1563, i32* %1567, align 4
  %1568 = lshr i32 %1566, 3
  %1569 = zext i32 %1568 to i64
  %1570 = getelementptr inbounds i8, i8* %1435, i64 %1569
  %1571 = bitcast i8* %1570 to i32*
  %1572 = load i32, i32* %1571, align 1
  %1573 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1572) #9, !srcloc !2
  %1574 = and i32 %1566, 7
  %1575 = shl i32 %1573, %1574
  %1576 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -5, i32 %1575) #9, !srcloc !3
  %1577 = add i32 %1566, 5
  %1578 = icmp ugt i32 %1436, %1577
  %1579 = select i1 %1578, i32 %1577, i32 %1436
  store i32 %1579, i32* %28, align 8
  %1580 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 7, i64 1
  store i32 %1576, i32* %1580, align 4
  %1581 = lshr i32 %1579, 3
  %1582 = zext i32 %1581 to i64
  %1583 = getelementptr inbounds i8, i8* %1435, i64 %1582
  %1584 = bitcast i8* %1583 to i32*
  %1585 = load i32, i32* %1584, align 1
  %1586 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1585) #9, !srcloc !2
  %1587 = and i32 %1579, 7
  %1588 = shl i32 %1586, %1587
  %1589 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1588) #9, !srcloc !3
  %1590 = add i32 %1579, 3
  %1591 = icmp ugt i32 %1436, %1590
  %1592 = select i1 %1591, i32 %1590, i32 %1436
  store i32 %1592, i32* %28, align 8
  %1593 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 8, i64 0
  store i32 %1589, i32* %1593, align 4
  %1594 = lshr i32 %1592, 3
  %1595 = zext i32 %1594 to i64
  %1596 = getelementptr inbounds i8, i8* %1435, i64 %1595
  %1597 = bitcast i8* %1596 to i32*
  %1598 = load i32, i32* %1597, align 1
  %1599 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1598) #9, !srcloc !2
  %1600 = and i32 %1592, 7
  %1601 = shl i32 %1599, %1600
  %1602 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1601) #9, !srcloc !3
  %1603 = add i32 %1592, 3
  %1604 = icmp ugt i32 %1436, %1603
  %1605 = select i1 %1604, i32 %1603, i32 %1436
  store i32 %1605, i32* %28, align 8
  %1606 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 8, i64 1
  store i32 %1602, i32* %1606, align 4
  %1607 = lshr i32 %1605, 3
  %1608 = zext i32 %1607 to i64
  %1609 = getelementptr inbounds i8, i8* %1435, i64 %1608
  %1610 = bitcast i8* %1609 to i32*
  %1611 = load i32, i32* %1610, align 1
  %1612 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1611) #9, !srcloc !2
  %1613 = and i32 %1605, 7
  %1614 = shl i32 %1612, %1613
  %1615 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1614) #9, !srcloc !3
  %1616 = add i32 %1605, 3
  %1617 = icmp ugt i32 %1436, %1616
  %1618 = select i1 %1617, i32 %1616, i32 %1436
  store i32 %1618, i32* %28, align 8
  %1619 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 8, i64 2
  store i32 %1615, i32* %1619, align 4
  %1620 = icmp eq i8 %1534, 2
  %1621 = load i32, i32* %1419, align 16
  br i1 %1620, label %1622, label %1627

1622:                                             ; preds = %1540
  %1623 = icmp eq i32 %1621, 8
  %1624 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 11, i64 0
  br i1 %1623, label %1626, label %1625

1625:                                             ; preds = %1622
  store i32 18, i32* %1624, align 4
  br label %1718

1626:                                             ; preds = %1622
  store i32 36, i32* %1624, align 4
  br label %1718

1627:                                             ; preds = %1540
  %1628 = icmp slt i32 %1621, 3
  br i1 %1628, label %1629, label %1631

1629:                                             ; preds = %1627
  %1630 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 11, i64 0
  store i32 18, i32* %1630, align 4
  br label %1718

1631:                                             ; preds = %1627
  %1632 = icmp eq i32 %1621, 8
  %1633 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 11, i64 0
  br i1 %1632, label %1635, label %1634

1634:                                             ; preds = %1631
  store i32 27, i32* %1633, align 4
  br label %1718

1635:                                             ; preds = %1631
  store i32 54, i32* %1633, align 4
  br label %1718

1636:                                             ; preds = %1502
  %1637 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 5
  store i8 0, i8* %1637, align 4
  %1638 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 6
  store i8 0, i8* %1638, align 1
  %1639 = lshr i32 %1518, 3
  %1640 = zext i32 %1639 to i64
  %1641 = getelementptr inbounds i8, i8* %1435, i64 %1640
  %1642 = bitcast i8* %1641 to i32*
  %1643 = load i32, i32* %1642, align 1
  %1644 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1643) #9
  %1645 = and i32 %1518, 7
  %1646 = shl i32 %1644, %1645
  %1647 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -5, i32 %1646) #9, !srcloc !3
  %1648 = add i32 %1518, 5
  %1649 = icmp ugt i32 %1436, %1648
  %1650 = select i1 %1649, i32 %1648, i32 %1436
  store i32 %1650, i32* %28, align 8
  %1651 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 7, i64 0
  store i32 %1647, i32* %1651, align 4
  %1652 = lshr i32 %1650, 3
  %1653 = zext i32 %1652 to i64
  %1654 = getelementptr inbounds i8, i8* %1435, i64 %1653
  %1655 = bitcast i8* %1654 to i32*
  %1656 = load i32, i32* %1655, align 1
  %1657 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1656) #9
  %1658 = and i32 %1650, 7
  %1659 = shl i32 %1657, %1658
  %1660 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -5, i32 %1659) #9, !srcloc !3
  %1661 = add i32 %1650, 5
  %1662 = icmp ugt i32 %1436, %1661
  %1663 = select i1 %1662, i32 %1661, i32 %1436
  store i32 %1663, i32* %28, align 8
  %1664 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 7, i64 1
  store i32 %1660, i32* %1664, align 4
  %1665 = lshr i32 %1663, 3
  %1666 = zext i32 %1665 to i64
  %1667 = getelementptr inbounds i8, i8* %1435, i64 %1666
  %1668 = bitcast i8* %1667 to i32*
  %1669 = load i32, i32* %1668, align 1
  %1670 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1669) #9
  %1671 = and i32 %1663, 7
  %1672 = shl i32 %1670, %1671
  %1673 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -5, i32 %1672) #9, !srcloc !3
  %1674 = add i32 %1663, 5
  %1675 = icmp ugt i32 %1436, %1674
  %1676 = select i1 %1675, i32 %1674, i32 %1436
  store i32 %1676, i32* %28, align 8
  %1677 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 7, i64 2
  store i32 %1673, i32* %1677, align 4
  %1678 = lshr i32 %1676, 3
  %1679 = zext i32 %1678 to i64
  %1680 = getelementptr inbounds i8, i8* %1435, i64 %1679
  %1681 = bitcast i8* %1680 to i32*
  %1682 = load i32, i32* %1681, align 1
  %1683 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1682) #9
  %1684 = and i32 %1676, 7
  %1685 = shl i32 %1683, %1684
  %1686 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %1685) #9, !srcloc !3
  %1687 = add i32 %1676, 4
  %1688 = icmp ugt i32 %1436, %1687
  %1689 = select i1 %1688, i32 %1687, i32 %1436
  store i32 %1689, i32* %28, align 8
  %1690 = lshr i32 %1689, 3
  %1691 = zext i32 %1690 to i64
  %1692 = getelementptr inbounds i8, i8* %1435, i64 %1691
  %1693 = bitcast i8* %1692 to i32*
  %1694 = load i32, i32* %1693, align 1
  %1695 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1694) #9, !srcloc !2
  %1696 = and i32 %1689, 7
  %1697 = shl i32 %1695, %1696
  %1698 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1697) #9, !srcloc !3
  %1699 = add i32 %1689, 3
  %1700 = icmp ugt i32 %1436, %1699
  %1701 = select i1 %1700, i32 %1699, i32 %1436
  store i32 %1701, i32* %28, align 8
  %1702 = load i32, i32* %1419, align 16
  %1703 = sext i32 %1702 to i64
  %1704 = add nsw i32 %1686, 1
  %1705 = sext i32 %1704 to i64
  %1706 = getelementptr inbounds [9 x [23 x i16]], [9 x [23 x i16]]* @ff_band_index_long, i64 0, i64 %1703, i64 %1705
  %1707 = load i16, i16* %1706, align 2
  %1708 = zext i16 %1707 to i32
  %1709 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 11, i64 0
  store i32 %1708, i32* %1709, align 4
  %1710 = add nsw i32 %1698, %1686
  %1711 = icmp slt i32 %1710, 20
  %1712 = select i1 %1711, i32 %1710, i32 20
  %1713 = add nsw i32 %1712, 2
  %1714 = sext i32 %1713 to i64
  %1715 = getelementptr inbounds [9 x [23 x i16]], [9 x [23 x i16]]* @ff_band_index_long, i64 0, i64 %1703, i64 %1714
  %1716 = load i16, i16* %1715, align 2
  %1717 = zext i16 %1716 to i32
  br label %1718

1718:                                             ; preds = %1625, %1626, %1629, %1634, %1635, %1636
  %1719 = phi i32 [ %1717, %1636 ], [ 288, %1635 ], [ 288, %1634 ], [ 288, %1629 ], [ 288, %1626 ], [ 288, %1625 ]
  %1720 = phi i32 [ %1701, %1636 ], [ %1618, %1635 ], [ %1618, %1634 ], [ %1618, %1629 ], [ %1618, %1626 ], [ %1618, %1625 ]
  %1721 = phi i32 [ %1702, %1636 ], [ %1621, %1635 ], [ %1621, %1634 ], [ %1621, %1629 ], [ %1621, %1626 ], [ %1621, %1625 ]
  %1722 = phi i8 [ 0, %1636 ], [ %1553, %1635 ], [ %1553, %1634 ], [ %1553, %1629 ], [ %1553, %1626 ], [ %1553, %1625 ]
  %1723 = phi i8 [ 0, %1636 ], [ %1534, %1635 ], [ %1534, %1634 ], [ %1534, %1629 ], [ %1534, %1626 ], [ %1534, %1625 ]
  %1724 = phi i32 [ %1708, %1636 ], [ 54, %1635 ], [ 27, %1634 ], [ 18, %1629 ], [ 36, %1626 ], [ 18, %1625 ]
  %1725 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 11, i64 1
  store i32 %1719, i32* %1725, align 4
  %1726 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 11, i64 2
  %1727 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 11, i64 0
  %1728 = icmp sgt i32 %1724, %1460
  %1729 = select i1 %1728, i32 %1460, i32 %1724
  store i32 %1729, i32* %1727, align 4
  %1730 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 11, i64 1
  %1731 = icmp sgt i32 %1719, %1460
  %1732 = select i1 %1731, i32 %1460, i32 %1719
  %1733 = sub nsw i32 %1732, %1729
  store i32 %1733, i32* %1730, align 4
  %1734 = icmp slt i32 %1460, 288
  %1735 = select i1 %1734, i32 %1460, i32 288
  %1736 = sub nsw i32 %1735, %1732
  store i32 %1736, i32* %1726, align 4
  %1737 = icmp eq i8 %1723, 2
  br i1 %1737, label %1738, label %1760

1738:                                             ; preds = %1718
  %1739 = icmp eq i8 %1722, 0
  br i1 %1739, label %1757, label %1740

1740:                                             ; preds = %1738
  %1741 = icmp eq i32 %1721, 8
  br i1 %1741, label %1742, label %1748

1742:                                             ; preds = %1740
  %1743 = load i8*, i8** %1421, align 16
  tail call void (i8*, i8*, ...) @avpriv_request_sample(i8* %1743, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i64 0, i64 0)) #8
  %1744 = load i32, i32* %1419, align 16
  %1745 = load i32, i32* %1325, align 4
  %1746 = load i32, i32* %28, align 8
  %1747 = load i8*, i8** %1417, align 8
  br label %1748

1748:                                             ; preds = %1742, %1740
  %1749 = phi i8* [ %1747, %1742 ], [ %1433, %1740 ]
  %1750 = phi i32 [ %1746, %1742 ], [ %1720, %1740 ]
  %1751 = phi i32 [ %1745, %1742 ], [ %1488, %1740 ]
  %1752 = phi i32 [ %1744, %1742 ], [ %1721, %1740 ]
  %1753 = icmp slt i32 %1752, 3
  %1754 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 14
  %1755 = select i1 %1753, i32 8, i32 6
  store i32 %1755, i32* %1754, align 8
  %1756 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 13
  store i32 3, i32* %1756, align 4
  br label %1763

1757:                                             ; preds = %1738
  %1758 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 14
  store i32 0, i32* %1758, align 8
  %1759 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 13
  store i32 0, i32* %1759, align 4
  br label %1763

1760:                                             ; preds = %1718
  %1761 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 13
  store i32 13, i32* %1761, align 4
  %1762 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 14
  store i32 22, i32* %1762, align 8
  br label %1763

1763:                                             ; preds = %1760, %1757, %1748
  %1764 = phi i8* [ %1749, %1748 ], [ %1433, %1757 ], [ %1433, %1760 ]
  %1765 = phi i8* [ %1749, %1748 ], [ %1434, %1757 ], [ %1434, %1760 ]
  %1766 = phi i32 [ %1750, %1748 ], [ %1720, %1757 ], [ %1720, %1760 ]
  %1767 = phi i32 [ %1751, %1748 ], [ %1488, %1757 ], [ %1488, %1760 ]
  %1768 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 12
  store i32 0, i32* %1768, align 16
  %1769 = icmp eq i32 %1767, 0
  br i1 %1769, label %1772, label %1770

1770:                                             ; preds = %1763
  %1771 = load i32, i32* %24, align 8
  br label %1786

1772:                                             ; preds = %1763
  %1773 = lshr i32 %1766, 3
  %1774 = zext i32 %1773 to i64
  %1775 = getelementptr inbounds i8, i8* %1765, i64 %1774
  %1776 = load i8, i8* %1775, align 1
  %1777 = and i32 %1766, 7
  %1778 = zext i8 %1776 to i32
  %1779 = shl i32 %1778, %1777
  %1780 = lshr i32 %1779, 7
  %1781 = and i32 %1780, 1
  %1782 = load i32, i32* %24, align 8
  %1783 = icmp slt i32 %1766, %1782
  %1784 = zext i1 %1783 to i32
  %1785 = add i32 %1766, %1784
  store i32 %1785, i32* %28, align 8
  store i32 %1781, i32* %1768, align 16
  br label %1786

1786:                                             ; preds = %1772, %1770
  %1787 = phi i32 [ %1771, %1770 ], [ %1782, %1772 ]
  %1788 = phi i32 [ %1766, %1770 ], [ %1785, %1772 ]
  %1789 = lshr i32 %1788, 3
  %1790 = zext i32 %1789 to i64
  %1791 = getelementptr inbounds i8, i8* %1765, i64 %1790
  %1792 = load i8, i8* %1791, align 1
  %1793 = and i32 %1788, 7
  %1794 = zext i8 %1792 to i32
  %1795 = shl i32 %1794, %1793
  %1796 = lshr i32 %1795, 7
  %1797 = icmp slt i32 %1788, %1787
  %1798 = zext i1 %1797 to i32
  %1799 = add i32 %1788, %1798
  store i32 %1799, i32* %28, align 8
  %1800 = trunc i32 %1796 to i8
  %1801 = and i8 %1800, 1
  %1802 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 9
  store i8 %1801, i8* %1802, align 16
  %1803 = lshr i32 %1799, 3
  %1804 = zext i32 %1803 to i64
  %1805 = getelementptr inbounds i8, i8* %1765, i64 %1804
  %1806 = load i8, i8* %1805, align 1
  %1807 = and i32 %1799, 7
  %1808 = zext i8 %1806 to i32
  %1809 = shl i32 %1808, %1807
  %1810 = lshr i32 %1809, 7
  %1811 = icmp slt i32 %1799, %1787
  %1812 = zext i1 %1811 to i32
  %1813 = add i32 %1799, %1812
  store i32 %1813, i32* %28, align 8
  %1814 = trunc i32 %1810 to i8
  %1815 = and i8 %1814, 1
  %1816 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1438, i64 %1430, i32 10
  store i8 %1815, i8* %1816, align 1
  %1817 = add nuw nsw i64 %1438, 1
  %1818 = load i32, i32* %1328, align 8
  %1819 = sext i32 %1818 to i64
  %1820 = icmp slt i64 %1817, %1819
  br i1 %1820, label %1432, label %1821

1821:                                             ; preds = %1786, %1423
  %1822 = phi i8* [ %1424, %1423 ], [ %1764, %1786 ]
  %1823 = phi i8* [ %1425, %1423 ], [ %1765, %1786 ]
  %1824 = phi i8* [ %1426, %1423 ], [ %1765, %1786 ]
  %1825 = phi i32 [ %1427, %1423 ], [ %1787, %1786 ]
  %1826 = phi i32 [ %1428, %1423 ], [ %1813, %1786 ]
  %1827 = phi i32 [ %1429, %1423 ], [ %1818, %1786 ]
  %1828 = add nuw nsw i64 %1430, 1
  %1829 = icmp eq i64 %1828, %1422
  br i1 %1829, label %1830, label %1423

1830:                                             ; preds = %1821
  %1831 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 23
  %1832 = load i32, i32* %1831, align 32
  %1833 = icmp eq i32 %1832, 0
  br i1 %1833, label %1834, label %1944

1834:                                             ; preds = %1830
  %1835 = ashr i32 %1826, 3
  %1836 = sext i32 %1835 to i64
  %1837 = getelementptr inbounds i8, i8* %1824, i64 %1836
  %1838 = load i32, i32* %22, align 4
  %1839 = sub nsw i32 %1838, %1826
  %1840 = ashr i32 %1839, 3
  %1841 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 12
  %1842 = load i32, i32* %1841, align 4
  %1843 = sub nsw i32 %1840, %1842
  %1844 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 11
  %1845 = load i32, i32* %1844, align 32
  %1846 = icmp sgt i32 %1845, 1048
  %1847 = sub nsw i32 1048, %1845
  %1848 = select i1 %1846, i32 0, i32 %1847
  %1849 = icmp slt i32 %1843, 0
  %1850 = icmp sgt i32 %1843, %1848
  %1851 = select i1 %1850, i32 %1848, i32 %1843
  %1852 = select i1 %1849, i32 0, i32 %1851
  store i32 %1852, i32* %1841, align 4
  %1853 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 10, i64 0
  %1854 = sext i32 %1845 to i64
  %1855 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 10, i64 %1854
  %1856 = sext i32 %1852 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1855, i8* align 1 %1837, i64 %1856, i1 false) #8
  %1857 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 15
  %1858 = bitcast %struct.GetBitContext* %1857 to i8*
  %1859 = bitcast %struct.GetBitContext* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %1858, i8* align 16 %1859, i64 32, i1 false) #8
  %1860 = load i32, i32* %1844, align 32
  %1861 = load i32, i32* %1841, align 4
  %1862 = add nsw i32 %1861, %1860
  %1863 = shl nsw i32 %1862, 3
  %1864 = icmp ult i32 %1863, 2147483135
  %1865 = select i1 %1864, i32 %1863, i32 0
  %1866 = select i1 %1864, i8* %1853, i8* null
  %1867 = ashr exact i32 %1865, 3
  store i8* %1866, i8** %21, align 8
  store i32 %1865, i32* %22, align 4
  %1868 = add nuw nsw i32 %1865, 8
  store i32 %1868, i32* %24, align 8
  %1869 = sext i32 %1867 to i64
  %1870 = getelementptr inbounds i8, i8* %1866, i64 %1869
  store i8* %1870, i8** %27, align 8
  store i32 0, i32* %28, align 8
  %1871 = shl i32 %1860, 3
  store i32 %1871, i32* %1844, align 32
  br label %1872

1872:                                             ; preds = %1899, %1834
  %1873 = phi i32 [ %1871, %1834 ], [ %1900, %1899 ]
  %1874 = phi i64 [ 0, %1834 ], [ %1901, %1899 ]
  %1875 = phi i32 [ 0, %1834 ], [ %1902, %1899 ]
  %1876 = ashr i32 %1873, 3
  %1877 = icmp slt i32 %1876, %1413
  br i1 %1877, label %1878, label %1904

1878:                                             ; preds = %1872
  %1879 = load i32, i32* %1328, align 8
  %1880 = icmp sgt i32 %1879, 0
  br i1 %1880, label %1881, label %1899

1881:                                             ; preds = %1878
  %1882 = mul nuw nsw i64 %1874, 18
  br label %1883

1883:                                             ; preds = %1883, %1881
  %1884 = phi i32 [ %1873, %1881 ], [ %1898, %1883 ]
  %1885 = phi i64 [ 0, %1881 ], [ %1894, %1883 ]
  %1886 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1885, i64 %1874
  %1887 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1885, i64 %1874, i32 1
  %1888 = load i32, i32* %1887, align 4
  %1889 = add nsw i32 %1888, %1884
  store i32 %1889, i32* %1844, align 32
  %1890 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1885, i64 %1874, i32 17, i64 0
  %1891 = bitcast i32* %1890 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %1891, i8 0, i64 2304, i1 false) #8
  %1892 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %1885, i64 %1882, i64 0
  %1893 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 21, i64 %1885, i64 0
  tail call fastcc void @compute_imdct(%struct.MPADecodeContext* %0, %struct.GranuleDef* %1886, i32* %1892, i32* %1893) #8
  %1894 = add nuw nsw i64 %1885, 1
  %1895 = load i32, i32* %1328, align 8
  %1896 = sext i32 %1895 to i64
  %1897 = icmp slt i64 %1894, %1896
  %1898 = load i32, i32* %1844, align 32
  br i1 %1897, label %1883, label %1899

1899:                                             ; preds = %1883, %1878
  %1900 = phi i32 [ %1873, %1878 ], [ %1898, %1883 ]
  %1901 = add nuw nsw i64 %1874, 1
  %1902 = add nuw nsw i32 %1875, 1
  %1903 = icmp eq i64 %1901, %1422
  br i1 %1903, label %1906, label %1872

1904:                                             ; preds = %1872
  %1905 = trunc i64 %1874 to i32
  br label %1906

1906:                                             ; preds = %1899, %1904
  %1907 = phi i32 [ %1873, %1904 ], [ %1900, %1899 ]
  %1908 = phi i32 [ %1905, %1904 ], [ %1902, %1899 ]
  %1909 = shl nsw i32 %1413, 3
  %1910 = sub nsw i32 %1907, %1909
  %1911 = load i32, i32* %22, align 4
  %1912 = load i32, i32* %1841, align 4
  %1913 = shl nsw i32 %1912, 3
  %1914 = sub nsw i32 %1911, %1913
  %1915 = icmp slt i32 %1910, %1914
  br i1 %1915, label %1934, label %1916

1916:                                             ; preds = %1906
  %1917 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1857, i64 0, i32 0
  %1918 = load i8*, i8** %1917, align 16
  %1919 = icmp eq i8* %1918, null
  br i1 %1919, label %1934, label %1920

1920:                                             ; preds = %1916
  %1921 = sub nsw i32 %1910, %1911
  %1922 = add nsw i32 %1913, %1921
  %1923 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 15, i32 2
  %1924 = load i32, i32* %1923, align 8
  %1925 = sub nsw i32 0, %1924
  %1926 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 15, i32 4
  %1927 = load i32, i32* %1926, align 8
  %1928 = sub nsw i32 %1927, %1924
  %1929 = icmp slt i32 %1922, %1925
  %1930 = icmp slt i32 %1928, %1922
  %1931 = select i1 %1930, i32 %1928, i32 %1922
  %1932 = select i1 %1929, i32 %1925, i32 %1931
  %1933 = add nsw i32 %1932, %1924
  store i32 %1933, i32* %1923, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %1859, i8* align 16 %1858, i64 32, i1 false) #8
  store i8* null, i8** %1917, align 16
  store i32 0, i32* %1841, align 4
  br label %1946

1934:                                             ; preds = %1916, %1906
  %1935 = load i32, i32* %28, align 8
  %1936 = sub nsw i32 0, %1935
  %1937 = load i32, i32* %24, align 8
  %1938 = sub nsw i32 %1937, %1935
  %1939 = icmp slt i32 %1910, %1936
  %1940 = icmp slt i32 %1938, %1910
  %1941 = select i1 %1940, i32 %1938, i32 %1910
  %1942 = select i1 %1939, i32 %1936, i32 %1941
  %1943 = add nsw i32 %1942, %1935
  store i32 %1943, i32* %28, align 8
  br label %1946

1944:                                             ; preds = %1830
  %1945 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 12
  store i32 0, i32* %1945, align 4
  br label %1946

1946:                                             ; preds = %1944, %1934, %1920
  %1947 = phi i32 [ 0, %1944 ], [ %1908, %1934 ], [ %1908, %1920 ]
  %1948 = icmp ugt i32 %1412, %1947
  br i1 %1948, label %1949, label %3704

1949:                                             ; preds = %1946
  %1950 = bitcast [4 x i32]* %10 to i8*
  %1951 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 0
  %1952 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 1
  %1953 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 2
  %1954 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 3
  %1955 = getelementptr inbounds [576 x i16], [576 x i16]* %9, i64 0, i64 0
  %1956 = bitcast [3 x i32]* %7 to i8*
  %1957 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i64 0, i64 0
  %1958 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i64 0, i64 1
  %1959 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i64 0, i64 2
  %1960 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 12
  %1961 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 15
  %1962 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1961, i64 0, i32 0
  %1963 = bitcast %struct.GetBitContext* %11 to i8*
  %1964 = bitcast %struct.GetBitContext* %1961 to i8*
  %1965 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 25
  %1966 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 7
  %1967 = bitcast [576 x i32]* %8 to i8*
  %1968 = getelementptr inbounds [576 x i32], [576 x i32]* %8, i64 0, i64 0
  %1969 = zext i32 %1947 to i64
  %1970 = sub i32 %1412, %1947
  %1971 = zext i32 %1970 to i64
  %1972 = load i32, i32* %1328, align 8
  %1973 = getelementptr inbounds [576 x i32], [576 x i32]* %8, i64 0, i64 1
  %1974 = getelementptr inbounds [576 x i32], [576 x i32]* %8, i64 0, i64 2
  %1975 = getelementptr inbounds [576 x i32], [576 x i32]* %8, i64 0, i64 3
  br label %1976

1976:                                             ; preds = %3699, %1949
  %1977 = phi i32 [ %1972, %1949 ], [ %3700, %3699 ]
  %1978 = phi i64 [ %1969, %1949 ], [ %3701, %3699 ]
  %1979 = phi i64 [ 0, %1949 ], [ %3702, %3699 ]
  %1980 = add nuw nsw i64 %1979, %1969
  %1981 = icmp sgt i32 %1977, 0
  br i1 %1981, label %1982, label %3106

1982:                                             ; preds = %1976
  %1983 = load i32, i32* %28, align 8
  br label %1984

1984:                                             ; preds = %3100, %1982
  %1985 = phi i32 [ %1983, %1982 ], [ %3101, %3100 ]
  %1986 = phi i64 [ 0, %1982 ], [ %3102, %3100 ]
  %1987 = getelementptr %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1980, i32 15, i64 0
  %1988 = load i32, i32* %1325, align 4
  %1989 = icmp eq i32 %1988, 0
  br i1 %1989, label %1990, label %2152

1990:                                             ; preds = %1984
  %1991 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 4
  %1992 = load i32, i32* %1991, align 16
  %1993 = sext i32 %1992 to i64
  %1994 = getelementptr inbounds [2 x [16 x i8]], [2 x [16 x i8]]* @ff_slen_table, i64 0, i64 0, i64 %1993
  %1995 = load i8, i8* %1994, align 1
  %1996 = zext i8 %1995 to i32
  %1997 = getelementptr inbounds [2 x [16 x i8]], [2 x [16 x i8]]* @ff_slen_table, i64 0, i64 1, i64 %1993
  %1998 = load i8, i8* %1997, align 1
  %1999 = zext i8 %1998 to i32
  %2000 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 5
  %2001 = load i8, i8* %2000, align 4
  %2002 = icmp eq i8 %2001, 2
  br i1 %2002, label %2005, label %2003

2003:                                             ; preds = %1990
  %2004 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 0
  br label %2072

2005:                                             ; preds = %1990
  %2006 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 6
  %2007 = load i8, i8* %2006, align 1
  %2008 = icmp eq i8 %2007, 0
  %2009 = select i1 %2008, i32 18, i32 17
  %2010 = icmp eq i8 %1995, 0
  br i1 %2010, label %2011, label %2013

2011:                                             ; preds = %2005
  %2012 = zext i32 %2009 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1987, i8 0, i64 %2012, i1 false) #8
  br label %2037

2013:                                             ; preds = %2005
  %2014 = sub i8 0, %1995
  %2015 = zext i32 %2009 to i64
  %2016 = load i32, i32* %24, align 8
  %2017 = load i8*, i8** %21, align 8
  br label %2018

2018:                                             ; preds = %2018, %2013
  %2019 = phi i32 [ %1985, %2013 ], [ %2032, %2018 ]
  %2020 = phi i64 [ 0, %2013 ], [ %2034, %2018 ]
  %2021 = lshr i32 %2019, 3
  %2022 = zext i32 %2021 to i64
  %2023 = getelementptr inbounds i8, i8* %2017, i64 %2022
  %2024 = bitcast i8* %2023 to i32*
  %2025 = load i32, i32* %2024, align 1
  %2026 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2025) #9, !srcloc !2
  %2027 = and i32 %2019, 7
  %2028 = shl i32 %2026, %2027
  %2029 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2014, i32 %2028) #9, !srcloc !3
  %2030 = add i32 %2019, %1996
  %2031 = icmp ugt i32 %2016, %2030
  %2032 = select i1 %2031, i32 %2030, i32 %2016
  store i32 %2032, i32* %28, align 8
  %2033 = trunc i32 %2029 to i8
  %2034 = add nuw nsw i64 %2020, 1
  %2035 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2020
  store i8 %2033, i8* %2035, align 1
  %2036 = icmp eq i64 %2034, %2015
  br i1 %2036, label %2037, label %2018

2037:                                             ; preds = %2018, %2011
  %2038 = phi i32 [ %1985, %2011 ], [ %2032, %2018 ]
  %2039 = icmp eq i8 %1998, 0
  br i1 %2039, label %2040, label %2043

2040:                                             ; preds = %2037
  %2041 = zext i32 %2009 to i64
  %2042 = getelementptr %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1980, i32 15, i64 %2041
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2042, i8 0, i64 21, i1 false) #8
  br label %2288

2043:                                             ; preds = %2037
  %2044 = sub i8 0, %1998
  %2045 = zext i32 %2009 to i64
  %2046 = load i32, i32* %24, align 8
  %2047 = load i8*, i8** %21, align 8
  %2048 = add nuw nsw i32 %2009, 17
  br label %2049

2049:                                             ; preds = %2049, %2043
  %2050 = phi i32 [ %2038, %2043 ], [ %2064, %2049 ]
  %2051 = phi i64 [ %2045, %2043 ], [ %2066, %2049 ]
  %2052 = phi i32 [ %2009, %2043 ], [ %2067, %2049 ]
  %2053 = lshr i32 %2050, 3
  %2054 = zext i32 %2053 to i64
  %2055 = getelementptr inbounds i8, i8* %2047, i64 %2054
  %2056 = bitcast i8* %2055 to i32*
  %2057 = load i32, i32* %2056, align 1
  %2058 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2057) #9, !srcloc !2
  %2059 = and i32 %2050, 7
  %2060 = shl i32 %2058, %2059
  %2061 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2044, i32 %2060) #9, !srcloc !3
  %2062 = add i32 %2050, %1999
  %2063 = icmp ugt i32 %2046, %2062
  %2064 = select i1 %2063, i32 %2062, i32 %2046
  store i32 %2064, i32* %28, align 8
  %2065 = trunc i32 %2061 to i8
  %2066 = add nuw nsw i64 %2051, 1
  %2067 = add nuw nsw i32 %2052, 1
  %2068 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2051
  store i8 %2065, i8* %2068, align 1
  %2069 = icmp eq i32 %2052, %2048
  br i1 %2069, label %2070, label %2049

2070:                                             ; preds = %2049
  %2071 = getelementptr %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1980, i32 15, i64 %2066
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2071, i8 0, i64 3, i1 false) #8
  br label %2288

2072:                                             ; preds = %2143, %2003
  %2073 = phi i32 [ 0, %2003 ], [ %2146, %2143 ]
  %2074 = phi i32 [ 0, %2003 ], [ %2145, %2143 ]
  %2075 = icmp eq i32 %2073, 0
  %2076 = select i1 %2075, i32 6, i32 5
  %2077 = load i8, i8* %2004, align 16
  %2078 = zext i8 %2077 to i32
  %2079 = lshr i32 8, %2073
  %2080 = and i32 %2079, %2078
  %2081 = icmp eq i32 %2080, 0
  br i1 %2081, label %2104, label %2082

2082:                                             ; preds = %2072
  %2083 = sext i32 %2074 to i64
  %2084 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 0, i32 15, i64 %2083
  %2085 = load i8, i8* %2084, align 1
  %2086 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2083
  store i8 %2085, i8* %2086, align 1
  %2087 = add nsw i64 %2083, 1
  %2088 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 0, i32 15, i64 %2087
  %2089 = load i8, i8* %2088, align 1
  %2090 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2087
  store i8 %2089, i8* %2090, align 1
  %2091 = add nsw i64 %2083, 2
  %2092 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 0, i32 15, i64 %2091
  %2093 = load i8, i8* %2092, align 1
  %2094 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2091
  store i8 %2093, i8* %2094, align 1
  %2095 = add nsw i64 %2083, 3
  %2096 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 0, i32 15, i64 %2095
  %2097 = load i8, i8* %2096, align 1
  %2098 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2095
  store i8 %2097, i8* %2098, align 1
  %2099 = add nsw i64 %2083, 4
  %2100 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 0, i32 15, i64 %2099
  %2101 = load i8, i8* %2100, align 1
  %2102 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2099
  store i8 %2101, i8* %2102, align 1
  %2103 = add nsw i64 %2083, 5
  br i1 %2075, label %3873, label %2143

2104:                                             ; preds = %2072
  %2105 = icmp ult i32 %2073, 2
  %2106 = select i1 %2105, i32 %1996, i32 %1999
  %2107 = icmp eq i32 %2106, 0
  br i1 %2107, label %2108, label %2116

2108:                                             ; preds = %2104
  %2109 = sext i32 %2074 to i64
  %2110 = getelementptr %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1980, i32 15, i64 %2109
  %2111 = zext i32 %2076 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2110, i8 0, i64 %2111, i1 false) #8
  %2112 = add nsw i32 %2076, -1
  %2113 = zext i32 %2112 to i64
  %2114 = add nsw i64 %2109, 1
  %2115 = add nsw i64 %2114, %2113
  br label %2143

2116:                                             ; preds = %2104
  %2117 = trunc i32 %2106 to i8
  %2118 = sub i8 0, %2117
  %2119 = sext i32 %2074 to i64
  br label %2120

2120:                                             ; preds = %2120, %2116
  %2121 = phi i64 [ %2119, %2116 ], [ %2139, %2120 ]
  %2122 = phi i32 [ 0, %2116 ], [ %2141, %2120 ]
  %2123 = load i32, i32* %28, align 8
  %2124 = load i32, i32* %24, align 8
  %2125 = load i8*, i8** %21, align 8
  %2126 = lshr i32 %2123, 3
  %2127 = zext i32 %2126 to i64
  %2128 = getelementptr inbounds i8, i8* %2125, i64 %2127
  %2129 = bitcast i8* %2128 to i32*
  %2130 = load i32, i32* %2129, align 1
  %2131 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2130) #9, !srcloc !2
  %2132 = and i32 %2123, 7
  %2133 = shl i32 %2131, %2132
  %2134 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2118, i32 %2133) #9, !srcloc !3
  %2135 = add i32 %2123, %2106
  %2136 = icmp ugt i32 %2124, %2135
  %2137 = select i1 %2136, i32 %2135, i32 %2124
  store i32 %2137, i32* %28, align 8
  %2138 = trunc i32 %2134 to i8
  %2139 = add nsw i64 %2121, 1
  %2140 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2121
  store i8 %2138, i8* %2140, align 1
  %2141 = add nuw nsw i32 %2122, 1
  %2142 = icmp eq i32 %2141, %2076
  br i1 %2142, label %2143, label %2120

2143:                                             ; preds = %3873, %2082, %2120, %2108
  %2144 = phi i64 [ %2115, %2108 ], [ %2139, %2120 ], [ %2103, %2082 ], [ %3877, %3873 ]
  %2145 = trunc i64 %2144 to i32
  %2146 = add nuw nsw i32 %2073, 1
  %2147 = icmp eq i32 %2146, 4
  br i1 %2147, label %2148, label %2072

2148:                                             ; preds = %2143
  %2149 = shl i64 %2144, 32
  %2150 = ashr exact i64 %2149, 32
  %2151 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2150
  store i8 0, i8* %2151, align 1
  br label %2288

2152:                                             ; preds = %1984
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1950) #8
  %2153 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1950, i8 -86, i64 16, i1 false) #8
  %2154 = load i8, i8* %2153, align 4
  %2155 = icmp eq i8 %2154, 2
  br i1 %2155, label %2156, label %2161

2156:                                             ; preds = %2152
  %2157 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 6
  %2158 = load i8, i8* %2157, align 1
  %2159 = icmp eq i8 %2158, 0
  %2160 = select i1 %2159, i64 1, i64 2
  br label %2161

2161:                                             ; preds = %2156, %2152
  %2162 = phi i64 [ %2160, %2156 ], [ 0, %2152 ]
  %2163 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 4
  %2164 = load i32, i32* %2163, align 16
  %2165 = load i32, i32* %1418, align 32
  %2166 = and i32 %2165, 1
  %2167 = icmp ne i32 %2166, 0
  %2168 = icmp eq i64 %1986, 1
  %2169 = and i1 %2168, %2167
  br i1 %2169, label %2170, label %2196

2170:                                             ; preds = %2161
  %2171 = ashr i32 %2164, 1
  %2172 = icmp slt i32 %2164, 360
  br i1 %2172, label %2173, label %2182

2173:                                             ; preds = %2170
  store i32 0, i32* %1954, align 4
  %2174 = mul nsw i32 %2171, 171
  %2175 = ashr i32 %2174, 10
  %2176 = mul nsw i32 %2175, -6
  %2177 = add nsw i32 %2176, %2171
  store i32 %2177, i32* %1953, align 8
  %2178 = mul nsw i32 %2175, 171
  %2179 = ashr i32 %2178, 10
  %2180 = mul nsw i32 %2179, -6
  %2181 = add nsw i32 %2180, %2175
  store i32 %2181, i32* %1952, align 4
  store i32 %2179, i32* %1951, align 16
  br label %2224

2182:                                             ; preds = %2170
  %2183 = icmp slt i32 %2164, 488
  br i1 %2183, label %2184, label %2190

2184:                                             ; preds = %2182
  %2185 = add nsw i32 %2171, -180
  store i32 0, i32* %1954, align 4
  %2186 = and i32 %2185, 3
  store i32 %2186, i32* %1953, align 8
  %2187 = lshr i32 %2185, 2
  %2188 = and i32 %2187, 3
  store i32 %2188, i32* %1952, align 4
  %2189 = ashr i32 %2185, 4
  store i32 %2189, i32* %1951, align 16
  br label %2224

2190:                                             ; preds = %2182
  %2191 = add nsw i32 %2171, -244
  store i32 0, i32* %1954, align 4
  store i32 0, i32* %1953, align 8
  %2192 = mul nsw i32 %2191, 171
  %2193 = ashr i32 %2192, 9
  %2194 = mul nsw i32 %2193, -3
  %2195 = add nsw i32 %2194, %2191
  store i32 %2195, i32* %1952, align 4
  store i32 %2193, i32* %1951, align 16
  br label %2224

2196:                                             ; preds = %2161
  %2197 = icmp slt i32 %2164, 400
  br i1 %2197, label %2198, label %2207

2198:                                             ; preds = %2196
  %2199 = and i32 %2164, 3
  store i32 %2199, i32* %1954, align 4
  %2200 = lshr i32 %2164, 2
  %2201 = and i32 %2200, 3
  store i32 %2201, i32* %1953, align 8
  %2202 = ashr i32 %2164, 4
  %2203 = mul nsw i32 %2202, 205
  %2204 = ashr i32 %2203, 10
  %2205 = mul nsw i32 %2204, -5
  %2206 = add nsw i32 %2205, %2202
  store i32 %2206, i32* %1952, align 4
  store i32 %2204, i32* %1951, align 16
  br label %2224

2207:                                             ; preds = %2196
  %2208 = icmp slt i32 %2164, 500
  br i1 %2208, label %2209, label %2217

2209:                                             ; preds = %2207
  %2210 = add nsw i32 %2164, -400
  store i32 0, i32* %1954, align 4
  %2211 = and i32 %2210, 3
  store i32 %2211, i32* %1953, align 8
  %2212 = ashr i32 %2210, 2
  %2213 = mul nsw i32 %2212, 205
  %2214 = ashr i32 %2213, 10
  %2215 = mul nsw i32 %2214, -5
  %2216 = add nsw i32 %2215, %2212
  store i32 %2216, i32* %1952, align 4
  store i32 %2214, i32* %1951, align 16
  br label %2224

2217:                                             ; preds = %2207
  %2218 = add nsw i32 %2164, -500
  store i32 0, i32* %1954, align 4
  store i32 0, i32* %1953, align 8
  %2219 = mul nsw i32 %2218, 171
  %2220 = ashr i32 %2219, 9
  %2221 = mul nsw i32 %2220, -3
  %2222 = add i32 %2221, %2218
  store i32 %2222, i32* %1952, align 4
  store i32 %2220, i32* %1951, align 16
  %2223 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 12
  store i32 1, i32* %2223, align 16
  br label %2224

2224:                                             ; preds = %2217, %2209, %2198, %2190, %2184, %2173
  %2225 = phi i32 [ %2179, %2173 ], [ %2189, %2184 ], [ %2193, %2190 ], [ %2204, %2198 ], [ %2214, %2209 ], [ %2220, %2217 ]
  %2226 = phi i64 [ 3, %2173 ], [ 4, %2184 ], [ 5, %2190 ], [ 0, %2198 ], [ 1, %2209 ], [ 2, %2217 ]
  br label %2235

2227:                                             ; preds = %2280
  %2228 = icmp slt i32 %2281, 40
  br i1 %2228, label %2229, label %2287

2229:                                             ; preds = %2227
  %2230 = sext i32 %2281 to i64
  %2231 = getelementptr %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1980, i32 15, i64 %2230
  %2232 = sub i32 39, %2281
  %2233 = zext i32 %2232 to i64
  %2234 = add nuw nsw i64 %2233, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2231, i8 0, i64 %2234, i1 false) #8
  br label %2287

2235:                                             ; preds = %2284, %2224
  %2236 = phi i32 [ %2225, %2224 ], [ %2286, %2284 ]
  %2237 = phi i64 [ 0, %2224 ], [ %2282, %2284 ]
  %2238 = phi i32 [ 0, %2224 ], [ %2281, %2284 ]
  %2239 = getelementptr inbounds [6 x [3 x [4 x i8]]], [6 x [3 x [4 x i8]]]* @ff_lsf_nsf_table, i64 0, i64 %2226, i64 %2162, i64 %2237
  %2240 = load i8, i8* %2239, align 1
  %2241 = zext i8 %2240 to i32
  %2242 = icmp eq i32 %2236, 0
  %2243 = icmp ne i8 %2240, 0
  br i1 %2242, label %2249, label %2244

2244:                                             ; preds = %2235
  br i1 %2243, label %2245, label %2280

2245:                                             ; preds = %2244
  %2246 = trunc i32 %2236 to i8
  %2247 = sub i8 0, %2246
  %2248 = sext i32 %2238 to i64
  br label %2255

2249:                                             ; preds = %2235
  br i1 %2243, label %2250, label %2280

2250:                                             ; preds = %2249
  %2251 = sext i32 %2238 to i64
  %2252 = getelementptr %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1980, i32 15, i64 %2251
  %2253 = zext i8 %2240 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2252, i8 0, i64 %2253, i1 false) #8
  %2254 = add i32 %2238, %2241
  br label %2280

2255:                                             ; preds = %2255, %2245
  %2256 = phi i64 [ %2248, %2245 ], [ %2274, %2255 ]
  %2257 = phi i32 [ 0, %2245 ], [ %2276, %2255 ]
  %2258 = load i32, i32* %28, align 8
  %2259 = load i32, i32* %24, align 8
  %2260 = load i8*, i8** %21, align 8
  %2261 = lshr i32 %2258, 3
  %2262 = zext i32 %2261 to i64
  %2263 = getelementptr inbounds i8, i8* %2260, i64 %2262
  %2264 = bitcast i8* %2263 to i32*
  %2265 = load i32, i32* %2264, align 1
  %2266 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2265) #9, !srcloc !2
  %2267 = and i32 %2258, 7
  %2268 = shl i32 %2266, %2267
  %2269 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2247, i32 %2268) #9, !srcloc !3
  %2270 = add i32 %2258, %2236
  %2271 = icmp ugt i32 %2259, %2270
  %2272 = select i1 %2271, i32 %2270, i32 %2259
  store i32 %2272, i32* %28, align 8
  %2273 = trunc i32 %2269 to i8
  %2274 = add nsw i64 %2256, 1
  %2275 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2256
  store i8 %2273, i8* %2275, align 1
  %2276 = add nuw nsw i32 %2257, 1
  %2277 = icmp eq i32 %2276, %2241
  br i1 %2277, label %2278, label %2255

2278:                                             ; preds = %2255
  %2279 = trunc i64 %2274 to i32
  br label %2280

2280:                                             ; preds = %2278, %2250, %2249, %2244
  %2281 = phi i32 [ %2238, %2249 ], [ %2238, %2244 ], [ %2254, %2250 ], [ %2279, %2278 ]
  %2282 = add nuw nsw i64 %2237, 1
  %2283 = icmp eq i64 %2282, 4
  br i1 %2283, label %2227, label %2284

2284:                                             ; preds = %2280
  %2285 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 %2282
  %2286 = load i32, i32* %2285, align 4
  br label %2235

2287:                                             ; preds = %2229, %2227
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1950) #8
  br label %2288

2288:                                             ; preds = %2287, %2148, %2070, %2040
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %1956) #8
  store i32 -1431655766, i32* %1957, align 4
  store i32 -1431655766, i32* %1958, align 4
  store i32 -1431655766, i32* %1959, align 4
  %2289 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 3
  %2290 = load i32, i32* %2289, align 4
  %2291 = add nsw i32 %2290, -210
  %2292 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 9
  %2293 = load i8, i8* %2292, align 16
  %2294 = zext i8 %2293 to i32
  %2295 = add nuw nsw i32 %2294, 1
  %2296 = load i32, i32* %1419, align 16
  %2297 = sext i32 %2296 to i64
  %2298 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 12
  %2299 = load i32, i32* %2298, align 16
  %2300 = sext i32 %2299 to i64
  %2301 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 14
  %2302 = load i32, i32* %2301, align 8
  %2303 = icmp sgt i32 %2302, 0
  br i1 %2303, label %2304, label %2363

2304:                                             ; preds = %2288, %2357
  %2305 = phi i32 [ %2358, %2357 ], [ %2302, %2288 ]
  %2306 = phi i64 [ %2360, %2357 ], [ 0, %2288 ]
  %2307 = phi i16* [ %2359, %2357 ], [ %1955, %2288 ]
  %2308 = getelementptr inbounds [9 x [22 x i8]], [9 x [22 x i8]]* @ff_band_size_long, i64 0, i64 %2297, i64 %2306
  %2309 = load i8, i8* %2308, align 1
  %2310 = icmp eq i8 %2309, 0
  br i1 %2310, label %2357, label %2311

2311:                                             ; preds = %2304
  %2312 = zext i8 %2309 to i32
  %2313 = getelementptr inbounds [2 x [22 x i8]], [2 x [22 x i8]]* @ff_mpa_pretab, i64 0, i64 %2300, i64 %2306
  %2314 = load i8, i8* %2313, align 1
  %2315 = zext i8 %2314 to i32
  %2316 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2306
  %2317 = load i8, i8* %2316, align 1
  %2318 = zext i8 %2317 to i32
  %2319 = add nuw nsw i32 %2318, %2315
  %2320 = shl i32 %2319, %2295
  %2321 = sub nsw i32 %2291, %2320
  %2322 = trunc i32 %2321 to i16
  %2323 = add i16 %2322, 400
  %2324 = zext i8 %2309 to i32
  %2325 = add nsw i32 %2324, -1
  %2326 = and i32 %2324, 7
  %2327 = icmp eq i32 %2326, 0
  br i1 %2327, label %2336, label %2328

2328:                                             ; preds = %2311, %2328
  %2329 = phi i16* [ %2332, %2328 ], [ %2307, %2311 ]
  %2330 = phi i32 [ %2333, %2328 ], [ %2312, %2311 ]
  %2331 = phi i32 [ %2334, %2328 ], [ %2326, %2311 ]
  %2332 = getelementptr inbounds i16, i16* %2329, i64 1
  store i16 %2323, i16* %2329, align 2
  %2333 = add nsw i32 %2330, -1
  %2334 = add i32 %2331, -1
  %2335 = icmp eq i32 %2334, 0
  br i1 %2335, label %2336, label %2328, !llvm.loop !4

2336:                                             ; preds = %2328, %2311
  %2337 = phi i16* [ %2307, %2311 ], [ %2332, %2328 ]
  %2338 = phi i32 [ %2312, %2311 ], [ %2333, %2328 ]
  %2339 = phi i16* [ undef, %2311 ], [ %2332, %2328 ]
  %2340 = icmp ult i32 %2325, 7
  br i1 %2340, label %2354, label %2341

2341:                                             ; preds = %2336, %2341
  %2342 = phi i16* [ %2351, %2341 ], [ %2337, %2336 ]
  %2343 = phi i32 [ %2352, %2341 ], [ %2338, %2336 ]
  %2344 = getelementptr inbounds i16, i16* %2342, i64 1
  store i16 %2323, i16* %2342, align 2
  %2345 = getelementptr inbounds i16, i16* %2342, i64 2
  store i16 %2323, i16* %2344, align 2
  %2346 = getelementptr inbounds i16, i16* %2342, i64 3
  store i16 %2323, i16* %2345, align 2
  %2347 = getelementptr inbounds i16, i16* %2342, i64 4
  store i16 %2323, i16* %2346, align 2
  %2348 = getelementptr inbounds i16, i16* %2342, i64 5
  store i16 %2323, i16* %2347, align 2
  %2349 = getelementptr inbounds i16, i16* %2342, i64 6
  store i16 %2323, i16* %2348, align 2
  %2350 = getelementptr inbounds i16, i16* %2342, i64 7
  store i16 %2323, i16* %2349, align 2
  %2351 = getelementptr inbounds i16, i16* %2342, i64 8
  store i16 %2323, i16* %2350, align 2
  %2352 = add nsw i32 %2343, -8
  %2353 = icmp sgt i32 %2352, 0
  br i1 %2353, label %2341, label %2354

2354:                                             ; preds = %2341, %2336
  %2355 = phi i16* [ %2339, %2336 ], [ %2351, %2341 ]
  %2356 = load i32, i32* %2301, align 8
  br label %2357

2357:                                             ; preds = %2354, %2304
  %2358 = phi i32 [ %2305, %2304 ], [ %2356, %2354 ]
  %2359 = phi i16* [ %2307, %2304 ], [ %2355, %2354 ]
  %2360 = add nuw nsw i64 %2306, 1
  %2361 = sext i32 %2358 to i64
  %2362 = icmp slt i64 %2360, %2361
  br i1 %2362, label %2304, label %2363

2363:                                             ; preds = %2357, %2288
  %2364 = phi i16* [ %1955, %2288 ], [ %2359, %2357 ]
  %2365 = phi i32 [ %2302, %2288 ], [ %2358, %2357 ]
  %2366 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 13
  %2367 = load i32, i32* %2366, align 4
  %2368 = icmp slt i32 %2367, 13
  br i1 %2368, label %2369, label %2471

2369:                                             ; preds = %2363
  %2370 = load i32, i32* %1419, align 16
  %2371 = sext i32 %2370 to i64
  %2372 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 8, i64 0
  %2373 = load i32, i32* %2372, align 4
  %2374 = shl i32 %2373, 3
  %2375 = sub nsw i32 %2291, %2374
  store i32 %2375, i32* %1957, align 4
  %2376 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 8, i64 1
  %2377 = load i32, i32* %2376, align 4
  %2378 = shl i32 %2377, 3
  %2379 = sub nsw i32 %2291, %2378
  store i32 %2379, i32* %1958, align 4
  %2380 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 8, i64 2
  %2381 = load i32, i32* %2380, align 4
  %2382 = shl i32 %2381, 3
  %2383 = sub nsw i32 %2291, %2382
  store i32 %2383, i32* %1959, align 4
  %2384 = sext i32 %2367 to i64
  br label %2385

2385:                                             ; preds = %2466, %2369
  %2386 = phi i64 [ %2384, %2369 ], [ %2469, %2466 ]
  %2387 = phi i16* [ %2364, %2369 ], [ %2467, %2466 ]
  %2388 = phi i32 [ %2365, %2369 ], [ %2468, %2466 ]
  %2389 = getelementptr inbounds [9 x [13 x i8]], [9 x [13 x i8]]* @ff_band_size_short, i64 0, i64 %2371, i64 %2386
  %2390 = load i8, i8* %2389, align 1
  %2391 = zext i8 %2390 to i32
  %2392 = icmp eq i8 %2390, 0
  %2393 = sext i32 %2388 to i64
  %2394 = add nsw i64 %2393, 1
  br i1 %2392, label %2466, label %2395

2395:                                             ; preds = %2385
  %2396 = load i32, i32* %1957, align 4
  %2397 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2393
  %2398 = load i8, i8* %2397, align 1
  %2399 = zext i8 %2398 to i32
  %2400 = shl i32 %2399, %2295
  %2401 = sub nsw i32 %2396, %2400
  %2402 = trunc i32 %2401 to i16
  %2403 = add i16 %2402, 400
  %2404 = zext i8 %2390 to i32
  %2405 = add nsw i32 %2404, -1
  %2406 = and i32 %2404, 7
  %2407 = icmp eq i32 %2406, 0
  br i1 %2407, label %2416, label %2408

2408:                                             ; preds = %2395, %2408
  %2409 = phi i16* [ %2412, %2408 ], [ %2387, %2395 ]
  %2410 = phi i32 [ %2413, %2408 ], [ %2391, %2395 ]
  %2411 = phi i32 [ %2414, %2408 ], [ %2406, %2395 ]
  %2412 = getelementptr inbounds i16, i16* %2409, i64 1
  store i16 %2403, i16* %2409, align 2
  %2413 = add nsw i32 %2410, -1
  %2414 = add i32 %2411, -1
  %2415 = icmp eq i32 %2414, 0
  br i1 %2415, label %2416, label %2408, !llvm.loop !6

2416:                                             ; preds = %2408, %2395
  %2417 = phi i16* [ %2387, %2395 ], [ %2412, %2408 ]
  %2418 = phi i32 [ %2391, %2395 ], [ %2413, %2408 ]
  %2419 = phi i16* [ undef, %2395 ], [ %2412, %2408 ]
  %2420 = icmp ult i32 %2405, 7
  br i1 %2420, label %2434, label %2421

2421:                                             ; preds = %2416, %2421
  %2422 = phi i16* [ %2431, %2421 ], [ %2417, %2416 ]
  %2423 = phi i32 [ %2432, %2421 ], [ %2418, %2416 ]
  %2424 = getelementptr inbounds i16, i16* %2422, i64 1
  store i16 %2403, i16* %2422, align 2
  %2425 = getelementptr inbounds i16, i16* %2422, i64 2
  store i16 %2403, i16* %2424, align 2
  %2426 = getelementptr inbounds i16, i16* %2422, i64 3
  store i16 %2403, i16* %2425, align 2
  %2427 = getelementptr inbounds i16, i16* %2422, i64 4
  store i16 %2403, i16* %2426, align 2
  %2428 = getelementptr inbounds i16, i16* %2422, i64 5
  store i16 %2403, i16* %2427, align 2
  %2429 = getelementptr inbounds i16, i16* %2422, i64 6
  store i16 %2403, i16* %2428, align 2
  %2430 = getelementptr inbounds i16, i16* %2422, i64 7
  store i16 %2403, i16* %2429, align 2
  %2431 = getelementptr inbounds i16, i16* %2422, i64 8
  store i16 %2403, i16* %2430, align 2
  %2432 = add nsw i32 %2423, -8
  %2433 = icmp sgt i32 %2432, 0
  br i1 %2433, label %2421, label %2434

2434:                                             ; preds = %2421, %2416
  %2435 = phi i16* [ %2419, %2416 ], [ %2431, %2421 ]
  %2436 = load i32, i32* %1958, align 4
  %2437 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2394
  %2438 = load i8, i8* %2437, align 1
  %2439 = zext i8 %2438 to i32
  %2440 = shl i32 %2439, %2295
  %2441 = sub nsw i32 %2436, %2440
  %2442 = trunc i32 %2441 to i16
  %2443 = add i16 %2442, 400
  br label %2444

2444:                                             ; preds = %2444, %2434
  %2445 = phi i16* [ %2435, %2434 ], [ %2447, %2444 ]
  %2446 = phi i32 [ %2391, %2434 ], [ %2448, %2444 ]
  %2447 = getelementptr inbounds i16, i16* %2445, i64 1
  store i16 %2443, i16* %2445, align 2
  %2448 = add nsw i32 %2446, -1
  %2449 = icmp sgt i32 %2448, 0
  br i1 %2449, label %2444, label %2450

2450:                                             ; preds = %2444
  %2451 = add nsw i64 %2393, 2
  %2452 = load i32, i32* %1959, align 4
  %2453 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2451
  %2454 = load i8, i8* %2453, align 1
  %2455 = zext i8 %2454 to i32
  %2456 = shl i32 %2455, %2295
  %2457 = sub nsw i32 %2452, %2456
  %2458 = trunc i32 %2457 to i16
  %2459 = add i16 %2458, 400
  br label %2460

2460:                                             ; preds = %2460, %2450
  %2461 = phi i16* [ %2447, %2450 ], [ %2463, %2460 ]
  %2462 = phi i32 [ %2391, %2450 ], [ %2464, %2460 ]
  %2463 = getelementptr inbounds i16, i16* %2461, i64 1
  store i16 %2459, i16* %2461, align 2
  %2464 = add nsw i32 %2462, -1
  %2465 = icmp sgt i32 %2464, 0
  br i1 %2465, label %2460, label %2466

2466:                                             ; preds = %2460, %2385
  %2467 = phi i16* [ %2387, %2385 ], [ %2463, %2460 ]
  %2468 = add i32 %2388, 3
  %2469 = add nsw i64 %2386, 1
  %2470 = icmp eq i64 %2469, 13
  br i1 %2470, label %2471, label %2385

2471:                                             ; preds = %2466, %2363
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %1956) #8
  %2472 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 1
  %2473 = load i32, i32* %2472, align 4
  %2474 = add nsw i32 %2473, %1985
  %2475 = load i32, i32* %22, align 4
  %2476 = load i32, i32* %1960, align 4
  %2477 = shl nsw i32 %2476, 3
  %2478 = sub nsw i32 %2475, %2477
  %2479 = icmp slt i32 %2478, %2474
  %2480 = select i1 %2479, i32 %2478, i32 %2474
  br label %2481

2481:                                             ; preds = %2897, %2471
  %2482 = phi i64 [ 0, %2471 ], [ %2901, %2897 ]
  %2483 = phi i32 [ 0, %2471 ], [ %2900, %2897 ]
  %2484 = phi i32 [ %2480, %2471 ], [ %2899, %2897 ]
  %2485 = phi i32 [ %2474, %2471 ], [ %2898, %2897 ]
  %2486 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 11, i64 %2482
  %2487 = load i32, i32* %2486, align 4
  %2488 = icmp eq i32 %2487, 0
  br i1 %2488, label %2897, label %2489

2489:                                             ; preds = %2481
  %2490 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 7, i64 %2482
  %2491 = load i32, i32* %2490, align 4
  %2492 = sext i32 %2491 to i64
  %2493 = getelementptr inbounds [32 x [2 x i8]], [32 x [2 x i8]]* @ff_mpa_huff_data, i64 0, i64 %2492, i64 0
  %2494 = load i8, i8* %2493, align 2
  %2495 = getelementptr inbounds [32 x [2 x i8]], [32 x [2 x i8]]* @ff_mpa_huff_data, i64 0, i64 %2492, i64 1
  %2496 = load i8, i8* %2495, align 1
  %2497 = zext i8 %2496 to i32
  %2498 = zext i8 %2494 to i64
  %2499 = icmp eq i8 %2494, 0
  br i1 %2499, label %2507, label %2500

2500:                                             ; preds = %2489
  %2501 = icmp sgt i32 %2487, 0
  br i1 %2501, label %2502, label %2897

2502:                                             ; preds = %2500
  %2503 = getelementptr inbounds [16 x %struct.VLC], [16 x %struct.VLC]* @ff_huff_vlc, i64 0, i64 %2498, i32 1
  %2504 = icmp eq i8 %2496, 0
  %2505 = sub i8 0, %2496
  %2506 = sext i32 %2483 to i64
  br label %2515

2507:                                             ; preds = %2489
  %2508 = sext i32 %2483 to i64
  %2509 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 17, i64 %2508
  %2510 = bitcast i32* %2509 to i8*
  %2511 = sext i32 %2487 to i64
  %2512 = shl nsw i64 %2511, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %2510, i8 0, i64 %2512, i1 false) #8
  %2513 = shl i32 %2487, 1
  %2514 = add nsw i32 %2513, %2483
  br label %2897

2515:                                             ; preds = %2890, %2502
  %2516 = phi i64 [ %2506, %2502 ], [ %2891, %2890 ]
  %2517 = phi i32 [ %2483, %2502 ], [ %2892, %2890 ]
  %2518 = phi i32 [ %2487, %2502 ], [ %2893, %2890 ]
  %2519 = phi i32 [ %2484, %2502 ], [ %2553, %2890 ]
  %2520 = phi i32 [ %2485, %2502 ], [ %2552, %2890 ]
  %2521 = load i32, i32* %28, align 8
  %2522 = icmp slt i32 %2521, %2519
  br i1 %2522, label %2550, label %2523

2523:                                             ; preds = %2515
  %2524 = load i8*, i8** %1962, align 16
  %2525 = icmp eq i8* %2524, null
  br i1 %2525, label %2545, label %2526

2526:                                             ; preds = %2523
  %2527 = load i32, i32* %22, align 4
  %2528 = load i32, i32* %1960, align 4
  %2529 = shl nsw i32 %2528, 3
  %2530 = sub nsw i32 %2527, %2529
  %2531 = icmp slt i32 %2521, %2530
  br i1 %2531, label %2545, label %2532

2532:                                             ; preds = %2526
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %1963, i8* align 16 %1964, i64 32, i1 false) #8
  store i8* null, i8** %1962, align 16
  store i32 0, i32* %1960, align 4
  %2533 = sub nsw i32 %2521, %2519
  %2534 = load i32, i32* %28, align 8
  %2535 = sub nsw i32 0, %2534
  %2536 = load i32, i32* %24, align 8
  %2537 = sub nsw i32 %2536, %2534
  %2538 = icmp slt i32 %2533, %2535
  %2539 = icmp slt i32 %2537, %2533
  %2540 = select i1 %2539, i32 %2537, i32 %2533
  %2541 = select i1 %2538, i32 %2535, i32 %2540
  %2542 = add nsw i32 %2541, %2534
  store i32 %2542, i32* %28, align 8
  %2543 = sub i32 %2520, %2521
  %2544 = add i32 %2542, %2543
  br label %2545

2545:                                             ; preds = %2532, %2526, %2523
  %2546 = phi i32 [ %2520, %2523 ], [ %2520, %2526 ], [ %2544, %2532 ]
  %2547 = phi i32 [ %2519, %2523 ], [ %2519, %2526 ], [ %2544, %2532 ]
  %2548 = phi i32 [ %2521, %2523 ], [ %2521, %2526 ], [ %2542, %2532 ]
  %2549 = icmp slt i32 %2548, %2547
  br i1 %2549, label %2550, label %2895

2550:                                             ; preds = %2545, %2515
  %2551 = phi i32 [ %2521, %2515 ], [ %2548, %2545 ]
  %2552 = phi i32 [ %2520, %2515 ], [ %2546, %2545 ]
  %2553 = phi i32 [ %2519, %2515 ], [ %2547, %2545 ]
  %2554 = load [2 x i16]*, [2 x i16]** %2503, align 8
  %2555 = load i32, i32* %24, align 8
  %2556 = load i8*, i8** %21, align 8
  %2557 = lshr i32 %2551, 3
  %2558 = zext i32 %2557 to i64
  %2559 = getelementptr inbounds i8, i8* %2556, i64 %2558
  %2560 = bitcast i8* %2559 to i32*
  %2561 = load i32, i32* %2560, align 1
  %2562 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2561) #9, !srcloc !2
  %2563 = and i32 %2551, 7
  %2564 = shl i32 %2562, %2563
  %2565 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -7, i32 %2564) #9, !srcloc !3
  %2566 = zext i32 %2565 to i64
  %2567 = getelementptr inbounds [2 x i16], [2 x i16]* %2554, i64 %2566, i64 0
  %2568 = load i16, i16* %2567, align 2
  %2569 = sext i16 %2568 to i32
  %2570 = getelementptr inbounds [2 x i16], [2 x i16]* %2554, i64 %2566, i64 1
  %2571 = load i16, i16* %2570, align 2
  %2572 = sext i16 %2571 to i32
  %2573 = icmp slt i16 %2571, 0
  br i1 %2573, label %2574, label %2619

2574:                                             ; preds = %2550
  %2575 = add i32 %2551, 7
  %2576 = icmp ugt i32 %2555, %2575
  %2577 = select i1 %2576, i32 %2575, i32 %2555
  %2578 = lshr i32 %2577, 3
  %2579 = zext i32 %2578 to i64
  %2580 = getelementptr inbounds i8, i8* %2556, i64 %2579
  %2581 = bitcast i8* %2580 to i32*
  %2582 = load i32, i32* %2581, align 1
  %2583 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2582) #9, !srcloc !2
  %2584 = and i32 %2577, 7
  %2585 = shl i32 %2583, %2584
  %2586 = trunc i16 %2571 to i8
  %2587 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2586, i32 %2585) #9, !srcloc !3
  %2588 = add i32 %2587, %2569
  %2589 = zext i32 %2588 to i64
  %2590 = getelementptr inbounds [2 x i16], [2 x i16]* %2554, i64 %2589, i64 0
  %2591 = load i16, i16* %2590, align 2
  %2592 = sext i16 %2591 to i32
  %2593 = getelementptr inbounds [2 x i16], [2 x i16]* %2554, i64 %2589, i64 1
  %2594 = load i16, i16* %2593, align 2
  %2595 = sext i16 %2594 to i32
  %2596 = icmp slt i16 %2594, 0
  br i1 %2596, label %2597, label %2619

2597:                                             ; preds = %2574
  %2598 = sub i32 %2577, %2572
  %2599 = icmp ugt i32 %2555, %2598
  %2600 = select i1 %2599, i32 %2598, i32 %2555
  %2601 = lshr i32 %2600, 3
  %2602 = zext i32 %2601 to i64
  %2603 = getelementptr inbounds i8, i8* %2556, i64 %2602
  %2604 = bitcast i8* %2603 to i32*
  %2605 = load i32, i32* %2604, align 1
  %2606 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2605) #9, !srcloc !2
  %2607 = and i32 %2600, 7
  %2608 = shl i32 %2606, %2607
  %2609 = trunc i16 %2594 to i8
  %2610 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2609, i32 %2608) #9, !srcloc !3
  %2611 = add i32 %2610, %2592
  %2612 = zext i32 %2611 to i64
  %2613 = getelementptr inbounds [2 x i16], [2 x i16]* %2554, i64 %2612, i64 0
  %2614 = load i16, i16* %2613, align 2
  %2615 = sext i16 %2614 to i32
  %2616 = getelementptr inbounds [2 x i16], [2 x i16]* %2554, i64 %2612, i64 1
  %2617 = load i16, i16* %2616, align 2
  %2618 = sext i16 %2617 to i32
  br label %2619

2619:                                             ; preds = %2597, %2574, %2550
  %2620 = phi i32 [ %2615, %2597 ], [ %2592, %2574 ], [ %2569, %2550 ]
  %2621 = phi i32 [ %2600, %2597 ], [ %2577, %2574 ], [ %2551, %2550 ]
  %2622 = phi i32 [ %2618, %2597 ], [ %2595, %2574 ], [ %2572, %2550 ]
  %2623 = add i32 %2622, %2621
  %2624 = icmp ugt i32 %2555, %2623
  %2625 = select i1 %2624, i32 %2623, i32 %2555
  store i32 %2625, i32* %28, align 8
  %2626 = icmp eq i32 %2620, 0
  br i1 %2626, label %2627, label %2631

2627:                                             ; preds = %2619
  %2628 = add nsw i64 %2516, 1
  %2629 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 17, i64 %2628
  store i32 0, i32* %2629, align 4
  %2630 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 17, i64 %2516
  store i32 0, i32* %2630, align 4
  br label %2890

2631:                                             ; preds = %2619
  %2632 = getelementptr inbounds [576 x i16], [576 x i16]* %9, i64 0, i64 %2516
  %2633 = load i16, i16* %2632, align 2
  %2634 = sext i16 %2633 to i32
  %2635 = and i32 %2620, 16
  %2636 = icmp eq i32 %2635, 0
  %2637 = ashr i32 %2620, 5
  %2638 = and i32 %2620, 15
  br i1 %2636, label %2799, label %2639

2639:                                             ; preds = %2631
  %2640 = icmp slt i32 %2620, 480
  br i1 %2640, label %2641, label %2661

2641:                                             ; preds = %2639
  %2642 = lshr i32 %2625, 3
  %2643 = zext i32 %2642 to i64
  %2644 = getelementptr inbounds i8, i8* %2556, i64 %2643
  %2645 = load i8, i8* %2644, align 1
  %2646 = and i32 %2625, 7
  %2647 = zext i8 %2645 to i32
  %2648 = shl i32 %2647, %2646
  %2649 = lshr i32 %2648, 7
  %2650 = and i32 %2649, 1
  %2651 = icmp slt i32 %2625, %2555
  %2652 = zext i1 %2651 to i32
  %2653 = add i32 %2625, %2652
  store i32 %2653, i32* %28, align 8
  %2654 = sub nsw i32 0, %2650
  %2655 = sext i16 %2633 to i64
  %2656 = sext i32 %2637 to i64
  %2657 = getelementptr inbounds [512 x [16 x i32]], [512 x [16 x i32]]* @expval_table_fixed, i64 0, i64 %2655, i64 %2656
  %2658 = load i32, i32* %2657, align 4
  %2659 = xor i32 %2658, %2654
  %2660 = add i32 %2659, %2650
  br label %2712

2661:                                             ; preds = %2639
  br i1 %2504, label %2675, label %2662

2662:                                             ; preds = %2661
  %2663 = lshr i32 %2625, 3
  %2664 = zext i32 %2663 to i64
  %2665 = getelementptr inbounds i8, i8* %2556, i64 %2664
  %2666 = bitcast i8* %2665 to i32*
  %2667 = load i32, i32* %2666, align 1
  %2668 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2667) #9, !srcloc !2
  %2669 = and i32 %2625, 7
  %2670 = shl i32 %2668, %2669
  %2671 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2505, i32 %2670) #9, !srcloc !3
  %2672 = add i32 %2625, %2497
  %2673 = icmp ugt i32 %2555, %2672
  %2674 = select i1 %2673, i32 %2672, i32 %2555
  store i32 %2674, i32* %28, align 8
  br label %2675

2675:                                             ; preds = %2662, %2661
  %2676 = phi i32 [ %2674, %2662 ], [ %2625, %2661 ]
  %2677 = phi i32 [ %2671, %2662 ], [ 0, %2661 ]
  %2678 = add nsw i32 %2677, %2637
  %2679 = shl nsw i32 %2678, 2
  %2680 = and i32 %2634, 3
  %2681 = or i32 %2679, %2680
  %2682 = sext i32 %2681 to i64
  %2683 = getelementptr inbounds [32828 x i8], [32828 x i8]* @ff_table_4_3_exp, i64 0, i64 %2682
  %2684 = load i8, i8* %2683, align 1
  %2685 = sext i8 %2684 to i32
  %2686 = ashr i32 %2634, 2
  %2687 = sub nsw i32 %2685, %2686
  %2688 = icmp ugt i32 %2687, 31
  br i1 %2688, label %2696, label %2689

2689:                                             ; preds = %2675
  %2690 = getelementptr inbounds [32828 x i32], [32828 x i32]* @ff_table_4_3_value, i64 0, i64 %2682
  %2691 = load i32, i32* %2690, align 4
  %2692 = shl i32 1, %2687
  %2693 = lshr i32 %2692, 1
  %2694 = add i32 %2691, %2693
  %2695 = lshr i32 %2694, %2687
  br label %2696

2696:                                             ; preds = %2689, %2675
  %2697 = phi i32 [ %2695, %2689 ], [ 0, %2675 ]
  %2698 = lshr i32 %2676, 3
  %2699 = zext i32 %2698 to i64
  %2700 = getelementptr inbounds i8, i8* %2556, i64 %2699
  %2701 = load i8, i8* %2700, align 1
  %2702 = and i32 %2676, 7
  %2703 = zext i8 %2701 to i32
  %2704 = shl i32 %2703, %2702
  %2705 = icmp slt i32 %2676, %2555
  %2706 = zext i1 %2705 to i32
  %2707 = add i32 %2676, %2706
  store i32 %2707, i32* %28, align 8
  %2708 = trunc i32 %2704 to i8
  %2709 = icmp sgt i8 %2708, -1
  %2710 = sub nsw i32 0, %2697
  %2711 = select i1 %2709, i32 %2697, i32 %2710
  br label %2712

2712:                                             ; preds = %2696, %2641
  %2713 = phi i32 [ %2711, %2696 ], [ %2660, %2641 ]
  %2714 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 17, i64 %2516
  store i32 %2713, i32* %2714, align 4
  %2715 = icmp eq i32 %2638, 15
  br i1 %2715, label %2741, label %2716

2716:                                             ; preds = %2712
  %2717 = load i32, i32* %28, align 8
  %2718 = load i8*, i8** %21, align 8
  %2719 = lshr i32 %2717, 3
  %2720 = zext i32 %2719 to i64
  %2721 = getelementptr inbounds i8, i8* %2718, i64 %2720
  %2722 = load i8, i8* %2721, align 1
  %2723 = and i32 %2717, 7
  %2724 = zext i8 %2722 to i32
  %2725 = shl i32 %2724, %2723
  %2726 = lshr i32 %2725, 7
  %2727 = and i32 %2726, 1
  %2728 = load i32, i32* %24, align 8
  %2729 = icmp slt i32 %2717, %2728
  %2730 = zext i1 %2729 to i32
  %2731 = add i32 %2717, %2730
  store i32 %2731, i32* %28, align 8
  %2732 = sub nsw i32 0, %2727
  %2733 = sext i16 %2633 to i64
  %2734 = zext i32 %2638 to i64
  %2735 = getelementptr inbounds [512 x [16 x i32]], [512 x [16 x i32]]* @expval_table_fixed, i64 0, i64 %2733, i64 %2734
  %2736 = load i32, i32* %2735, align 4
  %2737 = xor i32 %2736, %2732
  %2738 = add i32 %2737, %2727
  %2739 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 17, i64 %2516
  %2740 = getelementptr inbounds i32, i32* %2739, i64 1
  store i32 %2738, i32* %2740, align 4
  br label %2890

2741:                                             ; preds = %2712
  br i1 %2504, label %2758, label %2742

2742:                                             ; preds = %2741
  %2743 = load i32, i32* %28, align 8
  %2744 = load i32, i32* %24, align 8
  %2745 = load i8*, i8** %21, align 8
  %2746 = lshr i32 %2743, 3
  %2747 = zext i32 %2746 to i64
  %2748 = getelementptr inbounds i8, i8* %2745, i64 %2747
  %2749 = bitcast i8* %2748 to i32*
  %2750 = load i32, i32* %2749, align 1
  %2751 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2750) #9, !srcloc !2
  %2752 = and i32 %2743, 7
  %2753 = shl i32 %2751, %2752
  %2754 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2505, i32 %2753) #9, !srcloc !3
  %2755 = add i32 %2743, %2497
  %2756 = icmp ugt i32 %2744, %2755
  %2757 = select i1 %2756, i32 %2755, i32 %2744
  store i32 %2757, i32* %28, align 8
  br label %2758

2758:                                             ; preds = %2742, %2741
  %2759 = phi i32 [ %2754, %2742 ], [ 0, %2741 ]
  %2760 = shl i32 %2759, 2
  %2761 = add i32 %2760, 60
  %2762 = and i32 %2634, 3
  %2763 = or i32 %2761, %2762
  %2764 = sext i32 %2763 to i64
  %2765 = getelementptr inbounds [32828 x i8], [32828 x i8]* @ff_table_4_3_exp, i64 0, i64 %2764
  %2766 = load i8, i8* %2765, align 1
  %2767 = sext i8 %2766 to i32
  %2768 = ashr i32 %2634, 2
  %2769 = sub nsw i32 %2767, %2768
  %2770 = icmp ugt i32 %2769, 31
  br i1 %2770, label %2778, label %2771

2771:                                             ; preds = %2758
  %2772 = getelementptr inbounds [32828 x i32], [32828 x i32]* @ff_table_4_3_value, i64 0, i64 %2764
  %2773 = load i32, i32* %2772, align 4
  %2774 = shl i32 1, %2769
  %2775 = lshr i32 %2774, 1
  %2776 = add i32 %2773, %2775
  %2777 = lshr i32 %2776, %2769
  br label %2778

2778:                                             ; preds = %2771, %2758
  %2779 = phi i32 [ %2777, %2771 ], [ 0, %2758 ]
  %2780 = load i32, i32* %28, align 8
  %2781 = load i8*, i8** %21, align 8
  %2782 = lshr i32 %2780, 3
  %2783 = zext i32 %2782 to i64
  %2784 = getelementptr inbounds i8, i8* %2781, i64 %2783
  %2785 = load i8, i8* %2784, align 1
  %2786 = and i32 %2780, 7
  %2787 = zext i8 %2785 to i32
  %2788 = shl i32 %2787, %2786
  %2789 = load i32, i32* %24, align 8
  %2790 = icmp slt i32 %2780, %2789
  %2791 = zext i1 %2790 to i32
  %2792 = add i32 %2780, %2791
  store i32 %2792, i32* %28, align 8
  %2793 = trunc i32 %2788 to i8
  %2794 = icmp sgt i8 %2793, -1
  %2795 = sub nsw i32 0, %2779
  %2796 = select i1 %2794, i32 %2779, i32 %2795
  %2797 = add nsw i64 %2516, 1
  %2798 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 17, i64 %2797
  store i32 %2796, i32* %2798, align 4
  br label %2890

2799:                                             ; preds = %2631
  %2800 = add nsw i32 %2637, %2638
  %2801 = icmp slt i32 %2800, 15
  br i1 %2801, label %2802, label %2826

2802:                                             ; preds = %2799
  %2803 = lshr i32 %2625, 3
  %2804 = zext i32 %2803 to i64
  %2805 = getelementptr inbounds i8, i8* %2556, i64 %2804
  %2806 = load i8, i8* %2805, align 1
  %2807 = and i32 %2625, 7
  %2808 = zext i8 %2806 to i32
  %2809 = shl i32 %2808, %2807
  %2810 = lshr i32 %2809, 7
  %2811 = and i32 %2810, 1
  %2812 = icmp slt i32 %2625, %2555
  %2813 = zext i1 %2812 to i32
  %2814 = add i32 %2625, %2813
  store i32 %2814, i32* %28, align 8
  %2815 = sub nsw i32 0, %2811
  %2816 = sext i16 %2633 to i64
  %2817 = sext i32 %2800 to i64
  %2818 = getelementptr inbounds [512 x [16 x i32]], [512 x [16 x i32]]* @expval_table_fixed, i64 0, i64 %2816, i64 %2817
  %2819 = load i32, i32* %2818, align 4
  %2820 = xor i32 %2819, %2815
  %2821 = add i32 %2820, %2811
  %2822 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 17, i64 %2516
  %2823 = icmp ne i32 %2638, 0
  %2824 = zext i1 %2823 to i64
  %2825 = getelementptr inbounds i32, i32* %2822, i64 %2824
  store i32 %2821, i32* %2825, align 4
  br label %2883

2826:                                             ; preds = %2799
  br i1 %2504, label %2840, label %2827

2827:                                             ; preds = %2826
  %2828 = lshr i32 %2625, 3
  %2829 = zext i32 %2828 to i64
  %2830 = getelementptr inbounds i8, i8* %2556, i64 %2829
  %2831 = bitcast i8* %2830 to i32*
  %2832 = load i32, i32* %2831, align 1
  %2833 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2832) #9, !srcloc !2
  %2834 = and i32 %2625, 7
  %2835 = shl i32 %2833, %2834
  %2836 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2505, i32 %2835) #9, !srcloc !3
  %2837 = add i32 %2625, %2497
  %2838 = icmp ugt i32 %2555, %2837
  %2839 = select i1 %2838, i32 %2837, i32 %2555
  store i32 %2839, i32* %28, align 8
  br label %2840

2840:                                             ; preds = %2827, %2826
  %2841 = phi i32 [ %2839, %2827 ], [ %2625, %2826 ]
  %2842 = phi i32 [ %2836, %2827 ], [ 0, %2826 ]
  %2843 = add nsw i32 %2842, %2800
  %2844 = shl nsw i32 %2843, 2
  %2845 = and i32 %2634, 3
  %2846 = or i32 %2844, %2845
  %2847 = sext i32 %2846 to i64
  %2848 = getelementptr inbounds [32828 x i8], [32828 x i8]* @ff_table_4_3_exp, i64 0, i64 %2847
  %2849 = load i8, i8* %2848, align 1
  %2850 = sext i8 %2849 to i32
  %2851 = ashr i32 %2634, 2
  %2852 = sub nsw i32 %2850, %2851
  %2853 = icmp ugt i32 %2852, 31
  br i1 %2853, label %2861, label %2854

2854:                                             ; preds = %2840
  %2855 = getelementptr inbounds [32828 x i32], [32828 x i32]* @ff_table_4_3_value, i64 0, i64 %2847
  %2856 = load i32, i32* %2855, align 4
  %2857 = shl i32 1, %2852
  %2858 = lshr i32 %2857, 1
  %2859 = add i32 %2856, %2858
  %2860 = lshr i32 %2859, %2852
  br label %2861

2861:                                             ; preds = %2854, %2840
  %2862 = phi i32 [ %2860, %2854 ], [ 0, %2840 ]
  %2863 = lshr i32 %2841, 3
  %2864 = zext i32 %2863 to i64
  %2865 = getelementptr inbounds i8, i8* %2556, i64 %2864
  %2866 = load i8, i8* %2865, align 1
  %2867 = and i32 %2841, 7
  %2868 = zext i8 %2866 to i32
  %2869 = shl i32 %2868, %2867
  %2870 = icmp slt i32 %2841, %2555
  %2871 = zext i1 %2870 to i32
  %2872 = add i32 %2841, %2871
  store i32 %2872, i32* %28, align 8
  %2873 = trunc i32 %2869 to i8
  %2874 = icmp sgt i8 %2873, -1
  %2875 = sub nsw i32 0, %2862
  %2876 = select i1 %2874, i32 %2862, i32 %2875
  %2877 = icmp ne i32 %2638, 0
  %2878 = zext i1 %2877 to i64
  %2879 = add i64 %2516, %2878
  %2880 = shl i64 %2879, 32
  %2881 = ashr exact i64 %2880, 32
  %2882 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 17, i64 %2881
  store i32 %2876, i32* %2882, align 4
  br label %2883

2883:                                             ; preds = %2861, %2802
  %2884 = icmp eq i32 %2638, 0
  %2885 = zext i1 %2884 to i64
  %2886 = add i64 %2516, %2885
  %2887 = shl i64 %2886, 32
  %2888 = ashr exact i64 %2887, 32
  %2889 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 17, i64 %2888
  store i32 0, i32* %2889, align 4
  br label %2890

2890:                                             ; preds = %2883, %2778, %2716, %2627
  %2891 = add nsw i64 %2516, 2
  %2892 = add nsw i32 %2517, 2
  %2893 = add nsw i32 %2518, -1
  %2894 = icmp sgt i32 %2893, 0
  br i1 %2894, label %2515, label %2897

2895:                                             ; preds = %2545
  %2896 = trunc i64 %2516 to i32
  br label %2897

2897:                                             ; preds = %2890, %2895, %2507, %2500, %2481
  %2898 = phi i32 [ %2485, %2481 ], [ %2485, %2507 ], [ %2485, %2500 ], [ %2546, %2895 ], [ %2552, %2890 ]
  %2899 = phi i32 [ %2484, %2481 ], [ %2484, %2507 ], [ %2484, %2500 ], [ %2547, %2895 ], [ %2553, %2890 ]
  %2900 = phi i32 [ %2483, %2481 ], [ %2514, %2507 ], [ %2483, %2500 ], [ %2896, %2895 ], [ %2892, %2890 ]
  %2901 = add nuw nsw i64 %2482, 1
  %2902 = icmp eq i64 %2901, 3
  br i1 %2902, label %2903, label %2481

2903:                                             ; preds = %2897
  %2904 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 10
  %2905 = load i8, i8* %2904, align 1
  %2906 = zext i8 %2905 to i64
  %2907 = icmp slt i32 %2900, 573
  br i1 %2907, label %2908, label %3043

2908:                                             ; preds = %2903
  %2909 = getelementptr inbounds [2 x %struct.VLC], [2 x %struct.VLC]* @ff_huff_quad_vlc, i64 0, i64 %2906, i32 1
  %2910 = getelementptr inbounds [2 x %struct.VLC], [2 x %struct.VLC]* @ff_huff_quad_vlc, i64 0, i64 %2906, i32 0
  %2911 = sext i32 %2900 to i64
  br label %2912

2912:                                             ; preds = %3037, %2908
  %2913 = phi i64 [ %2911, %2908 ], [ %3038, %3037 ]
  %2914 = phi i32 [ %2900, %2908 ], [ %3039, %3037 ]
  %2915 = phi i32 [ 0, %2908 ], [ %2973, %3037 ]
  %2916 = phi i32 [ %2899, %2908 ], [ %2972, %3037 ]
  %2917 = phi i32 [ %2898, %2908 ], [ %2971, %3037 ]
  %2918 = load i32, i32* %28, align 8
  %2919 = icmp slt i32 %2918, %2916
  br i1 %2919, label %2970, label %2920

2920:                                             ; preds = %2912
  %2921 = icmp slt i32 %2917, %2918
  %2922 = icmp ne i32 %2915, 0
  %2923 = and i1 %2922, %2921
  br i1 %2923, label %2924, label %2943

2924:                                             ; preds = %2920
  %2925 = trunc i64 %2913 to i32
  %2926 = add nsw i32 %2925, -4
  %2927 = sub nsw i32 %2915, %2918
  %2928 = sub nsw i32 0, %2918
  %2929 = load i32, i32* %24, align 8
  %2930 = sub nsw i32 %2929, %2918
  %2931 = icmp slt i32 %2927, %2928
  %2932 = icmp slt i32 %2930, %2927
  %2933 = select i1 %2932, i32 %2930, i32 %2927
  %2934 = select i1 %2931, i32 %2928, i32 %2933
  %2935 = add nsw i32 %2934, %2918
  store i32 %2935, i32* %28, align 8
  %2936 = load i8*, i8** %1421, align 16
  %2937 = sub nsw i32 %2916, %2918
  %2938 = sub nsw i32 %2917, %2918
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %2936, i32 32, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.17, i64 0, i64 0), i32 %2927, i32 %2937, i32 %2938) #8
  %2939 = load i32, i32* %1965, align 8
  %2940 = and i32 %2939, 131074
  %2941 = icmp eq i32 %2940, 0
  %2942 = select i1 %2941, i32 %2926, i32 0
  br label %3043

2943:                                             ; preds = %2920
  %2944 = load i8*, i8** %1962, align 16
  %2945 = icmp eq i8* %2944, null
  br i1 %2945, label %2965, label %2946

2946:                                             ; preds = %2943
  %2947 = load i32, i32* %22, align 4
  %2948 = load i32, i32* %1960, align 4
  %2949 = shl nsw i32 %2948, 3
  %2950 = sub nsw i32 %2947, %2949
  %2951 = icmp slt i32 %2918, %2950
  br i1 %2951, label %2965, label %2952

2952:                                             ; preds = %2946
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %1963, i8* align 16 %1964, i64 32, i1 false) #8
  store i8* null, i8** %1962, align 16
  store i32 0, i32* %1960, align 4
  %2953 = sub nsw i32 %2918, %2916
  %2954 = load i32, i32* %28, align 8
  %2955 = sub nsw i32 0, %2954
  %2956 = load i32, i32* %24, align 8
  %2957 = sub nsw i32 %2956, %2954
  %2958 = icmp slt i32 %2953, %2955
  %2959 = icmp slt i32 %2957, %2953
  %2960 = select i1 %2959, i32 %2957, i32 %2953
  %2961 = select i1 %2958, i32 %2955, i32 %2960
  %2962 = add nsw i32 %2961, %2954
  store i32 %2962, i32* %28, align 8
  %2963 = sub i32 %2917, %2918
  %2964 = add i32 %2962, %2963
  br label %2965

2965:                                             ; preds = %2952, %2946, %2943
  %2966 = phi i32 [ %2917, %2943 ], [ %2917, %2946 ], [ %2964, %2952 ]
  %2967 = phi i32 [ %2916, %2943 ], [ %2916, %2946 ], [ %2964, %2952 ]
  %2968 = phi i32 [ %2918, %2943 ], [ %2918, %2946 ], [ %2962, %2952 ]
  %2969 = icmp slt i32 %2968, %2967
  br i1 %2969, label %2970, label %3041

2970:                                             ; preds = %2965, %2912
  %2971 = phi i32 [ %2917, %2912 ], [ %2966, %2965 ]
  %2972 = phi i32 [ %2916, %2912 ], [ %2967, %2965 ]
  %2973 = phi i32 [ %2918, %2912 ], [ %2968, %2965 ]
  %2974 = load [2 x i16]*, [2 x i16]** %2909, align 8
  %2975 = load i32, i32* %2910, align 8
  %2976 = load i32, i32* %24, align 8
  %2977 = load i8*, i8** %21, align 8
  %2978 = lshr i32 %2973, 3
  %2979 = zext i32 %2978 to i64
  %2980 = getelementptr inbounds i8, i8* %2977, i64 %2979
  %2981 = bitcast i8* %2980 to i32*
  %2982 = load i32, i32* %2981, align 1
  %2983 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2982) #9, !srcloc !2
  %2984 = and i32 %2973, 7
  %2985 = shl i32 %2983, %2984
  %2986 = trunc i32 %2975 to i8
  %2987 = sub i8 0, %2986
  %2988 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2987, i32 %2985) #9, !srcloc !3
  %2989 = zext i32 %2988 to i64
  %2990 = getelementptr inbounds [2 x i16], [2 x i16]* %2974, i64 %2989, i64 0
  %2991 = load i16, i16* %2990, align 2
  %2992 = getelementptr inbounds [2 x i16], [2 x i16]* %2974, i64 %2989, i64 1
  %2993 = load i16, i16* %2992, align 2
  %2994 = sext i16 %2993 to i32
  %2995 = add i32 %2973, %2994
  %2996 = icmp ugt i32 %2976, %2995
  %2997 = select i1 %2996, i32 %2995, i32 %2976
  store i32 %2997, i32* %28, align 8
  %2998 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 17, i64 %2913
  %2999 = bitcast i32* %2998 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2999, align 4
  %3000 = icmp eq i16 %2991, 0
  br i1 %3000, label %3037, label %3001

3001:                                             ; preds = %2970
  %3002 = sext i16 %2991 to i32
  br label %3003

3003:                                             ; preds = %3003, %3001
  %3004 = phi i32 [ %3011, %3003 ], [ %3002, %3001 ]
  %3005 = sext i32 %3004 to i64
  %3006 = getelementptr inbounds [16 x i32], [16 x i32]* bitcast (<{ [8 x i32], [8 x i32] }>* @huffman_decode.idxtab to [16 x i32]*), i64 0, i64 %3005
  %3007 = load i32, i32* %3006, align 4
  %3008 = sext i32 %3007 to i64
  %3009 = add nsw i64 %2913, %3008
  %3010 = lshr i32 8, %3007
  %3011 = xor i32 %3010, %3004
  %3012 = load i32, i32* %28, align 8
  %3013 = load i8*, i8** %21, align 8
  %3014 = lshr i32 %3012, 3
  %3015 = zext i32 %3014 to i64
  %3016 = getelementptr inbounds i8, i8* %3013, i64 %3015
  %3017 = load i8, i8* %3016, align 1
  %3018 = and i32 %3012, 7
  %3019 = zext i8 %3017 to i32
  %3020 = shl i32 %3019, %3018
  %3021 = lshr i32 %3020, 7
  %3022 = and i32 %3021, 1
  %3023 = load i32, i32* %24, align 8
  %3024 = icmp slt i32 %3012, %3023
  %3025 = zext i1 %3024 to i32
  %3026 = add i32 %3012, %3025
  store i32 %3026, i32* %28, align 8
  %3027 = sub nsw i32 0, %3022
  %3028 = getelementptr inbounds [576 x i16], [576 x i16]* %9, i64 0, i64 %3009
  %3029 = load i16, i16* %3028, align 2
  %3030 = sext i16 %3029 to i64
  %3031 = getelementptr inbounds [512 x i32], [512 x i32]* @exp_table_fixed, i64 0, i64 %3030
  %3032 = load i32, i32* %3031, align 4
  %3033 = xor i32 %3032, %3027
  %3034 = add i32 %3033, %3022
  %3035 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 17, i64 %3009
  store i32 %3034, i32* %3035, align 4
  %3036 = icmp eq i32 %3011, 0
  br i1 %3036, label %3037, label %3003

3037:                                             ; preds = %3003, %2970
  %3038 = add nsw i64 %2913, 4
  %3039 = add nsw i32 %2914, 4
  %3040 = icmp slt i64 %3038, 573
  br i1 %3040, label %2912, label %3043

3041:                                             ; preds = %2965
  %3042 = trunc i64 %2913 to i32
  br label %3043

3043:                                             ; preds = %3037, %3041, %2924, %2903
  %3044 = phi i32 [ %2917, %2924 ], [ %2898, %2903 ], [ %2966, %3041 ], [ %2971, %3037 ]
  %3045 = phi i32 [ %2916, %2924 ], [ %2899, %2903 ], [ %2967, %3041 ], [ %2972, %3037 ]
  %3046 = phi i32 [ %2942, %2924 ], [ %2900, %2903 ], [ %3042, %3041 ], [ %3039, %3037 ]
  %3047 = load i32, i32* %28, align 8
  %3048 = sub nsw i32 %3044, %3047
  %3049 = icmp slt i32 %3048, 0
  br i1 %3049, label %3050, label %3056

3050:                                             ; preds = %3043
  %3051 = load i32, i32* %1965, align 8
  %3052 = and i32 %3051, 131076
  %3053 = icmp eq i32 %3052, 0
  br i1 %3053, label %3064, label %3054

3054:                                             ; preds = %3050
  %3055 = load i8*, i8** %1421, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %3055, i32 16, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i32 %3048) #8
  br label %3064

3056:                                             ; preds = %3043
  %3057 = icmp eq i32 %3048, 0
  br i1 %3057, label %3064, label %3058

3058:                                             ; preds = %3056
  %3059 = load i32, i32* %1965, align 8
  %3060 = and i32 %3059, 262148
  %3061 = icmp eq i32 %3060, 0
  br i1 %3061, label %3064, label %3062

3062:                                             ; preds = %3058
  %3063 = load i8*, i8** %1421, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %3063, i32 16, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i32 %3048) #8
  br label %3064

3064:                                             ; preds = %3062, %3058, %3056, %3054, %3050
  %3065 = phi i32 [ 0, %3054 ], [ 0, %3062 ], [ %3046, %3058 ], [ %3046, %3056 ], [ %3046, %3050 ]
  %3066 = sext i32 %3065 to i64
  %3067 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 17, i64 %3066
  %3068 = bitcast i32* %3067 to i8*
  %3069 = sub nsw i32 576, %3065
  %3070 = sext i32 %3069 to i64
  %3071 = shl nsw i64 %3070, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %3068, i8 0, i64 %3071, i1 false) #8
  %3072 = load i32, i32* %28, align 8
  %3073 = sub nsw i32 0, %3072
  %3074 = load i32, i32* %24, align 8
  %3075 = sub nsw i32 %3074, %3072
  %3076 = icmp slt i32 %3048, %3073
  %3077 = icmp slt i32 %3075, %3048
  %3078 = select i1 %3077, i32 %3075, i32 %3048
  %3079 = select i1 %3076, i32 %3073, i32 %3078
  %3080 = add nsw i32 %3079, %3072
  store i32 %3080, i32* %28, align 8
  %3081 = load i8*, i8** %1962, align 16
  %3082 = icmp eq i8* %3081, null
  br i1 %3082, label %3100, label %3083

3083:                                             ; preds = %3064
  %3084 = load i32, i32* %22, align 4
  %3085 = load i32, i32* %1960, align 4
  %3086 = shl nsw i32 %3085, 3
  %3087 = sub nsw i32 %3084, %3086
  %3088 = icmp slt i32 %3080, %3087
  br i1 %3088, label %3100, label %3089

3089:                                             ; preds = %3083
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %1963, i8* align 16 %1964, i64 32, i1 false) #8
  store i8* null, i8** %1962, align 16
  store i32 0, i32* %1960, align 4
  %3090 = sub nsw i32 %3080, %3045
  %3091 = load i32, i32* %28, align 8
  %3092 = sub nsw i32 0, %3091
  %3093 = load i32, i32* %24, align 8
  %3094 = sub nsw i32 %3093, %3091
  %3095 = icmp slt i32 %3090, %3092
  %3096 = icmp slt i32 %3094, %3090
  %3097 = select i1 %3096, i32 %3094, i32 %3090
  %3098 = select i1 %3095, i32 %3092, i32 %3097
  %3099 = add nsw i32 %3098, %3091
  store i32 %3099, i32* %28, align 8
  br label %3100

3100:                                             ; preds = %3089, %3083, %3064
  %3101 = phi i32 [ %3080, %3064 ], [ %3080, %3083 ], [ %3099, %3089 ]
  %3102 = add nuw nsw i64 %1986, 1
  %3103 = load i32, i32* %1328, align 8
  %3104 = sext i32 %3103 to i64
  %3105 = icmp slt i64 %3102, %3104
  br i1 %3105, label %1984, label %3106

3106:                                             ; preds = %3100, %1976
  %3107 = phi i32 [ %1977, %1976 ], [ %3103, %3100 ]
  %3108 = load i32, i32* %1966, align 4
  %3109 = icmp eq i32 %3108, 1
  br i1 %3109, label %3110, label %3413

3110:                                             ; preds = %3106
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %1956) #8
  store i32 -1431655766, i32* %1957, align 4
  store i32 -1431655766, i32* %1958, align 4
  store i32 -1431655766, i32* %1959, align 4
  %3111 = load i32, i32* %1418, align 32
  %3112 = and i32 %3111, 1
  %3113 = icmp eq i32 %3112, 0
  br i1 %3113, label %3391, label %3114

3114:                                             ; preds = %3110
  %3115 = load i32, i32* %1325, align 4
  %3116 = icmp eq i32 %3115, 0
  br i1 %3116, label %3123, label %3117

3117:                                             ; preds = %3114
  %3118 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 1, i64 %1978, i32 4
  %3119 = load i32, i32* %3118, align 16
  %3120 = and i32 %3119, 1
  %3121 = zext i32 %3120 to i64
  %3122 = getelementptr inbounds [2 x [2 x [16 x i32]]], [2 x [2 x [16 x i32]]]* @is_table_lsf, i64 0, i64 %3121, i64 0
  br label %3123

3123:                                             ; preds = %3117, %3114
  %3124 = phi i32 [ 16, %3117 ], [ 7, %3114 ]
  %3125 = phi [16 x i32]* [ %3122, %3117 ], [ bitcast (<{ <{ i32, i32, i32, i32, i32, i32, i32, [9 x i32] }>, <{ i32, i32, i32, i32, i32, i32, [10 x i32] }> }>* @is_table to [16 x i32]*), %3114 ]
  %3126 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 0, i64 %1978, i32 17, i64 576
  %3127 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 1, i64 %1978, i32 17, i64 576
  store i32 0, i32* %1957, align 4
  store i32 0, i32* %1958, align 4
  store i32 0, i32* %1959, align 4
  %3128 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 1, i64 %1978, i32 13
  %3129 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 1, i64 %1978, i32 14
  %3130 = load i32, i32* %3128, align 4
  %3131 = icmp sgt i32 %3130, 12
  br i1 %3131, label %3263, label %3132

3132:                                             ; preds = %3123
  %3133 = load i32, i32* %3129, align 8
  %3134 = sub nsw i32 13, %3130
  %3135 = mul nsw i32 %3134, 3
  %3136 = add i32 %3135, -3
  %3137 = add i32 %3136, %3133
  br label %3138

3138:                                             ; preds = %3258, %3132
  %3139 = phi i64 [ %3259, %3258 ], [ 12, %3132 ]
  %3140 = phi i32* [ %3163, %3258 ], [ %3127, %3132 ]
  %3141 = phi i32* [ %3162, %3258 ], [ %3126, %3132 ]
  %3142 = phi i32 [ %3145, %3258 ], [ %3137, %3132 ]
  %3143 = icmp eq i64 %3139, 11
  %3144 = add nsw i32 %3142, -3
  %3145 = select i1 %3143, i32 %3142, i32 %3144
  %3146 = load i32, i32* %1419, align 16
  %3147 = sext i32 %3146 to i64
  %3148 = getelementptr inbounds [9 x [13 x i8]], [9 x [13 x i8]]* @ff_band_size_short, i64 0, i64 %3147, i64 %3139
  %3149 = load i8, i8* %3148, align 1
  %3150 = zext i8 %3149 to i64
  %3151 = sub nsw i64 0, %3150
  %3152 = icmp eq i8 %3149, 0
  %3153 = sext i32 %3145 to i64
  %3154 = and i64 %3150, 1
  %3155 = icmp eq i8 %3149, 1
  %3156 = sub nsw i64 %3150, %3154
  %3157 = icmp eq i64 %3154, 0
  br label %3158

3158:                                             ; preds = %3255, %3138
  %3159 = phi i64 [ 2, %3138 ], [ %3256, %3255 ]
  %3160 = phi i32* [ %3140, %3138 ], [ %3163, %3255 ]
  %3161 = phi i32* [ %3141, %3138 ], [ %3162, %3255 ]
  %3162 = getelementptr inbounds i32, i32* %3161, i64 %3151
  %3163 = getelementptr inbounds i32, i32* %3160, i64 %3151
  %3164 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i64 0, i64 %3159
  %3165 = load i32, i32* %3164, align 4
  %3166 = icmp eq i32 %3165, 0
  br i1 %3166, label %3167, label %3219

3167:                                             ; preds = %3158
  br i1 %3152, label %3177, label %3170

3168:                                             ; preds = %3170
  %3169 = icmp eq i64 %3175, %3150
  br i1 %3169, label %3177, label %3170

3170:                                             ; preds = %3167, %3168
  %3171 = phi i64 [ %3175, %3168 ], [ 0, %3167 ]
  %3172 = getelementptr inbounds i32, i32* %3163, i64 %3171
  %3173 = load i32, i32* %3172, align 4
  %3174 = icmp eq i32 %3173, 0
  %3175 = add nuw nsw i64 %3171, 1
  br i1 %3174, label %3168, label %3176

3176:                                             ; preds = %3170
  store i32 1, i32* %3164, align 4
  br label %3219

3177:                                             ; preds = %3168, %3167
  %3178 = add nsw i64 %3159, %3153
  %3179 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 1, i64 %1978, i32 15, i64 %3178
  %3180 = load i8, i8* %3179, align 1
  %3181 = zext i8 %3180 to i32
  %3182 = icmp ugt i32 %3124, %3181
  br i1 %3182, label %3183, label %3219

3183:                                             ; preds = %3177
  %3184 = zext i8 %3180 to i64
  br i1 %3152, label %3255, label %3185

3185:                                             ; preds = %3183
  %3186 = getelementptr inbounds [16 x i32], [16 x i32]* %3125, i64 1, i64 %3184
  %3187 = load i32, i32* %3186, align 4
  %3188 = getelementptr inbounds [16 x i32], [16 x i32]* %3125, i64 0, i64 %3184
  %3189 = load i32, i32* %3188, align 4
  %3190 = sext i32 %3189 to i64
  %3191 = sext i32 %3187 to i64
  br i1 %3155, label %3242, label %3192

3192:                                             ; preds = %3185, %3192
  %3193 = phi i64 [ %3216, %3192 ], [ 0, %3185 ]
  %3194 = phi i64 [ %3217, %3192 ], [ %3156, %3185 ]
  %3195 = getelementptr inbounds i32, i32* %3162, i64 %3193
  %3196 = load i32, i32* %3195, align 4
  %3197 = sext i32 %3196 to i64
  %3198 = mul nsw i64 %3197, %3190
  %3199 = lshr i64 %3198, 23
  %3200 = trunc i64 %3199 to i32
  store i32 %3200, i32* %3195, align 4
  %3201 = mul nsw i64 %3197, %3191
  %3202 = lshr i64 %3201, 23
  %3203 = trunc i64 %3202 to i32
  %3204 = getelementptr inbounds i32, i32* %3163, i64 %3193
  store i32 %3203, i32* %3204, align 4
  %3205 = or i64 %3193, 1
  %3206 = getelementptr inbounds i32, i32* %3162, i64 %3205
  %3207 = load i32, i32* %3206, align 4
  %3208 = sext i32 %3207 to i64
  %3209 = mul nsw i64 %3208, %3190
  %3210 = lshr i64 %3209, 23
  %3211 = trunc i64 %3210 to i32
  store i32 %3211, i32* %3206, align 4
  %3212 = mul nsw i64 %3208, %3191
  %3213 = lshr i64 %3212, 23
  %3214 = trunc i64 %3213 to i32
  %3215 = getelementptr inbounds i32, i32* %3163, i64 %3205
  store i32 %3214, i32* %3215, align 4
  %3216 = add nuw nsw i64 %3193, 2
  %3217 = add i64 %3194, -2
  %3218 = icmp eq i64 %3217, 0
  br i1 %3218, label %3242, label %3192

3219:                                             ; preds = %3177, %3176, %3158
  %3220 = load i32, i32* %1418, align 32
  %3221 = and i32 %3220, 2
  %3222 = icmp eq i32 %3221, 0
  %3223 = or i1 %3152, %3222
  br i1 %3223, label %3255, label %3224

3224:                                             ; preds = %3219, %3224
  %3225 = phi i64 [ %3240, %3224 ], [ 0, %3219 ]
  %3226 = getelementptr inbounds i32, i32* %3162, i64 %3225
  %3227 = load i32, i32* %3226, align 4
  %3228 = getelementptr inbounds i32, i32* %3163, i64 %3225
  %3229 = load i32, i32* %3228, align 4
  %3230 = add i32 %3229, %3227
  %3231 = sext i32 %3230 to i64
  %3232 = mul nsw i64 %3231, 5931642
  %3233 = lshr i64 %3232, 23
  %3234 = trunc i64 %3233 to i32
  store i32 %3234, i32* %3226, align 4
  %3235 = sub i32 %3227, %3229
  %3236 = sext i32 %3235 to i64
  %3237 = mul nsw i64 %3236, 5931642
  %3238 = lshr i64 %3237, 23
  %3239 = trunc i64 %3238 to i32
  store i32 %3239, i32* %3228, align 4
  %3240 = add nuw nsw i64 %3225, 1
  %3241 = icmp eq i64 %3240, %3150
  br i1 %3241, label %3255, label %3224

3242:                                             ; preds = %3192, %3185
  %3243 = phi i64 [ 0, %3185 ], [ %3216, %3192 ]
  br i1 %3157, label %3255, label %3244

3244:                                             ; preds = %3242
  %3245 = getelementptr inbounds i32, i32* %3162, i64 %3243
  %3246 = load i32, i32* %3245, align 4
  %3247 = sext i32 %3246 to i64
  %3248 = mul nsw i64 %3247, %3190
  %3249 = lshr i64 %3248, 23
  %3250 = trunc i64 %3249 to i32
  store i32 %3250, i32* %3245, align 4
  %3251 = mul nsw i64 %3247, %3191
  %3252 = lshr i64 %3251, 23
  %3253 = trunc i64 %3252 to i32
  %3254 = getelementptr inbounds i32, i32* %3163, i64 %3243
  store i32 %3253, i32* %3254, align 4
  br label %3255

3255:                                             ; preds = %3224, %3244, %3242, %3219, %3183
  %3256 = add nsw i64 %3159, -1
  %3257 = icmp eq i64 %3159, 0
  br i1 %3257, label %3258, label %3158

3258:                                             ; preds = %3255
  %3259 = add i64 %3139, -1
  %3260 = load i32, i32* %3128, align 4
  %3261 = sext i32 %3260 to i64
  %3262 = icmp sgt i64 %3139, %3261
  br i1 %3262, label %3138, label %3263

3263:                                             ; preds = %3258, %3123
  %3264 = phi i32* [ %3126, %3123 ], [ %3162, %3258 ]
  %3265 = phi i32* [ %3127, %3123 ], [ %3163, %3258 ]
  %3266 = load i32, i32* %3129, align 8
  %3267 = icmp sgt i32 %3266, 0
  br i1 %3267, label %3268, label %3411

3268:                                             ; preds = %3263
  %3269 = load i32, i32* %1958, align 4
  %3270 = load i32, i32* %1957, align 4
  %3271 = or i32 %3270, %3269
  %3272 = load i32, i32* %1959, align 4
  %3273 = or i32 %3271, %3272
  %3274 = sext i32 %3266 to i64
  br label %3275

3275:                                             ; preds = %3388, %3268
  %3276 = phi i64 [ %3274, %3268 ], [ %3280, %3388 ]
  %3277 = phi i32* [ %3265, %3268 ], [ %3288, %3388 ]
  %3278 = phi i32* [ %3264, %3268 ], [ %3287, %3388 ]
  %3279 = phi i32 [ %3273, %3268 ], [ %3389, %3388 ]
  %3280 = add nsw i64 %3276, -1
  %3281 = load i32, i32* %1419, align 16
  %3282 = sext i32 %3281 to i64
  %3283 = getelementptr inbounds [9 x [22 x i8]], [9 x [22 x i8]]* @ff_band_size_long, i64 0, i64 %3282, i64 %3280
  %3284 = load i8, i8* %3283, align 1
  %3285 = zext i8 %3284 to i64
  %3286 = sub nsw i64 0, %3285
  %3287 = getelementptr inbounds i32, i32* %3278, i64 %3286
  %3288 = getelementptr inbounds i32, i32* %3277, i64 %3286
  %3289 = icmp eq i32 %3279, 0
  br i1 %3289, label %3290, label %3349

3290:                                             ; preds = %3275
  %3291 = icmp eq i8 %3284, 0
  br i1 %3291, label %3300, label %3294

3292:                                             ; preds = %3294
  %3293 = icmp eq i64 %3299, %3285
  br i1 %3293, label %3300, label %3294

3294:                                             ; preds = %3290, %3292
  %3295 = phi i64 [ %3299, %3292 ], [ 0, %3290 ]
  %3296 = getelementptr inbounds i32, i32* %3288, i64 %3295
  %3297 = load i32, i32* %3296, align 4
  %3298 = icmp eq i32 %3297, 0
  %3299 = add nuw nsw i64 %3295, 1
  br i1 %3298, label %3292, label %3349

3300:                                             ; preds = %3292, %3290
  %3301 = icmp eq i64 %3280, 21
  %3302 = shl i64 %3280, 32
  %3303 = ashr exact i64 %3302, 32
  %3304 = select i1 %3301, i64 20, i64 %3303
  %3305 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 1, i64 %1978, i32 15, i64 %3304
  %3306 = load i8, i8* %3305, align 1
  %3307 = zext i8 %3306 to i32
  %3308 = icmp ugt i32 %3124, %3307
  br i1 %3308, label %3309, label %3349

3309:                                             ; preds = %3300
  %3310 = zext i8 %3306 to i64
  br i1 %3291, label %3388, label %3311

3311:                                             ; preds = %3309
  %3312 = getelementptr inbounds [16 x i32], [16 x i32]* %3125, i64 1, i64 %3310
  %3313 = load i32, i32* %3312, align 4
  %3314 = getelementptr inbounds [16 x i32], [16 x i32]* %3125, i64 0, i64 %3310
  %3315 = load i32, i32* %3314, align 4
  %3316 = sext i32 %3315 to i64
  %3317 = sext i32 %3313 to i64
  %3318 = and i64 %3285, 1
  %3319 = icmp eq i8 %3284, 1
  br i1 %3319, label %3374, label %3320

3320:                                             ; preds = %3311
  %3321 = sub nsw i64 %3285, %3318
  br label %3322

3322:                                             ; preds = %3322, %3320
  %3323 = phi i64 [ 0, %3320 ], [ %3346, %3322 ]
  %3324 = phi i64 [ %3321, %3320 ], [ %3347, %3322 ]
  %3325 = getelementptr inbounds i32, i32* %3287, i64 %3323
  %3326 = load i32, i32* %3325, align 4
  %3327 = sext i32 %3326 to i64
  %3328 = mul nsw i64 %3327, %3316
  %3329 = lshr i64 %3328, 23
  %3330 = trunc i64 %3329 to i32
  store i32 %3330, i32* %3325, align 4
  %3331 = mul nsw i64 %3327, %3317
  %3332 = lshr i64 %3331, 23
  %3333 = trunc i64 %3332 to i32
  %3334 = getelementptr inbounds i32, i32* %3288, i64 %3323
  store i32 %3333, i32* %3334, align 4
  %3335 = or i64 %3323, 1
  %3336 = getelementptr inbounds i32, i32* %3287, i64 %3335
  %3337 = load i32, i32* %3336, align 4
  %3338 = sext i32 %3337 to i64
  %3339 = mul nsw i64 %3338, %3316
  %3340 = lshr i64 %3339, 23
  %3341 = trunc i64 %3340 to i32
  store i32 %3341, i32* %3336, align 4
  %3342 = mul nsw i64 %3338, %3317
  %3343 = lshr i64 %3342, 23
  %3344 = trunc i64 %3343 to i32
  %3345 = getelementptr inbounds i32, i32* %3288, i64 %3335
  store i32 %3344, i32* %3345, align 4
  %3346 = add nuw nsw i64 %3323, 2
  %3347 = add i64 %3324, -2
  %3348 = icmp eq i64 %3347, 0
  br i1 %3348, label %3374, label %3322

3349:                                             ; preds = %3294, %3300, %3275
  %3350 = phi i32 [ %3279, %3275 ], [ 0, %3300 ], [ 1, %3294 ]
  %3351 = load i32, i32* %1418, align 32
  %3352 = and i32 %3351, 2
  %3353 = icmp ne i32 %3352, 0
  %3354 = icmp ne i8 %3284, 0
  %3355 = and i1 %3354, %3353
  br i1 %3355, label %3356, label %3388

3356:                                             ; preds = %3349, %3356
  %3357 = phi i64 [ %3372, %3356 ], [ 0, %3349 ]
  %3358 = getelementptr inbounds i32, i32* %3287, i64 %3357
  %3359 = load i32, i32* %3358, align 4
  %3360 = getelementptr inbounds i32, i32* %3288, i64 %3357
  %3361 = load i32, i32* %3360, align 4
  %3362 = add i32 %3361, %3359
  %3363 = sext i32 %3362 to i64
  %3364 = mul nsw i64 %3363, 5931642
  %3365 = lshr i64 %3364, 23
  %3366 = trunc i64 %3365 to i32
  store i32 %3366, i32* %3358, align 4
  %3367 = sub i32 %3359, %3361
  %3368 = sext i32 %3367 to i64
  %3369 = mul nsw i64 %3368, 5931642
  %3370 = lshr i64 %3369, 23
  %3371 = trunc i64 %3370 to i32
  store i32 %3371, i32* %3360, align 4
  %3372 = add nuw nsw i64 %3357, 1
  %3373 = icmp eq i64 %3372, %3285
  br i1 %3373, label %3388, label %3356

3374:                                             ; preds = %3322, %3311
  %3375 = phi i64 [ 0, %3311 ], [ %3346, %3322 ]
  %3376 = icmp eq i64 %3318, 0
  br i1 %3376, label %3388, label %3377

3377:                                             ; preds = %3374
  %3378 = getelementptr inbounds i32, i32* %3287, i64 %3375
  %3379 = load i32, i32* %3378, align 4
  %3380 = sext i32 %3379 to i64
  %3381 = mul nsw i64 %3380, %3316
  %3382 = lshr i64 %3381, 23
  %3383 = trunc i64 %3382 to i32
  store i32 %3383, i32* %3378, align 4
  %3384 = mul nsw i64 %3380, %3317
  %3385 = lshr i64 %3384, 23
  %3386 = trunc i64 %3385 to i32
  %3387 = getelementptr inbounds i32, i32* %3288, i64 %3375
  store i32 %3386, i32* %3387, align 4
  br label %3388

3388:                                             ; preds = %3356, %3377, %3374, %3349, %3309
  %3389 = phi i32 [ %3350, %3349 ], [ 0, %3309 ], [ 0, %3374 ], [ 0, %3377 ], [ %3350, %3356 ]
  %3390 = icmp sgt i64 %3280, 0
  br i1 %3390, label %3275, label %3411

3391:                                             ; preds = %3110
  %3392 = and i32 %3111, 2
  %3393 = icmp eq i32 %3392, 0
  br i1 %3393, label %3411, label %3394

3394:                                             ; preds = %3391, %3394
  %3395 = phi i64 [ %3409, %3394 ], [ 0, %3391 ]
  %3396 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 0, i64 %1978, i32 17, i64 %3395
  %3397 = load i32, i32* %3396, align 4
  %3398 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 1, i64 %1978, i32 17, i64 %3395
  %3399 = load i32, i32* %3398, align 4
  %3400 = add i32 %3399, %3397
  store i32 %3400, i32* %3396, align 4
  %3401 = sub i32 %3397, %3399
  store i32 %3401, i32* %3398, align 4
  %3402 = or i64 %3395, 1
  %3403 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 0, i64 %1978, i32 17, i64 %3402
  %3404 = load i32, i32* %3403, align 4
  %3405 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 1, i64 %1978, i32 17, i64 %3402
  %3406 = load i32, i32* %3405, align 4
  %3407 = add i32 %3406, %3404
  store i32 %3407, i32* %3403, align 4
  %3408 = sub i32 %3404, %3406
  store i32 %3408, i32* %3405, align 4
  %3409 = add nuw nsw i64 %3395, 2
  %3410 = icmp eq i64 %3409, 576
  br i1 %3410, label %3411, label %3394

3411:                                             ; preds = %3388, %3394, %3391, %3263
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %1956) #8
  %3412 = load i32, i32* %1328, align 8
  br label %3413

3413:                                             ; preds = %3411, %3106
  %3414 = phi i32 [ %3412, %3411 ], [ %3107, %3106 ]
  %3415 = icmp sgt i32 %3414, 0
  br i1 %3415, label %3416, label %3699

3416:                                             ; preds = %3413
  %3417 = mul nuw nsw i64 %1978, 18
  br label %3418

3418:                                             ; preds = %3692, %3416
  %3419 = phi i64 [ 0, %3416 ], [ %3695, %3692 ]
  %3420 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %3419, i64 %1978
  call void @llvm.lifetime.start.p0i8(i64 2304, i8* nonnull %1967) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1967, i8 -86, i64 2304, i1 false) #8
  %3421 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %3419, i64 %1978, i32 5
  %3422 = load i8, i8* %3421, align 4
  %3423 = icmp eq i8 %3422, 2
  br i1 %3423, label %3425, label %3424

3424:                                             ; preds = %3418
  call void @llvm.lifetime.end.p0i8(i64 2304, i8* nonnull %1967) #8
  br label %3516

3425:                                             ; preds = %3418
  %3426 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %3419, i64 %1978, i32 6
  %3427 = load i8, i8* %3426, align 1
  %3428 = icmp eq i8 %3427, 0
  br i1 %3428, label %3436, label %3429

3429:                                             ; preds = %3425
  %3430 = load i32, i32* %1419, align 16
  %3431 = icmp eq i32 %3430, 8
  br i1 %3431, label %3434, label %3432

3432:                                             ; preds = %3429
  %3433 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %3419, i64 %1978, i32 17, i64 36
  br label %3438

3434:                                             ; preds = %3429
  %3435 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %3419, i64 %1978, i32 17, i64 72
  br label %3438

3436:                                             ; preds = %3425
  %3437 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %3419, i64 %1978, i32 17, i64 0
  br label %3438

3438:                                             ; preds = %3436, %3434, %3432
  %3439 = phi i32* [ %3433, %3432 ], [ %3435, %3434 ], [ %3437, %3436 ]
  %3440 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %3419, i64 %1978, i32 13
  %3441 = load i32, i32* %3440, align 4
  %3442 = icmp slt i32 %3441, 13
  br i1 %3442, label %3444, label %3443

3443:                                             ; preds = %3438
  call void @llvm.lifetime.end.p0i8(i64 2304, i8* nonnull %1967) #8
  br label %3513

3444:                                             ; preds = %3438
  %3445 = sext i32 %3441 to i64
  br label %3446

3446:                                             ; preds = %3499, %3444
  %3447 = phi i64 [ %3445, %3444 ], [ %3506, %3499 ]
  %3448 = phi i32* [ %3439, %3444 ], [ %3502, %3499 ]
  %3449 = load i32, i32* %1419, align 16
  %3450 = sext i32 %3449 to i64
  %3451 = getelementptr inbounds [9 x [13 x i8]], [9 x [13 x i8]]* @ff_band_size_short, i64 0, i64 %3450, i64 %3447
  %3452 = load i8, i8* %3451, align 1
  %3453 = zext i8 %3452 to i32
  %3454 = icmp eq i8 %3452, 0
  br i1 %3454, label %3499, label %3455

3455:                                             ; preds = %3446
  %3456 = zext i8 %3452 to i64
  %3457 = shl nuw nsw i32 %3453, 1
  %3458 = zext i32 %3457 to i64
  %3459 = and i8 %3452, 1
  %3460 = icmp eq i8 %3459, 0
  br i1 %3460, label %3469, label %3461

3461:                                             ; preds = %3455
  %3462 = load i32, i32* %3448, align 4
  store i32 %3462, i32* %1968, align 16
  %3463 = getelementptr inbounds i32, i32* %3448, i64 %3456
  %3464 = load i32, i32* %3463, align 4
  store i32 %3464, i32* %1973, align 4
  %3465 = getelementptr inbounds i32, i32* %3448, i64 %3458
  %3466 = load i32, i32* %3465, align 4
  store i32 %3466, i32* %1974, align 8
  %3467 = getelementptr inbounds i32, i32* %3448, i64 1
  %3468 = add nsw i32 %3453, -1
  br label %3469

3469:                                             ; preds = %3461, %3455
  %3470 = phi i32* [ %1975, %3461 ], [ %1968, %3455 ]
  %3471 = phi i32* [ %3467, %3461 ], [ %3448, %3455 ]
  %3472 = phi i32 [ %3468, %3461 ], [ %3453, %3455 ]
  %3473 = phi i32* [ %3467, %3461 ], [ undef, %3455 ]
  %3474 = icmp eq i8 %3452, 1
  br i1 %3474, label %3499, label %3475

3475:                                             ; preds = %3469, %3475
  %3476 = phi i32* [ %3495, %3475 ], [ %3470, %3469 ]
  %3477 = phi i32* [ %3496, %3475 ], [ %3471, %3469 ]
  %3478 = phi i32 [ %3497, %3475 ], [ %3472, %3469 ]
  %3479 = load i32, i32* %3477, align 4
  %3480 = getelementptr inbounds i32, i32* %3476, i64 1
  store i32 %3479, i32* %3476, align 4
  %3481 = getelementptr inbounds i32, i32* %3477, i64 %3456
  %3482 = load i32, i32* %3481, align 4
  %3483 = getelementptr inbounds i32, i32* %3476, i64 2
  store i32 %3482, i32* %3480, align 4
  %3484 = getelementptr inbounds i32, i32* %3477, i64 %3458
  %3485 = load i32, i32* %3484, align 4
  %3486 = getelementptr inbounds i32, i32* %3476, i64 3
  store i32 %3485, i32* %3483, align 4
  %3487 = getelementptr inbounds i32, i32* %3477, i64 1
  %3488 = load i32, i32* %3487, align 4
  %3489 = getelementptr inbounds i32, i32* %3476, i64 4
  store i32 %3488, i32* %3486, align 4
  %3490 = getelementptr inbounds i32, i32* %3487, i64 %3456
  %3491 = load i32, i32* %3490, align 4
  %3492 = getelementptr inbounds i32, i32* %3476, i64 5
  store i32 %3491, i32* %3489, align 4
  %3493 = getelementptr inbounds i32, i32* %3487, i64 %3458
  %3494 = load i32, i32* %3493, align 4
  %3495 = getelementptr inbounds i32, i32* %3476, i64 6
  store i32 %3494, i32* %3492, align 4
  %3496 = getelementptr inbounds i32, i32* %3477, i64 2
  %3497 = add nsw i32 %3478, -2
  %3498 = icmp sgt i32 %3497, 0
  br i1 %3498, label %3475, label %3499

3499:                                             ; preds = %3469, %3475, %3446
  %3500 = phi i64 [ 0, %3446 ], [ %3458, %3475 ], [ %3458, %3469 ]
  %3501 = phi i32* [ %3448, %3446 ], [ %3473, %3469 ], [ %3496, %3475 ]
  %3502 = getelementptr inbounds i32, i32* %3501, i64 %3500
  %3503 = bitcast i32* %3448 to i8*
  %3504 = mul nuw nsw i32 %3453, 12
  %3505 = zext i32 %3504 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3503, i8* nonnull align 16 %1967, i64 %3505, i1 false) #8
  %3506 = add nsw i64 %3447, 1
  %3507 = icmp eq i64 %3506, 13
  br i1 %3507, label %3508, label %3446

3508:                                             ; preds = %3499
  %3509 = load i8, i8* %3421, align 4
  call void @llvm.lifetime.end.p0i8(i64 2304, i8* nonnull %1967) #8
  %3510 = icmp eq i8 %3509, 2
  br i1 %3510, label %3511, label %3516

3511:                                             ; preds = %3508
  %3512 = load i8, i8* %3426, align 1
  br label %3513

3513:                                             ; preds = %3511, %3443
  %3514 = phi i8 [ %3512, %3511 ], [ %3427, %3443 ]
  %3515 = icmp eq i8 %3514, 0
  br i1 %3515, label %3692, label %3516

3516:                                             ; preds = %3513, %3508, %3424
  %3517 = phi i32 [ 1, %3513 ], [ 31, %3508 ], [ 31, %3424 ]
  %3518 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %3419, i64 %1978, i32 17, i64 18
  br label %3519

3519:                                             ; preds = %3519, %3516
  %3520 = phi i32* [ %3518, %3516 ], [ %3689, %3519 ]
  %3521 = phi i32 [ %3517, %3516 ], [ %3690, %3519 ]
  %3522 = getelementptr inbounds i32, i32* %3520, i64 -1
  %3523 = load i32, i32* %3522, align 4
  %3524 = load i32, i32* %3520, align 4
  %3525 = add i32 %3524, %3523
  %3526 = sext i32 %3525 to i64
  %3527 = mul nsw i64 %3526, 920726008
  %3528 = lshr i64 %3527, 32
  %3529 = trunc i64 %3528 to i32
  %3530 = sext i32 %3524 to i64
  %3531 = mul nsw i64 %3530, 368290382
  %3532 = lshr i64 %3531, 32
  %3533 = trunc i64 %3532 to i32
  %3534 = sub i32 %3529, %3533
  %3535 = shl i32 %3534, 2
  store i32 %3535, i32* %3522, align 4
  %3536 = sext i32 %3523 to i64
  %3537 = mul nsw i64 %3536, -1473161634
  %3538 = lshr i64 %3537, 32
  %3539 = trunc i64 %3538 to i32
  %3540 = add i32 %3529, %3539
  %3541 = shl i32 %3540, 2
  store i32 %3541, i32* %3520, align 4
  %3542 = getelementptr inbounds i32, i32* %3520, i64 -2
  %3543 = load i32, i32* %3542, align 4
  %3544 = getelementptr inbounds i32, i32* %3520, i64 1
  %3545 = load i32, i32* %3544, align 4
  %3546 = add i32 %3545, %3543
  %3547 = sext i32 %3546 to i64
  %3548 = mul nsw i64 %3547, 946763250
  %3549 = lshr i64 %3548, 32
  %3550 = trunc i64 %3549 to i32
  %3551 = sext i32 %3545 to i64
  %3552 = mul nsw i64 %3551, 440244887
  %3553 = lshr i64 %3552, 32
  %3554 = trunc i64 %3553 to i32
  %3555 = sub i32 %3550, %3554
  %3556 = shl i32 %3555, 2
  store i32 %3556, i32* %3542, align 4
  %3557 = sext i32 %3543 to i64
  %3558 = mul nsw i64 %3557, -1453281613
  %3559 = lshr i64 %3558, 32
  %3560 = trunc i64 %3559 to i32
  %3561 = add i32 %3550, %3560
  %3562 = shl i32 %3561, 2
  store i32 %3562, i32* %3544, align 4
  %3563 = getelementptr inbounds i32, i32* %3520, i64 -3
  %3564 = load i32, i32* %3563, align 4
  %3565 = getelementptr inbounds i32, i32* %3520, i64 2
  %3566 = load i32, i32* %3565, align 4
  %3567 = add i32 %3566, %3564
  %3568 = sext i32 %3567 to i64
  %3569 = mul nsw i64 %3568, 1019655994
  %3570 = lshr i64 %3569, 32
  %3571 = trunc i64 %3570 to i32
  %3572 = sext i32 %3566 to i64
  %3573 = mul nsw i64 %3572, 683169504
  %3574 = lshr i64 %3573, 32
  %3575 = trunc i64 %3574 to i32
  %3576 = sub i32 %3571, %3575
  %3577 = shl i32 %3576, 2
  store i32 %3577, i32* %3563, align 4
  %3578 = sext i32 %3564 to i64
  %3579 = mul nsw i64 %3578, -1356142484
  %3580 = lshr i64 %3579, 32
  %3581 = trunc i64 %3580 to i32
  %3582 = add i32 %3571, %3581
  %3583 = shl i32 %3582, 2
  store i32 %3583, i32* %3565, align 4
  %3584 = getelementptr inbounds i32, i32* %3520, i64 -4
  %3585 = load i32, i32* %3584, align 4
  %3586 = getelementptr inbounds i32, i32* %3520, i64 3
  %3587 = load i32, i32* %3586, align 4
  %3588 = add i32 %3587, %3585
  %3589 = sext i32 %3588 to i64
  %3590 = mul nsw i64 %3589, 1055826004
  %3591 = lshr i64 %3590, 32
  %3592 = trunc i64 %3591 to i32
  %3593 = sext i32 %3587 to i64
  %3594 = mul nsw i64 %3593, 860498192
  %3595 = lshr i64 %3594, 32
  %3596 = trunc i64 %3595 to i32
  %3597 = sub i32 %3592, %3596
  %3598 = shl i32 %3597, 2
  store i32 %3598, i32* %3584, align 4
  %3599 = sext i32 %3585 to i64
  %3600 = mul nsw i64 %3599, -1251153816
  %3601 = lshr i64 %3600, 32
  %3602 = trunc i64 %3601 to i32
  %3603 = add i32 %3592, %3602
  %3604 = shl i32 %3603, 2
  store i32 %3604, i32* %3586, align 4
  %3605 = getelementptr inbounds i32, i32* %3520, i64 -5
  %3606 = load i32, i32* %3605, align 4
  %3607 = getelementptr inbounds i32, i32* %3520, i64 4
  %3608 = load i32, i32* %3607, align 4
  %3609 = add i32 %3608, %3606
  %3610 = sext i32 %3609 to i64
  %3611 = mul nsw i64 %3610, 1068929116
  %3612 = lshr i64 %3611, 32
  %3613 = trunc i64 %3612 to i32
  %3614 = sext i32 %3608 to i64
  %3615 = mul nsw i64 %3614, 967380852
  %3616 = lshr i64 %3615, 32
  %3617 = trunc i64 %3616 to i32
  %3618 = sub i32 %3613, %3617
  %3619 = shl i32 %3618, 2
  store i32 %3619, i32* %3605, align 4
  %3620 = sext i32 %3606 to i64
  %3621 = mul nsw i64 %3620, -1170477380
  %3622 = lshr i64 %3621, 32
  %3623 = trunc i64 %3622 to i32
  %3624 = add i32 %3613, %3623
  %3625 = shl i32 %3624, 2
  store i32 %3625, i32* %3607, align 4
  %3626 = getelementptr inbounds i32, i32* %3520, i64 -6
  %3627 = load i32, i32* %3626, align 4
  %3628 = getelementptr inbounds i32, i32* %3520, i64 5
  %3629 = load i32, i32* %3628, align 4
  %3630 = add i32 %3629, %3627
  %3631 = sext i32 %3630 to i64
  %3632 = mul nsw i64 %3631, 1072840480
  %3633 = lshr i64 %3632, 32
  %3634 = trunc i64 %3633 to i32
  %3635 = sext i32 %3629 to i64
  %3636 = mul nsw i64 %3635, 1028854020
  %3637 = lshr i64 %3636, 32
  %3638 = trunc i64 %3637 to i32
  %3639 = sub i32 %3634, %3638
  %3640 = shl i32 %3639, 2
  store i32 %3640, i32* %3626, align 4
  %3641 = sext i32 %3627 to i64
  %3642 = mul nsw i64 %3641, -1116826940
  %3643 = lshr i64 %3642, 32
  %3644 = trunc i64 %3643 to i32
  %3645 = add i32 %3634, %3644
  %3646 = shl i32 %3645, 2
  store i32 %3646, i32* %3628, align 4
  %3647 = getelementptr inbounds i32, i32* %3520, i64 -7
  %3648 = load i32, i32* %3647, align 4
  %3649 = getelementptr inbounds i32, i32* %3520, i64 6
  %3650 = load i32, i32* %3649, align 4
  %3651 = add i32 %3650, %3648
  %3652 = sext i32 %3651 to i64
  %3653 = mul nsw i64 %3652, 1073633586
  %3654 = lshr i64 %3653, 32
  %3655 = trunc i64 %3654 to i32
  %3656 = sext i32 %3650 to i64
  %3657 = mul nsw i64 %3656, 1058387990
  %3658 = lshr i64 %3657, 32
  %3659 = trunc i64 %3658 to i32
  %3660 = sub i32 %3655, %3659
  %3661 = shl i32 %3660, 2
  store i32 %3661, i32* %3647, align 4
  %3662 = sext i32 %3648 to i64
  %3663 = mul nsw i64 %3662, -1088879182
  %3664 = lshr i64 %3663, 32
  %3665 = trunc i64 %3664 to i32
  %3666 = add i32 %3655, %3665
  %3667 = shl i32 %3666, 2
  store i32 %3667, i32* %3649, align 4
  %3668 = getelementptr inbounds i32, i32* %3520, i64 -8
  %3669 = load i32, i32* %3668, align 4
  %3670 = getelementptr inbounds i32, i32* %3520, i64 7
  %3671 = load i32, i32* %3670, align 4
  %3672 = add i32 %3671, %3669
  %3673 = sext i32 %3672 to i64
  %3674 = mul nsw i64 %3673, 1073734474
  %3675 = lshr i64 %3674, 32
  %3676 = trunc i64 %3675 to i32
  %3677 = sext i32 %3671 to i64
  %3678 = mul nsw i64 %3677, 1069761657
  %3679 = lshr i64 %3678, 32
  %3680 = trunc i64 %3679 to i32
  %3681 = sub i32 %3676, %3680
  %3682 = shl i32 %3681, 2
  store i32 %3682, i32* %3668, align 4
  %3683 = sext i32 %3669 to i64
  %3684 = mul nsw i64 %3683, -1077707291
  %3685 = lshr i64 %3684, 32
  %3686 = trunc i64 %3685 to i32
  %3687 = add i32 %3676, %3686
  %3688 = shl i32 %3687, 2
  store i32 %3688, i32* %3670, align 4
  %3689 = getelementptr inbounds i32, i32* %3520, i64 18
  %3690 = add nsw i32 %3521, -1
  %3691 = icmp sgt i32 %3690, 0
  br i1 %3691, label %3519, label %3692

3692:                                             ; preds = %3519, %3513
  %3693 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %3419, i64 %3417, i64 0
  %3694 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 21, i64 %3419, i64 0
  tail call fastcc void @compute_imdct(%struct.MPADecodeContext* %0, %struct.GranuleDef* %3420, i32* %3693, i32* %3694) #8
  %3695 = add nuw nsw i64 %3419, 1
  %3696 = load i32, i32* %1328, align 8
  %3697 = sext i32 %3696 to i64
  %3698 = icmp slt i64 %3695, %3697
  br i1 %3698, label %3418, label %3699

3699:                                             ; preds = %3692, %3413
  %3700 = phi i32 [ %3414, %3413 ], [ %3696, %3692 ]
  %3701 = add nuw nsw i64 %1978, 1
  %3702 = add nuw nsw i64 %1979, 1
  %3703 = icmp eq i64 %3702, %1971
  br i1 %3703, label %3704, label %1976

3704:                                             ; preds = %3699, %1946
  %3705 = load i32, i32* %28, align 8
  %3706 = icmp slt i32 %3705, 0
  br i1 %3706, label %3707, label %3714

3707:                                             ; preds = %3704
  %3708 = sub nsw i32 0, %3705
  %3709 = load i32, i32* %24, align 8
  %3710 = sub nsw i32 %3709, %3705
  %3711 = icmp slt i32 %3710, %3708
  %3712 = select i1 %3711, i32 %3710, i32 %3708
  %3713 = add nsw i32 %3712, %3705
  store i32 %3713, i32* %28, align 8
  br label %3714

3714:                                             ; preds = %3707, %3704
  %3715 = mul nuw nsw i32 %1412, 18
  br label %3716

3716:                                             ; preds = %1407, %1466, %1538, %3714
  %3717 = phi i32 [ -1094995529, %1466 ], [ -1094995529, %1538 ], [ %3715, %3714 ], [ %1414, %1407 ]
  call void @llvm.lifetime.end.p0i8(i64 1152, i8* nonnull %1324) #8
  %3718 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 11
  store i32 0, i32* %3718, align 32
  %3719 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 15
  %3720 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %3719, i64 0, i32 0
  %3721 = load i8*, i8** %3720, align 16
  %3722 = icmp eq i8* %3721, null
  br i1 %3722, label %3756, label %3723

3723:                                             ; preds = %3716
  %3724 = load i32, i32* %28, align 8
  %3725 = sub nsw i32 0, %3724
  %3726 = and i32 %3725, 7
  %3727 = icmp eq i32 %3726, 0
  br i1 %3727, label %3733, label %3728

3728:                                             ; preds = %3723
  %3729 = load i32, i32* %24, align 8
  %3730 = add i32 %3726, %3724
  %3731 = icmp ugt i32 %3729, %3730
  %3732 = select i1 %3731, i32 %3730, i32 %3729
  store i32 %3732, i32* %28, align 8
  br label %3733

3733:                                             ; preds = %3723, %3728
  %3734 = phi i32 [ %3724, %3723 ], [ %3732, %3728 ]
  %3735 = load i32, i32* %22, align 4
  %3736 = sub nsw i32 %3735, %3734
  %3737 = ashr i32 %3736, 3
  %3738 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 12
  %3739 = load i32, i32* %3738, align 4
  %3740 = sub nsw i32 %3737, %3739
  %3741 = icmp ult i32 %3740, 513
  br i1 %3741, label %3742, label %3749

3742:                                             ; preds = %3733
  %3743 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 10, i64 0
  %3744 = load i8*, i8** %21, align 16
  %3745 = ashr i32 %3734, 3
  %3746 = sext i32 %3745 to i64
  %3747 = getelementptr inbounds i8, i8* %3744, i64 %3746
  %3748 = sext i32 %3740 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %3743, i8* align 1 %3747, i64 %3748, i1 false)
  store i32 %3740, i32* %3718, align 32
  br label %3753

3749:                                             ; preds = %3733
  %3750 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 26
  %3751 = bitcast %struct.AVCodecContext** %3750 to i8**
  %3752 = load i8*, i8** %3751, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %3752, i32 16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0), i32 %3740) #8
  br label %3753

3753:                                             ; preds = %3749, %3742
  %3754 = bitcast %struct.GetBitContext* %11 to i8*
  %3755 = bitcast %struct.GetBitContext* %3719 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %3754, i8* align 16 %3755, i64 32, i1 false)
  store i8* null, i8** %3720, align 16
  store i32 0, i32* %3738, align 4
  br label %3756

3756:                                             ; preds = %3716, %3753
  %3757 = load i32, i32* %28, align 8
  %3758 = sub nsw i32 0, %3757
  %3759 = and i32 %3758, 7
  %3760 = icmp eq i32 %3759, 0
  br i1 %3760, label %3766, label %3761

3761:                                             ; preds = %3756
  %3762 = load i32, i32* %24, align 8
  %3763 = add i32 %3759, %3757
  %3764 = icmp ugt i32 %3762, %3763
  %3765 = select i1 %3764, i32 %3763, i32 %3762
  store i32 %3765, i32* %28, align 8
  br label %3766

3766:                                             ; preds = %3756, %3761
  %3767 = phi i32 [ %3757, %3756 ], [ %3765, %3761 ]
  %3768 = load i32, i32* %22, align 4
  %3769 = sub nsw i32 %3768, %3767
  %3770 = ashr i32 %3769, 3
  %3771 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 12
  %3772 = load i32, i32* %3771, align 4
  %3773 = sub nsw i32 %3770, %3772
  %3774 = icmp ugt i32 %3773, 512
  %3775 = icmp slt i32 %3717, 0
  %3776 = or i1 %3775, %3774
  br i1 %3776, label %3777, label %3786

3777:                                             ; preds = %3766
  %3778 = icmp slt i32 %3773, 0
  br i1 %3778, label %3779, label %3783

3779:                                             ; preds = %3777
  %3780 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 26
  %3781 = bitcast %struct.AVCodecContext** %3780 to i8**
  %3782 = load i8*, i8** %3781, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %3782, i32 16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %3773) #8
  br label %3783

3783:                                             ; preds = %3779, %3777
  %3784 = icmp slt i32 %13, 512
  %3785 = select i1 %3784, i32 %13, i32 512
  br label %3786

3786:                                             ; preds = %3766, %3783
  %3787 = phi i32 [ %3785, %3783 ], [ %3773, %3766 ]
  %3788 = load i32, i32* %3718, align 32
  %3789 = sext i32 %3788 to i64
  %3790 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 10, i64 %3789
  %3791 = load i8*, i8** %21, align 16
  %3792 = sext i32 %2 to i64
  %3793 = getelementptr inbounds i8, i8* %3791, i64 %3792
  %3794 = getelementptr inbounds i8, i8* %3793, i64 -4
  %3795 = sext i32 %3787 to i64
  %3796 = sub nsw i64 0, %3795
  %3797 = getelementptr inbounds i8, i8* %3794, i64 %3796
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3790, i8* align 1 %3797, i64 %3795, i1 false)
  %3798 = load i32, i32* %3718, align 32
  %3799 = add nsw i32 %3798, %3787
  store i32 %3799, i32* %3718, align 32
  br label %3800

3800:                                             ; preds = %3786, %1313, %381
  %3801 = phi i32 [ %3717, %3786 ], [ %1314, %1313 ], [ %382, %381 ]
  %3802 = icmp slt i32 %3801, 0
  br i1 %3802, label %3871, label %3803

3803:                                             ; preds = %3800
  %3804 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 29
  %3805 = load %struct.AVFrame*, %struct.AVFrame** %3804, align 16
  %3806 = icmp eq %struct.AVFrame* %3805, null
  br i1 %3806, label %3807, label %3808

3807:                                             ; preds = %3803
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.12, i64 0, i64 0), i32 1519) #8
  tail call void @abort() #11
  unreachable

3808:                                             ; preds = %3803
  %3809 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 26
  %3810 = load %struct.AVCodecContext*, %struct.AVCodecContext** %3809, align 16
  %3811 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %3810, i64 0, i32 85
  %3812 = load i32, i32* %3811, align 4
  %3813 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %3805, i64 0, i32 5
  store i32 %3812, i32* %3813, align 8
  %3814 = load %struct.AVCodecContext*, %struct.AVCodecContext** %3809, align 16
  %3815 = load %struct.AVFrame*, %struct.AVFrame** %3804, align 16
  %3816 = tail call i32 @ff_get_buffer(%struct.AVCodecContext* %3814, %struct.AVFrame* %3815, i32 0) #8
  %3817 = icmp slt i32 %3816, 0
  br i1 %3817, label %3871, label %3818

3818:                                             ; preds = %3808
  %3819 = load %struct.AVFrame*, %struct.AVFrame** %3804, align 16
  %3820 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %3819, i64 0, i32 2
  %3821 = bitcast i8*** %3820 to i16***
  %3822 = load i16**, i16*** %3821, align 8
  %3823 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 6
  %3824 = load i32, i32* %3823, align 8
  %3825 = icmp sgt i32 %3824, 0
  br i1 %3825, label %3826, label %3867

3826:                                             ; preds = %3818
  %3827 = icmp sgt i32 %3801, 0
  %3828 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 27
  %3829 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 24
  %3830 = zext i32 %3801 to i64
  br label %3831

3831:                                             ; preds = %3826, %3862
  %3832 = phi i32 [ %3824, %3826 ], [ %3863, %3862 ]
  %3833 = phi i64 [ 0, %3826 ], [ %3864, %3862 ]
  %3834 = load %struct.AVCodecContext*, %struct.AVCodecContext** %3809, align 16
  %3835 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %3834, i64 0, i32 84
  %3836 = load i32, i32* %3835, align 8
  %3837 = icmp eq i32 %3836, 6
  br i1 %3837, label %3838, label %3841

3838:                                             ; preds = %3831
  %3839 = getelementptr inbounds i16*, i16** %3822, i64 %3833
  %3840 = load i16*, i16** %3839, align 8
  br label %3844

3841:                                             ; preds = %3831
  %3842 = load i16*, i16** %3822, align 8
  %3843 = getelementptr inbounds i16, i16* %3842, i64 %3833
  br label %3844

3844:                                             ; preds = %3841, %3838
  %3845 = phi i16* [ %3840, %3838 ], [ %3843, %3841 ]
  %3846 = phi i32 [ 1, %3838 ], [ %3832, %3841 ]
  br i1 %3827, label %3847, label %3862

3847:                                             ; preds = %3844
  %3848 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 17, i64 %3833, i64 0
  %3849 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 18, i64 %3833
  %3850 = sext i32 %3846 to i64
  %3851 = shl nsw i32 %3846, 5
  %3852 = sext i32 %3851 to i64
  br label %3853

3853:                                             ; preds = %3853, %3847
  %3854 = phi i64 [ 0, %3847 ], [ %3858, %3853 ]
  %3855 = phi i16* [ %3845, %3847 ], [ %3857, %3853 ]
  %3856 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 20, i64 %3833, i64 %3854, i64 0
  tail call void @ff_mpa_synth_filter_fixed(%struct.MPADSPContext* %3828, i32* %3848, i32* %3849, i32* getelementptr inbounds ([0 x i32], [0 x i32]* @ff_mpa_synth_window_fixed, i64 0, i64 0), i32* %3829, i16* %3855, i64 %3850, i32* %3856) #8
  %3857 = getelementptr inbounds i16, i16* %3855, i64 %3852
  %3858 = add nuw nsw i64 %3854, 1
  %3859 = icmp eq i64 %3858, %3830
  br i1 %3859, label %3860, label %3853

3860:                                             ; preds = %3853
  %3861 = load i32, i32* %3823, align 8
  br label %3862

3862:                                             ; preds = %3860, %3844
  %3863 = phi i32 [ %3861, %3860 ], [ %3832, %3844 ]
  %3864 = add nuw nsw i64 %3833, 1
  %3865 = sext i32 %3863 to i64
  %3866 = icmp slt i64 %3864, %3865
  br i1 %3866, label %3831, label %3867

3867:                                             ; preds = %3862, %3818
  %3868 = phi i32 [ %3824, %3818 ], [ %3863, %3862 ]
  %3869 = shl i32 %3801, 6
  %3870 = mul i32 %3869, %3868
  br label %3871

3871:                                             ; preds = %3808, %3800, %3867
  %3872 = phi i32 [ %3870, %3867 ], [ %3801, %3800 ], [ %3816, %3808 ]
  ret i32 %3872

3873:                                             ; preds = %2082
  %3874 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 0, i32 15, i64 %2103
  %3875 = load i8, i8* %3874, align 1
  %3876 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 22, i64 %1986, i64 %1978, i32 15, i64 %2103
  store i8 %3875, i8* %3876, align 1
  %3877 = add nsw i64 %2083, 6
  br label %2143
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

declare i32 @ff_get_buffer(%struct.AVCodecContext*, %struct.AVFrame*, i32) local_unnamed_addr #3

declare void @ff_mpa_synth_filter_fixed(%struct.MPADSPContext*, i32*, i32*, i32*, i32*, i16*, i64, i32*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @handle_crc(%struct.MPADecodeContext* nocapture readonly, i32) unnamed_addr #1 {
  %3 = alloca %union.unaligned_32, align 4
  %4 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %52, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 25
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %52, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 14, i32 0
  %14 = load i8*, i8** %13, align 16
  %15 = getelementptr inbounds i8, i8* %14, i64 -4
  %16 = ashr i32 %1, 3
  %17 = and i32 %1, 7
  %18 = tail call i32* @av_crc_get_table(i32 1) #8
  %19 = bitcast %union.unaligned_32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #8
  %20 = getelementptr inbounds i8, i8* %14, i64 -2
  %21 = getelementptr inbounds %union.unaligned_32, %union.unaligned_32* %3, i64 0, i32 0
  store i32 -1431655766, i32* %21, align 4
  %22 = tail call i32 @av_crc(i32* %18, i32 65535, i8* %20, i64 2) #12
  %23 = getelementptr inbounds i8, i8* %14, i64 2
  %24 = sext i32 %16 to i64
  %25 = tail call i32 @av_crc(i32* %18, i32 %22, i8* %23, i64 %24) #12
  %26 = add nsw i32 %16, 6
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %15, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = lshr i32 65280, %17
  %32 = and i32 %31, %30
  %33 = shl nuw i32 %32, 24
  %34 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 30
  %35 = load i32, i32* %34, align 8
  %36 = shl i32 %35, 16
  %37 = lshr i32 %36, %17
  %38 = add i32 %33, %37
  %39 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %38) #9, !srcloc !2
  %40 = getelementptr inbounds %union.unaligned_32, %union.unaligned_32* %3, i64 0, i32 0
  store i32 %39, i32* %40, align 4
  %41 = call i32 @av_crc(i32* %18, i32 %25, i8* nonnull %19, i64 3) #12
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %51, label %43

43:                                               ; preds = %12
  %44 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 26
  %45 = bitcast %struct.AVCodecContext** %44 to i8**
  %46 = load i8*, i8** %45, align 16
  call void (i8*, i32, i8*, ...) @av_log(i8* %46, i32 16, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0), i32 %41) #8
  %47 = load i32, i32* %8, align 8
  %48 = and i32 %47, 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %43
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #8
  br label %52

51:                                               ; preds = %12, %43
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #8
  br label %52

52:                                               ; preds = %2, %7, %51, %50
  %53 = phi i32 [ -1094995529, %50 ], [ 0, %51 ], [ 0, %7 ], [ 0, %2 ]
  ret i32 %53
}

declare i32* @av_crc_get_table(i32) local_unnamed_addr #3

; Function Attrs: nounwind readonly
declare i32 @av_crc(i32*, i32, i8*, i64) local_unnamed_addr #7

declare i32 @ff_mpa_l2_select_table(i32, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @compute_imdct(%struct.MPADecodeContext* nocapture readonly, %struct.GranuleDef*, i32*, i32*) unnamed_addr #1 {
  %5 = alloca [12 x i32], align 16
  %6 = bitcast [12 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 48, i1 false)
  %7 = getelementptr inbounds %struct.GranuleDef, %struct.GranuleDef* %1, i64 0, i32 17, i64 0
  %8 = getelementptr inbounds %struct.GranuleDef, %struct.GranuleDef* %1, i64 0, i32 17, i64 576
  %9 = getelementptr inbounds %struct.GranuleDef, %struct.GranuleDef* %1, i64 0, i32 17, i64 36
  br label %10

10:                                               ; preds = %13, %4
  %11 = phi i32* [ %8, %4 ], [ %14, %13 ]
  %12 = icmp ult i32* %11, %9
  br i1 %12, label %29, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds i32, i32* %11, i64 -6
  %15 = bitcast i32* %14 to <4 x i32>*
  %16 = load <4 x i32>, <4 x i32>* %15, align 4
  %17 = getelementptr inbounds i32, i32* %11, i64 -2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds i32, i32* %11, i64 -1
  %20 = load i32, i32* %19, align 4
  %21 = shufflevector <4 x i32> %16, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %22 = or <4 x i32> %16, %21
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %24 = or <4 x i32> %22, %23
  %25 = extractelement <4 x i32> %24, i32 0
  %26 = or i32 %25, %18
  %27 = or i32 %26, %20
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %10, label %29

29:                                               ; preds = %10, %13
  %30 = phi i32* [ %14, %13 ], [ %11, %10 ]
  %31 = ptrtoint i32* %30 to i64
  %32 = ptrtoint i32* %7 to i64
  %33 = sub i64 %31, %32
  %34 = ashr exact i64 %33, 2
  %35 = sdiv i64 %34, 18
  %36 = trunc i64 %35 to i32
  %37 = add i32 %36, 1
  %38 = getelementptr inbounds %struct.GranuleDef, %struct.GranuleDef* %1, i64 0, i32 5
  %39 = load i8, i8* %38, align 4
  %40 = icmp eq i8 %39, 2
  br i1 %40, label %41, label %46

41:                                               ; preds = %29
  %42 = getelementptr inbounds %struct.GranuleDef, %struct.GranuleDef* %1, i64 0, i32 6
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  %45 = select i1 %44, i32 0, i32 2
  br label %46

46:                                               ; preds = %29, %41
  %47 = phi i32 [ %45, %41 ], [ %37, %29 ]
  %48 = getelementptr inbounds %struct.MPADecodeContext, %struct.MPADecodeContext* %0, i64 0, i32 27, i32 5
  %49 = load void (i32*, i32*, i32*, i32, i32, i32)*, void (i32*, i32*, i32*, i32, i32, i32)** %48, align 8
  %50 = getelementptr inbounds %struct.GranuleDef, %struct.GranuleDef* %1, i64 0, i32 6
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = zext i8 %39 to i32
  tail call void %49(i32* %2, i32* %3, i32* %7, i32 %47, i32 %52, i32 %53) #8
  %54 = ashr i32 %47, 2
  %55 = mul nsw i32 %54, 72
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %3, i64 %56
  %58 = and i32 %47, 3
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds i32, i32* %57, i64 %59
  %61 = icmp slt i32 %47, %37
  br i1 %61, label %62, label %80

62:                                               ; preds = %46
  %63 = mul nsw i32 %47, 18
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.GranuleDef, %struct.GranuleDef* %1, i64 0, i32 17, i64 %64
  %66 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 0
  %67 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 10
  %68 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 7
  %69 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 4
  %70 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 1
  %71 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 9
  %72 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 8
  %73 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 3
  %74 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 2
  %75 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 5
  %76 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 11
  %77 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 6
  %78 = sext i32 %47 to i64
  %79 = sext i32 %37 to i64
  br label %85

80:                                               ; preds = %85, %46
  %81 = phi i32* [ %60, %46 ], [ %602, %85 ]
  %82 = icmp slt i32 %37, 32
  br i1 %82, label %83, label %668

83:                                               ; preds = %80
  %84 = sext i32 %37 to i64
  br label %605

85:                                               ; preds = %85, %62
  %86 = phi i64 [ %78, %62 ], [ %603, %85 ]
  %87 = phi i32* [ %60, %62 ], [ %602, %85 ]
  %88 = phi i32* [ %65, %62 ], [ %598, %85 ]
  %89 = and i64 %86, 1
  %90 = sub nsw i64 0, %89
  %91 = and i64 %90, 4
  %92 = or i64 %91, 2
  %93 = getelementptr inbounds i32, i32* %2, i64 %86
  %94 = load i32, i32* %87, align 4
  store i32 %94, i32* %93, align 4
  %95 = getelementptr inbounds i32, i32* %93, i64 32
  %96 = getelementptr inbounds i32, i32* %87, i64 4
  %97 = load i32, i32* %96, align 4
  store i32 %97, i32* %95, align 4
  %98 = getelementptr inbounds i32, i32* %95, i64 32
  %99 = getelementptr inbounds i32, i32* %87, i64 8
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %98, align 4
  %101 = getelementptr inbounds i32, i32* %98, i64 32
  %102 = getelementptr inbounds i32, i32* %87, i64 12
  %103 = load i32, i32* %102, align 4
  store i32 %103, i32* %101, align 4
  %104 = getelementptr inbounds i32, i32* %101, i64 32
  %105 = getelementptr inbounds i32, i32* %87, i64 16
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %104, align 4
  %107 = getelementptr inbounds i32, i32* %104, i64 32
  %108 = getelementptr inbounds i32, i32* %87, i64 20
  %109 = load i32, i32* %108, align 4
  store i32 %109, i32* %107, align 4
  %110 = getelementptr inbounds i32, i32* %107, i64 32
  %111 = load i32, i32* %88, align 4
  %112 = getelementptr inbounds i32, i32* %88, i64 3
  %113 = load i32, i32* %112, align 4
  %114 = add i32 %113, %111
  %115 = getelementptr inbounds i32, i32* %88, i64 6
  %116 = load i32, i32* %115, align 4
  %117 = add i32 %116, %113
  %118 = getelementptr inbounds i32, i32* %88, i64 9
  %119 = load i32, i32* %118, align 4
  %120 = add i32 %119, %116
  %121 = getelementptr inbounds i32, i32* %88, i64 12
  %122 = load i32, i32* %121, align 4
  %123 = add i32 %122, %119
  %124 = getelementptr inbounds i32, i32* %88, i64 15
  %125 = load i32, i32* %124, align 4
  %126 = add i32 %120, %122
  %127 = add i32 %126, %125
  %128 = add i32 %120, %114
  %129 = shl i32 %117, 1
  %130 = sext i32 %129 to i64
  %131 = mul nsw i64 %130, 1859775393
  %132 = lshr i64 %131, 32
  %133 = trunc i64 %132 to i32
  %134 = shl i32 %128, 2
  %135 = sext i32 %134 to i64
  %136 = mul nsw i64 %135, 1859775393
  %137 = lshr i64 %136, 32
  %138 = trunc i64 %137 to i32
  %139 = sub i32 %111, %123
  %140 = sub i32 %114, %127
  %141 = shl i32 %140, 1
  %142 = sext i32 %141 to i64
  %143 = mul nsw i64 %142, 1518500250
  %144 = lshr i64 %143, 32
  %145 = trunc i64 %144 to i32
  %146 = add i32 %139, %145
  store i32 %146, i32* %67, align 8
  store i32 %146, i32* %68, align 4
  %147 = sub i32 %139, %145
  store i32 %147, i32* %69, align 16
  store i32 %147, i32* %70, align 4
  %148 = ashr i32 %123, 1
  %149 = add i32 %148, %111
  %150 = add i32 %149, %133
  %151 = shl i32 %114, 1
  %152 = add i32 %127, %151
  %153 = add i32 %152, %138
  %154 = sext i32 %153 to i64
  %155 = mul nsw i64 %154, 1111619334
  %156 = lshr i64 %155, 32
  %157 = trunc i64 %156 to i32
  %158 = add i32 %150, %157
  store i32 %158, i32* %71, align 4
  store i32 %158, i32* %72, align 16
  %159 = sub i32 %150, %157
  store i32 %159, i32* %73, align 4
  store i32 %159, i32* %74, align 8
  %160 = sub i32 %149, %133
  %161 = sub i32 %152, %138
  %162 = shl i32 %161, 1
  %163 = sext i32 %162 to i64
  %164 = mul nsw i64 %163, 2074309917
  %165 = lshr i64 %164, 32
  %166 = trunc i64 %165 to i32
  %167 = sub i32 %160, %166
  store i32 %167, i32* %75, align 4
  store i32 %167, i32* %66, align 16
  %168 = add i32 %160, %166
  store i32 %168, i32* %76, align 4
  store i32 %168, i32* %77, align 8
  %169 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %92, i64 0
  %170 = load i32, i32* %169, align 16
  %171 = sext i32 %167 to i64
  %172 = sext i32 %170 to i64
  %173 = mul nsw i64 %172, %171
  %174 = lshr i64 %173, 32
  %175 = trunc i64 %174 to i32
  %176 = getelementptr inbounds i32, i32* %87, i64 24
  %177 = load i32, i32* %176, align 4
  %178 = add nsw i32 %177, %175
  store i32 %178, i32* %110, align 4
  %179 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %92, i64 6
  %180 = load i32, i32* %179, align 8
  %181 = sext i32 %168 to i64
  %182 = sext i32 %180 to i64
  %183 = mul nsw i64 %182, %181
  %184 = lshr i64 %183, 32
  %185 = trunc i64 %184 to i32
  %186 = getelementptr inbounds i32, i32* %87, i64 48
  store i32 %185, i32* %186, align 4
  %187 = getelementptr inbounds i32, i32* %110, i64 32
  %188 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %92, i64 1
  %189 = load i32, i32* %188, align 4
  %190 = sext i32 %147 to i64
  %191 = sext i32 %189 to i64
  %192 = mul nsw i64 %191, %190
  %193 = lshr i64 %192, 32
  %194 = trunc i64 %193 to i32
  %195 = getelementptr inbounds i32, i32* %87, i64 28
  %196 = load i32, i32* %195, align 4
  %197 = add nsw i32 %196, %194
  store i32 %197, i32* %187, align 4
  %198 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %92, i64 7
  %199 = load i32, i32* %198, align 4
  %200 = sext i32 %146 to i64
  %201 = sext i32 %199 to i64
  %202 = mul nsw i64 %201, %200
  %203 = lshr i64 %202, 32
  %204 = trunc i64 %203 to i32
  %205 = getelementptr inbounds i32, i32* %87, i64 52
  store i32 %204, i32* %205, align 4
  %206 = getelementptr inbounds i32, i32* %187, i64 32
  %207 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %92, i64 2
  %208 = load i32, i32* %207, align 8
  %209 = sext i32 %159 to i64
  %210 = sext i32 %208 to i64
  %211 = mul nsw i64 %210, %209
  %212 = lshr i64 %211, 32
  %213 = trunc i64 %212 to i32
  %214 = getelementptr inbounds i32, i32* %87, i64 32
  %215 = load i32, i32* %214, align 4
  %216 = add nsw i32 %215, %213
  store i32 %216, i32* %206, align 4
  %217 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %92, i64 8
  %218 = load i32, i32* %217, align 16
  %219 = sext i32 %158 to i64
  %220 = sext i32 %218 to i64
  %221 = mul nsw i64 %220, %219
  %222 = lshr i64 %221, 32
  %223 = trunc i64 %222 to i32
  %224 = getelementptr inbounds i32, i32* %87, i64 56
  store i32 %223, i32* %224, align 4
  %225 = getelementptr inbounds i32, i32* %206, i64 32
  %226 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %92, i64 3
  %227 = load i32, i32* %226, align 4
  %228 = sext i32 %227 to i64
  %229 = mul nsw i64 %228, %209
  %230 = lshr i64 %229, 32
  %231 = trunc i64 %230 to i32
  %232 = getelementptr inbounds i32, i32* %87, i64 36
  %233 = load i32, i32* %232, align 4
  %234 = add nsw i32 %233, %231
  store i32 %234, i32* %225, align 4
  %235 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %92, i64 9
  %236 = load i32, i32* %235, align 4
  %237 = sext i32 %236 to i64
  %238 = mul nsw i64 %237, %219
  %239 = lshr i64 %238, 32
  %240 = trunc i64 %239 to i32
  %241 = getelementptr inbounds i32, i32* %87, i64 60
  store i32 %240, i32* %241, align 4
  %242 = getelementptr inbounds i32, i32* %225, i64 32
  %243 = load i32, i32* %69, align 16
  %244 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %92, i64 4
  %245 = load i32, i32* %244, align 16
  %246 = sext i32 %243 to i64
  %247 = sext i32 %245 to i64
  %248 = mul nsw i64 %247, %246
  %249 = lshr i64 %248, 32
  %250 = trunc i64 %249 to i32
  %251 = getelementptr inbounds i32, i32* %87, i64 40
  %252 = load i32, i32* %251, align 4
  %253 = add nsw i32 %252, %250
  store i32 %253, i32* %242, align 4
  %254 = load i32, i32* %67, align 8
  %255 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %92, i64 10
  %256 = load i32, i32* %255, align 8
  %257 = sext i32 %254 to i64
  %258 = sext i32 %256 to i64
  %259 = mul nsw i64 %258, %257
  %260 = lshr i64 %259, 32
  %261 = trunc i64 %260 to i32
  %262 = getelementptr inbounds i32, i32* %87, i64 64
  store i32 %261, i32* %262, align 4
  %263 = getelementptr inbounds i32, i32* %242, i64 32
  %264 = load i32, i32* %75, align 4
  %265 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %92, i64 5
  %266 = load i32, i32* %265, align 4
  %267 = sext i32 %264 to i64
  %268 = sext i32 %266 to i64
  %269 = mul nsw i64 %268, %267
  %270 = lshr i64 %269, 32
  %271 = trunc i64 %270 to i32
  %272 = getelementptr inbounds i32, i32* %87, i64 44
  %273 = load i32, i32* %272, align 4
  %274 = add nsw i32 %273, %271
  store i32 %274, i32* %263, align 4
  %275 = load i32, i32* %76, align 4
  %276 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %92, i64 11
  %277 = load i32, i32* %276, align 4
  %278 = sext i32 %275 to i64
  %279 = sext i32 %277 to i64
  %280 = mul nsw i64 %279, %278
  %281 = lshr i64 %280, 32
  %282 = trunc i64 %281 to i32
  %283 = getelementptr inbounds i32, i32* %87, i64 68
  store i32 %282, i32* %283, align 4
  %284 = getelementptr inbounds i32, i32* %263, i64 32
  %285 = getelementptr inbounds i32, i32* %88, i64 1
  %286 = load i32, i32* %285, align 4
  %287 = getelementptr inbounds i32, i32* %88, i64 4
  %288 = load i32, i32* %287, align 4
  %289 = add i32 %288, %286
  %290 = getelementptr inbounds i32, i32* %88, i64 7
  %291 = load i32, i32* %290, align 4
  %292 = add i32 %291, %288
  %293 = getelementptr inbounds i32, i32* %88, i64 10
  %294 = load i32, i32* %293, align 4
  %295 = add i32 %294, %291
  %296 = getelementptr inbounds i32, i32* %88, i64 13
  %297 = load i32, i32* %296, align 4
  %298 = add i32 %297, %294
  %299 = getelementptr inbounds i32, i32* %88, i64 16
  %300 = load i32, i32* %299, align 4
  %301 = add i32 %295, %297
  %302 = add i32 %301, %300
  %303 = add i32 %295, %289
  %304 = shl i32 %292, 1
  %305 = sext i32 %304 to i64
  %306 = mul nsw i64 %305, 1859775393
  %307 = lshr i64 %306, 32
  %308 = trunc i64 %307 to i32
  %309 = shl i32 %303, 2
  %310 = sext i32 %309 to i64
  %311 = mul nsw i64 %310, 1859775393
  %312 = lshr i64 %311, 32
  %313 = trunc i64 %312 to i32
  %314 = sub i32 %286, %298
  %315 = sub i32 %289, %302
  %316 = shl i32 %315, 1
  %317 = sext i32 %316 to i64
  %318 = mul nsw i64 %317, 1518500250
  %319 = lshr i64 %318, 32
  %320 = trunc i64 %319 to i32
  %321 = add i32 %314, %320
  store i32 %321, i32* %67, align 8
  store i32 %321, i32* %68, align 4
  %322 = sub i32 %314, %320
  store i32 %322, i32* %69, align 16
  store i32 %322, i32* %70, align 4
  %323 = ashr i32 %298, 1
  %324 = add i32 %323, %286
  %325 = add i32 %324, %308
  %326 = shl i32 %289, 1
  %327 = add i32 %302, %326
  %328 = add i32 %327, %313
  %329 = sext i32 %328 to i64
  %330 = mul nsw i64 %329, 1111619334
  %331 = lshr i64 %330, 32
  %332 = trunc i64 %331 to i32
  %333 = add i32 %325, %332
  store i32 %333, i32* %71, align 4
  store i32 %333, i32* %72, align 16
  %334 = sub i32 %325, %332
  store i32 %334, i32* %73, align 4
  store i32 %334, i32* %74, align 8
  %335 = sub i32 %324, %308
  %336 = sub i32 %327, %313
  %337 = shl i32 %336, 1
  %338 = sext i32 %337 to i64
  %339 = mul nsw i64 %338, 2074309917
  %340 = lshr i64 %339, 32
  %341 = trunc i64 %340 to i32
  %342 = sub i32 %335, %341
  store i32 %342, i32* %75, align 4
  store i32 %342, i32* %66, align 16
  %343 = add i32 %335, %341
  store i32 %343, i32* %76, align 4
  store i32 %343, i32* %77, align 8
  %344 = load i32, i32* %169, align 16
  %345 = sext i32 %342 to i64
  %346 = sext i32 %344 to i64
  %347 = mul nsw i64 %346, %345
  %348 = lshr i64 %347, 32
  %349 = trunc i64 %348 to i32
  %350 = load i32, i32* %186, align 4
  %351 = add nsw i32 %350, %349
  store i32 %351, i32* %284, align 4
  %352 = load i32, i32* %77, align 8
  %353 = load i32, i32* %179, align 8
  %354 = sext i32 %352 to i64
  %355 = sext i32 %353 to i64
  %356 = mul nsw i64 %355, %354
  %357 = lshr i64 %356, 32
  %358 = trunc i64 %357 to i32
  store i32 %358, i32* %87, align 4
  %359 = getelementptr inbounds i32, i32* %284, i64 32
  %360 = load i32, i32* %70, align 4
  %361 = load i32, i32* %188, align 4
  %362 = sext i32 %360 to i64
  %363 = sext i32 %361 to i64
  %364 = mul nsw i64 %363, %362
  %365 = lshr i64 %364, 32
  %366 = trunc i64 %365 to i32
  %367 = load i32, i32* %205, align 4
  %368 = add nsw i32 %367, %366
  store i32 %368, i32* %359, align 4
  %369 = load i32, i32* %68, align 4
  %370 = load i32, i32* %198, align 4
  %371 = sext i32 %369 to i64
  %372 = sext i32 %370 to i64
  %373 = mul nsw i64 %372, %371
  %374 = lshr i64 %373, 32
  %375 = trunc i64 %374 to i32
  store i32 %375, i32* %96, align 4
  %376 = getelementptr inbounds i32, i32* %359, i64 32
  %377 = load i32, i32* %74, align 8
  %378 = load i32, i32* %207, align 8
  %379 = sext i32 %377 to i64
  %380 = sext i32 %378 to i64
  %381 = mul nsw i64 %380, %379
  %382 = lshr i64 %381, 32
  %383 = trunc i64 %382 to i32
  %384 = load i32, i32* %224, align 4
  %385 = add nsw i32 %384, %383
  store i32 %385, i32* %376, align 4
  %386 = load i32, i32* %72, align 16
  %387 = load i32, i32* %217, align 16
  %388 = sext i32 %386 to i64
  %389 = sext i32 %387 to i64
  %390 = mul nsw i64 %389, %388
  %391 = lshr i64 %390, 32
  %392 = trunc i64 %391 to i32
  store i32 %392, i32* %99, align 4
  %393 = getelementptr inbounds i32, i32* %376, i64 32
  %394 = load i32, i32* %73, align 4
  %395 = load i32, i32* %226, align 4
  %396 = sext i32 %394 to i64
  %397 = sext i32 %395 to i64
  %398 = mul nsw i64 %397, %396
  %399 = lshr i64 %398, 32
  %400 = trunc i64 %399 to i32
  %401 = load i32, i32* %241, align 4
  %402 = add nsw i32 %401, %400
  store i32 %402, i32* %393, align 4
  %403 = load i32, i32* %71, align 4
  %404 = load i32, i32* %235, align 4
  %405 = sext i32 %403 to i64
  %406 = sext i32 %404 to i64
  %407 = mul nsw i64 %406, %405
  %408 = lshr i64 %407, 32
  %409 = trunc i64 %408 to i32
  store i32 %409, i32* %102, align 4
  %410 = getelementptr inbounds i32, i32* %393, i64 32
  %411 = load i32, i32* %69, align 16
  %412 = load i32, i32* %244, align 16
  %413 = sext i32 %411 to i64
  %414 = sext i32 %412 to i64
  %415 = mul nsw i64 %414, %413
  %416 = lshr i64 %415, 32
  %417 = trunc i64 %416 to i32
  %418 = load i32, i32* %262, align 4
  %419 = add nsw i32 %418, %417
  store i32 %419, i32* %410, align 4
  %420 = load i32, i32* %67, align 8
  %421 = load i32, i32* %255, align 8
  %422 = sext i32 %420 to i64
  %423 = sext i32 %421 to i64
  %424 = mul nsw i64 %423, %422
  %425 = lshr i64 %424, 32
  %426 = trunc i64 %425 to i32
  store i32 %426, i32* %105, align 4
  %427 = getelementptr inbounds i32, i32* %410, i64 32
  %428 = load i32, i32* %75, align 4
  %429 = load i32, i32* %265, align 4
  %430 = sext i32 %428 to i64
  %431 = sext i32 %429 to i64
  %432 = mul nsw i64 %431, %430
  %433 = lshr i64 %432, 32
  %434 = trunc i64 %433 to i32
  %435 = load i32, i32* %283, align 4
  %436 = add nsw i32 %435, %434
  store i32 %436, i32* %427, align 4
  %437 = load i32, i32* %76, align 4
  %438 = load i32, i32* %276, align 4
  %439 = sext i32 %437 to i64
  %440 = sext i32 %438 to i64
  %441 = mul nsw i64 %440, %439
  %442 = lshr i64 %441, 32
  %443 = trunc i64 %442 to i32
  store i32 %443, i32* %108, align 4
  %444 = getelementptr inbounds i32, i32* %88, i64 2
  %445 = load i32, i32* %444, align 4
  %446 = getelementptr inbounds i32, i32* %88, i64 5
  %447 = load i32, i32* %446, align 4
  %448 = add i32 %447, %445
  %449 = getelementptr inbounds i32, i32* %88, i64 8
  %450 = load i32, i32* %449, align 4
  %451 = add i32 %450, %447
  %452 = getelementptr inbounds i32, i32* %88, i64 11
  %453 = load i32, i32* %452, align 4
  %454 = add i32 %453, %450
  %455 = getelementptr inbounds i32, i32* %88, i64 14
  %456 = load i32, i32* %455, align 4
  %457 = add i32 %456, %453
  %458 = getelementptr inbounds i32, i32* %88, i64 17
  %459 = load i32, i32* %458, align 4
  %460 = add i32 %454, %456
  %461 = add i32 %460, %459
  %462 = add i32 %454, %448
  %463 = shl i32 %451, 1
  %464 = sext i32 %463 to i64
  %465 = mul nsw i64 %464, 1859775393
  %466 = lshr i64 %465, 32
  %467 = trunc i64 %466 to i32
  %468 = shl i32 %462, 2
  %469 = sext i32 %468 to i64
  %470 = mul nsw i64 %469, 1859775393
  %471 = lshr i64 %470, 32
  %472 = trunc i64 %471 to i32
  %473 = sub i32 %445, %457
  %474 = sub i32 %448, %461
  %475 = shl i32 %474, 1
  %476 = sext i32 %475 to i64
  %477 = mul nsw i64 %476, 1518500250
  %478 = lshr i64 %477, 32
  %479 = trunc i64 %478 to i32
  %480 = add i32 %473, %479
  store i32 %480, i32* %67, align 8
  store i32 %480, i32* %68, align 4
  %481 = sub i32 %473, %479
  store i32 %481, i32* %69, align 16
  store i32 %481, i32* %70, align 4
  %482 = ashr i32 %457, 1
  %483 = add i32 %482, %445
  %484 = add i32 %483, %467
  %485 = shl i32 %448, 1
  %486 = add i32 %461, %485
  %487 = add i32 %486, %472
  %488 = sext i32 %487 to i64
  %489 = mul nsw i64 %488, 1111619334
  %490 = lshr i64 %489, 32
  %491 = trunc i64 %490 to i32
  %492 = add i32 %484, %491
  store i32 %492, i32* %71, align 4
  store i32 %492, i32* %72, align 16
  %493 = sub i32 %484, %491
  store i32 %493, i32* %73, align 4
  store i32 %493, i32* %74, align 8
  %494 = sub i32 %483, %467
  %495 = sub i32 %486, %472
  %496 = shl i32 %495, 1
  %497 = sext i32 %496 to i64
  %498 = mul nsw i64 %497, 2074309917
  %499 = lshr i64 %498, 32
  %500 = trunc i64 %499 to i32
  %501 = sub i32 %494, %500
  store i32 %501, i32* %75, align 4
  store i32 %501, i32* %66, align 16
  %502 = add i32 %494, %500
  store i32 %502, i32* %76, align 4
  store i32 %502, i32* %77, align 8
  %503 = load i32, i32* %169, align 16
  %504 = sext i32 %501 to i64
  %505 = sext i32 %503 to i64
  %506 = mul nsw i64 %505, %504
  %507 = lshr i64 %506, 32
  %508 = trunc i64 %507 to i32
  %509 = load i32, i32* %87, align 4
  %510 = add nsw i32 %509, %508
  store i32 %510, i32* %87, align 4
  %511 = load i32, i32* %77, align 8
  %512 = load i32, i32* %179, align 8
  %513 = sext i32 %511 to i64
  %514 = sext i32 %512 to i64
  %515 = mul nsw i64 %514, %513
  %516 = lshr i64 %515, 32
  %517 = trunc i64 %516 to i32
  store i32 %517, i32* %176, align 4
  store i32 0, i32* %186, align 4
  %518 = load i32, i32* %70, align 4
  %519 = load i32, i32* %188, align 4
  %520 = sext i32 %518 to i64
  %521 = sext i32 %519 to i64
  %522 = mul nsw i64 %521, %520
  %523 = lshr i64 %522, 32
  %524 = trunc i64 %523 to i32
  %525 = load i32, i32* %96, align 4
  %526 = add nsw i32 %525, %524
  store i32 %526, i32* %96, align 4
  %527 = load i32, i32* %68, align 4
  %528 = load i32, i32* %198, align 4
  %529 = sext i32 %527 to i64
  %530 = sext i32 %528 to i64
  %531 = mul nsw i64 %530, %529
  %532 = lshr i64 %531, 32
  %533 = trunc i64 %532 to i32
  store i32 %533, i32* %195, align 4
  store i32 0, i32* %205, align 4
  %534 = load i32, i32* %74, align 8
  %535 = load i32, i32* %207, align 8
  %536 = sext i32 %534 to i64
  %537 = sext i32 %535 to i64
  %538 = mul nsw i64 %537, %536
  %539 = lshr i64 %538, 32
  %540 = trunc i64 %539 to i32
  %541 = load i32, i32* %99, align 4
  %542 = add nsw i32 %541, %540
  store i32 %542, i32* %99, align 4
  %543 = load i32, i32* %72, align 16
  %544 = load i32, i32* %217, align 16
  %545 = sext i32 %543 to i64
  %546 = sext i32 %544 to i64
  %547 = mul nsw i64 %546, %545
  %548 = lshr i64 %547, 32
  %549 = trunc i64 %548 to i32
  store i32 %549, i32* %214, align 4
  store i32 0, i32* %224, align 4
  %550 = load i32, i32* %73, align 4
  %551 = load i32, i32* %226, align 4
  %552 = sext i32 %550 to i64
  %553 = sext i32 %551 to i64
  %554 = mul nsw i64 %553, %552
  %555 = lshr i64 %554, 32
  %556 = trunc i64 %555 to i32
  %557 = load i32, i32* %102, align 4
  %558 = add nsw i32 %557, %556
  store i32 %558, i32* %102, align 4
  %559 = load i32, i32* %71, align 4
  %560 = load i32, i32* %235, align 4
  %561 = sext i32 %559 to i64
  %562 = sext i32 %560 to i64
  %563 = mul nsw i64 %562, %561
  %564 = lshr i64 %563, 32
  %565 = trunc i64 %564 to i32
  store i32 %565, i32* %232, align 4
  store i32 0, i32* %241, align 4
  %566 = load i32, i32* %69, align 16
  %567 = load i32, i32* %244, align 16
  %568 = sext i32 %566 to i64
  %569 = sext i32 %567 to i64
  %570 = mul nsw i64 %569, %568
  %571 = lshr i64 %570, 32
  %572 = trunc i64 %571 to i32
  %573 = load i32, i32* %105, align 4
  %574 = add nsw i32 %573, %572
  store i32 %574, i32* %105, align 4
  %575 = load i32, i32* %67, align 8
  %576 = load i32, i32* %255, align 8
  %577 = sext i32 %575 to i64
  %578 = sext i32 %576 to i64
  %579 = mul nsw i64 %578, %577
  %580 = lshr i64 %579, 32
  %581 = trunc i64 %580 to i32
  store i32 %581, i32* %251, align 4
  store i32 0, i32* %262, align 4
  %582 = load i32, i32* %75, align 4
  %583 = load i32, i32* %265, align 4
  %584 = sext i32 %582 to i64
  %585 = sext i32 %583 to i64
  %586 = mul nsw i64 %585, %584
  %587 = lshr i64 %586, 32
  %588 = trunc i64 %587 to i32
  %589 = load i32, i32* %108, align 4
  %590 = add nsw i32 %589, %588
  store i32 %590, i32* %108, align 4
  %591 = load i32, i32* %76, align 4
  %592 = load i32, i32* %276, align 4
  %593 = sext i32 %591 to i64
  %594 = sext i32 %592 to i64
  %595 = mul nsw i64 %594, %593
  %596 = lshr i64 %595, 32
  %597 = trunc i64 %596 to i32
  store i32 %597, i32* %272, align 4
  store i32 0, i32* %283, align 4
  %598 = getelementptr inbounds i32, i32* %88, i64 18
  %599 = and i64 %86, 3
  %600 = icmp eq i64 %599, 3
  %601 = select i1 %600, i64 69, i64 1
  %602 = getelementptr inbounds i32, i32* %87, i64 %601
  %603 = add nsw i64 %86, 1
  %604 = icmp eq i64 %603, %79
  br i1 %604, label %80, label %85

605:                                              ; preds = %605, %83
  %606 = phi i64 [ %84, %83 ], [ %665, %605 ]
  %607 = phi i32* [ %81, %83 ], [ %664, %605 ]
  %608 = getelementptr inbounds i32, i32* %2, i64 %606
  %609 = load i32, i32* %607, align 4
  store i32 %609, i32* %608, align 4
  store i32 0, i32* %607, align 4
  %610 = getelementptr inbounds i32, i32* %608, i64 32
  %611 = getelementptr inbounds i32, i32* %607, i64 4
  %612 = load i32, i32* %611, align 4
  store i32 %612, i32* %610, align 4
  store i32 0, i32* %611, align 4
  %613 = getelementptr inbounds i32, i32* %610, i64 32
  %614 = getelementptr inbounds i32, i32* %607, i64 8
  %615 = load i32, i32* %614, align 4
  store i32 %615, i32* %613, align 4
  store i32 0, i32* %614, align 4
  %616 = getelementptr inbounds i32, i32* %613, i64 32
  %617 = getelementptr inbounds i32, i32* %607, i64 12
  %618 = load i32, i32* %617, align 4
  store i32 %618, i32* %616, align 4
  store i32 0, i32* %617, align 4
  %619 = getelementptr inbounds i32, i32* %616, i64 32
  %620 = getelementptr inbounds i32, i32* %607, i64 16
  %621 = load i32, i32* %620, align 4
  store i32 %621, i32* %619, align 4
  store i32 0, i32* %620, align 4
  %622 = getelementptr inbounds i32, i32* %619, i64 32
  %623 = getelementptr inbounds i32, i32* %607, i64 20
  %624 = load i32, i32* %623, align 4
  store i32 %624, i32* %622, align 4
  store i32 0, i32* %623, align 4
  %625 = getelementptr inbounds i32, i32* %622, i64 32
  %626 = getelementptr inbounds i32, i32* %607, i64 24
  %627 = load i32, i32* %626, align 4
  store i32 %627, i32* %625, align 4
  store i32 0, i32* %626, align 4
  %628 = getelementptr inbounds i32, i32* %625, i64 32
  %629 = getelementptr inbounds i32, i32* %607, i64 28
  %630 = load i32, i32* %629, align 4
  store i32 %630, i32* %628, align 4
  store i32 0, i32* %629, align 4
  %631 = getelementptr inbounds i32, i32* %628, i64 32
  %632 = getelementptr inbounds i32, i32* %607, i64 32
  %633 = load i32, i32* %632, align 4
  store i32 %633, i32* %631, align 4
  store i32 0, i32* %632, align 4
  %634 = getelementptr inbounds i32, i32* %631, i64 32
  %635 = getelementptr inbounds i32, i32* %607, i64 36
  %636 = load i32, i32* %635, align 4
  store i32 %636, i32* %634, align 4
  store i32 0, i32* %635, align 4
  %637 = getelementptr inbounds i32, i32* %634, i64 32
  %638 = getelementptr inbounds i32, i32* %607, i64 40
  %639 = load i32, i32* %638, align 4
  store i32 %639, i32* %637, align 4
  store i32 0, i32* %638, align 4
  %640 = getelementptr inbounds i32, i32* %637, i64 32
  %641 = getelementptr inbounds i32, i32* %607, i64 44
  %642 = load i32, i32* %641, align 4
  store i32 %642, i32* %640, align 4
  store i32 0, i32* %641, align 4
  %643 = getelementptr inbounds i32, i32* %640, i64 32
  %644 = getelementptr inbounds i32, i32* %607, i64 48
  %645 = load i32, i32* %644, align 4
  store i32 %645, i32* %643, align 4
  store i32 0, i32* %644, align 4
  %646 = getelementptr inbounds i32, i32* %643, i64 32
  %647 = getelementptr inbounds i32, i32* %607, i64 52
  %648 = load i32, i32* %647, align 4
  store i32 %648, i32* %646, align 4
  store i32 0, i32* %647, align 4
  %649 = getelementptr inbounds i32, i32* %646, i64 32
  %650 = getelementptr inbounds i32, i32* %607, i64 56
  %651 = load i32, i32* %650, align 4
  store i32 %651, i32* %649, align 4
  store i32 0, i32* %650, align 4
  %652 = getelementptr inbounds i32, i32* %649, i64 32
  %653 = getelementptr inbounds i32, i32* %607, i64 60
  %654 = load i32, i32* %653, align 4
  store i32 %654, i32* %652, align 4
  store i32 0, i32* %653, align 4
  %655 = getelementptr inbounds i32, i32* %652, i64 32
  %656 = getelementptr inbounds i32, i32* %607, i64 64
  %657 = load i32, i32* %656, align 4
  store i32 %657, i32* %655, align 4
  store i32 0, i32* %656, align 4
  %658 = getelementptr inbounds i32, i32* %655, i64 32
  %659 = getelementptr inbounds i32, i32* %607, i64 68
  %660 = load i32, i32* %659, align 4
  store i32 %660, i32* %658, align 4
  store i32 0, i32* %659, align 4
  %661 = and i64 %606, 3
  %662 = icmp eq i64 %661, 3
  %663 = select i1 %662, i64 69, i64 1
  %664 = getelementptr inbounds i32, i32* %607, i64 %663
  %665 = add nsw i64 %606, 1
  %666 = trunc i64 %665 to i32
  %667 = icmp eq i32 %666, 32
  br i1 %667, label %668, label %605

668:                                              ; preds = %605, %80
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #8
  ret void
}

declare void @avpriv_request_sample(i8*, i8*, ...) local_unnamed_addr #3

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { nounwind readnone }
attributes #10 = { cold }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1964572}
!3 = !{i32 1978196, i32 1978210}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !5}
