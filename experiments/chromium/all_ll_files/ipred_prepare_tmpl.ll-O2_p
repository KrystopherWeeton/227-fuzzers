; ModuleID = '../../third_party/dav1d/libdav1d/src/ipred_prepare_tmpl.c'
source_filename = "../../third_party/dav1d/libdav1d/src/ipred_prepare_tmpl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@av1_mode_to_angle_map = internal unnamed_addr constant [8 x i8] c"Z\B4-\87q\9D\CBC", align 1
@av1_mode_conv = internal unnamed_addr constant [13 x [2 x [2 x i8]]] [[2 x [2 x i8]] [[2 x i8] c"\05\04", [2 x i8] c"\03\00"], [2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] [[2 x i8] c"\05\01", [2 x i8] c"\02\0C"]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @dav1d_prepare_intra_edges_8bpc(i32, i32, i32, i32, i32, i32, i32, i8* nocapture readonly, i64, i8* readonly, i32, i32* nocapture, i32, i32, i32, i8* nocapture) local_unnamed_addr #0 {
  %17 = icmp sgt i32 %5, %2
  tail call void @llvm.assume(i1 %17)
  %18 = icmp sgt i32 %4, %0
  tail call void @llvm.assume(i1 %18)
  switch i32 %10, label %48 [
    i32 1, label %19
    i32 2, label %19
    i32 3, label %19
    i32 4, label %19
    i32 5, label %19
    i32 6, label %19
    i32 7, label %19
    i32 8, label %19
    i32 0, label %41
    i32 12, label %41
  ]

19:                                               ; preds = %16, %16, %16, %16, %16, %16, %16, %16
  %20 = add nsw i32 %10, -1
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* @av1_mode_to_angle_map, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = load i32, i32* %11, align 4
  %26 = mul nsw i32 %25, 3
  %27 = add nsw i32 %26, %24
  store i32 %27, i32* %11, align 4
  %28 = icmp slt i32 %27, 91
  br i1 %28, label %29, label %34

29:                                               ; preds = %19
  %30 = icmp ne i32 %27, 90
  %31 = icmp ne i32 %3, 0
  %32 = and i1 %31, %30
  %33 = select i1 %32, i32 6, i32 1
  br label %48

34:                                               ; preds = %19
  %35 = icmp slt i32 %27, 180
  br i1 %35, label %48, label %36

36:                                               ; preds = %34
  %37 = icmp ne i32 %27, 180
  %38 = icmp ne i32 %1, 0
  %39 = and i1 %38, %37
  %40 = select i1 %39, i32 8, i32 2
  br label %48

41:                                               ; preds = %16, %16
  %42 = zext i32 %10 to i64
  %43 = sext i32 %1 to i64
  %44 = sext i32 %3 to i64
  %45 = getelementptr inbounds [13 x [2 x [2 x i8]]], [13 x [2 x [2 x i8]]]* @av1_mode_conv, i64 0, i64 %42, i64 %43, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  br label %48

48:                                               ; preds = %34, %16, %29, %36, %41
  %49 = phi i32 [ %10, %16 ], [ %47, %41 ], [ %33, %29 ], [ %40, %36 ], [ 7, %34 ]
  %50 = icmp ne i32 %3, 0
  %51 = zext i32 %49 to i64
  br i1 %50, label %52, label %75

52:                                               ; preds = %48
  %53 = lshr i64 16083, %51
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %66

56:                                               ; preds = %52
  %57 = lshr i64 12736, %51
  %58 = and i64 %57, 1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %66

60:                                               ; preds = %56
  %61 = lshr i64 114, %51
  %62 = and i64 %61, 1
  %63 = icmp ne i64 %62, 0
  %64 = icmp ne i32 %1, 0
  %65 = or i1 %64, %63
  br i1 %65, label %75, label %66

66:                                               ; preds = %56, %52, %60
  %67 = icmp eq i8* %9, null
  br i1 %67, label %72, label %68

68:                                               ; preds = %66
  %69 = shl nsw i32 %0, 2
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %9, i64 %70
  br label %75

72:                                               ; preds = %66
  %73 = sub nsw i64 0, %8
  %74 = getelementptr inbounds i8, i8* %7, i64 %73
  br label %75

75:                                               ; preds = %48, %68, %72, %60
  %76 = phi i8* [ %71, %68 ], [ %74, %72 ], [ inttoptr (i64 -6148914691236517206 to i8*), %60 ], [ inttoptr (i64 -6148914691236517206 to i8*), %48 ]
  %77 = lshr i64 16269, %51
  %78 = and i64 %77, 1
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %372, label %80

80:                                               ; preds = %75
  %81 = shl i32 %13, 2
  %82 = sub nsw i32 0, %81
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %15, i64 %83
  %85 = icmp ne i32 %1, 0
  br i1 %85, label %86, label %225

86:                                               ; preds = %80
  %87 = sub nsw i32 %5, %2
  %88 = shl i32 %87, 2
  %89 = icmp slt i32 %81, %88
  %90 = select i1 %89, i32 %81, i32 %88
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %92, label %205

92:                                               ; preds = %86
  %93 = sext i32 %90 to i64
  %94 = icmp ult i32 %90, 32
  br i1 %94, label %95, label %97

95:                                               ; preds = %203, %107, %97, %92
  %96 = phi i64 [ 0, %107 ], [ 0, %97 ], [ 0, %92 ], [ %124, %203 ]
  br label %207

97:                                               ; preds = %92
  %98 = icmp ne i64 %8, 1
  %99 = add nsw i64 %93, -1
  %100 = add i32 %81, -1
  %101 = trunc i64 %99 to i32
  %102 = sub i32 %100, %101
  %103 = icmp sgt i32 %102, %100
  %104 = icmp ugt i64 %99, 4294967295
  %105 = or i1 %103, %104
  %106 = or i1 %98, %105
  br i1 %106, label %95, label %107

107:                                              ; preds = %97
  %108 = getelementptr i8, i8* %7, i64 -1
  %109 = add nsw i64 %93, -1
  %110 = getelementptr i8, i8* %7, i64 %109
  %111 = add i32 %81, -4
  %112 = sext i32 %111 to i64
  %113 = add nsw i64 %112, 4
  %114 = sub nsw i64 %113, %93
  %115 = sext i32 %81 to i64
  %116 = sub nsw i64 %114, %115
  %117 = getelementptr i8, i8* %15, i64 %116
  %118 = sub nsw i64 %113, %115
  %119 = getelementptr i8, i8* %15, i64 %118
  %120 = icmp ult i8* %108, %119
  %121 = icmp ult i8* %117, %110
  %122 = and i1 %120, %121
  br i1 %122, label %95, label %123

123:                                              ; preds = %107
  %124 = and i64 %93, -32
  %125 = add nsw i64 %124, -32
  %126 = lshr exact i64 %125, 5
  %127 = add nuw nsw i64 %126, 1
  %128 = and i64 %127, 1
  %129 = icmp eq i64 %125, 0
  br i1 %129, label %179, label %130

130:                                              ; preds = %123
  %131 = sub nuw nsw i64 %127, %128
  br label %132

132:                                              ; preds = %132, %130
  %133 = phi i64 [ 0, %130 ], [ %176, %132 ]
  %134 = phi i64 [ %131, %130 ], [ %177, %132 ]
  %135 = mul nsw i64 %133, %8
  %136 = add nsw i64 %135, -1
  %137 = getelementptr inbounds i8, i8* %7, i64 %136
  %138 = bitcast i8* %137 to <16 x i8>*
  %139 = load <16 x i8>, <16 x i8>* %138, align 1, !alias.scope !2, !noalias !5
  %140 = getelementptr inbounds i8, i8* %137, i64 16
  %141 = bitcast i8* %140 to <16 x i8>*
  %142 = load <16 x i8>, <16 x i8>* %141, align 1, !alias.scope !2, !noalias !5
  %143 = trunc i64 %133 to i32
  %144 = xor i32 %143, -1
  %145 = add i32 %81, %144
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i8, i8* %84, i64 %146
  %148 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %149 = getelementptr inbounds i8, i8* %147, i64 -15
  %150 = bitcast i8* %149 to <16 x i8>*
  store <16 x i8> %148, <16 x i8>* %150, align 1, !alias.scope !5
  %151 = shufflevector <16 x i8> %142, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %152 = getelementptr inbounds i8, i8* %147, i64 -16
  %153 = getelementptr inbounds i8, i8* %152, i64 -15
  %154 = bitcast i8* %153 to <16 x i8>*
  store <16 x i8> %151, <16 x i8>* %154, align 1, !alias.scope !5
  %155 = or i64 %133, 32
  %156 = mul nsw i64 %155, %8
  %157 = add nsw i64 %156, -1
  %158 = getelementptr inbounds i8, i8* %7, i64 %157
  %159 = bitcast i8* %158 to <16 x i8>*
  %160 = load <16 x i8>, <16 x i8>* %159, align 1, !alias.scope !2, !noalias !5
  %161 = getelementptr inbounds i8, i8* %158, i64 16
  %162 = bitcast i8* %161 to <16 x i8>*
  %163 = load <16 x i8>, <16 x i8>* %162, align 1, !alias.scope !2, !noalias !5
  %164 = trunc i64 %155 to i32
  %165 = xor i32 %164, -1
  %166 = add i32 %81, %165
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i8, i8* %84, i64 %167
  %169 = shufflevector <16 x i8> %160, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %170 = getelementptr inbounds i8, i8* %168, i64 -15
  %171 = bitcast i8* %170 to <16 x i8>*
  store <16 x i8> %169, <16 x i8>* %171, align 1, !alias.scope !5
  %172 = shufflevector <16 x i8> %163, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %173 = getelementptr inbounds i8, i8* %168, i64 -16
  %174 = getelementptr inbounds i8, i8* %173, i64 -15
  %175 = bitcast i8* %174 to <16 x i8>*
  store <16 x i8> %172, <16 x i8>* %175, align 1, !alias.scope !5
  %176 = add i64 %133, 64
  %177 = add i64 %134, -2
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %132, !llvm.loop !7

179:                                              ; preds = %132, %123
  %180 = phi i64 [ 0, %123 ], [ %176, %132 ]
  %181 = icmp eq i64 %128, 0
  br i1 %181, label %203, label %182

182:                                              ; preds = %179
  %183 = mul nsw i64 %180, %8
  %184 = add nsw i64 %183, -1
  %185 = getelementptr inbounds i8, i8* %7, i64 %184
  %186 = bitcast i8* %185 to <16 x i8>*
  %187 = load <16 x i8>, <16 x i8>* %186, align 1, !alias.scope !2, !noalias !5
  %188 = getelementptr inbounds i8, i8* %185, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  %190 = load <16 x i8>, <16 x i8>* %189, align 1, !alias.scope !2, !noalias !5
  %191 = trunc i64 %180 to i32
  %192 = xor i32 %191, -1
  %193 = add i32 %81, %192
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i8, i8* %84, i64 %194
  %196 = shufflevector <16 x i8> %187, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %197 = getelementptr inbounds i8, i8* %195, i64 -15
  %198 = bitcast i8* %197 to <16 x i8>*
  store <16 x i8> %196, <16 x i8>* %198, align 1, !alias.scope !5
  %199 = shufflevector <16 x i8> %190, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %200 = getelementptr inbounds i8, i8* %195, i64 -16
  %201 = getelementptr inbounds i8, i8* %200, i64 -15
  %202 = bitcast i8* %201 to <16 x i8>*
  store <16 x i8> %199, <16 x i8>* %202, align 1, !alias.scope !5
  br label %203

203:                                              ; preds = %179, %182
  %204 = icmp eq i64 %124, %93
  br i1 %204, label %205, label %95

205:                                              ; preds = %207, %203, %86
  %206 = icmp sgt i32 %81, %88
  br i1 %206, label %220, label %231

207:                                              ; preds = %95, %207
  %208 = phi i64 [ %218, %207 ], [ %96, %95 ]
  %209 = mul nsw i64 %208, %8
  %210 = add nsw i64 %209, -1
  %211 = getelementptr inbounds i8, i8* %7, i64 %210
  %212 = load i8, i8* %211, align 1
  %213 = trunc i64 %208 to i32
  %214 = xor i32 %213, -1
  %215 = add i32 %81, %214
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds i8, i8* %84, i64 %216
  store i8 %212, i8* %217, align 1
  %218 = add nuw nsw i64 %208, 1
  %219 = icmp slt i64 %218, %93
  br i1 %219, label %207, label %205, !llvm.loop !9

220:                                              ; preds = %205
  %221 = sub nsw i32 %81, %90
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds i8, i8* %84, i64 %222
  %224 = load i8, i8* %223, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 %224, i64 %222, i1 false)
  br label %231

225:                                              ; preds = %80
  br i1 %50, label %226, label %228

226:                                              ; preds = %225
  %227 = load i8, i8* %76, align 1
  br label %228

228:                                              ; preds = %225, %226
  %229 = phi i8 [ %227, %226 ], [ -127, %225 ]
  %230 = sext i32 %81 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 %229, i64 %230, i1 false)
  br label %231

231:                                              ; preds = %205, %220, %228
  %232 = icmp eq i32 %49, 8
  br i1 %232, label %233, label %372

233:                                              ; preds = %231
  %234 = add nsw i32 %13, %2
  %235 = icmp slt i32 %234, %5
  %236 = and i1 %85, %235
  %237 = and i32 %6, 8
  %238 = icmp eq i32 %237, 0
  %239 = xor i1 %236, true
  %240 = or i1 %238, %239
  br i1 %240, label %367, label %241

241:                                              ; preds = %233
  %242 = sub i32 %5, %2
  %243 = sub i32 %242, %13
  %244 = shl i32 %243, 2
  %245 = icmp slt i32 %81, %244
  %246 = select i1 %245, i32 %81, i32 %244
  %247 = icmp sgt i32 %246, 0
  br i1 %247, label %248, label %344

248:                                              ; preds = %241
  %249 = sext i32 %81 to i64
  %250 = sext i32 %246 to i64
  %251 = icmp ugt i32 %246, 31
  %252 = icmp eq i64 %8, 1
  %253 = and i1 %251, %252
  br i1 %253, label %254, label %266

254:                                              ; preds = %248
  %255 = sub nsw i64 0, %250
  %256 = sub nsw i64 %255, %249
  %257 = getelementptr i8, i8* %15, i64 %256
  %258 = add nsw i64 %249, -1
  %259 = getelementptr i8, i8* %7, i64 %258
  %260 = add nsw i64 %250, %249
  %261 = add nsw i64 %260, -1
  %262 = getelementptr i8, i8* %7, i64 %261
  %263 = icmp ult i8* %257, %262
  %264 = icmp ult i8* %259, %84
  %265 = and i1 %263, %264
  br i1 %265, label %266, label %268

266:                                              ; preds = %248, %342, %254
  %267 = phi i64 [ 0, %254 ], [ 0, %248 ], [ %269, %342 ]
  br label %346

268:                                              ; preds = %254
  %269 = and i64 %250, -32
  %270 = add nsw i64 %269, -32
  %271 = lshr exact i64 %270, 5
  %272 = add nuw nsw i64 %271, 1
  %273 = and i64 %272, 1
  %274 = icmp eq i64 %270, 0
  br i1 %274, label %320, label %275

275:                                              ; preds = %268
  %276 = sub nuw nsw i64 %272, %273
  br label %277

277:                                              ; preds = %277, %275
  %278 = phi i64 [ 0, %275 ], [ %317, %277 ]
  %279 = phi i64 [ %276, %275 ], [ %318, %277 ]
  %280 = add nsw i64 %278, %249
  %281 = mul nsw i64 %280, %8
  %282 = add nsw i64 %281, -1
  %283 = getelementptr inbounds i8, i8* %7, i64 %282
  %284 = bitcast i8* %283 to <16 x i8>*
  %285 = load <16 x i8>, <16 x i8>* %284, align 1, !alias.scope !10
  %286 = getelementptr inbounds i8, i8* %283, i64 16
  %287 = bitcast i8* %286 to <16 x i8>*
  %288 = load <16 x i8>, <16 x i8>* %287, align 1, !alias.scope !10
  %289 = xor i64 %278, -1
  %290 = getelementptr inbounds i8, i8* %84, i64 %289
  %291 = shufflevector <16 x i8> %285, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %292 = getelementptr inbounds i8, i8* %290, i64 -15
  %293 = bitcast i8* %292 to <16 x i8>*
  store <16 x i8> %291, <16 x i8>* %293, align 1, !alias.scope !13, !noalias !10
  %294 = shufflevector <16 x i8> %288, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %295 = getelementptr inbounds i8, i8* %290, i64 -16
  %296 = getelementptr inbounds i8, i8* %295, i64 -15
  %297 = bitcast i8* %296 to <16 x i8>*
  store <16 x i8> %294, <16 x i8>* %297, align 1, !alias.scope !13, !noalias !10
  %298 = or i64 %278, 32
  %299 = add nsw i64 %298, %249
  %300 = mul nsw i64 %299, %8
  %301 = add nsw i64 %300, -1
  %302 = getelementptr inbounds i8, i8* %7, i64 %301
  %303 = bitcast i8* %302 to <16 x i8>*
  %304 = load <16 x i8>, <16 x i8>* %303, align 1, !alias.scope !10
  %305 = getelementptr inbounds i8, i8* %302, i64 16
  %306 = bitcast i8* %305 to <16 x i8>*
  %307 = load <16 x i8>, <16 x i8>* %306, align 1, !alias.scope !10
  %308 = sub nuw nsw i64 -33, %278
  %309 = getelementptr inbounds i8, i8* %84, i64 %308
  %310 = shufflevector <16 x i8> %304, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %311 = getelementptr inbounds i8, i8* %309, i64 -15
  %312 = bitcast i8* %311 to <16 x i8>*
  store <16 x i8> %310, <16 x i8>* %312, align 1, !alias.scope !13, !noalias !10
  %313 = shufflevector <16 x i8> %307, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %314 = getelementptr inbounds i8, i8* %309, i64 -16
  %315 = getelementptr inbounds i8, i8* %314, i64 -15
  %316 = bitcast i8* %315 to <16 x i8>*
  store <16 x i8> %313, <16 x i8>* %316, align 1, !alias.scope !13, !noalias !10
  %317 = add i64 %278, 64
  %318 = add i64 %279, -2
  %319 = icmp eq i64 %318, 0
  br i1 %319, label %320, label %277, !llvm.loop !15

320:                                              ; preds = %277, %268
  %321 = phi i64 [ 0, %268 ], [ %317, %277 ]
  %322 = icmp eq i64 %273, 0
  br i1 %322, label %342, label %323

323:                                              ; preds = %320
  %324 = add nsw i64 %321, %249
  %325 = mul nsw i64 %324, %8
  %326 = add nsw i64 %325, -1
  %327 = getelementptr inbounds i8, i8* %7, i64 %326
  %328 = bitcast i8* %327 to <16 x i8>*
  %329 = load <16 x i8>, <16 x i8>* %328, align 1, !alias.scope !10
  %330 = getelementptr inbounds i8, i8* %327, i64 16
  %331 = bitcast i8* %330 to <16 x i8>*
  %332 = load <16 x i8>, <16 x i8>* %331, align 1, !alias.scope !10
  %333 = xor i64 %321, -1
  %334 = getelementptr inbounds i8, i8* %84, i64 %333
  %335 = shufflevector <16 x i8> %329, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %336 = getelementptr inbounds i8, i8* %334, i64 -15
  %337 = bitcast i8* %336 to <16 x i8>*
  store <16 x i8> %335, <16 x i8>* %337, align 1, !alias.scope !13, !noalias !10
  %338 = shufflevector <16 x i8> %332, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %339 = getelementptr inbounds i8, i8* %334, i64 -16
  %340 = getelementptr inbounds i8, i8* %339, i64 -15
  %341 = bitcast i8* %340 to <16 x i8>*
  store <16 x i8> %338, <16 x i8>* %341, align 1, !alias.scope !13, !noalias !10
  br label %342

342:                                              ; preds = %320, %323
  %343 = icmp eq i64 %269, %250
  br i1 %343, label %344, label %266

344:                                              ; preds = %346, %342, %241
  %345 = icmp sgt i32 %81, %244
  br i1 %345, label %357, label %372

346:                                              ; preds = %266, %346
  %347 = phi i64 [ %353, %346 ], [ %267, %266 ]
  %348 = add nsw i64 %347, %249
  %349 = mul nsw i64 %348, %8
  %350 = add nsw i64 %349, -1
  %351 = getelementptr inbounds i8, i8* %7, i64 %350
  %352 = load i8, i8* %351, align 1
  %353 = add nuw nsw i64 %347, 1
  %354 = xor i64 %347, -1
  %355 = getelementptr inbounds i8, i8* %84, i64 %354
  store i8 %352, i8* %355, align 1
  %356 = icmp slt i64 %353, %250
  br i1 %356, label %346, label %344, !llvm.loop !16

357:                                              ; preds = %344
  %358 = sext i32 %81 to i64
  %359 = sub nsw i64 0, %358
  %360 = getelementptr inbounds i8, i8* %84, i64 %359
  %361 = sub nsw i32 0, %246
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds i8, i8* %84, i64 %362
  %364 = load i8, i8* %363, align 1
  %365 = sub nsw i32 %81, %246
  %366 = sext i32 %365 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %360, i8 %364, i64 %366, i1 false)
  br label %372

367:                                              ; preds = %233
  %368 = sext i32 %81 to i64
  %369 = sub nsw i64 0, %368
  %370 = getelementptr inbounds i8, i8* %84, i64 %369
  %371 = load i8, i8* %84, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %370, i8 %371, i64 %368, i1 false)
  br label %372

372:                                              ; preds = %231, %344, %357, %367, %75
  %373 = lshr i64 16083, %51
  %374 = and i64 %373, 1
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %438, label %376

376:                                              ; preds = %372
  %377 = shl i32 %12, 2
  %378 = getelementptr inbounds i8, i8* %15, i64 1
  br i1 %50, label %379, label %394

379:                                              ; preds = %376
  %380 = sub nsw i32 %4, %0
  %381 = shl i32 %380, 2
  %382 = icmp slt i32 %377, %381
  %383 = select i1 %382, i32 %377, i32 %381
  %384 = sext i32 %383 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %378, i8* align 1 %76, i64 %384, i1 false)
  %385 = icmp sgt i32 %377, %381
  br i1 %385, label %386, label %402

386:                                              ; preds = %379
  %387 = getelementptr inbounds i8, i8* %378, i64 %384
  %388 = add nsw i32 %383, -1
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i8, i8* %378, i64 %389
  %391 = load i8, i8* %390, align 1
  %392 = sub nsw i32 %377, %383
  %393 = sext i32 %392 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %387, i8 %391, i64 %393, i1 false)
  br label %402

394:                                              ; preds = %376
  %395 = icmp eq i32 %1, 0
  br i1 %395, label %399, label %396

396:                                              ; preds = %394
  %397 = getelementptr inbounds i8, i8* %7, i64 -1
  %398 = load i8, i8* %397, align 1
  br label %399

399:                                              ; preds = %394, %396
  %400 = phi i8 [ %398, %396 ], [ 127, %394 ]
  %401 = sext i32 %377 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %378, i8 %400, i64 %401, i1 false)
  br label %402

402:                                              ; preds = %379, %386, %399
  %403 = icmp eq i32 %49, 6
  br i1 %403, label %404, label %438

404:                                              ; preds = %402
  %405 = add nsw i32 %12, %0
  %406 = icmp slt i32 %405, %4
  %407 = and i1 %50, %406
  %408 = and i32 %6, 1
  %409 = icmp ne i32 %408, 0
  %410 = and i1 %409, %407
  br i1 %410, label %411, label %431

411:                                              ; preds = %404
  %412 = sub i32 %4, %0
  %413 = sub i32 %412, %12
  %414 = shl i32 %413, 2
  %415 = icmp slt i32 %377, %414
  %416 = select i1 %415, i32 %377, i32 %414
  %417 = sext i32 %377 to i64
  %418 = getelementptr inbounds i8, i8* %378, i64 %417
  %419 = getelementptr inbounds i8, i8* %76, i64 %417
  %420 = sext i32 %416 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %418, i8* align 1 %419, i64 %420, i1 false)
  %421 = icmp sgt i32 %377, %414
  br i1 %421, label %422, label %438

422:                                              ; preds = %411
  %423 = getelementptr inbounds i8, i8* %418, i64 %420
  %424 = add nsw i32 %377, -1
  %425 = add i32 %424, %416
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds i8, i8* %378, i64 %426
  %428 = load i8, i8* %427, align 1
  %429 = sub nsw i32 %377, %416
  %430 = sext i32 %429 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %423, i8 %428, i64 %430, i1 false)
  br label %438

431:                                              ; preds = %404
  %432 = sext i32 %377 to i64
  %433 = getelementptr inbounds i8, i8* %378, i64 %432
  %434 = add nsw i32 %377, -1
  %435 = sext i32 %434 to i64
  %436 = getelementptr inbounds i8, i8* %378, i64 %435
  %437 = load i8, i8* %436, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %433, i8 %437, i64 %432, i1 false)
  br label %438

438:                                              ; preds = %402, %411, %422, %431, %372
  %439 = lshr i64 12736, %51
  %440 = and i64 %439, 1
  %441 = icmp eq i64 %440, 0
  br i1 %441, label %474, label %442

442:                                              ; preds = %438
  %443 = icmp eq i32 %1, 0
  br i1 %443, label %447, label %444

444:                                              ; preds = %442
  %445 = select i1 %50, i8* %76, i8* %7
  %446 = getelementptr inbounds i8, i8* %445, i64 -1
  br label %448

447:                                              ; preds = %442
  br i1 %50, label %448, label %451

448:                                              ; preds = %447, %444
  %449 = phi i8* [ %446, %444 ], [ %76, %447 ]
  %450 = load i8, i8* %449, align 1
  br label %451

451:                                              ; preds = %448, %447
  %452 = phi i8 [ -128, %447 ], [ %450, %448 ]
  store i8 %452, i8* %15, align 1
  %453 = icmp eq i32 %49, 7
  br i1 %453, label %454, label %474

454:                                              ; preds = %451
  %455 = add nsw i32 %13, %12
  %456 = icmp sgt i32 %455, 5
  %457 = icmp ne i32 %14, 0
  %458 = and i1 %456, %457
  br i1 %458, label %459, label %474

459:                                              ; preds = %454
  %460 = getelementptr inbounds i8, i8* %15, i64 -1
  %461 = load i8, i8* %460, align 1
  %462 = zext i8 %461 to i32
  %463 = getelementptr inbounds i8, i8* %15, i64 1
  %464 = load i8, i8* %463, align 1
  %465 = zext i8 %464 to i32
  %466 = add nuw nsw i32 %465, %462
  %467 = mul nuw nsw i32 %466, 5
  %468 = zext i8 %452 to i32
  %469 = mul nuw nsw i32 %468, 6
  %470 = add nuw nsw i32 %469, 8
  %471 = add nuw nsw i32 %470, %467
  %472 = lshr i32 %471, 4
  %473 = trunc i32 %472 to i8
  store i8 %473, i8* %15, align 1
  br label %474

474:                                              ; preds = %438, %451, %454, %459
  ret i32 %49
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare void @llvm.assume(i1) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
