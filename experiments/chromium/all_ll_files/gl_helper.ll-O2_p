; ModuleID = '../../ui/gl/gl_helper.cc'
source_filename = "../../ui/gl/gl_helper.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::ThreadLocalPointer" = type { %"class.base::ThreadLocalStorage::Slot" }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"class.gl::GLApi" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.gl::ScopedBufferBinder" = type { %"class.gl::GLStateRestorer"*, i32, i32 }
%"class.gl::GLStateRestorer" = type { i32 (...)** }
%"class.gl::ScopedVertexAttribArray" = type { %"class.gl::GLStateRestorer"*, i32, i32, i32, i32, i32, i32, i32, i8* }
%"class.gl::ScopedCapability" = type <{ i32, i8, [3 x i8] }>
%"class.gl::ScopedColorMask" = type { [4 x i8] }
%"class.gl::GLContext" = type <{ i32 (...)**, %"class.base::RefCounted", [4 x i8], %"class.base::SupportsWeakPtr", %"struct.gl::GLWorkarounds", [6 x i8], %"class.std::__1::basic_string", i8, i8, [6 x i8], %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.34", %"class.gl::RealGLApi"*, %class.scoped_refptr.40, %"class.gl::GLContext"*, i8, [7 x i8], %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.56", i8, [7 x i8] }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.base::SupportsWeakPtr" = type { %"class.base::internal::WeakReferenceOwner" }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%"struct.gl::GLWorkarounds" = type { i8, i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.gl::DriverGL"* }
%"struct.gl::DriverGL" = type <{ %"struct.gl::ProcsGL", %"struct.gl::ExtensionsGL", i8 }>
%"struct.gl::ProcsGL" = type { void (i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i8*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i8, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32)*, void (i32, i32, i64, i32)*, void ()*, void (float, float, float, float)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, i32 (i32)*, void (i32)*, void (i32, i32, float, i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (float, float, float, float)*, void (double)*, void (float)*, void (i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, i32 (%struct.__GLsync*, i32, i64)*, i32 (%struct.__GLsync*, i32, i64)*, void (i8, i8, i8, i8)*, void (i32, i8, i8, i8, i8)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8, i8, i8)*, void (i32)*, void (i32, i32, i8*, i32, i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i8*, i32, i32, i32, float*)*, void (i32, i32)*, void (i32, i32*)*, i32 ()*, i32 (i32)*, i32 (i32, i32, i8**)*, void (i32)*, void (void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*)*, void (i32, i32, i32, i32, i32*, i8)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (%struct.__GLsync*)*, void (%struct.__GLsync*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i8)*, void (double, double)*, void (float, float)*, void (i32, i32)*, void (i32)*, void (i8*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i64)*, void (i32, i32, i32)*, void (i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i8*, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32)*, void (i32)*, void (i32)*, void ()*, %struct.__GLsync* (i32, i32)*, %struct.__GLsync* (i32, i32)*, void ()*, void (i32)*, void (i32)*, void ()*, void (i32, i64, i64)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, i32 (i32)*, i32 (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32, i32*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i8**)*, i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)*, i32 ()*, void (i32, i32, i32*)*, void (i32, float*)*, void (i32, i32, i32*, float*)*, i32 (i32, i8*)*, i32 (i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, i32 ()*, void (i32, i32, i64*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i64*)*, void (i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i8*, i32, i32*, i8*)*, void (i32, i8**)*, void (i32, i32, i32*, i8**)*, void (i32, i32, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i32, i32*, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, i8* (i32)*, i8* (i32, i32)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i8**)*, void (i32, i32, i32, i32*, i8**)*, void (i32, i32)*, void (i32, i64, i32, i32)*, void (i32, i64, i32, i8*)*, void (i32, i64, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (%struct.__GLsync*)*, i8 (%struct.__GLsync*)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, void (float)*, void (i32)*, i8* (i32, i32)*, i8* (i32, i64, i64, i32)*, void (i32, float*)*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, void (i32, i32, i32*)*, void (float)*, void (i32, i32*, i32*, i32)*, void (i32, i32*, i32*, i32*, i32)*, void (i32, i32*, i32*, i32*, i32*, i32)*, void (i32, i32*, i32, i8**, i32)*, void (i32, i32*, i32, i8**, i32*, i32)*, void (i32, i32*, i32, i8**, i32*, i32*, i32*, i32)*, void (i32, i32, i32, i8*)*, void (i8*, i32, i8*)*, void (i32, i32)*, void (i32, i32, i8*, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void ()*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (float, float)*, void ()*, void ()*, void (i32)*, void (i32, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, float*)*, void (i32, i32, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, float, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8*)*, void (i32, i8*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32*, i8*)*, void ()*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i8*)*, void ()*, void (float, i8)*, void (i32, i32)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, i8 (i32)*, i8 (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i8**, i32)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, i8 (i32)*, void (i32)*, void (i32, i32, i32)*, void (i32)*, void (i32)*, void (i32, float)*, void (i32, float*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (%struct.__GLsync*, i32, i64)*, void (%struct.__GLsync*, i32, i64)*, void (i32, i32, i32*)* }
%struct.__GLsync = type opaque
%"struct.gl::ExtensionsGL" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.gl::GLImplementationWrapper"* }
%"class.gl::GLImplementationWrapper" = type { %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.19", %"class.std::__1::unique_ptr.25", %"class.gl::GLApi"* }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.gl::GLApi"* }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.gl::TraceGLApi"* }
%"class.gl::TraceGLApi" = type opaque
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.gl::LogGLApi"* }
%"class.gl::LogGLApi" = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.gl::CurrentGL"* }
%"struct.gl::CurrentGL" = type { %"class.gl::GLApi"*, %"struct.gl::DriverGL"*, %"struct.gl::GLVersionInfo"* }
%"struct.gl::GLVersionInfo" = type { i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8, i8, i8, i8, %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.gl::RealGLApi" = type opaque
%class.scoped_refptr.40 = type { %"class.gl::GLShareGroup"* }
%"class.gl::GLShareGroup" = type { %"class.base::RefCounted.41", %"class.std::__1::set", %"class.gl::GLContext"* }
%"class.base::RefCounted.41" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.42", %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { i64 }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.gl::GLStateRestorer"* }
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.gl::GLVersionInfo"* }

@_ZN2gl24g_current_gl_context_tlsE = external local_unnamed_addr global %"class.base::ThreadLocalPointer"*, align 8
@__const._ZN2gl8GLHelper21SetupQuadVertexBufferEv.data = private unnamed_addr constant [8 x float] [float -1.000000e+00, float -1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2gl8GLHelper13CompileShaderEjPKc(i32, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca i8*, align 8
  store i8* %1, i8** %3, align 8
  %4 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %5 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %4, i64 0, i32 0
  %6 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %5) #7
  %7 = bitcast i8* %6 to %"class.gl::GLApi"**
  %8 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %7, align 8
  %9 = bitcast %"class.gl::GLApi"* %8 to i32 (%"class.gl::GLApi"*, i32)***
  %10 = load i32 (%"class.gl::GLApi"*, i32)**, i32 (%"class.gl::GLApi"*, i32)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.gl::GLApi"*, i32)*, i32 (%"class.gl::GLApi"*, i32)** %10, i64 76
  %12 = load i32 (%"class.gl::GLApi"*, i32)*, i32 (%"class.gl::GLApi"*, i32)** %11, align 8
  %13 = tail call i32 %12(%"class.gl::GLApi"* %8, i32 %0) #7
  %14 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %15 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %14, i64 0, i32 0
  %16 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %15) #7
  %17 = bitcast i8* %16 to %"class.gl::GLApi"**
  %18 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %17, align 8
  %19 = bitcast %"class.gl::GLApi"* %18 to void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)***
  %20 = load void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)**, void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)*, void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)** %20, i64 399
  %22 = load void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)*, void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)** %21, align 8
  call void %22(%"class.gl::GLApi"* %18, i32 %13, i32 1, i8** nonnull %3, i32* null) #7
  %23 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %24 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %23, i64 0, i32 0
  %25 = call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %24) #7
  %26 = bitcast i8* %25 to %"class.gl::GLApi"**
  %27 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %26, align 8
  %28 = bitcast %"class.gl::GLApi"* %27 to void (%"class.gl::GLApi"*, i32)***
  %29 = load void (%"class.gl::GLApi"*, i32)**, void (%"class.gl::GLApi"*, i32)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.gl::GLApi"*, i32)*, void (%"class.gl::GLApi"*, i32)** %29, i64 54
  %31 = load void (%"class.gl::GLApi"*, i32)*, void (%"class.gl::GLApi"*, i32)** %30, align 8
  call void %31(%"class.gl::GLApi"* %27, i32 %13) #7
  ret i32 %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2gl8GLHelper10LoadShaderEjPKc(i32, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca [1024 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8)
  store i8* %1, i8** %3, align 8
  %9 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %10 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %9, i64 0, i32 0
  %11 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %10) #7
  %12 = bitcast i8* %11 to %"class.gl::GLApi"**
  %13 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %12, align 8
  %14 = bitcast %"class.gl::GLApi"* %13 to i32 (%"class.gl::GLApi"*, i32)***
  %15 = load i32 (%"class.gl::GLApi"*, i32)**, i32 (%"class.gl::GLApi"*, i32)*** %14, align 8
  %16 = getelementptr inbounds i32 (%"class.gl::GLApi"*, i32)*, i32 (%"class.gl::GLApi"*, i32)** %15, i64 76
  %17 = load i32 (%"class.gl::GLApi"*, i32)*, i32 (%"class.gl::GLApi"*, i32)** %16, align 8
  %18 = tail call i32 %17(%"class.gl::GLApi"* %13, i32 %0) #7
  %19 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %20 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %19, i64 0, i32 0
  %21 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %20) #7
  %22 = bitcast i8* %21 to %"class.gl::GLApi"**
  %23 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %22, align 8
  %24 = bitcast %"class.gl::GLApi"* %23 to void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)***
  %25 = load void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)**, void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)*, void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)** %25, i64 399
  %27 = load void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)*, void (%"class.gl::GLApi"*, i32, i32, i8**, i32*)** %26, align 8
  call void %27(%"class.gl::GLApi"* %23, i32 %18, i32 1, i8** nonnull %3, i32* null) #7
  %28 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %29 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %28, i64 0, i32 0
  %30 = call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %29) #7
  %31 = bitcast i8* %30 to %"class.gl::GLApi"**
  %32 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %31, align 8
  %33 = bitcast %"class.gl::GLApi"* %32 to void (%"class.gl::GLApi"*, i32)***
  %34 = load void (%"class.gl::GLApi"*, i32)**, void (%"class.gl::GLApi"*, i32)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.gl::GLApi"*, i32)*, void (%"class.gl::GLApi"*, i32)** %34, i64 54
  %36 = load void (%"class.gl::GLApi"*, i32)*, void (%"class.gl::GLApi"*, i32)** %35, align 8
  call void %36(%"class.gl::GLApi"* %32, i32 %18) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8)
  %37 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37) #7
  store i32 0, i32* %4, align 4
  %38 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %39 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %38, i64 0, i32 0
  %40 = call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %39) #7
  %41 = bitcast i8* %40 to %"class.gl::GLApi"**
  %42 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %41, align 8
  %43 = bitcast %"class.gl::GLApi"* %42 to void (%"class.gl::GLApi"*, i32, i32, i32*)***
  %44 = load void (%"class.gl::GLApi"*, i32, i32, i32*)**, void (%"class.gl::GLApi"*, i32, i32, i32*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i32, i32*)*, void (%"class.gl::GLApi"*, i32, i32, i32*)** %44, i64 238
  %46 = load void (%"class.gl::GLApi"*, i32, i32, i32*)*, void (%"class.gl::GLApi"*, i32, i32, i32*)** %45, align 8
  call void %46(%"class.gl::GLApi"* %42, i32 %18, i32 35713, i32* nonnull %4) #7
  %47 = load i32, i32* %4, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %106

49:                                               ; preds = %2
  %50 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %50) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %50, i8 -86, i64 1024, i1 false)
  %51 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %51) #7
  store i32 0, i32* %6, align 4
  %52 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %53 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %52, i64 0, i32 0
  %54 = call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %53) #7
  %55 = bitcast i8* %54 to %"class.gl::GLApi"**
  %56 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %55, align 8
  %57 = bitcast %"class.gl::GLApi"* %56 to void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)***
  %58 = load void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)**, void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)*** %57, align 8
  %59 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)*, void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)** %58, i64 237
  %60 = load void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)*, void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)** %59, align 8
  call void %60(%"class.gl::GLApi"* %56, i32 %18, i32 1024, i32* nonnull %6, i8* nonnull %50) #7
  %61 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %61) #7
  %62 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %65 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 -86, i64 24, i1 false)
  %66 = load i32, i32* %6, align 4
  %67 = sext i32 %66 to i64
  %68 = icmp ugt i32 %66, -17
  br i1 %68, label %69, label %71

69:                                               ; preds = %49
  %70 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %70) #8
  unreachable

71:                                               ; preds = %49
  %72 = icmp ult i32 %66, 23
  br i1 %72, label %79, label %73

73:                                               ; preds = %71
  %74 = add nuw nsw i64 %67, 16
  %75 = and i64 %74, -16
  %76 = call i8* @_Znwm(i64 %75) #9
  store i8* %76, i8** %62, align 8
  %77 = or i64 %75, -9223372036854775808
  store i64 %77, i64* %64, align 8
  store i64 %67, i64* %63, align 8
  %78 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %84

79:                                               ; preds = %71
  %80 = trunc i32 %66 to i8
  %81 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %82 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %81, i64 0, i32 1, i32 0
  store i8 %80, i8* %82, align 1
  %83 = icmp eq i32 %66, 0
  br i1 %83, label %87, label %84

84:                                               ; preds = %79, %73
  %85 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %81, %79 ], [ %78, %73 ]
  %86 = phi i8* [ %61, %79 ], [ %76, %73 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %86, i8* nonnull align 16 %50, i64 %67, i1 false) #7
  br label %87

87:                                               ; preds = %79, %84
  %88 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %81, %79 ], [ %85, %84 ]
  %89 = phi i8* [ %61, %79 ], [ %86, %84 ]
  %90 = getelementptr inbounds i8, i8* %89, i64 %67
  store i8 0, i8* %90, align 1
  %91 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %92 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %91, i64 0, i32 0
  %93 = call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %92) #7
  %94 = bitcast i8* %93 to %"class.gl::GLApi"**
  %95 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %94, align 8
  %96 = bitcast %"class.gl::GLApi"* %95 to void (%"class.gl::GLApi"*, i32)***
  %97 = load void (%"class.gl::GLApi"*, i32)**, void (%"class.gl::GLApi"*, i32)*** %96, align 8
  %98 = getelementptr inbounds void (%"class.gl::GLApi"*, i32)*, void (%"class.gl::GLApi"*, i32)** %97, i64 94
  %99 = load void (%"class.gl::GLApi"*, i32)*, void (%"class.gl::GLApi"*, i32)** %98, align 8
  call void %99(%"class.gl::GLApi"* %95, i32 %18) #7
  %100 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %88, i64 0, i32 1, i32 0
  %101 = load i8, i8* %100, align 1
  %102 = icmp slt i8 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %87
  %104 = load i8*, i8** %62, align 8
  call void @_ZdlPv(i8* %104) #9
  br label %105

105:                                              ; preds = %87, %103
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %61) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %51) #7
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %50) #7
  br label %106

106:                                              ; preds = %2, %105
  %107 = phi i32 [ %18, %2 ], [ 0, %105 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #7
  ret i32 %107
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2gl8GLHelper11LinkProgramEjj(i32, i32) local_unnamed_addr #0 align 2 {
  %3 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %4 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %3, i64 0, i32 0
  %5 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %4) #7
  %6 = bitcast i8* %5 to %"class.gl::GLApi"**
  %7 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %6, align 8
  %8 = bitcast %"class.gl::GLApi"* %7 to i32 (%"class.gl::GLApi"*)***
  %9 = load i32 (%"class.gl::GLApi"*)**, i32 (%"class.gl::GLApi"*)*** %8, align 8
  %10 = getelementptr inbounds i32 (%"class.gl::GLApi"*)*, i32 (%"class.gl::GLApi"*)** %9, i64 75
  %11 = load i32 (%"class.gl::GLApi"*)*, i32 (%"class.gl::GLApi"*)** %10, align 8
  %12 = tail call i32 %11(%"class.gl::GLApi"* %7) #7
  %13 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %14 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %13, i64 0, i32 0
  %15 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %14) #7
  %16 = bitcast i8* %15 to %"class.gl::GLApi"**
  %17 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %16, align 8
  %18 = bitcast %"class.gl::GLApi"* %17 to void (%"class.gl::GLApi"*, i32, i32)***
  %19 = load void (%"class.gl::GLApi"*, i32, i32)**, void (%"class.gl::GLApi"*, i32, i32)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i32)*, void (%"class.gl::GLApi"*, i32, i32)** %19, i64 5
  %21 = load void (%"class.gl::GLApi"*, i32, i32)*, void (%"class.gl::GLApi"*, i32, i32)** %20, align 8
  tail call void %21(%"class.gl::GLApi"* %17, i32 %12, i32 %0) #7
  %22 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %23 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %22, i64 0, i32 0
  %24 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %23) #7
  %25 = bitcast i8* %24 to %"class.gl::GLApi"**
  %26 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %25, align 8
  %27 = bitcast %"class.gl::GLApi"* %26 to void (%"class.gl::GLApi"*, i32, i32)***
  %28 = load void (%"class.gl::GLApi"*, i32, i32)**, void (%"class.gl::GLApi"*, i32, i32)*** %27, align 8
  %29 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i32)*, void (%"class.gl::GLApi"*, i32, i32)** %28, i64 5
  %30 = load void (%"class.gl::GLApi"*, i32, i32)*, void (%"class.gl::GLApi"*, i32, i32)** %29, align 8
  tail call void %30(%"class.gl::GLApi"* %26, i32 %12, i32 %1) #7
  %31 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %32 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %31, i64 0, i32 0
  %33 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %32) #7
  %34 = bitcast i8* %33 to %"class.gl::GLApi"**
  %35 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %34, align 8
  %36 = bitcast %"class.gl::GLApi"* %35 to void (%"class.gl::GLApi"*, i32)***
  %37 = load void (%"class.gl::GLApi"*, i32)**, void (%"class.gl::GLApi"*, i32)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.gl::GLApi"*, i32)*, void (%"class.gl::GLApi"*, i32)** %37, i64 304
  %39 = load void (%"class.gl::GLApi"*, i32)*, void (%"class.gl::GLApi"*, i32)** %38, align 8
  tail call void %39(%"class.gl::GLApi"* %35, i32 %12) #7
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2gl8GLHelper12SetupProgramEjj(i32, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca [1024 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %8 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %7, i64 0, i32 0
  %9 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %8) #7
  %10 = bitcast i8* %9 to %"class.gl::GLApi"**
  %11 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %10, align 8
  %12 = bitcast %"class.gl::GLApi"* %11 to i32 (%"class.gl::GLApi"*)***
  %13 = load i32 (%"class.gl::GLApi"*)**, i32 (%"class.gl::GLApi"*)*** %12, align 8
  %14 = getelementptr inbounds i32 (%"class.gl::GLApi"*)*, i32 (%"class.gl::GLApi"*)** %13, i64 75
  %15 = load i32 (%"class.gl::GLApi"*)*, i32 (%"class.gl::GLApi"*)** %14, align 8
  %16 = tail call i32 %15(%"class.gl::GLApi"* %11) #7
  %17 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %18 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %17, i64 0, i32 0
  %19 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %18) #7
  %20 = bitcast i8* %19 to %"class.gl::GLApi"**
  %21 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %20, align 8
  %22 = bitcast %"class.gl::GLApi"* %21 to void (%"class.gl::GLApi"*, i32, i32)***
  %23 = load void (%"class.gl::GLApi"*, i32, i32)**, void (%"class.gl::GLApi"*, i32, i32)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i32)*, void (%"class.gl::GLApi"*, i32, i32)** %23, i64 5
  %25 = load void (%"class.gl::GLApi"*, i32, i32)*, void (%"class.gl::GLApi"*, i32, i32)** %24, align 8
  tail call void %25(%"class.gl::GLApi"* %21, i32 %16, i32 %0) #7
  %26 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %27 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %26, i64 0, i32 0
  %28 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %27) #7
  %29 = bitcast i8* %28 to %"class.gl::GLApi"**
  %30 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %29, align 8
  %31 = bitcast %"class.gl::GLApi"* %30 to void (%"class.gl::GLApi"*, i32, i32)***
  %32 = load void (%"class.gl::GLApi"*, i32, i32)**, void (%"class.gl::GLApi"*, i32, i32)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i32)*, void (%"class.gl::GLApi"*, i32, i32)** %32, i64 5
  %34 = load void (%"class.gl::GLApi"*, i32, i32)*, void (%"class.gl::GLApi"*, i32, i32)** %33, align 8
  tail call void %34(%"class.gl::GLApi"* %30, i32 %16, i32 %1) #7
  %35 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %36 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %35, i64 0, i32 0
  %37 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %36) #7
  %38 = bitcast i8* %37 to %"class.gl::GLApi"**
  %39 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %38, align 8
  %40 = bitcast %"class.gl::GLApi"* %39 to void (%"class.gl::GLApi"*, i32)***
  %41 = load void (%"class.gl::GLApi"*, i32)**, void (%"class.gl::GLApi"*, i32)*** %40, align 8
  %42 = getelementptr inbounds void (%"class.gl::GLApi"*, i32)*, void (%"class.gl::GLApi"*, i32)** %41, i64 304
  %43 = load void (%"class.gl::GLApi"*, i32)*, void (%"class.gl::GLApi"*, i32)** %42, align 8
  tail call void %43(%"class.gl::GLApi"* %39, i32 %16) #7
  %44 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %44) #7
  store i32 0, i32* %3, align 4
  %45 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %46 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %45, i64 0, i32 0
  %47 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %46) #7
  %48 = bitcast i8* %47 to %"class.gl::GLApi"**
  %49 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %48, align 8
  %50 = bitcast %"class.gl::GLApi"* %49 to void (%"class.gl::GLApi"*, i32, i32, i32*)***
  %51 = load void (%"class.gl::GLApi"*, i32, i32, i32*)**, void (%"class.gl::GLApi"*, i32, i32, i32*)*** %50, align 8
  %52 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i32, i32*)*, void (%"class.gl::GLApi"*, i32, i32, i32*)** %51, i64 211
  %53 = load void (%"class.gl::GLApi"*, i32, i32, i32*)*, void (%"class.gl::GLApi"*, i32, i32, i32*)** %52, align 8
  call void %53(%"class.gl::GLApi"* %49, i32 %16, i32 35714, i32* nonnull %3) #7
  %54 = load i32, i32* %3, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %113

56:                                               ; preds = %2
  %57 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %57) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %57, i8 -86, i64 1024, i1 false)
  %58 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %58) #7
  store i32 0, i32* %5, align 4
  %59 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %60 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %59, i64 0, i32 0
  %61 = call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %60) #7
  %62 = bitcast i8* %61 to %"class.gl::GLApi"**
  %63 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %62, align 8
  %64 = bitcast %"class.gl::GLApi"* %63 to void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)***
  %65 = load void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)**, void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)*** %64, align 8
  %66 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)*, void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)** %65, i64 208
  %67 = load void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)*, void (%"class.gl::GLApi"*, i32, i32, i32*, i8*)** %66, align 8
  call void %67(%"class.gl::GLApi"* %63, i32 %16, i32 1024, i32* nonnull %5, i8* nonnull %57) #7
  %68 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %68) #7
  %69 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %72 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 -86, i64 24, i1 false)
  %73 = load i32, i32* %5, align 4
  %74 = sext i32 %73 to i64
  %75 = icmp ugt i32 %73, -17
  br i1 %75, label %76, label %78

76:                                               ; preds = %56
  %77 = bitcast %"class.std::__1::basic_string"* %6 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %77) #8
  unreachable

78:                                               ; preds = %56
  %79 = icmp ult i32 %73, 23
  br i1 %79, label %86, label %80

80:                                               ; preds = %78
  %81 = add nuw nsw i64 %74, 16
  %82 = and i64 %81, -16
  %83 = call i8* @_Znwm(i64 %82) #9
  store i8* %83, i8** %69, align 8
  %84 = or i64 %82, -9223372036854775808
  store i64 %84, i64* %71, align 8
  store i64 %74, i64* %70, align 8
  %85 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %91

86:                                               ; preds = %78
  %87 = trunc i32 %73 to i8
  %88 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %89 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %88, i64 0, i32 1, i32 0
  store i8 %87, i8* %89, align 1
  %90 = icmp eq i32 %73, 0
  br i1 %90, label %94, label %91

91:                                               ; preds = %86, %80
  %92 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %88, %86 ], [ %85, %80 ]
  %93 = phi i8* [ %68, %86 ], [ %83, %80 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %93, i8* nonnull align 16 %57, i64 %74, i1 false) #7
  br label %94

94:                                               ; preds = %86, %91
  %95 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %88, %86 ], [ %92, %91 ]
  %96 = phi i8* [ %68, %86 ], [ %93, %91 ]
  %97 = getelementptr inbounds i8, i8* %96, i64 %74
  store i8 0, i8* %97, align 1
  %98 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %99 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %98, i64 0, i32 0
  %100 = call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %99) #7
  %101 = bitcast i8* %100 to %"class.gl::GLApi"**
  %102 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %101, align 8
  %103 = bitcast %"class.gl::GLApi"* %102 to void (%"class.gl::GLApi"*, i32)***
  %104 = load void (%"class.gl::GLApi"*, i32)**, void (%"class.gl::GLApi"*, i32)*** %103, align 8
  %105 = getelementptr inbounds void (%"class.gl::GLApi"*, i32)*, void (%"class.gl::GLApi"*, i32)** %104, i64 88
  %106 = load void (%"class.gl::GLApi"*, i32)*, void (%"class.gl::GLApi"*, i32)** %105, align 8
  call void %106(%"class.gl::GLApi"* %102, i32 %16) #7
  %107 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %95, i64 0, i32 1, i32 0
  %108 = load i8, i8* %107, align 1
  %109 = icmp slt i8 %108, 0
  br i1 %109, label %110, label %112

110:                                              ; preds = %94
  %111 = load i8*, i8** %69, align 8
  call void @_ZdlPv(i8* %111) #9
  br label %112

112:                                              ; preds = %94, %110
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %68) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %58) #7
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %57) #7
  br label %113

113:                                              ; preds = %2, %112
  %114 = phi i32 [ %16, %2 ], [ 0, %112 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %44) #7
  ret i32 %114
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2gl8GLHelper21SetupQuadVertexBufferEv() local_unnamed_addr #0 align 2 {
  %1 = alloca i32, align 4
  %2 = alloca %"class.gl::ScopedBufferBinder", align 8
  %3 = alloca [8 x float], align 16
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
  store i32 0, i32* %1, align 4
  %5 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %6 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %5, i64 0, i32 0
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #7
  %8 = bitcast i8* %7 to %"class.gl::GLApi"**
  %9 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %8, align 8
  %10 = bitcast %"class.gl::GLApi"* %9 to void (%"class.gl::GLApi"*, i32, i32*)***
  %11 = load void (%"class.gl::GLApi"*, i32, i32*)**, void (%"class.gl::GLApi"*, i32, i32*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i32*)*, void (%"class.gl::GLApi"*, i32, i32*)** %11, i64 145
  %13 = load void (%"class.gl::GLApi"*, i32, i32*)*, void (%"class.gl::GLApi"*, i32, i32*)** %12, align 8
  call void %13(%"class.gl::GLApi"* %9, i32 1, i32* nonnull %1) #7
  %14 = bitcast %"class.gl::ScopedBufferBinder"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #7
  %15 = bitcast %"class.gl::ScopedBufferBinder"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 16, i1 false)
  %16 = load i32, i32* %1, align 4
  call void @_ZN2gl18ScopedBufferBinderC1Ejj(%"class.gl::ScopedBufferBinder"* nonnull %2, i32 34962, i32 %16) #7
  %17 = bitcast [8 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %17, i8* align 16 bitcast ([8 x float]* @__const._ZN2gl8GLHelper21SetupQuadVertexBufferEv.data to i8*), i64 32, i1 false)
  %18 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %19 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %18, i64 0, i32 0
  %20 = call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %19) #7
  %21 = bitcast i8* %20 to %"class.gl::GLApi"**
  %22 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %21, align 8
  %23 = bitcast %"class.gl::GLApi"* %22 to void (%"class.gl::GLApi"*, i32, i64, i8*, i32)***
  %24 = load void (%"class.gl::GLApi"*, i32, i64, i8*, i32)**, void (%"class.gl::GLApi"*, i32, i64, i8*, i32)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i64, i8*, i32)*, void (%"class.gl::GLApi"*, i32, i64, i8*, i32)** %24, i64 36
  %26 = load void (%"class.gl::GLApi"*, i32, i64, i8*, i32)*, void (%"class.gl::GLApi"*, i32, i64, i8*, i32)** %25, align 8
  call void %26(%"class.gl::GLApi"* %22, i32 34962, i64 32, i8* nonnull %17, i32 35044) #7
  %27 = load i32, i32* %1, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #7
  call void @_ZN2gl18ScopedBufferBinderD1Ev(%"class.gl::ScopedBufferBinder"* nonnull %2) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
  ret i32 %27
}

declare void @_ZN2gl18ScopedBufferBinderC1Ejj(%"class.gl::ScopedBufferBinder"*, i32, i32) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare void @_ZN2gl18ScopedBufferBinderD1Ev(%"class.gl::ScopedBufferBinder"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl8GLHelper8DrawQuadEj(i32) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.gl::ScopedBufferBinder", align 8
  %3 = alloca %"class.gl::ScopedVertexAttribArray", align 8
  %4 = alloca i64, align 8
  %5 = bitcast i64* %4 to %"class.gl::ScopedCapability"*
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %"class.gl::ScopedCapability"*
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %"class.gl::ScopedCapability"*
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to %"class.gl::ScopedCapability"*
  %12 = alloca i64, align 8
  %13 = bitcast i64* %12 to %"class.gl::ScopedCapability"*
  %14 = alloca i32, align 4
  %15 = bitcast i32* %14 to %"class.gl::ScopedColorMask"*
  %16 = bitcast %"class.gl::ScopedBufferBinder"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #7
  %17 = bitcast %"class.gl::ScopedBufferBinder"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 16, i1 false)
  call void @_ZN2gl18ScopedBufferBinderC1Ejj(%"class.gl::ScopedBufferBinder"* nonnull %2, i32 34962, i32 %0) #7
  %18 = bitcast %"class.gl::ScopedVertexAttribArray"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %18) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 48, i1 false)
  call void @_ZN2gl23ScopedVertexAttribArrayC1EjijciPKv(%"class.gl::ScopedVertexAttribArray"* nonnull %3, i32 0, i32 2, i32 5126, i8 signext 0, i32 8, i8* null) #7
  %19 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #7
  store i64 -6148914691236517206, i64* %4, align 8
  call void @_ZN2gl16ScopedCapabilityC1Ejh(%"class.gl::ScopedCapability"* nonnull %5, i32 3042, i8 zeroext 0) #7
  %20 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #7
  store i64 -6148914691236517206, i64* %6, align 8
  call void @_ZN2gl16ScopedCapabilityC1Ejh(%"class.gl::ScopedCapability"* nonnull %7, i32 2884, i8 zeroext 0) #7
  %21 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #7
  store i64 -6148914691236517206, i64* %8, align 8
  call void @_ZN2gl16ScopedCapabilityC1Ejh(%"class.gl::ScopedCapability"* nonnull %9, i32 3024, i8 zeroext 0) #7
  %22 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #7
  store i64 -6148914691236517206, i64* %10, align 8
  call void @_ZN2gl16ScopedCapabilityC1Ejh(%"class.gl::ScopedCapability"* nonnull %11, i32 2929, i8 zeroext 0) #7
  %23 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #7
  store i64 -6148914691236517206, i64* %12, align 8
  call void @_ZN2gl16ScopedCapabilityC1Ejh(%"class.gl::ScopedCapability"* nonnull %13, i32 3089, i8 zeroext 0) #7
  %24 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #7
  store i32 -1431655766, i32* %14, align 4
  call void @_ZN2gl15ScopedColorMaskC1Ecccc(%"class.gl::ScopedColorMask"* nonnull %15, i8 signext 1, i8 signext 1, i8 signext 1, i8 signext 1) #7
  %25 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %26 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %25, i64 0, i32 0
  %27 = call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %26) #7
  %28 = bitcast i8* %27 to %"class.gl::GLApi"**
  %29 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %28, align 8
  %30 = bitcast %"class.gl::GLApi"* %29 to void (%"class.gl::GLApi"*, i32, i32, i32)***
  %31 = load void (%"class.gl::GLApi"*, i32, i32, i32)**, void (%"class.gl::GLApi"*, i32, i32, i32)*** %30, align 8
  %32 = getelementptr inbounds void (%"class.gl::GLApi"*, i32, i32, i32)*, void (%"class.gl::GLApi"*, i32, i32, i32)** %31, i64 112
  %33 = load void (%"class.gl::GLApi"*, i32, i32, i32)*, void (%"class.gl::GLApi"*, i32, i32, i32)** %32, align 8
  call void %33(%"class.gl::GLApi"* %29, i32 5, i32 0, i32 4) #7
  call void @_ZN2gl15ScopedColorMaskD1Ev(%"class.gl::ScopedColorMask"* nonnull %15) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #7
  call void @_ZN2gl16ScopedCapabilityD1Ev(%"class.gl::ScopedCapability"* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #7
  call void @_ZN2gl16ScopedCapabilityD1Ev(%"class.gl::ScopedCapability"* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #7
  call void @_ZN2gl16ScopedCapabilityD1Ev(%"class.gl::ScopedCapability"* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #7
  call void @_ZN2gl16ScopedCapabilityD1Ev(%"class.gl::ScopedCapability"* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #7
  call void @_ZN2gl16ScopedCapabilityD1Ev(%"class.gl::ScopedCapability"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #7
  call void @_ZN2gl23ScopedVertexAttribArrayD1Ev(%"class.gl::ScopedVertexAttribArray"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %18) #7
  call void @_ZN2gl18ScopedBufferBinderD1Ev(%"class.gl::ScopedBufferBinder"* nonnull %2) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #7
  ret void
}

declare void @_ZN2gl23ScopedVertexAttribArrayC1EjijciPKv(%"class.gl::ScopedVertexAttribArray"*, i32, i32, i32, i8 signext, i32, i8*) unnamed_addr #2

declare void @_ZN2gl16ScopedCapabilityC1Ejh(%"class.gl::ScopedCapability"*, i32, i8 zeroext) unnamed_addr #2

declare void @_ZN2gl15ScopedColorMaskC1Ecccc(%"class.gl::ScopedColorMask"*, i8 signext, i8 signext, i8 signext, i8 signext) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2gl15ScopedColorMaskD1Ev(%"class.gl::ScopedColorMask"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2gl16ScopedCapabilityD1Ev(%"class.gl::ScopedCapability"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2gl23ScopedVertexAttribArrayD1Ev(%"class.gl::ScopedVertexAttribArray"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2gl8GLHelper18ShouldTestsUseVAOsEv() local_unnamed_addr #0 align 2 {
  %1 = tail call %"class.gl::GLContext"* @_ZN2gl9GLContext10GetCurrentEv() #7
  %2 = tail call %"struct.gl::GLVersionInfo"* @_ZN2gl9GLContext14GetVersionInfoEv(%"class.gl::GLContext"* %1) #7
  %3 = getelementptr inbounds %"struct.gl::GLVersionInfo", %"struct.gl::GLVersionInfo"* %2, i64 0, i32 12
  %4 = load i8, i8* %3, align 2, !range !2
  %5 = icmp ne i8 %4, 0
  ret i1 %5
}

declare %"class.gl::GLContext"* @_ZN2gl9GLContext10GetCurrentEv() local_unnamed_addr #2

declare %"struct.gl::GLVersionInfo"* @_ZN2gl9GLContext14GetVersionInfoEv(%"class.gl::GLContext"*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
