; ModuleID = '../../extensions/browser/api/declarative_net_request/ruleset_source.cc'
source_filename = "../../extensions/browser/api/declarative_net_request/ruleset_source.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.extensions::declarative_net_request::RulesetSource" = type <{ i32 (...)**, %"class.util::IdType", [4 x i8], i64, %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.extensions::declarative_net_request::ParseInfo" = type <{ i8, [7 x i8], %"class.std::__1::basic_string", i32, [4 x i8], i64, i64, %"class.std::__1::vector", %"class.flatbuffers::DetachedBuffer", i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%"class.flatbuffers::DetachedBuffer" = type { %"class.flatbuffers::Allocator"*, i8, i8*, i64, i8*, i64 }
%"class.flatbuffers::Allocator" = type { i32 (...)** }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.extensions::api::declarative_net_request::Rule"*, %"struct.extensions::api::declarative_net_request::Rule"*, %"class.std::__1::__compressed_pair.92" }
%"struct.extensions::api::declarative_net_request::Rule" = type { i32, %"class.std::__1::unique_ptr", %"struct.extensions::api::declarative_net_request::RuleCondition", %"struct.extensions::api::declarative_net_request::RuleAction" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.extensions::api::declarative_net_request::RuleCondition" = type { %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.41", %"class.std::__1::unique_ptr.41", i32, %"class.std::__1::unique_ptr.48", %"class.std::__1::unique_ptr.48" }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { i8* }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.std::__1::vector.25"* }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.std::__1::vector.37"* }
%"class.std::__1::vector.37" = type opaque
%"class.std::__1::unique_ptr.41" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.std::__1::vector.44"* }
%"class.std::__1::vector.44" = type opaque
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.std::__1::vector"* }
%"struct.extensions::api::declarative_net_request::RuleAction" = type { i32, %"class.std::__1::unique_ptr.54", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.79" }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.extensions::api::declarative_net_request::Redirect"* }
%"struct.extensions::api::declarative_net_request::Redirect" = type { %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.57", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10" }
%"class.std::__1::unique_ptr.57" = type { %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"struct.extensions::api::declarative_net_request::URLTransform"* }
%"struct.extensions::api::declarative_net_request::URLTransform" = type { %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.60", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10" }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.extensions::api::declarative_net_request::QueryTransform"* }
%"struct.extensions::api::declarative_net_request::QueryTransform" = type { %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr.63" }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.std::__1::vector.66"* }
%"class.std::__1::vector.66" = type opaque
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.std::__1::vector.82"* }
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.83" }
%"class.std::__1::__vector_base.83" = type { %"struct.extensions::api::declarative_net_request::ModifyHeaderInfo"*, %"struct.extensions::api::declarative_net_request::ModifyHeaderInfo"*, %"class.std::__1::__compressed_pair.84" }
%"struct.extensions::api::declarative_net_request::ModifyHeaderInfo" = type { %"class.std::__1::basic_string", i32, %"class.std::__1::unique_ptr.10" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"struct.extensions::api::declarative_net_request::ModifyHeaderInfo"* }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"struct.extensions::api::declarative_net_request::Rule"* }
%"class.extensions::declarative_net_request::FlatRulesetIndexer" = type <{ %"class.flatbuffers::FlatBufferBuilder", %"class.std::__1::vector.105", %"class.std::__1::vector.113", %"class.std::__1::vector.120", i64, i8, [7 x i8] }>
%"class.flatbuffers::FlatBufferBuilder" = type { %"class.flatbuffers::vector_downward", i32, i16, i8, i8, i64, i8, i8, %"class.std::__1::set"* }
%"class.flatbuffers::vector_downward" = type { %"class.flatbuffers::Allocator"*, i8, i64, i64, i64, i8*, i8*, i8* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.97", %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103", %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.103" = type { i64 }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"struct.flatbuffers::FlatBufferBuilder::StringOffsetCompare" }
%"struct.flatbuffers::FlatBufferBuilder::StringOffsetCompare" = type { %"class.flatbuffers::vector_downward"* }
%"class.std::__1::vector.105" = type { %"class.std::__1::__vector_base.106" }
%"class.std::__1::__vector_base.106" = type { %"class.std::__1::unique_ptr.107"*, %"class.std::__1::unique_ptr.107"*, %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::unique_ptr.107" = type opaque
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.std::__1::unique_ptr.107"* }
%"class.std::__1::vector.113" = type { %"class.std::__1::__vector_base.114" }
%"class.std::__1::__vector_base.114" = type { %"struct.flatbuffers::Offset"*, %"struct.flatbuffers::Offset"*, %"class.std::__1::__compressed_pair.115" }
%"struct.flatbuffers::Offset" = type { i32 }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"struct.flatbuffers::Offset"* }
%"class.std::__1::vector.120" = type { %"class.std::__1::__vector_base.121" }
%"class.std::__1::__vector_base.121" = type { %"struct.flatbuffers::Offset.122"*, %"struct.flatbuffers::Offset.122"*, %"class.std::__1::__compressed_pair.123" }
%"struct.flatbuffers::Offset.122" = type { i32 }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.flatbuffers::Offset.122"* }
%"class.std::__1::set.128" = type { %"class.std::__1::__tree.129" }
%"class.std::__1::__tree.129" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.130", %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.136" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.136" = type { %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %class.GURL* }
%"struct.extensions::declarative_net_request::IndexedRule" = type { i32, i32, i32, i8, i16, i16, i8, i32, i32, i32, %"class.std::__1::basic_string", %"class.std::__1::vector.25", %"class.std::__1::vector.25", %"class.absl::optional", %"class.absl::optional", %"class.std::__1::unique_ptr.57", %"class.std::__1::vector.82", %"class.std::__1::vector.82", %"class.base::internal::flat_tree", %"class.base::internal::flat_tree" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.142 }
%union.anon.142 = type { %"class.std::__1::basic_string" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", i32 }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.extensions::declarative_net_request::RulesetMatcher"* }
%"class.extensions::declarative_net_request::RulesetMatcher" = type { %"class.std::__1::basic_string", %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset"*, %"class.util::IdType", %"class.extensions::declarative_net_request::ExtensionUrlPatternIndexMatcher", %"class.extensions::declarative_net_request::RegexRulesMatcher" }
%"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset" = type { %"class.flatbuffers::Table" }
%"class.flatbuffers::Table" = type { [1 x i8] }
%"class.extensions::declarative_net_request::ExtensionUrlPatternIndexMatcher" = type { %"class.extensions::declarative_net_request::RulesetMatcherBase", %"class.flatbuffers::Vector"*, %"class.std::__1::vector.156", i8, i64 }
%"class.extensions::declarative_net_request::RulesetMatcherBase" = type { i32 (...)**, %"class.std::__1::basic_string", %"class.util::IdType", %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.147" }
%"class.std::__1::__tree.147" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.148", %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"class.flatbuffers::Vector" = type { i32 }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"class.url_pattern_index::UrlPatternIndexMatcher"*, %"class.url_pattern_index::UrlPatternIndexMatcher"*, %"class.std::__1::__compressed_pair.163" }
%"class.url_pattern_index::UrlPatternIndexMatcher" = type { %"struct.url_pattern_index::flat::UrlPatternIndex"*, %"class.absl::optional.158" }
%"struct.url_pattern_index::flat::UrlPatternIndex" = type { %"class.flatbuffers::Table" }
%"class.absl::optional.158" = type { %"class.absl::optional_internal::optional_data.159" }
%"class.absl::optional_internal::optional_data.159" = type { %"class.absl::optional_internal::optional_data_base.160" }
%"class.absl::optional_internal::optional_data_base.160" = type { %"class.absl::optional_internal::optional_data_dtor_base.161" }
%"class.absl::optional_internal::optional_data_dtor_base.161" = type { i8, %union.anon.162 }
%union.anon.162 = type { i64 }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.url_pattern_index::UrlPatternIndexMatcher"* }
%"class.extensions::declarative_net_request::RegexRulesMatcher" = type { %"class.extensions::declarative_net_request::RulesetMatcherBase", %"class.flatbuffers::Vector.168"*, %"class.flatbuffers::Vector"*, i8, %"class.re2::FilteredRE2", %"class.std::__1::map.184", %"class.std::__1::unique_ptr.193" }
%"class.flatbuffers::Vector.168" = type { i32 }
%"class.re2::FilteredRE2" = type { %"class.std::__1::vector.169", i8, %"class.std::__1::unique_ptr.178" }
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { %"class.re2::RE2"**, %"class.re2::RE2"**, %"class.std::__1::__compressed_pair.173" }
%"class.re2::RE2" = type { %"class.std::__1::basic_string", %"class.re2::RE2::Options", %"class.re2::Regexp"*, %"class.std::__1::basic_string"*, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"class.re2::Regexp"*, %"class.re2::Prog"*, i32, i8, %"class.re2::Prog"*, %"class.std::__1::map.171"*, %"class.std::__1::map.172"*, %"struct.std::__1::once_flag", %"struct.std::__1::once_flag", %"struct.std::__1::once_flag" }
%"class.re2::RE2::Options" = type { i32, i8, i8, i8, i64, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.re2::Regexp" = type opaque
%"class.re2::Prog" = type opaque
%"class.std::__1::map.171" = type opaque
%"class.std::__1::map.172" = type opaque
%"struct.std::__1::once_flag" = type { i64 }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.re2::RE2"** }
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.re2::PrefilterTree"* }
%"class.re2::PrefilterTree" = type opaque
%"class.std::__1::map.184" = type { %"class.std::__1::__tree.185" }
%"class.std::__1::__tree.185" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.186", %"class.std::__1::__compressed_pair.190" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.url_matcher::SubstringSetMatcher"* }
%"class.url_matcher::SubstringSetMatcher" = type <{ %"class.std::__1::vector.196", i8, [7 x i8] }>
%"class.std::__1::vector.196" = type { %"class.std::__1::__vector_base.197" }
%"class.std::__1::__vector_base.197" = type { %"class.url_matcher::SubstringSetMatcher::AhoCorasickNode"*, %"class.url_matcher::SubstringSetMatcher::AhoCorasickNode"*, %"class.std::__1::__compressed_pair.207" }
%"class.url_matcher::SubstringSetMatcher::AhoCorasickNode" = type <{ %"class.base::flat_map", i32, i32, i32, [4 x i8] }>
%"class.base::flat_map" = type { %"class.base::internal::flat_tree.198" }
%"class.base::internal::flat_tree.198" = type { %"class.std::__1::vector.199" }
%"class.std::__1::vector.199" = type { %"class.std::__1::__vector_base.200" }
%"class.std::__1::__vector_base.200" = type { %"struct.std::__1::pair.201"*, %"struct.std::__1::pair.201"*, %"class.std::__1::__compressed_pair.202" }
%"struct.std::__1::pair.201" = type { i8, i32 }
%"class.std::__1::__compressed_pair.202" = type { %"struct.std::__1::__compressed_pair_elem.203" }
%"struct.std::__1::__compressed_pair_elem.203" = type { %"struct.std::__1::pair.201"* }
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.208" }
%"struct.std::__1::__compressed_pair_elem.208" = type { %"class.url_matcher::SubstringSetMatcher::AhoCorasickNode"* }
%"class.flatbuffers::Verifier" = type <{ i8*, i64, i32, i32, i32, i32, i64, i8, [7 x i8] }>
%"struct.extensions::declarative_net_request::flat::RegexRule" = type { %"class.flatbuffers::Table" }
%"struct.extensions::declarative_net_request::flat::UrlRuleMetadata" = type { %"class.flatbuffers::Table" }
%"struct.url_pattern_index::flat::NGramToRules" = type { %"class.flatbuffers::Table" }
%"struct.url_pattern_index::flat::UrlRule" = type { %"class.flatbuffers::Table" }
%"struct.extensions::declarative_net_request::flat::UrlTransform" = type { %"class.flatbuffers::Table" }
%"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo" = type { %"class.flatbuffers::Table" }
%"struct.extensions::declarative_net_request::flat::QueryKeyValue" = type { %"class.flatbuffers::Table" }

$_ZNK10extensions23declarative_net_request4flat23ExtensionIndexedRuleset6VerifyERN11flatbuffers8VerifierE = comdat any

$_ZNK17url_pattern_index4flat15UrlPatternIndex6VerifyERN11flatbuffers8VerifierE = comdat any

$_ZNK17url_pattern_index4flat12NGramToRules6VerifyERN11flatbuffers8VerifierE = comdat any

$_ZNK17url_pattern_index4flat7UrlRule6VerifyERN11flatbuffers8VerifierE = comdat any

$_ZNK10extensions23declarative_net_request4flat9RegexRule6VerifyERN11flatbuffers8VerifierE = comdat any

$_ZNK10extensions23declarative_net_request4flat15UrlRuleMetadata6VerifyERN11flatbuffers8VerifierE = comdat any

$_ZNK10extensions23declarative_net_request4flat12UrlTransform6VerifyERN11flatbuffers8VerifierE = comdat any

$_ZNK10extensions23declarative_net_request4flat13QueryKeyValue6VerifyERN11flatbuffers8VerifierE = comdat any

$_ZNK10extensions23declarative_net_request4flat16ModifyHeaderInfo6VerifyERN11flatbuffers8VerifierE = comdat any

$_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

@.str = private unnamed_addr constant [19 x i8] c"FlatBuffers 1.12.0\00", align 1
@_ZN11flatbuffers25flatbuffer_version_stringE = weak hidden local_unnamed_addr global i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), align 8
@_ZTVN10extensions23declarative_net_request13RulesetSourceE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.extensions::declarative_net_request::RulesetSource"*)* @_ZN10extensions23declarative_net_request13RulesetSourceD2Ev to i8*), i8* bitcast (void (%"class.extensions::declarative_net_request::RulesetSource"*)* @_ZN10extensions23declarative_net_request13RulesetSourceD0Ev to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [5 x i8] c"EXTR\00", align 1

@_ZN10extensions23declarative_net_request13RulesetSourceC1EN4util6IdTypeINS0_12RulesetIDTagEiLin2ELin1EEEmNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEb = hidden unnamed_addr alias void (%"class.extensions::declarative_net_request::RulesetSource"*, i32, i64, %"class.std::__1::basic_string"*, i1), void (%"class.extensions::declarative_net_request::RulesetSource"*, i32, i64, %"class.std::__1::basic_string"*, i1)* @_ZN10extensions23declarative_net_request13RulesetSourceC2EN4util6IdTypeINS0_12RulesetIDTagEiLin2ELin1EEEmNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEb
@_ZN10extensions23declarative_net_request13RulesetSourceD1Ev = hidden unnamed_addr alias void (%"class.extensions::declarative_net_request::RulesetSource"*), void (%"class.extensions::declarative_net_request::RulesetSource"*)* @_ZN10extensions23declarative_net_request13RulesetSourceD2Ev
@_ZN10extensions23declarative_net_request13RulesetSourceC1EOS1_ = hidden unnamed_addr alias void (%"class.extensions::declarative_net_request::RulesetSource"*, %"class.extensions::declarative_net_request::RulesetSource"*), void (%"class.extensions::declarative_net_request::RulesetSource"*, %"class.extensions::declarative_net_request::RulesetSource"*)* @_ZN10extensions23declarative_net_request13RulesetSourceC2EOS1_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23declarative_net_request13RulesetSourceC2EN4util6IdTypeINS0_12RulesetIDTagEiLin2ELin1EEEmNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEb(%"class.extensions::declarative_net_request::RulesetSource"* nocapture, i32, i64, %"class.std::__1::basic_string"* nocapture, i1 zeroext) unnamed_addr #0 align 2 {
  %6 = zext i1 %4 to i8
  %7 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN10extensions23declarative_net_request13RulesetSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 1, i32 0, i32 0
  store i32 %1, i32* %8, align 8
  %9 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 3
  store i64 %2, i64* %9, align 8
  %10 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 4
  %11 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %12 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false) #9
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #9
  %13 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 5
  store i8 %6, i8* %13, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23declarative_net_request13RulesetSourceD2Ev(%"class.extensions::declarative_net_request::RulesetSource"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN10extensions23declarative_net_request13RulesetSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 4
  %4 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23declarative_net_request13RulesetSourceD0Ev(%"class.extensions::declarative_net_request::RulesetSource"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN10extensions23declarative_net_request13RulesetSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 4
  %4 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %8
  %12 = bitcast %"class.extensions::declarative_net_request::RulesetSource"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23declarative_net_request13RulesetSourceC2EOS1_(%"class.extensions::declarative_net_request::RulesetSource"* nocapture, %"class.extensions::declarative_net_request::RulesetSource"* nocapture dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN10extensions23declarative_net_request13RulesetSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %1, i64 0, i32 1
  %6 = bitcast %"class.util::IdType"* %4 to i8*
  %7 = bitcast %"class.util::IdType"* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false)
  %8 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 4
  %9 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %1, i64 0, i32 4
  %10 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %11 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false) #9
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #9
  %12 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 5
  %13 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %1, i64 0, i32 5
  %14 = load i8, i8* %13, align 8, !range !2
  store i8 %14, i8* %12, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(56) %"class.extensions::declarative_net_request::RulesetSource"* @_ZN10extensions23declarative_net_request13RulesetSourceaSEOS1_(%"class.extensions::declarative_net_request::RulesetSource"* returned, %"class.extensions::declarative_net_request::RulesetSource"* nocapture dereferenceable(56)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %1, i64 0, i32 1
  %5 = bitcast %"class.util::IdType"* %3 to i8*
  %6 = bitcast %"class.util::IdType"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 16, i1 false)
  %7 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 4
  %8 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %1, i64 0, i32 4
  %9 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  tail call void @_ZdlPv(i8* %15) #10
  br label %16

16:                                               ; preds = %2, %13
  %17 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %18 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 24, i1 false) #9
  %19 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  store i8 0, i8* %20, align 1
  store i8 0, i8* %18, align 1
  %21 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %1, i64 0, i32 5
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 5
  store i8 %22, i8* %23, align 8
  ret %"class.extensions::declarative_net_request::RulesetSource"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10extensions23declarative_net_request13RulesetSource10IndexRulesENSt3__16vectorINS_3api23declarative_net_request4RuleENS2_9allocatorIS6_EEEE(%"class.extensions::declarative_net_request::ParseInfo"* noalias sret, %"class.extensions::declarative_net_request::RulesetSource"*, %"class.std::__1::vector.6"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.extensions::declarative_net_request::FlatRulesetIndexer", align 8
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"class.std::__1::set.128", align 8
  %7 = alloca %class.GURL, align 8
  %8 = alloca i32, align 4
  %9 = alloca %"struct.extensions::declarative_net_request::IndexedRule", align 8
  %10 = alloca %"struct.extensions::api::declarative_net_request::Rule", align 8
  %11 = alloca %"class.flatbuffers::DetachedBuffer", align 8
  %12 = alloca %"class.std::__1::vector", align 8
  %13 = alloca %"class.flatbuffers::DetachedBuffer", align 8
  %14 = bitcast %"class.extensions::declarative_net_request::FlatRulesetIndexer"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %14) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 184, i1 false)
  call void @_ZN10extensions23declarative_net_request18FlatRulesetIndexerC1Ev(%"class.extensions::declarative_net_request::FlatRulesetIndexer"* nonnull %4) #9
  %15 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #9
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false) #9
  %19 = bitcast %"class.std::__1::set.128"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #9
  %20 = getelementptr inbounds %"class.std::__1::set.128", %"class.std::__1::set.128"* %6, i64 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.std::__1::set.128", %"class.std::__1::set.128"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.std::__1::set.128", %"class.std::__1::set.128"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %23 = getelementptr inbounds %"class.std::__1::set.128", %"class.std::__1::set.128"* %6, i64 0, i32 0, i32 1, i32 0, i32 0
  %24 = bitcast %"class.std::__1::__tree_node_base"** %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false) #9
  store %"class.std::__1::__tree_end_node"* %23, %"class.std::__1::__tree_end_node"** %20, align 8
  %25 = bitcast %class.GURL* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %25) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 120, i1 false)
  %26 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %1, i64 0, i32 4
  call void @_ZN10extensions9Extension25GetBaseURLFromExtensionIdERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%class.GURL* nonnull sret %7, %"class.std::__1::basic_string"* dereferenceable(24) %26) #9
  %27 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %2, i64 0, i32 0, i32 0
  %28 = load %"struct.extensions::api::declarative_net_request::Rule"*, %"struct.extensions::api::declarative_net_request::Rule"** %27, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %2, i64 0, i32 0, i32 1
  %30 = load %"struct.extensions::api::declarative_net_request::Rule"*, %"struct.extensions::api::declarative_net_request::Rule"** %29, align 8
  %31 = icmp eq %"struct.extensions::api::declarative_net_request::Rule"* %28, %30
  br i1 %31, label %32, label %37

32:                                               ; preds = %3
  %33 = bitcast %"class.std::__1::__tree_end_node"* %23 to %"class.std::__1::__tree_node"**
  %34 = bitcast %"class.std::__1::vector"* %5 to i64*
  %35 = bitcast i32** %17 to i64*
  %36 = bitcast i32** %18 to i64*
  br label %179

37:                                               ; preds = %3
  %38 = bitcast i32* %8 to i8*
  %39 = bitcast %"class.std::__1::__tree_end_node"* %23 to %"class.std::__1::__tree_node"**
  %40 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %23, i64 0, i32 0
  %41 = bitcast %"class.std::__1::set.128"* %6 to i64*
  %42 = bitcast %"struct.extensions::declarative_net_request::IndexedRule"* %9 to i8*
  %43 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %1, i64 0, i32 1, i32 0, i32 0
  %44 = getelementptr inbounds %"struct.extensions::declarative_net_request::IndexedRule", %"struct.extensions::declarative_net_request::IndexedRule"* %9, i64 0, i32 7
  %45 = bitcast i32** %17 to i64*
  %46 = bitcast %"class.std::__1::vector"* %5 to i64*
  %47 = bitcast i32** %18 to i64*
  br label %48

48:                                               ; preds = %37, %171
  %49 = phi i64 [ 0, %37 ], [ %173, %171 ]
  %50 = phi i64 [ 0, %37 ], [ %172, %171 ]
  %51 = phi %"struct.extensions::api::declarative_net_request::Rule"* [ %28, %37 ], [ %174, %171 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %38) #9
  store i32 -1431655766, i32* %8, align 4
  %52 = getelementptr inbounds %"struct.extensions::api::declarative_net_request::Rule", %"struct.extensions::api::declarative_net_request::Rule"* %51, i64 0, i32 0
  %53 = load i32, i32* %52, align 8
  store i32 %53, i32* %8, align 4
  %54 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %39, align 8
  %55 = icmp eq %"class.std::__1::__tree_node"* %54, null
  br i1 %55, label %82, label %56

56:                                               ; preds = %48, %78
  %57 = phi %"class.std::__1::__tree_node"* [ %81, %78 ], [ %54, %48 ]
  %58 = phi %"class.std::__1::__tree_node_base"** [ %80, %78 ], [ %21, %48 ]
  %59 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %57, i64 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = icmp slt i32 %53, %60
  br i1 %61, label %62, label %68

62:                                               ; preds = %56
  %63 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %57, i64 0, i32 0, i32 0, i32 0
  %64 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %63, align 8
  %65 = icmp eq %"class.std::__1::__tree_node_base"* %64, null
  br i1 %65, label %66, label %78

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %57, i64 0, i32 0, i32 0
  br label %82

68:                                               ; preds = %56
  %69 = icmp slt i32 %60, %53
  br i1 %69, label %70, label %76

70:                                               ; preds = %68
  %71 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %57, i64 0, i32 0, i32 1
  %72 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %71, align 8
  %73 = icmp eq %"class.std::__1::__tree_node_base"* %72, null
  br i1 %73, label %74, label %78

74:                                               ; preds = %70
  %75 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %57, i64 0, i32 0, i32 0
  br label %82

76:                                               ; preds = %68
  %77 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %57, i64 0, i32 0, i32 0
  br label %82

78:                                               ; preds = %70, %62
  %79 = phi %"class.std::__1::__tree_node_base"* [ %64, %62 ], [ %72, %70 ]
  %80 = phi %"class.std::__1::__tree_node_base"** [ %63, %62 ], [ %71, %70 ]
  %81 = bitcast %"class.std::__1::__tree_node_base"* %79 to %"class.std::__1::__tree_node"*
  br label %56

82:                                               ; preds = %48, %76, %74, %66
  %83 = phi %"class.std::__1::__tree_end_node"* [ %67, %66 ], [ %75, %74 ], [ %77, %76 ], [ %23, %48 ]
  %84 = phi %"class.std::__1::__tree_node_base"** [ %63, %66 ], [ %71, %74 ], [ %58, %76 ], [ %40, %48 ]
  %85 = bitcast %"class.std::__1::__tree_node_base"** %84 to %"class.std::__1::__tree_node"**
  %86 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %85, align 8
  %87 = icmp eq %"class.std::__1::__tree_node"* %86, null
  br i1 %87, label %88, label %103

88:                                               ; preds = %82
  %89 = call i8* @_Znwm(i64 32) #10, !noalias !3
  %90 = getelementptr inbounds i8, i8* %89, i64 28
  %91 = bitcast i8* %90 to i32*
  store i32 %53, i32* %91, align 4, !noalias !3
  %92 = bitcast i8* %89 to %"class.std::__1::__tree_node_base"*
  %93 = getelementptr inbounds i8, i8* %89, i64 16
  %94 = bitcast i8* %93 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %89, i8 0, i64 16, i1 false) #9
  store %"class.std::__1::__tree_end_node"* %83, %"class.std::__1::__tree_end_node"** %94, align 8
  %95 = bitcast %"class.std::__1::__tree_node_base"** %84 to i8**
  store i8* %89, i8** %95, align 8
  %96 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %20, align 8
  %97 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %96, i64 0, i32 0
  %98 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %97, align 8
  %99 = icmp eq %"class.std::__1::__tree_node_base"* %98, null
  br i1 %99, label %104, label %100

100:                                              ; preds = %88
  %101 = ptrtoint %"class.std::__1::__tree_node_base"* %98 to i64
  store i64 %101, i64* %41, align 8
  %102 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %84, align 8
  br label %104

103:                                              ; preds = %82
  call void @_ZN10extensions23declarative_net_request9ParseInfoC1ENS0_11ParseResultEPKi(%"class.extensions::declarative_net_request::ParseInfo"* %0, i32 12, i32* nonnull %8) #9
  br label %176

104:                                              ; preds = %100, %88
  %105 = phi %"class.std::__1::__tree_node_base"* [ %92, %88 ], [ %102, %100 ]
  %106 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %21, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %106, %"class.std::__1::__tree_node_base"* %105) #9
  %107 = load i64, i64* %22, align 8
  %108 = add i64 %107, 1
  store i64 %108, i64* %22, align 8
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %42) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 -86, i64 272, i1 false)
  call void @_ZN10extensions23declarative_net_request11IndexedRuleC1Ev(%"struct.extensions::declarative_net_request::IndexedRule"* nonnull %9) #9
  call void @_ZN10extensions3api23declarative_net_request4RuleC1EOS2_(%"struct.extensions::api::declarative_net_request::Rule"* nonnull %10, %"struct.extensions::api::declarative_net_request::Rule"* dereferenceable(144) %51) #9
  %109 = load i32, i32* %43, align 8
  %110 = call i32 @_ZN10extensions23declarative_net_request11IndexedRule17CreateIndexedRuleENS_3api23declarative_net_request4RuleERK4GURLN4util6IdTypeINS0_12RulesetIDTagEiLin2ELin1EEEPS1_(%"struct.extensions::api::declarative_net_request::Rule"* nonnull %10, %class.GURL* nonnull dereferenceable(120) %7, i32 %109, %"struct.extensions::declarative_net_request::IndexedRule"* nonnull %9) #9
  call void @_ZN10extensions3api23declarative_net_request4RuleD1Ev(%"struct.extensions::api::declarative_net_request::Rule"* nonnull %10) #9
  switch i32 %110, label %170 [
    i32 29, label %111
    i32 1, label %164
  ]

111:                                              ; preds = %104
  %112 = load i32*, i32** %17, align 8
  %113 = load i32*, i32** %18, align 8
  %114 = icmp eq i32* %112, %113
  %115 = ptrtoint i32* %113 to i64
  br i1 %114, label %120, label %116

116:                                              ; preds = %111
  %117 = load i32, i32* %8, align 4
  store i32 %117, i32* %112, align 4
  %118 = getelementptr inbounds i32, i32* %112, i64 1
  %119 = ptrtoint i32* %118 to i64
  store i64 %119, i64* %45, align 8
  br label %171

120:                                              ; preds = %111
  %121 = ptrtoint i32* %112 to i64
  %122 = load i64, i64* %46, align 8
  %123 = sub i64 %121, %122
  %124 = ashr exact i64 %123, 2
  %125 = add nsw i64 %124, 1
  %126 = icmp ugt i64 %125, 4611686018427387903
  br i1 %126, label %127, label %129

127:                                              ; preds = %120
  %128 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %128) #11
  unreachable

129:                                              ; preds = %120
  %130 = sub i64 %115, %122
  %131 = ashr exact i64 %130, 2
  %132 = icmp ult i64 %131, 2305843009213693951
  br i1 %132, label %133, label %141

133:                                              ; preds = %129
  %134 = ashr exact i64 %130, 1
  %135 = icmp ult i64 %134, %125
  %136 = select i1 %135, i64 %125, i64 %134
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %146, label %138

138:                                              ; preds = %133
  %139 = icmp ugt i64 %136, 4611686018427387903
  br i1 %139, label %140, label %141

140:                                              ; preds = %138
  call void @abort() #11
  unreachable

141:                                              ; preds = %138, %129
  %142 = phi i64 [ %136, %138 ], [ 4611686018427387903, %129 ]
  %143 = shl i64 %142, 2
  %144 = call i8* @_Znwm(i64 %143) #10
  %145 = bitcast i8* %144 to i32*
  br label %146

146:                                              ; preds = %141, %133
  %147 = phi i64 [ %142, %141 ], [ 0, %133 ]
  %148 = phi i8* [ %144, %141 ], [ null, %133 ]
  %149 = phi i32* [ %145, %141 ], [ null, %133 ]
  %150 = getelementptr inbounds i32, i32* %149, i64 %124
  %151 = getelementptr inbounds i32, i32* %149, i64 %147
  %152 = ptrtoint i32* %151 to i64
  %153 = load i32, i32* %8, align 4
  store i32 %153, i32* %150, align 4
  %154 = getelementptr inbounds i32, i32* %150, i64 1
  %155 = ptrtoint i32* %154 to i64
  %156 = ptrtoint i32* %149 to i64
  %157 = icmp sgt i64 %123, 0
  br i1 %157, label %158, label %160

158:                                              ; preds = %146
  %159 = inttoptr i64 %122 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %148, i8* align 4 %159, i64 %123, i1 false) #9
  br label %160

160:                                              ; preds = %158, %146
  store i64 %156, i64* %46, align 8
  store i64 %155, i64* %45, align 8
  store i64 %152, i64* %47, align 8
  %161 = icmp eq i64 %122, 0
  br i1 %161, label %171, label %162

162:                                              ; preds = %160
  %163 = inttoptr i64 %122 to i8*
  call void @_ZdlPv(i8* %163) #10
  br label %171

164:                                              ; preds = %104
  call void @_ZN10extensions23declarative_net_request18FlatRulesetIndexer10AddUrlRuleERKNS0_11IndexedRuleE(%"class.extensions::declarative_net_request::FlatRulesetIndexer"* nonnull %4, %"struct.extensions::declarative_net_request::IndexedRule"* nonnull dereferenceable(272) %9) #9
  %165 = add i64 %49, 1
  %166 = load i32, i32* %44, align 4
  %167 = icmp eq i32 %166, 2
  %168 = zext i1 %167 to i64
  %169 = add i64 %50, %168
  br label %171

170:                                              ; preds = %104
  call void @_ZN10extensions23declarative_net_request9ParseInfoC1ENS0_11ParseResultEPKi(%"class.extensions::declarative_net_request::ParseInfo"* %0, i32 %110, i32* nonnull %8) #9
  call void @_ZN10extensions23declarative_net_request11IndexedRuleD1Ev(%"struct.extensions::declarative_net_request::IndexedRule"* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %42) #9
  br label %176

171:                                              ; preds = %164, %116, %160, %162
  %172 = phi i64 [ %50, %162 ], [ %50, %160 ], [ %50, %116 ], [ %169, %164 ]
  %173 = phi i64 [ %49, %162 ], [ %49, %160 ], [ %49, %116 ], [ %165, %164 ]
  call void @_ZN10extensions23declarative_net_request11IndexedRuleD1Ev(%"struct.extensions::declarative_net_request::IndexedRule"* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %42) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %38) #9
  %174 = getelementptr inbounds %"struct.extensions::api::declarative_net_request::Rule", %"struct.extensions::api::declarative_net_request::Rule"* %51, i64 1
  %175 = icmp eq %"struct.extensions::api::declarative_net_request::Rule"* %174, %30
  br i1 %175, label %179, label %48

176:                                              ; preds = %103, %170
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %38) #9
  call void @_ZN4GURLD1Ev(%class.GURL* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %25) #9
  %177 = getelementptr inbounds %"class.std::__1::set.128", %"class.std::__1::set.128"* %6, i64 0, i32 0
  %178 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %39, align 8
  call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree.129"* nonnull %177, %"class.std::__1::__tree_node"* %178) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #9
  br label %280

179:                                              ; preds = %171, %32
  %180 = phi i64* [ %36, %32 ], [ %47, %171 ]
  %181 = phi i64* [ %35, %32 ], [ %45, %171 ]
  %182 = phi i64* [ %34, %32 ], [ %46, %171 ]
  %183 = phi %"class.std::__1::__tree_node"** [ %33, %32 ], [ %39, %171 ]
  %184 = phi i64 [ 0, %32 ], [ %172, %171 ]
  %185 = phi i64 [ 0, %32 ], [ %173, %171 ]
  call void @_ZN4GURLD1Ev(%class.GURL* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %25) #9
  %186 = getelementptr inbounds %"class.std::__1::set.128", %"class.std::__1::set.128"* %6, i64 0, i32 0
  %187 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %183, align 8
  call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree.129"* nonnull %186, %"class.std::__1::__tree_node"* %187) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #9
  %188 = bitcast %"class.flatbuffers::DetachedBuffer"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %188) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %188, i8 -86, i64 48, i1 false)
  call void @_ZN10extensions23declarative_net_request18FlatRulesetIndexer22FinishAndReleaseBufferEv(%"class.flatbuffers::DetachedBuffer"* nonnull sret %11, %"class.extensions::declarative_net_request::FlatRulesetIndexer"* nonnull %4) #9
  %189 = getelementptr inbounds %"class.flatbuffers::DetachedBuffer", %"class.flatbuffers::DetachedBuffer"* %11, i64 0, i32 4
  %190 = load i8*, i8** %189, align 8
  %191 = getelementptr inbounds %"class.flatbuffers::DetachedBuffer", %"class.flatbuffers::DetachedBuffer"* %11, i64 0, i32 5
  %192 = load i64, i64* %191, align 8
  %193 = call i32 @_ZN10extensions23declarative_net_request11GetChecksumEN4base4spanIKhLm18446744073709551615EEE(i64 %192, i8* %190) #9
  %194 = load i64, i64* %182, align 8
  %195 = bitcast %"class.std::__1::vector"* %12 to i64*
  store i64 %194, i64* %195, align 8
  %196 = load i64, i64* %181, align 8
  %197 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 1
  %198 = bitcast i32** %197 to i64*
  store i64 %196, i64* %198, align 8
  %199 = load i64, i64* %180, align 8
  %200 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 2, i32 0, i32 0
  %201 = bitcast i32** %200 to i64*
  store i64 %199, i64* %201, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false) #9
  %202 = bitcast %"class.flatbuffers::DetachedBuffer"* %11 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = bitcast %"class.flatbuffers::DetachedBuffer"* %13 to i64*
  store i64 %203, i64* %204, align 8
  %205 = getelementptr inbounds %"class.flatbuffers::DetachedBuffer", %"class.flatbuffers::DetachedBuffer"* %13, i64 0, i32 1
  %206 = getelementptr inbounds %"class.flatbuffers::DetachedBuffer", %"class.flatbuffers::DetachedBuffer"* %11, i64 0, i32 1
  %207 = load i8, i8* %206, align 8, !range !2
  store i8 %207, i8* %205, align 8
  %208 = getelementptr inbounds %"class.flatbuffers::DetachedBuffer", %"class.flatbuffers::DetachedBuffer"* %13, i64 0, i32 2
  %209 = getelementptr inbounds %"class.flatbuffers::DetachedBuffer", %"class.flatbuffers::DetachedBuffer"* %11, i64 0, i32 2
  %210 = getelementptr inbounds %"class.flatbuffers::DetachedBuffer", %"class.flatbuffers::DetachedBuffer"* %13, i64 0, i32 3
  %211 = getelementptr inbounds %"class.flatbuffers::DetachedBuffer", %"class.flatbuffers::DetachedBuffer"* %11, i64 0, i32 3
  %212 = bitcast i8** %209 to <2 x i64>*
  %213 = load <2 x i64>, <2 x i64>* %212, align 8
  %214 = bitcast i8** %208 to <2 x i64>*
  store <2 x i64> %213, <2 x i64>* %214, align 8
  %215 = getelementptr inbounds %"class.flatbuffers::DetachedBuffer", %"class.flatbuffers::DetachedBuffer"* %13, i64 0, i32 4
  %216 = bitcast i8** %189 to <2 x i64>*
  %217 = load <2 x i64>, <2 x i64>* %216, align 8
  %218 = bitcast i8** %215 to <2 x i64>*
  store <2 x i64> %217, <2 x i64>* %218, align 8
  %219 = getelementptr inbounds %"class.flatbuffers::DetachedBuffer", %"class.flatbuffers::DetachedBuffer"* %11, i64 0, i32 0
  store %"class.flatbuffers::Allocator"* null, %"class.flatbuffers::Allocator"** %219, align 8
  store i8 0, i8* %206, align 8
  %220 = bitcast i8** %209 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %220, i8 0, i64 32, i1 false) #9
  call void @_ZN10extensions23declarative_net_request9ParseInfoC1EmmNSt3__16vectorIiNS2_9allocatorIiEEEEN11flatbuffers14DetachedBufferEi(%"class.extensions::declarative_net_request::ParseInfo"* %0, i64 %185, i64 %184, %"class.std::__1::vector"* nonnull %12, %"class.flatbuffers::DetachedBuffer"* nonnull %13, i32 %193) #9
  %221 = load i8*, i8** %208, align 8
  %222 = icmp eq i8* %221, null
  br i1 %222, label %234, label %223

223:                                              ; preds = %179
  %224 = getelementptr inbounds %"class.flatbuffers::DetachedBuffer", %"class.flatbuffers::DetachedBuffer"* %13, i64 0, i32 0
  %225 = load %"class.flatbuffers::Allocator"*, %"class.flatbuffers::Allocator"** %224, align 8
  %226 = icmp eq %"class.flatbuffers::Allocator"* %225, null
  br i1 %226, label %233, label %227

227:                                              ; preds = %223
  %228 = load i64, i64* %210, align 8
  %229 = bitcast %"class.flatbuffers::Allocator"* %225 to void (%"class.flatbuffers::Allocator"*, i8*, i64)***
  %230 = load void (%"class.flatbuffers::Allocator"*, i8*, i64)**, void (%"class.flatbuffers::Allocator"*, i8*, i64)*** %229, align 8
  %231 = getelementptr inbounds void (%"class.flatbuffers::Allocator"*, i8*, i64)*, void (%"class.flatbuffers::Allocator"*, i8*, i64)** %230, i64 3
  %232 = load void (%"class.flatbuffers::Allocator"*, i8*, i64)*, void (%"class.flatbuffers::Allocator"*, i8*, i64)** %231, align 8
  call void %232(%"class.flatbuffers::Allocator"* nonnull %225, i8* nonnull %221, i64 %228) #9
  br label %234

233:                                              ; preds = %223
  call void @_ZdaPv(i8* nonnull %221) #10
  br label %234

234:                                              ; preds = %233, %227, %179
  %235 = load i8, i8* %205, align 8, !range !2
  %236 = icmp eq i8 %235, 0
  br i1 %236, label %246, label %237

237:                                              ; preds = %234
  %238 = getelementptr inbounds %"class.flatbuffers::DetachedBuffer", %"class.flatbuffers::DetachedBuffer"* %13, i64 0, i32 0
  %239 = load %"class.flatbuffers::Allocator"*, %"class.flatbuffers::Allocator"** %238, align 8
  %240 = icmp eq %"class.flatbuffers::Allocator"* %239, null
  br i1 %240, label %246, label %241

241:                                              ; preds = %237
  %242 = bitcast %"class.flatbuffers::Allocator"* %239 to void (%"class.flatbuffers::Allocator"*)***
  %243 = load void (%"class.flatbuffers::Allocator"*)**, void (%"class.flatbuffers::Allocator"*)*** %242, align 8
  %244 = getelementptr inbounds void (%"class.flatbuffers::Allocator"*)*, void (%"class.flatbuffers::Allocator"*)** %243, i64 1
  %245 = load void (%"class.flatbuffers::Allocator"*)*, void (%"class.flatbuffers::Allocator"*)** %244, align 8
  call void %245(%"class.flatbuffers::Allocator"* nonnull %239) #9
  br label %246

246:                                              ; preds = %234, %237, %241
  %247 = getelementptr inbounds %"class.flatbuffers::DetachedBuffer", %"class.flatbuffers::DetachedBuffer"* %13, i64 0, i32 0
  store %"class.flatbuffers::Allocator"* null, %"class.flatbuffers::Allocator"** %247, align 8
  store i8 0, i8* %205, align 8
  %248 = bitcast i8** %208 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %248, i8 0, i64 32, i1 false) #9
  %249 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 0
  %250 = load i32*, i32** %249, align 8
  %251 = icmp eq i32* %250, null
  br i1 %251, label %255, label %252

252:                                              ; preds = %246
  %253 = ptrtoint i32* %250 to i64
  store i64 %253, i64* %198, align 8
  %254 = bitcast i32* %250 to i8*
  call void @_ZdlPv(i8* %254) #10
  br label %255

255:                                              ; preds = %246, %252
  %256 = load i8*, i8** %209, align 8
  %257 = icmp eq i8* %256, null
  br i1 %257, label %268, label %258

258:                                              ; preds = %255
  %259 = load %"class.flatbuffers::Allocator"*, %"class.flatbuffers::Allocator"** %219, align 8
  %260 = icmp eq %"class.flatbuffers::Allocator"* %259, null
  br i1 %260, label %267, label %261

261:                                              ; preds = %258
  %262 = load i64, i64* %211, align 8
  %263 = bitcast %"class.flatbuffers::Allocator"* %259 to void (%"class.flatbuffers::Allocator"*, i8*, i64)***
  %264 = load void (%"class.flatbuffers::Allocator"*, i8*, i64)**, void (%"class.flatbuffers::Allocator"*, i8*, i64)*** %263, align 8
  %265 = getelementptr inbounds void (%"class.flatbuffers::Allocator"*, i8*, i64)*, void (%"class.flatbuffers::Allocator"*, i8*, i64)** %264, i64 3
  %266 = load void (%"class.flatbuffers::Allocator"*, i8*, i64)*, void (%"class.flatbuffers::Allocator"*, i8*, i64)** %265, align 8
  call void %266(%"class.flatbuffers::Allocator"* nonnull %259, i8* nonnull %256, i64 %262) #9
  br label %268

267:                                              ; preds = %258
  call void @_ZdaPv(i8* nonnull %256) #10
  br label %268

268:                                              ; preds = %267, %261, %255
  %269 = load i8, i8* %206, align 8, !range !2
  %270 = icmp eq i8 %269, 0
  br i1 %270, label %279, label %271

271:                                              ; preds = %268
  %272 = load %"class.flatbuffers::Allocator"*, %"class.flatbuffers::Allocator"** %219, align 8
  %273 = icmp eq %"class.flatbuffers::Allocator"* %272, null
  br i1 %273, label %279, label %274

274:                                              ; preds = %271
  %275 = bitcast %"class.flatbuffers::Allocator"* %272 to void (%"class.flatbuffers::Allocator"*)***
  %276 = load void (%"class.flatbuffers::Allocator"*)**, void (%"class.flatbuffers::Allocator"*)*** %275, align 8
  %277 = getelementptr inbounds void (%"class.flatbuffers::Allocator"*)*, void (%"class.flatbuffers::Allocator"*)** %276, i64 1
  %278 = load void (%"class.flatbuffers::Allocator"*)*, void (%"class.flatbuffers::Allocator"*)** %277, align 8
  call void %278(%"class.flatbuffers::Allocator"* nonnull %272) #9
  br label %279

279:                                              ; preds = %268, %271, %274
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %188) #9
  br label %280

280:                                              ; preds = %176, %279
  %281 = load i32*, i32** %16, align 8
  %282 = icmp eq i32* %281, null
  br i1 %282, label %287, label %283

283:                                              ; preds = %280
  %284 = ptrtoint i32* %281 to i64
  %285 = bitcast i32** %17 to i64*
  store i64 %284, i64* %285, align 8
  %286 = bitcast i32* %281 to i8*
  call void @_ZdlPv(i8* %286) #10
  br label %287

287:                                              ; preds = %280, %283
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #9
  call void @_ZN10extensions23declarative_net_request18FlatRulesetIndexerD1Ev(%"class.extensions::declarative_net_request::FlatRulesetIndexer"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %14) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN10extensions23declarative_net_request18FlatRulesetIndexerC1Ev(%"class.extensions::declarative_net_request::FlatRulesetIndexer"*) unnamed_addr #3

declare void @_ZN10extensions9Extension25GetBaseURLFromExtensionIdERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%class.GURL* sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN10extensions23declarative_net_request9ParseInfoC1ENS0_11ParseResultEPKi(%"class.extensions::declarative_net_request::ParseInfo"*, i32, i32*) unnamed_addr #3

declare void @_ZN10extensions23declarative_net_request11IndexedRuleC1Ev(%"struct.extensions::declarative_net_request::IndexedRule"*) unnamed_addr #3

declare i32 @_ZN10extensions23declarative_net_request11IndexedRule17CreateIndexedRuleENS_3api23declarative_net_request4RuleERK4GURLN4util6IdTypeINS0_12RulesetIDTagEiLin2ELin1EEEPS1_(%"struct.extensions::api::declarative_net_request::Rule"*, %class.GURL* dereferenceable(120), i32, %"struct.extensions::declarative_net_request::IndexedRule"*) local_unnamed_addr #3

declare void @_ZN10extensions3api23declarative_net_request4RuleC1EOS2_(%"struct.extensions::api::declarative_net_request::Rule"*, %"struct.extensions::api::declarative_net_request::Rule"* dereferenceable(144)) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN10extensions3api23declarative_net_request4RuleD1Ev(%"struct.extensions::api::declarative_net_request::Rule"*) unnamed_addr #4

declare void @_ZN10extensions23declarative_net_request18FlatRulesetIndexer10AddUrlRuleERKNS0_11IndexedRuleE(%"class.extensions::declarative_net_request::FlatRulesetIndexer"*, %"struct.extensions::declarative_net_request::IndexedRule"* dereferenceable(272)) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN10extensions23declarative_net_request11IndexedRuleD1Ev(%"struct.extensions::declarative_net_request::IndexedRule"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4GURLD1Ev(%class.GURL*) unnamed_addr #4

declare void @_ZN10extensions23declarative_net_request18FlatRulesetIndexer22FinishAndReleaseBufferEv(%"class.flatbuffers::DetachedBuffer"* sret, %"class.extensions::declarative_net_request::FlatRulesetIndexer"*) local_unnamed_addr #3

declare i32 @_ZN10extensions23declarative_net_request11GetChecksumEN4base4spanIKhLm18446744073709551615EEE(i64, i8*) local_unnamed_addr #3

declare void @_ZN10extensions23declarative_net_request9ParseInfoC1EmmNSt3__16vectorIiNS2_9allocatorIiEEEEN11flatbuffers14DetachedBufferEi(%"class.extensions::declarative_net_request::ParseInfo"*, i64, i64, %"class.std::__1::vector"*, %"class.flatbuffers::DetachedBuffer"*, i32) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN10extensions23declarative_net_request18FlatRulesetIndexerD1Ev(%"class.extensions::declarative_net_request::FlatRulesetIndexer"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK10extensions23declarative_net_request13RulesetSource21CreateVerifiedMatcherENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS2_10unique_ptrINS0_14RulesetMatcherENS2_14default_deleteISA_EEEE(%"class.extensions::declarative_net_request::RulesetSource"*, %"class.std::__1::basic_string"*, %"class.std::__1::unique_ptr.144"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.flatbuffers::Verifier", align 8
  %6 = bitcast %"class.flatbuffers::Verifier"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 48, i1 false)
  %7 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  br label %19

16:                                               ; preds = %3
  %17 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %18 = zext i8 %9 to i64
  br label %19

19:                                               ; preds = %11, %16
  %20 = phi i8* [ %13, %11 ], [ %17, %16 ]
  %21 = phi i64 [ %15, %11 ], [ %18, %16 ]
  %22 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %5, i64 0, i32 0
  store i8* %20, i8** %22, align 8
  %23 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %5, i64 0, i32 1
  store i64 %21, i64* %23, align 8
  %24 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %5, i64 0, i32 2
  %25 = bitcast i32* %24 to <4 x i32>*
  store <4 x i32> <i32 0, i32 64, i32 0, i32 1000000>, <4 x i32>* %25, align 8
  %26 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %5, i64 0, i32 6
  store i64 0, i64* %26, align 8
  %27 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %5, i64 0, i32 7
  store i8 1, i8* %27, align 8
  %28 = icmp ult i64 %21, 8
  br i1 %28, label %68, label %29

29:                                               ; preds = %19
  %30 = getelementptr inbounds i8, i8* %20, i64 4
  %31 = tail call i32 @strncmp(i8* %30, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 4) #12
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %68

33:                                               ; preds = %29
  %34 = bitcast i8* %20 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %68

37:                                               ; preds = %33
  %38 = zext i32 %35 to i64
  %39 = add i64 %21, -1
  %40 = icmp ult i64 %39, %38
  br i1 %40, label %68, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds i8, i8* %20, i64 %38
  %43 = bitcast i8* %42 to %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset"*
  %44 = call zeroext i1 @_ZNK10extensions23declarative_net_request4flat23ExtensionIndexedRuleset6VerifyERN11flatbuffers8VerifierE(%"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset"* %43, %"class.flatbuffers::Verifier"* nonnull dereferenceable(48) %5) #9
  br i1 %44, label %45, label %68

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 1, i32 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %"class.extensions::declarative_net_request::RulesetSource", %"class.extensions::declarative_net_request::RulesetSource"* %0, i64 0, i32 4
  %49 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %49)
  %50 = call i8* @_Znwm(i64 312) #10
  %51 = bitcast i8* %50 to %"class.extensions::declarative_net_request::RulesetMatcher"*
  %52 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %49, i8* align 8 %52, i64 24, i1 false) #9
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 24, i1 false) #9
  call void @_ZN10extensions23declarative_net_request14RulesetMatcherC1ENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN4util6IdTypeINS0_12RulesetIDTagEiLin2ELin1EEERKS8_(%"class.extensions::declarative_net_request::RulesetMatcher"* nonnull %51, %"class.std::__1::basic_string"* nonnull %4, i32 %47, %"class.std::__1::basic_string"* dereferenceable(24) %48) #9
  %53 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %53, i64 0, i32 1, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp slt i8 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %45
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  call void @_ZdlPv(i8* %59) #10
  br label %60

60:                                               ; preds = %45, %57
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %49)
  %61 = ptrtoint i8* %50 to i64
  %62 = getelementptr inbounds %"class.std::__1::unique_ptr.144", %"class.std::__1::unique_ptr.144"* %2, i64 0, i32 0, i32 0, i32 0
  %63 = load %"class.extensions::declarative_net_request::RulesetMatcher"*, %"class.extensions::declarative_net_request::RulesetMatcher"** %62, align 8
  %64 = bitcast %"class.std::__1::unique_ptr.144"* %2 to i64*
  store i64 %61, i64* %64, align 8
  %65 = icmp eq %"class.extensions::declarative_net_request::RulesetMatcher"* %63, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %60
  call void @_ZN10extensions23declarative_net_request14RulesetMatcherD1Ev(%"class.extensions::declarative_net_request::RulesetMatcher"* nonnull %63) #9
  %67 = bitcast %"class.extensions::declarative_net_request::RulesetMatcher"* %63 to i8*
  call void @_ZdlPv(i8* %67) #10
  br label %68

68:                                               ; preds = %37, %33, %19, %29, %60, %66, %41
  %69 = phi i32 [ 3, %41 ], [ 0, %66 ], [ 0, %60 ], [ 3, %29 ], [ 3, %19 ], [ 3, %33 ], [ 3, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #9
  ret i32 %69
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10extensions23declarative_net_request4flat23ExtensionIndexedRuleset6VerifyERN11flatbuffers8VerifierE(%"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset"*, %"class.flatbuffers::Verifier"* dereferenceable(48)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.flatbuffers::Verifier"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = ptrtoint %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset"* %0 to i64
  %6 = sub i64 %5, %4
  %7 = and i64 %6, 3
  %8 = icmp eq i64 %7, 0
  %9 = inttoptr i64 %4 to i8*
  br i1 %8, label %14, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %391

14:                                               ; preds = %10, %2
  %15 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %16, 4
  %18 = add i64 %16, -4
  %19 = icmp uge i64 %18, %6
  %20 = and i1 %17, %19
  br i1 %20, label %21, label %391

21:                                               ; preds = %14
  %22 = bitcast %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset"* %0 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = sub i64 %6, %24
  %26 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = add i32 %27, 1
  store i32 %28, i32* %26, align 8
  %29 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = add i32 %30, 1
  store i32 %31, i32* %29, align 8
  %32 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp ugt i32 %28, %33
  br i1 %34, label %391, label %35

35:                                               ; preds = %21
  %36 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 5
  %37 = load i32, i32* %36, align 4
  %38 = icmp ugt i32 %31, %37
  br i1 %38, label %391, label %39

39:                                               ; preds = %35
  %40 = and i64 %25, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %44 = load i8, i8* %43, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %391

46:                                               ; preds = %42, %39
  %47 = add i64 %16, -2
  %48 = icmp ult i64 %47, %25
  br i1 %48, label %391, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds i8, i8* %9, i64 %25
  %51 = bitcast i8* %50 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i64
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %58 = load i8, i8* %57, align 8, !range !2
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %391

60:                                               ; preds = %49, %56
  %61 = icmp ugt i64 %16, %53
  %62 = sub i64 %16, %53
  %63 = icmp uge i64 %62, %25
  %64 = and i1 %61, %63
  br i1 %64, label %65, label %391

65:                                               ; preds = %60
  %66 = load i32, i32* %22, align 4
  %67 = sext i32 %66 to i64
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset", %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset"* %0, i64 0, i32 0, i32 0, i64 %68
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = icmp ugt i16 %71, 4
  br i1 %72, label %73, label %170

73:                                               ; preds = %65
  %74 = getelementptr inbounds i8, i8* %69, i64 4
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = icmp eq i16 %76, 0
  br i1 %77, label %101, label %78

78:                                               ; preds = %73
  %79 = zext i16 %76 to i64
  %80 = add i64 %6, %79
  %81 = and i64 %80, 3
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %89, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %85 = load i8, i8* %84, align 8, !range !2
  %86 = icmp ne i8 %85, 0
  %87 = icmp ult i64 %18, %80
  %88 = or i1 %86, %87
  br i1 %88, label %391, label %91

89:                                               ; preds = %78
  %90 = icmp ult i64 %18, %80
  br i1 %90, label %391, label %91

91:                                               ; preds = %83, %89
  %92 = getelementptr inbounds i8, i8* %9, i64 %80
  %93 = bitcast i8* %92 to i32*
  %94 = load i32, i32* %93, align 4
  %95 = icmp sgt i32 %94, 0
  br i1 %95, label %96, label %391

96:                                               ; preds = %91
  %97 = zext i32 %94 to i64
  %98 = add i64 %80, %97
  %99 = add i64 %16, -1
  %100 = icmp ult i64 %99, %98
  br i1 %100, label %391, label %101

101:                                              ; preds = %96, %73
  %102 = getelementptr inbounds i8, i8* %69, i64 4
  %103 = bitcast i8* %102 to i16*
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i64
  %106 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset", %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset"* %0, i64 0, i32 0, i32 0, i64 %105
  %107 = icmp eq i16 %104, 0
  br i1 %107, label %170, label %108

108:                                              ; preds = %101
  %109 = bitcast i8* %106 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %106, i64 %111
  %113 = icmp eq i8* %112, null
  br i1 %113, label %139, label %114

114:                                              ; preds = %108
  %115 = ptrtoint i8* %112 to i64
  %116 = sub i64 %115, %4
  %117 = and i64 %116, 3
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %125, label %119

119:                                              ; preds = %114
  %120 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %121 = load i8, i8* %120, align 8, !range !2
  %122 = icmp ne i8 %121, 0
  %123 = icmp ult i64 %18, %116
  %124 = or i1 %122, %123
  br i1 %124, label %391, label %127

125:                                              ; preds = %114
  %126 = icmp ult i64 %18, %116
  br i1 %126, label %391, label %127

127:                                              ; preds = %119, %125
  %128 = bitcast i8* %112 to i32*
  %129 = load i32, i32* %128, align 4
  %130 = icmp ult i32 %129, 536870911
  br i1 %130, label %131, label %391

131:                                              ; preds = %127
  %132 = zext i32 %129 to i64
  %133 = shl nuw nsw i64 %132, 2
  %134 = add nuw nsw i64 %133, 4
  %135 = icmp ugt i64 %16, %134
  %136 = sub i64 %16, %134
  %137 = icmp uge i64 %136, %116
  %138 = and i1 %135, %137
  br i1 %138, label %139, label %391

139:                                              ; preds = %131, %108
  %140 = bitcast i8* %106 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds i8, i8* %106, i64 %142
  %144 = icmp eq i8* %143, null
  br i1 %144, label %170, label %145

145:                                              ; preds = %139
  %146 = bitcast i8* %143 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %170, label %149

149:                                              ; preds = %145
  %150 = getelementptr inbounds i8, i8* %143, i64 4
  %151 = bitcast i8* %150 to i32*
  br label %156

152:                                              ; preds = %156
  %153 = load i32, i32* %146, align 4
  %154 = zext i32 %153 to i64
  %155 = icmp ult i64 %165, %154
  br i1 %155, label %156, label %166

156:                                              ; preds = %152, %149
  %157 = phi i64 [ 0, %149 ], [ %165, %152 ]
  %158 = getelementptr inbounds i32, i32* %151, i64 %157
  %159 = bitcast i32* %158 to i8*
  %160 = load i32, i32* %158, align 4
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds i8, i8* %159, i64 %161
  %163 = bitcast i8* %162 to %"struct.url_pattern_index::flat::UrlPatternIndex"*
  %164 = tail call zeroext i1 @_ZNK17url_pattern_index4flat15UrlPatternIndex6VerifyERN11flatbuffers8VerifierE(%"struct.url_pattern_index::flat::UrlPatternIndex"* %163, %"class.flatbuffers::Verifier"* dereferenceable(48) %1) #9
  %165 = add nuw nsw i64 %157, 1
  br i1 %164, label %152, label %391

166:                                              ; preds = %152
  %167 = load i32, i32* %22, align 4
  %168 = sext i32 %167 to i64
  %169 = sub nsw i64 0, %168
  br label %170

170:                                              ; preds = %101, %65, %166, %139, %145
  %171 = phi i64 [ %169, %166 ], [ %68, %139 ], [ %68, %145 ], [ %68, %65 ], [ %68, %101 ]
  %172 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset", %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset"* %0, i64 0, i32 0, i32 0, i64 %171
  %173 = bitcast i8* %172 to i16*
  %174 = load i16, i16* %173, align 2
  %175 = icmp ugt i16 %174, 6
  br i1 %175, label %176, label %281

176:                                              ; preds = %170
  %177 = getelementptr inbounds i8, i8* %172, i64 6
  %178 = bitcast i8* %177 to i16*
  %179 = load i16, i16* %178, align 2
  %180 = icmp eq i16 %179, 0
  br i1 %180, label %209, label %181

181:                                              ; preds = %176
  %182 = load i64, i64* %3, align 8
  %183 = sub i64 %5, %182
  %184 = zext i16 %179 to i64
  %185 = add i64 %183, %184
  %186 = and i64 %185, 3
  %187 = icmp eq i64 %186, 0
  %188 = inttoptr i64 %182 to i8*
  br i1 %187, label %193, label %189

189:                                              ; preds = %181
  %190 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %191 = load i8, i8* %190, align 8, !range !2
  %192 = icmp eq i8 %191, 0
  br i1 %192, label %193, label %391

193:                                              ; preds = %189, %181
  %194 = load i64, i64* %15, align 8
  %195 = icmp ugt i64 %194, 4
  %196 = add i64 %194, -4
  %197 = icmp uge i64 %196, %185
  %198 = and i1 %195, %197
  br i1 %198, label %199, label %391

199:                                              ; preds = %193
  %200 = getelementptr inbounds i8, i8* %188, i64 %185
  %201 = bitcast i8* %200 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = icmp sgt i32 %202, 0
  br i1 %203, label %204, label %391

204:                                              ; preds = %199
  %205 = zext i32 %202 to i64
  %206 = add i64 %185, %205
  %207 = add i64 %194, -1
  %208 = icmp ult i64 %207, %206
  br i1 %208, label %391, label %209

209:                                              ; preds = %204, %176
  %210 = getelementptr inbounds i8, i8* %172, i64 6
  %211 = bitcast i8* %210 to i16*
  %212 = load i16, i16* %211, align 2
  %213 = zext i16 %212 to i64
  %214 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset", %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset"* %0, i64 0, i32 0, i32 0, i64 %213
  %215 = icmp eq i16 %212, 0
  br i1 %215, label %281, label %216

216:                                              ; preds = %209
  %217 = bitcast i8* %214 to i32*
  %218 = load i32, i32* %217, align 4
  %219 = zext i32 %218 to i64
  %220 = getelementptr inbounds i8, i8* %214, i64 %219
  %221 = icmp eq i8* %220, null
  br i1 %221, label %250, label %222

222:                                              ; preds = %216
  %223 = load i64, i64* %3, align 8
  %224 = ptrtoint i8* %220 to i64
  %225 = sub i64 %224, %223
  %226 = and i64 %225, 3
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %232, label %228

228:                                              ; preds = %222
  %229 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %230 = load i8, i8* %229, align 8, !range !2
  %231 = icmp eq i8 %230, 0
  br i1 %231, label %232, label %391

232:                                              ; preds = %228, %222
  %233 = load i64, i64* %15, align 8
  %234 = icmp ugt i64 %233, 4
  %235 = add i64 %233, -4
  %236 = icmp uge i64 %235, %225
  %237 = and i1 %234, %236
  br i1 %237, label %238, label %391

238:                                              ; preds = %232
  %239 = bitcast i8* %220 to i32*
  %240 = load i32, i32* %239, align 4
  %241 = icmp ult i32 %240, 536870911
  br i1 %241, label %242, label %391

242:                                              ; preds = %238
  %243 = zext i32 %240 to i64
  %244 = shl nuw nsw i64 %243, 2
  %245 = add nuw nsw i64 %244, 4
  %246 = icmp ugt i64 %233, %245
  %247 = sub i64 %233, %245
  %248 = icmp uge i64 %247, %225
  %249 = and i1 %246, %248
  br i1 %249, label %250, label %391

250:                                              ; preds = %242, %216
  %251 = bitcast i8* %214 to i32*
  %252 = load i32, i32* %251, align 4
  %253 = zext i32 %252 to i64
  %254 = getelementptr inbounds i8, i8* %214, i64 %253
  %255 = icmp eq i8* %254, null
  br i1 %255, label %281, label %256

256:                                              ; preds = %250
  %257 = bitcast i8* %254 to i32*
  %258 = load i32, i32* %257, align 4
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %281, label %260

260:                                              ; preds = %256
  %261 = getelementptr inbounds i8, i8* %254, i64 4
  %262 = bitcast i8* %261 to i32*
  br label %267

263:                                              ; preds = %267
  %264 = load i32, i32* %257, align 4
  %265 = zext i32 %264 to i64
  %266 = icmp ult i64 %276, %265
  br i1 %266, label %267, label %277

267:                                              ; preds = %263, %260
  %268 = phi i64 [ 0, %260 ], [ %276, %263 ]
  %269 = getelementptr inbounds i32, i32* %262, i64 %268
  %270 = bitcast i32* %269 to i8*
  %271 = load i32, i32* %269, align 4
  %272 = zext i32 %271 to i64
  %273 = getelementptr inbounds i8, i8* %270, i64 %272
  %274 = bitcast i8* %273 to %"struct.extensions::declarative_net_request::flat::RegexRule"*
  %275 = tail call zeroext i1 @_ZNK10extensions23declarative_net_request4flat9RegexRule6VerifyERN11flatbuffers8VerifierE(%"struct.extensions::declarative_net_request::flat::RegexRule"* %274, %"class.flatbuffers::Verifier"* dereferenceable(48) %1) #9
  %276 = add nuw nsw i64 %268, 1
  br i1 %275, label %263, label %391

277:                                              ; preds = %263
  %278 = load i32, i32* %22, align 4
  %279 = sext i32 %278 to i64
  %280 = sub nsw i64 0, %279
  br label %281

281:                                              ; preds = %209, %170, %277, %250, %256
  %282 = phi i64 [ %280, %277 ], [ %171, %250 ], [ %171, %256 ], [ %171, %170 ], [ %171, %209 ]
  %283 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset", %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset"* %0, i64 0, i32 0, i32 0, i64 %282
  %284 = bitcast i8* %283 to i16*
  %285 = load i16, i16* %284, align 2
  %286 = icmp ugt i16 %285, 8
  br i1 %286, label %287, label %388

287:                                              ; preds = %281
  %288 = getelementptr inbounds i8, i8* %283, i64 8
  %289 = bitcast i8* %288 to i16*
  %290 = load i16, i16* %289, align 2
  %291 = icmp eq i16 %290, 0
  br i1 %291, label %320, label %292

292:                                              ; preds = %287
  %293 = load i64, i64* %3, align 8
  %294 = sub i64 %5, %293
  %295 = zext i16 %290 to i64
  %296 = add i64 %294, %295
  %297 = and i64 %296, 3
  %298 = icmp eq i64 %297, 0
  %299 = inttoptr i64 %293 to i8*
  br i1 %298, label %304, label %300

300:                                              ; preds = %292
  %301 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %302 = load i8, i8* %301, align 8, !range !2
  %303 = icmp eq i8 %302, 0
  br i1 %303, label %304, label %391

304:                                              ; preds = %300, %292
  %305 = load i64, i64* %15, align 8
  %306 = icmp ugt i64 %305, 4
  %307 = add i64 %305, -4
  %308 = icmp uge i64 %307, %296
  %309 = and i1 %306, %308
  br i1 %309, label %310, label %391

310:                                              ; preds = %304
  %311 = getelementptr inbounds i8, i8* %299, i64 %296
  %312 = bitcast i8* %311 to i32*
  %313 = load i32, i32* %312, align 4
  %314 = icmp sgt i32 %313, 0
  br i1 %314, label %315, label %391

315:                                              ; preds = %310
  %316 = zext i32 %313 to i64
  %317 = add i64 %296, %316
  %318 = add i64 %305, -1
  %319 = icmp ult i64 %318, %317
  br i1 %319, label %391, label %320

320:                                              ; preds = %315, %287
  %321 = getelementptr inbounds i8, i8* %283, i64 8
  %322 = bitcast i8* %321 to i16*
  %323 = load i16, i16* %322, align 2
  %324 = zext i16 %323 to i64
  %325 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset", %"struct.extensions::declarative_net_request::flat::ExtensionIndexedRuleset"* %0, i64 0, i32 0, i32 0, i64 %324
  %326 = icmp eq i16 %323, 0
  br i1 %326, label %388, label %327

327:                                              ; preds = %320
  %328 = bitcast i8* %325 to i32*
  %329 = load i32, i32* %328, align 4
  %330 = zext i32 %329 to i64
  %331 = getelementptr inbounds i8, i8* %325, i64 %330
  %332 = icmp eq i8* %331, null
  br i1 %332, label %361, label %333

333:                                              ; preds = %327
  %334 = load i64, i64* %3, align 8
  %335 = ptrtoint i8* %331 to i64
  %336 = sub i64 %335, %334
  %337 = and i64 %336, 3
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %343, label %339

339:                                              ; preds = %333
  %340 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %341 = load i8, i8* %340, align 8, !range !2
  %342 = icmp eq i8 %341, 0
  br i1 %342, label %343, label %391

343:                                              ; preds = %339, %333
  %344 = load i64, i64* %15, align 8
  %345 = icmp ugt i64 %344, 4
  %346 = add i64 %344, -4
  %347 = icmp uge i64 %346, %336
  %348 = and i1 %345, %347
  br i1 %348, label %349, label %391

349:                                              ; preds = %343
  %350 = bitcast i8* %331 to i32*
  %351 = load i32, i32* %350, align 4
  %352 = icmp ult i32 %351, 536870911
  br i1 %352, label %353, label %391

353:                                              ; preds = %349
  %354 = zext i32 %351 to i64
  %355 = shl nuw nsw i64 %354, 2
  %356 = add nuw nsw i64 %355, 4
  %357 = icmp ugt i64 %344, %356
  %358 = sub i64 %344, %356
  %359 = icmp uge i64 %358, %336
  %360 = and i1 %357, %359
  br i1 %360, label %361, label %391

361:                                              ; preds = %353, %327
  %362 = bitcast i8* %325 to i32*
  %363 = load i32, i32* %362, align 4
  %364 = zext i32 %363 to i64
  %365 = getelementptr inbounds i8, i8* %325, i64 %364
  %366 = icmp eq i8* %365, null
  br i1 %366, label %388, label %367

367:                                              ; preds = %361
  %368 = bitcast i8* %365 to i32*
  %369 = load i32, i32* %368, align 4
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %388, label %371

371:                                              ; preds = %367
  %372 = getelementptr inbounds i8, i8* %365, i64 4
  %373 = bitcast i8* %372 to i32*
  br label %378

374:                                              ; preds = %378
  %375 = load i32, i32* %368, align 4
  %376 = zext i32 %375 to i64
  %377 = icmp ult i64 %387, %376
  br i1 %377, label %378, label %388

378:                                              ; preds = %374, %371
  %379 = phi i64 [ 0, %371 ], [ %387, %374 ]
  %380 = getelementptr inbounds i32, i32* %373, i64 %379
  %381 = bitcast i32* %380 to i8*
  %382 = load i32, i32* %380, align 4
  %383 = zext i32 %382 to i64
  %384 = getelementptr inbounds i8, i8* %381, i64 %383
  %385 = bitcast i8* %384 to %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata"*
  %386 = tail call zeroext i1 @_ZNK10extensions23declarative_net_request4flat15UrlRuleMetadata6VerifyERN11flatbuffers8VerifierE(%"struct.extensions::declarative_net_request::flat::UrlRuleMetadata"* %385, %"class.flatbuffers::Verifier"* dereferenceable(48) %1) #9
  %387 = add nuw nsw i64 %379, 1
  br i1 %386, label %374, label %391

388:                                              ; preds = %374, %320, %281, %361, %367
  %389 = load i32, i32* %26, align 8
  %390 = add i32 %389, -1
  store i32 %390, i32* %26, align 8
  br label %391

391:                                              ; preds = %156, %267, %378, %119, %83, %89, %125, %96, %204, %315, %339, %349, %343, %300, %310, %304, %228, %238, %232, %189, %199, %193, %127, %91, %42, %21, %10, %35, %46, %56, %14, %388, %353, %242, %131, %60
  %392 = phi i1 [ false, %353 ], [ false, %315 ], [ false, %242 ], [ false, %204 ], [ false, %131 ], [ false, %96 ], [ false, %60 ], [ true, %388 ], [ false, %14 ], [ false, %56 ], [ false, %46 ], [ false, %35 ], [ false, %10 ], [ false, %21 ], [ false, %42 ], [ false, %89 ], [ false, %91 ], [ false, %83 ], [ false, %125 ], [ false, %127 ], [ false, %119 ], [ false, %193 ], [ false, %199 ], [ false, %189 ], [ false, %232 ], [ false, %238 ], [ false, %228 ], [ false, %304 ], [ false, %310 ], [ false, %300 ], [ false, %343 ], [ false, %349 ], [ false, %339 ], [ false, %378 ], [ false, %267 ], [ false, %156 ]
  ret i1 %392
}

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK17url_pattern_index4flat15UrlPatternIndex6VerifyERN11flatbuffers8VerifierE(%"struct.url_pattern_index::flat::UrlPatternIndex"*, %"class.flatbuffers::Verifier"* dereferenceable(48)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.flatbuffers::Verifier"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = ptrtoint %"struct.url_pattern_index::flat::UrlPatternIndex"* %0 to i64
  %6 = sub i64 %5, %4
  %7 = and i64 %6, 3
  %8 = icmp eq i64 %7, 0
  %9 = inttoptr i64 %4 to i8*
  br i1 %8, label %14, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %350

14:                                               ; preds = %10, %2
  %15 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %16, 4
  %18 = add i64 %16, -4
  %19 = icmp uge i64 %18, %6
  %20 = and i1 %17, %19
  br i1 %20, label %21, label %350

21:                                               ; preds = %14
  %22 = bitcast %"struct.url_pattern_index::flat::UrlPatternIndex"* %0 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = sub i64 %6, %24
  %26 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = add i32 %27, 1
  store i32 %28, i32* %26, align 8
  %29 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = add i32 %30, 1
  store i32 %31, i32* %29, align 8
  %32 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp ugt i32 %28, %33
  br i1 %34, label %350, label %35

35:                                               ; preds = %21
  %36 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 5
  %37 = load i32, i32* %36, align 4
  %38 = icmp ugt i32 %31, %37
  br i1 %38, label %350, label %39

39:                                               ; preds = %35
  %40 = and i64 %25, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %44 = load i8, i8* %43, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %350

46:                                               ; preds = %42, %39
  %47 = add i64 %16, -2
  %48 = icmp ult i64 %47, %25
  br i1 %48, label %350, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds i8, i8* %9, i64 %25
  %51 = bitcast i8* %50 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i64
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %58 = load i8, i8* %57, align 8, !range !2
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %350

60:                                               ; preds = %49, %56
  %61 = icmp ugt i64 %16, %53
  %62 = sub i64 %16, %53
  %63 = icmp uge i64 %62, %25
  %64 = and i1 %61, %63
  br i1 %64, label %65, label %350

65:                                               ; preds = %60
  %66 = load i32, i32* %22, align 4
  %67 = sext i32 %66 to i64
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlPatternIndex", %"struct.url_pattern_index::flat::UrlPatternIndex"* %0, i64 0, i32 0, i32 0, i64 %68
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = icmp ugt i16 %71, 4
  br i1 %72, label %73, label %181

73:                                               ; preds = %65
  %74 = getelementptr inbounds i8, i8* %69, i64 4
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = icmp eq i16 %76, 0
  br i1 %77, label %82, label %78

78:                                               ; preds = %73
  %79 = zext i16 %76 to i64
  %80 = add i64 %6, %79
  %81 = icmp ult i64 %18, %80
  br i1 %81, label %350, label %82

82:                                               ; preds = %78, %73
  %83 = icmp ugt i16 %71, 6
  br i1 %83, label %84, label %181

84:                                               ; preds = %82
  %85 = getelementptr inbounds i8, i8* %69, i64 6
  %86 = bitcast i8* %85 to i16*
  %87 = load i16, i16* %86, align 2
  %88 = icmp eq i16 %87, 0
  br i1 %88, label %112, label %89

89:                                               ; preds = %84
  %90 = zext i16 %87 to i64
  %91 = add i64 %6, %90
  %92 = and i64 %91, 3
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %100, label %94

94:                                               ; preds = %89
  %95 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %96 = load i8, i8* %95, align 8, !range !2
  %97 = icmp ne i8 %96, 0
  %98 = icmp ult i64 %18, %91
  %99 = or i1 %97, %98
  br i1 %99, label %350, label %102

100:                                              ; preds = %89
  %101 = icmp ult i64 %18, %91
  br i1 %101, label %350, label %102

102:                                              ; preds = %94, %100
  %103 = getelementptr inbounds i8, i8* %9, i64 %91
  %104 = bitcast i8* %103 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = icmp sgt i32 %105, 0
  br i1 %106, label %107, label %350

107:                                              ; preds = %102
  %108 = zext i32 %105 to i64
  %109 = add i64 %91, %108
  %110 = add i64 %16, -1
  %111 = icmp ult i64 %110, %109
  br i1 %111, label %350, label %112

112:                                              ; preds = %107, %84
  %113 = getelementptr inbounds i8, i8* %69, i64 6
  %114 = bitcast i8* %113 to i16*
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i64
  %117 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlPatternIndex", %"struct.url_pattern_index::flat::UrlPatternIndex"* %0, i64 0, i32 0, i32 0, i64 %116
  %118 = icmp eq i16 %115, 0
  br i1 %118, label %181, label %119

119:                                              ; preds = %112
  %120 = bitcast i8* %117 to i32*
  %121 = load i32, i32* %120, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %117, i64 %122
  %124 = icmp eq i8* %123, null
  br i1 %124, label %150, label %125

125:                                              ; preds = %119
  %126 = ptrtoint i8* %123 to i64
  %127 = sub i64 %126, %4
  %128 = and i64 %127, 3
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %136, label %130

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %132 = load i8, i8* %131, align 8, !range !2
  %133 = icmp ne i8 %132, 0
  %134 = icmp ult i64 %18, %127
  %135 = or i1 %133, %134
  br i1 %135, label %350, label %138

136:                                              ; preds = %125
  %137 = icmp ult i64 %18, %127
  br i1 %137, label %350, label %138

138:                                              ; preds = %130, %136
  %139 = bitcast i8* %123 to i32*
  %140 = load i32, i32* %139, align 4
  %141 = icmp ult i32 %140, 536870911
  br i1 %141, label %142, label %350

142:                                              ; preds = %138
  %143 = zext i32 %140 to i64
  %144 = shl nuw nsw i64 %143, 2
  %145 = add nuw nsw i64 %144, 4
  %146 = icmp ugt i64 %16, %145
  %147 = sub i64 %16, %145
  %148 = icmp uge i64 %147, %127
  %149 = and i1 %146, %148
  br i1 %149, label %150, label %350

150:                                              ; preds = %142, %119
  %151 = bitcast i8* %117 to i32*
  %152 = load i32, i32* %151, align 4
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %117, i64 %153
  %155 = icmp eq i8* %154, null
  br i1 %155, label %181, label %156

156:                                              ; preds = %150
  %157 = bitcast i8* %154 to i32*
  %158 = load i32, i32* %157, align 4
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %181, label %160

160:                                              ; preds = %156
  %161 = getelementptr inbounds i8, i8* %154, i64 4
  %162 = bitcast i8* %161 to i32*
  br label %167

163:                                              ; preds = %167
  %164 = load i32, i32* %157, align 4
  %165 = zext i32 %164 to i64
  %166 = icmp ult i64 %176, %165
  br i1 %166, label %167, label %177

167:                                              ; preds = %163, %160
  %168 = phi i64 [ 0, %160 ], [ %176, %163 ]
  %169 = getelementptr inbounds i32, i32* %162, i64 %168
  %170 = bitcast i32* %169 to i8*
  %171 = load i32, i32* %169, align 4
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %170, i64 %172
  %174 = bitcast i8* %173 to %"struct.url_pattern_index::flat::NGramToRules"*
  %175 = tail call zeroext i1 @_ZNK17url_pattern_index4flat12NGramToRules6VerifyERN11flatbuffers8VerifierE(%"struct.url_pattern_index::flat::NGramToRules"* %174, %"class.flatbuffers::Verifier"* dereferenceable(48) %1) #9
  %176 = add nuw nsw i64 %168, 1
  br i1 %175, label %163, label %350

177:                                              ; preds = %163
  %178 = load i32, i32* %22, align 4
  %179 = sext i32 %178 to i64
  %180 = sub nsw i64 0, %179
  br label %181

181:                                              ; preds = %112, %82, %65, %177, %150, %156
  %182 = phi i64 [ %180, %177 ], [ %68, %150 ], [ %68, %156 ], [ %68, %65 ], [ %68, %82 ], [ %68, %112 ]
  %183 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlPatternIndex", %"struct.url_pattern_index::flat::UrlPatternIndex"* %0, i64 0, i32 0, i32 0, i64 %182
  %184 = bitcast i8* %183 to i16*
  %185 = load i16, i16* %184, align 2
  %186 = icmp ugt i16 %185, 8
  br i1 %186, label %187, label %240

187:                                              ; preds = %181
  %188 = getelementptr inbounds i8, i8* %183, i64 8
  %189 = bitcast i8* %188 to i16*
  %190 = load i16, i16* %189, align 2
  %191 = icmp eq i16 %190, 0
  br i1 %191, label %220, label %192

192:                                              ; preds = %187
  %193 = load i64, i64* %3, align 8
  %194 = sub i64 %5, %193
  %195 = zext i16 %190 to i64
  %196 = add i64 %194, %195
  %197 = and i64 %196, 3
  %198 = icmp eq i64 %197, 0
  %199 = inttoptr i64 %193 to i8*
  br i1 %198, label %204, label %200

200:                                              ; preds = %192
  %201 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %202 = load i8, i8* %201, align 8, !range !2
  %203 = icmp eq i8 %202, 0
  br i1 %203, label %204, label %350

204:                                              ; preds = %200, %192
  %205 = load i64, i64* %15, align 8
  %206 = icmp ugt i64 %205, 4
  %207 = add i64 %205, -4
  %208 = icmp uge i64 %207, %196
  %209 = and i1 %206, %208
  br i1 %209, label %210, label %350

210:                                              ; preds = %204
  %211 = getelementptr inbounds i8, i8* %199, i64 %196
  %212 = bitcast i8* %211 to i32*
  %213 = load i32, i32* %212, align 4
  %214 = icmp sgt i32 %213, 0
  br i1 %214, label %215, label %350

215:                                              ; preds = %210
  %216 = zext i32 %213 to i64
  %217 = add i64 %196, %216
  %218 = add i64 %205, -1
  %219 = icmp ult i64 %218, %217
  br i1 %219, label %350, label %220

220:                                              ; preds = %215, %187
  %221 = getelementptr inbounds i8, i8* %183, i64 8
  %222 = bitcast i8* %221 to i16*
  %223 = load i16, i16* %222, align 2
  %224 = zext i16 %223 to i64
  %225 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlPatternIndex", %"struct.url_pattern_index::flat::UrlPatternIndex"* %0, i64 0, i32 0, i32 0, i64 %224
  %226 = icmp eq i16 %223, 0
  br i1 %226, label %240, label %227

227:                                              ; preds = %220
  %228 = bitcast i8* %225 to i32*
  %229 = load i32, i32* %228, align 4
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds i8, i8* %225, i64 %230
  %232 = icmp eq i8* %231, null
  br i1 %232, label %240, label %233

233:                                              ; preds = %227
  %234 = bitcast i8* %231 to %"struct.url_pattern_index::flat::NGramToRules"*
  %235 = tail call zeroext i1 @_ZNK17url_pattern_index4flat12NGramToRules6VerifyERN11flatbuffers8VerifierE(%"struct.url_pattern_index::flat::NGramToRules"* nonnull %234, %"class.flatbuffers::Verifier"* dereferenceable(48) %1) #9
  br i1 %235, label %236, label %350

236:                                              ; preds = %233
  %237 = load i32, i32* %22, align 4
  %238 = sext i32 %237 to i64
  %239 = sub nsw i64 0, %238
  br label %240

240:                                              ; preds = %181, %236, %220, %227
  %241 = phi i64 [ %239, %236 ], [ %182, %220 ], [ %182, %227 ], [ %182, %181 ]
  %242 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlPatternIndex", %"struct.url_pattern_index::flat::UrlPatternIndex"* %0, i64 0, i32 0, i32 0, i64 %241
  %243 = bitcast i8* %242 to i16*
  %244 = load i16, i16* %243, align 2
  %245 = icmp ugt i16 %244, 10
  br i1 %245, label %246, label %347

246:                                              ; preds = %240
  %247 = getelementptr inbounds i8, i8* %242, i64 10
  %248 = bitcast i8* %247 to i16*
  %249 = load i16, i16* %248, align 2
  %250 = icmp eq i16 %249, 0
  br i1 %250, label %279, label %251

251:                                              ; preds = %246
  %252 = load i64, i64* %3, align 8
  %253 = sub i64 %5, %252
  %254 = zext i16 %249 to i64
  %255 = add i64 %253, %254
  %256 = and i64 %255, 3
  %257 = icmp eq i64 %256, 0
  %258 = inttoptr i64 %252 to i8*
  br i1 %257, label %263, label %259

259:                                              ; preds = %251
  %260 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %261 = load i8, i8* %260, align 8, !range !2
  %262 = icmp eq i8 %261, 0
  br i1 %262, label %263, label %350

263:                                              ; preds = %259, %251
  %264 = load i64, i64* %15, align 8
  %265 = icmp ugt i64 %264, 4
  %266 = add i64 %264, -4
  %267 = icmp uge i64 %266, %255
  %268 = and i1 %265, %267
  br i1 %268, label %269, label %350

269:                                              ; preds = %263
  %270 = getelementptr inbounds i8, i8* %258, i64 %255
  %271 = bitcast i8* %270 to i32*
  %272 = load i32, i32* %271, align 4
  %273 = icmp sgt i32 %272, 0
  br i1 %273, label %274, label %350

274:                                              ; preds = %269
  %275 = zext i32 %272 to i64
  %276 = add i64 %255, %275
  %277 = add i64 %264, -1
  %278 = icmp ult i64 %277, %276
  br i1 %278, label %350, label %279

279:                                              ; preds = %274, %246
  %280 = getelementptr inbounds i8, i8* %242, i64 10
  %281 = bitcast i8* %280 to i16*
  %282 = load i16, i16* %281, align 2
  %283 = zext i16 %282 to i64
  %284 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlPatternIndex", %"struct.url_pattern_index::flat::UrlPatternIndex"* %0, i64 0, i32 0, i32 0, i64 %283
  %285 = icmp eq i16 %282, 0
  br i1 %285, label %347, label %286

286:                                              ; preds = %279
  %287 = bitcast i8* %284 to i32*
  %288 = load i32, i32* %287, align 4
  %289 = zext i32 %288 to i64
  %290 = getelementptr inbounds i8, i8* %284, i64 %289
  %291 = icmp eq i8* %290, null
  br i1 %291, label %320, label %292

292:                                              ; preds = %286
  %293 = load i64, i64* %3, align 8
  %294 = ptrtoint i8* %290 to i64
  %295 = sub i64 %294, %293
  %296 = and i64 %295, 3
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %302, label %298

298:                                              ; preds = %292
  %299 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %300 = load i8, i8* %299, align 8, !range !2
  %301 = icmp eq i8 %300, 0
  br i1 %301, label %302, label %350

302:                                              ; preds = %298, %292
  %303 = load i64, i64* %15, align 8
  %304 = icmp ugt i64 %303, 4
  %305 = add i64 %303, -4
  %306 = icmp uge i64 %305, %295
  %307 = and i1 %304, %306
  br i1 %307, label %308, label %350

308:                                              ; preds = %302
  %309 = bitcast i8* %290 to i32*
  %310 = load i32, i32* %309, align 4
  %311 = icmp ult i32 %310, 536870911
  br i1 %311, label %312, label %350

312:                                              ; preds = %308
  %313 = zext i32 %310 to i64
  %314 = shl nuw nsw i64 %313, 2
  %315 = add nuw nsw i64 %314, 4
  %316 = icmp ugt i64 %303, %315
  %317 = sub i64 %303, %315
  %318 = icmp uge i64 %317, %295
  %319 = and i1 %316, %318
  br i1 %319, label %320, label %350

320:                                              ; preds = %312, %286
  %321 = bitcast i8* %284 to i32*
  %322 = load i32, i32* %321, align 4
  %323 = zext i32 %322 to i64
  %324 = getelementptr inbounds i8, i8* %284, i64 %323
  %325 = icmp eq i8* %324, null
  br i1 %325, label %347, label %326

326:                                              ; preds = %320
  %327 = bitcast i8* %324 to i32*
  %328 = load i32, i32* %327, align 4
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %347, label %330

330:                                              ; preds = %326
  %331 = getelementptr inbounds i8, i8* %324, i64 4
  %332 = bitcast i8* %331 to i32*
  br label %337

333:                                              ; preds = %337
  %334 = load i32, i32* %327, align 4
  %335 = zext i32 %334 to i64
  %336 = icmp ult i64 %346, %335
  br i1 %336, label %337, label %347

337:                                              ; preds = %333, %330
  %338 = phi i64 [ 0, %330 ], [ %346, %333 ]
  %339 = getelementptr inbounds i32, i32* %332, i64 %338
  %340 = bitcast i32* %339 to i8*
  %341 = load i32, i32* %339, align 4
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds i8, i8* %340, i64 %342
  %344 = bitcast i8* %343 to %"struct.url_pattern_index::flat::UrlRule"*
  %345 = tail call zeroext i1 @_ZNK17url_pattern_index4flat7UrlRule6VerifyERN11flatbuffers8VerifierE(%"struct.url_pattern_index::flat::UrlRule"* %344, %"class.flatbuffers::Verifier"* dereferenceable(48) %1) #9
  %346 = add nuw nsw i64 %338, 1
  br i1 %345, label %333, label %350

347:                                              ; preds = %333, %279, %240, %320, %326
  %348 = load i32, i32* %26, align 8
  %349 = add i32 %348, -1
  store i32 %349, i32* %26, align 8
  br label %350

350:                                              ; preds = %167, %337, %130, %94, %100, %78, %136, %107, %215, %274, %298, %308, %302, %259, %269, %263, %200, %210, %204, %138, %102, %42, %21, %10, %35, %46, %56, %14, %347, %312, %233, %142, %60
  %351 = phi i1 [ false, %312 ], [ false, %274 ], [ false, %233 ], [ false, %215 ], [ false, %142 ], [ false, %107 ], [ false, %78 ], [ false, %60 ], [ true, %347 ], [ false, %14 ], [ false, %56 ], [ false, %46 ], [ false, %35 ], [ false, %10 ], [ false, %21 ], [ false, %42 ], [ false, %100 ], [ false, %102 ], [ false, %94 ], [ false, %136 ], [ false, %138 ], [ false, %130 ], [ false, %204 ], [ false, %210 ], [ false, %200 ], [ false, %263 ], [ false, %269 ], [ false, %259 ], [ false, %302 ], [ false, %308 ], [ false, %298 ], [ false, %337 ], [ false, %167 ]
  ret i1 %351
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK17url_pattern_index4flat12NGramToRules6VerifyERN11flatbuffers8VerifierE(%"struct.url_pattern_index::flat::NGramToRules"*, %"class.flatbuffers::Verifier"* dereferenceable(48)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.flatbuffers::Verifier"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = ptrtoint %"struct.url_pattern_index::flat::NGramToRules"* %0 to i64
  %6 = sub i64 %5, %4
  %7 = and i64 %6, 3
  %8 = icmp eq i64 %7, 0
  %9 = inttoptr i64 %4 to i8*
  br i1 %8, label %14, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %185

14:                                               ; preds = %10, %2
  %15 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %16, 4
  %18 = add i64 %16, -4
  %19 = icmp uge i64 %18, %6
  %20 = and i1 %17, %19
  br i1 %20, label %21, label %185

21:                                               ; preds = %14
  %22 = bitcast %"struct.url_pattern_index::flat::NGramToRules"* %0 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = sub i64 %6, %24
  %26 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = add i32 %27, 1
  store i32 %28, i32* %26, align 8
  %29 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = add i32 %30, 1
  store i32 %31, i32* %29, align 8
  %32 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp ugt i32 %28, %33
  br i1 %34, label %185, label %35

35:                                               ; preds = %21
  %36 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 5
  %37 = load i32, i32* %36, align 4
  %38 = icmp ugt i32 %31, %37
  br i1 %38, label %185, label %39

39:                                               ; preds = %35
  %40 = and i64 %25, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %44 = load i8, i8* %43, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %185

46:                                               ; preds = %42, %39
  %47 = add i64 %16, -2
  %48 = icmp ult i64 %47, %25
  br i1 %48, label %185, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds i8, i8* %9, i64 %25
  %51 = bitcast i8* %50 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i64
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %58 = load i8, i8* %57, align 8, !range !2
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %185

60:                                               ; preds = %49, %56
  %61 = icmp ugt i64 %16, %53
  %62 = sub i64 %16, %53
  %63 = icmp uge i64 %62, %25
  %64 = and i1 %61, %63
  br i1 %64, label %65, label %185

65:                                               ; preds = %60
  %66 = load i32, i32* %22, align 4
  %67 = sext i32 %66 to i64
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds %"struct.url_pattern_index::flat::NGramToRules", %"struct.url_pattern_index::flat::NGramToRules"* %0, i64 0, i32 0, i32 0, i64 %68
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = icmp ugt i16 %71, 4
  br i1 %72, label %73, label %182

73:                                               ; preds = %65
  %74 = getelementptr inbounds i8, i8* %69, i64 4
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = icmp eq i16 %76, 0
  br i1 %77, label %85, label %78

78:                                               ; preds = %73
  %79 = zext i16 %76 to i64
  %80 = add i64 %6, %79
  %81 = icmp ugt i64 %16, 8
  %82 = add i64 %16, -8
  %83 = icmp uge i64 %82, %80
  %84 = and i1 %81, %83
  br i1 %84, label %85, label %185

85:                                               ; preds = %73, %78
  %86 = icmp ugt i16 %71, 6
  br i1 %86, label %87, label %182

87:                                               ; preds = %85
  %88 = getelementptr inbounds i8, i8* %69, i64 6
  %89 = bitcast i8* %88 to i16*
  %90 = load i16, i16* %89, align 2
  %91 = icmp eq i16 %90, 0
  br i1 %91, label %115, label %92

92:                                               ; preds = %87
  %93 = zext i16 %90 to i64
  %94 = add i64 %6, %93
  %95 = and i64 %94, 3
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %103, label %97

97:                                               ; preds = %92
  %98 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %99 = load i8, i8* %98, align 8, !range !2
  %100 = icmp ne i8 %99, 0
  %101 = icmp ult i64 %18, %94
  %102 = or i1 %100, %101
  br i1 %102, label %185, label %105

103:                                              ; preds = %92
  %104 = icmp ult i64 %18, %94
  br i1 %104, label %185, label %105

105:                                              ; preds = %97, %103
  %106 = getelementptr inbounds i8, i8* %9, i64 %94
  %107 = bitcast i8* %106 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %185

110:                                              ; preds = %105
  %111 = zext i32 %108 to i64
  %112 = add i64 %94, %111
  %113 = add i64 %16, -1
  %114 = icmp ult i64 %113, %112
  br i1 %114, label %185, label %115

115:                                              ; preds = %110, %87
  %116 = getelementptr inbounds i8, i8* %69, i64 6
  %117 = bitcast i8* %116 to i16*
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i64
  %120 = getelementptr inbounds %"struct.url_pattern_index::flat::NGramToRules", %"struct.url_pattern_index::flat::NGramToRules"* %0, i64 0, i32 0, i32 0, i64 %119
  %121 = icmp eq i16 %118, 0
  br i1 %121, label %182, label %122

122:                                              ; preds = %115
  %123 = bitcast i8* %120 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %120, i64 %125
  %127 = icmp eq i8* %126, null
  br i1 %127, label %153, label %128

128:                                              ; preds = %122
  %129 = ptrtoint i8* %126 to i64
  %130 = sub i64 %129, %4
  %131 = and i64 %130, 3
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %139, label %133

133:                                              ; preds = %128
  %134 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %135 = load i8, i8* %134, align 8, !range !2
  %136 = icmp ne i8 %135, 0
  %137 = icmp ult i64 %18, %130
  %138 = or i1 %136, %137
  br i1 %138, label %185, label %141

139:                                              ; preds = %128
  %140 = icmp ult i64 %18, %130
  br i1 %140, label %185, label %141

141:                                              ; preds = %133, %139
  %142 = bitcast i8* %126 to i32*
  %143 = load i32, i32* %142, align 4
  %144 = icmp ult i32 %143, 536870911
  br i1 %144, label %145, label %185

145:                                              ; preds = %141
  %146 = zext i32 %143 to i64
  %147 = shl nuw nsw i64 %146, 2
  %148 = add nuw nsw i64 %147, 4
  %149 = icmp ugt i64 %16, %148
  %150 = sub i64 %16, %148
  %151 = icmp uge i64 %150, %130
  %152 = and i1 %149, %151
  br i1 %152, label %153, label %185

153:                                              ; preds = %145, %122
  %154 = bitcast i8* %120 to i32*
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %120, i64 %156
  %158 = icmp eq i8* %157, null
  br i1 %158, label %182, label %159

159:                                              ; preds = %153
  %160 = bitcast i8* %157 to i32*
  %161 = load i32, i32* %160, align 4
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %182, label %163

163:                                              ; preds = %159
  %164 = getelementptr inbounds i8, i8* %157, i64 4
  %165 = bitcast i8* %164 to i32*
  br label %170

166:                                              ; preds = %170
  %167 = load i32, i32* %160, align 4
  %168 = zext i32 %167 to i64
  %169 = icmp ult i64 %179, %168
  br i1 %169, label %170, label %180

170:                                              ; preds = %166, %163
  %171 = phi i64 [ 0, %163 ], [ %179, %166 ]
  %172 = getelementptr inbounds i32, i32* %165, i64 %171
  %173 = bitcast i32* %172 to i8*
  %174 = load i32, i32* %172, align 4
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %173, i64 %175
  %177 = bitcast i8* %176 to %"struct.url_pattern_index::flat::UrlRule"*
  %178 = tail call zeroext i1 @_ZNK17url_pattern_index4flat7UrlRule6VerifyERN11flatbuffers8VerifierE(%"struct.url_pattern_index::flat::UrlRule"* %177, %"class.flatbuffers::Verifier"* dereferenceable(48) %1) #9
  %179 = add nuw nsw i64 %171, 1
  br i1 %178, label %166, label %185

180:                                              ; preds = %166
  %181 = load i32, i32* %26, align 8
  br label %182

182:                                              ; preds = %115, %85, %65, %180, %153, %159
  %183 = phi i32 [ %181, %180 ], [ %28, %153 ], [ %28, %159 ], [ %28, %65 ], [ %28, %85 ], [ %28, %115 ]
  %184 = add i32 %183, -1
  store i32 %184, i32* %26, align 8
  br label %185

185:                                              ; preds = %170, %133, %97, %103, %139, %110, %141, %105, %42, %21, %10, %35, %46, %56, %14, %182, %145, %78, %60
  %186 = phi i1 [ false, %145 ], [ false, %110 ], [ false, %78 ], [ false, %60 ], [ true, %182 ], [ false, %14 ], [ false, %56 ], [ false, %46 ], [ false, %35 ], [ false, %10 ], [ false, %21 ], [ false, %42 ], [ false, %103 ], [ false, %105 ], [ false, %97 ], [ false, %139 ], [ false, %141 ], [ false, %133 ], [ false, %170 ]
  ret i1 %186
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK17url_pattern_index4flat7UrlRule6VerifyERN11flatbuffers8VerifierE(%"struct.url_pattern_index::flat::UrlRule"*, %"class.flatbuffers::Verifier"* dereferenceable(48)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.flatbuffers::Verifier"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = ptrtoint %"struct.url_pattern_index::flat::UrlRule"* %0 to i64
  %6 = sub i64 %5, %4
  %7 = and i64 %6, 3
  %8 = icmp eq i64 %7, 0
  %9 = inttoptr i64 %4 to i8*
  br i1 %8, label %14, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %567

14:                                               ; preds = %10, %2
  %15 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %16, 4
  %18 = add i64 %16, -4
  %19 = icmp uge i64 %18, %6
  %20 = and i1 %17, %19
  br i1 %20, label %21, label %567

21:                                               ; preds = %14
  %22 = bitcast %"struct.url_pattern_index::flat::UrlRule"* %0 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = sub i64 %6, %24
  %26 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = add i32 %27, 1
  store i32 %28, i32* %26, align 8
  %29 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = add i32 %30, 1
  store i32 %31, i32* %29, align 8
  %32 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp ugt i32 %28, %33
  br i1 %34, label %567, label %35

35:                                               ; preds = %21
  %36 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 5
  %37 = load i32, i32* %36, align 4
  %38 = icmp ugt i32 %31, %37
  br i1 %38, label %567, label %39

39:                                               ; preds = %35
  %40 = and i64 %25, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %44 = load i8, i8* %43, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %567

46:                                               ; preds = %42, %39
  %47 = add i64 %16, -2
  %48 = icmp ult i64 %47, %25
  br i1 %48, label %567, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds i8, i8* %9, i64 %25
  %51 = bitcast i8* %50 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i64
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %58 = load i8, i8* %57, align 8, !range !2
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %567

60:                                               ; preds = %49, %56
  %61 = icmp ugt i64 %16, %53
  %62 = sub i64 %16, %53
  %63 = icmp uge i64 %62, %25
  %64 = and i1 %61, %63
  br i1 %64, label %65, label %567

65:                                               ; preds = %60
  %66 = load i32, i32* %22, align 4
  %67 = sext i32 %66 to i64
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %0, i64 0, i32 0, i32 0, i64 %68
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = icmp ugt i16 %71, 4
  br i1 %72, label %73, label %566

73:                                               ; preds = %65
  %74 = getelementptr inbounds i8, i8* %69, i64 4
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = icmp eq i16 %76, 0
  br i1 %77, label %83, label %78

78:                                               ; preds = %73
  %79 = zext i16 %76 to i64
  %80 = add i64 %6, %79
  %81 = add i64 %16, -1
  %82 = icmp ult i64 %81, %80
  br i1 %82, label %567, label %83

83:                                               ; preds = %78, %73
  %84 = icmp ugt i16 %71, 6
  br i1 %84, label %85, label %566

85:                                               ; preds = %83
  %86 = getelementptr inbounds i8, i8* %69, i64 6
  %87 = bitcast i8* %86 to i16*
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 0
  br i1 %89, label %94, label %90

90:                                               ; preds = %85
  %91 = zext i16 %88 to i64
  %92 = add i64 %6, %91
  %93 = icmp ult i64 %47, %92
  br i1 %93, label %567, label %94

94:                                               ; preds = %90, %85
  %95 = icmp ugt i16 %71, 8
  br i1 %95, label %96, label %566

96:                                               ; preds = %94
  %97 = getelementptr inbounds i8, i8* %69, i64 8
  %98 = bitcast i8* %97 to i16*
  %99 = load i16, i16* %98, align 2
  %100 = icmp eq i16 %99, 0
  br i1 %100, label %105, label %101

101:                                              ; preds = %96
  %102 = zext i16 %99 to i64
  %103 = add i64 %6, %102
  %104 = icmp ult i64 %47, %103
  br i1 %104, label %567, label %105

105:                                              ; preds = %101, %96
  %106 = icmp ugt i16 %71, 10
  br i1 %106, label %107, label %566

107:                                              ; preds = %105
  %108 = getelementptr inbounds i8, i8* %69, i64 10
  %109 = bitcast i8* %108 to i16*
  %110 = load i16, i16* %109, align 2
  %111 = icmp eq i16 %110, 0
  br i1 %111, label %117, label %112

112:                                              ; preds = %107
  %113 = zext i16 %110 to i64
  %114 = add i64 %6, %113
  %115 = add i64 %16, -1
  %116 = icmp ult i64 %115, %114
  br i1 %116, label %567, label %117

117:                                              ; preds = %112, %107
  %118 = icmp ugt i16 %71, 12
  br i1 %118, label %119, label %566

119:                                              ; preds = %117
  %120 = getelementptr inbounds i8, i8* %69, i64 12
  %121 = bitcast i8* %120 to i16*
  %122 = load i16, i16* %121, align 2
  %123 = icmp eq i16 %122, 0
  br i1 %123, label %129, label %124

124:                                              ; preds = %119
  %125 = zext i16 %122 to i64
  %126 = add i64 %6, %125
  %127 = add i64 %16, -1
  %128 = icmp ult i64 %127, %126
  br i1 %128, label %567, label %129

129:                                              ; preds = %124, %119
  %130 = icmp ugt i16 %71, 14
  br i1 %130, label %131, label %566

131:                                              ; preds = %129
  %132 = getelementptr inbounds i8, i8* %69, i64 14
  %133 = bitcast i8* %132 to i16*
  %134 = load i16, i16* %133, align 2
  %135 = icmp eq i16 %134, 0
  br i1 %135, label %141, label %136

136:                                              ; preds = %131
  %137 = zext i16 %134 to i64
  %138 = add i64 %6, %137
  %139 = add i64 %16, -1
  %140 = icmp ult i64 %139, %138
  br i1 %140, label %567, label %141

141:                                              ; preds = %136, %131
  %142 = icmp ugt i16 %71, 16
  br i1 %142, label %143, label %566

143:                                              ; preds = %141
  %144 = getelementptr inbounds i8, i8* %69, i64 16
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = icmp eq i16 %146, 0
  br i1 %147, label %153, label %148

148:                                              ; preds = %143
  %149 = zext i16 %146 to i64
  %150 = add i64 %6, %149
  %151 = add i64 %16, -1
  %152 = icmp ult i64 %151, %150
  br i1 %152, label %567, label %153

153:                                              ; preds = %148, %143
  %154 = icmp ugt i16 %71, 18
  br i1 %154, label %155, label %566

155:                                              ; preds = %153
  %156 = getelementptr inbounds i8, i8* %69, i64 18
  %157 = bitcast i8* %156 to i16*
  %158 = load i16, i16* %157, align 2
  %159 = icmp eq i16 %158, 0
  br i1 %159, label %183, label %160

160:                                              ; preds = %155
  %161 = zext i16 %158 to i64
  %162 = add i64 %6, %161
  %163 = and i64 %162, 3
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %171, label %165

165:                                              ; preds = %160
  %166 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %167 = load i8, i8* %166, align 8, !range !2
  %168 = icmp ne i8 %167, 0
  %169 = icmp ult i64 %18, %162
  %170 = or i1 %168, %169
  br i1 %170, label %567, label %173

171:                                              ; preds = %160
  %172 = icmp ult i64 %18, %162
  br i1 %172, label %567, label %173

173:                                              ; preds = %165, %171
  %174 = getelementptr inbounds i8, i8* %9, i64 %162
  %175 = bitcast i8* %174 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = icmp sgt i32 %176, 0
  br i1 %177, label %178, label %567

178:                                              ; preds = %173
  %179 = zext i32 %176 to i64
  %180 = add i64 %162, %179
  %181 = add i64 %16, -1
  %182 = icmp ult i64 %181, %180
  br i1 %182, label %567, label %183

183:                                              ; preds = %155, %178
  %184 = getelementptr inbounds i8, i8* %69, i64 18
  %185 = bitcast i8* %184 to i16*
  %186 = load i16, i16* %185, align 2
  %187 = zext i16 %186 to i64
  %188 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %0, i64 0, i32 0, i32 0, i64 %187
  %189 = icmp eq i16 %186, 0
  br i1 %189, label %276, label %190

190:                                              ; preds = %183
  %191 = bitcast i8* %188 to i32*
  %192 = load i32, i32* %191, align 4
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds i8, i8* %188, i64 %193
  %195 = icmp eq i8* %194, null
  br i1 %195, label %221, label %196

196:                                              ; preds = %190
  %197 = ptrtoint i8* %194 to i64
  %198 = sub i64 %197, %4
  %199 = and i64 %198, 3
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %207, label %201

201:                                              ; preds = %196
  %202 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %203 = load i8, i8* %202, align 8, !range !2
  %204 = icmp ne i8 %203, 0
  %205 = icmp ult i64 %18, %198
  %206 = or i1 %204, %205
  br i1 %206, label %567, label %209

207:                                              ; preds = %196
  %208 = icmp ult i64 %18, %198
  br i1 %208, label %567, label %209

209:                                              ; preds = %201, %207
  %210 = bitcast i8* %194 to i32*
  %211 = load i32, i32* %210, align 4
  %212 = icmp ult i32 %211, 536870911
  br i1 %212, label %213, label %567

213:                                              ; preds = %209
  %214 = zext i32 %211 to i64
  %215 = shl nuw nsw i64 %214, 2
  %216 = add nuw nsw i64 %215, 4
  %217 = icmp ugt i64 %16, %216
  %218 = sub i64 %16, %216
  %219 = icmp uge i64 %218, %198
  %220 = and i1 %217, %219
  br i1 %220, label %221, label %567

221:                                              ; preds = %213, %190
  %222 = bitcast i8* %188 to i32*
  %223 = load i32, i32* %222, align 4
  %224 = zext i32 %223 to i64
  %225 = getelementptr inbounds i8, i8* %188, i64 %224
  %226 = icmp eq i8* %225, null
  br i1 %226, label %276, label %227

227:                                              ; preds = %221
  %228 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %229 = getelementptr inbounds i8, i8* %225, i64 4
  %230 = bitcast i8* %229 to i32*
  %231 = bitcast i8* %225 to i32*
  %232 = load i32, i32* %231, align 4
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %276, label %234

234:                                              ; preds = %227
  %235 = zext i32 %232 to i64
  %236 = add i64 %16, -1
  br label %237

237:                                              ; preds = %273, %234
  %238 = phi i64 [ 0, %234 ], [ %274, %273 ]
  %239 = getelementptr inbounds i32, i32* %230, i64 %238
  %240 = bitcast i32* %239 to i8*
  %241 = load i32, i32* %239, align 4
  %242 = zext i32 %241 to i64
  %243 = getelementptr inbounds i8, i8* %240, i64 %242
  %244 = ptrtoint i8* %243 to i64
  %245 = sub i64 %244, %4
  %246 = and i64 %245, 3
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %253, label %248

248:                                              ; preds = %237
  %249 = load i8, i8* %228, align 8, !range !2
  %250 = icmp ne i8 %249, 0
  %251 = icmp ult i64 %18, %245
  %252 = or i1 %250, %251
  br i1 %252, label %567, label %255

253:                                              ; preds = %237
  %254 = icmp ult i64 %18, %245
  br i1 %254, label %567, label %255

255:                                              ; preds = %248, %253
  %256 = bitcast i8* %243 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = icmp ult i32 %257, 2147483647
  br i1 %258, label %259, label %567

259:                                              ; preds = %255
  %260 = zext i32 %257 to i64
  %261 = add nuw nsw i64 %260, 4
  %262 = add i64 %261, %245
  %263 = icmp ule i64 %16, %261
  %264 = sub i64 %16, %261
  %265 = icmp ult i64 %264, %245
  %266 = or i1 %263, %265
  %267 = icmp ult i64 %236, %262
  %268 = or i1 %267, %266
  br i1 %268, label %567, label %269

269:                                              ; preds = %259
  %270 = getelementptr inbounds i8, i8* %9, i64 %262
  %271 = load i8, i8* %270, align 1
  %272 = icmp eq i8 %271, 0
  br i1 %272, label %273, label %567

273:                                              ; preds = %269
  %274 = add nuw nsw i64 %238, 1
  %275 = icmp eq i64 %274, %235
  br i1 %275, label %276, label %237

276:                                              ; preds = %273, %183, %227, %221
  %277 = icmp ugt i16 %71, 20
  br i1 %277, label %278, label %566

278:                                              ; preds = %276
  %279 = getelementptr inbounds i8, i8* %69, i64 20
  %280 = bitcast i8* %279 to i16*
  %281 = load i16, i16* %280, align 2
  %282 = icmp eq i16 %281, 0
  br i1 %282, label %306, label %283

283:                                              ; preds = %278
  %284 = zext i16 %281 to i64
  %285 = add i64 %6, %284
  %286 = and i64 %285, 3
  %287 = icmp eq i64 %286, 0
  br i1 %287, label %294, label %288

288:                                              ; preds = %283
  %289 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %290 = load i8, i8* %289, align 8, !range !2
  %291 = icmp ne i8 %290, 0
  %292 = icmp ult i64 %18, %285
  %293 = or i1 %291, %292
  br i1 %293, label %567, label %296

294:                                              ; preds = %283
  %295 = icmp ult i64 %18, %285
  br i1 %295, label %567, label %296

296:                                              ; preds = %288, %294
  %297 = getelementptr inbounds i8, i8* %9, i64 %285
  %298 = bitcast i8* %297 to i32*
  %299 = load i32, i32* %298, align 4
  %300 = icmp sgt i32 %299, 0
  br i1 %300, label %301, label %567

301:                                              ; preds = %296
  %302 = zext i32 %299 to i64
  %303 = add i64 %285, %302
  %304 = add i64 %16, -1
  %305 = icmp ult i64 %304, %303
  br i1 %305, label %567, label %306

306:                                              ; preds = %301, %278
  %307 = getelementptr inbounds i8, i8* %69, i64 20
  %308 = bitcast i8* %307 to i16*
  %309 = load i16, i16* %308, align 2
  %310 = zext i16 %309 to i64
  %311 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %0, i64 0, i32 0, i32 0, i64 %310
  %312 = icmp eq i16 %309, 0
  br i1 %312, label %399, label %313

313:                                              ; preds = %306
  %314 = bitcast i8* %311 to i32*
  %315 = load i32, i32* %314, align 4
  %316 = zext i32 %315 to i64
  %317 = getelementptr inbounds i8, i8* %311, i64 %316
  %318 = icmp eq i8* %317, null
  br i1 %318, label %344, label %319

319:                                              ; preds = %313
  %320 = ptrtoint i8* %317 to i64
  %321 = sub i64 %320, %4
  %322 = and i64 %321, 3
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %330, label %324

324:                                              ; preds = %319
  %325 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %326 = load i8, i8* %325, align 8, !range !2
  %327 = icmp ne i8 %326, 0
  %328 = icmp ult i64 %18, %321
  %329 = or i1 %327, %328
  br i1 %329, label %567, label %332

330:                                              ; preds = %319
  %331 = icmp ult i64 %18, %321
  br i1 %331, label %567, label %332

332:                                              ; preds = %324, %330
  %333 = bitcast i8* %317 to i32*
  %334 = load i32, i32* %333, align 4
  %335 = icmp ult i32 %334, 536870911
  br i1 %335, label %336, label %567

336:                                              ; preds = %332
  %337 = zext i32 %334 to i64
  %338 = shl nuw nsw i64 %337, 2
  %339 = add nuw nsw i64 %338, 4
  %340 = icmp ugt i64 %16, %339
  %341 = sub i64 %16, %339
  %342 = icmp uge i64 %341, %321
  %343 = and i1 %340, %342
  br i1 %343, label %344, label %567

344:                                              ; preds = %336, %313
  %345 = bitcast i8* %311 to i32*
  %346 = load i32, i32* %345, align 4
  %347 = zext i32 %346 to i64
  %348 = getelementptr inbounds i8, i8* %311, i64 %347
  %349 = icmp eq i8* %348, null
  br i1 %349, label %399, label %350

350:                                              ; preds = %344
  %351 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %352 = getelementptr inbounds i8, i8* %348, i64 4
  %353 = bitcast i8* %352 to i32*
  %354 = bitcast i8* %348 to i32*
  %355 = load i32, i32* %354, align 4
  %356 = icmp eq i32 %355, 0
  br i1 %356, label %399, label %357

357:                                              ; preds = %350
  %358 = zext i32 %355 to i64
  %359 = add i64 %16, -1
  br label %360

360:                                              ; preds = %396, %357
  %361 = phi i64 [ 0, %357 ], [ %397, %396 ]
  %362 = getelementptr inbounds i32, i32* %353, i64 %361
  %363 = bitcast i32* %362 to i8*
  %364 = load i32, i32* %362, align 4
  %365 = zext i32 %364 to i64
  %366 = getelementptr inbounds i8, i8* %363, i64 %365
  %367 = ptrtoint i8* %366 to i64
  %368 = sub i64 %367, %4
  %369 = and i64 %368, 3
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %376, label %371

371:                                              ; preds = %360
  %372 = load i8, i8* %351, align 8, !range !2
  %373 = icmp ne i8 %372, 0
  %374 = icmp ult i64 %18, %368
  %375 = or i1 %373, %374
  br i1 %375, label %567, label %378

376:                                              ; preds = %360
  %377 = icmp ult i64 %18, %368
  br i1 %377, label %567, label %378

378:                                              ; preds = %371, %376
  %379 = bitcast i8* %366 to i32*
  %380 = load i32, i32* %379, align 4
  %381 = icmp ult i32 %380, 2147483647
  br i1 %381, label %382, label %567

382:                                              ; preds = %378
  %383 = zext i32 %380 to i64
  %384 = add nuw nsw i64 %383, 4
  %385 = add i64 %384, %368
  %386 = icmp ule i64 %16, %384
  %387 = sub i64 %16, %384
  %388 = icmp ult i64 %387, %368
  %389 = or i1 %386, %388
  %390 = icmp ult i64 %359, %385
  %391 = or i1 %390, %389
  br i1 %391, label %567, label %392

392:                                              ; preds = %382
  %393 = getelementptr inbounds i8, i8* %9, i64 %385
  %394 = load i8, i8* %393, align 1
  %395 = icmp eq i8 %394, 0
  br i1 %395, label %396, label %567

396:                                              ; preds = %392
  %397 = add nuw nsw i64 %361, 1
  %398 = icmp eq i64 %397, %358
  br i1 %398, label %399, label %360

399:                                              ; preds = %396, %306, %350, %344
  %400 = icmp ugt i16 %71, 22
  br i1 %400, label %401, label %566

401:                                              ; preds = %399
  %402 = getelementptr inbounds i8, i8* %69, i64 22
  %403 = bitcast i8* %402 to i16*
  %404 = load i16, i16* %403, align 2
  %405 = icmp eq i16 %404, 0
  br i1 %405, label %429, label %406

406:                                              ; preds = %401
  %407 = zext i16 %404 to i64
  %408 = add i64 %6, %407
  %409 = and i64 %408, 3
  %410 = icmp eq i64 %409, 0
  br i1 %410, label %417, label %411

411:                                              ; preds = %406
  %412 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %413 = load i8, i8* %412, align 8, !range !2
  %414 = icmp ne i8 %413, 0
  %415 = icmp ult i64 %18, %408
  %416 = or i1 %414, %415
  br i1 %416, label %567, label %419

417:                                              ; preds = %406
  %418 = icmp ult i64 %18, %408
  br i1 %418, label %567, label %419

419:                                              ; preds = %411, %417
  %420 = getelementptr inbounds i8, i8* %9, i64 %408
  %421 = bitcast i8* %420 to i32*
  %422 = load i32, i32* %421, align 4
  %423 = icmp sgt i32 %422, 0
  br i1 %423, label %424, label %567

424:                                              ; preds = %419
  %425 = zext i32 %422 to i64
  %426 = add i64 %408, %425
  %427 = add i64 %16, -1
  %428 = icmp ult i64 %427, %426
  br i1 %428, label %567, label %429

429:                                              ; preds = %424, %401
  %430 = getelementptr inbounds i8, i8* %69, i64 22
  %431 = bitcast i8* %430 to i16*
  %432 = load i16, i16* %431, align 2
  %433 = zext i16 %432 to i64
  %434 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %0, i64 0, i32 0, i32 0, i64 %433
  %435 = icmp eq i16 %432, 0
  br i1 %435, label %474, label %436

436:                                              ; preds = %429
  %437 = bitcast i8* %434 to i32*
  %438 = load i32, i32* %437, align 4
  %439 = zext i32 %438 to i64
  %440 = getelementptr inbounds i8, i8* %434, i64 %439
  %441 = icmp eq i8* %440, null
  br i1 %441, label %474, label %442

442:                                              ; preds = %436
  %443 = ptrtoint i8* %440 to i64
  %444 = sub i64 %443, %4
  %445 = and i64 %444, 3
  %446 = icmp eq i64 %445, 0
  br i1 %446, label %453, label %447

447:                                              ; preds = %442
  %448 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %449 = load i8, i8* %448, align 8, !range !2
  %450 = icmp ne i8 %449, 0
  %451 = icmp ult i64 %18, %444
  %452 = or i1 %450, %451
  br i1 %452, label %567, label %455

453:                                              ; preds = %442
  %454 = icmp ult i64 %18, %444
  br i1 %454, label %567, label %455

455:                                              ; preds = %447, %453
  %456 = bitcast i8* %440 to i32*
  %457 = load i32, i32* %456, align 4
  %458 = icmp ult i32 %457, 2147483647
  br i1 %458, label %459, label %567

459:                                              ; preds = %455
  %460 = zext i32 %457 to i64
  %461 = add nuw nsw i64 %460, 4
  %462 = add i64 %461, %444
  %463 = icmp ule i64 %16, %461
  %464 = sub i64 %16, %461
  %465 = icmp ult i64 %464, %444
  %466 = or i1 %463, %465
  %467 = add i64 %16, -1
  %468 = icmp ult i64 %467, %462
  %469 = or i1 %468, %466
  br i1 %469, label %567, label %470

470:                                              ; preds = %459
  %471 = getelementptr inbounds i8, i8* %9, i64 %462
  %472 = load i8, i8* %471, align 1
  %473 = icmp eq i8 %472, 0
  br i1 %473, label %474, label %567

474:                                              ; preds = %429, %436, %470
  %475 = icmp ugt i16 %71, 24
  br i1 %475, label %476, label %566

476:                                              ; preds = %474
  %477 = getelementptr inbounds i8, i8* %69, i64 24
  %478 = bitcast i8* %477 to i16*
  %479 = load i16, i16* %478, align 2
  %480 = icmp eq i16 %479, 0
  br i1 %480, label %485, label %481

481:                                              ; preds = %476
  %482 = zext i16 %479 to i64
  %483 = add i64 %6, %482
  %484 = icmp ult i64 %18, %483
  br i1 %484, label %567, label %485

485:                                              ; preds = %481, %476
  %486 = icmp ugt i16 %71, 26
  br i1 %486, label %487, label %566

487:                                              ; preds = %485
  %488 = getelementptr inbounds i8, i8* %69, i64 26
  %489 = bitcast i8* %488 to i16*
  %490 = load i16, i16* %489, align 2
  %491 = icmp eq i16 %490, 0
  br i1 %491, label %499, label %492

492:                                              ; preds = %487
  %493 = zext i16 %490 to i64
  %494 = add i64 %6, %493
  %495 = icmp ugt i64 %16, 8
  %496 = add i64 %16, -8
  %497 = icmp uge i64 %496, %494
  %498 = and i1 %495, %497
  br i1 %498, label %499, label %567

499:                                              ; preds = %487, %492
  %500 = icmp ugt i16 %71, 28
  br i1 %500, label %501, label %566

501:                                              ; preds = %499
  %502 = getelementptr inbounds i8, i8* %69, i64 28
  %503 = bitcast i8* %502 to i16*
  %504 = load i16, i16* %503, align 2
  %505 = icmp eq i16 %504, 0
  br i1 %505, label %529, label %506

506:                                              ; preds = %501
  %507 = zext i16 %504 to i64
  %508 = add i64 %6, %507
  %509 = and i64 %508, 3
  %510 = icmp eq i64 %509, 0
  br i1 %510, label %517, label %511

511:                                              ; preds = %506
  %512 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %513 = load i8, i8* %512, align 8, !range !2
  %514 = icmp ne i8 %513, 0
  %515 = icmp ult i64 %18, %508
  %516 = or i1 %514, %515
  br i1 %516, label %567, label %519

517:                                              ; preds = %506
  %518 = icmp ult i64 %18, %508
  br i1 %518, label %567, label %519

519:                                              ; preds = %511, %517
  %520 = getelementptr inbounds i8, i8* %9, i64 %508
  %521 = bitcast i8* %520 to i32*
  %522 = load i32, i32* %521, align 4
  %523 = icmp sgt i32 %522, 0
  br i1 %523, label %524, label %567

524:                                              ; preds = %519
  %525 = zext i32 %522 to i64
  %526 = add i64 %508, %525
  %527 = add i64 %16, -1
  %528 = icmp ult i64 %527, %526
  br i1 %528, label %567, label %529

529:                                              ; preds = %501, %524
  %530 = getelementptr inbounds i8, i8* %69, i64 28
  %531 = bitcast i8* %530 to i16*
  %532 = load i16, i16* %531, align 2
  %533 = zext i16 %532 to i64
  %534 = getelementptr inbounds %"struct.url_pattern_index::flat::UrlRule", %"struct.url_pattern_index::flat::UrlRule"* %0, i64 0, i32 0, i32 0, i64 %533
  %535 = icmp eq i16 %532, 0
  br i1 %535, label %566, label %536

536:                                              ; preds = %529
  %537 = bitcast i8* %534 to i32*
  %538 = load i32, i32* %537, align 4
  %539 = zext i32 %538 to i64
  %540 = getelementptr inbounds i8, i8* %534, i64 %539
  %541 = icmp eq i8* %540, null
  br i1 %541, label %566, label %542

542:                                              ; preds = %536
  %543 = ptrtoint i8* %540 to i64
  %544 = sub i64 %543, %4
  %545 = and i64 %544, 3
  %546 = icmp eq i64 %545, 0
  br i1 %546, label %553, label %547

547:                                              ; preds = %542
  %548 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %549 = load i8, i8* %548, align 8, !range !2
  %550 = icmp ne i8 %549, 0
  %551 = icmp ult i64 %18, %544
  %552 = or i1 %550, %551
  br i1 %552, label %567, label %555

553:                                              ; preds = %542
  %554 = icmp ult i64 %18, %544
  br i1 %554, label %567, label %555

555:                                              ; preds = %547, %553
  %556 = bitcast i8* %540 to i32*
  %557 = load i32, i32* %556, align 4
  %558 = icmp ult i32 %557, 2147483647
  br i1 %558, label %559, label %567

559:                                              ; preds = %555
  %560 = zext i32 %557 to i64
  %561 = add nuw nsw i64 %560, 4
  %562 = icmp ugt i64 %16, %561
  %563 = sub i64 %16, %561
  %564 = icmp uge i64 %563, %544
  %565 = and i1 %562, %564
  br i1 %565, label %566, label %567

566:                                              ; preds = %399, %276, %153, %141, %129, %117, %105, %94, %83, %65, %499, %485, %474, %529, %536, %559
  store i32 %27, i32* %26, align 8
  br label %567

567:                                              ; preds = %259, %255, %269, %253, %248, %382, %378, %392, %376, %371, %148, %136, %124, %112, %101, %90, %78, %547, %511, %447, %411, %324, %288, %201, %165, %171, %207, %294, %330, %417, %453, %517, %481, %553, %178, %301, %424, %524, %459, %555, %519, %455, %419, %332, %296, %209, %173, %42, %21, %10, %35, %46, %56, %14, %566, %559, %492, %470, %336, %213, %60
  %568 = phi i1 [ false, %559 ], [ false, %524 ], [ false, %492 ], [ false, %481 ], [ false, %470 ], [ false, %424 ], [ false, %336 ], [ false, %301 ], [ false, %213 ], [ false, %178 ], [ false, %148 ], [ false, %136 ], [ false, %124 ], [ false, %112 ], [ false, %101 ], [ false, %90 ], [ false, %78 ], [ false, %60 ], [ true, %566 ], [ false, %14 ], [ false, %56 ], [ false, %46 ], [ false, %35 ], [ false, %10 ], [ false, %21 ], [ false, %42 ], [ false, %171 ], [ false, %173 ], [ false, %165 ], [ false, %207 ], [ false, %209 ], [ false, %201 ], [ false, %294 ], [ false, %296 ], [ false, %288 ], [ false, %330 ], [ false, %332 ], [ false, %324 ], [ false, %417 ], [ false, %419 ], [ false, %411 ], [ false, %459 ], [ false, %453 ], [ false, %455 ], [ false, %447 ], [ false, %517 ], [ false, %519 ], [ false, %511 ], [ false, %553 ], [ false, %555 ], [ false, %547 ], [ false, %371 ], [ false, %376 ], [ false, %392 ], [ false, %378 ], [ false, %382 ], [ false, %248 ], [ false, %253 ], [ false, %269 ], [ false, %255 ], [ false, %259 ]
  ret i1 %568
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10extensions23declarative_net_request4flat9RegexRule6VerifyERN11flatbuffers8VerifierE(%"struct.extensions::declarative_net_request::flat::RegexRule"*, %"class.flatbuffers::Verifier"* dereferenceable(48)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.flatbuffers::Verifier"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = ptrtoint %"struct.extensions::declarative_net_request::flat::RegexRule"* %0 to i64
  %6 = sub i64 %5, %4
  %7 = and i64 %6, 3
  %8 = icmp eq i64 %7, 0
  %9 = inttoptr i64 %4 to i8*
  br i1 %8, label %14, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %229

14:                                               ; preds = %10, %2
  %15 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %16, 4
  %18 = add i64 %16, -4
  %19 = icmp uge i64 %18, %6
  %20 = and i1 %17, %19
  br i1 %20, label %21, label %229

21:                                               ; preds = %14
  %22 = bitcast %"struct.extensions::declarative_net_request::flat::RegexRule"* %0 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = sub i64 %6, %24
  %26 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = add i32 %27, 1
  store i32 %28, i32* %26, align 8
  %29 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = add i32 %30, 1
  store i32 %31, i32* %29, align 8
  %32 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp ugt i32 %28, %33
  br i1 %34, label %229, label %35

35:                                               ; preds = %21
  %36 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 5
  %37 = load i32, i32* %36, align 4
  %38 = icmp ugt i32 %31, %37
  br i1 %38, label %229, label %39

39:                                               ; preds = %35
  %40 = and i64 %25, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %44 = load i8, i8* %43, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %229

46:                                               ; preds = %42, %39
  %47 = add i64 %16, -2
  %48 = icmp ult i64 %47, %25
  br i1 %48, label %229, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds i8, i8* %9, i64 %25
  %51 = bitcast i8* %50 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i64
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %58 = load i8, i8* %57, align 8, !range !2
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %229

60:                                               ; preds = %49, %56
  %61 = icmp ugt i64 %16, %53
  %62 = sub i64 %16, %53
  %63 = icmp uge i64 %62, %25
  %64 = and i1 %61, %63
  br i1 %64, label %65, label %229

65:                                               ; preds = %60
  %66 = load i32, i32* %22, align 4
  %67 = sext i32 %66 to i64
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %0, i64 0, i32 0, i32 0, i64 %68
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = icmp ugt i16 %71, 4
  br i1 %72, label %73, label %121

73:                                               ; preds = %65
  %74 = getelementptr inbounds i8, i8* %69, i64 4
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = icmp eq i16 %76, 0
  br i1 %77, label %101, label %78

78:                                               ; preds = %73
  %79 = zext i16 %76 to i64
  %80 = add i64 %6, %79
  %81 = and i64 %80, 3
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %89, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %85 = load i8, i8* %84, align 8, !range !2
  %86 = icmp ne i8 %85, 0
  %87 = icmp ult i64 %18, %80
  %88 = or i1 %86, %87
  br i1 %88, label %229, label %91

89:                                               ; preds = %78
  %90 = icmp ult i64 %18, %80
  br i1 %90, label %229, label %91

91:                                               ; preds = %83, %89
  %92 = getelementptr inbounds i8, i8* %9, i64 %80
  %93 = bitcast i8* %92 to i32*
  %94 = load i32, i32* %93, align 4
  %95 = icmp sgt i32 %94, 0
  br i1 %95, label %96, label %229

96:                                               ; preds = %91
  %97 = zext i32 %94 to i64
  %98 = add i64 %80, %97
  %99 = add i64 %16, -1
  %100 = icmp ult i64 %99, %98
  br i1 %100, label %229, label %101

101:                                              ; preds = %96, %73
  %102 = getelementptr inbounds i8, i8* %69, i64 4
  %103 = bitcast i8* %102 to i16*
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i64
  %106 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %0, i64 0, i32 0, i32 0, i64 %105
  %107 = icmp eq i16 %104, 0
  br i1 %107, label %121, label %108

108:                                              ; preds = %101
  %109 = bitcast i8* %106 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %106, i64 %111
  %113 = icmp eq i8* %112, null
  br i1 %113, label %121, label %114

114:                                              ; preds = %108
  %115 = bitcast i8* %112 to %"struct.url_pattern_index::flat::UrlRule"*
  %116 = tail call zeroext i1 @_ZNK17url_pattern_index4flat7UrlRule6VerifyERN11flatbuffers8VerifierE(%"struct.url_pattern_index::flat::UrlRule"* nonnull %115, %"class.flatbuffers::Verifier"* dereferenceable(48) %1) #9
  br i1 %116, label %117, label %229

117:                                              ; preds = %114
  %118 = load i32, i32* %22, align 4
  %119 = sext i32 %118 to i64
  %120 = sub nsw i64 0, %119
  br label %121

121:                                              ; preds = %65, %117, %101, %108
  %122 = phi i64 [ %120, %117 ], [ %68, %101 ], [ %68, %108 ], [ %68, %65 ]
  %123 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %0, i64 0, i32 0, i32 0, i64 %122
  %124 = bitcast i8* %123 to i16*
  %125 = load i16, i16* %124, align 2
  %126 = icmp ugt i16 %125, 6
  br i1 %126, label %127, label %226

127:                                              ; preds = %121
  %128 = getelementptr inbounds i8, i8* %123, i64 6
  %129 = bitcast i8* %128 to i16*
  %130 = load i16, i16* %129, align 2
  %131 = icmp eq i16 %130, 0
  br i1 %131, label %142, label %132

132:                                              ; preds = %127
  %133 = load i64, i64* %3, align 8
  %134 = zext i16 %130 to i64
  %135 = add i64 %134, %5
  %136 = sub i64 %135, %133
  %137 = load i64, i64* %15, align 8
  %138 = icmp ugt i64 %137, 1
  %139 = add i64 %137, -1
  %140 = icmp uge i64 %139, %136
  %141 = and i1 %138, %140
  br i1 %141, label %142, label %229

142:                                              ; preds = %127, %132
  %143 = icmp ugt i16 %125, 8
  br i1 %143, label %144, label %226

144:                                              ; preds = %142
  %145 = getelementptr inbounds i8, i8* %123, i64 8
  %146 = bitcast i8* %145 to i16*
  %147 = load i16, i16* %146, align 2
  %148 = icmp eq i16 %147, 0
  br i1 %148, label %177, label %149

149:                                              ; preds = %144
  %150 = load i64, i64* %3, align 8
  %151 = sub i64 %5, %150
  %152 = zext i16 %147 to i64
  %153 = add i64 %151, %152
  %154 = and i64 %153, 3
  %155 = icmp eq i64 %154, 0
  %156 = inttoptr i64 %150 to i8*
  br i1 %155, label %161, label %157

157:                                              ; preds = %149
  %158 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %159 = load i8, i8* %158, align 8, !range !2
  %160 = icmp eq i8 %159, 0
  br i1 %160, label %161, label %229

161:                                              ; preds = %157, %149
  %162 = load i64, i64* %15, align 8
  %163 = icmp ugt i64 %162, 4
  %164 = add i64 %162, -4
  %165 = icmp uge i64 %164, %153
  %166 = and i1 %163, %165
  br i1 %166, label %167, label %229

167:                                              ; preds = %161
  %168 = getelementptr inbounds i8, i8* %156, i64 %153
  %169 = bitcast i8* %168 to i32*
  %170 = load i32, i32* %169, align 4
  %171 = icmp sgt i32 %170, 0
  br i1 %171, label %172, label %229

172:                                              ; preds = %167
  %173 = zext i32 %170 to i64
  %174 = add i64 %153, %173
  %175 = add i64 %162, -1
  %176 = icmp ult i64 %175, %174
  br i1 %176, label %229, label %177

177:                                              ; preds = %172, %144
  %178 = getelementptr inbounds i8, i8* %123, i64 8
  %179 = bitcast i8* %178 to i16*
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i64
  %182 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::RegexRule", %"struct.extensions::declarative_net_request::flat::RegexRule"* %0, i64 0, i32 0, i32 0, i64 %181
  %183 = icmp eq i16 %180, 0
  br i1 %183, label %226, label %184

184:                                              ; preds = %177
  %185 = bitcast i8* %182 to i32*
  %186 = load i32, i32* %185, align 4
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %182, i64 %187
  %189 = icmp eq i8* %188, null
  br i1 %189, label %226, label %190

190:                                              ; preds = %184
  %191 = load i64, i64* %3, align 8
  %192 = ptrtoint i8* %188 to i64
  %193 = sub i64 %192, %191
  %194 = and i64 %193, 3
  %195 = icmp eq i64 %194, 0
  %196 = inttoptr i64 %191 to i8*
  br i1 %195, label %201, label %197

197:                                              ; preds = %190
  %198 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %199 = load i8, i8* %198, align 8, !range !2
  %200 = icmp eq i8 %199, 0
  br i1 %200, label %201, label %229

201:                                              ; preds = %197, %190
  %202 = load i64, i64* %15, align 8
  %203 = icmp ugt i64 %202, 4
  %204 = add i64 %202, -4
  %205 = icmp uge i64 %204, %193
  %206 = and i1 %203, %205
  br i1 %206, label %207, label %229

207:                                              ; preds = %201
  %208 = bitcast i8* %188 to i32*
  %209 = load i32, i32* %208, align 4
  %210 = icmp ult i32 %209, 2147483647
  br i1 %210, label %211, label %229

211:                                              ; preds = %207
  %212 = zext i32 %209 to i64
  %213 = add nuw nsw i64 %212, 4
  %214 = add i64 %213, %193
  %215 = icmp ule i64 %202, %213
  %216 = sub i64 %202, %213
  %217 = icmp ult i64 %216, %193
  %218 = or i1 %215, %217
  %219 = add i64 %202, -1
  %220 = icmp ult i64 %219, %214
  %221 = or i1 %220, %218
  br i1 %221, label %229, label %222

222:                                              ; preds = %211
  %223 = getelementptr inbounds i8, i8* %196, i64 %214
  %224 = load i8, i8* %223, align 1
  %225 = icmp eq i8 %224, 0
  br i1 %225, label %226, label %229

226:                                              ; preds = %142, %121, %177, %184, %222
  %227 = load i32, i32* %26, align 8
  %228 = add i32 %227, -1
  store i32 %228, i32* %26, align 8
  br label %229

229:                                              ; preds = %83, %89, %96, %172, %211, %197, %207, %201, %157, %167, %161, %91, %42, %21, %10, %35, %46, %56, %14, %226, %222, %132, %114, %60
  %230 = phi i1 [ false, %222 ], [ false, %172 ], [ false, %132 ], [ false, %114 ], [ false, %96 ], [ false, %60 ], [ true, %226 ], [ false, %14 ], [ false, %56 ], [ false, %46 ], [ false, %35 ], [ false, %10 ], [ false, %21 ], [ false, %42 ], [ false, %89 ], [ false, %91 ], [ false, %83 ], [ false, %161 ], [ false, %167 ], [ false, %157 ], [ false, %211 ], [ false, %201 ], [ false, %207 ], [ false, %197 ]
  ret i1 %230
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10extensions23declarative_net_request4flat15UrlRuleMetadata6VerifyERN11flatbuffers8VerifierE(%"struct.extensions::declarative_net_request::flat::UrlRuleMetadata"*, %"class.flatbuffers::Verifier"* dereferenceable(48)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.flatbuffers::Verifier"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = ptrtoint %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata"* %0 to i64
  %6 = sub i64 %5, %4
  %7 = and i64 %6, 3
  %8 = icmp eq i64 %7, 0
  %9 = inttoptr i64 %4 to i8*
  br i1 %8, label %14, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %440

14:                                               ; preds = %10, %2
  %15 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %16, 4
  %18 = add i64 %16, -4
  %19 = icmp uge i64 %18, %6
  %20 = and i1 %17, %19
  br i1 %20, label %21, label %440

21:                                               ; preds = %14
  %22 = bitcast %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata"* %0 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = sub i64 %6, %24
  %26 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = add i32 %27, 1
  store i32 %28, i32* %26, align 8
  %29 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = add i32 %30, 1
  store i32 %31, i32* %29, align 8
  %32 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp ugt i32 %28, %33
  br i1 %34, label %440, label %35

35:                                               ; preds = %21
  %36 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 5
  %37 = load i32, i32* %36, align 4
  %38 = icmp ugt i32 %31, %37
  br i1 %38, label %440, label %39

39:                                               ; preds = %35
  %40 = and i64 %25, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %44 = load i8, i8* %43, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %440

46:                                               ; preds = %42, %39
  %47 = add i64 %16, -2
  %48 = icmp ult i64 %47, %25
  br i1 %48, label %440, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds i8, i8* %9, i64 %25
  %51 = bitcast i8* %50 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i64
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %58 = load i8, i8* %57, align 8, !range !2
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %440

60:                                               ; preds = %49, %56
  %61 = icmp ugt i64 %16, %53
  %62 = sub i64 %16, %53
  %63 = icmp uge i64 %62, %25
  %64 = and i1 %61, %63
  br i1 %64, label %65, label %440

65:                                               ; preds = %60
  %66 = load i32, i32* %22, align 4
  %67 = sext i32 %66 to i64
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata", %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata"* %0, i64 0, i32 0, i32 0, i64 %68
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = icmp ugt i16 %71, 4
  br i1 %72, label %73, label %219

73:                                               ; preds = %65
  %74 = getelementptr inbounds i8, i8* %69, i64 4
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = icmp eq i16 %76, 0
  br i1 %77, label %82, label %78

78:                                               ; preds = %73
  %79 = zext i16 %76 to i64
  %80 = add i64 %6, %79
  %81 = icmp ult i64 %18, %80
  br i1 %81, label %440, label %82

82:                                               ; preds = %78, %73
  %83 = icmp ugt i16 %71, 6
  br i1 %83, label %84, label %219

84:                                               ; preds = %82
  %85 = getelementptr inbounds i8, i8* %69, i64 6
  %86 = bitcast i8* %85 to i16*
  %87 = load i16, i16* %86, align 2
  %88 = icmp eq i16 %87, 0
  br i1 %88, label %94, label %89

89:                                               ; preds = %84
  %90 = zext i16 %87 to i64
  %91 = add i64 %6, %90
  %92 = add i64 %16, -1
  %93 = icmp ult i64 %92, %91
  br i1 %93, label %440, label %94

94:                                               ; preds = %89, %84
  %95 = icmp ugt i16 %71, 8
  br i1 %95, label %96, label %219

96:                                               ; preds = %94
  %97 = getelementptr inbounds i8, i8* %69, i64 8
  %98 = bitcast i8* %97 to i16*
  %99 = load i16, i16* %98, align 2
  %100 = icmp eq i16 %99, 0
  br i1 %100, label %124, label %101

101:                                              ; preds = %96
  %102 = zext i16 %99 to i64
  %103 = add i64 %6, %102
  %104 = and i64 %103, 3
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %112, label %106

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %108 = load i8, i8* %107, align 8, !range !2
  %109 = icmp ne i8 %108, 0
  %110 = icmp ult i64 %18, %103
  %111 = or i1 %109, %110
  br i1 %111, label %440, label %114

112:                                              ; preds = %101
  %113 = icmp ult i64 %18, %103
  br i1 %113, label %440, label %114

114:                                              ; preds = %106, %112
  %115 = getelementptr inbounds i8, i8* %9, i64 %103
  %116 = bitcast i8* %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = icmp sgt i32 %117, 0
  br i1 %118, label %119, label %440

119:                                              ; preds = %114
  %120 = zext i32 %117 to i64
  %121 = add i64 %103, %120
  %122 = add i64 %16, -1
  %123 = icmp ult i64 %122, %121
  br i1 %123, label %440, label %124

124:                                              ; preds = %96, %119
  %125 = getelementptr inbounds i8, i8* %69, i64 8
  %126 = bitcast i8* %125 to i16*
  %127 = load i16, i16* %126, align 2
  %128 = zext i16 %127 to i64
  %129 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata", %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata"* %0, i64 0, i32 0, i32 0, i64 %128
  %130 = icmp eq i16 %127, 0
  br i1 %130, label %169, label %131

131:                                              ; preds = %124
  %132 = bitcast i8* %129 to i32*
  %133 = load i32, i32* %132, align 4
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds i8, i8* %129, i64 %134
  %136 = icmp eq i8* %135, null
  br i1 %136, label %169, label %137

137:                                              ; preds = %131
  %138 = ptrtoint i8* %135 to i64
  %139 = sub i64 %138, %4
  %140 = and i64 %139, 3
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %148, label %142

142:                                              ; preds = %137
  %143 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %144 = load i8, i8* %143, align 8, !range !2
  %145 = icmp ne i8 %144, 0
  %146 = icmp ult i64 %18, %139
  %147 = or i1 %145, %146
  br i1 %147, label %440, label %150

148:                                              ; preds = %137
  %149 = icmp ult i64 %18, %139
  br i1 %149, label %440, label %150

150:                                              ; preds = %142, %148
  %151 = bitcast i8* %135 to i32*
  %152 = load i32, i32* %151, align 4
  %153 = icmp ult i32 %152, 2147483647
  br i1 %153, label %154, label %440

154:                                              ; preds = %150
  %155 = zext i32 %152 to i64
  %156 = add nuw nsw i64 %155, 4
  %157 = add i64 %156, %139
  %158 = icmp ule i64 %16, %156
  %159 = sub i64 %16, %156
  %160 = icmp ult i64 %159, %139
  %161 = or i1 %158, %160
  %162 = add i64 %16, -1
  %163 = icmp ult i64 %162, %157
  %164 = or i1 %163, %161
  br i1 %164, label %440, label %165

165:                                              ; preds = %154
  %166 = getelementptr inbounds i8, i8* %9, i64 %157
  %167 = load i8, i8* %166, align 1
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %169, label %440

169:                                              ; preds = %124, %131, %165
  %170 = icmp ugt i16 %71, 10
  br i1 %170, label %171, label %219

171:                                              ; preds = %169
  %172 = getelementptr inbounds i8, i8* %69, i64 10
  %173 = bitcast i8* %172 to i16*
  %174 = load i16, i16* %173, align 2
  %175 = icmp eq i16 %174, 0
  br i1 %175, label %199, label %176

176:                                              ; preds = %171
  %177 = zext i16 %174 to i64
  %178 = add i64 %6, %177
  %179 = and i64 %178, 3
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %187, label %181

181:                                              ; preds = %176
  %182 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %183 = load i8, i8* %182, align 8, !range !2
  %184 = icmp ne i8 %183, 0
  %185 = icmp ult i64 %18, %178
  %186 = or i1 %184, %185
  br i1 %186, label %440, label %189

187:                                              ; preds = %176
  %188 = icmp ult i64 %18, %178
  br i1 %188, label %440, label %189

189:                                              ; preds = %181, %187
  %190 = getelementptr inbounds i8, i8* %9, i64 %178
  %191 = bitcast i8* %190 to i32*
  %192 = load i32, i32* %191, align 4
  %193 = icmp sgt i32 %192, 0
  br i1 %193, label %194, label %440

194:                                              ; preds = %189
  %195 = zext i32 %192 to i64
  %196 = add i64 %178, %195
  %197 = add i64 %16, -1
  %198 = icmp ult i64 %197, %196
  br i1 %198, label %440, label %199

199:                                              ; preds = %194, %171
  %200 = getelementptr inbounds i8, i8* %69, i64 10
  %201 = bitcast i8* %200 to i16*
  %202 = load i16, i16* %201, align 2
  %203 = zext i16 %202 to i64
  %204 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata", %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata"* %0, i64 0, i32 0, i32 0, i64 %203
  %205 = icmp eq i16 %202, 0
  br i1 %205, label %219, label %206

206:                                              ; preds = %199
  %207 = bitcast i8* %204 to i32*
  %208 = load i32, i32* %207, align 4
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds i8, i8* %204, i64 %209
  %211 = icmp eq i8* %210, null
  br i1 %211, label %219, label %212

212:                                              ; preds = %206
  %213 = bitcast i8* %210 to %"struct.extensions::declarative_net_request::flat::UrlTransform"*
  %214 = tail call zeroext i1 @_ZNK10extensions23declarative_net_request4flat12UrlTransform6VerifyERN11flatbuffers8VerifierE(%"struct.extensions::declarative_net_request::flat::UrlTransform"* nonnull %213, %"class.flatbuffers::Verifier"* dereferenceable(48) %1) #9
  br i1 %214, label %215, label %440

215:                                              ; preds = %212
  %216 = load i32, i32* %22, align 4
  %217 = sext i32 %216 to i64
  %218 = sub nsw i64 0, %217
  br label %219

219:                                              ; preds = %169, %94, %82, %65, %215, %199, %206
  %220 = phi i64 [ %218, %215 ], [ %68, %199 ], [ %68, %206 ], [ %68, %65 ], [ %68, %82 ], [ %68, %94 ], [ %68, %169 ]
  %221 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata", %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata"* %0, i64 0, i32 0, i32 0, i64 %220
  %222 = bitcast i8* %221 to i16*
  %223 = load i16, i16* %222, align 2
  %224 = icmp ugt i16 %223, 12
  br i1 %224, label %225, label %330

225:                                              ; preds = %219
  %226 = getelementptr inbounds i8, i8* %221, i64 12
  %227 = bitcast i8* %226 to i16*
  %228 = load i16, i16* %227, align 2
  %229 = icmp eq i16 %228, 0
  br i1 %229, label %258, label %230

230:                                              ; preds = %225
  %231 = load i64, i64* %3, align 8
  %232 = sub i64 %5, %231
  %233 = zext i16 %228 to i64
  %234 = add i64 %232, %233
  %235 = and i64 %234, 3
  %236 = icmp eq i64 %235, 0
  %237 = inttoptr i64 %231 to i8*
  br i1 %236, label %242, label %238

238:                                              ; preds = %230
  %239 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %240 = load i8, i8* %239, align 8, !range !2
  %241 = icmp eq i8 %240, 0
  br i1 %241, label %242, label %440

242:                                              ; preds = %238, %230
  %243 = load i64, i64* %15, align 8
  %244 = icmp ugt i64 %243, 4
  %245 = add i64 %243, -4
  %246 = icmp uge i64 %245, %234
  %247 = and i1 %244, %246
  br i1 %247, label %248, label %440

248:                                              ; preds = %242
  %249 = getelementptr inbounds i8, i8* %237, i64 %234
  %250 = bitcast i8* %249 to i32*
  %251 = load i32, i32* %250, align 4
  %252 = icmp sgt i32 %251, 0
  br i1 %252, label %253, label %440

253:                                              ; preds = %248
  %254 = zext i32 %251 to i64
  %255 = add i64 %234, %254
  %256 = add i64 %243, -1
  %257 = icmp ult i64 %256, %255
  br i1 %257, label %440, label %258

258:                                              ; preds = %253, %225
  %259 = getelementptr inbounds i8, i8* %221, i64 12
  %260 = bitcast i8* %259 to i16*
  %261 = load i16, i16* %260, align 2
  %262 = zext i16 %261 to i64
  %263 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata", %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata"* %0, i64 0, i32 0, i32 0, i64 %262
  %264 = icmp eq i16 %261, 0
  br i1 %264, label %330, label %265

265:                                              ; preds = %258
  %266 = bitcast i8* %263 to i32*
  %267 = load i32, i32* %266, align 4
  %268 = zext i32 %267 to i64
  %269 = getelementptr inbounds i8, i8* %263, i64 %268
  %270 = icmp eq i8* %269, null
  br i1 %270, label %299, label %271

271:                                              ; preds = %265
  %272 = load i64, i64* %3, align 8
  %273 = ptrtoint i8* %269 to i64
  %274 = sub i64 %273, %272
  %275 = and i64 %274, 3
  %276 = icmp eq i64 %275, 0
  br i1 %276, label %281, label %277

277:                                              ; preds = %271
  %278 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %279 = load i8, i8* %278, align 8, !range !2
  %280 = icmp eq i8 %279, 0
  br i1 %280, label %281, label %440

281:                                              ; preds = %277, %271
  %282 = load i64, i64* %15, align 8
  %283 = icmp ugt i64 %282, 4
  %284 = add i64 %282, -4
  %285 = icmp uge i64 %284, %274
  %286 = and i1 %283, %285
  br i1 %286, label %287, label %440

287:                                              ; preds = %281
  %288 = bitcast i8* %269 to i32*
  %289 = load i32, i32* %288, align 4
  %290 = icmp ult i32 %289, 536870911
  br i1 %290, label %291, label %440

291:                                              ; preds = %287
  %292 = zext i32 %289 to i64
  %293 = shl nuw nsw i64 %292, 2
  %294 = add nuw nsw i64 %293, 4
  %295 = icmp ugt i64 %282, %294
  %296 = sub i64 %282, %294
  %297 = icmp uge i64 %296, %274
  %298 = and i1 %295, %297
  br i1 %298, label %299, label %440

299:                                              ; preds = %291, %265
  %300 = bitcast i8* %263 to i32*
  %301 = load i32, i32* %300, align 4
  %302 = zext i32 %301 to i64
  %303 = getelementptr inbounds i8, i8* %263, i64 %302
  %304 = icmp eq i8* %303, null
  br i1 %304, label %330, label %305

305:                                              ; preds = %299
  %306 = bitcast i8* %303 to i32*
  %307 = load i32, i32* %306, align 4
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %330, label %309

309:                                              ; preds = %305
  %310 = getelementptr inbounds i8, i8* %303, i64 4
  %311 = bitcast i8* %310 to i32*
  br label %316

312:                                              ; preds = %316
  %313 = load i32, i32* %306, align 4
  %314 = zext i32 %313 to i64
  %315 = icmp ult i64 %325, %314
  br i1 %315, label %316, label %326

316:                                              ; preds = %312, %309
  %317 = phi i64 [ 0, %309 ], [ %325, %312 ]
  %318 = getelementptr inbounds i32, i32* %311, i64 %317
  %319 = bitcast i32* %318 to i8*
  %320 = load i32, i32* %318, align 4
  %321 = zext i32 %320 to i64
  %322 = getelementptr inbounds i8, i8* %319, i64 %321
  %323 = bitcast i8* %322 to %"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo"*
  %324 = tail call zeroext i1 @_ZNK10extensions23declarative_net_request4flat16ModifyHeaderInfo6VerifyERN11flatbuffers8VerifierE(%"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo"* %323, %"class.flatbuffers::Verifier"* dereferenceable(48) %1) #9
  %325 = add nuw nsw i64 %317, 1
  br i1 %324, label %312, label %440

326:                                              ; preds = %312
  %327 = load i32, i32* %22, align 4
  %328 = sext i32 %327 to i64
  %329 = sub nsw i64 0, %328
  br label %330

330:                                              ; preds = %258, %219, %326, %299, %305
  %331 = phi i64 [ %329, %326 ], [ %220, %299 ], [ %220, %305 ], [ %220, %219 ], [ %220, %258 ]
  %332 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata", %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata"* %0, i64 0, i32 0, i32 0, i64 %331
  %333 = bitcast i8* %332 to i16*
  %334 = load i16, i16* %333, align 2
  %335 = icmp ugt i16 %334, 14
  br i1 %335, label %336, label %437

336:                                              ; preds = %330
  %337 = getelementptr inbounds i8, i8* %332, i64 14
  %338 = bitcast i8* %337 to i16*
  %339 = load i16, i16* %338, align 2
  %340 = icmp eq i16 %339, 0
  br i1 %340, label %369, label %341

341:                                              ; preds = %336
  %342 = load i64, i64* %3, align 8
  %343 = sub i64 %5, %342
  %344 = zext i16 %339 to i64
  %345 = add i64 %343, %344
  %346 = and i64 %345, 3
  %347 = icmp eq i64 %346, 0
  %348 = inttoptr i64 %342 to i8*
  br i1 %347, label %353, label %349

349:                                              ; preds = %341
  %350 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %351 = load i8, i8* %350, align 8, !range !2
  %352 = icmp eq i8 %351, 0
  br i1 %352, label %353, label %440

353:                                              ; preds = %349, %341
  %354 = load i64, i64* %15, align 8
  %355 = icmp ugt i64 %354, 4
  %356 = add i64 %354, -4
  %357 = icmp uge i64 %356, %345
  %358 = and i1 %355, %357
  br i1 %358, label %359, label %440

359:                                              ; preds = %353
  %360 = getelementptr inbounds i8, i8* %348, i64 %345
  %361 = bitcast i8* %360 to i32*
  %362 = load i32, i32* %361, align 4
  %363 = icmp sgt i32 %362, 0
  br i1 %363, label %364, label %440

364:                                              ; preds = %359
  %365 = zext i32 %362 to i64
  %366 = add i64 %345, %365
  %367 = add i64 %354, -1
  %368 = icmp ult i64 %367, %366
  br i1 %368, label %440, label %369

369:                                              ; preds = %364, %336
  %370 = getelementptr inbounds i8, i8* %332, i64 14
  %371 = bitcast i8* %370 to i16*
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i64
  %374 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata", %"struct.extensions::declarative_net_request::flat::UrlRuleMetadata"* %0, i64 0, i32 0, i32 0, i64 %373
  %375 = icmp eq i16 %372, 0
  br i1 %375, label %437, label %376

376:                                              ; preds = %369
  %377 = bitcast i8* %374 to i32*
  %378 = load i32, i32* %377, align 4
  %379 = zext i32 %378 to i64
  %380 = getelementptr inbounds i8, i8* %374, i64 %379
  %381 = icmp eq i8* %380, null
  br i1 %381, label %410, label %382

382:                                              ; preds = %376
  %383 = load i64, i64* %3, align 8
  %384 = ptrtoint i8* %380 to i64
  %385 = sub i64 %384, %383
  %386 = and i64 %385, 3
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %392, label %388

388:                                              ; preds = %382
  %389 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %390 = load i8, i8* %389, align 8, !range !2
  %391 = icmp eq i8 %390, 0
  br i1 %391, label %392, label %440

392:                                              ; preds = %388, %382
  %393 = load i64, i64* %15, align 8
  %394 = icmp ugt i64 %393, 4
  %395 = add i64 %393, -4
  %396 = icmp uge i64 %395, %385
  %397 = and i1 %394, %396
  br i1 %397, label %398, label %440

398:                                              ; preds = %392
  %399 = bitcast i8* %380 to i32*
  %400 = load i32, i32* %399, align 4
  %401 = icmp ult i32 %400, 536870911
  br i1 %401, label %402, label %440

402:                                              ; preds = %398
  %403 = zext i32 %400 to i64
  %404 = shl nuw nsw i64 %403, 2
  %405 = add nuw nsw i64 %404, 4
  %406 = icmp ugt i64 %393, %405
  %407 = sub i64 %393, %405
  %408 = icmp uge i64 %407, %385
  %409 = and i1 %406, %408
  br i1 %409, label %410, label %440

410:                                              ; preds = %402, %376
  %411 = bitcast i8* %374 to i32*
  %412 = load i32, i32* %411, align 4
  %413 = zext i32 %412 to i64
  %414 = getelementptr inbounds i8, i8* %374, i64 %413
  %415 = icmp eq i8* %414, null
  br i1 %415, label %437, label %416

416:                                              ; preds = %410
  %417 = bitcast i8* %414 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %437, label %420

420:                                              ; preds = %416
  %421 = getelementptr inbounds i8, i8* %414, i64 4
  %422 = bitcast i8* %421 to i32*
  br label %427

423:                                              ; preds = %427
  %424 = load i32, i32* %417, align 4
  %425 = zext i32 %424 to i64
  %426 = icmp ult i64 %436, %425
  br i1 %426, label %427, label %437

427:                                              ; preds = %423, %420
  %428 = phi i64 [ 0, %420 ], [ %436, %423 ]
  %429 = getelementptr inbounds i32, i32* %422, i64 %428
  %430 = bitcast i32* %429 to i8*
  %431 = load i32, i32* %429, align 4
  %432 = zext i32 %431 to i64
  %433 = getelementptr inbounds i8, i8* %430, i64 %432
  %434 = bitcast i8* %433 to %"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo"*
  %435 = tail call zeroext i1 @_ZNK10extensions23declarative_net_request4flat16ModifyHeaderInfo6VerifyERN11flatbuffers8VerifierE(%"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo"* %434, %"class.flatbuffers::Verifier"* dereferenceable(48) %1) #9
  %436 = add nuw nsw i64 %428, 1
  br i1 %435, label %423, label %440

437:                                              ; preds = %423, %369, %330, %410, %416
  %438 = load i32, i32* %26, align 8
  %439 = add i32 %438, -1
  store i32 %439, i32* %26, align 8
  br label %440

440:                                              ; preds = %316, %427, %89, %181, %142, %106, %112, %78, %148, %187, %119, %194, %253, %364, %154, %388, %398, %392, %349, %359, %353, %277, %287, %281, %238, %248, %242, %189, %150, %114, %42, %21, %10, %35, %46, %56, %14, %437, %402, %291, %212, %165, %60
  %441 = phi i1 [ false, %402 ], [ false, %364 ], [ false, %291 ], [ false, %253 ], [ false, %212 ], [ false, %194 ], [ false, %165 ], [ false, %119 ], [ false, %89 ], [ false, %78 ], [ false, %60 ], [ true, %437 ], [ false, %14 ], [ false, %56 ], [ false, %46 ], [ false, %35 ], [ false, %10 ], [ false, %21 ], [ false, %42 ], [ false, %112 ], [ false, %114 ], [ false, %106 ], [ false, %154 ], [ false, %148 ], [ false, %150 ], [ false, %142 ], [ false, %187 ], [ false, %189 ], [ false, %181 ], [ false, %242 ], [ false, %248 ], [ false, %238 ], [ false, %281 ], [ false, %287 ], [ false, %277 ], [ false, %353 ], [ false, %359 ], [ false, %349 ], [ false, %392 ], [ false, %398 ], [ false, %388 ], [ false, %427 ], [ false, %316 ]
  ret i1 %441
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10extensions23declarative_net_request4flat12UrlTransform6VerifyERN11flatbuffers8VerifierE(%"struct.extensions::declarative_net_request::flat::UrlTransform"*, %"class.flatbuffers::Verifier"* dereferenceable(48)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.flatbuffers::Verifier"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = ptrtoint %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0 to i64
  %6 = sub i64 %5, %4
  %7 = and i64 %6, 3
  %8 = icmp eq i64 %7, 0
  %9 = inttoptr i64 %4 to i8*
  br i1 %8, label %14, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %980

14:                                               ; preds = %10, %2
  %15 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %16, 4
  %18 = add i64 %16, -4
  %19 = icmp uge i64 %18, %6
  %20 = and i1 %17, %19
  br i1 %20, label %21, label %980

21:                                               ; preds = %14
  %22 = bitcast %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = sub i64 %6, %24
  %26 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = add i32 %27, 1
  store i32 %28, i32* %26, align 8
  %29 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = add i32 %30, 1
  store i32 %31, i32* %29, align 8
  %32 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp ugt i32 %28, %33
  br i1 %34, label %980, label %35

35:                                               ; preds = %21
  %36 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 5
  %37 = load i32, i32* %36, align 4
  %38 = icmp ugt i32 %31, %37
  br i1 %38, label %980, label %39

39:                                               ; preds = %35
  %40 = and i64 %25, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %44 = load i8, i8* %43, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %980

46:                                               ; preds = %42, %39
  %47 = add i64 %16, -2
  %48 = icmp ult i64 %47, %25
  br i1 %48, label %980, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds i8, i8* %9, i64 %25
  %51 = bitcast i8* %50 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i64
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %58 = load i8, i8* %57, align 8, !range !2
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %980

60:                                               ; preds = %49, %56
  %61 = icmp ugt i64 %16, %53
  %62 = sub i64 %16, %53
  %63 = icmp uge i64 %62, %25
  %64 = and i1 %61, %63
  br i1 %64, label %65, label %980

65:                                               ; preds = %60
  %66 = load i32, i32* %22, align 4
  %67 = sext i32 %66 to i64
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlTransform", %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0, i64 0, i32 0, i32 0, i64 %68
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = icmp ugt i16 %71, 4
  br i1 %72, label %73, label %704

73:                                               ; preds = %65
  %74 = getelementptr inbounds i8, i8* %69, i64 4
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = icmp eq i16 %76, 0
  br i1 %77, label %101, label %78

78:                                               ; preds = %73
  %79 = zext i16 %76 to i64
  %80 = add i64 %6, %79
  %81 = and i64 %80, 3
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %89, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %85 = load i8, i8* %84, align 8, !range !2
  %86 = icmp ne i8 %85, 0
  %87 = icmp ult i64 %18, %80
  %88 = or i1 %86, %87
  br i1 %88, label %980, label %91

89:                                               ; preds = %78
  %90 = icmp ult i64 %18, %80
  br i1 %90, label %980, label %91

91:                                               ; preds = %83, %89
  %92 = getelementptr inbounds i8, i8* %9, i64 %80
  %93 = bitcast i8* %92 to i32*
  %94 = load i32, i32* %93, align 4
  %95 = icmp sgt i32 %94, 0
  br i1 %95, label %96, label %980

96:                                               ; preds = %91
  %97 = zext i32 %94 to i64
  %98 = add i64 %80, %97
  %99 = add i64 %16, -1
  %100 = icmp ult i64 %99, %98
  br i1 %100, label %980, label %101

101:                                              ; preds = %96, %73
  %102 = getelementptr inbounds i8, i8* %69, i64 4
  %103 = bitcast i8* %102 to i16*
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i64
  %106 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlTransform", %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0, i64 0, i32 0, i32 0, i64 %105
  %107 = icmp eq i16 %104, 0
  br i1 %107, label %146, label %108

108:                                              ; preds = %101
  %109 = bitcast i8* %106 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %106, i64 %111
  %113 = icmp eq i8* %112, null
  br i1 %113, label %146, label %114

114:                                              ; preds = %108
  %115 = ptrtoint i8* %112 to i64
  %116 = sub i64 %115, %4
  %117 = and i64 %116, 3
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %125, label %119

119:                                              ; preds = %114
  %120 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %121 = load i8, i8* %120, align 8, !range !2
  %122 = icmp ne i8 %121, 0
  %123 = icmp ult i64 %18, %116
  %124 = or i1 %122, %123
  br i1 %124, label %980, label %127

125:                                              ; preds = %114
  %126 = icmp ult i64 %18, %116
  br i1 %126, label %980, label %127

127:                                              ; preds = %119, %125
  %128 = bitcast i8* %112 to i32*
  %129 = load i32, i32* %128, align 4
  %130 = icmp ult i32 %129, 2147483647
  br i1 %130, label %131, label %980

131:                                              ; preds = %127
  %132 = zext i32 %129 to i64
  %133 = add nuw nsw i64 %132, 4
  %134 = add i64 %133, %116
  %135 = icmp ule i64 %16, %133
  %136 = sub i64 %16, %133
  %137 = icmp ult i64 %136, %116
  %138 = or i1 %135, %137
  %139 = add i64 %16, -1
  %140 = icmp ult i64 %139, %134
  %141 = or i1 %140, %138
  br i1 %141, label %980, label %142

142:                                              ; preds = %131
  %143 = getelementptr inbounds i8, i8* %9, i64 %134
  %144 = load i8, i8* %143, align 1
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %146, label %980

146:                                              ; preds = %101, %108, %142
  %147 = icmp ugt i16 %71, 6
  br i1 %147, label %148, label %704

148:                                              ; preds = %146
  %149 = getelementptr inbounds i8, i8* %69, i64 6
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = icmp eq i16 %151, 0
  br i1 %152, label %176, label %153

153:                                              ; preds = %148
  %154 = zext i16 %151 to i64
  %155 = add i64 %6, %154
  %156 = and i64 %155, 3
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %164, label %158

158:                                              ; preds = %153
  %159 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %160 = load i8, i8* %159, align 8, !range !2
  %161 = icmp ne i8 %160, 0
  %162 = icmp ult i64 %18, %155
  %163 = or i1 %161, %162
  br i1 %163, label %980, label %166

164:                                              ; preds = %153
  %165 = icmp ult i64 %18, %155
  br i1 %165, label %980, label %166

166:                                              ; preds = %158, %164
  %167 = getelementptr inbounds i8, i8* %9, i64 %155
  %168 = bitcast i8* %167 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = icmp sgt i32 %169, 0
  br i1 %170, label %171, label %980

171:                                              ; preds = %166
  %172 = zext i32 %169 to i64
  %173 = add i64 %155, %172
  %174 = add i64 %16, -1
  %175 = icmp ult i64 %174, %173
  br i1 %175, label %980, label %176

176:                                              ; preds = %171, %148
  %177 = getelementptr inbounds i8, i8* %69, i64 6
  %178 = bitcast i8* %177 to i16*
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i64
  %181 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlTransform", %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0, i64 0, i32 0, i32 0, i64 %180
  %182 = icmp eq i16 %179, 0
  br i1 %182, label %221, label %183

183:                                              ; preds = %176
  %184 = bitcast i8* %181 to i32*
  %185 = load i32, i32* %184, align 4
  %186 = zext i32 %185 to i64
  %187 = getelementptr inbounds i8, i8* %181, i64 %186
  %188 = icmp eq i8* %187, null
  br i1 %188, label %221, label %189

189:                                              ; preds = %183
  %190 = ptrtoint i8* %187 to i64
  %191 = sub i64 %190, %4
  %192 = and i64 %191, 3
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %200, label %194

194:                                              ; preds = %189
  %195 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %196 = load i8, i8* %195, align 8, !range !2
  %197 = icmp ne i8 %196, 0
  %198 = icmp ult i64 %18, %191
  %199 = or i1 %197, %198
  br i1 %199, label %980, label %202

200:                                              ; preds = %189
  %201 = icmp ult i64 %18, %191
  br i1 %201, label %980, label %202

202:                                              ; preds = %194, %200
  %203 = bitcast i8* %187 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = icmp ult i32 %204, 2147483647
  br i1 %205, label %206, label %980

206:                                              ; preds = %202
  %207 = zext i32 %204 to i64
  %208 = add nuw nsw i64 %207, 4
  %209 = add i64 %208, %191
  %210 = icmp ule i64 %16, %208
  %211 = sub i64 %16, %208
  %212 = icmp ult i64 %211, %191
  %213 = or i1 %210, %212
  %214 = add i64 %16, -1
  %215 = icmp ult i64 %214, %209
  %216 = or i1 %215, %213
  br i1 %216, label %980, label %217

217:                                              ; preds = %206
  %218 = getelementptr inbounds i8, i8* %9, i64 %209
  %219 = load i8, i8* %218, align 1
  %220 = icmp eq i8 %219, 0
  br i1 %220, label %221, label %980

221:                                              ; preds = %176, %183, %217
  %222 = icmp ugt i16 %71, 8
  br i1 %222, label %223, label %704

223:                                              ; preds = %221
  %224 = getelementptr inbounds i8, i8* %69, i64 8
  %225 = bitcast i8* %224 to i16*
  %226 = load i16, i16* %225, align 2
  %227 = icmp eq i16 %226, 0
  br i1 %227, label %233, label %228

228:                                              ; preds = %223
  %229 = zext i16 %226 to i64
  %230 = add i64 %6, %229
  %231 = add i64 %16, -1
  %232 = icmp ult i64 %231, %230
  br i1 %232, label %980, label %233

233:                                              ; preds = %228, %223
  %234 = icmp ugt i16 %71, 10
  br i1 %234, label %235, label %704

235:                                              ; preds = %233
  %236 = getelementptr inbounds i8, i8* %69, i64 10
  %237 = bitcast i8* %236 to i16*
  %238 = load i16, i16* %237, align 2
  %239 = icmp eq i16 %238, 0
  br i1 %239, label %263, label %240

240:                                              ; preds = %235
  %241 = zext i16 %238 to i64
  %242 = add i64 %6, %241
  %243 = and i64 %242, 3
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %251, label %245

245:                                              ; preds = %240
  %246 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %247 = load i8, i8* %246, align 8, !range !2
  %248 = icmp ne i8 %247, 0
  %249 = icmp ult i64 %18, %242
  %250 = or i1 %248, %249
  br i1 %250, label %980, label %253

251:                                              ; preds = %240
  %252 = icmp ult i64 %18, %242
  br i1 %252, label %980, label %253

253:                                              ; preds = %245, %251
  %254 = getelementptr inbounds i8, i8* %9, i64 %242
  %255 = bitcast i8* %254 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = icmp sgt i32 %256, 0
  br i1 %257, label %258, label %980

258:                                              ; preds = %253
  %259 = zext i32 %256 to i64
  %260 = add i64 %242, %259
  %261 = add i64 %16, -1
  %262 = icmp ult i64 %261, %260
  br i1 %262, label %980, label %263

263:                                              ; preds = %235, %258
  %264 = getelementptr inbounds i8, i8* %69, i64 10
  %265 = bitcast i8* %264 to i16*
  %266 = load i16, i16* %265, align 2
  %267 = zext i16 %266 to i64
  %268 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlTransform", %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0, i64 0, i32 0, i32 0, i64 %267
  %269 = icmp eq i16 %266, 0
  br i1 %269, label %308, label %270

270:                                              ; preds = %263
  %271 = bitcast i8* %268 to i32*
  %272 = load i32, i32* %271, align 4
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds i8, i8* %268, i64 %273
  %275 = icmp eq i8* %274, null
  br i1 %275, label %308, label %276

276:                                              ; preds = %270
  %277 = ptrtoint i8* %274 to i64
  %278 = sub i64 %277, %4
  %279 = and i64 %278, 3
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %287, label %281

281:                                              ; preds = %276
  %282 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %283 = load i8, i8* %282, align 8, !range !2
  %284 = icmp ne i8 %283, 0
  %285 = icmp ult i64 %18, %278
  %286 = or i1 %284, %285
  br i1 %286, label %980, label %289

287:                                              ; preds = %276
  %288 = icmp ult i64 %18, %278
  br i1 %288, label %980, label %289

289:                                              ; preds = %281, %287
  %290 = bitcast i8* %274 to i32*
  %291 = load i32, i32* %290, align 4
  %292 = icmp ult i32 %291, 2147483647
  br i1 %292, label %293, label %980

293:                                              ; preds = %289
  %294 = zext i32 %291 to i64
  %295 = add nuw nsw i64 %294, 4
  %296 = add i64 %295, %278
  %297 = icmp ule i64 %16, %295
  %298 = sub i64 %16, %295
  %299 = icmp ult i64 %298, %278
  %300 = or i1 %297, %299
  %301 = add i64 %16, -1
  %302 = icmp ult i64 %301, %296
  %303 = or i1 %302, %300
  br i1 %303, label %980, label %304

304:                                              ; preds = %293
  %305 = getelementptr inbounds i8, i8* %9, i64 %296
  %306 = load i8, i8* %305, align 1
  %307 = icmp eq i8 %306, 0
  br i1 %307, label %308, label %980

308:                                              ; preds = %263, %270, %304
  %309 = icmp ugt i16 %71, 12
  br i1 %309, label %310, label %704

310:                                              ; preds = %308
  %311 = getelementptr inbounds i8, i8* %69, i64 12
  %312 = bitcast i8* %311 to i16*
  %313 = load i16, i16* %312, align 2
  %314 = icmp eq i16 %313, 0
  br i1 %314, label %320, label %315

315:                                              ; preds = %310
  %316 = zext i16 %313 to i64
  %317 = add i64 %6, %316
  %318 = add i64 %16, -1
  %319 = icmp ult i64 %318, %317
  br i1 %319, label %980, label %320

320:                                              ; preds = %315, %310
  %321 = icmp ugt i16 %71, 14
  br i1 %321, label %322, label %704

322:                                              ; preds = %320
  %323 = getelementptr inbounds i8, i8* %69, i64 14
  %324 = bitcast i8* %323 to i16*
  %325 = load i16, i16* %324, align 2
  %326 = icmp eq i16 %325, 0
  br i1 %326, label %350, label %327

327:                                              ; preds = %322
  %328 = zext i16 %325 to i64
  %329 = add i64 %6, %328
  %330 = and i64 %329, 3
  %331 = icmp eq i64 %330, 0
  br i1 %331, label %338, label %332

332:                                              ; preds = %327
  %333 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %334 = load i8, i8* %333, align 8, !range !2
  %335 = icmp ne i8 %334, 0
  %336 = icmp ult i64 %18, %329
  %337 = or i1 %335, %336
  br i1 %337, label %980, label %340

338:                                              ; preds = %327
  %339 = icmp ult i64 %18, %329
  br i1 %339, label %980, label %340

340:                                              ; preds = %332, %338
  %341 = getelementptr inbounds i8, i8* %9, i64 %329
  %342 = bitcast i8* %341 to i32*
  %343 = load i32, i32* %342, align 4
  %344 = icmp sgt i32 %343, 0
  br i1 %344, label %345, label %980

345:                                              ; preds = %340
  %346 = zext i32 %343 to i64
  %347 = add i64 %329, %346
  %348 = add i64 %16, -1
  %349 = icmp ult i64 %348, %347
  br i1 %349, label %980, label %350

350:                                              ; preds = %322, %345
  %351 = getelementptr inbounds i8, i8* %69, i64 14
  %352 = bitcast i8* %351 to i16*
  %353 = load i16, i16* %352, align 2
  %354 = zext i16 %353 to i64
  %355 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlTransform", %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0, i64 0, i32 0, i32 0, i64 %354
  %356 = icmp eq i16 %353, 0
  br i1 %356, label %395, label %357

357:                                              ; preds = %350
  %358 = bitcast i8* %355 to i32*
  %359 = load i32, i32* %358, align 4
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds i8, i8* %355, i64 %360
  %362 = icmp eq i8* %361, null
  br i1 %362, label %395, label %363

363:                                              ; preds = %357
  %364 = ptrtoint i8* %361 to i64
  %365 = sub i64 %364, %4
  %366 = and i64 %365, 3
  %367 = icmp eq i64 %366, 0
  br i1 %367, label %374, label %368

368:                                              ; preds = %363
  %369 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %370 = load i8, i8* %369, align 8, !range !2
  %371 = icmp ne i8 %370, 0
  %372 = icmp ult i64 %18, %365
  %373 = or i1 %371, %372
  br i1 %373, label %980, label %376

374:                                              ; preds = %363
  %375 = icmp ult i64 %18, %365
  br i1 %375, label %980, label %376

376:                                              ; preds = %368, %374
  %377 = bitcast i8* %361 to i32*
  %378 = load i32, i32* %377, align 4
  %379 = icmp ult i32 %378, 2147483647
  br i1 %379, label %380, label %980

380:                                              ; preds = %376
  %381 = zext i32 %378 to i64
  %382 = add nuw nsw i64 %381, 4
  %383 = add i64 %382, %365
  %384 = icmp ule i64 %16, %382
  %385 = sub i64 %16, %382
  %386 = icmp ult i64 %385, %365
  %387 = or i1 %384, %386
  %388 = add i64 %16, -1
  %389 = icmp ult i64 %388, %383
  %390 = or i1 %389, %387
  br i1 %390, label %980, label %391

391:                                              ; preds = %380
  %392 = getelementptr inbounds i8, i8* %9, i64 %383
  %393 = load i8, i8* %392, align 1
  %394 = icmp eq i8 %393, 0
  br i1 %394, label %395, label %980

395:                                              ; preds = %350, %357, %391
  %396 = icmp ugt i16 %71, 16
  br i1 %396, label %397, label %704

397:                                              ; preds = %395
  %398 = getelementptr inbounds i8, i8* %69, i64 16
  %399 = bitcast i8* %398 to i16*
  %400 = load i16, i16* %399, align 2
  %401 = icmp eq i16 %400, 0
  br i1 %401, label %407, label %402

402:                                              ; preds = %397
  %403 = zext i16 %400 to i64
  %404 = add i64 %6, %403
  %405 = add i64 %16, -1
  %406 = icmp ult i64 %405, %404
  br i1 %406, label %980, label %407

407:                                              ; preds = %402, %397
  %408 = icmp ugt i16 %71, 18
  br i1 %408, label %409, label %704

409:                                              ; preds = %407
  %410 = getelementptr inbounds i8, i8* %69, i64 18
  %411 = bitcast i8* %410 to i16*
  %412 = load i16, i16* %411, align 2
  %413 = icmp eq i16 %412, 0
  br i1 %413, label %437, label %414

414:                                              ; preds = %409
  %415 = zext i16 %412 to i64
  %416 = add i64 %6, %415
  %417 = and i64 %416, 3
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %425, label %419

419:                                              ; preds = %414
  %420 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %421 = load i8, i8* %420, align 8, !range !2
  %422 = icmp ne i8 %421, 0
  %423 = icmp ult i64 %18, %416
  %424 = or i1 %422, %423
  br i1 %424, label %980, label %427

425:                                              ; preds = %414
  %426 = icmp ult i64 %18, %416
  br i1 %426, label %980, label %427

427:                                              ; preds = %419, %425
  %428 = getelementptr inbounds i8, i8* %9, i64 %416
  %429 = bitcast i8* %428 to i32*
  %430 = load i32, i32* %429, align 4
  %431 = icmp sgt i32 %430, 0
  br i1 %431, label %432, label %980

432:                                              ; preds = %427
  %433 = zext i32 %430 to i64
  %434 = add i64 %416, %433
  %435 = add i64 %16, -1
  %436 = icmp ult i64 %435, %434
  br i1 %436, label %980, label %437

437:                                              ; preds = %409, %432
  %438 = getelementptr inbounds i8, i8* %69, i64 18
  %439 = bitcast i8* %438 to i16*
  %440 = load i16, i16* %439, align 2
  %441 = zext i16 %440 to i64
  %442 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlTransform", %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0, i64 0, i32 0, i32 0, i64 %441
  %443 = icmp eq i16 %440, 0
  br i1 %443, label %482, label %444

444:                                              ; preds = %437
  %445 = bitcast i8* %442 to i32*
  %446 = load i32, i32* %445, align 4
  %447 = zext i32 %446 to i64
  %448 = getelementptr inbounds i8, i8* %442, i64 %447
  %449 = icmp eq i8* %448, null
  br i1 %449, label %482, label %450

450:                                              ; preds = %444
  %451 = ptrtoint i8* %448 to i64
  %452 = sub i64 %451, %4
  %453 = and i64 %452, 3
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %461, label %455

455:                                              ; preds = %450
  %456 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %457 = load i8, i8* %456, align 8, !range !2
  %458 = icmp ne i8 %457, 0
  %459 = icmp ult i64 %18, %452
  %460 = or i1 %458, %459
  br i1 %460, label %980, label %463

461:                                              ; preds = %450
  %462 = icmp ult i64 %18, %452
  br i1 %462, label %980, label %463

463:                                              ; preds = %455, %461
  %464 = bitcast i8* %448 to i32*
  %465 = load i32, i32* %464, align 4
  %466 = icmp ult i32 %465, 2147483647
  br i1 %466, label %467, label %980

467:                                              ; preds = %463
  %468 = zext i32 %465 to i64
  %469 = add nuw nsw i64 %468, 4
  %470 = add i64 %469, %452
  %471 = icmp ule i64 %16, %469
  %472 = sub i64 %16, %469
  %473 = icmp ult i64 %472, %452
  %474 = or i1 %471, %473
  %475 = add i64 %16, -1
  %476 = icmp ult i64 %475, %470
  %477 = or i1 %476, %474
  br i1 %477, label %980, label %478

478:                                              ; preds = %467
  %479 = getelementptr inbounds i8, i8* %9, i64 %470
  %480 = load i8, i8* %479, align 1
  %481 = icmp eq i8 %480, 0
  br i1 %481, label %482, label %980

482:                                              ; preds = %437, %444, %478
  %483 = icmp ugt i16 %71, 20
  br i1 %483, label %484, label %704

484:                                              ; preds = %482
  %485 = getelementptr inbounds i8, i8* %69, i64 20
  %486 = bitcast i8* %485 to i16*
  %487 = load i16, i16* %486, align 2
  %488 = icmp eq i16 %487, 0
  br i1 %488, label %512, label %489

489:                                              ; preds = %484
  %490 = zext i16 %487 to i64
  %491 = add i64 %6, %490
  %492 = and i64 %491, 3
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %500, label %494

494:                                              ; preds = %489
  %495 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %496 = load i8, i8* %495, align 8, !range !2
  %497 = icmp ne i8 %496, 0
  %498 = icmp ult i64 %18, %491
  %499 = or i1 %497, %498
  br i1 %499, label %980, label %502

500:                                              ; preds = %489
  %501 = icmp ult i64 %18, %491
  br i1 %501, label %980, label %502

502:                                              ; preds = %494, %500
  %503 = getelementptr inbounds i8, i8* %9, i64 %491
  %504 = bitcast i8* %503 to i32*
  %505 = load i32, i32* %504, align 4
  %506 = icmp sgt i32 %505, 0
  br i1 %506, label %507, label %980

507:                                              ; preds = %502
  %508 = zext i32 %505 to i64
  %509 = add i64 %491, %508
  %510 = add i64 %16, -1
  %511 = icmp ult i64 %510, %509
  br i1 %511, label %980, label %512

512:                                              ; preds = %507, %484
  %513 = getelementptr inbounds i8, i8* %69, i64 20
  %514 = bitcast i8* %513 to i16*
  %515 = load i16, i16* %514, align 2
  %516 = zext i16 %515 to i64
  %517 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlTransform", %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0, i64 0, i32 0, i32 0, i64 %516
  %518 = icmp eq i16 %515, 0
  br i1 %518, label %605, label %519

519:                                              ; preds = %512
  %520 = bitcast i8* %517 to i32*
  %521 = load i32, i32* %520, align 4
  %522 = zext i32 %521 to i64
  %523 = getelementptr inbounds i8, i8* %517, i64 %522
  %524 = icmp eq i8* %523, null
  br i1 %524, label %550, label %525

525:                                              ; preds = %519
  %526 = ptrtoint i8* %523 to i64
  %527 = sub i64 %526, %4
  %528 = and i64 %527, 3
  %529 = icmp eq i64 %528, 0
  br i1 %529, label %536, label %530

530:                                              ; preds = %525
  %531 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %532 = load i8, i8* %531, align 8, !range !2
  %533 = icmp ne i8 %532, 0
  %534 = icmp ult i64 %18, %527
  %535 = or i1 %533, %534
  br i1 %535, label %980, label %538

536:                                              ; preds = %525
  %537 = icmp ult i64 %18, %527
  br i1 %537, label %980, label %538

538:                                              ; preds = %530, %536
  %539 = bitcast i8* %523 to i32*
  %540 = load i32, i32* %539, align 4
  %541 = icmp ult i32 %540, 536870911
  br i1 %541, label %542, label %980

542:                                              ; preds = %538
  %543 = zext i32 %540 to i64
  %544 = shl nuw nsw i64 %543, 2
  %545 = add nuw nsw i64 %544, 4
  %546 = icmp ugt i64 %16, %545
  %547 = sub i64 %16, %545
  %548 = icmp uge i64 %547, %527
  %549 = and i1 %546, %548
  br i1 %549, label %550, label %980

550:                                              ; preds = %542, %519
  %551 = bitcast i8* %517 to i32*
  %552 = load i32, i32* %551, align 4
  %553 = zext i32 %552 to i64
  %554 = getelementptr inbounds i8, i8* %517, i64 %553
  %555 = icmp eq i8* %554, null
  br i1 %555, label %605, label %556

556:                                              ; preds = %550
  %557 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %558 = getelementptr inbounds i8, i8* %554, i64 4
  %559 = bitcast i8* %558 to i32*
  %560 = bitcast i8* %554 to i32*
  %561 = load i32, i32* %560, align 4
  %562 = icmp eq i32 %561, 0
  br i1 %562, label %605, label %563

563:                                              ; preds = %556
  %564 = zext i32 %561 to i64
  %565 = add i64 %16, -1
  br label %566

566:                                              ; preds = %602, %563
  %567 = phi i64 [ 0, %563 ], [ %603, %602 ]
  %568 = getelementptr inbounds i32, i32* %559, i64 %567
  %569 = bitcast i32* %568 to i8*
  %570 = load i32, i32* %568, align 4
  %571 = zext i32 %570 to i64
  %572 = getelementptr inbounds i8, i8* %569, i64 %571
  %573 = ptrtoint i8* %572 to i64
  %574 = sub i64 %573, %4
  %575 = and i64 %574, 3
  %576 = icmp eq i64 %575, 0
  br i1 %576, label %582, label %577

577:                                              ; preds = %566
  %578 = load i8, i8* %557, align 8, !range !2
  %579 = icmp ne i8 %578, 0
  %580 = icmp ult i64 %18, %574
  %581 = or i1 %579, %580
  br i1 %581, label %980, label %584

582:                                              ; preds = %566
  %583 = icmp ult i64 %18, %574
  br i1 %583, label %980, label %584

584:                                              ; preds = %577, %582
  %585 = bitcast i8* %572 to i32*
  %586 = load i32, i32* %585, align 4
  %587 = icmp ult i32 %586, 2147483647
  br i1 %587, label %588, label %980

588:                                              ; preds = %584
  %589 = zext i32 %586 to i64
  %590 = add nuw nsw i64 %589, 4
  %591 = add i64 %590, %574
  %592 = icmp ule i64 %16, %590
  %593 = sub i64 %16, %590
  %594 = icmp ult i64 %593, %574
  %595 = or i1 %592, %594
  %596 = icmp ult i64 %565, %591
  %597 = or i1 %596, %595
  br i1 %597, label %980, label %598

598:                                              ; preds = %588
  %599 = getelementptr inbounds i8, i8* %9, i64 %591
  %600 = load i8, i8* %599, align 1
  %601 = icmp eq i8 %600, 0
  br i1 %601, label %602, label %980

602:                                              ; preds = %598
  %603 = add nuw nsw i64 %567, 1
  %604 = icmp eq i64 %603, %564
  br i1 %604, label %605, label %566

605:                                              ; preds = %602, %512, %556, %550
  %606 = icmp ugt i16 %71, 22
  br i1 %606, label %607, label %704

607:                                              ; preds = %605
  %608 = getelementptr inbounds i8, i8* %69, i64 22
  %609 = bitcast i8* %608 to i16*
  %610 = load i16, i16* %609, align 2
  %611 = icmp eq i16 %610, 0
  br i1 %611, label %635, label %612

612:                                              ; preds = %607
  %613 = zext i16 %610 to i64
  %614 = add i64 %6, %613
  %615 = and i64 %614, 3
  %616 = icmp eq i64 %615, 0
  br i1 %616, label %623, label %617

617:                                              ; preds = %612
  %618 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %619 = load i8, i8* %618, align 8, !range !2
  %620 = icmp ne i8 %619, 0
  %621 = icmp ult i64 %18, %614
  %622 = or i1 %620, %621
  br i1 %622, label %980, label %625

623:                                              ; preds = %612
  %624 = icmp ult i64 %18, %614
  br i1 %624, label %980, label %625

625:                                              ; preds = %617, %623
  %626 = getelementptr inbounds i8, i8* %9, i64 %614
  %627 = bitcast i8* %626 to i32*
  %628 = load i32, i32* %627, align 4
  %629 = icmp sgt i32 %628, 0
  br i1 %629, label %630, label %980

630:                                              ; preds = %625
  %631 = zext i32 %628 to i64
  %632 = add i64 %614, %631
  %633 = add i64 %16, -1
  %634 = icmp ult i64 %633, %632
  br i1 %634, label %980, label %635

635:                                              ; preds = %630, %607
  %636 = getelementptr inbounds i8, i8* %69, i64 22
  %637 = bitcast i8* %636 to i16*
  %638 = load i16, i16* %637, align 2
  %639 = zext i16 %638 to i64
  %640 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlTransform", %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0, i64 0, i32 0, i32 0, i64 %639
  %641 = icmp eq i16 %638, 0
  br i1 %641, label %704, label %642

642:                                              ; preds = %635
  %643 = bitcast i8* %640 to i32*
  %644 = load i32, i32* %643, align 4
  %645 = zext i32 %644 to i64
  %646 = getelementptr inbounds i8, i8* %640, i64 %645
  %647 = icmp eq i8* %646, null
  br i1 %647, label %673, label %648

648:                                              ; preds = %642
  %649 = ptrtoint i8* %646 to i64
  %650 = sub i64 %649, %4
  %651 = and i64 %650, 3
  %652 = icmp eq i64 %651, 0
  br i1 %652, label %659, label %653

653:                                              ; preds = %648
  %654 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %655 = load i8, i8* %654, align 8, !range !2
  %656 = icmp ne i8 %655, 0
  %657 = icmp ult i64 %18, %650
  %658 = or i1 %656, %657
  br i1 %658, label %980, label %661

659:                                              ; preds = %648
  %660 = icmp ult i64 %18, %650
  br i1 %660, label %980, label %661

661:                                              ; preds = %653, %659
  %662 = bitcast i8* %646 to i32*
  %663 = load i32, i32* %662, align 4
  %664 = icmp ult i32 %663, 536870911
  br i1 %664, label %665, label %980

665:                                              ; preds = %661
  %666 = zext i32 %663 to i64
  %667 = shl nuw nsw i64 %666, 2
  %668 = add nuw nsw i64 %667, 4
  %669 = icmp ugt i64 %16, %668
  %670 = sub i64 %16, %668
  %671 = icmp uge i64 %670, %650
  %672 = and i1 %669, %671
  br i1 %672, label %673, label %980

673:                                              ; preds = %665, %642
  %674 = bitcast i8* %640 to i32*
  %675 = load i32, i32* %674, align 4
  %676 = zext i32 %675 to i64
  %677 = getelementptr inbounds i8, i8* %640, i64 %676
  %678 = icmp eq i8* %677, null
  br i1 %678, label %704, label %679

679:                                              ; preds = %673
  %680 = bitcast i8* %677 to i32*
  %681 = load i32, i32* %680, align 4
  %682 = icmp eq i32 %681, 0
  br i1 %682, label %704, label %683

683:                                              ; preds = %679
  %684 = getelementptr inbounds i8, i8* %677, i64 4
  %685 = bitcast i8* %684 to i32*
  br label %690

686:                                              ; preds = %690
  %687 = load i32, i32* %680, align 4
  %688 = zext i32 %687 to i64
  %689 = icmp ult i64 %699, %688
  br i1 %689, label %690, label %700

690:                                              ; preds = %686, %683
  %691 = phi i64 [ 0, %683 ], [ %699, %686 ]
  %692 = getelementptr inbounds i32, i32* %685, i64 %691
  %693 = bitcast i32* %692 to i8*
  %694 = load i32, i32* %692, align 4
  %695 = zext i32 %694 to i64
  %696 = getelementptr inbounds i8, i8* %693, i64 %695
  %697 = bitcast i8* %696 to %"struct.extensions::declarative_net_request::flat::QueryKeyValue"*
  %698 = tail call zeroext i1 @_ZNK10extensions23declarative_net_request4flat13QueryKeyValue6VerifyERN11flatbuffers8VerifierE(%"struct.extensions::declarative_net_request::flat::QueryKeyValue"* %697, %"class.flatbuffers::Verifier"* dereferenceable(48) %1) #9
  %699 = add nuw nsw i64 %691, 1
  br i1 %698, label %686, label %980

700:                                              ; preds = %686
  %701 = load i32, i32* %22, align 4
  %702 = sext i32 %701 to i64
  %703 = sub nsw i64 0, %702
  br label %704

704:                                              ; preds = %605, %482, %308, %320, %146, %65, %233, %221, %635, %395, %407, %700, %673, %679
  %705 = phi i64 [ %703, %700 ], [ %68, %673 ], [ %68, %679 ], [ %68, %407 ], [ %68, %395 ], [ %68, %635 ], [ %68, %221 ], [ %68, %233 ], [ %68, %65 ], [ %68, %146 ], [ %68, %320 ], [ %68, %308 ], [ %68, %482 ], [ %68, %605 ]
  %706 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlTransform", %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0, i64 0, i32 0, i32 0, i64 %705
  %707 = bitcast i8* %706 to i16*
  %708 = load i16, i16* %707, align 2
  %709 = icmp ugt i16 %708, 24
  br i1 %709, label %710, label %977

710:                                              ; preds = %704
  %711 = getelementptr inbounds i8, i8* %706, i64 24
  %712 = bitcast i8* %711 to i16*
  %713 = load i16, i16* %712, align 2
  %714 = icmp eq i16 %713, 0
  br i1 %714, label %725, label %715

715:                                              ; preds = %710
  %716 = load i64, i64* %3, align 8
  %717 = zext i16 %713 to i64
  %718 = add i64 %717, %5
  %719 = sub i64 %718, %716
  %720 = load i64, i64* %15, align 8
  %721 = icmp ugt i64 %720, 1
  %722 = add i64 %720, -1
  %723 = icmp uge i64 %722, %719
  %724 = and i1 %721, %723
  br i1 %724, label %725, label %980

725:                                              ; preds = %710, %715
  %726 = icmp ugt i16 %708, 26
  br i1 %726, label %727, label %977

727:                                              ; preds = %725
  %728 = getelementptr inbounds i8, i8* %706, i64 26
  %729 = bitcast i8* %728 to i16*
  %730 = load i16, i16* %729, align 2
  %731 = icmp eq i16 %730, 0
  br i1 %731, label %760, label %732

732:                                              ; preds = %727
  %733 = load i64, i64* %3, align 8
  %734 = sub i64 %5, %733
  %735 = zext i16 %730 to i64
  %736 = add i64 %734, %735
  %737 = and i64 %736, 3
  %738 = icmp eq i64 %737, 0
  %739 = inttoptr i64 %733 to i8*
  br i1 %738, label %744, label %740

740:                                              ; preds = %732
  %741 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %742 = load i8, i8* %741, align 8, !range !2
  %743 = icmp eq i8 %742, 0
  br i1 %743, label %744, label %980

744:                                              ; preds = %740, %732
  %745 = load i64, i64* %15, align 8
  %746 = icmp ugt i64 %745, 4
  %747 = add i64 %745, -4
  %748 = icmp uge i64 %747, %736
  %749 = and i1 %746, %748
  br i1 %749, label %750, label %980

750:                                              ; preds = %744
  %751 = getelementptr inbounds i8, i8* %739, i64 %736
  %752 = bitcast i8* %751 to i32*
  %753 = load i32, i32* %752, align 4
  %754 = icmp sgt i32 %753, 0
  br i1 %754, label %755, label %980

755:                                              ; preds = %750
  %756 = zext i32 %753 to i64
  %757 = add i64 %736, %756
  %758 = add i64 %745, -1
  %759 = icmp ult i64 %758, %757
  br i1 %759, label %980, label %760

760:                                              ; preds = %755, %727
  %761 = getelementptr inbounds i8, i8* %706, i64 26
  %762 = bitcast i8* %761 to i16*
  %763 = load i16, i16* %762, align 2
  %764 = zext i16 %763 to i64
  %765 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlTransform", %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0, i64 0, i32 0, i32 0, i64 %764
  %766 = icmp eq i16 %763, 0
  br i1 %766, label %809, label %767

767:                                              ; preds = %760
  %768 = bitcast i8* %765 to i32*
  %769 = load i32, i32* %768, align 4
  %770 = zext i32 %769 to i64
  %771 = getelementptr inbounds i8, i8* %765, i64 %770
  %772 = icmp eq i8* %771, null
  br i1 %772, label %809, label %773

773:                                              ; preds = %767
  %774 = load i64, i64* %3, align 8
  %775 = ptrtoint i8* %771 to i64
  %776 = sub i64 %775, %774
  %777 = and i64 %776, 3
  %778 = icmp eq i64 %777, 0
  %779 = inttoptr i64 %774 to i8*
  br i1 %778, label %784, label %780

780:                                              ; preds = %773
  %781 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %782 = load i8, i8* %781, align 8, !range !2
  %783 = icmp eq i8 %782, 0
  br i1 %783, label %784, label %980

784:                                              ; preds = %780, %773
  %785 = load i64, i64* %15, align 8
  %786 = icmp ugt i64 %785, 4
  %787 = add i64 %785, -4
  %788 = icmp uge i64 %787, %776
  %789 = and i1 %786, %788
  br i1 %789, label %790, label %980

790:                                              ; preds = %784
  %791 = bitcast i8* %771 to i32*
  %792 = load i32, i32* %791, align 4
  %793 = icmp ult i32 %792, 2147483647
  br i1 %793, label %794, label %980

794:                                              ; preds = %790
  %795 = zext i32 %792 to i64
  %796 = add nuw nsw i64 %795, 4
  %797 = add i64 %796, %776
  %798 = icmp ule i64 %785, %796
  %799 = sub i64 %785, %796
  %800 = icmp ult i64 %799, %776
  %801 = or i1 %798, %800
  %802 = add i64 %785, -1
  %803 = icmp ult i64 %802, %797
  %804 = or i1 %803, %801
  br i1 %804, label %980, label %805

805:                                              ; preds = %794
  %806 = getelementptr inbounds i8, i8* %779, i64 %797
  %807 = load i8, i8* %806, align 1
  %808 = icmp eq i8 %807, 0
  br i1 %808, label %809, label %980

809:                                              ; preds = %760, %767, %805
  %810 = icmp ugt i16 %708, 28
  br i1 %810, label %811, label %977

811:                                              ; preds = %809
  %812 = getelementptr inbounds i8, i8* %706, i64 28
  %813 = bitcast i8* %812 to i16*
  %814 = load i16, i16* %813, align 2
  %815 = icmp eq i16 %814, 0
  br i1 %815, label %844, label %816

816:                                              ; preds = %811
  %817 = load i64, i64* %3, align 8
  %818 = sub i64 %5, %817
  %819 = zext i16 %814 to i64
  %820 = add i64 %818, %819
  %821 = and i64 %820, 3
  %822 = icmp eq i64 %821, 0
  %823 = inttoptr i64 %817 to i8*
  br i1 %822, label %828, label %824

824:                                              ; preds = %816
  %825 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %826 = load i8, i8* %825, align 8, !range !2
  %827 = icmp eq i8 %826, 0
  br i1 %827, label %828, label %980

828:                                              ; preds = %824, %816
  %829 = load i64, i64* %15, align 8
  %830 = icmp ugt i64 %829, 4
  %831 = add i64 %829, -4
  %832 = icmp uge i64 %831, %820
  %833 = and i1 %830, %832
  br i1 %833, label %834, label %980

834:                                              ; preds = %828
  %835 = getelementptr inbounds i8, i8* %823, i64 %820
  %836 = bitcast i8* %835 to i32*
  %837 = load i32, i32* %836, align 4
  %838 = icmp sgt i32 %837, 0
  br i1 %838, label %839, label %980

839:                                              ; preds = %834
  %840 = zext i32 %837 to i64
  %841 = add i64 %820, %840
  %842 = add i64 %829, -1
  %843 = icmp ult i64 %842, %841
  br i1 %843, label %980, label %844

844:                                              ; preds = %839, %811
  %845 = getelementptr inbounds i8, i8* %706, i64 28
  %846 = bitcast i8* %845 to i16*
  %847 = load i16, i16* %846, align 2
  %848 = zext i16 %847 to i64
  %849 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlTransform", %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0, i64 0, i32 0, i32 0, i64 %848
  %850 = icmp eq i16 %847, 0
  br i1 %850, label %893, label %851

851:                                              ; preds = %844
  %852 = bitcast i8* %849 to i32*
  %853 = load i32, i32* %852, align 4
  %854 = zext i32 %853 to i64
  %855 = getelementptr inbounds i8, i8* %849, i64 %854
  %856 = icmp eq i8* %855, null
  br i1 %856, label %893, label %857

857:                                              ; preds = %851
  %858 = load i64, i64* %3, align 8
  %859 = ptrtoint i8* %855 to i64
  %860 = sub i64 %859, %858
  %861 = and i64 %860, 3
  %862 = icmp eq i64 %861, 0
  %863 = inttoptr i64 %858 to i8*
  br i1 %862, label %868, label %864

864:                                              ; preds = %857
  %865 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %866 = load i8, i8* %865, align 8, !range !2
  %867 = icmp eq i8 %866, 0
  br i1 %867, label %868, label %980

868:                                              ; preds = %864, %857
  %869 = load i64, i64* %15, align 8
  %870 = icmp ugt i64 %869, 4
  %871 = add i64 %869, -4
  %872 = icmp uge i64 %871, %860
  %873 = and i1 %870, %872
  br i1 %873, label %874, label %980

874:                                              ; preds = %868
  %875 = bitcast i8* %855 to i32*
  %876 = load i32, i32* %875, align 4
  %877 = icmp ult i32 %876, 2147483647
  br i1 %877, label %878, label %980

878:                                              ; preds = %874
  %879 = zext i32 %876 to i64
  %880 = add nuw nsw i64 %879, 4
  %881 = add i64 %880, %860
  %882 = icmp ule i64 %869, %880
  %883 = sub i64 %869, %880
  %884 = icmp ult i64 %883, %860
  %885 = or i1 %882, %884
  %886 = add i64 %869, -1
  %887 = icmp ult i64 %886, %881
  %888 = or i1 %887, %885
  br i1 %888, label %980, label %889

889:                                              ; preds = %878
  %890 = getelementptr inbounds i8, i8* %863, i64 %881
  %891 = load i8, i8* %890, align 1
  %892 = icmp eq i8 %891, 0
  br i1 %892, label %893, label %980

893:                                              ; preds = %844, %851, %889
  %894 = icmp ugt i16 %708, 30
  br i1 %894, label %895, label %977

895:                                              ; preds = %893
  %896 = getelementptr inbounds i8, i8* %706, i64 30
  %897 = bitcast i8* %896 to i16*
  %898 = load i16, i16* %897, align 2
  %899 = icmp eq i16 %898, 0
  br i1 %899, label %928, label %900

900:                                              ; preds = %895
  %901 = load i64, i64* %3, align 8
  %902 = sub i64 %5, %901
  %903 = zext i16 %898 to i64
  %904 = add i64 %902, %903
  %905 = and i64 %904, 3
  %906 = icmp eq i64 %905, 0
  %907 = inttoptr i64 %901 to i8*
  br i1 %906, label %912, label %908

908:                                              ; preds = %900
  %909 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %910 = load i8, i8* %909, align 8, !range !2
  %911 = icmp eq i8 %910, 0
  br i1 %911, label %912, label %980

912:                                              ; preds = %908, %900
  %913 = load i64, i64* %15, align 8
  %914 = icmp ugt i64 %913, 4
  %915 = add i64 %913, -4
  %916 = icmp uge i64 %915, %904
  %917 = and i1 %914, %916
  br i1 %917, label %918, label %980

918:                                              ; preds = %912
  %919 = getelementptr inbounds i8, i8* %907, i64 %904
  %920 = bitcast i8* %919 to i32*
  %921 = load i32, i32* %920, align 4
  %922 = icmp sgt i32 %921, 0
  br i1 %922, label %923, label %980

923:                                              ; preds = %918
  %924 = zext i32 %921 to i64
  %925 = add i64 %904, %924
  %926 = add i64 %913, -1
  %927 = icmp ult i64 %926, %925
  br i1 %927, label %980, label %928

928:                                              ; preds = %923, %895
  %929 = getelementptr inbounds i8, i8* %706, i64 30
  %930 = bitcast i8* %929 to i16*
  %931 = load i16, i16* %930, align 2
  %932 = zext i16 %931 to i64
  %933 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::UrlTransform", %"struct.extensions::declarative_net_request::flat::UrlTransform"* %0, i64 0, i32 0, i32 0, i64 %932
  %934 = icmp eq i16 %931, 0
  br i1 %934, label %977, label %935

935:                                              ; preds = %928
  %936 = bitcast i8* %933 to i32*
  %937 = load i32, i32* %936, align 4
  %938 = zext i32 %937 to i64
  %939 = getelementptr inbounds i8, i8* %933, i64 %938
  %940 = icmp eq i8* %939, null
  br i1 %940, label %977, label %941

941:                                              ; preds = %935
  %942 = load i64, i64* %3, align 8
  %943 = ptrtoint i8* %939 to i64
  %944 = sub i64 %943, %942
  %945 = and i64 %944, 3
  %946 = icmp eq i64 %945, 0
  %947 = inttoptr i64 %942 to i8*
  br i1 %946, label %952, label %948

948:                                              ; preds = %941
  %949 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %950 = load i8, i8* %949, align 8, !range !2
  %951 = icmp eq i8 %950, 0
  br i1 %951, label %952, label %980

952:                                              ; preds = %948, %941
  %953 = load i64, i64* %15, align 8
  %954 = icmp ugt i64 %953, 4
  %955 = add i64 %953, -4
  %956 = icmp uge i64 %955, %944
  %957 = and i1 %954, %956
  br i1 %957, label %958, label %980

958:                                              ; preds = %952
  %959 = bitcast i8* %939 to i32*
  %960 = load i32, i32* %959, align 4
  %961 = icmp ult i32 %960, 2147483647
  br i1 %961, label %962, label %980

962:                                              ; preds = %958
  %963 = zext i32 %960 to i64
  %964 = add nuw nsw i64 %963, 4
  %965 = add i64 %964, %944
  %966 = icmp ule i64 %953, %964
  %967 = sub i64 %953, %964
  %968 = icmp ult i64 %967, %944
  %969 = or i1 %966, %968
  %970 = add i64 %953, -1
  %971 = icmp ult i64 %970, %965
  %972 = or i1 %971, %969
  br i1 %972, label %980, label %973

973:                                              ; preds = %962
  %974 = getelementptr inbounds i8, i8* %947, i64 %965
  %975 = load i8, i8* %974, align 1
  %976 = icmp eq i8 %975, 0
  br i1 %976, label %977, label %980

977:                                              ; preds = %893, %809, %725, %704, %928, %935, %973
  %978 = load i32, i32* %26, align 8
  %979 = add i32 %978, -1
  store i32 %979, i32* %26, align 8
  br label %980

980:                                              ; preds = %588, %584, %598, %582, %577, %690, %402, %315, %228, %653, %617, %530, %494, %455, %419, %368, %332, %281, %245, %194, %158, %119, %83, %89, %125, %164, %200, %251, %287, %338, %374, %425, %461, %500, %536, %623, %659, %96, %171, %258, %345, %432, %507, %630, %755, %839, %923, %962, %878, %794, %467, %380, %293, %206, %131, %948, %958, %952, %908, %918, %912, %864, %874, %868, %824, %834, %828, %780, %790, %784, %740, %750, %744, %661, %625, %538, %502, %463, %427, %376, %340, %289, %253, %202, %166, %127, %91, %42, %21, %10, %35, %46, %56, %14, %977, %973, %889, %805, %715, %665, %542, %478, %391, %304, %217, %142, %60
  %981 = phi i1 [ false, %973 ], [ false, %923 ], [ false, %889 ], [ false, %839 ], [ false, %805 ], [ false, %755 ], [ false, %715 ], [ false, %665 ], [ false, %630 ], [ false, %542 ], [ false, %507 ], [ false, %478 ], [ false, %432 ], [ false, %402 ], [ false, %391 ], [ false, %345 ], [ false, %315 ], [ false, %304 ], [ false, %258 ], [ false, %228 ], [ false, %217 ], [ false, %171 ], [ false, %142 ], [ false, %96 ], [ false, %60 ], [ true, %977 ], [ false, %14 ], [ false, %56 ], [ false, %46 ], [ false, %35 ], [ false, %10 ], [ false, %21 ], [ false, %42 ], [ false, %89 ], [ false, %91 ], [ false, %83 ], [ false, %131 ], [ false, %125 ], [ false, %127 ], [ false, %119 ], [ false, %164 ], [ false, %166 ], [ false, %158 ], [ false, %206 ], [ false, %200 ], [ false, %202 ], [ false, %194 ], [ false, %251 ], [ false, %253 ], [ false, %245 ], [ false, %293 ], [ false, %287 ], [ false, %289 ], [ false, %281 ], [ false, %338 ], [ false, %340 ], [ false, %332 ], [ false, %380 ], [ false, %374 ], [ false, %376 ], [ false, %368 ], [ false, %425 ], [ false, %427 ], [ false, %419 ], [ false, %467 ], [ false, %461 ], [ false, %463 ], [ false, %455 ], [ false, %500 ], [ false, %502 ], [ false, %494 ], [ false, %536 ], [ false, %538 ], [ false, %530 ], [ false, %623 ], [ false, %625 ], [ false, %617 ], [ false, %659 ], [ false, %661 ], [ false, %653 ], [ false, %744 ], [ false, %750 ], [ false, %740 ], [ false, %794 ], [ false, %784 ], [ false, %790 ], [ false, %780 ], [ false, %828 ], [ false, %834 ], [ false, %824 ], [ false, %878 ], [ false, %868 ], [ false, %874 ], [ false, %864 ], [ false, %912 ], [ false, %918 ], [ false, %908 ], [ false, %962 ], [ false, %952 ], [ false, %958 ], [ false, %948 ], [ false, %690 ], [ false, %577 ], [ false, %582 ], [ false, %598 ], [ false, %584 ], [ false, %588 ]
  ret i1 %981
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10extensions23declarative_net_request4flat13QueryKeyValue6VerifyERN11flatbuffers8VerifierE(%"struct.extensions::declarative_net_request::flat::QueryKeyValue"*, %"class.flatbuffers::Verifier"* dereferenceable(48)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.flatbuffers::Verifier"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = ptrtoint %"struct.extensions::declarative_net_request::flat::QueryKeyValue"* %0 to i64
  %6 = sub i64 %5, %4
  %7 = and i64 %6, 3
  %8 = icmp eq i64 %7, 0
  %9 = inttoptr i64 %4 to i8*
  br i1 %8, label %14, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %209

14:                                               ; preds = %10, %2
  %15 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %16, 4
  %18 = add i64 %16, -4
  %19 = icmp uge i64 %18, %6
  %20 = and i1 %17, %19
  br i1 %20, label %21, label %209

21:                                               ; preds = %14
  %22 = bitcast %"struct.extensions::declarative_net_request::flat::QueryKeyValue"* %0 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = sub i64 %6, %24
  %26 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = add i32 %27, 1
  store i32 %28, i32* %26, align 8
  %29 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = add i32 %30, 1
  store i32 %31, i32* %29, align 8
  %32 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp ugt i32 %28, %33
  br i1 %34, label %209, label %35

35:                                               ; preds = %21
  %36 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 5
  %37 = load i32, i32* %36, align 4
  %38 = icmp ugt i32 %31, %37
  br i1 %38, label %209, label %39

39:                                               ; preds = %35
  %40 = and i64 %25, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %44 = load i8, i8* %43, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %209

46:                                               ; preds = %42, %39
  %47 = add i64 %16, -2
  %48 = icmp ult i64 %47, %25
  br i1 %48, label %209, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds i8, i8* %9, i64 %25
  %51 = bitcast i8* %50 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i64
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %58 = load i8, i8* %57, align 8, !range !2
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %209

60:                                               ; preds = %49, %56
  %61 = icmp ugt i64 %16, %53
  %62 = sub i64 %16, %53
  %63 = icmp uge i64 %62, %25
  %64 = and i1 %61, %63
  br i1 %64, label %65, label %209

65:                                               ; preds = %60
  %66 = load i32, i32* %22, align 4
  %67 = sext i32 %66 to i64
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::QueryKeyValue", %"struct.extensions::declarative_net_request::flat::QueryKeyValue"* %0, i64 0, i32 0, i32 0, i64 %68
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = icmp ugt i16 %71, 4
  br i1 %72, label %73, label %209

73:                                               ; preds = %65
  %74 = getelementptr inbounds i8, i8* %69, i64 4
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = icmp eq i16 %76, 0
  br i1 %77, label %209, label %78

78:                                               ; preds = %73
  %79 = zext i16 %76 to i64
  %80 = add i64 %6, %79
  %81 = and i64 %80, 3
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %89, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %85 = load i8, i8* %84, align 8, !range !2
  %86 = icmp ne i8 %85, 0
  %87 = icmp ult i64 %18, %80
  %88 = or i1 %86, %87
  br i1 %88, label %209, label %91

89:                                               ; preds = %78
  %90 = icmp ult i64 %18, %80
  br i1 %90, label %209, label %91

91:                                               ; preds = %83, %89
  %92 = getelementptr inbounds i8, i8* %9, i64 %80
  %93 = bitcast i8* %92 to i32*
  %94 = load i32, i32* %93, align 4
  %95 = icmp sgt i32 %94, 0
  br i1 %95, label %96, label %209

96:                                               ; preds = %91
  %97 = zext i32 %94 to i64
  %98 = add i64 %80, %97
  %99 = add i64 %16, -1
  %100 = icmp ult i64 %99, %98
  br i1 %100, label %209, label %101

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::QueryKeyValue", %"struct.extensions::declarative_net_request::flat::QueryKeyValue"* %0, i64 0, i32 0, i32 0, i64 %79
  %103 = bitcast i8* %102 to i32*
  %104 = load i32, i32* %103, align 4
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %102, i64 %105
  %107 = icmp eq i8* %106, null
  br i1 %107, label %141, label %108

108:                                              ; preds = %101
  %109 = ptrtoint i8* %106 to i64
  %110 = sub i64 %109, %4
  %111 = and i64 %110, 3
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %119, label %113

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %115 = load i8, i8* %114, align 8, !range !2
  %116 = icmp ne i8 %115, 0
  %117 = icmp ult i64 %18, %110
  %118 = or i1 %116, %117
  br i1 %118, label %209, label %121

119:                                              ; preds = %108
  %120 = icmp ult i64 %18, %110
  br i1 %120, label %209, label %121

121:                                              ; preds = %113, %119
  %122 = bitcast i8* %106 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = icmp ult i32 %123, 2147483647
  br i1 %124, label %125, label %209

125:                                              ; preds = %121
  %126 = zext i32 %123 to i64
  %127 = add nuw nsw i64 %126, 4
  %128 = add i64 %127, %110
  %129 = icmp ule i64 %16, %127
  %130 = sub i64 %16, %127
  %131 = icmp ult i64 %130, %110
  %132 = or i1 %129, %131
  %133 = icmp ult i64 %99, %128
  %134 = or i1 %133, %132
  br i1 %134, label %209, label %135

135:                                              ; preds = %125
  %136 = getelementptr inbounds i8, i8* %9, i64 %128
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 0
  %139 = icmp ugt i16 %71, 6
  %140 = and i1 %139, %138
  br i1 %140, label %143, label %209

141:                                              ; preds = %101
  %142 = icmp ugt i16 %71, 6
  br i1 %142, label %143, label %209

143:                                              ; preds = %135, %141
  %144 = getelementptr inbounds i8, i8* %69, i64 6
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = icmp eq i16 %146, 0
  br i1 %147, label %209, label %148

148:                                              ; preds = %143
  %149 = zext i16 %146 to i64
  %150 = add i64 %6, %149
  %151 = and i64 %150, 3
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %159, label %153

153:                                              ; preds = %148
  %154 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %155 = load i8, i8* %154, align 8, !range !2
  %156 = icmp ne i8 %155, 0
  %157 = icmp ult i64 %18, %150
  %158 = or i1 %156, %157
  br i1 %158, label %209, label %161

159:                                              ; preds = %148
  %160 = icmp ult i64 %18, %150
  br i1 %160, label %209, label %161

161:                                              ; preds = %153, %159
  %162 = getelementptr inbounds i8, i8* %9, i64 %150
  %163 = bitcast i8* %162 to i32*
  %164 = load i32, i32* %163, align 4
  %165 = icmp sgt i32 %164, 0
  br i1 %165, label %166, label %209

166:                                              ; preds = %161
  %167 = zext i32 %164 to i64
  %168 = add i64 %150, %167
  %169 = icmp ult i64 %99, %168
  br i1 %169, label %209, label %170

170:                                              ; preds = %166
  %171 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::QueryKeyValue", %"struct.extensions::declarative_net_request::flat::QueryKeyValue"* %0, i64 0, i32 0, i32 0, i64 %149
  %172 = bitcast i8* %171 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds i8, i8* %171, i64 %174
  %176 = icmp eq i8* %175, null
  br i1 %176, label %208, label %177

177:                                              ; preds = %170
  %178 = ptrtoint i8* %175 to i64
  %179 = sub i64 %178, %4
  %180 = and i64 %179, 3
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %188, label %182

182:                                              ; preds = %177
  %183 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %184 = load i8, i8* %183, align 8, !range !2
  %185 = icmp ne i8 %184, 0
  %186 = icmp ult i64 %18, %179
  %187 = or i1 %185, %186
  br i1 %187, label %209, label %190

188:                                              ; preds = %177
  %189 = icmp ult i64 %18, %179
  br i1 %189, label %209, label %190

190:                                              ; preds = %182, %188
  %191 = bitcast i8* %175 to i32*
  %192 = load i32, i32* %191, align 4
  %193 = icmp ult i32 %192, 2147483647
  br i1 %193, label %194, label %209

194:                                              ; preds = %190
  %195 = zext i32 %192 to i64
  %196 = add nuw nsw i64 %195, 4
  %197 = add i64 %196, %179
  %198 = icmp ule i64 %16, %196
  %199 = sub i64 %16, %196
  %200 = icmp ult i64 %199, %179
  %201 = or i1 %198, %200
  %202 = icmp ult i64 %99, %197
  %203 = or i1 %202, %201
  br i1 %203, label %209, label %204

204:                                              ; preds = %194
  %205 = getelementptr inbounds i8, i8* %9, i64 %197
  %206 = load i8, i8* %205, align 1
  %207 = icmp eq i8 %206, 0
  br i1 %207, label %208, label %209

208:                                              ; preds = %170, %204
  store i32 %27, i32* %26, align 8
  br label %209

209:                                              ; preds = %182, %153, %113, %83, %188, %159, %119, %89, %166, %96, %194, %125, %190, %161, %141, %143, %121, %91, %65, %73, %42, %21, %10, %35, %46, %56, %14, %208, %204, %135, %60
  %210 = phi i1 [ false, %204 ], [ false, %166 ], [ false, %135 ], [ false, %96 ], [ false, %60 ], [ true, %208 ], [ false, %14 ], [ false, %56 ], [ false, %46 ], [ false, %35 ], [ false, %10 ], [ false, %21 ], [ false, %42 ], [ false, %73 ], [ false, %65 ], [ false, %89 ], [ false, %91 ], [ false, %83 ], [ false, %125 ], [ false, %119 ], [ false, %121 ], [ false, %113 ], [ false, %143 ], [ false, %141 ], [ false, %159 ], [ false, %161 ], [ false, %153 ], [ false, %194 ], [ false, %188 ], [ false, %190 ], [ false, %182 ]
  ret i1 %210
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10extensions23declarative_net_request4flat16ModifyHeaderInfo6VerifyERN11flatbuffers8VerifierE(%"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo"*, %"class.flatbuffers::Verifier"* dereferenceable(48)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.flatbuffers::Verifier"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = ptrtoint %"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo"* %0 to i64
  %6 = sub i64 %5, %4
  %7 = and i64 %6, 3
  %8 = icmp eq i64 %7, 0
  %9 = inttoptr i64 %4 to i8*
  br i1 %8, label %14, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %234

14:                                               ; preds = %10, %2
  %15 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %16, 4
  %18 = add i64 %16, -4
  %19 = icmp uge i64 %18, %6
  %20 = and i1 %17, %19
  br i1 %20, label %21, label %234

21:                                               ; preds = %14
  %22 = bitcast %"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo"* %0 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = sub i64 %6, %24
  %26 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = add i32 %27, 1
  store i32 %28, i32* %26, align 8
  %29 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = add i32 %30, 1
  store i32 %31, i32* %29, align 8
  %32 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp ugt i32 %28, %33
  br i1 %34, label %234, label %35

35:                                               ; preds = %21
  %36 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 5
  %37 = load i32, i32* %36, align 4
  %38 = icmp ugt i32 %31, %37
  br i1 %38, label %234, label %39

39:                                               ; preds = %35
  %40 = and i64 %25, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %44 = load i8, i8* %43, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %234

46:                                               ; preds = %42, %39
  %47 = add i64 %16, -2
  %48 = icmp ult i64 %47, %25
  br i1 %48, label %234, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds i8, i8* %9, i64 %25
  %51 = bitcast i8* %50 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i64
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %58 = load i8, i8* %57, align 8, !range !2
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %234

60:                                               ; preds = %49, %56
  %61 = icmp ugt i64 %16, %53
  %62 = sub i64 %16, %53
  %63 = icmp uge i64 %62, %25
  %64 = and i1 %61, %63
  br i1 %64, label %65, label %234

65:                                               ; preds = %60
  %66 = load i32, i32* %22, align 4
  %67 = sext i32 %66 to i64
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo", %"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo"* %0, i64 0, i32 0, i32 0, i64 %68
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = icmp ugt i16 %71, 4
  br i1 %72, label %73, label %233

73:                                               ; preds = %65
  %74 = getelementptr inbounds i8, i8* %69, i64 4
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = icmp eq i16 %76, 0
  br i1 %77, label %83, label %78

78:                                               ; preds = %73
  %79 = zext i16 %76 to i64
  %80 = add i64 %6, %79
  %81 = add i64 %16, -1
  %82 = icmp ult i64 %81, %80
  br i1 %82, label %234, label %83

83:                                               ; preds = %78, %73
  %84 = icmp ugt i16 %71, 6
  br i1 %84, label %85, label %233

85:                                               ; preds = %83
  %86 = getelementptr inbounds i8, i8* %69, i64 6
  %87 = bitcast i8* %86 to i16*
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 0
  br i1 %89, label %113, label %90

90:                                               ; preds = %85
  %91 = zext i16 %88 to i64
  %92 = add i64 %6, %91
  %93 = and i64 %92, 3
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %101, label %95

95:                                               ; preds = %90
  %96 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %97 = load i8, i8* %96, align 8, !range !2
  %98 = icmp ne i8 %97, 0
  %99 = icmp ult i64 %18, %92
  %100 = or i1 %98, %99
  br i1 %100, label %234, label %103

101:                                              ; preds = %90
  %102 = icmp ult i64 %18, %92
  br i1 %102, label %234, label %103

103:                                              ; preds = %95, %101
  %104 = getelementptr inbounds i8, i8* %9, i64 %92
  %105 = bitcast i8* %104 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = icmp sgt i32 %106, 0
  br i1 %107, label %108, label %234

108:                                              ; preds = %103
  %109 = zext i32 %106 to i64
  %110 = add i64 %92, %109
  %111 = add i64 %16, -1
  %112 = icmp ult i64 %111, %110
  br i1 %112, label %234, label %113

113:                                              ; preds = %108, %85
  %114 = getelementptr inbounds i8, i8* %69, i64 6
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i64
  %118 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo", %"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo"* %0, i64 0, i32 0, i32 0, i64 %117
  %119 = icmp eq i16 %116, 0
  br i1 %119, label %158, label %120

120:                                              ; preds = %113
  %121 = bitcast i8* %118 to i32*
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %118, i64 %123
  %125 = icmp eq i8* %124, null
  br i1 %125, label %158, label %126

126:                                              ; preds = %120
  %127 = ptrtoint i8* %124 to i64
  %128 = sub i64 %127, %4
  %129 = and i64 %128, 3
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %137, label %131

131:                                              ; preds = %126
  %132 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %133 = load i8, i8* %132, align 8, !range !2
  %134 = icmp ne i8 %133, 0
  %135 = icmp ult i64 %18, %128
  %136 = or i1 %134, %135
  br i1 %136, label %234, label %139

137:                                              ; preds = %126
  %138 = icmp ult i64 %18, %128
  br i1 %138, label %234, label %139

139:                                              ; preds = %131, %137
  %140 = bitcast i8* %124 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = icmp ult i32 %141, 2147483647
  br i1 %142, label %143, label %234

143:                                              ; preds = %139
  %144 = zext i32 %141 to i64
  %145 = add nuw nsw i64 %144, 4
  %146 = add i64 %145, %128
  %147 = icmp ule i64 %16, %145
  %148 = sub i64 %16, %145
  %149 = icmp ult i64 %148, %128
  %150 = or i1 %147, %149
  %151 = add i64 %16, -1
  %152 = icmp ult i64 %151, %146
  %153 = or i1 %152, %150
  br i1 %153, label %234, label %154

154:                                              ; preds = %143
  %155 = getelementptr inbounds i8, i8* %9, i64 %146
  %156 = load i8, i8* %155, align 1
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %158, label %234

158:                                              ; preds = %113, %120, %154
  %159 = icmp ugt i16 %71, 8
  br i1 %159, label %160, label %233

160:                                              ; preds = %158
  %161 = getelementptr inbounds i8, i8* %69, i64 8
  %162 = bitcast i8* %161 to i16*
  %163 = load i16, i16* %162, align 2
  %164 = icmp eq i16 %163, 0
  br i1 %164, label %188, label %165

165:                                              ; preds = %160
  %166 = zext i16 %163 to i64
  %167 = add i64 %6, %166
  %168 = and i64 %167, 3
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %176, label %170

170:                                              ; preds = %165
  %171 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %172 = load i8, i8* %171, align 8, !range !2
  %173 = icmp ne i8 %172, 0
  %174 = icmp ult i64 %18, %167
  %175 = or i1 %173, %174
  br i1 %175, label %234, label %178

176:                                              ; preds = %165
  %177 = icmp ult i64 %18, %167
  br i1 %177, label %234, label %178

178:                                              ; preds = %170, %176
  %179 = getelementptr inbounds i8, i8* %9, i64 %167
  %180 = bitcast i8* %179 to i32*
  %181 = load i32, i32* %180, align 4
  %182 = icmp sgt i32 %181, 0
  br i1 %182, label %183, label %234

183:                                              ; preds = %178
  %184 = zext i32 %181 to i64
  %185 = add i64 %167, %184
  %186 = add i64 %16, -1
  %187 = icmp ult i64 %186, %185
  br i1 %187, label %234, label %188

188:                                              ; preds = %183, %160
  %189 = getelementptr inbounds i8, i8* %69, i64 8
  %190 = bitcast i8* %189 to i16*
  %191 = load i16, i16* %190, align 2
  %192 = zext i16 %191 to i64
  %193 = getelementptr inbounds %"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo", %"struct.extensions::declarative_net_request::flat::ModifyHeaderInfo"* %0, i64 0, i32 0, i32 0, i64 %192
  %194 = icmp eq i16 %191, 0
  br i1 %194, label %233, label %195

195:                                              ; preds = %188
  %196 = bitcast i8* %193 to i32*
  %197 = load i32, i32* %196, align 4
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds i8, i8* %193, i64 %198
  %200 = icmp eq i8* %199, null
  br i1 %200, label %233, label %201

201:                                              ; preds = %195
  %202 = ptrtoint i8* %199 to i64
  %203 = sub i64 %202, %4
  %204 = and i64 %203, 3
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %212, label %206

206:                                              ; preds = %201
  %207 = getelementptr inbounds %"class.flatbuffers::Verifier", %"class.flatbuffers::Verifier"* %1, i64 0, i32 7
  %208 = load i8, i8* %207, align 8, !range !2
  %209 = icmp ne i8 %208, 0
  %210 = icmp ult i64 %18, %203
  %211 = or i1 %209, %210
  br i1 %211, label %234, label %214

212:                                              ; preds = %201
  %213 = icmp ult i64 %18, %203
  br i1 %213, label %234, label %214

214:                                              ; preds = %206, %212
  %215 = bitcast i8* %199 to i32*
  %216 = load i32, i32* %215, align 4
  %217 = icmp ult i32 %216, 2147483647
  br i1 %217, label %218, label %234

218:                                              ; preds = %214
  %219 = zext i32 %216 to i64
  %220 = add nuw nsw i64 %219, 4
  %221 = add i64 %220, %203
  %222 = icmp ule i64 %16, %220
  %223 = sub i64 %16, %220
  %224 = icmp ult i64 %223, %203
  %225 = or i1 %222, %224
  %226 = add i64 %16, -1
  %227 = icmp ult i64 %226, %221
  %228 = or i1 %227, %225
  br i1 %228, label %234, label %229

229:                                              ; preds = %218
  %230 = getelementptr inbounds i8, i8* %9, i64 %221
  %231 = load i8, i8* %230, align 1
  %232 = icmp eq i8 %231, 0
  br i1 %232, label %233, label %234

233:                                              ; preds = %158, %65, %83, %188, %195, %229
  store i32 %27, i32* %26, align 8
  br label %234

234:                                              ; preds = %78, %206, %170, %131, %95, %101, %137, %176, %212, %108, %183, %218, %143, %214, %178, %139, %103, %42, %21, %10, %35, %46, %56, %14, %233, %229, %154, %60
  %235 = phi i1 [ false, %229 ], [ false, %183 ], [ false, %154 ], [ false, %108 ], [ false, %78 ], [ false, %60 ], [ true, %233 ], [ false, %14 ], [ false, %56 ], [ false, %46 ], [ false, %35 ], [ false, %10 ], [ false, %21 ], [ false, %42 ], [ false, %101 ], [ false, %103 ], [ false, %95 ], [ false, %143 ], [ false, %137 ], [ false, %139 ], [ false, %131 ], [ false, %176 ], [ false, %178 ], [ false, %170 ], [ false, %218 ], [ false, %212 ], [ false, %214 ], [ false, %206 ]
  ret i1 %235
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree.129"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree.129"* %0, %"class.std::__1::__tree_node"* %6) #9
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree.129"* %0, %"class.std::__1::__tree_node"* %9) #9
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

declare void @_ZN10extensions23declarative_net_request14RulesetMatcherC1ENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN4util6IdTypeINS0_12RulesetIDTagEiLin2ELin1EEERKS8_(%"class.extensions::declarative_net_request::RulesetMatcher"*, %"class.std::__1::basic_string"*, i32, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN10extensions23declarative_net_request14RulesetMatcherD1Ev(%"class.extensions::declarative_net_request::RulesetMatcher"*) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE16__construct_nodeIJRKiEEENS_10unique_ptrINS_11__tree_nodeIiPvEENS_22__tree_node_destructorINS3_ISC_EEEEEEDpOT_: argument 0"}
!5 = distinct !{!5, !"_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE16__construct_nodeIJRKiEEENS_10unique_ptrINS_11__tree_nodeIiPvEENS_22__tree_node_destructorINS3_ISC_EEEEEEDpOT_"}
