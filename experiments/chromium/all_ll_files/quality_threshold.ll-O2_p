; ModuleID = '../../third_party/webrtc/video/quality_threshold.cc'
source_filename = "../../third_party/webrtc/video/quality_threshold.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::QualityThreshold" = type { %"class.std::__1::unique_ptr", i32, float, i32, i32, i32, i32, %"class.absl::optional", i32, i32, i32, i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i8 }

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE7EdEES6_EEEvPKciS8_DpRKT_E1t = comdat any

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t = comdat any

@.str = private unnamed_addr constant [52 x i8] c"../../third_party/webrtc/video/quality_threshold.cc\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"fraction > 0.5f\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"max_measurements > 1\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"low_threshold < high_threshold\00", align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE7EdEES6_EEEvPKciS8_DpRKT_E1t = linkonce_odr hidden constant [4 x i8] c"\0D\07\07\00", comdat, align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t = linkonce_odr hidden constant [4 x i8] c"\0D\01\01\00", comdat, align 1

@_ZN6webrtc16QualityThresholdC1Eiifi = hidden unnamed_addr alias void (%"class.webrtc::QualityThreshold"*, i32, i32, float, i32), void (%"class.webrtc::QualityThreshold"*, i32, i32, float, i32)* @_ZN6webrtc16QualityThresholdC2Eiifi
@_ZN6webrtc16QualityThresholdD1Ev = hidden unnamed_addr alias void (%"class.webrtc::QualityThreshold"*), void (%"class.webrtc::QualityThreshold"*)* @_ZN6webrtc16QualityThresholdD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16QualityThresholdC2Eiifi(%"class.webrtc::QualityThreshold"* nocapture, i32, i32, float, i32) unnamed_addr #0 align 2 {
  %6 = sext i32 %4 to i64
  %7 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %6, i64 4)
  %8 = extractvalue { i64, i1 } %7, 1
  %9 = extractvalue { i64, i1 } %7, 0
  %10 = select i1 %8, i64 -1, i64 %9
  %11 = tail call i8* @_Znam(i64 %10) #8
  %12 = ptrtoint i8* %11 to i64
  %13 = bitcast %"class.webrtc::QualityThreshold"* %0 to i64*
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 1
  store i32 %4, i32* %14, align 8
  %15 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 2
  store float %3, float* %15, align 4
  %16 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 3
  store i32 %1, i32* %16, align 8
  %17 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 4
  store i32 %2, i32* %17, align 4
  %18 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 5
  store i32 %4, i32* %18, align 8
  %19 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 6
  store i32 0, i32* %19, align 4
  %20 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 8
  %22 = fcmp ogt float %3, 5.000000e-01
  %23 = bitcast i32* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %23, i8 0, i64 20, i1 false)
  br i1 %22, label %26, label %24

24:                                               ; preds = %5
  %25 = fpext float %3 to double
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 33, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE7EdEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), double %25, double 5.000000e-01) #9
  unreachable

26:                                               ; preds = %5
  %27 = icmp sgt i32 %4, 1
  br i1 %27, label %29, label %28

28:                                               ; preds = %26
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %4, i32 1) #9
  unreachable

29:                                               ; preds = %26
  %30 = icmp slt i32 %1, %2
  br i1 %30, label %32, label %31

31:                                               ; preds = %29
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 35, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %1, i32 %2) #9
  unreachable

32:                                               ; preds = %29
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16QualityThresholdD2Ev(%"class.webrtc::QualityThreshold"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  store i32* null, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast i32* %3 to i8*
  tail call void @_ZdaPv(i8* %6) #8
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16QualityThreshold14AddMeasurementEi(%"class.webrtc::QualityThreshold"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  %6 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 6
  %7 = load i32, i32* %6, align 4
  br i1 %5, label %8, label %12

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = sext i32 %7 to i64
  br label %18

12:                                               ; preds = %2
  %13 = sext i32 %7 to i64
  %14 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = getelementptr inbounds i32, i32* %15, i64 %13
  %17 = load i32, i32* %16, align 4
  br label %18

18:                                               ; preds = %8, %12
  %19 = phi i64 [ %11, %8 ], [ %13, %12 ]
  %20 = phi i32* [ %10, %8 ], [ %15, %12 ]
  %21 = phi i32 [ 0, %8 ], [ %17, %12 ]
  %22 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 6
  %23 = getelementptr inbounds i32, i32* %20, i64 %19
  store i32 %1, i32* %23, align 4
  %24 = load i32, i32* %22, align 4
  %25 = add nsw i32 %24, 1
  %26 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = srem i32 %25, %27
  store i32 %28, i32* %22, align 4
  %29 = sub i32 %1, %21
  %30 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 8
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %29, %31
  store i32 %32, i32* %30, align 4
  %33 = load i32, i32* %3, align 8
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 3
  %36 = load i32, i32* %35, align 8
  br i1 %34, label %37, label %51

37:                                               ; preds = %18
  %38 = icmp sgt i32 %21, %36
  br i1 %38, label %43, label %39

39:                                               ; preds = %37
  %40 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 9
  %41 = load i32, i32* %40, align 8
  %42 = add nsw i32 %41, -1
  store i32 %42, i32* %40, align 8
  br label %51

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 4
  %45 = load i32, i32* %44, align 4
  %46 = icmp slt i32 %21, %45
  br i1 %46, label %51, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 10
  %49 = load i32, i32* %48, align 4
  %50 = add nsw i32 %49, -1
  store i32 %50, i32* %48, align 4
  br label %51

51:                                               ; preds = %18, %43, %39, %47
  %52 = icmp slt i32 %36, %1
  br i1 %52, label %57, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 9
  %55 = load i32, i32* %54, align 8
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %54, align 8
  br label %65

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 4
  %59 = load i32, i32* %58, align 4
  %60 = icmp sgt i32 %59, %1
  br i1 %60, label %65, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 10
  %63 = load i32, i32* %62, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %62, align 4
  br label %65

65:                                               ; preds = %57, %61, %53
  %66 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 2
  %67 = load float, float* %66, align 4
  %68 = sitofp i32 %27 to float
  %69 = fmul float %67, %68
  %70 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 10
  %71 = load i32, i32* %70, align 4
  %72 = sitofp i32 %71 to float
  %73 = fcmp ugt float %69, %72
  br i1 %73, label %74, label %79

74:                                               ; preds = %65
  %75 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 9
  %76 = load i32, i32* %75, align 8
  %77 = sitofp i32 %76 to float
  %78 = fcmp ugt float %69, %77
  br i1 %78, label %83, label %79

79:                                               ; preds = %74, %65
  %80 = phi i16 [ 257, %65 ], [ 1, %74 ]
  %81 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %82 = bitcast i8* %81 to i16*
  store i16 %80, i16* %82, align 8
  br label %83

83:                                               ; preds = %79, %74
  %84 = icmp sgt i32 %33, 0
  br i1 %84, label %85, label %87

85:                                               ; preds = %83
  %86 = add nsw i32 %33, -1
  store i32 %86, i32* %3, align 8
  br label %87

87:                                               ; preds = %85, %83
  %88 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %89 = load i8, i8* %88, align 1, !range !2
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %103, label %91

91:                                               ; preds = %87
  %92 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1, i32 0
  %93 = load i8, i8* %92, align 1, !range !2
  %94 = icmp eq i8 %93, 0
  br i1 %94, label %99, label %95

95:                                               ; preds = %91
  %96 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 11
  %97 = load i32, i32* %96, align 8
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %96, align 8
  br label %99

99:                                               ; preds = %91, %95
  %100 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 12
  %101 = load i32, i32* %100, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %100, align 4
  br label %103

103:                                              ; preds = %87, %99
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i16 @_ZNK6webrtc16QualityThreshold6IsHighEv(%"class.webrtc::QualityThreshold"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 7
  %3 = bitcast %"class.absl::optional"* %2 to i16*
  %4 = load i16, i16* %3, align 8
  ret i16 %4
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i8, double } @_ZNK6webrtc16QualityThreshold17CalculateVarianceEv(%"class.webrtc::QualityThreshold"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %80, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 8
  %7 = load i32, i32* %6, align 4
  %8 = sitofp i32 %7 to double
  %9 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = sitofp i32 %10 to double
  %12 = fdiv double %8, %11
  %13 = icmp sgt i32 %10, 0
  br i1 %13, label %14, label %41

14:                                               ; preds = %5
  %15 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i32*, i32** %15, align 8
  %17 = zext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = and i64 %17, 3
  %20 = icmp ult i64 %18, 3
  br i1 %20, label %23, label %21

21:                                               ; preds = %14
  %22 = sub nsw i64 %17, %19
  br label %46

23:                                               ; preds = %46, %14
  %24 = phi double [ undef, %14 ], [ %76, %46 ]
  %25 = phi i64 [ 0, %14 ], [ %77, %46 ]
  %26 = phi double [ 0.000000e+00, %14 ], [ %76, %46 ]
  %27 = icmp eq i64 %19, 0
  br i1 %27, label %41, label %28

28:                                               ; preds = %23, %28
  %29 = phi i64 [ %38, %28 ], [ %25, %23 ]
  %30 = phi double [ %37, %28 ], [ %26, %23 ]
  %31 = phi i64 [ %39, %28 ], [ %19, %23 ]
  %32 = getelementptr inbounds i32, i32* %16, i64 %29
  %33 = load i32, i32* %32, align 4
  %34 = sitofp i32 %33 to double
  %35 = fsub double %34, %12
  %36 = fmul double %35, %35
  %37 = fadd double %30, %36
  %38 = add nuw nsw i64 %29, 1
  %39 = add i64 %31, -1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %28, !llvm.loop !3

41:                                               ; preds = %23, %28, %5
  %42 = phi double [ 0.000000e+00, %5 ], [ %24, %23 ], [ %37, %28 ]
  %43 = add nsw i32 %10, -1
  %44 = sitofp i32 %43 to double
  %45 = fdiv double %42, %44
  br label %80

46:                                               ; preds = %46, %21
  %47 = phi i64 [ 0, %21 ], [ %77, %46 ]
  %48 = phi double [ 0.000000e+00, %21 ], [ %76, %46 ]
  %49 = phi i64 [ %22, %21 ], [ %78, %46 ]
  %50 = getelementptr inbounds i32, i32* %16, i64 %47
  %51 = load i32, i32* %50, align 4
  %52 = sitofp i32 %51 to double
  %53 = fsub double %52, %12
  %54 = fmul double %53, %53
  %55 = fadd double %48, %54
  %56 = or i64 %47, 1
  %57 = getelementptr inbounds i32, i32* %16, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = sitofp i32 %58 to double
  %60 = fsub double %59, %12
  %61 = fmul double %60, %60
  %62 = fadd double %55, %61
  %63 = or i64 %47, 2
  %64 = getelementptr inbounds i32, i32* %16, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = sitofp i32 %65 to double
  %67 = fsub double %66, %12
  %68 = fmul double %67, %67
  %69 = fadd double %62, %68
  %70 = or i64 %47, 3
  %71 = getelementptr inbounds i32, i32* %16, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = sitofp i32 %72 to double
  %74 = fsub double %73, %12
  %75 = fmul double %74, %74
  %76 = fadd double %69, %75
  %77 = add nuw nsw i64 %47, 4
  %78 = add i64 %49, -4
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %23, label %46

80:                                               ; preds = %1, %41
  %81 = phi i8 [ 1, %41 ], [ 0, %1 ]
  %82 = phi double [ %45, %41 ], [ undef, %1 ]
  %83 = insertvalue { i8, double } undef, i8 %81, 0
  %84 = insertvalue { i8, double } %83, double %82, 1
  ret { i8, double } %84
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i8, double } @_ZNK6webrtc16QualityThreshold12FractionHighEi(%"class.webrtc::QualityThreshold"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 12
  %4 = load i32, i32* %3, align 4
  %5 = icmp slt i32 %4, %1
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.webrtc::QualityThreshold", %"class.webrtc::QualityThreshold"* %0, i64 0, i32 11
  %8 = load i32, i32* %7, align 8
  %9 = sitofp i32 %8 to double
  %10 = sitofp i32 %4 to double
  %11 = fdiv double %9, %10
  br label %12

12:                                               ; preds = %2, %6
  %13 = phi i8 [ 1, %6 ], [ 0, %2 ]
  %14 = phi double [ %11, %6 ], [ undef, %2 ]
  %15 = insertvalue { i8, double } undef, i8 %13, 0
  %16 = insertvalue { i8, double } %15, double %14, 1
  ret { i8, double } %16
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
