; ModuleID = '../../third_party/libwebp/src/dsp/enc_sse41.c'
source_filename = "../../third_party/libwebp/src/dsp/enc_sse41.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8Histogram = type { i32, i32 }
%struct.VP8Matrix = type { [16 x i16], [16 x i16], [16 x i32], [16 x i32], [16 x i16] }

@VP8CollectHistogram = external local_unnamed_addr global void (i8*, i8*, i32, i32, %struct.VP8Histogram*)*, align 8
@VP8EncQuantizeBlock = external local_unnamed_addr global i32 (i16*, i16*, %struct.VP8Matrix*)*, align 8
@VP8EncQuantize2Blocks = external local_unnamed_addr global i32 (i16*, i16*, %struct.VP8Matrix*)*, align 8
@VP8EncQuantizeBlockWHT = external local_unnamed_addr global i32 (i16*, i16*, %struct.VP8Matrix*)*, align 8
@VP8TDisto4x4 = external local_unnamed_addr global i32 (i8*, i8*, i16*)*, align 8
@VP8TDisto16x16 = external local_unnamed_addr global i32 (i8*, i8*, i16*)*, align 8
@VP8FTransform = external local_unnamed_addr global void (i8*, i8*, i16*)*, align 8
@VP8DspScan = external local_unnamed_addr constant [24 x i32], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @VP8EncDspInitSSE41() local_unnamed_addr #0 {
  store void (i8*, i8*, i32, i32, %struct.VP8Histogram*)* @CollectHistogram_SSE41, void (i8*, i8*, i32, i32, %struct.VP8Histogram*)** @VP8CollectHistogram, align 8
  store i32 (i16*, i16*, %struct.VP8Matrix*)* @QuantizeBlock_SSE41, i32 (i16*, i16*, %struct.VP8Matrix*)** @VP8EncQuantizeBlock, align 8
  store i32 (i16*, i16*, %struct.VP8Matrix*)* @Quantize2Blocks_SSE41, i32 (i16*, i16*, %struct.VP8Matrix*)** @VP8EncQuantize2Blocks, align 8
  store i32 (i16*, i16*, %struct.VP8Matrix*)* @QuantizeBlockWHT_SSE41, i32 (i16*, i16*, %struct.VP8Matrix*)** @VP8EncQuantizeBlockWHT, align 8
  store i32 (i8*, i8*, i16*)* @Disto4x4_SSE41, i32 (i8*, i8*, i16*)** @VP8TDisto4x4, align 8
  store i32 (i8*, i8*, i16*)* @Disto16x16_SSE41, i32 (i8*, i8*, i16*)** @VP8TDisto16x16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @CollectHistogram_SSE41(i8*, i8*, i32, i32, %struct.VP8Histogram*) #1 {
  %6 = alloca [32 x i32], align 16
  %7 = alloca [16 x i16], align 16
  %8 = bitcast [32 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 128, i1 false)
  %9 = icmp slt i32 %2, %3
  br i1 %9, label %10, label %130

10:                                               ; preds = %5
  %11 = bitcast [16 x i16]* %7 to i8*
  %12 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 0
  %13 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 8
  %14 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 13
  %15 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 14
  %16 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 15
  %17 = bitcast [16 x i16]* %7 to <8 x i16>*
  %18 = bitcast i16* %13 to <8 x i16>*
  %19 = sext i32 %2 to i64
  %20 = bitcast [16 x i16]* %7 to i8*
  br label %21

21:                                               ; preds = %21, %10
  %22 = phi i64 [ %19, %10 ], [ %127, %21 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 32, i1 false)
  %23 = load void (i8*, i8*, i16*)*, void (i8*, i8*, i16*)** @VP8FTransform, align 8
  %24 = getelementptr inbounds [24 x i32], [24 x i32]* @VP8DspScan, i64 0, i64 %22
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %0, i64 %26
  %28 = getelementptr inbounds i8, i8* %1, i64 %26
  call void %23(i8* %27, i8* %28, i16* nonnull %12) #7
  %29 = load <8 x i16>, <8 x i16>* %17, align 16
  %30 = load <8 x i16>, <8 x i16>* %18, align 16
  %31 = sub <8 x i16> zeroinitializer, %29
  %32 = icmp slt <8 x i16> %29, zeroinitializer
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> %29
  %34 = sub <8 x i16> zeroinitializer, %30
  %35 = icmp slt <8 x i16> %30, zeroinitializer
  %36 = select <8 x i1> %35, <8 x i16> %34, <8 x i16> %30
  %37 = ashr <8 x i16> %33, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %38 = ashr <8 x i16> %36, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %39 = icmp slt <8 x i16> %37, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %40 = select <8 x i1> %39, <8 x i16> %37, <8 x i16> <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %41 = icmp slt <8 x i16> %38, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %42 = select <8 x i1> %41, <8 x i16> %38, <8 x i16> <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  store <8 x i16> %40, <8 x i16>* %17, align 16
  store <8 x i16> %42, <8 x i16>* %18, align 16
  %43 = bitcast <8 x i16> %40 to <2 x i64>
  %44 = extractelement <2 x i64> %43, i32 0
  %45 = shl i64 %44, 48
  %46 = ashr exact i64 %45, 48
  %47 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %47, align 4
  %50 = extractelement <8 x i16> %40, i32 1
  %51 = sext i16 %50 to i64
  %52 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %52, align 4
  %55 = extractelement <8 x i16> %40, i32 2
  %56 = sext i16 %55 to i64
  %57 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %57, align 4
  %60 = extractelement <8 x i16> %40, i32 3
  %61 = sext i16 %60 to i64
  %62 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %62, align 4
  %65 = extractelement <8 x i16> %40, i32 4
  %66 = sext i16 %65 to i64
  %67 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %67, align 4
  %70 = extractelement <8 x i16> %40, i32 5
  %71 = sext i16 %70 to i64
  %72 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %72, align 4
  %75 = extractelement <8 x i16> %40, i32 6
  %76 = sext i16 %75 to i64
  %77 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %77, align 4
  %80 = extractelement <8 x i16> %40, i32 7
  %81 = sext i16 %80 to i64
  %82 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %82, align 4
  %85 = bitcast <8 x i16> %42 to <2 x i64>
  %86 = extractelement <2 x i64> %85, i32 0
  %87 = shl i64 %86, 48
  %88 = ashr exact i64 %87, 48
  %89 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %89, align 4
  %92 = extractelement <8 x i16> %42, i32 1
  %93 = sext i16 %92 to i64
  %94 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %93
  %95 = load i32, i32* %94, align 4
  %96 = add nsw i32 %95, 1
  store i32 %96, i32* %94, align 4
  %97 = extractelement <8 x i16> %42, i32 2
  %98 = sext i16 %97 to i64
  %99 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %99, align 4
  %102 = extractelement <8 x i16> %42, i32 3
  %103 = sext i16 %102 to i64
  %104 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %103
  %105 = load i32, i32* %104, align 4
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %104, align 4
  %107 = extractelement <8 x i16> %42, i32 4
  %108 = sext i16 %107 to i64
  %109 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %109, align 4
  %112 = load i16, i16* %14, align 2
  %113 = sext i16 %112 to i64
  %114 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %114, align 4
  %117 = load i16, i16* %15, align 4
  %118 = sext i16 %117 to i64
  %119 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = add nsw i32 %120, 1
  store i32 %121, i32* %119, align 4
  %122 = load i16, i16* %16, align 2
  %123 = sext i16 %122 to i64
  %124 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %124, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #7
  %127 = add nsw i64 %22, 1
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, %3
  br i1 %129, label %130, label %21

130:                                              ; preds = %21, %5
  %131 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 0
  call void @VP8SetHistogramData(i32* nonnull %131, %struct.VP8Histogram* %4) #7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #7
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @QuantizeBlock_SSE41(i16* nocapture, i16* nocapture, %struct.VP8Matrix* readonly) #2 {
  %4 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 4, i64 0
  %5 = bitcast i16* %0 to <8 x i16>*
  %6 = load <8 x i16>, <8 x i16>* %5, align 1
  %7 = getelementptr inbounds i16, i16* %0, i64 8
  %8 = bitcast i16* %7 to <8 x i16>*
  %9 = load <8 x i16>, <8 x i16>* %8, align 1
  %10 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 1
  %11 = bitcast [16 x i16]* %10 to <8 x i16>*
  %12 = load <8 x i16>, <8 x i16>* %11, align 1
  %13 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 1, i64 8
  %14 = bitcast i16* %13 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 1
  %16 = bitcast %struct.VP8Matrix* %2 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 1
  %18 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 0, i64 8
  %19 = bitcast i16* %18 to <8 x i16>*
  %20 = load <8 x i16>, <8 x i16>* %19, align 1
  %21 = sub <8 x i16> zeroinitializer, %6
  %22 = icmp slt <8 x i16> %6, zeroinitializer
  %23 = select <8 x i1> %22, <8 x i16> %21, <8 x i16> %6
  %24 = sub <8 x i16> zeroinitializer, %9
  %25 = icmp slt <8 x i16> %9, zeroinitializer
  %26 = select <8 x i1> %25, <8 x i16> %24, <8 x i16> %9
  %27 = icmp eq i16* %4, null
  br i1 %27, label %36, label %28

28:                                               ; preds = %3
  %29 = bitcast i16* %4 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 1
  %31 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 4, i64 8
  %32 = bitcast i16* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = add <8 x i16> %30, %23
  %35 = add <8 x i16> %33, %26
  br label %36

36:                                               ; preds = %3, %28
  %37 = phi <8 x i16> [ %35, %28 ], [ %26, %3 ]
  %38 = phi <8 x i16> [ %34, %28 ], [ %23, %3 ]
  %39 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %38, <8 x i16> %12) #7
  %40 = mul <8 x i16> %38, %12
  %41 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %37, <8 x i16> %15) #7
  %42 = mul <8 x i16> %37, %15
  %43 = shufflevector <8 x i16> %40, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %40, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = shufflevector <8 x i16> %42, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %46 = shufflevector <8 x i16> %42, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %47 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2
  %48 = bitcast [16 x i32]* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 1
  %50 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 4
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 1
  %53 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 8
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 1
  %56 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 12
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 1
  %59 = bitcast <8 x i16> %43 to <4 x i32>
  %60 = add <4 x i32> %49, %59
  %61 = bitcast <8 x i16> %44 to <4 x i32>
  %62 = add <4 x i32> %52, %61
  %63 = bitcast <8 x i16> %45 to <4 x i32>
  %64 = add <4 x i32> %55, %63
  %65 = bitcast <8 x i16> %46 to <4 x i32>
  %66 = add <4 x i32> %58, %65
  %67 = ashr <4 x i32> %60, <i32 17, i32 17, i32 17, i32 17>
  %68 = ashr <4 x i32> %62, <i32 17, i32 17, i32 17, i32 17>
  %69 = ashr <4 x i32> %64, <i32 17, i32 17, i32 17, i32 17>
  %70 = ashr <4 x i32> %66, <i32 17, i32 17, i32 17, i32 17>
  %71 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %67, <4 x i32> %68) #7
  %72 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %69, <4 x i32> %70) #7
  %73 = icmp slt <8 x i16> %71, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %74 = select <8 x i1> %73, <8 x i16> %71, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %75 = icmp slt <8 x i16> %72, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %76 = select <8 x i1> %75, <8 x i16> %72, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %77 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %74, <8 x i16> %6) #7
  %78 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %76, <8 x i16> %9) #7
  %79 = mul <8 x i16> %77, %17
  %80 = mul <8 x i16> %78, %20
  store <8 x i16> %79, <8 x i16>* %5, align 1
  store <8 x i16> %80, <8 x i16>* %8, align 1
  %81 = bitcast <8 x i16> %77 to <16 x i8>
  %82 = shufflevector <16 x i8> %81, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 16, i32 16, i32 10, i32 11, i32 4, i32 5, i32 6, i32 7, i32 12, i32 13>
  %83 = shufflevector <16 x i8> %81, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 14, i32 15, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %84 = bitcast <8 x i16> %78 to <16 x i8>
  %85 = shufflevector <16 x i8> %84, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 8, i32 9, i32 10, i32 11, i32 4, i32 5, i32 16, i32 16, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %86 = shufflevector <16 x i8> %84, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 0, i32 1, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %87 = or <16 x i8> %86, %82
  %88 = or <16 x i8> %85, %83
  %89 = bitcast i16* %1 to <16 x i8>*
  store <16 x i8> %87, <16 x i8>* %89, align 1
  %90 = getelementptr inbounds i16, i16* %1, i64 8
  %91 = bitcast i16* %90 to <16 x i8>*
  store <16 x i8> %88, <16 x i8>* %91, align 1
  %92 = bitcast <16 x i8> %87 to <8 x i16>
  %93 = bitcast <16 x i8> %88 to <8 x i16>
  %94 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %92, <8 x i16> %93) #7
  %95 = icmp eq <16 x i8> %94, zeroinitializer
  %96 = bitcast <16 x i1> %95 to i16
  %97 = icmp ne i16 %96, -1
  %98 = zext i1 %97 to i32
  ret i32 %98
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @Quantize2Blocks_SSE41(i16* nocapture, i16* nocapture, %struct.VP8Matrix* readonly) #2 {
  %4 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 4, i64 0
  %5 = bitcast i16* %0 to <8 x i16>*
  %6 = load <8 x i16>, <8 x i16>* %5, align 1
  %7 = getelementptr inbounds i16, i16* %0, i64 8
  %8 = bitcast i16* %7 to <8 x i16>*
  %9 = load <8 x i16>, <8 x i16>* %8, align 1
  %10 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 1
  %11 = bitcast [16 x i16]* %10 to <8 x i16>*
  %12 = load <8 x i16>, <8 x i16>* %11, align 1
  %13 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 1, i64 8
  %14 = bitcast i16* %13 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 1
  %16 = bitcast %struct.VP8Matrix* %2 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 1
  %18 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 0, i64 8
  %19 = bitcast i16* %18 to <8 x i16>*
  %20 = load <8 x i16>, <8 x i16>* %19, align 1
  %21 = sub <8 x i16> zeroinitializer, %6
  %22 = icmp slt <8 x i16> %6, zeroinitializer
  %23 = select <8 x i1> %22, <8 x i16> %21, <8 x i16> %6
  %24 = sub <8 x i16> zeroinitializer, %9
  %25 = icmp slt <8 x i16> %9, zeroinitializer
  %26 = select <8 x i1> %25, <8 x i16> %24, <8 x i16> %9
  %27 = icmp eq i16* %4, null
  br i1 %27, label %36, label %28

28:                                               ; preds = %3
  %29 = bitcast i16* %4 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 1
  %31 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 4, i64 8
  %32 = bitcast i16* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = add <8 x i16> %30, %23
  %35 = add <8 x i16> %33, %26
  br label %36

36:                                               ; preds = %3, %28
  %37 = phi <8 x i16> [ %35, %28 ], [ %26, %3 ]
  %38 = phi <8 x i16> [ %34, %28 ], [ %23, %3 ]
  %39 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %38, <8 x i16> %12) #7
  %40 = mul <8 x i16> %38, %12
  %41 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %37, <8 x i16> %15) #7
  %42 = mul <8 x i16> %37, %15
  %43 = shufflevector <8 x i16> %40, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %40, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = shufflevector <8 x i16> %42, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %46 = shufflevector <8 x i16> %42, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %47 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2
  %48 = bitcast [16 x i32]* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 1
  %50 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 4
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 1
  %53 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 8
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 1
  %56 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 12
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 1
  %59 = bitcast <8 x i16> %43 to <4 x i32>
  %60 = add <4 x i32> %49, %59
  %61 = bitcast <8 x i16> %44 to <4 x i32>
  %62 = add <4 x i32> %52, %61
  %63 = bitcast <8 x i16> %45 to <4 x i32>
  %64 = add <4 x i32> %55, %63
  %65 = bitcast <8 x i16> %46 to <4 x i32>
  %66 = add <4 x i32> %58, %65
  %67 = ashr <4 x i32> %60, <i32 17, i32 17, i32 17, i32 17>
  %68 = ashr <4 x i32> %62, <i32 17, i32 17, i32 17, i32 17>
  %69 = ashr <4 x i32> %64, <i32 17, i32 17, i32 17, i32 17>
  %70 = ashr <4 x i32> %66, <i32 17, i32 17, i32 17, i32 17>
  %71 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %67, <4 x i32> %68) #7
  %72 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %69, <4 x i32> %70) #7
  %73 = icmp slt <8 x i16> %71, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %74 = select <8 x i1> %73, <8 x i16> %71, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %75 = icmp slt <8 x i16> %72, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %76 = select <8 x i1> %75, <8 x i16> %72, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %77 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %74, <8 x i16> %6) #7
  %78 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %76, <8 x i16> %9) #7
  %79 = mul <8 x i16> %77, %17
  %80 = mul <8 x i16> %78, %20
  store <8 x i16> %79, <8 x i16>* %5, align 1
  store <8 x i16> %80, <8 x i16>* %8, align 1
  %81 = bitcast <8 x i16> %77 to <16 x i8>
  %82 = shufflevector <16 x i8> %81, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 16, i32 16, i32 10, i32 11, i32 4, i32 5, i32 6, i32 7, i32 12, i32 13>
  %83 = shufflevector <16 x i8> %81, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 14, i32 15, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %84 = bitcast <8 x i16> %78 to <16 x i8>
  %85 = shufflevector <16 x i8> %84, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 8, i32 9, i32 10, i32 11, i32 4, i32 5, i32 16, i32 16, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %86 = shufflevector <16 x i8> %84, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 0, i32 1, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %87 = or <16 x i8> %86, %82
  %88 = or <16 x i8> %85, %83
  %89 = bitcast i16* %1 to <16 x i8>*
  store <16 x i8> %87, <16 x i8>* %89, align 1
  %90 = getelementptr inbounds i16, i16* %1, i64 8
  %91 = bitcast i16* %90 to <16 x i8>*
  store <16 x i8> %88, <16 x i8>* %91, align 1
  %92 = bitcast <16 x i8> %87 to <8 x i16>
  %93 = bitcast <16 x i8> %88 to <8 x i16>
  %94 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %92, <8 x i16> %93) #7
  %95 = icmp eq <16 x i8> %94, zeroinitializer
  %96 = bitcast <16 x i1> %95 to i16
  %97 = icmp ne i16 %96, -1
  %98 = zext i1 %97 to i32
  %99 = getelementptr inbounds i16, i16* %0, i64 16
  %100 = getelementptr inbounds i16, i16* %1, i64 16
  %101 = bitcast i16* %99 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 1
  %103 = getelementptr inbounds i16, i16* %0, i64 24
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 1
  %106 = load <8 x i16>, <8 x i16>* %11, align 1
  %107 = load <8 x i16>, <8 x i16>* %14, align 1
  %108 = load <8 x i16>, <8 x i16>* %16, align 1
  %109 = load <8 x i16>, <8 x i16>* %19, align 1
  %110 = sub <8 x i16> zeroinitializer, %102
  %111 = icmp slt <8 x i16> %102, zeroinitializer
  %112 = select <8 x i1> %111, <8 x i16> %110, <8 x i16> %102
  %113 = sub <8 x i16> zeroinitializer, %105
  %114 = icmp slt <8 x i16> %105, zeroinitializer
  %115 = select <8 x i1> %114, <8 x i16> %113, <8 x i16> %105
  br i1 %27, label %124, label %116

116:                                              ; preds = %36
  %117 = bitcast i16* %4 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 1
  %119 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 4, i64 8
  %120 = bitcast i16* %119 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 1
  %122 = add <8 x i16> %118, %112
  %123 = add <8 x i16> %121, %115
  br label %124

124:                                              ; preds = %36, %116
  %125 = phi <8 x i16> [ %123, %116 ], [ %115, %36 ]
  %126 = phi <8 x i16> [ %122, %116 ], [ %112, %36 ]
  %127 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %126, <8 x i16> %106) #7
  %128 = mul <8 x i16> %126, %106
  %129 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %125, <8 x i16> %107) #7
  %130 = mul <8 x i16> %125, %107
  %131 = shufflevector <8 x i16> %128, <8 x i16> %127, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %132 = shufflevector <8 x i16> %128, <8 x i16> %127, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %133 = shufflevector <8 x i16> %130, <8 x i16> %129, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %134 = shufflevector <8 x i16> %130, <8 x i16> %129, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %135 = load <4 x i32>, <4 x i32>* %48, align 1
  %136 = load <4 x i32>, <4 x i32>* %51, align 1
  %137 = load <4 x i32>, <4 x i32>* %54, align 1
  %138 = load <4 x i32>, <4 x i32>* %57, align 1
  %139 = bitcast <8 x i16> %131 to <4 x i32>
  %140 = add <4 x i32> %135, %139
  %141 = bitcast <8 x i16> %132 to <4 x i32>
  %142 = add <4 x i32> %136, %141
  %143 = bitcast <8 x i16> %133 to <4 x i32>
  %144 = add <4 x i32> %137, %143
  %145 = bitcast <8 x i16> %134 to <4 x i32>
  %146 = add <4 x i32> %138, %145
  %147 = ashr <4 x i32> %140, <i32 17, i32 17, i32 17, i32 17>
  %148 = ashr <4 x i32> %142, <i32 17, i32 17, i32 17, i32 17>
  %149 = ashr <4 x i32> %144, <i32 17, i32 17, i32 17, i32 17>
  %150 = ashr <4 x i32> %146, <i32 17, i32 17, i32 17, i32 17>
  %151 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %147, <4 x i32> %148) #7
  %152 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %149, <4 x i32> %150) #7
  %153 = icmp slt <8 x i16> %151, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %154 = select <8 x i1> %153, <8 x i16> %151, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %155 = icmp slt <8 x i16> %152, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %156 = select <8 x i1> %155, <8 x i16> %152, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %157 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %154, <8 x i16> %102) #7
  %158 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %156, <8 x i16> %105) #7
  %159 = mul <8 x i16> %157, %108
  %160 = mul <8 x i16> %158, %109
  store <8 x i16> %159, <8 x i16>* %101, align 1
  store <8 x i16> %160, <8 x i16>* %104, align 1
  %161 = bitcast <8 x i16> %157 to <16 x i8>
  %162 = shufflevector <16 x i8> %161, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 16, i32 16, i32 10, i32 11, i32 4, i32 5, i32 6, i32 7, i32 12, i32 13>
  %163 = shufflevector <16 x i8> %161, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 14, i32 15, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %164 = bitcast <8 x i16> %158 to <16 x i8>
  %165 = shufflevector <16 x i8> %164, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 8, i32 9, i32 10, i32 11, i32 4, i32 5, i32 16, i32 16, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %166 = shufflevector <16 x i8> %164, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 0, i32 1, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %167 = or <16 x i8> %166, %162
  %168 = or <16 x i8> %165, %163
  %169 = bitcast i16* %100 to <16 x i8>*
  store <16 x i8> %167, <16 x i8>* %169, align 1
  %170 = getelementptr inbounds i16, i16* %1, i64 24
  %171 = bitcast i16* %170 to <16 x i8>*
  store <16 x i8> %168, <16 x i8>* %171, align 1
  %172 = bitcast <16 x i8> %167 to <8 x i16>
  %173 = bitcast <16 x i8> %168 to <8 x i16>
  %174 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %172, <8 x i16> %173) #7
  %175 = icmp eq <16 x i8> %174, zeroinitializer
  %176 = bitcast <16 x i1> %175 to i16
  %177 = icmp ne i16 %176, -1
  %178 = zext i1 %177 to i32
  %179 = shl nuw nsw i32 %178, 1
  %180 = or i32 %179, %98
  ret i32 %180
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @QuantizeBlockWHT_SSE41(i16* nocapture, i16* nocapture, %struct.VP8Matrix* nocapture readonly) #2 {
  %4 = bitcast i16* %0 to <8 x i16>*
  %5 = load <8 x i16>, <8 x i16>* %4, align 1
  %6 = getelementptr inbounds i16, i16* %0, i64 8
  %7 = bitcast i16* %6 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  %9 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 1
  %10 = bitcast [16 x i16]* %9 to <8 x i16>*
  %11 = load <8 x i16>, <8 x i16>* %10, align 1
  %12 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 1, i64 8
  %13 = bitcast i16* %12 to <8 x i16>*
  %14 = load <8 x i16>, <8 x i16>* %13, align 1
  %15 = bitcast %struct.VP8Matrix* %2 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 1
  %17 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 0, i64 8
  %18 = bitcast i16* %17 to <8 x i16>*
  %19 = load <8 x i16>, <8 x i16>* %18, align 1
  %20 = sub <8 x i16> zeroinitializer, %5
  %21 = icmp slt <8 x i16> %5, zeroinitializer
  %22 = select <8 x i1> %21, <8 x i16> %20, <8 x i16> %5
  %23 = sub <8 x i16> zeroinitializer, %8
  %24 = icmp slt <8 x i16> %8, zeroinitializer
  %25 = select <8 x i1> %24, <8 x i16> %23, <8 x i16> %8
  %26 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %22, <8 x i16> %11) #7
  %27 = mul <8 x i16> %22, %11
  %28 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %25, <8 x i16> %14) #7
  %29 = mul <8 x i16> %25, %14
  %30 = shufflevector <8 x i16> %27, <8 x i16> %26, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %31 = shufflevector <8 x i16> %27, <8 x i16> %26, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %32 = shufflevector <8 x i16> %29, <8 x i16> %28, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %33 = shufflevector <8 x i16> %29, <8 x i16> %28, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %34 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2
  %35 = bitcast [16 x i32]* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 1
  %37 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 1
  %40 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 8
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 1
  %43 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 12
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 1
  %46 = bitcast <8 x i16> %30 to <4 x i32>
  %47 = add <4 x i32> %36, %46
  %48 = bitcast <8 x i16> %31 to <4 x i32>
  %49 = add <4 x i32> %39, %48
  %50 = bitcast <8 x i16> %32 to <4 x i32>
  %51 = add <4 x i32> %42, %50
  %52 = bitcast <8 x i16> %33 to <4 x i32>
  %53 = add <4 x i32> %45, %52
  %54 = ashr <4 x i32> %47, <i32 17, i32 17, i32 17, i32 17>
  %55 = ashr <4 x i32> %49, <i32 17, i32 17, i32 17, i32 17>
  %56 = ashr <4 x i32> %51, <i32 17, i32 17, i32 17, i32 17>
  %57 = ashr <4 x i32> %53, <i32 17, i32 17, i32 17, i32 17>
  %58 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %54, <4 x i32> %55) #7
  %59 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %56, <4 x i32> %57) #7
  %60 = icmp slt <8 x i16> %58, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %61 = select <8 x i1> %60, <8 x i16> %58, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %62 = icmp slt <8 x i16> %59, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %63 = select <8 x i1> %62, <8 x i16> %59, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %64 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %61, <8 x i16> %5) #7
  %65 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %63, <8 x i16> %8) #7
  %66 = mul <8 x i16> %64, %16
  %67 = mul <8 x i16> %65, %19
  store <8 x i16> %66, <8 x i16>* %4, align 1
  store <8 x i16> %67, <8 x i16>* %7, align 1
  %68 = bitcast <8 x i16> %64 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 16, i32 16, i32 10, i32 11, i32 4, i32 5, i32 6, i32 7, i32 12, i32 13>
  %70 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 14, i32 15, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %71 = bitcast <8 x i16> %65 to <16 x i8>
  %72 = shufflevector <16 x i8> %71, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 8, i32 9, i32 10, i32 11, i32 4, i32 5, i32 16, i32 16, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %73 = shufflevector <16 x i8> %71, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 0, i32 1, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %74 = or <16 x i8> %73, %69
  %75 = or <16 x i8> %72, %70
  %76 = bitcast i16* %1 to <16 x i8>*
  store <16 x i8> %74, <16 x i8>* %76, align 1
  %77 = getelementptr inbounds i16, i16* %1, i64 8
  %78 = bitcast i16* %77 to <16 x i8>*
  store <16 x i8> %75, <16 x i8>* %78, align 1
  %79 = bitcast <16 x i8> %74 to <8 x i16>
  %80 = bitcast <16 x i8> %75 to <8 x i16>
  %81 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %79, <8 x i16> %80) #7
  %82 = icmp eq <16 x i8> %81, zeroinitializer
  %83 = bitcast <16 x i1> %82 to i16
  %84 = icmp ne i16 %83, -1
  %85 = zext i1 %84 to i32
  ret i32 %85
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Disto4x4_SSE41(i8* nocapture readonly, i8* nocapture readonly, i16* nocapture readonly) #3 {
  %4 = bitcast i8* %0 to <4 x i32>*
  %5 = load <4 x i32>, <4 x i32>* %4, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 32
  %7 = bitcast i8* %6 to <4 x i32>*
  %8 = load <4 x i32>, <4 x i32>* %7, align 1
  %9 = getelementptr inbounds i8, i8* %0, i64 64
  %10 = bitcast i8* %9 to <4 x i32>*
  %11 = load <4 x i32>, <4 x i32>* %10, align 1
  %12 = getelementptr inbounds i8, i8* %0, i64 96
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> undef, i64 %14, i32 0
  %16 = bitcast i8* %1 to <4 x i32>*
  %17 = load <4 x i32>, <4 x i32>* %16, align 1
  %18 = getelementptr inbounds i8, i8* %1, i64 32
  %19 = bitcast i8* %18 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 1
  %21 = getelementptr inbounds i8, i8* %1, i64 64
  %22 = bitcast i8* %21 to <4 x i32>*
  %23 = load <4 x i32>, <4 x i32>* %22, align 1
  %24 = getelementptr inbounds i8, i8* %1, i64 96
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = insertelement <2 x i64> undef, i64 %26, i32 0
  %28 = shufflevector <4 x i32> %5, <4 x i32> %17, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %29 = shufflevector <4 x i32> %8, <4 x i32> %20, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %30 = shufflevector <4 x i32> %11, <4 x i32> %23, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %31 = bitcast <2 x i64> %15 to <4 x i32>
  %32 = bitcast <2 x i64> %27 to <4 x i32>
  %33 = shufflevector <4 x i32> %31, <4 x i32> %32, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %34 = bitcast <4 x i32> %28 to <16 x i8>
  %35 = shufflevector <16 x i8> %34, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %36 = zext <8 x i8> %35 to <8 x i16>
  %37 = bitcast <4 x i32> %29 to <16 x i8>
  %38 = shufflevector <16 x i8> %37, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %39 = zext <8 x i8> %38 to <8 x i16>
  %40 = bitcast <4 x i32> %30 to <16 x i8>
  %41 = shufflevector <16 x i8> %40, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %42 = zext <8 x i8> %41 to <8 x i16>
  %43 = bitcast <4 x i32> %33 to <16 x i8>
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %45 = zext <8 x i8> %44 to <8 x i16>
  %46 = add nuw nsw <8 x i16> %42, %36
  %47 = add nuw nsw <8 x i16> %45, %39
  %48 = sub nsw <8 x i16> %39, %45
  %49 = sub nsw <8 x i16> %36, %42
  %50 = add nuw nsw <8 x i16> %47, %46
  %51 = add nsw <8 x i16> %48, %49
  %52 = sub nsw <8 x i16> %49, %48
  %53 = sub nsw <8 x i16> %46, %47
  %54 = shufflevector <8 x i16> %50, <8 x i16> %51, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = shufflevector <8 x i16> %52, <8 x i16> %53, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %56 = shufflevector <8 x i16> %50, <8 x i16> %51, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %57 = shufflevector <8 x i16> %52, <8 x i16> %53, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %58 = bitcast <8 x i16> %54 to <4 x i32>
  %59 = bitcast <8 x i16> %55 to <4 x i32>
  %60 = shufflevector <4 x i32> %58, <4 x i32> %59, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %61 = bitcast <4 x i32> %60 to <2 x i64>
  %62 = bitcast <8 x i16> %56 to <4 x i32>
  %63 = bitcast <8 x i16> %57 to <4 x i32>
  %64 = shufflevector <4 x i32> %62, <4 x i32> %63, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %65 = bitcast <4 x i32> %64 to <2 x i64>
  %66 = shufflevector <4 x i32> %58, <4 x i32> %59, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %67 = bitcast <4 x i32> %66 to <2 x i64>
  %68 = shufflevector <4 x i32> %62, <4 x i32> %63, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %69 = bitcast <4 x i32> %68 to <2 x i64>
  %70 = shufflevector <2 x i64> %61, <2 x i64> %65, <2 x i32> <i32 0, i32 2>
  %71 = shufflevector <2 x i64> %61, <2 x i64> %65, <2 x i32> <i32 1, i32 3>
  %72 = shufflevector <2 x i64> %67, <2 x i64> %69, <2 x i32> <i32 0, i32 2>
  %73 = shufflevector <2 x i64> %67, <2 x i64> %69, <2 x i32> <i32 1, i32 3>
  %74 = bitcast i16* %2 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 1
  %76 = getelementptr inbounds i16, i16* %2, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 1
  %79 = bitcast <2 x i64> %70 to <8 x i16>
  %80 = bitcast <2 x i64> %72 to <8 x i16>
  %81 = add <8 x i16> %80, %79
  %82 = bitcast <2 x i64> %71 to <8 x i16>
  %83 = bitcast <2 x i64> %73 to <8 x i16>
  %84 = add <8 x i16> %83, %82
  %85 = sub <8 x i16> %82, %83
  %86 = sub <8 x i16> %79, %80
  %87 = add <8 x i16> %84, %81
  %88 = bitcast <8 x i16> %87 to <2 x i64>
  %89 = add <8 x i16> %85, %86
  %90 = bitcast <8 x i16> %89 to <2 x i64>
  %91 = sub <8 x i16> %86, %85
  %92 = bitcast <8 x i16> %91 to <2 x i64>
  %93 = sub <8 x i16> %81, %84
  %94 = bitcast <8 x i16> %93 to <2 x i64>
  %95 = shufflevector <2 x i64> %88, <2 x i64> %90, <2 x i32> <i32 0, i32 2>
  %96 = shufflevector <2 x i64> %92, <2 x i64> %94, <2 x i32> <i32 0, i32 2>
  %97 = shufflevector <2 x i64> %88, <2 x i64> %90, <2 x i32> <i32 1, i32 3>
  %98 = shufflevector <2 x i64> %92, <2 x i64> %94, <2 x i32> <i32 1, i32 3>
  %99 = bitcast <2 x i64> %95 to <8 x i16>
  %100 = sub <8 x i16> zeroinitializer, %99
  %101 = icmp slt <8 x i16> %99, zeroinitializer
  %102 = select <8 x i1> %101, <8 x i16> %100, <8 x i16> %99
  %103 = bitcast <2 x i64> %96 to <8 x i16>
  %104 = sub <8 x i16> zeroinitializer, %103
  %105 = icmp slt <8 x i16> %103, zeroinitializer
  %106 = select <8 x i1> %105, <8 x i16> %104, <8 x i16> %103
  %107 = bitcast <2 x i64> %97 to <8 x i16>
  %108 = sub <8 x i16> zeroinitializer, %107
  %109 = icmp slt <8 x i16> %107, zeroinitializer
  %110 = select <8 x i1> %109, <8 x i16> %108, <8 x i16> %107
  %111 = bitcast <2 x i64> %98 to <8 x i16>
  %112 = sub <8 x i16> zeroinitializer, %111
  %113 = icmp slt <8 x i16> %111, zeroinitializer
  %114 = select <8 x i1> %113, <8 x i16> %112, <8 x i16> %111
  %115 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %75) #7
  %116 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %106, <8 x i16> %78) #7
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %110, <8 x i16> %75) #7
  %118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %114, <8 x i16> %78) #7
  %119 = add <4 x i32> %116, %115
  %120 = sub <4 x i32> %119, %117
  %121 = sub <4 x i32> %120, %118
  %122 = shufflevector <4 x i32> %121, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %123 = add nsw <4 x i32> %121, %122
  %124 = shufflevector <4 x i32> %123, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %125 = add nsw <4 x i32> %123, %124
  %126 = extractelement <4 x i32> %125, i32 0
  %127 = icmp slt i32 %126, 0
  %128 = sub nsw i32 0, %126
  %129 = select i1 %127, i32 %128, i32 %126
  %130 = lshr i32 %129, 5
  ret i32 %130
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Disto16x16_SSE41(i8* nocapture readonly, i8* nocapture readonly, i16* nocapture readonly) #3 {
  %4 = bitcast i16* %2 to <8 x i16>*
  %5 = load <8 x i16>, <8 x i16>* %4, align 1
  %6 = getelementptr inbounds i16, i16* %2, i64 8
  %7 = bitcast i16* %6 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  br label %9

9:                                                ; preds = %3, %144
  %10 = phi i64 [ 0, %3 ], [ %145, %144 ]
  %11 = phi i32 [ 0, %3 ], [ %141, %144 ]
  %12 = getelementptr inbounds i8, i8* %0, i64 %10
  %13 = getelementptr inbounds i8, i8* %1, i64 %10
  br label %14

14:                                               ; preds = %9, %14
  %15 = phi i64 [ 0, %9 ], [ %142, %14 ]
  %16 = phi i32 [ %11, %9 ], [ %141, %14 ]
  %17 = getelementptr inbounds i8, i8* %12, i64 %15
  %18 = getelementptr inbounds i8, i8* %13, i64 %15
  %19 = bitcast i8* %17 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 1
  %21 = getelementptr inbounds i8, i8* %17, i64 32
  %22 = bitcast i8* %21 to <4 x i32>*
  %23 = load <4 x i32>, <4 x i32>* %22, align 1
  %24 = getelementptr inbounds i8, i8* %17, i64 64
  %25 = bitcast i8* %24 to <4 x i32>*
  %26 = load <4 x i32>, <4 x i32>* %25, align 1
  %27 = getelementptr inbounds i8, i8* %17, i64 96
  %28 = bitcast i8* %27 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = bitcast i8* %18 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 1
  %33 = getelementptr inbounds i8, i8* %18, i64 32
  %34 = bitcast i8* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 1
  %36 = getelementptr inbounds i8, i8* %18, i64 64
  %37 = bitcast i8* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 1
  %39 = getelementptr inbounds i8, i8* %18, i64 96
  %40 = bitcast i8* %39 to i64*
  %41 = load i64, i64* %40, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = shufflevector <4 x i32> %20, <4 x i32> %32, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %44 = shufflevector <4 x i32> %23, <4 x i32> %35, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %45 = shufflevector <4 x i32> %26, <4 x i32> %38, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %46 = bitcast <2 x i64> %30 to <4 x i32>
  %47 = bitcast <2 x i64> %42 to <4 x i32>
  %48 = shufflevector <4 x i32> %46, <4 x i32> %47, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %49 = bitcast <4 x i32> %43 to <16 x i8>
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %51 = zext <8 x i8> %50 to <8 x i16>
  %52 = bitcast <4 x i32> %44 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %54 = zext <8 x i8> %53 to <8 x i16>
  %55 = bitcast <4 x i32> %45 to <16 x i8>
  %56 = shufflevector <16 x i8> %55, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %57 = zext <8 x i8> %56 to <8 x i16>
  %58 = bitcast <4 x i32> %48 to <16 x i8>
  %59 = shufflevector <16 x i8> %58, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %60 = zext <8 x i8> %59 to <8 x i16>
  %61 = add nuw nsw <8 x i16> %57, %51
  %62 = add nuw nsw <8 x i16> %60, %54
  %63 = sub nsw <8 x i16> %54, %60
  %64 = sub nsw <8 x i16> %51, %57
  %65 = add nuw nsw <8 x i16> %62, %61
  %66 = add nsw <8 x i16> %63, %64
  %67 = sub nsw <8 x i16> %64, %63
  %68 = sub nsw <8 x i16> %61, %62
  %69 = shufflevector <8 x i16> %65, <8 x i16> %66, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %70 = shufflevector <8 x i16> %67, <8 x i16> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %71 = shufflevector <8 x i16> %65, <8 x i16> %66, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %72 = shufflevector <8 x i16> %67, <8 x i16> %68, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %73 = bitcast <8 x i16> %69 to <4 x i32>
  %74 = bitcast <8 x i16> %70 to <4 x i32>
  %75 = shufflevector <4 x i32> %73, <4 x i32> %74, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %76 = bitcast <4 x i32> %75 to <2 x i64>
  %77 = bitcast <8 x i16> %71 to <4 x i32>
  %78 = bitcast <8 x i16> %72 to <4 x i32>
  %79 = shufflevector <4 x i32> %77, <4 x i32> %78, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %80 = bitcast <4 x i32> %79 to <2 x i64>
  %81 = shufflevector <4 x i32> %73, <4 x i32> %74, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %82 = bitcast <4 x i32> %81 to <2 x i64>
  %83 = shufflevector <4 x i32> %77, <4 x i32> %78, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %84 = bitcast <4 x i32> %83 to <2 x i64>
  %85 = shufflevector <2 x i64> %76, <2 x i64> %80, <2 x i32> <i32 0, i32 2>
  %86 = shufflevector <2 x i64> %76, <2 x i64> %80, <2 x i32> <i32 1, i32 3>
  %87 = shufflevector <2 x i64> %82, <2 x i64> %84, <2 x i32> <i32 0, i32 2>
  %88 = shufflevector <2 x i64> %82, <2 x i64> %84, <2 x i32> <i32 1, i32 3>
  %89 = bitcast <2 x i64> %85 to <8 x i16>
  %90 = bitcast <2 x i64> %87 to <8 x i16>
  %91 = add <8 x i16> %90, %89
  %92 = bitcast <2 x i64> %86 to <8 x i16>
  %93 = bitcast <2 x i64> %88 to <8 x i16>
  %94 = add <8 x i16> %93, %92
  %95 = sub <8 x i16> %92, %93
  %96 = sub <8 x i16> %89, %90
  %97 = add <8 x i16> %94, %91
  %98 = bitcast <8 x i16> %97 to <2 x i64>
  %99 = add <8 x i16> %95, %96
  %100 = bitcast <8 x i16> %99 to <2 x i64>
  %101 = sub <8 x i16> %96, %95
  %102 = bitcast <8 x i16> %101 to <2 x i64>
  %103 = sub <8 x i16> %91, %94
  %104 = bitcast <8 x i16> %103 to <2 x i64>
  %105 = shufflevector <2 x i64> %98, <2 x i64> %100, <2 x i32> <i32 0, i32 2>
  %106 = shufflevector <2 x i64> %102, <2 x i64> %104, <2 x i32> <i32 0, i32 2>
  %107 = shufflevector <2 x i64> %98, <2 x i64> %100, <2 x i32> <i32 1, i32 3>
  %108 = shufflevector <2 x i64> %102, <2 x i64> %104, <2 x i32> <i32 1, i32 3>
  %109 = bitcast <2 x i64> %105 to <8 x i16>
  %110 = sub <8 x i16> zeroinitializer, %109
  %111 = icmp slt <8 x i16> %109, zeroinitializer
  %112 = select <8 x i1> %111, <8 x i16> %110, <8 x i16> %109
  %113 = bitcast <2 x i64> %106 to <8 x i16>
  %114 = sub <8 x i16> zeroinitializer, %113
  %115 = icmp slt <8 x i16> %113, zeroinitializer
  %116 = select <8 x i1> %115, <8 x i16> %114, <8 x i16> %113
  %117 = bitcast <2 x i64> %107 to <8 x i16>
  %118 = sub <8 x i16> zeroinitializer, %117
  %119 = icmp slt <8 x i16> %117, zeroinitializer
  %120 = select <8 x i1> %119, <8 x i16> %118, <8 x i16> %117
  %121 = bitcast <2 x i64> %108 to <8 x i16>
  %122 = sub <8 x i16> zeroinitializer, %121
  %123 = icmp slt <8 x i16> %121, zeroinitializer
  %124 = select <8 x i1> %123, <8 x i16> %122, <8 x i16> %121
  %125 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %112, <8 x i16> %5) #7
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> %8) #7
  %127 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %120, <8 x i16> %5) #7
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %124, <8 x i16> %8) #7
  %129 = add <4 x i32> %126, %125
  %130 = sub <4 x i32> %129, %127
  %131 = sub <4 x i32> %130, %128
  %132 = shufflevector <4 x i32> %131, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %133 = add nsw <4 x i32> %131, %132
  %134 = shufflevector <4 x i32> %133, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %135 = add nsw <4 x i32> %133, %134
  %136 = extractelement <4 x i32> %135, i32 0
  %137 = icmp slt i32 %136, 0
  %138 = sub nsw i32 0, %136
  %139 = select i1 %137, i32 %138, i32 %136
  %140 = lshr i32 %139, 5
  %141 = add nsw i32 %140, %16
  %142 = add nuw nsw i64 %15, 4
  %143 = icmp ult i64 %142, 16
  br i1 %143, label %14, label %144

144:                                              ; preds = %14
  %145 = add nuw nsw i64 %10, 128
  %146 = icmp ult i64 %145, 512
  br i1 %146, label %9, label %147

147:                                              ; preds = %144
  ret i32 %141
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @VP8SetHistogramData(i32*, %struct.VP8Histogram*) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16>, <8 x i16>) #6

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #6

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16>, <8 x i16>) #6

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16>, <8 x i16>) #6

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
