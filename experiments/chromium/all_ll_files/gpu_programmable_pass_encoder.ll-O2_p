; ModuleID = '../../third_party/blink/renderer/modules/webgpu/gpu_programmable_pass_encoder.cc'
source_filename = "../../third_party/blink/renderer/modules/webgpu/gpu_programmable_pass_encoder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::GPUProgrammablePassEncoder" = type { i8 }
%"class.blink::TypedFlexibleArrayBufferView" = type { %"class.blink::FlexibleArrayBufferView" }
%"class.blink::FlexibleArrayBufferView" = type { %"class.blink::DOMArrayBufferView"*, i8*, i64, [64 x i8] }
%"class.blink::DOMArrayBufferView" = type { %"class.blink::ScriptWrappable", i8*, i64, %"class.blink::Member" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::DOMArrayBufferBase"* }
%"class.blink::DOMArrayBufferBase" = type <{ %"class.blink::ScriptWrappable", %"class.blink::ArrayBufferContents", i8, [7 x i8] }>
%"class.blink::ArrayBufferContents" = type { %"class.std::__1::shared_ptr" }
%"class.std::__1::shared_ptr" = type { %"class.v8::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::BackingStore" = type { i8 }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.1" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.v8::Isolate" = type { i8 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::TraceWrapperV8Reference.1" = type { %"class.v8::TracedReference.2" }
%"class.v8::TracedReference.2" = type { %"class.v8::BasicTracedReference.3" }
%"class.v8::BasicTracedReference.3" = type { %"class.v8::TracedReferenceBase" }

@.str = private unnamed_addr constant [34 x i8] c"dynamicOffsetsDataStart too large\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"dynamicOffsetsDataLength too large\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink26GPUProgrammablePassEncoder34ValidateSetBindGroupDynamicOffsetsERKNS_28TypedFlexibleArrayBufferViewIjLb0EEEmjRNS_14ExceptionStateE(%"class.blink::GPUProgrammablePassEncoder"* nocapture readnone, %"class.blink::TypedFlexibleArrayBufferView"* nocapture readonly dereferenceable(88), i64, i32, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::TypedFlexibleArrayBufferView", %"class.blink::TypedFlexibleArrayBufferView"* %1, i64 0, i32 0, i32 0
  %7 = load %"class.blink::DOMArrayBufferView"*, %"class.blink::DOMArrayBufferView"** %6, align 8
  %8 = icmp eq %"class.blink::DOMArrayBufferView"* %7, null
  br i1 %8, label %15, label %9

9:                                                ; preds = %5
  %10 = bitcast %"class.blink::DOMArrayBufferView"* %7 to i64 (%"class.blink::DOMArrayBufferView"*)***
  %11 = load i64 (%"class.blink::DOMArrayBufferView"*)**, i64 (%"class.blink::DOMArrayBufferView"*)*** %10, align 8
  %12 = getelementptr inbounds i64 (%"class.blink::DOMArrayBufferView"*)*, i64 (%"class.blink::DOMArrayBufferView"*)** %11, i64 10
  %13 = load i64 (%"class.blink::DOMArrayBufferView"*)*, i64 (%"class.blink::DOMArrayBufferView"*)** %12, align 8
  %14 = tail call i64 %13(%"class.blink::DOMArrayBufferView"* nonnull %7) #2
  br label %18

15:                                               ; preds = %5
  %16 = getelementptr inbounds %"class.blink::TypedFlexibleArrayBufferView", %"class.blink::TypedFlexibleArrayBufferView"* %1, i64 0, i32 0, i32 2
  %17 = load i64, i64* %16, align 8
  br label %18

18:                                               ; preds = %9, %15
  %19 = phi i64 [ %14, %9 ], [ %17, %15 ]
  %20 = lshr i64 %19, 2
  %21 = icmp ult i64 %20, %2
  br i1 %21, label %26, label %22

22:                                               ; preds = %18
  %23 = zext i32 %3 to i64
  %24 = sub i64 %20, %2
  %25 = icmp ult i64 %24, %23
  br i1 %25, label %26, label %28

26:                                               ; preds = %22, %18
  %27 = phi i8* [ getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), %18 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), %22 ]
  tail call void @_ZN5blink14ExceptionState15ThrowRangeErrorEPKc(%"class.blink::ExceptionState"* %4, i8* %27) #2
  br label %28

28:                                               ; preds = %26, %22
  %29 = phi i1 [ true, %22 ], [ false, %26 ]
  ret i1 %29
}

declare void @_ZN5blink14ExceptionState15ThrowRangeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
