; ModuleID = '../../third_party/boringssl/src/crypto/cipher_extra/tls_cbc.c'
source_filename = "../../third_party/boringssl/src/crypto/cipher_extra/tls_cbc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sha_state_st = type { %union.anon, i32, i32, [64 x i8], i32 }
%union.anon = type { [5 x i32] }
%struct.env_md_st = type opaque

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @EVP_tls_cbc_remove_padding(i64* nocapture, i64* nocapture, i8* nocapture readonly, i64, i64, i64) local_unnamed_addr #0 {
  %7 = add i64 %5, 1
  %8 = icmp ugt i64 %7, %3
  br i1 %8, label %113, label %9

9:                                                ; preds = %6
  %10 = add i64 %3, -1
  %11 = getelementptr inbounds i8, i8* %2, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i64
  %14 = add i64 %7, %13
  %15 = xor i64 %14, %3
  %16 = sub i64 %3, %14
  %17 = xor i64 %16, %3
  %18 = or i64 %17, %15
  %19 = xor i64 %18, %3
  %20 = ashr i64 %19, 63
  %21 = xor i64 %20, -1
  %22 = icmp ult i64 %3, 256
  %23 = select i1 %22, i64 %3, i64 256
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %87, label %25

25:                                               ; preds = %9
  %26 = icmp ult i64 %23, 4
  br i1 %26, label %27, label %30

27:                                               ; preds = %81, %25
  %28 = phi i64 [ 0, %25 ], [ %31, %81 ]
  %29 = phi i64 [ %21, %25 ], [ %85, %81 ]
  br label %95

30:                                               ; preds = %25
  %31 = and i64 %23, 508
  %32 = insertelement <2 x i64> undef, i64 %13, i32 0
  %33 = shufflevector <2 x i64> %32, <2 x i64> undef, <2 x i32> zeroinitializer
  %34 = insertelement <2 x i64> undef, i64 %13, i32 0
  %35 = shufflevector <2 x i64> %34, <2 x i64> undef, <2 x i32> zeroinitializer
  %36 = insertelement <2 x i8> undef, i8 %12, i32 0
  %37 = shufflevector <2 x i8> %36, <2 x i8> undef, <2 x i32> zeroinitializer
  %38 = insertelement <2 x i8> undef, i8 %12, i32 0
  %39 = shufflevector <2 x i8> %38, <2 x i8> undef, <2 x i32> zeroinitializer
  %40 = insertelement <2 x i64> <i64 undef, i64 -1>, i64 %21, i32 0
  br label %41

41:                                               ; preds = %41, %30
  %42 = phi i64 [ 0, %30 ], [ %78, %41 ]
  %43 = phi <2 x i64> [ <i64 0, i64 1>, %30 ], [ %79, %41 ]
  %44 = phi <2 x i64> [ %40, %30 ], [ %76, %41 ]
  %45 = phi <2 x i64> [ <i64 -1, i64 -1>, %30 ], [ %77, %41 ]
  %46 = add <2 x i64> %43, <i64 2, i64 2>
  %47 = sub <2 x i64> %33, %43
  %48 = sub <2 x i64> %35, %46
  %49 = or <2 x i64> %47, %43
  %50 = or <2 x i64> %48, %46
  %51 = ashr <2 x i64> %49, <i64 63, i64 63>
  %52 = ashr <2 x i64> %50, <i64 63, i64 63>
  %53 = trunc <2 x i64> %51 to <2 x i8>
  %54 = trunc <2 x i64> %52 to <2 x i8>
  %55 = xor <2 x i8> %53, <i8 -1, i8 -1>
  %56 = xor <2 x i8> %54, <i8 -1, i8 -1>
  %57 = sub i64 %10, %42
  %58 = getelementptr inbounds i8, i8* %2, i64 %57
  %59 = getelementptr inbounds i8, i8* %58, i64 -1
  %60 = bitcast i8* %59 to <2 x i8>*
  %61 = load <2 x i8>, <2 x i8>* %60, align 1
  %62 = shufflevector <2 x i8> %61, <2 x i8> undef, <2 x i32> <i32 1, i32 0>
  %63 = getelementptr inbounds i8, i8* %58, i64 -2
  %64 = getelementptr inbounds i8, i8* %63, i64 -1
  %65 = bitcast i8* %64 to <2 x i8>*
  %66 = load <2 x i8>, <2 x i8>* %65, align 1
  %67 = shufflevector <2 x i8> %66, <2 x i8> undef, <2 x i32> <i32 1, i32 0>
  %68 = xor <2 x i8> %62, %37
  %69 = xor <2 x i8> %67, %39
  %70 = and <2 x i8> %68, %55
  %71 = and <2 x i8> %69, %56
  %72 = zext <2 x i8> %70 to <2 x i64>
  %73 = zext <2 x i8> %71 to <2 x i64>
  %74 = xor <2 x i64> %72, <i64 -1, i64 -1>
  %75 = xor <2 x i64> %73, <i64 -1, i64 -1>
  %76 = and <2 x i64> %44, %74
  %77 = and <2 x i64> %45, %75
  %78 = add i64 %42, 4
  %79 = add <2 x i64> %43, <i64 4, i64 4>
  %80 = icmp eq i64 %78, %31
  br i1 %80, label %81, label %41, !llvm.loop !2

81:                                               ; preds = %41
  %82 = and <2 x i64> %77, %76
  %83 = shufflevector <2 x i64> %82, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %84 = and <2 x i64> %82, %83
  %85 = extractelement <2 x i64> %84, i32 0
  %86 = icmp eq i64 %23, %31
  br i1 %86, label %87, label %27

87:                                               ; preds = %95, %81, %9
  %88 = phi i64 [ %21, %9 ], [ %85, %81 ], [ %110, %95 ]
  %89 = and i64 %88, 255
  %90 = sub nsw i64 254, %89
  %91 = ashr i64 %90, 63
  %92 = add nuw nsw i64 %13, 1
  %93 = and i64 %91, %92
  %94 = sub i64 %3, %93
  store i64 %94, i64* %1, align 8
  store i64 %91, i64* %0, align 8
  br label %113

95:                                               ; preds = %27, %95
  %96 = phi i64 [ %111, %95 ], [ %28, %27 ]
  %97 = phi i64 [ %110, %95 ], [ %29, %27 ]
  %98 = sub i64 %13, %96
  %99 = or i64 %98, %96
  %100 = ashr i64 %99, 63
  %101 = trunc i64 %100 to i8
  %102 = xor i8 %101, -1
  %103 = sub i64 %10, %96
  %104 = getelementptr inbounds i8, i8* %2, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = xor i8 %105, %12
  %107 = and i8 %106, %102
  %108 = zext i8 %107 to i64
  %109 = xor i64 %108, -1
  %110 = and i64 %97, %109
  %111 = add nuw i64 %96, 1
  %112 = icmp ult i64 %111, %23
  br i1 %112, label %95, label %87, !llvm.loop !4

113:                                              ; preds = %6, %87
  %114 = phi i32 [ 1, %87 ], [ 0, %6 ]
  ret i32 %114
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @EVP_tls_cbc_copy_mac(i8* nocapture, i64, i8* nocapture readonly, i64, i64) local_unnamed_addr #2 {
  %6 = alloca [64 x i8], align 16
  %7 = alloca [64 x i8], align 16
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 64, i1 false)
  %9 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 64, i1 false)
  %10 = sub i64 %3, %1
  %11 = add i64 %1, 256
  %12 = tail call i64 @llvm.usub.sat.i64(i64 %4, i64 %11)
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 %1, i1 false) #5
  br label %15

15:                                               ; preds = %5, %14
  %16 = icmp ult i64 %12, %4
  br i1 %16, label %25, label %17

17:                                               ; preds = %25, %15
  %18 = phi i64 [ 0, %15 ], [ %55, %25 ]
  %19 = icmp ugt i64 %1, 1
  br i1 %19, label %20, label %59

20:                                               ; preds = %17
  %21 = and i64 %1, 1
  %22 = icmp eq i64 %1, 1
  %23 = sub i64 %1, %21
  %24 = icmp eq i64 %21, 0
  br label %63

25:                                               ; preds = %15, %25
  %26 = phi i64 [ %57, %25 ], [ 0, %15 ]
  %27 = phi i64 [ %56, %25 ], [ %12, %15 ]
  %28 = phi i64 [ %39, %25 ], [ 0, %15 ]
  %29 = phi i64 [ %55, %25 ], [ 0, %15 ]
  %30 = icmp ult i64 %26, %1
  %31 = select i1 %30, i64 0, i64 %1
  %32 = sub i64 %26, %31
  %33 = xor i64 %27, %10
  %34 = xor i64 %33, -9223372036854775808
  %35 = add i64 %33, -1
  %36 = and i64 %35, %34
  %37 = ashr i64 %36, 63
  %38 = and i64 %28, 255
  %39 = or i64 %37, %38
  %40 = xor i64 %27, %3
  %41 = sub i64 %27, %3
  %42 = xor i64 %41, %27
  %43 = or i64 %42, %40
  %44 = xor i64 %43, %27
  %45 = ashr i64 %44, 63
  %46 = getelementptr inbounds i8, i8* %2, i64 %27
  %47 = load i8, i8* %46, align 1
  %48 = and i64 %45, %39
  %49 = trunc i64 %48 to i8
  %50 = and i8 %47, %49
  %51 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 %32
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %50, %52
  store i8 %53, i8* %51, align 1
  %54 = and i64 %32, %37
  %55 = or i64 %54, %29
  %56 = add nuw i64 %27, 1
  %57 = add i64 %32, 1
  %58 = icmp eq i64 %56, %4
  br i1 %58, label %17, label %25

59:                                               ; preds = %93, %17
  %60 = phi i8* [ %8, %17 ], [ %66, %93 ]
  br i1 %13, label %62, label %61

61:                                               ; preds = %59
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %60, i64 %1, i1 false) #5
  br label %62

62:                                               ; preds = %59, %61
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #5
  ret void

63:                                               ; preds = %20, %93
  %64 = phi i8* [ %66, %93 ], [ %8, %20 ]
  %65 = phi i64 [ %94, %93 ], [ 1, %20 ]
  %66 = phi i8* [ %64, %93 ], [ %9, %20 ]
  %67 = phi i64 [ %95, %93 ], [ %18, %20 ]
  %68 = and i64 %67, 1
  %69 = add nuw nsw i64 %68, 255
  %70 = and i64 %69, 255
  %71 = tail call i64 asm "", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %70) #6, !srcloc !6
  %72 = or i64 %69, -256
  %73 = xor i64 %72, 255
  %74 = tail call i64 asm "", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %73) #6, !srcloc !6
  br i1 %22, label %75, label %97

75:                                               ; preds = %97, %63
  %76 = phi i64 [ %65, %63 ], [ %132, %97 ]
  %77 = phi i64 [ 0, %63 ], [ %131, %97 ]
  br i1 %24, label %93, label %78

78:                                               ; preds = %75
  %79 = icmp ult i64 %76, %1
  %80 = select i1 %79, i64 0, i64 %1
  %81 = sub i64 %76, %80
  %82 = getelementptr inbounds i8, i8* %64, i64 %77
  %83 = load i8, i8* %82, align 1
  %84 = getelementptr inbounds i8, i8* %64, i64 %81
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %83 to i64
  %87 = zext i8 %85 to i64
  %88 = and i64 %71, %86
  %89 = and i64 %74, %87
  %90 = or i64 %89, %88
  %91 = trunc i64 %90 to i8
  %92 = getelementptr inbounds i8, i8* %66, i64 %77
  store i8 %91, i8* %92, align 1
  br label %93

93:                                               ; preds = %75, %78
  %94 = shl i64 %65, 1
  %95 = lshr i64 %67, 1
  %96 = icmp ult i64 %94, %1
  br i1 %96, label %63, label %59

97:                                               ; preds = %63, %97
  %98 = phi i64 [ %132, %97 ], [ %65, %63 ]
  %99 = phi i64 [ %131, %97 ], [ 0, %63 ]
  %100 = phi i64 [ %133, %97 ], [ %23, %63 ]
  %101 = icmp ult i64 %98, %1
  %102 = select i1 %101, i64 0, i64 %1
  %103 = sub i64 %98, %102
  %104 = getelementptr inbounds i8, i8* %64, i64 %99
  %105 = load i8, i8* %104, align 1
  %106 = getelementptr inbounds i8, i8* %64, i64 %103
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %105 to i64
  %109 = zext i8 %107 to i64
  %110 = and i64 %71, %108
  %111 = and i64 %74, %109
  %112 = or i64 %111, %110
  %113 = trunc i64 %112 to i8
  %114 = getelementptr inbounds i8, i8* %66, i64 %99
  store i8 %113, i8* %114, align 1
  %115 = or i64 %99, 1
  %116 = add i64 %103, 1
  %117 = icmp ult i64 %116, %1
  %118 = select i1 %117, i64 0, i64 %1
  %119 = sub i64 %116, %118
  %120 = getelementptr inbounds i8, i8* %64, i64 %115
  %121 = load i8, i8* %120, align 1
  %122 = getelementptr inbounds i8, i8* %64, i64 %119
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %121 to i64
  %125 = zext i8 %123 to i64
  %126 = and i64 %71, %124
  %127 = and i64 %74, %125
  %128 = or i64 %127, %126
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds i8, i8* %66, i64 %115
  store i8 %129, i8* %130, align 1
  %131 = add nuw i64 %99, 2
  %132 = add i64 %119, 1
  %133 = add i64 %100, -2
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %75, label %97
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_sha1_final_with_secret_suffix(%struct.sha_state_st*, i8* nocapture, i8* nocapture readonly, i64, i64) local_unnamed_addr #2 {
  %6 = alloca [64 x i8], align 16
  %7 = shl i64 %4, 3
  %8 = getelementptr inbounds %struct.sha_state_st, %struct.sha_state_st* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp ne i32 %9, 0
  %11 = icmp ugt i64 %4, 2305843009213693951
  %12 = or i1 %11, %10
  br i1 %12, label %182, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %struct.sha_state_st, %struct.sha_state_st* %0, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = add i64 %7, %16
  %18 = icmp ult i64 %17, %7
  %19 = icmp ugt i64 %17, 4294967295
  %20 = or i1 %18, %19
  br i1 %20, label %182, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds %struct.sha_state_st, %struct.sha_state_st* %0, i64 0, i32 4
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = add nuw nsw i64 %24, 72
  %26 = add i64 %25, %3
  %27 = lshr i64 %26, 6
  %28 = add nsw i64 %27, -1
  %29 = add nuw nsw i64 %25, %4
  %30 = lshr i64 %29, 6
  %31 = shl i64 %3, 3
  %32 = add i64 %31, %16
  %33 = lshr i64 %32, 24
  %34 = lshr i64 %32, 16
  %35 = lshr i64 %32, 8
  %36 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %36) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 0, i64 64, i1 false)
  %37 = icmp eq i64 %30, 0
  br i1 %37, label %47, label %38

38:                                               ; preds = %21
  %39 = getelementptr inbounds %struct.sha_state_st, %struct.sha_state_st* %0, i64 0, i32 3, i64 0
  %40 = add nuw i64 %27, 9223372036854775807
  %41 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 60
  %42 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 61
  %43 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 62
  %44 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 63
  %45 = getelementptr inbounds %struct.sha_state_st, %struct.sha_state_st* %0, i64 0, i32 0, i32 0, i64 4
  %46 = bitcast %struct.sha_state_st* %0 to <4 x i32>*
  br label %55

47:                                               ; preds = %126, %21
  %48 = phi i32 [ 0, %21 ], [ %156, %126 ]
  %49 = phi <4 x i32> [ zeroinitializer, %21 ], [ %153, %126 ]
  %50 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %49)
  %51 = bitcast i8* %1 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %51, align 1
  %52 = getelementptr inbounds i8, i8* %1, i64 16
  %53 = call i32 @llvm.bswap.i32(i32 %48) #5
  %54 = bitcast i8* %52 to i32*
  store i32 %53, i32* %54, align 1
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %36) #5
  br label %182

55:                                               ; preds = %126, %38
  %56 = phi i32 [ 0, %38 ], [ %156, %126 ]
  %57 = phi i64 [ 0, %38 ], [ %158, %126 ]
  %58 = phi i64 [ 0, %38 ], [ %157, %126 ]
  %59 = phi <4 x i32> [ zeroinitializer, %38 ], [ %153, %126 ]
  %60 = icmp eq i64 %57, 0
  br i1 %60, label %61, label %66

61:                                               ; preds = %55
  %62 = load i32, i32* %22, align 4
  %63 = zext i32 %62 to i64
  %64 = icmp eq i32 %62, 0
  br i1 %64, label %66, label %65

65:                                               ; preds = %61
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %36, i8* align 1 %39, i64 %63, i1 false) #5
  br label %66

66:                                               ; preds = %65, %61, %55
  %67 = phi i64 [ 0, %55 ], [ 0, %61 ], [ %63, %65 ]
  %68 = icmp ult i64 %58, %4
  br i1 %68, label %69, label %78

69:                                               ; preds = %66
  %70 = sub nsw i64 64, %67
  %71 = sub i64 %4, %58
  %72 = icmp ugt i64 %70, %71
  %73 = select i1 %72, i64 %71, i64 %70
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %78, label %75

75:                                               ; preds = %69
  %76 = getelementptr inbounds i8, i8* %2, i64 %58
  %77 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 %67
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %77, i8* align 1 %76, i64 %73, i1 false) #5
  br label %78

78:                                               ; preds = %75, %69, %66
  %79 = icmp ult i64 %67, 64
  br i1 %79, label %80, label %126

80:                                               ; preds = %78
  %81 = sub i64 %58, %67
  %82 = call i64 asm "", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %3) #6, !srcloc !6
  %83 = sub nsw i64 64, %67
  %84 = icmp ult i64 %83, 16
  br i1 %84, label %85, label %87

85:                                               ; preds = %124, %80
  %86 = phi i64 [ %67, %80 ], [ %89, %124 ]
  br label %160

87:                                               ; preds = %80
  %88 = and i64 %83, -16
  %89 = add nsw i64 %67, %88
  %90 = insertelement <16 x i64> undef, i64 %67, i32 0
  %91 = shufflevector <16 x i64> %90, <16 x i64> undef, <16 x i32> zeroinitializer
  %92 = add <16 x i64> %91, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>
  %93 = insertelement <16 x i64> undef, i64 %81, i32 0
  %94 = shufflevector <16 x i64> %93, <16 x i64> undef, <16 x i32> zeroinitializer
  %95 = insertelement <16 x i64> undef, i64 %82, i32 0
  %96 = shufflevector <16 x i64> %95, <16 x i64> undef, <16 x i32> zeroinitializer
  br label %97

97:                                               ; preds = %97, %87
  %98 = phi i64 [ 0, %87 ], [ %121, %97 ]
  %99 = phi <16 x i64> [ %92, %87 ], [ %122, %97 ]
  %100 = add i64 %67, %98
  %101 = add <16 x i64> %94, %99
  %102 = xor <16 x i64> %96, %101
  %103 = sub <16 x i64> %101, %96
  %104 = xor <16 x i64> %103, %101
  %105 = or <16 x i64> %104, %102
  %106 = xor <16 x i64> %105, %101
  %107 = ashr <16 x i64> %106, <i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63>
  %108 = trunc <16 x i64> %107 to <16 x i8>
  %109 = xor <16 x i64> %102, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %110 = add <16 x i64> %102, <i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1>
  %111 = and <16 x i64> %110, %109
  %112 = ashr <16 x i64> %111, <i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63, i64 63>
  %113 = trunc <16 x i64> %112 to <16 x i8>
  %114 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 %100
  %115 = bitcast i8* %114 to <16 x i8>*
  %116 = load <16 x i8>, <16 x i8>* %115, align 1
  %117 = and <16 x i8> %116, %108
  %118 = and <16 x i8> %113, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %119 = or <16 x i8> %117, %118
  %120 = bitcast i8* %114 to <16 x i8>*
  store <16 x i8> %119, <16 x i8>* %120, align 1
  %121 = add i64 %98, 16
  %122 = add <16 x i64> %99, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %123 = icmp eq i64 %121, %88
  br i1 %123, label %124, label %97, !llvm.loop !7

124:                                              ; preds = %97
  %125 = icmp eq i64 %83, %88
  br i1 %125, label %126, label %85

126:                                              ; preds = %160, %124, %78
  %127 = add i64 %58, 64
  %128 = xor i64 %57, %28
  %129 = add i64 %128, -1
  %130 = and i64 %129, %40
  %131 = ashr i64 %130, 63
  %132 = load i8, i8* %41, align 4
  %133 = and i64 %33, %131
  %134 = trunc i64 %133 to i8
  %135 = or i8 %132, %134
  store i8 %135, i8* %41, align 4
  %136 = load i8, i8* %42, align 1
  %137 = and i64 %34, %131
  %138 = trunc i64 %137 to i8
  %139 = or i8 %136, %138
  store i8 %139, i8* %42, align 1
  %140 = load i8, i8* %43, align 2
  %141 = and i64 %35, %131
  %142 = trunc i64 %141 to i8
  %143 = or i8 %140, %142
  store i8 %143, i8* %43, align 2
  %144 = load i8, i8* %44, align 1
  %145 = and i64 %32, %131
  %146 = trunc i64 %145 to i8
  %147 = or i8 %144, %146
  store i8 %147, i8* %44, align 1
  call void @SHA1_Transform(%struct.sha_state_st* %0, i8* nonnull %36) #5
  %148 = trunc i64 %131 to i32
  %149 = load <4 x i32>, <4 x i32>* %46, align 4
  %150 = insertelement <4 x i32> undef, i32 %148, i32 0
  %151 = shufflevector <4 x i32> %150, <4 x i32> undef, <4 x i32> zeroinitializer
  %152 = and <4 x i32> %149, %151
  %153 = or <4 x i32> %59, %152
  %154 = load i32, i32* %45, align 4
  %155 = and i32 %154, %148
  %156 = or i32 %56, %155
  %157 = sub i64 %127, %67
  %158 = add nuw nsw i64 %57, 1
  %159 = icmp eq i64 %158, %30
  br i1 %159, label %47, label %55

160:                                              ; preds = %85, %160
  %161 = phi i64 [ %180, %160 ], [ %86, %85 ]
  %162 = add i64 %81, %161
  %163 = xor i64 %82, %162
  %164 = sub i64 %162, %82
  %165 = xor i64 %164, %162
  %166 = or i64 %165, %163
  %167 = xor i64 %166, %162
  %168 = ashr i64 %167, 63
  %169 = trunc i64 %168 to i8
  %170 = xor i64 %163, -9223372036854775808
  %171 = add i64 %163, -1
  %172 = and i64 %171, %170
  %173 = ashr i64 %172, 63
  %174 = trunc i64 %173 to i8
  %175 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 %161
  %176 = load i8, i8* %175, align 1
  %177 = and i8 %176, %169
  %178 = and i8 %174, -128
  %179 = or i8 %177, %178
  store i8 %179, i8* %175, align 1
  %180 = add nuw nsw i64 %161, 1
  %181 = icmp eq i64 %180, 64
  br i1 %181, label %126, label %160, !llvm.loop !8

182:                                              ; preds = %13, %5, %47
  %183 = phi i32 [ 1, %47 ], [ 0, %5 ], [ 0, %13 ]
  ret i32 %183
}

declare void @SHA1_Transform(%struct.sha_state_st*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_tls_cbc_record_digest_supported(%struct.env_md_st*) local_unnamed_addr #2 {
  %2 = tail call i32 @EVP_MD_type(%struct.env_md_st* %0) #5
  %3 = icmp eq i32 %2, 64
  %4 = zext i1 %3 to i32
  ret i32 %4
}

declare i32 @EVP_MD_type(%struct.env_md_st*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_tls_cbc_digest_record(%struct.env_md_st*, i8*, i64* nocapture, i8*, i8*, i64, i64, i8* nocapture readonly, i32) local_unnamed_addr #2 {
  %10 = alloca [64 x i8], align 16
  %11 = alloca %struct.sha_state_st, align 4
  %12 = alloca [20 x i8], align 16
  %13 = tail call i32 @EVP_MD_type(%struct.env_md_st* %0) #5
  %14 = icmp eq i32 %13, 64
  br i1 %14, label %16, label %15

15:                                               ; preds = %9
  store i64 0, i64* %2, align 8
  br label %83

16:                                               ; preds = %9
  %17 = icmp ugt i32 %8, 64
  br i1 %17, label %83, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %19) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 0, i64 64, i1 false) #5
  %20 = icmp eq i32 %8, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %18
  %22 = zext i32 %8 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %19, i8* align 1 %7, i64 %22, i1 false) #5
  br label %23

23:                                               ; preds = %18, %21
  %24 = bitcast [64 x i8]* %10 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 16
  %26 = xor <16 x i8> %25, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %27 = bitcast [64 x i8]* %10 to <16 x i8>*
  store <16 x i8> %26, <16 x i8>* %27, align 16
  %28 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 16
  %29 = bitcast i8* %28 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 16
  %31 = xor <16 x i8> %30, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %32 = bitcast i8* %28 to <16 x i8>*
  store <16 x i8> %31, <16 x i8>* %32, align 16
  %33 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 32
  %34 = bitcast i8* %33 to <16 x i8>*
  %35 = load <16 x i8>, <16 x i8>* %34, align 16
  %36 = xor <16 x i8> %35, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %37 = bitcast i8* %33 to <16 x i8>*
  store <16 x i8> %36, <16 x i8>* %37, align 16
  %38 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 48
  %39 = bitcast i8* %38 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 16
  %41 = xor <16 x i8> %40, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %42 = bitcast i8* %38 to <16 x i8>*
  store <16 x i8> %41, <16 x i8>* %42, align 16
  %43 = bitcast %struct.sha_state_st* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %43) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %43, i8 -86, i64 96, i1 false)
  %44 = call i32 @SHA1_Init(%struct.sha_state_st* nonnull %11) #5
  %45 = call i32 @SHA1_Update(%struct.sha_state_st* nonnull %11, i8* nonnull %19, i64 64) #5
  %46 = call i32 @SHA1_Update(%struct.sha_state_st* nonnull %11, i8* %3, i64 13) #5
  %47 = icmp ugt i64 %6, 276
  %48 = add i64 %6, -276
  %49 = select i1 %47, i64 %48, i64 0
  %50 = call i32 @SHA1_Update(%struct.sha_state_st* nonnull %11, i8* %4, i64 %49) #5
  %51 = getelementptr inbounds [20 x i8], [20 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %51) #5
  %52 = getelementptr inbounds i8, i8* %4, i64 %49
  %53 = sub i64 %5, %49
  %54 = sub i64 %6, %49
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %51, i8 -86, i64 20, i1 false)
  %55 = call i32 @EVP_sha1_final_with_secret_suffix(%struct.sha_state_st* nonnull %11, i8* nonnull %51, i8* %52, i64 %53, i64 %54)
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %81, label %57

57:                                               ; preds = %23
  %58 = call i32 @SHA1_Init(%struct.sha_state_st* nonnull %11) #5
  %59 = bitcast [64 x i8]* %10 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 16
  %61 = xor <16 x i8> %60, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %62 = bitcast [64 x i8]* %10 to <16 x i8>*
  store <16 x i8> %61, <16 x i8>* %62, align 16
  %63 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 16
  %66 = xor <16 x i8> %65, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %67 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %67, align 16
  %68 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 32
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 16
  %71 = xor <16 x i8> %70, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %72 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %71, <16 x i8>* %72, align 16
  %73 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 48
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 16
  %76 = xor <16 x i8> %75, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %77 = bitcast i8* %73 to <16 x i8>*
  store <16 x i8> %76, <16 x i8>* %77, align 16
  %78 = call i32 @SHA1_Update(%struct.sha_state_st* nonnull %11, i8* nonnull %19, i64 64) #5
  %79 = call i32 @SHA1_Update(%struct.sha_state_st* nonnull %11, i8* nonnull %51, i64 20) #5
  %80 = call i32 @SHA1_Final(i8* %1, %struct.sha_state_st* nonnull %11) #5
  store i64 20, i64* %2, align 8
  br label %81

81:                                               ; preds = %23, %57
  %82 = phi i32 [ 1, %57 ], [ 0, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %51) #5
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %43) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %19) #5
  br label %83

83:                                               ; preds = %16, %81, %15
  %84 = phi i32 [ 0, %15 ], [ %82, %81 ], [ 0, %16 ]
  ret i32 %84
}

declare i32 @SHA1_Init(%struct.sha_state_st*) local_unnamed_addr #3

declare i32 @SHA1_Update(%struct.sha_state_st*, i8*, i64) local_unnamed_addr #3

declare i32 @SHA1_Final(i8*, %struct.sha_state_st*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #4

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #4

; Function Attrs: nounwind readnone speculatable
declare <4 x i32> @llvm.bswap.v4i32(<4 x i32>) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{i32 429762}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !5, !3}
