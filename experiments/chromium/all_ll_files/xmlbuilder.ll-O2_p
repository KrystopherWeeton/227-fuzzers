; ModuleID = '../../third_party/libjingle_xmpp/xmllite/xmlbuilder.cc'
source_filename = "../../third_party/libjingle_xmpp/xmllite/xmlbuilder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.jingle_xmpp::XmlBuilder" = type { %"class.jingle_xmpp::XmlParseHandler", %"class.jingle_xmpp::XmlElement"*, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.4" }
%"class.jingle_xmpp::XmlParseHandler" = type { i32 (...)** }
%"class.jingle_xmpp::XmlElement" = type <{ %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::QName", %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"*, i8, [7 x i8] }>
%"class.jingle_xmpp::XmlChild" = type { i32 (...)**, %"class.jingle_xmpp::XmlChild"* }
%"class.jingle_xmpp::QName" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.jingle_xmpp::XmlAttr" = type { %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::QName", %"class.std::__1::basic_string" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.jingle_xmpp::XmlElement"* }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::vector"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"**, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.jingle_xmpp::XmlElement"** }
%"class.jingle_xmpp::XmlParseContext" = type { i32 (...)** }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.15", %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"class.jingle_xmpp::QName" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16__treeIN11jingle_xmpp5QNameENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE = comdat any

$_ZNSt3__16__treeIN11jingle_xmpp5QNameENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

@_ZTVN11jingle_xmpp10XmlBuilderE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jingle_xmpp::XmlBuilder"*)* @_ZN11jingle_xmpp10XmlBuilderD2Ev to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmlBuilder"*)* @_ZN11jingle_xmpp10XmlBuilderD0Ev to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmlBuilder"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i8**)* @_ZN11jingle_xmpp10XmlBuilder12StartElementEPNS_15XmlParseContextEPKcPS4_ to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmlBuilder"*, %"class.jingle_xmpp::XmlParseContext"*, i8*)* @_ZN11jingle_xmpp10XmlBuilder10EndElementEPNS_15XmlParseContextEPKc to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmlBuilder"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i32)* @_ZN11jingle_xmpp10XmlBuilder13CharacterDataEPNS_15XmlParseContextEPKci to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmlBuilder"*, %"class.jingle_xmpp::XmlParseContext"*, i32)* @_ZN11jingle_xmpp10XmlBuilder5ErrorEPNS_15XmlParseContextE9XML_Error to i8*)] }, align 8

@_ZN11jingle_xmpp10XmlBuilderC1Ev = hidden unnamed_addr alias void (%"class.jingle_xmpp::XmlBuilder"*), void (%"class.jingle_xmpp::XmlBuilder"*)* @_ZN11jingle_xmpp10XmlBuilderC2Ev
@_ZN11jingle_xmpp10XmlBuilderD1Ev = hidden unnamed_addr alias void (%"class.jingle_xmpp::XmlBuilder"*), void (%"class.jingle_xmpp::XmlBuilder"*)* @_ZN11jingle_xmpp10XmlBuilderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlBuilderC2Ev(%"class.jingle_xmpp::XmlBuilder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN11jingle_xmpp10XmlBuilderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 3
  %5 = bitcast %"class.jingle_xmpp::XmlElement"** %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  %6 = tail call i8* @_Znwm(i64 24) #11
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #12
  %7 = ptrtoint i8* %6 to i64
  %8 = bitcast %"class.std::__1::unique_ptr.4"* %4 to i64*
  store i64 %7, i64* %8, align 8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlBuilder5ResetEv(%"class.jingle_xmpp::XmlBuilder"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %2, align 8
  store %"class.jingle_xmpp::XmlElement"* null, %"class.jingle_xmpp::XmlElement"** %2, align 8
  %4 = icmp eq %"class.jingle_xmpp::XmlElement"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.jingle_xmpp::XmlElement"* %3 to void (%"class.jingle_xmpp::XmlElement"*)***
  %7 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %7, i64 4
  %9 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %8, align 8
  tail call void %9(%"class.jingle_xmpp::XmlElement"* nonnull %3) #12
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 1
  store %"class.jingle_xmpp::XmlElement"* null, %"class.jingle_xmpp::XmlElement"** %11, align 8
  %12 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %13 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %12, align 8
  %14 = bitcast %"class.std::__1::vector"* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 1
  %17 = bitcast %"class.jingle_xmpp::XmlElement"*** %16 to i64*
  store i64 %15, i64* %17, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlBuilder12BuildElementEPNS_15XmlParseContextEPKcPS4_(%"class.jingle_xmpp::XmlParseContext"*, i8*, i8** nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.jingle_xmpp::QName", align 8
  %5 = alloca %"class.std::__1::set", align 8
  %6 = alloca %"class.jingle_xmpp::QName", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = bitcast %"class.jingle_xmpp::QName"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %8) #12
  %9 = bitcast %"class.jingle_xmpp::XmlParseContext"* %0 to void (%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i1)***
  %10 = bitcast %"class.jingle_xmpp::QName"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 48, i1 false)
  %11 = load void (%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i1)**, void (%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i1)*** %9, align 8
  %12 = getelementptr inbounds void (%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i1)*, void (%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i1)** %11, i64 2
  %13 = load void (%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i1)*, void (%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i1)** %12, align 8
  call void %13(%"class.jingle_xmpp::QName"* nonnull sret %4, %"class.jingle_xmpp::XmlParseContext"* %0, i8* %1, i1 zeroext false) #12
  %14 = call zeroext i1 @_ZNK11jingle_xmpp5QName7IsEmptyEv(%"class.jingle_xmpp::QName"* nonnull %4) #12
  br i1 %14, label %120, label %15

15:                                               ; preds = %3
  %16 = call i8* @_Znwm(i64 104) #11
  %17 = bitcast i8* %16 to %"class.jingle_xmpp::XmlElement"*
  call void @_ZN11jingle_xmpp10XmlElementC1ERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"* nonnull %17, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %4) #12
  %18 = load i8*, i8** %2, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %120, label %20

20:                                               ; preds = %15
  %21 = bitcast %"class.std::__1::set"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #12
  %22 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %5, i64 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %25 = bitcast %"class.std::__1::__tree_node_base"** %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 16, i1 false) #12
  store %"class.std::__1::__tree_end_node"* %24, %"class.std::__1::__tree_end_node"** %22, align 8
  %26 = bitcast %"class.jingle_xmpp::QName"* %6 to i8*
  %27 = getelementptr inbounds %"class.jingle_xmpp::QName", %"class.jingle_xmpp::QName"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = bitcast %"class.jingle_xmpp::QName"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  %30 = bitcast %"class.std::__1::__tree_end_node"* %24 to %"class.std::__1::__tree_node"**
  %31 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %5, i64 0, i32 0
  %32 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %36 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  %38 = bitcast %"class.jingle_xmpp::QName"* %6 to i8*
  br label %39

39:                                               ; preds = %20, %112
  %40 = phi i8** [ %2, %20 ], [ %113, %112 ]
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %26) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 -86, i64 48, i1 false)
  %41 = load i8*, i8** %40, align 8
  %42 = load void (%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i1)**, void (%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i1)*** %9, align 8
  %43 = getelementptr inbounds void (%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i1)*, void (%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i1)** %42, i64 2
  %44 = load void (%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i1)*, void (%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i1)** %43, align 8
  call void %44(%"class.jingle_xmpp::QName"* nonnull sret %6, %"class.jingle_xmpp::XmlParseContext"* %0, i8* %41, i1 zeroext true) #12
  %45 = call zeroext i1 @_ZNK11jingle_xmpp5QName7IsEmptyEv(%"class.jingle_xmpp::QName"* nonnull %6) #12
  br i1 %45, label %46, label %51

46:                                               ; preds = %39
  %47 = bitcast i8* %16 to void (%"class.jingle_xmpp::XmlElement"*)***
  %48 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %47, align 8
  %49 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %48, i64 4
  %50 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %49, align 8
  call void %50(%"class.jingle_xmpp::XmlElement"* nonnull %17) #12
  br label %111

51:                                               ; preds = %39
  %52 = load i8, i8* %29, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i64, i64* %27, align 8
  %55 = zext i8 %52 to i64
  %56 = select i1 %53, i64 %54, i64 %55
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %85, label %58

58:                                               ; preds = %51
  %59 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %30, align 8
  %60 = icmp eq %"class.std::__1::__tree_node"* %59, null
  br i1 %60, label %83, label %61

61:                                               ; preds = %58, %74
  %62 = phi %"class.std::__1::__tree_node"* [ %76, %74 ], [ %59, %58 ]
  %63 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %62, i64 0, i32 1
  %64 = call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* nonnull %6, %"class.jingle_xmpp::QName"* dereferenceable(48) %63) #12
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %61
  %67 = bitcast %"class.std::__1::__tree_node"* %62 to %"class.std::__1::__tree_node"**
  br label %74

68:                                               ; preds = %61
  %69 = call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* %63, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %6) #12
  %70 = icmp slt i32 %69, 0
  br i1 %70, label %71, label %78

71:                                               ; preds = %68
  %72 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %62, i64 0, i32 0, i32 1
  %73 = bitcast %"class.std::__1::__tree_node_base"** %72 to %"class.std::__1::__tree_node"**
  br label %74

74:                                               ; preds = %71, %66
  %75 = phi %"class.std::__1::__tree_node"** [ %67, %66 ], [ %73, %71 ]
  %76 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %75, align 8
  %77 = icmp eq %"class.std::__1::__tree_node"* %76, null
  br i1 %77, label %83, label %61

78:                                               ; preds = %68
  %79 = bitcast i8* %16 to void (%"class.jingle_xmpp::XmlElement"*)***
  %80 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %79, align 8
  %81 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %80, i64 4
  %82 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %81, align 8
  call void %82(%"class.jingle_xmpp::XmlElement"* nonnull %17) #12
  br label %111

83:                                               ; preds = %74, %58
  %84 = call { %"class.std::__1::__tree_end_node"*, i8 } @_ZNSt3__16__treeIN11jingle_xmpp5QNameENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_(%"class.std::__1::__tree"* nonnull %31, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %6, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %6) #12
  br label %85

85:                                               ; preds = %83, %51
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #12
  %86 = getelementptr inbounds i8*, i8** %40, i64 1
  %87 = load i8*, i8** %86, align 8
  %88 = call i64 @strlen(i8* %87) #12
  %89 = icmp ugt i64 %88, -17
  br i1 %89, label %90, label %92

90:                                               ; preds = %85
  %91 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %91) #13
  unreachable

92:                                               ; preds = %85
  %93 = icmp ult i64 %88, 23
  br i1 %93, label %99, label %94

94:                                               ; preds = %92
  %95 = add nuw i64 %88, 16
  %96 = and i64 %95, -16
  %97 = call i8* @_Znwm(i64 %96) #11
  store i8* %97, i8** %33, align 8
  %98 = or i64 %96, -9223372036854775808
  store i64 %98, i64* %34, align 8
  store i64 %88, i64* %35, align 8
  br label %102

99:                                               ; preds = %92
  %100 = trunc i64 %88 to i8
  store i8 %100, i8* %37, align 1
  %101 = icmp eq i64 %88, 0
  br i1 %101, label %104, label %102

102:                                              ; preds = %99, %94
  %103 = phi i8* [ %97, %94 ], [ %32, %99 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %103, i8* align 1 %87, i64 %88, i1 false) #12
  br label %104

104:                                              ; preds = %99, %102
  %105 = phi i8* [ %32, %99 ], [ %103, %102 ]
  %106 = getelementptr inbounds i8, i8* %105, i64 %88
  store i8 0, i8* %106, align 1
  call void @_ZN11jingle_xmpp10XmlElement7AddAttrERKNS_5QNameERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* nonnull %17, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %6, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7) #12
  %107 = load i8, i8* %37, align 1
  %108 = icmp slt i8 %107, 0
  br i1 %108, label %109, label %112

109:                                              ; preds = %104
  %110 = load i8*, i8** %33, align 8
  call void @_ZdlPv(i8* %110) #11
  br label %112

111:                                              ; preds = %46, %78
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %26) #12
  br label %116

112:                                              ; preds = %109, %104
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #12
  %113 = getelementptr inbounds i8*, i8** %40, i64 2
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %26) #12
  %114 = load i8*, i8** %113, align 8
  %115 = icmp eq i8* %114, null
  br i1 %115, label %116, label %39

116:                                              ; preds = %112, %111
  %117 = phi %"class.jingle_xmpp::XmlElement"* [ null, %111 ], [ %17, %112 ]
  %118 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %5, i64 0, i32 0
  %119 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %30, align 8
  call void @_ZNSt3__16__treeIN11jingle_xmpp5QNameENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* nonnull %118, %"class.std::__1::__tree_node"* %119) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #12
  br label %120

120:                                              ; preds = %116, %15, %3
  %121 = phi %"class.jingle_xmpp::XmlElement"* [ null, %3 ], [ %117, %116 ], [ %17, %15 ]
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %8) #12
  ret %"class.jingle_xmpp::XmlElement"* %121
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare zeroext i1 @_ZNK11jingle_xmpp5QName7IsEmptyEv(%"class.jingle_xmpp::QName"*) local_unnamed_addr #3

declare void @_ZN11jingle_xmpp10XmlElementC1ERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::QName"* dereferenceable(48)) unnamed_addr #3

declare void @_ZN11jingle_xmpp10XmlElement7AddAttrERKNS_5QNameERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::QName"* dereferenceable(48), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlBuilder12StartElementEPNS_15XmlParseContextEPKcPS4_(%"class.jingle_xmpp::XmlBuilder"* nocapture, %"class.jingle_xmpp::XmlParseContext"*, i8*, i8** nocapture readonly) unnamed_addr #0 align 2 {
  %5 = tail call %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlBuilder12BuildElementEPNS_15XmlParseContextEPKcPS4_(%"class.jingle_xmpp::XmlParseContext"* %1, i8* %2, i8** %3)
  %6 = icmp eq %"class.jingle_xmpp::XmlElement"* %5, null
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = bitcast %"class.jingle_xmpp::XmlParseContext"* %1 to void (%"class.jingle_xmpp::XmlParseContext"*, i32)***
  %9 = load void (%"class.jingle_xmpp::XmlParseContext"*, i32)**, void (%"class.jingle_xmpp::XmlParseContext"*, i32)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.jingle_xmpp::XmlParseContext"*, i32)*, void (%"class.jingle_xmpp::XmlParseContext"*, i32)** %9, i64 3
  %11 = load void (%"class.jingle_xmpp::XmlParseContext"*, i32)*, void (%"class.jingle_xmpp::XmlParseContext"*, i32)** %10, align 8
  tail call void %11(%"class.jingle_xmpp::XmlParseContext"* %1, i32 2) #12
  br label %172

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 1
  %14 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %13, align 8
  %15 = icmp eq %"class.jingle_xmpp::XmlElement"* %14, null
  br i1 %15, label %16, label %96

16:                                               ; preds = %12
  store %"class.jingle_xmpp::XmlElement"* %5, %"class.jingle_xmpp::XmlElement"** %13, align 8
  %17 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %18 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %17, align 8
  store %"class.jingle_xmpp::XmlElement"* %5, %"class.jingle_xmpp::XmlElement"** %17, align 8
  %19 = icmp eq %"class.jingle_xmpp::XmlElement"* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %16
  %21 = bitcast %"class.jingle_xmpp::XmlElement"* %18 to void (%"class.jingle_xmpp::XmlElement"*)***
  %22 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %22, i64 4
  %24 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %23, align 8
  tail call void %24(%"class.jingle_xmpp::XmlElement"* nonnull %18) #12
  br label %25

25:                                               ; preds = %16, %20
  %26 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %27 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %26, align 8
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %27, i64 0, i32 0, i32 1
  %29 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %27, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %30, align 8
  %32 = icmp ult %"class.jingle_xmpp::XmlElement"** %29, %31
  %33 = ptrtoint %"class.jingle_xmpp::XmlElement"** %31 to i64
  br i1 %32, label %34, label %39

34:                                               ; preds = %25
  %35 = bitcast %"class.jingle_xmpp::XmlElement"** %29 to i64*
  store i64 0, i64* %35, align 8
  %36 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %29, i64 1
  %37 = ptrtoint %"class.jingle_xmpp::XmlElement"** %36 to i64
  %38 = bitcast %"class.jingle_xmpp::XmlElement"*** %28 to i64*
  store i64 %37, i64* %38, align 8
  br label %172

39:                                               ; preds = %25
  %40 = ptrtoint %"class.jingle_xmpp::XmlElement"** %29 to i64
  %41 = bitcast %"class.jingle_xmpp::XmlElement"*** %28 to i64*
  %42 = bitcast %"class.std::__1::vector"* %27 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %40, %43
  %45 = ashr exact i64 %44, 3
  %46 = add nsw i64 %45, 1
  %47 = icmp ugt i64 %46, 2305843009213693951
  br i1 %47, label %48, label %50

48:                                               ; preds = %39
  %49 = bitcast %"class.std::__1::vector"* %27 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %49) #13
  unreachable

50:                                               ; preds = %39
  %51 = bitcast %"class.jingle_xmpp::XmlElement"*** %30 to i64*
  %52 = sub i64 %33, %43
  %53 = ashr exact i64 %52, 3
  %54 = icmp ult i64 %53, 1152921504606846975
  br i1 %54, label %55, label %63

55:                                               ; preds = %50
  %56 = ashr exact i64 %52, 2
  %57 = icmp ult i64 %56, %46
  %58 = select i1 %57, i64 %46, i64 %56
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %68, label %60

60:                                               ; preds = %55
  %61 = icmp ugt i64 %58, 2305843009213693951
  br i1 %61, label %62, label %63

62:                                               ; preds = %60
  tail call void @abort() #13
  unreachable

63:                                               ; preds = %60, %50
  %64 = phi i64 [ %58, %60 ], [ 2305843009213693951, %50 ]
  %65 = shl i64 %64, 3
  %66 = tail call i8* @_Znwm(i64 %65) #11
  %67 = bitcast i8* %66 to %"class.jingle_xmpp::XmlElement"**
  br label %68

68:                                               ; preds = %63, %55
  %69 = phi i64 [ %64, %63 ], [ 0, %55 ]
  %70 = phi %"class.jingle_xmpp::XmlElement"** [ %67, %63 ], [ null, %55 ]
  %71 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %70, i64 %45
  %72 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %70, i64 %69
  %73 = ptrtoint %"class.jingle_xmpp::XmlElement"** %72 to i64
  %74 = bitcast %"class.jingle_xmpp::XmlElement"** %71 to i64*
  store i64 0, i64* %74, align 8
  %75 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %71, i64 1
  %76 = ptrtoint %"class.jingle_xmpp::XmlElement"** %75 to i64
  %77 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %27, i64 0, i32 0, i32 0
  %78 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %77, align 8
  %79 = load i64, i64* %41, align 8
  %80 = ptrtoint %"class.jingle_xmpp::XmlElement"** %78 to i64
  %81 = sub i64 %79, %80
  %82 = ashr exact i64 %81, 3
  %83 = sub nsw i64 0, %82
  %84 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %71, i64 %83
  %85 = ptrtoint %"class.jingle_xmpp::XmlElement"** %84 to i64
  %86 = icmp sgt i64 %81, 0
  br i1 %86, label %87, label %91

87:                                               ; preds = %68
  %88 = bitcast %"class.jingle_xmpp::XmlElement"** %84 to i8*
  %89 = bitcast %"class.jingle_xmpp::XmlElement"** %78 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 %81, i1 false) #12
  %90 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %77, align 8
  br label %91

91:                                               ; preds = %87, %68
  %92 = phi %"class.jingle_xmpp::XmlElement"** [ %78, %68 ], [ %90, %87 ]
  store i64 %85, i64* %42, align 8
  store i64 %76, i64* %41, align 8
  store i64 %73, i64* %51, align 8
  %93 = icmp eq %"class.jingle_xmpp::XmlElement"** %92, null
  br i1 %93, label %172, label %94

94:                                               ; preds = %91
  %95 = bitcast %"class.jingle_xmpp::XmlElement"** %92 to i8*
  tail call void @_ZdlPv(i8* %95) #11
  br label %172

96:                                               ; preds = %12
  tail call void @_ZN11jingle_xmpp10XmlElement10AddElementEPS0_(%"class.jingle_xmpp::XmlElement"* nonnull %14, %"class.jingle_xmpp::XmlElement"* nonnull %5) #12
  %97 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %98 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %97, align 8
  %99 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %98, i64 0, i32 0, i32 1
  %100 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %99, align 8
  %101 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %98, i64 0, i32 0, i32 2, i32 0, i32 0
  %102 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %101, align 8
  %103 = icmp eq %"class.jingle_xmpp::XmlElement"** %100, %102
  %104 = ptrtoint %"class.jingle_xmpp::XmlElement"** %102 to i64
  br i1 %103, label %112, label %105

105:                                              ; preds = %96
  %106 = bitcast %"class.jingle_xmpp::XmlElement"** %13 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"class.jingle_xmpp::XmlElement"** %100 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %100, i64 1
  %110 = ptrtoint %"class.jingle_xmpp::XmlElement"** %109 to i64
  %111 = bitcast %"class.jingle_xmpp::XmlElement"*** %99 to i64*
  store i64 %110, i64* %111, align 8
  br label %171

112:                                              ; preds = %96
  %113 = ptrtoint %"class.jingle_xmpp::XmlElement"** %100 to i64
  %114 = bitcast %"class.jingle_xmpp::XmlElement"*** %99 to i64*
  %115 = bitcast %"class.std::__1::vector"* %98 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = sub i64 %113, %116
  %118 = ashr exact i64 %117, 3
  %119 = add nsw i64 %118, 1
  %120 = icmp ugt i64 %119, 2305843009213693951
  br i1 %120, label %121, label %123

121:                                              ; preds = %112
  %122 = bitcast %"class.std::__1::vector"* %98 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %122) #13
  unreachable

123:                                              ; preds = %112
  %124 = bitcast %"class.jingle_xmpp::XmlElement"*** %101 to i64*
  %125 = sub i64 %104, %116
  %126 = ashr exact i64 %125, 3
  %127 = icmp ult i64 %126, 1152921504606846975
  br i1 %127, label %128, label %136

128:                                              ; preds = %123
  %129 = ashr exact i64 %125, 2
  %130 = icmp ult i64 %129, %119
  %131 = select i1 %130, i64 %119, i64 %129
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %141, label %133

133:                                              ; preds = %128
  %134 = icmp ugt i64 %131, 2305843009213693951
  br i1 %134, label %135, label %136

135:                                              ; preds = %133
  tail call void @abort() #13
  unreachable

136:                                              ; preds = %133, %123
  %137 = phi i64 [ %131, %133 ], [ 2305843009213693951, %123 ]
  %138 = shl i64 %137, 3
  %139 = tail call i8* @_Znwm(i64 %138) #11
  %140 = bitcast i8* %139 to %"class.jingle_xmpp::XmlElement"**
  br label %141

141:                                              ; preds = %136, %128
  %142 = phi i64 [ %137, %136 ], [ 0, %128 ]
  %143 = phi %"class.jingle_xmpp::XmlElement"** [ %140, %136 ], [ null, %128 ]
  %144 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %143, i64 %118
  %145 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %143, i64 %142
  %146 = ptrtoint %"class.jingle_xmpp::XmlElement"** %145 to i64
  %147 = bitcast %"class.jingle_xmpp::XmlElement"** %13 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = bitcast %"class.jingle_xmpp::XmlElement"** %144 to i64*
  store i64 %148, i64* %149, align 8
  %150 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %144, i64 1
  %151 = ptrtoint %"class.jingle_xmpp::XmlElement"** %150 to i64
  %152 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %98, i64 0, i32 0, i32 0
  %153 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %152, align 8
  %154 = load i64, i64* %114, align 8
  %155 = ptrtoint %"class.jingle_xmpp::XmlElement"** %153 to i64
  %156 = sub i64 %154, %155
  %157 = ashr exact i64 %156, 3
  %158 = sub nsw i64 0, %157
  %159 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %144, i64 %158
  %160 = ptrtoint %"class.jingle_xmpp::XmlElement"** %159 to i64
  %161 = icmp sgt i64 %156, 0
  br i1 %161, label %162, label %166

162:                                              ; preds = %141
  %163 = bitcast %"class.jingle_xmpp::XmlElement"** %159 to i8*
  %164 = bitcast %"class.jingle_xmpp::XmlElement"** %153 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %163, i8* align 8 %164, i64 %156, i1 false) #12
  %165 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %152, align 8
  br label %166

166:                                              ; preds = %162, %141
  %167 = phi %"class.jingle_xmpp::XmlElement"** [ %153, %141 ], [ %165, %162 ]
  store i64 %160, i64* %115, align 8
  store i64 %151, i64* %114, align 8
  store i64 %146, i64* %124, align 8
  %168 = icmp eq %"class.jingle_xmpp::XmlElement"** %167, null
  br i1 %168, label %171, label %169

169:                                              ; preds = %166
  %170 = bitcast %"class.jingle_xmpp::XmlElement"** %167 to i8*
  tail call void @_ZdlPv(i8* %170) #11
  br label %171

171:                                              ; preds = %105, %166, %169
  store %"class.jingle_xmpp::XmlElement"* %5, %"class.jingle_xmpp::XmlElement"** %13, align 8
  br label %172

172:                                              ; preds = %94, %91, %34, %171, %7
  ret void
}

declare void @_ZN11jingle_xmpp10XmlElement10AddElementEPS0_(%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlBuilder10EndElementEPNS_15XmlParseContextEPKc(%"class.jingle_xmpp::XmlBuilder"* nocapture, %"class.jingle_xmpp::XmlParseContext"* nocapture readnone, i8* nocapture readnone) unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %5 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %7 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %6, align 8
  %8 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %7, i64 -1
  %9 = bitcast %"class.jingle_xmpp::XmlElement"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 1
  %12 = bitcast %"class.jingle_xmpp::XmlElement"** %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %6, align 8
  %14 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %13, i64 -1
  store %"class.jingle_xmpp::XmlElement"** %14, %"class.jingle_xmpp::XmlElement"*** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlBuilder13CharacterDataEPNS_15XmlParseContextEPKci(%"class.jingle_xmpp::XmlBuilder"* nocapture readonly, %"class.jingle_xmpp::XmlParseContext"* nocapture readnone, i8*, i32) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 1
  %6 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %5, align 8
  %7 = icmp eq %"class.jingle_xmpp::XmlElement"* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call void @_ZN11jingle_xmpp10XmlElement13AddParsedTextEPKci(%"class.jingle_xmpp::XmlElement"* nonnull %6, i8* %2, i32 %3) #12
  br label %9

9:                                                ; preds = %4, %8
  ret void
}

declare void @_ZN11jingle_xmpp10XmlElement13AddParsedTextEPKci(%"class.jingle_xmpp::XmlElement"*, i8*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlBuilder5ErrorEPNS_15XmlParseContextE9XML_Error(%"class.jingle_xmpp::XmlBuilder"* nocapture, %"class.jingle_xmpp::XmlParseContext"* nocapture readnone, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %5 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %4, align 8
  store %"class.jingle_xmpp::XmlElement"* null, %"class.jingle_xmpp::XmlElement"** %4, align 8
  %6 = icmp eq %"class.jingle_xmpp::XmlElement"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %3
  %8 = bitcast %"class.jingle_xmpp::XmlElement"* %5 to void (%"class.jingle_xmpp::XmlElement"*)***
  %9 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %9, i64 4
  %11 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %10, align 8
  tail call void %11(%"class.jingle_xmpp::XmlElement"* nonnull %5) #12
  br label %12

12:                                               ; preds = %3, %7
  %13 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 1
  store %"class.jingle_xmpp::XmlElement"* null, %"class.jingle_xmpp::XmlElement"** %13, align 8
  %14 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %15 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %14, align 8
  %16 = bitcast %"class.std::__1::vector"* %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 1
  %19 = bitcast %"class.jingle_xmpp::XmlElement"*** %18 to i64*
  store i64 %17, i64* %19, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlBuilder13CreateElementEv(%"class.jingle_xmpp::XmlBuilder"* nocapture) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %2, align 8
  store %"class.jingle_xmpp::XmlElement"* null, %"class.jingle_xmpp::XmlElement"** %2, align 8
  ret %"class.jingle_xmpp::XmlElement"* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlBuilder12BuiltElementEv(%"class.jingle_xmpp::XmlBuilder"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %2, align 8
  ret %"class.jingle_xmpp::XmlElement"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlBuilderD2Ev(%"class.jingle_xmpp::XmlBuilder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN11jingle_xmpp10XmlBuilderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %3, align 8
  store %"class.std::__1::vector"* null, %"class.std::__1::vector"** %3, align 8
  %5 = icmp eq %"class.std::__1::vector"* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %8 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %7, align 8
  %9 = icmp eq %"class.jingle_xmpp::XmlElement"** %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = ptrtoint %"class.jingle_xmpp::XmlElement"** %8 to i64
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %13 = bitcast %"class.jingle_xmpp::XmlElement"*** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = bitcast %"class.jingle_xmpp::XmlElement"** %8 to i8*
  tail call void @_ZdlPv(i8* %14) #11
  br label %15

15:                                               ; preds = %10, %6
  %16 = bitcast %"class.std::__1::vector"* %4 to i8*
  tail call void @_ZdlPv(i8* %16) #11
  br label %17

17:                                               ; preds = %1, %15
  %18 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %19 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %18, align 8
  store %"class.jingle_xmpp::XmlElement"* null, %"class.jingle_xmpp::XmlElement"** %18, align 8
  %20 = icmp eq %"class.jingle_xmpp::XmlElement"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %17
  %22 = bitcast %"class.jingle_xmpp::XmlElement"* %19 to void (%"class.jingle_xmpp::XmlElement"*)***
  %23 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %23, i64 4
  %25 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %24, align 8
  tail call void %25(%"class.jingle_xmpp::XmlElement"* nonnull %19) #12
  br label %26

26:                                               ; preds = %17, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlBuilderD0Ev(%"class.jingle_xmpp::XmlBuilder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN11jingle_xmpp10XmlBuilderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %3, align 8
  store %"class.std::__1::vector"* null, %"class.std::__1::vector"** %3, align 8
  %5 = icmp eq %"class.std::__1::vector"* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %8 = load %"class.jingle_xmpp::XmlElement"**, %"class.jingle_xmpp::XmlElement"*** %7, align 8
  %9 = icmp eq %"class.jingle_xmpp::XmlElement"** %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = ptrtoint %"class.jingle_xmpp::XmlElement"** %8 to i64
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %13 = bitcast %"class.jingle_xmpp::XmlElement"*** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = bitcast %"class.jingle_xmpp::XmlElement"** %8 to i8*
  tail call void @_ZdlPv(i8* %14) #11
  br label %15

15:                                               ; preds = %10, %6
  %16 = bitcast %"class.std::__1::vector"* %4 to i8*
  tail call void @_ZdlPv(i8* %16) #11
  br label %17

17:                                               ; preds = %15, %1
  %18 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %19 = load %"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"** %18, align 8
  store %"class.jingle_xmpp::XmlElement"* null, %"class.jingle_xmpp::XmlElement"** %18, align 8
  %20 = icmp eq %"class.jingle_xmpp::XmlElement"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %17
  %22 = bitcast %"class.jingle_xmpp::XmlElement"* %19 to void (%"class.jingle_xmpp::XmlElement"*)***
  %23 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %23, i64 4
  %25 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %24, align 8
  tail call void %25(%"class.jingle_xmpp::XmlElement"* nonnull %19) #12
  br label %26

26:                                               ; preds = %17, %21
  %27 = bitcast %"class.jingle_xmpp::XmlBuilder"* %0 to i8*
  tail call void @_ZdlPv(i8* %27) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIN11jingle_xmpp5QNameENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIN11jingle_xmpp5QNameENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #12
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIN11jingle_xmpp5QNameENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #12
  %10 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 1
  tail call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* %10) #12
  %11 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %11) #11
  ret void

12:                                               ; preds = %2
  ret void
}

declare i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::QName"* dereferenceable(48)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.std::__1::__tree_end_node"*, i8 } @_ZNSt3__16__treeIN11jingle_xmpp5QNameENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_(%"class.std::__1::__tree"*, %"class.jingle_xmpp::QName"* dereferenceable(48), %"class.jingle_xmpp::QName"* dereferenceable(48)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  %7 = icmp eq %"class.std::__1::__tree_node"* %6, null
  br i1 %7, label %37, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  br label %10

10:                                               ; preds = %33, %8
  %11 = phi %"class.std::__1::__tree_node"* [ %36, %33 ], [ %6, %8 ]
  %12 = phi %"class.std::__1::__tree_node_base"** [ %35, %33 ], [ %9, %8 ]
  %13 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 1
  %14 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* %1, %"class.jingle_xmpp::QName"* dereferenceable(48) %13) #12
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %22

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %19, label %20, label %33

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0
  br label %39

22:                                               ; preds = %10
  %23 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* %13, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #12
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %22
  %26 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 1
  %27 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %26, align 8
  %28 = icmp eq %"class.std::__1::__tree_node_base"* %27, null
  br i1 %28, label %29, label %33

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0
  br label %39

31:                                               ; preds = %22
  %32 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0
  br label %39

33:                                               ; preds = %25, %16
  %34 = phi %"class.std::__1::__tree_node_base"* [ %18, %16 ], [ %27, %25 ]
  %35 = phi %"class.std::__1::__tree_node_base"** [ %17, %16 ], [ %26, %25 ]
  %36 = bitcast %"class.std::__1::__tree_node_base"* %34 to %"class.std::__1::__tree_node"*
  br label %10

37:                                               ; preds = %3
  %38 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %4, i64 0, i32 0
  br label %39

39:                                               ; preds = %20, %29, %31, %37
  %40 = phi %"class.std::__1::__tree_end_node"* [ %4, %37 ], [ %21, %20 ], [ %30, %29 ], [ %32, %31 ]
  %41 = phi %"class.std::__1::__tree_node_base"** [ %38, %37 ], [ %17, %20 ], [ %26, %29 ], [ %12, %31 ]
  %42 = bitcast %"class.std::__1::__tree_node_base"** %41 to %"class.std::__1::__tree_node"**
  %43 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %42, align 8
  %44 = icmp eq %"class.std::__1::__tree_node"* %43, null
  br i1 %44, label %45, label %70

45:                                               ; preds = %39
  %46 = tail call i8* @_Znwm(i64 80) #11, !noalias !2
  %47 = getelementptr inbounds i8, i8* %46, i64 32
  %48 = bitcast i8* %47 to %"class.jingle_xmpp::QName"*
  tail call void @_ZN11jingle_xmpp5QNameC1ERKS0_(%"class.jingle_xmpp::QName"* %48, %"class.jingle_xmpp::QName"* dereferenceable(48) %2) #12, !noalias !2
  %49 = bitcast i8* %46 to %"class.std::__1::__tree_node"*
  %50 = bitcast i8* %46 to %"class.std::__1::__tree_node_base"*
  %51 = getelementptr inbounds i8, i8* %46, i64 16
  %52 = bitcast i8* %51 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 0, i64 16, i1 false) #12
  store %"class.std::__1::__tree_end_node"* %40, %"class.std::__1::__tree_end_node"** %52, align 8
  %53 = bitcast %"class.std::__1::__tree_node_base"** %41 to i8**
  store i8* %46, i8** %53, align 8
  %54 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 0
  %55 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %54, align 8
  %56 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %55, i64 0, i32 0
  %57 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %56, align 8
  %58 = icmp eq %"class.std::__1::__tree_node_base"* %57, null
  br i1 %58, label %63, label %59

59:                                               ; preds = %45
  %60 = ptrtoint %"class.std::__1::__tree_node_base"* %57 to i64
  %61 = bitcast %"class.std::__1::__tree"* %0 to i64*
  store i64 %60, i64* %61, align 8
  %62 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %41, align 8
  br label %63

63:                                               ; preds = %59, %45
  %64 = phi %"class.std::__1::__tree_node_base"* [ %50, %45 ], [ %62, %59 ]
  %65 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %66 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %65, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %66, %"class.std::__1::__tree_node_base"* %64) #12
  %67 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 2, i32 0, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 1
  store i64 %69, i64* %67, align 8
  br label %70

70:                                               ; preds = %63, %39
  %71 = phi i8 [ 1, %63 ], [ 0, %39 ]
  %72 = phi %"class.std::__1::__tree_node"* [ %49, %63 ], [ %43, %39 ]
  %73 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %72, i64 0, i32 0, i32 0
  %74 = insertvalue { %"class.std::__1::__tree_end_node"*, i8 } undef, %"class.std::__1::__tree_end_node"* %73, 0
  %75 = insertvalue { %"class.std::__1::__tree_end_node"*, i8 } %74, i8 %71, 1
  ret { %"class.std::__1::__tree_end_node"*, i8 } %75
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN11jingle_xmpp5QNameC1ERKS0_(%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::QName"* dereferenceable(48)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !5
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !5
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !5
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #9

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #10

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__16__treeIN11jingle_xmpp5QNameENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__16__treeIN11jingle_xmpp5QNameENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_"}
!5 = !{i8 0, i8 2}
