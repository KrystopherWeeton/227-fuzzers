; ModuleID = '../../third_party/libjxl/src/lib/jxl/coeff_order.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/coeff_order.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::AcStrategy::CoeffOrderAndLut" = type { [175744 x i32], [175744 x i32] }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.3", %"class.std::__1::vector.17", %"class.std::__1::vector.24", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.12" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.5" }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.7" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.19" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.jxl::HybridUintConfig"* }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { i32*, i32*, %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { i32* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.jxl::ANSSymbolReader" = type <{ %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::HuffmanDecodingData"*, i8, [3 x i8], i32, %"struct.jxl::HybridUintConfig"*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr", i32*, i32, i32, i32, i32, i32, i32, %"struct.jxl::HybridUintConfig", [120 x i32], i32, [4 x i8] }>
%"struct.jxl::AliasTable::Entry" = type { i8, i8, i16, i16, i16 }
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { i32*, i32*, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = comdat any

@_ZN3jxlL14kStrategyOrderE = internal unnamed_addr constant [27 x i8] c"\00\01\01\01\02\03\04\04\05\05\06\06\01\01\01\01\01\01\07\08\08\09\0A\0A\0B\0C\0C", align 16
@_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\01\02\01\04\02\04\01\01\01\01\01\01\08\04\08\10\08\10 \10 ", comdat, align 16
@_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\02\01\04\01\04\02\01\01\01\01\01\01\08\08\04\10\10\08  \10", comdat, align 16
@_ZN3jxl10AcStrategy16CoeffOrderAndLut7kOffsetE.const = private unnamed_addr constant [28 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 8, i64 24, i64 26, i64 28, i64 32, i64 36, i64 44, i64 52, i64 53, i64 54, i64 55, i64 56, i64 57, i64 58, i64 122, i64 154, i64 186, i64 442, i64 570, i64 698, i64 1722, i64 2234, i64 2746], align 16
@_ZN3jxlL17kSpecialDistancesE = internal unnamed_addr constant [120 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\01\00", [2 x i8] c"\01\01", [2 x i8] c"\FF\01", [2 x i8] c"\00\02", [2 x i8] c"\02\00", [2 x i8] c"\01\02", [2 x i8] c"\FF\02", [2 x i8] c"\02\01", [2 x i8] c"\FE\01", [2 x i8] c"\02\02", [2 x i8] c"\FE\02", [2 x i8] c"\00\03", [2 x i8] c"\03\00", [2 x i8] c"\01\03", [2 x i8] c"\FF\03", [2 x i8] c"\03\01", [2 x i8] c"\FD\01", [2 x i8] c"\02\03", [2 x i8] c"\FE\03", [2 x i8] c"\03\02", [2 x i8] c"\FD\02", [2 x i8] c"\00\04", [2 x i8] c"\04\00", [2 x i8] c"\01\04", [2 x i8] c"\FF\04", [2 x i8] c"\04\01", [2 x i8] c"\FC\01", [2 x i8] c"\03\03", [2 x i8] c"\FD\03", [2 x i8] c"\02\04", [2 x i8] c"\FE\04", [2 x i8] c"\04\02", [2 x i8] c"\FC\02", [2 x i8] c"\00\05", [2 x i8] c"\03\04", [2 x i8] c"\FD\04", [2 x i8] c"\04\03", [2 x i8] c"\FC\03", [2 x i8] c"\05\00", [2 x i8] c"\01\05", [2 x i8] c"\FF\05", [2 x i8] c"\05\01", [2 x i8] c"\FB\01", [2 x i8] c"\02\05", [2 x i8] c"\FE\05", [2 x i8] c"\05\02", [2 x i8] c"\FB\02", [2 x i8] c"\04\04", [2 x i8] c"\FC\04", [2 x i8] c"\03\05", [2 x i8] c"\FD\05", [2 x i8] c"\05\03", [2 x i8] c"\FB\03", [2 x i8] c"\00\06", [2 x i8] c"\06\00", [2 x i8] c"\01\06", [2 x i8] c"\FF\06", [2 x i8] c"\06\01", [2 x i8] c"\FA\01", [2 x i8] c"\02\06", [2 x i8] c"\FE\06", [2 x i8] c"\06\02", [2 x i8] c"\FA\02", [2 x i8] c"\04\05", [2 x i8] c"\FC\05", [2 x i8] c"\05\04", [2 x i8] c"\FB\04", [2 x i8] c"\03\06", [2 x i8] c"\FD\06", [2 x i8] c"\06\03", [2 x i8] c"\FA\03", [2 x i8] c"\00\07", [2 x i8] c"\07\00", [2 x i8] c"\01\07", [2 x i8] c"\FF\07", [2 x i8] c"\05\05", [2 x i8] c"\FB\05", [2 x i8] c"\07\01", [2 x i8] c"\F9\01", [2 x i8] c"\04\06", [2 x i8] c"\FC\06", [2 x i8] c"\06\04", [2 x i8] c"\FA\04", [2 x i8] c"\02\07", [2 x i8] c"\FE\07", [2 x i8] c"\07\02", [2 x i8] c"\F9\02", [2 x i8] c"\03\07", [2 x i8] c"\FD\07", [2 x i8] c"\07\03", [2 x i8] c"\F9\03", [2 x i8] c"\05\06", [2 x i8] c"\FB\06", [2 x i8] c"\06\05", [2 x i8] c"\FA\05", [2 x i8] c"\08\00", [2 x i8] c"\04\07", [2 x i8] c"\FC\07", [2 x i8] c"\07\04", [2 x i8] c"\F9\04", [2 x i8] c"\08\01", [2 x i8] c"\08\02", [2 x i8] c"\06\06", [2 x i8] c"\FA\06", [2 x i8] c"\08\03", [2 x i8] c"\05\07", [2 x i8] c"\FB\07", [2 x i8] c"\07\05", [2 x i8] c"\F9\05", [2 x i8] c"\08\04", [2 x i8] c"\06\07", [2 x i8] c"\FA\07", [2 x i8] c"\07\06", [2 x i8] c"\F9\06", [2 x i8] c"\08\05", [2 x i8] c"\07\07", [2 x i8] c"\F9\07", [2 x i8] c"\08\06", [2 x i8] c"\08\07"], align 16
@_ZN3jxlL17kCoeffOrderOffsetE = internal unnamed_addr constant [40 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 10, i64 14, i64 18, i64 34, i64 50, i64 66, i64 68, i64 70, i64 72, i64 76, i64 80, i64 84, i64 92, i64 100, i64 108, i64 172, i64 236, i64 300, i64 332, i64 364, i64 396, i64 652, i64 908, i64 1164, i64 1292, i64 1420, i64 1548, i64 2572, i64 3596, i64 4620, i64 5132, i64 5644, i64 6156], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl15SetDefaultOrderENS_10AcStrategyEPj(i64, i32* noalias nocapture) local_unnamed_addr #0 {
  %3 = and i64 %0, 4294967295
  %4 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %3
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i64
  %7 = shl nuw nsw i64 %6, 6
  %8 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %3
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = mul nuw nsw i64 %7, %10
  %12 = tail call %"struct.jxl::AcStrategy::CoeffOrderAndLut"* @_ZN3jxl10AcStrategy10CoeffOrderEv() #10
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %24, label %14

14:                                               ; preds = %2
  %15 = and i64 %0, 255
  %16 = getelementptr inbounds [28 x i64], [28 x i64]* @_ZN3jxl10AcStrategy16CoeffOrderAndLut7kOffsetE.const, i64 0, i64 %15
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %17, 6
  %19 = getelementptr %"struct.jxl::AcStrategy::CoeffOrderAndLut", %"struct.jxl::AcStrategy::CoeffOrderAndLut"* %12, i64 0, i32 0, i64 %18
  %20 = bitcast i32* %1 to i8*
  %21 = mul nuw nsw i64 %6, %10
  %22 = bitcast i32* %19 to i8*
  %23 = shl nuw nsw i64 %21, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %20, i8* align 4 %22, i64 %23, i1 false)
  br label %24

24:                                               ; preds = %14, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @_ZN3jxl17CoeffOrderContextEj(i32) local_unnamed_addr #2 {
  %2 = icmp eq i32 %0, 0
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = tail call i32 @llvm.ctlz.i32(i32 %0, i1 true) #10, !range !2
  %5 = xor i32 %4, 31
  %6 = shl i32 1, %5
  %7 = sub i32 %0, %6
  %8 = add nuw nsw i32 %5, 1
  %9 = lshr i32 %7, %5
  %10 = add i32 %8, %9
  %11 = icmp ult i32 %10, 7
  br i1 %11, label %12, label %14

12:                                               ; preds = %1, %3
  %13 = phi i32 [ %10, %3 ], [ 0, %1 ]
  br label %14

14:                                               ; preds = %3, %12
  %15 = phi i32 [ %13, %12 ], [ 7, %3 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl17DecodePermutationEmmPjPNS_9BitReaderE(i64, i64, i32*, %"class.jxl::BitReader"*) local_unnamed_addr #0 {
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"struct.jxl::ANSCode", align 8
  %7 = alloca %"class.jxl::ANSSymbolReader", align 8
  %8 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #10
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #10
  %11 = bitcast %"struct.jxl::ANSCode"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 64, i1 false)
  %13 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 80, i1 false) #10
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %13) #10
  %14 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 7
  store i64 0, i64* %14, align 8
  %15 = call i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"* %3, i64 8, %"struct.jxl::ANSCode"* nonnull %6, %"class.std::__1::vector"* nonnull %5, i1 zeroext false) #10
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %33

17:                                               ; preds = %4
  %18 = bitcast %"class.jxl::ANSSymbolReader"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 592, i8* nonnull %18) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 592, i1 false)
  call void @_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm(%"class.jxl::ANSSymbolReader"* nonnull %7, %"struct.jxl::ANSCode"* nonnull %6, %"class.jxl::BitReader"* %3, i64 0)
  %19 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115ReadPermutationEmmPjPNS_9BitReaderEPNS_15ANSSymbolReaderERKNSt3__16vectorIhNS6_9allocatorIhEEEE(i64 %0, i64 %1, i32* %2, %"class.jxl::BitReader"* %3, %"class.jxl::ANSSymbolReader"* nonnull %7, %"class.std::__1::vector"* nonnull dereferenceable(24) %5)
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %7, i64 0, i32 4
  %23 = load i32, i32* %22, align 4
  %24 = icmp ne i32 %23, 1245184
  %25 = zext i1 %24 to i32
  br label %26

26:                                               ; preds = %21, %17
  %27 = phi i32 [ %19, %17 ], [ %25, %21 ]
  %28 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %7, i64 0, i32 10, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  store i8* null, i8** %28, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %32, label %31

31:                                               ; preds = %26
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %29) #10
  br label %32

32:                                               ; preds = %26, %31
  call void @llvm.lifetime.end.p0i8(i64 592, i8* nonnull %18) #10
  br label %33

33:                                               ; preds = %4, %32
  %34 = phi i32 [ %27, %32 ], [ %15, %4 ]
  %35 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 3, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = icmp eq i32* %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %33
  %39 = ptrtoint i32* %36 to i64
  %40 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 3, i32 0, i32 1
  %41 = bitcast i32** %40 to i64*
  store i64 %39, i64* %41, align 8
  %42 = bitcast i32* %36 to i8*
  call void @_ZdlPv(i8* %42) #11
  br label %43

43:                                               ; preds = %38, %33
  %44 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 2, i32 0, i32 0
  %45 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %44, align 8
  %46 = icmp eq %"struct.jxl::HybridUintConfig"* %45, null
  br i1 %46, label %52, label %47

47:                                               ; preds = %43
  %48 = ptrtoint %"struct.jxl::HybridUintConfig"* %45 to i64
  %49 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 2, i32 0, i32 1
  %50 = bitcast %"struct.jxl::HybridUintConfig"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = bitcast %"struct.jxl::HybridUintConfig"* %45 to i8*
  call void @_ZdlPv(i8* %51) #11
  br label %52

52:                                               ; preds = %47, %43
  %53 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 1
  %54 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %53, i64 0, i32 0, i32 0
  %55 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %54, align 8
  %56 = icmp eq %"struct.jxl::HuffmanDecodingData"* %55, null
  br i1 %56, label %80, label %57

57:                                               ; preds = %52
  %58 = bitcast %"struct.jxl::HuffmanDecodingData"* %55 to i8*
  %59 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 1, i32 0, i32 1
  %60 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %59, align 8
  %61 = icmp eq %"struct.jxl::HuffmanDecodingData"* %60, %55
  br i1 %61, label %78, label %62

62:                                               ; preds = %57, %73
  %63 = phi %"struct.jxl::HuffmanDecodingData"* [ %64, %73 ], [ %60, %57 ]
  %64 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %63, i64 -1
  %65 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %65, align 8
  %67 = icmp eq %"struct.jxl::HuffmanCode"* %66, null
  br i1 %67, label %73, label %68

68:                                               ; preds = %62
  %69 = ptrtoint %"struct.jxl::HuffmanCode"* %66 to i64
  %70 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %63, i64 -1, i32 0, i32 0, i32 1
  %71 = bitcast %"struct.jxl::HuffmanCode"** %70 to i64*
  store i64 %69, i64* %71, align 8
  %72 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %66, i64 0, i32 0
  call void @_ZdlPv(i8* %72) #11
  br label %73

73:                                               ; preds = %68, %62
  %74 = icmp eq %"struct.jxl::HuffmanDecodingData"* %64, %55
  br i1 %74, label %75, label %62

75:                                               ; preds = %73
  %76 = bitcast %"class.std::__1::vector.3"* %53 to i8**
  %77 = load i8*, i8** %76, align 8
  br label %78

78:                                               ; preds = %75, %57
  %79 = phi i8* [ %77, %75 ], [ %58, %57 ]
  store %"struct.jxl::HuffmanDecodingData"* %55, %"struct.jxl::HuffmanDecodingData"** %59, align 8
  call void @_ZdlPv(i8* %79) #11
  br label %80

80:                                               ; preds = %78, %52
  %81 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  store i8* null, i8** %81, align 8
  %83 = icmp eq i8* %82, null
  br i1 %83, label %85, label %84

84:                                               ; preds = %80
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %82) #10
  br label %85

85:                                               ; preds = %80, %84
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %11) #10
  %86 = load i8*, i8** %9, align 8
  %87 = icmp eq i8* %86, null
  br i1 %87, label %91, label %88

88:                                               ; preds = %85
  %89 = ptrtoint i8* %86 to i64
  %90 = bitcast i8** %10 to i64*
  store i64 %89, i64* %90, align 8
  call void @_ZdlPv(i8* nonnull %86) #11
  br label %91

91:                                               ; preds = %85, %88
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #10
  ret i32 %34
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"*, i64, %"struct.jxl::ANSCode"*, %"class.std::__1::vector"*, i1 zeroext) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm(%"class.jxl::ANSSymbolReader"*, %"struct.jxl::ANSCode"*, %"class.jxl::BitReader"* noalias, i64) unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"struct.jxl::ANSCode"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.jxl::ANSSymbolReader"* %0 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %"struct.jxl::HuffmanDecodingData"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"struct.jxl::HuffmanDecodingData"** %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 2
  %14 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 4
  %15 = load i8, i8* %14, align 8, !range !3
  store i8 %15, i8* %13, align 8
  %16 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 4
  store i32 1245184, i32* %16, align 4
  %17 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 5
  %18 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 0
  %19 = bitcast %"struct.jxl::HybridUintConfig"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.jxl::HybridUintConfig"** %17 to i64*
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 10
  %23 = bitcast %"class.std::__1::unique_ptr"* %22 to i64*
  %24 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 11
  %25 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 15
  %26 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 16
  %27 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 17
  %28 = bitcast %"class.std::__1::unique_ptr"* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 36, i1 false)
  %29 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18
  %30 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> <i32 1048576, i32 4, i32 16, i32 2>, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 3
  store i32 0, i32* %31, align 4
  %32 = icmp eq i8 %15, 0
  br i1 %32, label %33, label %76

33:                                               ; preds = %4
  %34 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = icmp ugt i8* %35, %37
  br i1 %38, label %39, label %44, !prof !4

39:                                               ; preds = %33
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %40 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %43 = load i64, i64* %42, align 8
  br label %57

44:                                               ; preds = %33
  %45 = bitcast i8* %35 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = shl i64 %46, %48
  %50 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = or i64 %51, %49
  store i64 %52, i64* %50, align 8
  %53 = sub i64 63, %48
  %54 = lshr i64 %53, 3
  %55 = getelementptr inbounds i8, i8* %35, i64 %54
  store i8* %55, i8** %34, align 8
  %56 = or i64 %48, 56
  store i64 %56, i64* %47, align 8
  br label %57

57:                                               ; preds = %39, %44
  %58 = phi i64 [ %43, %39 ], [ %56, %44 ]
  %59 = phi i64 [ %41, %39 ], [ %52, %44 ]
  %60 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %61 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %62 = add i64 %58, -32
  store i64 %62, i64* %61, align 8
  %63 = lshr i64 %59, 32
  store i64 %63, i64* %60, align 8
  %64 = trunc i64 %59 to i32
  store i32 %64, i32* %16, align 4
  %65 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 6
  store i32 %67, i32* %68, align 8
  %69 = load i8, i8* %65, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 12, %70
  %72 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 7
  store i32 %71, i32* %72, align 4
  %73 = shl nsw i32 -1, %71
  %74 = xor i32 %73, -1
  %75 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 8
  store i32 %74, i32* %75, align 8
  br label %77

76:                                               ; preds = %4
  store i32 1245184, i32* %16, align 4
  br label %77

77:                                               ; preds = %76, %57
  %78 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 1
  %79 = load i8, i8* %78, align 8, !range !3
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %125, label %81

81:                                               ; preds = %77
  %82 = tail call i64 @_ZN3jxl12CacheAligned10NextOffsetEv() #10
  %83 = tail call i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64 4194304, i64 %82) #10
  %84 = ptrtoint i8* %83 to i64
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %22, i64 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  store i64 %84, i64* %23, align 8
  %87 = icmp eq i8* %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %81
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %86) #10
  %89 = load i64, i64* %23, align 8
  br label %90

90:                                               ; preds = %88, %81
  %91 = phi i64 [ %89, %88 ], [ %84, %81 ]
  %92 = bitcast i32** %24 to i64*
  store i64 %91, i64* %92, align 8
  %93 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 5
  %94 = load i64, i64* %93, align 8
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %25, align 4
  %96 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 4
  %97 = bitcast %"struct.jxl::HybridUintConfig"* %29 to i8*
  %98 = bitcast %"struct.jxl::HybridUintConfig"* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 4 %98, i64 16, i1 false)
  %99 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 2
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %27, align 4
  %101 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 3
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %26, align 8
  %103 = icmp eq i64 %3, 0
  %104 = select i1 %103, i32 0, i32 120
  %105 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 20
  store i32 %104, i32* %105, align 8
  br i1 %103, label %125, label %106

106:                                              ; preds = %90
  %107 = trunc i64 %3 to i32
  br label %108

108:                                              ; preds = %106, %108
  %109 = phi i64 [ 0, %106 ], [ %121, %108 ]
  %110 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %109, i64 0
  %111 = load i8, i8* %110, align 2
  %112 = sext i8 %111 to i32
  %113 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %109, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = sext i8 %114 to i32
  %116 = mul nsw i32 %115, %107
  %117 = add nsw i32 %116, %112
  %118 = icmp sgt i32 %117, 1
  %119 = select i1 %118, i32 %117, i32 1
  %120 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 19, i64 %109
  store i32 %119, i32* %120, align 4
  %121 = add nuw nsw i64 %109, 1
  %122 = load i32, i32* %105, align 8
  %123 = zext i32 %122 to i64
  %124 = icmp ult i64 %121, %123
  br i1 %124, label %108, label %125

125:                                              ; preds = %108, %90, %77
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl12_GLOBAL__N_115ReadPermutationEmmPjPNS_9BitReaderEPNS_15ANSSymbolReaderERKNSt3__16vectorIhNS6_9allocatorIhEEEE(i64, i64, i32*, %"class.jxl::BitReader"*, %"class.jxl::ANSSymbolReader"*, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) unnamed_addr #0 {
  %7 = alloca %"class.std::__1::vector.35", align 8
  %8 = alloca %"class.std::__1::vector.35", align 8
  %9 = bitcast %"class.std::__1::vector.35"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %7, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %7, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 24, i1 false) #10
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %33, label %14

14:                                               ; preds = %6
  %15 = icmp ugt i64 %1, 4611686018427387903
  br i1 %15, label %16, label %18

16:                                               ; preds = %14
  %17 = bitcast %"class.std::__1::vector.35"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %17) #12
  unreachable

18:                                               ; preds = %14
  %19 = shl i64 %1, 2
  %20 = tail call i8* @_Znwm(i64 %19) #11
  %21 = bitcast i8* %20 to i32*
  %22 = bitcast %"class.std::__1::vector.35"* %7 to i8**
  store i8* %20, i8** %22, align 8
  %23 = getelementptr inbounds i32, i32* %21, i64 %1
  store i32* %23, i32** %12, align 8
  %24 = bitcast i32** %11 to i64*
  %25 = ptrtoint i8* %20 to i64
  %26 = add nsw i64 %1, -1
  %27 = getelementptr i32, i32* %21, i64 %26
  %28 = ptrtoint i32* %27 to i64
  %29 = sub i64 4, %25
  %30 = add i64 %29, %28
  %31 = and i64 %30, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %20, i8 0, i64 %31, i1 false) #10
  %32 = ptrtoint i32* %23 to i64
  store i64 %32, i64* %24, align 8
  br label %33

33:                                               ; preds = %6, %18
  %34 = phi i32* [ null, %6 ], [ %21, %18 ]
  %35 = bitcast %"class.std::__1::vector.35"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #10
  %36 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %8, i64 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %8, i64 0, i32 0, i32 1
  %38 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %39 = shl i64 %1, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #10
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %60, label %41

41:                                               ; preds = %33
  %42 = icmp ugt i64 %39, 4611686018427387903
  br i1 %42, label %43, label %45

43:                                               ; preds = %41
  %44 = bitcast %"class.std::__1::vector.35"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %44) #12
  unreachable

45:                                               ; preds = %41
  %46 = shl i64 %1, 3
  %47 = tail call i8* @_Znwm(i64 %46) #11
  %48 = bitcast i8* %47 to i32*
  %49 = bitcast %"class.std::__1::vector.35"* %8 to i8**
  store i8* %47, i8** %49, align 8
  %50 = getelementptr inbounds i32, i32* %48, i64 %39
  store i32* %50, i32** %38, align 8
  %51 = bitcast i32** %37 to i64*
  %52 = ptrtoint i8* %47 to i64
  %53 = add nsw i64 %39, -1
  %54 = getelementptr i32, i32* %48, i64 %53
  %55 = ptrtoint i32* %54 to i64
  %56 = sub i64 4, %52
  %57 = add i64 %56, %55
  %58 = and i64 %57, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %47, i8 0, i64 %58, i1 false) #10
  %59 = ptrtoint i32* %50 to i64
  store i64 %59, i64* %51, align 8
  br label %60

60:                                               ; preds = %33, %45
  %61 = trunc i64 %1 to i32
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %72, label %63

63:                                               ; preds = %60
  %64 = tail call i32 @llvm.ctlz.i32(i32 %61, i1 true) #10, !range !2
  %65 = xor i32 %64, 31
  %66 = shl i32 1, %65
  %67 = sub i32 %61, %66
  %68 = add nuw nsw i32 %65, 1
  %69 = lshr i32 %67, %65
  %70 = add i32 %68, %69
  %71 = icmp ult i32 %70, 7
  br i1 %71, label %72, label %74

72:                                               ; preds = %63, %60
  %73 = phi i32 [ %70, %63 ], [ 0, %60 ]
  br label %74

74:                                               ; preds = %63, %72
  %75 = phi i32 [ %73, %72 ], [ 7, %63 ]
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8, !noalias !5
  %79 = getelementptr inbounds i8, i8* %78, i64 %76
  %80 = load i8, i8* %79, align 1, !noalias !5
  %81 = zext i8 %80 to i64
  %82 = tail call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* %4, i64 %81, %"class.jxl::BitReader"* %3) #10
  %83 = add i64 %82, %0
  %84 = and i64 %83, 4294967295
  %85 = icmp ugt i64 %84, %1
  br i1 %85, label %279, label %86

86:                                               ; preds = %74
  %87 = icmp ugt i64 %84, %0
  br i1 %87, label %90, label %123

88:                                               ; preds = %106
  %89 = icmp eq i64 %122, %84
  br i1 %89, label %123, label %90

90:                                               ; preds = %86, %88
  %91 = phi i32* [ %116, %88 ], [ %34, %86 ]
  %92 = phi i64 [ %122, %88 ], [ %0, %86 ]
  %93 = phi i32 [ %118, %88 ], [ 0, %86 ]
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %104, label %95

95:                                               ; preds = %90
  %96 = tail call i32 @llvm.ctlz.i32(i32 %93, i1 true) #10, !range !2
  %97 = xor i32 %96, 31
  %98 = shl i32 1, %97
  %99 = sub i32 %93, %98
  %100 = add nuw nsw i32 %97, 1
  %101 = lshr i32 %99, %97
  %102 = add i32 %100, %101
  %103 = icmp ult i32 %102, 7
  br i1 %103, label %104, label %106

104:                                              ; preds = %95, %90
  %105 = phi i32 [ %102, %95 ], [ 0, %90 ]
  br label %106

106:                                              ; preds = %95, %104
  %107 = phi i32 [ %105, %104 ], [ 7, %95 ]
  %108 = zext i32 %107 to i64
  %109 = load i8*, i8** %77, align 8, !noalias !8
  %110 = getelementptr inbounds i8, i8* %109, i64 %108
  %111 = load i8, i8* %110, align 1, !noalias !8
  %112 = zext i8 %111 to i64
  %113 = tail call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* %4, i64 %112, %"class.jxl::BitReader"* %3) #10
  %114 = trunc i64 %113 to i32
  %115 = getelementptr inbounds i32, i32* %91, i64 %92
  store i32 %114, i32* %115, align 4
  %116 = load i32*, i32** %10, align 8
  %117 = getelementptr inbounds i32, i32* %116, i64 %92
  %118 = load i32, i32* %117, align 4
  %119 = zext i32 %118 to i64
  %120 = add i64 %92, %119
  %121 = icmp ult i64 %120, %1
  %122 = add nsw i64 %92, 1
  br i1 %121, label %88, label %279

123:                                              ; preds = %88, %86
  %124 = phi i32* [ %34, %86 ], [ %116, %88 ]
  %125 = icmp eq i32* %2, null
  br i1 %125, label %279, label %126

126:                                              ; preds = %123
  %127 = load i32*, i32** %36, align 8
  %128 = tail call i64 @llvm.ctlz.i64(i64 %1, i1 true) #10, !range !11
  %129 = xor i64 %128, 63
  %130 = tail call i64 @llvm.ctpop.i64(i64 %1) #10, !range !11
  %131 = icmp ugt i64 %130, 1
  %132 = zext i1 %131 to i64
  %133 = add nuw nsw i64 %129, %132
  %134 = shl i64 1, %133
  %135 = icmp ugt i64 %134, 1
  %136 = select i1 %135, i64 %134, i64 1
  %137 = icmp ult i64 %136, 8
  br i1 %137, label %138, label %140

138:                                              ; preds = %200, %126
  %139 = phi i64 [ 0, %126 ], [ %141, %200 ]
  br label %210

140:                                              ; preds = %126
  %141 = and i64 %136, -8
  %142 = add i64 %141, -8
  %143 = lshr exact i64 %142, 3
  %144 = add nuw nsw i64 %143, 1
  %145 = and i64 %144, 1
  %146 = icmp eq i64 %142, 0
  br i1 %146, label %185, label %147

147:                                              ; preds = %140
  %148 = sub nuw nsw i64 %144, %145
  br label %149

149:                                              ; preds = %149, %147
  %150 = phi i64 [ 0, %147 ], [ %179, %149 ]
  %151 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %147 ], [ %180, %149 ]
  %152 = phi i64 [ %148, %147 ], [ %181, %149 ]
  %153 = trunc <4 x i64> %151 to <4 x i32>
  %154 = add <4 x i32> %153, <i32 1, i32 1, i32 1, i32 1>
  %155 = trunc <4 x i64> %151 to <4 x i32>
  %156 = add <4 x i32> %155, <i32 5, i32 5, i32 5, i32 5>
  %157 = xor <4 x i32> %153, <i32 -1, i32 -1, i32 -1, i32 -1>
  %158 = sub <4 x i32> <i32 -5, i32 -5, i32 -5, i32 -5>, %155
  %159 = and <4 x i32> %154, %157
  %160 = and <4 x i32> %158, %156
  %161 = getelementptr inbounds i32, i32* %127, i64 %150
  %162 = bitcast i32* %161 to <4 x i32>*
  store <4 x i32> %159, <4 x i32>* %162, align 4, !alias.scope !12, !noalias !15
  %163 = getelementptr inbounds i32, i32* %161, i64 4
  %164 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %164, align 4, !alias.scope !12, !noalias !15
  %165 = or i64 %150, 8
  %166 = add <4 x i64> %151, <i64 8, i64 8, i64 8, i64 8>
  %167 = trunc <4 x i64> %166 to <4 x i32>
  %168 = add <4 x i32> %167, <i32 1, i32 1, i32 1, i32 1>
  %169 = trunc <4 x i64> %166 to <4 x i32>
  %170 = add <4 x i32> %169, <i32 5, i32 5, i32 5, i32 5>
  %171 = xor <4 x i32> %167, <i32 -1, i32 -1, i32 -1, i32 -1>
  %172 = sub <4 x i32> <i32 -5, i32 -5, i32 -5, i32 -5>, %169
  %173 = and <4 x i32> %168, %171
  %174 = and <4 x i32> %172, %170
  %175 = getelementptr inbounds i32, i32* %127, i64 %165
  %176 = bitcast i32* %175 to <4 x i32>*
  store <4 x i32> %173, <4 x i32>* %176, align 4, !alias.scope !12, !noalias !15
  %177 = getelementptr inbounds i32, i32* %175, i64 4
  %178 = bitcast i32* %177 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %178, align 4, !alias.scope !12, !noalias !15
  %179 = add i64 %150, 16
  %180 = add <4 x i64> %151, <i64 16, i64 16, i64 16, i64 16>
  %181 = add i64 %152, -2
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %149, !llvm.loop !18

183:                                              ; preds = %149
  %184 = trunc <4 x i64> %180 to <4 x i32>
  br label %185

185:                                              ; preds = %183, %140
  %186 = phi i64 [ 0, %140 ], [ %179, %183 ]
  %187 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %140 ], [ %184, %183 ]
  %188 = icmp eq i64 %145, 0
  br i1 %188, label %200, label %189

189:                                              ; preds = %185
  %190 = add <4 x i32> %187, <i32 1, i32 1, i32 1, i32 1>
  %191 = add <4 x i32> %187, <i32 5, i32 5, i32 5, i32 5>
  %192 = xor <4 x i32> %187, <i32 -1, i32 -1, i32 -1, i32 -1>
  %193 = sub <4 x i32> <i32 -5, i32 -5, i32 -5, i32 -5>, %187
  %194 = and <4 x i32> %190, %192
  %195 = and <4 x i32> %193, %191
  %196 = getelementptr inbounds i32, i32* %127, i64 %186
  %197 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %197, align 4, !alias.scope !12, !noalias !15
  %198 = getelementptr inbounds i32, i32* %196, i64 4
  %199 = bitcast i32* %198 to <4 x i32>*
  store <4 x i32> %195, <4 x i32>* %199, align 4, !alias.scope !12, !noalias !15
  br label %200

200:                                              ; preds = %185, %189
  %201 = icmp eq i64 %136, %141
  br i1 %201, label %202, label %138

202:                                              ; preds = %210, %200
  br i1 %13, label %279, label %203

203:                                              ; preds = %202
  %204 = add nuw nsw i64 %129, %132
  %205 = add nuw nsw i64 %204, 1
  %206 = and i64 %205, 1
  %207 = icmp eq i64 %204, 0
  %208 = sub nuw nsw i64 %205, %206
  %209 = icmp eq i64 %206, 0
  br label %218

210:                                              ; preds = %138, %210
  %211 = phi i64 [ %212, %210 ], [ %139, %138 ]
  %212 = add nuw i64 %211, 1
  %213 = trunc i64 %212 to i32
  %214 = sub nsw i32 0, %213
  %215 = and i32 %214, %213
  %216 = getelementptr inbounds i32, i32* %127, i64 %211
  store i32 %215, i32* %216, align 4, !alias.scope !12, !noalias !15
  %217 = icmp ult i64 %212, %134
  br i1 %217, label %210, label %202, !llvm.loop !20

218:                                              ; preds = %203, %276
  %219 = phi i64 [ %277, %276 ], [ 0, %203 ]
  %220 = getelementptr inbounds i32, i32* %124, i64 %219
  %221 = load i32, i32* %220, align 4, !alias.scope !22, !noalias !23
  %222 = add i32 %221, 1
  br i1 %207, label %223, label %241

223:                                              ; preds = %241, %218
  %224 = phi i64 [ undef, %218 ], [ %263, %241 ]
  %225 = phi i64 [ 0, %218 ], [ %263, %241 ]
  %226 = phi i64 [ %134, %218 ], [ %256, %241 ]
  %227 = phi i32 [ %222, %218 ], [ %262, %241 ]
  br i1 %209, label %235, label %228

228:                                              ; preds = %223
  %229 = add i64 %226, %225
  %230 = add i64 %229, -1
  %231 = getelementptr inbounds i32, i32* %127, i64 %230
  %232 = load i32, i32* %231, align 4, !alias.scope !12, !noalias !15
  %233 = icmp ugt i32 %227, %232
  %234 = select i1 %233, i64 %229, i64 %225
  br label %235

235:                                              ; preds = %223, %228
  %236 = phi i64 [ %224, %223 ], [ %234, %228 ]
  %237 = trunc i64 %236 to i32
  %238 = getelementptr inbounds i32, i32* %2, i64 %219
  store i32 %237, i32* %238, align 4, !alias.scope !24, !noalias !25
  %239 = add i64 %236, 1
  %240 = icmp ugt i64 %239, %134
  br i1 %240, label %276, label %266

241:                                              ; preds = %218, %241
  %242 = phi i64 [ %263, %241 ], [ 0, %218 ]
  %243 = phi i64 [ %256, %241 ], [ %134, %218 ]
  %244 = phi i32 [ %262, %241 ], [ %222, %218 ]
  %245 = phi i64 [ %264, %241 ], [ %208, %218 ]
  %246 = add i64 %243, %242
  %247 = lshr i64 %243, 1
  %248 = add i64 %246, -1
  %249 = getelementptr inbounds i32, i32* %127, i64 %248
  %250 = load i32, i32* %249, align 4, !alias.scope !12, !noalias !15
  %251 = icmp ugt i32 %244, %250
  %252 = select i1 %251, i32 %250, i32 0
  %253 = sub i32 %244, %252
  %254 = select i1 %251, i64 %246, i64 %242
  %255 = add i64 %247, %254
  %256 = lshr i64 %243, 2
  %257 = add i64 %255, -1
  %258 = getelementptr inbounds i32, i32* %127, i64 %257
  %259 = load i32, i32* %258, align 4, !alias.scope !12, !noalias !15
  %260 = icmp ugt i32 %253, %259
  %261 = select i1 %260, i32 %259, i32 0
  %262 = sub i32 %253, %261
  %263 = select i1 %260, i64 %255, i64 %254
  %264 = add i64 %245, -2
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %223, label %241

266:                                              ; preds = %235, %266
  %267 = phi i64 [ %274, %266 ], [ %239, %235 ]
  %268 = add i64 %267, -1
  %269 = getelementptr inbounds i32, i32* %127, i64 %268
  %270 = load i32, i32* %269, align 4, !alias.scope !12, !noalias !15
  %271 = add i32 %270, -1
  store i32 %271, i32* %269, align 4, !alias.scope !12, !noalias !15
  %272 = sub i64 0, %267
  %273 = and i64 %267, %272
  %274 = add i64 %273, %267
  %275 = icmp ugt i64 %274, %134
  br i1 %275, label %276, label %266

276:                                              ; preds = %266, %235
  %277 = add nuw i64 %219, 1
  %278 = icmp eq i64 %277, %1
  br i1 %278, label %279, label %218

279:                                              ; preds = %106, %276, %202, %123, %74
  %280 = phi i32 [ 1, %74 ], [ 0, %123 ], [ 0, %202 ], [ 0, %276 ], [ 1, %106 ]
  %281 = load i32*, i32** %36, align 8
  %282 = icmp eq i32* %281, null
  br i1 %282, label %287, label %283

283:                                              ; preds = %279
  %284 = ptrtoint i32* %281 to i64
  %285 = bitcast i32** %37 to i64*
  store i64 %284, i64* %285, align 8
  %286 = bitcast i32* %281 to i8*
  tail call void @_ZdlPv(i8* %286) #11
  br label %287

287:                                              ; preds = %279, %283
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #10
  %288 = load i32*, i32** %10, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %294, label %290

290:                                              ; preds = %287
  %291 = ptrtoint i32* %288 to i64
  %292 = bitcast i32** %11 to i64*
  store i64 %291, i64* %292, align 8
  %293 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %293) #11
  br label %294

294:                                              ; preds = %287, %290
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #10
  ret i32 %280
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl17DecodeCoeffOrdersEtjPjPNS_9BitReaderE(i16 zeroext, i32, i32*, %"class.jxl::BitReader"*) local_unnamed_addr #0 {
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"struct.jxl::ANSCode", align 8
  %7 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #10
  %10 = bitcast %"struct.jxl::ANSCode"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 64, i1 false)
  %12 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 80, i1 false) #10
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %12) #10
  %13 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 7
  store i64 0, i64* %13, align 8
  %14 = zext i16 %0 to i32
  %15 = icmp eq i16 %0, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %4
  %17 = call i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"* %3, i64 8, %"struct.jxl::ANSCode"* nonnull %6, %"class.std::__1::vector"* nonnull %5, i1 zeroext false) #10
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %149

19:                                               ; preds = %16
  %20 = call i8* @_Znwm(i64 592) #11
  %21 = bitcast i8* %20 to %"class.jxl::ANSSymbolReader"*
  call void @_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm(%"class.jxl::ANSSymbolReader"* nonnull %21, %"struct.jxl::ANSCode"* nonnull %6, %"class.jxl::BitReader"* %3, i64 0) #10
  br label %22

22:                                               ; preds = %4, %19
  %23 = phi i8* [ null, %4 ], [ %20, %19 ]
  %24 = phi %"class.jxl::ANSSymbolReader"* [ null, %4 ], [ %21, %19 ]
  br label %25

25:                                               ; preds = %293, %22
  %26 = phi i64 [ 0, %22 ], [ %295, %293 ]
  %27 = phi i32 [ 0, %22 ], [ %294, %293 ]
  %28 = trunc i64 %26 to i32
  %29 = shl i32 1, %28
  %30 = and i32 %29, %1
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %38, label %32

32:                                               ; preds = %25
  %33 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %26
  %34 = load i8, i8* %33, align 2
  %35 = zext i8 %34 to i32
  %36 = shl i32 1, %35
  %37 = or i32 %36, %27
  br label %38

38:                                               ; preds = %25, %32
  %39 = phi i32 [ %27, %25 ], [ %37, %32 ]
  %40 = or i64 %26, 1
  %41 = icmp eq i64 %40, 27
  br i1 %41, label %42, label %282

42:                                               ; preds = %38, %130
  %43 = phi i64 [ %132, %130 ], [ 0, %38 ]
  %44 = phi i16 [ %131, %130 ], [ 0, %38 ]
  %45 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %43
  %46 = load i8, i8* %45, align 1
  %47 = zext i16 %44 to i32
  %48 = zext i8 %46 to i32
  %49 = shl i32 1, %48
  %50 = and i32 %49, %47
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %130

52:                                               ; preds = %42
  %53 = trunc i32 %49 to i16
  %54 = or i16 %44, %53
  %55 = and i32 %49, %39
  %56 = icmp ne i32 %55, 0
  %57 = and i32 %49, %14
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %72, label %59

59:                                               ; preds = %52
  %60 = zext i8 %46 to i64
  %61 = mul nuw nsw i64 %60, 3
  %62 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %43
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i64
  %65 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %43
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i64
  %68 = mul nuw nsw i64 %67, %64
  %69 = shl nuw nsw i64 %68, 6
  %70 = getelementptr inbounds [28 x i64], [28 x i64]* @_ZN3jxl10AcStrategy16CoeffOrderAndLut7kOffsetE.const, i64 0, i64 %43
  %71 = icmp eq i64 %68, 0
  br i1 %56, label %104, label %109

72:                                               ; preds = %52
  br i1 %56, label %73, label %130

73:                                               ; preds = %72
  %74 = zext i8 %46 to i64
  %75 = mul nuw nsw i64 %74, 3
  %76 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %43
  %77 = load i8, i8* %76, align 1, !noalias !26
  %78 = zext i8 %77 to i64
  %79 = shl nuw nsw i64 %78, 6
  %80 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %43
  %81 = load i8, i8* %80, align 1, !noalias !26
  %82 = zext i8 %81 to i64
  %83 = mul nuw nsw i64 %79, %82
  %84 = icmp eq i64 %83, 0
  %85 = getelementptr inbounds [28 x i64], [28 x i64]* @_ZN3jxl10AcStrategy16CoeffOrderAndLut7kOffsetE.const, i64 0, i64 %43
  %86 = shl nuw nsw i64 %78, 8
  %87 = mul nuw nsw i64 %86, %82
  %88 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %75
  %89 = load i64, i64* %88, align 8
  %90 = call %"struct.jxl::AcStrategy::CoeffOrderAndLut"* @_ZN3jxl10AcStrategy10CoeffOrderEv() #10, !noalias !26
  br i1 %84, label %99, label %91

91:                                               ; preds = %73
  %92 = shl i64 %89, 6
  %93 = getelementptr inbounds i32, i32* %2, i64 %92
  %94 = load i64, i64* %85, align 8, !noalias !26
  %95 = shl i64 %94, 6
  %96 = getelementptr %"struct.jxl::AcStrategy::CoeffOrderAndLut", %"struct.jxl::AcStrategy::CoeffOrderAndLut"* %90, i64 0, i32 0, i64 %95
  %97 = bitcast i32* %93 to i8*
  %98 = bitcast i32* %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 %87, i1 false) #10
  br label %99

99:                                               ; preds = %73, %91
  %100 = add nuw nsw i64 %75, 1
  %101 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %100
  %102 = load i64, i64* %101, align 8
  %103 = call %"struct.jxl::AcStrategy::CoeffOrderAndLut"* @_ZN3jxl10AcStrategy10CoeffOrderEv() #10, !noalias !26
  br i1 %84, label %269, label %261

104:                                              ; preds = %59
  %105 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %61
  %106 = load i64, i64* %105, align 8
  %107 = shl i64 %106, 6
  %108 = getelementptr inbounds i32, i32* %2, i64 %107
  br label %109

109:                                              ; preds = %59, %104
  %110 = phi i32* [ %108, %104 ], [ null, %59 ]
  %111 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115ReadPermutationEmmPjPNS_9BitReaderEPNS_15ANSSymbolReaderERKNSt3__16vectorIhNS6_9allocatorIhEEEE(i64 %68, i64 %69, i32* %110, %"class.jxl::BitReader"* %3, %"class.jxl::ANSSymbolReader"* %24, %"class.std::__1::vector"* nonnull dereferenceable(24) %5) #10
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %140

113:                                              ; preds = %109
  %114 = icmp eq i32* %110, null
  br i1 %114, label %129, label %115

115:                                              ; preds = %113
  %116 = call %"struct.jxl::AcStrategy::CoeffOrderAndLut"* @_ZN3jxl10AcStrategy10CoeffOrderEv() #10
  %117 = load i64, i64* %70, align 8
  %118 = shl i64 %117, 6
  %119 = getelementptr inbounds %"struct.jxl::AcStrategy::CoeffOrderAndLut", %"struct.jxl::AcStrategy::CoeffOrderAndLut"* %116, i64 0, i32 0, i64 %118
  br i1 %71, label %129, label %120

120:                                              ; preds = %115, %120
  %121 = phi i64 [ %127, %120 ], [ 0, %115 ]
  %122 = getelementptr inbounds i32, i32* %110, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds i32, i32* %119, i64 %124
  %126 = load i32, i32* %125, align 4
  store i32 %126, i32* %122, align 4
  %127 = add nuw nsw i64 %121, 1
  %128 = icmp ult i64 %127, %69
  br i1 %128, label %120, label %129

129:                                              ; preds = %120, %113, %115
  br i1 %56, label %208, label %214

130:                                              ; preds = %252, %269, %274, %245, %247, %42, %72
  %131 = phi i16 [ %54, %72 ], [ %44, %42 ], [ %54, %247 ], [ %54, %245 ], [ %54, %274 ], [ %54, %269 ], [ %54, %252 ]
  %132 = add nuw nsw i64 %43, 1
  %133 = icmp eq i64 %132, 27
  br i1 %133, label %134, label %42

134:                                              ; preds = %130
  br i1 %15, label %139, label %135

135:                                              ; preds = %134
  %136 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %24, i64 0, i32 4
  %137 = load i32, i32* %136, align 4
  %138 = icmp eq i32 %137, 1245184
  br i1 %138, label %139, label %140

139:                                              ; preds = %134, %135
  br label %140

140:                                              ; preds = %109, %214, %241, %135, %139
  %141 = phi i32 [ 0, %139 ], [ 1, %135 ], [ %243, %241 ], [ %216, %214 ], [ %111, %109 ]
  %142 = icmp eq %"class.jxl::ANSSymbolReader"* %24, null
  br i1 %142, label %149, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %24, i64 0, i32 10, i32 0, i32 0, i32 0
  %145 = load i8*, i8** %144, align 8
  store i8* null, i8** %144, align 8
  %146 = icmp eq i8* %145, null
  br i1 %146, label %148, label %147

147:                                              ; preds = %143
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %145) #10
  br label %148

148:                                              ; preds = %147, %143
  call void @_ZdlPv(i8* %23) #11
  br label %149

149:                                              ; preds = %16, %140, %148
  %150 = phi i32 [ %141, %140 ], [ %141, %148 ], [ %17, %16 ]
  %151 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 3, i32 0, i32 0
  %152 = load i32*, i32** %151, align 8
  %153 = icmp eq i32* %152, null
  br i1 %153, label %159, label %154

154:                                              ; preds = %149
  %155 = ptrtoint i32* %152 to i64
  %156 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 3, i32 0, i32 1
  %157 = bitcast i32** %156 to i64*
  store i64 %155, i64* %157, align 8
  %158 = bitcast i32* %152 to i8*
  call void @_ZdlPv(i8* %158) #11
  br label %159

159:                                              ; preds = %154, %149
  %160 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 2, i32 0, i32 0
  %161 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %160, align 8
  %162 = icmp eq %"struct.jxl::HybridUintConfig"* %161, null
  br i1 %162, label %168, label %163

163:                                              ; preds = %159
  %164 = ptrtoint %"struct.jxl::HybridUintConfig"* %161 to i64
  %165 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 2, i32 0, i32 1
  %166 = bitcast %"struct.jxl::HybridUintConfig"** %165 to i64*
  store i64 %164, i64* %166, align 8
  %167 = bitcast %"struct.jxl::HybridUintConfig"* %161 to i8*
  call void @_ZdlPv(i8* %167) #11
  br label %168

168:                                              ; preds = %163, %159
  %169 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 1
  %170 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %169, i64 0, i32 0, i32 0
  %171 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %170, align 8
  %172 = icmp eq %"struct.jxl::HuffmanDecodingData"* %171, null
  br i1 %172, label %196, label %173

173:                                              ; preds = %168
  %174 = bitcast %"struct.jxl::HuffmanDecodingData"* %171 to i8*
  %175 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 1, i32 0, i32 1
  %176 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %175, align 8
  %177 = icmp eq %"struct.jxl::HuffmanDecodingData"* %176, %171
  br i1 %177, label %194, label %178

178:                                              ; preds = %173, %189
  %179 = phi %"struct.jxl::HuffmanDecodingData"* [ %180, %189 ], [ %176, %173 ]
  %180 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %179, i64 -1
  %181 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %180, i64 0, i32 0, i32 0, i32 0
  %182 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %181, align 8
  %183 = icmp eq %"struct.jxl::HuffmanCode"* %182, null
  br i1 %183, label %189, label %184

184:                                              ; preds = %178
  %185 = ptrtoint %"struct.jxl::HuffmanCode"* %182 to i64
  %186 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %179, i64 -1, i32 0, i32 0, i32 1
  %187 = bitcast %"struct.jxl::HuffmanCode"** %186 to i64*
  store i64 %185, i64* %187, align 8
  %188 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %182, i64 0, i32 0
  call void @_ZdlPv(i8* %188) #11
  br label %189

189:                                              ; preds = %184, %178
  %190 = icmp eq %"struct.jxl::HuffmanDecodingData"* %180, %171
  br i1 %190, label %191, label %178

191:                                              ; preds = %189
  %192 = bitcast %"class.std::__1::vector.3"* %169 to i8**
  %193 = load i8*, i8** %192, align 8
  br label %194

194:                                              ; preds = %191, %173
  %195 = phi i8* [ %193, %191 ], [ %174, %173 ]
  store %"struct.jxl::HuffmanDecodingData"* %171, %"struct.jxl::HuffmanDecodingData"** %175, align 8
  call void @_ZdlPv(i8* %195) #11
  br label %196

196:                                              ; preds = %194, %168
  %197 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %198 = load i8*, i8** %197, align 8
  store i8* null, i8** %197, align 8
  %199 = icmp eq i8* %198, null
  br i1 %199, label %201, label %200

200:                                              ; preds = %196
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %198) #10
  br label %201

201:                                              ; preds = %196, %200
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %10) #10
  %202 = load i8*, i8** %8, align 8
  %203 = icmp eq i8* %202, null
  br i1 %203, label %207, label %204

204:                                              ; preds = %201
  %205 = ptrtoint i8* %202 to i64
  %206 = bitcast i8** %9 to i64*
  store i64 %205, i64* %206, align 8
  call void @_ZdlPv(i8* nonnull %202) #11
  br label %207

207:                                              ; preds = %201, %204
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #10
  ret i32 %150

208:                                              ; preds = %129
  %209 = add nuw nsw i64 %61, 1
  %210 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %209
  %211 = load i64, i64* %210, align 8
  %212 = shl i64 %211, 6
  %213 = getelementptr inbounds i32, i32* %2, i64 %212
  br label %214

214:                                              ; preds = %208, %129
  %215 = phi i32* [ %213, %208 ], [ null, %129 ]
  %216 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115ReadPermutationEmmPjPNS_9BitReaderEPNS_15ANSSymbolReaderERKNSt3__16vectorIhNS6_9allocatorIhEEEE(i64 %68, i64 %69, i32* %215, %"class.jxl::BitReader"* %3, %"class.jxl::ANSSymbolReader"* %24, %"class.std::__1::vector"* nonnull dereferenceable(24) %5) #10
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %140

218:                                              ; preds = %214
  %219 = icmp eq i32* %215, null
  br i1 %219, label %234, label %220

220:                                              ; preds = %218
  %221 = call %"struct.jxl::AcStrategy::CoeffOrderAndLut"* @_ZN3jxl10AcStrategy10CoeffOrderEv() #10
  %222 = load i64, i64* %70, align 8
  %223 = shl i64 %222, 6
  %224 = getelementptr inbounds %"struct.jxl::AcStrategy::CoeffOrderAndLut", %"struct.jxl::AcStrategy::CoeffOrderAndLut"* %221, i64 0, i32 0, i64 %223
  br i1 %71, label %234, label %225

225:                                              ; preds = %220, %225
  %226 = phi i64 [ %232, %225 ], [ 0, %220 ]
  %227 = getelementptr inbounds i32, i32* %215, i64 %226
  %228 = load i32, i32* %227, align 4
  %229 = zext i32 %228 to i64
  %230 = getelementptr inbounds i32, i32* %224, i64 %229
  %231 = load i32, i32* %230, align 4
  store i32 %231, i32* %227, align 4
  %232 = add nuw nsw i64 %226, 1
  %233 = icmp ult i64 %232, %69
  br i1 %233, label %225, label %234

234:                                              ; preds = %225, %220, %218
  br i1 %56, label %235, label %241

235:                                              ; preds = %234
  %236 = add nuw nsw i64 %61, 2
  %237 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %236
  %238 = load i64, i64* %237, align 8
  %239 = shl i64 %238, 6
  %240 = getelementptr inbounds i32, i32* %2, i64 %239
  br label %241

241:                                              ; preds = %235, %234
  %242 = phi i32* [ %240, %235 ], [ null, %234 ]
  %243 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115ReadPermutationEmmPjPNS_9BitReaderEPNS_15ANSSymbolReaderERKNSt3__16vectorIhNS6_9allocatorIhEEEE(i64 %68, i64 %69, i32* %242, %"class.jxl::BitReader"* %3, %"class.jxl::ANSSymbolReader"* %24, %"class.std::__1::vector"* nonnull dereferenceable(24) %5) #10
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %245, label %140

245:                                              ; preds = %241
  %246 = icmp eq i32* %242, null
  br i1 %246, label %130, label %247

247:                                              ; preds = %245
  %248 = call %"struct.jxl::AcStrategy::CoeffOrderAndLut"* @_ZN3jxl10AcStrategy10CoeffOrderEv() #10
  %249 = load i64, i64* %70, align 8
  %250 = shl i64 %249, 6
  %251 = getelementptr inbounds %"struct.jxl::AcStrategy::CoeffOrderAndLut", %"struct.jxl::AcStrategy::CoeffOrderAndLut"* %248, i64 0, i32 0, i64 %250
  br i1 %71, label %130, label %252

252:                                              ; preds = %247, %252
  %253 = phi i64 [ %259, %252 ], [ 0, %247 ]
  %254 = getelementptr inbounds i32, i32* %242, i64 %253
  %255 = load i32, i32* %254, align 4
  %256 = zext i32 %255 to i64
  %257 = getelementptr inbounds i32, i32* %251, i64 %256
  %258 = load i32, i32* %257, align 4
  store i32 %258, i32* %254, align 4
  %259 = add nuw nsw i64 %253, 1
  %260 = icmp ult i64 %259, %69
  br i1 %260, label %252, label %130

261:                                              ; preds = %99
  %262 = shl i64 %102, 6
  %263 = getelementptr inbounds i32, i32* %2, i64 %262
  %264 = load i64, i64* %85, align 8, !noalias !26
  %265 = shl i64 %264, 6
  %266 = getelementptr %"struct.jxl::AcStrategy::CoeffOrderAndLut", %"struct.jxl::AcStrategy::CoeffOrderAndLut"* %103, i64 0, i32 0, i64 %265
  %267 = bitcast i32* %263 to i8*
  %268 = bitcast i32* %266 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %267, i8* align 4 %268, i64 %87, i1 false) #10
  br label %269

269:                                              ; preds = %261, %99
  %270 = add nuw nsw i64 %75, 2
  %271 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %270
  %272 = load i64, i64* %271, align 8
  %273 = call %"struct.jxl::AcStrategy::CoeffOrderAndLut"* @_ZN3jxl10AcStrategy10CoeffOrderEv() #10, !noalias !26
  br i1 %84, label %130, label %274

274:                                              ; preds = %269
  %275 = shl i64 %272, 6
  %276 = getelementptr inbounds i32, i32* %2, i64 %275
  %277 = load i64, i64* %85, align 8, !noalias !26
  %278 = shl i64 %277, 6
  %279 = getelementptr %"struct.jxl::AcStrategy::CoeffOrderAndLut", %"struct.jxl::AcStrategy::CoeffOrderAndLut"* %273, i64 0, i32 0, i64 %278
  %280 = bitcast i32* %276 to i8*
  %281 = bitcast i32* %279 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %280, i8* align 4 %281, i64 %87, i1 false) #10
  br label %130

282:                                              ; preds = %38
  %283 = trunc i64 %40 to i32
  %284 = shl i32 1, %283
  %285 = and i32 %284, %1
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %293, label %287

287:                                              ; preds = %282
  %288 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %40
  %289 = load i8, i8* %288, align 1
  %290 = zext i8 %289 to i32
  %291 = shl i32 1, %290
  %292 = or i32 %291, %39
  br label %293

293:                                              ; preds = %287, %282
  %294 = phi i32 [ %39, %282 ], [ %292, %287 ]
  %295 = add nuw nsw i64 %26, 2
  br label %25
}

declare %"struct.jxl::AcStrategy::CoeffOrderAndLut"* @_ZN3jxl10AcStrategy10CoeffOrderEv() local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

declare i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64, i64) local_unnamed_addr #3

declare i64 @_ZN3jxl12CacheAligned10NextOffsetEv() local_unnamed_addr #3

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"*, i64, %"class.jxl::BitReader"* noalias) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 13
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %7 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %9 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 4
  %12 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 6
  %14 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 7
  %15 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 8
  %16 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 17
  %17 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 1
  %18 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 2
  %19 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 3
  %20 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 0
  %21 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 16
  %22 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 15
  %23 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 5
  %24 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 20
  %25 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 12
  %26 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 14
  %27 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 11
  %28 = bitcast i32** %27 to i8**
  %29 = load i32, i32* %4, align 4
  br label %30

30:                                               ; preds = %333, %3
  %31 = phi i32 [ %334, %333 ], [ %29, %3 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %48, label %33, !prof !29

33:                                               ; preds = %30
  %34 = load i32*, i32** %27, align 8
  %35 = load i32, i32* %26, align 8
  %36 = add i32 %35, 1
  store i32 %36, i32* %26, align 8
  %37 = and i32 %35, 1048575
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %34, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = add i32 %31, -1
  store i32 %42, i32* %4, align 4
  %43 = load i32, i32* %25, align 8
  %44 = add i32 %43, 1
  store i32 %44, i32* %25, align 8
  %45 = and i32 %43, 1048575
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %34, i64 %46
  store i32 %40, i32* %47, align 4
  br label %395

48:                                               ; preds = %30
  %49 = load i8*, i8** %5, align 8
  %50 = load i8*, i8** %6, align 8
  %51 = icmp ugt i8* %49, %50
  br i1 %51, label %52, label %53, !prof !4

52:                                               ; preds = %48
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  br label %64

53:                                               ; preds = %48
  %54 = bitcast i8* %49 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = load i64, i64* %7, align 8
  %57 = shl i64 %55, %56
  %58 = load i64, i64* %8, align 8
  %59 = or i64 %58, %57
  store i64 %59, i64* %8, align 8
  %60 = sub i64 63, %56
  %61 = lshr i64 %60, 3
  %62 = getelementptr inbounds i8, i8* %49, i64 %61
  store i8* %62, i8** %5, align 8
  %63 = or i64 %56, 56
  store i64 %63, i64* %7, align 8
  br label %64

64:                                               ; preds = %52, %53
  %65 = load i8, i8* %9, align 8, !range !3, !noalias !30
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %72, label %67, !prof !29

67:                                               ; preds = %64
  %68 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %10, align 8, !noalias !33
  %69 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %68, i64 %1
  %70 = tail call zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* %69, %"class.jxl::BitReader"* %2) #10
  %71 = zext i16 %70 to i64
  br label %123

72:                                               ; preds = %64
  %73 = load i32, i32* %11, align 4, !noalias !36
  %74 = and i32 %73, 4095
  %75 = load %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::AliasTable::Entry"** %12, align 8, !noalias !36
  %76 = load i32, i32* %13, align 8, !noalias !36
  %77 = zext i32 %76 to i64
  %78 = shl i64 %1, %77
  %79 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %75, i64 %78
  %80 = zext i32 %74 to i64
  %81 = load i32, i32* %14, align 4, !noalias !36
  %82 = zext i32 %81 to i64
  %83 = load i32, i32* %15, align 8, !noalias !36
  %84 = lshr i64 %80, %82
  %85 = and i32 %83, %74
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %79, i64 %84
  %88 = bitcast %"struct.jxl::AliasTable::Entry"* %87 to i64*
  %89 = load i64, i64* %88, align 1, !alias.scope !39, !noalias !42
  %90 = and i64 %89, 255
  %91 = lshr i64 %89, 8
  %92 = and i64 %91, 255
  %93 = lshr i64 %89, 16
  %94 = and i64 %93, 65535
  %95 = icmp ule i64 %90, %86
  %96 = select i1 %95, i64 %89, i64 0
  %97 = lshr i64 %96, 32
  %98 = and i64 %97, 65535
  %99 = lshr i64 %96, 48
  %100 = select i1 %95, i64 %92, i64 %84
  %101 = add nuw nsw i64 %98, %86
  %102 = xor i64 %99, %94
  %103 = lshr i32 %73, 12
  %104 = zext i32 %103 to i64
  %105 = mul nuw nsw i64 %102, %104
  %106 = add nuw nsw i64 %101, %105
  %107 = trunc i64 %106 to i32
  %108 = load i64, i64* %8, align 8, !alias.scope !36
  %109 = icmp ult i32 %107, 65536
  %110 = shl i32 %107, 16
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 65535
  %113 = or i32 %110, %112
  %114 = select i1 %109, i32 %113, i32 %107
  store i32 %114, i32* %11, align 4, !noalias !36
  %115 = select i1 %109, i64 16, i64 0
  %116 = load i64, i64* %7, align 8, !alias.scope !36
  %117 = sub i64 %116, %115
  store i64 %117, i64* %7, align 8, !alias.scope !36
  %118 = lshr i64 %108, %115
  store i64 %118, i64* %8, align 8, !alias.scope !36
  %119 = and i32 %114, 4095
  %120 = zext i32 %119 to i64
  %121 = lshr i64 %120, %82
  %122 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %79, i64 %121, i32 0
  tail call void @llvm.prefetch(i8* %122, i32 0, i32 3, i32 1) #10, !noalias !44
  br label %123

123:                                              ; preds = %67, %72
  %124 = phi i64 [ %71, %67 ], [ %100, %72 ]
  %125 = load i32, i32* %16, align 4
  %126 = zext i32 %125 to i64
  %127 = icmp ult i64 %124, %126
  br i1 %127, label %337, label %128, !prof !29

128:                                              ; preds = %123
  %129 = sub nsw i64 %124, %126
  %130 = load i32, i32* %17, align 4
  %131 = zext i32 %130 to i64
  %132 = load i32, i32* %18, align 4
  %133 = load i32, i32* %19, align 4
  %134 = zext i32 %133 to i64
  %135 = icmp ult i64 %129, %131
  br i1 %135, label %136, label %138

136:                                              ; preds = %128
  %137 = trunc i64 %129 to i32
  br label %171

138:                                              ; preds = %128
  %139 = load i32, i32* %20, align 4
  %140 = zext i32 %139 to i64
  %141 = zext i32 %132 to i64
  %142 = add nuw nsw i64 %134, %141
  %143 = sub nsw i64 %129, %131
  %144 = lshr i64 %143, %142
  %145 = sub i64 %144, %142
  %146 = add i64 %145, %140
  %147 = and i64 %146, 31
  %148 = shl nsw i32 -1, %133
  %149 = xor i32 %148, -1
  %150 = trunc i64 %129 to i32
  %151 = and i32 %149, %150
  %152 = lshr i64 %129, %134
  %153 = shl nsw i64 -1, %147
  %154 = xor i64 %153, -1
  %155 = load i64, i64* %8, align 8
  %156 = and i64 %155, %154
  %157 = load i64, i64* %7, align 8
  %158 = sub i64 %157, %147
  store i64 %158, i64* %7, align 8
  %159 = lshr i64 %155, %147
  store i64 %159, i64* %8, align 8
  %160 = shl i32 1, %132
  %161 = sext i32 %160 to i64
  %162 = add nsw i32 %160, -1
  %163 = sext i32 %162 to i64
  %164 = and i64 %152, %163
  %165 = or i64 %164, %161
  %166 = shl i64 %165, %147
  %167 = or i64 %156, %166
  %168 = shl i64 %167, %134
  %169 = trunc i64 %168 to i32
  %170 = or i32 %151, %169
  br label %171

171:                                              ; preds = %136, %138
  %172 = phi i32 [ %137, %136 ], [ %170, %138 ]
  %173 = load i32, i32* %21, align 8
  %174 = add i32 %173, %172
  store i32 %174, i32* %4, align 4
  %175 = load i8*, i8** %5, align 8
  %176 = load i8*, i8** %6, align 8
  %177 = icmp ugt i8* %175, %176
  br i1 %177, label %178, label %179, !prof !4

178:                                              ; preds = %171
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  br label %190

179:                                              ; preds = %171
  %180 = bitcast i8* %175 to i64*
  %181 = load i64, i64* %180, align 1
  %182 = load i64, i64* %7, align 8
  %183 = shl i64 %181, %182
  %184 = load i64, i64* %8, align 8
  %185 = or i64 %184, %183
  store i64 %185, i64* %8, align 8
  %186 = sub i64 63, %182
  %187 = lshr i64 %186, 3
  %188 = getelementptr inbounds i8, i8* %175, i64 %187
  store i8* %188, i8** %5, align 8
  %189 = or i64 %182, 56
  store i64 %189, i64* %7, align 8
  br label %190

190:                                              ; preds = %178, %179
  %191 = load i32, i32* %22, align 4
  %192 = zext i32 %191 to i64
  %193 = load i8, i8* %9, align 8, !range !3, !noalias !45
  %194 = icmp eq i8 %193, 0
  br i1 %194, label %202, label %195, !prof !29

195:                                              ; preds = %190
  %196 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %10, align 8, !noalias !48
  %197 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %196, i64 %192
  %198 = tail call zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* %197, %"class.jxl::BitReader"* %2) #10
  %199 = zext i16 %198 to i64
  %200 = load i32, i32* %22, align 4
  %201 = zext i32 %200 to i64
  br label %253

202:                                              ; preds = %190
  %203 = load i32, i32* %11, align 4, !noalias !51
  %204 = and i32 %203, 4095
  %205 = load %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::AliasTable::Entry"** %12, align 8, !noalias !51
  %206 = load i32, i32* %13, align 8, !noalias !51
  %207 = zext i32 %206 to i64
  %208 = shl i64 %192, %207
  %209 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %205, i64 %208
  %210 = zext i32 %204 to i64
  %211 = load i32, i32* %14, align 4, !noalias !51
  %212 = zext i32 %211 to i64
  %213 = load i32, i32* %15, align 8, !noalias !51
  %214 = lshr i64 %210, %212
  %215 = and i32 %213, %204
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %209, i64 %214
  %218 = bitcast %"struct.jxl::AliasTable::Entry"* %217 to i64*
  %219 = load i64, i64* %218, align 1, !alias.scope !54, !noalias !57
  %220 = and i64 %219, 255
  %221 = lshr i64 %219, 8
  %222 = and i64 %221, 255
  %223 = lshr i64 %219, 16
  %224 = and i64 %223, 65535
  %225 = icmp ule i64 %220, %216
  %226 = select i1 %225, i64 %219, i64 0
  %227 = lshr i64 %226, 32
  %228 = and i64 %227, 65535
  %229 = lshr i64 %226, 48
  %230 = select i1 %225, i64 %222, i64 %214
  %231 = add nuw nsw i64 %228, %216
  %232 = xor i64 %229, %224
  %233 = lshr i32 %203, 12
  %234 = zext i32 %233 to i64
  %235 = mul nuw nsw i64 %232, %234
  %236 = add nuw nsw i64 %231, %235
  %237 = trunc i64 %236 to i32
  %238 = load i64, i64* %8, align 8, !alias.scope !51
  %239 = icmp ult i32 %237, 65536
  %240 = shl i32 %237, 16
  %241 = trunc i64 %238 to i32
  %242 = and i32 %241, 65535
  %243 = or i32 %240, %242
  %244 = select i1 %239, i32 %243, i32 %237
  store i32 %244, i32* %11, align 4, !noalias !51
  %245 = select i1 %239, i64 16, i64 0
  %246 = load i64, i64* %7, align 8, !alias.scope !51
  %247 = sub i64 %246, %245
  store i64 %247, i64* %7, align 8, !alias.scope !51
  %248 = lshr i64 %238, %245
  store i64 %248, i64* %8, align 8, !alias.scope !51
  %249 = and i32 %244, 4095
  %250 = zext i32 %249 to i64
  %251 = lshr i64 %250, %212
  %252 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %209, i64 %251, i32 0
  tail call void @llvm.prefetch(i8* %252, i32 0, i32 3, i32 1) #10, !noalias !59
  br label %253

253:                                              ; preds = %195, %202
  %254 = phi i64 [ %201, %195 ], [ %192, %202 ]
  %255 = phi i64 [ %199, %195 ], [ %230, %202 ]
  %256 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %23, align 8
  %257 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 1
  %258 = load i32, i32* %257, align 4
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 2
  %261 = load i32, i32* %260, align 4
  %262 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 3
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  %265 = icmp ult i64 %255, %259
  br i1 %265, label %266, label %268

266:                                              ; preds = %253
  %267 = trunc i64 %255 to i32
  br label %302

268:                                              ; preds = %253
  %269 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 0
  %270 = load i32, i32* %269, align 4
  %271 = zext i32 %270 to i64
  %272 = zext i32 %261 to i64
  %273 = add nuw nsw i64 %264, %272
  %274 = sub nsw i64 %255, %259
  %275 = lshr i64 %274, %273
  %276 = sub i64 %275, %273
  %277 = add i64 %276, %271
  %278 = and i64 %277, 31
  %279 = shl nsw i32 -1, %263
  %280 = xor i32 %279, -1
  %281 = trunc i64 %255 to i32
  %282 = and i32 %280, %281
  %283 = lshr i64 %255, %264
  %284 = shl nsw i64 -1, %278
  %285 = xor i64 %284, -1
  %286 = load i64, i64* %8, align 8
  %287 = and i64 %286, %285
  %288 = load i64, i64* %7, align 8
  %289 = sub i64 %288, %278
  store i64 %289, i64* %7, align 8
  %290 = lshr i64 %286, %278
  store i64 %290, i64* %8, align 8
  %291 = shl i32 1, %261
  %292 = sext i32 %291 to i64
  %293 = add nsw i32 %291, -1
  %294 = sext i32 %293 to i64
  %295 = and i64 %283, %294
  %296 = or i64 %295, %292
  %297 = shl i64 %296, %278
  %298 = or i64 %287, %297
  %299 = shl i64 %298, %264
  %300 = trunc i64 %299 to i32
  %301 = or i32 %282, %300
  br label %302

302:                                              ; preds = %266, %268
  %303 = phi i32 [ %267, %266 ], [ %301, %268 ]
  %304 = zext i32 %303 to i64
  %305 = load i32, i32* %24, align 8
  %306 = icmp ult i32 %303, %305
  br i1 %306, label %307, label %311, !prof !29

307:                                              ; preds = %302
  %308 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 19, i64 %304
  %309 = load i32, i32* %308, align 4
  %310 = zext i32 %309 to i64
  br label %315

311:                                              ; preds = %302
  %312 = zext i32 %305 to i64
  %313 = add nuw nsw i64 %304, 1
  %314 = sub nsw i64 %313, %312
  br label %315

315:                                              ; preds = %311, %307
  %316 = phi i64 [ %310, %307 ], [ %314, %311 ]
  %317 = load i32, i32* %25, align 8
  %318 = zext i32 %317 to i64
  %319 = icmp ugt i64 %316, %318
  %320 = select i1 %319, i64 %318, i64 %316, !prof !4
  %321 = icmp ult i64 %320, 1048576
  %322 = select i1 %321, i64 %320, i64 1048576, !prof !29
  %323 = trunc i64 %322 to i32
  %324 = sub i32 %317, %323
  store i32 %324, i32* %26, align 8
  %325 = icmp eq i64 %322, 0
  br i1 %325, label %326, label %333, !prof !4

326:                                              ; preds = %315
  %327 = load i32, i32* %4, align 4
  %328 = zext i32 %327 to i64
  %329 = icmp ult i64 %328, 1048576
  %330 = select i1 %329, i64 %328, i64 1048576
  %331 = load i8*, i8** %28, align 8
  %332 = shl nuw nsw i64 %330, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %331, i8 0, i64 %332, i1 false)
  br label %333

333:                                              ; preds = %326, %315
  %334 = load i32, i32* %4, align 4
  %335 = load i32, i32* %21, align 8
  %336 = icmp ult i32 %334, %335
  br i1 %336, label %395, label %30

337:                                              ; preds = %123
  %338 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %23, align 8
  %339 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 1
  %340 = load i32, i32* %339, align 4
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 2
  %343 = load i32, i32* %342, align 4
  %344 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 3
  %345 = load i32, i32* %344, align 4
  %346 = zext i32 %345 to i64
  %347 = icmp ult i64 %124, %341
  br i1 %347, label %348, label %350

348:                                              ; preds = %337
  %349 = trunc i64 %124 to i32
  br label %384

350:                                              ; preds = %337
  %351 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 0
  %352 = load i32, i32* %351, align 4
  %353 = zext i32 %352 to i64
  %354 = zext i32 %343 to i64
  %355 = add nuw nsw i64 %346, %354
  %356 = sub nsw i64 %124, %341
  %357 = lshr i64 %356, %355
  %358 = sub i64 %357, %355
  %359 = add i64 %358, %353
  %360 = and i64 %359, 31
  %361 = shl nsw i32 -1, %345
  %362 = xor i32 %361, -1
  %363 = trunc i64 %124 to i32
  %364 = and i32 %362, %363
  %365 = lshr i64 %124, %346
  %366 = shl nsw i64 -1, %360
  %367 = xor i64 %366, -1
  %368 = load i64, i64* %8, align 8
  %369 = and i64 %368, %367
  %370 = load i64, i64* %7, align 8
  %371 = sub i64 %370, %360
  store i64 %371, i64* %7, align 8
  %372 = lshr i64 %368, %360
  store i64 %372, i64* %8, align 8
  %373 = shl i32 1, %343
  %374 = sext i32 %373 to i64
  %375 = add nsw i32 %373, -1
  %376 = sext i32 %375 to i64
  %377 = and i64 %365, %376
  %378 = or i64 %377, %374
  %379 = shl i64 %378, %360
  %380 = or i64 %369, %379
  %381 = shl i64 %380, %346
  %382 = trunc i64 %381 to i32
  %383 = or i32 %364, %382
  br label %384

384:                                              ; preds = %348, %350
  %385 = phi i32 [ %349, %348 ], [ %383, %350 ]
  %386 = zext i32 %385 to i64
  %387 = load i32*, i32** %27, align 8
  %388 = icmp eq i32* %387, null
  br i1 %388, label %395, label %389

389:                                              ; preds = %384
  %390 = load i32, i32* %25, align 8
  %391 = add i32 %390, 1
  store i32 %391, i32* %25, align 8
  %392 = and i32 %390, 1048575
  %393 = zext i32 %392 to i64
  %394 = getelementptr inbounds i32, i32* %387, i64 %393
  store i32 %385, i32* %394, align 4
  br label %395

395:                                              ; preds = %333, %384, %389, %33
  %396 = phi i64 [ %41, %33 ], [ %386, %384 ], [ %386, %389 ], [ 0, %333 ]
  ret i64 %396
}

declare zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"*, %"class.jxl::BitReader"*) local_unnamed_addr #3

; Function Attrs: inaccessiblemem_or_argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #8

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inaccessiblemem_or_argmemonly nounwind }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 1, i32 2000}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!7 = distinct !{!7, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!10 = distinct !{!10, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!11 = !{i64 0, i64 65}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3jxl16DecodeLehmerCodeIjEEvPKjPjmPT_: argument 1"}
!14 = distinct !{!14, !"_ZN3jxl16DecodeLehmerCodeIjEEvPKjPjmPT_"}
!15 = !{!16, !17}
!16 = distinct !{!16, !14, !"_ZN3jxl16DecodeLehmerCodeIjEEvPKjPjmPT_: argument 0"}
!17 = distinct !{!17, !14, !"_ZN3jxl16DecodeLehmerCodeIjEEvPKjPjmPT_: argument 2"}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.isvectorized", i32 1}
!20 = distinct !{!20, !21, !19}
!21 = !{!"llvm.loop.unroll.runtime.disable"}
!22 = !{!16}
!23 = !{!13, !17}
!24 = !{!17}
!25 = !{!16, !13}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZN3jxl15SetDefaultOrderENS_10AcStrategyEPj: argument 0"}
!28 = distinct !{!28, !"_ZN3jxl15SetDefaultOrderENS_10AcStrategyEPj"}
!29 = !{!"branch_weights", i32 2000, i32 1}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE: argument 0"}
!32 = distinct !{!32, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE"}
!33 = !{!34, !31}
!34 = distinct !{!34, !35, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE: argument 0"}
!35 = distinct !{!35, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE"}
!36 = !{!37, !31}
!37 = distinct !{!37, !38, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE: argument 0"}
!38 = distinct !{!38, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 1"}
!41 = distinct !{!41, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm"}
!42 = !{!43, !37}
!43 = distinct !{!43, !41, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 0"}
!44 = !{!37}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE: argument 0"}
!47 = distinct !{!47, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE"}
!48 = !{!49, !46}
!49 = distinct !{!49, !50, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE: argument 0"}
!50 = distinct !{!50, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE"}
!51 = !{!52, !46}
!52 = distinct !{!52, !53, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE: argument 0"}
!53 = distinct !{!53, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 1"}
!56 = distinct !{!56, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm"}
!57 = !{!58, !52}
!58 = distinct !{!58, !56, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 0"}
!59 = !{!52}
