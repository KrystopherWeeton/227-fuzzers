; ModuleID = '../../third_party/opus/src/silk/NLSF_stabilize.c'
source_filename = "../../third_party/opus/src/silk/NLSF_stabilize.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_NLSF_stabilize(i16*, i16* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 1
  %5 = add nsw i32 %2, -1
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds i16, i16* %1, i64 %8
  br i1 %4, label %12, label %10

10:                                               ; preds = %3
  %11 = add nsw i64 %8, -1
  br label %342

12:                                               ; preds = %3
  %13 = zext i32 %2 to i64
  %14 = add nsw i64 %13, -1
  %15 = and i64 %14, 1
  %16 = icmp eq i32 %2, 2
  %17 = sub nsw i64 %14, %15
  %18 = icmp eq i64 %15, 0
  %19 = add nsw i64 %8, -1
  br label %20

20:                                               ; preds = %187, %12
  %21 = phi i32 [ %188, %187 ], [ 0, %12 ]
  %22 = load i16, i16* %0, align 2
  %23 = sext i16 %22 to i32
  %24 = load i16, i16* %1, align 2
  %25 = sext i16 %24 to i32
  %26 = sub nsw i32 %23, %25
  br i1 %16, label %308, label %190

27:                                               ; preds = %329
  %28 = icmp eq i32 %339, 0
  br i1 %28, label %186, label %29

29:                                               ; preds = %27
  %30 = icmp eq i32 %339, %2
  br i1 %30, label %184, label %226

31:                                               ; preds = %175, %228, %298, %226
  %32 = phi i32 [ 0, %226 ], [ %230, %228 ], [ %306, %298 ], [ %181, %175 ]
  %33 = sext i32 %339 to i64
  %34 = getelementptr inbounds i16, i16* %1, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = ashr i16 %35, 1
  %37 = sext i16 %36 to i32
  %38 = add nsw i32 %32, %37
  %39 = icmp slt i32 %339, %2
  br i1 %39, label %40, label %134

40:                                               ; preds = %31
  %41 = sext i16 %334 to i32
  %42 = sub nsw i32 32768, %41
  %43 = icmp sgt i64 %19, %33
  br i1 %43, label %44, label %134

44:                                               ; preds = %40
  %45 = xor i64 %33, -1
  %46 = add nsw i64 %45, %8
  %47 = icmp ult i64 %46, 8
  br i1 %47, label %48, label %51

48:                                               ; preds = %124, %44
  %49 = phi i64 [ %19, %44 ], [ %53, %124 ]
  %50 = phi i32 [ %42, %44 ], [ %132, %124 ]
  br label %166

51:                                               ; preds = %44
  %52 = and i64 %46, -8
  %53 = sub nsw i64 %19, %52
  %54 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %42, i32 0
  %55 = add nsw i64 %52, -8
  %56 = lshr exact i64 %55, 3
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 1
  %59 = icmp eq i64 %55, 0
  br i1 %59, label %101, label %60

60:                                               ; preds = %51
  %61 = sub nuw nsw i64 %57, %58
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %98, %62 ]
  %64 = phi <4 x i32> [ %54, %60 ], [ %96, %62 ]
  %65 = phi <4 x i32> [ zeroinitializer, %60 ], [ %97, %62 ]
  %66 = phi i64 [ %61, %60 ], [ %99, %62 ]
  %67 = sub i64 %19, %63
  %68 = getelementptr inbounds i16, i16* %1, i64 %67
  %69 = getelementptr inbounds i16, i16* %68, i64 -3
  %70 = bitcast i16* %69 to <4 x i16>*
  %71 = load <4 x i16>, <4 x i16>* %70, align 2
  %72 = shufflevector <4 x i16> %71, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %73 = getelementptr inbounds i16, i16* %68, i64 -4
  %74 = getelementptr inbounds i16, i16* %73, i64 -3
  %75 = bitcast i16* %74 to <4 x i16>*
  %76 = load <4 x i16>, <4 x i16>* %75, align 2
  %77 = shufflevector <4 x i16> %76, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %78 = sext <4 x i16> %72 to <4 x i32>
  %79 = sext <4 x i16> %77 to <4 x i32>
  %80 = sub nsw <4 x i32> %64, %78
  %81 = sub nsw <4 x i32> %65, %79
  %82 = or i64 %63, 8
  %83 = sub i64 %19, %82
  %84 = getelementptr inbounds i16, i16* %1, i64 %83
  %85 = getelementptr inbounds i16, i16* %84, i64 -3
  %86 = bitcast i16* %85 to <4 x i16>*
  %87 = load <4 x i16>, <4 x i16>* %86, align 2
  %88 = shufflevector <4 x i16> %87, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %89 = getelementptr inbounds i16, i16* %84, i64 -4
  %90 = getelementptr inbounds i16, i16* %89, i64 -3
  %91 = bitcast i16* %90 to <4 x i16>*
  %92 = load <4 x i16>, <4 x i16>* %91, align 2
  %93 = shufflevector <4 x i16> %92, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %94 = sext <4 x i16> %88 to <4 x i32>
  %95 = sext <4 x i16> %93 to <4 x i32>
  %96 = sub nsw <4 x i32> %80, %94
  %97 = sub nsw <4 x i32> %81, %95
  %98 = add i64 %63, 16
  %99 = add i64 %66, -2
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %62, !llvm.loop !2

101:                                              ; preds = %62, %51
  %102 = phi <4 x i32> [ undef, %51 ], [ %96, %62 ]
  %103 = phi <4 x i32> [ undef, %51 ], [ %97, %62 ]
  %104 = phi i64 [ 0, %51 ], [ %98, %62 ]
  %105 = phi <4 x i32> [ %54, %51 ], [ %96, %62 ]
  %106 = phi <4 x i32> [ zeroinitializer, %51 ], [ %97, %62 ]
  %107 = icmp eq i64 %58, 0
  br i1 %107, label %124, label %108

108:                                              ; preds = %101
  %109 = sub i64 %19, %104
  %110 = getelementptr inbounds i16, i16* %1, i64 %109
  %111 = getelementptr inbounds i16, i16* %110, i64 -4
  %112 = getelementptr inbounds i16, i16* %111, i64 -3
  %113 = bitcast i16* %112 to <4 x i16>*
  %114 = load <4 x i16>, <4 x i16>* %113, align 2
  %115 = shufflevector <4 x i16> %114, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %116 = sext <4 x i16> %115 to <4 x i32>
  %117 = sub nsw <4 x i32> %106, %116
  %118 = getelementptr inbounds i16, i16* %110, i64 -3
  %119 = bitcast i16* %118 to <4 x i16>*
  %120 = load <4 x i16>, <4 x i16>* %119, align 2
  %121 = shufflevector <4 x i16> %120, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %122 = sext <4 x i16> %121 to <4 x i32>
  %123 = sub nsw <4 x i32> %105, %122
  br label %124

124:                                              ; preds = %101, %108
  %125 = phi <4 x i32> [ %102, %101 ], [ %123, %108 ]
  %126 = phi <4 x i32> [ %103, %101 ], [ %117, %108 ]
  %127 = add <4 x i32> %126, %125
  %128 = shufflevector <4 x i32> %127, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %129 = add <4 x i32> %127, %128
  %130 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %131 = add <4 x i32> %129, %130
  %132 = extractelement <4 x i32> %131, i32 0
  %133 = icmp eq i64 %46, %52
  br i1 %133, label %134, label %48

134:                                              ; preds = %166, %40, %124, %31
  %135 = phi i32 [ 32768, %31 ], [ %42, %40 ], [ %132, %124 ], [ %172, %166 ]
  %136 = sub nsw i32 %135, %37
  %137 = icmp sgt i32 %38, %136
  %138 = add nsw i32 %339, -1
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i16, i16* %0, i64 %139
  %141 = load i16, i16* %140, align 2
  %142 = sext i16 %141 to i32
  %143 = getelementptr inbounds i16, i16* %0, i64 %33
  %144 = load i16, i16* %143, align 2
  %145 = sext i16 %144 to i32
  %146 = add nsw i32 %145, %142
  %147 = ashr i32 %146, 1
  %148 = and i32 %146, 1
  %149 = add nsw i32 %147, %148
  br i1 %137, label %155, label %150

150:                                              ; preds = %134
  %151 = icmp sgt i32 %149, %136
  br i1 %151, label %160, label %152

152:                                              ; preds = %150
  %153 = icmp slt i32 %149, %38
  %154 = select i1 %153, i32 %38, i32 %149
  br label %160

155:                                              ; preds = %134
  %156 = icmp sgt i32 %149, %38
  br i1 %156, label %160, label %157

157:                                              ; preds = %155
  %158 = icmp slt i32 %149, %136
  %159 = select i1 %158, i32 %136, i32 %149
  br label %160

160:                                              ; preds = %157, %155, %152, %150
  %161 = phi i32 [ %38, %155 ], [ %159, %157 ], [ %136, %150 ], [ %154, %152 ]
  %162 = trunc i32 %161 to i16
  %163 = sub i16 %162, %36
  store i16 %163, i16* %140, align 2
  %164 = load i16, i16* %34, align 2
  %165 = add i16 %163, %164
  store i16 %165, i16* %143, align 2
  br label %187

166:                                              ; preds = %48, %166
  %167 = phi i64 [ %173, %166 ], [ %49, %48 ]
  %168 = phi i32 [ %172, %166 ], [ %50, %48 ]
  %169 = getelementptr inbounds i16, i16* %1, i64 %167
  %170 = load i16, i16* %169, align 2
  %171 = sext i16 %170 to i32
  %172 = sub nsw i32 %168, %171
  %173 = add nsw i64 %167, -1
  %174 = icmp sgt i64 %173, %33
  br i1 %174, label %166, label %134, !llvm.loop !4

175:                                              ; preds = %235, %175
  %176 = phi i64 [ %182, %175 ], [ %236, %235 ]
  %177 = phi i32 [ %181, %175 ], [ %237, %235 ]
  %178 = getelementptr inbounds i16, i16* %1, i64 %176
  %179 = load i16, i16* %178, align 2
  %180 = sext i16 %179 to i32
  %181 = add nsw i32 %177, %180
  %182 = add nuw nsw i64 %176, 1
  %183 = icmp eq i64 %182, %229
  br i1 %183, label %31, label %175, !llvm.loop !6

184:                                              ; preds = %29
  %185 = sub i16 -32768, %334
  store i16 %185, i16* %7, align 2
  br label %187

186:                                              ; preds = %27
  store i16 %24, i16* %0, align 2
  br label %187

187:                                              ; preds = %186, %184, %160
  %188 = add nuw nsw i32 %21, 1
  %189 = icmp eq i32 %188, 20
  br i1 %189, label %604, label %20

190:                                              ; preds = %20, %190
  %191 = phi i16 [ %211, %190 ], [ %22, %20 ]
  %192 = phi i64 [ %223, %190 ], [ 1, %20 ]
  %193 = phi i32 [ %222, %190 ], [ %26, %20 ]
  %194 = phi i32 [ %221, %190 ], [ 0, %20 ]
  %195 = phi i64 [ %224, %190 ], [ %17, %20 ]
  %196 = getelementptr inbounds i16, i16* %0, i64 %192
  %197 = load i16, i16* %196, align 2
  %198 = sext i16 %197 to i32
  %199 = sext i16 %191 to i32
  %200 = getelementptr inbounds i16, i16* %1, i64 %192
  %201 = load i16, i16* %200, align 2
  %202 = sext i16 %201 to i32
  %203 = sub nsw i32 %198, %199
  %204 = sub nsw i32 %203, %202
  %205 = icmp slt i32 %204, %193
  %206 = trunc i64 %192 to i32
  %207 = select i1 %205, i32 %206, i32 %194
  %208 = select i1 %205, i32 %204, i32 %193
  %209 = add nuw nsw i64 %192, 1
  %210 = getelementptr inbounds i16, i16* %0, i64 %209
  %211 = load i16, i16* %210, align 2
  %212 = sext i16 %211 to i32
  %213 = sext i16 %197 to i32
  %214 = getelementptr inbounds i16, i16* %1, i64 %209
  %215 = load i16, i16* %214, align 2
  %216 = sext i16 %215 to i32
  %217 = sub nsw i32 %212, %213
  %218 = sub nsw i32 %217, %216
  %219 = icmp slt i32 %218, %208
  %220 = trunc i64 %209 to i32
  %221 = select i1 %219, i32 %220, i32 %207
  %222 = select i1 %219, i32 %218, i32 %208
  %223 = add nuw nsw i64 %192, 2
  %224 = add i64 %195, -2
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %308, label %190

226:                                              ; preds = %29
  %227 = icmp sgt i32 %339, 0
  br i1 %227, label %228, label %31

228:                                              ; preds = %226
  %229 = zext i32 %339 to i64
  %230 = sext i16 %24 to i32
  %231 = icmp eq i32 %339, 1
  br i1 %231, label %31, label %232

232:                                              ; preds = %228
  %233 = add nsw i64 %229, -1
  %234 = icmp ult i64 %233, 8
  br i1 %234, label %235, label %238

235:                                              ; preds = %298, %232
  %236 = phi i64 [ 1, %232 ], [ %240, %298 ]
  %237 = phi i32 [ %230, %232 ], [ %306, %298 ]
  br label %175

238:                                              ; preds = %232
  %239 = and i64 %233, -8
  %240 = or i64 %239, 1
  %241 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %230, i32 0
  %242 = add nsw i64 %239, -8
  %243 = lshr exact i64 %242, 3
  %244 = add nuw nsw i64 %243, 1
  %245 = and i64 %244, 1
  %246 = icmp eq i64 %242, 0
  br i1 %246, label %279, label %247

247:                                              ; preds = %238
  %248 = sub nuw nsw i64 %244, %245
  br label %249

249:                                              ; preds = %249, %247
  %250 = phi i64 [ 0, %247 ], [ %276, %249 ]
  %251 = phi <4 x i32> [ %241, %247 ], [ %274, %249 ]
  %252 = phi <4 x i32> [ zeroinitializer, %247 ], [ %275, %249 ]
  %253 = phi i64 [ %248, %247 ], [ %277, %249 ]
  %254 = or i64 %250, 1
  %255 = getelementptr inbounds i16, i16* %1, i64 %254
  %256 = bitcast i16* %255 to <4 x i16>*
  %257 = load <4 x i16>, <4 x i16>* %256, align 2
  %258 = getelementptr inbounds i16, i16* %255, i64 4
  %259 = bitcast i16* %258 to <4 x i16>*
  %260 = load <4 x i16>, <4 x i16>* %259, align 2
  %261 = sext <4 x i16> %257 to <4 x i32>
  %262 = sext <4 x i16> %260 to <4 x i32>
  %263 = add nsw <4 x i32> %251, %261
  %264 = add nsw <4 x i32> %252, %262
  %265 = or i64 %250, 9
  %266 = getelementptr inbounds i16, i16* %1, i64 %265
  %267 = bitcast i16* %266 to <4 x i16>*
  %268 = load <4 x i16>, <4 x i16>* %267, align 2
  %269 = getelementptr inbounds i16, i16* %266, i64 4
  %270 = bitcast i16* %269 to <4 x i16>*
  %271 = load <4 x i16>, <4 x i16>* %270, align 2
  %272 = sext <4 x i16> %268 to <4 x i32>
  %273 = sext <4 x i16> %271 to <4 x i32>
  %274 = add nsw <4 x i32> %263, %272
  %275 = add nsw <4 x i32> %264, %273
  %276 = add i64 %250, 16
  %277 = add i64 %253, -2
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %249, !llvm.loop !7

279:                                              ; preds = %249, %238
  %280 = phi <4 x i32> [ undef, %238 ], [ %274, %249 ]
  %281 = phi <4 x i32> [ undef, %238 ], [ %275, %249 ]
  %282 = phi i64 [ 0, %238 ], [ %276, %249 ]
  %283 = phi <4 x i32> [ %241, %238 ], [ %274, %249 ]
  %284 = phi <4 x i32> [ zeroinitializer, %238 ], [ %275, %249 ]
  %285 = icmp eq i64 %245, 0
  br i1 %285, label %298, label %286

286:                                              ; preds = %279
  %287 = or i64 %282, 1
  %288 = getelementptr inbounds i16, i16* %1, i64 %287
  %289 = getelementptr inbounds i16, i16* %288, i64 4
  %290 = bitcast i16* %289 to <4 x i16>*
  %291 = load <4 x i16>, <4 x i16>* %290, align 2
  %292 = sext <4 x i16> %291 to <4 x i32>
  %293 = add nsw <4 x i32> %284, %292
  %294 = bitcast i16* %288 to <4 x i16>*
  %295 = load <4 x i16>, <4 x i16>* %294, align 2
  %296 = sext <4 x i16> %295 to <4 x i32>
  %297 = add nsw <4 x i32> %283, %296
  br label %298

298:                                              ; preds = %279, %286
  %299 = phi <4 x i32> [ %280, %279 ], [ %297, %286 ]
  %300 = phi <4 x i32> [ %281, %279 ], [ %293, %286 ]
  %301 = add <4 x i32> %300, %299
  %302 = shufflevector <4 x i32> %301, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %303 = add <4 x i32> %301, %302
  %304 = shufflevector <4 x i32> %303, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %305 = add <4 x i32> %303, %304
  %306 = extractelement <4 x i32> %305, i32 0
  %307 = icmp eq i64 %233, %239
  br i1 %307, label %31, label %235

308:                                              ; preds = %190, %20
  %309 = phi i32 [ undef, %20 ], [ %221, %190 ]
  %310 = phi i32 [ undef, %20 ], [ %222, %190 ]
  %311 = phi i16 [ %22, %20 ], [ %211, %190 ]
  %312 = phi i64 [ 1, %20 ], [ %223, %190 ]
  %313 = phi i32 [ %26, %20 ], [ %222, %190 ]
  %314 = phi i32 [ 0, %20 ], [ %221, %190 ]
  br i1 %18, label %329, label %315

315:                                              ; preds = %308
  %316 = getelementptr inbounds i16, i16* %0, i64 %312
  %317 = load i16, i16* %316, align 2
  %318 = sext i16 %317 to i32
  %319 = sext i16 %311 to i32
  %320 = getelementptr inbounds i16, i16* %1, i64 %312
  %321 = load i16, i16* %320, align 2
  %322 = sext i16 %321 to i32
  %323 = sub nsw i32 %318, %319
  %324 = sub nsw i32 %323, %322
  %325 = icmp slt i32 %324, %313
  %326 = select i1 %325, i32 %324, i32 %313
  %327 = trunc i64 %312 to i32
  %328 = select i1 %325, i32 %327, i32 %314
  br label %329

329:                                              ; preds = %308, %315
  %330 = phi i32 [ %309, %308 ], [ %328, %315 ]
  %331 = phi i32 [ %310, %308 ], [ %326, %315 ]
  %332 = load i16, i16* %7, align 2
  %333 = sext i16 %332 to i32
  %334 = load i16, i16* %9, align 2
  %335 = sext i16 %334 to i32
  %336 = sub nsw i32 32768, %333
  %337 = sub nsw i32 %336, %335
  %338 = icmp slt i32 %337, %331
  %339 = select i1 %338, i32 %2, i32 %330
  %340 = select i1 %338, i32 %337, i32 %331
  %341 = icmp sgt i32 %340, -1
  br i1 %341, label %706, label %27

342:                                              ; preds = %10, %601
  %343 = phi i32 [ %602, %601 ], [ 0, %10 ]
  %344 = load i16, i16* %0, align 2
  %345 = sext i16 %344 to i32
  %346 = load i16, i16* %1, align 2
  %347 = sext i16 %346 to i32
  %348 = sub nsw i32 %345, %347
  %349 = load i16, i16* %7, align 2
  %350 = sext i16 %349 to i32
  %351 = load i16, i16* %9, align 2
  %352 = sext i16 %351 to i32
  %353 = sub nsw i32 32768, %350
  %354 = sub nsw i32 %353, %352
  %355 = icmp slt i32 %354, %348
  %356 = select i1 %355, i32 %2, i32 0
  %357 = select i1 %355, i32 %354, i32 %348
  %358 = icmp sgt i32 %357, -1
  br i1 %358, label %706, label %359

359:                                              ; preds = %342
  %360 = icmp eq i32 %356, 0
  br i1 %360, label %361, label %362

361:                                              ; preds = %359
  store i16 %346, i16* %0, align 2
  br label %601

362:                                              ; preds = %359
  %363 = icmp eq i32 %356, %2
  br i1 %363, label %446, label %364

364:                                              ; preds = %362
  %365 = icmp sgt i32 %356, 0
  br i1 %365, label %366, label %457

366:                                              ; preds = %364
  %367 = zext i32 %356 to i64
  %368 = sext i16 %346 to i32
  %369 = icmp eq i32 %356, 1
  br i1 %369, label %457, label %370

370:                                              ; preds = %366
  %371 = add nsw i64 %367, -1
  %372 = icmp ult i64 %371, 8
  br i1 %372, label %373, label %376

373:                                              ; preds = %436, %370
  %374 = phi i64 [ 1, %370 ], [ %378, %436 ]
  %375 = phi i32 [ %368, %370 ], [ %444, %436 ]
  br label %448

376:                                              ; preds = %370
  %377 = and i64 %371, -8
  %378 = or i64 %377, 1
  %379 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %368, i32 0
  %380 = add nsw i64 %377, -8
  %381 = lshr exact i64 %380, 3
  %382 = add nuw nsw i64 %381, 1
  %383 = and i64 %382, 1
  %384 = icmp eq i64 %380, 0
  br i1 %384, label %417, label %385

385:                                              ; preds = %376
  %386 = sub nuw nsw i64 %382, %383
  br label %387

387:                                              ; preds = %387, %385
  %388 = phi i64 [ 0, %385 ], [ %414, %387 ]
  %389 = phi <4 x i32> [ %379, %385 ], [ %412, %387 ]
  %390 = phi <4 x i32> [ zeroinitializer, %385 ], [ %413, %387 ]
  %391 = phi i64 [ %386, %385 ], [ %415, %387 ]
  %392 = or i64 %388, 1
  %393 = getelementptr inbounds i16, i16* %1, i64 %392
  %394 = bitcast i16* %393 to <4 x i16>*
  %395 = load <4 x i16>, <4 x i16>* %394, align 2
  %396 = getelementptr inbounds i16, i16* %393, i64 4
  %397 = bitcast i16* %396 to <4 x i16>*
  %398 = load <4 x i16>, <4 x i16>* %397, align 2
  %399 = sext <4 x i16> %395 to <4 x i32>
  %400 = sext <4 x i16> %398 to <4 x i32>
  %401 = add nsw <4 x i32> %389, %399
  %402 = add nsw <4 x i32> %390, %400
  %403 = or i64 %388, 9
  %404 = getelementptr inbounds i16, i16* %1, i64 %403
  %405 = bitcast i16* %404 to <4 x i16>*
  %406 = load <4 x i16>, <4 x i16>* %405, align 2
  %407 = getelementptr inbounds i16, i16* %404, i64 4
  %408 = bitcast i16* %407 to <4 x i16>*
  %409 = load <4 x i16>, <4 x i16>* %408, align 2
  %410 = sext <4 x i16> %406 to <4 x i32>
  %411 = sext <4 x i16> %409 to <4 x i32>
  %412 = add nsw <4 x i32> %401, %410
  %413 = add nsw <4 x i32> %402, %411
  %414 = add i64 %388, 16
  %415 = add i64 %391, -2
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %417, label %387, !llvm.loop !8

417:                                              ; preds = %387, %376
  %418 = phi <4 x i32> [ undef, %376 ], [ %412, %387 ]
  %419 = phi <4 x i32> [ undef, %376 ], [ %413, %387 ]
  %420 = phi i64 [ 0, %376 ], [ %414, %387 ]
  %421 = phi <4 x i32> [ %379, %376 ], [ %412, %387 ]
  %422 = phi <4 x i32> [ zeroinitializer, %376 ], [ %413, %387 ]
  %423 = icmp eq i64 %383, 0
  br i1 %423, label %436, label %424

424:                                              ; preds = %417
  %425 = or i64 %420, 1
  %426 = getelementptr inbounds i16, i16* %1, i64 %425
  %427 = getelementptr inbounds i16, i16* %426, i64 4
  %428 = bitcast i16* %427 to <4 x i16>*
  %429 = load <4 x i16>, <4 x i16>* %428, align 2
  %430 = sext <4 x i16> %429 to <4 x i32>
  %431 = add nsw <4 x i32> %422, %430
  %432 = bitcast i16* %426 to <4 x i16>*
  %433 = load <4 x i16>, <4 x i16>* %432, align 2
  %434 = sext <4 x i16> %433 to <4 x i32>
  %435 = add nsw <4 x i32> %421, %434
  br label %436

436:                                              ; preds = %417, %424
  %437 = phi <4 x i32> [ %418, %417 ], [ %435, %424 ]
  %438 = phi <4 x i32> [ %419, %417 ], [ %431, %424 ]
  %439 = add <4 x i32> %438, %437
  %440 = shufflevector <4 x i32> %439, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %441 = add <4 x i32> %439, %440
  %442 = shufflevector <4 x i32> %441, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %443 = add <4 x i32> %441, %442
  %444 = extractelement <4 x i32> %443, i32 0
  %445 = icmp eq i64 %371, %377
  br i1 %445, label %457, label %373

446:                                              ; preds = %362
  %447 = sub i16 -32768, %351
  store i16 %447, i16* %7, align 2
  br label %601

448:                                              ; preds = %373, %448
  %449 = phi i64 [ %455, %448 ], [ %374, %373 ]
  %450 = phi i32 [ %454, %448 ], [ %375, %373 ]
  %451 = getelementptr inbounds i16, i16* %1, i64 %449
  %452 = load i16, i16* %451, align 2
  %453 = sext i16 %452 to i32
  %454 = add nsw i32 %450, %453
  %455 = add nuw nsw i64 %449, 1
  %456 = icmp eq i64 %455, %367
  br i1 %456, label %457, label %448, !llvm.loop !9

457:                                              ; preds = %448, %366, %436, %364
  %458 = phi i32 [ 0, %364 ], [ %368, %366 ], [ %444, %436 ], [ %454, %448 ]
  %459 = sext i32 %356 to i64
  %460 = getelementptr inbounds i16, i16* %1, i64 %459
  %461 = load i16, i16* %460, align 2
  %462 = ashr i16 %461, 1
  %463 = sext i16 %462 to i32
  %464 = add nsw i32 %458, %463
  %465 = icmp slt i32 %356, %2
  br i1 %465, label %466, label %569

466:                                              ; preds = %457
  %467 = sext i16 %351 to i32
  %468 = sub nsw i32 32768, %467
  %469 = icmp sgt i64 %11, %459
  br i1 %469, label %470, label %569

470:                                              ; preds = %466
  %471 = xor i64 %459, -1
  %472 = add nsw i64 %471, %8
  %473 = icmp ult i64 %472, 8
  br i1 %473, label %557, label %474

474:                                              ; preds = %470
  %475 = and i64 %472, -8
  %476 = sub nsw i64 %11, %475
  %477 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %468, i32 0
  %478 = add nsw i64 %475, -8
  %479 = lshr exact i64 %478, 3
  %480 = add nuw nsw i64 %479, 1
  %481 = and i64 %480, 1
  %482 = icmp eq i64 %478, 0
  br i1 %482, label %524, label %483

483:                                              ; preds = %474
  %484 = sub nuw nsw i64 %480, %481
  br label %485

485:                                              ; preds = %485, %483
  %486 = phi i64 [ 0, %483 ], [ %521, %485 ]
  %487 = phi <4 x i32> [ %477, %483 ], [ %519, %485 ]
  %488 = phi <4 x i32> [ zeroinitializer, %483 ], [ %520, %485 ]
  %489 = phi i64 [ %484, %483 ], [ %522, %485 ]
  %490 = sub i64 %11, %486
  %491 = getelementptr inbounds i16, i16* %1, i64 %490
  %492 = getelementptr inbounds i16, i16* %491, i64 -3
  %493 = bitcast i16* %492 to <4 x i16>*
  %494 = load <4 x i16>, <4 x i16>* %493, align 2
  %495 = shufflevector <4 x i16> %494, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %496 = getelementptr inbounds i16, i16* %491, i64 -4
  %497 = getelementptr inbounds i16, i16* %496, i64 -3
  %498 = bitcast i16* %497 to <4 x i16>*
  %499 = load <4 x i16>, <4 x i16>* %498, align 2
  %500 = shufflevector <4 x i16> %499, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %501 = sext <4 x i16> %495 to <4 x i32>
  %502 = sext <4 x i16> %500 to <4 x i32>
  %503 = sub nsw <4 x i32> %487, %501
  %504 = sub nsw <4 x i32> %488, %502
  %505 = or i64 %486, 8
  %506 = sub i64 %11, %505
  %507 = getelementptr inbounds i16, i16* %1, i64 %506
  %508 = getelementptr inbounds i16, i16* %507, i64 -3
  %509 = bitcast i16* %508 to <4 x i16>*
  %510 = load <4 x i16>, <4 x i16>* %509, align 2
  %511 = shufflevector <4 x i16> %510, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %512 = getelementptr inbounds i16, i16* %507, i64 -4
  %513 = getelementptr inbounds i16, i16* %512, i64 -3
  %514 = bitcast i16* %513 to <4 x i16>*
  %515 = load <4 x i16>, <4 x i16>* %514, align 2
  %516 = shufflevector <4 x i16> %515, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %517 = sext <4 x i16> %511 to <4 x i32>
  %518 = sext <4 x i16> %516 to <4 x i32>
  %519 = sub nsw <4 x i32> %503, %517
  %520 = sub nsw <4 x i32> %504, %518
  %521 = add i64 %486, 16
  %522 = add i64 %489, -2
  %523 = icmp eq i64 %522, 0
  br i1 %523, label %524, label %485, !llvm.loop !10

524:                                              ; preds = %485, %474
  %525 = phi <4 x i32> [ undef, %474 ], [ %519, %485 ]
  %526 = phi <4 x i32> [ undef, %474 ], [ %520, %485 ]
  %527 = phi i64 [ 0, %474 ], [ %521, %485 ]
  %528 = phi <4 x i32> [ %477, %474 ], [ %519, %485 ]
  %529 = phi <4 x i32> [ zeroinitializer, %474 ], [ %520, %485 ]
  %530 = icmp eq i64 %481, 0
  br i1 %530, label %547, label %531

531:                                              ; preds = %524
  %532 = sub i64 %11, %527
  %533 = getelementptr inbounds i16, i16* %1, i64 %532
  %534 = getelementptr inbounds i16, i16* %533, i64 -4
  %535 = getelementptr inbounds i16, i16* %534, i64 -3
  %536 = bitcast i16* %535 to <4 x i16>*
  %537 = load <4 x i16>, <4 x i16>* %536, align 2
  %538 = shufflevector <4 x i16> %537, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %539 = sext <4 x i16> %538 to <4 x i32>
  %540 = sub nsw <4 x i32> %529, %539
  %541 = getelementptr inbounds i16, i16* %533, i64 -3
  %542 = bitcast i16* %541 to <4 x i16>*
  %543 = load <4 x i16>, <4 x i16>* %542, align 2
  %544 = shufflevector <4 x i16> %543, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %545 = sext <4 x i16> %544 to <4 x i32>
  %546 = sub nsw <4 x i32> %528, %545
  br label %547

547:                                              ; preds = %524, %531
  %548 = phi <4 x i32> [ %525, %524 ], [ %546, %531 ]
  %549 = phi <4 x i32> [ %526, %524 ], [ %540, %531 ]
  %550 = add <4 x i32> %549, %548
  %551 = shufflevector <4 x i32> %550, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %552 = add <4 x i32> %550, %551
  %553 = shufflevector <4 x i32> %552, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %554 = add <4 x i32> %552, %553
  %555 = extractelement <4 x i32> %554, i32 0
  %556 = icmp eq i64 %472, %475
  br i1 %556, label %569, label %557

557:                                              ; preds = %547, %470
  %558 = phi i64 [ %11, %470 ], [ %476, %547 ]
  %559 = phi i32 [ %468, %470 ], [ %555, %547 ]
  br label %560

560:                                              ; preds = %557, %560
  %561 = phi i64 [ %567, %560 ], [ %558, %557 ]
  %562 = phi i32 [ %566, %560 ], [ %559, %557 ]
  %563 = getelementptr inbounds i16, i16* %1, i64 %561
  %564 = load i16, i16* %563, align 2
  %565 = sext i16 %564 to i32
  %566 = sub nsw i32 %562, %565
  %567 = add nsw i64 %561, -1
  %568 = icmp sgt i64 %567, %459
  br i1 %568, label %560, label %569, !llvm.loop !11

569:                                              ; preds = %560, %466, %547, %457
  %570 = phi i32 [ 32768, %457 ], [ %468, %466 ], [ %555, %547 ], [ %566, %560 ]
  %571 = sub nsw i32 %570, %463
  %572 = icmp sgt i32 %464, %571
  %573 = add nsw i32 %356, -1
  %574 = sext i32 %573 to i64
  %575 = getelementptr inbounds i16, i16* %0, i64 %574
  %576 = load i16, i16* %575, align 2
  %577 = sext i16 %576 to i32
  %578 = getelementptr inbounds i16, i16* %0, i64 %459
  %579 = load i16, i16* %578, align 2
  %580 = sext i16 %579 to i32
  %581 = add nsw i32 %580, %577
  %582 = ashr i32 %581, 1
  %583 = and i32 %581, 1
  %584 = add nsw i32 %582, %583
  br i1 %572, label %585, label %590

585:                                              ; preds = %569
  %586 = icmp sgt i32 %584, %464
  br i1 %586, label %595, label %587

587:                                              ; preds = %585
  %588 = icmp slt i32 %584, %571
  %589 = select i1 %588, i32 %571, i32 %584
  br label %595

590:                                              ; preds = %569
  %591 = icmp sgt i32 %584, %571
  br i1 %591, label %595, label %592

592:                                              ; preds = %590
  %593 = icmp slt i32 %584, %464
  %594 = select i1 %593, i32 %464, i32 %584
  br label %595

595:                                              ; preds = %592, %590, %587, %585
  %596 = phi i32 [ %464, %585 ], [ %589, %587 ], [ %571, %590 ], [ %594, %592 ]
  %597 = trunc i32 %596 to i16
  %598 = sub i16 %597, %462
  store i16 %598, i16* %575, align 2
  %599 = load i16, i16* %460, align 2
  %600 = add i16 %598, %599
  store i16 %600, i16* %578, align 2
  br label %601

601:                                              ; preds = %361, %595, %446
  %602 = add nuw nsw i32 %343, 1
  %603 = icmp eq i32 %602, 20
  br i1 %603, label %604, label %342

604:                                              ; preds = %601, %187
  tail call void @silk_insertion_sort_increasing_all_values_int16(i16* %0, i32 %2) #2
  %605 = load i16, i16* %0, align 2
  %606 = load i16, i16* %1, align 2
  %607 = icmp sgt i16 %605, %606
  %608 = select i1 %607, i16 %605, i16 %606
  store i16 %608, i16* %0, align 2
  br i1 %4, label %609, label %675

609:                                              ; preds = %604
  %610 = zext i32 %2 to i64
  %611 = add nsw i64 %610, -1
  %612 = and i64 %611, 1
  %613 = icmp eq i32 %2, 2
  br i1 %613, label %655, label %614

614:                                              ; preds = %609
  %615 = sub nsw i64 %611, %612
  br label %616

616:                                              ; preds = %616, %614
  %617 = phi i16 [ %608, %614 ], [ %649, %616 ]
  %618 = phi i64 [ 1, %614 ], [ %650, %616 ]
  %619 = phi i64 [ %615, %614 ], [ %651, %616 ]
  %620 = getelementptr inbounds i16, i16* %0, i64 %618
  %621 = load i16, i16* %620, align 2
  %622 = sext i16 %621 to i32
  %623 = sext i16 %617 to i32
  %624 = getelementptr inbounds i16, i16* %1, i64 %618
  %625 = load i16, i16* %624, align 2
  %626 = sext i16 %625 to i32
  %627 = add nsw i32 %626, %623
  %628 = icmp sgt i32 %627, -32768
  %629 = select i1 %628, i32 %627, i32 -32768
  %630 = icmp slt i32 %629, 32767
  %631 = select i1 %630, i32 %629, i32 32767
  %632 = icmp slt i32 %631, %622
  %633 = select i1 %632, i32 %622, i32 %631
  %634 = trunc i32 %633 to i16
  store i16 %634, i16* %620, align 2
  %635 = add nuw nsw i64 %618, 1
  %636 = getelementptr inbounds i16, i16* %0, i64 %635
  %637 = load i16, i16* %636, align 2
  %638 = sext i16 %637 to i32
  %639 = getelementptr inbounds i16, i16* %1, i64 %635
  %640 = load i16, i16* %639, align 2
  %641 = sext i16 %640 to i32
  %642 = add nsw i32 %633, %641
  %643 = icmp sgt i32 %642, -32768
  %644 = select i1 %643, i32 %642, i32 -32768
  %645 = icmp slt i32 %644, 32767
  %646 = select i1 %645, i32 %644, i32 32767
  %647 = icmp slt i32 %646, %638
  %648 = select i1 %647, i32 %638, i32 %646
  %649 = trunc i32 %648 to i16
  store i16 %649, i16* %636, align 2
  %650 = add nuw nsw i64 %618, 2
  %651 = add i64 %619, -2
  %652 = icmp eq i64 %651, 0
  br i1 %652, label %653, label %616

653:                                              ; preds = %616
  %654 = trunc i32 %648 to i16
  br label %655

655:                                              ; preds = %653, %609
  %656 = phi i16 [ %608, %609 ], [ %654, %653 ]
  %657 = phi i64 [ 1, %609 ], [ %650, %653 ]
  %658 = icmp eq i64 %612, 0
  br i1 %658, label %675, label %659

659:                                              ; preds = %655
  %660 = getelementptr inbounds i16, i16* %0, i64 %657
  %661 = load i16, i16* %660, align 2
  %662 = sext i16 %661 to i32
  %663 = sext i16 %656 to i32
  %664 = getelementptr inbounds i16, i16* %1, i64 %657
  %665 = load i16, i16* %664, align 2
  %666 = sext i16 %665 to i32
  %667 = add nsw i32 %666, %663
  %668 = icmp sgt i32 %667, -32768
  %669 = select i1 %668, i32 %667, i32 -32768
  %670 = icmp slt i32 %669, 32767
  %671 = select i1 %670, i32 %669, i32 32767
  %672 = icmp slt i32 %671, %662
  %673 = select i1 %672, i32 %662, i32 %671
  %674 = trunc i32 %673 to i16
  store i16 %674, i16* %660, align 2
  br label %675

675:                                              ; preds = %659, %655, %604
  %676 = load i16, i16* %7, align 2
  %677 = sext i16 %676 to i32
  %678 = load i16, i16* %9, align 2
  %679 = sext i16 %678 to i32
  %680 = sub nsw i32 32768, %679
  %681 = icmp sgt i32 %680, %677
  %682 = select i1 %681, i32 %677, i32 %680
  %683 = trunc i32 %682 to i16
  store i16 %683, i16* %7, align 2
  %684 = add i32 %2, -2
  %685 = icmp sgt i32 %684, -1
  br i1 %685, label %686, label %706

686:                                              ; preds = %675
  %687 = sext i32 %684 to i64
  br label %688

688:                                              ; preds = %686, %688
  %689 = phi i64 [ %687, %686 ], [ %704, %688 ]
  %690 = getelementptr inbounds i16, i16* %0, i64 %689
  %691 = load i16, i16* %690, align 2
  %692 = sext i16 %691 to i32
  %693 = add nuw nsw i64 %689, 1
  %694 = getelementptr inbounds i16, i16* %0, i64 %693
  %695 = load i16, i16* %694, align 2
  %696 = sext i16 %695 to i32
  %697 = getelementptr inbounds i16, i16* %1, i64 %693
  %698 = load i16, i16* %697, align 2
  %699 = sext i16 %698 to i32
  %700 = sub nsw i32 %696, %699
  %701 = icmp sgt i32 %700, %692
  %702 = select i1 %701, i32 %692, i32 %700
  %703 = trunc i32 %702 to i16
  store i16 %703, i16* %690, align 2
  %704 = add nsw i64 %689, -1
  %705 = icmp sgt i64 %689, 0
  br i1 %705, label %688, label %706

706:                                              ; preds = %342, %329, %688, %675
  ret void
}

declare void @silk_insertion_sort_increasing_all_values_int16(i16*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !5, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !5, !3}
