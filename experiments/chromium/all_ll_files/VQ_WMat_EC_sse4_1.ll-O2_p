; ModuleID = '../../third_party/opus/src/silk/x86/VQ_WMat_EC_sse4_1.c'
source_filename = "../../third_party/opus/src/silk/x86/VQ_WMat_EC_sse4_1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @silk_VQ_WMat_EC_sse4_1(i8* nocapture, i32* nocapture, i32* nocapture, i16* nocapture readonly, i32* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  store i32 2147483647, i32* %1, align 4
  %12 = icmp sgt i32 %10, 0
  br i1 %12, label %13, label %195

13:                                               ; preds = %11
  %14 = getelementptr inbounds i16, i16* %3, i64 1
  %15 = bitcast i16* %14 to i64*
  %16 = shl i32 %8, 16
  %17 = ashr exact i32 %16, 16
  %18 = getelementptr inbounds i32, i32* %4, i64 1
  %19 = bitcast i32* %18 to <2 x i64>*
  %20 = getelementptr inbounds i32, i32* %4, i64 7
  %21 = getelementptr inbounds i32, i32* %4, i64 8
  %22 = getelementptr inbounds i32, i32* %4, i64 9
  %23 = getelementptr inbounds i32, i32* %4, i64 6
  %24 = getelementptr inbounds i32, i32* %4, i64 13
  %25 = getelementptr inbounds i32, i32* %4, i64 14
  %26 = getelementptr inbounds i32, i32* %4, i64 12
  %27 = getelementptr inbounds i32, i32* %4, i64 19
  %28 = getelementptr inbounds i32, i32* %4, i64 18
  %29 = getelementptr inbounds i32, i32* %4, i64 24
  %30 = zext i32 %10 to i64
  br label %31

31:                                               ; preds = %191, %13
  %32 = phi i64 [ 0, %13 ], [ %193, %191 ]
  %33 = phi i8* [ %5, %13 ], [ %192, %191 ]
  %34 = getelementptr inbounds i8, i8* %6, i64 %32
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = load i16, i16* %3, align 2
  %38 = load i8, i8* %33, align 1
  %39 = sext i8 %38 to i16
  %40 = shl nsw i16 %39, 7
  %41 = sub i16 %37, %40
  %42 = load i64, i64* %15, align 1
  %43 = insertelement <2 x i64> undef, i64 %42, i32 0
  %44 = bitcast <2 x i64> %43 to <8 x i16>
  %45 = shufflevector <8 x i16> %44, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %46 = sext <4 x i16> %45 to <4 x i32>
  %47 = getelementptr inbounds i8, i8* %33, i64 1
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = insertelement <4 x i32> undef, i32 %49, i32 0
  %51 = bitcast <4 x i32> %50 to <16 x i8>
  %52 = shufflevector <16 x i8> %51, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %53 = sext <4 x i8> %52 to <4 x i32>
  %54 = shl nsw <4 x i32> %53, <i32 7, i32 7, i32 7, i32 7>
  %55 = sub nsw <4 x i32> %46, %54
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = bitcast <4 x i32> %55 to <8 x i16>
  %58 = extractelement <8 x i16> %57, i64 0
  %59 = extractelement <8 x i16> %57, i64 2
  %60 = extractelement <8 x i16> %57, i64 4
  %61 = extractelement <8 x i16> %57, i64 6
  %62 = getelementptr inbounds i8, i8* %7, i64 %32
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = mul nsw i32 %17, %64
  %66 = sub nsw i32 %36, %9
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  %69 = shl i32 %68, 10
  %70 = add nsw i32 %65, %69
  %71 = load <2 x i64>, <2 x i64>* %19, align 1
  %72 = shl <2 x i64> %71, <i64 32, i64 32>
  %73 = ashr exact <2 x i64> %72, <i64 32, i64 32>
  %74 = shl <2 x i64> %56, <i64 32, i64 32>
  %75 = ashr exact <2 x i64> %74, <i64 32, i64 32>
  %76 = mul nsw <2 x i64> %75, %73
  %77 = bitcast <2 x i64> %76 to <16 x i8>
  %78 = shufflevector <16 x i8> %77, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %79 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %80 = bitcast <4 x i32> %79 to <2 x i64>
  %81 = bitcast <2 x i64> %71 to <4 x i32>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %83 = bitcast <4 x i32> %82 to <2 x i64>
  %84 = shl <2 x i64> %83, <i64 32, i64 32>
  %85 = ashr exact <2 x i64> %84, <i64 32, i64 32>
  %86 = shl <2 x i64> %80, <i64 32, i64 32>
  %87 = ashr exact <2 x i64> %86, <i64 32, i64 32>
  %88 = mul nsw <2 x i64> %87, %85
  %89 = bitcast <2 x i64> %88 to <16 x i8>
  %90 = shufflevector <16 x i8> %89, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %91 = bitcast <16 x i8> %78 to <4 x i32>
  %92 = bitcast <16 x i8> %90 to <4 x i32>
  %93 = add <4 x i32> %92, %91
  %94 = shl <4 x i32> %93, <i32 1, i32 1, i32 1, i32 1>
  %95 = shufflevector <4 x i32> %94, <4 x i32> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %96 = add <4 x i32> %95, %94
  %97 = extractelement <4 x i32> %96, i32 0
  %98 = load i32, i32* %4, align 4
  %99 = sext i32 %98 to i64
  %100 = sext i16 %41 to i64
  %101 = mul nsw i64 %99, %100
  %102 = lshr i64 %101, 16
  %103 = trunc i64 %102 to i32
  %104 = add i32 %97, %103
  %105 = sext i32 %104 to i64
  %106 = mul nsw i64 %105, %100
  %107 = lshr i64 %106, 16
  %108 = trunc i64 %107 to i32
  %109 = load i32, i32* %20, align 4
  %110 = sext i32 %109 to i64
  %111 = sext i16 %59 to i64
  %112 = mul nsw i64 %111, %110
  %113 = lshr i64 %112, 16
  %114 = load i32, i32* %21, align 4
  %115 = sext i32 %114 to i64
  %116 = sext i16 %60 to i64
  %117 = mul nsw i64 %116, %115
  %118 = lshr i64 %117, 16
  %119 = add nuw nsw i64 %113, %118
  %120 = load i32, i32* %22, align 4
  %121 = sext i32 %120 to i64
  %122 = sext i16 %61 to i64
  %123 = mul nsw i64 %122, %121
  %124 = lshr i64 %123, 16
  %125 = add nuw nsw i64 %119, %124
  %126 = trunc i64 %125 to i32
  %127 = shl i32 %126, 1
  %128 = load i32, i32* %23, align 4
  %129 = sext i32 %128 to i64
  %130 = sext i16 %58 to i64
  %131 = mul nsw i64 %130, %129
  %132 = lshr i64 %131, 16
  %133 = trunc i64 %132 to i32
  %134 = add i32 %127, %133
  %135 = sext i32 %134 to i64
  %136 = mul nsw i64 %135, %130
  %137 = lshr i64 %136, 16
  %138 = trunc i64 %137 to i32
  %139 = load i32, i32* %24, align 4
  %140 = sext i32 %139 to i64
  %141 = mul nsw i64 %140, %116
  %142 = lshr i64 %141, 16
  %143 = load i32, i32* %25, align 4
  %144 = sext i32 %143 to i64
  %145 = mul nsw i64 %144, %122
  %146 = lshr i64 %145, 16
  %147 = add nuw nsw i64 %146, %142
  %148 = trunc i64 %147 to i32
  %149 = shl i32 %148, 1
  %150 = load i32, i32* %26, align 4
  %151 = sext i32 %150 to i64
  %152 = mul nsw i64 %151, %111
  %153 = lshr i64 %152, 16
  %154 = trunc i64 %153 to i32
  %155 = add i32 %149, %154
  %156 = sext i32 %155 to i64
  %157 = mul nsw i64 %156, %111
  %158 = lshr i64 %157, 16
  %159 = trunc i64 %158 to i32
  %160 = load i32, i32* %27, align 4
  %161 = sext i32 %160 to i64
  %162 = mul nsw i64 %161, %122
  %163 = lshr i64 %162, 15
  %164 = and i64 %163, 4294967294
  %165 = load i32, i32* %28, align 4
  %166 = sext i32 %165 to i64
  %167 = mul nsw i64 %166, %116
  %168 = lshr i64 %167, 16
  %169 = add nuw nsw i64 %164, %168
  %170 = shl i64 %169, 32
  %171 = ashr exact i64 %170, 32
  %172 = mul nsw i64 %171, %116
  %173 = lshr i64 %172, 16
  %174 = trunc i64 %173 to i32
  %175 = load i32, i32* %29, align 4
  %176 = sext i32 %175 to i64
  %177 = mul nsw i64 %176, %122
  %178 = ashr i64 %177, 16
  %179 = mul nsw i64 %178, %122
  %180 = lshr i64 %179, 16
  %181 = trunc i64 %180 to i32
  %182 = add i32 %70, %181
  %183 = add i32 %182, %138
  %184 = add i32 %183, %159
  %185 = add i32 %184, %174
  %186 = add i32 %185, %108
  %187 = load i32, i32* %1, align 4
  %188 = icmp slt i32 %186, %187
  br i1 %188, label %189, label %191

189:                                              ; preds = %31
  store i32 %186, i32* %1, align 4
  %190 = trunc i64 %32 to i8
  store i8 %190, i8* %0, align 1
  store i32 %36, i32* %2, align 4
  br label %191

191:                                              ; preds = %189, %31
  %192 = getelementptr inbounds i8, i8* %33, i64 5
  %193 = add nuw nsw i64 %32, 1
  %194 = icmp eq i64 %193, %30
  br i1 %194, label %195, label %31

195:                                              ; preds = %191, %11
  ret void
}

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
