; ModuleID = '../../third_party/abseil-cpp/absl/debugging/internal/address_is_readable.cc'
source_filename = "../../third_party/abseil-cpp/absl/debugging/internal/address_is_readable.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }

@_ZN4absl18debugging_internalL11pid_and_fdsE = internal global %"struct.std::__1::atomic" zeroinitializer, align 8
@.str = private unnamed_addr constant [76 x i8] c"../../third_party/abseil-cpp/absl/debugging/internal/address_is_readable.cc\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"Failed to create pipe, errno=%d\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"Check %s failed: %s\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"(read_fd >> 24) == 0 && (write_fd >> 24) == 0\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"fd out of range\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl18debugging_internal17AddressIsReadableEPKv(i8*) local_unnamed_addr #0 {
  %2 = alloca [2 x i32], align 4
  %3 = alloca i8, align 1
  %4 = tail call i32* @__errno_location() #6
  %5 = load i32, i32* %4, align 4
  %6 = tail call i32 @getpid() #7
  %7 = and i32 %6, 65535
  %8 = bitcast [2 x i32]* %2 to i8*
  %9 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1
  %11 = zext i32 %6 to i64
  %12 = shl i64 %11, 48
  br label %13

13:                                               ; preds = %86, %1
  %14 = load atomic i64, i64* getelementptr inbounds (%"struct.std::__1::atomic", %"struct.std::__1::atomic"* @_ZN4absl18debugging_internalL11pid_and_fdsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  %15 = lshr i64 %14, 48
  %16 = trunc i64 %15 to i32
  %17 = icmp eq i32 %7, %16
  br i1 %17, label %55, label %18

18:                                               ; preds = %13, %50
  %19 = phi i64 [ %51, %50 ], [ %14, %13 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #7
  store i32 -1431655766, i32* %9, align 4
  store i32 -1431655766, i32* %10, align 4
  %20 = call i32 @pipe(i32* nonnull %9) #7
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  %23 = load i32, i32* %4, align 4
  call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i64 0, i64 53), i32 96, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i32 %23) #7
  br label %24

24:                                               ; preds = %18, %22
  %25 = load i32, i32* %9, align 4
  %26 = call i32 (i32, i32, ...) @fcntl(i32 %25, i32 2, i32 1) #7
  %27 = load i32, i32* %10, align 4
  %28 = call i32 (i32, i32, ...) @fcntl(i32 %27, i32 2, i32 1) #7
  %29 = load i32, i32* %9, align 4
  %30 = sext i32 %29 to i64
  %31 = load i32, i32* %10, align 4
  %32 = or i32 %31, %29
  %33 = icmp ugt i32 %32, 16777215
  br i1 %33, label %34, label %35, !prof !2

34:                                               ; preds = %24
  call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i64 0, i64 53), i32 54, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0)) #7
  br label %35

35:                                               ; preds = %24, %34
  %36 = shl nsw i64 %30, 24
  %37 = and i64 %36, 281474959933440
  %38 = or i64 %37, %12
  %39 = and i32 %31, 16777215
  %40 = zext i32 %39 to i64
  %41 = or i64 %38, %40
  %42 = cmpxchg i64* getelementptr inbounds (%"struct.std::__1::atomic", %"struct.std::__1::atomic"* @_ZN4absl18debugging_internalL11pid_and_fdsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0), i64 %19, i64 %41 release monotonic
  %43 = extractvalue { i64, i1 } %42, 1
  br i1 %43, label %50, label %44

44:                                               ; preds = %35
  %45 = load i32, i32* %9, align 4
  %46 = call i32 @close(i32 %45) #7
  %47 = load i32, i32* %10, align 4
  %48 = call i32 @close(i32 %47) #7
  %49 = load atomic i64, i64* getelementptr inbounds (%"struct.std::__1::atomic", %"struct.std::__1::atomic"* @_ZN4absl18debugging_internalL11pid_and_fdsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  br label %50

50:                                               ; preds = %35, %44
  %51 = phi i64 [ %49, %44 ], [ %41, %35 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #7
  %52 = lshr i64 %51, 48
  %53 = trunc i64 %52 to i32
  %54 = icmp eq i32 %7, %53
  br i1 %54, label %55, label %18

55:                                               ; preds = %50, %13
  %56 = phi i64 [ %14, %13 ], [ %51, %50 ]
  %57 = lshr i64 %56, 24
  %58 = trunc i64 %57 to i32
  %59 = and i32 %58, 16777215
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 16777215
  store i32 0, i32* %4, align 4
  br label %62

62:                                               ; preds = %66, %55
  %63 = call i64 (i64, ...) @syscall(i64 1, i32 %61, i8* %0, i32 1) #7
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, -1
  br i1 %65, label %66, label %69

66:                                               ; preds = %62
  %67 = load i32, i32* %4, align 4
  %68 = icmp eq i32 %67, 4
  br i1 %68, label %62, label %82

69:                                               ; preds = %62
  %70 = trunc i64 %63 to i32
  %71 = icmp eq i32 %70, 1
  br i1 %71, label %72, label %80

72:                                               ; preds = %69
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #7
  store i8 -86, i8* %3, align 1
  br label %73

73:                                               ; preds = %76, %72
  %74 = call i64 @read(i32 %59, i8* nonnull %3, i64 1) #7
  %75 = icmp eq i64 %74, -1
  br i1 %75, label %76, label %79

76:                                               ; preds = %73
  %77 = load i32, i32* %4, align 4
  %78 = icmp eq i32 %77, 4
  br i1 %78, label %73, label %79

79:                                               ; preds = %73, %76
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #7
  br label %80

80:                                               ; preds = %69, %79
  %81 = load i32, i32* %4, align 4
  br label %82

82:                                               ; preds = %66, %80
  %83 = phi i32 [ %81, %80 ], [ %67, %66 ]
  %84 = phi i1 [ %71, %80 ], [ false, %66 ]
  %85 = icmp eq i32 %83, 9
  br i1 %85, label %86, label %90

86:                                               ; preds = %82
  %87 = cmpxchg i64* getelementptr inbounds (%"struct.std::__1::atomic", %"struct.std::__1::atomic"* @_ZN4absl18debugging_internalL11pid_and_fdsE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0), i64 %56, i64 0 release monotonic
  %88 = load i32, i32* %4, align 4
  %89 = icmp eq i32 %88, 9
  br i1 %89, label %13, label %90

90:                                               ; preds = %82, %86
  store i32 %5, i32* %4, align 4
  ret i1 %84
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @getpid() local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pipe(i32*) local_unnamed_addr #2

declare void @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32, i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr #3

declare i32 @close(i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare i64 @syscall(i64, ...) local_unnamed_addr #2

; Function Attrs: nofree
declare i64 @read(i32, i8* nocapture, i64) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
