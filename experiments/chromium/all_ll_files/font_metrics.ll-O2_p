; ModuleID = '../../third_party/blink/renderer/platform/fonts/font_metrics.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/font_metrics.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::FontPlatformData" = type <{ %class.sk_sp, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr, i8, [7 x i8] }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type opaque
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%struct.SkFontMetrics = type { i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }

@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink11FontMetricsEEEPKcv = private unnamed_addr constant [66 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::FontMetrics]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11FontMetrics22AscentDescentWithHacksERfS1_RjS2_RKNS_16FontPlatformDataERK6SkFontbN4absl8optionalIfEESB_(float* nocapture dereferenceable(4), float* nocapture dereferenceable(4), i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4), %"class.blink::FontPlatformData"* nocapture readonly dereferenceable(72), %class.SkFont* dereferenceable(24), i1 zeroext, i64, i64) local_unnamed_addr #0 align 2 {
  %10 = alloca %struct.SkFontMetrics, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = trunc i64 %7 to i8
  %14 = trunc i64 %8 to i8
  %15 = lshr i64 %8, 32
  %16 = trunc i64 %15 to i32
  %17 = bitcast i32 %16 to float
  %18 = getelementptr inbounds %class.SkFont, %class.SkFont* %5, i64 0, i32 0, i32 0
  %19 = load %class.SkTypeface*, %class.SkTypeface** %18, align 8
  %20 = bitcast %struct.SkFontMetrics* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %20) #4
  %21 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %10, i64 0, i32 0
  store i32 -1431655766, i32* %21, align 4
  %22 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %10, i64 0, i32 1
  %23 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %10, i64 0, i32 2
  %24 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %10, i64 0, i32 3
  %25 = bitcast float* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %25, i8 -1, i64 60, i1 false)
  %26 = call float @_ZNK6SkFont10getMetricsEP13SkFontMetrics(%class.SkFont* %5, %struct.SkFontMetrics* nonnull %10) #4
  %27 = icmp eq i8 %13, 0
  br i1 %27, label %36, label %28

28:                                               ; preds = %9
  %29 = lshr i64 %7, 32
  %30 = trunc i64 %29 to i32
  %31 = bitcast i32 %30 to float
  %32 = getelementptr inbounds %"class.blink::FontPlatformData", %"class.blink::FontPlatformData"* %4, i64 0, i32 2
  %33 = load float, float* %32, align 8
  %34 = fmul float %33, %31
  %35 = fsub float -0.000000e+00, %34
  store float %35, float* %23, align 4
  br label %36

36:                                               ; preds = %9, %28
  %37 = icmp eq i8 %14, 0
  %38 = getelementptr inbounds %"class.blink::FontPlatformData", %"class.blink::FontPlatformData"* %4, i64 0, i32 2
  %39 = load float, float* %38, align 8
  br i1 %37, label %42, label %40

40:                                               ; preds = %36
  %41 = fmul float %39, %17
  store float %41, float* %24, align 4
  br label %42

42:                                               ; preds = %36, %40
  %43 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %43) #4
  store i32 0, i32* %11, align 4
  %44 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %44) #4
  store i32 0, i32* %12, align 4
  %45 = fpext float %39 to double
  %46 = fadd double %45, 5.000000e-01
  %47 = fptosi double %46 to i32
  %48 = or i64 %8, %7
  %49 = trunc i64 %48 to i8
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %81

51:                                               ; preds = %42
  %52 = getelementptr inbounds %class.SkFont, %class.SkFont* %5, i64 0, i32 4
  %53 = load i8, i8* %52, align 4
  %54 = and i8 %53, 1
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %81

56:                                               ; preds = %51
  %57 = getelementptr inbounds %class.SkFont, %class.SkFont* %5, i64 0, i32 6
  %58 = load i8, i8* %57, align 2
  %59 = and i8 %58, -2
  %60 = icmp eq i8 %59, 2
  br i1 %60, label %61, label %81

61:                                               ; preds = %56
  %62 = call i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface* %19, i32 1447316824) #4
  %63 = add i64 %62, -1
  %64 = icmp ult i64 %63, 1048575
  br i1 %64, label %65, label %81

65:                                               ; preds = %61
  %66 = call i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64 %62, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink11FontMetricsEEEPKcv, i64 0, i64 0)) #4
  %67 = icmp eq i8* %66, null
  br i1 %67, label %80, label %68

68:                                               ; preds = %65
  %69 = call i64 @_ZNK10SkTypeface12getTableDataEjmmPv(%class.SkTypeface* %19, i32 1447316824, i64 0, i64 %62, i8* nonnull %66) #4
  %70 = icmp eq i64 %69, %62
  br i1 %70, label %71, label %79

71:                                               ; preds = %68
  %72 = call zeroext i1 @_ZN5blink9ParseVDMXEPiS0_PKhmj(i32* nonnull %11, i32* nonnull %12, i8* nonnull %66, i64 %62, i32 %47) #4
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %66) #4
  br i1 %72, label %73, label %81

73:                                               ; preds = %71
  %74 = load i32, i32* %11, align 4
  %75 = sitofp i32 %74 to float
  store float %75, float* %0, align 4
  %76 = load i32, i32* %12, align 4
  %77 = sub nsw i32 0, %76
  %78 = sitofp i32 %77 to float
  store float %78, float* %1, align 4
  br label %128

79:                                               ; preds = %68
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %66) #4
  br label %81

80:                                               ; preds = %65
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* null) #4
  br label %81

81:                                               ; preds = %51, %42, %56, %80, %79, %61, %71
  %82 = load float, float* %23, align 4
  br i1 %6, label %85, label %83

83:                                               ; preds = %81
  %84 = load float, float* %24, align 4
  br label %100

85:                                               ; preds = %81
  %86 = fcmp ogt float %82, -3.000000e+00
  br i1 %86, label %87, label %90

87:                                               ; preds = %85
  %88 = bitcast float* %24 to i32*
  %89 = load i32, i32* %88, align 4
  br label %96

90:                                               ; preds = %85
  %91 = load float, float* %24, align 4
  %92 = fsub float %91, %82
  %93 = fcmp olt float %92, 2.000000e+00
  br i1 %93, label %94, label %100

94:                                               ; preds = %90
  %95 = bitcast float %91 to i32
  br label %96

96:                                               ; preds = %94, %87
  %97 = phi i32 [ %89, %87 ], [ %95, %94 ]
  %98 = fsub float -0.000000e+00, %82
  store float %98, float* %0, align 4
  %99 = bitcast float* %1 to i32*
  store i32 %97, i32* %99, align 4
  br label %128

100:                                              ; preds = %83, %90
  %101 = phi float [ %84, %83 ], [ %91, %90 ]
  %102 = fsub float 5.000000e-01, %82
  %103 = call float @llvm.floor.f32(float %102)
  store float %103, float* %0, align 4
  %104 = fadd float %101, 5.000000e-01
  %105 = call float @llvm.floor.f32(float %104)
  store float %105, float* %1, align 4
  %106 = load float, float* %0, align 4
  %107 = fsub float -0.000000e+00, %82
  %108 = fcmp olt float %106, %107
  br i1 %108, label %109, label %111

109:                                              ; preds = %100
  store i32 1, i32* %2, align 4
  %110 = load float, float* %1, align 4
  br label %111

111:                                              ; preds = %109, %100
  %112 = phi float [ %110, %109 ], [ %105, %100 ]
  %113 = fcmp olt float %112, %101
  br i1 %113, label %114, label %128

114:                                              ; preds = %111
  store i32 1, i32* %3, align 4
  %115 = getelementptr inbounds %"class.blink::FontPlatformData", %"class.blink::FontPlatformData"* %4, i64 0, i32 8, i32 6
  %116 = load i8, i8* %115, align 1
  %117 = icmp eq i8 %116, 0
  %118 = load float, float* %0, align 4
  %119 = fcmp ult float %118, 1.000000e+00
  %120 = or i1 %117, %119
  br i1 %120, label %128, label %121

121:                                              ; preds = %114
  %122 = load float, float* %1, align 4
  %123 = fadd float %122, 1.000000e+00
  store float %123, float* %1, align 4
  %124 = load float, float* %0, align 4
  %125 = fadd float %124, -1.000000e+00
  store float %125, float* %0, align 4
  store i32 0, i32* %3, align 4
  %126 = load i32, i32* %2, align 4
  %127 = add i32 %126, 1
  store i32 %127, i32* %2, align 4
  br label %128

128:                                              ; preds = %114, %96, %121, %111, %73
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %44) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %43) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %20) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare float @_ZNK6SkFont10getMetricsEP13SkFontMetrics(%class.SkFont*, %struct.SkFontMetrics*) local_unnamed_addr #2

declare i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface*, i32) local_unnamed_addr #2

declare i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare i64 @_ZNK10SkTypeface12getTableDataEjmmPv(%class.SkTypeface*, i32, i64, i64, i8*) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink9ParseVDMXEPiS0_PKhmj(i32*, i32*, i8*, i64, i32) local_unnamed_addr #2

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
