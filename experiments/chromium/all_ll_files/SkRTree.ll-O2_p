; ModuleID = '../../third_party/skia/src/core/SkRTree.cpp'
source_filename = "../../third_party/skia/src/core/SkRTree.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkRTree = type { %class.SkBBoxHierarchy.base, i32, %"struct.SkRTree::Branch", %"class.std::__1::vector" }
%class.SkBBoxHierarchy.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.SkRTree::Branch" = type { %union.anon, %struct.SkRect }
%union.anon = type { %"struct.SkRTree::Node"* }
%"struct.SkRTree::Node" = type { i16, i16, [11 x %"struct.SkRTree::Branch"] }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.SkRTree::Node"*, %"struct.SkRTree::Node"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkRTree::Node"* }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %"struct.SkRTree::Branch"*, %"struct.SkRTree::Branch"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.SkRTree::Branch"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { i32*, i32*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i32* }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkBBoxHierarchy = type { %class.SkRefCnt.base, [4 x i8] }
%"struct.SkBBoxHierarchy::Metadata" = type { i8 }

$_ZN7SkRTreeD2Ev = comdat any

$_ZN7SkRTreeD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNSt3__16vectorIN7SkRTree6BranchENS_9allocatorIS2_EEE8__appendEm = comdat any

@_ZTV7SkRTree = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRTree*)* @_ZN7SkRTreeD2Ev to i8*), i8* bitcast (void (%class.SkRTree*)* @_ZN7SkRTreeD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.SkRTree*, %struct.SkRect*, i32)* @_ZN7SkRTree6insertEPK6SkRecti to i8*), i8* bitcast (void (%class.SkBBoxHierarchy*, %struct.SkRect*, %"struct.SkBBoxHierarchy::Metadata"*, i32)* @_ZN15SkBBoxHierarchy6insertEPK6SkRectPKNS_8MetadataEi to i8*), i8* bitcast (void (%class.SkRTree*, %struct.SkRect*, %"class.std::__1::vector.9"*)* @_ZNK7SkRTree6searchERK6SkRectPNSt3__16vectorIiNS3_9allocatorIiEEEE to i8*), i8* bitcast (i64 (%class.SkRTree*)* @_ZNK7SkRTree9bytesUsedEv to i8*)] }, align 8

@_ZN7SkRTreeC1Ev = hidden unnamed_addr alias void (%class.SkRTree*), void (%class.SkRTree*)* @_ZN7SkRTreeC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkRTreeC2Ev(%class.SkRTree* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %2, align 4
  %3 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV7SkRTree, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 1
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3
  %6 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkRTree6insertEPK6SkRecti(%class.SkRTree*, %struct.SkRect* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector.2", align 8
  %5 = alloca %"struct.SkRTree::Branch", align 8
  %6 = bitcast %"class.std::__1::vector.2"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %4, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %4, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #10
  %10 = sext i32 %2 to i64
  %11 = bitcast %"struct.SkRTree::Branch"** %9 to i64*
  %12 = bitcast %"class.std::__1::vector.2"* %4 to i64*
  %13 = icmp eq i32 %2, 0
  %14 = bitcast %"struct.SkRTree::Branch"** %8 to i64*
  br i1 %13, label %29, label %15

15:                                               ; preds = %3
  %16 = icmp slt i32 %2, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %15
  tail call void @abort() #11
  unreachable

18:                                               ; preds = %15
  %19 = mul nsw i64 %10, 24
  %20 = tail call i8* @_Znwm(i64 %19) #12
  %21 = bitcast i8* %20 to %"struct.SkRTree::Branch"*
  %22 = ptrtoint i8* %20 to i64
  %23 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %21, i64 %10
  %24 = ptrtoint %"struct.SkRTree::Branch"* %23 to i64
  store i64 %22, i64* %12, align 8
  store i64 %22, i64* %14, align 8
  store i64 %24, i64* %11, align 8
  %25 = bitcast %"struct.SkRTree::Branch"** %8 to i64*
  %26 = zext i32 %2 to i64
  br label %39

27:                                               ; preds = %113
  %28 = inttoptr i64 %114 to %"struct.SkRTree::Branch"*
  br label %29

29:                                               ; preds = %3, %27
  %30 = phi i64* [ %25, %27 ], [ %14, %3 ]
  %31 = phi %"struct.SkRTree::Branch"* [ %28, %27 ], [ null, %3 ]
  %32 = phi i64 [ %114, %27 ], [ 0, %3 ]
  %33 = phi i64 [ %115, %27 ], [ 0, %3 ]
  %34 = sub i64 %33, %32
  %35 = sdiv exact i64 %34, 24
  %36 = trunc i64 %35 to i32
  %37 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 1
  store i32 %36, i32* %37, align 4
  %38 = icmp eq i32 %36, 0
  br i1 %38, label %252, label %119

39:                                               ; preds = %113, %18
  %40 = phi i64 [ %22, %18 ], [ %114, %113 ]
  %41 = phi i64 [ %22, %18 ], [ %115, %113 ]
  %42 = phi %"struct.SkRTree::Branch"* [ %21, %18 ], [ %116, %113 ]
  %43 = phi i64 [ 0, %18 ], [ %117, %113 ]
  %44 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 %43, i32 0
  %45 = load float, float* %44, align 4
  %46 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 %43, i32 2
  %47 = load float, float* %46, align 4
  %48 = fcmp olt float %45, %47
  br i1 %48, label %49, label %113

49:                                               ; preds = %39
  %50 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 %43, i32 1
  %51 = load float, float* %50, align 4
  %52 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 %43, i32 3
  %53 = load float, float* %52, align 4
  %54 = fcmp uge float %51, %53
  br i1 %54, label %113, label %55

55:                                               ; preds = %49
  %56 = or i64 %43, -6148914694099828736
  %57 = inttoptr i64 %56 to %"struct.SkRTree::Node"*
  %58 = load %"struct.SkRTree::Branch"*, %"struct.SkRTree::Branch"** %9, align 8
  %59 = icmp eq %"struct.SkRTree::Branch"* %42, %58
  br i1 %59, label %68, label %60

60:                                               ; preds = %55
  %61 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %42, i64 0, i32 0, i32 0
  store %"struct.SkRTree::Node"* %57, %"struct.SkRTree::Node"** %61, align 8
  %62 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %42, i64 0, i32 1, i32 0
  store float %45, float* %62, align 8
  %63 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %42, i64 0, i32 1, i32 1
  store float %51, float* %63, align 4
  %64 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %42, i64 0, i32 1, i32 2
  store float %47, float* %64, align 8
  %65 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %42, i64 0, i32 1, i32 3
  store float %53, float* %65, align 4
  %66 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %42, i64 1
  %67 = ptrtoint %"struct.SkRTree::Branch"* %66 to i64
  store i64 %67, i64* %25, align 8
  br label %113

68:                                               ; preds = %55
  %69 = ptrtoint %"struct.SkRTree::Branch"* %58 to i64
  %70 = sub i64 %69, %40
  %71 = sdiv exact i64 %70, 24
  %72 = add nsw i64 %71, 1
  %73 = icmp ugt i64 %72, 768614336404564650
  br i1 %73, label %74, label %76

74:                                               ; preds = %68
  %75 = bitcast %"class.std::__1::vector.2"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %75) #11
  unreachable

76:                                               ; preds = %68
  %77 = icmp ult i64 %71, 384307168202282325
  br i1 %77, label %78, label %83

78:                                               ; preds = %76
  %79 = shl nsw i64 %71, 1
  %80 = icmp ult i64 %79, %72
  %81 = select i1 %80, i64 %72, i64 %79
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %88, label %83

83:                                               ; preds = %78, %76
  %84 = phi i64 [ %81, %78 ], [ 768614336404564650, %76 ]
  %85 = mul i64 %84, 24
  %86 = tail call i8* @_Znwm(i64 %85) #12
  %87 = bitcast i8* %86 to %"struct.SkRTree::Branch"*
  br label %88

88:                                               ; preds = %83, %78
  %89 = phi i64 [ %84, %83 ], [ 0, %78 ]
  %90 = phi %"struct.SkRTree::Branch"* [ %87, %83 ], [ null, %78 ]
  %91 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %90, i64 %71
  %92 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %90, i64 %89
  %93 = ptrtoint %"struct.SkRTree::Branch"* %92 to i64
  %94 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %91, i64 0, i32 0, i32 0
  store %"struct.SkRTree::Node"* %57, %"struct.SkRTree::Node"** %94, align 8
  %95 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %90, i64 %71, i32 1, i32 0
  store float %45, float* %95, align 8
  %96 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %90, i64 %71, i32 1, i32 1
  store float %51, float* %96, align 4
  %97 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %90, i64 %71, i32 1, i32 2
  store float %47, float* %97, align 8
  %98 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %90, i64 %71, i32 1, i32 3
  store float %53, float* %98, align 4
  %99 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %91, i64 1
  %100 = ptrtoint %"struct.SkRTree::Branch"* %99 to i64
  %101 = sub i64 %41, %40
  %102 = sdiv exact i64 %101, -24
  %103 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %91, i64 %102
  %104 = ptrtoint %"struct.SkRTree::Branch"* %103 to i64
  %105 = icmp sgt i64 %101, 0
  br i1 %105, label %106, label %109

106:                                              ; preds = %88
  %107 = bitcast %"struct.SkRTree::Branch"* %103 to i8*
  %108 = inttoptr i64 %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %107, i8* align 8 %108, i64 %101, i1 false) #10
  br label %109

109:                                              ; preds = %106, %88
  store i64 %104, i64* %12, align 8
  store i64 %100, i64* %25, align 8
  store i64 %93, i64* %11, align 8
  %110 = icmp eq i64 %40, 0
  br i1 %110, label %113, label %111

111:                                              ; preds = %109
  %112 = inttoptr i64 %40 to i8*
  tail call void @_ZdlPv(i8* %112) #12
  br label %113

113:                                              ; preds = %39, %111, %109, %60, %49
  %114 = phi i64 [ %40, %39 ], [ %104, %111 ], [ %104, %109 ], [ %40, %60 ], [ %40, %49 ]
  %115 = phi i64 [ %41, %39 ], [ %100, %111 ], [ %100, %109 ], [ %67, %60 ], [ %41, %49 ]
  %116 = phi %"struct.SkRTree::Branch"* [ %42, %39 ], [ %99, %111 ], [ %99, %109 ], [ %66, %60 ], [ %42, %49 ]
  %117 = add nuw nsw i64 %43, 1
  %118 = icmp eq i64 %117, %26
  br i1 %118, label %27, label %39

119:                                              ; preds = %29
  %120 = icmp eq i32 %36, 1
  %121 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3
  br i1 %120, label %122, label %164

122:                                              ; preds = %119
  %123 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %124 = bitcast %"struct.SkRTree::Node"** %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = bitcast %"class.std::__1::vector"* %121 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = icmp eq i64 %125, %127
  br i1 %128, label %129, label %152

129:                                              ; preds = %122
  %130 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3, i32 0, i32 1
  %131 = bitcast %"struct.SkRTree::Node"** %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %132, %125
  %134 = sdiv exact i64 %133, 272
  %135 = tail call i8* @_Znwm(i64 272) #12
  %136 = bitcast i8* %135 to %"struct.SkRTree::Node"*
  %137 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %136, i64 %134
  %138 = ptrtoint %"struct.SkRTree::Node"* %137 to i64
  %139 = getelementptr inbounds i8, i8* %135, i64 272
  %140 = ptrtoint i8* %139 to i64
  %141 = sdiv exact i64 %133, -272
  %142 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %137, i64 %141
  %143 = ptrtoint %"struct.SkRTree::Node"* %142 to i64
  %144 = icmp sgt i64 %133, 0
  br i1 %144, label %145, label %148

145:                                              ; preds = %129
  %146 = bitcast %"struct.SkRTree::Node"* %142 to i8*
  %147 = inttoptr i64 %125 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %146, i8* align 8 %147, i64 %133, i1 false) #10
  br label %148

148:                                              ; preds = %145, %129
  store i64 %143, i64* %126, align 8
  store i64 %138, i64* %131, align 8
  store i64 %140, i64* %124, align 8
  %149 = icmp eq i64 %125, 0
  br i1 %149, label %152, label %150

150:                                              ; preds = %148
  %151 = inttoptr i64 %125 to i8*
  tail call void @_ZdlPv(i8* %151) #12
  br label %152

152:                                              ; preds = %122, %148, %150
  %153 = tail call %"struct.SkRTree::Node"* @_ZN7SkRTree19allocateNodeAtLevelEt(%class.SkRTree* %0, i16 zeroext 0)
  %154 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %153, i64 0, i32 0
  store i16 1, i16* %154, align 8
  %155 = load %"struct.SkRTree::Branch"*, %"struct.SkRTree::Branch"** %7, align 8
  %156 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %153, i64 0, i32 2, i64 0
  %157 = bitcast %"struct.SkRTree::Branch"* %156 to i8*
  %158 = bitcast %"struct.SkRTree::Branch"* %155 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %157, i8* align 8 %158, i64 24, i1 false)
  %159 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 2, i32 0, i32 0
  store %"struct.SkRTree::Node"* %153, %"struct.SkRTree::Node"** %159, align 8
  %160 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %155, i64 0, i32 1
  %161 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 2, i32 1
  %162 = bitcast %struct.SkRect* %161 to i8*
  %163 = bitcast %struct.SkRect* %160 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %162, i8* align 4 %163, i64 16, i1 false)
  br label %252

164:                                              ; preds = %119, %206
  %165 = phi i32 [ %207, %206 ], [ %36, %119 ]
  %166 = phi i32 [ %208, %206 ], [ 1, %119 ]
  %167 = srem i32 %165, 11
  %168 = icmp sgt i32 %167, 0
  br i1 %168, label %169, label %173

169:                                              ; preds = %164
  %170 = icmp sgt i32 %167, 5
  %171 = sub nsw i32 6, %167
  %172 = select i1 %170, i32 0, i32 %171
  br label %173

173:                                              ; preds = %169, %164
  %174 = phi i32 [ %167, %164 ], [ %172, %169 ]
  %175 = icmp sgt i32 %165, 0
  br i1 %175, label %176, label %206

176:                                              ; preds = %173, %192
  %177 = phi i32 [ %203, %192 ], [ 0, %173 ]
  %178 = phi i32 [ %204, %192 ], [ 0, %173 ]
  %179 = phi i32 [ %195, %192 ], [ %174, %173 ]
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %185, label %181

181:                                              ; preds = %176
  %182 = icmp slt i32 %179, 6
  br i1 %182, label %189, label %183

183:                                              ; preds = %181
  %184 = add nsw i32 %179, -5
  br label %185

185:                                              ; preds = %183, %176
  %186 = phi i32 [ 0, %176 ], [ %184, %183 ]
  %187 = phi i32 [ 11, %176 ], [ 6, %183 ]
  %188 = add nsw i32 %178, 1
  br label %192

189:                                              ; preds = %181
  %190 = sub nsw i32 11, %179
  %191 = add nsw i32 %178, 1
  br label %192

192:                                              ; preds = %189, %185
  %193 = phi i32 [ %191, %189 ], [ %188, %185 ]
  %194 = phi i32 [ %190, %189 ], [ %187, %185 ]
  %195 = phi i32 [ 0, %189 ], [ %186, %185 ]
  %196 = icmp sgt i32 %165, %193
  %197 = select i1 %196, i32 %165, i32 %193
  %198 = xor i32 %178, -1
  %199 = add i32 %197, %198
  %200 = add nsw i32 %194, -1
  %201 = icmp ult i32 %199, %200
  %202 = select i1 %201, i32 %199, i32 %200
  %203 = add nuw nsw i32 %177, 1
  %204 = add i32 %202, %193
  %205 = icmp slt i32 %204, %165
  br i1 %205, label %176, label %206

206:                                              ; preds = %192, %173
  %207 = phi i32 [ 0, %173 ], [ %203, %192 ]
  %208 = add nsw i32 %207, %166
  %209 = icmp eq i32 %207, 1
  br i1 %209, label %210, label %164

210:                                              ; preds = %206
  %211 = sext i32 %208 to i64
  %212 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %213 = bitcast %"struct.SkRTree::Node"** %212 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = bitcast %"class.std::__1::vector"* %121 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = sub i64 %214, %216
  %218 = sdiv exact i64 %217, 272
  %219 = icmp ult i64 %218, %211
  br i1 %219, label %220, label %247

220:                                              ; preds = %210
  %221 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3, i32 0, i32 1
  %222 = bitcast %"struct.SkRTree::Node"** %221 to i64*
  %223 = icmp slt i32 %208, 0
  br i1 %223, label %224, label %225

224:                                              ; preds = %220
  tail call void @abort() #11
  unreachable

225:                                              ; preds = %220
  %226 = load i64, i64* %222, align 8
  %227 = sub i64 %226, %216
  %228 = sdiv exact i64 %227, 272
  %229 = mul nsw i64 %211, 272
  %230 = tail call i8* @_Znwm(i64 %229) #12
  %231 = bitcast i8* %230 to %"struct.SkRTree::Node"*
  %232 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %231, i64 %228
  %233 = ptrtoint %"struct.SkRTree::Node"* %232 to i64
  %234 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %231, i64 %211
  %235 = ptrtoint %"struct.SkRTree::Node"* %234 to i64
  %236 = sdiv exact i64 %227, -272
  %237 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %232, i64 %236
  %238 = ptrtoint %"struct.SkRTree::Node"* %237 to i64
  %239 = icmp sgt i64 %227, 0
  br i1 %239, label %240, label %243

240:                                              ; preds = %225
  %241 = bitcast %"struct.SkRTree::Node"* %237 to i8*
  %242 = inttoptr i64 %216 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %241, i8* align 8 %242, i64 %227, i1 false) #10
  br label %243

243:                                              ; preds = %240, %225
  store i64 %238, i64* %215, align 8
  store i64 %233, i64* %222, align 8
  store i64 %235, i64* %213, align 8
  %244 = icmp eq i64 %216, 0
  br i1 %244, label %247, label %245

245:                                              ; preds = %243
  %246 = inttoptr i64 %216 to i8*
  tail call void @_ZdlPv(i8* %246) #12
  br label %247

247:                                              ; preds = %210, %243, %245
  %248 = bitcast %"struct.SkRTree::Branch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %248) #10
  call void @_ZN7SkRTree8bulkLoadEPNSt3__16vectorINS_6BranchENS0_9allocatorIS2_EEEEi(%"struct.SkRTree::Branch"* nonnull sret %5, %class.SkRTree* %0, %"class.std::__1::vector.2"* nonnull %4, i32 0)
  %249 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 2
  %250 = bitcast %"struct.SkRTree::Branch"* %249 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %250, i8* nonnull align 8 %248, i64 24, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %248) #10
  %251 = load %"struct.SkRTree::Branch"*, %"struct.SkRTree::Branch"** %7, align 8
  br label %252

252:                                              ; preds = %29, %152, %247
  %253 = phi %"struct.SkRTree::Branch"* [ %31, %29 ], [ %155, %152 ], [ %251, %247 ]
  %254 = icmp eq %"struct.SkRTree::Branch"* %253, null
  br i1 %254, label %258, label %255

255:                                              ; preds = %252
  %256 = ptrtoint %"struct.SkRTree::Branch"* %253 to i64
  store i64 %256, i64* %30, align 8
  %257 = bitcast %"struct.SkRTree::Branch"* %253 to i8*
  call void @_ZdlPv(i8* %257) #12
  br label %258

258:                                              ; preds = %252, %255
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.SkRTree::Node"* @_ZN7SkRTree19allocateNodeAtLevelEt(%class.SkRTree*, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.SkRTree::Node", align 8
  %4 = bitcast %"struct.SkRTree::Node"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %4) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 272, i1 false)
  %5 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3
  %6 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3, i32 0, i32 1
  %7 = load %"struct.SkRTree::Node"*, %"struct.SkRTree::Node"** %6, align 8
  %8 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %9 = load %"struct.SkRTree::Node"*, %"struct.SkRTree::Node"** %8, align 8
  %10 = icmp ult %"struct.SkRTree::Node"* %7, %9
  %11 = ptrtoint %"struct.SkRTree::Node"* %9 to i64
  br i1 %10, label %12, label %17

12:                                               ; preds = %2
  %13 = bitcast %"struct.SkRTree::Node"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* nonnull align 8 %4, i64 272, i1 false) #10
  %14 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %7, i64 1
  %15 = ptrtoint %"struct.SkRTree::Node"* %14 to i64
  %16 = bitcast %"struct.SkRTree::Node"** %6 to i64*
  store i64 %15, i64* %16, align 8
  br label %71

17:                                               ; preds = %2
  %18 = ptrtoint %"struct.SkRTree::Node"* %7 to i64
  %19 = bitcast %"struct.SkRTree::Node"** %6 to i64*
  %20 = bitcast %"class.std::__1::vector"* %5 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %18, %21
  %23 = sdiv exact i64 %22, 272
  %24 = add nsw i64 %23, 1
  %25 = icmp ugt i64 %24, 67818912035696880
  br i1 %25, label %26, label %28

26:                                               ; preds = %17
  %27 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %27) #11
  unreachable

28:                                               ; preds = %17
  %29 = bitcast %"struct.SkRTree::Node"** %8 to i64*
  %30 = sub i64 %11, %21
  %31 = sdiv exact i64 %30, 272
  %32 = icmp ult i64 %31, 33909456017848440
  br i1 %32, label %33, label %38

33:                                               ; preds = %28
  %34 = shl nsw i64 %31, 1
  %35 = icmp ult i64 %34, %24
  %36 = select i1 %35, i64 %24, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %43, label %38

38:                                               ; preds = %33, %28
  %39 = phi i64 [ %36, %33 ], [ 67818912035696880, %28 ]
  %40 = mul i64 %39, 272
  %41 = call i8* @_Znwm(i64 %40) #12
  %42 = bitcast i8* %41 to %"struct.SkRTree::Node"*
  br label %43

43:                                               ; preds = %38, %33
  %44 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %45 = phi %"struct.SkRTree::Node"* [ %42, %38 ], [ null, %33 ]
  %46 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %45, i64 %23
  %47 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %45, i64 %44
  %48 = ptrtoint %"struct.SkRTree::Node"* %47 to i64
  %49 = bitcast %"struct.SkRTree::Node"* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* nonnull align 8 %4, i64 272, i1 false) #10
  %50 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %46, i64 1
  %51 = ptrtoint %"struct.SkRTree::Node"* %50 to i64
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %53 = load %"struct.SkRTree::Node"*, %"struct.SkRTree::Node"** %52, align 8
  %54 = load i64, i64* %19, align 8
  %55 = ptrtoint %"struct.SkRTree::Node"* %53 to i64
  %56 = sub i64 %54, %55
  %57 = sdiv exact i64 %56, -272
  %58 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %46, i64 %57
  %59 = ptrtoint %"struct.SkRTree::Node"* %58 to i64
  %60 = icmp sgt i64 %56, 0
  br i1 %60, label %61, label %65

61:                                               ; preds = %43
  %62 = bitcast %"struct.SkRTree::Node"* %58 to i8*
  %63 = bitcast %"struct.SkRTree::Node"* %53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 %56, i1 false) #10
  %64 = load %"struct.SkRTree::Node"*, %"struct.SkRTree::Node"** %52, align 8
  br label %65

65:                                               ; preds = %61, %43
  %66 = phi %"struct.SkRTree::Node"* [ %53, %43 ], [ %64, %61 ]
  store i64 %59, i64* %20, align 8
  store i64 %51, i64* %19, align 8
  store i64 %48, i64* %29, align 8
  %67 = icmp eq %"struct.SkRTree::Node"* %66, null
  br i1 %67, label %71, label %68

68:                                               ; preds = %65
  %69 = bitcast %"struct.SkRTree::Node"* %66 to i8*
  call void @_ZdlPv(i8* %69) #12
  %70 = load %"struct.SkRTree::Node"*, %"struct.SkRTree::Node"** %6, align 8
  br label %71

71:                                               ; preds = %12, %65, %68
  %72 = phi %"struct.SkRTree::Node"* [ %14, %12 ], [ %50, %65 ], [ %70, %68 ]
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %4) #10
  %73 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %72, i64 -1
  %74 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %73, i64 0, i32 0
  store i16 0, i16* %74, align 8
  %75 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %72, i64 -1, i32 1
  store i16 %1, i16* %75, align 2
  ret %"struct.SkRTree::Node"* %73
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @_ZN7SkRTree10CountNodesEi(i32) local_unnamed_addr #2 align 2 {
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %49, label %3

3:                                                ; preds = %1, %45
  %4 = phi i32 [ %46, %45 ], [ %0, %1 ]
  %5 = phi i32 [ %47, %45 ], [ 1, %1 ]
  %6 = srem i32 %4, 11
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = icmp sgt i32 %6, 5
  %10 = sub nsw i32 6, %6
  %11 = select i1 %9, i32 0, i32 %10
  br label %12

12:                                               ; preds = %8, %3
  %13 = phi i32 [ %6, %3 ], [ %11, %8 ]
  %14 = icmp sgt i32 %4, 0
  br i1 %14, label %15, label %45

15:                                               ; preds = %12, %31
  %16 = phi i32 [ %42, %31 ], [ 0, %12 ]
  %17 = phi i32 [ %43, %31 ], [ 0, %12 ]
  %18 = phi i32 [ %34, %31 ], [ %13, %12 ]
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %15
  %21 = icmp slt i32 %18, 6
  br i1 %21, label %28, label %22

22:                                               ; preds = %20
  %23 = add nsw i32 %18, -5
  br label %24

24:                                               ; preds = %22, %15
  %25 = phi i32 [ 0, %15 ], [ %23, %22 ]
  %26 = phi i32 [ 11, %15 ], [ 6, %22 ]
  %27 = add nsw i32 %17, 1
  br label %31

28:                                               ; preds = %20
  %29 = sub nsw i32 11, %18
  %30 = add nsw i32 %17, 1
  br label %31

31:                                               ; preds = %28, %24
  %32 = phi i32 [ %30, %28 ], [ %27, %24 ]
  %33 = phi i32 [ %29, %28 ], [ %26, %24 ]
  %34 = phi i32 [ 0, %28 ], [ %25, %24 ]
  %35 = icmp sgt i32 %4, %32
  %36 = select i1 %35, i32 %4, i32 %32
  %37 = xor i32 %17, -1
  %38 = add i32 %36, %37
  %39 = add nsw i32 %33, -1
  %40 = icmp ult i32 %38, %39
  %41 = select i1 %40, i32 %38, i32 %39
  %42 = add nuw nsw i32 %16, 1
  %43 = add i32 %32, %41
  %44 = icmp slt i32 %43, %4
  br i1 %44, label %15, label %45

45:                                               ; preds = %31, %12
  %46 = phi i32 [ 0, %12 ], [ %42, %31 ]
  %47 = add nsw i32 %46, %5
  %48 = icmp eq i32 %46, 1
  br i1 %48, label %49, label %3

49:                                               ; preds = %45, %1
  %50 = phi i32 [ 1, %1 ], [ %47, %45 ]
  ret i32 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkRTree8bulkLoadEPNSt3__16vectorINS_6BranchENS0_9allocatorIS2_EEEEi(%"struct.SkRTree::Branch"* noalias nocapture sret, %class.SkRTree*, %"class.std::__1::vector.2"*, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"struct.SkRTree::Branch", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %2, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.SkRTree::Branch"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector.2"* %2 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = icmp eq i64 %11, 24
  br i1 %12, label %13, label %16

13:                                               ; preds = %4
  %14 = inttoptr i64 %10 to i8*
  %15 = bitcast %"struct.SkRTree::Branch"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %14, i64 24, i1 false)
  br label %134

16:                                               ; preds = %4
  %17 = sdiv exact i64 %11, 24
  %18 = trunc i64 %17 to i32
  %19 = srem i32 %18, 11
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %25

21:                                               ; preds = %16
  %22 = icmp sgt i32 %19, 5
  %23 = sub nsw i32 6, %19
  %24 = select i1 %22, i32 0, i32 %23
  br label %25

25:                                               ; preds = %21, %16
  %26 = phi i32 [ %19, %16 ], [ %24, %21 ]
  %27 = icmp sgt i32 %18, 0
  br i1 %27, label %28, label %124

28:                                               ; preds = %25
  %29 = trunc i32 %3 to i16
  %30 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %2, i64 0, i32 0, i32 0
  %31 = bitcast %"struct.SkRTree::Branch"* %5 to i8*
  %32 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %5, i64 0, i32 0, i32 0
  %33 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %5, i64 0, i32 1
  %34 = bitcast %struct.SkRect* %33 to i8*
  %35 = bitcast %struct.SkRect* %33 to i8*
  br label %36

36:                                               ; preds = %28, %79
  %37 = phi i64 [ 0, %28 ], [ %84, %79 ]
  %38 = phi i32 [ 0, %28 ], [ %81, %79 ]
  %39 = phi i32 [ %26, %28 ], [ %48, %79 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %47, label %41

41:                                               ; preds = %36
  %42 = icmp slt i32 %39, 6
  br i1 %42, label %43, label %45

43:                                               ; preds = %41
  %44 = sub nsw i32 11, %39
  br label %47

45:                                               ; preds = %41
  %46 = add nsw i32 %39, -5
  br label %47

47:                                               ; preds = %36, %43, %45
  %48 = phi i32 [ 0, %43 ], [ %46, %45 ], [ 0, %36 ]
  %49 = phi i32 [ %44, %43 ], [ 6, %45 ], [ 11, %36 ]
  %50 = call %"struct.SkRTree::Node"* @_ZN7SkRTree19allocateNodeAtLevelEt(%class.SkRTree* %1, i16 zeroext %29)
  %51 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %50, i64 0, i32 0
  store i16 1, i16* %51, align 8
  %52 = sext i32 %38 to i64
  %53 = load %"struct.SkRTree::Branch"*, %"struct.SkRTree::Branch"** %30, align 8
  %54 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %53, i64 %52
  %55 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %50, i64 0, i32 2
  %56 = bitcast [11 x %"struct.SkRTree::Branch"]* %55 to i8*
  %57 = bitcast %"struct.SkRTree::Branch"* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #10
  store %"struct.SkRTree::Node"* inttoptr (i64 -6148914691236517206 to %"struct.SkRTree::Node"*), %"struct.SkRTree::Node"** %32, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 -1, i64 16, i1 false)
  %58 = load %"struct.SkRTree::Branch"*, %"struct.SkRTree::Branch"** %30, align 8
  %59 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %58, i64 %52, i32 1
  %60 = bitcast %struct.SkRect* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 4 %60, i64 16, i1 false)
  store %"struct.SkRTree::Node"* %50, %"struct.SkRTree::Node"** %32, align 8
  %61 = add nsw i32 %38, 1
  %62 = icmp sgt i32 %49, 1
  br i1 %62, label %63, label %79

63:                                               ; preds = %47
  %64 = ptrtoint %"struct.SkRTree::Branch"* %58 to i64
  %65 = sext i32 %61 to i64
  %66 = zext i32 %49 to i64
  %67 = load i64, i64* %7, align 8
  %68 = sub i64 %67, %64
  %69 = sdiv exact i64 %68, 24
  %70 = shl i64 %69, 32
  %71 = ashr exact i64 %70, 32
  %72 = icmp sgt i64 %71, %65
  br i1 %72, label %91, label %75

73:                                               ; preds = %109
  %74 = inttoptr i64 %111 to %"struct.SkRTree::Branch"*
  br label %75

75:                                               ; preds = %73, %63
  %76 = phi %"struct.SkRTree::Branch"* [ %58, %63 ], [ %74, %73 ]
  %77 = phi i64 [ %65, %63 ], [ %110, %73 ]
  %78 = trunc i64 %77 to i32
  br label %79

79:                                               ; preds = %75, %107, %47
  %80 = phi %"struct.SkRTree::Branch"* [ %58, %47 ], [ %108, %107 ], [ %76, %75 ]
  %81 = phi i32 [ %61, %47 ], [ %105, %107 ], [ %78, %75 ]
  %82 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %80, i64 %37
  %83 = bitcast %"struct.SkRTree::Branch"* %82 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* nonnull align 8 %31, i64 24, i1 false)
  %84 = add nuw i64 %37, 1
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #10
  %85 = load i64, i64* %7, align 8
  %86 = load i64, i64* %9, align 8
  %87 = sub i64 %85, %86
  %88 = sdiv exact i64 %87, 24
  %89 = trunc i64 %88 to i32
  %90 = icmp slt i32 %81, %89
  br i1 %90, label %36, label %119

91:                                               ; preds = %63, %109
  %92 = phi i32 [ %105, %109 ], [ %61, %63 ]
  %93 = phi i64 [ %110, %109 ], [ %65, %63 ]
  %94 = phi i64 [ %104, %109 ], [ 1, %63 ]
  %95 = phi %"struct.SkRTree::Branch"* [ %112, %109 ], [ %58, %63 ]
  %96 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %95, i64 %93, i32 1
  call void @_ZN6SkRect4joinERKS_(%struct.SkRect* %33, %struct.SkRect* dereferenceable(16) %96) #10
  %97 = load %"struct.SkRTree::Branch"*, %"struct.SkRTree::Branch"** %30, align 8
  %98 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %97, i64 %93
  %99 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %50, i64 0, i32 2, i64 %94
  %100 = bitcast %"struct.SkRTree::Branch"* %99 to i8*
  %101 = bitcast %"struct.SkRTree::Branch"* %98 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 24, i1 false)
  %102 = load i16, i16* %51, align 8
  %103 = add i16 %102, 1
  store i16 %103, i16* %51, align 8
  %104 = add nuw nsw i64 %94, 1
  %105 = add nsw i32 %92, 1
  %106 = icmp eq i64 %104, %66
  br i1 %106, label %107, label %109

107:                                              ; preds = %91
  %108 = load %"struct.SkRTree::Branch"*, %"struct.SkRTree::Branch"** %30, align 8
  br label %79

109:                                              ; preds = %91
  %110 = add nsw i64 %93, 1
  %111 = load i64, i64* %9, align 8
  %112 = inttoptr i64 %111 to %"struct.SkRTree::Branch"*
  %113 = load i64, i64* %7, align 8
  %114 = sub i64 %113, %111
  %115 = sdiv exact i64 %114, 24
  %116 = shl i64 %115, 32
  %117 = ashr exact i64 %116, 32
  %118 = icmp slt i64 %110, %117
  br i1 %118, label %91, label %73

119:                                              ; preds = %79
  %120 = and i64 %84, 4294967295
  %121 = icmp ugt i64 %120, %88
  br i1 %121, label %122, label %124

122:                                              ; preds = %119
  %123 = sub nsw i64 %120, %88
  call void @_ZNSt3__16vectorIN7SkRTree6BranchENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.2"* %2, i64 %123) #10
  br label %132

124:                                              ; preds = %25, %119
  %125 = phi i64 [ %86, %119 ], [ %10, %25 ]
  %126 = phi i64 [ %88, %119 ], [ %17, %25 ]
  %127 = phi i64 [ %120, %119 ], [ 0, %25 ]
  %128 = icmp ult i64 %127, %126
  br i1 %128, label %129, label %132

129:                                              ; preds = %124
  %130 = inttoptr i64 %125 to %"struct.SkRTree::Branch"*
  %131 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %130, i64 %127
  store %"struct.SkRTree::Branch"* %131, %"struct.SkRTree::Branch"** %6, align 8
  br label %132

132:                                              ; preds = %122, %124, %129
  %133 = add nsw i32 %3, 1
  call void @_ZN7SkRTree8bulkLoadEPNSt3__16vectorINS_6BranchENS0_9allocatorIS2_EEEEi(%"struct.SkRTree::Branch"* sret %0, %class.SkRTree* %1, %"class.std::__1::vector.2"* %2, i32 %133)
  br label %134

134:                                              ; preds = %132, %13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN6SkRect4joinERKS_(%struct.SkRect*, %struct.SkRect* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkRTree6searchERK6SkRectPNSt3__16vectorIiNS3_9allocatorIiEEEE(%class.SkRTree* nocapture readonly, %struct.SkRect* nocapture readonly dereferenceable(16), %"class.std::__1::vector.9"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %38

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 2, i32 1, i32 0
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 2, i32 1, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 2, i32 1, i32 2
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 2, i32 1, i32 3
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %23 = load float, float* %22, align 4
  %24 = fcmp olt float %9, %17
  %25 = select i1 %24, float %17, float %9
  %26 = fcmp olt float %21, %13
  %27 = select i1 %26, float %21, float %13
  %28 = fcmp olt float %11, %19
  %29 = select i1 %28, float %19, float %11
  %30 = fcmp olt float %23, %15
  %31 = fcmp olt float %25, %27
  %32 = select i1 %30, float %23, float %15
  %33 = fcmp olt float %29, %32
  %34 = and i1 %31, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %7
  %36 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 2, i32 0, i32 0
  %37 = load %"struct.SkRTree::Node"*, %"struct.SkRTree::Node"** %36, align 8
  tail call void @_ZNK7SkRTree6searchEPNS_4NodeERK6SkRectPNSt3__16vectorIiNS5_9allocatorIiEEEE(%class.SkRTree* %0, %"struct.SkRTree::Node"* %37, %struct.SkRect* dereferenceable(16) %1, %"class.std::__1::vector.9"* %2)
  br label %38

38:                                               ; preds = %35, %7, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkRTree6searchEPNS_4NodeERK6SkRectPNSt3__16vectorIiNS5_9allocatorIiEEEE(%class.SkRTree* nocapture readnone, %"struct.SkRTree::Node"* nocapture readonly, %struct.SkRect* nocapture readonly dereferenceable(16), %"class.std::__1::vector.9"*) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %1, i64 0, i32 0
  %6 = load i16, i16* %5, align 8
  %7 = icmp eq i16 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 0
  %10 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 1
  %11 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 2
  %12 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 3
  %13 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %1, i64 0, i32 1
  %14 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %3, i64 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i32** %14 to i64*
  %17 = bitcast %"class.std::__1::vector.9"* %3 to i64*
  %18 = bitcast i32** %15 to i64*
  %19 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %3, i64 0, i32 0, i32 0
  br label %21

20:                                               ; preds = %116, %4
  ret void

21:                                               ; preds = %8, %116
  %22 = phi i64 [ 0, %8 ], [ %117, %116 ]
  %23 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %1, i64 0, i32 2, i64 %22
  %24 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %1, i64 0, i32 2, i64 %22, i32 1, i32 0
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %1, i64 0, i32 2, i64 %22, i32 1, i32 1
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %1, i64 0, i32 2, i64 %22, i32 1, i32 2
  %29 = load float, float* %28, align 4
  %30 = getelementptr inbounds %"struct.SkRTree::Node", %"struct.SkRTree::Node"* %1, i64 0, i32 2, i64 %22, i32 1, i32 3
  %31 = load float, float* %30, align 4
  %32 = load float, float* %9, align 4
  %33 = load float, float* %10, align 4
  %34 = load float, float* %11, align 4
  %35 = load float, float* %12, align 4
  %36 = fcmp olt float %25, %32
  %37 = select i1 %36, float %32, float %25
  %38 = fcmp olt float %34, %29
  %39 = select i1 %38, float %34, float %29
  %40 = fcmp olt float %27, %33
  %41 = select i1 %40, float %33, float %27
  %42 = fcmp olt float %35, %31
  %43 = fcmp olt float %37, %39
  %44 = select i1 %42, float %35, float %31
  %45 = fcmp olt float %41, %44
  %46 = and i1 %43, %45
  br i1 %46, label %47, label %116

47:                                               ; preds = %21
  %48 = load i16, i16* %13, align 2
  %49 = icmp eq i16 %48, 0
  br i1 %49, label %50, label %113

50:                                               ; preds = %47
  %51 = bitcast %"struct.SkRTree::Branch"* %23 to i32*
  %52 = load i32*, i32** %14, align 8
  %53 = load i32*, i32** %15, align 8
  %54 = icmp eq i32* %52, %53
  %55 = ptrtoint i32* %53 to i64
  br i1 %54, label %60, label %56

56:                                               ; preds = %50
  %57 = load i32, i32* %51, align 4
  store i32 %57, i32* %52, align 4
  %58 = getelementptr inbounds i32, i32* %52, i64 1
  %59 = ptrtoint i32* %58 to i64
  store i64 %59, i64* %16, align 8
  br label %116

60:                                               ; preds = %50
  %61 = ptrtoint i32* %52 to i64
  %62 = load i64, i64* %17, align 8
  %63 = sub i64 %61, %62
  %64 = ashr exact i64 %63, 2
  %65 = add nsw i64 %64, 1
  %66 = icmp ugt i64 %65, 4611686018427387903
  br i1 %66, label %67, label %69

67:                                               ; preds = %60
  %68 = bitcast %"class.std::__1::vector.9"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %68) #11
  unreachable

69:                                               ; preds = %60
  %70 = sub i64 %55, %62
  %71 = ashr exact i64 %70, 2
  %72 = icmp ult i64 %71, 2305843009213693951
  br i1 %72, label %73, label %81

73:                                               ; preds = %69
  %74 = ashr exact i64 %70, 1
  %75 = icmp ult i64 %74, %65
  %76 = select i1 %75, i64 %65, i64 %74
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %86, label %78

78:                                               ; preds = %73
  %79 = icmp ugt i64 %76, 4611686018427387903
  br i1 %79, label %80, label %81

80:                                               ; preds = %78
  tail call void @abort() #11
  unreachable

81:                                               ; preds = %78, %69
  %82 = phi i64 [ %76, %78 ], [ 4611686018427387903, %69 ]
  %83 = shl i64 %82, 2
  %84 = tail call i8* @_Znwm(i64 %83) #12
  %85 = bitcast i8* %84 to i32*
  br label %86

86:                                               ; preds = %81, %73
  %87 = phi i64 [ %82, %81 ], [ 0, %73 ]
  %88 = phi i32* [ %85, %81 ], [ null, %73 ]
  %89 = getelementptr inbounds i32, i32* %88, i64 %64
  %90 = getelementptr inbounds i32, i32* %88, i64 %87
  %91 = ptrtoint i32* %90 to i64
  %92 = load i32, i32* %51, align 4
  store i32 %92, i32* %89, align 4
  %93 = getelementptr inbounds i32, i32* %89, i64 1
  %94 = ptrtoint i32* %93 to i64
  %95 = load i32*, i32** %19, align 8
  %96 = load i64, i64* %16, align 8
  %97 = ptrtoint i32* %95 to i64
  %98 = sub i64 %96, %97
  %99 = ashr exact i64 %98, 2
  %100 = sub nsw i64 0, %99
  %101 = getelementptr inbounds i32, i32* %89, i64 %100
  %102 = ptrtoint i32* %101 to i64
  %103 = icmp sgt i64 %98, 0
  br i1 %103, label %104, label %108

104:                                              ; preds = %86
  %105 = bitcast i32* %101 to i8*
  %106 = bitcast i32* %95 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %105, i8* align 4 %106, i64 %98, i1 false) #10
  %107 = load i32*, i32** %19, align 8
  br label %108

108:                                              ; preds = %104, %86
  %109 = phi i32* [ %95, %86 ], [ %107, %104 ]
  store i64 %102, i64* %17, align 8
  store i64 %94, i64* %16, align 8
  store i64 %91, i64* %18, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %116, label %111

111:                                              ; preds = %108
  %112 = bitcast i32* %109 to i8*
  tail call void @_ZdlPv(i8* %112) #12
  br label %116

113:                                              ; preds = %47
  %114 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %23, i64 0, i32 0, i32 0
  %115 = load %"struct.SkRTree::Node"*, %"struct.SkRTree::Node"** %114, align 8
  tail call void @_ZNK7SkRTree6searchEPNS_4NodeERK6SkRectPNSt3__16vectorIiNS5_9allocatorIiEEEE(%class.SkRTree* %0, %"struct.SkRTree::Node"* %115, %struct.SkRect* dereferenceable(16) %2, %"class.std::__1::vector.9"* %3)
  br label %116

116:                                              ; preds = %111, %108, %56, %21, %113
  %117 = add nuw nsw i64 %22, 1
  %118 = load i16, i16* %5, align 8
  %119 = zext i16 %118 to i64
  %120 = icmp ult i64 %117, %119
  br i1 %120, label %21, label %20
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK7SkRTree9bytesUsedEv(%class.SkRTree* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3
  %3 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.SkRTree::Node"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %5, 64
  %9 = sub i64 %8, %7
  ret i64 %9
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7SkRTreeD2Ev(%class.SkRTree*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV7SkRTree, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %"struct.SkRTree::Node"*, %"struct.SkRTree::Node"** %3, align 8
  %5 = icmp eq %"struct.SkRTree::Node"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.SkRTree::Node"* %4 to i64
  %8 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast %"struct.SkRTree::Node"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"struct.SkRTree::Node"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #12
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7SkRTreeD0Ev(%class.SkRTree*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV7SkRTree, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %"struct.SkRTree::Node"*, %"struct.SkRTree::Node"** %3, align 8
  %5 = icmp eq %"struct.SkRTree::Node"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.SkRTree::Node"* %4 to i64
  %8 = getelementptr inbounds %class.SkRTree, %class.SkRTree* %0, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast %"struct.SkRTree::Node"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"struct.SkRTree::Node"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #12
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %class.SkRTree* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #10
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN15SkBBoxHierarchy6insertEPK6SkRectPKNS_8MetadataEi(%class.SkBBoxHierarchy*, %struct.SkRect*, %"struct.SkBBoxHierarchy::Metadata"*, i32) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN7SkRTree6BranchENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.2"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.SkRTree::Branch"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.SkRTree::Branch"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.SkRTree::Branch"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast %"struct.SkRTree::Node"** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #10
  %27 = ptrtoint %"struct.SkRTree::Branch"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %85

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.2"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.2"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #11
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #12
  %52 = bitcast i8* %51 to %"struct.SkRTree::Branch"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"struct.SkRTree::Branch"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %55, i64 %34
  %57 = bitcast %"struct.SkRTree::Branch"* %56 to i8*
  %58 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %55, i64 %54
  %59 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %56, i64 %1
  %60 = mul nsw i64 %1, 24
  %61 = add i64 %60, -24
  %62 = urem i64 %61, 24
  %63 = sub i64 %61, %62
  %64 = add i64 %63, 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 %64, i1 false)
  %65 = ptrtoint %"struct.SkRTree::Branch"* %58 to i64
  %66 = ptrtoint %"struct.SkRTree::Branch"* %59 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 0
  %68 = load %"struct.SkRTree::Branch"*, %"struct.SkRTree::Branch"** %67, align 8
  %69 = load i64, i64* %7, align 8
  %70 = ptrtoint %"struct.SkRTree::Branch"* %68 to i64
  %71 = sub i64 %69, %70
  %72 = sdiv exact i64 %71, -24
  %73 = getelementptr inbounds %"struct.SkRTree::Branch", %"struct.SkRTree::Branch"* %56, i64 %72
  %74 = ptrtoint %"struct.SkRTree::Branch"* %73 to i64
  %75 = icmp sgt i64 %71, 0
  br i1 %75, label %76, label %80

76:                                               ; preds = %53
  %77 = bitcast %"struct.SkRTree::Branch"* %73 to i8*
  %78 = bitcast %"struct.SkRTree::Branch"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 %71, i1 false) #10
  %79 = load %"struct.SkRTree::Branch"*, %"struct.SkRTree::Branch"** %67, align 8
  br label %80

80:                                               ; preds = %53, %76
  %81 = phi %"struct.SkRTree::Branch"* [ %68, %53 ], [ %79, %76 ]
  store i64 %74, i64* %31, align 8
  store i64 %66, i64* %7, align 8
  store i64 %65, i64* %4, align 8
  %82 = icmp eq %"struct.SkRTree::Branch"* %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %80
  %84 = bitcast %"struct.SkRTree::Branch"* %81 to i8*
  tail call void @_ZdlPv(i8* %84) #12
  br label %85

85:                                               ; preds = %83, %80, %28
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
