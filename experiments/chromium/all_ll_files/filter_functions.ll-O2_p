; ModuleID = '../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/filter_functions.c'
source_filename = "../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/filter_functions.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.WeightFiltstr = type { [240 x double], [6 x double], [6 x double], [6 x double], [240 x double] }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcIsac_AutoCorr(double* nocapture, double* nocapture readonly, i64, i64) local_unnamed_addr #0 {
  %5 = add i64 %2, -2
  br label %6

6:                                                ; preds = %4, %75
  %7 = phi i64 [ 0, %4 ], [ %78, %75 ]
  %8 = xor i64 %7, -1
  %9 = add i64 %8, %2
  %10 = getelementptr inbounds double, double* %1, i64 %7
  %11 = load double, double* %1, align 8
  %12 = load double, double* %10, align 8
  %13 = fmul double %11, %12
  %14 = sub i64 %2, %7
  %15 = icmp ugt i64 %14, 1
  %16 = fadd double %13, 0.000000e+00
  br i1 %15, label %17, label %75

17:                                               ; preds = %6
  %18 = sub i64 %5, %7
  %19 = and i64 %9, 3
  %20 = icmp ult i64 %18, 3
  br i1 %20, label %57, label %21

21:                                               ; preds = %17
  %22 = sub i64 %9, %19
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi double [ %16, %21 ], [ %54, %23 ]
  %25 = phi i64 [ 1, %21 ], [ %53, %23 ]
  %26 = phi i64 [ %22, %21 ], [ %55, %23 ]
  %27 = getelementptr inbounds double, double* %1, i64 %25
  %28 = load double, double* %27, align 8
  %29 = getelementptr inbounds double, double* %10, i64 %25
  %30 = load double, double* %29, align 8
  %31 = fmul double %28, %30
  %32 = add nuw nsw i64 %25, 1
  %33 = fadd double %24, %31
  %34 = getelementptr inbounds double, double* %1, i64 %32
  %35 = load double, double* %34, align 8
  %36 = getelementptr inbounds double, double* %10, i64 %32
  %37 = load double, double* %36, align 8
  %38 = fmul double %35, %37
  %39 = add nuw nsw i64 %25, 2
  %40 = fadd double %33, %38
  %41 = getelementptr inbounds double, double* %1, i64 %39
  %42 = load double, double* %41, align 8
  %43 = getelementptr inbounds double, double* %10, i64 %39
  %44 = load double, double* %43, align 8
  %45 = fmul double %42, %44
  %46 = add nuw i64 %25, 3
  %47 = fadd double %40, %45
  %48 = getelementptr inbounds double, double* %1, i64 %46
  %49 = load double, double* %48, align 8
  %50 = getelementptr inbounds double, double* %10, i64 %46
  %51 = load double, double* %50, align 8
  %52 = fmul double %49, %51
  %53 = add nuw i64 %25, 4
  %54 = fadd double %47, %52
  %55 = add i64 %26, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %23

57:                                               ; preds = %23, %17
  %58 = phi double [ undef, %17 ], [ %54, %23 ]
  %59 = phi double [ %16, %17 ], [ %54, %23 ]
  %60 = phi i64 [ 1, %17 ], [ %53, %23 ]
  %61 = icmp eq i64 %19, 0
  br i1 %61, label %75, label %62

62:                                               ; preds = %57, %62
  %63 = phi double [ %72, %62 ], [ %59, %57 ]
  %64 = phi i64 [ %71, %62 ], [ %60, %57 ]
  %65 = phi i64 [ %73, %62 ], [ %19, %57 ]
  %66 = getelementptr inbounds double, double* %1, i64 %64
  %67 = load double, double* %66, align 8
  %68 = getelementptr inbounds double, double* %10, i64 %64
  %69 = load double, double* %68, align 8
  %70 = fmul double %67, %69
  %71 = add nuw i64 %64, 1
  %72 = fadd double %63, %70
  %73 = add i64 %65, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %62, !llvm.loop !2

75:                                               ; preds = %57, %62, %6
  %76 = phi double [ %16, %6 ], [ %58, %57 ], [ %72, %62 ]
  %77 = getelementptr inbounds double, double* %0, i64 %7
  store double %76, double* %77, align 8
  %78 = add i64 %7, 1
  %79 = icmp ugt i64 %78, %3
  br i1 %79, label %80, label %6

80:                                               ; preds = %75
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_WeightingFilter(double* nocapture readonly, double* nocapture, double* nocapture, %struct.WeightFiltstr* nocapture) local_unnamed_addr #2 {
  %5 = alloca [480 x double], align 16
  %6 = alloca [7 x double], align 16
  %7 = alloca [7 x double], align 16
  %8 = alloca [7 x double], align 16
  %9 = alloca [7 x double], align 16
  %10 = alloca [246 x double], align 16
  %11 = bitcast [246 x double]* %10 to i8*
  %12 = alloca [246 x double], align 16
  %13 = bitcast [246 x double]* %12 to i8*
  %14 = alloca [7 x double], align 16
  %15 = bitcast [7 x double]* %14 to i8*
  %16 = alloca [240 x double], align 16
  %17 = bitcast [480 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3840, i8* nonnull %17) #4
  %18 = bitcast [7 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -1, i64 56, i1 false)
  %19 = bitcast [7 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %19) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -1, i64 56, i1 false)
  %20 = bitcast [7 x double]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -1, i64 56, i1 false)
  %21 = bitcast [7 x double]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %21) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -1, i64 56, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1968, i8* nonnull %11) #4
  %22 = getelementptr inbounds [246 x double], [246 x double]* %10, i64 0, i64 6
  %23 = bitcast double* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -1, i64 1920, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1968, i8* nonnull %13) #4
  %24 = getelementptr inbounds [246 x double], [246 x double]* %12, i64 0, i64 6
  %25 = bitcast double* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -1, i64 1920, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %15) #4
  %26 = bitcast [240 x double]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1920, i8* nonnull %26) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -1, i64 1920, i1 false)
  %27 = bitcast %struct.WeightFiltstr* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %17, i8* align 8 %27, i64 1920, i1 false)
  %28 = getelementptr inbounds [480 x double], [480 x double]* %5, i64 0, i64 240
  %29 = bitcast double* %28 to i8*
  %30 = bitcast double* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %29, i8* align 8 %30, i64 1920, i1 false)
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %30, i64 1920, i1 false)
  %31 = getelementptr %struct.WeightFiltstr, %struct.WeightFiltstr* %3, i64 0, i32 2, i64 0
  %32 = getelementptr %struct.WeightFiltstr, %struct.WeightFiltstr* %3, i64 0, i32 3, i64 0
  %33 = getelementptr inbounds [7 x double], [7 x double]* %14, i64 0, i64 0
  %34 = bitcast double* %31 to <2 x i64>*
  %35 = load <2 x i64>, <2 x i64>* %34, align 8
  %36 = getelementptr inbounds [246 x double], [246 x double]* %12, i64 0, i64 2
  %37 = bitcast [246 x double]* %12 to <2 x i64>*
  store <2 x i64> %35, <2 x i64>* %37, align 16
  %38 = bitcast double* %32 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 8
  %40 = getelementptr inbounds [246 x double], [246 x double]* %10, i64 0, i64 2
  %41 = bitcast [246 x double]* %10 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %41, align 16
  %42 = getelementptr inbounds %struct.WeightFiltstr, %struct.WeightFiltstr* %3, i64 0, i32 2, i64 2
  %43 = getelementptr inbounds %struct.WeightFiltstr, %struct.WeightFiltstr* %3, i64 0, i32 3, i64 2
  %44 = getelementptr inbounds [7 x double], [7 x double]* %14, i64 0, i64 2
  %45 = bitcast double* %42 to <2 x i64>*
  %46 = load <2 x i64>, <2 x i64>* %45, align 8
  %47 = getelementptr inbounds [246 x double], [246 x double]* %12, i64 0, i64 4
  %48 = bitcast double* %36 to <2 x i64>*
  store <2 x i64> %46, <2 x i64>* %48, align 16
  %49 = bitcast double* %43 to <2 x i64>*
  %50 = load <2 x i64>, <2 x i64>* %49, align 8
  %51 = getelementptr inbounds [246 x double], [246 x double]* %10, i64 0, i64 4
  %52 = bitcast double* %40 to <2 x i64>*
  store <2 x i64> %50, <2 x i64>* %52, align 16
  %53 = bitcast double* %44 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %53, align 16
  %54 = getelementptr inbounds %struct.WeightFiltstr, %struct.WeightFiltstr* %3, i64 0, i32 2, i64 4
  %55 = getelementptr inbounds %struct.WeightFiltstr, %struct.WeightFiltstr* %3, i64 0, i32 3, i64 4
  %56 = getelementptr inbounds [7 x double], [7 x double]* %14, i64 0, i64 4
  %57 = bitcast double* %54 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 8
  %59 = getelementptr inbounds [246 x double], [246 x double]* %12, i64 0, i64 6
  %60 = bitcast double* %47 to <2 x i64>*
  store <2 x i64> %58, <2 x i64>* %60, align 16
  %61 = bitcast double* %55 to <2 x i64>*
  %62 = load <2 x i64>, <2 x i64>* %61, align 8
  %63 = getelementptr inbounds [246 x double], [246 x double]* %10, i64 0, i64 6
  %64 = bitcast double* %51 to <2 x i64>*
  store <2 x i64> %62, <2 x i64>* %64, align 16
  %65 = bitcast double* %56 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %65, align 16
  %66 = bitcast [7 x double]* %14 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 0.000000e+00>, <2 x double>* %66, align 16
  %67 = getelementptr inbounds [7 x double], [7 x double]* %14, i64 0, i64 6
  store double 0.000000e+00, double* %67, align 16
  %68 = getelementptr inbounds [7 x double], [7 x double]* %6, i64 0, i64 0
  %69 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 0
  %70 = getelementptr inbounds [7 x double], [7 x double]* %8, i64 0, i64 0
  %71 = getelementptr inbounds [7 x double], [7 x double]* %7, i64 0, i64 0
  %72 = getelementptr inbounds [7 x double], [7 x double]* %9, i64 0, i64 0
  %73 = bitcast [7 x double]* %8 to i64*
  %74 = bitcast [7 x double]* %9 to i64*
  %75 = getelementptr inbounds [7 x double], [7 x double]* %8, i64 0, i64 1
  %76 = getelementptr inbounds [7 x double], [7 x double]* %9, i64 0, i64 1
  %77 = getelementptr inbounds [7 x double], [7 x double]* %8, i64 0, i64 3
  %78 = getelementptr inbounds [7 x double], [7 x double]* %9, i64 0, i64 3
  %79 = getelementptr inbounds [7 x double], [7 x double]* %8, i64 0, i64 5
  %80 = getelementptr inbounds [7 x double], [7 x double]* %9, i64 0, i64 5
  %81 = getelementptr inbounds [7 x double], [7 x double]* %6, i64 0, i64 6
  %82 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 1
  %83 = getelementptr inbounds [7 x double], [7 x double]* %6, i64 0, i64 1
  %84 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 2
  %85 = getelementptr inbounds [7 x double], [7 x double]* %6, i64 0, i64 2
  %86 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 3
  %87 = getelementptr inbounds [7 x double], [7 x double]* %6, i64 0, i64 3
  %88 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 4
  %89 = getelementptr inbounds [7 x double], [7 x double]* %6, i64 0, i64 4
  %90 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 5
  %91 = getelementptr inbounds [7 x double], [7 x double]* %6, i64 0, i64 5
  %92 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 6
  %93 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 3
  %94 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 4
  %95 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 5
  %96 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 6
  %97 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 7
  %98 = bitcast double* %75 to <2 x double>*
  %99 = bitcast double* %76 to <2 x double>*
  %100 = bitcast double* %77 to <2 x double>*
  %101 = bitcast double* %78 to <2 x double>*
  %102 = bitcast double* %79 to <2 x double>*
  %103 = bitcast double* %80 to <2 x double>*
  br label %104

104:                                              ; preds = %383, %4
  %105 = phi i64 [ 300, %4 ], [ %395, %383 ]
  %106 = phi i32 [ 0, %4 ], [ %398, %383 ]
  %107 = phi double* [ %63, %4 ], [ %397, %383 ]
  %108 = phi double* [ %59, %4 ], [ %396, %383 ]
  %109 = phi double* [ %28, %4 ], [ %394, %383 ]
  %110 = add nsw i64 %105, -240
  br label %111

111:                                              ; preds = %111, %104
  %112 = phi i64 [ 0, %104 ], [ %152, %111 ]
  %113 = getelementptr inbounds %struct.WeightFiltstr, %struct.WeightFiltstr* %3, i64 0, i32 4, i64 %112
  %114 = bitcast double* %113 to <2 x double>*
  %115 = load <2 x double>, <2 x double>* %114, align 8
  %116 = getelementptr inbounds double, double* %113, i64 2
  %117 = bitcast double* %116 to <2 x double>*
  %118 = load <2 x double>, <2 x double>* %117, align 8
  %119 = add nuw nsw i64 %110, %112
  %120 = getelementptr inbounds [480 x double], [480 x double]* %5, i64 0, i64 %119
  %121 = bitcast double* %120 to <2 x double>*
  %122 = load <2 x double>, <2 x double>* %121, align 16
  %123 = getelementptr inbounds double, double* %120, i64 2
  %124 = bitcast double* %123 to <2 x double>*
  %125 = load <2 x double>, <2 x double>* %124, align 16
  %126 = fmul <2 x double> %115, %122
  %127 = fmul <2 x double> %118, %125
  %128 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %112
  %129 = bitcast double* %128 to <2 x double>*
  store <2 x double> %126, <2 x double>* %129, align 16
  %130 = getelementptr inbounds double, double* %128, i64 2
  %131 = bitcast double* %130 to <2 x double>*
  store <2 x double> %127, <2 x double>* %131, align 16
  %132 = or i64 %112, 4
  %133 = getelementptr inbounds %struct.WeightFiltstr, %struct.WeightFiltstr* %3, i64 0, i32 4, i64 %132
  %134 = bitcast double* %133 to <2 x double>*
  %135 = load <2 x double>, <2 x double>* %134, align 8
  %136 = getelementptr inbounds double, double* %133, i64 2
  %137 = bitcast double* %136 to <2 x double>*
  %138 = load <2 x double>, <2 x double>* %137, align 8
  %139 = add nuw nsw i64 %110, %132
  %140 = getelementptr inbounds [480 x double], [480 x double]* %5, i64 0, i64 %139
  %141 = bitcast double* %140 to <2 x double>*
  %142 = load <2 x double>, <2 x double>* %141, align 16
  %143 = getelementptr inbounds double, double* %140, i64 2
  %144 = bitcast double* %143 to <2 x double>*
  %145 = load <2 x double>, <2 x double>* %144, align 16
  %146 = fmul <2 x double> %135, %142
  %147 = fmul <2 x double> %138, %145
  %148 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %132
  %149 = bitcast double* %148 to <2 x double>*
  store <2 x double> %146, <2 x double>* %149, align 16
  %150 = getelementptr inbounds double, double* %148, i64 2
  %151 = bitcast double* %150 to <2 x double>*
  store <2 x double> %147, <2 x double>* %151, align 16
  %152 = add nuw nsw i64 %112, 8
  %153 = icmp eq i64 %152, 240
  br i1 %153, label %154, label %111, !llvm.loop !4

154:                                              ; preds = %111
  %155 = load double, double* %69, align 16
  %156 = fmul double %155, %155
  %157 = fadd double %156, 0.000000e+00
  br label %158

158:                                              ; preds = %400, %154
  %159 = phi double [ %157, %154 ], [ %405, %400 ]
  %160 = phi i64 [ 1, %154 ], [ %404, %400 ]
  %161 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %160
  %162 = load double, double* %161, align 8
  %163 = fmul double %162, %162
  %164 = add nuw nsw i64 %160, 1
  %165 = fadd double %159, %163
  %166 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %164
  %167 = load double, double* %166, align 8
  %168 = fmul double %167, %167
  %169 = add nuw nsw i64 %160, 2
  %170 = fadd double %165, %168
  %171 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %169
  %172 = load double, double* %171, align 8
  %173 = fmul double %172, %172
  %174 = add nuw nsw i64 %160, 3
  %175 = fadd double %170, %173
  %176 = icmp eq i64 %174, 240
  br i1 %176, label %190, label %400

177:                                              ; preds = %383
  %178 = bitcast double* %31 to i8*
  %179 = getelementptr inbounds [246 x double], [246 x double]* %12, i64 0, i64 240
  %180 = bitcast double* %179 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %178, i8* align 16 %180, i64 48, i1 false)
  %181 = bitcast double* %32 to i8*
  %182 = getelementptr inbounds [246 x double], [246 x double]* %10, i64 0, i64 240
  %183 = bitcast double* %182 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %181, i8* align 16 %183, i64 48, i1 false)
  %184 = bitcast double* %1 to i8*
  %185 = getelementptr inbounds [246 x double], [246 x double]* %12, i64 0, i64 6
  %186 = bitcast double* %185 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %184, i8* align 16 %186, i64 1920, i1 false)
  %187 = bitcast double* %2 to i8*
  %188 = getelementptr inbounds [246 x double], [246 x double]* %10, i64 0, i64 6
  %189 = bitcast double* %188 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %187, i8* align 16 %189, i64 1920, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 1920, i8* nonnull %26) #4
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %15) #4
  call void @llvm.lifetime.end.p0i8(i64 1968, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 1968, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %21) #4
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %20) #4
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %19) #4
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 3840, i8* nonnull %17) #4
  ret void

190:                                              ; preds = %158
  store double %175, double* %68, align 16
  %191 = load double, double* %82, align 8
  %192 = fmul double %155, %191
  %193 = fadd double %192, 0.000000e+00
  br label %194

194:                                              ; preds = %194, %190
  %195 = phi double [ %191, %190 ], [ %204, %194 ]
  %196 = phi double [ %193, %190 ], [ %207, %194 ]
  %197 = phi i64 [ 1, %190 ], [ %206, %194 ]
  %198 = getelementptr inbounds double, double* %82, i64 %197
  %199 = load double, double* %198, align 8
  %200 = fmul double %195, %199
  %201 = add nuw nsw i64 %197, 1
  %202 = fadd double %196, %200
  %203 = getelementptr inbounds double, double* %82, i64 %201
  %204 = load double, double* %203, align 8
  %205 = fmul double %199, %204
  %206 = add nuw nsw i64 %197, 2
  %207 = fadd double %202, %205
  %208 = icmp eq i64 %206, 239
  br i1 %208, label %209, label %194

209:                                              ; preds = %194
  store double %207, double* %83, align 8
  %210 = load double, double* %84, align 16
  %211 = fmul double %155, %210
  %212 = fadd double %211, 0.000000e+00
  %213 = load double, double* %93, align 8
  %214 = fmul double %191, %213
  %215 = fadd double %212, %214
  br label %216

216:                                              ; preds = %216, %209
  %217 = phi double [ %215, %209 ], [ %246, %216 ]
  %218 = phi i64 [ 2, %209 ], [ %245, %216 ]
  %219 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %218
  %220 = load double, double* %219, align 16
  %221 = getelementptr inbounds double, double* %84, i64 %218
  %222 = load double, double* %221, align 16
  %223 = fmul double %220, %222
  %224 = or i64 %218, 1
  %225 = fadd double %217, %223
  %226 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %224
  %227 = load double, double* %226, align 8
  %228 = getelementptr inbounds double, double* %84, i64 %224
  %229 = load double, double* %228, align 8
  %230 = fmul double %227, %229
  %231 = add nuw nsw i64 %218, 2
  %232 = fadd double %225, %230
  %233 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %231
  %234 = load double, double* %233, align 16
  %235 = getelementptr inbounds double, double* %84, i64 %231
  %236 = load double, double* %235, align 16
  %237 = fmul double %234, %236
  %238 = add nuw nsw i64 %218, 3
  %239 = fadd double %232, %237
  %240 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %238
  %241 = load double, double* %240, align 8
  %242 = getelementptr inbounds double, double* %84, i64 %238
  %243 = load double, double* %242, align 8
  %244 = fmul double %241, %243
  %245 = add nuw nsw i64 %218, 4
  %246 = fadd double %239, %244
  %247 = icmp eq i64 %245, 238
  br i1 %247, label %248, label %216

248:                                              ; preds = %216
  store double %246, double* %85, align 16
  %249 = load double, double* %86, align 8
  %250 = fmul double %155, %249
  %251 = fadd double %250, 0.000000e+00
  %252 = load double, double* %94, align 16
  %253 = fmul double %191, %252
  %254 = fadd double %251, %253
  br label %255

255:                                              ; preds = %255, %248
  %256 = phi double [ %254, %248 ], [ %292, %255 ]
  %257 = phi i64 [ 2, %248 ], [ %291, %255 ]
  %258 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %257
  %259 = load double, double* %258, align 8
  %260 = getelementptr inbounds double, double* %86, i64 %257
  %261 = load double, double* %260, align 8
  %262 = fmul double %259, %261
  %263 = add nuw nsw i64 %257, 1
  %264 = fadd double %256, %262
  %265 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %263
  %266 = load double, double* %265, align 8
  %267 = getelementptr inbounds double, double* %86, i64 %263
  %268 = load double, double* %267, align 8
  %269 = fmul double %266, %268
  %270 = add nuw nsw i64 %257, 2
  %271 = fadd double %264, %269
  %272 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %270
  %273 = load double, double* %272, align 8
  %274 = getelementptr inbounds double, double* %86, i64 %270
  %275 = load double, double* %274, align 8
  %276 = fmul double %273, %275
  %277 = add nuw nsw i64 %257, 3
  %278 = fadd double %271, %276
  %279 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %277
  %280 = load double, double* %279, align 8
  %281 = getelementptr inbounds double, double* %86, i64 %277
  %282 = load double, double* %281, align 8
  %283 = fmul double %280, %282
  %284 = add nuw nsw i64 %257, 4
  %285 = fadd double %278, %283
  %286 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %284
  %287 = load double, double* %286, align 8
  %288 = getelementptr inbounds double, double* %86, i64 %284
  %289 = load double, double* %288, align 8
  %290 = fmul double %287, %289
  %291 = add nuw nsw i64 %257, 5
  %292 = fadd double %285, %290
  %293 = icmp eq i64 %291, 237
  br i1 %293, label %294, label %255

294:                                              ; preds = %255
  store double %292, double* %87, align 8
  %295 = load double, double* %88, align 16
  %296 = fmul double %155, %295
  %297 = fadd double %296, 0.000000e+00
  %298 = load double, double* %95, align 8
  %299 = fmul double %191, %298
  %300 = fadd double %297, %299
  br label %301

301:                                              ; preds = %301, %294
  %302 = phi double [ %300, %294 ], [ %324, %301 ]
  %303 = phi i64 [ 2, %294 ], [ %323, %301 ]
  %304 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %303
  %305 = load double, double* %304, align 8
  %306 = getelementptr inbounds double, double* %88, i64 %303
  %307 = load double, double* %306, align 8
  %308 = fmul double %305, %307
  %309 = add nuw nsw i64 %303, 1
  %310 = fadd double %302, %308
  %311 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %309
  %312 = load double, double* %311, align 8
  %313 = getelementptr inbounds double, double* %88, i64 %309
  %314 = load double, double* %313, align 8
  %315 = fmul double %312, %314
  %316 = add nuw nsw i64 %303, 2
  %317 = fadd double %310, %315
  %318 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %316
  %319 = load double, double* %318, align 8
  %320 = getelementptr inbounds double, double* %88, i64 %316
  %321 = load double, double* %320, align 8
  %322 = fmul double %319, %321
  %323 = add nuw nsw i64 %303, 3
  %324 = fadd double %317, %322
  %325 = icmp eq i64 %323, 236
  br i1 %325, label %326, label %301

326:                                              ; preds = %301
  store double %324, double* %89, align 16
  %327 = load double, double* %90, align 8
  %328 = fmul double %155, %327
  %329 = fadd double %328, 0.000000e+00
  %330 = load double, double* %96, align 16
  %331 = fmul double %191, %330
  %332 = fadd double %329, %331
  br label %333

333:                                              ; preds = %406, %326
  %334 = phi double [ %332, %326 ], [ %427, %406 ]
  %335 = phi i64 [ 2, %326 ], [ %426, %406 ]
  %336 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %335
  %337 = load double, double* %336, align 16
  %338 = getelementptr inbounds double, double* %90, i64 %335
  %339 = load double, double* %338, align 8
  %340 = fmul double %337, %339
  %341 = or i64 %335, 1
  %342 = fadd double %334, %340
  %343 = icmp eq i64 %341, 235
  br i1 %343, label %344, label %406

344:                                              ; preds = %333
  store double %342, double* %91, align 8
  %345 = load double, double* %92, align 16
  %346 = fmul double %155, %345
  %347 = fadd double %346, 0.000000e+00
  %348 = load double, double* %97, align 8
  %349 = fmul double %191, %348
  %350 = fadd double %347, %349
  br label %351

351:                                              ; preds = %351, %344
  %352 = phi double [ %350, %344 ], [ %381, %351 ]
  %353 = phi i64 [ 2, %344 ], [ %380, %351 ]
  %354 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %353
  %355 = load double, double* %354, align 16
  %356 = getelementptr inbounds double, double* %92, i64 %353
  %357 = load double, double* %356, align 16
  %358 = fmul double %355, %357
  %359 = or i64 %353, 1
  %360 = fadd double %352, %358
  %361 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %359
  %362 = load double, double* %361, align 8
  %363 = getelementptr inbounds double, double* %92, i64 %359
  %364 = load double, double* %363, align 8
  %365 = fmul double %362, %364
  %366 = add nuw nsw i64 %353, 2
  %367 = fadd double %360, %365
  %368 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %366
  %369 = load double, double* %368, align 16
  %370 = getelementptr inbounds double, double* %92, i64 %366
  %371 = load double, double* %370, align 16
  %372 = fmul double %369, %371
  %373 = add nuw nsw i64 %353, 3
  %374 = fadd double %367, %372
  %375 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %373
  %376 = load double, double* %375, align 8
  %377 = getelementptr inbounds double, double* %92, i64 %373
  %378 = load double, double* %377, align 8
  %379 = fmul double %376, %378
  %380 = add nuw nsw i64 %353, 4
  %381 = fadd double %374, %379
  %382 = icmp eq i64 %380, 234
  br i1 %382, label %383, label %351

383:                                              ; preds = %351
  store double %381, double* %81, align 16
  %384 = fmul double %175, 1.010000e+00
  %385 = fadd double %384, 1.000000e+00
  store double %385, double* %68, align 16
  %386 = call double @WebRtcIsac_LevDurb(double* nonnull %70, double* nonnull %71, double* nonnull %68, i64 6) #4
  %387 = load i64, i64* %73, align 16
  store i64 %387, i64* %74, align 16
  %388 = load <2 x double>, <2 x double>* %98, align 8
  %389 = fmul <2 x double> %388, <double 9.000000e-01, double 8.100000e-01>
  store <2 x double> %389, <2 x double>* %99, align 8
  %390 = load <2 x double>, <2 x double>* %100, align 8
  %391 = fmul <2 x double> %390, <double 0x3FE753F7CED91688, double 0x3FE4FEC56D5CFAAE>
  store <2 x double> %391, <2 x double>* %101, align 8
  %392 = load <2 x double>, <2 x double>* %102, align 8
  %393 = fmul <2 x double> %392, <double 0x3FE2E54B48D3AE6A, double 0x3FE101908E581CF9>
  store <2 x double> %393, <2 x double>* %103, align 8
  call fastcc void @WebRtcIsac_ZeroPoleFilter(double* %109, double* nonnull %70, double* nonnull %72, double* %108)
  call fastcc void @WebRtcIsac_ZeroPoleFilter(double* %109, double* nonnull %72, double* nonnull %33, double* %107)
  %394 = getelementptr inbounds double, double* %109, i64 60
  %395 = add nuw nsw i64 %105, 60
  %396 = getelementptr inbounds double, double* %108, i64 60
  %397 = getelementptr inbounds double, double* %107, i64 60
  %398 = add nuw nsw i32 %106, 1
  %399 = icmp eq i32 %398, 4
  br i1 %399, label %177, label %104

400:                                              ; preds = %158
  %401 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %174
  %402 = load double, double* %401, align 8
  %403 = fmul double %402, %402
  %404 = add nuw nsw i64 %160, 4
  %405 = fadd double %175, %403
  br label %158

406:                                              ; preds = %333
  %407 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %341
  %408 = load double, double* %407, align 8
  %409 = getelementptr inbounds double, double* %90, i64 %341
  %410 = load double, double* %409, align 8
  %411 = fmul double %408, %410
  %412 = add nuw nsw i64 %335, 2
  %413 = fadd double %342, %411
  %414 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %412
  %415 = load double, double* %414, align 16
  %416 = getelementptr inbounds double, double* %90, i64 %412
  %417 = load double, double* %416, align 8
  %418 = fmul double %415, %417
  %419 = add nuw nsw i64 %335, 3
  %420 = fadd double %413, %418
  %421 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 %419
  %422 = load double, double* %421, align 8
  %423 = getelementptr inbounds double, double* %90, i64 %419
  %424 = load double, double* %423, align 8
  %425 = fmul double %422, %424
  %426 = add nuw nsw i64 %335, 4
  %427 = fadd double %420, %425
  br label %333
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare double @WebRtcIsac_LevDurb(double*, double*, double*, i64) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @WebRtcIsac_ZeroPoleFilter(double* nocapture readonly, double* nocapture readonly, double* nocapture readonly, double* nocapture) unnamed_addr #0 {
  %5 = getelementptr inbounds double, double* %1, i64 1
  %6 = getelementptr inbounds double, double* %1, i64 2
  %7 = getelementptr inbounds double, double* %1, i64 3
  %8 = getelementptr inbounds double, double* %1, i64 4
  %9 = getelementptr inbounds double, double* %1, i64 5
  %10 = getelementptr inbounds double, double* %1, i64 6
  %11 = bitcast double* %3 to i8*
  %12 = getelementptr double, double* %3, i64 60
  %13 = getelementptr double, double* %0, i64 -6
  %14 = getelementptr double, double* %0, i64 60
  %15 = getelementptr double, double* %1, i64 6
  %16 = bitcast double* %15 to i8*
  %17 = getelementptr i8, i8* %16, i64 1
  %18 = icmp ugt double* %14, %3
  %19 = icmp ult double* %13, %12
  %20 = and i1 %18, %19
  %21 = icmp ugt i8* %17, %11
  %22 = icmp ult double* %10, %12
  %23 = and i1 %21, %22
  %24 = or i1 %20, %23
  br i1 %24, label %87, label %25

25:                                               ; preds = %4
  %26 = load double, double* %1, align 8, !alias.scope !6
  %27 = insertelement <2 x double> undef, double %26, i32 0
  %28 = shufflevector <2 x double> %27, <2 x double> undef, <2 x i32> zeroinitializer
  %29 = load double, double* %5, align 8, !alias.scope !6
  %30 = insertelement <2 x double> undef, double %29, i32 0
  %31 = shufflevector <2 x double> %30, <2 x double> undef, <2 x i32> zeroinitializer
  %32 = load double, double* %6, align 8, !alias.scope !6
  %33 = insertelement <2 x double> undef, double %32, i32 0
  %34 = shufflevector <2 x double> %33, <2 x double> undef, <2 x i32> zeroinitializer
  %35 = load double, double* %7, align 8, !alias.scope !6
  %36 = insertelement <2 x double> undef, double %35, i32 0
  %37 = shufflevector <2 x double> %36, <2 x double> undef, <2 x i32> zeroinitializer
  %38 = load double, double* %8, align 8, !alias.scope !6
  %39 = insertelement <2 x double> undef, double %38, i32 0
  %40 = shufflevector <2 x double> %39, <2 x double> undef, <2 x i32> zeroinitializer
  %41 = load double, double* %9, align 8, !alias.scope !6
  %42 = insertelement <2 x double> undef, double %41, i32 0
  %43 = shufflevector <2 x double> %42, <2 x double> undef, <2 x i32> zeroinitializer
  %44 = load double, double* %10, align 8, !alias.scope !6
  %45 = insertelement <2 x double> undef, double %44, i32 0
  %46 = shufflevector <2 x double> %45, <2 x double> undef, <2 x i32> zeroinitializer
  br label %47

47:                                               ; preds = %47, %25
  %48 = phi i64 [ 0, %25 ], [ %85, %47 ]
  %49 = getelementptr double, double* %3, i64 %48
  %50 = getelementptr double, double* %0, i64 %48
  %51 = bitcast double* %50 to <2 x double>*
  %52 = load <2 x double>, <2 x double>* %51, align 8, !alias.scope !9
  %53 = fmul <2 x double> %52, %28
  %54 = getelementptr inbounds double, double* %50, i64 -1
  %55 = bitcast double* %54 to <2 x double>*
  %56 = load <2 x double>, <2 x double>* %55, align 8, !alias.scope !9
  %57 = fmul <2 x double> %31, %56
  %58 = fadd <2 x double> %53, %57
  %59 = getelementptr inbounds double, double* %50, i64 -2
  %60 = bitcast double* %59 to <2 x double>*
  %61 = load <2 x double>, <2 x double>* %60, align 8, !alias.scope !9
  %62 = fmul <2 x double> %34, %61
  %63 = fadd <2 x double> %58, %62
  %64 = getelementptr inbounds double, double* %50, i64 -3
  %65 = bitcast double* %64 to <2 x double>*
  %66 = load <2 x double>, <2 x double>* %65, align 8, !alias.scope !9
  %67 = fmul <2 x double> %37, %66
  %68 = fadd <2 x double> %63, %67
  %69 = getelementptr inbounds double, double* %50, i64 -4
  %70 = bitcast double* %69 to <2 x double>*
  %71 = load <2 x double>, <2 x double>* %70, align 8, !alias.scope !9
  %72 = fmul <2 x double> %40, %71
  %73 = fadd <2 x double> %68, %72
  %74 = getelementptr inbounds double, double* %50, i64 -5
  %75 = bitcast double* %74 to <2 x double>*
  %76 = load <2 x double>, <2 x double>* %75, align 8, !alias.scope !9
  %77 = fmul <2 x double> %43, %76
  %78 = fadd <2 x double> %73, %77
  %79 = getelementptr inbounds double, double* %50, i64 -6
  %80 = bitcast double* %79 to <2 x double>*
  %81 = load <2 x double>, <2 x double>* %80, align 8, !alias.scope !9
  %82 = fmul <2 x double> %46, %81
  %83 = fadd <2 x double> %78, %82
  %84 = bitcast double* %49 to <2 x double>*
  store <2 x double> %83, <2 x double>* %84, align 8, !alias.scope !11, !noalias !13
  %85 = add i64 %48, 2
  %86 = icmp eq i64 %85, 60
  br i1 %86, label %128, label %47, !llvm.loop !14

87:                                               ; preds = %4, %87
  %88 = phi i64 [ %126, %87 ], [ 0, %4 ]
  %89 = phi double* [ %124, %87 ], [ %3, %4 ]
  %90 = phi double* [ %125, %87 ], [ %0, %4 ]
  %91 = load double, double* %90, align 8
  %92 = load double, double* %1, align 8
  %93 = fmul double %91, %92
  %94 = load double, double* %5, align 8
  %95 = getelementptr inbounds double, double* %90, i64 -1
  %96 = load double, double* %95, align 8
  %97 = fmul double %94, %96
  %98 = fadd double %93, %97
  %99 = load double, double* %6, align 8
  %100 = getelementptr inbounds double, double* %90, i64 -2
  %101 = load double, double* %100, align 8
  %102 = fmul double %99, %101
  %103 = fadd double %98, %102
  %104 = load double, double* %7, align 8
  %105 = getelementptr inbounds double, double* %90, i64 -3
  %106 = load double, double* %105, align 8
  %107 = fmul double %104, %106
  %108 = fadd double %103, %107
  %109 = load double, double* %8, align 8
  %110 = getelementptr inbounds double, double* %90, i64 -4
  %111 = load double, double* %110, align 8
  %112 = fmul double %109, %111
  %113 = fadd double %108, %112
  %114 = load double, double* %9, align 8
  %115 = getelementptr inbounds double, double* %90, i64 -5
  %116 = load double, double* %115, align 8
  %117 = fmul double %114, %116
  %118 = fadd double %113, %117
  %119 = load double, double* %10, align 8
  %120 = getelementptr inbounds double, double* %90, i64 -6
  %121 = load double, double* %120, align 8
  %122 = fmul double %119, %121
  %123 = fadd double %118, %122
  %124 = getelementptr inbounds double, double* %89, i64 1
  store double %123, double* %89, align 8
  %125 = getelementptr inbounds double, double* %90, i64 1
  %126 = add nuw nsw i64 %88, 1
  %127 = icmp eq i64 %126, 60
  br i1 %127, label %128, label %87, !llvm.loop !15

128:                                              ; preds = %47, %87
  %129 = load double, double* %2, align 8
  %130 = fcmp ogt double %129, 9.999000e-01
  %131 = fcmp olt double %129, 1.000100e+00
  %132 = and i1 %130, %131
  br i1 %132, label %133, label %178

133:                                              ; preds = %128
  %134 = getelementptr inbounds double, double* %2, i64 1
  %135 = getelementptr inbounds double, double* %2, i64 2
  %136 = getelementptr inbounds double, double* %2, i64 3
  %137 = getelementptr inbounds double, double* %2, i64 4
  %138 = getelementptr inbounds double, double* %2, i64 5
  %139 = getelementptr inbounds double, double* %2, i64 6
  %140 = getelementptr double, double* %3, i64 -1
  %141 = load double, double* %140, align 8
  br label %142

142:                                              ; preds = %142, %133
  %143 = phi double [ %141, %133 ], [ %175, %142 ]
  %144 = phi i64 [ 0, %133 ], [ %176, %142 ]
  %145 = phi double* [ %3, %133 ], [ %173, %142 ]
  %146 = load double, double* %134, align 8
  %147 = fmul double %146, %143
  %148 = load double, double* %135, align 8
  %149 = getelementptr inbounds double, double* %145, i64 -2
  %150 = load double, double* %149, align 8
  %151 = fmul double %148, %150
  %152 = fadd double %147, %151
  %153 = load double, double* %136, align 8
  %154 = getelementptr inbounds double, double* %145, i64 -3
  %155 = load double, double* %154, align 8
  %156 = fmul double %153, %155
  %157 = fadd double %152, %156
  %158 = load double, double* %137, align 8
  %159 = getelementptr inbounds double, double* %145, i64 -4
  %160 = load double, double* %159, align 8
  %161 = fmul double %158, %160
  %162 = fadd double %157, %161
  %163 = load double, double* %138, align 8
  %164 = getelementptr inbounds double, double* %145, i64 -5
  %165 = load double, double* %164, align 8
  %166 = fmul double %163, %165
  %167 = fadd double %162, %166
  %168 = load double, double* %139, align 8
  %169 = getelementptr inbounds double, double* %145, i64 -6
  %170 = load double, double* %169, align 8
  %171 = fmul double %168, %170
  %172 = fadd double %167, %171
  %173 = getelementptr inbounds double, double* %145, i64 1
  %174 = load double, double* %145, align 8
  %175 = fsub double %174, %172
  store double %175, double* %145, align 8
  %176 = add nuw nsw i64 %144, 1
  %177 = icmp eq i64 %176, 60
  br i1 %177, label %231, label %142

178:                                              ; preds = %128
  %179 = fdiv double 1.000000e+00, %129
  %180 = getelementptr inbounds double, double* %2, i64 1
  %181 = getelementptr inbounds double, double* %2, i64 2
  %182 = getelementptr inbounds double, double* %2, i64 3
  %183 = getelementptr inbounds double, double* %2, i64 4
  %184 = getelementptr inbounds double, double* %2, i64 5
  %185 = getelementptr inbounds double, double* %2, i64 6
  %186 = getelementptr double, double* %3, i64 -1
  %187 = load double, double* %186, align 8
  br label %188

188:                                              ; preds = %188, %178
  %189 = phi double [ %187, %178 ], [ %227, %188 ]
  %190 = phi i64 [ 0, %178 ], [ %229, %188 ]
  %191 = phi double* [ %3, %178 ], [ %228, %188 ]
  %192 = load double, double* %191, align 8
  %193 = fmul double %179, %192
  store double %193, double* %191, align 8
  %194 = load double, double* %180, align 8
  %195 = fmul double %179, %194
  %196 = fmul double %195, %189
  %197 = fsub double %193, %196
  store double %197, double* %191, align 8
  %198 = load double, double* %181, align 8
  %199 = fmul double %179, %198
  %200 = getelementptr inbounds double, double* %191, i64 -2
  %201 = load double, double* %200, align 8
  %202 = fmul double %199, %201
  %203 = fsub double %197, %202
  store double %203, double* %191, align 8
  %204 = load double, double* %182, align 8
  %205 = fmul double %179, %204
  %206 = getelementptr inbounds double, double* %191, i64 -3
  %207 = load double, double* %206, align 8
  %208 = fmul double %205, %207
  %209 = fsub double %203, %208
  store double %209, double* %191, align 8
  %210 = load double, double* %183, align 8
  %211 = fmul double %179, %210
  %212 = getelementptr inbounds double, double* %191, i64 -4
  %213 = load double, double* %212, align 8
  %214 = fmul double %211, %213
  %215 = fsub double %209, %214
  store double %215, double* %191, align 8
  %216 = load double, double* %184, align 8
  %217 = fmul double %179, %216
  %218 = getelementptr inbounds double, double* %191, i64 -5
  %219 = load double, double* %218, align 8
  %220 = fmul double %217, %219
  %221 = fsub double %215, %220
  store double %221, double* %191, align 8
  %222 = load double, double* %185, align 8
  %223 = fmul double %179, %222
  %224 = getelementptr inbounds double, double* %191, i64 -6
  %225 = load double, double* %224, align 8
  %226 = fmul double %223, %225
  %227 = fsub double %221, %226
  store double %227, double* %191, align 8
  %228 = getelementptr inbounds double, double* %191, i64 1
  %229 = add nuw nsw i64 %190, 1
  %230 = icmp eq i64 %229, 60
  br i1 %230, label %231, label %188

231:                                              ; preds = %188, %142
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = !{!12}
!12 = distinct !{!12, !8}
!13 = !{!10, !7}
!14 = distinct !{!14, !5}
!15 = distinct !{!15, !5}
