; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/x86/vp9_error_avx2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/x86/vp9_error_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden i64 @vp9_block_error_avx2(i32* nocapture readonly, i32* nocapture readonly, i64, i64* nocapture) local_unnamed_addr #0 {
  %5 = icmp eq i64 %2, 16
  br i1 %5, label %8, label %6

6:                                                ; preds = %4
  %7 = icmp sgt i64 %2, 0
  br i1 %7, label %36, label %90

8:                                                ; preds = %4
  %9 = bitcast i32* %0 to <8 x i32>*
  %10 = load <8 x i32>, <8 x i32>* %9, align 1
  %11 = getelementptr inbounds i32, i32* %0, i64 8
  %12 = bitcast i32* %11 to <8 x i32>*
  %13 = load <8 x i32>, <8 x i32>* %12, align 1
  %14 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %10, <8 x i32> %13) #3
  %15 = bitcast i32* %1 to <8 x i32>*
  %16 = load <8 x i32>, <8 x i32>* %15, align 1
  %17 = getelementptr inbounds i32, i32* %1, i64 8
  %18 = bitcast i32* %17 to <8 x i32>*
  %19 = load <8 x i32>, <8 x i32>* %18, align 1
  %20 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %16, <8 x i32> %19) #3
  %21 = sub <16 x i16> %20, %14
  %22 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %21, <16 x i16> %21) #3
  %23 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %14, <16 x i16> %14) #3
  %24 = bitcast <8 x i32> %22 to <32 x i8>
  %25 = shufflevector <32 x i8> %24, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = bitcast <8 x i32> %23 to <32 x i8>
  %27 = shufflevector <32 x i8> %26, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <32 x i8> %25 to <8 x i32>
  %29 = add <8 x i32> %22, %28
  %30 = bitcast <32 x i8> %27 to <8 x i32>
  %31 = add <8 x i32> %23, %30
  %32 = shufflevector <8 x i32> %29, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %33 = bitcast <8 x i32> %32 to <4 x i64>
  %34 = shufflevector <8 x i32> %31, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %35 = bitcast <8 x i32> %34 to <4 x i64>
  br label %90

36:                                               ; preds = %6, %36
  %37 = phi i64 [ %88, %36 ], [ 0, %6 ]
  %38 = phi <4 x i64> [ %86, %36 ], [ zeroinitializer, %6 ]
  %39 = phi <4 x i64> [ %87, %36 ], [ zeroinitializer, %6 ]
  %40 = getelementptr inbounds i32, i32* %0, i64 %37
  %41 = bitcast i32* %40 to <8 x i32>*
  %42 = load <8 x i32>, <8 x i32>* %41, align 1
  %43 = getelementptr inbounds i32, i32* %40, i64 8
  %44 = bitcast i32* %43 to <8 x i32>*
  %45 = load <8 x i32>, <8 x i32>* %44, align 1
  %46 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %42, <8 x i32> %45) #3
  %47 = getelementptr inbounds i32, i32* %1, i64 %37
  %48 = bitcast i32* %47 to <8 x i32>*
  %49 = load <8 x i32>, <8 x i32>* %48, align 1
  %50 = getelementptr inbounds i32, i32* %47, i64 8
  %51 = bitcast i32* %50 to <8 x i32>*
  %52 = load <8 x i32>, <8 x i32>* %51, align 1
  %53 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %49, <8 x i32> %52) #3
  %54 = getelementptr inbounds i32, i32* %40, i64 16
  %55 = bitcast i32* %54 to <8 x i32>*
  %56 = load <8 x i32>, <8 x i32>* %55, align 1
  %57 = getelementptr inbounds i32, i32* %54, i64 8
  %58 = bitcast i32* %57 to <8 x i32>*
  %59 = load <8 x i32>, <8 x i32>* %58, align 1
  %60 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %56, <8 x i32> %59) #3
  %61 = getelementptr inbounds i32, i32* %47, i64 16
  %62 = bitcast i32* %61 to <8 x i32>*
  %63 = load <8 x i32>, <8 x i32>* %62, align 1
  %64 = getelementptr inbounds i32, i32* %61, i64 8
  %65 = bitcast i32* %64 to <8 x i32>*
  %66 = load <8 x i32>, <8 x i32>* %65, align 1
  %67 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %63, <8 x i32> %66) #3
  %68 = sub <16 x i16> %53, %46
  %69 = sub <16 x i16> %67, %60
  %70 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %68, <16 x i16> %68) #3
  %71 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %69, <16 x i16> %69) #3
  %72 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %46, <16 x i16> %46) #3
  %73 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %60, <16 x i16> %60) #3
  %74 = add <8 x i32> %71, %70
  %75 = add <8 x i32> %73, %72
  %76 = shufflevector <8 x i32> %74, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %77 = bitcast <8 x i32> %76 to <4 x i64>
  %78 = shufflevector <8 x i32> %74, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %79 = bitcast <8 x i32> %78 to <4 x i64>
  %80 = shufflevector <8 x i32> %75, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %81 = bitcast <8 x i32> %80 to <4 x i64>
  %82 = shufflevector <8 x i32> %75, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %83 = bitcast <8 x i32> %82 to <4 x i64>
  %84 = add <4 x i64> %38, %77
  %85 = add <4 x i64> %39, %81
  %86 = add <4 x i64> %84, %79
  %87 = add <4 x i64> %85, %83
  %88 = add nuw i64 %37, 32
  %89 = icmp slt i64 %88, %2
  br i1 %89, label %36, label %90

90:                                               ; preds = %36, %6, %8
  %91 = phi <4 x i64> [ %35, %8 ], [ zeroinitializer, %6 ], [ %87, %36 ]
  %92 = phi <4 x i64> [ %33, %8 ], [ zeroinitializer, %6 ], [ %86, %36 ]
  %93 = bitcast <4 x i64> %92 to <32 x i8>
  %94 = shufflevector <32 x i8> %93, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %95 = bitcast <32 x i8> %94 to <4 x i64>
  %96 = bitcast <4 x i64> %91 to <32 x i8>
  %97 = shufflevector <32 x i8> %96, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %98 = bitcast <32 x i8> %97 to <4 x i64>
  %99 = add <4 x i64> %92, %95
  %100 = add <4 x i64> %91, %98
  %101 = shufflevector <4 x i64> %99, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %102 = bitcast <4 x i64> %99 to <8 x i32>
  %103 = shufflevector <8 x i32> %102, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %104 = bitcast <4 x i32> %103 to <2 x i64>
  %105 = add <2 x i64> %101, %104
  %106 = shufflevector <4 x i64> %100, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %107 = bitcast <4 x i64> %100 to <8 x i32>
  %108 = shufflevector <8 x i32> %107, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %109 = bitcast <4 x i32> %108 to <2 x i64>
  %110 = add <2 x i64> %106, %109
  %111 = extractelement <2 x i64> %105, i32 0
  %112 = extractelement <2 x i64> %110, i32 0
  store i64 %112, i64* %3, align 1
  ret i64 %111
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @vp9_block_error_fp_avx2(i32* nocapture readonly, i32* nocapture readonly, i32) local_unnamed_addr #1 {
  %4 = icmp eq i32 %2, 16
  br i1 %4, label %7, label %5

5:                                                ; preds = %3
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %28, label %57

7:                                                ; preds = %3
  %8 = bitcast i32* %0 to <8 x i32>*
  %9 = load <8 x i32>, <8 x i32>* %8, align 1
  %10 = getelementptr inbounds i32, i32* %0, i64 8
  %11 = bitcast i32* %10 to <8 x i32>*
  %12 = load <8 x i32>, <8 x i32>* %11, align 1
  %13 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %9, <8 x i32> %12) #3
  %14 = bitcast i32* %1 to <8 x i32>*
  %15 = load <8 x i32>, <8 x i32>* %14, align 1
  %16 = getelementptr inbounds i32, i32* %1, i64 8
  %17 = bitcast i32* %16 to <8 x i32>*
  %18 = load <8 x i32>, <8 x i32>* %17, align 1
  %19 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %15, <8 x i32> %18) #3
  %20 = sub <16 x i16> %19, %13
  %21 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %20, <16 x i16> %20) #3
  %22 = bitcast <8 x i32> %21 to <32 x i8>
  %23 = shufflevector <32 x i8> %22, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %24 = bitcast <32 x i8> %23 to <8 x i32>
  %25 = add <8 x i32> %21, %24
  %26 = shufflevector <8 x i32> %25, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %27 = bitcast <8 x i32> %26 to <4 x i64>
  br label %57

28:                                               ; preds = %5, %28
  %29 = phi i32* [ %53, %28 ], [ %0, %5 ]
  %30 = phi i32* [ %54, %28 ], [ %1, %5 ]
  %31 = phi i32 [ %55, %28 ], [ 0, %5 ]
  %32 = phi <4 x i64> [ %52, %28 ], [ zeroinitializer, %5 ]
  %33 = bitcast i32* %29 to <8 x i32>*
  %34 = load <8 x i32>, <8 x i32>* %33, align 1
  %35 = getelementptr inbounds i32, i32* %29, i64 8
  %36 = bitcast i32* %35 to <8 x i32>*
  %37 = load <8 x i32>, <8 x i32>* %36, align 1
  %38 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %34, <8 x i32> %37) #3
  %39 = bitcast i32* %30 to <8 x i32>*
  %40 = load <8 x i32>, <8 x i32>* %39, align 1
  %41 = getelementptr inbounds i32, i32* %30, i64 8
  %42 = bitcast i32* %41 to <8 x i32>*
  %43 = load <8 x i32>, <8 x i32>* %42, align 1
  %44 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %40, <8 x i32> %43) #3
  %45 = sub <16 x i16> %44, %38
  %46 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %45, <16 x i16> %45) #3
  %47 = shufflevector <8 x i32> %46, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %48 = bitcast <8 x i32> %47 to <4 x i64>
  %49 = shufflevector <8 x i32> %46, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %50 = bitcast <8 x i32> %49 to <4 x i64>
  %51 = add <4 x i64> %32, %48
  %52 = add <4 x i64> %51, %50
  %53 = getelementptr inbounds i32, i32* %29, i64 16
  %54 = getelementptr inbounds i32, i32* %30, i64 16
  %55 = add nuw nsw i32 %31, 16
  %56 = icmp slt i32 %55, %2
  br i1 %56, label %28, label %57

57:                                               ; preds = %28, %5, %7
  %58 = phi <4 x i64> [ %27, %7 ], [ zeroinitializer, %5 ], [ %52, %28 ]
  %59 = bitcast <4 x i64> %58 to <32 x i8>
  %60 = shufflevector <32 x i8> %59, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %61 = bitcast <32 x i8> %60 to <4 x i64>
  %62 = add <4 x i64> %58, %61
  %63 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %64 = bitcast <4 x i64> %62 to <8 x i32>
  %65 = shufflevector <8 x i32> %64, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %66 = bitcast <4 x i32> %65 to <2 x i64>
  %67 = add <2 x i64> %63, %66
  %68 = extractelement <2 x i64> %67, i32 0
  ret i64 %68
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
