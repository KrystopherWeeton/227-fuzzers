; ModuleID = '../../base/allocator/partition_allocator/extended_api.cc'
source_filename = "../../base/allocator/partition_allocator/extended_api.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::PartitionRoot" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, %"class.base::internal::MaybeSpinLock", [4 x i8], [128 x %"struct.base::internal::PartitionBucket"], %"struct.base::internal::PartitionBucket", i8, [7 x i8], %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", i8*, i8*, i8*, %"struct.base::internal::PartitionSuperPageExtentEntry"*, %"struct.base::internal::PartitionSuperPageExtentEntry"*, %"struct.base::internal::PartitionDirectMapExtent"*, [16 x %"struct.base::internal::SlotSpanMetadata"*], i16, [6 x i8], i64, %"struct.std::__1::atomic", [4 x i8] }>
%"class.base::internal::MaybeSpinLock" = type { %"class.base::internal::SpinningMutex" }
%"class.base::internal::SpinningMutex" = type { %"struct.std::__1::atomic" }
%"struct.base::internal::PartitionBucket" = type { %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"*, i32, i32, i64 }
%"struct.base::internal::SlotSpanMetadata" = type <{ %"class.base::internal::PartitionFreelistEntry"*, %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::PartitionBucket"*, i16, i16, i8, i8 }>
%"class.base::internal::PartitionFreelistEntry" = type { %"struct.base::internal::EncodedPartitionFreelistEntry"*, i64 }
%"struct.base::internal::EncodedPartitionFreelistEntry" = type { [8 x i8], [8 x i8] }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i64 }
%"struct.base::internal::PartitionSuperPageExtentEntry" = type { %"struct.base::PartitionRoot"*, i8*, i8*, %"struct.base::internal::PartitionSuperPageExtentEntry"* }
%"struct.base::internal::PartitionDirectMapExtent" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::internal::ThreadCacheRegistry" = type <{ %"class.base::internal::MaybeSpinLock", [4 x i8], %"class.base::internal::ThreadCache"*, %"class.base::TimeDelta", i8, [7 x i8] }>
%"class.base::internal::ThreadCache" = type { [89 x %"struct.base::internal::ThreadCache::Bucket"], i64, %"struct.std::__1::atomic.11", %"struct.base::ThreadCacheStats", %"struct.base::PartitionRoot"*, %"class.base::internal::ThreadCache"*, %"class.base::internal::ThreadCache"* }
%"struct.base::internal::ThreadCache::Bucket" = type <{ %"class.base::internal::PartitionFreelistEntry"*, i8, %"struct.std::__1::atomic.6", i16, [4 x i8] }>
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl.9" }
%"struct.std::__1::__cxx_atomic_impl.9" = type { %"struct.std::__1::__cxx_atomic_base_impl.10" }
%"struct.std::__1::__cxx_atomic_base_impl.10" = type { i8 }
%"struct.std::__1::atomic.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i8 }
%"struct.base::ThreadCacheStats" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [129 x i64], [129 x i64] }
%"class.base::TimeDelta" = type { i64 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal34DisableThreadCacheForRootIfEnabledEPNS_13PartitionRootILb1EEE(%"struct.base::PartitionRoot"*) local_unnamed_addr #0 {
  %2 = icmp eq %"struct.base::PartitionRoot"* %0, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 2, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call dereferenceable(32) %"class.base::internal::ThreadCacheRegistry"* @_ZN4base8internal19ThreadCacheRegistry8InstanceEv() #2
  tail call void @_ZN4base8internal19ThreadCacheRegistry8PurgeAllEv(%"class.base::internal::ThreadCacheRegistry"* %8) #2
  store i8 0, i8* %4, align 2
  br label %9

9:                                                ; preds = %3, %1, %7
  ret void
}

declare dereferenceable(32) %"class.base::internal::ThreadCacheRegistry"* @_ZN4base8internal19ThreadCacheRegistry8InstanceEv() local_unnamed_addr #1

declare void @_ZN4base8internal19ThreadCacheRegistry8PurgeAllEv(%"class.base::internal::ThreadCacheRegistry"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base42DisablePartitionAllocThreadCacheForProcessEv() local_unnamed_addr #0 {
  %1 = tail call %"struct.base::PartitionRoot"* @_ZN4base8internal20PartitionAllocMalloc9AllocatorEv() #2
  %2 = tail call %"struct.base::PartitionRoot"* @_ZN4base8internal20PartitionAllocMalloc16AlignedAllocatorEv() #2
  %3 = icmp eq %"struct.base::PartitionRoot"* %1, null
  br i1 %3, label %10, label %4

4:                                                ; preds = %0
  %5 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %1, i64 0, i32 2
  %6 = load i8, i8* %5, align 2, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = tail call dereferenceable(32) %"class.base::internal::ThreadCacheRegistry"* @_ZN4base8internal19ThreadCacheRegistry8InstanceEv() #2
  tail call void @_ZN4base8internal19ThreadCacheRegistry8PurgeAllEv(%"class.base::internal::ThreadCacheRegistry"* %9) #2
  store i8 0, i8* %5, align 2
  br label %10

10:                                               ; preds = %0, %4, %8
  %11 = icmp eq %"struct.base::PartitionRoot"* %2, %1
  %12 = icmp eq %"struct.base::PartitionRoot"* %2, null
  %13 = or i1 %11, %12
  br i1 %13, label %20, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %2, i64 0, i32 2
  %16 = load i8, i8* %15, align 2, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  %19 = tail call dereferenceable(32) %"class.base::internal::ThreadCacheRegistry"* @_ZN4base8internal19ThreadCacheRegistry8InstanceEv() #2
  tail call void @_ZN4base8internal19ThreadCacheRegistry8PurgeAllEv(%"class.base::internal::ThreadCacheRegistry"* %19) #2
  store i8 0, i8* %15, align 2
  br label %20

20:                                               ; preds = %18, %14, %10
  %21 = tail call %"struct.base::PartitionRoot"* @_ZN4base8internal20PartitionAllocMalloc17OriginalAllocatorEv() #2
  %22 = icmp eq %"struct.base::PartitionRoot"* %21, null
  br i1 %22, label %29, label %23

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %21, i64 0, i32 2
  %25 = load i8, i8* %24, align 2, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = tail call dereferenceable(32) %"class.base::internal::ThreadCacheRegistry"* @_ZN4base8internal19ThreadCacheRegistry8InstanceEv() #2
  tail call void @_ZN4base8internal19ThreadCacheRegistry8PurgeAllEv(%"class.base::internal::ThreadCacheRegistry"* %28) #2
  store i8 0, i8* %24, align 2
  br label %29

29:                                               ; preds = %20, %23, %27
  ret void
}

declare %"struct.base::PartitionRoot"* @_ZN4base8internal20PartitionAllocMalloc9AllocatorEv() local_unnamed_addr #1

declare %"struct.base::PartitionRoot"* @_ZN4base8internal20PartitionAllocMalloc16AlignedAllocatorEv() local_unnamed_addr #1

declare %"struct.base::PartitionRoot"* @_ZN4base8internal20PartitionAllocMalloc17OriginalAllocatorEv() local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
