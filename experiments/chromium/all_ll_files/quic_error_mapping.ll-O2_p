; ModuleID = '../../components/domain_reliability/quic_error_mapping.cc'
source_filename = "../../components/domain_reliability/quic_error_mapping.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" = type { i32, i8* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZN18domain_reliability12_GLOBAL__N_113kQuicErrorMapE = internal unnamed_addr constant [200 x %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping"] [%"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 48, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 5, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 46, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 61, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 88, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.8, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 89, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 77, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 6, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.11, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 7, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.13, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 57, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.14, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 58, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.15, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 60, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.16, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 78, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.17, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 9, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.18, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 10, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.19, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 11, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.20, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 12, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 13, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.22, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 14, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.23, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 16, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.24, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 17, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 49, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.26, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 18, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 76, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.28, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 19, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.29, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 20, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.30, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 22, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.31, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 23, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.32, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 24, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.33, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 25, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.34, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 67, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 26, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.36, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 86, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.37, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 27, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.38, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 51, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.39, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 50, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.40, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 56, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.41, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 59, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.42, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 63, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.43, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 64, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.44, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 62, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.45, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 68, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.46, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 69, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.47, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 70, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.48, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 71, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.49, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 73, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.50, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 75, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.51, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 85, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.52, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 28, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.53, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 29, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.54, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 30, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.55, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 31, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.56, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 32, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.57, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 33, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.58, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 34, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.59, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 52, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.60, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 35, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.61, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 36, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.62, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 37, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.63, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 94, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.64, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 38, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.65, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 39, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.66, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 72, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.67, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 40, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.68, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 41, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.69, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 42, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.70, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 43, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 44, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.72, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 45, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.73, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 53, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.74, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 54, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.75, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 65, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.76, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 90, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.77, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 55, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.78, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 79, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.79, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 91, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.80, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 92, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.81, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 80, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.82, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 81, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.83, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 82, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.84, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 83, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.85, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 84, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.86, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 99, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.87, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 100, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.88, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 111, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.89, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 87, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.90, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 93, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.91, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 95, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.92, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 96, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.93, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 24, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.33, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 98, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.94, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 102, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.95, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 103, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.96, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 104, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.97, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 105, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.98, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 106, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.99, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 107, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.100, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 108, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.101, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 109, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.102, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 110, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.103, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 112, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.104, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 113, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.105, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 114, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.106, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 115, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.107, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 116, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.108, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 117, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.109, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 118, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.110, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 119, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.111, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 120, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.112, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 121, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.113, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 122, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.114, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 123, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.115, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 124, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.116, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 125, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.117, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 126, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.118, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 127, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.119, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 128, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.120, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 174, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.121, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 175, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.122, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 176, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.123, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 177, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.124, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 178, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.125, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 179, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.126, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 180, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.127, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 181, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.128, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 182, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.129, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 183, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.130, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 184, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.131, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 185, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.132, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 186, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.133, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 187, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.134, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 188, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.135, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 189, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.136, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 190, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.137, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 129, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.138, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 130, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.139, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 131, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.140, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 132, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.141, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 133, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.142, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 134, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.143, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 135, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.144, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 136, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.145, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 137, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.146, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 138, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.147, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 139, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.148, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 140, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.149, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 141, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.150, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 142, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.151, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 143, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.152, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 144, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.153, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 145, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.154, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 146, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.155, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 147, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.156, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 148, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.157, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 149, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.158, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 150, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.159, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 151, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.160, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 152, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.161, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 153, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.162, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 154, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.163, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 155, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.164, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 156, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.165, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 157, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.166, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 158, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.167, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 159, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.168, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 160, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.169, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 161, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.170, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 162, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.171, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 163, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.172, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 164, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.173, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 165, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.174, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 166, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.175, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 167, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.176, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 168, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.177, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 169, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.178, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 170, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.179, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 171, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.180, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 172, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.181, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 173, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.182, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 101, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.183, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 191, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.184, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 192, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.185, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 193, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.186, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 194, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.187, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 195, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.188, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 196, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.189, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 197, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.190, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 198, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.191, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 199, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.192, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 200, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.193, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 201, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.194, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 202, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.195, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 203, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.196, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 204, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.197, i32 0, i32 0) }, %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping" { i32 205, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.198, i32 0, i32 0) }], align 16
@.str = private unnamed_addr constant [20 x i8] c"quic.internal_error\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"quic.stream_data.after_termination\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"quic.invalid.packet_header\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"quic.invalid_frame_data\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"quic.missing.payload\00", align 1
@.str.5 = private unnamed_addr constant [22 x i8] c"quic.invalid.fec_data\00", align 1
@.str.6 = private unnamed_addr constant [25 x i8] c"quic.invalid.stream_data\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"quic.unencrypted.stream_data\00", align 1
@.str.8 = private unnamed_addr constant [40 x i8] c"quic.attempt.to.unencrypted.stream.data\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"quic.maybe.corrupted.momery\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"quic.unencrypted.fec.data\00", align 1
@.str.11 = private unnamed_addr constant [29 x i8] c"quic.invalid.rst_stream_data\00", align 1
@.str.12 = private unnamed_addr constant [35 x i8] c"quic.invalid.connection_close_data\00", align 1
@.str.13 = private unnamed_addr constant [25 x i8] c"quic.invalid.goaway_data\00", align 1
@.str.14 = private unnamed_addr constant [32 x i8] c"quic.invalid.window_update_data\00", align 1
@.str.15 = private unnamed_addr constant [26 x i8] c"quic.invalid.blocked_data\00", align 1
@.str.16 = private unnamed_addr constant [31 x i8] c"quic.invalid.stop_waiting_data\00", align 1
@.str.17 = private unnamed_addr constant [29 x i8] c"quic.invalid_path_close_data\00", align 1
@.str.18 = private unnamed_addr constant [22 x i8] c"quic.invalid.ack_data\00", align 1
@.str.19 = private unnamed_addr constant [40 x i8] c"quic_invalid_version_negotiation_packet\00", align 1
@.str.20 = private unnamed_addr constant [31 x i8] c"quic.invalid.public_rst_packet\00", align 1
@.str.21 = private unnamed_addr constant [24 x i8] c"quic.decryption.failure\00", align 1
@.str.22 = private unnamed_addr constant [24 x i8] c"quic.encryption.failure\00", align 1
@.str.23 = private unnamed_addr constant [22 x i8] c"quic.packet.too_large\00", align 1
@.str.24 = private unnamed_addr constant [21 x i8] c"quic.peer_going_away\00", align 1
@.str.25 = private unnamed_addr constant [23 x i8] c"quic.invalid_stream_id\00", align 1
@.str.26 = private unnamed_addr constant [22 x i8] c"quic.invalid_priority\00", align 1
@.str.27 = private unnamed_addr constant [27 x i8] c"quic.too_many_open_streams\00", align 1
@.str.28 = private unnamed_addr constant [32 x i8] c"quic.too_many_available_streams\00", align 1
@.str.29 = private unnamed_addr constant [18 x i8] c"quic.public_reset\00", align 1
@.str.30 = private unnamed_addr constant [21 x i8] c"quic.invalid_version\00", align 1
@.str.31 = private unnamed_addr constant [23 x i8] c"quic.invalid_header_id\00", align 1
@.str.32 = private unnamed_addr constant [30 x i8] c"quic.invalid_negotiated_value\00", align 1
@.str.33 = private unnamed_addr constant [27 x i8] c"quic.decompression_failure\00", align 1
@.str.34 = private unnamed_addr constant [30 x i8] c"quic.connection.idle_time_out\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"quic.connection.handshake_timed_out\00", align 1
@.str.36 = private unnamed_addr constant [29 x i8] c"quic.error_migrating_address\00", align 1
@.str.37 = private unnamed_addr constant [26 x i8] c"quic.error_migrating_port\00", align 1
@.str.38 = private unnamed_addr constant [24 x i8] c"quic.packet.write_error\00", align 1
@.str.39 = private unnamed_addr constant [23 x i8] c"quic.packet.read_error\00", align 1
@.str.40 = private unnamed_addr constant [31 x i8] c"quic.empty_stream_frame_no_fin\00", align 1
@.str.41 = private unnamed_addr constant [33 x i8] c"quic.invalid_headers_stream_data\00", align 1
@.str.42 = private unnamed_addr constant [41 x i8] c"quic.flow_control.received_too_much_data\00", align 1
@.str.43 = private unnamed_addr constant [37 x i8] c"quic.flow_control.sent_too_much_data\00", align 1
@.str.44 = private unnamed_addr constant [33 x i8] c"quic.flow_control.invalid_window\00", align 1
@.str.45 = private unnamed_addr constant [26 x i8] c"quic.connection.ip_pooled\00", align 1
@.str.46 = private unnamed_addr constant [39 x i8] c"quic.too_many_outstanding_sent_packets\00", align 1
@.str.47 = private unnamed_addr constant [43 x i8] c"quic.too_many_outstanding_received_packets\00", align 1
@.str.48 = private unnamed_addr constant [26 x i8] c"quic.connection.cancelled\00", align 1
@.str.49 = private unnamed_addr constant [26 x i8] c"quic.bad_packet_loss_rate\00", align 1
@.str.50 = private unnamed_addr constant [34 x i8] c"quic.public_resets_post_handshake\00", align 1
@.str.51 = private unnamed_addr constant [32 x i8] c"quic.failed_to_serialize_packet\00", align 1
@.str.52 = private unnamed_addr constant [19 x i8] c"quic.too_many_rtos\00", align 1
@.str.53 = private unnamed_addr constant [22 x i8] c"quic.handshake_failed\00", align 1
@.str.54 = private unnamed_addr constant [30 x i8] c"quic.crypto.tags_out_of_order\00", align 1
@.str.55 = private unnamed_addr constant [29 x i8] c"quic.crypto.too_many_entries\00", align 1
@.str.56 = private unnamed_addr constant [33 x i8] c"quic.crypto.invalid_value_length\00", align 1
@.str.57 = private unnamed_addr constant [45 x i8] c"quic.crypto_message_after_handshake_complete\00", align 1
@.str.58 = private unnamed_addr constant [33 x i8] c"quic.invalid_crypto_message_type\00", align 1
@.str.59 = private unnamed_addr constant [38 x i8] c"quic.invalid_crypto_message_parameter\00", align 1
@.str.60 = private unnamed_addr constant [34 x i8] c"quic.invalid_channel_id_signature\00", align 1
@.str.61 = private unnamed_addr constant [40 x i8] c"quic.crypto_message.parameter_not_found\00", align 1
@.str.62 = private unnamed_addr constant [41 x i8] c"quic.crypto_message.parameter_no_overlap\00", align 1
@.str.63 = private unnamed_addr constant [36 x i8] c"quic_crypto_message_index_not_found\00", align 1
@.str.64 = private unnamed_addr constant [30 x i8] c"quic.unsupported_proof_demand\00", align 1
@.str.65 = private unnamed_addr constant [27 x i8] c"quic.crypto.internal_error\00", align 1
@.str.66 = private unnamed_addr constant [34 x i8] c"quic.crypto.version_not_supported\00", align 1
@.str.67 = private unnamed_addr constant [39 x i8] c"quic.crypto.handshake_stateless_reject\00", align 1
@.str.68 = private unnamed_addr constant [23 x i8] c"quic.crypto.no_support\00", align 1
@.str.69 = private unnamed_addr constant [29 x i8] c"quic.crypto.too_many_rejects\00", align 1
@.str.70 = private unnamed_addr constant [19 x i8] c"quic.proof_invalid\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"quic.crypto.duplicate_tag\00", align 1
@.str.72 = private unnamed_addr constant [39 x i8] c"quic.crypto.encryption_level_incorrect\00", align 1
@.str.73 = private unnamed_addr constant [34 x i8] c"quic.crypto.server_config_expired\00", align 1
@.str.74 = private unnamed_addr constant [39 x i8] c"quic.crypto.symmetric_key_setup_failed\00", align 1
@.str.75 = private unnamed_addr constant [50 x i8] c"quic.crypto_message_while_validating_client_hello\00", align 1
@.str.76 = private unnamed_addr constant [45 x i8] c"quic.crypto.update_before_handshake_complete\00", align 1
@.str.77 = private unnamed_addr constant [27 x i8] c"quic.crypto.chlo_too_large\00", align 1
@.str.78 = private unnamed_addr constant [34 x i8] c"quic.version_negotiation_mismatch\00", align 1
@.str.79 = private unnamed_addr constant [24 x i8] c"quic.bad_multipath_flag\00", align 1
@.str.80 = private unnamed_addr constant [40 x i8] c"quic.quic_multipath_path_does_not_exist\00", align 1
@.str.81 = private unnamed_addr constant [36 x i8] c"quic.quic_multipath_path_not_active\00", align 1
@.str.82 = private unnamed_addr constant [24 x i8] c"quic.ip_address_changed\00", align 1
@.str.83 = private unnamed_addr constant [48 x i8] c"quic.connection_migration_no_migratable_streams\00", align 1
@.str.84 = private unnamed_addr constant [43 x i8] c"quic.connection_migration_too_many_changes\00", align 1
@.str.85 = private unnamed_addr constant [41 x i8] c"quic.connection_migration_no_new_network\00", align 1
@.str.86 = private unnamed_addr constant [48 x i8] c"quic.connection_migration_non_migratable_stream\00", align 1
@.str.87 = private unnamed_addr constant [45 x i8] c"quic.connection_migration_disabled_by_config\00", align 1
@.str.88 = private unnamed_addr constant [41 x i8] c"quic.connection_migration_internal_error\00", align 1
@.str.89 = private unnamed_addr constant [48 x i8] c"quic.connection_migration_handshake_unconfirmed\00", align 1
@.str.90 = private unnamed_addr constant [29 x i8] c"quic.overlapping_stream_data\00", align 1
@.str.91 = private unnamed_addr constant [36 x i8] c"quic.too_many_stream_data_intervals\00", align 1
@.str.92 = private unnamed_addr constant [36 x i8] c"quic.stream_sequencer_invalid_state\00", align 1
@.str.93 = private unnamed_addr constant [33 x i8] c"quic.too_many_sessions_on_server\00", align 1
@.str.94 = private unnamed_addr constant [28 x i8] c"quic.stream_length_overflow\00", align 1
@.str.95 = private unnamed_addr constant [33 x i8] c"quic.invalid.max_data_frame_data\00", align 1
@.str.96 = private unnamed_addr constant [40 x i8] c"quic.invalid.max_stream_data_frame_data\00", align 1
@.str.97 = private unnamed_addr constant [22 x i8] c"quic.max_streams_data\00", align 1
@.str.98 = private unnamed_addr constant [26 x i8] c"quic.streams_blocked_data\00", align 1
@.str.99 = private unnamed_addr constant [33 x i8] c"quic.invalid.stream_blocked_data\00", align 1
@.str.100 = private unnamed_addr constant [36 x i8] c"quic.invalid.new_connection_id_data\00", align 1
@.str.101 = private unnamed_addr constant [37 x i8] c"quic.invalid.stop_sending_frame_data\00", align 1
@.str.102 = private unnamed_addr constant [33 x i8] c"quic.invalid.path_challenge_data\00", align 1
@.str.103 = private unnamed_addr constant [32 x i8] c"quic.invalid.path_response_data\00", align 1
@.str.104 = private unnamed_addr constant [26 x i8] c"quic.invalid.message_data\00", align 1
@.str.105 = private unnamed_addr constant [29 x i8] c"quic.ietf.protocol_violation\00", align 1
@.str.106 = private unnamed_addr constant [23 x i8] c"quic.invalid_new_token\00", align 1
@.str.107 = private unnamed_addr constant [50 x i8] c"quic.data.received.on.write.unidirectional.stream\00", align 1
@.str.108 = private unnamed_addr constant [53 x i8] c"quic.try.to.write.data.on.read.unidirectional.stream\00", align 1
@.str.109 = private unnamed_addr constant [39 x i8] c"quic.invalid.retire.connection.id.data\00", align 1
@.str.110 = private unnamed_addr constant [40 x i8] c"quic.stream.id.in.streams_blocked.frame\00", align 1
@.str.111 = private unnamed_addr constant [36 x i8] c"quic.stream.id.in.max_streams.frame\00", align 1
@.str.112 = private unnamed_addr constant [24 x i8] c"quic.http.decoder.error\00", align 1
@.str.113 = private unnamed_addr constant [32 x i8] c"quic.stale.connection.cancelled\00", align 1
@.str.114 = private unnamed_addr constant [30 x i8] c"quic.ietf.gquic.error_missing\00", align 1
@.str.115 = private unnamed_addr constant [58 x i8] c"quic.window.update.received.on.read.unidirectional.stream\00", align 1
@.str.116 = private unnamed_addr constant [38 x i8] c"quic.too.many.buffered.control.frames\00", align 1
@.str.117 = private unnamed_addr constant [41 x i8] c"quic.transport.invalid.client.indication\00", align 1
@.str.118 = private unnamed_addr constant [32 x i8] c"quic.qpack.decompression.failed\00", align 1
@.str.119 = private unnamed_addr constant [32 x i8] c"quic.qpack.encoder.stream.error\00", align 1
@.str.120 = private unnamed_addr constant [32 x i8] c"quic.qpack.decoder.stream.error\00", align 1
@.str.121 = private unnamed_addr constant [44 x i8] c"quic.qpack.encoder.stream.integer.too.large\00", align 1
@.str.122 = private unnamed_addr constant [50 x i8] c"quic.qpack.encoder.stream.string.literal.too.long\00", align 1
@.str.123 = private unnamed_addr constant [49 x i8] c"quic.qpack.encoder.stream.huffman.encoding.error\00", align 1
@.str.124 = private unnamed_addr constant [47 x i8] c"quic.qpack.encoder.stream.invalid.static.entry\00", align 1
@.str.125 = private unnamed_addr constant [49 x i8] c"quic.qpack.encoder.stream.error.inserting.static\00", align 1
@.str.126 = private unnamed_addr constant [59 x i8] c"quic.qpack.encoder.stream.insertion.invalid.relative.index\00", align 1
@.str.127 = private unnamed_addr constant [60 x i8] c"quic.qpack.encoder.stream.insertion.dynamic.entry.not.found\00", align 1
@.str.128 = private unnamed_addr constant [50 x i8] c"quic.qpack.encoder.stream.error.inserting.dynamic\00", align 1
@.str.129 = private unnamed_addr constant [50 x i8] c"quic.qpack.encoder.stream.error.inserting.literal\00", align 1
@.str.130 = private unnamed_addr constant [59 x i8] c"quic.qpack.encoder.stream.duplicate.invalid.relative.index\00", align 1
@.str.131 = private unnamed_addr constant [60 x i8] c"quic.qpack.encoder.stream.duplicate.dynamic.entry.not.found\00", align 1
@.str.132 = private unnamed_addr constant [53 x i8] c"quic.qpack.encoder.stream.set.dynamic.table.capacity\00", align 1
@.str.133 = private unnamed_addr constant [44 x i8] c"quic.qpack.decoder.stream.integer.too.large\00", align 1
@.str.134 = private unnamed_addr constant [49 x i8] c"quic.qpack.decoder.stream.invalid.zero.increment\00", align 1
@.str.135 = private unnamed_addr constant [45 x i8] c"quic.qpack.decoder.stream.increment.overflow\00", align 1
@.str.136 = private unnamed_addr constant [50 x i8] c"quic.qpack.decoder.stream.impossible.insert.count\00", align 1
@.str.137 = private unnamed_addr constant [52 x i8] c"quic.qpack.decoder.stream.incorrect.acknowledgement\00", align 1
@.str.138 = private unnamed_addr constant [37 x i8] c"quic.stream.data.beyond.close.offset\00", align 1
@.str.139 = private unnamed_addr constant [28 x i8] c"quic.stream.multiple.offset\00", align 1
@.str.140 = private unnamed_addr constant [27 x i8] c"quic.http.frame.too.large,\00", align 1
@.str.141 = private unnamed_addr constant [22 x i8] c"quic.http.frame.error\00", align 1
@.str.142 = private unnamed_addr constant [42 x i8] c"quic.http.frame.unexpected.on.spdy.stream\00", align 1
@.str.143 = private unnamed_addr constant [45 x i8] c"quic.http.frame.unexpected.on.control.stream\00", align 1
@.str.144 = private unnamed_addr constant [30 x i8] c"quic.hpack.index_varint_error\00", align 1
@.str.145 = private unnamed_addr constant [36 x i8] c"quic.hpack.name_length_varint_error\00", align 1
@.str.146 = private unnamed_addr constant [37 x i8] c"quic.hpack.value_length_varint_error\00", align 1
@.str.147 = private unnamed_addr constant [25 x i8] c"quic.hpack.name_too_long\00", align 1
@.str.148 = private unnamed_addr constant [26 x i8] c"quic.hpack.value_too_long\00", align 1
@.str.149 = private unnamed_addr constant [30 x i8] c"quic.hpack.name_huffman_error\00", align 1
@.str.150 = private unnamed_addr constant [31 x i8] c"quic.hpack.value_huffman_error\00", align 1
@.str.151 = private unnamed_addr constant [45 x i8] c"quic.hpack.missing_dynamic_table_size_update\00", align 1
@.str.152 = private unnamed_addr constant [25 x i8] c"quic.hpack.invalid_index\00", align 1
@.str.153 = private unnamed_addr constant [30 x i8] c"quic.hpack.invalid_name_index\00", align 1
@.str.154 = private unnamed_addr constant [49 x i8] c"quic.hpack.dynamic_table_size_update_not_allowed\00", align 1
@.str.155 = private unnamed_addr constant [61 x i8] c"quic.hpack.initial_table_size_update_is_above_low_water_mark\00", align 1
@.str.156 = private unnamed_addr constant [58 x i8] c"quic.hpack.table_size_update_is_above_acknowledge_setting\00", align 1
@.str.157 = private unnamed_addr constant [27 x i8] c"quic.hpack.truncated_block\00", align 1
@.str.158 = private unnamed_addr constant [29 x i8] c"quic.hpack.fragment_too_long\00", align 1
@.str.159 = private unnamed_addr constant [48 x i8] c"quic.hpack.compressed_header_size_exceeds_limit\00", align 1
@.str.160 = private unnamed_addr constant [48 x i8] c"quic.http_invalid_frame_sequence_on_spdy_stream\00", align 1
@.str.161 = private unnamed_addr constant [51 x i8] c"quic.http_invalid_frame_sequence_on_control_stream\00", align 1
@.str.162 = private unnamed_addr constant [42 x i8] c"quic.http_duplicate_unidirectional_stream\00", align 1
@.str.163 = private unnamed_addr constant [48 x i8] c"quic.http_server_initiated_bidirectional_stream\00", align 1
@.str.164 = private unnamed_addr constant [33 x i8] c"quic.http_stream_wrong_direction\00", align 1
@.str.165 = private unnamed_addr constant [33 x i8] c"quic.http_closed_critical_stream\00", align 1
@.str.166 = private unnamed_addr constant [33 x i8] c"quic.http_missing_settings_frame\00", align 1
@.str.167 = private unnamed_addr constant [39 x i8] c"quic.http_duplicate_setting_identifier\00", align 1
@.str.168 = private unnamed_addr constant [30 x i8] c"quic.http_invalid_max_push_id\00", align 1
@.str.169 = private unnamed_addr constant [31 x i8] c"quic.http_stream_limit_too_low\00", align 1
@.str.170 = private unnamed_addr constant [32 x i8] c"quic.zero_rtt_unretransmittable\00", align 1
@.str.171 = private unnamed_addr constant [38 x i8] c"quic.zero_rtt_rejection_limit_reduced\00", align 1
@.str.172 = private unnamed_addr constant [39 x i8] c"quic.zero_rtt_resumption_limit_reduced\00", align 1
@.str.173 = private unnamed_addr constant [48 x i8] c"quic.http_zero_rtt_resumption_settings_mismatch\00", align 1
@.str.174 = private unnamed_addr constant [47 x i8] c"quic.http_zero_rtt_rejection_settings_mismatch\00", align 1
@.str.175 = private unnamed_addr constant [40 x i8] c"quic.quic_http_goaway_invalid_stream_id\00", align 1
@.str.176 = private unnamed_addr constant [46 x i8] c"quic.quic_http_goaway_id_larger_than_previous\00", align 1
@.str.177 = private unnamed_addr constant [25 x i8] c"quic.silent_idle_timeout\00", align 1
@.str.178 = private unnamed_addr constant [31 x i8] c"quic.http_receive_spdy_setting\00", align 1
@.str.179 = private unnamed_addr constant [24 x i8] c"quic.missing_write_keys\00", align 1
@.str.180 = private unnamed_addr constant [29 x i8] c"quic.http_receive_spdy_frame\00", align 1
@.str.181 = private unnamed_addr constant [27 x i8] c"quic.quic_key_update_error\00", align 1
@.str.182 = private unnamed_addr constant [29 x i8] c"quic.quic_aead_limit_reached\00", align 1
@.str.183 = private unnamed_addr constant [36 x i8] c"quic.invalid.application_close_data\00", align 1
@.str.184 = private unnamed_addr constant [26 x i8] c"quic.quic_max_age_timeout\00", align 1
@.str.185 = private unnamed_addr constant [50 x i8] c"quic.quic_invalid_0rtt_packet_number_out_of_order\00", align 1
@.str.186 = private unnamed_addr constant [35 x i8] c"quic::quic_invalid_priority_update\00", align 1
@.str.187 = private unnamed_addr constant [44 x i8] c"quic.peer_port_change_handshake_unconfirmed\00", align 1
@.str.188 = private unnamed_addr constant [31 x i8] c"quic::quic_tls_bad_certificate\00", align 1
@.str.189 = private unnamed_addr constant [39 x i8] c"quic::quic_tls_unsupported_certificate\00", align 1
@.str.190 = private unnamed_addr constant [35 x i8] c"quic::quic_tls_certificate_revoked\00", align 1
@.str.191 = private unnamed_addr constant [35 x i8] c"quic::quic_tls_certificate_expired\00", align 1
@.str.192 = private unnamed_addr constant [35 x i8] c"quic::quic_tls_certificate_unknown\00", align 1
@.str.193 = private unnamed_addr constant [30 x i8] c"quic::quic_tls_internal_error\00", align 1
@.str.194 = private unnamed_addr constant [33 x i8] c"quic::quic_tls_unrecognized_name\00", align 1
@.str.195 = private unnamed_addr constant [36 x i8] c"quic::quic_tls_certificate_required\00", align 1
@.str.196 = private unnamed_addr constant [37 x i8] c"quic::quic_connection_id_limit_error\00", align 1
@.str.197 = private unnamed_addr constant [52 x i8] c"quic::quic_too_many_connection_id_waiting_to_retire\00", align 1
@.str.198 = private unnamed_addr constant [16 x i8] c"quic.last_error\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18domain_reliability35GetDomainReliabilityBeaconQuicErrorEN4quic13QuicErrorCodeEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(i32, %"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %3 = icmp eq i32 %0, 0
  br i1 %3, label %45, label %4

4:                                                ; preds = %2, %73
  %5 = phi i64 [ %74, %73 ], [ 0, %2 ]
  %6 = getelementptr inbounds [200 x %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping"], [200 x %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping"]* @_ZN18domain_reliability12_GLOBAL__N_113kQuicErrorMapE, i64 0, i64 %5, i32 0
  %7 = load i32, i32* %6, align 16
  %8 = icmp eq i32 %7, %0
  br i1 %8, label %9, label %40

9:                                                ; preds = %68, %63, %58, %40, %4
  %10 = phi i64 [ %5, %4 ], [ %41, %40 ], [ %59, %58 ], [ %64, %63 ], [ %69, %68 ]
  %11 = getelementptr inbounds [200 x %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping"], [200 x %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping"]* @_ZN18domain_reliability12_GLOBAL__N_113kQuicErrorMapE, i64 0, i64 %10, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = load i8, i8* %12, align 1
  %14 = tail call i1 @llvm.is.constant.i8(i8 %13) #5
  br i1 %14, label %15, label %38

15:                                               ; preds = %9
  %16 = tail call i64 @strlen(i8* %12) #5
  %17 = icmp ult i64 %16, 23
  br i1 %17, label %18, label %36

18:                                               ; preds = %15
  %19 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %16, i64* %24, align 8
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  br label %30

27:                                               ; preds = %18
  %28 = trunc i64 %16 to i8
  store i8 %28, i8* %20, align 1
  %29 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %30

30:                                               ; preds = %27, %23
  %31 = phi i8* [ %26, %23 ], [ %29, %27 ]
  %32 = icmp eq i64 %16, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %30
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %31, i8* align 1 %12, i64 %16, i1 false) #5
  br label %34

34:                                               ; preds = %33, %30
  %35 = getelementptr inbounds i8, i8* %31, i64 %16
  store i8 0, i8* %35, align 1
  br label %56

36:                                               ; preds = %15
  %37 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %1, i8* %12, i64 %16) #5
  br label %56

38:                                               ; preds = %9
  %39 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* %1, i8* %12) #5
  br label %56

40:                                               ; preds = %4
  %41 = add nuw nsw i64 %5, 1
  %42 = getelementptr inbounds [200 x %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping"], [200 x %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping"]* @_ZN18domain_reliability12_GLOBAL__N_113kQuicErrorMapE, i64 0, i64 %41, i32 0
  %43 = load i32, i32* %42, align 16
  %44 = icmp eq i32 %43, %0
  br i1 %44, label %9, label %58

45:                                               ; preds = %73, %2
  %46 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %46, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %53, align 8
  br label %56

54:                                               ; preds = %45
  %55 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  store i8 0, i8* %55, align 1
  store i8 0, i8* %47, align 1
  br label %56

56:                                               ; preds = %54, %50, %38, %36, %34
  %57 = phi i1 [ true, %34 ], [ true, %36 ], [ true, %38 ], [ false, %50 ], [ false, %54 ]
  ret i1 %57

58:                                               ; preds = %40
  %59 = add nuw nsw i64 %5, 2
  %60 = getelementptr inbounds [200 x %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping"], [200 x %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping"]* @_ZN18domain_reliability12_GLOBAL__N_113kQuicErrorMapE, i64 0, i64 %59, i32 0
  %61 = load i32, i32* %60, align 16
  %62 = icmp eq i32 %61, %0
  br i1 %62, label %9, label %63

63:                                               ; preds = %58
  %64 = add nuw nsw i64 %5, 3
  %65 = getelementptr inbounds [200 x %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping"], [200 x %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping"]* @_ZN18domain_reliability12_GLOBAL__N_113kQuicErrorMapE, i64 0, i64 %64, i32 0
  %66 = load i32, i32* %65, align 16
  %67 = icmp eq i32 %66, %0
  br i1 %67, label %9, label %68

68:                                               ; preds = %63
  %69 = add nuw nsw i64 %5, 4
  %70 = getelementptr inbounds [200 x %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping"], [200 x %"struct.domain_reliability::(anonymous namespace)::QuicErrorMapping"]* @_ZN18domain_reliability12_GLOBAL__N_113kQuicErrorMapE, i64 0, i64 %69, i32 0
  %71 = load i32, i32* %70, align 16
  %72 = icmp eq i32 %71, %0
  br i1 %72, label %9, label %73

73:                                               ; preds = %68
  %74 = add nuw nsw i64 %5, 5
  %75 = icmp eq i64 %74, 200
  br i1 %75, label %45, label %4
}

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i8(i8) #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
