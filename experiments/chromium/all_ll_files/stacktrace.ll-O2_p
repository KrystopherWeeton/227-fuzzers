; ModuleID = '../../third_party/abseil-cpp/absl/debugging/stacktrace.cc'
source_filename = "../../third_party/abseil-cpp/absl/debugging/stacktrace.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 (i8**, i32*, i32, i32, i8*, i32*)* }

@_ZN4absl12_GLOBAL__N_16customE = internal unnamed_addr global %"struct.std::__1::atomic" zeroinitializer, align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN4absl18debugging_internal22StackTraceWorksForTestEv() local_unnamed_addr #0 {
  ret i1 true
}

; Function Attrs: noinline nounwind ssp uwtable
define hidden i32 @_ZN4absl14GetStackFramesEPPvPiii(i8**, i32*, i32, i32) local_unnamed_addr #1 {
  %5 = load atomic i64, i64* bitcast (%"struct.std::__1::atomic"* @_ZN4absl12_GLOBAL__N_16customE to i64*) acquire, align 8
  %6 = inttoptr i64 %5 to i32 (i8**, i32*, i32, i32, i8*, i32*)*
  %7 = icmp eq i64 %5, 0
  %8 = select i1 %7, i32 (i8**, i32*, i32, i32, i8*, i32*)* @_ZL10UnwindImplILb1ELb0EEiPPvPiiiPKvS2_, i32 (i8**, i32*, i32, i32, i8*, i32*)* %6
  %9 = add nsw i32 %3, 1
  %10 = call i32 %8(i8** %0, i32* %1, i32 %2, i32 %9, i8* null, i32* null) #9
  call void asm sideeffect "", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !2
  ret i32 %10
}

; Function Attrs: noinline nounwind ssp uwtable
define hidden i32 @_ZN4absl25GetStackFramesWithContextEPPvPiiiPKvS2_(i8**, i32*, i32, i32, i8*, i32*) local_unnamed_addr #1 {
  %7 = load atomic i64, i64* bitcast (%"struct.std::__1::atomic"* @_ZN4absl12_GLOBAL__N_16customE to i64*) acquire, align 8
  %8 = inttoptr i64 %7 to i32 (i8**, i32*, i32, i32, i8*, i32*)*
  %9 = icmp eq i64 %7, 0
  %10 = select i1 %9, i32 (i8**, i32*, i32, i32, i8*, i32*)* @_ZL10UnwindImplILb1ELb1EEiPPvPiiiPKvS2_, i32 (i8**, i32*, i32, i32, i8*, i32*)* %8
  %11 = add nsw i32 %3, 1
  %12 = call i32 %10(i8** %0, i32* %1, i32 %2, i32 %11, i8* %4, i32* %5) #9
  call void asm sideeffect "", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !2
  ret i32 %12
}

; Function Attrs: noinline nounwind ssp uwtable
define hidden i32 @_ZN4absl13GetStackTraceEPPvii(i8**, i32, i32) local_unnamed_addr #1 {
  %4 = load atomic i64, i64* bitcast (%"struct.std::__1::atomic"* @_ZN4absl12_GLOBAL__N_16customE to i64*) acquire, align 8
  %5 = inttoptr i64 %4 to i32 (i8**, i32*, i32, i32, i8*, i32*)*
  %6 = icmp eq i64 %4, 0
  %7 = select i1 %6, i32 (i8**, i32*, i32, i32, i8*, i32*)* @_ZL10UnwindImplILb0ELb0EEiPPvPiiiPKvS2_, i32 (i8**, i32*, i32, i32, i8*, i32*)* %5
  %8 = add nsw i32 %2, 1
  %9 = call i32 %7(i8** %0, i32* null, i32 %1, i32 %8, i8* null, i32* null) #9
  call void asm sideeffect "", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !2
  ret i32 %9
}

; Function Attrs: noinline nounwind ssp uwtable
define hidden i32 @_ZN4absl24GetStackTraceWithContextEPPviiPKvPi(i8**, i32, i32, i8*, i32*) local_unnamed_addr #1 {
  %6 = load atomic i64, i64* bitcast (%"struct.std::__1::atomic"* @_ZN4absl12_GLOBAL__N_16customE to i64*) acquire, align 8
  %7 = inttoptr i64 %6 to i32 (i8**, i32*, i32, i32, i8*, i32*)*
  %8 = icmp eq i64 %6, 0
  %9 = select i1 %8, i32 (i8**, i32*, i32, i32, i8*, i32*)* @_ZL10UnwindImplILb0ELb1EEiPPvPiiiPKvS2_, i32 (i8**, i32*, i32, i32, i8*, i32*)* %7
  %10 = add nsw i32 %2, 1
  %11 = call i32 %9(i8** %0, i32* null, i32 %1, i32 %10, i8* %3, i32* %4) #9
  call void asm sideeffect "", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !2
  ret i32 %11
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4absl16SetStackUnwinderEPFiPPvPiiiPKvS2_E(i32 (i8**, i32*, i32, i32, i8*, i32*)*) local_unnamed_addr #2 {
  %2 = ptrtoint i32 (i8**, i32*, i32, i32, i8*, i32*)* %0 to i64
  store atomic i64 %2, i64* bitcast (%"struct.std::__1::atomic"* @_ZN4absl12_GLOBAL__N_16customE to i64*) release, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4absl20DefaultStackUnwinderEPPvPiiiPKvS2_(i8**, i32*, i32, i32, i8*, i32*) local_unnamed_addr #3 {
  %7 = alloca i32, align 4
  %8 = add nsw i32 %3, 1
  %9 = icmp eq i32* %1, null
  %10 = icmp eq i8* %4, null
  %11 = select i1 %10, i32 (i8**, i32*, i32, i32, i8*, i32*)* @_ZL10UnwindImplILb0ELb0EEiPPvPiiiPKvS2_, i32 (i8**, i32*, i32, i32, i8*, i32*)* @_ZL10UnwindImplILb0ELb1EEiPPvPiiiPKvS2_
  %12 = select i1 %10, i32 (i8**, i32*, i32, i32, i8*, i32*)* @_ZL10UnwindImplILb1ELb0EEiPPvPiiiPKvS2_, i32 (i8**, i32*, i32, i32, i8*, i32*)* @_ZL10UnwindImplILb1ELb1EEiPPvPiiiPKvS2_
  %13 = select i1 %9, i32 (i8**, i32*, i32, i32, i8*, i32*)* %11, i32 (i8**, i32*, i32, i32, i8*, i32*)* %12
  %14 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14)
  store volatile i32 -1431655766, i32* %7, align 4
  store volatile i32 0, i32* %7, align 4
  %15 = tail call i32 %13(i8** %0, i32* %1, i32 %2, i32 %8, i8* %4, i32* %5) #9, !callees !3
  store volatile i32 1, i32* %7, align 4
  %16 = load volatile i32, i32* %7, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14)
  ret i32 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i32 @_ZL10UnwindImplILb0ELb0EEiPPvPiiiPKvS2_(i8** nocapture, i32* nocapture readnone, i32, i32, i8* nocapture readnone, i32*) unnamed_addr #5 {
  %7 = tail call i8* @llvm.frameaddress(i32 0)
  %8 = bitcast i8* %7 to i8**
  %9 = icmp ne i8* %7, null
  %10 = icmp sgt i32 %2, 0
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %49

12:                                               ; preds = %6, %43
  %13 = phi i32 [ %45, %43 ], [ %3, %6 ]
  %14 = phi i8** [ %34, %43 ], [ %8, %6 ]
  %15 = phi i32 [ %44, %43 ], [ 0, %6 ]
  %16 = getelementptr inbounds i8*, i8** %14, i64 1
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  %19 = ptrtoint i8* %17 to i64
  br i1 %18, label %49, label %20

20:                                               ; preds = %12
  %21 = bitcast i8** %14 to i8***
  %22 = load i8**, i8*** %21, align 8
  %23 = ptrtoint i8** %22 to i64
  %24 = icmp ugt i8** %22, %14
  br i1 %24, label %25, label %33

25:                                               ; preds = %20
  %26 = ptrtoint i8** %14 to i64
  %27 = sub i64 %23, %26
  %28 = icmp ugt i64 %27, 100000
  br i1 %28, label %33, label %29

29:                                               ; preds = %25
  %30 = and i64 %23, 7
  %31 = icmp eq i64 %30, 0
  %32 = select i1 %31, i8** %22, i8** null
  br label %33

33:                                               ; preds = %20, %25, %29
  %34 = phi i8** [ null, %20 ], [ null, %25 ], [ %32, %29 ]
  %35 = icmp sgt i32 %13, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %33
  %37 = add nsw i32 %13, -1
  br label %43

38:                                               ; preds = %33
  %39 = sext i32 %15 to i64
  %40 = getelementptr inbounds i8*, i8** %0, i64 %39
  %41 = bitcast i8** %40 to i64*
  store i64 %19, i64* %41, align 8
  %42 = add nsw i32 %15, 1
  br label %43

43:                                               ; preds = %38, %36
  %44 = phi i32 [ %15, %36 ], [ %42, %38 ]
  %45 = phi i32 [ %37, %36 ], [ %13, %38 ]
  %46 = icmp ne i8** %34, null
  %47 = icmp slt i32 %44, %2
  %48 = and i1 %47, %46
  br i1 %48, label %12, label %49

49:                                               ; preds = %12, %43, %6
  %50 = phi i32 [ 0, %6 ], [ %44, %43 ], [ %15, %12 ]
  %51 = phi i8** [ %8, %6 ], [ %34, %43 ], [ %14, %12 ]
  %52 = icmp eq i32* %5, null
  br i1 %52, label %78, label %53

53:                                               ; preds = %49
  %54 = icmp eq i8** %51, null
  br i1 %54, label %76, label %55

55:                                               ; preds = %53, %68
  %56 = phi i32 [ %71, %68 ], [ 0, %53 ]
  %57 = phi i8** [ %59, %68 ], [ %51, %53 ]
  %58 = bitcast i8** %57 to i8***
  %59 = load i8**, i8*** %58, align 8
  %60 = ptrtoint i8** %59 to i64
  %61 = icmp ugt i8** %59, %57
  br i1 %61, label %62, label %66

62:                                               ; preds = %55
  %63 = ptrtoint i8** %57 to i64
  %64 = sub i64 %60, %63
  %65 = icmp ugt i64 %64, 100000
  br i1 %65, label %66, label %68

66:                                               ; preds = %55, %62
  %67 = add nuw nsw i32 %56, 1
  br label %76

68:                                               ; preds = %62
  %69 = and i64 %60, 7
  %70 = icmp eq i64 %69, 0
  %71 = add nuw nsw i32 %56, 1
  %72 = icmp ne i8** %59, null
  %73 = and i1 %70, %72
  %74 = icmp ult i32 %71, 1000
  %75 = and i1 %73, %74
  br i1 %75, label %55, label %76

76:                                               ; preds = %68, %66, %53
  %77 = phi i32 [ 0, %53 ], [ %67, %66 ], [ %71, %68 ]
  store i32 %77, i32* %5, align 4
  br label %78

78:                                               ; preds = %49, %76
  ret i32 %50
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i32 @_ZL10UnwindImplILb0ELb1EEiPPvPiiiPKvS2_(i8** nocapture, i32* nocapture readnone, i32, i32, i8* readonly, i32*) unnamed_addr #5 {
  %7 = tail call i8* @llvm.frameaddress(i32 0)
  %8 = bitcast i8* %7 to i8**
  %9 = icmp ne i8* %7, null
  %10 = icmp sgt i32 %2, 0
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %69

12:                                               ; preds = %6
  %13 = icmp eq i8* %4, null
  %14 = getelementptr inbounds i8, i8* %4, i64 120
  %15 = bitcast i8* %14 to i64*
  %16 = getelementptr inbounds i8, i8* %4, i64 160
  %17 = bitcast i8* %16 to i64*
  br label %18

18:                                               ; preds = %12, %63
  %19 = phi i32 [ %3, %12 ], [ %65, %63 ]
  %20 = phi i8** [ %8, %12 ], [ %54, %63 ]
  %21 = phi i32 [ 0, %12 ], [ %64, %63 ]
  %22 = getelementptr inbounds i8*, i8** %20, i64 1
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %23, null
  %25 = ptrtoint i8* %23 to i64
  br i1 %24, label %69, label %26

26:                                               ; preds = %18
  %27 = bitcast i8** %20 to i8***
  %28 = load i8**, i8*** %27, align 8
  %29 = ptrtoint i8** %20 to i64
  %30 = ptrtoint i8** %28 to i64
  br i1 %13, label %40, label %31

31:                                               ; preds = %26
  %32 = load i64, i64* %15, align 8
  %33 = load i64, i64* %17, align 8
  %34 = icmp sge i64 %32, %33
  %35 = sub nsw i64 %32, %33
  %36 = icmp slt i64 %35, 100001
  %37 = and i1 %34, %36
  %38 = select i1 %37, i64 %32, i64 %33
  %39 = icmp eq i64 %38, %30
  br i1 %39, label %45, label %40

40:                                               ; preds = %31, %26
  %41 = icmp ule i8** %28, %20
  %42 = sub i64 %30, %29
  %43 = icmp ugt i64 %42, 100000
  %44 = or i1 %41, %43
  br i1 %44, label %53, label %49

45:                                               ; preds = %31
  %46 = icmp eq i8** %28, null
  %47 = icmp eq i8** %28, %20
  %48 = or i1 %46, %47
  br i1 %48, label %53, label %49

49:                                               ; preds = %45, %40
  %50 = and i64 %30, 7
  %51 = icmp eq i64 %50, 0
  %52 = select i1 %51, i8** %28, i8** null
  br label %53

53:                                               ; preds = %40, %45, %49
  %54 = phi i8** [ null, %40 ], [ null, %45 ], [ %52, %49 ]
  %55 = icmp sgt i32 %19, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %53
  %57 = add nsw i32 %19, -1
  br label %63

58:                                               ; preds = %53
  %59 = sext i32 %21 to i64
  %60 = getelementptr inbounds i8*, i8** %0, i64 %59
  %61 = bitcast i8** %60 to i64*
  store i64 %25, i64* %61, align 8
  %62 = add nsw i32 %21, 1
  br label %63

63:                                               ; preds = %58, %56
  %64 = phi i32 [ %21, %56 ], [ %62, %58 ]
  %65 = phi i32 [ %57, %56 ], [ %19, %58 ]
  %66 = icmp ne i8** %54, null
  %67 = icmp slt i32 %64, %2
  %68 = and i1 %67, %66
  br i1 %68, label %18, label %69

69:                                               ; preds = %18, %63, %6
  %70 = phi i32 [ 0, %6 ], [ %64, %63 ], [ %21, %18 ]
  %71 = phi i8** [ %8, %6 ], [ %54, %63 ], [ %20, %18 ]
  %72 = icmp eq i32* %5, null
  br i1 %72, label %118, label %73

73:                                               ; preds = %69
  %74 = icmp eq i8** %71, null
  br i1 %74, label %116, label %75

75:                                               ; preds = %73
  %76 = icmp eq i8* %4, null
  %77 = getelementptr inbounds i8, i8* %4, i64 120
  %78 = bitcast i8* %77 to i64*
  %79 = getelementptr inbounds i8, i8* %4, i64 160
  %80 = bitcast i8* %79 to i64*
  br label %81

81:                                               ; preds = %75, %108
  %82 = phi i32 [ 0, %75 ], [ %111, %108 ]
  %83 = phi i8** [ %71, %75 ], [ %85, %108 ]
  %84 = bitcast i8** %83 to i8***
  %85 = load i8**, i8*** %84, align 8
  %86 = ptrtoint i8** %83 to i64
  %87 = ptrtoint i8** %85 to i64
  br i1 %76, label %97, label %88

88:                                               ; preds = %81
  %89 = load i64, i64* %78, align 8
  %90 = load i64, i64* %80, align 8
  %91 = icmp sge i64 %89, %90
  %92 = sub nsw i64 %89, %90
  %93 = icmp slt i64 %92, 100001
  %94 = and i1 %91, %93
  %95 = select i1 %94, i64 %89, i64 %90
  %96 = icmp eq i64 %95, %87
  br i1 %96, label %102, label %97

97:                                               ; preds = %88, %81
  %98 = icmp ule i8** %85, %83
  %99 = sub i64 %87, %86
  %100 = icmp ugt i64 %99, 100000
  %101 = or i1 %98, %100
  br i1 %101, label %106, label %108

102:                                              ; preds = %88
  %103 = icmp eq i8** %85, null
  %104 = icmp eq i8** %85, %83
  %105 = or i1 %103, %104
  br i1 %105, label %106, label %108

106:                                              ; preds = %97, %102
  %107 = add nuw nsw i32 %82, 1
  br label %116

108:                                              ; preds = %97, %102
  %109 = and i64 %87, 7
  %110 = icmp eq i64 %109, 0
  %111 = add nuw nsw i32 %82, 1
  %112 = icmp ne i8** %85, null
  %113 = and i1 %110, %112
  %114 = icmp ult i32 %111, 1000
  %115 = and i1 %113, %114
  br i1 %115, label %81, label %116

116:                                              ; preds = %108, %106, %73
  %117 = phi i32 [ 0, %73 ], [ %107, %106 ], [ %111, %108 ]
  store i32 %117, i32* %5, align 4
  br label %118

118:                                              ; preds = %69, %116
  ret i32 %70
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @_ZL10UnwindImplILb1ELb0EEiPPvPiiiPKvS2_(i8** nocapture, i32* nocapture, i32, i32, i8* nocapture readnone, i32*) unnamed_addr #6 {
  %7 = tail call i8* @llvm.frameaddress(i32 0)
  %8 = bitcast i8* %7 to i8**
  %9 = icmp ne i8* %7, null
  %10 = icmp sgt i32 %2, 0
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %57

12:                                               ; preds = %6, %51
  %13 = phi i32 [ %53, %51 ], [ %3, %6 ]
  %14 = phi i8** [ %33, %51 ], [ %8, %6 ]
  %15 = phi i32 [ %52, %51 ], [ 0, %6 ]
  %16 = getelementptr inbounds i8*, i8** %14, i64 1
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %57, label %19

19:                                               ; preds = %12
  %20 = load i8*, i8** %14, align 8
  %21 = bitcast i8* %20 to i8**
  %22 = ptrtoint i8* %20 to i64
  %23 = icmp ne i8* %20, null
  %24 = icmp ne i8** %14, %21
  %25 = and i1 %23, %24
  %26 = and i64 %22, 7
  %27 = icmp eq i64 %26, 0
  %28 = and i1 %25, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %19
  %30 = tail call zeroext i1 @_ZN4absl18debugging_internal17AddressIsReadableEPKv(i8* nonnull %20) #9
  %31 = select i1 %30, i8** %21, i8** null
  br label %32

32:                                               ; preds = %19, %29
  %33 = phi i8** [ null, %19 ], [ %31, %29 ]
  %34 = icmp sgt i32 %13, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %32
  %36 = add nsw i32 %13, -1
  br label %51

37:                                               ; preds = %32
  %38 = bitcast i8** %16 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = sext i32 %15 to i64
  %41 = getelementptr inbounds i8*, i8** %0, i64 %40
  %42 = bitcast i8** %41 to i64*
  store i64 %39, i64* %42, align 8
  %43 = icmp ugt i8** %33, %14
  %44 = ptrtoint i8** %33 to i64
  %45 = ptrtoint i8** %14 to i64
  %46 = sub i64 %44, %45
  %47 = trunc i64 %46 to i32
  %48 = select i1 %43, i32 %47, i32 0
  %49 = getelementptr inbounds i32, i32* %1, i64 %40
  store i32 %48, i32* %49, align 4
  %50 = add nsw i32 %15, 1
  br label %51

51:                                               ; preds = %37, %35
  %52 = phi i32 [ %15, %35 ], [ %50, %37 ]
  %53 = phi i32 [ %36, %35 ], [ %13, %37 ]
  %54 = icmp ne i8** %33, null
  %55 = icmp slt i32 %52, %2
  %56 = and i1 %55, %54
  br i1 %56, label %12, label %57

57:                                               ; preds = %12, %51, %6
  %58 = phi i32 [ 0, %6 ], [ %52, %51 ], [ %15, %12 ]
  %59 = phi i8** [ %8, %6 ], [ %33, %51 ], [ %14, %12 ]
  %60 = icmp eq i32* %5, null
  br i1 %60, label %84, label %61

61:                                               ; preds = %57
  %62 = icmp eq i8** %59, null
  br i1 %62, label %82, label %63

63:                                               ; preds = %61, %77
  %64 = phi i32 [ %79, %77 ], [ 0, %61 ]
  %65 = phi i8** [ %67, %77 ], [ %59, %61 ]
  %66 = load i8*, i8** %65, align 8
  %67 = bitcast i8* %66 to i8**
  %68 = ptrtoint i8* %66 to i64
  %69 = icmp ne i8* %66, null
  %70 = icmp ne i8** %65, %67
  %71 = and i1 %69, %70
  %72 = and i64 %68, 7
  %73 = icmp eq i64 %72, 0
  %74 = and i1 %71, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %63
  %76 = add nuw nsw i32 %64, 1
  br label %82

77:                                               ; preds = %63
  %78 = tail call zeroext i1 @_ZN4absl18debugging_internal17AddressIsReadableEPKv(i8* nonnull %66) #9
  %79 = add nuw nsw i32 %64, 1
  %80 = icmp ult i32 %79, 1000
  %81 = and i1 %78, %80
  br i1 %81, label %63, label %82

82:                                               ; preds = %77, %75, %61
  %83 = phi i32 [ 0, %61 ], [ %76, %75 ], [ %79, %77 ]
  store i32 %83, i32* %5, align 4
  br label %84

84:                                               ; preds = %57, %82
  ret i32 %58
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @_ZL10UnwindImplILb1ELb1EEiPPvPiiiPKvS2_(i8** nocapture, i32* nocapture, i32, i32, i8* nocapture readnone, i32*) unnamed_addr #6 {
  %7 = tail call i8* @llvm.frameaddress(i32 0)
  %8 = bitcast i8* %7 to i8**
  %9 = icmp ne i8* %7, null
  %10 = icmp sgt i32 %2, 0
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %57

12:                                               ; preds = %6, %51
  %13 = phi i32 [ %53, %51 ], [ %3, %6 ]
  %14 = phi i8** [ %33, %51 ], [ %8, %6 ]
  %15 = phi i32 [ %52, %51 ], [ 0, %6 ]
  %16 = getelementptr inbounds i8*, i8** %14, i64 1
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %57, label %19

19:                                               ; preds = %12
  %20 = load i8*, i8** %14, align 8
  %21 = bitcast i8* %20 to i8**
  %22 = ptrtoint i8* %20 to i64
  %23 = icmp ne i8* %20, null
  %24 = icmp ne i8** %14, %21
  %25 = and i1 %23, %24
  %26 = and i64 %22, 7
  %27 = icmp eq i64 %26, 0
  %28 = and i1 %25, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %19
  %30 = tail call zeroext i1 @_ZN4absl18debugging_internal17AddressIsReadableEPKv(i8* nonnull %20) #9
  %31 = select i1 %30, i8** %21, i8** null
  br label %32

32:                                               ; preds = %19, %29
  %33 = phi i8** [ null, %19 ], [ %31, %29 ]
  %34 = icmp sgt i32 %13, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %32
  %36 = add nsw i32 %13, -1
  br label %51

37:                                               ; preds = %32
  %38 = bitcast i8** %16 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = sext i32 %15 to i64
  %41 = getelementptr inbounds i8*, i8** %0, i64 %40
  %42 = bitcast i8** %41 to i64*
  store i64 %39, i64* %42, align 8
  %43 = icmp ugt i8** %33, %14
  %44 = ptrtoint i8** %33 to i64
  %45 = ptrtoint i8** %14 to i64
  %46 = sub i64 %44, %45
  %47 = trunc i64 %46 to i32
  %48 = select i1 %43, i32 %47, i32 0
  %49 = getelementptr inbounds i32, i32* %1, i64 %40
  store i32 %48, i32* %49, align 4
  %50 = add nsw i32 %15, 1
  br label %51

51:                                               ; preds = %37, %35
  %52 = phi i32 [ %15, %35 ], [ %50, %37 ]
  %53 = phi i32 [ %36, %35 ], [ %13, %37 ]
  %54 = icmp ne i8** %33, null
  %55 = icmp slt i32 %52, %2
  %56 = and i1 %55, %54
  br i1 %56, label %12, label %57

57:                                               ; preds = %12, %51, %6
  %58 = phi i32 [ 0, %6 ], [ %52, %51 ], [ %15, %12 ]
  %59 = phi i8** [ %8, %6 ], [ %33, %51 ], [ %14, %12 ]
  %60 = icmp eq i32* %5, null
  br i1 %60, label %84, label %61

61:                                               ; preds = %57
  %62 = icmp eq i8** %59, null
  br i1 %62, label %82, label %63

63:                                               ; preds = %61, %77
  %64 = phi i32 [ %79, %77 ], [ 0, %61 ]
  %65 = phi i8** [ %67, %77 ], [ %59, %61 ]
  %66 = load i8*, i8** %65, align 8
  %67 = bitcast i8* %66 to i8**
  %68 = ptrtoint i8* %66 to i64
  %69 = icmp ne i8* %66, null
  %70 = icmp ne i8** %65, %67
  %71 = and i1 %69, %70
  %72 = and i64 %68, 7
  %73 = icmp eq i64 %72, 0
  %74 = and i1 %71, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %63
  %76 = add nuw nsw i32 %64, 1
  br label %82

77:                                               ; preds = %63
  %78 = tail call zeroext i1 @_ZN4absl18debugging_internal17AddressIsReadableEPKv(i8* nonnull %66) #9
  %79 = add nuw nsw i32 %64, 1
  %80 = icmp ult i32 %79, 1000
  %81 = and i1 %78, %80
  br i1 %81, label %63, label %82

82:                                               ; preds = %77, %75, %61
  %83 = phi i32 [ 0, %61 ], [ %76, %75 ], [ %79, %77 ]
  store i32 %83, i32* %5, align 4
  br label %84

84:                                               ; preds = %57, %82
  ret i32 %58
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind readnone
declare i8* @llvm.frameaddress(i32 immarg) #7

declare zeroext i1 @_ZN4absl18debugging_internal17AddressIsReadableEPKv(i8*) local_unnamed_addr #8

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="true" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nofree noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone }
attributes #8 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 -2143630520}
!3 = !{i32 (i8**, i32*, i32, i32, i8*, i32*)* @_ZL10UnwindImplILb0ELb0EEiPPvPiiiPKvS2_, i32 (i8**, i32*, i32, i32, i8*, i32*)* @_ZL10UnwindImplILb0ELb1EEiPPvPiiiPKvS2_, i32 (i8**, i32*, i32, i32, i8*, i32*)* @_ZL10UnwindImplILb1ELb0EEiPPvPiiiPKvS2_, i32 (i8**, i32*, i32, i32, i8*, i32*)* @_ZL10UnwindImplILb1ELb1EEiPPvPiiiPKvS2_}
