; ModuleID = '../../third_party/skia/src/effects/SkTrimPathEffect.cpp'
source_filename = "../../third_party/skia/src/effects/SkTrimPathEffect.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkTrimPE = type { %class.SkPathEffectBase.base, float, float, i32 }
%class.SkPathEffectBase.base = type { %class.SkPathEffect.base }
%class.SkPathEffect.base = type { %class.SkFlattenable.base }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkStrokeRec = type { float, float, float, i32 }
%class.SkPathMeasure = type { %class.SkContourMeasureIter, %class.sk_sp.14 }
%class.SkContourMeasureIter = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkContourMeasureIter::Impl"* }
%"class.SkContourMeasureIter::Impl" = type opaque
%class.sk_sp.14 = type { %class.SkContourMeasure* }
%class.SkContourMeasure = type <{ %class.SkRefCnt.base, [4 x i8], %class.SkTDArray.15, %class.SkTDArray, float, i8, [3 x i8] }>
%class.SkTDArray.15 = type { %"struct.SkContourMeasure::Segment"*, i32, i32 }
%"struct.SkContourMeasure::Segment" = type { float, i32, i32 }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.16*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.16*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.16*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.16 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.17, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.17 = type { %"struct.std::__1::atomic" }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.9", [7 x i8] }>
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.18, i32, i32 }
%class.sk_sp.18 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.19, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.19 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%class.sk_sp.29 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp.26*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.20" }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.29*, %class.SkReadBuffer*)* }
%class.sk_sp.26 = type { %class.SkTypeface* }
%struct.SkDeserialProcs = type { {}*, i8*, {}*, i8*, void (%class.sk_sp.26*, i8*, i64, i8*)*, i8* }
%class.sk_sp.30 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkPathEffectBase = type { %class.SkPathEffect.base, [4 x i8] }
%"class.SkPathEffectBase::PointData" = type { i32, %struct.SkPoint*, i32, %struct.SkPoint, %struct.SkRect, [4 x i8], %class.SkPath, %class.SkPath, %class.SkPath }
%class.SkMatrix = type { [9 x float], i32 }
%"struct.SkPathEffect::DashInfo" = type { float*, i32, float }

$_ZN12SkRefCntBaseD2Ev = comdat any

$_ZN8SkTrimPED0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK8SkTrimPE10getFactoryEv = comdat any

$_ZNK8SkTrimPE11getTypeNameEv = comdat any

$_ZNK16SkPathEffectBase18getFlattenableTypeEv = comdat any

$_ZNK16SkPathEffectBase10onAsPointsEPNS_9PointDataERK6SkPathRK11SkStrokeRecRK8SkMatrixPK6SkRect = comdat any

$_ZNK16SkPathEffectBase9onAsADashEPN12SkPathEffect8DashInfoE = comdat any

$_ZNK8SkTrimPE17computeFastBoundsEP6SkRect = comdat any

@_ZTV8SkTrimPE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%class.SkTrimPE*)* @_ZN8SkTrimPED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.29*, %class.SkReadBuffer*)* (%class.SkTrimPE*)* @_ZNK8SkTrimPE10getFactoryEv to i8*), i8* bitcast (i8* (%class.SkTrimPE*)* @_ZNK8SkTrimPE11getTypeNameEv to i8*), i8* bitcast (void (%class.SkTrimPE*, %class.SkWriteBuffer*)* @_ZNK8SkTrimPE7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkPathEffectBase*)* @_ZNK16SkPathEffectBase18getFlattenableTypeEv to i8*), i8* bitcast (i1 (%class.SkTrimPE*, %class.SkPath*, %class.SkPath*, %class.SkStrokeRec*, %struct.SkRect*)* @_ZNK8SkTrimPE12onFilterPathEP6SkPathRKS0_P11SkStrokeRecPK6SkRect to i8*), i8* bitcast (i1 (%class.SkPathEffectBase*, %"class.SkPathEffectBase::PointData"*, %class.SkPath*, %class.SkStrokeRec*, %class.SkMatrix*, %struct.SkRect*)* @_ZNK16SkPathEffectBase10onAsPointsEPNS_9PointDataERK6SkPathRK11SkStrokeRecRK8SkMatrixPK6SkRect to i8*), i8* bitcast (i32 (%class.SkPathEffectBase*, %"struct.SkPathEffect::DashInfo"*)* @_ZNK16SkPathEffectBase9onAsADashEPN12SkPathEffect8DashInfoE to i8*), i8* bitcast (i1 (%class.SkTrimPE*, %struct.SkRect*)* @_ZNK8SkTrimPE17computeFastBoundsEP6SkRect to i8*)] }, align 8
@.str = private unnamed_addr constant [9 x i8] c"SkTrimPE\00", align 1

@_ZN8SkTrimPEC1EffN16SkTrimPathEffect4ModeE = hidden unnamed_addr alias void (%class.SkTrimPE*, float, float, i32), void (%class.SkTrimPE*, float, float, i32)* @_ZN8SkTrimPEC2EffN16SkTrimPathEffect4ModeE

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN8SkTrimPEC2EffN16SkTrimPathEffect4ModeE(%class.SkTrimPE* nocapture, float, float, i32) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SkTrimPE, %class.SkTrimPE* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %5, align 4
  %6 = getelementptr inbounds %class.SkTrimPE, %class.SkTrimPE* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTV8SkTrimPE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %class.SkTrimPE, %class.SkTrimPE* %0, i64 0, i32 1
  store float %1, float* %7, align 4
  %8 = getelementptr inbounds %class.SkTrimPE, %class.SkTrimPE* %0, i64 0, i32 2
  store float %2, float* %8, align 8
  %9 = getelementptr inbounds %class.SkTrimPE, %class.SkTrimPE* %0, i64 0, i32 3
  store i32 %3, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkTrimPE12onFilterPathEP6SkPathRKS0_P11SkStrokeRecPK6SkRect(%class.SkTrimPE* nocapture readonly, %class.SkPath*, %class.SkPath* dereferenceable(16), %class.SkStrokeRec* nocapture readnone, %struct.SkRect* nocapture readnone) unnamed_addr #1 align 2 {
  %6 = alloca %class.SkPathMeasure, align 8
  %7 = alloca %class.SkPathMeasure, align 8
  %8 = alloca %class.SkPathMeasure, align 8
  %9 = alloca %class.SkPathMeasure, align 8
  %10 = getelementptr inbounds %class.SkTrimPE, %class.SkTrimPE* %0, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %class.SkTrimPE, %class.SkTrimPE* %0, i64 0, i32 2
  %13 = load float, float* %12, align 8
  %14 = fcmp ult float %11, %13
  br i1 %14, label %15, label %97

15:                                               ; preds = %5
  %16 = bitcast %class.SkPathMeasure* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #8
  %17 = bitcast %class.SkPathMeasure* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 16, i1 false)
  call void @_ZN13SkPathMeasureC1ERK6SkPathbf(%class.SkPathMeasure* nonnull %9, %class.SkPath* dereferenceable(16) %2, i1 zeroext false, float 1.000000e+00) #8
  br label %18

18:                                               ; preds = %18, %15
  %19 = phi float [ 0.000000e+00, %15 ], [ %21, %18 ]
  %20 = call float @_ZN13SkPathMeasure9getLengthEv(%class.SkPathMeasure* nonnull %9) #8
  %21 = fadd float %19, %20
  %22 = call zeroext i1 @_ZN13SkPathMeasure11nextContourEv(%class.SkPathMeasure* nonnull %9) #8
  br i1 %22, label %18, label %23

23:                                               ; preds = %18
  %24 = bitcast float* %10 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = insertelement <2 x float> undef, float %21, i32 0
  %27 = shufflevector <2 x float> %26, <2 x float> undef, <2 x i32> zeroinitializer
  %28 = fmul <2 x float> %27, %25
  %29 = getelementptr inbounds %class.SkTrimPE, %class.SkTrimPE* %0, i64 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %51

32:                                               ; preds = %23
  %33 = extractelement <2 x float> %28, i32 0
  %34 = extractelement <2 x float> %28, i32 1
  %35 = fcmp olt float %33, %34
  br i1 %35, label %36, label %96

36:                                               ; preds = %32
  %37 = bitcast %class.SkPathMeasure* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 -86, i64 16, i1 false) #8
  call void @_ZN13SkPathMeasureC1ERK6SkPathbf(%class.SkPathMeasure* nonnull %8, %class.SkPath* dereferenceable(16) %2, i1 zeroext false, float 1.000000e+00) #8
  br label %38

38:                                               ; preds = %48, %36
  %39 = phi float [ 0.000000e+00, %36 ], [ %41, %48 ]
  %40 = call float @_ZN13SkPathMeasure9getLengthEv(%class.SkPathMeasure* nonnull %8) #8
  %41 = fadd float %39, %40
  %42 = fcmp ogt float %41, %33
  br i1 %42, label %43, label %48

43:                                               ; preds = %38
  %44 = fsub float %33, %39
  %45 = fsub float %34, %39
  %46 = call zeroext i1 @_ZN13SkPathMeasure10getSegmentEffP6SkPathb(%class.SkPathMeasure* nonnull %8, float %44, float %45, %class.SkPath* %1, i1 zeroext true) #8
  %47 = fcmp ult float %41, %34
  br i1 %47, label %48, label %50

48:                                               ; preds = %43, %38
  %49 = call zeroext i1 @_ZN13SkPathMeasure11nextContourEv(%class.SkPathMeasure* nonnull %8) #8
  br i1 %49, label %38, label %50

50:                                               ; preds = %43, %48
  call void @_ZN13SkPathMeasureD1Ev(%class.SkPathMeasure* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #8
  br label %96

51:                                               ; preds = %23
  %52 = extractelement <2 x float> %28, i32 1
  %53 = fcmp olt float %52, %21
  br i1 %53, label %54, label %76

54:                                               ; preds = %51
  %55 = bitcast %class.SkPathMeasure* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %55) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 -86, i64 16, i1 false) #8
  call void @_ZN13SkPathMeasureC1ERK6SkPathbf(%class.SkPathMeasure* nonnull %7, %class.SkPath* dereferenceable(16) %2, i1 zeroext false, float 1.000000e+00) #8
  br label %56

56:                                               ; preds = %67, %54
  %57 = phi float [ 0.000000e+00, %54 ], [ %60, %67 ]
  %58 = phi i64 [ 1, %54 ], [ %68, %67 ]
  %59 = call float @_ZN13SkPathMeasure9getLengthEv(%class.SkPathMeasure* nonnull %7) #8
  %60 = fadd float %57, %59
  %61 = fcmp ogt float %60, %52
  br i1 %61, label %62, label %67

62:                                               ; preds = %56
  %63 = fsub float %52, %57
  %64 = fsub float %21, %57
  %65 = call zeroext i1 @_ZN13SkPathMeasure10getSegmentEffP6SkPathb(%class.SkPathMeasure* nonnull %7, float %63, float %64, %class.SkPath* %1, i1 zeroext true) #8
  %66 = fcmp ult float %60, %21
  br i1 %66, label %67, label %70

67:                                               ; preds = %62, %56
  %68 = add i64 %58, 1
  %69 = call zeroext i1 @_ZN13SkPathMeasure11nextContourEv(%class.SkPathMeasure* nonnull %7) #8
  br i1 %69, label %56, label %70

70:                                               ; preds = %62, %67
  %71 = phi i64 [ %68, %67 ], [ %58, %62 ]
  call void @_ZN13SkPathMeasureD1Ev(%class.SkPathMeasure* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %55) #8
  %72 = icmp eq i64 %71, 1
  br i1 %72, label %73, label %76

73:                                               ; preds = %70
  %74 = call zeroext i1 @_ZNK6SkPath19isLastContourClosedEv(%class.SkPath* %2) #8
  %75 = xor i1 %74, true
  br label %76

76:                                               ; preds = %73, %70, %51
  %77 = phi i1 [ true, %51 ], [ true, %70 ], [ %75, %73 ]
  %78 = extractelement <2 x float> %28, i32 0
  %79 = fcmp ogt float %78, 0.000000e+00
  br i1 %79, label %80, label %96

80:                                               ; preds = %76
  %81 = bitcast %class.SkPathMeasure* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %81) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %81, i8 -86, i64 16, i1 false) #8
  call void @_ZN13SkPathMeasureC1ERK6SkPathbf(%class.SkPathMeasure* nonnull %6, %class.SkPath* dereferenceable(16) %2, i1 zeroext false, float 1.000000e+00) #8
  %82 = extractelement <2 x float> %28, i32 0
  br label %83

83:                                               ; preds = %93, %80
  %84 = phi float [ 0.000000e+00, %80 ], [ %86, %93 ]
  %85 = call float @_ZN13SkPathMeasure9getLengthEv(%class.SkPathMeasure* nonnull %6) #8
  %86 = fadd float %84, %85
  %87 = fcmp ogt float %86, 0.000000e+00
  br i1 %87, label %88, label %93

88:                                               ; preds = %83
  %89 = fsub float 0.000000e+00, %84
  %90 = fsub float %82, %84
  %91 = call zeroext i1 @_ZN13SkPathMeasure10getSegmentEffP6SkPathb(%class.SkPathMeasure* nonnull %6, float %89, float %90, %class.SkPath* %1, i1 zeroext %77) #8
  %92 = fcmp ult float %86, %82
  br i1 %92, label %93, label %95

93:                                               ; preds = %88, %83
  %94 = call zeroext i1 @_ZN13SkPathMeasure11nextContourEv(%class.SkPathMeasure* nonnull %6) #8
  br i1 %94, label %83, label %95

95:                                               ; preds = %88, %93
  call void @_ZN13SkPathMeasureD1Ev(%class.SkPathMeasure* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #8
  br label %96

96:                                               ; preds = %76, %95, %32, %50
  call void @_ZN13SkPathMeasureD1Ev(%class.SkPathMeasure* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #8
  br label %97

97:                                               ; preds = %5, %96
  ret i1 true
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN13SkPathMeasureC1ERK6SkPathbf(%class.SkPathMeasure*, %class.SkPath* dereferenceable(16), i1 zeroext, float) unnamed_addr #3

declare float @_ZN13SkPathMeasure9getLengthEv(%class.SkPathMeasure*) local_unnamed_addr #3

declare zeroext i1 @_ZN13SkPathMeasure11nextContourEv(%class.SkPathMeasure*) local_unnamed_addr #3

declare zeroext i1 @_ZNK6SkPath19isLastContourClosedEv(%class.SkPath*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare void @_ZN13SkPathMeasureD1Ev(%class.SkPathMeasure*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkTrimPE7flattenER13SkWriteBuffer(%class.SkTrimPE* nocapture readonly, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.SkTrimPE, %class.SkTrimPE* %0, i64 0, i32 1
  %4 = load float, float* %3, align 4
  %5 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, float)***
  %6 = load void (%class.SkWriteBuffer*, float)**, void (%class.SkWriteBuffer*, float)*** %5, align 8
  %7 = getelementptr inbounds void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %6, i64 5
  %8 = load void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %7, align 8
  tail call void %8(%class.SkWriteBuffer* %1, float %4) #8
  %9 = getelementptr inbounds %class.SkTrimPE, %class.SkTrimPE* %0, i64 0, i32 2
  %10 = load float, float* %9, align 8
  %11 = load void (%class.SkWriteBuffer*, float)**, void (%class.SkWriteBuffer*, float)*** %5, align 8
  %12 = getelementptr inbounds void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %11, i64 5
  %13 = load void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %12, align 8
  tail call void %13(%class.SkWriteBuffer* %1, float %10) #8
  %14 = getelementptr inbounds %class.SkTrimPE, %class.SkTrimPE* %0, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, i32)***
  %17 = load void (%class.SkWriteBuffer*, i32)**, void (%class.SkWriteBuffer*, i32)*** %16, align 8
  %18 = getelementptr inbounds void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %17, i64 9
  %19 = load void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %18, align 8
  tail call void %19(%class.SkWriteBuffer* %1, i32 %15) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkTrimPE10CreateProcER12SkReadBuffer(%class.sk_sp.29* noalias nocapture sret, %class.SkReadBuffer* dereferenceable(136)) #1 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = tail call float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer* %1) #8
  %10 = tail call float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer* %1) #8
  %11 = tail call i32 @_ZN12SkReadBuffer8readUIntEv(%class.SkReadBuffer* %1) #8
  %12 = and i32 %11, 1
  %13 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13)
  %14 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14)
  %15 = bitcast float %9 to i32
  %16 = bitcast i32* %3 to float*
  store float %9, float* %16, align 4, !noalias !2
  %17 = bitcast float %10 to i32
  %18 = bitcast i32* %4 to float*
  store float %10, float* %18, align 4, !noalias !2
  %19 = and i32 %15, 2139095040
  %20 = icmp ne i32 %19, 2139095040
  %21 = and i32 %17, 2139095040
  %22 = icmp ne i32 %21, 2139095040
  %23 = and i1 %20, %22
  br i1 %23, label %24, label %66

24:                                               ; preds = %2
  %25 = fcmp ole float %9, 0.000000e+00
  %26 = fcmp oge float %10, 1.000000e+00
  %27 = and i1 %25, %26
  %28 = icmp eq i32 %12, 0
  %29 = and i1 %27, %28
  br i1 %29, label %66, label %30

30:                                               ; preds = %24
  %31 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31)
  store float 0.000000e+00, float* %5, align 4, !noalias !2
  %32 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32)
  store float 1.000000e+00, float* %6, align 4, !noalias !2
  %33 = fcmp ogt float %9, 1.000000e+00
  %34 = select i1 %33, float* %6, float* %16
  %35 = load float, float* %34, align 4, !noalias !2
  %36 = fcmp ogt float %35, 0.000000e+00
  %37 = select i1 %36, float* %34, float* %5
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4, !noalias !2
  store i32 %39, i32* %3, align 4, !noalias !2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31)
  %40 = bitcast float* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %40)
  store float 0.000000e+00, float* %7, align 4, !noalias !2
  %41 = bitcast float* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41)
  store float 1.000000e+00, float* %8, align 4, !noalias !2
  %42 = fcmp ogt float %10, 1.000000e+00
  %43 = select i1 %42, float* %8, float* %18
  %44 = load float, float* %43, align 4, !noalias !2
  %45 = fcmp ogt float %44, 0.000000e+00
  %46 = select i1 %45, float* %43, float* %7
  %47 = bitcast float* %46 to i32*
  %48 = load i32, i32* %47, align 4, !noalias !2
  store i32 %48, i32* %4, align 4, !noalias !2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %40)
  %49 = bitcast i32 %39 to float
  %50 = bitcast i32 %48 to float
  %51 = fcmp oge float %49, %50
  %52 = icmp ne i32 %12, 0
  %53 = and i1 %52, %51
  br i1 %53, label %66, label %54

54:                                               ; preds = %30
  %55 = tail call i8* @_Znwm(i64 24) #9, !noalias !2
  %56 = getelementptr inbounds i8, i8* %55, i64 8
  %57 = bitcast i8* %56 to i32*
  store i32 1, i32* %57, align 4, !noalias !2
  %58 = bitcast i8* %55 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTV8SkTrimPE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %58, align 8, !noalias !2
  %59 = getelementptr inbounds i8, i8* %55, i64 12
  %60 = bitcast i8* %59 to i32*
  store i32 %39, i32* %60, align 4, !noalias !2
  %61 = getelementptr inbounds i8, i8* %55, i64 16
  %62 = bitcast i8* %61 to i32*
  store i32 %48, i32* %62, align 8, !noalias !2
  %63 = getelementptr inbounds i8, i8* %55, i64 20
  %64 = bitcast i8* %63 to i32*
  store i32 %12, i32* %64, align 4, !noalias !2
  %65 = ptrtoint i8* %55 to i64
  br label %66

66:                                               ; preds = %54, %2, %24, %30
  %67 = phi i64 [ %65, %54 ], [ 0, %2 ], [ 0, %24 ], [ 0, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14)
  %68 = bitcast %class.sk_sp.29* %0 to i64*
  store i64 %67, i64* %68, align 8
  ret void
}

declare float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer*) local_unnamed_addr #3

declare i32 @_ZN12SkReadBuffer8readUIntEv(%class.SkReadBuffer*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkTrimPathEffect4MakeEffNS_4ModeE(%class.sk_sp.30* noalias nocapture sret, float, float, i32) local_unnamed_addr #1 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = bitcast float %1 to i32
  %12 = bitcast i32* %5 to float*
  store float %1, float* %12, align 4
  %13 = bitcast float %2 to i32
  %14 = bitcast i32* %6 to float*
  store float %2, float* %14, align 4
  %15 = and i32 %11, 2139095040
  %16 = icmp ne i32 %15, 2139095040
  %17 = and i32 %13, 2139095040
  %18 = icmp ne i32 %17, 2139095040
  %19 = and i1 %16, %18
  br i1 %19, label %22, label %20

20:                                               ; preds = %4
  %21 = getelementptr inbounds %class.sk_sp.30, %class.sk_sp.30* %0, i64 0, i32 0
  store %class.SkPathEffect* null, %class.SkPathEffect** %21, align 8
  br label %68

22:                                               ; preds = %4
  %23 = fcmp ole float %1, 0.000000e+00
  %24 = fcmp oge float %2, 1.000000e+00
  %25 = and i1 %23, %24
  %26 = icmp eq i32 %3, 0
  %27 = and i1 %25, %26
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = getelementptr inbounds %class.sk_sp.30, %class.sk_sp.30* %0, i64 0, i32 0
  store %class.SkPathEffect* null, %class.SkPathEffect** %29, align 8
  br label %68

30:                                               ; preds = %22
  %31 = bitcast float* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31)
  store float 0.000000e+00, float* %7, align 4
  %32 = bitcast float* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32)
  store float 1.000000e+00, float* %8, align 4
  %33 = fcmp ogt float %1, 1.000000e+00
  %34 = select i1 %33, float* %8, float* %12
  %35 = load float, float* %34, align 4
  %36 = fcmp ogt float %35, 0.000000e+00
  %37 = select i1 %36, float* %34, float* %7
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %5, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31)
  %40 = bitcast float* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %40)
  store float 0.000000e+00, float* %9, align 4
  %41 = bitcast float* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41)
  store float 1.000000e+00, float* %10, align 4
  %42 = fcmp ogt float %2, 1.000000e+00
  %43 = select i1 %42, float* %10, float* %14
  %44 = load float, float* %43, align 4
  %45 = fcmp ogt float %44, 0.000000e+00
  %46 = select i1 %45, float* %43, float* %9
  %47 = bitcast float* %46 to i32*
  %48 = load i32, i32* %47, align 4
  store i32 %48, i32* %6, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %40)
  %49 = bitcast i32 %39 to float
  %50 = bitcast i32 %48 to float
  %51 = fcmp oge float %49, %50
  %52 = icmp eq i32 %3, 1
  %53 = and i1 %52, %51
  br i1 %53, label %54, label %56

54:                                               ; preds = %30
  %55 = getelementptr inbounds %class.sk_sp.30, %class.sk_sp.30* %0, i64 0, i32 0
  store %class.SkPathEffect* null, %class.SkPathEffect** %55, align 8
  br label %68

56:                                               ; preds = %30
  %57 = tail call i8* @_Znwm(i64 24) #9
  %58 = getelementptr inbounds i8, i8* %57, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 1, i32* %59, align 4
  %60 = bitcast i8* %57 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTV8SkTrimPE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %60, align 8
  %61 = getelementptr inbounds i8, i8* %57, i64 12
  %62 = bitcast i8* %61 to i32*
  store i32 %39, i32* %62, align 4
  %63 = getelementptr inbounds i8, i8* %57, i64 16
  %64 = bitcast i8* %63 to i32*
  store i32 %48, i32* %64, align 8
  %65 = getelementptr inbounds i8, i8* %57, i64 20
  %66 = bitcast i8* %65 to i32*
  store i32 %3, i32* %66, align 4
  %67 = bitcast %class.sk_sp.30* %0 to i8**
  store i8* %57, i8** %67, align 8
  br label %68

68:                                               ; preds = %56, %54, %28, %20
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkRefCntBaseD2Ev(%class.SkRefCntBase*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTrimPED0Ev(%class.SkTrimPE*) unnamed_addr #6 comdat align 2 {
  %2 = bitcast %class.SkTrimPE* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #1 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #8
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.29*, %class.SkReadBuffer*)* @_ZNK8SkTrimPE10getFactoryEv(%class.SkTrimPE*) unnamed_addr #1 comdat align 2 {
  ret void (%class.sk_sp.29*, %class.SkReadBuffer*)* @_ZN8SkTrimPE10CreateProcER12SkReadBuffer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK8SkTrimPE11getTypeNameEv(%class.SkTrimPE*) unnamed_addr #1 comdat align 2 {
  ret i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK16SkPathEffectBase18getFlattenableTypeEv(%class.SkPathEffectBase*) unnamed_addr #1 comdat align 2 {
  ret i32 5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK16SkPathEffectBase10onAsPointsEPNS_9PointDataERK6SkPathRK11SkStrokeRecRK8SkMatrixPK6SkRect(%class.SkPathEffectBase*, %"class.SkPathEffectBase::PointData"*, %class.SkPath* dereferenceable(16), %class.SkStrokeRec* dereferenceable(16), %class.SkMatrix* dereferenceable(40), %struct.SkRect*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK16SkPathEffectBase9onAsADashEPN12SkPathEffect8DashInfoE(%class.SkPathEffectBase*, %"struct.SkPathEffect::DashInfo"*) unnamed_addr #1 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkTrimPE17computeFastBoundsEP6SkRect(%class.SkTrimPE*, %struct.SkRect*) unnamed_addr #1 comdat align 2 {
  ret i1 true
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare zeroext i1 @_ZN13SkPathMeasure10getSegmentEffP6SkPathb(%class.SkPathMeasure*, float, float, %class.SkPath*, i1 zeroext) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN16SkTrimPathEffect4MakeEffNS_4ModeE: argument 0"}
!4 = distinct !{!4, !"_ZN16SkTrimPathEffect4MakeEffNS_4ModeE"}
