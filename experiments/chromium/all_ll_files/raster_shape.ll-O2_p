; ModuleID = '../../third_party/blink/renderer/core/layout/shapes/raster_shape.cc'
source_filename = "../../third_party/blink/renderer/core/layout/shapes/raster_shape.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::MarginIntervalGenerator" = type <{ %"class.WTF::Vector", i32, i32, i32, [4 x i8] }>
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i32*, i32, i32 }
%"class.blink::ShapeInterval" = type { i32, i32 }
%"class.blink::RasterShapeIntervals" = type <{ %"class.blink::IntRect", %"class.WTF::Vector.0", i32, [4 x i8] }>
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::IntSize" = type { i32, i32 }
%"class.WTF::Vector.0" = type { %"class.WTF::VectorBuffer.1" }
%"class.WTF::VectorBuffer.1" = type { %"class.WTF::VectorBufferBase.2" }
%"class.WTF::VectorBufferBase.2" = type { %"class.blink::ShapeInterval"*, i32, i32 }
%"class.blink::Path" = type { %class.SkPath }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.9", %"struct.std::__1::atomic.9", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.7, %class.SkTDArray.8, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.7 = type { i8*, i32, i32 }
%class.SkTDArray.8 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.14 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.9" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.14 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.15", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.15" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__cxx_atomic_impl.17" }
%"struct.std::__1::__cxx_atomic_impl.17" = type { %"struct.std::__1::__cxx_atomic_base_impl.18" }
%"struct.std::__1::__cxx_atomic_base_impl.18" = type { i8 }
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__cxx_atomic_impl.12" }
%"struct.std::__1::__cxx_atomic_impl.12" = type { %"struct.std::__1::__cxx_atomic_base_impl.13" }
%"struct.std::__1::__cxx_atomic_base_impl.13" = type { i8 }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::RasterShape" = type { %"class.blink::Shape", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.blink::IntSize" }
%"class.blink::Shape" = type { i32 (...)**, i8, float }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::RasterShapeIntervals"* }
%"struct.blink::Shape::DisplayPaths" = type { %"class.blink::Path", %"class.blink::Path" }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink11RasterShapeD2Ev = comdat any

$_ZN5blink11RasterShapeD0Ev = comdat any

$_ZNK5blink11RasterShape29ShapeMarginLogicalBoundingBoxEv = comdat any

$_ZNK5blink11RasterShape7IsEmptyEv = comdat any

$_ZNK5blink11RasterShape17BuildDisplayPathsERNS_5Shape12DisplayPathsE = comdat any

$_ZNK3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIiEEmm = comdat any

$_ZN3WTF6VectorIiLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZNK3WTF6VectorIiLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13ShapeIntervalIiEEEEmm = comdat any

@_ZTVN5blink11RasterShapeE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::RasterShape"*)* @_ZN5blink11RasterShapeD2Ev to i8*), i8* bitcast (void (%"class.blink::RasterShape"*)* @_ZN5blink11RasterShapeD0Ev to i8*), i8* bitcast ({ i64, i64 } (%"class.blink::RasterShape"*)* @_ZNK5blink11RasterShape29ShapeMarginLogicalBoundingBoxEv to i8*), i8* bitcast (i1 (%"class.blink::RasterShape"*)* @_ZNK5blink11RasterShape7IsEmptyEv to i8*), i8* bitcast ({ i64, i8 } (%"class.blink::RasterShape"*, i32, i32)* @_ZNK5blink11RasterShape19GetExcludedIntervalENS_10LayoutUnitES1_ to i8*), i8* bitcast (void (%"class.blink::RasterShape"*, %"struct.blink::Shape::DisplayPaths"*)* @_ZNK5blink11RasterShape17BuildDisplayPathsERNS_5Shape12DisplayPathsE to i8*)] }, align 8
@.str = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIiEEPKcv = private unnamed_addr constant [51 x i8] c"const char *WTF::GetStringWithTypeName() [T = int]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13ShapeIntervalIiEEEEPKcv = private unnamed_addr constant [73 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ShapeInterval<int>]\00", align 1

@_ZN5blink23MarginIntervalGeneratorC1Ej = hidden unnamed_addr alias void (%"class.blink::MarginIntervalGenerator"*, i32), void (%"class.blink::MarginIntervalGenerator"*, i32)* @_ZN5blink23MarginIntervalGeneratorC2Ej

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23MarginIntervalGeneratorC2Ej(%"class.blink::MarginIntervalGenerator"*, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %0, i64 0, i32 0
  %4 = add i32 %1, 1
  %5 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %6 = icmp eq i32 %4, 0
  %7 = bitcast %"class.blink::MarginIntervalGenerator"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 28, i1 false)
  br i1 %6, label %29, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %10 = icmp ugt i32 %4, 4
  %11 = select i1 %10, i32 %4, i32 4
  %12 = zext i32 %11 to i64
  %13 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIiEEmm(i64 %12) #8
  %14 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %13, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIiEEPKcv, i64 0, i64 0)) #8
  %15 = ptrtoint i8* %14 to i64
  %16 = bitcast %"class.blink::MarginIntervalGenerator"* %0 to i64*
  store atomic i64 %15, i64* %16 monotonic, align 8
  %17 = lshr i64 %13, 2
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %9, align 8
  %19 = bitcast i8* %14 to i32*
  %20 = load i32, i32* %5, align 4
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds i32, i32* %19, i64 %21
  %23 = zext i32 %4 to i64
  %24 = getelementptr inbounds i32, i32* %19, i64 %23
  %25 = bitcast i32* %22 to i8*
  %26 = ptrtoint i32* %24 to i64
  %27 = ptrtoint i32* %22 to i64
  %28 = sub i64 %26, %27
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %25, i8 0, i64 %28, i1 false) #8
  br label %29

29:                                               ; preds = %2, %8
  store i32 %4, i32* %5, align 4
  %30 = mul i32 %1, %1
  br label %32

31:                                               ; preds = %32
  ret void

32:                                               ; preds = %29, %32
  %33 = phi i32 [ 0, %29 ], [ %40, %32 ]
  %34 = mul i32 %33, %33
  %35 = sub i32 %30, %34
  %36 = uitofp i32 %35 to double
  %37 = tail call double @sqrt(double %36) #8
  %38 = fptosi double %37 to i32
  %39 = tail call dereferenceable(4) i32* @_ZN3WTF6VectorIiLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 %33) #8
  store i32 %38, i32* %39, align 4
  %40 = add i32 %33, 1
  %41 = icmp ugt i32 %40, %1
  br i1 %41, label %31, label %32
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink23MarginIntervalGenerator3SetEiRKNS_13ShapeIntervalIiEE(%"class.blink::MarginIntervalGenerator"* nocapture, i32, %"class.blink::ShapeInterval"* nocapture readonly dereferenceable(8)) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %0, i64 0, i32 1
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %2, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %2, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %6, %8
  %10 = select i1 %9, i32 0, i32 %8
  %11 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %0, i64 0, i32 2
  store i32 %10, i32* %11, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load i32, i32* %7, align 4
  %14 = icmp slt i32 %12, %13
  %15 = select i1 %14, i32 0, i32 %12
  %16 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %0, i64 0, i32 3
  store i32 %15, i32* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK5blink23MarginIntervalGenerator10IntervalAtEi(%"class.blink::MarginIntervalGenerator"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = sub nsw i32 %1, %4
  %6 = icmp slt i32 %5, 0
  %7 = sub nsw i32 0, %5
  %8 = select i1 %6, i32 %7, i32 %5
  %9 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp ult i32 %8, %10
  br i1 %11, label %12, label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %0, i64 0, i32 0
  %14 = tail call dereferenceable(4) i32* @_ZNK3WTF6VectorIiLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %13, i32 %8) #8
  %15 = load i32, i32* %14, align 4
  br label %16

16:                                               ; preds = %2, %12
  %17 = phi i32 [ %15, %12 ], [ 0, %2 ]
  %18 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %0, i64 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = sub nsw i32 %19, %17
  %21 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %0, i64 0, i32 3
  %22 = load i32, i32* %21, align 8
  %23 = add nsw i32 %22, %17
  %24 = zext i32 %23 to i64
  %25 = shl nuw i64 %24, 32
  %26 = zext i32 %20 to i64
  %27 = or i64 %25, %26
  ret i64 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::RasterShapeIntervals"* @_ZNK5blink20RasterShapeIntervals27ComputeShapeMarginIntervalsEi(%"class.blink::RasterShapeIntervals"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::IntRect", align 4
  %4 = alloca %"class.blink::MarginIntervalGenerator", align 8
  %5 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, %1
  %8 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  br i1 %7, label %14, label %10

10:                                               ; preds = %2
  %11 = sub i32 %1, %6
  %12 = shl i32 %11, 1
  %13 = add i32 %12, %9
  br label %14

14:                                               ; preds = %2, %10
  %15 = phi i32 [ %13, %10 ], [ %9, %2 ]
  %16 = tail call noalias i8* @malloc(i64 40) #8
  %17 = bitcast i8* %16 to %"class.blink::RasterShapeIntervals"*
  %18 = select i1 %7, i32 %6, i32 %1
  %19 = getelementptr inbounds i8, i8* %16, i64 32
  %20 = bitcast i8* %19 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %16, i8 0, i64 32, i1 false) #8
  store i32 %18, i32* %20, align 8
  %21 = icmp ult i32 %15, 2147483647
  %22 = select i1 %21, i32 %15, i32 2147483647
  %23 = getelementptr inbounds i8, i8* %16, i64 28
  %24 = bitcast i8* %23 to i32*
  %25 = icmp eq i32 %22, 0
  br i1 %25, label %79, label %26

26:                                               ; preds = %14
  %27 = getelementptr inbounds i8, i8* %16, i64 16
  %28 = getelementptr inbounds i8, i8* %16, i64 24
  %29 = bitcast i8* %28 to i32*
  %30 = icmp ugt i32 %22, 4
  %31 = select i1 %30, i32 %22, i32 4
  %32 = zext i32 %31 to i64
  %33 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13ShapeIntervalIiEEEEmm(i64 %32) #8
  %34 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %33, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13ShapeIntervalIiEEEEPKcv, i64 0, i64 0)) #8
  %35 = ptrtoint i8* %34 to i64
  %36 = bitcast i8* %27 to i64*
  store atomic i64 %35, i64* %36 monotonic, align 8
  %37 = lshr i64 %33, 3
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %29, align 8
  %39 = bitcast i8* %34 to %"class.blink::ShapeInterval"*
  %40 = zext i32 %22 to i64
  %41 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %39, i64 %40
  %42 = shl nuw nsw i64 %40, 3
  %43 = add nsw i64 %42, -8
  %44 = lshr exact i64 %43, 3
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 7
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %56, label %48

48:                                               ; preds = %26, %48
  %49 = phi %"class.blink::ShapeInterval"* [ %53, %48 ], [ %39, %26 ]
  %50 = phi i64 [ %54, %48 ], [ %46, %26 ]
  %51 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %49, i64 0, i32 0
  store i32 -1, i32* %51, align 4
  %52 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %49, i64 0, i32 1
  store i32 -2, i32* %52, align 4
  %53 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %49, i64 1
  %54 = add i64 %50, -1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %48, !llvm.loop !2

56:                                               ; preds = %48, %26
  %57 = phi %"class.blink::ShapeInterval"* [ %39, %26 ], [ %53, %48 ]
  %58 = icmp ult i64 %43, 56
  br i1 %58, label %79, label %59

59:                                               ; preds = %56, %59
  %60 = phi %"class.blink::ShapeInterval"* [ %77, %59 ], [ %57, %56 ]
  %61 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 0, i32 0
  store i32 -1, i32* %61, align 4
  %62 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 0, i32 1
  store i32 -2, i32* %62, align 4
  %63 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 1, i32 0
  store i32 -1, i32* %63, align 4
  %64 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 1, i32 1
  store i32 -2, i32* %64, align 4
  %65 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 2, i32 0
  store i32 -1, i32* %65, align 4
  %66 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 2, i32 1
  store i32 -2, i32* %66, align 4
  %67 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 3, i32 0
  store i32 -1, i32* %67, align 4
  %68 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 3, i32 1
  store i32 -2, i32* %68, align 4
  %69 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 4, i32 0
  store i32 -1, i32* %69, align 4
  %70 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 4, i32 1
  store i32 -2, i32* %70, align 4
  %71 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 5, i32 0
  store i32 -1, i32* %71, align 4
  %72 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 5, i32 1
  store i32 -2, i32* %72, align 4
  %73 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 6, i32 0
  store i32 -1, i32* %73, align 4
  %74 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 6, i32 1
  store i32 -2, i32* %74, align 4
  %75 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 7, i32 0
  store i32 -1, i32* %75, align 4
  %76 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 7, i32 1
  store i32 -2, i32* %76, align 4
  %77 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %60, i64 8
  %78 = icmp eq %"class.blink::ShapeInterval"* %77, %41
  br i1 %78, label %79, label %59

79:                                               ; preds = %56, %59, %14
  store i32 %22, i32* %24, align 4
  %80 = bitcast %"class.blink::MarginIntervalGenerator"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %80) #8
  %81 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %82 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %4, i64 0, i32 0, i32 0, i32 0, i32 2
  %83 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %4, i64 0, i32 1
  %84 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %4, i64 0, i32 2
  %85 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %4, i64 0, i32 3
  %86 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %4, i64 0, i32 0
  %87 = add i32 %1, 1
  %88 = icmp eq i32 %87, 0
  %89 = bitcast %"class.blink::MarginIntervalGenerator"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %89, i8 -86, i64 32, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %80, i8 0, i64 28, i1 false) #8
  br i1 %88, label %107, label %90

90:                                               ; preds = %79
  %91 = getelementptr inbounds %"class.blink::MarginIntervalGenerator", %"class.blink::MarginIntervalGenerator"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %92 = icmp ugt i32 %87, 4
  %93 = select i1 %92, i32 %87, i32 4
  %94 = zext i32 %93 to i64
  %95 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIiEEmm(i64 %94) #8
  %96 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %95, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIiEEPKcv, i64 0, i64 0)) #8
  %97 = ptrtoint i8* %96 to i64
  %98 = bitcast %"class.blink::MarginIntervalGenerator"* %4 to i64*
  store atomic i64 %97, i64* %98 monotonic, align 8
  %99 = lshr i64 %95, 2
  %100 = trunc i64 %99 to i32
  store i32 %100, i32* %91, align 8
  %101 = bitcast i8* %96 to i32*
  %102 = zext i32 %87 to i64
  %103 = getelementptr inbounds i32, i32* %101, i64 %102
  %104 = ptrtoint i32* %103 to i64
  %105 = ptrtoint i8* %96 to i64
  %106 = sub i64 %104, %105
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %96, i8 0, i64 %106, i1 false) #8
  br label %107

107:                                              ; preds = %90, %79
  store i32 %87, i32* %82, align 4
  %108 = mul i32 %1, %1
  br label %109

109:                                              ; preds = %109, %107
  %110 = phi i32 [ 0, %107 ], [ %117, %109 ]
  %111 = mul i32 %110, %110
  %112 = sub i32 %108, %111
  %113 = uitofp i32 %112 to double
  %114 = call double @sqrt(double %113) #8
  %115 = fptosi double %114 to i32
  %116 = call dereferenceable(4) i32* @_ZN3WTF6VectorIiLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* nonnull %86, i32 %110) #8
  store i32 %115, i32* %116, align 4
  %117 = add i32 %110, 1
  %118 = icmp ugt i32 %117, %1
  br i1 %118, label %119, label %109

119:                                              ; preds = %109
  %120 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %0, i64 0, i32 0, i32 0, i32 1
  %121 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %0, i64 0, i32 0, i32 1, i32 1
  %122 = load i32, i32* %121, align 4
  %123 = icmp sgt i32 %122, 0
  br i1 %123, label %124, label %129

124:                                              ; preds = %119
  %125 = load i32, i32* %120, align 4
  %126 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %0, i64 0, i32 1
  %127 = getelementptr inbounds i8, i8* %16, i64 16
  %128 = bitcast i8* %127 to %"class.WTF::Vector.0"*
  br label %172

129:                                              ; preds = %362, %119
  %130 = bitcast i8* %16 to %"class.blink::IntRect"*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false) #8
  %131 = load i32, i32* %20, align 8
  %132 = sub nsw i32 0, %131
  %133 = load i32, i32* %24, align 4
  %134 = sub i32 %133, %131
  %135 = icmp sgt i32 %134, %132
  br i1 %135, label %136, label %162

136:                                              ; preds = %129
  %137 = getelementptr inbounds i8, i8* %16, i64 16
  %138 = bitcast i8* %137 to %"class.WTF::Vector.0"*
  %139 = bitcast %"class.blink::IntRect"* %3 to i8*
  %140 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 0, i32 0
  %141 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 0, i32 1
  %142 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 1, i32 0
  %143 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 1, i32 1
  br label %144

144:                                              ; preds = %156, %136
  %145 = phi i32 [ %131, %136 ], [ %158, %156 ]
  %146 = phi i32 [ %132, %136 ], [ %157, %156 ]
  %147 = add nsw i32 %146, %145
  %148 = call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZN3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %138, i32 %147) #8
  %149 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %148, i64 0, i32 1
  %150 = load i32, i32* %149, align 4
  %151 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %148, i64 0, i32 0
  %152 = load i32, i32* %151, align 4
  %153 = icmp sgt i32 %150, %152
  br i1 %153, label %154, label %156

154:                                              ; preds = %144
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %139) #8
  %155 = sub nsw i32 %150, %152
  store i32 %152, i32* %140, align 4
  store i32 %146, i32* %141, align 4
  store i32 %155, i32* %142, align 4
  store i32 1, i32* %143, align 4
  call void @_ZN5blink7IntRect5UniteERKS0_(%"class.blink::IntRect"* %130, %"class.blink::IntRect"* nonnull dereferenceable(16) %3) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %139) #8
  br label %156

156:                                              ; preds = %154, %144
  %157 = add nsw i32 %146, 1
  %158 = load i32, i32* %20, align 8
  %159 = load i32, i32* %24, align 4
  %160 = sub i32 %159, %158
  %161 = icmp slt i32 %157, %160
  br i1 %161, label %144, label %162

162:                                              ; preds = %156, %129
  %163 = load i32*, i32** %81, align 8
  %164 = icmp eq i32* %163, null
  %165 = bitcast i32* %163 to i8*
  br i1 %164, label %171, label %166, !prof !4

166:                                              ; preds = %162
  %167 = load i32, i32* %82, align 4
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %170, label %169, !prof !5

169:                                              ; preds = %166
  store i32 0, i32* %82, align 4
  br label %170

170:                                              ; preds = %169, %166
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %165) #8
  store i32* null, i32** %81, align 8
  br label %171

171:                                              ; preds = %162, %170
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %80) #8
  ret %"class.blink::RasterShapeIntervals"* %17

172:                                              ; preds = %124, %362
  %173 = phi i32 [ %125, %124 ], [ %363, %362 ]
  %174 = load i32, i32* %5, align 8
  %175 = add nsw i32 %174, %173
  %176 = call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZNK3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %126, i32 %175) #8
  %177 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %176, i64 0, i32 1
  %178 = load i32, i32* %177, align 4
  %179 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %176, i64 0, i32 0
  %180 = load i32, i32* %179, align 4
  %181 = icmp slt i32 %180, %178
  br i1 %181, label %184, label %182

182:                                              ; preds = %172
  %183 = add nsw i32 %173, 1
  br label %362

184:                                              ; preds = %172
  store i32 %173, i32* %83, align 8
  %185 = load i32, i32* %177, align 4
  %186 = load i32, i32* %179, align 4
  %187 = icmp slt i32 %185, %186
  %188 = select i1 %187, i32 0, i32 %186
  store i32 %188, i32* %84, align 4
  %189 = load i32, i32* %177, align 4
  %190 = load i32, i32* %179, align 4
  %191 = icmp slt i32 %189, %190
  %192 = select i1 %191, i32 0, i32 %189
  store i32 %192, i32* %85, align 8
  %193 = load i32, i32* %5, align 8
  %194 = sub nsw i32 0, %193
  %195 = sub nsw i32 %173, %1
  %196 = icmp sgt i32 %195, %194
  %197 = select i1 %196, i32 %195, i32 %194
  %198 = load i32, i32* %8, align 4
  %199 = sub i32 %198, %193
  %200 = add i32 %87, %173
  %201 = icmp slt i32 %200, %199
  %202 = select i1 %201, i32 %200, i32 %199
  %203 = icmp sgt i32 %173, %197
  br i1 %203, label %204, label %263

204:                                              ; preds = %184, %261
  %205 = phi i32 [ %206, %261 ], [ %173, %184 ]
  %206 = add nsw i32 %205, -1
  %207 = load i32, i32* %120, align 4
  %208 = icmp sgt i32 %206, %207
  br i1 %208, label %209, label %226

209:                                              ; preds = %204
  %210 = load i32, i32* %5, align 8
  %211 = add nsw i32 %210, %206
  %212 = call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZNK3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %126, i32 %211) #8
  %213 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %212, i64 0, i32 1
  %214 = load i32, i32* %213, align 4
  %215 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %212, i64 0, i32 0
  %216 = load i32, i32* %215, align 4
  %217 = icmp slt i32 %214, %216
  br i1 %217, label %226, label %218

218:                                              ; preds = %209
  %219 = load i32, i32* %177, align 4
  %220 = load i32, i32* %179, align 4
  %221 = icmp sge i32 %219, %220
  %222 = icmp sle i32 %216, %220
  %223 = icmp sge i32 %214, %219
  %224 = and i1 %222, %221
  %225 = and i1 %223, %224
  br i1 %225, label %263, label %226

226:                                              ; preds = %209, %218, %204
  %227 = load i32, i32* %20, align 8
  %228 = add nsw i32 %227, %206
  %229 = call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZN3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %128, i32 %228) #8
  %230 = load i32, i32* %83, align 8
  %231 = sub nsw i32 %206, %230
  %232 = icmp slt i32 %231, 0
  %233 = sub nsw i32 0, %231
  %234 = select i1 %232, i32 %233, i32 %231
  %235 = load i32, i32* %82, align 4
  %236 = icmp ult i32 %234, %235
  br i1 %236, label %237, label %240

237:                                              ; preds = %226
  %238 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIiLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* nonnull %86, i32 %234) #8
  %239 = load i32, i32* %238, align 4
  br label %240

240:                                              ; preds = %226, %237
  %241 = phi i32 [ %239, %237 ], [ 0, %226 ]
  %242 = load i32, i32* %84, align 4
  %243 = sub nsw i32 %242, %241
  %244 = load i32, i32* %85, align 8
  %245 = add nsw i32 %244, %241
  %246 = icmp slt i32 %245, %243
  br i1 %246, label %261, label %247

247:                                              ; preds = %240
  %248 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %229, i64 0, i32 1
  %249 = load i32, i32* %248, align 4
  %250 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %229, i64 0, i32 0
  %251 = load i32, i32* %250, align 4
  %252 = icmp slt i32 %249, %251
  br i1 %252, label %258, label %253

253:                                              ; preds = %247
  %254 = icmp slt i32 %243, %251
  %255 = select i1 %254, i32 %243, i32 %251
  %256 = icmp slt i32 %249, %245
  %257 = select i1 %256, i32 %245, i32 %249
  br label %258

258:                                              ; preds = %247, %253
  %259 = phi i32 [ %255, %253 ], [ %243, %247 ]
  %260 = phi i32 [ %257, %253 ], [ %245, %247 ]
  store i32 %259, i32* %250, align 4
  store i32 %260, i32* %248, align 4
  br label %261

261:                                              ; preds = %258, %240
  %262 = icmp sgt i32 %206, %197
  br i1 %262, label %204, label %263

263:                                              ; preds = %261, %218, %184
  %264 = load i32, i32* %20, align 8
  %265 = add nsw i32 %264, %173
  %266 = call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZN3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %128, i32 %265) #8
  %267 = load i32, i32* %83, align 8
  %268 = sub nsw i32 %173, %267
  %269 = icmp slt i32 %268, 0
  %270 = sub nsw i32 0, %268
  %271 = select i1 %269, i32 %270, i32 %268
  %272 = load i32, i32* %82, align 4
  %273 = icmp ult i32 %271, %272
  br i1 %273, label %274, label %277

274:                                              ; preds = %263
  %275 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIiLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* nonnull %86, i32 %271) #8
  %276 = load i32, i32* %275, align 4
  br label %277

277:                                              ; preds = %263, %274
  %278 = phi i32 [ %276, %274 ], [ 0, %263 ]
  %279 = load i32, i32* %84, align 4
  %280 = sub nsw i32 %279, %278
  %281 = load i32, i32* %85, align 8
  %282 = add nsw i32 %281, %278
  %283 = icmp slt i32 %282, %280
  br i1 %283, label %298, label %284

284:                                              ; preds = %277
  %285 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %266, i64 0, i32 1
  %286 = load i32, i32* %285, align 4
  %287 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %266, i64 0, i32 0
  %288 = load i32, i32* %287, align 4
  %289 = icmp slt i32 %286, %288
  br i1 %289, label %295, label %290

290:                                              ; preds = %284
  %291 = icmp slt i32 %280, %288
  %292 = select i1 %291, i32 %280, i32 %288
  %293 = icmp slt i32 %286, %282
  %294 = select i1 %293, i32 %282, i32 %286
  br label %295

295:                                              ; preds = %284, %290
  %296 = phi i32 [ %292, %290 ], [ %280, %284 ]
  %297 = phi i32 [ %294, %290 ], [ %282, %284 ]
  store i32 %296, i32* %287, align 4
  store i32 %297, i32* %285, align 4
  br label %298

298:                                              ; preds = %295, %277
  %299 = add nsw i32 %173, 1
  %300 = icmp slt i32 %299, %202
  br i1 %300, label %301, label %362

301:                                              ; preds = %298, %359
  %302 = phi i32 [ %360, %359 ], [ %299, %298 ]
  %303 = load i32, i32* %120, align 4
  %304 = load i32, i32* %121, align 4
  %305 = add nsw i32 %304, %303
  %306 = icmp slt i32 %302, %305
  br i1 %306, label %307, label %324

307:                                              ; preds = %301
  %308 = load i32, i32* %5, align 8
  %309 = add nsw i32 %308, %302
  %310 = call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZNK3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %126, i32 %309) #8
  %311 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %310, i64 0, i32 1
  %312 = load i32, i32* %311, align 4
  %313 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %310, i64 0, i32 0
  %314 = load i32, i32* %313, align 4
  %315 = icmp slt i32 %312, %314
  br i1 %315, label %324, label %316

316:                                              ; preds = %307
  %317 = load i32, i32* %177, align 4
  %318 = load i32, i32* %179, align 4
  %319 = icmp sge i32 %317, %318
  %320 = icmp sle i32 %314, %318
  %321 = icmp sge i32 %312, %317
  %322 = and i1 %320, %319
  %323 = and i1 %321, %322
  br i1 %323, label %362, label %324

324:                                              ; preds = %307, %316, %301
  %325 = load i32, i32* %20, align 8
  %326 = add nsw i32 %325, %302
  %327 = call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZN3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %128, i32 %326) #8
  %328 = load i32, i32* %83, align 8
  %329 = sub nsw i32 %302, %328
  %330 = icmp slt i32 %329, 0
  %331 = sub nsw i32 0, %329
  %332 = select i1 %330, i32 %331, i32 %329
  %333 = load i32, i32* %82, align 4
  %334 = icmp ult i32 %332, %333
  br i1 %334, label %335, label %338

335:                                              ; preds = %324
  %336 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIiLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* nonnull %86, i32 %332) #8
  %337 = load i32, i32* %336, align 4
  br label %338

338:                                              ; preds = %324, %335
  %339 = phi i32 [ %337, %335 ], [ 0, %324 ]
  %340 = load i32, i32* %84, align 4
  %341 = sub nsw i32 %340, %339
  %342 = load i32, i32* %85, align 8
  %343 = add nsw i32 %342, %339
  %344 = icmp slt i32 %343, %341
  br i1 %344, label %359, label %345

345:                                              ; preds = %338
  %346 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %327, i64 0, i32 1
  %347 = load i32, i32* %346, align 4
  %348 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %327, i64 0, i32 0
  %349 = load i32, i32* %348, align 4
  %350 = icmp slt i32 %347, %349
  br i1 %350, label %356, label %351

351:                                              ; preds = %345
  %352 = icmp slt i32 %341, %349
  %353 = select i1 %352, i32 %341, i32 %349
  %354 = icmp slt i32 %347, %343
  %355 = select i1 %354, i32 %343, i32 %347
  br label %356

356:                                              ; preds = %345, %351
  %357 = phi i32 [ %353, %351 ], [ %341, %345 ]
  %358 = phi i32 [ %355, %351 ], [ %343, %345 ]
  store i32 %357, i32* %348, align 4
  store i32 %358, i32* %346, align 4
  br label %359

359:                                              ; preds = %356, %338
  %360 = add nsw i32 %302, 1
  %361 = icmp slt i32 %360, %202
  br i1 %361, label %301, label %362

362:                                              ; preds = %316, %359, %182, %298
  %363 = phi i32 [ %183, %182 ], [ %299, %298 ], [ %299, %359 ], [ %299, %316 ]
  %364 = load i32, i32* %120, align 4
  %365 = load i32, i32* %121, align 4
  %366 = add nsw i32 %365, %364
  %367 = icmp slt i32 %363, %366
  br i1 %367, label %172, label %129
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20RasterShapeIntervals16InitializeBoundsEv(%"class.blink::RasterShapeIntervals"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::IntRect", align 4
  %3 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %0, i64 0, i32 0
  %4 = bitcast %"class.blink::RasterShapeIntervals"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false)
  %5 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = sub nsw i32 0, %6
  %8 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = sub i32 %9, %6
  %11 = icmp sgt i32 %10, %7
  br i1 %11, label %12, label %19

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %0, i64 0, i32 1
  %14 = bitcast %"class.blink::IntRect"* %2 to i8*
  %15 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2, i64 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2, i64 0, i32 1, i32 0
  %18 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2, i64 0, i32 1, i32 1
  br label %20

19:                                               ; preds = %32, %1
  ret void

20:                                               ; preds = %12, %32
  %21 = phi i32 [ %6, %12 ], [ %34, %32 ]
  %22 = phi i32 [ %7, %12 ], [ %33, %32 ]
  %23 = add nsw i32 %21, %22
  %24 = call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZN3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %13, i32 %23) #8
  %25 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %24, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %24, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %26, %28
  br i1 %29, label %30, label %32

30:                                               ; preds = %20
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8
  %31 = sub nsw i32 %26, %28
  store i32 %28, i32* %15, align 4
  store i32 %22, i32* %16, align 4
  store i32 %31, i32* %17, align 4
  store i32 1, i32* %18, align 4
  call void @_ZN5blink7IntRect5UniteERKS0_(%"class.blink::IntRect"* %3, %"class.blink::IntRect"* nonnull dereferenceable(16) %2) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #8
  br label %32

32:                                               ; preds = %20, %30
  %33 = add nsw i32 %22, 1
  %34 = load i32, i32* %5, align 8
  %35 = load i32, i32* %8, align 4
  %36 = sub i32 %35, %34
  %37 = icmp slt i32 %33, %36
  br i1 %37, label %20, label %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN5blink7IntRect5UniteERKS0_(%"class.blink::IntRect"*, %"class.blink::IntRect"* dereferenceable(16)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink20RasterShapeIntervals15BuildBoundsPathERNS_4PathE(%"class.blink::RasterShapeIntervals"*, %"class.blink::Path"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::FloatRect", align 4
  %4 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %0, i64 0, i32 0, i32 1, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = add nsw i32 %7, %5
  %9 = icmp sgt i32 %7, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %0, i64 0, i32 2
  %13 = bitcast %"class.blink::FloatRect"* %3 to i8*
  %14 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %3, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %3, i64 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %3, i64 0, i32 1, i32 0
  %17 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %3, i64 0, i32 1, i32 1
  br label %19

18:                                               ; preds = %78, %2
  ret void

19:                                               ; preds = %10, %78
  %20 = phi i32 [ %5, %10 ], [ %79, %78 ]
  %21 = load i32, i32* %12, align 8
  %22 = add nsw i32 %21, %20
  %23 = call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZNK3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %11, i32 %22) #8
  %24 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %23, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %23, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %27, %25
  br i1 %28, label %31, label %29

29:                                               ; preds = %19
  %30 = add nsw i32 %20, 1
  br label %78

31:                                               ; preds = %19
  %32 = load i32, i32* %12, align 8
  %33 = add nsw i32 %32, %20
  %34 = call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZNK3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %11, i32 %33) #8
  %35 = bitcast %"class.blink::ShapeInterval"* %34 to i64*
  %36 = load i64, i64* %35, align 4
  %37 = trunc i64 %36 to i32
  %38 = lshr i64 %36, 32
  %39 = trunc i64 %38 to i32
  %40 = icmp slt i32 %39, %37
  %41 = select i1 %40, i32 0, i32 %37
  %42 = select i1 %40, i32 0, i32 %39
  br label %43

43:                                               ; preds = %56, %31
  %44 = phi i32 [ %20, %31 ], [ %45, %56 ]
  %45 = add nsw i32 %44, 1
  %46 = icmp slt i32 %45, %8
  br i1 %46, label %47, label %70

47:                                               ; preds = %43
  %48 = load i32, i32* %12, align 8
  %49 = add nsw i32 %48, %45
  %50 = call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZNK3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %11, i32 %49) #8
  %51 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %50, i64 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %50, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = icmp slt i32 %54, %52
  br i1 %55, label %56, label %70

56:                                               ; preds = %47
  %57 = load i32, i32* %12, align 8
  %58 = add nsw i32 %57, %45
  %59 = call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZNK3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %11, i32 %58) #8
  %60 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %59, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %59, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = icmp slt i32 %61, %63
  %65 = select i1 %64, i32 0, i32 %63
  %66 = icmp eq i32 %65, %41
  %67 = select i1 %64, i32 0, i32 %61
  %68 = icmp eq i32 %67, %42
  %69 = and i1 %66, %68
  br i1 %69, label %43, label %70

70:                                               ; preds = %47, %56, %43
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #8
  %71 = sitofp i32 %41 to float
  %72 = sitofp i32 %20 to float
  %73 = sub nsw i32 %39, %37
  %74 = select i1 %40, i32 0, i32 %73
  %75 = sitofp i32 %74 to float
  %76 = sub nsw i32 %45, %20
  %77 = sitofp i32 %76 to float
  store float %71, float* %14, align 4
  store float %72, float* %15, align 4
  store float %75, float* %16, align 4
  store float %77, float* %17, align 4
  call void @_ZN5blink4Path7AddRectERKNS_9FloatRectE(%"class.blink::Path"* %1, %"class.blink::FloatRect"* nonnull dereferenceable(16) %3) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #8
  br label %78

78:                                               ; preds = %29, %70
  %79 = phi i32 [ %30, %29 ], [ %45, %70 ]
  %80 = icmp slt i32 %79, %8
  br i1 %80, label %19, label %18
}

declare void @_ZN5blink4Path7AddRectERKNS_9FloatRectE(%"class.blink::Path"*, %"class.blink::FloatRect"* dereferenceable(16)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %"class.blink::RasterShapeIntervals"* @_ZNK5blink11RasterShape15MarginIntervalsEv(%"class.blink::RasterShape"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 0, i32 2
  %3 = load float, float* %2, align 4
  %4 = fcmp une float %3, 0.000000e+00
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  br label %53

7:                                                ; preds = %1
  %8 = tail call float @llvm.ceil.f32(float %3) #8
  %9 = fpext float %8 to double
  %10 = fcmp ult double %9, 0x41DFFFFFFFC00000
  br i1 %10, label %11, label %15

11:                                               ; preds = %7
  %12 = fcmp ugt float %8, 0.000000e+00
  br i1 %12, label %13, label %15

13:                                               ; preds = %11
  %14 = fptosi float %8 to i32
  br label %15

15:                                               ; preds = %7, %11, %13
  %16 = phi i32 [ %14, %13 ], [ 2147483647, %7 ], [ 0, %11 ]
  %17 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 3, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 3, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %18, %20
  %22 = select i1 %21, i32 %20, i32 %18
  %23 = sitofp i32 %22 to float
  %24 = fmul float %23, 0x3FF6A09E60000000
  %25 = fptosi float %24 to i32
  %26 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 2
  %27 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %26, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.blink::RasterShapeIntervals"*, %"class.blink::RasterShapeIntervals"** %27, align 8
  %29 = icmp eq %"class.blink::RasterShapeIntervals"* %28, null
  br i1 %29, label %30, label %53

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %32 = load %"class.blink::RasterShapeIntervals"*, %"class.blink::RasterShapeIntervals"** %31, align 8
  %33 = icmp sgt i32 %16, %25
  %34 = select i1 %33, i32 %25, i32 %16
  %35 = tail call %"class.blink::RasterShapeIntervals"* @_ZNK5blink20RasterShapeIntervals27ComputeShapeMarginIntervalsEi(%"class.blink::RasterShapeIntervals"* %32, i32 %34)
  %36 = ptrtoint %"class.blink::RasterShapeIntervals"* %35 to i64
  %37 = load %"class.blink::RasterShapeIntervals"*, %"class.blink::RasterShapeIntervals"** %27, align 8
  %38 = bitcast %"class.std::__1::unique_ptr"* %26 to i64*
  store i64 %36, i64* %38, align 8
  %39 = icmp eq %"class.blink::RasterShapeIntervals"* %37, null
  br i1 %39, label %53, label %40

40:                                               ; preds = %30
  %41 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %37, i64 0, i32 1, i32 0, i32 0, i32 0
  %42 = load %"class.blink::ShapeInterval"*, %"class.blink::ShapeInterval"** %41, align 8
  %43 = icmp eq %"class.blink::ShapeInterval"* %42, null
  %44 = bitcast %"class.blink::ShapeInterval"* %42 to i8*
  br i1 %43, label %51, label %45, !prof !4

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %37, i64 0, i32 1, i32 0, i32 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %50, label %49, !prof !5

49:                                               ; preds = %45
  store i32 0, i32* %46, align 4
  br label %50

50:                                               ; preds = %49, %45
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %44) #8
  br label %51

51:                                               ; preds = %50, %40
  %52 = bitcast %"class.blink::RasterShapeIntervals"* %37 to i8*
  tail call void @free(i8* %52) #8
  br label %53

53:                                               ; preds = %51, %30, %15, %5
  %54 = phi %"class.blink::RasterShapeIntervals"** [ %6, %5 ], [ %27, %15 ], [ %27, %30 ], [ %27, %51 ]
  %55 = load %"class.blink::RasterShapeIntervals"*, %"class.blink::RasterShapeIntervals"** %54, align 8
  ret %"class.blink::RasterShapeIntervals"* %55
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i8 } @_ZNK5blink11RasterShape19GetExcludedIntervalENS_10LayoutUnitES1_(%"class.blink::RasterShape"* nocapture, i32, i32) unnamed_addr #0 align 2 {
  %4 = tail call dereferenceable(40) %"class.blink::RasterShapeIntervals"* @_ZNK5blink11RasterShape15MarginIntervalsEv(%"class.blink::RasterShape"* %0)
  %5 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %4, i64 0, i32 0, i32 1, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 1
  br i1 %7, label %100, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %4, i64 0, i32 0, i32 1, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %10, 1
  br i1 %11, label %100, label %12

12:                                               ; preds = %8
  %13 = sdiv i32 %1, 64
  %14 = icmp slt i32 %2, 0
  %15 = select i1 %14, i32 -2147483648, i32 2147483647
  %16 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %2) #8
  %17 = extractvalue { i32, i1 } %16, 1
  %18 = extractvalue { i32, i1 } %16, 0
  %19 = select i1 %17, i32 %15, i32 %18, !prof !5
  %20 = sdiv i32 %19, 64
  %21 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %4, i64 0, i32 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %20, %22
  br i1 %23, label %100, label %24

24:                                               ; preds = %12
  %25 = add nsw i32 %10, %22
  %26 = icmp slt i32 %13, %25
  br i1 %26, label %27, label %100

27:                                               ; preds = %24
  %28 = icmp slt i32 %13, %22
  %29 = select i1 %28, i32 %22, i32 %13
  %30 = icmp slt i32 %25, %20
  %31 = select i1 %30, i32 %25, i32 %20
  %32 = icmp eq i32 %29, %31
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = icmp slt i32 %29, %31
  br i1 %34, label %35, label %73

35:                                               ; preds = %33
  %36 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %4, i64 0, i32 1
  %37 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %4, i64 0, i32 2
  br label %49

38:                                               ; preds = %27
  %39 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %4, i64 0, i32 1
  %40 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %4, i64 0, i32 2
  %41 = load i32, i32* %40, align 8
  %42 = add nsw i32 %41, %29
  %43 = tail call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZNK3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %39, i32 %42) #8
  %44 = bitcast %"class.blink::ShapeInterval"* %43 to i64*
  %45 = load i64, i64* %44, align 4
  %46 = trunc i64 %45 to i32
  %47 = lshr i64 %45, 32
  %48 = trunc i64 %47 to i32
  br label %73

49:                                               ; preds = %35, %68
  %50 = phi i32 [ %29, %35 ], [ %71, %68 ]
  %51 = phi i32 [ -1, %35 ], [ %70, %68 ]
  %52 = phi i32 [ -2, %35 ], [ %69, %68 ]
  %53 = load i32, i32* %37, align 8
  %54 = add nsw i32 %53, %50
  %55 = tail call dereferenceable(8) %"class.blink::ShapeInterval"* @_ZNK3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %36, i32 %54) #8
  %56 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %55, i64 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %55, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = icmp slt i32 %57, %59
  br i1 %60, label %68, label %61

61:                                               ; preds = %49
  %62 = icmp slt i32 %52, %51
  br i1 %62, label %68, label %63

63:                                               ; preds = %61
  %64 = icmp slt i32 %59, %51
  %65 = select i1 %64, i32 %59, i32 %51
  %66 = icmp slt i32 %52, %57
  %67 = select i1 %66, i32 %57, i32 %52
  br label %68

68:                                               ; preds = %61, %49, %63
  %69 = phi i32 [ %52, %49 ], [ %67, %63 ], [ %57, %61 ]
  %70 = phi i32 [ %51, %49 ], [ %65, %63 ], [ %59, %61 ]
  %71 = add nsw i32 %50, 1
  %72 = icmp slt i32 %71, %31
  br i1 %72, label %49, label %73

73:                                               ; preds = %68, %33, %38
  %74 = phi i32 [ %48, %38 ], [ -2, %33 ], [ %69, %68 ]
  %75 = phi i32 [ %46, %38 ], [ -1, %33 ], [ %70, %68 ]
  %76 = icmp slt i32 %74, %75
  %77 = select i1 %76, i32 0, i32 %75
  %78 = sitofp i32 %77 to float
  %79 = select i1 %76, i32 0, i32 %74
  %80 = sitofp i32 %79 to float
  %81 = fmul float %78, 6.400000e+01
  %82 = fcmp ult float %81, 0xC1E0000000000000
  %83 = fcmp ugt float %81, 0x41DFFFFFE0000000
  %84 = fcmp ogt float %81, 0xC1E0000000000000
  %85 = select i1 %84, float %81, float 0xC1E0000000000000
  %86 = fptosi float %85 to i32
  %87 = select i1 %82, i32 0, i32 2147483647
  %88 = select i1 %83, i32 %87, i32 %86
  %89 = fmul float %80, 6.400000e+01
  %90 = fcmp ult float %89, 0xC1E0000000000000
  %91 = fcmp ugt float %89, 0x41DFFFFFE0000000
  %92 = fcmp ogt float %89, 0xC1E0000000000000
  %93 = select i1 %92, float %89, float 0xC1E0000000000000
  %94 = fptosi float %93 to i32
  %95 = select i1 %90, i32 0, i32 2147483647
  %96 = select i1 %91, i32 %95, i32 %94
  %97 = zext i32 %96 to i64
  %98 = shl nuw i64 %97, 32
  %99 = zext i32 %88 to i64
  br label %100

100:                                              ; preds = %3, %73, %24, %12, %8
  %101 = phi i8 [ 0, %8 ], [ 1, %73 ], [ 0, %24 ], [ 0, %12 ], [ 0, %3 ]
  %102 = phi i64 [ 0, %8 ], [ %98, %73 ], [ 0, %24 ], [ 0, %12 ], [ 0, %3 ]
  %103 = phi i64 [ 0, %8 ], [ %99, %73 ], [ 0, %24 ], [ 0, %12 ], [ 0, %3 ]
  %104 = or i64 %103, %102
  %105 = insertvalue { i64, i8 } undef, i64 %104, 0
  %106 = insertvalue { i64, i8 } %105, i8 %101, 1
  ret { i64, i8 } %106
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink11RasterShapeD2Ev(%"class.blink::RasterShape"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN5blink11RasterShapeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.blink::RasterShapeIntervals"*, %"class.blink::RasterShapeIntervals"** %3, align 8
  store %"class.blink::RasterShapeIntervals"* null, %"class.blink::RasterShapeIntervals"** %3, align 8
  %5 = icmp eq %"class.blink::RasterShapeIntervals"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  %8 = load %"class.blink::ShapeInterval"*, %"class.blink::ShapeInterval"** %7, align 8
  %9 = icmp eq %"class.blink::ShapeInterval"* %8, null
  %10 = bitcast %"class.blink::ShapeInterval"* %8 to i8*
  br i1 %9, label %17, label %11, !prof !4

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %4, i64 0, i32 1, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15, !prof !5

15:                                               ; preds = %11
  store i32 0, i32* %12, align 4
  br label %16

16:                                               ; preds = %15, %11
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %10) #8
  br label %17

17:                                               ; preds = %16, %6
  %18 = bitcast %"class.blink::RasterShapeIntervals"* %4 to i8*
  tail call void @free(i8* %18) #8
  br label %19

19:                                               ; preds = %1, %17
  %20 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %21 = load %"class.blink::RasterShapeIntervals"*, %"class.blink::RasterShapeIntervals"** %20, align 8
  store %"class.blink::RasterShapeIntervals"* null, %"class.blink::RasterShapeIntervals"** %20, align 8
  %22 = icmp eq %"class.blink::RasterShapeIntervals"* %21, null
  br i1 %22, label %36, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %21, i64 0, i32 1, i32 0, i32 0, i32 0
  %25 = load %"class.blink::ShapeInterval"*, %"class.blink::ShapeInterval"** %24, align 8
  %26 = icmp eq %"class.blink::ShapeInterval"* %25, null
  %27 = bitcast %"class.blink::ShapeInterval"* %25 to i8*
  br i1 %26, label %34, label %28, !prof !4

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %21, i64 0, i32 1, i32 0, i32 0, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %33, label %32, !prof !5

32:                                               ; preds = %28
  store i32 0, i32* %29, align 4
  br label %33

33:                                               ; preds = %32, %28
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %27) #8
  br label %34

34:                                               ; preds = %33, %23
  %35 = bitcast %"class.blink::RasterShapeIntervals"* %21 to i8*
  tail call void @free(i8* %35) #8
  br label %36

36:                                               ; preds = %19, %34
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink11RasterShapeD0Ev(%"class.blink::RasterShape"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN5blink11RasterShapeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.blink::RasterShapeIntervals"*, %"class.blink::RasterShapeIntervals"** %3, align 8
  store %"class.blink::RasterShapeIntervals"* null, %"class.blink::RasterShapeIntervals"** %3, align 8
  %5 = icmp eq %"class.blink::RasterShapeIntervals"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  %8 = load %"class.blink::ShapeInterval"*, %"class.blink::ShapeInterval"** %7, align 8
  %9 = icmp eq %"class.blink::ShapeInterval"* %8, null
  %10 = bitcast %"class.blink::ShapeInterval"* %8 to i8*
  br i1 %9, label %17, label %11, !prof !4

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %4, i64 0, i32 1, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15, !prof !5

15:                                               ; preds = %11
  store i32 0, i32* %12, align 4
  br label %16

16:                                               ; preds = %15, %11
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %10) #8
  br label %17

17:                                               ; preds = %16, %6
  %18 = bitcast %"class.blink::RasterShapeIntervals"* %4 to i8*
  tail call void @free(i8* %18) #8
  br label %19

19:                                               ; preds = %17, %1
  %20 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %21 = load %"class.blink::RasterShapeIntervals"*, %"class.blink::RasterShapeIntervals"** %20, align 8
  store %"class.blink::RasterShapeIntervals"* null, %"class.blink::RasterShapeIntervals"** %20, align 8
  %22 = icmp eq %"class.blink::RasterShapeIntervals"* %21, null
  br i1 %22, label %36, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %21, i64 0, i32 1, i32 0, i32 0, i32 0
  %25 = load %"class.blink::ShapeInterval"*, %"class.blink::ShapeInterval"** %24, align 8
  %26 = icmp eq %"class.blink::ShapeInterval"* %25, null
  %27 = bitcast %"class.blink::ShapeInterval"* %25 to i8*
  br i1 %26, label %34, label %28, !prof !4

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %21, i64 0, i32 1, i32 0, i32 0, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %33, label %32, !prof !5

32:                                               ; preds = %28
  store i32 0, i32* %29, align 4
  br label %33

33:                                               ; preds = %32, %28
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %27) #8
  br label %34

34:                                               ; preds = %33, %23
  %35 = bitcast %"class.blink::RasterShapeIntervals"* %21 to i8*
  tail call void @free(i8* %35) #8
  br label %36

36:                                               ; preds = %19, %34
  %37 = bitcast %"class.blink::RasterShape"* %0 to i8*
  tail call void @free(i8* %37) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i64 } @_ZNK5blink11RasterShape29ShapeMarginLogicalBoundingBoxEv(%"class.blink::RasterShape"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call dereferenceable(40) %"class.blink::RasterShapeIntervals"* @_ZNK5blink11RasterShape15MarginIntervalsEv(%"class.blink::RasterShape"* %0)
  %3 = bitcast %"class.blink::RasterShapeIntervals"* %2 to i64*
  %4 = load i64, i64* %3, align 4
  %5 = trunc i64 %4 to i32
  %6 = lshr i64 %4, 32
  %7 = trunc i64 %6 to i32
  %8 = icmp sgt i32 %5, 33554431
  br i1 %8, label %14, label %9

9:                                                ; preds = %1
  %10 = icmp slt i32 %5, -33554432
  %11 = shl i64 %4, 6
  %12 = and i64 %11, 4294967232
  %13 = select i1 %10, i64 2147483648, i64 %12
  br label %14

14:                                               ; preds = %9, %1
  %15 = phi i64 [ 2147483647, %1 ], [ %13, %9 ]
  %16 = icmp sgt i32 %7, 33554431
  br i1 %16, label %21, label %17

17:                                               ; preds = %14
  %18 = icmp slt i32 %7, -33554432
  %19 = shl i64 %6, 38
  %20 = select i1 %18, i64 -9223372036854775808, i64 %19
  br label %21

21:                                               ; preds = %17, %14
  %22 = phi i64 [ 9223372032559808512, %14 ], [ %20, %17 ]
  %23 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %2, i64 0, i32 0, i32 1
  %24 = bitcast %"class.blink::IntSize"* %23 to i64*
  %25 = load i64, i64* %24, align 4
  %26 = trunc i64 %25 to i32
  %27 = lshr i64 %25, 32
  %28 = trunc i64 %27 to i32
  %29 = icmp sgt i32 %26, 33554431
  br i1 %29, label %35, label %30

30:                                               ; preds = %21
  %31 = icmp slt i32 %26, -33554432
  %32 = shl i64 %25, 6
  %33 = and i64 %32, 4294967232
  %34 = select i1 %31, i64 2147483648, i64 %33
  br label %35

35:                                               ; preds = %30, %21
  %36 = phi i64 [ 2147483647, %21 ], [ %34, %30 ]
  %37 = icmp sgt i32 %28, 33554431
  br i1 %37, label %42, label %38

38:                                               ; preds = %35
  %39 = icmp slt i32 %28, -33554432
  %40 = shl i64 %27, 38
  %41 = select i1 %39, i64 -9223372036854775808, i64 %40
  br label %42

42:                                               ; preds = %38, %35
  %43 = phi i64 [ 9223372032559808512, %35 ], [ %41, %38 ]
  %44 = or i64 %22, %15
  %45 = insertvalue { i64, i64 } undef, i64 %44, 0
  %46 = or i64 %43, %36
  %47 = insertvalue { i64, i64 } %45, i64 %46, 1
  ret { i64, i64 } %47
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink11RasterShape7IsEmptyEv(%"class.blink::RasterShape"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.blink::RasterShapeIntervals"*, %"class.blink::RasterShapeIntervals"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %3, i64 0, i32 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %11, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::RasterShapeIntervals", %"class.blink::RasterShapeIntervals"* %3, i64 0, i32 0, i32 1, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 1
  br label %11

11:                                               ; preds = %1, %7
  %12 = phi i1 [ true, %1 ], [ %10, %7 ]
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink11RasterShape17BuildDisplayPathsERNS_5Shape12DisplayPathsE(%"class.blink::RasterShape"*, %"struct.blink::Shape::DisplayPaths"* dereferenceable(32)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.blink::RasterShapeIntervals"*, %"class.blink::RasterShapeIntervals"** %3, align 8
  %5 = getelementptr inbounds %"struct.blink::Shape::DisplayPaths", %"struct.blink::Shape::DisplayPaths"* %1, i64 0, i32 0
  tail call void @_ZNK5blink20RasterShapeIntervals15BuildBoundsPathERNS_4PathE(%"class.blink::RasterShapeIntervals"* %4, %"class.blink::Path"* dereferenceable(16) %5)
  %6 = getelementptr inbounds %"class.blink::RasterShape", %"class.blink::RasterShape"* %0, i64 0, i32 0, i32 2
  %7 = load float, float* %6, align 4
  %8 = fcmp une float %7, 0.000000e+00
  br i1 %8, label %9, label %12

9:                                                ; preds = %2
  %10 = tail call dereferenceable(40) %"class.blink::RasterShapeIntervals"* @_ZNK5blink11RasterShape15MarginIntervalsEv(%"class.blink::RasterShape"* %0)
  %11 = getelementptr inbounds %"struct.blink::Shape::DisplayPaths", %"struct.blink::Shape::DisplayPaths"* %1, i64 0, i32 1
  tail call void @_ZNK5blink20RasterShapeIntervals15BuildBoundsPathERNS_4PathE(%"class.blink::RasterShapeIntervals"* %10, %"class.blink::Path"* dereferenceable(16) %11)
  br label %12

12:                                               ; preds = %9, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::ShapeInterval"* @_ZNK3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::ShapeInterval"*, %"class.blink::ShapeInterval"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %24, i64 %25
  ret %"class.blink::ShapeInterval"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::ShapeInterval"* @_ZN3WTF6VectorIN5blink13ShapeIntervalIiEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::ShapeInterval"*, %"class.blink::ShapeInterval"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::ShapeInterval", %"class.blink::ShapeInterval"* %24, i64 %25
  ret %"class.blink::ShapeInterval"* %26
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #7

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #7

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIiEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN3WTF6VectorIiLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  ret i32* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZNK3WTF6VectorIiLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  ret i32* %26
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13ShapeIntervalIiEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{!"branch_weights", i32 1, i32 2000}
