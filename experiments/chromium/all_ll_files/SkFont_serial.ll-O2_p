; ModuleID = '../../third_party/skia/src/core/SkFont_serial.cpp'
source_filename = "../../third_party/skia/src/core/SkFont_serial.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.10*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.10*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.10*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.10 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.6", [7 x i8] }>
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.11, i32, i32 }
%class.sk_sp.11 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.12, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.12 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp*, i32, [4 x i8], void (%class.sk_sp.14*, %class.SkReadBuffer*)**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.14*, %class.SkReadBuffer*)* }
%class.sk_sp.14 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%struct.SkDeserialProcs = type { {}*, i8*, {}*, i8*, void (%class.sk_sp*, i8*, i64, i8*)*, i8* }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkFontPriv7FlattenERK6SkFontR13SkWriteBuffer(%class.SkFont* nocapture readonly dereferenceable(24), %class.SkWriteBuffer* dereferenceable(56)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 4
  %5 = zext i8 %4 to i32
  %6 = shl nuw nsw i32 %5, 4
  %7 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 5
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = shl nuw nsw i32 %9, 2
  %11 = or i32 %10, %6
  %12 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 6
  %13 = load i8, i8* %12, align 2
  %14 = zext i8 %13 to i32
  %15 = or i32 %11, %14
  %16 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  %17 = load float, float* %16, align 8
  %18 = fptosi float %17 to i32
  %19 = sitofp i32 %18 to float
  %20 = fcmp oeq float %17, %19
  %21 = icmp ult i32 %18, 256
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %27

23:                                               ; preds = %2
  %24 = shl i32 %18, 16
  %25 = or i32 %24, %15
  %26 = or i32 %25, -2147483648
  br label %27

27:                                               ; preds = %23, %2
  %28 = phi i32 [ %26, %23 ], [ %15, %2 ]
  %29 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 2
  %30 = load float, float* %29, align 4
  %31 = fcmp une float %30, 1.000000e+00
  %32 = or i32 %28, 1073741824
  %33 = select i1 %31, i32 %32, i32 %28
  %34 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 3
  %35 = load float, float* %34, align 8
  %36 = fcmp une float %35, 0.000000e+00
  %37 = or i32 %33, 536870912
  %38 = select i1 %36, i32 %37, i32 %33
  %39 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 0, i32 0
  %40 = load %class.SkTypeface*, %class.SkTypeface** %39, align 8
  %41 = icmp eq %class.SkTypeface* %40, null
  %42 = or i32 %38, 268435456
  %43 = select i1 %41, i32 %38, i32 %42
  %44 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, i32)***
  %45 = load void (%class.SkWriteBuffer*, i32)**, void (%class.SkWriteBuffer*, i32)*** %44, align 8
  %46 = getelementptr inbounds void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %45, i64 7
  %47 = load void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %46, align 8
  tail call void %47(%class.SkWriteBuffer* %1, i32 %43) #3
  %48 = icmp slt i32 %43, 0
  br i1 %48, label %55, label %49

49:                                               ; preds = %27
  %50 = load float, float* %16, align 8
  %51 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, float)***
  %52 = load void (%class.SkWriteBuffer*, float)**, void (%class.SkWriteBuffer*, float)*** %51, align 8
  %53 = getelementptr inbounds void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %52, i64 5
  %54 = load void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %53, align 8
  tail call void %54(%class.SkWriteBuffer* %1, float %50) #3
  br label %55

55:                                               ; preds = %49, %27
  %56 = and i32 %43, 1073741824
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %64, label %58

58:                                               ; preds = %55
  %59 = load float, float* %29, align 4
  %60 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, float)***
  %61 = load void (%class.SkWriteBuffer*, float)**, void (%class.SkWriteBuffer*, float)*** %60, align 8
  %62 = getelementptr inbounds void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %61, i64 5
  %63 = load void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %62, align 8
  tail call void %63(%class.SkWriteBuffer* %1, float %59) #3
  br label %64

64:                                               ; preds = %55, %58
  %65 = and i32 %43, 536870912
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %73, label %67

67:                                               ; preds = %64
  %68 = load float, float* %34, align 8
  %69 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, float)***
  %70 = load void (%class.SkWriteBuffer*, float)**, void (%class.SkWriteBuffer*, float)*** %69, align 8
  %71 = getelementptr inbounds void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %70, i64 5
  %72 = load void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %71, align 8
  tail call void %72(%class.SkWriteBuffer* %1, float %68) #3
  br label %73

73:                                               ; preds = %64, %67
  %74 = and i32 %43, 268435456
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %82, label %76

76:                                               ; preds = %73
  %77 = load %class.SkTypeface*, %class.SkTypeface** %39, align 8
  %78 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, %class.SkTypeface*)***
  %79 = load void (%class.SkWriteBuffer*, %class.SkTypeface*)**, void (%class.SkWriteBuffer*, %class.SkTypeface*)*** %78, align 8
  %80 = getelementptr inbounds void (%class.SkWriteBuffer*, %class.SkTypeface*)*, void (%class.SkWriteBuffer*, %class.SkTypeface*)** %79, i64 27
  %81 = load void (%class.SkWriteBuffer*, %class.SkTypeface*)*, void (%class.SkWriteBuffer*, %class.SkTypeface*)** %80, align 8
  tail call void %81(%class.SkWriteBuffer* %1, %class.SkTypeface* %77) #3
  br label %82

82:                                               ; preds = %73, %76
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10SkFontPriv9UnflattenEP6SkFontR12SkReadBuffer(%class.SkFont* nocapture, %class.SkReadBuffer* dereferenceable(136)) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.sk_sp, align 8
  %4 = tail call i32 @_ZN12SkReadBuffer6read32Ev(%class.SkReadBuffer* %1) #3
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = lshr i32 %4, 16
  %8 = and i32 %7, 255
  %9 = uitofp i32 %8 to float
  br label %12

10:                                               ; preds = %2
  %11 = tail call float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer* %1) #3
  br label %12

12:                                               ; preds = %10, %6
  %13 = phi float [ %11, %10 ], [ %9, %6 ]
  %14 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  store float %13, float* %14, align 8
  %15 = and i32 %4, 1073741824
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %12
  %18 = tail call float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer* %1) #3
  %19 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 2
  store float %18, float* %19, align 4
  br label %20

20:                                               ; preds = %12, %17
  %21 = and i32 %4, 536870912
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %20
  %24 = tail call float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer* %1) #3
  %25 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 3
  store float %24, float* %25, align 8
  br label %26

26:                                               ; preds = %20, %23
  %27 = and i32 %4, 268435456
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %62, label %29

29:                                               ; preds = %26
  %30 = bitcast %class.sk_sp* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #3
  call void @_ZN12SkReadBuffer12readTypefaceEv(%class.sk_sp* nonnull sret %3, %class.SkReadBuffer* %1) #3
  %31 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  %32 = bitcast %class.sk_sp* %3 to i64*
  %33 = load i64, i64* %32, align 8
  store %class.SkTypeface* null, %class.SkTypeface** %31, align 8
  %34 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 0, i32 0
  %35 = load %class.SkTypeface*, %class.SkTypeface** %34, align 8
  %36 = bitcast %class.SkFont* %0 to i64*
  store i64 %33, i64* %36, align 8
  %37 = icmp eq %class.SkTypeface* %35, null
  br i1 %37, label %48, label %38

38:                                               ; preds = %29
  %39 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %35, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = atomicrmw add i32* %39, i32 -1 acq_rel
  %41 = icmp eq i32 %40, 1
  br i1 %41, label %42, label %48

42:                                               ; preds = %38
  %43 = bitcast %class.SkTypeface* %35 to %class.SkRefCntBase*
  %44 = bitcast %class.SkTypeface* %35 to void (%class.SkRefCntBase*)***
  %45 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %44, align 8
  %46 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %45, i64 2
  %47 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %46, align 8
  call void %47(%class.SkRefCntBase* nonnull %43) #3
  br label %48

48:                                               ; preds = %29, %38, %42
  %49 = load %class.SkTypeface*, %class.SkTypeface** %31, align 8
  %50 = icmp eq %class.SkTypeface* %49, null
  br i1 %50, label %61, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %49, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = atomicrmw add i32* %52, i32 -1 acq_rel
  %54 = icmp eq i32 %53, 1
  br i1 %54, label %55, label %61

55:                                               ; preds = %51
  %56 = bitcast %class.SkTypeface* %49 to %class.SkRefCntBase*
  %57 = bitcast %class.SkTypeface* %49 to void (%class.SkRefCntBase*)***
  %58 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %57, align 8
  %59 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %58, i64 2
  %60 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %59, align 8
  call void %60(%class.SkRefCntBase* nonnull %56) #3
  br label %61

61:                                               ; preds = %48, %51, %55
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #3
  br label %62

62:                                               ; preds = %26, %61
  %63 = lshr i32 %4, 4
  %64 = trunc i32 %63 to i8
  %65 = and i8 %64, 63
  %66 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  store i8 %65, i8* %66, align 4
  %67 = lshr i32 %4, 2
  %68 = and i32 %67, 3
  %69 = icmp eq i32 %68, 3
  %70 = select i1 %69, i32 0, i32 %68
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 5
  store i8 %71, i8* %72, align 1
  %73 = trunc i32 %4 to i8
  %74 = and i8 %73, 3
  %75 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 6
  store i8 %74, i8* %75, align 2
  %76 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %1, i64 0, i32 13
  %77 = load i8, i8* %76, align 8, !range !2
  %78 = icmp eq i8 %77, 0
  ret i1 %78
}

declare i32 @_ZN12SkReadBuffer6read32Ev(%class.SkReadBuffer*) local_unnamed_addr #2

declare float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer*) local_unnamed_addr #2

declare void @_ZN12SkReadBuffer12readTypefaceEv(%class.sk_sp* sret, %class.SkReadBuffer*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
