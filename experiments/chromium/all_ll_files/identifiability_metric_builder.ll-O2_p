; ModuleID = '../../third_party/blink/common/privacy_budget/identifiability_metric_builder.cc'
source_filename = "../../third_party/blink/common/privacy_budget/identifiability_metric_builder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::IdentifiabilityMetricBuilder" = type { %"class.std::__1::vector", %"class.ukm::SourceIdObj" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.blink::IdentifiableSample"*, %"struct.blink::IdentifiableSample"*, %"class.std::__1::__compressed_pair" }
%"struct.blink::IdentifiableSample" = type { %"class.blink::IdentifiableSurface", %"class.blink::IdentifiableToken" }
%"class.blink::IdentifiableSurface" = type { i64 }
%"class.blink::IdentifiableToken" = type { i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.blink::IdentifiableSample"* }
%"class.ukm::SourceIdObj" = type { i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.ukm::UkmRecorder" = type { i32 (...)** }
%"class.blink::IdentifiabilitySampleCollector" = type { i32 (...)** }

@_ZN5blink28IdentifiabilityMetricBuilderC1EN3ukm11SourceIdObjE = hidden unnamed_addr alias void (%"class.blink::IdentifiabilityMetricBuilder"*, i64), void (%"class.blink::IdentifiabilityMetricBuilder"*, i64)* @_ZN5blink28IdentifiabilityMetricBuilderC2EN3ukm11SourceIdObjE
@_ZN5blink28IdentifiabilityMetricBuilderD1Ev = hidden unnamed_addr alias void (%"class.blink::IdentifiabilityMetricBuilder"*), void (%"class.blink::IdentifiabilityMetricBuilder"*)* @_ZN5blink28IdentifiabilityMetricBuilderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28IdentifiabilityMetricBuilderC2EN3ukm11SourceIdObjE(%"class.blink::IdentifiabilityMetricBuilder"* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::IdentifiabilityMetricBuilder"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #7
  %4 = getelementptr inbounds %"class.blink::IdentifiabilityMetricBuilder", %"class.blink::IdentifiabilityMetricBuilder"* %0, i64 0, i32 1, i32 0
  store i64 %1, i64* %4, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28IdentifiabilityMetricBuilderD2Ev(%"class.blink::IdentifiabilityMetricBuilder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::IdentifiabilityMetricBuilder", %"class.blink::IdentifiabilityMetricBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"struct.blink::IdentifiableSample"*, %"struct.blink::IdentifiableSample"** %2, align 8
  %4 = icmp eq %"struct.blink::IdentifiableSample"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"struct.blink::IdentifiableSample"* %3 to i64
  %7 = getelementptr inbounds %"class.blink::IdentifiabilityMetricBuilder", %"class.blink::IdentifiabilityMetricBuilder"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.blink::IdentifiableSample"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"struct.blink::IdentifiableSample"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #8
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(32) %"class.blink::IdentifiabilityMetricBuilder"* @_ZN5blink28IdentifiabilityMetricBuilder3SetENS_19IdentifiableSurfaceENS_17IdentifiableTokenE(%"class.blink::IdentifiabilityMetricBuilder"* returned, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::IdentifiabilityMetricBuilder", %"class.blink::IdentifiabilityMetricBuilder"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"struct.blink::IdentifiableSample"*, %"struct.blink::IdentifiableSample"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::IdentifiabilityMetricBuilder", %"class.blink::IdentifiabilityMetricBuilder"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = load %"struct.blink::IdentifiableSample"*, %"struct.blink::IdentifiableSample"** %6, align 8
  %8 = icmp ult %"struct.blink::IdentifiableSample"* %5, %7
  %9 = ptrtoint %"struct.blink::IdentifiableSample"* %7 to i64
  br i1 %8, label %10, label %16

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"struct.blink::IdentifiableSample", %"struct.blink::IdentifiableSample"* %5, i64 0, i32 0, i32 0
  store i64 %1, i64* %11, align 8
  %12 = getelementptr inbounds %"struct.blink::IdentifiableSample", %"struct.blink::IdentifiableSample"* %5, i64 0, i32 1, i32 0
  store i64 %2, i64* %12, align 8
  %13 = getelementptr inbounds %"struct.blink::IdentifiableSample", %"struct.blink::IdentifiableSample"* %5, i64 1
  %14 = ptrtoint %"struct.blink::IdentifiableSample"* %13 to i64
  %15 = bitcast %"struct.blink::IdentifiableSample"** %4 to i64*
  store i64 %14, i64* %15, align 8
  br label %74

16:                                               ; preds = %3
  %17 = ptrtoint %"struct.blink::IdentifiableSample"* %5 to i64
  %18 = bitcast %"struct.blink::IdentifiableSample"** %4 to i64*
  %19 = bitcast %"class.blink::IdentifiabilityMetricBuilder"* %0 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 4
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 1152921504606846975
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = bitcast %"class.blink::IdentifiabilityMetricBuilder"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #9
  unreachable

27:                                               ; preds = %16
  %28 = bitcast %"struct.blink::IdentifiableSample"** %6 to i64*
  %29 = sub i64 %9, %20
  %30 = ashr exact i64 %29, 4
  %31 = icmp ult i64 %30, 576460752303423487
  br i1 %31, label %32, label %40

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 3
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = icmp ugt i64 %35, 1152921504606846975
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  tail call void @abort() #9
  unreachable

40:                                               ; preds = %37, %27
  %41 = phi i64 [ %35, %37 ], [ 1152921504606846975, %27 ]
  %42 = shl i64 %41, 4
  %43 = tail call i8* @_Znwm(i64 %42) #8
  %44 = bitcast i8* %43 to %"struct.blink::IdentifiableSample"*
  br label %45

45:                                               ; preds = %40, %32
  %46 = phi i64 [ %41, %40 ], [ 0, %32 ]
  %47 = phi %"struct.blink::IdentifiableSample"* [ %44, %40 ], [ null, %32 ]
  %48 = getelementptr inbounds %"struct.blink::IdentifiableSample", %"struct.blink::IdentifiableSample"* %47, i64 %22
  %49 = getelementptr inbounds %"struct.blink::IdentifiableSample", %"struct.blink::IdentifiableSample"* %47, i64 %46
  %50 = ptrtoint %"struct.blink::IdentifiableSample"* %49 to i64
  %51 = getelementptr inbounds %"struct.blink::IdentifiableSample", %"struct.blink::IdentifiableSample"* %48, i64 0, i32 0, i32 0
  store i64 %1, i64* %51, align 8
  %52 = getelementptr inbounds %"struct.blink::IdentifiableSample", %"struct.blink::IdentifiableSample"* %47, i64 %22, i32 1, i32 0
  store i64 %2, i64* %52, align 8
  %53 = getelementptr inbounds %"struct.blink::IdentifiableSample", %"struct.blink::IdentifiableSample"* %48, i64 1
  %54 = ptrtoint %"struct.blink::IdentifiableSample"* %53 to i64
  %55 = getelementptr inbounds %"class.blink::IdentifiabilityMetricBuilder", %"class.blink::IdentifiabilityMetricBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %56 = load %"struct.blink::IdentifiableSample"*, %"struct.blink::IdentifiableSample"** %55, align 8
  %57 = load i64, i64* %18, align 8
  %58 = ptrtoint %"struct.blink::IdentifiableSample"* %56 to i64
  %59 = sub i64 %57, %58
  %60 = ashr exact i64 %59, 4
  %61 = sub nsw i64 0, %60
  %62 = getelementptr inbounds %"struct.blink::IdentifiableSample", %"struct.blink::IdentifiableSample"* %48, i64 %61
  %63 = ptrtoint %"struct.blink::IdentifiableSample"* %62 to i64
  %64 = icmp sgt i64 %59, 0
  br i1 %64, label %65, label %69

65:                                               ; preds = %45
  %66 = bitcast %"struct.blink::IdentifiableSample"* %62 to i8*
  %67 = bitcast %"struct.blink::IdentifiableSample"* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 %59, i1 false) #7
  %68 = load %"struct.blink::IdentifiableSample"*, %"struct.blink::IdentifiableSample"** %55, align 8
  br label %69

69:                                               ; preds = %65, %45
  %70 = phi %"struct.blink::IdentifiableSample"* [ %56, %45 ], [ %68, %65 ]
  store i64 %63, i64* %19, align 8
  store i64 %54, i64* %18, align 8
  store i64 %50, i64* %28, align 8
  %71 = icmp eq %"struct.blink::IdentifiableSample"* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast %"struct.blink::IdentifiableSample"* %70 to i8*
  tail call void @_ZdlPv(i8* %73) #8
  br label %74

74:                                               ; preds = %72, %69, %10
  ret %"class.blink::IdentifiabilityMetricBuilder"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28IdentifiabilityMetricBuilder6RecordEPN3ukm11UkmRecorderE(%"class.blink::IdentifiabilityMetricBuilder"* nocapture, %"class.ukm::UkmRecorder"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = tail call %"class.blink::IdentifiabilitySampleCollector"* @_ZN5blink30IdentifiabilitySampleCollector3GetEv() #7
  %5 = icmp eq %"class.blink::IdentifiabilitySampleCollector"* %4, null
  br i1 %5, label %36, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::IdentifiabilityMetricBuilder", %"class.blink::IdentifiabilityMetricBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load %"struct.blink::IdentifiableSample"*, %"struct.blink::IdentifiableSample"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::IdentifiabilityMetricBuilder", %"class.blink::IdentifiabilityMetricBuilder"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = load %"struct.blink::IdentifiableSample"*, %"struct.blink::IdentifiableSample"** %9, align 8
  %11 = icmp eq %"struct.blink::IdentifiableSample"* %8, %10
  br i1 %11, label %36, label %12

12:                                               ; preds = %6
  %13 = ptrtoint %"struct.blink::IdentifiableSample"* %10 to i64
  %14 = ptrtoint %"struct.blink::IdentifiableSample"* %8 to i64
  %15 = getelementptr inbounds %"class.blink::IdentifiabilityMetricBuilder", %"class.blink::IdentifiabilityMetricBuilder"* %0, i64 0, i32 1, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.std::__1::vector"* %3 to i64*
  store i64 %14, i64* %17, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %19 = bitcast %"struct.blink::IdentifiableSample"** %18 to i64*
  store i64 %13, i64* %19, align 8
  %20 = getelementptr inbounds %"class.blink::IdentifiabilityMetricBuilder", %"class.blink::IdentifiabilityMetricBuilder"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %21 = bitcast %"struct.blink::IdentifiableSample"** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %24 = bitcast %"struct.blink::IdentifiableSample"** %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = bitcast %"class.blink::IdentifiabilityMetricBuilder"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 24, i1 false) #7
  %26 = bitcast %"class.blink::IdentifiabilitySampleCollector"* %4 to void (%"class.blink::IdentifiabilitySampleCollector"*, %"class.ukm::UkmRecorder"*, i64, %"class.std::__1::vector"*)***
  %27 = load void (%"class.blink::IdentifiabilitySampleCollector"*, %"class.ukm::UkmRecorder"*, i64, %"class.std::__1::vector"*)**, void (%"class.blink::IdentifiabilitySampleCollector"*, %"class.ukm::UkmRecorder"*, i64, %"class.std::__1::vector"*)*** %26, align 8
  %28 = getelementptr inbounds void (%"class.blink::IdentifiabilitySampleCollector"*, %"class.ukm::UkmRecorder"*, i64, %"class.std::__1::vector"*)*, void (%"class.blink::IdentifiabilitySampleCollector"*, %"class.ukm::UkmRecorder"*, i64, %"class.std::__1::vector"*)** %27, i64 2
  %29 = load void (%"class.blink::IdentifiabilitySampleCollector"*, %"class.ukm::UkmRecorder"*, i64, %"class.std::__1::vector"*)*, void (%"class.blink::IdentifiabilitySampleCollector"*, %"class.ukm::UkmRecorder"*, i64, %"class.std::__1::vector"*)** %28, align 8
  call void %29(%"class.blink::IdentifiabilitySampleCollector"* nonnull %4, %"class.ukm::UkmRecorder"* %1, i64 %16, %"class.std::__1::vector"* nonnull %3) #7
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %31 = load %"struct.blink::IdentifiableSample"*, %"struct.blink::IdentifiableSample"** %30, align 8
  %32 = icmp eq %"struct.blink::IdentifiableSample"* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %12
  %34 = ptrtoint %"struct.blink::IdentifiableSample"* %31 to i64
  store i64 %34, i64* %19, align 8
  %35 = bitcast %"struct.blink::IdentifiableSample"* %31 to i8*
  call void @_ZdlPv(i8* %35) #8
  br label %36

36:                                               ; preds = %33, %12, %2, %6
  ret void
}

declare %"class.blink::IdentifiabilitySampleCollector"* @_ZN5blink30IdentifiabilitySampleCollector3GetEv() local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
