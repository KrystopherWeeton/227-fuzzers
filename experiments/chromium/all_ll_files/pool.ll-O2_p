; ModuleID = '../../third_party/boringssl/src/crypto/pool/pool.c'
source_filename = "../../third_party/boringssl/src/crypto/pool/pool.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.crypto_buffer_pool_st = type { %struct.lhash_st_CRYPTO_BUFFER*, %union.crypto_mutex_st }
%struct.lhash_st_CRYPTO_BUFFER = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.lhash_st = type opaque
%struct.crypto_buffer_st = type { %struct.crypto_buffer_pool_st*, i8*, i64, i32 }
%struct.cbs_st = type { i8*, i64 }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.crypto_buffer_pool_st* @CRYPTO_BUFFER_POOL_new() local_unnamed_addr #0 {
  %1 = tail call i8* @OPENSSL_malloc(i64 64) #7
  %2 = bitcast i8* %1 to %struct.crypto_buffer_pool_st*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %0
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %1, i8 0, i64 64, i1 false) #7
  %5 = tail call %struct.lhash_st* @lh_new(i32 (i8*)* bitcast (i32 (%struct.crypto_buffer_st*)* @CRYPTO_BUFFER_hash to i32 (i8*)*), i32 (i8*, i8*)* bitcast (i32 (%struct.crypto_buffer_st*, %struct.crypto_buffer_st*)* @CRYPTO_BUFFER_cmp to i32 (i8*, i8*)*)) #7
  %6 = bitcast i8* %1 to %struct.lhash_st**
  store %struct.lhash_st* %5, %struct.lhash_st** %6, align 8
  %7 = icmp eq %struct.lhash_st* %5, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  tail call void @OPENSSL_free(i8* nonnull %1) #7
  br label %12

9:                                                ; preds = %4
  %10 = getelementptr inbounds i8, i8* %1, i64 8
  %11 = bitcast i8* %10 to %union.crypto_mutex_st*
  tail call void @CRYPTO_MUTEX_init(%union.crypto_mutex_st* %11) #7
  br label %12

12:                                               ; preds = %0, %9, %8
  %13 = phi %struct.crypto_buffer_pool_st* [ null, %8 ], [ %2, %9 ], [ null, %0 ]
  ret %struct.crypto_buffer_pool_st* %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @CRYPTO_BUFFER_hash(%struct.crypto_buffer_st* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = tail call i32 @OPENSSL_hash32(i8* %3, i64 %5) #7
  ret i32 %6
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @CRYPTO_BUFFER_cmp(%struct.crypto_buffer_st* nocapture readonly, %struct.crypto_buffer_st* nocapture readonly) #3 {
  %3 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %1, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  br i1 %7, label %8, label %16

8:                                                ; preds = %2
  %9 = icmp eq i64 %4, 0
  br i1 %9, label %16, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %1, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = tail call i32 @memcmp(i8* %14, i8* %12, i64 %4) #8
  br label %16

16:                                               ; preds = %10, %8, %2
  %17 = phi i32 [ 1, %2 ], [ %15, %10 ], [ 0, %8 ]
  ret i32 %17
}

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

declare void @CRYPTO_MUTEX_init(%union.crypto_mutex_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @CRYPTO_BUFFER_POOL_free(%struct.crypto_buffer_pool_st*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.crypto_buffer_pool_st* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.crypto_buffer_pool_st* %0 to %struct.lhash_st**
  %5 = load %struct.lhash_st*, %struct.lhash_st** %4, align 8
  tail call void @lh_free(%struct.lhash_st* %5) #7
  %6 = getelementptr inbounds %struct.crypto_buffer_pool_st, %struct.crypto_buffer_pool_st* %0, i64 0, i32 1
  tail call void @CRYPTO_MUTEX_cleanup(%union.crypto_mutex_st* %6) #7
  %7 = bitcast %struct.crypto_buffer_pool_st* %0 to i8*
  tail call void @OPENSSL_free(i8* nonnull %7) #7
  br label %8

8:                                                ; preds = %1, %3
  ret void
}

declare void @CRYPTO_MUTEX_cleanup(%union.crypto_mutex_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.crypto_buffer_st* @CRYPTO_BUFFER_new(i8*, i64, %struct.crypto_buffer_pool_st*) local_unnamed_addr #0 {
  %4 = alloca i8*, align 8
  %5 = alloca %struct.crypto_buffer_st, align 8
  %6 = icmp eq %struct.crypto_buffer_pool_st* %2, null
  br i1 %6, label %21, label %7

7:                                                ; preds = %3
  %8 = bitcast %struct.crypto_buffer_st* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  %9 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %5, i64 0, i32 1
  store i8* %0, i8** %9, align 8
  %10 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %5, i64 0, i32 2
  store i64 %1, i64* %10, align 8
  %11 = getelementptr inbounds %struct.crypto_buffer_pool_st, %struct.crypto_buffer_pool_st* %2, i64 0, i32 1
  tail call void @CRYPTO_MUTEX_lock_read(%union.crypto_mutex_st* %11) #7
  %12 = bitcast %struct.crypto_buffer_pool_st* %2 to %struct.lhash_st**
  %13 = load %struct.lhash_st*, %struct.lhash_st** %12, align 8
  %14 = call i8* @lh_retrieve(%struct.lhash_st* %13, i8* nonnull %8, i32 (i32 (i8*)*, i8*)* nonnull @lh_CRYPTO_BUFFER_call_hash_func, i32 (i32 (i8*, i8*)*, i8*, i8*)* nonnull @lh_CRYPTO_BUFFER_call_cmp_func) #7
  %15 = icmp eq i8* %14, null
  br i1 %15, label %20, label %16

16:                                               ; preds = %7
  %17 = bitcast i8* %14 to %struct.crypto_buffer_st*
  %18 = getelementptr inbounds i8, i8* %14, i64 24
  %19 = bitcast i8* %18 to i32*
  call void @CRYPTO_refcount_inc(i32* %19) #7
  call void @CRYPTO_MUTEX_unlock_read(%union.crypto_mutex_st* %11) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #7
  br label %56

20:                                               ; preds = %7
  call void @CRYPTO_MUTEX_unlock_read(%union.crypto_mutex_st* %11) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #7
  br label %21

21:                                               ; preds = %20, %3
  %22 = call i8* @OPENSSL_malloc(i64 32) #7
  %23 = bitcast i8* %22 to %struct.crypto_buffer_st*
  %24 = icmp eq i8* %22, null
  br i1 %24, label %56, label %25

25:                                               ; preds = %21
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %22, i8 0, i64 32, i1 false) #7
  %26 = call i8* @OPENSSL_memdup(i8* %0, i64 %1) #7
  %27 = getelementptr inbounds i8, i8* %22, i64 8
  %28 = bitcast i8* %27 to i8**
  store i8* %26, i8** %28, align 8
  %29 = icmp ne i64 %1, 0
  %30 = icmp eq i8* %26, null
  %31 = and i1 %29, %30
  br i1 %31, label %32, label %33

32:                                               ; preds = %25
  call void @OPENSSL_free(i8* nonnull %22) #7
  br label %56

33:                                               ; preds = %25
  %34 = getelementptr inbounds i8, i8* %22, i64 16
  %35 = bitcast i8* %34 to i64*
  store i64 %1, i64* %35, align 8
  %36 = getelementptr inbounds i8, i8* %22, i64 24
  %37 = bitcast i8* %36 to i32*
  store i32 1, i32* %37, align 8
  br i1 %6, label %56, label %38

38:                                               ; preds = %33
  %39 = bitcast i8* %22 to %struct.crypto_buffer_pool_st**
  store %struct.crypto_buffer_pool_st* %2, %struct.crypto_buffer_pool_st** %39, align 8
  %40 = getelementptr inbounds %struct.crypto_buffer_pool_st, %struct.crypto_buffer_pool_st* %2, i64 0, i32 1
  call void @CRYPTO_MUTEX_lock_write(%union.crypto_mutex_st* %40) #7
  %41 = bitcast %struct.crypto_buffer_pool_st* %2 to %struct.lhash_st**
  %42 = load %struct.lhash_st*, %struct.lhash_st** %41, align 8
  %43 = call i8* @lh_retrieve(%struct.lhash_st* %42, i8* nonnull %22, i32 (i32 (i8*)*, i8*)* nonnull @lh_CRYPTO_BUFFER_call_hash_func, i32 (i32 (i8*, i8*)*, i8*, i8*)* nonnull @lh_CRYPTO_BUFFER_call_cmp_func) #7
  %44 = bitcast i8* %43 to %struct.crypto_buffer_st*
  %45 = icmp eq i8* %43, null
  br i1 %45, label %46, label %51

46:                                               ; preds = %38
  %47 = load %struct.lhash_st*, %struct.lhash_st** %41, align 8
  %48 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #7
  store i8* null, i8** %4, align 8
  %49 = call i32 @lh_insert(%struct.lhash_st* %47, i8** nonnull %4, i8* nonnull %22, i32 (i32 (i8*)*, i8*)* nonnull @lh_CRYPTO_BUFFER_call_hash_func, i32 (i32 (i8*, i8*)*, i8*, i8*)* nonnull @lh_CRYPTO_BUFFER_call_cmp_func) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #7
  %50 = icmp eq i32 %49, 0
  call void @CRYPTO_MUTEX_unlock_write(%union.crypto_mutex_st* %40) #7
  br i1 %50, label %54, label %56

51:                                               ; preds = %38
  %52 = getelementptr inbounds i8, i8* %43, i64 24
  %53 = bitcast i8* %52 to i32*
  call void @CRYPTO_refcount_inc(i32* %53) #7
  call void @CRYPTO_MUTEX_unlock_write(%union.crypto_mutex_st* %40) #7
  br label %54

54:                                               ; preds = %46, %51
  %55 = load i8*, i8** %28, align 8
  call void @OPENSSL_free(i8* %55) #7
  call void @OPENSSL_free(i8* nonnull %22) #7
  br label %56

56:                                               ; preds = %16, %46, %32, %21, %33, %54
  %57 = phi %struct.crypto_buffer_st* [ %17, %16 ], [ null, %32 ], [ null, %21 ], [ %23, %33 ], [ %44, %54 ], [ %23, %46 ]
  ret %struct.crypto_buffer_st* %57
}

declare void @CRYPTO_MUTEX_lock_read(%union.crypto_mutex_st*) local_unnamed_addr #2

declare void @CRYPTO_refcount_inc(i32*) local_unnamed_addr #2

declare void @CRYPTO_MUTEX_unlock_read(%union.crypto_mutex_st*) local_unnamed_addr #2

declare i8* @OPENSSL_memdup(i8*, i64) local_unnamed_addr #2

declare void @CRYPTO_MUTEX_lock_write(%union.crypto_mutex_st*) local_unnamed_addr #2

declare void @CRYPTO_MUTEX_unlock_write(%union.crypto_mutex_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.crypto_buffer_st* @CRYPTO_BUFFER_alloc(i8** nocapture, i64) local_unnamed_addr #0 {
  %3 = tail call i8* @OPENSSL_malloc(i64 32) #7
  %4 = bitcast i8* %3 to %struct.crypto_buffer_st*
  %5 = icmp eq i8* %3, null
  br i1 %5, label %21, label %6

6:                                                ; preds = %2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %3, i8 0, i64 32, i1 false) #7
  %7 = tail call i8* @OPENSSL_malloc(i64 %1) #7
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = icmp ne i64 %1, 0
  %11 = icmp eq i8* %7, null
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %6
  tail call void @OPENSSL_free(i8* nonnull %3) #7
  br label %21

14:                                               ; preds = %6
  %15 = ptrtoint i8* %7 to i64
  %16 = getelementptr inbounds i8, i8* %3, i64 16
  %17 = bitcast i8* %16 to i64*
  store i64 %1, i64* %17, align 8
  %18 = getelementptr inbounds i8, i8* %3, i64 24
  %19 = bitcast i8* %18 to i32*
  store i32 1, i32* %19, align 8
  %20 = bitcast i8** %0 to i64*
  store i64 %15, i64* %20, align 8
  br label %21

21:                                               ; preds = %2, %14, %13
  %22 = phi %struct.crypto_buffer_st* [ null, %13 ], [ %4, %14 ], [ null, %2 ]
  ret %struct.crypto_buffer_st* %22
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.crypto_buffer_st* @CRYPTO_BUFFER_new_from_CBS(%struct.cbs_st*, %struct.crypto_buffer_pool_st*) local_unnamed_addr #0 {
  %3 = tail call i8* @CBS_data(%struct.cbs_st* %0) #7
  %4 = tail call i64 @CBS_len(%struct.cbs_st* %0) #7
  %5 = tail call %struct.crypto_buffer_st* @CRYPTO_BUFFER_new(i8* %3, i64 %4, %struct.crypto_buffer_pool_st* %1)
  ret %struct.crypto_buffer_st* %5
}

declare i8* @CBS_data(%struct.cbs_st*) local_unnamed_addr #2

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.crypto_buffer_st* %0, null
  br i1 %2, label %32, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 0
  %5 = load %struct.crypto_buffer_pool_st*, %struct.crypto_buffer_pool_st** %4, align 8
  %6 = icmp eq %struct.crypto_buffer_pool_st* %5, null
  br i1 %6, label %7, label %15

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 3
  %9 = tail call i32 @CRYPTO_refcount_dec_and_test_zero(i32* %8) #7
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %32, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 1
  %13 = load i8*, i8** %12, align 8
  tail call void @OPENSSL_free(i8* %13) #7
  %14 = bitcast %struct.crypto_buffer_st* %0 to i8*
  tail call void @OPENSSL_free(i8* nonnull %14) #7
  br label %32

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.crypto_buffer_pool_st, %struct.crypto_buffer_pool_st* %5, i64 0, i32 1
  tail call void @CRYPTO_MUTEX_lock_write(%union.crypto_mutex_st* %16) #7
  %17 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 3
  %18 = tail call i32 @CRYPTO_refcount_dec_and_test_zero(i32* %17) #7
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %15
  %21 = load %struct.crypto_buffer_pool_st*, %struct.crypto_buffer_pool_st** %4, align 8
  %22 = getelementptr inbounds %struct.crypto_buffer_pool_st, %struct.crypto_buffer_pool_st* %21, i64 0, i32 1
  tail call void @CRYPTO_MUTEX_unlock_write(%union.crypto_mutex_st* %22) #7
  br label %32

23:                                               ; preds = %15
  %24 = bitcast %struct.crypto_buffer_pool_st* %5 to %struct.lhash_st**
  %25 = load %struct.lhash_st*, %struct.lhash_st** %24, align 8
  %26 = bitcast %struct.crypto_buffer_st* %0 to i8*
  %27 = tail call i8* @lh_delete(%struct.lhash_st* %25, i8* nonnull %26, i32 (i32 (i8*)*, i8*)* nonnull @lh_CRYPTO_BUFFER_call_hash_func, i32 (i32 (i8*, i8*)*, i8*, i8*)* nonnull @lh_CRYPTO_BUFFER_call_cmp_func) #7
  %28 = load %struct.crypto_buffer_pool_st*, %struct.crypto_buffer_pool_st** %4, align 8
  %29 = getelementptr inbounds %struct.crypto_buffer_pool_st, %struct.crypto_buffer_pool_st* %28, i64 0, i32 1
  tail call void @CRYPTO_MUTEX_unlock_write(%union.crypto_mutex_st* %29) #7
  %30 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 1
  %31 = load i8*, i8** %30, align 8
  tail call void @OPENSSL_free(i8* %31) #7
  tail call void @OPENSSL_free(i8* nonnull %26) #7
  br label %32

32:                                               ; preds = %20, %23, %7, %11, %1
  ret void
}

declare i32 @CRYPTO_refcount_dec_and_test_zero(i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CRYPTO_BUFFER_up_ref(%struct.crypto_buffer_st*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 3
  tail call void @CRYPTO_refcount_inc(i32* %2) #7
  ret i32 1
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @CRYPTO_BUFFER_data(%struct.crypto_buffer_st* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 1
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @CRYPTO_BUFFER_len(%struct.crypto_buffer_st* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @CRYPTO_BUFFER_init_CBS(%struct.crypto_buffer_st* nocapture readonly, %struct.cbs_st*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.crypto_buffer_st, %struct.crypto_buffer_st* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  tail call void @CBS_init(%struct.cbs_st* %1, i8* %4, i64 %6) #7
  ret void
}

declare void @CBS_init(%struct.cbs_st*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare %struct.lhash_st* @lh_new(i32 (i8*)*, i32 (i8*, i8*)*) local_unnamed_addr #2

declare i32 @OPENSSL_hash32(i8*, i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

declare void @lh_free(%struct.lhash_st*) local_unnamed_addr #2

declare i8* @lh_retrieve(%struct.lhash_st*, i8*, i32 (i32 (i8*)*, i8*)*, i32 (i32 (i8*, i8*)*, i8*, i8*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @lh_CRYPTO_BUFFER_call_hash_func(i32 (i8*)* nocapture, i8*) #6 {
  %3 = bitcast i32 (i8*)* %0 to i32 (%struct.crypto_buffer_st*)*
  %4 = bitcast i8* %1 to %struct.crypto_buffer_st*
  %5 = tail call i32 %3(%struct.crypto_buffer_st* %4) #7
  ret i32 %5
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @lh_CRYPTO_BUFFER_call_cmp_func(i32 (i8*, i8*)* nocapture, i8*, i8*) #6 {
  %4 = bitcast i32 (i8*, i8*)* %0 to i32 (%struct.crypto_buffer_st*, %struct.crypto_buffer_st*)*
  %5 = bitcast i8* %1 to %struct.crypto_buffer_st*
  %6 = bitcast i8* %2 to %struct.crypto_buffer_st*
  %7 = tail call i32 %4(%struct.crypto_buffer_st* %5, %struct.crypto_buffer_st* %6) #7
  ret i32 %7
}

declare i32 @lh_insert(%struct.lhash_st*, i8**, i8*, i32 (i32 (i8*)*, i8*)*, i32 (i32 (i8*, i8*)*, i8*, i8*)*) local_unnamed_addr #2

declare i8* @lh_delete(%struct.lhash_st*, i8*, i32 (i32 (i8*)*, i8*)*, i32 (i32 (i8*, i8*)*, i8*, i8*)*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
