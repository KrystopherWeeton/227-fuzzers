; ModuleID = '../../third_party/boringssl/src/crypto/ec_extra/ec_derive.c'
source_filename = "../../third_party/boringssl/src/crypto/ec_extra/ec_derive.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ec_key_st = type { %struct.ec_group_st*, %struct.ec_point_st*, %struct.EC_WRAPPED_SCALAR*, i32, i32, i32, %struct.ecdsa_method_st*, %struct.crypto_ex_data_st }
%struct.ec_point_st = type { %struct.ec_group_st*, %struct.EC_RAW_POINT }
%struct.EC_RAW_POINT = type { %union.EC_FELEM, %union.EC_FELEM, %union.EC_FELEM }
%union.EC_FELEM = type { [9 x i64] }
%struct.EC_WRAPPED_SCALAR = type { %struct.bignum_st, %union.EC_SCALAR }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%union.EC_SCALAR = type { [9 x i64] }
%struct.ecdsa_method_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.ec_key_st*)*, i32 (%struct.ec_key_st*)*, i64 (%struct.ec_key_st*)*, i32 (i8*, i64, i8*, i32*, %struct.ec_key_st*)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.ec_group_st = type { %struct.ec_method_st*, %struct.ec_point_st*, %struct.bignum_st, i32, %struct.bn_mont_ctx_st*, %struct.bignum_st, %union.EC_FELEM, %union.EC_FELEM, i32, i32, %union.EC_FELEM, i32, %struct.bn_mont_ctx_st*, %union.EC_FELEM }
%struct.ec_method_st = type { i32 (%struct.ec_group_st*)*, void (%struct.ec_group_st*)*, i32 (%struct.ec_group_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_FELEM*, %union.EC_FELEM*)*, i32 (%struct.ec_group_st*, %struct.EC_AFFINE*, %struct.EC_RAW_POINT*, i64)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, i64)*, i32 (%struct.ec_group_st*, %union.EC_PRECOMP*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_PRECOMP*, %union.EC_SCALAR*, %union.EC_PRECOMP*, %union.EC_SCALAR*, %union.EC_PRECOMP*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, i8*, i64*, %union.EC_FELEM*)*, i32 (%struct.ec_group_st*, %union.EC_FELEM*, i8*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)* }
%struct.bignum_ctx = type opaque
%struct.EC_AFFINE = type { %union.EC_FELEM, %union.EC_FELEM }
%union.EC_PRECOMP = type { [31 x %struct.EC_AFFINE] }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%struct.env_md_st = type opaque

@.str = private unnamed_addr constant [60 x i8] c"../../third_party/boringssl/src/crypto/ec_extra/ec_derive.c\00", align 1
@EC_KEY_derive_from_secret.kLabel = internal constant [15 x i8] c"derive EC key \00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.ec_key_st* @EC_KEY_derive_from_secret(%struct.ec_group_st*, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca [31 x i8], align 16
  %5 = alloca [82 x i8], align 16
  %6 = tail call i32 @EC_GROUP_get_curve_name(%struct.ec_group_st* %0) #4
  %7 = tail call i8* @EC_curve_nid2nist(i32 %6) #4
  %8 = icmp eq i8* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %3
  %10 = tail call i64 @strlen(i8* nonnull %7) #5
  %11 = icmp ugt i64 %10, 16
  br i1 %11, label %12, label %13

12:                                               ; preds = %9, %3
  tail call void @ERR_put_error(i32 15, i32 0, i32 123, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 33) #4
  br label %70

13:                                               ; preds = %9
  %14 = getelementptr inbounds [31 x i8], [31 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 31, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 31, i1 false)
  %15 = call i64 @OPENSSL_strlcpy(i8* nonnull %14, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @EC_KEY_derive_from_secret.kLabel, i64 0, i64 0), i64 31) #4
  %16 = call i64 @OPENSSL_strlcat(i8* nonnull %14, i8* nonnull %7, i64 31) #4
  %17 = call i32 @EC_GROUP_order_bits(%struct.ec_group_st* %0) #4
  %18 = icmp slt i32 %17, 137
  br i1 %18, label %19, label %20

19:                                               ; preds = %13
  call void @ERR_put_error(i32 15, i32 0, i32 68, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 53) #4
  br label %68

20:                                               ; preds = %13
  %21 = getelementptr inbounds [82 x i8], [82 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 82, i8* nonnull %21) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 82, i1 false)
  %22 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %0, i64 0, i32 2
  %23 = call i32 @BN_num_bytes(%struct.bignum_st* %22) #4
  %24 = add i32 %23, 16
  %25 = zext i32 %24 to i64
  %26 = call %struct.env_md_st* @EVP_sha256() #4
  %27 = call i64 @strlen(i8* nonnull %14) #5
  %28 = call i32 @HKDF(i8* nonnull %21, i64 %25, %struct.env_md_st* %26, i8* %1, i64 %2, i8* null, i64 0, i8* nonnull %14, i64 %27) #4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %66, label %30

30:                                               ; preds = %20
  %31 = call %struct.ec_key_st* @EC_KEY_new() #4
  %32 = call %struct.bignum_ctx* @BN_CTX_new() #4
  %33 = call %struct.bignum_st* @BN_bin2bn(i8* nonnull %21, i64 %25, %struct.bignum_st* null) #4
  %34 = call %struct.ec_point_st* @EC_POINT_new(%struct.ec_group_st* %0) #4
  %35 = icmp eq %struct.ec_key_st* %31, null
  %36 = icmp eq %struct.bignum_ctx* %32, null
  %37 = or i1 %35, %36
  %38 = icmp eq %struct.bignum_st* %33, null
  %39 = or i1 %37, %38
  %40 = icmp eq %struct.ec_point_st* %34, null
  %41 = or i1 %39, %40
  br i1 %41, label %63, label %42

42:                                               ; preds = %30
  %43 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %0, i64 0, i32 4
  %44 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %43, align 8
  %45 = call i32 @BN_from_montgomery(%struct.bignum_st* nonnull %33, %struct.bignum_st* nonnull %33, %struct.bn_mont_ctx_st* %44, %struct.bignum_ctx* nonnull %32) #4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %63, label %47

47:                                               ; preds = %42
  %48 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %43, align 8
  %49 = call i32 @BN_to_montgomery(%struct.bignum_st* nonnull %33, %struct.bignum_st* nonnull %33, %struct.bn_mont_ctx_st* %48, %struct.bignum_ctx* nonnull %32) #4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %63, label %51

51:                                               ; preds = %47
  %52 = call i32 @EC_POINT_mul(%struct.ec_group_st* %0, %struct.ec_point_st* nonnull %34, %struct.bignum_st* nonnull %33, %struct.ec_point_st* null, %struct.bignum_st* null, %struct.bignum_ctx* nonnull %32) #4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %63, label %54

54:                                               ; preds = %51
  %55 = call i32 @EC_KEY_set_group(%struct.ec_key_st* nonnull %31, %struct.ec_group_st* %0) #4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %63, label %57

57:                                               ; preds = %54
  %58 = call i32 @EC_KEY_set_public_key(%struct.ec_key_st* nonnull %31, %struct.ec_point_st* nonnull %34) #4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %63, label %60

60:                                               ; preds = %57
  %61 = call i32 @EC_KEY_set_private_key(%struct.ec_key_st* nonnull %31, %struct.bignum_st* nonnull %33) #4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %60, %57, %54, %51, %47, %42, %30
  call void @EC_KEY_free(%struct.ec_key_st* %31) #4
  br label %64

64:                                               ; preds = %60, %63
  %65 = phi %struct.ec_key_st* [ null, %63 ], [ %31, %60 ]
  call void @OPENSSL_cleanse(i8* nonnull %21, i64 82) #4
  call void @BN_CTX_free(%struct.bignum_ctx* %32) #4
  call void @BN_free(%struct.bignum_st* %33) #4
  call void @EC_POINT_free(%struct.ec_point_st* %34) #4
  br label %66

66:                                               ; preds = %20, %64
  %67 = phi %struct.ec_key_st* [ %65, %64 ], [ null, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 82, i8* nonnull %21) #4
  br label %68

68:                                               ; preds = %66, %19
  %69 = phi %struct.ec_key_st* [ null, %19 ], [ %67, %66 ]
  call void @llvm.lifetime.end.p0i8(i64 31, i8* nonnull %14) #4
  br label %70

70:                                               ; preds = %68, %12
  %71 = phi %struct.ec_key_st* [ null, %12 ], [ %69, %68 ]
  ret %struct.ec_key_st* %71
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @EC_curve_nid2nist(i32) local_unnamed_addr #2

declare i32 @EC_GROUP_get_curve_name(%struct.ec_group_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare i64 @OPENSSL_strlcpy(i8*, i8*, i64) local_unnamed_addr #2

declare i64 @OPENSSL_strlcat(i8*, i8*, i64) local_unnamed_addr #2

declare i32 @EC_GROUP_order_bits(%struct.ec_group_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @BN_num_bytes(%struct.bignum_st*) local_unnamed_addr #2

declare i32 @HKDF(i8*, i64, %struct.env_md_st*, i8*, i64, i8*, i64, i8*, i64) local_unnamed_addr #2

declare %struct.env_md_st* @EVP_sha256() local_unnamed_addr #2

declare %struct.ec_key_st* @EC_KEY_new() local_unnamed_addr #2

declare %struct.bignum_ctx* @BN_CTX_new() local_unnamed_addr #2

declare %struct.bignum_st* @BN_bin2bn(i8*, i64, %struct.bignum_st*) local_unnamed_addr #2

declare %struct.ec_point_st* @EC_POINT_new(%struct.ec_group_st*) local_unnamed_addr #2

declare i32 @BN_from_montgomery(%struct.bignum_st*, %struct.bignum_st*, %struct.bn_mont_ctx_st*, %struct.bignum_ctx*) local_unnamed_addr #2

declare i32 @BN_to_montgomery(%struct.bignum_st*, %struct.bignum_st*, %struct.bn_mont_ctx_st*, %struct.bignum_ctx*) local_unnamed_addr #2

declare i32 @EC_POINT_mul(%struct.ec_group_st*, %struct.ec_point_st*, %struct.bignum_st*, %struct.ec_point_st*, %struct.bignum_st*, %struct.bignum_ctx*) local_unnamed_addr #2

declare i32 @EC_KEY_set_group(%struct.ec_key_st*, %struct.ec_group_st*) local_unnamed_addr #2

declare i32 @EC_KEY_set_public_key(%struct.ec_key_st*, %struct.ec_point_st*) local_unnamed_addr #2

declare i32 @EC_KEY_set_private_key(%struct.ec_key_st*, %struct.bignum_st*) local_unnamed_addr #2

declare void @EC_KEY_free(%struct.ec_key_st*) local_unnamed_addr #2

declare void @OPENSSL_cleanse(i8*, i64) local_unnamed_addr #2

declare void @BN_CTX_free(%struct.bignum_ctx*) local_unnamed_addr #2

declare void @BN_free(%struct.bignum_st*) local_unnamed_addr #2

declare void @EC_POINT_free(%struct.ec_point_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
