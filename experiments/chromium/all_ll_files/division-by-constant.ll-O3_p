; ModuleID = '../../v8/src/base/division-by-constant.cc'
source_filename = "../../v8/src/base/division-by-constant.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.v8::base::MagicNumbersForDivision" = type <{ i32, i32, i8, [3 x i8] }>
%"struct.v8::base::MagicNumbersForDivision.0" = type <{ i64, i32, i8, [3 x i8] }>

$_ZN2v84base23MagicNumbersForDivisionIjEC5Ejjb = comdat any

$_ZNK2v84base23MagicNumbersForDivisionIjEeqERKS2_ = comdat any

$_ZN2v84base23MagicNumbersForDivisionImEC5Emjb = comdat any

$_ZNK2v84base23MagicNumbersForDivisionImEeqERKS2_ = comdat any

$_ZN2v84base24SignedDivisionByConstantIjEENS0_23MagicNumbersForDivisionIT_EES3_ = comdat any

$_ZN2v84base24SignedDivisionByConstantImEENS0_23MagicNumbersForDivisionIT_EES3_ = comdat any

$_ZN2v84base26UnsignedDivisionByConstantIjEENS0_23MagicNumbersForDivisionIT_EES3_j = comdat any

$_ZN2v84base26UnsignedDivisionByConstantImEENS0_23MagicNumbersForDivisionIT_EES3_j = comdat any

@_ZN2v84base23MagicNumbersForDivisionIjEC1Ejjb = weak_odr hidden unnamed_addr alias void (%"struct.v8::base::MagicNumbersForDivision"*, i32, i32, i1), void (%"struct.v8::base::MagicNumbersForDivision"*, i32, i32, i1)* @_ZN2v84base23MagicNumbersForDivisionIjEC2Ejjb
@_ZN2v84base23MagicNumbersForDivisionImEC1Emjb = weak_odr hidden unnamed_addr alias void (%"struct.v8::base::MagicNumbersForDivision.0"*, i64, i32, i1), void (%"struct.v8::base::MagicNumbersForDivision.0"*, i64, i32, i1)* @_ZN2v84base23MagicNumbersForDivisionImEC2Emjb

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2v84base23MagicNumbersForDivisionIjEC2Ejjb(%"struct.v8::base::MagicNumbersForDivision"*, i32, i32, i1 zeroext) unnamed_addr #0 comdat($_ZN2v84base23MagicNumbersForDivisionIjEC5Ejjb) align 2 {
  %5 = zext i1 %3 to i8
  %6 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision", %"struct.v8::base::MagicNumbersForDivision"* %0, i64 0, i32 0
  store i32 %1, i32* %6, align 4
  %7 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision", %"struct.v8::base::MagicNumbersForDivision"* %0, i64 0, i32 1
  store i32 %2, i32* %7, align 4
  %8 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision", %"struct.v8::base::MagicNumbersForDivision"* %0, i64 0, i32 2
  store i8 %5, i8* %8, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZNK2v84base23MagicNumbersForDivisionIjEeqERKS2_(%"struct.v8::base::MagicNumbersForDivision"*, %"struct.v8::base::MagicNumbersForDivision"* dereferenceable(12)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision", %"struct.v8::base::MagicNumbersForDivision"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision", %"struct.v8::base::MagicNumbersForDivision"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %20

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision", %"struct.v8::base::MagicNumbersForDivision"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision", %"struct.v8::base::MagicNumbersForDivision"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %20

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision", %"struct.v8::base::MagicNumbersForDivision"* %0, i64 0, i32 2
  %16 = load i8, i8* %15, align 4, !range !2
  %17 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision", %"struct.v8::base::MagicNumbersForDivision"* %1, i64 0, i32 2
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %16, %18
  br label %20

20:                                               ; preds = %14, %8, %2
  %21 = phi i1 [ false, %8 ], [ false, %2 ], [ %19, %14 ]
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2v84base23MagicNumbersForDivisionImEC2Emjb(%"struct.v8::base::MagicNumbersForDivision.0"*, i64, i32, i1 zeroext) unnamed_addr #0 comdat($_ZN2v84base23MagicNumbersForDivisionImEC5Emjb) align 2 {
  %5 = zext i1 %3 to i8
  %6 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision.0", %"struct.v8::base::MagicNumbersForDivision.0"* %0, i64 0, i32 0
  store i64 %1, i64* %6, align 8
  %7 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision.0", %"struct.v8::base::MagicNumbersForDivision.0"* %0, i64 0, i32 1
  store i32 %2, i32* %7, align 8
  %8 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision.0", %"struct.v8::base::MagicNumbersForDivision.0"* %0, i64 0, i32 2
  store i8 %5, i8* %8, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZNK2v84base23MagicNumbersForDivisionImEeqERKS2_(%"struct.v8::base::MagicNumbersForDivision.0"*, %"struct.v8::base::MagicNumbersForDivision.0"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision.0", %"struct.v8::base::MagicNumbersForDivision.0"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision.0", %"struct.v8::base::MagicNumbersForDivision.0"* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  br i1 %7, label %8, label %20

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision.0", %"struct.v8::base::MagicNumbersForDivision.0"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision.0", %"struct.v8::base::MagicNumbersForDivision.0"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %20

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision.0", %"struct.v8::base::MagicNumbersForDivision.0"* %0, i64 0, i32 2
  %16 = load i8, i8* %15, align 4, !range !2
  %17 = getelementptr inbounds %"struct.v8::base::MagicNumbersForDivision.0", %"struct.v8::base::MagicNumbersForDivision.0"* %1, i64 0, i32 2
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %16, %18
  br label %20

20:                                               ; preds = %14, %8, %2
  %21 = phi i1 [ false, %8 ], [ false, %2 ], [ %19, %14 ]
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i64, i8 } @_ZN2v84base24SignedDivisionByConstantIjEENS0_23MagicNumbersForDivisionIT_EES3_(i32) local_unnamed_addr #0 comdat {
  %2 = icmp slt i32 %0, 0
  %3 = sub i32 0, %0
  %4 = select i1 %2, i32 %3, i32 %0
  %5 = lshr i32 %0, 31
  %6 = or i32 %5, -2147483648
  %7 = urem i32 %6, %4
  %8 = xor i32 %7, -1
  %9 = add i32 %6, %8
  %10 = udiv i32 -2147483648, %9
  %11 = mul i32 %10, %9
  %12 = sub i32 -2147483648, %11
  %13 = udiv i32 -2147483648, %4
  %14 = mul i32 %13, %4
  %15 = sub i32 -2147483648, %14
  br label %16

16:                                               ; preds = %45, %1
  %17 = phi i32 [ %15, %1 ], [ %35, %45 ]
  %18 = phi i32 [ %13, %1 ], [ %38, %45 ]
  %19 = phi i32 [ %12, %1 ], [ %27, %45 ]
  %20 = phi i32 [ %10, %1 ], [ %30, %45 ]
  %21 = phi i32 [ 31, %1 ], [ %22, %45 ]
  %22 = add i32 %21, 1
  %23 = shl i32 %20, 1
  %24 = shl i32 %19, 1
  %25 = icmp ult i32 %24, %9
  %26 = select i1 %25, i32 0, i32 %9
  %27 = sub i32 %24, %26
  %28 = xor i1 %25, true
  %29 = zext i1 %28 to i32
  %30 = or i32 %23, %29
  %31 = shl i32 %18, 1
  %32 = shl i32 %17, 1
  %33 = icmp ult i32 %32, %4
  %34 = select i1 %33, i32 0, i32 %4
  %35 = sub i32 %32, %34
  %36 = xor i1 %33, true
  %37 = zext i1 %36 to i32
  %38 = or i32 %31, %37
  %39 = sub i32 %4, %35
  %40 = icmp ult i32 %30, %39
  br i1 %40, label %45, label %41

41:                                               ; preds = %16
  %42 = icmp eq i32 %30, %39
  %43 = icmp eq i32 %27, 0
  %44 = and i1 %42, %43
  br i1 %44, label %45, label %46

45:                                               ; preds = %41, %16
  br label %16

46:                                               ; preds = %41
  %47 = add i32 %38, 1
  %48 = xor i32 %38, -1
  %49 = select i1 %2, i32 %48, i32 %47
  %50 = add i32 %21, -31
  %51 = zext i32 %50 to i64
  %52 = shl nuw i64 %51, 32
  %53 = zext i32 %49 to i64
  %54 = or i64 %52, %53
  %55 = insertvalue { i64, i8 } undef, i64 %54, 0
  %56 = insertvalue { i64, i8 } %55, i8 0, 1
  ret { i64, i8 } %56
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i64, i64 } @_ZN2v84base24SignedDivisionByConstantImEENS0_23MagicNumbersForDivisionIT_EES3_(i64) local_unnamed_addr #0 comdat {
  %2 = icmp slt i64 %0, 0
  %3 = sub i64 0, %0
  %4 = select i1 %2, i64 %3, i64 %0
  %5 = lshr i64 %0, 63
  %6 = or i64 %5, -9223372036854775808
  %7 = urem i64 %6, %4
  %8 = xor i64 %7, -1
  %9 = add i64 %6, %8
  %10 = udiv i64 -9223372036854775808, %9
  %11 = mul i64 %10, %9
  %12 = sub i64 -9223372036854775808, %11
  %13 = udiv i64 -9223372036854775808, %4
  %14 = mul i64 %13, %4
  %15 = sub i64 -9223372036854775808, %14
  br label %16

16:                                               ; preds = %45, %1
  %17 = phi i64 [ %12, %1 ], [ %27, %45 ]
  %18 = phi i64 [ %13, %1 ], [ %36, %45 ]
  %19 = phi i64 [ %15, %1 ], [ %38, %45 ]
  %20 = phi i64 [ %10, %1 ], [ %30, %45 ]
  %21 = phi i32 [ 63, %1 ], [ %22, %45 ]
  %22 = add i32 %21, 1
  %23 = shl i64 %20, 1
  %24 = shl i64 %17, 1
  %25 = icmp ult i64 %24, %9
  %26 = select i1 %25, i64 0, i64 %9
  %27 = sub i64 %24, %26
  %28 = xor i1 %25, true
  %29 = zext i1 %28 to i64
  %30 = or i64 %23, %29
  %31 = shl i64 %18, 1
  %32 = shl i64 %19, 1
  %33 = icmp ult i64 %32, %4
  %34 = xor i1 %33, true
  %35 = zext i1 %34 to i64
  %36 = or i64 %31, %35
  %37 = select i1 %33, i64 0, i64 %4
  %38 = sub i64 %32, %37
  %39 = sub i64 %4, %38
  %40 = icmp ult i64 %30, %39
  br i1 %40, label %45, label %41

41:                                               ; preds = %16
  %42 = icmp eq i64 %30, %39
  %43 = icmp eq i64 %27, 0
  %44 = and i1 %43, %42
  br i1 %44, label %45, label %46

45:                                               ; preds = %41, %16
  br label %16

46:                                               ; preds = %41
  %47 = add i64 %36, 1
  %48 = xor i64 %36, -1
  %49 = select i1 %2, i64 %48, i64 %47
  %50 = add i32 %21, -63
  %51 = insertvalue { i64, i64 } undef, i64 %49, 0
  %52 = zext i32 %50 to i64
  %53 = insertvalue { i64, i64 } %51, i64 %52, 1
  ret { i64, i64 } %53
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i64, i8 } @_ZN2v84base26UnsignedDivisionByConstantIjEENS0_23MagicNumbersForDivisionIT_EES3_j(i32, i32) local_unnamed_addr #0 comdat {
  %3 = lshr i32 -1, %1
  %4 = sub i32 %3, %0
  %5 = urem i32 %4, %0
  %6 = sub i32 %3, %5
  %7 = udiv i32 -2147483648, %6
  %8 = mul i32 %7, %6
  %9 = sub i32 -2147483648, %8
  %10 = udiv i32 2147483647, %0
  %11 = mul i32 %10, %0
  %12 = sub i32 2147483647, %11
  br label %13

13:                                               ; preds = %63, %2
  %14 = phi i32 [ %9, %2 ], [ %31, %63 ]
  %15 = phi i32 [ %10, %2 ], [ %51, %63 ]
  %16 = phi i32 [ %12, %2 ], [ %52, %63 ]
  %17 = phi i32 [ %7, %2 ], [ %32, %63 ]
  %18 = phi i32 [ 31, %2 ], [ %20, %63 ]
  %19 = phi i8 [ 0, %2 ], [ %53, %63 ]
  %20 = add nuw nsw i32 %18, 1
  %21 = sub i32 %6, %14
  %22 = icmp ult i32 %14, %21
  %23 = shl i32 %17, 1
  br i1 %22, label %28, label %24

24:                                               ; preds = %13
  %25 = or i32 %23, 1
  %26 = shl i32 %14, 1
  %27 = sub i32 %26, %6
  br label %30

28:                                               ; preds = %13
  %29 = shl i32 %14, 1
  br label %30

30:                                               ; preds = %28, %24
  %31 = phi i32 [ %27, %24 ], [ %29, %28 ]
  %32 = phi i32 [ %25, %24 ], [ %23, %28 ]
  %33 = add i32 %16, 1
  %34 = sub i32 %0, %16
  %35 = icmp ult i32 %33, %34
  br i1 %35, label %44, label %36

36:                                               ; preds = %30
  %37 = icmp ugt i32 %15, 2147483646
  %38 = select i1 %37, i8 1, i8 %19
  %39 = shl i32 %15, 1
  %40 = or i32 %39, 1
  %41 = shl i32 %16, 1
  %42 = or i32 %41, 1
  %43 = sub i32 %42, %0
  br label %50

44:                                               ; preds = %30
  %45 = icmp slt i32 %15, 0
  %46 = select i1 %45, i8 1, i8 %19
  %47 = shl i32 %15, 1
  %48 = shl i32 %16, 1
  %49 = or i32 %48, 1
  br label %50

50:                                               ; preds = %44, %36
  %51 = phi i32 [ %40, %36 ], [ %47, %44 ]
  %52 = phi i32 [ %43, %36 ], [ %49, %44 ]
  %53 = phi i8 [ %38, %36 ], [ %46, %44 ]
  %54 = xor i32 %52, -1
  %55 = add i32 %54, %0
  %56 = icmp eq i32 %18, 63
  br i1 %56, label %64, label %57

57:                                               ; preds = %50
  %58 = icmp ult i32 %32, %55
  br i1 %58, label %63, label %59

59:                                               ; preds = %57
  %60 = icmp eq i32 %32, %55
  %61 = icmp eq i32 %31, 0
  %62 = and i1 %61, %60
  br i1 %62, label %63, label %64

63:                                               ; preds = %59, %57
  br label %13

64:                                               ; preds = %50, %59
  %65 = add i32 %51, 1
  %66 = add nsw i32 %18, -31
  %67 = and i8 %53, 1
  %68 = zext i32 %66 to i64
  %69 = shl nuw i64 %68, 32
  %70 = zext i32 %65 to i64
  %71 = or i64 %69, %70
  %72 = insertvalue { i64, i8 } undef, i64 %71, 0
  %73 = insertvalue { i64, i8 } %72, i8 %67, 1
  ret { i64, i8 } %73
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i64, i64 } @_ZN2v84base26UnsignedDivisionByConstantImEENS0_23MagicNumbersForDivisionIT_EES3_j(i64, i32) local_unnamed_addr #0 comdat {
  %3 = zext i32 %1 to i64
  %4 = lshr i64 -1, %3
  %5 = sub i64 %4, %0
  %6 = urem i64 %5, %0
  %7 = sub i64 %4, %6
  %8 = udiv i64 -9223372036854775808, %7
  %9 = mul i64 %8, %7
  %10 = sub i64 -9223372036854775808, %9
  %11 = udiv i64 9223372036854775807, %0
  %12 = mul i64 %11, %0
  %13 = sub i64 9223372036854775807, %12
  br label %14

14:                                               ; preds = %64, %2
  %15 = phi i32 [ 63, %2 ], [ %21, %64 ]
  %16 = phi i64 [ %8, %2 ], [ %32, %64 ]
  %17 = phi i64 [ %10, %2 ], [ %33, %64 ]
  %18 = phi i64 [ %11, %2 ], [ %52, %64 ]
  %19 = phi i64 [ %13, %2 ], [ %53, %64 ]
  %20 = phi i8 [ 0, %2 ], [ %54, %64 ]
  %21 = add nuw nsw i32 %15, 1
  %22 = sub i64 %7, %17
  %23 = icmp ult i64 %17, %22
  %24 = shl i64 %16, 1
  br i1 %23, label %29, label %25

25:                                               ; preds = %14
  %26 = or i64 %24, 1
  %27 = shl i64 %17, 1
  %28 = sub i64 %27, %7
  br label %31

29:                                               ; preds = %14
  %30 = shl i64 %17, 1
  br label %31

31:                                               ; preds = %29, %25
  %32 = phi i64 [ %26, %25 ], [ %24, %29 ]
  %33 = phi i64 [ %28, %25 ], [ %30, %29 ]
  %34 = add i64 %19, 1
  %35 = sub i64 %0, %19
  %36 = icmp ult i64 %34, %35
  br i1 %36, label %45, label %37

37:                                               ; preds = %31
  %38 = icmp ugt i64 %18, 9223372036854775806
  %39 = select i1 %38, i8 1, i8 %20
  %40 = shl i64 %18, 1
  %41 = or i64 %40, 1
  %42 = shl i64 %19, 1
  %43 = or i64 %42, 1
  %44 = sub i64 %43, %0
  br label %51

45:                                               ; preds = %31
  %46 = icmp slt i64 %18, 0
  %47 = select i1 %46, i8 1, i8 %20
  %48 = shl i64 %18, 1
  %49 = shl i64 %19, 1
  %50 = or i64 %49, 1
  br label %51

51:                                               ; preds = %45, %37
  %52 = phi i64 [ %41, %37 ], [ %48, %45 ]
  %53 = phi i64 [ %44, %37 ], [ %50, %45 ]
  %54 = phi i8 [ %39, %37 ], [ %47, %45 ]
  %55 = xor i64 %53, -1
  %56 = add i64 %55, %0
  %57 = icmp eq i32 %15, 127
  br i1 %57, label %65, label %58

58:                                               ; preds = %51
  %59 = icmp ult i64 %32, %56
  br i1 %59, label %64, label %60

60:                                               ; preds = %58
  %61 = icmp eq i64 %32, %56
  %62 = icmp eq i64 %33, 0
  %63 = and i1 %62, %61
  br i1 %63, label %64, label %65

64:                                               ; preds = %60, %58
  br label %14

65:                                               ; preds = %51, %60
  %66 = add i64 %52, 1
  %67 = add nsw i32 %15, -63
  %68 = and i8 %54, 1
  %69 = insertvalue { i64, i64 } undef, i64 %66, 0
  %70 = zext i8 %68 to i64
  %71 = shl nuw nsw i64 %70, 32
  %72 = zext i32 %67 to i64
  %73 = or i64 %71, %72
  %74 = insertvalue { i64, i64 } %69, i64 %73, 1
  ret { i64, i64 } %74
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
