; ModuleID = '../../third_party/boringssl/src/crypto/poly1305/poly1305_vec.c'
source_filename = "../../third_party/boringssl/src/crypto/poly1305/poly1305_vec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.poly1305_state_internal_t = type { [2 x %struct.poly1305_power_t], %union.anon.0, i64, i64, [64 x i8] }
%struct.poly1305_power_t = type { %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon }
%union.anon = type { <2 x i64> }
%union.anon.0 = type { [5 x <2 x i64>] }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @CRYPTO_poly1305_init([512 x i8]*, i8* nocapture readonly) local_unnamed_addr #0 {
  %3 = ptrtoint [512 x i8]* %0 to i64
  %4 = add i64 %3, 63
  %5 = and i64 %4, -64
  %6 = inttoptr i64 %5 to %struct.poly1305_state_internal_t*
  %7 = bitcast i8* %1 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %1, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = and i64 %8, 17575274610687
  %13 = lshr i64 %8, 44
  %14 = shl i64 %11, 20
  %15 = or i64 %14, %13
  %16 = and i64 %15, 17592181915647
  %17 = lshr i64 %11, 24
  %18 = and i64 %17, 68719475727
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1
  %20 = trunc i64 %12 to i32
  %21 = bitcast %struct.poly1305_power_t* %19 to [4 x i32]*
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %20, i32* %22, align 4
  %23 = lshr i64 %12, 32
  %24 = trunc i64 %23 to i32
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %24, i32* %25, align 4
  %26 = trunc i64 %16 to i32
  %27 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 1
  %28 = bitcast %union.anon* %27 to [4 x i32]*
  %29 = getelementptr inbounds [4 x i32], [4 x i32]* %28, i64 0, i64 1
  store i32 %26, i32* %29, align 4
  %30 = lshr i64 %16, 32
  %31 = trunc i64 %30 to i32
  %32 = getelementptr inbounds [4 x i32], [4 x i32]* %28, i64 0, i64 3
  store i32 %31, i32* %32, align 4
  %33 = trunc i64 %18 to i32
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 2
  %35 = bitcast %union.anon* %34 to [4 x i32]*
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 1
  store i32 %33, i32* %36, align 4
  %37 = lshr i64 %18, 32
  %38 = trunc i64 %37 to i32
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 3
  store i32 %38, i32* %39, align 4
  %40 = getelementptr inbounds i8, i8* %1, i64 16
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 3
  %44 = bitcast %union.anon* %43 to [4 x i32]*
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %44, i64 0, i64 1
  store i32 %42, i32* %45, align 4
  %46 = getelementptr inbounds i8, i8* %1, i64 20
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %44, i64 0, i64 3
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds i8, i8* %1, i64 24
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 4
  %54 = bitcast %union.anon* %53 to [4 x i32]*
  %55 = getelementptr inbounds [4 x i32], [4 x i32]* %54, i64 0, i64 1
  store i32 %52, i32* %55, align 4
  %56 = getelementptr inbounds i8, i8* %1, i64 28
  %57 = bitcast i8* %56 to i32*
  %58 = load i32, i32* %57, align 1
  %59 = getelementptr inbounds [4 x i32], [4 x i32]* %54, i64 0, i64 3
  store i32 %58, i32* %59, align 4
  %60 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 1, i32 0, i64 0
  %61 = bitcast <2 x i64>* %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %61, i8 0, i64 96, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @CRYPTO_poly1305_update([512 x i8]*, i8* nocapture readonly, i64) local_unnamed_addr #1 {
  %4 = ptrtoint [512 x i8]* %0 to i64
  %5 = add i64 %4, 63
  %6 = and i64 %5, -64
  %7 = inttoptr i64 %6 to %struct.poly1305_state_internal_t*
  %8 = icmp eq i64 %2, 0
  br i1 %8, label %82, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %7, i64 0, i32 2
  %11 = load i64, i64* %10, align 16
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %43

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %7, i64 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  %17 = icmp ugt i64 %2, 32
  %18 = and i1 %17, %16
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  tail call fastcc void @poly1305_first_block(%struct.poly1305_state_internal_t* %7, i8* %1)
  %20 = getelementptr inbounds i8, i8* %1, i64 32
  %21 = add i64 %2, -32
  br label %40

22:                                               ; preds = %13
  %23 = sub i64 32, %15
  %24 = icmp ult i64 %23, %2
  %25 = select i1 %24, i64 %23, i64 %2
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %7, i64 0, i32 4, i64 %15
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %1, i64 %25, i1 false) #5
  %29 = load i64, i64* %14, align 8
  br label %30

30:                                               ; preds = %22, %27
  %31 = phi i64 [ %15, %22 ], [ %29, %27 ]
  %32 = sub i64 %2, %25
  %33 = add i64 %31, %25
  store i64 %33, i64* %14, align 8
  %34 = icmp ult i64 %33, 32
  %35 = icmp eq i64 %32, 0
  %36 = or i1 %35, %34
  br i1 %36, label %82, label %37

37:                                               ; preds = %30
  %38 = getelementptr inbounds i8, i8* %1, i64 %25
  %39 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %7, i64 0, i32 4, i64 0
  tail call fastcc void @poly1305_first_block(%struct.poly1305_state_internal_t* %7, i8* %39)
  store i64 0, i64* %14, align 8
  br label %40

40:                                               ; preds = %37, %19
  %41 = phi i8* [ %20, %19 ], [ %38, %37 ]
  %42 = phi i64 [ %21, %19 ], [ %32, %37 ]
  store i64 1, i64* %10, align 16
  br label %43

43:                                               ; preds = %9, %40
  %44 = phi i8* [ %1, %9 ], [ %41, %40 ]
  %45 = phi i64 [ %2, %9 ], [ %42, %40 ]
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %7, i64 0, i32 3
  %47 = load i64, i64* %46, align 8
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %65, label %49

49:                                               ; preds = %43
  %50 = sub i64 64, %47
  %51 = icmp ult i64 %50, %45
  %52 = select i1 %51, i64 %50, i64 %45
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %57, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %7, i64 0, i32 4, i64 %47
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* align 1 %44, i64 %52, i1 false) #5
  %56 = load i64, i64* %46, align 8
  br label %57

57:                                               ; preds = %49, %54
  %58 = phi i64 [ %47, %49 ], [ %56, %54 ]
  %59 = add i64 %58, %52
  store i64 %59, i64* %46, align 8
  %60 = icmp ult i64 %59, 64
  br i1 %60, label %82, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds i8, i8* %44, i64 %52
  %63 = sub i64 %45, %52
  %64 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %7, i64 0, i32 4, i64 0
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* %7, i8* %64, i64 64)
  store i64 0, i64* %46, align 8
  br label %65

65:                                               ; preds = %43, %61
  %66 = phi i8* [ %62, %61 ], [ %44, %43 ]
  %67 = phi i64 [ %63, %61 ], [ %45, %43 ]
  %68 = icmp ugt i64 %67, 63
  br i1 %68, label %69, label %73

69:                                               ; preds = %65
  %70 = and i64 %67, -64
  tail call fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t* %7, i8* %66, i64 %70)
  %71 = getelementptr inbounds i8, i8* %66, i64 %70
  %72 = sub i64 %67, %70
  br label %73

73:                                               ; preds = %69, %65
  %74 = phi i8* [ %71, %69 ], [ %66, %65 ]
  %75 = phi i64 [ %72, %69 ], [ %67, %65 ]
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %82, label %77

77:                                               ; preds = %73
  %78 = load i64, i64* %46, align 8
  %79 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %7, i64 0, i32 4, i64 %78
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %79, i8* align 1 %74, i64 %75, i1 false) #5
  %80 = load i64, i64* %46, align 8
  %81 = add i64 %80, %75
  store i64 %81, i64* %46, align 8
  br label %82

82:                                               ; preds = %77, %73, %57, %30, %3
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @poly1305_first_block(%struct.poly1305_state_internal_t* nocapture, i8* nocapture readonly) unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1
  %4 = bitcast %struct.poly1305_power_t* %3 to [4 x i32]*
  %5 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 3
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = shl nuw i64 %7, 32
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  %12 = or i64 %8, %11
  %13 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1, i32 1
  %14 = bitcast %union.anon* %13 to [4 x i32]*
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 0, i64 3
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = shl nuw i64 %17, 32
  %19 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 0, i64 1
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = or i64 %18, %21
  %23 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1, i32 2
  %24 = bitcast %union.anon* %23 to [4 x i32]*
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = shl nuw i64 %27, 32
  %29 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 0, i64 1
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  %32 = or i64 %28, %31
  %33 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1, i32 3
  %34 = bitcast %union.anon* %33 to [4 x i32]*
  %35 = getelementptr inbounds [4 x i32], [4 x i32]* %34, i64 0, i64 3
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %34, i64 0, i64 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1, i32 4
  %40 = bitcast %union.anon* %39 to [4 x i32]*
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i64 0, i64 3
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i64 0, i64 1
  %44 = load i32, i32* %43, align 4
  br label %45

45:                                               ; preds = %45, %2
  %46 = phi %struct.poly1305_power_t* [ %3, %2 ], [ %142, %45 ]
  %47 = phi i64 [ %12, %2 ], [ %88, %45 ]
  %48 = phi i64 [ %22, %2 ], [ %89, %45 ]
  %49 = phi i64 [ %32, %2 ], [ %82, %45 ]
  %50 = phi i64 [ 0, %2 ], [ %143, %45 ]
  %51 = mul i64 %49, 20
  %52 = zext i64 %47 to i128
  %53 = mul nuw i128 %52, %52
  %54 = shl i64 %48, 1
  %55 = zext i64 %54 to i128
  %56 = zext i64 %51 to i128
  %57 = mul nuw i128 %55, %56
  %58 = add i128 %57, %53
  %59 = trunc i128 %58 to i64
  %60 = zext i64 %49 to i128
  %61 = mul nuw i128 %56, %60
  %62 = shl i64 %47, 1
  %63 = zext i64 %62 to i128
  %64 = zext i64 %48 to i128
  %65 = mul nuw i128 %63, %64
  %66 = add i128 %65, %61
  %67 = mul nuw i128 %64, %64
  %68 = shl i64 %49, 1
  %69 = zext i64 %68 to i128
  %70 = mul nuw i128 %52, %69
  %71 = add i128 %70, %67
  %72 = and i64 %59, 17592186044415
  %73 = lshr i128 %58, 44
  %74 = and i128 %73, 18446744073709551615
  %75 = add i128 %66, %74
  %76 = trunc i128 %75 to i64
  %77 = and i64 %76, 17592186044415
  %78 = lshr i128 %75, 44
  %79 = and i128 %78, 18446744073709551615
  %80 = add i128 %71, %79
  %81 = trunc i128 %80 to i64
  %82 = and i64 %81, 4398046511103
  %83 = lshr i128 %80, 42
  %84 = trunc i128 %83 to i64
  %85 = mul i64 %84, 5
  %86 = add i64 %85, %72
  %87 = lshr i64 %86, 44
  %88 = and i64 %86, 17592186044415
  %89 = add nuw nsw i64 %87, %77
  %90 = trunc i64 %86 to i32
  %91 = and i32 %90, 67108863
  %92 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %91, i32 0
  %93 = shufflevector <4 x i32> %92, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %94 = bitcast %struct.poly1305_power_t* %46 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %94, align 16
  %95 = lshr i64 %88, 26
  %96 = shl nuw nsw i64 %89, 18
  %97 = or i64 %96, %95
  %98 = trunc i64 %97 to i32
  %99 = and i32 %98, 67108863
  %100 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %99, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %102 = getelementptr inbounds %struct.poly1305_power_t, %struct.poly1305_power_t* %46, i64 0, i32 1, i32 0
  %103 = bitcast <2 x i64>* %102 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %103, align 16
  %104 = lshr i64 %89, 8
  %105 = trunc i64 %104 to i32
  %106 = and i32 %105, 67108863
  %107 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %106, i32 0
  %108 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %109 = getelementptr inbounds %struct.poly1305_power_t, %struct.poly1305_power_t* %46, i64 0, i32 2, i32 0
  %110 = bitcast <2 x i64>* %109 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %110, align 16
  %111 = lshr i64 %89, 34
  %112 = shl nuw nsw i64 %82, 10
  %113 = or i64 %111, %112
  %114 = trunc i64 %113 to i32
  %115 = and i32 %114, 67108863
  %116 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %115, i32 0
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %118 = getelementptr inbounds %struct.poly1305_power_t, %struct.poly1305_power_t* %46, i64 0, i32 3, i32 0
  %119 = bitcast <2 x i64>* %118 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %119, align 16
  %120 = lshr i64 %82, 16
  %121 = trunc i64 %120 to i32
  %122 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %121, i32 0
  %123 = shufflevector <4 x i32> %122, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %124 = getelementptr inbounds %struct.poly1305_power_t, %struct.poly1305_power_t* %46, i64 0, i32 4, i32 0
  %125 = bitcast <2 x i64>* %124 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %125, align 16
  %126 = bitcast <4 x i32> %101 to <2 x i64>
  %127 = and <2 x i64> %126, <i64 4294967295, i64 4294967295>
  %128 = mul nuw nsw <2 x i64> %127, <i64 5, i64 5>
  %129 = getelementptr inbounds %struct.poly1305_power_t, %struct.poly1305_power_t* %46, i64 0, i32 5, i32 0
  store <2 x i64> %128, <2 x i64>* %129, align 16
  %130 = bitcast <4 x i32> %108 to <2 x i64>
  %131 = and <2 x i64> %130, <i64 4294967295, i64 4294967295>
  %132 = mul nuw nsw <2 x i64> %131, <i64 5, i64 5>
  %133 = getelementptr inbounds %struct.poly1305_power_t, %struct.poly1305_power_t* %46, i64 0, i32 6, i32 0
  store <2 x i64> %132, <2 x i64>* %133, align 16
  %134 = bitcast <4 x i32> %117 to <2 x i64>
  %135 = and <2 x i64> %134, <i64 4294967295, i64 4294967295>
  %136 = mul nuw nsw <2 x i64> %135, <i64 5, i64 5>
  %137 = getelementptr inbounds %struct.poly1305_power_t, %struct.poly1305_power_t* %46, i64 0, i32 7, i32 0
  store <2 x i64> %136, <2 x i64>* %137, align 16
  %138 = bitcast <4 x i32> %123 to <2 x i64>
  %139 = and <2 x i64> %138, <i64 4294967295, i64 4294967295>
  %140 = mul nuw nsw <2 x i64> %139, <i64 5, i64 5>
  %141 = getelementptr inbounds %struct.poly1305_power_t, %struct.poly1305_power_t* %46, i64 0, i32 8, i32 0
  store <2 x i64> %140, <2 x i64>* %141, align 16
  %142 = getelementptr inbounds %struct.poly1305_power_t, %struct.poly1305_power_t* %46, i64 -1
  %143 = add nuw nsw i64 %50, 1
  %144 = icmp eq i64 %143, 2
  br i1 %144, label %145, label %45

145:                                              ; preds = %45
  store i32 %10, i32* %9, align 4
  store i32 %6, i32* %5, align 4
  store i32 %20, i32* %19, align 4
  store i32 %16, i32* %15, align 4
  store i32 %30, i32* %29, align 4
  store i32 %26, i32* %25, align 4
  store i32 %38, i32* %37, align 4
  store i32 %36, i32* %35, align 4
  store i32 %44, i32* %43, align 4
  store i32 %42, i32* %41, align 4
  %146 = bitcast i8* %1 to i64*
  %147 = load i64, i64* %146, align 1
  %148 = insertelement <2 x i64> undef, i64 %147, i32 0
  %149 = getelementptr inbounds i8, i8* %1, i64 16
  %150 = bitcast i8* %149 to i64*
  %151 = load i64, i64* %150, align 1
  %152 = insertelement <2 x i64> %148, i64 %151, i32 1
  %153 = getelementptr inbounds i8, i8* %1, i64 8
  %154 = bitcast i8* %153 to i64*
  %155 = load i64, i64* %154, align 1
  %156 = insertelement <2 x i64> undef, i64 %155, i32 0
  %157 = getelementptr inbounds i8, i8* %1, i64 24
  %158 = bitcast i8* %157 to i64*
  %159 = load i64, i64* %158, align 1
  %160 = insertelement <2 x i64> %156, i64 %159, i32 1
  %161 = and <2 x i64> %152, <i64 67108863, i64 67108863>
  %162 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 1, i32 0, i64 0
  store <2 x i64> %161, <2 x i64>* %162, align 16
  %163 = lshr <2 x i64> %152, <i64 26, i64 26>
  %164 = and <2 x i64> %163, <i64 67108863, i64 67108863>
  %165 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 1, i32 0, i64 1
  store <2 x i64> %164, <2 x i64>* %165, align 16
  %166 = lshr <2 x i64> %152, <i64 52, i64 52>
  %167 = shl <2 x i64> %160, <i64 12, i64 12>
  %168 = and <2 x i64> %167, <i64 67104768, i64 67104768>
  %169 = or <2 x i64> %168, %166
  %170 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 1, i32 0, i64 2
  store <2 x i64> %169, <2 x i64>* %170, align 16
  %171 = lshr <2 x i64> %160, <i64 14, i64 14>
  %172 = and <2 x i64> %171, <i64 67108863, i64 67108863>
  %173 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 1, i32 0, i64 3
  store <2 x i64> %172, <2 x i64>* %173, align 16
  %174 = lshr <2 x i64> %160, <i64 40, i64 40>
  %175 = or <2 x i64> %174, <i64 16777216, i64 16777216>
  %176 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 1, i32 0, i64 4
  store <2 x i64> %175, <2 x i64>* %176, align 16
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @poly1305_blocks(%struct.poly1305_state_internal_t*, i8* nocapture readonly, i64) unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 1, i32 0, i64 0
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  %6 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 1, i32 0, i64 1
  %7 = load <2 x i64>, <2 x i64>* %6, align 16
  %8 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 1, i32 0, i64 2
  %9 = load <2 x i64>, <2 x i64>* %8, align 16
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 1, i32 0, i64 3
  %11 = load <2 x i64>, <2 x i64>* %10, align 16
  %12 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 1, i32 0, i64 4
  %13 = load <2 x i64>, <2 x i64>* %12, align 16
  %14 = icmp ugt i64 %2, 63
  br i1 %14, label %15, label %262

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %17 = load <2 x i64>, <2 x i64>* %16, align 16
  %18 = and <2 x i64> %17, <i64 4294967295, i64 4294967295>
  %19 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 0, i32 1, i32 0
  %20 = load <2 x i64>, <2 x i64>* %19, align 16
  %21 = and <2 x i64> %20, <i64 4294967295, i64 4294967295>
  %22 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 0, i32 2, i32 0
  %23 = load <2 x i64>, <2 x i64>* %22, align 16
  %24 = and <2 x i64> %23, <i64 4294967295, i64 4294967295>
  %25 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 0, i32 3, i32 0
  %26 = load <2 x i64>, <2 x i64>* %25, align 16
  %27 = and <2 x i64> %26, <i64 4294967295, i64 4294967295>
  %28 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 0, i32 4, i32 0
  %29 = load <2 x i64>, <2 x i64>* %28, align 16
  %30 = and <2 x i64> %29, <i64 4294967295, i64 4294967295>
  %31 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 0, i32 8, i32 0
  %32 = load <2 x i64>, <2 x i64>* %31, align 16
  %33 = and <2 x i64> %32, <i64 4294967295, i64 4294967295>
  %34 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 0, i32 7, i32 0
  %35 = load <2 x i64>, <2 x i64>* %34, align 16
  %36 = and <2 x i64> %35, <i64 4294967295, i64 4294967295>
  %37 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 0, i32 6, i32 0
  %38 = load <2 x i64>, <2 x i64>* %37, align 16
  %39 = and <2 x i64> %38, <i64 4294967295, i64 4294967295>
  %40 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 0, i32 5, i32 0
  %41 = load <2 x i64>, <2 x i64>* %40, align 16
  %42 = and <2 x i64> %41, <i64 4294967295, i64 4294967295>
  %43 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1, i32 0, i32 0
  %44 = load <2 x i64>, <2 x i64>* %43, align 16
  %45 = and <2 x i64> %44, <i64 4294967295, i64 4294967295>
  %46 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1, i32 1, i32 0
  %47 = load <2 x i64>, <2 x i64>* %46, align 16
  %48 = and <2 x i64> %47, <i64 4294967295, i64 4294967295>
  %49 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1, i32 8, i32 0
  %50 = load <2 x i64>, <2 x i64>* %49, align 16
  %51 = and <2 x i64> %50, <i64 4294967295, i64 4294967295>
  %52 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1, i32 7, i32 0
  %53 = load <2 x i64>, <2 x i64>* %52, align 16
  %54 = and <2 x i64> %53, <i64 4294967295, i64 4294967295>
  %55 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1, i32 6, i32 0
  %56 = load <2 x i64>, <2 x i64>* %55, align 16
  %57 = and <2 x i64> %56, <i64 4294967295, i64 4294967295>
  %58 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1, i32 5, i32 0
  %59 = load <2 x i64>, <2 x i64>* %58, align 16
  %60 = and <2 x i64> %59, <i64 4294967295, i64 4294967295>
  %61 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1, i32 2, i32 0
  %62 = load <2 x i64>, <2 x i64>* %61, align 16
  %63 = and <2 x i64> %62, <i64 4294967295, i64 4294967295>
  %64 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1, i32 3, i32 0
  %65 = load <2 x i64>, <2 x i64>* %64, align 16
  %66 = and <2 x i64> %65, <i64 4294967295, i64 4294967295>
  %67 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %0, i64 0, i32 0, i64 1, i32 4, i32 0
  %68 = load <2 x i64>, <2 x i64>* %67, align 16
  %69 = and <2 x i64> %68, <i64 4294967295, i64 4294967295>
  br label %70

70:                                               ; preds = %15, %70
  %71 = phi <2 x i64> [ %13, %15 ], [ %258, %70 ]
  %72 = phi <2 x i64> [ %11, %15 ], [ %257, %70 ]
  %73 = phi <2 x i64> [ %9, %15 ], [ %252, %70 ]
  %74 = phi <2 x i64> [ %7, %15 ], [ %255, %70 ]
  %75 = phi <2 x i64> [ %5, %15 ], [ %253, %70 ]
  %76 = phi i64 [ %2, %15 ], [ %260, %70 ]
  %77 = phi i8* [ %1, %15 ], [ %259, %70 ]
  %78 = and <2 x i64> %75, <i64 4294967295, i64 4294967295>
  %79 = mul nuw <2 x i64> %18, %78
  %80 = mul nuw <2 x i64> %21, %78
  %81 = mul nuw <2 x i64> %24, %78
  %82 = mul nuw <2 x i64> %27, %78
  %83 = mul nuw <2 x i64> %30, %78
  %84 = and <2 x i64> %74, <i64 4294967295, i64 4294967295>
  %85 = mul nuw <2 x i64> %33, %84
  %86 = mul nuw <2 x i64> %18, %84
  %87 = add <2 x i64> %85, %79
  %88 = add <2 x i64> %80, %86
  %89 = and <2 x i64> %73, <i64 4294967295, i64 4294967295>
  %90 = mul nuw <2 x i64> %36, %89
  %91 = mul nuw <2 x i64> %33, %89
  %92 = add <2 x i64> %87, %90
  %93 = add <2 x i64> %88, %91
  %94 = and <2 x i64> %72, <i64 4294967295, i64 4294967295>
  %95 = mul nuw <2 x i64> %39, %94
  %96 = mul nuw <2 x i64> %36, %94
  %97 = add <2 x i64> %92, %95
  %98 = add <2 x i64> %93, %96
  %99 = and <2 x i64> %71, <i64 4294967295, i64 4294967295>
  %100 = mul nuw <2 x i64> %42, %99
  %101 = mul nuw <2 x i64> %39, %99
  %102 = add <2 x i64> %97, %100
  %103 = add <2 x i64> %98, %101
  %104 = mul nuw <2 x i64> %21, %84
  %105 = mul nuw <2 x i64> %24, %84
  %106 = mul nuw <2 x i64> %18, %89
  %107 = mul nuw <2 x i64> %21, %89
  %108 = mul nuw <2 x i64> %33, %94
  %109 = mul nuw <2 x i64> %18, %94
  %110 = mul nuw <2 x i64> %36, %99
  %111 = mul nuw <2 x i64> %33, %99
  %112 = mul nuw <2 x i64> %27, %84
  %113 = mul nuw <2 x i64> %24, %89
  %114 = mul nuw <2 x i64> %21, %94
  %115 = mul nuw <2 x i64> %18, %99
  %116 = bitcast i8* %77 to i64*
  %117 = load i64, i64* %116, align 1
  %118 = insertelement <2 x i64> undef, i64 %117, i32 0
  %119 = getelementptr inbounds i8, i8* %77, i64 16
  %120 = bitcast i8* %119 to i64*
  %121 = load i64, i64* %120, align 1
  %122 = insertelement <2 x i64> %118, i64 %121, i32 1
  %123 = getelementptr inbounds i8, i8* %77, i64 8
  %124 = bitcast i8* %123 to i64*
  %125 = load i64, i64* %124, align 1
  %126 = insertelement <2 x i64> undef, i64 %125, i32 0
  %127 = getelementptr inbounds i8, i8* %77, i64 24
  %128 = bitcast i8* %127 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = insertelement <2 x i64> %126, i64 %129, i32 1
  %131 = and <2 x i64> %122, <i64 67108863, i64 67108863>
  %132 = lshr <2 x i64> %122, <i64 26, i64 26>
  %133 = and <2 x i64> %132, <i64 67108863, i64 67108863>
  %134 = lshr <2 x i64> %122, <i64 52, i64 52>
  %135 = shl <2 x i64> %130, <i64 12, i64 12>
  %136 = and <2 x i64> %135, <i64 67104768, i64 67104768>
  %137 = or <2 x i64> %136, %134
  %138 = lshr <2 x i64> %130, <i64 14, i64 14>
  %139 = and <2 x i64> %138, <i64 67108863, i64 67108863>
  %140 = lshr <2 x i64> %130, <i64 40, i64 40>
  %141 = or <2 x i64> %140, <i64 16777216, i64 16777216>
  %142 = mul nuw nsw <2 x i64> %45, %131
  %143 = mul nuw nsw <2 x i64> %48, %131
  %144 = add <2 x i64> %102, %142
  %145 = mul nuw nsw <2 x i64> %51, %133
  %146 = mul nuw nsw <2 x i64> %45, %133
  %147 = add <2 x i64> %144, %145
  %148 = mul nuw nsw <2 x i64> %54, %137
  %149 = mul nuw nsw <2 x i64> %51, %137
  %150 = add <2 x i64> %147, %148
  %151 = mul nuw nsw <2 x i64> %57, %139
  %152 = mul nuw nsw <2 x i64> %54, %139
  %153 = add <2 x i64> %150, %151
  %154 = mul nuw nsw <2 x i64> %60, %141
  %155 = mul nuw nsw <2 x i64> %57, %141
  %156 = add <2 x i64> %153, %154
  %157 = mul nuw nsw <2 x i64> %63, %131
  %158 = mul nuw nsw <2 x i64> %66, %131
  %159 = mul nuw nsw <2 x i64> %48, %133
  %160 = mul nuw nsw <2 x i64> %63, %133
  %161 = mul nuw nsw <2 x i64> %137, %45
  %162 = mul nuw nsw <2 x i64> %137, %48
  %163 = mul nuw nsw <2 x i64> %51, %139
  %164 = mul nuw nsw <2 x i64> %139, %45
  %165 = mul nuw nsw <2 x i64> %54, %141
  %166 = mul nuw nsw <2 x i64> %51, %141
  %167 = mul nuw nsw <2 x i64> %69, %131
  %168 = mul nuw nsw <2 x i64> %66, %133
  %169 = mul nuw nsw <2 x i64> %63, %137
  %170 = mul nuw nsw <2 x i64> %48, %139
  %171 = mul nuw nsw <2 x i64> %141, %45
  %172 = getelementptr inbounds i8, i8* %77, i64 32
  %173 = bitcast i8* %172 to i64*
  %174 = load i64, i64* %173, align 1
  %175 = insertelement <2 x i64> undef, i64 %174, i32 0
  %176 = getelementptr inbounds i8, i8* %77, i64 48
  %177 = bitcast i8* %176 to i64*
  %178 = load i64, i64* %177, align 1
  %179 = insertelement <2 x i64> %175, i64 %178, i32 1
  %180 = getelementptr inbounds i8, i8* %77, i64 40
  %181 = bitcast i8* %180 to i64*
  %182 = load i64, i64* %181, align 1
  %183 = insertelement <2 x i64> undef, i64 %182, i32 0
  %184 = getelementptr inbounds i8, i8* %77, i64 56
  %185 = bitcast i8* %184 to i64*
  %186 = load i64, i64* %185, align 1
  %187 = insertelement <2 x i64> %183, i64 %186, i32 1
  %188 = and <2 x i64> %179, <i64 67108863, i64 67108863>
  %189 = lshr <2 x i64> %179, <i64 26, i64 26>
  %190 = and <2 x i64> %189, <i64 67108863, i64 67108863>
  %191 = lshr <2 x i64> %179, <i64 52, i64 52>
  %192 = shl <2 x i64> %187, <i64 12, i64 12>
  %193 = and <2 x i64> %192, <i64 67104768, i64 67104768>
  %194 = or <2 x i64> %193, %191
  %195 = lshr <2 x i64> %187, <i64 14, i64 14>
  %196 = and <2 x i64> %195, <i64 67108863, i64 67108863>
  %197 = lshr <2 x i64> %187, <i64 40, i64 40>
  %198 = or <2 x i64> %197, <i64 16777216, i64 16777216>
  %199 = add <2 x i64> %156, %188
  %200 = add <2 x i64> %107, %109
  %201 = add <2 x i64> %200, %105
  %202 = add <2 x i64> %201, %82
  %203 = add <2 x i64> %202, %111
  %204 = add <2 x i64> %203, %164
  %205 = add <2 x i64> %204, %162
  %206 = add <2 x i64> %205, %166
  %207 = add <2 x i64> %206, %160
  %208 = add <2 x i64> %207, %158
  %209 = add <2 x i64> %208, %196
  %210 = lshr <2 x i64> %199, <i64 26, i64 26>
  %211 = lshr <2 x i64> %209, <i64 26, i64 26>
  %212 = and <2 x i64> %199, <i64 67108863, i64 67108863>
  %213 = and <2 x i64> %209, <i64 67108863, i64 67108863>
  %214 = add <2 x i64> %103, %146
  %215 = add <2 x i64> %214, %143
  %216 = add <2 x i64> %215, %149
  %217 = add <2 x i64> %216, %152
  %218 = add <2 x i64> %217, %155
  %219 = add <2 x i64> %218, %190
  %220 = add <2 x i64> %219, %210
  %221 = add <2 x i64> %114, %115
  %222 = add <2 x i64> %221, %113
  %223 = add <2 x i64> %222, %112
  %224 = add <2 x i64> %223, %83
  %225 = add <2 x i64> %224, %170
  %226 = add <2 x i64> %225, %171
  %227 = add <2 x i64> %226, %169
  %228 = add <2 x i64> %227, %168
  %229 = add <2 x i64> %228, %167
  %230 = add <2 x i64> %229, %198
  %231 = add <2 x i64> %230, %211
  %232 = lshr <2 x i64> %220, <i64 26, i64 26>
  %233 = lshr <2 x i64> %231, <i64 26, i64 26>
  %234 = and <2 x i64> %220, <i64 67108863, i64 67108863>
  %235 = and <2 x i64> %231, <i64 67108863, i64 67108863>
  %236 = add <2 x i64> %104, %106
  %237 = add <2 x i64> %236, %81
  %238 = add <2 x i64> %237, %108
  %239 = add <2 x i64> %238, %110
  %240 = add <2 x i64> %239, %159
  %241 = add <2 x i64> %240, %161
  %242 = add <2 x i64> %241, %163
  %243 = add <2 x i64> %242, %165
  %244 = add <2 x i64> %243, %157
  %245 = add <2 x i64> %244, %194
  %246 = add <2 x i64> %245, %232
  %247 = and <2 x i64> %233, <i64 4294967295, i64 4294967295>
  %248 = mul nuw nsw <2 x i64> %247, <i64 5, i64 5>
  %249 = add nuw nsw <2 x i64> %248, %212
  %250 = lshr <2 x i64> %246, <i64 26, i64 26>
  %251 = lshr <2 x i64> %249, <i64 26, i64 26>
  %252 = and <2 x i64> %246, <i64 67108863, i64 67108863>
  %253 = and <2 x i64> %249, <i64 67108863, i64 67108863>
  %254 = add nuw nsw <2 x i64> %250, %213
  %255 = add nuw nsw <2 x i64> %251, %234
  %256 = lshr <2 x i64> %254, <i64 26, i64 26>
  %257 = and <2 x i64> %254, <i64 67108863, i64 67108863>
  %258 = add nuw nsw <2 x i64> %256, %235
  %259 = getelementptr inbounds i8, i8* %77, i64 64
  %260 = add i64 %76, -64
  %261 = icmp ugt i64 %260, 63
  br i1 %261, label %70, label %262

262:                                              ; preds = %70, %3
  %263 = phi <2 x i64> [ %5, %3 ], [ %253, %70 ]
  %264 = phi <2 x i64> [ %7, %3 ], [ %255, %70 ]
  %265 = phi <2 x i64> [ %9, %3 ], [ %252, %70 ]
  %266 = phi <2 x i64> [ %11, %3 ], [ %257, %70 ]
  %267 = phi <2 x i64> [ %13, %3 ], [ %258, %70 ]
  store <2 x i64> %263, <2 x i64>* %4, align 16
  store <2 x i64> %264, <2 x i64>* %6, align 16
  store <2 x i64> %265, <2 x i64>* %8, align 16
  store <2 x i64> %266, <2 x i64>* %10, align 16
  store <2 x i64> %267, <2 x i64>* %12, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @CRYPTO_poly1305_finish([512 x i8]*, i8* nocapture) local_unnamed_addr #3 {
  %3 = ptrtoint [512 x i8]* %0 to i64
  %4 = add i64 %3, 63
  %5 = and i64 %4, -64
  %6 = inttoptr i64 %5 to %struct.poly1305_state_internal_t*
  %7 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 4, i64 0
  %10 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 2
  %11 = load i64, i64* %10, align 16
  %12 = icmp eq i64 %11, 0
  %13 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 1
  br i1 %12, label %14, label %22

14:                                               ; preds = %2
  %15 = getelementptr inbounds %union.anon.0, %union.anon.0* %13, i64 0, i32 0, i64 0, i64 0
  %16 = load i64, i64* %15, align 32
  %17 = bitcast %union.anon.0* %13 to [10 x i64]*
  %18 = getelementptr inbounds [10 x i64], [10 x i64]* %17, i64 0, i64 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 1, i32 0, i64 1, i64 0
  %21 = load i64, i64* %20, align 16
  br label %415

22:                                               ; preds = %2
  %23 = getelementptr inbounds %union.anon.0, %union.anon.0* %13, i64 0, i32 0, i64 0
  %24 = load <2 x i64>, <2 x i64>* %23, align 32
  %25 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 1, i32 0, i64 1
  %26 = load <2 x i64>, <2 x i64>* %25, align 16
  %27 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 1, i32 0, i64 2
  %28 = load <2 x i64>, <2 x i64>* %27, align 32
  %29 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 1, i32 0, i64 3
  %30 = load <2 x i64>, <2 x i64>* %29, align 16
  %31 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 1, i32 0, i64 4
  %32 = load <2 x i64>, <2 x i64>* %31, align 32
  %33 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1
  %34 = icmp ugt i64 %8, 31
  br i1 %34, label %35, label %167

35:                                               ; preds = %22
  %36 = getelementptr inbounds %struct.poly1305_power_t, %struct.poly1305_power_t* %33, i64 0, i32 0, i32 0
  %37 = load <2 x i64>, <2 x i64>* %36, align 16
  %38 = and <2 x i64> %24, <i64 4294967295, i64 4294967295>
  %39 = and <2 x i64> %37, <i64 4294967295, i64 4294967295>
  %40 = mul nuw <2 x i64> %39, %38
  %41 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 1, i32 0
  %42 = load <2 x i64>, <2 x i64>* %41, align 16
  %43 = and <2 x i64> %42, <i64 4294967295, i64 4294967295>
  %44 = mul nuw <2 x i64> %43, %38
  %45 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 2, i32 0
  %46 = load <2 x i64>, <2 x i64>* %45, align 16
  %47 = and <2 x i64> %46, <i64 4294967295, i64 4294967295>
  %48 = mul nuw <2 x i64> %47, %38
  %49 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 3, i32 0
  %50 = load <2 x i64>, <2 x i64>* %49, align 16
  %51 = and <2 x i64> %50, <i64 4294967295, i64 4294967295>
  %52 = mul nuw <2 x i64> %51, %38
  %53 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 4, i32 0
  %54 = load <2 x i64>, <2 x i64>* %53, align 16
  %55 = and <2 x i64> %54, <i64 4294967295, i64 4294967295>
  %56 = mul nuw <2 x i64> %55, %38
  %57 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 8, i32 0
  %58 = load <2 x i64>, <2 x i64>* %57, align 16
  %59 = and <2 x i64> %26, <i64 4294967295, i64 4294967295>
  %60 = and <2 x i64> %58, <i64 4294967295, i64 4294967295>
  %61 = mul nuw <2 x i64> %60, %59
  %62 = mul nuw <2 x i64> %39, %59
  %63 = add <2 x i64> %61, %40
  %64 = add <2 x i64> %44, %62
  %65 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 7, i32 0
  %66 = load <2 x i64>, <2 x i64>* %65, align 16
  %67 = and <2 x i64> %28, <i64 4294967295, i64 4294967295>
  %68 = and <2 x i64> %66, <i64 4294967295, i64 4294967295>
  %69 = mul nuw <2 x i64> %68, %67
  %70 = mul nuw <2 x i64> %60, %67
  %71 = add <2 x i64> %63, %69
  %72 = add <2 x i64> %64, %70
  %73 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 6, i32 0
  %74 = load <2 x i64>, <2 x i64>* %73, align 16
  %75 = and <2 x i64> %30, <i64 4294967295, i64 4294967295>
  %76 = and <2 x i64> %74, <i64 4294967295, i64 4294967295>
  %77 = mul nuw <2 x i64> %76, %75
  %78 = mul nuw <2 x i64> %68, %75
  %79 = add <2 x i64> %71, %77
  %80 = add <2 x i64> %72, %78
  %81 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 5, i32 0
  %82 = load <2 x i64>, <2 x i64>* %81, align 16
  %83 = and <2 x i64> %32, <i64 4294967295, i64 4294967295>
  %84 = and <2 x i64> %82, <i64 4294967295, i64 4294967295>
  %85 = mul nuw <2 x i64> %84, %83
  %86 = mul nuw <2 x i64> %76, %83
  %87 = add <2 x i64> %79, %85
  %88 = add <2 x i64> %80, %86
  %89 = mul nuw <2 x i64> %43, %59
  %90 = mul nuw <2 x i64> %47, %59
  %91 = mul nuw <2 x i64> %39, %67
  %92 = mul nuw <2 x i64> %43, %67
  %93 = mul nuw <2 x i64> %60, %75
  %94 = mul nuw <2 x i64> %39, %75
  %95 = mul nuw <2 x i64> %68, %83
  %96 = mul nuw <2 x i64> %60, %83
  %97 = mul nuw <2 x i64> %51, %59
  %98 = mul nuw <2 x i64> %47, %67
  %99 = mul nuw <2 x i64> %43, %75
  %100 = mul nuw <2 x i64> %39, %83
  %101 = bitcast i8* %9 to i64*
  %102 = load i64, i64* %101, align 64
  %103 = insertelement <2 x i64> undef, i64 %102, i32 0
  %104 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 4, i64 16
  %105 = bitcast i8* %104 to i64*
  %106 = load i64, i64* %105, align 16
  %107 = insertelement <2 x i64> %103, i64 %106, i32 1
  %108 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 4, i64 8
  %109 = bitcast i8* %108 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = insertelement <2 x i64> undef, i64 %110, i32 0
  %112 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 4, i64 24
  %113 = bitcast i8* %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = insertelement <2 x i64> %111, i64 %114, i32 1
  %116 = and <2 x i64> %107, <i64 67108863, i64 67108863>
  %117 = lshr <2 x i64> %107, <i64 26, i64 26>
  %118 = and <2 x i64> %117, <i64 67108863, i64 67108863>
  %119 = lshr <2 x i64> %107, <i64 52, i64 52>
  %120 = shl <2 x i64> %115, <i64 12, i64 12>
  %121 = and <2 x i64> %120, <i64 67104768, i64 67104768>
  %122 = or <2 x i64> %121, %119
  %123 = lshr <2 x i64> %115, <i64 14, i64 14>
  %124 = and <2 x i64> %123, <i64 67108863, i64 67108863>
  %125 = lshr <2 x i64> %115, <i64 40, i64 40>
  %126 = or <2 x i64> %125, <i64 16777216, i64 16777216>
  %127 = add <2 x i64> %87, %116
  %128 = add <2 x i64> %88, %118
  %129 = add <2 x i64> %92, %94
  %130 = add <2 x i64> %129, %90
  %131 = add <2 x i64> %130, %52
  %132 = add <2 x i64> %131, %96
  %133 = add <2 x i64> %132, %124
  %134 = lshr <2 x i64> %127, <i64 26, i64 26>
  %135 = lshr <2 x i64> %133, <i64 26, i64 26>
  %136 = and <2 x i64> %127, <i64 67108863, i64 67108863>
  %137 = and <2 x i64> %133, <i64 67108863, i64 67108863>
  %138 = add <2 x i64> %128, %134
  %139 = add <2 x i64> %99, %100
  %140 = add <2 x i64> %139, %98
  %141 = add <2 x i64> %140, %97
  %142 = add <2 x i64> %141, %56
  %143 = add <2 x i64> %142, %126
  %144 = add <2 x i64> %143, %135
  %145 = lshr <2 x i64> %138, <i64 26, i64 26>
  %146 = lshr <2 x i64> %144, <i64 26, i64 26>
  %147 = and <2 x i64> %138, <i64 67108863, i64 67108863>
  %148 = and <2 x i64> %144, <i64 67108863, i64 67108863>
  %149 = add <2 x i64> %89, %91
  %150 = add <2 x i64> %149, %48
  %151 = add <2 x i64> %150, %93
  %152 = add <2 x i64> %151, %95
  %153 = add <2 x i64> %152, %122
  %154 = add <2 x i64> %153, %145
  %155 = and <2 x i64> %146, <i64 4294967295, i64 4294967295>
  %156 = mul nuw nsw <2 x i64> %155, <i64 5, i64 5>
  %157 = add nuw nsw <2 x i64> %156, %136
  %158 = lshr <2 x i64> %154, <i64 26, i64 26>
  %159 = lshr <2 x i64> %157, <i64 26, i64 26>
  %160 = and <2 x i64> %154, <i64 67108863, i64 67108863>
  %161 = and <2 x i64> %157, <i64 67108863, i64 67108863>
  %162 = add nuw nsw <2 x i64> %158, %137
  %163 = add nuw nsw <2 x i64> %159, %147
  %164 = lshr <2 x i64> %162, <i64 26, i64 26>
  %165 = and <2 x i64> %162, <i64 67108863, i64 67108863>
  %166 = add nuw nsw <2 x i64> %164, %148
  br label %167

167:                                              ; preds = %22, %35
  %168 = phi <2 x i64> [ %161, %35 ], [ %24, %22 ]
  %169 = phi <2 x i64> [ %163, %35 ], [ %26, %22 ]
  %170 = phi <2 x i64> [ %160, %35 ], [ %28, %22 ]
  %171 = phi <2 x i64> [ %165, %35 ], [ %30, %22 ]
  %172 = phi <2 x i64> [ %166, %35 ], [ %32, %22 ]
  %173 = phi i64 [ 32, %35 ], [ 0, %22 ]
  %174 = bitcast %struct.poly1305_power_t* %33 to [4 x i32]*
  %175 = getelementptr inbounds [4 x i32], [4 x i32]* %174, i64 0, i64 3
  %176 = load i32, i32* %175, align 4
  %177 = zext i32 %176 to i64
  %178 = shl nuw i64 %177, 32
  %179 = getelementptr inbounds [4 x i32], [4 x i32]* %174, i64 0, i64 1
  %180 = load i32, i32* %179, align 4
  %181 = zext i32 %180 to i64
  %182 = or i64 %178, %181
  %183 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 1
  %184 = bitcast %union.anon* %183 to [4 x i32]*
  %185 = getelementptr inbounds [4 x i32], [4 x i32]* %184, i64 0, i64 3
  %186 = load i32, i32* %185, align 4
  %187 = zext i32 %186 to i64
  %188 = shl nuw i64 %187, 32
  %189 = getelementptr inbounds [4 x i32], [4 x i32]* %184, i64 0, i64 1
  %190 = load i32, i32* %189, align 4
  %191 = zext i32 %190 to i64
  %192 = or i64 %188, %191
  %193 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 2
  %194 = bitcast %union.anon* %193 to [4 x i32]*
  %195 = getelementptr inbounds [4 x i32], [4 x i32]* %194, i64 0, i64 3
  %196 = load i32, i32* %195, align 4
  %197 = zext i32 %196 to i64
  %198 = shl nuw i64 %197, 32
  %199 = getelementptr inbounds [4 x i32], [4 x i32]* %194, i64 0, i64 1
  %200 = load i32, i32* %199, align 4
  %201 = zext i32 %200 to i64
  %202 = or i64 %198, %201
  %203 = and i32 %180, 67108863
  %204 = getelementptr inbounds [4 x i32], [4 x i32]* %174, i64 0, i64 2
  store i32 %203, i32* %204, align 8
  %205 = lshr i64 %182, 26
  %206 = shl nuw nsw i64 %191, 18
  %207 = or i64 %206, %205
  %208 = trunc i64 %207 to i32
  %209 = and i32 %208, 67108863
  %210 = getelementptr inbounds [4 x i32], [4 x i32]* %184, i64 0, i64 2
  store i32 %209, i32* %210, align 8
  %211 = lshr i64 %192, 8
  %212 = trunc i64 %211 to i32
  %213 = and i32 %212, 67108863
  %214 = getelementptr inbounds [4 x i32], [4 x i32]* %194, i64 0, i64 2
  store i32 %213, i32* %214, align 8
  %215 = lshr i32 %186, 2
  %216 = shl i32 %200, 10
  %217 = or i32 %216, %215
  %218 = and i32 %217, 67108863
  %219 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 3
  %220 = bitcast %union.anon* %219 to [4 x i32]*
  %221 = getelementptr inbounds [4 x i32], [4 x i32]* %220, i64 0, i64 2
  store i32 %218, i32* %221, align 8
  %222 = lshr i64 %202, 16
  %223 = trunc i64 %222 to i32
  %224 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 4
  %225 = bitcast %union.anon* %224 to [4 x i32]*
  %226 = getelementptr inbounds [4 x i32], [4 x i32]* %225, i64 0, i64 2
  store i32 %223, i32* %226, align 8
  %227 = mul nuw nsw i32 %209, 5
  %228 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 5
  %229 = bitcast %union.anon* %228 to [4 x i32]*
  %230 = getelementptr inbounds [4 x i32], [4 x i32]* %229, i64 0, i64 2
  store i32 %227, i32* %230, align 8
  %231 = mul nuw nsw i32 %213, 5
  %232 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 6
  %233 = bitcast %union.anon* %232 to [4 x i32]*
  %234 = getelementptr inbounds [4 x i32], [4 x i32]* %233, i64 0, i64 2
  store i32 %231, i32* %234, align 8
  %235 = mul nuw nsw i32 %218, 5
  %236 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 7
  %237 = bitcast %union.anon* %236 to [4 x i32]*
  %238 = getelementptr inbounds [4 x i32], [4 x i32]* %237, i64 0, i64 2
  store i32 %235, i32* %238, align 8
  %239 = mul i32 %223, 5
  %240 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 8
  %241 = bitcast %union.anon* %240 to [4 x i32]*
  %242 = getelementptr inbounds [4 x i32], [4 x i32]* %241, i64 0, i64 2
  store i32 %239, i32* %242, align 8
  %243 = getelementptr inbounds %struct.poly1305_power_t, %struct.poly1305_power_t* %33, i64 0, i32 0, i32 0
  %244 = load <2 x i64>, <2 x i64>* %243, align 16
  %245 = and <2 x i64> %168, <i64 4294967295, i64 4294967295>
  %246 = and <2 x i64> %244, <i64 4294967295, i64 4294967295>
  %247 = mul nuw <2 x i64> %246, %245
  %248 = getelementptr inbounds %union.anon, %union.anon* %183, i64 0, i32 0
  %249 = load <2 x i64>, <2 x i64>* %248, align 16
  %250 = and <2 x i64> %249, <i64 4294967295, i64 4294967295>
  %251 = mul nuw <2 x i64> %250, %245
  %252 = getelementptr inbounds %union.anon, %union.anon* %193, i64 0, i32 0
  %253 = load <2 x i64>, <2 x i64>* %252, align 16
  %254 = and <2 x i64> %253, <i64 4294967295, i64 4294967295>
  %255 = mul nuw <2 x i64> %254, %245
  %256 = getelementptr inbounds %union.anon, %union.anon* %219, i64 0, i32 0
  %257 = load <2 x i64>, <2 x i64>* %256, align 16
  %258 = and <2 x i64> %257, <i64 4294967295, i64 4294967295>
  %259 = mul nuw <2 x i64> %258, %245
  %260 = getelementptr inbounds %union.anon, %union.anon* %224, i64 0, i32 0
  %261 = load <2 x i64>, <2 x i64>* %260, align 16
  %262 = and <2 x i64> %261, <i64 4294967295, i64 4294967295>
  %263 = mul nuw <2 x i64> %262, %245
  %264 = getelementptr inbounds %union.anon, %union.anon* %240, i64 0, i32 0
  %265 = load <2 x i64>, <2 x i64>* %264, align 16
  %266 = and <2 x i64> %169, <i64 4294967295, i64 4294967295>
  %267 = and <2 x i64> %265, <i64 4294967295, i64 4294967295>
  %268 = mul nuw <2 x i64> %267, %266
  %269 = mul nuw <2 x i64> %246, %266
  %270 = add <2 x i64> %268, %247
  %271 = add <2 x i64> %251, %269
  %272 = getelementptr inbounds %union.anon, %union.anon* %236, i64 0, i32 0
  %273 = load <2 x i64>, <2 x i64>* %272, align 16
  %274 = and <2 x i64> %170, <i64 4294967295, i64 4294967295>
  %275 = and <2 x i64> %273, <i64 4294967295, i64 4294967295>
  %276 = mul nuw <2 x i64> %275, %274
  %277 = mul nuw <2 x i64> %267, %274
  %278 = add <2 x i64> %270, %276
  %279 = add <2 x i64> %271, %277
  %280 = getelementptr inbounds %union.anon, %union.anon* %232, i64 0, i32 0
  %281 = load <2 x i64>, <2 x i64>* %280, align 16
  %282 = and <2 x i64> %171, <i64 4294967295, i64 4294967295>
  %283 = and <2 x i64> %281, <i64 4294967295, i64 4294967295>
  %284 = mul nuw <2 x i64> %283, %282
  %285 = mul nuw <2 x i64> %275, %282
  %286 = add <2 x i64> %278, %284
  %287 = add <2 x i64> %279, %285
  %288 = getelementptr inbounds %union.anon, %union.anon* %228, i64 0, i32 0
  %289 = load <2 x i64>, <2 x i64>* %288, align 16
  %290 = and <2 x i64> %172, <i64 4294967295, i64 4294967295>
  %291 = and <2 x i64> %289, <i64 4294967295, i64 4294967295>
  %292 = mul nuw <2 x i64> %291, %290
  %293 = mul nuw <2 x i64> %283, %290
  %294 = add <2 x i64> %286, %292
  %295 = add <2 x i64> %287, %293
  %296 = mul nuw <2 x i64> %250, %266
  %297 = mul nuw <2 x i64> %254, %266
  %298 = mul nuw <2 x i64> %246, %274
  %299 = mul nuw <2 x i64> %250, %274
  %300 = mul nuw <2 x i64> %267, %282
  %301 = mul nuw <2 x i64> %246, %282
  %302 = mul nuw <2 x i64> %275, %290
  %303 = mul nuw <2 x i64> %267, %290
  %304 = add <2 x i64> %299, %301
  %305 = add <2 x i64> %304, %297
  %306 = add <2 x i64> %305, %259
  %307 = add <2 x i64> %306, %303
  %308 = mul nuw <2 x i64> %258, %266
  %309 = mul nuw <2 x i64> %254, %274
  %310 = mul nuw <2 x i64> %250, %282
  %311 = mul nuw <2 x i64> %246, %290
  %312 = lshr <2 x i64> %294, <i64 26, i64 26>
  %313 = lshr <2 x i64> %307, <i64 26, i64 26>
  %314 = and <2 x i64> %294, <i64 67108863, i64 67108863>
  %315 = and <2 x i64> %307, <i64 67108863, i64 67108863>
  %316 = add <2 x i64> %295, %312
  %317 = add <2 x i64> %310, %311
  %318 = add <2 x i64> %317, %309
  %319 = add <2 x i64> %318, %308
  %320 = add <2 x i64> %319, %263
  %321 = add <2 x i64> %320, %313
  %322 = lshr <2 x i64> %316, <i64 26, i64 26>
  %323 = lshr <2 x i64> %321, <i64 26, i64 26>
  %324 = and <2 x i64> %316, <i64 67108863, i64 67108863>
  %325 = and <2 x i64> %321, <i64 67108863, i64 67108863>
  %326 = add <2 x i64> %296, %298
  %327 = add <2 x i64> %326, %255
  %328 = add <2 x i64> %327, %300
  %329 = add <2 x i64> %328, %302
  %330 = add <2 x i64> %329, %322
  %331 = and <2 x i64> %323, <i64 4294967295, i64 4294967295>
  %332 = mul nuw nsw <2 x i64> %331, <i64 5, i64 5>
  %333 = add nuw nsw <2 x i64> %332, %314
  %334 = lshr <2 x i64> %330, <i64 26, i64 26>
  %335 = lshr <2 x i64> %333, <i64 26, i64 26>
  %336 = and <2 x i64> %330, <i64 67108863, i64 67108863>
  %337 = and <2 x i64> %333, <i64 67108863, i64 67108863>
  %338 = add nuw nsw <2 x i64> %334, %315
  %339 = add nuw nsw <2 x i64> %335, %324
  %340 = lshr <2 x i64> %338, <i64 26, i64 26>
  %341 = and <2 x i64> %338, <i64 67108863, i64 67108863>
  %342 = add nuw nsw <2 x i64> %340, %325
  %343 = bitcast <2 x i64> %337 to <16 x i8>
  %344 = shufflevector <16 x i8> %343, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %345 = bitcast <16 x i8> %344 to <2 x i64>
  %346 = add <2 x i64> %337, %345
  %347 = bitcast <2 x i64> %339 to <16 x i8>
  %348 = shufflevector <16 x i8> %347, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %349 = bitcast <16 x i8> %348 to <2 x i64>
  %350 = add <2 x i64> %339, %349
  %351 = bitcast <2 x i64> %336 to <16 x i8>
  %352 = shufflevector <16 x i8> %351, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %353 = bitcast <16 x i8> %352 to <2 x i64>
  %354 = add <2 x i64> %336, %353
  %355 = bitcast <2 x i64> %341 to <16 x i8>
  %356 = shufflevector <16 x i8> %355, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %357 = bitcast <16 x i8> %356 to <2 x i64>
  %358 = add <2 x i64> %341, %357
  %359 = bitcast <2 x i64> %342 to <16 x i8>
  %360 = shufflevector <16 x i8> %359, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %361 = bitcast <16 x i8> %360 to <2 x i64>
  %362 = add <2 x i64> %342, %361
  %363 = bitcast <2 x i64> %346 to <4 x i32>
  %364 = extractelement <4 x i32> %363, i32 0
  %365 = sext i32 %364 to i64
  %366 = lshr i64 %365, 26
  %367 = and i64 %365, 67108863
  %368 = bitcast <2 x i64> %350 to <4 x i32>
  %369 = extractelement <4 x i32> %368, i32 0
  %370 = sext i32 %369 to i64
  %371 = add nsw i64 %366, %370
  %372 = lshr i64 %371, 26
  %373 = and i64 %371, 67108863
  %374 = bitcast <2 x i64> %354 to <4 x i32>
  %375 = extractelement <4 x i32> %374, i32 0
  %376 = sext i32 %375 to i64
  %377 = add nsw i64 %372, %376
  %378 = lshr i64 %377, 26
  %379 = bitcast <2 x i64> %358 to <4 x i32>
  %380 = extractelement <4 x i32> %379, i32 0
  %381 = sext i32 %380 to i64
  %382 = add nsw i64 %378, %381
  %383 = lshr i64 %382, 26
  %384 = and i64 %382, 67108863
  %385 = bitcast <2 x i64> %362 to <4 x i32>
  %386 = extractelement <4 x i32> %385, i32 0
  %387 = sext i32 %386 to i64
  %388 = add nsw i64 %383, %387
  %389 = lshr i64 %388, 26
  %390 = mul nuw nsw i64 %389, 5
  %391 = add nuw nsw i64 %390, %367
  %392 = lshr i64 %391, 26
  %393 = and i64 %391, 67108863
  %394 = add nuw nsw i64 %392, %373
  %395 = shl nuw nsw i64 %394, 26
  %396 = and i64 %395, 17592118935552
  %397 = or i64 %396, %393
  %398 = bitcast %union.anon.0* %13 to [10 x i64]*
  %399 = getelementptr inbounds %union.anon.0, %union.anon.0* %13, i64 0, i32 0, i64 0, i64 0
  store i64 %397, i64* %399, align 32
  %400 = lshr i64 %394, 18
  %401 = shl nsw i64 %377, 8
  %402 = and i64 %401, 17179868928
  %403 = shl nuw nsw i64 %384, 34
  %404 = and i64 %403, 17575006175232
  %405 = or i64 %404, %402
  %406 = or i64 %405, %400
  %407 = getelementptr inbounds [10 x i64], [10 x i64]* %398, i64 0, i64 1
  store i64 %406, i64* %407, align 8
  %408 = lshr i64 %384, 10
  %409 = shl nsw i64 %388, 16
  %410 = and i64 %409, 4398046445568
  %411 = or i64 %410, %408
  %412 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 1, i32 0, i64 1, i64 0
  store i64 %411, i64* %412, align 16
  %413 = sub i64 %8, %173
  %414 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 4, i64 %173
  br label %415

415:                                              ; preds = %14, %167
  %416 = phi i64 [ %411, %167 ], [ %21, %14 ]
  %417 = phi i64 [ %406, %167 ], [ %19, %14 ]
  %418 = phi i64 [ %397, %167 ], [ %16, %14 ]
  %419 = phi i8* [ %414, %167 ], [ %9, %14 ]
  %420 = phi i64 [ %413, %167 ], [ %8, %14 ]
  %421 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1
  %422 = bitcast %struct.poly1305_power_t* %421 to [4 x i32]*
  %423 = getelementptr inbounds [4 x i32], [4 x i32]* %422, i64 0, i64 3
  %424 = load i32, i32* %423, align 4
  %425 = zext i32 %424 to i64
  %426 = shl nuw i64 %425, 32
  %427 = getelementptr inbounds [4 x i32], [4 x i32]* %422, i64 0, i64 1
  %428 = load i32, i32* %427, align 4
  %429 = zext i32 %428 to i64
  %430 = or i64 %426, %429
  %431 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 1
  %432 = bitcast %union.anon* %431 to [4 x i32]*
  %433 = getelementptr inbounds [4 x i32], [4 x i32]* %432, i64 0, i64 3
  %434 = load i32, i32* %433, align 4
  %435 = zext i32 %434 to i64
  %436 = shl nuw i64 %435, 32
  %437 = getelementptr inbounds [4 x i32], [4 x i32]* %432, i64 0, i64 1
  %438 = load i32, i32* %437, align 4
  %439 = zext i32 %438 to i64
  %440 = or i64 %436, %439
  %441 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 2
  %442 = bitcast %union.anon* %441 to [4 x i32]*
  %443 = getelementptr inbounds [4 x i32], [4 x i32]* %442, i64 0, i64 3
  %444 = load i32, i32* %443, align 4
  %445 = zext i32 %444 to i64
  %446 = shl nuw i64 %445, 32
  %447 = getelementptr inbounds [4 x i32], [4 x i32]* %442, i64 0, i64 1
  %448 = load i32, i32* %447, align 4
  %449 = zext i32 %448 to i64
  %450 = or i64 %446, %449
  %451 = mul i64 %440, 20
  %452 = mul i64 %450, 20
  %453 = icmp ult i64 %420, 16
  br i1 %453, label %526, label %454

454:                                              ; preds = %478, %415
  %455 = phi i64 [ %518, %478 ], [ %416, %415 ]
  %456 = phi i64 [ %511, %478 ], [ %417, %415 ]
  %457 = phi i64 [ %522, %478 ], [ %418, %415 ]
  %458 = phi i8* [ %523, %478 ], [ %419, %415 ]
  %459 = phi i64 [ %524, %478 ], [ %420, %415 ]
  %460 = bitcast i8* %458 to i64*
  %461 = load i64, i64* %460, align 1
  %462 = getelementptr inbounds i8, i8* %458, i64 8
  %463 = bitcast i8* %462 to i64*
  %464 = load i64, i64* %463, align 1
  %465 = and i64 %461, 17592186044415
  %466 = add i64 %465, %457
  %467 = zext i64 %464 to i128
  %468 = shl nuw i128 %467, 64
  %469 = zext i64 %461 to i128
  %470 = or i128 %468, %469
  %471 = lshr i128 %470, 44
  %472 = trunc i128 %471 to i64
  %473 = and i64 %472, 17592186044415
  %474 = add i64 %473, %456
  %475 = lshr i64 %464, 24
  %476 = or i64 %475, 1099511627776
  %477 = add i64 %476, %455
  br label %478

478:                                              ; preds = %540, %454
  %479 = phi i64 [ %557, %540 ], [ %477, %454 ]
  %480 = phi i64 [ %555, %540 ], [ %474, %454 ]
  %481 = phi i64 [ %547, %540 ], [ %466, %454 ]
  %482 = phi i8* [ %530, %540 ], [ %458, %454 ]
  %483 = phi i64 [ 16, %540 ], [ %459, %454 ]
  %484 = zext i64 %481 to i128
  %485 = zext i64 %430 to i128
  %486 = mul nuw i128 %484, %485
  %487 = zext i64 %480 to i128
  %488 = zext i64 %452 to i128
  %489 = mul nuw i128 %487, %488
  %490 = zext i64 %479 to i128
  %491 = zext i64 %451 to i128
  %492 = mul nuw i128 %490, %491
  %493 = add i128 %489, %492
  %494 = add i128 %493, %486
  %495 = trunc i128 %494 to i64
  %496 = zext i64 %440 to i128
  %497 = mul nuw i128 %484, %496
  %498 = mul nuw i128 %487, %485
  %499 = mul nuw i128 %490, %488
  %500 = zext i64 %450 to i128
  %501 = mul nuw i128 %484, %500
  %502 = mul nuw i128 %487, %496
  %503 = mul nuw i128 %490, %485
  %504 = and i64 %495, 17592186044415
  %505 = lshr i128 %494, 44
  %506 = and i128 %505, 18446744073709551615
  %507 = add i128 %498, %499
  %508 = add i128 %507, %497
  %509 = add i128 %508, %506
  %510 = trunc i128 %509 to i64
  %511 = and i64 %510, 17592186044415
  %512 = lshr i128 %509, 44
  %513 = and i128 %512, 18446744073709551615
  %514 = add i128 %502, %503
  %515 = add i128 %514, %501
  %516 = add i128 %515, %513
  %517 = trunc i128 %516 to i64
  %518 = and i64 %517, 4398046511103
  %519 = lshr i128 %516, 42
  %520 = trunc i128 %519 to i64
  %521 = mul i64 %520, 5
  %522 = add i64 %521, %504
  %523 = getelementptr inbounds i8, i8* %482, i64 16
  %524 = add i64 %483, -16
  %525 = icmp ugt i64 %524, 15
  br i1 %525, label %454, label %526

526:                                              ; preds = %478, %415
  %527 = phi i64 [ %416, %415 ], [ %518, %478 ]
  %528 = phi i64 [ %417, %415 ], [ %511, %478 ]
  %529 = phi i64 [ %418, %415 ], [ %522, %478 ]
  %530 = phi i8* [ %419, %415 ], [ %523, %478 ]
  %531 = phi i64 [ %420, %415 ], [ %524, %478 ]
  %532 = icmp eq i64 %531, 0
  br i1 %532, label %558, label %533

533:                                              ; preds = %526
  %534 = getelementptr inbounds i8, i8* %530, i64 %531
  store i8 1, i8* %534, align 1
  %535 = sub nuw nsw i64 15, %531
  %536 = icmp eq i64 %535, 0
  br i1 %536, label %540, label %537

537:                                              ; preds = %533
  %538 = add nuw nsw i64 %531, 1
  %539 = getelementptr inbounds i8, i8* %530, i64 %538
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %539, i8 0, i64 %535, i1 false) #5
  br label %540

540:                                              ; preds = %533, %537
  %541 = bitcast i8* %530 to i64*
  %542 = load i64, i64* %541, align 1
  %543 = getelementptr inbounds i8, i8* %530, i64 8
  %544 = bitcast i8* %543 to i64*
  %545 = load i64, i64* %544, align 1
  %546 = and i64 %542, 17592186044415
  %547 = add i64 %546, %529
  %548 = zext i64 %545 to i128
  %549 = shl nuw i128 %548, 64
  %550 = zext i64 %542 to i128
  %551 = or i128 %549, %550
  %552 = lshr i128 %551, 44
  %553 = trunc i128 %552 to i64
  %554 = and i64 %553, 17592186044415
  %555 = add i64 %554, %528
  %556 = lshr i64 %545, 24
  %557 = add i64 %556, %527
  br label %478

558:                                              ; preds = %526
  %559 = lshr i64 %529, 44
  %560 = and i64 %529, 17592186044415
  %561 = add i64 %559, %528
  %562 = lshr i64 %561, 44
  %563 = and i64 %561, 17592186044415
  %564 = add i64 %562, %527
  %565 = lshr i64 %564, 42
  %566 = mul nuw nsw i64 %565, 5
  %567 = add nuw nsw i64 %566, %560
  %568 = add nuw nsw i64 %567, 5
  %569 = lshr i64 %568, 44
  %570 = add nuw nsw i64 %569, %563
  %571 = lshr i64 %570, 44
  %572 = or i64 %564, -4398046511104
  %573 = add nsw i64 %572, %571
  %574 = lshr i64 %573, 63
  %575 = add nsw i64 %574, -1
  %576 = ashr i64 %573, 63
  %577 = and i64 %576, %567
  %578 = and i64 %575, 17592186044415
  %579 = and i64 %578, %568
  %580 = or i64 %577, %579
  %581 = and i64 %576, %563
  %582 = and i64 %578, %570
  %583 = or i64 %581, %582
  %584 = and i64 %576, %564
  %585 = and i64 %575, %573
  %586 = or i64 %585, %584
  %587 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 3
  %588 = bitcast %union.anon* %587 to [4 x i32]*
  %589 = getelementptr inbounds [4 x i32], [4 x i32]* %588, i64 0, i64 3
  %590 = load i32, i32* %589, align 4
  %591 = zext i32 %590 to i64
  %592 = shl nuw i64 %591, 32
  %593 = getelementptr inbounds [4 x i32], [4 x i32]* %588, i64 0, i64 1
  %594 = load i32, i32* %593, align 4
  %595 = zext i32 %594 to i64
  %596 = getelementptr inbounds %struct.poly1305_state_internal_t, %struct.poly1305_state_internal_t* %6, i64 0, i32 0, i64 1, i32 4
  %597 = bitcast %union.anon* %596 to [4 x i32]*
  %598 = getelementptr inbounds [4 x i32], [4 x i32]* %597, i64 0, i64 3
  %599 = load i32, i32* %598, align 4
  %600 = zext i32 %599 to i64
  %601 = shl nuw i64 %600, 32
  %602 = getelementptr inbounds [4 x i32], [4 x i32]* %597, i64 0, i64 1
  %603 = load i32, i32* %602, align 4
  %604 = zext i32 %603 to i64
  %605 = or i64 %601, %604
  %606 = and i64 %592, 17587891077120
  %607 = or i64 %606, %595
  %608 = add nuw nsw i64 %607, %580
  %609 = lshr i64 %608, 44
  %610 = and i64 %608, 17592186044415
  %611 = zext i64 %605 to i128
  %612 = shl nuw i128 %611, 64
  %613 = zext i64 %592 to i128
  %614 = or i128 %612, %613
  %615 = lshr i128 %614, 44
  %616 = trunc i128 %615 to i64
  %617 = and i64 %616, 17592186044415
  %618 = add nuw nsw i64 %609, %583
  %619 = add nuw nsw i64 %618, %617
  %620 = lshr i64 %619, 44
  %621 = lshr i64 %605, 24
  %622 = add i64 %621, %586
  %623 = add i64 %622, %620
  %624 = shl i64 %619, 44
  %625 = or i64 %624, %610
  %626 = bitcast i8* %1 to i64*
  store i64 %625, i64* %626, align 1
  %627 = getelementptr inbounds i8, i8* %1, i64 8
  %628 = lshr i64 %619, 20
  %629 = and i64 %628, 16777215
  %630 = shl i64 %623, 24
  %631 = or i64 %630, %629
  %632 = bitcast i8* %627 to i64*
  store i64 %631, i64* %632, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
