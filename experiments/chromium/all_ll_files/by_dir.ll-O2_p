; ModuleID = '../../third_party/boringssl/src/crypto/x509/by_dir.c'
source_filename = "../../third_party/boringssl/src/crypto/x509/by_dir.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.x509_lookup_method_st = type { i8*, i32 (%struct.x509_lookup_st*)*, void (%struct.x509_lookup_st*)*, i32 (%struct.x509_lookup_st*)*, i32 (%struct.x509_lookup_st*)*, i32 (%struct.x509_lookup_st*, i32, i8*, i64, i8**)*, i32 (%struct.x509_lookup_st*, i32, %struct.X509_name_st*, %struct.x509_object_st*)*, i32 (%struct.x509_lookup_st*, i32, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.x509_object_st*)*, i32 (%struct.x509_lookup_st*, i32, i8*, i32, %struct.x509_object_st*)*, i32 (%struct.x509_lookup_st*, i32, i8*, i32, %struct.x509_object_st*)* }
%struct.x509_lookup_st = type { i32, i32, %struct.x509_lookup_method_st*, i8*, %struct.x509_store_st* }
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.stack_st_X509 = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, {}*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.x509_object_st = type { i32, %union.anon.0 }
%union.anon.0 = type { i8* }
%struct.CRYPTO_STATIC_MUTEX = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%struct.stack_st_BY_DIR_ENTRY = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.lookup_dir_st = type { %struct.buf_mem_st*, %struct.stack_st_BY_DIR_ENTRY* }
%union.anon.2 = type { %struct.anon }
%struct.anon = type { %struct.x509_st, %struct.x509_cinf_st }
%struct.lookup_dir_hashes_st = type { i64, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.stack_st_BY_DIR_HASH = type opaque
%struct.lookup_dir_entry_st = type { i8*, i32, %struct.stack_st_BY_DIR_HASH* }

@x509_dir_lookup = internal global %struct.x509_lookup_method_st { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i32 (%struct.x509_lookup_st*)* @new_dir, void (%struct.x509_lookup_st*)* @free_dir, i32 (%struct.x509_lookup_st*)* null, i32 (%struct.x509_lookup_st*)* null, i32 (%struct.x509_lookup_st*, i32, i8*, i64, i8**)* @dir_ctrl, i32 (%struct.x509_lookup_st*, i32, %struct.X509_name_st*, %struct.x509_object_st*)* @get_cert_by_subject, i32 (%struct.x509_lookup_st*, i32, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.x509_object_st*)* null, i32 (%struct.x509_lookup_st*, i32, i8*, i32, %struct.x509_object_st*)* null, i32 (%struct.x509_lookup_st*, i32, i8*, i32, %struct.x509_object_st*)* null }, align 8
@.str = private unnamed_addr constant [37 x i8] c"Load certs from files in a directory\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"../../third_party/boringssl/src/crypto/x509/by_dir.c\00", align 1
@__const.get_cert_by_subject.data = private unnamed_addr constant { { { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, [4 x i8], %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], [4 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }, { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, { i8*, i64, i32, i8, [3 x i8] } } } } { { { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, [4 x i8], %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], [4 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }, { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, { i8*, i64, i32, i8, [3 x i8] } } } { { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, [4 x i8], %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], [4 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st } { %struct.x509_cinf_st* inttoptr (i64 -6148914691236517206 to %struct.x509_cinf_st*), %struct.X509_algor_st* inttoptr (i64 -6148914691236517206 to %struct.X509_algor_st*), %struct.asn1_string_st* inttoptr (i64 -6148914691236517206 to %struct.asn1_string_st*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %struct.crypto_ex_data_st { %struct.stack_st_void* inttoptr (i64 -6148914691236517206 to %struct.stack_st_void*) }, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, %struct.asn1_string_st* inttoptr (i64 -6148914691236517206 to %struct.asn1_string_st*), %struct.AUTHORITY_KEYID_st* inttoptr (i64 -6148914691236517206 to %struct.AUTHORITY_KEYID_st*), %struct.X509_POLICY_CACHE_st* inttoptr (i64 -6148914691236517206 to %struct.X509_POLICY_CACHE_st*), %struct.stack_st_DIST_POINT* inttoptr (i64 -6148914691236517206 to %struct.stack_st_DIST_POINT*), %struct.stack_st_GENERAL_NAME* inttoptr (i64 -6148914691236517206 to %struct.stack_st_GENERAL_NAME*), %struct.NAME_CONSTRAINTS_st* inttoptr (i64 -6148914691236517206 to %struct.NAME_CONSTRAINTS_st*), [20 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA", [4 x i8] c"\AA\AA\AA\AA", %struct.x509_cert_aux_st* inttoptr (i64 -6148914691236517206 to %struct.x509_cert_aux_st*), %struct.crypto_buffer_st* inttoptr (i64 -6148914691236517206 to %struct.crypto_buffer_st*), %union.crypto_mutex_st { double 0xFFFFFFFFFFFFFFFF, [48 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" } }, { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, { i8*, i64, i32, i8, [3 x i8] } } { %struct.asn1_string_st* inttoptr (i64 -6148914691236517206 to %struct.asn1_string_st*), %struct.asn1_string_st* inttoptr (i64 -6148914691236517206 to %struct.asn1_string_st*), %struct.X509_algor_st* inttoptr (i64 -6148914691236517206 to %struct.X509_algor_st*), %struct.X509_name_st* inttoptr (i64 -6148914691236517206 to %struct.X509_name_st*), %struct.X509_val_st* inttoptr (i64 -6148914691236517206 to %struct.X509_val_st*), %struct.X509_name_st* inttoptr (i64 -6148914691236517206 to %struct.X509_name_st*), %struct.X509_pubkey_st* inttoptr (i64 -6148914691236517206 to %struct.X509_pubkey_st*), %struct.asn1_string_st* inttoptr (i64 -6148914691236517206 to %struct.asn1_string_st*), %struct.asn1_string_st* inttoptr (i64 -6148914691236517206 to %struct.asn1_string_st*), %struct.stack_st_X509_EXTENSION* inttoptr (i64 -6148914691236517206 to %struct.stack_st_X509_EXTENSION*), { i8*, i64, i32, i8, [3 x i8] } { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA" } } } }, align 8
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@g_ent_hashes_lock = internal global %struct.CRYPTO_STATIC_MUTEX zeroinitializer, align 8
@.str.5 = private unnamed_addr constant [15 x i8] c"%s%c%08lx.%s%d\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.x509_lookup_method_st* @X509_LOOKUP_hash_dir() local_unnamed_addr #0 {
  ret %struct.x509_lookup_method_st* @x509_dir_lookup
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @new_dir(%struct.x509_lookup_st* nocapture) #1 {
  %2 = tail call i8* @OPENSSL_malloc(i64 16) #9
  %3 = icmp eq i8* %2, null
  br i1 %3, label %13, label %4

4:                                                ; preds = %1
  %5 = tail call %struct.buf_mem_st* @BUF_MEM_new() #9
  %6 = bitcast i8* %2 to %struct.buf_mem_st**
  store %struct.buf_mem_st* %5, %struct.buf_mem_st** %6, align 8
  %7 = icmp eq %struct.buf_mem_st* %5, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  tail call void @OPENSSL_free(i8* nonnull %2) #9
  br label %13

9:                                                ; preds = %4
  %10 = getelementptr inbounds i8, i8* %2, i64 8
  %11 = bitcast i8* %10 to %struct.stack_st_BY_DIR_ENTRY**
  store %struct.stack_st_BY_DIR_ENTRY* null, %struct.stack_st_BY_DIR_ENTRY** %11, align 8
  %12 = getelementptr inbounds %struct.x509_lookup_st, %struct.x509_lookup_st* %0, i64 0, i32 3
  store i8* %2, i8** %12, align 8
  br label %13

13:                                               ; preds = %1, %9, %8
  %14 = phi i32 [ 0, %8 ], [ 1, %9 ], [ 0, %1 ]
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define internal void @free_dir(%struct.x509_lookup_st* nocapture readonly) #1 {
  %2 = getelementptr inbounds %struct.x509_lookup_st, %struct.x509_lookup_st* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = bitcast i8* %4 to %struct.stack_st_BY_DIR_ENTRY**
  %6 = load %struct.stack_st_BY_DIR_ENTRY*, %struct.stack_st_BY_DIR_ENTRY** %5, align 8
  %7 = icmp eq %struct.stack_st_BY_DIR_ENTRY* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = bitcast %struct.stack_st_BY_DIR_ENTRY* %6 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %9, void (void (i8*)*, i8*)* nonnull @sk_BY_DIR_ENTRY_call_free_func, void (i8*)* bitcast (void (%struct.lookup_dir_entry_st*)* @by_dir_entry_free to void (i8*)*)) #9
  br label %10

10:                                               ; preds = %1, %8
  %11 = bitcast i8* %3 to %struct.buf_mem_st**
  %12 = load %struct.buf_mem_st*, %struct.buf_mem_st** %11, align 8
  %13 = icmp eq %struct.buf_mem_st* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void @BUF_MEM_free(%struct.buf_mem_st* nonnull %12) #9
  br label %15

15:                                               ; preds = %10, %14
  tail call void @OPENSSL_free(i8* %3) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @dir_ctrl(%struct.x509_lookup_st* nocapture readonly, i32, i8*, i64, i8** nocapture readnone) #1 {
  %6 = getelementptr inbounds %struct.x509_lookup_st, %struct.x509_lookup_st* %0, i64 0, i32 3
  %7 = bitcast i8** %6 to %struct.lookup_dir_st**
  %8 = load %struct.lookup_dir_st*, %struct.lookup_dir_st** %7, align 8
  %9 = icmp eq i32 %1, 2
  br i1 %9, label %10, label %28

10:                                               ; preds = %5
  %11 = icmp eq i64 %3, 3
  br i1 %11, label %12, label %25

12:                                               ; preds = %10
  %13 = tail call i8* @X509_get_default_cert_dir_env() #9
  %14 = tail call i8* @getenv(i8* %13) #9
  %15 = icmp eq i8* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = tail call fastcc i32 @add_cert_dir(%struct.lookup_dir_st* %8, i8* nonnull %14, i32 1)
  br label %21

18:                                               ; preds = %12
  %19 = tail call i8* @X509_get_default_cert_dir() #9
  %20 = tail call fastcc i32 @add_cert_dir(%struct.lookup_dir_st* %8, i8* %19, i32 1)
  br label %21

21:                                               ; preds = %18, %16
  %22 = phi i32 [ %17, %16 ], [ %20, %18 ]
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %21
  tail call void @ERR_put_error(i32 11, i32 0, i32 117, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 135) #9
  br label %28

25:                                               ; preds = %10
  %26 = trunc i64 %3 to i32
  %27 = tail call fastcc i32 @add_cert_dir(%struct.lookup_dir_st* %8, i8* %2, i32 %26)
  br label %28

28:                                               ; preds = %21, %25, %24, %5
  %29 = phi i32 [ %22, %21 ], [ 0, %24 ], [ %27, %25 ], [ 0, %5 ]
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @get_cert_by_subject(%struct.x509_lookup_st*, i32, %struct.X509_name_st*, %struct.x509_object_st* nocapture) #1 {
  %5 = alloca %union.anon.2, align 8
  %6 = alloca [2 x i64], align 16
  %7 = alloca %struct.x509_object_st, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.lookup_dir_hashes_st, align 8
  %10 = alloca %struct.stat, align 8
  %11 = bitcast %union.anon.2* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 336, i8* nonnull %11) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 bitcast ({ { { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, [4 x i8], %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], [4 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }, { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, { i8*, i64, i32, i8, [3 x i8] } } } }* @__const.get_cert_by_subject.data to i8*), i64 336, i1 false)
  %12 = bitcast [2 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #9
  %13 = getelementptr inbounds [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %14 = getelementptr inbounds [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %15 = bitcast %struct.x509_object_st* %7 to i8*
  %16 = bitcast [2 x i64]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 16, i1 false)
  %17 = icmp eq %struct.X509_name_st* %2, null
  br i1 %17, label %216, label %18

18:                                               ; preds = %4
  %19 = getelementptr inbounds %struct.x509_object_st, %struct.x509_object_st* %7, i64 0, i32 0
  store i32 %1, i32* %19, align 8
  %20 = icmp eq i32 %1, 1
  br i1 %20, label %21, label %28

21:                                               ; preds = %18
  %22 = getelementptr inbounds %union.anon.2, %union.anon.2* %5, i64 0, i32 0, i32 1
  %23 = getelementptr inbounds %union.anon.2, %union.anon.2* %5, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %union.anon.2, %union.anon.2* %5, i64 0, i32 0, i32 0, i32 0
  store %struct.x509_cinf_st* %22, %struct.x509_cinf_st** %24, align 8
  %25 = getelementptr inbounds %union.anon.2, %union.anon.2* %5, i64 0, i32 0, i32 1, i32 5
  store %struct.X509_name_st* %2, %struct.X509_name_st** %25, align 8
  %26 = getelementptr inbounds %struct.x509_object_st, %struct.x509_object_st* %7, i64 0, i32 1
  %27 = bitcast %union.anon.0* %26 to %struct.x509_st**
  store %struct.x509_st* %23, %struct.x509_st** %27, align 8
  br label %38

28:                                               ; preds = %18
  %29 = icmp eq i32 %1, 2
  br i1 %29, label %30, label %37

30:                                               ; preds = %28
  %31 = getelementptr inbounds %union.anon.2, %union.anon.2* %5, i64 0, i32 0, i32 0, i32 15
  %32 = bitcast %union.anon.2* %5 to %struct.stack_st_GENERAL_NAME***
  store %struct.stack_st_GENERAL_NAME** %31, %struct.stack_st_GENERAL_NAME*** %32, align 8
  %33 = getelementptr inbounds %struct.stack_st_GENERAL_NAME*, %struct.stack_st_GENERAL_NAME** %31, i64 2
  %34 = bitcast %struct.stack_st_GENERAL_NAME** %33 to %struct.X509_name_st**
  store %struct.X509_name_st* %2, %struct.X509_name_st** %34, align 8
  %35 = getelementptr inbounds %struct.x509_object_st, %struct.x509_object_st* %7, i64 0, i32 1
  %36 = bitcast %union.anon.0* %35 to %union.anon.2**
  store %union.anon.2* %5, %union.anon.2** %36, align 8
  br label %38

37:                                               ; preds = %28
  tail call void @ERR_put_error(i32 11, i32 0, i32 133, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 295) #9
  br label %216

38:                                               ; preds = %30, %21
  %39 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), %21 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), %30 ]
  %40 = call %struct.buf_mem_st* @BUF_MEM_new() #9
  %41 = icmp eq %struct.buf_mem_st* %40, null
  br i1 %41, label %42, label %43

42:                                               ; preds = %38
  call void @ERR_put_error(i32 11, i32 0, i32 7, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 300) #9
  br label %216

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.x509_lookup_st, %struct.x509_lookup_st* %0, i64 0, i32 3
  %45 = bitcast i8** %44 to %struct.lookup_dir_st**
  %46 = load %struct.lookup_dir_st*, %struct.lookup_dir_st** %45, align 8
  %47 = call i64 @X509_NAME_hash(%struct.X509_name_st* nonnull %2) #9
  store i64 %47, i64* %13, align 16
  %48 = call i64 @X509_NAME_hash_old(%struct.X509_name_st* nonnull %2) #9
  store i64 %48, i64* %14, align 8
  %49 = getelementptr inbounds %struct.lookup_dir_st, %struct.lookup_dir_st* %46, i64 0, i32 1
  %50 = bitcast %struct.stack_st_BY_DIR_ENTRY** %49 to %struct.stack_st**
  %51 = bitcast i64* %8 to i8*
  %52 = bitcast %struct.lookup_dir_hashes_st* %9 to i8*
  %53 = icmp eq i32 %1, 2
  %54 = getelementptr inbounds %struct.lookup_dir_hashes_st, %struct.lookup_dir_hashes_st* %9, i64 0, i32 0
  %55 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %40, i64 0, i32 1
  %56 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %40, i64 0, i32 2
  %57 = bitcast %struct.stat* %10 to i8*
  %58 = bitcast %struct.stat* %10 to %struct.stat64*
  %59 = getelementptr inbounds %struct.x509_lookup_st, %struct.x509_lookup_st* %0, i64 0, i32 4
  br label %60

60:                                               ; preds = %211, %43
  %61 = phi i64 [ %47, %43 ], [ %213, %211 ]
  %62 = phi i64 [ 0, %43 ], [ %209, %211 ]
  %63 = load %struct.stack_st*, %struct.stack_st** %50, align 8
  %64 = call i64 @sk_num(%struct.stack_st* %63) #9
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %208, label %66

66:                                               ; preds = %60, %203
  %67 = phi i64 [ %204, %203 ], [ 0, %60 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #9
  store i64 -6148914691236517206, i64* %8, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 -86, i64 16, i1 false)
  %68 = load %struct.stack_st*, %struct.stack_st** %50, align 8
  %69 = call i8* @sk_value(%struct.stack_st* %68, i64 %67) #9
  %70 = bitcast i8* %69 to i8**
  %71 = load i8*, i8** %70, align 8
  %72 = call i64 @strlen(i8* %71) #10
  %73 = shl i64 %72, 32
  %74 = add i64 %73, 73014444032
  %75 = ashr exact i64 %74, 32
  %76 = call i64 @BUF_MEM_grow(%struct.buf_mem_st* nonnull %40, i64 %75) #9
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %66
  call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 317) #9
  br label %201

79:                                               ; preds = %66
  br i1 %53, label %80, label %101

80:                                               ; preds = %79
  %81 = getelementptr inbounds i8, i8* %69, i64 16
  %82 = bitcast i8* %81 to %struct.stack_st_BY_DIR_HASH**
  %83 = load %struct.stack_st_BY_DIR_HASH*, %struct.stack_st_BY_DIR_HASH** %82, align 8
  %84 = icmp eq %struct.stack_st_BY_DIR_HASH* %83, null
  br i1 %84, label %101, label %85

85:                                               ; preds = %80
  store i64 %61, i64* %54, align 8
  call void @CRYPTO_STATIC_MUTEX_lock_read(%struct.CRYPTO_STATIC_MUTEX* nonnull @g_ent_hashes_lock) #9
  %86 = bitcast i8* %81 to %struct.stack_st**
  %87 = load %struct.stack_st*, %struct.stack_st** %86, align 8
  %88 = call i32 @sk_find(%struct.stack_st* %87, i64* nonnull %8, i8* nonnull %52, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_BY_DIR_HASH_call_cmp_func) #9
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %98, label %90

90:                                               ; preds = %85
  %91 = load %struct.stack_st*, %struct.stack_st** %86, align 8
  %92 = load i64, i64* %8, align 8
  %93 = call i8* @sk_value(%struct.stack_st* %91, i64 %92) #9
  %94 = bitcast i8* %93 to %struct.lookup_dir_hashes_st*
  %95 = getelementptr inbounds i8, i8* %93, i64 8
  %96 = bitcast i8* %95 to i32*
  %97 = load i32, i32* %96, align 8
  br label %98

98:                                               ; preds = %85, %90
  %99 = phi i32 [ %97, %90 ], [ 0, %85 ]
  %100 = phi %struct.lookup_dir_hashes_st* [ %94, %90 ], [ null, %85 ]
  call void @CRYPTO_STATIC_MUTEX_unlock_read(%struct.CRYPTO_STATIC_MUTEX* nonnull @g_ent_hashes_lock) #9
  br label %101

101:                                              ; preds = %79, %80, %98
  %102 = phi i32 [ %99, %98 ], [ 0, %80 ], [ 0, %79 ]
  %103 = phi %struct.lookup_dir_hashes_st* [ %100, %98 ], [ null, %80 ], [ null, %79 ]
  %104 = getelementptr inbounds i8, i8* %69, i64 8
  %105 = bitcast i8* %104 to i32*
  br label %106

106:                                              ; preds = %127, %101
  %107 = phi i32 [ %102, %101 ], [ %128, %127 ]
  %108 = load i8*, i8** %70, align 8
  %109 = load i64, i64* %56, align 8
  %110 = load i8*, i8** %55, align 8
  %111 = call i32 (i8*, i64, i8*, ...) @BIO_snprintf(i8* %110, i64 %109, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i8* %108, i32 47, i64 %61, i8* %39, i32 %107) #9
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %57) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 144, i1 false)
  %112 = load i8*, i8** %55, align 8
  %113 = call i32 @__xstat64(i32 1, i8* %112, %struct.stat64* nonnull %58) #9
  %114 = icmp sgt i32 %113, -1
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %57) #9
  br i1 %114, label %115, label %129

115:                                              ; preds = %106
  br i1 %20, label %116, label %121

116:                                              ; preds = %115
  %117 = load i8*, i8** %55, align 8
  %118 = load i32, i32* %105, align 8
  %119 = call i32 @X509_load_cert_file(%struct.x509_lookup_st* %0, i8* %117, i32 %118) #9
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %129, label %127

121:                                              ; preds = %115
  br i1 %53, label %122, label %127

122:                                              ; preds = %121
  %123 = load i8*, i8** %55, align 8
  %124 = load i32, i32* %105, align 8
  %125 = call i32 @X509_load_crl_file(%struct.x509_lookup_st* %0, i8* %123, i32 %124) #9
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %129, label %127

127:                                              ; preds = %116, %122, %121
  %128 = add nsw i32 %107, 1
  br label %106

129:                                              ; preds = %106, %116, %122
  %130 = load %struct.x509_store_st*, %struct.x509_store_st** %59, align 8
  %131 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %130, i64 0, i32 2
  call void @CRYPTO_MUTEX_lock_write(%union.crypto_mutex_st* %131) #9
  %132 = load %struct.x509_store_st*, %struct.x509_store_st** %59, align 8
  %133 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %132, i64 0, i32 1
  %134 = bitcast %struct.stack_st_X509_OBJECT** %133 to %struct.stack_st**
  %135 = load %struct.stack_st*, %struct.stack_st** %134, align 8
  call void @sk_sort(%struct.stack_st* %135) #9
  %136 = load %struct.x509_store_st*, %struct.x509_store_st** %59, align 8
  %137 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %136, i64 0, i32 1
  %138 = bitcast %struct.stack_st_X509_OBJECT** %137 to %struct.stack_st**
  %139 = load %struct.stack_st*, %struct.stack_st** %138, align 8
  %140 = call i32 @sk_find(%struct.stack_st* %139, i64* nonnull %8, i8* nonnull %15, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_X509_OBJECT_call_cmp_func) #9
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %150, label %142

142:                                              ; preds = %129
  %143 = load %struct.x509_store_st*, %struct.x509_store_st** %59, align 8
  %144 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %143, i64 0, i32 1
  %145 = bitcast %struct.stack_st_X509_OBJECT** %144 to %struct.stack_st**
  %146 = load %struct.stack_st*, %struct.stack_st** %145, align 8
  %147 = load i64, i64* %8, align 8
  %148 = call i8* @sk_value(%struct.stack_st* %146, i64 %147) #9
  %149 = bitcast i8* %148 to %struct.x509_object_st*
  br label %150

150:                                              ; preds = %129, %142
  %151 = phi %struct.x509_object_st* [ %149, %142 ], [ null, %129 ]
  %152 = load %struct.x509_store_st*, %struct.x509_store_st** %59, align 8
  %153 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %152, i64 0, i32 2
  call void @CRYPTO_MUTEX_unlock_write(%union.crypto_mutex_st* %153) #9
  br i1 %53, label %154, label %190

154:                                              ; preds = %150
  call void @CRYPTO_STATIC_MUTEX_lock_write(%struct.CRYPTO_STATIC_MUTEX* nonnull @g_ent_hashes_lock) #9
  %155 = icmp eq %struct.lookup_dir_hashes_st* %103, null
  br i1 %155, label %156, label %183

156:                                              ; preds = %154
  store i64 %61, i64* %54, align 8
  %157 = getelementptr inbounds i8, i8* %69, i64 16
  %158 = bitcast i8* %157 to %struct.stack_st**
  %159 = load %struct.stack_st*, %struct.stack_st** %158, align 8
  call void @sk_sort(%struct.stack_st* %159) #9
  %160 = load %struct.stack_st*, %struct.stack_st** %158, align 8
  %161 = call i32 @sk_find(%struct.stack_st* %160, i64* nonnull %8, i8* nonnull %52, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_BY_DIR_HASH_call_cmp_func) #9
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %169, label %163

163:                                              ; preds = %156
  %164 = load %struct.stack_st*, %struct.stack_st** %158, align 8
  %165 = load i64, i64* %8, align 8
  %166 = call i8* @sk_value(%struct.stack_st* %164, i64 %165) #9
  %167 = bitcast i8* %166 to %struct.lookup_dir_hashes_st*
  %168 = icmp eq i8* %166, null
  br i1 %168, label %169, label %183

169:                                              ; preds = %156, %163
  %170 = call i8* @OPENSSL_malloc(i64 16) #9
  %171 = icmp eq i8* %170, null
  br i1 %171, label %172, label %173

172:                                              ; preds = %169
  call void @CRYPTO_STATIC_MUTEX_unlock_write(%struct.CRYPTO_STATIC_MUTEX* nonnull @g_ent_hashes_lock) #9
  br label %201

173:                                              ; preds = %169
  %174 = bitcast i8* %170 to i64*
  store i64 %61, i64* %174, align 8
  %175 = getelementptr inbounds i8, i8* %170, i64 8
  %176 = bitcast i8* %175 to i32*
  store i32 %107, i32* %176, align 8
  %177 = load %struct.stack_st*, %struct.stack_st** %158, align 8
  %178 = call i64 @sk_push(%struct.stack_st* %177, i8* nonnull %170) #9
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %173
  call void @CRYPTO_STATIC_MUTEX_unlock_write(%struct.CRYPTO_STATIC_MUTEX* nonnull @g_ent_hashes_lock) #9
  call void @OPENSSL_free(i8* nonnull %170) #9
  br label %201

181:                                              ; preds = %173
  %182 = load %struct.stack_st*, %struct.stack_st** %158, align 8
  call void @sk_sort(%struct.stack_st* %182) #9
  br label %189

183:                                              ; preds = %154, %163
  %184 = phi %struct.lookup_dir_hashes_st* [ %167, %163 ], [ %103, %154 ]
  %185 = getelementptr inbounds %struct.lookup_dir_hashes_st, %struct.lookup_dir_hashes_st* %184, i64 0, i32 1
  %186 = load i32, i32* %185, align 8
  %187 = icmp slt i32 %186, %107
  br i1 %187, label %188, label %189

188:                                              ; preds = %183
  store i32 %107, i32* %185, align 8
  br label %189

189:                                              ; preds = %183, %188, %181
  call void @CRYPTO_STATIC_MUTEX_unlock_write(%struct.CRYPTO_STATIC_MUTEX* nonnull @g_ent_hashes_lock) #9
  br label %190

190:                                              ; preds = %189, %150
  %191 = icmp eq %struct.x509_object_st* %151, null
  br i1 %191, label %203, label %192

192:                                              ; preds = %190
  %193 = getelementptr inbounds %struct.x509_object_st, %struct.x509_object_st* %151, i64 0, i32 0
  %194 = load i32, i32* %193, align 8
  %195 = getelementptr inbounds %struct.x509_object_st, %struct.x509_object_st* %3, i64 0, i32 0
  store i32 %194, i32* %195, align 8
  %196 = getelementptr inbounds %struct.x509_object_st, %struct.x509_object_st* %3, i64 0, i32 1
  %197 = getelementptr inbounds %struct.x509_object_st, %struct.x509_object_st* %151, i64 0, i32 1
  %198 = bitcast %union.anon.0* %197 to i64*
  %199 = bitcast %union.anon.0* %196 to i64*
  %200 = load i64, i64* %198, align 1
  store i64 %200, i64* %199, align 1
  br label %201

201:                                              ; preds = %192, %172, %180, %78
  %202 = phi i32 [ 0, %78 ], [ 0, %180 ], [ 0, %172 ], [ 1, %192 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #9
  br label %214

203:                                              ; preds = %190
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #9
  %204 = add nuw i64 %67, 1
  %205 = load %struct.stack_st*, %struct.stack_st** %50, align 8
  %206 = call i64 @sk_num(%struct.stack_st* %205) #9
  %207 = icmp ult i64 %204, %206
  br i1 %207, label %66, label %208

208:                                              ; preds = %203, %60
  %209 = add nuw nsw i64 %62, 1
  %210 = icmp eq i64 %209, 2
  br i1 %210, label %214, label %211

211:                                              ; preds = %208
  %212 = getelementptr inbounds [2 x i64], [2 x i64]* %6, i64 0, i64 %209
  %213 = load i64, i64* %212, align 8
  br label %60

214:                                              ; preds = %208, %201
  %215 = phi i32 [ %202, %201 ], [ 0, %208 ]
  call void @BUF_MEM_free(%struct.buf_mem_st* nonnull %40) #9
  br label %216

216:                                              ; preds = %37, %42, %214, %4
  %217 = phi i32 [ 0, %4 ], [ %215, %214 ], [ 0, %42 ], [ 0, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #9
  call void @llvm.lifetime.end.p0i8(i64 336, i8* nonnull %11) #9
  ret i32 %217
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #3

declare %struct.buf_mem_st* @BUF_MEM_new() local_unnamed_addr #3

declare void @OPENSSL_free(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define internal void @by_dir_entry_free(%struct.lookup_dir_entry_st*) #1 {
  %2 = getelementptr inbounds %struct.lookup_dir_entry_st, %struct.lookup_dir_entry_st* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @OPENSSL_free(i8* nonnull %3) #9
  br label %6

6:                                                ; preds = %1, %5
  %7 = getelementptr inbounds %struct.lookup_dir_entry_st, %struct.lookup_dir_entry_st* %0, i64 0, i32 2
  %8 = load %struct.stack_st_BY_DIR_HASH*, %struct.stack_st_BY_DIR_HASH** %7, align 8
  %9 = icmp eq %struct.stack_st_BY_DIR_HASH* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = bitcast %struct.stack_st_BY_DIR_HASH* %8 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %11, void (void (i8*)*, i8*)* nonnull @sk_BY_DIR_HASH_call_free_func, void (i8*)* bitcast (void (%struct.lookup_dir_hashes_st*)* @by_dir_hash_free to void (i8*)*)) #9
  br label %12

12:                                               ; preds = %6, %10
  %13 = bitcast %struct.lookup_dir_entry_st* %0 to i8*
  tail call void @OPENSSL_free(i8* %13) #9
  ret void
}

declare void @BUF_MEM_free(%struct.buf_mem_st*) local_unnamed_addr #3

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_BY_DIR_ENTRY_call_free_func(void (i8*)* nocapture, i8*) #4 {
  %3 = bitcast void (i8*)* %0 to void (%struct.lookup_dir_entry_st*)*
  %4 = bitcast i8* %1 to %struct.lookup_dir_entry_st*
  tail call void %3(%struct.lookup_dir_entry_st* %4) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @by_dir_hash_free(%struct.lookup_dir_hashes_st*) #1 {
  %2 = bitcast %struct.lookup_dir_hashes_st* %0 to i8*
  tail call void @OPENSSL_free(i8* %2) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_BY_DIR_HASH_call_free_func(void (i8*)* nocapture, i8*) #4 {
  %3 = bitcast void (i8*)* %0 to void (%struct.lookup_dir_hashes_st*)*
  %4 = bitcast i8* %1 to %struct.lookup_dir_hashes_st*
  tail call void %3(%struct.lookup_dir_hashes_st* %4) #9
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #5

declare i8* @X509_get_default_cert_dir_env() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @add_cert_dir(%struct.lookup_dir_st* nocapture, i8*, i32) unnamed_addr #1 {
  %4 = icmp eq i8* %1, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %3
  %6 = load i8, i8* %1, align 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.lookup_dir_st, %struct.lookup_dir_st* %0, i64 0, i32 1
  %10 = bitcast %struct.stack_st_BY_DIR_ENTRY** %9 to %struct.stack_st**
  br label %14

11:                                               ; preds = %5, %3
  tail call void @ERR_put_error(i32 11, i32 0, i32 110, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 200) #9
  br label %103

12:                                               ; preds = %98
  %13 = load i8, i8* %100, align 1
  br label %14

14:                                               ; preds = %8, %12
  %15 = phi i8 [ %13, %12 ], [ %6, %8 ]
  %16 = phi i8* [ %99, %12 ], [ %1, %8 ]
  %17 = phi i8* [ %100, %12 ], [ %1, %8 ]
  switch i8 %15, label %98 [
    i8 58, label %18
    i8 0, label %18
  ]

18:                                               ; preds = %14, %14
  %19 = getelementptr inbounds i8, i8* %17, i64 1
  %20 = ptrtoint i8* %17 to i64
  %21 = ptrtoint i8* %16 to i64
  %22 = sub i64 %20, %21
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %98, label %24

24:                                               ; preds = %18
  %25 = load %struct.stack_st*, %struct.stack_st** %10, align 8
  %26 = tail call i64 @sk_num(%struct.stack_st* %25) #9
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %44, label %28

28:                                               ; preds = %24, %39
  %29 = phi i64 [ %40, %39 ], [ 0, %24 ]
  %30 = load %struct.stack_st*, %struct.stack_st** %10, align 8
  %31 = tail call i8* @sk_value(%struct.stack_st* %30, i64 %29) #9
  %32 = bitcast i8* %31 to i8**
  %33 = load i8*, i8** %32, align 8
  %34 = tail call i64 @strlen(i8* %33) #10
  %35 = icmp eq i64 %34, %22
  br i1 %35, label %36, label %39

36:                                               ; preds = %28
  %37 = tail call i32 @strncmp(i8* %33, i8* %16, i64 %22) #10
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %44, label %39

39:                                               ; preds = %28, %36
  %40 = add nuw i64 %29, 1
  %41 = load %struct.stack_st*, %struct.stack_st** %10, align 8
  %42 = tail call i64 @sk_num(%struct.stack_st* %41) #9
  %43 = icmp ult i64 %40, %42
  br i1 %43, label %28, label %44

44:                                               ; preds = %39, %36, %24
  %45 = phi i64 [ 0, %24 ], [ %29, %36 ], [ %40, %39 ]
  %46 = load %struct.stack_st*, %struct.stack_st** %10, align 8
  %47 = tail call i64 @sk_num(%struct.stack_st* %46) #9
  %48 = icmp ult i64 %45, %47
  br i1 %48, label %98, label %49

49:                                               ; preds = %44
  %50 = load %struct.stack_st_BY_DIR_ENTRY*, %struct.stack_st_BY_DIR_ENTRY** %9, align 8
  %51 = icmp eq %struct.stack_st_BY_DIR_ENTRY* %50, null
  br i1 %51, label %52, label %56

52:                                               ; preds = %49
  %53 = tail call %struct.stack_st* @sk_new_null() #9
  store %struct.stack_st* %53, %struct.stack_st** %10, align 8
  %54 = icmp eq %struct.stack_st* %53, null
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  tail call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 225) #9
  br label %103

56:                                               ; preds = %52, %49
  %57 = tail call i8* @OPENSSL_malloc(i64 24) #9
  %58 = icmp eq i8* %57, null
  br i1 %58, label %103, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds i8, i8* %57, i64 8
  %61 = bitcast i8* %60 to i32*
  store i32 %2, i32* %61, align 8
  %62 = tail call %struct.stack_st* @sk_new(i32 (i8**, i8**)* bitcast (i32 (%struct.lookup_dir_hashes_st**, %struct.lookup_dir_hashes_st**)* @by_dir_hash_cmp to i32 (i8**, i8**)*)) #9
  %63 = getelementptr inbounds i8, i8* %57, i64 16
  %64 = bitcast i8* %63 to %struct.stack_st**
  store %struct.stack_st* %62, %struct.stack_st** %64, align 8
  %65 = add i64 %22, 1
  %66 = tail call i8* @OPENSSL_malloc(i64 %65) #9
  %67 = bitcast i8* %57 to i8**
  store i8* %66, i8** %67, align 8
  %68 = icmp eq i8* %66, null
  br i1 %68, label %74, label %69

69:                                               ; preds = %59
  %70 = bitcast i8* %63 to %struct.stack_st_BY_DIR_HASH**
  %71 = load %struct.stack_st_BY_DIR_HASH*, %struct.stack_st_BY_DIR_HASH** %70, align 8
  %72 = icmp eq %struct.stack_st_BY_DIR_HASH* %71, null
  br i1 %72, label %73, label %81

73:                                               ; preds = %69
  tail call void @OPENSSL_free(i8* nonnull %66) #9
  br label %74

74:                                               ; preds = %59, %73
  %75 = bitcast i8* %63 to %struct.stack_st_BY_DIR_HASH**
  %76 = load %struct.stack_st_BY_DIR_HASH*, %struct.stack_st_BY_DIR_HASH** %75, align 8
  %77 = icmp eq %struct.stack_st_BY_DIR_HASH* %76, null
  br i1 %77, label %80, label %78

78:                                               ; preds = %74
  %79 = bitcast %struct.stack_st_BY_DIR_HASH* %76 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %79, void (void (i8*)*, i8*)* nonnull @sk_BY_DIR_HASH_call_free_func, void (i8*)* bitcast (void (%struct.lookup_dir_hashes_st*)* @by_dir_hash_free to void (i8*)*)) #9
  br label %80

80:                                               ; preds = %74, %78
  tail call void @OPENSSL_free(i8* nonnull %57) #9
  br label %103

81:                                               ; preds = %69
  %82 = tail call i64 @OPENSSL_strlcpy(i8* nonnull %66, i8* %16, i64 %65) #9
  %83 = load %struct.stack_st*, %struct.stack_st** %10, align 8
  %84 = tail call i64 @sk_push(%struct.stack_st* %83, i8* nonnull %57) #9
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %98

86:                                               ; preds = %81
  %87 = bitcast i8* %57 to i8**
  %88 = bitcast i8* %63 to %struct.stack_st_BY_DIR_HASH**
  %89 = load i8*, i8** %87, align 8
  %90 = icmp eq i8* %89, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %86
  tail call void @OPENSSL_free(i8* nonnull %89) #9
  br label %92

92:                                               ; preds = %91, %86
  %93 = load %struct.stack_st_BY_DIR_HASH*, %struct.stack_st_BY_DIR_HASH** %88, align 8
  %94 = icmp eq %struct.stack_st_BY_DIR_HASH* %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %92
  %96 = bitcast %struct.stack_st_BY_DIR_HASH* %93 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %96, void (void (i8*)*, i8*)* nonnull @sk_BY_DIR_HASH_call_free_func, void (i8*)* bitcast (void (%struct.lookup_dir_hashes_st*)* @by_dir_hash_free to void (i8*)*)) #9
  br label %97

97:                                               ; preds = %92, %95
  tail call void @OPENSSL_free(i8* nonnull %57) #9
  br label %103

98:                                               ; preds = %18, %44, %81, %14
  %99 = phi i8* [ %16, %14 ], [ %19, %81 ], [ %19, %44 ], [ %19, %18 ]
  %100 = getelementptr inbounds i8, i8* %17, i64 1
  %101 = load i8, i8* %17, align 1
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %103, label %12

103:                                              ; preds = %56, %98, %55, %80, %97, %11
  %104 = phi i32 [ 0, %11 ], [ 0, %97 ], [ 0, %80 ], [ 0, %55 ], [ 0, %56 ], [ 1, %98 ]
  ret i32 %104
}

declare i8* @X509_get_default_cert_dir() local_unnamed_addr #3

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @by_dir_hash_cmp(%struct.lookup_dir_hashes_st** nocapture readonly, %struct.lookup_dir_hashes_st** nocapture readonly) #7 {
  %3 = load %struct.lookup_dir_hashes_st*, %struct.lookup_dir_hashes_st** %0, align 8
  %4 = getelementptr inbounds %struct.lookup_dir_hashes_st, %struct.lookup_dir_hashes_st* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = load %struct.lookup_dir_hashes_st*, %struct.lookup_dir_hashes_st** %1, align 8
  %7 = getelementptr inbounds %struct.lookup_dir_hashes_st, %struct.lookup_dir_hashes_st* %6, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp ugt i64 %5, %8
  %10 = icmp ult i64 %5, %8
  %11 = sext i1 %10 to i32
  %12 = select i1 %9, i32 1, i32 %11
  ret i32 %12
}

declare i64 @OPENSSL_strlcpy(i8*, i8*, i64) local_unnamed_addr #3

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #3

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #3

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #3

declare %struct.stack_st* @sk_new(i32 (i8**, i8**)*) local_unnamed_addr #3

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare i64 @X509_NAME_hash(%struct.X509_name_st*) local_unnamed_addr #3

declare i64 @X509_NAME_hash_old(%struct.X509_name_st*) local_unnamed_addr #3

declare i64 @BUF_MEM_grow(%struct.buf_mem_st*, i64) local_unnamed_addr #3

declare void @CRYPTO_STATIC_MUTEX_lock_read(%struct.CRYPTO_STATIC_MUTEX*) local_unnamed_addr #3

declare void @CRYPTO_STATIC_MUTEX_unlock_read(%struct.CRYPTO_STATIC_MUTEX*) local_unnamed_addr #3

declare i32 @BIO_snprintf(i8*, i64, i8*, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @X509_load_cert_file(%struct.x509_lookup_st*, i8*, i32) local_unnamed_addr #3

declare i32 @X509_load_crl_file(%struct.x509_lookup_st*, i8*, i32) local_unnamed_addr #3

declare void @CRYPTO_MUTEX_lock_write(%union.crypto_mutex_st*) local_unnamed_addr #3

declare void @CRYPTO_MUTEX_unlock_write(%union.crypto_mutex_st*) local_unnamed_addr #3

declare void @CRYPTO_STATIC_MUTEX_lock_write(%struct.CRYPTO_STATIC_MUTEX*) local_unnamed_addr #3

declare void @CRYPTO_STATIC_MUTEX_unlock_write(%struct.CRYPTO_STATIC_MUTEX*) local_unnamed_addr #3

declare i32 @sk_find(%struct.stack_st*, i64*, i8*, i32 (i32 (i8**, i8**)*, i8**, i8**)*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @sk_BY_DIR_HASH_call_cmp_func(i32 (i8**, i8**)* nocapture, i8** nocapture readonly, i8** nocapture readonly) #4 {
  %4 = alloca %struct.lookup_dir_hashes_st*, align 8
  %5 = alloca %struct.lookup_dir_hashes_st*, align 8
  %6 = bitcast %struct.lookup_dir_hashes_st** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = bitcast i8** %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %struct.lookup_dir_hashes_st** %4 to i64*
  store i64 %8, i64* %9, align 8
  %10 = bitcast %struct.lookup_dir_hashes_st** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #9
  %11 = bitcast i8** %2 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.lookup_dir_hashes_st** %5 to i64*
  store i64 %12, i64* %13, align 8
  %14 = bitcast i32 (i8**, i8**)* %0 to i32 (%struct.lookup_dir_hashes_st**, %struct.lookup_dir_hashes_st**)*
  %15 = call i32 %14(%struct.lookup_dir_hashes_st** nonnull %4, %struct.lookup_dir_hashes_st** nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  ret i32 %15
}

; Function Attrs: nounwind
declare i32 @__xstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #8

declare void @sk_sort(%struct.stack_st*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @sk_X509_OBJECT_call_cmp_func(i32 (i8**, i8**)* nocapture, i8** nocapture readonly, i8** nocapture readonly) #4 {
  %4 = alloca %struct.x509_object_st*, align 8
  %5 = alloca %struct.x509_object_st*, align 8
  %6 = bitcast %struct.x509_object_st** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = bitcast i8** %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %struct.x509_object_st** %4 to i64*
  store i64 %8, i64* %9, align 8
  %10 = bitcast %struct.x509_object_st** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #9
  %11 = bitcast i8** %2 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.x509_object_st** %5 to i64*
  store i64 %12, i64* %13, align 8
  %14 = bitcast i32 (i8**, i8**)* %0 to i32 (%struct.x509_object_st**, %struct.x509_object_st**)*
  %15 = call i32 %14(%struct.x509_object_st** nonnull %4, %struct.x509_object_st** nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  ret i32 %15
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
