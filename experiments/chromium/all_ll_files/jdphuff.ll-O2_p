; ModuleID = '../../third_party/libjpeg_turbo/jdphuff.c'
source_filename = "../../third_party/libjpeg_turbo/jdphuff.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, {}* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { {}*, {}*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, {}*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, {}*, {}*, {}*, i32, i32 }
%struct.jpeg_marker_reader = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { {}*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { {}*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, {}*, {}* }
%struct.phuff_entropy_decoder = type { %struct.jpeg_entropy_decoder, %struct.bitread_perm_state, %struct.savable_state, i32, [4 x %struct.d_derived_tbl*], %struct.d_derived_tbl* }
%struct.bitread_perm_state = type { i64, i32 }
%struct.savable_state = type { i32, [4 x i32] }
%struct.d_derived_tbl = type { [18 x i64], [18 x i64], %struct.JHUFF_TBL*, [256 x i32] }
%struct.bitread_working_state = type { i8*, i64, i64, i32, %struct.jpeg_decompress_struct* }

@jpeg_natural_order = external local_unnamed_addr constant [0 x i32], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_phuff_decoder(%struct.jpeg_decompress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %3, i64 0, i32 0
  %5 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %4, align 8
  %6 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %7 = tail call i8* %5(%struct.jpeg_common_struct* %6, i32 1, i64 104) #3
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 83
  %9 = bitcast %struct.jpeg_entropy_decoder** %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = bitcast i8* %7 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @start_pass_phuff_decoder, void (%struct.jpeg_decompress_struct*)** %10, align 8
  %11 = getelementptr inbounds i8, i8* %7, i64 64
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 32, i1 false)
  %12 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %13 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %12, i64 0, i32 0
  %14 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %13, align 8
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %16 = load i32, i32* %15, align 8
  %17 = shl nsw i32 %16, 7
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 2
  %20 = tail call i8* %14(%struct.jpeg_common_struct* %6, i32 1, i64 %19) #3
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 39
  %22 = bitcast [64 x i32]** %21 to i8**
  store i8* %20, i8** %22, align 8
  %23 = load i32, i32* %15, align 8
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %35

25:                                               ; preds = %1
  %26 = bitcast i8* %20 to i32*
  br label %27

27:                                               ; preds = %25, %27
  %28 = phi i32 [ %32, %27 ], [ 0, %25 ]
  %29 = phi i32* [ %31, %27 ], [ %26, %25 ]
  %30 = bitcast i32* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %30, i8 -1, i64 256, i1 false)
  %31 = getelementptr inbounds i32, i32* %29, i64 64
  %32 = add nuw nsw i32 %28, 1
  %33 = load i32, i32* %15, align 8
  %34 = icmp slt i32 %32, %33
  br i1 %34, label %27, label %35

35:                                               ; preds = %27, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal void @start_pass_phuff_decoder(%struct.jpeg_decompress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 83
  %3 = bitcast %struct.jpeg_entropy_decoder** %2 to %struct.phuff_entropy_decoder**
  %4 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 72
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 73
  %9 = load i32, i32* %8, align 8
  br i1 %7, label %10, label %12

10:                                               ; preds = %1
  %11 = icmp ne i32 %9, 0
  br label %20

12:                                               ; preds = %1
  %13 = icmp sgt i32 %6, %9
  %14 = icmp sgt i32 %9, 63
  %15 = or i1 %13, %14
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %17 = load i32, i32* %16, align 8
  %18 = icmp ne i32 %17, 1
  %19 = or i1 %15, %18
  br label %20

20:                                               ; preds = %12, %10
  %21 = phi i1 [ %11, %10 ], [ %19, %12 ]
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 74
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 75
  %26 = load i32, i32* %25, align 8
  br i1 %24, label %31, label %27

27:                                               ; preds = %20
  %28 = add nsw i32 %23, -1
  %29 = icmp ne i32 %26, %28
  %30 = or i1 %21, %29
  br label %31

31:                                               ; preds = %20, %27
  %32 = phi i1 [ %30, %27 ], [ %21, %20 ]
  %33 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 75
  %34 = icmp slt i32 %26, 14
  %35 = xor i1 %32, true
  %36 = and i1 %34, %35
  br i1 %36, label %57, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %39 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %38, align 8
  %40 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %39, i64 0, i32 5
  store i32 16, i32* %40, align 8
  %41 = load i32, i32* %5, align 4
  %42 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %38, align 8
  %43 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %42, i64 0, i32 6, i32 0, i64 0
  store i32 %41, i32* %43, align 4
  %44 = load i32, i32* %8, align 8
  %45 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %38, align 8
  %46 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %45, i64 0, i32 6, i32 0, i64 1
  store i32 %44, i32* %46, align 4
  %47 = load i32, i32* %22, align 4
  %48 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %38, align 8
  %49 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %48, i64 0, i32 6, i32 0, i64 2
  store i32 %47, i32* %49, align 4
  %50 = load i32, i32* %33, align 8
  %51 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %38, align 8
  %52 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %51, i64 0, i32 6, i32 0, i64 3
  store i32 %50, i32* %52, align 4
  %53 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %38, align 8
  %54 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %53, i64 0, i32 0
  %55 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %54, align 8
  %56 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %55(%struct.jpeg_common_struct* %56) #3
  br label %57

57:                                               ; preds = %31, %37
  %58 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %59 = load i32, i32* %58, align 8
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %61, label %156

61:                                               ; preds = %57
  %62 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 39
  %63 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %64 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %65 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %66 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 35
  br label %67

67:                                               ; preds = %61, %151
  %68 = phi i64 [ 0, %61 ], [ %152, %151 ]
  %69 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 %68
  %70 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %69, align 8
  %71 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = load [64 x i32]*, [64 x i32]** %62, align 8
  %74 = sext i32 %72 to i64
  %75 = load i32, i32* %63, align 8
  %76 = add nsw i32 %75, %72
  %77 = sext i32 %76 to i64
  br i1 %7, label %92, label %78

78:                                               ; preds = %67
  %79 = getelementptr inbounds [64 x i32], [64 x i32]* %73, i64 %74, i64 0
  %80 = load i32, i32* %79, align 4
  %81 = icmp slt i32 %80, 0
  br i1 %81, label %82, label %92

82:                                               ; preds = %78
  %83 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %64, align 8
  %84 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %83, i64 0, i32 5
  store i32 115, i32* %84, align 8
  %85 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %64, align 8
  %86 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %85, i64 0, i32 6, i32 0, i64 0
  store i32 %72, i32* %86, align 4
  %87 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %64, align 8
  %88 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %87, i64 0, i32 6, i32 0, i64 1
  store i32 0, i32* %88, align 4
  %89 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %64, align 8
  %90 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %89, i64 0, i32 1
  %91 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %90, align 8
  tail call void %91(%struct.jpeg_common_struct* %65, i32 -1) #3
  br label %92

92:                                               ; preds = %82, %78, %67
  %93 = load i32, i32* %5, align 4
  %94 = icmp slt i32 %93, 1
  %95 = select i1 %94, i32 %93, i32 1
  %96 = load i32, i32* %8, align 8
  %97 = icmp sgt i32 %96, 9
  %98 = select i1 %97, i32 %96, i32 9
  %99 = icmp sgt i32 %95, %98
  br i1 %99, label %120, label %100

100:                                              ; preds = %92
  %101 = sext i32 %95 to i64
  br label %102

102:                                              ; preds = %100, %109
  %103 = phi i64 [ %101, %100 ], [ %112, %109 ]
  %104 = load i32, i32* %66, align 4
  %105 = icmp sgt i32 %104, 1
  br i1 %105, label %106, label %109

106:                                              ; preds = %102
  %107 = getelementptr inbounds [64 x i32], [64 x i32]* %73, i64 %74, i64 %103
  %108 = load i32, i32* %107, align 4
  br label %109

109:                                              ; preds = %102, %106
  %110 = phi i32 [ %108, %106 ], [ 0, %102 ]
  %111 = getelementptr inbounds [64 x i32], [64 x i32]* %73, i64 %77, i64 %103
  store i32 %110, i32* %111, align 4
  %112 = add nsw i64 %103, 1
  %113 = load i32, i32* %8, align 8
  %114 = icmp sgt i32 %113, 9
  %115 = select i1 %114, i32 %113, i32 9
  %116 = zext i32 %115 to i64
  %117 = icmp slt i64 %103, %116
  br i1 %117, label %102, label %118

118:                                              ; preds = %109
  %119 = load i32, i32* %5, align 4
  br label %120

120:                                              ; preds = %118, %92
  %121 = phi i32 [ %113, %118 ], [ %96, %92 ]
  %122 = phi i32 [ %119, %118 ], [ %93, %92 ]
  %123 = icmp sgt i32 %122, %121
  br i1 %123, label %151, label %124

124:                                              ; preds = %120
  %125 = sext i32 %122 to i64
  br label %126

126:                                              ; preds = %124, %145
  %127 = phi i64 [ %125, %124 ], [ %147, %145 ]
  %128 = getelementptr inbounds [64 x i32], [64 x i32]* %73, i64 %74, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  %132 = load i32, i32* %22, align 4
  %133 = icmp eq i32 %132, %131
  br i1 %133, label %145, label %134

134:                                              ; preds = %126
  %135 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %64, align 8
  %136 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %135, i64 0, i32 5
  store i32 115, i32* %136, align 8
  %137 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %64, align 8
  %138 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %137, i64 0, i32 6, i32 0, i64 0
  store i32 %72, i32* %138, align 4
  %139 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %64, align 8
  %140 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %139, i64 0, i32 6, i32 0, i64 1
  %141 = trunc i64 %127 to i32
  store i32 %141, i32* %140, align 4
  %142 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %64, align 8
  %143 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %142, i64 0, i32 1
  %144 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %143, align 8
  tail call void %144(%struct.jpeg_common_struct* %65, i32 -1) #3
  br label %145

145:                                              ; preds = %126, %134
  %146 = load i32, i32* %33, align 8
  store i32 %146, i32* %128, align 4
  %147 = add nsw i64 %127, 1
  %148 = load i32, i32* %8, align 8
  %149 = sext i32 %148 to i64
  %150 = icmp slt i64 %127, %149
  br i1 %150, label %126, label %151

151:                                              ; preds = %145, %120
  %152 = add nuw nsw i64 %68, 1
  %153 = load i32, i32* %58, align 8
  %154 = sext i32 %153 to i64
  %155 = icmp slt i64 %152, %154
  br i1 %155, label %67, label %156

156:                                              ; preds = %151, %57
  %157 = load i32, i32* %22, align 4
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %4, i64 0, i32 0, i32 1
  %160 = select i1 %7, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* @decode_mcu_DC_first, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* @decode_mcu_AC_first
  %161 = select i1 %7, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* @decode_mcu_DC_refine, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* @decode_mcu_AC_refine
  %162 = select i1 %158, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* %160, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* %161
  store i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* %162, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)** %159, align 8
  %163 = load i32, i32* %58, align 8
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %165, label %193

165:                                              ; preds = %156
  %166 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %4, i64 0, i32 5
  %167 = bitcast %struct.d_derived_tbl** %166 to i64*
  br label %168

168:                                              ; preds = %165, %187
  %169 = phi i64 [ 0, %165 ], [ %189, %187 ]
  %170 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 %169
  %171 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %170, align 8
  br i1 %7, label %172, label %180

172:                                              ; preds = %168
  %173 = load i32, i32* %22, align 4
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %187

175:                                              ; preds = %172
  %176 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %171, i64 0, i32 5
  %177 = load i32, i32* %176, align 4
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %4, i64 0, i32 4, i64 %178
  tail call void @jpeg_make_d_derived_tbl(%struct.jpeg_decompress_struct* %0, i32 1, i32 %177, %struct.d_derived_tbl** %179) #3
  br label %187

180:                                              ; preds = %168
  %181 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %171, i64 0, i32 6
  %182 = load i32, i32* %181, align 8
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %4, i64 0, i32 4, i64 %183
  tail call void @jpeg_make_d_derived_tbl(%struct.jpeg_decompress_struct* %0, i32 0, i32 %182, %struct.d_derived_tbl** %184) #3
  %185 = bitcast %struct.d_derived_tbl** %184 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %167, align 8
  br label %187

187:                                              ; preds = %172, %175, %180
  %188 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %4, i64 0, i32 2, i32 1, i64 %169
  store i32 0, i32* %188, align 4
  %189 = add nuw nsw i64 %169, 1
  %190 = load i32, i32* %58, align 8
  %191 = sext i32 %190 to i64
  %192 = icmp slt i64 %189, %191
  br i1 %192, label %168, label %193

193:                                              ; preds = %187, %156
  %194 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %4, i64 0, i32 1, i32 1
  store i32 0, i32* %194, align 8
  %195 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %4, i64 0, i32 1, i32 0
  store i64 0, i64* %195, align 8
  %196 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %4, i64 0, i32 0, i32 2
  store i32 0, i32* %196, align 8
  %197 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %4, i64 0, i32 2, i32 0
  store i32 0, i32* %197, align 8
  %198 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 50
  %199 = load i32, i32* %198, align 8
  %200 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %4, i64 0, i32 3
  store i32 %199, i32* %200, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @decode_mcu_DC_first(%struct.jpeg_decompress_struct*, [64 x i16]** nocapture readonly) #0 {
  %3 = alloca %struct.bitread_working_state, align 16
  %4 = alloca %struct.savable_state, align 4
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 83
  %6 = bitcast %struct.jpeg_entropy_decoder** %5 to %struct.phuff_entropy_decoder**
  %7 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 75
  %9 = load i32, i32* %8, align 8
  %10 = bitcast %struct.bitread_working_state* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 40, i1 false)
  %11 = bitcast %struct.savable_state* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %11) #3
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 50
  %13 = bitcast %struct.savable_state* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 -86, i64 20, i1 false)
  %14 = load i32, i32* %12, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %53, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %53

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 1, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = sdiv i32 %22, 8
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 82
  %25 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader** %24, align 8
  %26 = getelementptr inbounds %struct.jpeg_marker_reader, %struct.jpeg_marker_reader* %25, i64 0, i32 6
  %27 = load i32, i32* %26, align 4
  %28 = add i32 %27, %23
  store i32 %28, i32* %26, align 4
  store i32 0, i32* %21, align 8
  %29 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader** %24, align 8
  %30 = getelementptr inbounds %struct.jpeg_marker_reader, %struct.jpeg_marker_reader* %29, i64 0, i32 2
  %31 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %30, align 8
  %32 = tail call i32 %31(%struct.jpeg_decompress_struct* %0) #3
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %208, label %34

34:                                               ; preds = %20
  %35 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %36 = load i32, i32* %35, align 8
  %37 = icmp sgt i32 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34, %38
  %39 = phi i64 [ %41, %38 ], [ 0, %34 ]
  %40 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 2, i32 1, i64 %39
  store i32 0, i32* %40, align 4
  %41 = add nuw nsw i64 %39, 1
  %42 = load i32, i32* %35, align 8
  %43 = sext i32 %42 to i64
  %44 = icmp slt i64 %41, %43
  br i1 %44, label %38, label %45

45:                                               ; preds = %38, %34
  %46 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 2, i32 0
  store i32 0, i32* %46, align 8
  %47 = load i32, i32* %12, align 8
  store i32 %47, i32* %17, align 4
  %48 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 76
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 0, i32 2
  store i32 0, i32* %52, align 8
  br label %53

53:                                               ; preds = %45, %51, %2, %16
  %54 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 0, i32 2
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %201

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 4
  store %struct.jpeg_decompress_struct* %0, %struct.jpeg_decompress_struct** %58, align 16
  %59 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 6
  %60 = bitcast %struct.jpeg_source_mgr** %59 to i64**
  %61 = load i64*, i64** %60, align 8
  %62 = bitcast %struct.bitread_working_state* %3 to i64*
  %63 = bitcast i64* %61 to <2 x i64>*
  %64 = load <2 x i64>, <2 x i64>* %63, align 8
  %65 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 1
  %66 = bitcast %struct.bitread_working_state* %3 to <2 x i64>*
  store <2 x i64> %64, <2 x i64>* %66, align 16
  %67 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 1, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 1, i32 1
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 2
  %72 = bitcast %struct.savable_state* %71 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %11, i8* align 8 %72, i64 20, i1 false)
  %73 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 70
  %74 = load i32, i32* %73, align 8
  %75 = icmp sgt i32 %74, 0
  %76 = extractelement <2 x i64> %64, i32 0
  br i1 %75, label %77, label %193

77:                                               ; preds = %57
  %78 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 2
  %79 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 3
  %80 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %81 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %82 = zext i32 %9 to i64
  br label %83

83:                                               ; preds = %77, %180
  %84 = phi i64 [ 0, %77 ], [ %186, %180 ]
  %85 = phi i32 [ %70, %77 ], [ %162, %180 ]
  %86 = phi i64 [ %68, %77 ], [ %161, %180 ]
  %87 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %84
  %88 = load [64 x i16]*, [64 x i16]** %87, align 8
  %89 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 71, i64 %84
  %90 = load i32, i32* %89, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 %91
  %93 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %92, align 8
  %94 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %93, i64 0, i32 5
  %95 = load i32, i32* %94, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 4, i64 %96
  %98 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %97, align 8
  %99 = icmp slt i32 %85, 8
  br i1 %99, label %100, label %107

100:                                              ; preds = %83
  %101 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %86, i32 %85, i32 0) #3
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %208, label %103

103:                                              ; preds = %100
  %104 = load i64, i64* %78, align 16
  %105 = load i32, i32* %79, align 8
  %106 = icmp slt i32 %105, 8
  br i1 %106, label %121, label %107

107:                                              ; preds = %103, %83
  %108 = phi i64 [ %104, %103 ], [ %86, %83 ]
  %109 = phi i32 [ %105, %103 ], [ %85, %83 ]
  %110 = add nsw i32 %109, -8
  %111 = zext i32 %110 to i64
  %112 = lshr i64 %108, %111
  %113 = and i64 %112, 255
  %114 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %98, i64 0, i32 3, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = ashr i32 %115, 8
  %117 = icmp slt i32 %115, 2304
  br i1 %117, label %118, label %121

118:                                              ; preds = %107
  %119 = sub nsw i32 %109, %116
  %120 = and i32 %115, 255
  br label %130

121:                                              ; preds = %103, %107
  %122 = phi i64 [ %108, %107 ], [ %104, %103 ]
  %123 = phi i32 [ %109, %107 ], [ %105, %103 ]
  %124 = phi i32 [ %116, %107 ], [ 1, %103 ]
  %125 = call i32 @jpeg_huff_decode(%struct.bitread_working_state* nonnull %3, i64 %122, i32 %123, %struct.d_derived_tbl* %98, i32 %124) #3
  %126 = icmp slt i32 %125, 0
  br i1 %126, label %208, label %127

127:                                              ; preds = %121
  %128 = load i64, i64* %78, align 16
  %129 = load i32, i32* %79, align 8
  br label %130

130:                                              ; preds = %127, %118
  %131 = phi i32 [ %120, %118 ], [ %125, %127 ]
  %132 = phi i64 [ %108, %118 ], [ %128, %127 ]
  %133 = phi i32 [ %119, %118 ], [ %129, %127 ]
  %134 = icmp eq i32 %131, 0
  br i1 %134, label %159, label %135

135:                                              ; preds = %130
  %136 = icmp slt i32 %133, %131
  br i1 %136, label %137, label %143

137:                                              ; preds = %135
  %138 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %132, i32 %133, i32 %131) #3
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %208, label %140

140:                                              ; preds = %137
  %141 = load i64, i64* %78, align 16
  %142 = load i32, i32* %79, align 8
  br label %143

143:                                              ; preds = %140, %135
  %144 = phi i64 [ %141, %140 ], [ %132, %135 ]
  %145 = phi i32 [ %142, %140 ], [ %133, %135 ]
  %146 = sub nsw i32 %145, %131
  %147 = zext i32 %146 to i64
  %148 = lshr i64 %144, %147
  %149 = trunc i64 %148 to i32
  %150 = shl i32 -1, %131
  %151 = xor i32 %150, -1
  %152 = and i32 %149, %151
  %153 = add nsw i32 %131, -1
  %154 = shl i32 1, %153
  %155 = icmp slt i32 %152, %154
  br i1 %155, label %156, label %159

156:                                              ; preds = %143
  %157 = add i32 %150, 1
  %158 = add i32 %157, %152
  br label %159

159:                                              ; preds = %156, %143, %130
  %160 = phi i32 [ 0, %130 ], [ %158, %156 ], [ %152, %143 ]
  %161 = phi i64 [ %132, %130 ], [ %144, %156 ], [ %144, %143 ]
  %162 = phi i32 [ %133, %130 ], [ %146, %156 ], [ %146, %143 ]
  %163 = getelementptr inbounds %struct.savable_state, %struct.savable_state* %4, i64 0, i32 1, i64 %91
  %164 = load i32, i32* %163, align 4
  %165 = icmp sgt i32 %164, -1
  %166 = sub nsw i32 2147483647, %164
  %167 = icmp sgt i32 %160, %166
  %168 = and i1 %165, %167
  br i1 %168, label %174, label %169

169:                                              ; preds = %159
  %170 = icmp slt i32 %164, 0
  %171 = sub nsw i32 -2147483648, %164
  %172 = icmp slt i32 %160, %171
  %173 = and i1 %170, %172
  br i1 %173, label %174, label %180

174:                                              ; preds = %169, %159
  %175 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %80, align 8
  %176 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %175, i64 0, i32 5
  store i32 6, i32* %176, align 8
  %177 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %80, align 8
  %178 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %177, i64 0, i32 0
  %179 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %178, align 8
  call void %179(%struct.jpeg_common_struct* %81) #3
  br label %180

180:                                              ; preds = %174, %169
  %181 = add nsw i32 %164, %160
  store i32 %181, i32* %163, align 4
  %182 = sext i32 %181 to i64
  %183 = shl i64 %182, %82
  %184 = trunc i64 %183 to i16
  %185 = getelementptr inbounds [64 x i16], [64 x i16]* %88, i64 0, i64 0
  store i16 %184, i16* %185, align 2
  %186 = add nuw nsw i64 %84, 1
  %187 = load i32, i32* %73, align 8
  %188 = sext i32 %187 to i64
  %189 = icmp slt i64 %186, %188
  br i1 %189, label %83, label %190

190:                                              ; preds = %180
  %191 = load i64, i64* %62, align 16
  %192 = load i64*, i64** %60, align 8
  br label %193

193:                                              ; preds = %190, %57
  %194 = phi i64* [ %61, %57 ], [ %192, %190 ]
  %195 = phi i64 [ %76, %57 ], [ %191, %190 ]
  %196 = phi i64 [ %68, %57 ], [ %161, %190 ]
  %197 = phi i32 [ %70, %57 ], [ %162, %190 ]
  store i64 %195, i64* %194, align 8
  %198 = load i64, i64* %65, align 8
  %199 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %59, align 8
  %200 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %199, i64 0, i32 1
  store i64 %198, i64* %200, align 8
  store i64 %196, i64* %67, align 8
  store i32 %197, i32* %69, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* nonnull align 4 %11, i64 20, i1 false)
  br label %201

201:                                              ; preds = %53, %193
  %202 = load i32, i32* %12, align 8
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %208, label %204

204:                                              ; preds = %201
  %205 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 3
  %206 = load i32, i32* %205, align 4
  %207 = add i32 %206, -1
  store i32 %207, i32* %205, align 4
  br label %208

208:                                              ; preds = %100, %121, %137, %20, %204, %201
  %209 = phi i32 [ 1, %201 ], [ 1, %204 ], [ 0, %20 ], [ 0, %137 ], [ 0, %121 ], [ 0, %100 ]
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %11) #3
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #3
  ret i32 %209
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @decode_mcu_AC_first(%struct.jpeg_decompress_struct*, [64 x i16]** nocapture readonly) #0 {
  %3 = alloca %struct.bitread_working_state, align 16
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 83
  %5 = bitcast %struct.jpeg_entropy_decoder** %4 to %struct.phuff_entropy_decoder**
  %6 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %5, align 8
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 73
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 75
  %10 = load i32, i32* %9, align 8
  %11 = bitcast %struct.bitread_working_state* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %11) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 40, i1 false)
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 50
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %52, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %52

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = sdiv i32 %21, 8
  %23 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 82
  %24 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader** %23, align 8
  %25 = getelementptr inbounds %struct.jpeg_marker_reader, %struct.jpeg_marker_reader* %24, i64 0, i32 6
  %26 = load i32, i32* %25, align 4
  %27 = add i32 %26, %22
  store i32 %27, i32* %25, align 4
  store i32 0, i32* %20, align 8
  %28 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader** %23, align 8
  %29 = getelementptr inbounds %struct.jpeg_marker_reader, %struct.jpeg_marker_reader* %28, i64 0, i32 2
  %30 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %29, align 8
  %31 = tail call i32 %30(%struct.jpeg_decompress_struct* %0) #3
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %207, label %33

33:                                               ; preds = %19
  %34 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %35 = load i32, i32* %34, align 8
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %44

37:                                               ; preds = %33, %37
  %38 = phi i64 [ %40, %37 ], [ 0, %33 ]
  %39 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 2, i32 1, i64 %38
  store i32 0, i32* %39, align 4
  %40 = add nuw nsw i64 %38, 1
  %41 = load i32, i32* %34, align 8
  %42 = sext i32 %41 to i64
  %43 = icmp slt i64 %40, %42
  br i1 %43, label %37, label %44

44:                                               ; preds = %37, %33
  %45 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 2, i32 0
  store i32 0, i32* %45, align 8
  %46 = load i32, i32* %12, align 8
  store i32 %46, i32* %16, align 4
  %47 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 76
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %44
  %51 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 0, i32 2
  store i32 0, i32* %51, align 8
  br label %52

52:                                               ; preds = %44, %50, %2, %15
  %53 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 0, i32 2
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %200

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 2, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %62, label %60

60:                                               ; preds = %56
  %61 = add i32 %58, -1
  br label %198

62:                                               ; preds = %56
  %63 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 4
  store %struct.jpeg_decompress_struct* %0, %struct.jpeg_decompress_struct** %63, align 16
  %64 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 6
  %65 = bitcast %struct.jpeg_source_mgr** %64 to i64**
  %66 = bitcast %struct.jpeg_source_mgr** %64 to <2 x i64>**
  %67 = load <2 x i64>*, <2 x i64>** %66, align 8
  %68 = bitcast %struct.bitread_working_state* %3 to i64*
  %69 = load <2 x i64>, <2 x i64>* %67, align 8
  %70 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 1
  %71 = bitcast %struct.bitread_working_state* %3 to <2 x i64>*
  store <2 x i64> %69, <2 x i64>* %71, align 16
  %72 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 1, i32 0
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 1, i32 1
  %75 = load i32, i32* %74, align 8
  %76 = load [64 x i16]*, [64 x i16]** %1, align 8
  %77 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 5
  %78 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %77, align 8
  %79 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 72
  %80 = load i32, i32* %79, align 4
  %81 = icmp sgt i32 %80, %8
  br i1 %81, label %189, label %82

82:                                               ; preds = %62
  %83 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 2
  %84 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 3
  %85 = zext i32 %10 to i64
  br label %86

86:                                               ; preds = %183, %82
  %87 = phi i32 [ %75, %82 ], [ %186, %183 ]
  %88 = phi i64 [ %73, %82 ], [ %185, %183 ]
  %89 = phi i32 [ %80, %82 ], [ %187, %183 ]
  %90 = icmp slt i32 %87, 8
  br i1 %90, label %91, label %98

91:                                               ; preds = %86
  %92 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %88, i32 %87, i32 0) #3
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %207, label %94

94:                                               ; preds = %91
  %95 = load i64, i64* %83, align 16
  %96 = load i32, i32* %84, align 8
  %97 = icmp slt i32 %96, 8
  br i1 %97, label %112, label %98

98:                                               ; preds = %94, %86
  %99 = phi i64 [ %95, %94 ], [ %88, %86 ]
  %100 = phi i32 [ %96, %94 ], [ %87, %86 ]
  %101 = add nsw i32 %100, -8
  %102 = zext i32 %101 to i64
  %103 = lshr i64 %99, %102
  %104 = and i64 %103, 255
  %105 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %78, i64 0, i32 3, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = ashr i32 %106, 8
  %108 = icmp slt i32 %106, 2304
  br i1 %108, label %109, label %112

109:                                              ; preds = %98
  %110 = sub nsw i32 %100, %107
  %111 = and i32 %106, 255
  br label %121

112:                                              ; preds = %94, %98
  %113 = phi i64 [ %99, %98 ], [ %95, %94 ]
  %114 = phi i32 [ %100, %98 ], [ %96, %94 ]
  %115 = phi i32 [ %107, %98 ], [ 1, %94 ]
  %116 = call i32 @jpeg_huff_decode(%struct.bitread_working_state* nonnull %3, i64 %113, i32 %114, %struct.d_derived_tbl* %78, i32 %115) #3
  %117 = icmp slt i32 %116, 0
  br i1 %117, label %207, label %118

118:                                              ; preds = %112
  %119 = load i64, i64* %83, align 16
  %120 = load i32, i32* %84, align 8
  br label %121

121:                                              ; preds = %118, %109
  %122 = phi i32 [ %111, %109 ], [ %116, %118 ]
  %123 = phi i64 [ %99, %109 ], [ %119, %118 ]
  %124 = phi i32 [ %110, %109 ], [ %120, %118 ]
  %125 = lshr i32 %122, 4
  %126 = and i32 %122, 15
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %161, label %128

128:                                              ; preds = %121
  %129 = add nsw i32 %125, %89
  %130 = icmp slt i32 %124, %126
  br i1 %130, label %131, label %137

131:                                              ; preds = %128
  %132 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %123, i32 %124, i32 %126) #3
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %207, label %134

134:                                              ; preds = %131
  %135 = load i64, i64* %83, align 16
  %136 = load i32, i32* %84, align 8
  br label %137

137:                                              ; preds = %134, %128
  %138 = phi i64 [ %135, %134 ], [ %123, %128 ]
  %139 = phi i32 [ %136, %134 ], [ %124, %128 ]
  %140 = sub nsw i32 %139, %126
  %141 = zext i32 %140 to i64
  %142 = lshr i64 %138, %141
  %143 = trunc i64 %142 to i32
  %144 = shl i32 -1, %126
  %145 = xor i32 %144, -1
  %146 = and i32 %143, %145
  %147 = add nsw i32 %126, -1
  %148 = shl i32 1, %147
  %149 = icmp slt i32 %146, %148
  %150 = add nsw i32 %144, 1
  %151 = select i1 %149, i32 %150, i32 0
  %152 = add nsw i32 %151, %146
  %153 = sext i32 %152 to i64
  %154 = shl i64 %153, %85
  %155 = trunc i64 %154 to i16
  %156 = sext i32 %129 to i64
  %157 = getelementptr inbounds [0 x i32], [0 x i32]* @jpeg_natural_order, i64 0, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %76, i64 0, i64 %159
  store i16 %155, i16* %160, align 2
  br label %183

161:                                              ; preds = %121
  switch i32 %125, label %164 [
    i32 15, label %162
    i32 0, label %189
  ]

162:                                              ; preds = %161
  %163 = add nsw i32 %89, 15
  br label %183

164:                                              ; preds = %161
  %165 = icmp slt i32 %124, %125
  br i1 %165, label %166, label %172

166:                                              ; preds = %164
  %167 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %123, i32 %124, i32 %125) #3
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %207, label %169

169:                                              ; preds = %166
  %170 = load i64, i64* %83, align 16
  %171 = load i32, i32* %84, align 8
  br label %172

172:                                              ; preds = %169, %164
  %173 = phi i64 [ %170, %169 ], [ %123, %164 ]
  %174 = phi i32 [ %171, %169 ], [ %124, %164 ]
  %175 = sub nsw i32 %174, %125
  %176 = zext i32 %175 to i64
  %177 = lshr i64 %173, %176
  %178 = trunc i64 %177 to i32
  %179 = shl nsw i32 -1, %125
  %180 = xor i32 %179, -1
  %181 = and i32 %180, %178
  %182 = add i32 %181, %180
  br label %189

183:                                              ; preds = %137, %162
  %184 = phi i32 [ %129, %137 ], [ %163, %162 ]
  %185 = phi i64 [ %138, %137 ], [ %123, %162 ]
  %186 = phi i32 [ %140, %137 ], [ %124, %162 ]
  %187 = add nsw i32 %184, 1
  %188 = icmp slt i32 %184, %8
  br i1 %188, label %86, label %189

189:                                              ; preds = %183, %161, %62, %172
  %190 = phi i32 [ %182, %172 ], [ 0, %62 ], [ 0, %183 ], [ %125, %161 ]
  %191 = phi i64 [ %173, %172 ], [ %73, %62 ], [ %185, %183 ], [ %123, %161 ]
  %192 = phi i32 [ %175, %172 ], [ %75, %62 ], [ %186, %183 ], [ %124, %161 ]
  %193 = load i64, i64* %68, align 16
  %194 = load i64*, i64** %65, align 8
  store i64 %193, i64* %194, align 8
  %195 = load i64, i64* %70, align 8
  %196 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %64, align 8
  %197 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %196, i64 0, i32 1
  store i64 %195, i64* %197, align 8
  store i64 %191, i64* %72, align 8
  store i32 %192, i32* %74, align 8
  br label %198

198:                                              ; preds = %189, %60
  %199 = phi i32 [ %61, %60 ], [ %190, %189 ]
  store i32 %199, i32* %57, align 8
  br label %200

200:                                              ; preds = %52, %198
  %201 = load i32, i32* %12, align 8
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %207, label %203

203:                                              ; preds = %200
  %204 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 3
  %205 = load i32, i32* %204, align 4
  %206 = add i32 %205, -1
  store i32 %206, i32* %204, align 4
  br label %207

207:                                              ; preds = %91, %112, %131, %19, %203, %200, %166
  %208 = phi i32 [ 0, %166 ], [ 1, %200 ], [ 1, %203 ], [ 0, %19 ], [ 0, %131 ], [ 0, %112 ], [ 0, %91 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %11) #3
  ret i32 %208
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @decode_mcu_DC_refine(%struct.jpeg_decompress_struct*, [64 x i16]** nocapture readonly) #0 {
  %3 = alloca %struct.bitread_working_state, align 16
  %4 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 83
  %5 = bitcast %struct.jpeg_entropy_decoder** %4 to %struct.phuff_entropy_decoder**
  %6 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %5, align 8
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 75
  %8 = load i32, i32* %7, align 8
  %9 = shl i32 1, %8
  %10 = bitcast %struct.bitread_working_state* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 40, i1 false)
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 50
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %51, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %51

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 1, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = sdiv i32 %20, 8
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 82
  %23 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader** %22, align 8
  %24 = getelementptr inbounds %struct.jpeg_marker_reader, %struct.jpeg_marker_reader* %23, i64 0, i32 6
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %25, %21
  store i32 %26, i32* %24, align 4
  store i32 0, i32* %19, align 8
  %27 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader** %22, align 8
  %28 = getelementptr inbounds %struct.jpeg_marker_reader, %struct.jpeg_marker_reader* %27, i64 0, i32 2
  %29 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %28, align 8
  %30 = tail call i32 %29(%struct.jpeg_decompress_struct* %0) #3
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %120, label %32

32:                                               ; preds = %18
  %33 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %34 = load i32, i32* %33, align 8
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %43

36:                                               ; preds = %32, %36
  %37 = phi i64 [ %39, %36 ], [ 0, %32 ]
  %38 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 2, i32 1, i64 %37
  store i32 0, i32* %38, align 4
  %39 = add nuw nsw i64 %37, 1
  %40 = load i32, i32* %33, align 8
  %41 = sext i32 %40 to i64
  %42 = icmp slt i64 %39, %41
  br i1 %42, label %36, label %43

43:                                               ; preds = %36, %32
  %44 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 2, i32 0
  store i32 0, i32* %44, align 8
  %45 = load i32, i32* %11, align 8
  store i32 %45, i32* %15, align 4
  %46 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 76
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %43
  %50 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 0, i32 2
  store i32 0, i32* %50, align 8
  br label %51

51:                                               ; preds = %43, %49, %2, %14
  %52 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 4
  store %struct.jpeg_decompress_struct* %0, %struct.jpeg_decompress_struct** %52, align 16
  %53 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 6
  %54 = bitcast %struct.jpeg_source_mgr** %53 to i64**
  %55 = load i64*, i64** %54, align 8
  %56 = bitcast %struct.bitread_working_state* %3 to i64*
  %57 = bitcast i64* %55 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 8
  %59 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 1
  %60 = bitcast %struct.bitread_working_state* %3 to <2 x i64>*
  store <2 x i64> %58, <2 x i64>* %60, align 16
  %61 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 1, i32 0
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 1, i32 1
  %64 = load i32, i32* %63, align 8
  %65 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 70
  %66 = load i32, i32* %65, align 8
  %67 = icmp sgt i32 %66, 0
  %68 = extractelement <2 x i64> %58, i32 0
  br i1 %67, label %69, label %106

69:                                               ; preds = %51
  %70 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 2
  %71 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 3
  %72 = trunc i32 %9 to i16
  br label %73

73:                                               ; preds = %69, %98
  %74 = phi i64 [ 0, %69 ], [ %99, %98 ]
  %75 = phi i32 [ %64, %69 ], [ %89, %98 ]
  %76 = phi i64 [ %62, %69 ], [ %87, %98 ]
  %77 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %74
  %78 = load [64 x i16]*, [64 x i16]** %77, align 8
  %79 = icmp slt i32 %75, 1
  br i1 %79, label %80, label %86

80:                                               ; preds = %73
  %81 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %76, i32 %75, i32 1) #3
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %120, label %83

83:                                               ; preds = %80
  %84 = load i64, i64* %70, align 16
  %85 = load i32, i32* %71, align 8
  br label %86

86:                                               ; preds = %83, %73
  %87 = phi i64 [ %84, %83 ], [ %76, %73 ]
  %88 = phi i32 [ %85, %83 ], [ %75, %73 ]
  %89 = add nsw i32 %88, -1
  %90 = zext i32 %89 to i64
  %91 = shl i64 1, %90
  %92 = and i64 %91, %87
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %98, label %94

94:                                               ; preds = %86
  %95 = getelementptr inbounds [64 x i16], [64 x i16]* %78, i64 0, i64 0
  %96 = load i16, i16* %95, align 2
  %97 = or i16 %96, %72
  store i16 %97, i16* %95, align 2
  br label %98

98:                                               ; preds = %86, %94
  %99 = add nuw nsw i64 %74, 1
  %100 = load i32, i32* %65, align 8
  %101 = sext i32 %100 to i64
  %102 = icmp slt i64 %99, %101
  br i1 %102, label %73, label %103

103:                                              ; preds = %98
  %104 = load i64, i64* %56, align 16
  %105 = load i64*, i64** %54, align 8
  br label %106

106:                                              ; preds = %103, %51
  %107 = phi i64* [ %55, %51 ], [ %105, %103 ]
  %108 = phi i64 [ %68, %51 ], [ %104, %103 ]
  %109 = phi i64 [ %62, %51 ], [ %87, %103 ]
  %110 = phi i32 [ %64, %51 ], [ %89, %103 ]
  store i64 %108, i64* %107, align 8
  %111 = load i64, i64* %59, align 8
  %112 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %53, align 8
  %113 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %112, i64 0, i32 1
  store i64 %111, i64* %113, align 8
  store i64 %109, i64* %61, align 8
  store i32 %110, i32* %63, align 8
  %114 = load i32, i32* %11, align 8
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %120, label %116

116:                                              ; preds = %106
  %117 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %6, i64 0, i32 3
  %118 = load i32, i32* %117, align 4
  %119 = add i32 %118, -1
  store i32 %119, i32* %117, align 4
  br label %120

120:                                              ; preds = %80, %18, %116, %106
  %121 = phi i32 [ 1, %106 ], [ 1, %116 ], [ 0, %18 ], [ 0, %80 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #3
  ret i32 %121
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @decode_mcu_AC_refine(%struct.jpeg_decompress_struct*, [64 x i16]** nocapture readonly) #0 {
  %3 = alloca %struct.bitread_working_state, align 16
  %4 = alloca [64 x i32], align 16
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 83
  %6 = bitcast %struct.jpeg_entropy_decoder** %5 to %struct.phuff_entropy_decoder**
  %7 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder** %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 73
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 75
  %11 = load i32, i32* %10, align 8
  %12 = shl i32 1, %11
  %13 = shl i32 -1, %11
  %14 = bitcast %struct.bitread_working_state* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %14) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 40, i1 false)
  %15 = bitcast [64 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %15) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 256, i1 false)
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 50
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %56, label %19

19:                                               ; preds = %2
  %20 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %56

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 1, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = sdiv i32 %25, 8
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 82
  %28 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader** %27, align 8
  %29 = getelementptr inbounds %struct.jpeg_marker_reader, %struct.jpeg_marker_reader* %28, i64 0, i32 6
  %30 = load i32, i32* %29, align 4
  %31 = add i32 %30, %26
  store i32 %31, i32* %29, align 4
  store i32 0, i32* %24, align 8
  %32 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader** %27, align 8
  %33 = getelementptr inbounds %struct.jpeg_marker_reader, %struct.jpeg_marker_reader* %32, i64 0, i32 2
  %34 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %33, align 8
  %35 = tail call i32 %34(%struct.jpeg_decompress_struct* %0) #3
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %382, label %37

37:                                               ; preds = %23
  %38 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %39 = load i32, i32* %38, align 8
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %48

41:                                               ; preds = %37, %41
  %42 = phi i64 [ %44, %41 ], [ 0, %37 ]
  %43 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 2, i32 1, i64 %42
  store i32 0, i32* %43, align 4
  %44 = add nuw nsw i64 %42, 1
  %45 = load i32, i32* %38, align 8
  %46 = sext i32 %45 to i64
  %47 = icmp slt i64 %44, %46
  br i1 %47, label %41, label %48

48:                                               ; preds = %41, %37
  %49 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 2, i32 0
  store i32 0, i32* %49, align 8
  %50 = load i32, i32* %16, align 8
  store i32 %50, i32* %20, align 4
  %51 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 76
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 0, i32 2
  store i32 0, i32* %55, align 8
  br label %56

56:                                               ; preds = %48, %54, %2, %19
  %57 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 0, i32 2
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %331

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 4
  store %struct.jpeg_decompress_struct* %0, %struct.jpeg_decompress_struct** %61, align 16
  %62 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 6
  %63 = bitcast %struct.jpeg_source_mgr** %62 to i64**
  %64 = bitcast %struct.jpeg_source_mgr** %62 to <2 x i64>**
  %65 = load <2 x i64>*, <2 x i64>** %64, align 8
  %66 = bitcast %struct.bitread_working_state* %3 to i64*
  %67 = load <2 x i64>, <2 x i64>* %65, align 8
  %68 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 1
  %69 = bitcast %struct.bitread_working_state* %3 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %69, align 16
  %70 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 1, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 1, i32 1
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 2, i32 0
  %75 = load i32, i32* %74, align 8
  %76 = load [64 x i16]*, [64 x i16]** %1, align 8
  %77 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 5
  %78 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %77, align 8
  %79 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 72
  %80 = load i32, i32* %79, align 4
  %81 = icmp ne i32 %75, 0
  %82 = icmp sgt i32 %80, %9
  %83 = or i1 %81, %82
  br i1 %83, label %255, label %84

84:                                               ; preds = %60
  %85 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 2
  %86 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 3
  %87 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %88 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %89 = trunc i32 %13 to i16
  %90 = trunc i32 %12 to i16
  %91 = sext i32 %9 to i64
  br label %92

92:                                               ; preds = %251, %84
  %93 = phi i32 [ 0, %84 ], [ %252, %251 ]
  %94 = phi i32 [ %73, %84 ], [ %239, %251 ]
  %95 = phi i64 [ %71, %84 ], [ %238, %251 ]
  %96 = phi i32 [ %80, %84 ], [ %253, %251 ]
  %97 = icmp slt i32 %94, 8
  br i1 %97, label %98, label %105

98:                                               ; preds = %92
  %99 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %95, i32 %94, i32 0) #3
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %338, label %101

101:                                              ; preds = %98
  %102 = load i64, i64* %85, align 16
  %103 = load i32, i32* %86, align 8
  %104 = icmp slt i32 %103, 8
  br i1 %104, label %119, label %105

105:                                              ; preds = %101, %92
  %106 = phi i64 [ %102, %101 ], [ %95, %92 ]
  %107 = phi i32 [ %103, %101 ], [ %94, %92 ]
  %108 = add nsw i32 %107, -8
  %109 = zext i32 %108 to i64
  %110 = lshr i64 %106, %109
  %111 = and i64 %110, 255
  %112 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %78, i64 0, i32 3, i64 %111
  %113 = load i32, i32* %112, align 4
  %114 = ashr i32 %113, 8
  %115 = icmp slt i32 %113, 2304
  br i1 %115, label %116, label %119

116:                                              ; preds = %105
  %117 = sub nsw i32 %107, %114
  %118 = and i32 %113, 255
  br label %128

119:                                              ; preds = %101, %105
  %120 = phi i64 [ %106, %105 ], [ %102, %101 ]
  %121 = phi i32 [ %107, %105 ], [ %103, %101 ]
  %122 = phi i32 [ %114, %105 ], [ 1, %101 ]
  %123 = call i32 @jpeg_huff_decode(%struct.bitread_working_state* nonnull %3, i64 %120, i32 %121, %struct.d_derived_tbl* %78, i32 %122) #3
  %124 = icmp slt i32 %123, 0
  br i1 %124, label %338, label %125

125:                                              ; preds = %119
  %126 = load i64, i64* %85, align 16
  %127 = load i32, i32* %86, align 8
  br label %128

128:                                              ; preds = %125, %116
  %129 = phi i32 [ %118, %116 ], [ %123, %125 ]
  %130 = phi i64 [ %106, %116 ], [ %126, %125 ]
  %131 = phi i32 [ %117, %116 ], [ %127, %125 ]
  %132 = lshr i32 %129, 4
  %133 = and i32 %129, 15
  switch i32 %133, label %134 [
    i32 0, label %157
    i32 1, label %140
  ]

134:                                              ; preds = %128
  %135 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %87, align 8
  %136 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %135, i64 0, i32 5
  store i32 118, i32* %136, align 8
  %137 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %87, align 8
  %138 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %137, i64 0, i32 1
  %139 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %138, align 8
  call void %139(%struct.jpeg_common_struct* %88, i32 -1) #3
  br label %140

140:                                              ; preds = %128, %134
  %141 = icmp slt i32 %131, 1
  br i1 %141, label %142, label %148

142:                                              ; preds = %140
  %143 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %130, i32 %131, i32 1) #3
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %338, label %145

145:                                              ; preds = %142
  %146 = load i64, i64* %85, align 16
  %147 = load i32, i32* %86, align 8
  br label %148

148:                                              ; preds = %145, %140
  %149 = phi i64 [ %146, %145 ], [ %130, %140 ]
  %150 = phi i32 [ %147, %145 ], [ %131, %140 ]
  %151 = add nsw i32 %150, -1
  %152 = zext i32 %151 to i64
  %153 = shl i64 1, %152
  %154 = and i64 %153, %149
  %155 = icmp eq i64 %154, 0
  %156 = select i1 %155, i32 %13, i32 %12
  br label %180

157:                                              ; preds = %128
  %158 = icmp eq i32 %132, 15
  br i1 %158, label %180, label %159

159:                                              ; preds = %157
  %160 = shl i32 1, %132
  %161 = icmp eq i32 %132, 0
  br i1 %161, label %262, label %162

162:                                              ; preds = %159
  %163 = icmp slt i32 %131, %132
  br i1 %163, label %164, label %170

164:                                              ; preds = %162
  %165 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %130, i32 %131, i32 %132) #3
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %338, label %167

167:                                              ; preds = %164
  %168 = load i64, i64* %85, align 16
  %169 = load i32, i32* %86, align 8
  br label %170

170:                                              ; preds = %167, %162
  %171 = phi i64 [ %168, %167 ], [ %130, %162 ]
  %172 = phi i32 [ %169, %167 ], [ %131, %162 ]
  %173 = sub nsw i32 %172, %132
  %174 = zext i32 %173 to i64
  %175 = lshr i64 %171, %174
  %176 = trunc i64 %175 to i32
  %177 = add nsw i32 %160, -1
  %178 = and i32 %177, %176
  %179 = add i32 %178, %160
  br label %255

180:                                              ; preds = %148, %157
  %181 = phi i32 [ 0, %157 ], [ %156, %148 ]
  %182 = phi i64 [ %130, %157 ], [ %149, %148 ]
  %183 = phi i32 [ %131, %157 ], [ %151, %148 ]
  %184 = sext i32 %96 to i64
  br label %185

185:                                              ; preds = %227, %180
  %186 = phi i64 [ %231, %227 ], [ %184, %180 ]
  %187 = phi i32 [ %232, %227 ], [ %96, %180 ]
  %188 = phi i32 [ %228, %227 ], [ %132, %180 ]
  %189 = phi i64 [ %229, %227 ], [ %182, %180 ]
  %190 = phi i32 [ %230, %227 ], [ %183, %180 ]
  %191 = getelementptr inbounds [0 x i32], [0 x i32]* @jpeg_natural_order, i64 0, i64 %186
  %192 = load i32, i32* %191, align 4
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds [64 x i16], [64 x i16]* %76, i64 0, i64 %193
  %195 = load i16, i16* %194, align 2
  %196 = icmp eq i16 %195, 0
  br i1 %196, label %224, label %197

197:                                              ; preds = %185
  %198 = icmp slt i32 %190, 1
  br i1 %198, label %199, label %205

199:                                              ; preds = %197
  %200 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %189, i32 %190, i32 1) #3
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %338, label %202

202:                                              ; preds = %199
  %203 = load i64, i64* %85, align 16
  %204 = load i32, i32* %86, align 8
  br label %205

205:                                              ; preds = %202, %197
  %206 = phi i64 [ %203, %202 ], [ %189, %197 ]
  %207 = phi i32 [ %204, %202 ], [ %190, %197 ]
  %208 = add nsw i32 %207, -1
  %209 = zext i32 %208 to i64
  %210 = shl i64 1, %209
  %211 = and i64 %210, %206
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %227, label %213

213:                                              ; preds = %205
  %214 = load i16, i16* %194, align 2
  %215 = sext i16 %214 to i32
  %216 = and i32 %12, %215
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %227

218:                                              ; preds = %213
  %219 = icmp sgt i16 %214, -1
  br i1 %219, label %220, label %222

220:                                              ; preds = %218
  %221 = add i16 %214, %90
  store i16 %221, i16* %194, align 2
  br label %227

222:                                              ; preds = %218
  %223 = add i16 %214, %89
  store i16 %223, i16* %194, align 2
  br label %227

224:                                              ; preds = %185
  %225 = add nsw i32 %188, -1
  %226 = icmp slt i32 %188, 1
  br i1 %226, label %234, label %227

227:                                              ; preds = %205, %224, %220, %222, %213
  %228 = phi i32 [ %188, %220 ], [ %188, %222 ], [ %188, %213 ], [ %188, %205 ], [ %225, %224 ]
  %229 = phi i64 [ %206, %220 ], [ %206, %222 ], [ %206, %213 ], [ %206, %205 ], [ %189, %224 ]
  %230 = phi i32 [ %208, %220 ], [ %208, %222 ], [ %208, %213 ], [ %208, %205 ], [ %190, %224 ]
  %231 = add nsw i64 %186, 1
  %232 = add nsw i32 %187, 1
  %233 = icmp slt i64 %186, %91
  br i1 %233, label %185, label %236

234:                                              ; preds = %224
  %235 = trunc i64 %186 to i32
  br label %236

236:                                              ; preds = %227, %234
  %237 = phi i32 [ %235, %234 ], [ %232, %227 ]
  %238 = phi i64 [ %189, %234 ], [ %229, %227 ]
  %239 = phi i32 [ %190, %234 ], [ %230, %227 ]
  %240 = icmp eq i32 %181, 0
  br i1 %240, label %251, label %241

241:                                              ; preds = %236
  %242 = sext i32 %237 to i64
  %243 = getelementptr inbounds [0 x i32], [0 x i32]* @jpeg_natural_order, i64 0, i64 %242
  %244 = load i32, i32* %243, align 4
  %245 = trunc i32 %181 to i16
  %246 = sext i32 %244 to i64
  %247 = getelementptr inbounds [64 x i16], [64 x i16]* %76, i64 0, i64 %246
  store i16 %245, i16* %247, align 2
  %248 = add nsw i32 %93, 1
  %249 = sext i32 %93 to i64
  %250 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %249
  store i32 %244, i32* %250, align 4
  br label %251

251:                                              ; preds = %236, %241
  %252 = phi i32 [ %248, %241 ], [ %93, %236 ]
  %253 = add nsw i32 %237, 1
  %254 = icmp slt i32 %237, %9
  br i1 %254, label %92, label %322

255:                                              ; preds = %60, %170
  %256 = phi i32 [ %96, %170 ], [ %80, %60 ]
  %257 = phi i32 [ %179, %170 ], [ %75, %60 ]
  %258 = phi i64 [ %171, %170 ], [ %71, %60 ]
  %259 = phi i32 [ %173, %170 ], [ %73, %60 ]
  %260 = phi i32 [ %93, %170 ], [ 0, %60 ]
  %261 = icmp eq i32 %257, 0
  br i1 %261, label %322, label %262

262:                                              ; preds = %159, %255
  %263 = phi i32 [ %260, %255 ], [ %93, %159 ]
  %264 = phi i32 [ %259, %255 ], [ %131, %159 ]
  %265 = phi i64 [ %258, %255 ], [ %130, %159 ]
  %266 = phi i32 [ %257, %255 ], [ 1, %159 ]
  %267 = phi i32 [ %256, %255 ], [ %96, %159 ]
  %268 = icmp sgt i32 %267, %9
  br i1 %268, label %318, label %269

269:                                              ; preds = %262
  %270 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 2
  %271 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 3
  %272 = trunc i32 %13 to i16
  %273 = trunc i32 %12 to i16
  %274 = sext i32 %267 to i64
  %275 = sext i32 %9 to i64
  br label %276

276:                                              ; preds = %313, %269
  %277 = phi i64 [ %316, %313 ], [ %274, %269 ]
  %278 = phi i32 [ %315, %313 ], [ %264, %269 ]
  %279 = phi i64 [ %314, %313 ], [ %265, %269 ]
  %280 = getelementptr inbounds [0 x i32], [0 x i32]* @jpeg_natural_order, i64 0, i64 %277
  %281 = load i32, i32* %280, align 4
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds [64 x i16], [64 x i16]* %76, i64 0, i64 %282
  %284 = load i16, i16* %283, align 2
  %285 = icmp eq i16 %284, 0
  br i1 %285, label %313, label %286

286:                                              ; preds = %276
  %287 = icmp slt i32 %278, 1
  br i1 %287, label %288, label %294

288:                                              ; preds = %286
  %289 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %279, i32 %278, i32 1) #3
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %338, label %291

291:                                              ; preds = %288
  %292 = load i64, i64* %270, align 16
  %293 = load i32, i32* %271, align 8
  br label %294

294:                                              ; preds = %291, %286
  %295 = phi i64 [ %292, %291 ], [ %279, %286 ]
  %296 = phi i32 [ %293, %291 ], [ %278, %286 ]
  %297 = add nsw i32 %296, -1
  %298 = zext i32 %297 to i64
  %299 = shl i64 1, %298
  %300 = and i64 %299, %295
  %301 = icmp eq i64 %300, 0
  br i1 %301, label %313, label %302

302:                                              ; preds = %294
  %303 = load i16, i16* %283, align 2
  %304 = sext i16 %303 to i32
  %305 = and i32 %12, %304
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %313

307:                                              ; preds = %302
  %308 = icmp sgt i16 %303, -1
  br i1 %308, label %309, label %311

309:                                              ; preds = %307
  %310 = add i16 %303, %273
  store i16 %310, i16* %283, align 2
  br label %313

311:                                              ; preds = %307
  %312 = add i16 %303, %272
  store i16 %312, i16* %283, align 2
  br label %313

313:                                              ; preds = %294, %276, %302, %311, %309
  %314 = phi i64 [ %295, %309 ], [ %295, %311 ], [ %295, %302 ], [ %295, %294 ], [ %279, %276 ]
  %315 = phi i32 [ %297, %309 ], [ %297, %311 ], [ %297, %302 ], [ %297, %294 ], [ %278, %276 ]
  %316 = add nsw i64 %277, 1
  %317 = icmp slt i64 %277, %275
  br i1 %317, label %276, label %318

318:                                              ; preds = %313, %262
  %319 = phi i64 [ %265, %262 ], [ %314, %313 ]
  %320 = phi i32 [ %264, %262 ], [ %315, %313 ]
  %321 = add i32 %266, -1
  br label %322

322:                                              ; preds = %251, %255, %318
  %323 = phi i32 [ %321, %318 ], [ 0, %255 ], [ 0, %251 ]
  %324 = phi i64 [ %319, %318 ], [ %258, %255 ], [ %238, %251 ]
  %325 = phi i32 [ %320, %318 ], [ %259, %255 ], [ %239, %251 ]
  %326 = load i64, i64* %66, align 16
  %327 = load i64*, i64** %63, align 8
  store i64 %326, i64* %327, align 8
  %328 = load i64, i64* %68, align 8
  %329 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %62, align 8
  %330 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %329, i64 0, i32 1
  store i64 %328, i64* %330, align 8
  store i64 %324, i64* %70, align 8
  store i32 %325, i32* %72, align 8
  store i32 %323, i32* %74, align 8
  br label %331

331:                                              ; preds = %56, %322
  %332 = load i32, i32* %16, align 8
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %382, label %334

334:                                              ; preds = %331
  %335 = getelementptr inbounds %struct.phuff_entropy_decoder, %struct.phuff_entropy_decoder* %7, i64 0, i32 3
  %336 = load i32, i32* %335, align 4
  %337 = add i32 %336, -1
  store i32 %337, i32* %335, align 4
  br label %382

338:                                              ; preds = %98, %119, %142, %199, %288, %164
  %339 = phi i32 [ %93, %164 ], [ %263, %288 ], [ %93, %199 ], [ %93, %142 ], [ %93, %119 ], [ %93, %98 ]
  %340 = icmp sgt i32 %339, 0
  br i1 %340, label %341, label %382

341:                                              ; preds = %338
  %342 = sext i32 %339 to i64
  %343 = add nsw i64 %342, -1
  %344 = and i64 %342, 3
  %345 = icmp eq i64 %344, 0
  br i1 %345, label %356, label %346

346:                                              ; preds = %341, %346
  %347 = phi i64 [ %349, %346 ], [ %342, %341 ]
  %348 = phi i64 [ %354, %346 ], [ %344, %341 ]
  %349 = add nsw i64 %347, -1
  %350 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %349
  %351 = load i32, i32* %350, align 4
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds [64 x i16], [64 x i16]* %76, i64 0, i64 %352
  store i16 0, i16* %353, align 2
  %354 = add i64 %348, -1
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %346, !llvm.loop !2

356:                                              ; preds = %346, %341
  %357 = phi i64 [ %342, %341 ], [ %349, %346 ]
  %358 = icmp ult i64 %343, 3
  br i1 %358, label %382, label %359

359:                                              ; preds = %356, %359
  %360 = phi i64 [ %376, %359 ], [ %357, %356 ]
  %361 = add nsw i64 %360, -1
  %362 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %361
  %363 = load i32, i32* %362, align 4
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds [64 x i16], [64 x i16]* %76, i64 0, i64 %364
  store i16 0, i16* %365, align 2
  %366 = add nsw i64 %360, -2
  %367 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %366
  %368 = load i32, i32* %367, align 4
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds [64 x i16], [64 x i16]* %76, i64 0, i64 %369
  store i16 0, i16* %370, align 2
  %371 = add nsw i64 %360, -3
  %372 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %371
  %373 = load i32, i32* %372, align 4
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds [64 x i16], [64 x i16]* %76, i64 0, i64 %374
  store i16 0, i16* %375, align 2
  %376 = add nsw i64 %360, -4
  %377 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %376
  %378 = load i32, i32* %377, align 4
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds [64 x i16], [64 x i16]* %76, i64 0, i64 %379
  store i16 0, i16* %380, align 2
  %381 = icmp sgt i64 %376, 0
  br i1 %381, label %359, label %382

382:                                              ; preds = %356, %359, %338, %23, %334, %331
  %383 = phi i32 [ 1, %331 ], [ 1, %334 ], [ 0, %23 ], [ 0, %338 ], [ 0, %359 ], [ 0, %356 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %15) #3
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %14) #3
  ret i32 %383
}

declare void @jpeg_make_d_derived_tbl(%struct.jpeg_decompress_struct*, i32, i32, %struct.d_derived_tbl**) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state*, i64, i32, i32) local_unnamed_addr #2

declare i32 @jpeg_huff_decode(%struct.bitread_working_state*, i64, i32, %struct.d_derived_tbl*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
