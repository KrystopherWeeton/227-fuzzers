; ModuleID = '../../third_party/boringssl/src/crypto/evp/p_rsa.c'
source_filename = "../../third_party/boringssl/src/crypto/evp/p_rsa.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.evp_pkey_ctx_st = type { %struct.evp_pkey_method_st*, %struct.engine_st*, %struct.evp_pkey_st*, %struct.evp_pkey_st*, i32, i8* }
%struct.evp_pkey_method_st = type { i32, {}*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st*)*, void (%struct.evp_pkey_ctx_st*)*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*)*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_ctx_st*, i32, i32, i8*)* }
%struct.engine_st = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type { i32, [9 x i8], i8, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* }
%struct.cbs_st = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%struct.RSA_PKEY_CTX = type { i32, %struct.bignum_st*, i32, %struct.env_md_st*, %struct.env_md_st*, i32, i8*, i8*, i64 }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.env_md_st = type opaque
%struct.rsa_st = type { %struct.rsa_meth_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.crypto_ex_data_st, i32, i32, %union.crypto_mutex_st, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, i32, %struct.bn_blinding_st**, i8*, i64, i8 }
%struct.rsa_meth_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.rsa_st*)*, i32 (%struct.rsa_st*)*, i64 (%struct.rsa_st*)*, i32 (i32, i8*, i32, i8*, i32*, %struct.rsa_st*)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i8*, i8*, i64)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%struct.bn_blinding_st = type opaque
%struct.bn_gencb_st = type { i8*, i32 (i32, i32, %struct.bn_gencb_st*)* }
%struct.RSA_OAEP_LABEL_PARAMS = type { i8*, i64 }

@rsa_pkey_meth = hidden local_unnamed_addr constant { i32, i32 (%struct.evp_pkey_ctx_st*)*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st*)*, void (%struct.evp_pkey_ctx_st*)*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*)*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_ctx_st*, i32, i32, i8*)* } { i32 6, i32 (%struct.evp_pkey_ctx_st*)* @pkey_rsa_init, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st*)* @pkey_rsa_copy, void (%struct.evp_pkey_ctx_st*)* @pkey_rsa_cleanup, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)* @pkey_rsa_keygen, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* @pkey_rsa_sign, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* null, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)* @pkey_rsa_verify, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)* null, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* @pkey_rsa_verify_recover, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* @pkey_rsa_encrypt, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* @pkey_rsa_decrypt, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*)* null, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)* null, i32 (%struct.evp_pkey_ctx_st*, i32, i32, i8*)* @pkey_rsa_ctrl }, align 8
@.str = private unnamed_addr constant [51 x i8] c"../../third_party/boringssl/src/crypto/evp/p_rsa.c\00", align 1
@pkey_rsa_verify_recover.kDummyHash = internal constant [64 x i8] zeroinitializer, align 16

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_rsa_init(%struct.evp_pkey_ctx_st* nocapture) #0 {
  %2 = tail call i8* @OPENSSL_malloc(i64 72) #4
  %3 = icmp eq i8* %2, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds i8, i8* %2, i64 4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %5, i8 0, i64 68, i1 false) #4
  %6 = bitcast i8* %2 to i32*
  store i32 2048, i32* %6, align 8
  %7 = getelementptr inbounds i8, i8* %2, i64 16
  %8 = bitcast i8* %7 to i32*
  store i32 1, i32* %8, align 8
  %9 = getelementptr inbounds i8, i8* %2, i64 40
  %10 = bitcast i8* %9 to i32*
  store i32 -2, i32* %10, align 8
  %11 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  store i8* %2, i8** %11, align 8
  br label %12

12:                                               ; preds = %1, %4
  %13 = phi i32 [ 1, %4 ], [ 0, %1 ]
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_rsa_copy(%struct.evp_pkey_ctx_st* nocapture, %struct.evp_pkey_ctx_st* nocapture readonly) #0 {
  %3 = tail call i8* @OPENSSL_malloc(i64 72) #4
  %4 = icmp eq i8* %3, null
  br i1 %4, label %57, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds i8, i8* %3, i64 4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %6, i8 0, i64 68, i1 false) #4
  %7 = bitcast i8* %3 to i32*
  store i32 2048, i32* %7, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 16
  %9 = bitcast i8* %8 to i32*
  store i32 1, i32* %9, align 8
  %10 = getelementptr inbounds i8, i8* %3, i64 40
  %11 = bitcast i8* %10 to i32*
  store i32 -2, i32* %11, align 8
  %12 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  store i8* %3, i8** %12, align 8
  %13 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %1, i64 0, i32 5
  %14 = bitcast i8** %13 to %struct.RSA_PKEY_CTX**
  %15 = load %struct.RSA_PKEY_CTX*, %struct.RSA_PKEY_CTX** %14, align 8
  %16 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %15, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  store i32 %17, i32* %7, align 8
  %18 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %15, i64 0, i32 1
  %19 = load %struct.bignum_st*, %struct.bignum_st** %18, align 8
  %20 = icmp eq %struct.bignum_st* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %5
  %22 = tail call %struct.bignum_st* @BN_dup(%struct.bignum_st* nonnull %19) #4
  %23 = getelementptr inbounds i8, i8* %3, i64 8
  %24 = bitcast i8* %23 to %struct.bignum_st**
  store %struct.bignum_st* %22, %struct.bignum_st** %24, align 8
  %25 = icmp eq %struct.bignum_st* %22, null
  br i1 %25, label %57, label %26

26:                                               ; preds = %21, %5
  %27 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %15, i64 0, i32 2
  %28 = load i32, i32* %27, align 8
  store i32 %28, i32* %9, align 8
  %29 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %15, i64 0, i32 3
  %30 = bitcast %struct.env_md_st** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds i8, i8* %3, i64 24
  %33 = bitcast i8* %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %15, i64 0, i32 4
  %35 = bitcast %struct.env_md_st** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds i8, i8* %3, i64 32
  %38 = bitcast i8* %37 to i64*
  store i64 %36, i64* %38, align 8
  %39 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %15, i64 0, i32 5
  %40 = load i32, i32* %39, align 8
  store i32 %40, i32* %11, align 8
  %41 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %15, i64 0, i32 7
  %42 = load i8*, i8** %41, align 8
  %43 = icmp eq i8* %42, null
  br i1 %43, label %57, label %44

44:                                               ; preds = %26
  %45 = getelementptr inbounds i8, i8* %3, i64 56
  %46 = bitcast i8* %45 to i8**
  %47 = load i8*, i8** %46, align 8
  tail call void @OPENSSL_free(i8* %47) #4
  %48 = load i8*, i8** %41, align 8
  %49 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %15, i64 0, i32 8
  %50 = load i64, i64* %49, align 8
  %51 = tail call i8* @OPENSSL_memdup(i8* %48, i64 %50) #4
  store i8* %51, i8** %46, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %57, label %53

53:                                               ; preds = %44
  %54 = load i64, i64* %49, align 8
  %55 = getelementptr inbounds i8, i8* %3, i64 64
  %56 = bitcast i8* %55 to i64*
  store i64 %54, i64* %56, align 8
  br label %57

57:                                               ; preds = %2, %53, %26, %44, %21
  %58 = phi i32 [ 0, %21 ], [ 0, %44 ], [ 1, %26 ], [ 1, %53 ], [ 0, %2 ]
  ret i32 %58
}

; Function Attrs: nounwind ssp uwtable
define internal void @pkey_rsa_cleanup(%struct.evp_pkey_ctx_st* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to %struct.bignum_st**
  %8 = load %struct.bignum_st*, %struct.bignum_st** %7, align 8
  tail call void @BN_free(%struct.bignum_st* %8) #4
  %9 = getelementptr inbounds i8, i8* %3, i64 48
  %10 = bitcast i8* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @OPENSSL_free(i8* %11) #4
  %12 = getelementptr inbounds i8, i8* %3, i64 56
  %13 = bitcast i8* %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @OPENSSL_free(i8* %14) #4
  tail call void @OPENSSL_free(i8* nonnull %3) #4
  br label %15

15:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_rsa_keygen(%struct.evp_pkey_ctx_st* nocapture readonly, %struct.evp_pkey_st*) #0 {
  %3 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.RSA_PKEY_CTX**
  %5 = load %struct.RSA_PKEY_CTX*, %struct.RSA_PKEY_CTX** %4, align 8
  %6 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %5, i64 0, i32 1
  %7 = load %struct.bignum_st*, %struct.bignum_st** %6, align 8
  %8 = icmp eq %struct.bignum_st* %7, null
  br i1 %8, label %9, label %15

9:                                                ; preds = %2
  %10 = tail call %struct.bignum_st* @BN_new() #4
  store %struct.bignum_st* %10, %struct.bignum_st** %6, align 8
  %11 = icmp eq %struct.bignum_st* %10, null
  br i1 %11, label %27, label %12

12:                                               ; preds = %9
  %13 = tail call i32 @BN_set_word(%struct.bignum_st* nonnull %10, i64 65537) #4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12, %2
  %16 = tail call %struct.rsa_st* @RSA_new() #4
  %17 = icmp eq %struct.rsa_st* %16, null
  br i1 %17, label %27, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %5, i64 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = load %struct.bignum_st*, %struct.bignum_st** %6, align 8
  %22 = tail call i32 @RSA_generate_key_ex(%struct.rsa_st* nonnull %16, i32 %20, %struct.bignum_st* %21, %struct.bn_gencb_st* null) #4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %18
  tail call void @RSA_free(%struct.rsa_st* nonnull %16) #4
  br label %27

25:                                               ; preds = %18
  %26 = tail call i32 @EVP_PKEY_assign_RSA(%struct.evp_pkey_st* %1, %struct.rsa_st* nonnull %16) #4
  br label %27

27:                                               ; preds = %15, %9, %12, %25, %24
  %28 = phi i32 [ 1, %25 ], [ 0, %24 ], [ 0, %12 ], [ 0, %9 ], [ 0, %15 ]
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_rsa_sign(%struct.evp_pkey_ctx_st* nocapture readonly, i8*, i64*, i8*, i64) #0 {
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  %8 = bitcast i8** %7 to %struct.RSA_PKEY_CTX**
  %9 = load %struct.RSA_PKEY_CTX*, %struct.RSA_PKEY_CTX** %8, align 8
  %10 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 2
  %11 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %10, align 8
  %12 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %11, i64 0, i32 2
  %13 = bitcast %union.anon* %12 to %struct.rsa_st**
  %14 = load %struct.rsa_st*, %struct.rsa_st** %13, align 8
  %15 = tail call i32 @EVP_PKEY_size(%struct.evp_pkey_st* %11) #4
  %16 = sext i32 %15 to i64
  %17 = icmp eq i8* %1, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %5
  store i64 %16, i64* %2, align 8
  br label %51

19:                                               ; preds = %5
  %20 = load i64, i64* %2, align 8
  %21 = icmp ult i64 %20, %16
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  tail call void @ERR_put_error(i32 6, i32 0, i32 100, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 183) #4
  br label %51

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 3
  %25 = load %struct.env_md_st*, %struct.env_md_st** %24, align 8
  %26 = icmp eq %struct.env_md_st* %25, null
  br i1 %26, label %47, label %27

27:                                               ; preds = %23
  %28 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #4
  store i32 -1431655766, i32* %6, align 4
  %29 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 2
  %30 = load i32, i32* %29, align 8
  switch i32 %30, label %45 [
    i32 1, label %31
    i32 6, label %39
  ]

31:                                               ; preds = %27
  %32 = tail call i32 @EVP_MD_type(%struct.env_md_st* nonnull %25) #4
  %33 = trunc i64 %4 to i32
  %34 = call i32 @RSA_sign(i32 %32, i8* %3, i32 %33, i8* nonnull %1, i32* nonnull %6, %struct.rsa_st* %14) #4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %45, label %36

36:                                               ; preds = %31
  %37 = load i32, i32* %6, align 4
  %38 = zext i32 %37 to i64
  store i64 %38, i64* %2, align 8
  br label %45

39:                                               ; preds = %27
  %40 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 4
  %41 = load %struct.env_md_st*, %struct.env_md_st** %40, align 8
  %42 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 5
  %43 = load i32, i32* %42, align 8
  %44 = tail call i32 @RSA_sign_pss_mgf1(%struct.rsa_st* %14, i64* %2, i8* nonnull %1, i64 %20, i8* %3, i64 %4, %struct.env_md_st* nonnull %25, %struct.env_md_st* %41, i32 %43) #4
  br label %45

45:                                               ; preds = %27, %31, %39, %36
  %46 = phi i32 [ %44, %39 ], [ 1, %36 ], [ 0, %31 ], [ 0, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #4
  br label %51

47:                                               ; preds = %23
  %48 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 2
  %49 = load i32, i32* %48, align 8
  %50 = tail call i32 @RSA_sign_raw(%struct.rsa_st* %14, i64* %2, i8* nonnull %1, i64 %20, i8* %3, i64 %4, i32 %49) #4
  br label %51

51:                                               ; preds = %47, %45, %22, %18
  %52 = phi i32 [ 0, %22 ], [ %46, %45 ], [ %50, %47 ], [ 1, %18 ]
  ret i32 %52
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_rsa_verify(%struct.evp_pkey_ctx_st* nocapture readonly, i8*, i64, i8*, i64) #0 {
  %6 = alloca i64, align 8
  %7 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  %8 = bitcast i8** %7 to %struct.RSA_PKEY_CTX**
  %9 = load %struct.RSA_PKEY_CTX*, %struct.RSA_PKEY_CTX** %8, align 8
  %10 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 2
  %11 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %10, align 8
  %12 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %11, i64 0, i32 2
  %13 = bitcast %union.anon* %12 to %struct.rsa_st**
  %14 = load %struct.rsa_st*, %struct.rsa_st** %13, align 8
  %15 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 3
  %16 = load %struct.env_md_st*, %struct.env_md_st** %15, align 8
  %17 = icmp eq %struct.env_md_st* %16, null
  br i1 %17, label %30, label %18

18:                                               ; preds = %5
  %19 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 2
  %20 = load i32, i32* %19, align 8
  switch i32 %20, label %59 [
    i32 1, label %21
    i32 6, label %24
  ]

21:                                               ; preds = %18
  %22 = tail call i32 @EVP_MD_type(%struct.env_md_st* nonnull %16) #4
  %23 = tail call i32 @RSA_verify(i32 %22, i8* %3, i64 %4, i8* %1, i64 %2, %struct.rsa_st* %14) #4
  br label %59

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 4
  %26 = load %struct.env_md_st*, %struct.env_md_st** %25, align 8
  %27 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 5
  %28 = load i32, i32* %27, align 8
  %29 = tail call i32 @RSA_verify_pss_mgf1(%struct.rsa_st* %14, i8* %3, i64 %4, %struct.env_md_st* nonnull %16, %struct.env_md_st* %26, i32 %28, i8* %1, i64 %2) #4
  br label %59

30:                                               ; preds = %5
  %31 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #4
  store i64 -6148914691236517206, i64* %6, align 8
  %32 = tail call i32 @EVP_PKEY_size(%struct.evp_pkey_st* %11) #4
  %33 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 6
  %34 = load i8*, i8** %33, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %36, label %42

36:                                               ; preds = %30
  %37 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %10, align 8
  %38 = tail call i32 @EVP_PKEY_size(%struct.evp_pkey_st* %37) #4
  %39 = sext i32 %38 to i64
  %40 = tail call i8* @OPENSSL_malloc(i64 %39) #4
  store i8* %40, i8** %33, align 8
  %41 = icmp eq i8* %40, null
  br i1 %41, label %57, label %42

42:                                               ; preds = %30, %36
  %43 = phi i8* [ %34, %30 ], [ %40, %36 ]
  %44 = sext i32 %32 to i64
  %45 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = call i32 @RSA_verify_raw(%struct.rsa_st* %14, i64* nonnull %6, i8* nonnull %43, i64 %44, i8* %1, i64 %2, i32 %46) #4
  %48 = icmp ne i32 %47, 0
  %49 = load i64, i64* %6, align 8
  %50 = icmp eq i64 %49, %4
  %51 = and i1 %48, %50
  br i1 %51, label %52, label %57

52:                                               ; preds = %42
  %53 = load i8*, i8** %33, align 8
  %54 = call i32 @CRYPTO_memcmp(i8* %3, i8* %53, i64 %4) #4
  %55 = icmp eq i32 %54, 0
  %56 = zext i1 %55 to i32
  br label %57

57:                                               ; preds = %42, %52, %36
  %58 = phi i32 [ 0, %42 ], [ 0, %36 ], [ %56, %52 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #4
  br label %59

59:                                               ; preds = %18, %57, %24, %21
  %60 = phi i32 [ %29, %24 ], [ %23, %21 ], [ %58, %57 ], [ 0, %18 ]
  ret i32 %60
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_rsa_verify_recover(%struct.evp_pkey_ctx_st* nocapture readonly, i8*, i64*, i8*, i64) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  %11 = bitcast i8** %10 to %struct.RSA_PKEY_CTX**
  %12 = load %struct.RSA_PKEY_CTX*, %struct.RSA_PKEY_CTX** %11, align 8
  %13 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 2
  %14 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %13, align 8
  %15 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %14, i64 0, i32 2
  %16 = bitcast %union.anon* %15 to %struct.rsa_st**
  %17 = load %struct.rsa_st*, %struct.rsa_st** %16, align 8
  %18 = tail call i32 @EVP_PKEY_size(%struct.evp_pkey_st* %14) #4
  %19 = sext i32 %18 to i64
  %20 = icmp eq i8* %1, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %5
  store i64 %19, i64* %2, align 8
  br label %92

22:                                               ; preds = %5
  %23 = load i64, i64* %2, align 8
  %24 = icmp ult i64 %23, %19
  br i1 %24, label %25, label %26

25:                                               ; preds = %22
  tail call void @ERR_put_error(i32 6, i32 0, i32 100, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 255) #4
  br label %92

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %12, i64 0, i32 3
  %28 = load %struct.env_md_st*, %struct.env_md_st** %27, align 8
  %29 = icmp eq %struct.env_md_st* %28, null
  %30 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %12, i64 0, i32 2
  %31 = load i32, i32* %30, align 8
  br i1 %29, label %32, label %34

32:                                               ; preds = %26
  %33 = tail call i32 @RSA_verify_raw(%struct.rsa_st* %17, i64* %2, i8* nonnull %1, i64 %23, i8* %3, i64 %4, i32 %31) #4
  br label %92

34:                                               ; preds = %26
  %35 = icmp eq i32 %31, 1
  br i1 %35, label %36, label %92

36:                                               ; preds = %34
  %37 = tail call i64 @EVP_MD_size(%struct.env_md_st* nonnull %28) #4
  %38 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %39 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #4
  store i64 -6148914691236517206, i64* %7, align 8
  %40 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %40) #4
  store i32 -1431655766, i32* %8, align 4
  %41 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %12, i64 0, i32 6
  %42 = load i8*, i8** %41, align 8
  %43 = icmp eq i8* %42, null
  br i1 %43, label %44, label %50

44:                                               ; preds = %36
  %45 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %13, align 8
  %46 = tail call i32 @EVP_PKEY_size(%struct.evp_pkey_st* %45) #4
  %47 = sext i32 %46 to i64
  %48 = tail call i8* @OPENSSL_malloc(i64 %47) #4
  store i8* %48, i8** %41, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %90, label %50

50:                                               ; preds = %36, %44
  %51 = load %struct.env_md_st*, %struct.env_md_st** %27, align 8
  %52 = tail call i32 @EVP_MD_type(%struct.env_md_st* %51) #4
  %53 = call i32 @RSA_add_pkcs1_prefix(i8** nonnull %6, i64* nonnull %7, i32* nonnull %8, i32 %52, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @pkey_rsa_verify_recover.kDummyHash, i64 0, i64 0), i64 %37) #4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %90, label %55

55:                                               ; preds = %50
  %56 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #4
  store i64 -6148914691236517206, i64* %9, align 8
  %57 = load i8*, i8** %41, align 8
  %58 = call i32 @RSA_verify_raw(%struct.rsa_st* %17, i64* nonnull %9, i8* %57, i64 %19, i8* %3, i64 %4, i32 1) #4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %70, label %60

60:                                               ; preds = %55
  %61 = load i64, i64* %9, align 8
  %62 = load i64, i64* %7, align 8
  %63 = icmp eq i64 %61, %62
  br i1 %63, label %64, label %70

64:                                               ; preds = %60
  %65 = load i8*, i8** %41, align 8
  %66 = load i8*, i8** %6, align 8
  %67 = sub i64 %61, %37
  %68 = call i32 @CRYPTO_memcmp(i8* %65, i8* %66, i64 %67) #4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %71, label %70

70:                                               ; preds = %64, %60, %55
  br label %71

71:                                               ; preds = %64, %70
  %72 = phi i32 [ 0, %70 ], [ 1, %64 ]
  %73 = load i32, i32* %8, align 4
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %77, label %75

75:                                               ; preds = %71
  %76 = load i8*, i8** %6, align 8
  call void @OPENSSL_free(i8* %76) #4
  br label %77

77:                                               ; preds = %71, %75
  %78 = icmp eq i32 %72, 0
  br i1 %78, label %88, label %79

79:                                               ; preds = %77
  %80 = icmp eq i64 %37, 0
  br i1 %80, label %87, label %81

81:                                               ; preds = %79
  %82 = load i8*, i8** %41, align 8
  %83 = load i64, i64* %9, align 8
  %84 = getelementptr inbounds i8, i8* %82, i64 %83
  %85 = sub i64 0, %37
  %86 = getelementptr inbounds i8, i8* %84, i64 %85
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %1, i8* align 1 %86, i64 %37, i1 false) #4
  br label %87

87:                                               ; preds = %79, %81
  store i64 %37, i64* %2, align 8
  br label %88

88:                                               ; preds = %77, %87
  %89 = phi i32 [ 1, %87 ], [ 0, %77 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #4
  br label %90

90:                                               ; preds = %44, %50, %88
  %91 = phi i32 [ %89, %88 ], [ 0, %50 ], [ 0, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %40) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #4
  br label %92

92:                                               ; preds = %34, %90, %32, %25, %21
  %93 = phi i32 [ 1, %21 ], [ 0, %25 ], [ %33, %32 ], [ %91, %90 ], [ 0, %34 ]
  ret i32 %93
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_rsa_encrypt(%struct.evp_pkey_ctx_st* nocapture readonly, i8*, i64*, i8*, i64) #0 {
  %6 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  %7 = bitcast i8** %6 to %struct.RSA_PKEY_CTX**
  %8 = load %struct.RSA_PKEY_CTX*, %struct.RSA_PKEY_CTX** %7, align 8
  %9 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 2
  %10 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %9, align 8
  %11 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %10, i64 0, i32 2
  %12 = bitcast %union.anon* %11 to %struct.rsa_st**
  %13 = load %struct.rsa_st*, %struct.rsa_st** %12, align 8
  %14 = tail call i32 @EVP_PKEY_size(%struct.evp_pkey_st* %10) #4
  %15 = sext i32 %14 to i64
  %16 = icmp eq i8* %1, null
  br i1 %16, label %17, label %18

17:                                               ; preds = %5
  store i64 %15, i64* %2, align 8
  br label %56

18:                                               ; preds = %5
  %19 = load i64, i64* %2, align 8
  %20 = icmp ult i64 %19, %15
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  tail call void @ERR_put_error(i32 6, i32 0, i32 100, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 319) #4
  br label %56

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %8, i64 0, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 4
  br i1 %25, label %26, label %54

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %8, i64 0, i32 6
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %30, label %36

30:                                               ; preds = %26
  %31 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %9, align 8
  %32 = tail call i32 @EVP_PKEY_size(%struct.evp_pkey_st* %31) #4
  %33 = sext i32 %32 to i64
  %34 = tail call i8* @OPENSSL_malloc(i64 %33) #4
  store i8* %34, i8** %27, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %56, label %36

36:                                               ; preds = %26, %30
  %37 = phi i8* [ %28, %26 ], [ %34, %30 ]
  %38 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %8, i64 0, i32 7
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %8, i64 0, i32 8
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %8, i64 0, i32 3
  %43 = load %struct.env_md_st*, %struct.env_md_st** %42, align 8
  %44 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %8, i64 0, i32 4
  %45 = load %struct.env_md_st*, %struct.env_md_st** %44, align 8
  %46 = tail call i32 @RSA_padding_add_PKCS1_OAEP_mgf1(i8* nonnull %37, i64 %15, i8* %3, i64 %4, i8* %39, i64 %41, %struct.env_md_st* %43, %struct.env_md_st* %45) #4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %56, label %48

48:                                               ; preds = %36
  %49 = load i64, i64* %2, align 8
  %50 = load i8*, i8** %27, align 8
  %51 = tail call i32 @RSA_encrypt(%struct.rsa_st* %13, i64* %2, i8* nonnull %1, i64 %49, i8* %50, i64 %15, i32 3) #4
  %52 = icmp ne i32 %51, 0
  %53 = zext i1 %52 to i32
  ret i32 %53

54:                                               ; preds = %22
  %55 = tail call i32 @RSA_encrypt(%struct.rsa_st* %13, i64* %2, i8* nonnull %1, i64 %19, i8* %3, i64 %4, i32 %24) #4
  br label %56

56:                                               ; preds = %30, %36, %54, %21, %17
  %57 = phi i32 [ 0, %21 ], [ %55, %54 ], [ 1, %17 ], [ 0, %36 ], [ 0, %30 ]
  ret i32 %57
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_rsa_decrypt(%struct.evp_pkey_ctx_st* nocapture readonly, i8*, i64*, i8*, i64) #0 {
  %6 = alloca i64, align 8
  %7 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  %8 = bitcast i8** %7 to %struct.RSA_PKEY_CTX**
  %9 = load %struct.RSA_PKEY_CTX*, %struct.RSA_PKEY_CTX** %8, align 8
  %10 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 2
  %11 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %10, align 8
  %12 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %11, i64 0, i32 2
  %13 = bitcast %union.anon* %12 to %struct.rsa_st**
  %14 = load %struct.rsa_st*, %struct.rsa_st** %13, align 8
  %15 = tail call i32 @EVP_PKEY_size(%struct.evp_pkey_st* %11) #4
  %16 = sext i32 %15 to i64
  %17 = icmp eq i8* %1, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %5
  store i64 %16, i64* %2, align 8
  br label %60

19:                                               ; preds = %5
  %20 = load i64, i64* %2, align 8
  %21 = icmp ult i64 %20, %16
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  tail call void @ERR_put_error(i32 6, i32 0, i32 100, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 351) #4
  br label %60

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 4
  br i1 %26, label %27, label %58

27:                                               ; preds = %23
  %28 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #4
  store i64 -6148914691236517206, i64* %6, align 8
  %29 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 6
  %30 = load i8*, i8** %29, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %32, label %38

32:                                               ; preds = %27
  %33 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %10, align 8
  %34 = tail call i32 @EVP_PKEY_size(%struct.evp_pkey_st* %33) #4
  %35 = sext i32 %34 to i64
  %36 = tail call i8* @OPENSSL_malloc(i64 %35) #4
  store i8* %36, i8** %29, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %56, label %38

38:                                               ; preds = %27, %32
  %39 = phi i8* [ %30, %27 ], [ %36, %32 ]
  %40 = call i32 @RSA_decrypt(%struct.rsa_st* %14, i64* nonnull %6, i8* nonnull %39, i64 %16, i8* %3, i64 %4, i32 3) #4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %56, label %42

42:                                               ; preds = %38
  %43 = load i8*, i8** %29, align 8
  %44 = load i64, i64* %6, align 8
  %45 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 7
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 8
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 3
  %50 = load %struct.env_md_st*, %struct.env_md_st** %49, align 8
  %51 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %9, i64 0, i32 4
  %52 = load %struct.env_md_st*, %struct.env_md_st** %51, align 8
  %53 = call i32 @RSA_padding_check_PKCS1_OAEP_mgf1(i8* nonnull %1, i64* %2, i64 %16, i8* %43, i64 %44, i8* %46, i64 %48, %struct.env_md_st* %50, %struct.env_md_st* %52) #4
  %54 = icmp ne i32 %53, 0
  %55 = zext i1 %54 to i32
  br label %56

56:                                               ; preds = %42, %32, %38
  %57 = phi i32 [ 0, %38 ], [ 0, %32 ], [ %55, %42 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #4
  br label %60

58:                                               ; preds = %23
  %59 = tail call i32 @RSA_decrypt(%struct.rsa_st* %14, i64* %2, i8* nonnull %1, i64 %16, i8* %3, i64 %4, i32 %25) #4
  br label %60

60:                                               ; preds = %58, %56, %22, %18
  %61 = phi i32 [ 0, %22 ], [ %57, %56 ], [ %59, %58 ], [ 1, %18 ]
  ret i32 %61
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_rsa_ctrl(%struct.evp_pkey_ctx_st* nocapture readonly, i32, i32, i8*) #0 {
  %5 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  %6 = bitcast i8** %5 to %struct.RSA_PKEY_CTX**
  %7 = load %struct.RSA_PKEY_CTX*, %struct.RSA_PKEY_CTX** %6, align 8
  switch i32 %1, label %143 [
    i32 4097, label %8
    i32 4098, label %39
    i32 4099, label %43
    i32 4100, label %43
    i32 4101, label %58
    i32 4102, label %63
    i32 4103, label %69
    i32 4104, label %69
    i32 1, label %83
    i32 2, label %93
    i32 4105, label %98
    i32 4106, label %98
    i32 4107, label %117
    i32 4108, label %132
  ]

8:                                                ; preds = %4
  switch i32 %2, label %27 [
    i32 1, label %9
    i32 3, label %9
    i32 4, label %9
    i32 6, label %9
  ]

9:                                                ; preds = %8, %8, %8, %8
  %10 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 3
  %11 = load %struct.env_md_st*, %struct.env_md_st** %10, align 8
  %12 = icmp ne %struct.env_md_st* %11, null
  %13 = icmp eq i32 %2, 3
  %14 = and i1 %13, %12
  br i1 %14, label %15, label %16

15:                                               ; preds = %9
  tail call void @ERR_put_error(i32 6, i32 0, i32 115, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 377) #4
  br label %27

16:                                               ; preds = %9
  switch i32 %2, label %28 [
    i32 6, label %17
    i32 4, label %22
  ]

17:                                               ; preds = %16
  %18 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 4
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, 24
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %33

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 4
  %24 = load i32, i32* %23, align 8
  %25 = and i32 %24, 192
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %33

27:                                               ; preds = %8, %15, %22, %17
  tail call void @ERR_put_error(i32 6, i32 0, i32 109, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 405) #4
  br label %144

28:                                               ; preds = %16
  %29 = or i32 %2, 2
  %30 = icmp eq i32 %29, 6
  %31 = icmp eq %struct.env_md_st* %11, null
  %32 = and i1 %30, %31
  br i1 %32, label %35, label %37

33:                                               ; preds = %22, %17
  %34 = icmp eq %struct.env_md_st* %11, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %28, %33
  %36 = tail call %struct.env_md_st* @EVP_sha1() #4
  store %struct.env_md_st* %36, %struct.env_md_st** %10, align 8
  br label %37

37:                                               ; preds = %28, %35, %33
  %38 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 2
  store i32 %2, i32* %38, align 8
  br label %144

39:                                               ; preds = %4
  %40 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 2
  %41 = load i32, i32* %40, align 8
  %42 = bitcast i8* %3 to i32*
  store i32 %41, i32* %42, align 4
  br label %144

43:                                               ; preds = %4, %4
  %44 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 2
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, 6
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  tail call void @ERR_put_error(i32 6, i32 0, i32 116, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 422) #4
  br label %144

48:                                               ; preds = %43
  %49 = icmp eq i32 %1, 4100
  br i1 %49, label %50, label %54

50:                                               ; preds = %48
  %51 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 5
  %52 = load i32, i32* %51, align 8
  %53 = bitcast i8* %3 to i32*
  store i32 %52, i32* %53, align 4
  br label %144

54:                                               ; preds = %48
  %55 = icmp slt i32 %2, -2
  br i1 %55, label %144, label %56

56:                                               ; preds = %54
  %57 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 5
  store i32 %2, i32* %57, align 8
  br label %144

58:                                               ; preds = %4
  %59 = icmp slt i32 %2, 256
  br i1 %59, label %60, label %61

60:                                               ; preds = %58
  tail call void @ERR_put_error(i32 6, i32 0, i32 112, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 437) #4
  br label %144

61:                                               ; preds = %58
  %62 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 0
  store i32 %2, i32* %62, align 8
  br label %144

63:                                               ; preds = %4
  %64 = icmp eq i8* %3, null
  br i1 %64, label %144, label %65

65:                                               ; preds = %63
  %66 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 1
  %67 = load %struct.bignum_st*, %struct.bignum_st** %66, align 8
  tail call void @BN_free(%struct.bignum_st* %67) #4
  %68 = bitcast %struct.bignum_st** %66 to i8**
  store i8* %3, i8** %68, align 8
  br label %144

69:                                               ; preds = %4, %4
  %70 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 2
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 4
  br i1 %72, label %74, label %73

73:                                               ; preds = %69
  tail call void @ERR_put_error(i32 6, i32 0, i32 115, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 454) #4
  br label %144

74:                                               ; preds = %69
  %75 = icmp eq i32 %1, 4104
  %76 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 3
  br i1 %75, label %77, label %81

77:                                               ; preds = %74
  %78 = bitcast %struct.env_md_st** %76 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast i8* %3 to i64*
  store i64 %79, i64* %80, align 8
  br label %144

81:                                               ; preds = %74
  %82 = bitcast %struct.env_md_st** %76 to i8**
  store i8* %3, i8** %82, align 8
  br label %144

83:                                               ; preds = %4
  %84 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 2
  %85 = load i32, i32* %84, align 8
  %86 = icmp ne i8* %3, null
  %87 = icmp eq i32 %85, 3
  %88 = and i1 %86, %87
  br i1 %88, label %89, label %90

89:                                               ; preds = %83
  tail call void @ERR_put_error(i32 6, i32 0, i32 115, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 377) #4
  br label %144

90:                                               ; preds = %83
  %91 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 3
  %92 = bitcast %struct.env_md_st** %91 to i8**
  store i8* %3, i8** %92, align 8
  br label %144

93:                                               ; preds = %4
  %94 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 3
  %95 = bitcast %struct.env_md_st** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = bitcast i8* %3 to i64*
  store i64 %96, i64* %97, align 8
  br label %144

98:                                               ; preds = %4, %4
  %99 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 2
  %100 = load i32, i32* %99, align 8
  switch i32 %100, label %101 [
    i32 6, label %102
    i32 4, label %102
  ]

101:                                              ; preds = %98
  tail call void @ERR_put_error(i32 6, i32 0, i32 113, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 479) #4
  br label %144

102:                                              ; preds = %98, %98
  %103 = icmp eq i32 %1, 4106
  %104 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 4
  br i1 %103, label %105, label %115

105:                                              ; preds = %102
  %106 = load %struct.env_md_st*, %struct.env_md_st** %104, align 8
  %107 = icmp eq %struct.env_md_st* %106, null
  br i1 %107, label %110, label %108

108:                                              ; preds = %105
  %109 = bitcast i8* %3 to %struct.env_md_st**
  store %struct.env_md_st* %106, %struct.env_md_st** %109, align 8
  br label %144

110:                                              ; preds = %105
  %111 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 3
  %112 = bitcast %struct.env_md_st** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i8* %3 to i64*
  store i64 %113, i64* %114, align 8
  br label %144

115:                                              ; preds = %102
  %116 = bitcast %struct.env_md_st** %104 to i8**
  store i8* %3, i8** %116, align 8
  br label %144

117:                                              ; preds = %4
  %118 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 2
  %119 = load i32, i32* %118, align 8
  %120 = icmp eq i32 %119, 4
  br i1 %120, label %122, label %121

121:                                              ; preds = %117
  tail call void @ERR_put_error(i32 6, i32 0, i32 115, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 495) #4
  br label %144

122:                                              ; preds = %117
  %123 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 7
  %124 = load i8*, i8** %123, align 8
  tail call void @OPENSSL_free(i8* %124) #4
  %125 = bitcast i8* %3 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = bitcast i8** %123 to i64*
  store i64 %126, i64* %127, align 8
  %128 = getelementptr inbounds i8, i8* %3, i64 8
  %129 = bitcast i8* %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 8
  store i64 %130, i64* %131, align 8
  br label %144

132:                                              ; preds = %4
  %133 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 2
  %134 = load i32, i32* %133, align 8
  %135 = icmp eq i32 %134, 4
  br i1 %135, label %137, label %136

136:                                              ; preds = %132
  tail call void @ERR_put_error(i32 6, i32 0, i32 115, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 507) #4
  br label %144

137:                                              ; preds = %132
  %138 = bitcast i8* %3 to %struct.cbs_st*
  %139 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 7
  %140 = load i8*, i8** %139, align 8
  %141 = getelementptr inbounds %struct.RSA_PKEY_CTX, %struct.RSA_PKEY_CTX* %7, i64 0, i32 8
  %142 = load i64, i64* %141, align 8
  tail call void @CBS_init(%struct.cbs_st* %138, i8* %140, i64 %142) #4
  br label %144

143:                                              ; preds = %4
  tail call void @ERR_put_error(i32 6, i32 0, i32 101, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 514) #4
  br label %144

144:                                              ; preds = %89, %115, %110, %108, %77, %81, %63, %50, %56, %54, %143, %137, %136, %122, %121, %101, %93, %90, %73, %65, %61, %60, %47, %39, %37, %27
  %145 = phi i32 [ 0, %143 ], [ 0, %136 ], [ 1, %137 ], [ 0, %121 ], [ 1, %122 ], [ 0, %101 ], [ 1, %93 ], [ 1, %90 ], [ 0, %73 ], [ 1, %65 ], [ 0, %60 ], [ 1, %61 ], [ 0, %47 ], [ 1, %39 ], [ 0, %27 ], [ 1, %37 ], [ 0, %54 ], [ 1, %56 ], [ 1, %50 ], [ 0, %63 ], [ 1, %81 ], [ 1, %77 ], [ 1, %108 ], [ 1, %110 ], [ 1, %115 ], [ 0, %89 ]
  ret i32 %145
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_set_rsa_padding(%struct.evp_pkey_ctx_st*, i32) local_unnamed_addr #0 {
  %3 = tail call i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st* %0, i32 6, i32 -1, i32 4097, i32 %1, i8* null) #4
  ret i32 %3
}

declare i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st*, i32, i32, i32, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_get_rsa_padding(%struct.evp_pkey_ctx_st*, i32*) local_unnamed_addr #0 {
  %3 = bitcast i32* %1 to i8*
  %4 = tail call i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st* %0, i32 6, i32 -1, i32 4098, i32 0, i8* %3) #4
  ret i32 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @EVP_PKEY_CTX_set_rsa_pss_keygen_md(%struct.evp_pkey_ctx_st* nocapture readnone, %struct.env_md_st* nocapture readnone) local_unnamed_addr #2 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(%struct.evp_pkey_ctx_st* nocapture readnone, i32) local_unnamed_addr #2 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(%struct.evp_pkey_ctx_st* nocapture readnone, %struct.env_md_st* nocapture readnone) local_unnamed_addr #2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_set_rsa_pss_saltlen(%struct.evp_pkey_ctx_st*, i32) local_unnamed_addr #0 {
  %3 = tail call i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st* %0, i32 6, i32 24, i32 4099, i32 %1, i8* null) #4
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_get_rsa_pss_saltlen(%struct.evp_pkey_ctx_st*, i32*) local_unnamed_addr #0 {
  %3 = bitcast i32* %1 to i8*
  %4 = tail call i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st* %0, i32 6, i32 24, i32 4100, i32 0, i8* %3) #4
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_set_rsa_keygen_bits(%struct.evp_pkey_ctx_st*, i32) local_unnamed_addr #0 {
  %3 = tail call i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st* %0, i32 6, i32 4, i32 4101, i32 %1, i8* null) #4
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_set_rsa_keygen_pubexp(%struct.evp_pkey_ctx_st*, %struct.bignum_st*) local_unnamed_addr #0 {
  %3 = bitcast %struct.bignum_st* %1 to i8*
  %4 = tail call i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st* %0, i32 6, i32 4, i32 4102, i32 0, i8* %3) #4
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_set_rsa_oaep_md(%struct.evp_pkey_ctx_st*, %struct.env_md_st*) local_unnamed_addr #0 {
  %3 = bitcast %struct.env_md_st* %1 to i8*
  %4 = tail call i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st* %0, i32 6, i32 192, i32 4103, i32 0, i8* %3) #4
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_get_rsa_oaep_md(%struct.evp_pkey_ctx_st*, %struct.env_md_st**) local_unnamed_addr #0 {
  %3 = bitcast %struct.env_md_st** %1 to i8*
  %4 = tail call i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st* %0, i32 6, i32 192, i32 4104, i32 0, i8* %3) #4
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_set_rsa_mgf1_md(%struct.evp_pkey_ctx_st*, %struct.env_md_st*) local_unnamed_addr #0 {
  %3 = bitcast %struct.env_md_st* %1 to i8*
  %4 = tail call i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st* %0, i32 6, i32 248, i32 4105, i32 0, i8* %3) #4
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_get_rsa_mgf1_md(%struct.evp_pkey_ctx_st*, %struct.env_md_st**) local_unnamed_addr #0 {
  %3 = bitcast %struct.env_md_st** %1 to i8*
  %4 = tail call i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st* %0, i32 6, i32 248, i32 4106, i32 0, i8* %3) #4
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_set0_rsa_oaep_label(%struct.evp_pkey_ctx_st*, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca %struct.RSA_OAEP_LABEL_PARAMS, align 8
  %5 = bitcast %struct.RSA_OAEP_LABEL_PARAMS* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #4
  %6 = getelementptr inbounds %struct.RSA_OAEP_LABEL_PARAMS, %struct.RSA_OAEP_LABEL_PARAMS* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.RSA_OAEP_LABEL_PARAMS, %struct.RSA_OAEP_LABEL_PARAMS* %4, i64 0, i32 1
  store i8* %1, i8** %6, align 8
  store i64 %2, i64* %7, align 8
  %8 = call i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st* %0, i32 6, i32 192, i32 4107, i32 0, i8* nonnull %5) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #4
  ret i32 %8
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_get0_rsa_oaep_label(%struct.evp_pkey_ctx_st*, i8** nocapture) local_unnamed_addr #0 {
  %3 = alloca %struct.cbs_st, align 8
  %4 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #4
  %5 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 16, i1 false)
  %6 = call i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st* %0, i32 6, i32 192, i32 4108, i32 0, i8* nonnull %4) #4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %16, label %8

8:                                                ; preds = %2
  %9 = call i64 @CBS_len(%struct.cbs_st* nonnull %3) #4
  %10 = icmp ugt i64 %9, 2147483647
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  call void @ERR_put_error(i32 6, i32 0, i32 69, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 643) #4
  br label %16

12:                                               ; preds = %8
  %13 = call i8* @CBS_data(%struct.cbs_st* nonnull %3) #4
  store i8* %13, i8** %1, align 8
  %14 = call i64 @CBS_len(%struct.cbs_st* nonnull %3) #4
  %15 = trunc i64 %14 to i32
  br label %16

16:                                               ; preds = %2, %12, %11
  %17 = phi i32 [ -1, %11 ], [ %15, %12 ], [ -1, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #4
  ret i32 %17
}

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare i8* @CBS_data(%struct.cbs_st*) local_unnamed_addr #1

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare %struct.bignum_st* @BN_dup(%struct.bignum_st*) local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

declare i8* @OPENSSL_memdup(i8*, i64) local_unnamed_addr #1

declare void @BN_free(%struct.bignum_st*) local_unnamed_addr #1

declare %struct.bignum_st* @BN_new() local_unnamed_addr #1

declare i32 @BN_set_word(%struct.bignum_st*, i64) local_unnamed_addr #1

declare %struct.rsa_st* @RSA_new() local_unnamed_addr #1

declare i32 @RSA_generate_key_ex(%struct.rsa_st*, i32, %struct.bignum_st*, %struct.bn_gencb_st*) local_unnamed_addr #1

declare void @RSA_free(%struct.rsa_st*) local_unnamed_addr #1

declare i32 @EVP_PKEY_assign_RSA(%struct.evp_pkey_st*, %struct.rsa_st*) local_unnamed_addr #1

declare i32 @EVP_PKEY_size(%struct.evp_pkey_st*) local_unnamed_addr #1

declare i32 @RSA_sign(i32, i8*, i32, i8*, i32*, %struct.rsa_st*) local_unnamed_addr #1

declare i32 @EVP_MD_type(%struct.env_md_st*) local_unnamed_addr #1

declare i32 @RSA_sign_pss_mgf1(%struct.rsa_st*, i64*, i8*, i64, i8*, i64, %struct.env_md_st*, %struct.env_md_st*, i32) local_unnamed_addr #1

declare i32 @RSA_sign_raw(%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32) local_unnamed_addr #1

declare i32 @RSA_verify(i32, i8*, i64, i8*, i64, %struct.rsa_st*) local_unnamed_addr #1

declare i32 @RSA_verify_pss_mgf1(%struct.rsa_st*, i8*, i64, %struct.env_md_st*, %struct.env_md_st*, i32, i8*, i64) local_unnamed_addr #1

declare i32 @RSA_verify_raw(%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32) local_unnamed_addr #1

declare i32 @CRYPTO_memcmp(i8*, i8*, i64) local_unnamed_addr #1

declare i64 @EVP_MD_size(%struct.env_md_st*) local_unnamed_addr #1

declare i32 @RSA_add_pkcs1_prefix(i8**, i64*, i32*, i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare i32 @RSA_padding_add_PKCS1_OAEP_mgf1(i8*, i64, i8*, i64, i8*, i64, %struct.env_md_st*, %struct.env_md_st*) local_unnamed_addr #1

declare i32 @RSA_encrypt(%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32) local_unnamed_addr #1

declare i32 @RSA_decrypt(%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32) local_unnamed_addr #1

declare i32 @RSA_padding_check_PKCS1_OAEP_mgf1(i8*, i64*, i64, i8*, i64, i8*, i64, %struct.env_md_st*, %struct.env_md_st*) local_unnamed_addr #1

declare %struct.env_md_st* @EVP_sha1() local_unnamed_addr #1

declare void @CBS_init(%struct.cbs_st*, i8*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
