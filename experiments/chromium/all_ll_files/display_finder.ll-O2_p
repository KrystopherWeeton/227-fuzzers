; ModuleID = '../../ui/display/display_finder.cc'
source_filename = "../../ui/display/display_finder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.display::Display" = type { i64, %"class.gfx::Rect", %"class.gfx::Size", %"class.gfx::Rect", float, i32, %"class.absl::optional", i32, i32, %"class.gfx::Size", %"class.gfx::DisplayColorSpaces", i32, i32, i8, i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::DisplayColorSpaces" = type { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, %"class.absl::optional.0" }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.absl::optional.0" = type { %"class.absl::optional_internal::optional_data.1" }
%"class.absl::optional_internal::optional_data.1" = type { %"class.absl::optional_internal::optional_data_base.2" }
%"class.absl::optional_internal::optional_data_base.2" = type { %"class.absl::optional_internal::optional_data_dtor_base.3" }
%"class.absl::optional_internal::optional_data_dtor_base.3" = type { i8, %union.anon.4 }
%union.anon.4 = type { %"struct.gfx::HDRStaticMetadata" }
%"struct.gfx::HDRStaticMetadata" = type { double, double, double }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.display::Display"*, %"class.display::Display"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.display::Display"* }

; Function Attrs: nounwind ssp uwtable
define hidden %"class.display::Display"* @_ZN7display23FindDisplayNearestPointERKNSt3__16vectorINS_7DisplayENS0_9allocatorIS2_EEEERKN3gfx5PointE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), %"class.gfx::Point"* dereferenceable(8)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.display::Display"*, %"class.display::Display"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.display::Display"*, %"class.display::Display"** %5, align 8
  %7 = bitcast %"class.gfx::Point"* %1 to i64*
  %8 = load i64, i64* %7, align 4
  %9 = trunc i64 %8 to i32
  %10 = lshr i64 %8, 32
  %11 = trunc i64 %10 to i32
  %12 = icmp eq %"class.display::Display"* %4, %6
  br i1 %12, label %24, label %13

13:                                               ; preds = %2, %17
  %14 = phi %"class.display::Display"* [ %18, %17 ], [ %4, %2 ]
  %15 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %14, i64 0, i32 1
  %16 = tail call zeroext i1 @_ZNK3gfx4Rect8ContainsEii(%"class.gfx::Rect"* %15, i32 %9, i32 %11) #2
  br i1 %16, label %20, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %14, i64 1
  %19 = icmp eq %"class.display::Display"* %18, %6
  br i1 %19, label %20, label %13

20:                                               ; preds = %13, %17
  %21 = phi %"class.display::Display"* [ %14, %13 ], [ %6, %17 ]
  %22 = load %"class.display::Display"*, %"class.display::Display"** %5, align 8
  %23 = icmp eq %"class.display::Display"* %21, %22
  br i1 %23, label %24, label %39

24:                                               ; preds = %2, %20
  %25 = phi %"class.display::Display"* [ %22, %20 ], [ %4, %2 ]
  %26 = load %"class.display::Display"*, %"class.display::Display"** %3, align 8
  %27 = icmp eq %"class.display::Display"* %26, %25
  br i1 %27, label %39, label %28

28:                                               ; preds = %24, %28
  %29 = phi %"class.display::Display"* [ %36, %28 ], [ null, %24 ]
  %30 = phi i32 [ %35, %28 ], [ 2147483647, %24 ]
  %31 = phi %"class.display::Display"* [ %37, %28 ], [ %26, %24 ]
  %32 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %31, i64 0, i32 1
  %33 = tail call i32 @_ZNK3gfx4Rect24ManhattanDistanceToPointERKNS_5PointE(%"class.gfx::Rect"* %32, %"class.gfx::Point"* dereferenceable(8) %1) #2
  %34 = icmp slt i32 %33, %30
  %35 = select i1 %34, i32 %33, i32 %30
  %36 = select i1 %34, %"class.display::Display"* %31, %"class.display::Display"* %29
  %37 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %31, i64 1
  %38 = icmp eq %"class.display::Display"* %37, %25
  br i1 %38, label %39, label %28

39:                                               ; preds = %28, %24, %20
  %40 = phi %"class.display::Display"* [ %21, %20 ], [ null, %24 ], [ %36, %28 ]
  ret %"class.display::Display"* %40
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.display::Display"* @_ZN7display26FindDisplayContainingPointERKNSt3__16vectorINS_7DisplayENS0_9allocatorIS2_EEEERKN3gfx5PointE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), %"class.gfx::Point"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.display::Display"*, %"class.display::Display"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.display::Display"*, %"class.display::Display"** %5, align 8
  %7 = bitcast %"class.gfx::Point"* %1 to i64*
  %8 = load i64, i64* %7, align 4
  %9 = trunc i64 %8 to i32
  %10 = lshr i64 %8, 32
  %11 = trunc i64 %10 to i32
  %12 = icmp eq %"class.display::Display"* %4, %6
  br i1 %12, label %20, label %13

13:                                               ; preds = %2, %17
  %14 = phi %"class.display::Display"* [ %18, %17 ], [ %4, %2 ]
  %15 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %14, i64 0, i32 1
  %16 = tail call zeroext i1 @_ZNK3gfx4Rect8ContainsEii(%"class.gfx::Rect"* %15, i32 %9, i32 %11) #2
  br i1 %16, label %20, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %14, i64 1
  %19 = icmp eq %"class.display::Display"* %18, %6
  br i1 %19, label %20, label %13

20:                                               ; preds = %13, %17, %2
  %21 = phi %"class.display::Display"* [ %4, %2 ], [ %14, %13 ], [ %6, %17 ]
  ret %"class.display::Display"* %21
}

declare i32 @_ZNK3gfx4Rect24ManhattanDistanceToPointERKNS_5PointE(%"class.gfx::Rect"*, %"class.gfx::Point"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.display::Display"* @_ZN7display34FindDisplayWithBiggestIntersectionERKNSt3__16vectorINS_7DisplayENS0_9allocatorIS2_EEEERKN3gfx4RectE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.display::Display"*, %"class.display::Display"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.display::Display"*, %"class.display::Display"** %5, align 8
  %7 = icmp eq %"class.display::Display"* %4, %6
  br i1 %7, label %8, label %10

8:                                                ; preds = %10, %2
  %9 = phi %"class.display::Display"* [ null, %2 ], [ %22, %10 ]
  ret %"class.display::Display"* %9

10:                                               ; preds = %2, %10
  %11 = phi i32 [ %23, %10 ], [ 0, %2 ]
  %12 = phi %"class.display::Display"* [ %22, %10 ], [ null, %2 ]
  %13 = phi %"class.display::Display"* [ %24, %10 ], [ %4, %2 ]
  %14 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %13, i64 0, i32 1
  %15 = tail call { i64, i64 } @_ZN3gfx14IntersectRectsERKNS_4RectES2_(%"class.gfx::Rect"* dereferenceable(16) %14, %"class.gfx::Rect"* dereferenceable(16) %1) #2
  %16 = extractvalue { i64, i64 } %15, 1
  %17 = trunc i64 %16 to i32
  %18 = lshr i64 %16, 32
  %19 = trunc i64 %18 to i32
  %20 = mul nsw i32 %19, %17
  %21 = icmp sgt i32 %20, %11
  %22 = select i1 %21, %"class.display::Display"* %13, %"class.display::Display"* %12
  %23 = select i1 %21, i32 %20, i32 %11
  %24 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %13, i64 1
  %25 = icmp eq %"class.display::Display"* %24, %6
  br i1 %25, label %8, label %10
}

declare { i64, i64 } @_ZN3gfx14IntersectRectsERKNS_4RectES2_(%"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1

declare zeroext i1 @_ZNK3gfx4Rect8ContainsEii(%"class.gfx::Rect"*, i32, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
