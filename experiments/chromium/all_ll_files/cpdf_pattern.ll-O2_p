; ModuleID = '../../third_party/pdfium/core/fpdfapi/page/cpdf_pattern.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/page/cpdf_pattern.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CPDF_Pattern = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr", %"class.fxcrt::RetainPtr", %class.CFX_Matrix, %class.CFX_Matrix }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.fxcrt::UnownedPtr" = type { %class.CPDF_Document* }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.CPDF_Object* }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%class.CPDF_Document = type opaque
%class.CPDF_Object = type { %"class.fxcrt::Retainable", i32, i32 }
%class.CPDF_TilingPattern = type opaque
%class.CPDF_ShadingPattern = type opaque
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.22" }
%"class.fxcrt::RetainPtr.22" = type { %"class.std::__1::unique_ptr.23" }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%class.CPDF_Dictionary = type { %class.CPDF_Object, i32, %"class.fxcrt::WeakPtr", %"class.std::__1::map" }
%"class.fxcrt::WeakPtr" = type { %"class.fxcrt::RetainPtr.7" }
%"class.fxcrt::RetainPtr.7" = type { %"class.std::__1::unique_ptr.8" }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle"* }
%"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle" = type { i64, %"class.std::__1::unique_ptr.28" }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.fxcrt::StringPoolTemplate"* }
%"class.fxcrt::StringPoolTemplate" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.31", %"class.std::__1::__compressed_pair.39", %"class.std::__1::__compressed_pair.44", %"class.std::__1::__compressed_pair.46", [4 x i8] }>
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33", %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { float }
%"class.std::__1::map" = type { %"class.std::__1::__tree.13" }
%"class.std::__1::__tree.13" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.2" }

$_ZN5fxcrt10RetainableD2Ev = comdat any

$_ZN5fxcrt10RetainableD0Ev = comdat any

$_ZTVN5fxcrt10RetainableE = comdat any

@_ZTV12CPDF_Pattern = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CPDF_Pattern*)* @_ZN12CPDF_PatternD2Ev to i8*), i8* bitcast (void (%class.CPDF_Pattern*)* @_ZN12CPDF_PatternD0Ev to i8*), i8* bitcast (%class.CPDF_TilingPattern* (%class.CPDF_Pattern*)* @_ZN12CPDF_Pattern15AsTilingPatternEv to i8*), i8* bitcast (%class.CPDF_ShadingPattern* (%class.CPDF_Pattern*)* @_ZN12CPDF_Pattern16AsShadingPatternEv to i8*)] }, align 8
@.str = private unnamed_addr constant [7 x i8] c"Matrix\00", align 1
@_ZTVN5fxcrt10RetainableE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.fxcrt::Retainable"*)* @_ZN5fxcrt10RetainableD2Ev to i8*), i8* bitcast (void (%"class.fxcrt::Retainable"*)* @_ZN5fxcrt10RetainableD0Ev to i8*)] }, comdat, align 8

@_ZN12CPDF_PatternC1EP13CPDF_DocumentP11CPDF_ObjectRK10CFX_Matrix = hidden unnamed_addr alias void (%class.CPDF_Pattern*, %class.CPDF_Document*, %class.CPDF_Object*, %class.CFX_Matrix*), void (%class.CPDF_Pattern*, %class.CPDF_Document*, %class.CPDF_Object*, %class.CFX_Matrix*)* @_ZN12CPDF_PatternC2EP13CPDF_DocumentP11CPDF_ObjectRK10CFX_Matrix
@_ZN12CPDF_PatternD1Ev = hidden unnamed_addr alias void (%class.CPDF_Pattern*), void (%class.CPDF_Pattern*)* @_ZN12CPDF_PatternD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CPDF_PatternC2EP13CPDF_DocumentP11CPDF_ObjectRK10CFX_Matrix(%class.CPDF_Pattern*, %class.CPDF_Document*, %class.CPDF_Object*, %class.CFX_Matrix* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5fxcrt10RetainableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 0, i32 1
  store i64 0, i64* %6, align 8
  %7 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10ObservableC2Ev(%"class.fxcrt::Observable"* %7) #6
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV12CPDF_Pattern, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %8 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 2, i32 0
  store %class.CPDF_Document* %1, %class.CPDF_Document** %8, align 8
  %9 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 3
  %10 = ptrtoint %class.CPDF_Object* %2 to i64
  %11 = bitcast %"class.fxcrt::RetainPtr"* %9 to i64*
  store i64 %10, i64* %11, align 8
  %12 = icmp eq %class.CPDF_Object* %2, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %class.CPDF_Object, %class.CPDF_Object* %2, i64 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = add nsw i64 %15, 1
  store i64 %16, i64* %14, align 8
  br label %17

17:                                               ; preds = %4, %13
  %18 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 4, i32 0
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %19, align 4
  %20 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 4, i32 4
  store float 0.000000e+00, float* %20, align 4
  %21 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 4, i32 5
  store float 0.000000e+00, float* %21, align 4
  %22 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 5
  %23 = bitcast %class.CFX_Matrix* %22 to i8*
  %24 = bitcast %class.CFX_Matrix* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 4 %24, i64 24, i1 false)
  ret void
}

declare void @_ZN5fxcrt10ObservableC2Ev(%"class.fxcrt::Observable"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CPDF_PatternD2Ev(%class.CPDF_Pattern*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV12CPDF_Pattern, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CPDF_Object*, %class.CPDF_Object** %3, align 8
  store %class.CPDF_Object* null, %class.CPDF_Object** %3, align 8
  %5 = icmp eq %class.CPDF_Object* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.CPDF_Object, %class.CPDF_Object* %4, i64 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, -1
  store i64 %9, i64* %7, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr inbounds %class.CPDF_Object, %class.CPDF_Object* %4, i64 0, i32 0
  %13 = bitcast %class.CPDF_Object* %4 to void (%"class.fxcrt::Retainable"*)***
  %14 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, i64 1
  %16 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %15, align 8
  tail call void %16(%"class.fxcrt::Retainable"* nonnull %12) #6
  br label %17

17:                                               ; preds = %1, %6, %11
  %18 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10ObservableD2Ev(%"class.fxcrt::Observable"* %18) #6
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ObservableD2Ev(%"class.fxcrt::Observable"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CPDF_PatternD0Ev(%class.CPDF_Pattern*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV12CPDF_Pattern, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CPDF_Object*, %class.CPDF_Object** %3, align 8
  store %class.CPDF_Object* null, %class.CPDF_Object** %3, align 8
  %5 = icmp eq %class.CPDF_Object* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.CPDF_Object, %class.CPDF_Object* %4, i64 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, -1
  store i64 %9, i64* %7, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr inbounds %class.CPDF_Object, %class.CPDF_Object* %4, i64 0, i32 0
  %13 = bitcast %class.CPDF_Object* %4 to void (%"class.fxcrt::Retainable"*)***
  %14 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, i64 1
  %16 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %15, align 8
  tail call void %16(%"class.fxcrt::Retainable"* nonnull %12) #6
  br label %17

17:                                               ; preds = %1, %6, %11
  %18 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10ObservableD2Ev(%"class.fxcrt::Observable"* %18) #6
  %19 = bitcast %class.CPDF_Pattern* %0 to i8*
  tail call void @_ZdlPv(i8* %19) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %class.CPDF_TilingPattern* @_ZN12CPDF_Pattern15AsTilingPatternEv(%class.CPDF_Pattern* nocapture readnone) unnamed_addr #5 align 2 {
  ret %class.CPDF_TilingPattern* null
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %class.CPDF_ShadingPattern* @_ZN12CPDF_Pattern16AsShadingPatternEv(%class.CPDF_Pattern* nocapture readnone) unnamed_addr #5 align 2 {
  ret %class.CPDF_ShadingPattern* null
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CPDF_Pattern22SetPatternToFormMatrixEv(%class.CPDF_Pattern* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.CFX_Matrix, align 4
  %3 = alloca %"class.fxcrt::ByteString", align 8
  %4 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %5 = load %class.CPDF_Object*, %class.CPDF_Object** %4, align 8
  %6 = bitcast %class.CPDF_Object* %5 to %class.CPDF_Dictionary* (%class.CPDF_Object*)***
  %7 = load %class.CPDF_Dictionary* (%class.CPDF_Object*)**, %class.CPDF_Dictionary* (%class.CPDF_Object*)*** %6, align 8
  %8 = getelementptr inbounds %class.CPDF_Dictionary* (%class.CPDF_Object*)*, %class.CPDF_Dictionary* (%class.CPDF_Object*)** %7, i64 11
  %9 = load %class.CPDF_Dictionary* (%class.CPDF_Object*)*, %class.CPDF_Dictionary* (%class.CPDF_Object*)** %8, align 8
  %10 = tail call %class.CPDF_Dictionary* %9(%class.CPDF_Object* %5) #6
  %11 = bitcast %class.CFX_Matrix* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #6
  %12 = bitcast %"class.fxcrt::ByteString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #6
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)) #6
  call void @_ZNK15CPDF_Dictionary12GetMatrixForERKN5fxcrt10ByteStringE(%class.CFX_Matrix* nonnull sret %2, %class.CPDF_Dictionary* %10, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %3) #6
  %13 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 0
  %14 = load float, float* %13, align 4, !noalias !2
  %15 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 5, i32 0
  %16 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 1
  %17 = load float, float* %16, align 4, !noalias !2
  %18 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 5, i32 2
  %19 = bitcast float* %15 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4, !noalias !2
  %21 = shufflevector <2 x float> %20, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %22 = bitcast float* %18 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4, !noalias !2
  %24 = shufflevector <2 x float> %23, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 2
  %26 = load float, float* %25, align 4, !noalias !2
  %27 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 3
  %28 = load float, float* %27, align 4, !noalias !2
  %29 = insertelement <4 x float> undef, float %14, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %31 = extractelement <2 x float> %20, i32 0
  %32 = extractelement <2 x float> %20, i32 1
  %33 = shufflevector <4 x float> %30, <4 x float> %21, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = insertelement <4 x float> undef, float %31, i32 0
  %35 = insertelement <4 x float> %34, float %32, i32 1
  %36 = insertelement <4 x float> %35, float %26, i32 2
  %37 = insertelement <4 x float> %36, float %26, i32 3
  %38 = fmul <4 x float> %33, %37
  %39 = insertelement <4 x float> undef, float %17, i32 0
  %40 = shufflevector <4 x float> %39, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %41 = extractelement <2 x float> %23, i32 0
  %42 = extractelement <2 x float> %23, i32 1
  %43 = shufflevector <4 x float> %40, <4 x float> %24, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %44 = insertelement <4 x float> undef, float %41, i32 0
  %45 = insertelement <4 x float> %44, float %42, i32 1
  %46 = insertelement <4 x float> %45, float %28, i32 2
  %47 = insertelement <4 x float> %46, float %28, i32 3
  %48 = fmul <4 x float> %43, %47
  %49 = fadd <4 x float> %38, %48
  %50 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 4
  %51 = load float, float* %50, align 4, !noalias !2
  %52 = fmul float %31, %51
  %53 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 5
  %54 = load float, float* %53, align 4, !noalias !2
  %55 = fmul float %41, %54
  %56 = fadd float %52, %55
  %57 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 5, i32 4
  %58 = load float, float* %57, align 4, !noalias !2
  %59 = fadd float %58, %56
  %60 = fmul float %32, %51
  %61 = fmul float %42, %54
  %62 = fadd float %60, %61
  %63 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 5, i32 5
  %64 = load float, float* %63, align 4, !noalias !2
  %65 = fadd float %62, %64
  %66 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 4, i32 0
  %67 = bitcast float* %66 to <4 x float>*
  store <4 x float> %49, <4 x float>* %67, align 8
  %68 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 4, i32 4
  store float %59, float* %68, align 8
  %69 = getelementptr inbounds %class.CPDF_Pattern, %class.CPDF_Pattern* %0, i64 0, i32 4, i32 5
  store float %65, float* %69, align 4
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZNK15CPDF_Dictionary12GetMatrixForERKN5fxcrt10ByteStringE(%class.CFX_Matrix* sret, %class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

declare void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"*, i8*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5fxcrt10RetainableD2Ev(%"class.fxcrt::Retainable"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5fxcrt10RetainableD0Ev(%"class.fxcrt::Retainable"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.fxcrt::Retainable"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!4 = distinct !{!4, !"_ZNK10CFX_MatrixmlERKS_"}
