; ModuleID = '../../v8/src/heap/code-object-registry.cc'
source_filename = "../../v8/src/heap/code-object-registry.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::__less" = type { i8 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18CodeObjectRegistry32RegisterNewlyAllocatedCodeObjectEm(%"class.v8::internal::CodeObjectRegistry"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load i64*, i64** %7, align 8
  br label %22

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 0
  %11 = load i64*, i64** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i64*, i64** %12, align 8
  %14 = icmp eq i64* %11, %13
  br i1 %14, label %20, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds i64, i64* %13, i64 -1
  %17 = load i64, i64* %16, align 8
  %18 = icmp ult i64 %17, %1
  %19 = zext i1 %18 to i8
  br label %20

20:                                               ; preds = %15, %9
  %21 = phi i8 [ 1, %9 ], [ %19, %15 ]
  store i8 %21, i8* %3, align 8
  br label %22

22:                                               ; preds = %6, %20
  %23 = phi i64* [ %8, %6 ], [ %13, %20 ]
  %24 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %26 = load i64*, i64** %25, align 8
  %27 = icmp eq i64* %23, %26
  br i1 %27, label %32, label %28

28:                                               ; preds = %22
  store i64 %1, i64* %23, align 8
  %29 = getelementptr inbounds i64, i64* %23, i64 1
  %30 = ptrtoint i64* %29 to i64
  %31 = bitcast i64** %24 to i64*
  store i64 %30, i64* %31, align 8
  br label %86

32:                                               ; preds = %22
  %33 = ptrtoint i64* %26 to i64
  %34 = bitcast i64** %24 to i64*
  %35 = bitcast %"class.v8::internal::CodeObjectRegistry"* %0 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %33, %36
  %38 = ashr exact i64 %37, 3
  %39 = add nsw i64 %38, 1
  %40 = icmp ugt i64 %39, 2305843009213693951
  br i1 %40, label %41, label %43

41:                                               ; preds = %32
  %42 = bitcast %"class.v8::internal::CodeObjectRegistry"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %42) #8
  unreachable

43:                                               ; preds = %32
  %44 = bitcast i64** %25 to i64*
  %45 = icmp ult i64 %38, 1152921504606846975
  br i1 %45, label %46, label %54

46:                                               ; preds = %43
  %47 = ashr exact i64 %37, 2
  %48 = icmp ult i64 %47, %39
  %49 = select i1 %48, i64 %39, i64 %47
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %59, label %51

51:                                               ; preds = %46
  %52 = icmp ugt i64 %49, 2305843009213693951
  br i1 %52, label %53, label %54

53:                                               ; preds = %51
  tail call void @abort() #8
  unreachable

54:                                               ; preds = %51, %43
  %55 = phi i64 [ %49, %51 ], [ 2305843009213693951, %43 ]
  %56 = shl i64 %55, 3
  %57 = tail call i8* @_Znwm(i64 %56) #9
  %58 = bitcast i8* %57 to i64*
  br label %59

59:                                               ; preds = %54, %46
  %60 = phi i64 [ %55, %54 ], [ 0, %46 ]
  %61 = phi i64* [ %58, %54 ], [ null, %46 ]
  %62 = getelementptr inbounds i64, i64* %61, i64 %38
  %63 = getelementptr inbounds i64, i64* %61, i64 %60
  %64 = ptrtoint i64* %63 to i64
  store i64 %1, i64* %62, align 8
  %65 = getelementptr inbounds i64, i64* %62, i64 1
  %66 = ptrtoint i64* %65 to i64
  %67 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 0
  %68 = load i64*, i64** %67, align 8
  %69 = load i64, i64* %34, align 8
  %70 = ptrtoint i64* %68 to i64
  %71 = sub i64 %69, %70
  %72 = ashr exact i64 %71, 3
  %73 = sub nsw i64 0, %72
  %74 = getelementptr inbounds i64, i64* %62, i64 %73
  %75 = ptrtoint i64* %74 to i64
  %76 = icmp sgt i64 %71, 0
  br i1 %76, label %77, label %81

77:                                               ; preds = %59
  %78 = bitcast i64* %74 to i8*
  %79 = bitcast i64* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 %71, i1 false) #10
  %80 = load i64*, i64** %67, align 8
  br label %81

81:                                               ; preds = %77, %59
  %82 = phi i64* [ %68, %59 ], [ %80, %77 ]
  store i64 %75, i64* %35, align 8
  store i64 %66, i64* %34, align 8
  store i64 %64, i64* %44, align 8
  %83 = icmp eq i64* %82, null
  br i1 %83, label %86, label %84

84:                                               ; preds = %81
  %85 = bitcast i64* %82 to i8*
  tail call void @_ZdlPv(i8* %85) #9
  br label %86

86:                                               ; preds = %28, %81, %84
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18CodeObjectRegistry33RegisterAlreadyExistingCodeObjectEm(%"class.v8::internal::CodeObjectRegistry"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i64*, i64** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %6 = load i64*, i64** %5, align 8
  %7 = icmp eq i64* %4, %6
  %8 = ptrtoint i64* %6 to i64
  br i1 %7, label %13, label %9

9:                                                ; preds = %2
  store i64 %1, i64* %4, align 8
  %10 = getelementptr inbounds i64, i64* %4, i64 1
  %11 = ptrtoint i64* %10 to i64
  %12 = bitcast i64** %3 to i64*
  store i64 %11, i64* %12, align 8
  br label %69

13:                                               ; preds = %2
  %14 = ptrtoint i64* %4 to i64
  %15 = bitcast i64** %3 to i64*
  %16 = bitcast %"class.v8::internal::CodeObjectRegistry"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %14, %17
  %19 = ashr exact i64 %18, 3
  %20 = add nsw i64 %19, 1
  %21 = icmp ugt i64 %20, 2305843009213693951
  br i1 %21, label %22, label %24

22:                                               ; preds = %13
  %23 = bitcast %"class.v8::internal::CodeObjectRegistry"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %23) #8
  unreachable

24:                                               ; preds = %13
  %25 = bitcast i64** %5 to i64*
  %26 = sub i64 %8, %17
  %27 = ashr exact i64 %26, 3
  %28 = icmp ult i64 %27, 1152921504606846975
  br i1 %28, label %29, label %37

29:                                               ; preds = %24
  %30 = ashr exact i64 %26, 2
  %31 = icmp ult i64 %30, %20
  %32 = select i1 %31, i64 %20, i64 %30
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %42, label %34

34:                                               ; preds = %29
  %35 = icmp ugt i64 %32, 2305843009213693951
  br i1 %35, label %36, label %37

36:                                               ; preds = %34
  tail call void @abort() #8
  unreachable

37:                                               ; preds = %34, %24
  %38 = phi i64 [ %32, %34 ], [ 2305843009213693951, %24 ]
  %39 = shl i64 %38, 3
  %40 = tail call i8* @_Znwm(i64 %39) #9
  %41 = bitcast i8* %40 to i64*
  br label %42

42:                                               ; preds = %37, %29
  %43 = phi i64 [ %38, %37 ], [ 0, %29 ]
  %44 = phi i64* [ %41, %37 ], [ null, %29 ]
  %45 = getelementptr inbounds i64, i64* %44, i64 %19
  %46 = getelementptr inbounds i64, i64* %44, i64 %43
  %47 = ptrtoint i64* %46 to i64
  store i64 %1, i64* %45, align 8
  %48 = getelementptr inbounds i64, i64* %45, i64 1
  %49 = ptrtoint i64* %48 to i64
  %50 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 0
  %51 = load i64*, i64** %50, align 8
  %52 = load i64, i64* %15, align 8
  %53 = ptrtoint i64* %51 to i64
  %54 = sub i64 %52, %53
  %55 = ashr exact i64 %54, 3
  %56 = sub nsw i64 0, %55
  %57 = getelementptr inbounds i64, i64* %45, i64 %56
  %58 = ptrtoint i64* %57 to i64
  %59 = icmp sgt i64 %54, 0
  br i1 %59, label %60, label %64

60:                                               ; preds = %42
  %61 = bitcast i64* %57 to i8*
  %62 = bitcast i64* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 %54, i1 false) #10
  %63 = load i64*, i64** %50, align 8
  br label %64

64:                                               ; preds = %60, %42
  %65 = phi i64* [ %51, %42 ], [ %63, %60 ]
  store i64 %58, i64* %16, align 8
  store i64 %49, i64* %15, align 8
  store i64 %47, i64* %25, align 8
  %66 = icmp eq i64* %65, null
  br i1 %66, label %69, label %67

67:                                               ; preds = %64
  %68 = bitcast i64* %65 to i8*
  tail call void @_ZdlPv(i8* %68) #9
  br label %69

69:                                               ; preds = %9, %64, %67
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal18CodeObjectRegistry5ClearEv(%"class.v8::internal::CodeObjectRegistry"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = bitcast %"class.v8::internal::CodeObjectRegistry"* %0 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast i64** %4 to i64*
  store i64 %3, i64* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 1
  store i8 1, i8* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal18CodeObjectRegistry8FinalizeEv(%"class.v8::internal::CodeObjectRegistry"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %3 = bitcast i64** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.v8::internal::CodeObjectRegistry"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = ashr exact i64 %7, 3
  %9 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast i64** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %11, %6
  %13 = ashr exact i64 %12, 3
  %14 = icmp ugt i64 %8, %13
  br i1 %14, label %15, label %38

15:                                               ; preds = %1
  %16 = icmp eq i64 %12, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %15
  %18 = getelementptr inbounds i64, i64* null, i64 %13
  %19 = ptrtoint i64* %18 to i64
  br label %32

20:                                               ; preds = %15
  %21 = icmp ugt i64 %13, 2305843009213693951
  br i1 %21, label %22, label %23

22:                                               ; preds = %20
  tail call void @abort() #8
  unreachable

23:                                               ; preds = %20
  %24 = tail call i8* @_Znwm(i64 %12) #9
  %25 = bitcast i8* %24 to i64*
  %26 = getelementptr inbounds i64, i64* %25, i64 %13
  %27 = ptrtoint i64* %26 to i64
  %28 = ptrtoint i8* %24 to i64
  %29 = icmp sgt i64 %12, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %23
  %31 = inttoptr i64 %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 8 %31, i64 %12, i1 false) #10
  br label %32

32:                                               ; preds = %30, %23, %17
  %33 = phi i64 [ %28, %23 ], [ %28, %30 ], [ 0, %17 ]
  %34 = phi i64 [ %27, %23 ], [ %27, %30 ], [ %19, %17 ]
  store i64 %33, i64* %5, align 8
  store i64 %34, i64* %10, align 8
  store i64 %34, i64* %3, align 8
  %35 = icmp eq i64 %6, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %32
  %37 = inttoptr i64 %6 to i8*
  tail call void @_ZdlPv(i8* %37) #9
  br label %38

38:                                               ; preds = %1, %32, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal18CodeObjectRegistry8ContainsEm(%"class.v8::internal::CodeObjectRegistry"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.std::__1::__less", align 1
  %4 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i64*, i64** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__less", %"struct.std::__1::__less"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %12) #10
  call void @_ZNSt3__16__sortIRNS_6__lessImmEEPmEEvT0_S5_T_(i64* %9, i64* %11, %"struct.std::__1::__less"* nonnull dereferenceable(1) %3) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #10
  store i8 1, i8* %4, align 8
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = load i64*, i64** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 1
  %17 = load i64*, i64** %16, align 8
  %18 = ptrtoint i64* %15 to i64
  %19 = ptrtoint i64* %17 to i64
  %20 = sub i64 %19, %18
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %37, label %22

22:                                               ; preds = %13
  %23 = ashr exact i64 %20, 3
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64* [ %15, %22 ], [ %35, %24 ]
  %26 = phi i64 [ %23, %22 ], [ %34, %24 ]
  %27 = lshr i64 %26, 1
  %28 = getelementptr inbounds i64, i64* %25, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = icmp ult i64 %29, %1
  %31 = getelementptr inbounds i64, i64* %28, i64 1
  %32 = xor i64 %27, -1
  %33 = add i64 %26, %32
  %34 = select i1 %30, i64 %33, i64 %27
  %35 = select i1 %30, i64* %31, i64* %25
  %36 = icmp eq i64 %34, 0
  br i1 %36, label %37, label %24

37:                                               ; preds = %24, %13
  %38 = phi i64* [ %15, %13 ], [ %35, %24 ]
  %39 = icmp eq i64* %38, %17
  br i1 %39, label %43, label %40

40:                                               ; preds = %37
  %41 = load i64, i64* %38, align 8
  %42 = icmp ule i64 %41, %1
  br label %43

43:                                               ; preds = %37, %40
  %44 = phi i1 [ false, %37 ], [ %42, %40 ]
  ret i1 %44
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal18CodeObjectRegistry34GetCodeObjectStartFromInnerAddressEm(%"class.v8::internal::CodeObjectRegistry"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.std::__1::__less", align 1
  %4 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i64*, i64** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__less", %"struct.std::__1::__less"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %12) #10
  call void @_ZNSt3__16__sortIRNS_6__lessImmEEPmEEvT0_S5_T_(i64* %9, i64* %11, %"struct.std::__1::__less"* nonnull dereferenceable(1) %3) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #10
  store i8 1, i8* %4, align 8
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = load i64*, i64** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::CodeObjectRegistry", %"class.v8::internal::CodeObjectRegistry"* %0, i64 0, i32 0, i32 0, i32 1
  %17 = bitcast i64** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = ptrtoint i64* %15 to i64
  %20 = sub i64 %18, %19
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %37, label %22

22:                                               ; preds = %13
  %23 = ashr exact i64 %20, 3
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64* [ %15, %22 ], [ %35, %24 ]
  %26 = phi i64 [ %23, %22 ], [ %34, %24 ]
  %27 = lshr i64 %26, 1
  %28 = getelementptr inbounds i64, i64* %25, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = icmp ugt i64 %29, %1
  %31 = getelementptr inbounds i64, i64* %28, i64 1
  %32 = xor i64 %27, -1
  %33 = add i64 %26, %32
  %34 = select i1 %30, i64 %27, i64 %33
  %35 = select i1 %30, i64* %25, i64* %31
  %36 = icmp eq i64 %34, 0
  br i1 %36, label %37, label %24

37:                                               ; preds = %24, %13
  %38 = phi i64* [ %15, %13 ], [ %35, %24 ]
  %39 = getelementptr inbounds i64, i64* %38, i64 -1
  %40 = load i64, i64* %39, align 8
  ret i64 %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZNSt3__16__sortIRNS_6__lessImmEEPmEEvT0_S5_T_(i64*, i64*, %"struct.std::__1::__less"* dereferenceable(1)) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
