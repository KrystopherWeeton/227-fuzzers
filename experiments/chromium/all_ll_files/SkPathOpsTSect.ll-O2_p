; ModuleID = '../../third_party/skia/src/pathops/SkPathOpsTSect.cpp'
source_filename = "../../third_party/skia/src/pathops/SkPathOpsTSect.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkTSpan = type <{ %class.SkTCurve*, %class.SkTCoincident, %class.SkTCoincident, %struct.SkTSpanBounded*, %class.SkTSpan*, %class.SkTSpan*, %struct.SkDRect, double, double, double, i8, i8, i8, i8, i8, [3 x i8] }>
%class.SkTCurve = type { i32 (...)** }
%class.SkTCoincident = type <{ %struct.SkDPoint, double, i8, [7 x i8] }>
%struct.SkDPoint = type { double, double }
%struct.SkTSpanBounded = type { %class.SkTSpan*, %struct.SkTSpanBounded* }
%struct.SkDRect = type { double, double, double, double }
%class.SkIntersections = type <{ [13 x %struct.SkDPoint], [2 x %struct.SkDPoint], [2 x [13 x double]], [2 x i16], [2 x i8], i8, i8, i8, i8, [6 x i8] }>
%class.SkTSect = type <{ %class.SkTCurve*, %class.SkSTArenaAlloc, %class.SkTSpan*, %class.SkTSpan*, %class.SkTSpan*, i32, i8, i8, i8, i8 }>
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [1024 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.SkFibBlockSizes = type { i32 }
%struct.SkDLine = type { [2 x %struct.SkDPoint] }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%struct.SkClosestSect = type <{ %class.SkSTArray, i32, [4 x i8] }>
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [1152 x i8] }
%class.SkTArray = type { %struct.SkClosestRecord*, i64 }
%struct.SkClosestRecord = type { %class.SkTSpan*, %class.SkTSpan*, double, double, double, double, double, i32, i32 }
%class.anon = type { i8 }
%class.SkSTArray.1 = type { %class.SkAlignedSTStorage.2, %class.SkTArray.3 }
%class.SkAlignedSTStorage.2 = type { [216 x i8] }
%class.SkTArray.3 = type { %struct.SkClosestRecord**, i64 }
%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%class.SkTQuad = type { %class.SkTCurve, %struct.SkDQuad }
%struct.SkDConic = type { %struct.SkDQuad, float }
%class.SkTConic = type { %class.SkTCurve, %struct.SkDConic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%class.SkTCubic = type { %class.SkTCurve, %struct.SkDCubic }

$_ZNK8SkDPoint18approximatelyEqualERKS_ = comdat any

$_ZN7SkTSect10addSplitAtEP7SkTSpand = comdat any

$_ZN13SkClosestSect4findEPK7SkTSpanS2_ = comdat any

$_ZNK13SkClosestSect6finishEP15SkIntersections = comdat any

$_ZN8SkTArrayI15SkClosestRecordLb1EE12checkReallocEiNS1_11ReallocTypeE = comdat any

$_ZN15SkClosestRecord7findEndEPK7SkTSpanS2_ii = comdat any

$_ZN8SkTArrayIPK15SkClosestRecordLb1EE12checkReallocEiNS3_11ReallocTypeE = comdat any

$_Z12SkTIntroSortIPK15SkClosestRecordZ8SkTQSortIS1_EvPPT_S6_EUlS2_S2_E_EviS5_iRKT0_ = comdat any

$_Z11SkTHeapSortIPK15SkClosestRecordZ8SkTQSortIS1_EvPPT_S6_EUlS2_S2_E_EvS5_mRKT0_ = comdat any

@__const._ZN7SkTSect16binarySearchCoinEPS_ddPdS1_PP7SkTSpan.work = private unnamed_addr constant %class.SkTSpan <{ %class.SkTCurve* inttoptr (i64 -6148914691236517206 to %class.SkTCurve*), %class.SkTCoincident <{ %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, double 0xFFFFFFFFFFFFFFFF, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, %class.SkTCoincident <{ %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, double 0xFFFFFFFFFFFFFFFF, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, %struct.SkTSpanBounded* inttoptr (i64 -6148914691236517206 to %struct.SkTSpanBounded*), %class.SkTSpan* inttoptr (i64 -6148914691236517206 to %class.SkTSpan*), %class.SkTSpan* inttoptr (i64 -6148914691236517206 to %class.SkTSpan*), %struct.SkDRect { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, i8 -86, i8 -86, i8 -86, i8 -86, i8 -86, [3 x i8] c"\AA\AA\AA" }>, align 8
@_ZTV7SkTQuad = external unnamed_addr constant { [24 x i8*] }, align 8
@_ZTV8SkTConic = external unnamed_addr constant { [24 x i8*] }, align 8
@_ZTV8SkTCubic = external unnamed_addr constant { [24 x i8*] }, align 8
@__const._ZL11is_parallelI8SkTCurveEbRK7SkDLineRKT_.perpRayI = private unnamed_addr constant %class.SkIntersections <{ [13 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }], [2 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }], [2 x [13 x double]] [[13 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [13 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF]], [2 x i16] [i16 -21846, i16 -21846], [2 x i8] c"\AA\AA", i8 -86, i8 -86, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA" }>, align 8

@_ZN7SkTSectC1ERK8SkTCurve = hidden unnamed_addr alias void (%class.SkTSect*, %class.SkTCurve*), void (%class.SkTSect*, %class.SkTCurve*)* @_ZN7SkTSectC2ERK8SkTCurve

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident*, %class.SkTCurve* dereferenceable(8), double, %struct.SkDPoint* dereferenceable(16), %class.SkTCurve* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.SkDLine, align 8
  %7 = alloca %class.SkIntersections, align 8
  %8 = bitcast %class.SkTCurve* %1 to { double, double } (%class.SkTCurve*, double)***
  %9 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %8, align 8
  %10 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %9, i64 7
  %11 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %10, align 8
  %12 = tail call { double, double } %11(%class.SkTCurve* %1, double %2) #9
  %13 = extractvalue { double, double } %12, 0
  %14 = extractvalue { double, double } %12, 1
  %15 = bitcast %struct.SkDLine* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #9
  %16 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %6, i64 0, i32 0, i64 1, i32 0
  %17 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %6, i64 0, i32 0, i64 1, i32 1
  %18 = bitcast %struct.SkDPoint* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %15, i8* align 8 %18, i64 16, i1 false)
  %19 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 0
  %20 = load double, double* %19, align 8
  %21 = fadd double %14, %20
  store double %21, double* %16, align 8
  %22 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 1
  %23 = load double, double* %22, align 8
  %24 = fsub double %23, %13
  store double %24, double* %17, align 8
  %25 = bitcast %class.SkIntersections* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %25) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %25, i8* align 8 bitcast (%class.SkIntersections* @__const._ZL11is_parallelI8SkTCurveEbRK7SkDLineRKT_.perpRayI to i8*), i64 464, i1 false)
  %26 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 8
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 4, i64 0
  %28 = bitcast i8* %27 to i16*
  store i16 0, i16* %28, align 4
  %29 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 448, i1 false) #9
  store i8 1, i8* %29, align 8
  %30 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 5
  store i8 0, i8* %30, align 2
  %31 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 3, i64 0
  %32 = bitcast i16* %31 to i32*
  store i32 0, i32* %32, align 8
  %33 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 6
  store i8 0, i8* %33, align 1
  %34 = bitcast %class.SkTCurve* %4 to i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)***
  %35 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)**, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*** %34, align 8
  %36 = getelementptr inbounds i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %35, i64 12
  %37 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %36, align 8
  %38 = call i32 %37(%class.SkTCurve* %4, %class.SkIntersections* nonnull %7, %struct.SkDLine* nonnull dereferenceable(32) %6) #9
  switch i32 %38, label %43 [
    i32 3, label %39
    i32 0, label %39
  ]

39:                                               ; preds = %5, %5
  %40 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %0, i64 0, i32 1
  store double -1.000000e+00, double* %40, align 8
  %41 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %0, i64 0, i32 2
  store i8 0, i8* %41, align 8
  %42 = bitcast %class.SkTCoincident* %0 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %42, align 8
  br label %89

43:                                               ; preds = %5
  %44 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 2, i64 0, i64 0
  %45 = bitcast double* %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %0, i64 0, i32 1
  %48 = bitcast double* %47 to i64*
  store i64 %46, i64* %48, align 8
  %49 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %0, i64 0, i32 0
  %50 = bitcast %class.SkTCoincident* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* nonnull align 8 %25, i64 16, i1 false)
  %51 = icmp eq i32 %38, 2
  br i1 %51, label %52, label %85

52:                                               ; preds = %43
  %53 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %0, i64 0, i32 0, i32 0
  %54 = load double, double* %53, align 8
  %55 = load double, double* %19, align 8
  %56 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %0, i64 0, i32 0, i32 1
  %57 = load double, double* %56, align 8
  %58 = load double, double* %22, align 8
  %59 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 0, i64 1
  %60 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %59, i64 0, i32 0
  %61 = load double, double* %60, align 8
  %62 = insertelement <2 x double> undef, double %61, i32 0
  %63 = insertelement <2 x double> %62, double %54, i32 1
  %64 = insertelement <2 x double> undef, double %55, i32 0
  %65 = shufflevector <2 x double> %64, <2 x double> undef, <2 x i32> zeroinitializer
  %66 = fsub <2 x double> %63, %65
  %67 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 0, i64 1, i32 1
  %68 = load double, double* %67, align 8
  %69 = insertelement <2 x double> undef, double %68, i32 0
  %70 = insertelement <2 x double> %69, double %57, i32 1
  %71 = insertelement <2 x double> undef, double %58, i32 0
  %72 = shufflevector <2 x double> %71, <2 x double> undef, <2 x i32> zeroinitializer
  %73 = fsub <2 x double> %70, %72
  %74 = fmul <2 x double> %66, %66
  %75 = fmul <2 x double> %73, %73
  %76 = fadd <2 x double> %74, %75
  %77 = extractelement <2 x double> %76, i32 0
  %78 = extractelement <2 x double> %76, i32 1
  %79 = fcmp olt double %77, %78
  br i1 %79, label %80, label %85

80:                                               ; preds = %52
  %81 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 2, i64 0, i64 1
  %82 = bitcast double* %81 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %48, align 8
  %84 = bitcast %struct.SkDPoint* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %84, i64 16, i1 false)
  br label %85

85:                                               ; preds = %52, %80, %43
  %86 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %3, %struct.SkDPoint* dereferenceable(16) %49)
  %87 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %0, i64 0, i32 2
  %88 = zext i1 %86 to i8
  store i8 %88, i8* %87, align 8
  br label %89

89:                                               ; preds = %85, %39
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %25) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint*, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fsub double %4, %6
  %8 = tail call double @llvm.fabs.f64(double %7) #9
  %9 = fcmp olt double %8, 0x3E80000000000000
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = fsub double %12, %14
  %16 = tail call double @llvm.fabs.f64(double %15) #9
  %17 = fcmp olt double %16, 0x3E80000000000000
  br i1 %17, label %68, label %18

18:                                               ; preds = %10, %2
  %19 = fptrunc double %4 to float
  %20 = fptrunc double %6 to float
  %21 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %19, float %20) #9
  br i1 %21, label %22, label %68

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %26 = load double, double* %25, align 8
  %27 = fptrunc double %24 to float
  %28 = fptrunc double %26 to float
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %27, float %28) #9
  br i1 %29, label %30, label %68

30:                                               ; preds = %22
  %31 = load double, double* %3, align 8
  %32 = load double, double* %5, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %23, align 8
  %35 = load double, double* %25, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %33
  %38 = fmul double %36, %36
  %39 = fadd double %37, %38
  %40 = tail call double @sqrt(double %39) #9
  %41 = load double, double* %5, align 8
  %42 = load double, double* %3, align 8
  %43 = fcmp olt double %41, %42
  %44 = load double, double* %23, align 8
  %45 = select i1 %43, double %41, double %42
  %46 = fcmp olt double %44, %45
  %47 = load double, double* %25, align 8
  %48 = select i1 %46, double %44, double %45
  %49 = fcmp olt double %47, %48
  %50 = select i1 %49, double %47, double %48
  %51 = fcmp olt double %42, %41
  %52 = load double, double* %5, align 8
  %53 = load double, double* %3, align 8
  %54 = select i1 %51, double %52, double %53
  %55 = fcmp olt double %54, %44
  %56 = load double, double* %23, align 8
  %57 = select i1 %55, double %56, double %54
  %58 = fcmp olt double %57, %47
  %59 = load double, double* %25, align 8
  %60 = select i1 %58, double %59, double %57
  %61 = fsub double -0.000000e+00, %50
  %62 = fcmp olt double %60, %61
  %63 = select i1 %62, double %61, double %60
  %64 = fadd double %40, %63
  %65 = fptrunc double %63 to float
  %66 = fptrunc double %64 to float
  %67 = tail call zeroext i1 @_Z16AlmostPequalUlpsff(float %65, float %66) #9
  br label %68

68:                                               ; preds = %18, %22, %10, %30
  %69 = phi i1 [ %67, %30 ], [ true, %10 ], [ false, %22 ], [ false, %18 ]
  ret i1 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkTSpan10addBoundedEPS_P12SkArenaAlloc(%class.SkTSpan* nocapture, %class.SkTSpan*, %class.SkArenaAlloc*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %2, i64 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 0, %6
  %8 = and i64 %7, 7
  %9 = or i64 %8, 16
  %10 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %2, i64 0, i32 2
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %12, %6
  %14 = icmp ugt i64 %9, %13
  br i1 %14, label %15, label %19

15:                                               ; preds = %3
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %2, i32 16, i32 8) #9
  %16 = load i64, i64* %5, align 8
  %17 = sub i64 0, %16
  %18 = and i64 %17, 7
  br label %19

19:                                               ; preds = %3, %15
  %20 = phi i64 [ %16, %15 ], [ %6, %3 ]
  %21 = phi i64 [ %18, %15 ], [ %8, %3 ]
  %22 = inttoptr i64 %20 to i8*
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = getelementptr inbounds i8, i8* %23, i64 16
  store i8* %24, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %23, i64 8
  %26 = bitcast i8* %25 to i64*
  store i64 0, i64* %26, align 8
  %27 = bitcast i8* %23 to %class.SkTSpan**
  store %class.SkTSpan* %1, %class.SkTSpan** %27, align 8
  %28 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 3
  %29 = bitcast %struct.SkTSpanBounded** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds i8, i8* %23, i64 8
  %32 = bitcast i8* %31 to i64*
  store i64 %30, i64* %32, align 8
  %33 = bitcast %struct.SkTSpanBounded** %28 to i8**
  store i8* %23, i8** %33, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkTSpan* @_ZN7SkTSect12addFollowingEP7SkTSpan(%class.SkTSect*, %class.SkTSpan*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %4 = load %class.SkTSpan*, %class.SkTSpan** %3, align 8
  %5 = icmp eq %class.SkTSpan* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %4, i64 0, i32 5
  %8 = bitcast %class.SkTSpan** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %class.SkTSpan** %3 to i64*
  store i64 %9, i64* %10, align 8
  br label %57

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %13 = load %class.SkTCurve*, %class.SkTCurve** %12, align 8
  %14 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1032
  %15 = bitcast i8* %14 to i8**
  %16 = bitcast i8* %14 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 0, %17
  %19 = and i64 %18, 7
  %20 = or i64 %19, 160
  %21 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1040
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %23, %17
  %25 = icmp ugt i64 %20, %24
  br i1 %25, label %26, label %32

26:                                               ; preds = %11
  %27 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %28 = bitcast i8* %27 to %class.SkArenaAlloc*
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %28, i32 160, i32 8) #9
  %29 = load i64, i64* %16, align 8
  %30 = sub i64 0, %29
  %31 = and i64 %30, 7
  br label %32

32:                                               ; preds = %11, %26
  %33 = phi i64 [ %29, %26 ], [ %17, %11 ]
  %34 = phi i64 [ %31, %26 ], [ %19, %11 ]
  %35 = inttoptr i64 %33 to i8*
  %36 = getelementptr inbounds i8, i8* %35, i64 %34
  %37 = getelementptr inbounds i8, i8* %36, i64 160
  store i8* %37, i8** %15, align 8
  %38 = bitcast i8* %36 to %class.SkTSpan*
  %39 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %40 = bitcast i8* %39 to %class.SkArenaAlloc*
  %41 = getelementptr inbounds i8, i8* %36, i64 24
  %42 = bitcast i8* %41 to double*
  store double -1.000000e+00, double* %42, align 8
  %43 = getelementptr inbounds i8, i8* %36, i64 32
  store i8 0, i8* %43, align 8
  %44 = getelementptr inbounds i8, i8* %36, i64 8
  %45 = bitcast i8* %44 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %45, align 8
  %46 = getelementptr inbounds i8, i8* %36, i64 56
  %47 = bitcast i8* %46 to double*
  store double -1.000000e+00, double* %47, align 8
  %48 = getelementptr inbounds i8, i8* %36, i64 64
  store i8 0, i8* %48, align 8
  %49 = getelementptr inbounds i8, i8* %36, i64 40
  %50 = bitcast i8* %49 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %50, align 8
  %51 = bitcast %class.SkTCurve* %13 to %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)***
  %52 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)**, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*** %51, align 8
  %53 = getelementptr inbounds %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %52, i64 14
  %54 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %53, align 8
  %55 = tail call %class.SkTCurve* %54(%class.SkTCurve* %13, %class.SkArenaAlloc* dereferenceable(32) %40) #9
  %56 = bitcast i8* %36 to %class.SkTCurve**
  store %class.SkTCurve* %55, %class.SkTCurve** %56, align 8
  br label %57

57:                                               ; preds = %6, %32
  %58 = phi %class.SkTSpan* [ %4, %6 ], [ %38, %32 ]
  %59 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %58, i64 0, i32 3
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %59, align 8
  %60 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %58, i64 0, i32 11
  store i8 0, i8* %60, align 1
  %61 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %58, i64 0, i32 14
  store i8 0, i8* %61, align 4
  %62 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %63 = load i32, i32* %62, align 8
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %62, align 8
  %65 = icmp ne %class.SkTSpan* %1, null
  br i1 %65, label %66, label %73

66:                                               ; preds = %57
  %67 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 8
  %68 = bitcast double* %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %58, i64 0, i32 7
  %71 = bitcast double* %70 to i64*
  store i64 %69, i64* %71, align 8
  %72 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 5
  br label %76

73:                                               ; preds = %57
  %74 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %58, i64 0, i32 7
  store double 0.000000e+00, double* %74, align 8
  %75 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  br label %76

76:                                               ; preds = %73, %66
  %77 = phi %class.SkTSpan** [ %72, %66 ], [ %75, %73 ]
  %78 = load %class.SkTSpan*, %class.SkTSpan** %77, align 8
  %79 = icmp ne %class.SkTSpan* %78, null
  br i1 %79, label %80, label %83

80:                                               ; preds = %76
  %81 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %78, i64 0, i32 7
  %82 = load double, double* %81, align 8
  br label %83

83:                                               ; preds = %76, %80
  %84 = phi double [ %82, %80 ], [ 1.000000e+00, %76 ]
  %85 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %58, i64 0, i32 8
  store double %84, double* %85, align 8
  %86 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %58, i64 0, i32 4
  store %class.SkTSpan* %1, %class.SkTSpan** %86, align 8
  %87 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %58, i64 0, i32 5
  store %class.SkTSpan* %78, %class.SkTSpan** %87, align 8
  %88 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %89 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 5
  %90 = select i1 %65, %class.SkTSpan** %89, %class.SkTSpan** %88
  store %class.SkTSpan* %58, %class.SkTSpan** %90, align 8
  br i1 %79, label %91, label %93

91:                                               ; preds = %83
  %92 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %78, i64 0, i32 4
  store %class.SkTSpan* %58, %class.SkTSpan** %92, align 8
  br label %93

93:                                               ; preds = %91, %83
  %94 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %95 = load %class.SkTCurve*, %class.SkTCurve** %94, align 8
  %96 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %58, i64 0, i32 13
  store i8 0, i8* %96, align 1
  %97 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %58, i64 0, i32 12
  store i8 0, i8* %97, align 2
  %98 = tail call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* %58, %class.SkTCurve* dereferenceable(8) %95) #9
  ret %class.SkTSpan* %58
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkTSpan* @_ZN7SkTSect6addOneEv(%class.SkTSect*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %3 = load %class.SkTSpan*, %class.SkTSpan** %2, align 8
  %4 = icmp eq %class.SkTSpan* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 5
  %7 = bitcast %class.SkTSpan** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %class.SkTSpan** %2 to i64*
  store i64 %8, i64* %9, align 8
  br label %56

10:                                               ; preds = %1
  %11 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %12 = load %class.SkTCurve*, %class.SkTCurve** %11, align 8
  %13 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1032
  %14 = bitcast i8* %13 to i8**
  %15 = bitcast i8* %13 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 0, %16
  %18 = and i64 %17, 7
  %19 = or i64 %18, 160
  %20 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1040
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %22, %16
  %24 = icmp ugt i64 %19, %23
  br i1 %24, label %25, label %31

25:                                               ; preds = %10
  %26 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %27 = bitcast i8* %26 to %class.SkArenaAlloc*
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %27, i32 160, i32 8) #9
  %28 = load i64, i64* %15, align 8
  %29 = sub i64 0, %28
  %30 = and i64 %29, 7
  br label %31

31:                                               ; preds = %10, %25
  %32 = phi i64 [ %28, %25 ], [ %16, %10 ]
  %33 = phi i64 [ %30, %25 ], [ %18, %10 ]
  %34 = inttoptr i64 %32 to i8*
  %35 = getelementptr inbounds i8, i8* %34, i64 %33
  %36 = getelementptr inbounds i8, i8* %35, i64 160
  store i8* %36, i8** %14, align 8
  %37 = bitcast i8* %35 to %class.SkTSpan*
  %38 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %39 = bitcast i8* %38 to %class.SkArenaAlloc*
  %40 = getelementptr inbounds i8, i8* %35, i64 24
  %41 = bitcast i8* %40 to double*
  store double -1.000000e+00, double* %41, align 8
  %42 = getelementptr inbounds i8, i8* %35, i64 32
  store i8 0, i8* %42, align 8
  %43 = getelementptr inbounds i8, i8* %35, i64 8
  %44 = bitcast i8* %43 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %44, align 8
  %45 = getelementptr inbounds i8, i8* %35, i64 56
  %46 = bitcast i8* %45 to double*
  store double -1.000000e+00, double* %46, align 8
  %47 = getelementptr inbounds i8, i8* %35, i64 64
  store i8 0, i8* %47, align 8
  %48 = getelementptr inbounds i8, i8* %35, i64 40
  %49 = bitcast i8* %48 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %49, align 8
  %50 = bitcast %class.SkTCurve* %12 to %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)***
  %51 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)**, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*** %50, align 8
  %52 = getelementptr inbounds %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %51, i64 14
  %53 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %52, align 8
  %54 = tail call %class.SkTCurve* %53(%class.SkTCurve* %12, %class.SkArenaAlloc* dereferenceable(32) %39) #9
  %55 = bitcast i8* %35 to %class.SkTCurve**
  store %class.SkTCurve* %54, %class.SkTCurve** %55, align 8
  br label %56

56:                                               ; preds = %31, %5
  %57 = phi %class.SkTSpan* [ %3, %5 ], [ %37, %31 ]
  %58 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %57, i64 0, i32 3
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %58, align 8
  %59 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %57, i64 0, i32 11
  store i8 0, i8* %59, align 1
  %60 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %57, i64 0, i32 14
  store i8 0, i8* %60, align 4
  %61 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %62 = load i32, i32* %61, align 8
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %61, align 8
  ret %class.SkTSpan* %57
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK7SkTSpan8validateEv(%class.SkTSpan* nocapture) local_unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkTSect10addForPerpEP7SkTSpand(%class.SkTSect*, %class.SkTSpan*, double) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 3
  %5 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %4, align 8
  %6 = icmp eq %struct.SkTSpanBounded* %5, null
  br i1 %6, label %28, label %7

7:                                                ; preds = %3
  %8 = insertelement <2 x double> undef, double %2, i32 0
  %9 = shufflevector <2 x double> %8, <2 x double> undef, <2 x i32> zeroinitializer
  br label %14

10:                                               ; preds = %14
  %11 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %15, i64 0, i32 1
  %12 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %11, align 8
  %13 = icmp eq %struct.SkTSpanBounded* %12, null
  br i1 %13, label %28, label %14

14:                                               ; preds = %7, %10
  %15 = phi %struct.SkTSpanBounded* [ %12, %10 ], [ %5, %7 ]
  %16 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %15, i64 0, i32 0
  %17 = load %class.SkTSpan*, %class.SkTSpan** %16, align 8
  %18 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %17, i64 0, i32 7
  %19 = bitcast double* %18 to <2 x double>*
  %20 = load <2 x double>, <2 x double>* %19, align 8
  %21 = fsub <2 x double> %20, %9
  %22 = extractelement <2 x double> %21, i32 0
  %23 = extractelement <2 x double> %21, i32 1
  %24 = fmul double %22, %23
  %25 = fcmp ugt double %24, 0.000000e+00
  br i1 %25, label %10, label %26

26:                                               ; preds = %14
  %27 = icmp eq %class.SkTSpan* %17, null
  br i1 %27, label %28, label %112

28:                                               ; preds = %10, %26, %3
  %29 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %30 = load %class.SkTSpan*, %class.SkTSpan** %29, align 8
  %31 = icmp eq %class.SkTSpan* %30, null
  br i1 %31, label %51, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %30, i64 0, i32 8
  %34 = load double, double* %33, align 8
  %35 = fcmp olt double %34, %2
  br i1 %35, label %40, label %45

36:                                               ; preds = %40
  %37 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %43, i64 0, i32 8
  %38 = load double, double* %37, align 8
  %39 = fcmp olt double %38, %2
  br i1 %39, label %40, label %45

40:                                               ; preds = %32, %36
  %41 = phi %class.SkTSpan* [ %43, %36 ], [ %30, %32 ]
  %42 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %41, i64 0, i32 5
  %43 = load %class.SkTSpan*, %class.SkTSpan** %42, align 8
  %44 = icmp eq %class.SkTSpan* %43, null
  br i1 %44, label %51, label %36

45:                                               ; preds = %36, %32
  %46 = phi %class.SkTSpan* [ %30, %32 ], [ %43, %36 ]
  %47 = phi %class.SkTSpan* [ null, %32 ], [ %41, %36 ]
  %48 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %46, i64 0, i32 7
  %49 = load double, double* %48, align 8
  %50 = fcmp ugt double %49, %2
  br i1 %50, label %51, label %54

51:                                               ; preds = %40, %45, %28
  %52 = phi %class.SkTSpan* [ null, %28 ], [ %47, %45 ], [ %41, %40 ]
  %53 = tail call %class.SkTSpan* @_ZN7SkTSect12addFollowingEP7SkTSpan(%class.SkTSect* %0, %class.SkTSpan* %52)
  br label %54

54:                                               ; preds = %45, %51
  %55 = phi %class.SkTSpan* [ %53, %51 ], [ %46, %45 ]
  %56 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1
  %57 = icmp eq %class.SkSTArenaAlloc* %56, null
  %58 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %59 = bitcast i8* %58 to %class.SkArenaAlloc*
  %60 = select i1 %57, %class.SkArenaAlloc* null, %class.SkArenaAlloc* %59
  %61 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %60, i64 0, i32 1
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 0, %63
  %65 = and i64 %64, 7
  %66 = or i64 %65, 16
  %67 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %60, i64 0, i32 2
  %68 = bitcast i8** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = sub i64 %69, %63
  %71 = icmp ugt i64 %66, %70
  br i1 %71, label %72, label %76

72:                                               ; preds = %54
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %60, i32 16, i32 8) #9
  %73 = load i64, i64* %62, align 8
  %74 = sub i64 0, %73
  %75 = and i64 %74, 7
  br label %76

76:                                               ; preds = %54, %72
  %77 = phi i64 [ %73, %72 ], [ %63, %54 ]
  %78 = phi i64 [ %75, %72 ], [ %65, %54 ]
  %79 = inttoptr i64 %77 to i8*
  %80 = getelementptr inbounds i8, i8* %79, i64 %78
  %81 = getelementptr inbounds i8, i8* %80, i64 16
  store i8* %81, i8** %61, align 8
  %82 = getelementptr inbounds i8, i8* %80, i64 8
  %83 = bitcast i8* %82 to i64*
  store i64 0, i64* %83, align 8
  %84 = bitcast i8* %80 to %class.SkTSpan**
  store %class.SkTSpan* %1, %class.SkTSpan** %84, align 8
  %85 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %55, i64 0, i32 3
  %86 = bitcast %struct.SkTSpanBounded** %85 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %83, align 8
  %88 = bitcast %struct.SkTSpanBounded** %85 to i8**
  store i8* %80, i8** %88, align 8
  %89 = load i64, i64* %62, align 8
  %90 = sub i64 0, %89
  %91 = and i64 %90, 7
  %92 = or i64 %91, 16
  %93 = load i64, i64* %68, align 8
  %94 = sub i64 %93, %89
  %95 = icmp ugt i64 %92, %94
  br i1 %95, label %96, label %100

96:                                               ; preds = %76
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %60, i32 16, i32 8) #9
  %97 = load i64, i64* %62, align 8
  %98 = sub i64 0, %97
  %99 = and i64 %98, 7
  br label %100

100:                                              ; preds = %76, %96
  %101 = phi i64 [ %97, %96 ], [ %89, %76 ]
  %102 = phi i64 [ %99, %96 ], [ %91, %76 ]
  %103 = inttoptr i64 %101 to i8*
  %104 = getelementptr inbounds i8, i8* %103, i64 %102
  %105 = getelementptr inbounds i8, i8* %104, i64 16
  store i8* %105, i8** %61, align 8
  %106 = getelementptr inbounds i8, i8* %104, i64 8
  %107 = bitcast i8* %106 to i64*
  store i64 0, i64* %107, align 8
  %108 = bitcast i8* %104 to %class.SkTSpan**
  store %class.SkTSpan* %55, %class.SkTSpan** %108, align 8
  %109 = bitcast %struct.SkTSpanBounded** %4 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %107, align 8
  %111 = bitcast %struct.SkTSpanBounded** %4 to i8**
  store i8* %104, i8** %111, align 8
  br label %112

112:                                              ; preds = %26, %100
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %class.SkTSpan* @_ZN7SkTSect7spanAtTEdPP7SkTSpan(%class.SkTSect* nocapture readonly, double, %class.SkTSpan** nocapture) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %5 = load %class.SkTSpan*, %class.SkTSpan** %4, align 8
  %6 = icmp eq %class.SkTSpan* %5, null
  br i1 %6, label %27, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %5, i64 0, i32 8
  %9 = load double, double* %8, align 8
  %10 = fcmp olt double %9, %1
  br i1 %10, label %15, label %20

11:                                               ; preds = %15
  %12 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %18, i64 0, i32 8
  %13 = load double, double* %12, align 8
  %14 = fcmp olt double %13, %1
  br i1 %14, label %15, label %20

15:                                               ; preds = %7, %11
  %16 = phi %class.SkTSpan* [ %18, %11 ], [ %5, %7 ]
  %17 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %16, i64 0, i32 5
  %18 = load %class.SkTSpan*, %class.SkTSpan** %17, align 8
  %19 = icmp eq %class.SkTSpan* %18, null
  br i1 %19, label %27, label %11

20:                                               ; preds = %11, %7
  %21 = phi %class.SkTSpan* [ %5, %7 ], [ %18, %11 ]
  %22 = phi %class.SkTSpan* [ null, %7 ], [ %16, %11 ]
  store %class.SkTSpan* %22, %class.SkTSpan** %2, align 8
  %23 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %21, i64 0, i32 7
  %24 = load double, double* %23, align 8
  %25 = fcmp ugt double %24, %1
  br i1 %25, label %29, label %26

26:                                               ; preds = %20
  br label %29

27:                                               ; preds = %15, %3
  %28 = phi %class.SkTSpan* [ null, %3 ], [ %16, %15 ]
  store %class.SkTSpan* %28, %class.SkTSpan** %2, align 8
  br label %29

29:                                               ; preds = %27, %20, %26
  %30 = phi %class.SkTSpan* [ %21, %26 ], [ null, %20 ], [ null, %27 ]
  ret %class.SkTSpan* %30
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK7SkTSect8validateEv(%class.SkTSect* nocapture) local_unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK7SkTSpan15closestBoundedTERK8SkDPoint(%class.SkTSpan* nocapture readonly, %struct.SkDPoint* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 3
  %4 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %3, align 8
  %5 = icmp eq %struct.SkTSpanBounded* %4, null
  br i1 %5, label %66, label %6

6:                                                ; preds = %2
  %7 = bitcast %struct.SkDPoint* %1 to <2 x double>*
  %8 = bitcast %struct.SkDPoint* %1 to <2 x double>*
  br label %9

9:                                                ; preds = %6, %60
  %10 = phi %struct.SkTSpanBounded* [ %4, %6 ], [ %64, %60 ]
  %11 = phi double [ 0x7FEFFFFFFFFFFFFF, %6 ], [ %62, %60 ]
  %12 = phi double [ -1.000000e+00, %6 ], [ %61, %60 ]
  %13 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %10, i64 0, i32 0
  %14 = load %class.SkTSpan*, %class.SkTSpan** %13, align 8
  %15 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %14, i64 0, i32 0
  %16 = load %class.SkTCurve*, %class.SkTCurve** %15, align 8
  %17 = bitcast %class.SkTCurve* %16 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %18 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %17, align 8
  %19 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %18, i64 3
  %20 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %19, align 8
  %21 = tail call dereferenceable(16) %struct.SkDPoint* %20(%class.SkTCurve* %16, i32 0) #9
  %22 = bitcast %struct.SkDPoint* %21 to <2 x double>*
  %23 = load <2 x double>, <2 x double>* %22, align 8
  %24 = load <2 x double>, <2 x double>* %7, align 8
  %25 = fsub <2 x double> %23, %24
  %26 = fmul <2 x double> %25, %25
  %27 = extractelement <2 x double> %26, i32 0
  %28 = extractelement <2 x double> %26, i32 1
  %29 = fadd double %27, %28
  %30 = fcmp ogt double %11, %29
  br i1 %30, label %31, label %34

31:                                               ; preds = %9
  %32 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %14, i64 0, i32 7
  %33 = load double, double* %32, align 8
  br label %34

34:                                               ; preds = %31, %9
  %35 = phi double [ %33, %31 ], [ %12, %9 ]
  %36 = phi double [ %29, %31 ], [ %11, %9 ]
  %37 = load %class.SkTCurve*, %class.SkTCurve** %15, align 8
  %38 = bitcast %class.SkTCurve* %37 to i32 (%class.SkTCurve*)***
  %39 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %38, align 8
  %40 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %39, i64 18
  %41 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %40, align 8
  %42 = tail call i32 %41(%class.SkTCurve* %37) #9
  %43 = bitcast %class.SkTCurve* %37 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %44 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %43, align 8
  %45 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %44, i64 3
  %46 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %45, align 8
  %47 = tail call dereferenceable(16) %struct.SkDPoint* %46(%class.SkTCurve* %37, i32 %42) #9
  %48 = bitcast %struct.SkDPoint* %47 to <2 x double>*
  %49 = load <2 x double>, <2 x double>* %48, align 8
  %50 = load <2 x double>, <2 x double>* %8, align 8
  %51 = fsub <2 x double> %49, %50
  %52 = fmul <2 x double> %51, %51
  %53 = extractelement <2 x double> %52, i32 0
  %54 = extractelement <2 x double> %52, i32 1
  %55 = fadd double %53, %54
  %56 = fcmp ogt double %36, %55
  br i1 %56, label %57, label %60

57:                                               ; preds = %34
  %58 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %14, i64 0, i32 8
  %59 = load double, double* %58, align 8
  br label %60

60:                                               ; preds = %57, %34
  %61 = phi double [ %59, %57 ], [ %35, %34 ]
  %62 = phi double [ %55, %57 ], [ %36, %34 ]
  %63 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %10, i64 0, i32 1
  %64 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %63, align 8
  %65 = icmp eq %struct.SkTSpanBounded* %64, null
  br i1 %65, label %66, label %9

66:                                               ; preds = %60, %2
  %67 = phi double [ -1.000000e+00, %2 ], [ %61, %60 ]
  ret double %67
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7SkTSpan8containsEd(%class.SkTSpan* nocapture readonly, double) local_unnamed_addr #4 align 2 {
  %3 = insertelement <2 x double> undef, double %1, i32 0
  %4 = shufflevector <2 x double> %3, <2 x double> undef, <2 x i32> zeroinitializer
  br label %5

5:                                                ; preds = %15, %2
  %6 = phi %class.SkTSpan* [ %0, %2 ], [ %17, %15 ]
  %7 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 7
  %8 = bitcast double* %7 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 8
  %10 = fsub <2 x double> %9, %4
  %11 = extractelement <2 x double> %10, i32 0
  %12 = extractelement <2 x double> %10, i32 1
  %13 = fmul double %11, %12
  %14 = fcmp ugt double %13, 0.000000e+00
  br i1 %14, label %15, label %19

15:                                               ; preds = %5
  %16 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 5
  %17 = load %class.SkTSpan*, %class.SkTSpan** %16, align 8
  %18 = icmp eq %class.SkTSpan* %17, null
  br i1 %18, label %19, label %5

19:                                               ; preds = %5, %15
  %20 = phi i1 [ true, %5 ], [ false, %15 ]
  ret i1 %20
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %class.SkTSect* @_ZNK7SkTSpan8debugOppEv(%class.SkTSpan* nocapture readnone) local_unnamed_addr #2 align 2 {
  ret %class.SkTSect* null
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkTSpan* @_ZNK7SkTSpan11findOppSpanEPKS_(%class.SkTSpan* nocapture readonly, %class.SkTSpan* readnone) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 3
  %4 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %3, align 8
  %5 = icmp eq %struct.SkTSpanBounded* %4, null
  br i1 %5, label %15, label %10

6:                                                ; preds = %10
  %7 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %11, i64 0, i32 1
  %8 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %7, align 8
  %9 = icmp eq %struct.SkTSpanBounded* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %2, %6
  %11 = phi %struct.SkTSpanBounded* [ %8, %6 ], [ %4, %2 ]
  %12 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %11, i64 0, i32 0
  %13 = load %class.SkTSpan*, %class.SkTSpan** %12, align 8
  %14 = icmp eq %class.SkTSpan* %13, %1
  br i1 %14, label %15, label %6

15:                                               ; preds = %6, %10, %2
  %16 = phi %class.SkTSpan* [ null, %2 ], [ %1, %10 ], [ null, %6 ]
  ret %class.SkTSpan* %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7SkTSpan9hullCheckEPKS_PbS2_(%class.SkTSpan* nocapture, %class.SkTSpan* nocapture readonly, i8* nocapture, i8* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 12
  %8 = load i8, i8* %7, align 2, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %45

10:                                               ; preds = %4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #9
  store i8 -86, i8* %5, align 1
  %11 = call zeroext i1 @_ZN7SkTSpan21onlyEndPointsInCommonEPKS_PbS2_S2_(%class.SkTSpan* %0, %class.SkTSpan* %1, i8* %2, i8* %3, i8* nonnull %5)
  br i1 %11, label %43, label %12

12:                                               ; preds = %10
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #9
  store i8 -86, i8* %6, align 1
  %13 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 0
  %14 = load %class.SkTCurve*, %class.SkTCurve** %13, align 8
  %15 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 0
  %16 = load %class.SkTCurve*, %class.SkTCurve** %15, align 8
  %17 = bitcast %class.SkTCurve* %14 to i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)***
  %18 = load i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)**, i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)*, i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)** %18, i64 11
  %20 = load i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)*, i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)** %19, align 8
  %21 = call zeroext i1 %20(%class.SkTCurve* %14, %class.SkTCurve* dereferenceable(8) %16, i8* nonnull %6) #9
  br i1 %21, label %22, label %37

22:                                               ; preds = %12
  %23 = load i8, i8* %6, align 1, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %41, label %25

25:                                               ; preds = %22
  store i8 1, i8* %7, align 2
  %26 = load %class.SkTCurve*, %class.SkTCurve** %13, align 8
  %27 = bitcast %class.SkTCurve* %26 to i1 (%class.SkTCurve*)***
  %28 = load i1 (%class.SkTCurve*)**, i1 (%class.SkTCurve*)*** %27, align 8
  %29 = getelementptr inbounds i1 (%class.SkTCurve*)*, i1 (%class.SkTCurve*)** %28, i64 5
  %30 = load i1 (%class.SkTCurve*)*, i1 (%class.SkTCurve*)** %29, align 8
  %31 = call zeroext i1 %30(%class.SkTCurve* %26) #9
  %32 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 13
  %33 = zext i1 %31 to i8
  store i8 %33, i8* %32, align 1
  %34 = load i8, i8* %5, align 1, !range !2
  %35 = icmp eq i8 %34, 0
  %36 = select i1 %35, i32 -1, i32 1
  br label %41

37:                                               ; preds = %12
  %38 = load i8, i8* %5, align 1, !range !2
  %39 = shl nuw nsw i8 %38, 1
  %40 = zext i8 %39 to i32
  br label %41

41:                                               ; preds = %22, %37, %25
  %42 = phi i32 [ %36, %25 ], [ %40, %37 ], [ 1, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #9
  br label %43

43:                                               ; preds = %10, %41
  %44 = phi i32 [ %42, %41 ], [ 2, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #9
  br label %45

45:                                               ; preds = %4, %43
  %46 = phi i32 [ %44, %43 ], [ -1, %4 ]
  ret i32 %46
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSpan21onlyEndPointsInCommonEPKS_PbS2_S2_(%class.SkTSpan* nocapture readonly, %class.SkTSpan* nocapture readonly, i8* nocapture, i8* nocapture, i8* nocapture) local_unnamed_addr #0 align 2 {
  %6 = alloca [4 x %struct.SkDPoint*], align 16
  %7 = alloca [4 x %struct.SkDPoint*], align 16
  %8 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 0
  %9 = load %class.SkTCurve*, %class.SkTCurve** %8, align 8
  %10 = bitcast %class.SkTCurve* %9 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %11 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %10, align 8
  %12 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %11, i64 3
  %13 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %12, align 8
  %14 = tail call dereferenceable(16) %struct.SkDPoint* %13(%class.SkTCurve* %9, i32 0) #9
  %15 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 0
  %16 = load %class.SkTCurve*, %class.SkTCurve** %15, align 8
  %17 = bitcast %class.SkTCurve* %16 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %18 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %17, align 8
  %19 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %18, i64 3
  %20 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %19, align 8
  %21 = tail call dereferenceable(16) %struct.SkDPoint* %20(%class.SkTCurve* %16, i32 0) #9
  %22 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %14, i64 0, i32 0
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %21, i64 0, i32 0
  %25 = load double, double* %24, align 8
  %26 = fcmp oeq double %23, %25
  br i1 %26, label %27, label %34

27:                                               ; preds = %5
  %28 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %14, i64 0, i32 1
  %29 = load double, double* %28, align 8
  %30 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %21, i64 0, i32 1
  %31 = load double, double* %30, align 8
  %32 = fcmp oeq double %29, %31
  br i1 %32, label %33, label %34

33:                                               ; preds = %27
  store i8 1, i8* %3, align 1
  store i8 1, i8* %2, align 1
  br label %130

34:                                               ; preds = %5, %27
  %35 = load %class.SkTCurve*, %class.SkTCurve** %8, align 8
  %36 = bitcast %class.SkTCurve* %35 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %37 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %36, align 8
  %38 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %37, i64 3
  %39 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %38, align 8
  %40 = tail call dereferenceable(16) %struct.SkDPoint* %39(%class.SkTCurve* %35, i32 0) #9
  %41 = load %class.SkTCurve*, %class.SkTCurve** %15, align 8
  %42 = bitcast %class.SkTCurve* %41 to i32 (%class.SkTCurve*)***
  %43 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %42, align 8
  %44 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %43, i64 18
  %45 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %44, align 8
  %46 = tail call i32 %45(%class.SkTCurve* %41) #9
  %47 = bitcast %class.SkTCurve* %41 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %48 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %47, align 8
  %49 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %48, i64 3
  %50 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %49, align 8
  %51 = tail call dereferenceable(16) %struct.SkDPoint* %50(%class.SkTCurve* %41, i32 %46) #9
  %52 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %40, i64 0, i32 0
  %53 = load double, double* %52, align 8
  %54 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %51, i64 0, i32 0
  %55 = load double, double* %54, align 8
  %56 = fcmp oeq double %53, %55
  br i1 %56, label %57, label %64

57:                                               ; preds = %34
  %58 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %40, i64 0, i32 1
  %59 = load double, double* %58, align 8
  %60 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %51, i64 0, i32 1
  %61 = load double, double* %60, align 8
  %62 = fcmp oeq double %59, %61
  br i1 %62, label %63, label %64

63:                                               ; preds = %57
  store i8 0, i8* %2, align 1
  store i8 1, i8* %3, align 1
  br label %130

64:                                               ; preds = %34, %57
  %65 = load %class.SkTCurve*, %class.SkTCurve** %8, align 8
  %66 = bitcast %class.SkTCurve* %65 to i32 (%class.SkTCurve*)***
  %67 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %66, align 8
  %68 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %67, i64 18
  %69 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %68, align 8
  %70 = tail call i32 %69(%class.SkTCurve* %65) #9
  %71 = bitcast %class.SkTCurve* %65 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %72 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %71, align 8
  %73 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %72, i64 3
  %74 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %73, align 8
  %75 = tail call dereferenceable(16) %struct.SkDPoint* %74(%class.SkTCurve* %65, i32 %70) #9
  %76 = load %class.SkTCurve*, %class.SkTCurve** %15, align 8
  %77 = bitcast %class.SkTCurve* %76 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %78 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %77, align 8
  %79 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %78, i64 3
  %80 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %79, align 8
  %81 = tail call dereferenceable(16) %struct.SkDPoint* %80(%class.SkTCurve* %76, i32 0) #9
  %82 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %75, i64 0, i32 0
  %83 = load double, double* %82, align 8
  %84 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %81, i64 0, i32 0
  %85 = load double, double* %84, align 8
  %86 = fcmp oeq double %83, %85
  br i1 %86, label %87, label %94

87:                                               ; preds = %64
  %88 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %75, i64 0, i32 1
  %89 = load double, double* %88, align 8
  %90 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %81, i64 0, i32 1
  %91 = load double, double* %90, align 8
  %92 = fcmp oeq double %89, %91
  br i1 %92, label %93, label %94

93:                                               ; preds = %87
  store i8 1, i8* %2, align 1
  store i8 0, i8* %3, align 1
  br label %130

94:                                               ; preds = %64, %87
  %95 = load %class.SkTCurve*, %class.SkTCurve** %8, align 8
  %96 = bitcast %class.SkTCurve* %95 to i32 (%class.SkTCurve*)***
  %97 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %96, align 8
  %98 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %97, i64 18
  %99 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %98, align 8
  %100 = tail call i32 %99(%class.SkTCurve* %95) #9
  %101 = bitcast %class.SkTCurve* %95 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %102 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %101, align 8
  %103 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %102, i64 3
  %104 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %103, align 8
  %105 = tail call dereferenceable(16) %struct.SkDPoint* %104(%class.SkTCurve* %95, i32 %100) #9
  %106 = load %class.SkTCurve*, %class.SkTCurve** %15, align 8
  %107 = bitcast %class.SkTCurve* %106 to i32 (%class.SkTCurve*)***
  %108 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %107, align 8
  %109 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %108, i64 18
  %110 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %109, align 8
  %111 = tail call i32 %110(%class.SkTCurve* %106) #9
  %112 = bitcast %class.SkTCurve* %106 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %113 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %112, align 8
  %114 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %113, i64 3
  %115 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %114, align 8
  %116 = tail call dereferenceable(16) %struct.SkDPoint* %115(%class.SkTCurve* %106, i32 %111) #9
  %117 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %105, i64 0, i32 0
  %118 = load double, double* %117, align 8
  %119 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %116, i64 0, i32 0
  %120 = load double, double* %119, align 8
  %121 = fcmp oeq double %118, %120
  br i1 %121, label %122, label %129

122:                                              ; preds = %94
  %123 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %105, i64 0, i32 1
  %124 = load double, double* %123, align 8
  %125 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %116, i64 0, i32 1
  %126 = load double, double* %125, align 8
  %127 = fcmp oeq double %124, %126
  br i1 %127, label %128, label %129

128:                                              ; preds = %122
  store i8 0, i8* %3, align 1
  store i8 0, i8* %2, align 1
  br label %130

129:                                              ; preds = %94, %122
  store i8 0, i8* %4, align 1
  br label %236

130:                                              ; preds = %63, %128, %93, %33
  store i8 1, i8* %4, align 1
  %131 = bitcast [4 x %struct.SkDPoint*]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %131) #9
  %132 = getelementptr inbounds [4 x %struct.SkDPoint*], [4 x %struct.SkDPoint*]* %6, i64 0, i64 0
  %133 = bitcast [4 x %struct.SkDPoint*]* %7 to i8*
  %134 = bitcast [4 x %struct.SkDPoint*]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %134, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %133) #9
  %135 = getelementptr inbounds [4 x %struct.SkDPoint*], [4 x %struct.SkDPoint*]* %7, i64 0, i64 0
  %136 = bitcast [4 x %struct.SkDPoint*]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %136, i8 -86, i64 32, i1 false)
  %137 = load i8, i8* %2, align 1, !range !2
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %139, label %146

139:                                              ; preds = %130
  %140 = load %class.SkTCurve*, %class.SkTCurve** %15, align 8
  %141 = bitcast %class.SkTCurve* %140 to i32 (%class.SkTCurve*)***
  %142 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %141, align 8
  %143 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %142, i64 18
  %144 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %143, align 8
  %145 = tail call i32 %144(%class.SkTCurve* %140) #9
  br label %146

146:                                              ; preds = %130, %139
  %147 = phi i32 [ %145, %139 ], [ 0, %130 ]
  %148 = load %class.SkTCurve*, %class.SkTCurve** %15, align 8
  %149 = bitcast %class.SkTCurve* %148 to void (%class.SkTCurve*, i32, %struct.SkDPoint**)***
  %150 = load void (%class.SkTCurve*, i32, %struct.SkDPoint**)**, void (%class.SkTCurve*, i32, %struct.SkDPoint**)*** %149, align 8
  %151 = getelementptr inbounds void (%class.SkTCurve*, i32, %struct.SkDPoint**)*, void (%class.SkTCurve*, i32, %struct.SkDPoint**)** %150, i64 16
  %152 = load void (%class.SkTCurve*, i32, %struct.SkDPoint**)*, void (%class.SkTCurve*, i32, %struct.SkDPoint**)** %151, align 8
  call void %152(%class.SkTCurve* %148, i32 %147, %struct.SkDPoint** nonnull %132) #9
  %153 = load %class.SkTCurve*, %class.SkTCurve** %8, align 8
  %154 = load i8, i8* %3, align 1, !range !2
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %156, label %162

156:                                              ; preds = %146
  %157 = bitcast %class.SkTCurve* %153 to i32 (%class.SkTCurve*)***
  %158 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %157, align 8
  %159 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %158, i64 18
  %160 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %159, align 8
  %161 = call i32 %160(%class.SkTCurve* %153) #9
  br label %162

162:                                              ; preds = %146, %156
  %163 = phi i32 [ %161, %156 ], [ 0, %146 ]
  %164 = bitcast %class.SkTCurve* %153 to void (%class.SkTCurve*, i32, %struct.SkDPoint**)***
  %165 = load void (%class.SkTCurve*, i32, %struct.SkDPoint**)**, void (%class.SkTCurve*, i32, %struct.SkDPoint**)*** %164, align 8
  %166 = getelementptr inbounds void (%class.SkTCurve*, i32, %struct.SkDPoint**)*, void (%class.SkTCurve*, i32, %struct.SkDPoint**)** %165, i64 16
  %167 = load void (%class.SkTCurve*, i32, %struct.SkDPoint**)*, void (%class.SkTCurve*, i32, %struct.SkDPoint**)** %166, align 8
  call void %167(%class.SkTCurve* %153, i32 %163, %struct.SkDPoint** nonnull %135) #9
  %168 = load %class.SkTCurve*, %class.SkTCurve** %15, align 8
  %169 = bitcast %class.SkTCurve* %168 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %170 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %169, align 8
  %171 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %170, i64 3
  %172 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %171, align 8
  %173 = call dereferenceable(16) %struct.SkDPoint* %172(%class.SkTCurve* %168, i32 %147) #9
  %174 = load %class.SkTCurve*, %class.SkTCurve** %15, align 8
  %175 = bitcast %class.SkTCurve* %174 to i32 (%class.SkTCurve*)***
  %176 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %175, align 8
  %177 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %176, i64 17
  %178 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %177, align 8
  %179 = call i32 %178(%class.SkTCurve* %174) #9
  %180 = icmp sgt i32 %179, 1
  br i1 %180, label %181, label %234

181:                                              ; preds = %162
  %182 = bitcast %struct.SkDPoint* %173 to <2 x double>*
  %183 = bitcast %struct.SkDPoint* %173 to <2 x double>*
  br label %184

184:                                              ; preds = %181, %223
  %185 = phi i64 [ 0, %181 ], [ %224, %223 ]
  %186 = getelementptr inbounds [4 x %struct.SkDPoint*], [4 x %struct.SkDPoint*]* %6, i64 0, i64 %185
  %187 = bitcast %struct.SkDPoint** %186 to <2 x double>**
  %188 = load <2 x double>*, <2 x double>** %187, align 8
  %189 = load <2 x double>, <2 x double>* %188, align 8
  %190 = load <2 x double>, <2 x double>* %182, align 8
  %191 = fsub <2 x double> %189, %190
  %192 = load %class.SkTCurve*, %class.SkTCurve** %8, align 8
  %193 = bitcast %class.SkTCurve* %192 to i32 (%class.SkTCurve*)***
  %194 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %193, align 8
  %195 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %194, i64 17
  %196 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %195, align 8
  %197 = call i32 %196(%class.SkTCurve* %192) #9
  %198 = icmp sgt i32 %197, 1
  br i1 %198, label %209, label %223

199:                                              ; preds = %209
  %200 = load %class.SkTCurve*, %class.SkTCurve** %8, align 8
  %201 = bitcast %class.SkTCurve* %200 to i32 (%class.SkTCurve*)***
  %202 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %201, align 8
  %203 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %202, i64 17
  %204 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %203, align 8
  %205 = call i32 %204(%class.SkTCurve* %200) #9
  %206 = add nsw i32 %205, -1
  %207 = sext i32 %206 to i64
  %208 = icmp slt i64 %222, %207
  br i1 %208, label %209, label %223

209:                                              ; preds = %184, %199
  %210 = phi i64 [ %222, %199 ], [ 0, %184 ]
  %211 = getelementptr inbounds [4 x %struct.SkDPoint*], [4 x %struct.SkDPoint*]* %7, i64 0, i64 %210
  %212 = bitcast %struct.SkDPoint** %211 to <2 x double>**
  %213 = load <2 x double>*, <2 x double>** %212, align 8
  %214 = load <2 x double>, <2 x double>* %213, align 8
  %215 = load <2 x double>, <2 x double>* %183, align 8
  %216 = fsub <2 x double> %214, %215
  %217 = fmul <2 x double> %191, %216
  %218 = extractelement <2 x double> %217, i32 0
  %219 = extractelement <2 x double> %217, i32 1
  %220 = fadd double %218, %219
  %221 = fcmp ult double %220, 0.000000e+00
  %222 = add nuw nsw i64 %210, 1
  br i1 %221, label %199, label %234

223:                                              ; preds = %199, %184
  %224 = add nuw nsw i64 %185, 1
  %225 = load %class.SkTCurve*, %class.SkTCurve** %15, align 8
  %226 = bitcast %class.SkTCurve* %225 to i32 (%class.SkTCurve*)***
  %227 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %226, align 8
  %228 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %227, i64 17
  %229 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %228, align 8
  %230 = call i32 %229(%class.SkTCurve* %225) #9
  %231 = add nsw i32 %230, -1
  %232 = sext i32 %231 to i64
  %233 = icmp slt i64 %224, %232
  br i1 %233, label %184, label %234

234:                                              ; preds = %223, %209, %162
  %235 = phi i1 [ true, %162 ], [ false, %209 ], [ true, %223 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %133) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %131) #9
  br label %236

236:                                              ; preds = %234, %129
  %237 = phi i1 [ %235, %234 ], [ false, %129 ]
  ret i1 %237
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7SkTSpan14hullsIntersectEPS_PbS1_(%class.SkTSpan* nocapture, %class.SkTSpan* nocapture, i8* nocapture, i8* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = alloca i8, align 1
  %9 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 6, i32 0
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 6, i32 2
  %12 = load double, double* %11, align 8
  %13 = fcmp ugt double %10, %12
  br i1 %13, label %108, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 6, i32 0
  %16 = load double, double* %15, align 8
  %17 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 6, i32 2
  %18 = load double, double* %17, align 8
  %19 = fcmp ugt double %16, %18
  br i1 %19, label %108, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 6, i32 1
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 6, i32 3
  %24 = load double, double* %23, align 8
  %25 = fcmp ugt double %22, %24
  br i1 %25, label %108, label %26

26:                                               ; preds = %20
  %27 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 6, i32 1
  %28 = load double, double* %27, align 8
  %29 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 6, i32 3
  %30 = load double, double* %29, align 8
  %31 = fcmp ugt double %28, %30
  br i1 %31, label %108, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 12
  %34 = load i8, i8* %33, align 2, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %70

36:                                               ; preds = %32
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #9
  store i8 -86, i8* %5, align 1
  %37 = call zeroext i1 @_ZN7SkTSpan21onlyEndPointsInCommonEPKS_PbS2_S2_(%class.SkTSpan* %0, %class.SkTSpan* %1, i8* %2, i8* %3, i8* nonnull %5) #9
  br i1 %37, label %38, label %39

38:                                               ; preds = %36
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #9
  br label %108

39:                                               ; preds = %36
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #9
  store i8 -86, i8* %6, align 1
  %40 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 0
  %41 = load %class.SkTCurve*, %class.SkTCurve** %40, align 8
  %42 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 0
  %43 = load %class.SkTCurve*, %class.SkTCurve** %42, align 8
  %44 = bitcast %class.SkTCurve* %41 to i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)***
  %45 = load i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)**, i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)*** %44, align 8
  %46 = getelementptr inbounds i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)*, i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)** %45, i64 11
  %47 = load i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)*, i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)** %46, align 8
  %48 = call zeroext i1 %47(%class.SkTCurve* %41, %class.SkTCurve* dereferenceable(8) %43, i8* nonnull %6) #9
  br i1 %48, label %49, label %63

49:                                               ; preds = %39
  %50 = load i8, i8* %6, align 1, !range !2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %67, label %52

52:                                               ; preds = %49
  store i8 1, i8* %33, align 2
  %53 = load %class.SkTCurve*, %class.SkTCurve** %40, align 8
  %54 = bitcast %class.SkTCurve* %53 to i1 (%class.SkTCurve*)***
  %55 = load i1 (%class.SkTCurve*)**, i1 (%class.SkTCurve*)*** %54, align 8
  %56 = getelementptr inbounds i1 (%class.SkTCurve*)*, i1 (%class.SkTCurve*)** %55, i64 5
  %57 = load i1 (%class.SkTCurve*)*, i1 (%class.SkTCurve*)** %56, align 8
  %58 = call zeroext i1 %57(%class.SkTCurve* %53) #9
  %59 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 13
  %60 = zext i1 %58 to i8
  store i8 %60, i8* %59, align 1
  %61 = load i8, i8* %5, align 1, !range !2
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %69, label %67

63:                                               ; preds = %39
  %64 = load i8, i8* %5, align 1, !range !2
  %65 = shl nuw nsw i8 %64, 1
  %66 = zext i8 %65 to i32
  br label %67

67:                                               ; preds = %52, %63, %49
  %68 = phi i32 [ 1, %49 ], [ %66, %63 ], [ 1, %52 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #9
  br label %108

69:                                               ; preds = %52
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #9
  br label %70

70:                                               ; preds = %32, %69
  %71 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 12
  %72 = load i8, i8* %71, align 2, !range !2
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %74, label %108

74:                                               ; preds = %70
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #9
  store i8 -86, i8* %7, align 1
  %75 = call zeroext i1 @_ZN7SkTSpan21onlyEndPointsInCommonEPKS_PbS2_S2_(%class.SkTSpan* %1, %class.SkTSpan* %0, i8* %3, i8* %2, i8* nonnull %7) #9
  br i1 %75, label %76, label %77

76:                                               ; preds = %74
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #9
  br label %108

77:                                               ; preds = %74
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8) #9
  store i8 -86, i8* %8, align 1
  %78 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 0
  %79 = load %class.SkTCurve*, %class.SkTCurve** %78, align 8
  %80 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 0
  %81 = load %class.SkTCurve*, %class.SkTCurve** %80, align 8
  %82 = bitcast %class.SkTCurve* %79 to i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)***
  %83 = load i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)**, i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)*** %82, align 8
  %84 = getelementptr inbounds i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)*, i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)** %83, i64 11
  %85 = load i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)*, i1 (%class.SkTCurve*, %class.SkTCurve*, i8*)** %84, align 8
  %86 = call zeroext i1 %85(%class.SkTCurve* %79, %class.SkTCurve* dereferenceable(8) %81, i8* nonnull %8) #9
  br i1 %86, label %87, label %101

87:                                               ; preds = %77
  %88 = load i8, i8* %8, align 1, !range !2
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %105, label %90

90:                                               ; preds = %87
  store i8 1, i8* %71, align 2
  %91 = load %class.SkTCurve*, %class.SkTCurve** %78, align 8
  %92 = bitcast %class.SkTCurve* %91 to i1 (%class.SkTCurve*)***
  %93 = load i1 (%class.SkTCurve*)**, i1 (%class.SkTCurve*)*** %92, align 8
  %94 = getelementptr inbounds i1 (%class.SkTCurve*)*, i1 (%class.SkTCurve*)** %93, i64 5
  %95 = load i1 (%class.SkTCurve*)*, i1 (%class.SkTCurve*)** %94, align 8
  %96 = call zeroext i1 %95(%class.SkTCurve* %91) #9
  %97 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 13
  %98 = zext i1 %96 to i8
  store i8 %98, i8* %97, align 1
  %99 = load i8, i8* %7, align 1, !range !2
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %107, label %105

101:                                              ; preds = %77
  %102 = load i8, i8* %7, align 1, !range !2
  %103 = shl nuw nsw i8 %102, 1
  %104 = zext i8 %103 to i32
  br label %105

105:                                              ; preds = %90, %101, %87
  %106 = phi i32 [ 1, %87 ], [ %104, %101 ], [ 1, %90 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #9
  br label %108

107:                                              ; preds = %90
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #9
  br label %108

108:                                              ; preds = %26, %70, %4, %14, %20, %107, %105, %76, %67, %38
  %109 = phi i32 [ 0, %26 ], [ 2, %38 ], [ %68, %67 ], [ -1, %107 ], [ 2, %76 ], [ %106, %105 ], [ 0, %20 ], [ 0, %14 ], [ 0, %4 ], [ -1, %70 ]
  ret i32 %109
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkTSpan4initERK8SkTCurve(%class.SkTSpan*, %class.SkTCurve* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 4
  %4 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 7
  store double 0.000000e+00, double* %4, align 8
  %5 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 8
  %6 = bitcast %class.SkTSpan** %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false)
  store double 1.000000e+00, double* %5, align 8
  %7 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 3
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %7, align 8
  %8 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 13
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 12
  store i8 0, i8* %9, align 2
  %10 = tail call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* %0, %class.SkTCurve* dereferenceable(8) %1) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan*, %class.SkTCurve* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 7
  %6 = load double, double* %5, align 8
  %7 = fcmp uno double %6, 0.000000e+00
  br i1 %7, label %64, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 8
  %10 = load double, double* %9, align 8
  %11 = fcmp uno double %10, 0.000000e+00
  br i1 %11, label %64, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 0
  %14 = load %class.SkTCurve*, %class.SkTCurve** %13, align 8
  %15 = bitcast %class.SkTCurve* %1 to void (%class.SkTCurve*, double, double, %class.SkTCurve*)***
  %16 = load void (%class.SkTCurve*, double, double, %class.SkTCurve*)**, void (%class.SkTCurve*, double, double, %class.SkTCurve*)*** %15, align 8
  %17 = getelementptr inbounds void (%class.SkTCurve*, double, double, %class.SkTCurve*)*, void (%class.SkTCurve*, double, double, %class.SkTCurve*)** %16, i64 21
  %18 = load void (%class.SkTCurve*, double, double, %class.SkTCurve*)*, void (%class.SkTCurve*, double, double, %class.SkTCurve*)** %17, align 8
  tail call void %18(%class.SkTCurve* %1, double %6, double %10, %class.SkTCurve* %14) #9
  %19 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 6
  %20 = load %class.SkTCurve*, %class.SkTCurve** %13, align 8
  tail call void @_ZN7SkDRect9setBoundsERK8SkTCurve(%struct.SkDRect* %19, %class.SkTCurve* dereferenceable(8) %20) #9
  %21 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 1, i32 1
  store double -1.000000e+00, double* %21, align 8
  %22 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 1, i32 2
  store i8 0, i8* %22, align 8
  %23 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 1, i32 0, i32 0
  %24 = bitcast double* %23 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %24, align 8
  %25 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 2, i32 1
  store double -1.000000e+00, double* %25, align 8
  %26 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 2, i32 2
  store i8 0, i8* %26, align 8
  %27 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 2, i32 0, i32 0
  %28 = bitcast double* %27 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %28, align 8
  %29 = bitcast double* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29)
  %30 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 6, i32 2
  %31 = load double, double* %30, align 8
  %32 = getelementptr inbounds %struct.SkDRect, %struct.SkDRect* %19, i64 0, i32 0
  %33 = load double, double* %32, align 8
  %34 = fsub double %31, %33
  store double %34, double* %3, align 8
  %35 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35)
  %36 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 6, i32 3
  %37 = load double, double* %36, align 8
  %38 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 6, i32 1
  %39 = load double, double* %38, align 8
  %40 = fsub double %37, %39
  store double %40, double* %4, align 8
  %41 = fcmp olt double %34, %40
  %42 = select i1 %41, double* %4, double* %3
  %43 = bitcast double* %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 9
  %46 = bitcast double* %45 to i64*
  store i64 %44, i64* %46, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29)
  %47 = load %class.SkTCurve*, %class.SkTCurve** %13, align 8
  %48 = bitcast %class.SkTCurve* %47 to i1 (%class.SkTCurve*)***
  %49 = load i1 (%class.SkTCurve*)**, i1 (%class.SkTCurve*)*** %48, align 8
  %50 = getelementptr inbounds i1 (%class.SkTCurve*)*, i1 (%class.SkTCurve*)** %49, i64 4
  %51 = load i1 (%class.SkTCurve*)*, i1 (%class.SkTCurve*)** %50, align 8
  %52 = tail call zeroext i1 %51(%class.SkTCurve* %47) #9
  %53 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 10
  %54 = zext i1 %52 to i8
  store i8 %54, i8* %53, align 8
  %55 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 11
  store i8 0, i8* %55, align 1
  %56 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 14
  store i8 0, i8* %56, align 4
  %57 = load double, double* %32, align 8
  %58 = load double, double* %30, align 8
  %59 = fcmp ugt double %57, %58
  br i1 %59, label %64, label %60

60:                                               ; preds = %12
  %61 = load double, double* %38, align 8
  %62 = load double, double* %36, align 8
  %63 = fcmp ole double %61, %62
  br label %64

64:                                               ; preds = %60, %12, %2, %8
  %65 = phi i1 [ false, %8 ], [ false, %2 ], [ false, %12 ], [ %63, %60 ]
  ret i1 %65
}

declare void @_ZN7SkDRect9setBoundsERK8SkTCurve(%struct.SkDRect*, %class.SkTCurve* dereferenceable(8)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSpan16linearsIntersectEPS_(%class.SkTSpan* nocapture readonly, %class.SkTSpan* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 0
  %4 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %5 = tail call i32 @_ZNK7SkTSpan16linearIntersectsERK8SkTCurve(%class.SkTSpan* %0, %class.SkTCurve* dereferenceable(8) %4)
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %11, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 0
  %9 = load %class.SkTCurve*, %class.SkTCurve** %8, align 8
  %10 = tail call i32 @_ZNK7SkTSpan16linearIntersectsERK8SkTCurve(%class.SkTSpan* %1, %class.SkTCurve* dereferenceable(8) %9)
  br label %11

11:                                               ; preds = %2, %7
  %12 = phi i32 [ %10, %7 ], [ %5, %2 ]
  %13 = icmp ne i32 %12, 0
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK7SkTSpan16linearIntersectsERK8SkTCurve(%class.SkTSpan* nocapture readonly, %class.SkTCurve* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 0
  %4 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %5 = bitcast %class.SkTCurve* %4 to i32 (%class.SkTCurve*)***
  %6 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %5, align 8
  %7 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %6, i64 18
  %8 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %7, align 8
  %9 = tail call i32 %8(%class.SkTCurve* %4) #9
  %10 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %11 = bitcast %class.SkTCurve* %10 to i1 (%class.SkTCurve*)***
  %12 = load i1 (%class.SkTCurve*)**, i1 (%class.SkTCurve*)*** %11, align 8
  %13 = getelementptr inbounds i1 (%class.SkTCurve*)*, i1 (%class.SkTCurve*)** %12, i64 5
  %14 = load i1 (%class.SkTCurve*)*, i1 (%class.SkTCurve*)** %13, align 8
  %15 = tail call zeroext i1 %14(%class.SkTCurve* %10) #9
  br i1 %15, label %87, label %16

16:                                               ; preds = %2
  %17 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %18 = bitcast %class.SkTCurve* %17 to i32 (%class.SkTCurve*)***
  %19 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %18, align 8
  %20 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %19, i64 17
  %21 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %20, align 8
  %22 = tail call i32 %21(%class.SkTCurve* %17) #9
  %23 = icmp sgt i32 %22, 1
  br i1 %23, label %36, label %87

24:                                               ; preds = %49, %36
  %25 = phi i32 [ %40, %36 ], [ %76, %49 ]
  %26 = phi double [ %39, %36 ], [ %77, %49 ]
  %27 = phi i32 [ %37, %36 ], [ %78, %49 ]
  %28 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %29 = bitcast %class.SkTCurve* %28 to i32 (%class.SkTCurve*)***
  %30 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %29, align 8
  %31 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %30, i64 17
  %32 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %31, align 8
  %33 = tail call i32 %32(%class.SkTCurve* %28) #9
  %34 = add nsw i32 %33, -1
  %35 = icmp slt i32 %41, %34
  br i1 %35, label %36, label %87

36:                                               ; preds = %16, %24
  %37 = phi i32 [ %27, %24 ], [ 0, %16 ]
  %38 = phi i32 [ %41, %24 ], [ 0, %16 ]
  %39 = phi double [ %26, %24 ], [ 0.000000e+00, %16 ]
  %40 = phi i32 [ %25, %24 ], [ %9, %16 ]
  %41 = add nuw nsw i32 %38, 1
  %42 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %43 = bitcast %class.SkTCurve* %42 to i32 (%class.SkTCurve*)***
  %44 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %43, align 8
  %45 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %44, i64 17
  %46 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %45, align 8
  %47 = tail call i32 %46(%class.SkTCurve* %42) #9
  %48 = icmp slt i32 %41, %47
  br i1 %48, label %49, label %24

49:                                               ; preds = %36, %49
  %50 = phi i32 [ %78, %49 ], [ %37, %36 ]
  %51 = phi i32 [ %79, %49 ], [ %41, %36 ]
  %52 = phi double [ %77, %49 ], [ %39, %36 ]
  %53 = phi i32 [ %76, %49 ], [ %40, %36 ]
  %54 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %55 = bitcast %class.SkTCurve* %54 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %56 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %55, align 8
  %57 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %56, i64 3
  %58 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %57, align 8
  %59 = tail call dereferenceable(16) %struct.SkDPoint* %58(%class.SkTCurve* %54, i32 %38) #9
  %60 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %61 = bitcast %class.SkTCurve* %60 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %62 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %61, align 8
  %63 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %62, i64 3
  %64 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %63, align 8
  %65 = tail call dereferenceable(16) %struct.SkDPoint* %64(%class.SkTCurve* %60, i32 %51) #9
  %66 = bitcast %struct.SkDPoint* %59 to <2 x double>*
  %67 = load <2 x double>, <2 x double>* %66, align 8
  %68 = bitcast %struct.SkDPoint* %65 to <2 x double>*
  %69 = load <2 x double>, <2 x double>* %68, align 8
  %70 = fsub <2 x double> %67, %69
  %71 = fmul <2 x double> %70, %70
  %72 = extractelement <2 x double> %71, i32 0
  %73 = extractelement <2 x double> %71, i32 1
  %74 = fadd double %72, %73
  %75 = fcmp ogt double %52, %74
  %76 = select i1 %75, i32 %53, i32 %51
  %77 = select i1 %75, double %52, double %74
  %78 = select i1 %75, i32 %50, i32 %38
  %79 = add nuw nsw i32 %51, 1
  %80 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %81 = bitcast %class.SkTCurve* %80 to i32 (%class.SkTCurve*)***
  %82 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %81, align 8
  %83 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %82, i64 17
  %84 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %83, align 8
  %85 = tail call i32 %84(%class.SkTCurve* %80) #9
  %86 = icmp slt i32 %79, %85
  br i1 %86, label %49, label %24

87:                                               ; preds = %24, %16, %2
  %88 = phi i32 [ %9, %2 ], [ %9, %16 ], [ %25, %24 ]
  %89 = phi i32 [ 0, %2 ], [ 0, %16 ], [ %27, %24 ]
  %90 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %91 = bitcast %class.SkTCurve* %90 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %92 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %91, align 8
  %93 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %92, i64 3
  %94 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %93, align 8
  %95 = tail call dereferenceable(16) %struct.SkDPoint* %94(%class.SkTCurve* %90, i32 %89) #9
  %96 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %95, i64 0, i32 0
  %97 = load double, double* %96, align 8
  %98 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %99 = bitcast %class.SkTCurve* %98 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %100 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %99, align 8
  %101 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %100, i64 3
  %102 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %101, align 8
  %103 = tail call dereferenceable(16) %struct.SkDPoint* %102(%class.SkTCurve* %98, i32 %89) #9
  %104 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %103, i64 0, i32 1
  %105 = load double, double* %104, align 8
  %106 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %107 = bitcast %class.SkTCurve* %106 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %108 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %107, align 8
  %109 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %108, i64 3
  %110 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %109, align 8
  %111 = tail call dereferenceable(16) %struct.SkDPoint* %110(%class.SkTCurve* %106, i32 %88) #9
  %112 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %111, i64 0, i32 0
  %113 = load double, double* %112, align 8
  %114 = fsub double %113, %97
  %115 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %116 = bitcast %class.SkTCurve* %115 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %117 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %116, align 8
  %118 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %117, i64 3
  %119 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %118, align 8
  %120 = tail call dereferenceable(16) %struct.SkDPoint* %119(%class.SkTCurve* %115, i32 %88) #9
  %121 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %120, i64 0, i32 1
  %122 = load double, double* %121, align 8
  %123 = fsub double %122, %105
  %124 = tail call double @llvm.fabs.f64(double %114)
  %125 = tail call double @llvm.fabs.f64(double %123)
  %126 = fcmp olt double %124, %125
  %127 = select i1 %126, double %125, double %124
  %128 = bitcast %class.SkTCurve* %1 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %129 = bitcast %class.SkTCurve* %1 to i32 (%class.SkTCurve*)***
  %130 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %129, align 8
  %131 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %130, i64 17
  %132 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %131, align 8
  %133 = tail call i32 %132(%class.SkTCurve* %1) #9
  %134 = icmp sgt i32 %133, 0
  br i1 %134, label %135, label %201

135:                                              ; preds = %87
  %136 = insertelement <2 x double> undef, double %105, i32 0
  %137 = insertelement <2 x double> %136, double %97, i32 1
  br label %138

138:                                              ; preds = %135, %193
  %139 = phi i32 [ %195, %193 ], [ 0, %135 ]
  %140 = phi double [ %194, %193 ], [ 0.000000e+00, %135 ]
  %141 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %128, align 8
  %142 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %141, i64 2
  %143 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %142, align 8
  %144 = tail call dereferenceable(16) %struct.SkDPoint* %143(%class.SkTCurve* %1, i32 %139) #9
  %145 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %144, i64 0, i32 1
  %146 = load double, double* %145, align 8
  %147 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %128, align 8
  %148 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %147, i64 2
  %149 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %148, align 8
  %150 = tail call dereferenceable(16) %struct.SkDPoint* %149(%class.SkTCurve* %1, i32 %139) #9
  %151 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %150, i64 0, i32 0
  %152 = load double, double* %151, align 8
  %153 = insertelement <2 x double> undef, double %146, i32 0
  %154 = insertelement <2 x double> %153, double %152, i32 1
  %155 = fsub <2 x double> %154, %137
  %156 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %155)
  %157 = extractelement <2 x double> %156, i32 0
  %158 = extractelement <2 x double> %156, i32 1
  %159 = fcmp olt double %157, %158
  %160 = select i1 %159, double %158, double %157
  %161 = fcmp olt double %127, %160
  %162 = select i1 %161, double %160, double %127
  %163 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %128, align 8
  %164 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %163, i64 2
  %165 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %164, align 8
  %166 = tail call dereferenceable(16) %struct.SkDPoint* %165(%class.SkTCurve* %1, i32 %139) #9
  %167 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %166, i64 0, i32 1
  %168 = load double, double* %167, align 8
  %169 = fsub double %168, %105
  %170 = fmul double %114, %169
  %171 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %128, align 8
  %172 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %171, i64 2
  %173 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %172, align 8
  %174 = tail call dereferenceable(16) %struct.SkDPoint* %173(%class.SkTCurve* %1, i32 %139) #9
  %175 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %174, i64 0, i32 0
  %176 = load double, double* %175, align 8
  %177 = fsub double %176, %97
  %178 = fmul double %123, %177
  %179 = fsub double %170, %178
  %180 = fcmp oeq double %179, 0.000000e+00
  br i1 %180, label %201, label %181

181:                                              ; preds = %138
  %182 = tail call double @llvm.fabs.f64(double %179) #9
  %183 = fmul double %162, 0x3CB0000000000000
  %184 = fcmp olt double %182, %183
  br i1 %184, label %201, label %185

185:                                              ; preds = %181
  %186 = fmul double %162, 0x3E80000000000000
  %187 = fcmp olt double %182, %186
  br i1 %187, label %201, label %188

188:                                              ; preds = %185
  %189 = icmp eq i32 %139, 0
  br i1 %189, label %193, label %190

190:                                              ; preds = %188
  %191 = fmul double %140, %179
  %192 = fcmp olt double %191, 0.000000e+00
  br i1 %192, label %201, label %193

193:                                              ; preds = %188, %190
  %194 = phi double [ %179, %188 ], [ %140, %190 ]
  %195 = add nuw nsw i32 %139, 1
  %196 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %129, align 8
  %197 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %196, i64 17
  %198 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %197, align 8
  %199 = tail call i32 %198(%class.SkTCurve* %1) #9
  %200 = icmp slt i32 %195, %199
  br i1 %200, label %138, label %201

201:                                              ; preds = %181, %185, %193, %138, %190, %87
  %202 = phi i32 [ 0, %87 ], [ 1, %190 ], [ 1, %138 ], [ 0, %193 ], [ 3, %185 ], [ 1, %181 ]
  ret i32 %202
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK7SkTSpan7linearTERK8SkDPoint(%class.SkTSpan* nocapture readonly, %struct.SkDPoint* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 0
  %4 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %5 = bitcast %class.SkTCurve* %4 to i32 (%class.SkTCurve*)***
  %6 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %5, align 8
  %7 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %6, i64 18
  %8 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %7, align 8
  %9 = tail call i32 %8(%class.SkTCurve* %4) #9
  %10 = bitcast %class.SkTCurve* %4 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %11 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %10, align 8
  %12 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %11, i64 3
  %13 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %12, align 8
  %14 = tail call dereferenceable(16) %struct.SkDPoint* %13(%class.SkTCurve* %4, i32 %9) #9
  %15 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %16 = bitcast %class.SkTCurve* %15 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %17 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %16, align 8
  %18 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %17, i64 3
  %19 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %18, align 8
  %20 = tail call dereferenceable(16) %struct.SkDPoint* %19(%class.SkTCurve* %15, i32 0) #9
  %21 = bitcast %struct.SkDPoint* %14 to <2 x double>*
  %22 = load <2 x double>, <2 x double>* %21, align 8
  %23 = bitcast %struct.SkDPoint* %20 to <2 x double>*
  %24 = load <2 x double>, <2 x double>* %23, align 8
  %25 = fsub <2 x double> %22, %24
  %26 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %25)
  %27 = extractelement <2 x double> %26, i32 0
  %28 = extractelement <2 x double> %26, i32 1
  %29 = fcmp ogt double %27, %28
  br i1 %29, label %30, label %41

30:                                               ; preds = %2
  %31 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %32 = load double, double* %31, align 8
  %33 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %34 = bitcast %class.SkTCurve* %33 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %35 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %34, align 8
  %36 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %35, i64 3
  %37 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %36, align 8
  %38 = tail call dereferenceable(16) %struct.SkDPoint* %37(%class.SkTCurve* %33, i32 0) #9
  %39 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %38, i64 0, i32 0
  %40 = extractelement <2 x double> %25, i32 0
  br label %52

41:                                               ; preds = %2
  %42 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %43 = load double, double* %42, align 8
  %44 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %45 = bitcast %class.SkTCurve* %44 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %46 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %45, align 8
  %47 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %46, i64 3
  %48 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %47, align 8
  %49 = tail call dereferenceable(16) %struct.SkDPoint* %48(%class.SkTCurve* %44, i32 0) #9
  %50 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %49, i64 0, i32 1
  %51 = extractelement <2 x double> %25, i32 1
  br label %52

52:                                               ; preds = %41, %30
  %53 = phi double* [ %50, %41 ], [ %39, %30 ]
  %54 = phi double [ %43, %41 ], [ %32, %30 ]
  %55 = phi double [ %51, %41 ], [ %40, %30 ]
  %56 = load double, double* %53, align 8
  %57 = fsub double %54, %56
  %58 = fdiv double %57, %55
  ret double %58
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #6

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkTSpan* @_ZNK7SkTSpan4oppTEd(%class.SkTSpan* nocapture readonly, double) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 3
  %4 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %3, align 8
  %5 = icmp eq %struct.SkTSpanBounded* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %2
  %7 = insertelement <2 x double> undef, double %1, i32 0
  %8 = shufflevector <2 x double> %7, <2 x double> undef, <2 x i32> zeroinitializer
  br label %13

9:                                                ; preds = %13
  %10 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %14, i64 0, i32 1
  %11 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %10, align 8
  %12 = icmp eq %struct.SkTSpanBounded* %11, null
  br i1 %12, label %25, label %13

13:                                               ; preds = %6, %9
  %14 = phi %struct.SkTSpanBounded* [ %11, %9 ], [ %4, %6 ]
  %15 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %14, i64 0, i32 0
  %16 = load %class.SkTSpan*, %class.SkTSpan** %15, align 8
  %17 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %16, i64 0, i32 7
  %18 = bitcast double* %17 to <2 x double>*
  %19 = load <2 x double>, <2 x double>* %18, align 8
  %20 = fsub <2 x double> %19, %8
  %21 = extractelement <2 x double> %20, i32 0
  %22 = extractelement <2 x double> %20, i32 1
  %23 = fmul double %21, %22
  %24 = fcmp ugt double %23, 0.000000e+00
  br i1 %24, label %9, label %25

25:                                               ; preds = %9, %13, %2
  %26 = phi %class.SkTSpan* [ null, %2 ], [ %16, %13 ], [ null, %9 ]
  ret %class.SkTSpan* %26
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSpan16removeAllBoundedEv(%class.SkTSpan*) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 3
  %3 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %2, align 8
  %4 = icmp eq %struct.SkTSpanBounded* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1, %5
  %6 = phi %struct.SkTSpanBounded* [ %13, %5 ], [ %3, %1 ]
  %7 = phi i1 [ %11, %5 ], [ false, %1 ]
  %8 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %6, i64 0, i32 0
  %9 = load %class.SkTSpan*, %class.SkTSpan** %8, align 8
  %10 = tail call zeroext i1 @_ZN7SkTSpan13removeBoundedEPKS_(%class.SkTSpan* %9, %class.SkTSpan* %0)
  %11 = or i1 %7, %10
  %12 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %6, i64 0, i32 1
  %13 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %12, align 8
  %14 = icmp eq %struct.SkTSpanBounded* %13, null
  br i1 %14, label %15, label %5

15:                                               ; preds = %5, %1
  %16 = phi i1 [ false, %1 ], [ %11, %5 ]
  ret i1 %16
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSpan13removeBoundedEPKS_(%class.SkTSpan* nocapture, %class.SkTSpan* readnone) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 11
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  %6 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 3
  %7 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %6, align 8
  br i1 %5, label %60, label %8

8:                                                ; preds = %2
  %9 = icmp eq %struct.SkTSpanBounded* %7, null
  br i1 %9, label %44, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 1, i32 1
  %12 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 2, i32 1
  br label %13

13:                                               ; preds = %10, %39
  %14 = phi %struct.SkTSpanBounded* [ %7, %10 ], [ %42, %39 ]
  %15 = phi <2 x i8> [ zeroinitializer, %10 ], [ %40, %39 ]
  %16 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %14, i64 0, i32 0
  %17 = load %class.SkTSpan*, %class.SkTSpan** %16, align 8
  %18 = icmp eq %class.SkTSpan* %17, %1
  br i1 %18, label %39, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %17, i64 0, i32 7
  %21 = load double, double* %20, align 8
  %22 = load double, double* %11, align 8
  %23 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %17, i64 0, i32 8
  %24 = load double, double* %23, align 8
  %25 = load double, double* %12, align 8
  %26 = insertelement <2 x double> undef, double %21, i32 0
  %27 = shufflevector <2 x double> %26, <2 x double> undef, <2 x i32> zeroinitializer
  %28 = insertelement <2 x double> undef, double %22, i32 0
  %29 = insertelement <2 x double> %28, double %25, i32 1
  %30 = fsub <2 x double> %27, %29
  %31 = insertelement <2 x double> undef, double %24, i32 0
  %32 = shufflevector <2 x double> %31, <2 x double> undef, <2 x i32> zeroinitializer
  %33 = fsub <2 x double> %32, %29
  %34 = fmul <2 x double> %30, %33
  %35 = fcmp ole <2 x double> %34, zeroinitializer
  %36 = zext <2 x i1> %35 to <2 x i8>
  %37 = and <2 x i8> %15, <i8 1, i8 1>
  %38 = or <2 x i8> %37, %36
  br label %39

39:                                               ; preds = %13, %19
  %40 = phi <2 x i8> [ %38, %19 ], [ %15, %13 ]
  %41 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %14, i64 0, i32 1
  %42 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %41, align 8
  %43 = icmp eq %struct.SkTSpanBounded* %42, null
  br i1 %43, label %44, label %13

44:                                               ; preds = %39, %8
  %45 = phi <2 x i8> [ zeroinitializer, %8 ], [ %40, %39 ]
  %46 = extractelement <2 x i8> %45, i32 0
  %47 = and i8 %46, 1
  %48 = extractelement <2 x i8> %45, i32 1
  %49 = and i8 %47, %48
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %60

51:                                               ; preds = %44
  store i8 0, i8* %3, align 1
  %52 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 1, i32 1
  store double -1.000000e+00, double* %52, align 8
  %53 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 1, i32 2
  store i8 0, i8* %53, align 8
  %54 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 1, i32 0, i32 0
  %55 = bitcast double* %54 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %55, align 8
  %56 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 2, i32 1
  store double -1.000000e+00, double* %56, align 8
  %57 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 2, i32 2
  store i8 0, i8* %57, align 8
  %58 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 2, i32 0, i32 0
  %59 = bitcast double* %58 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %59, align 8
  br label %60

60:                                               ; preds = %2, %51, %44
  %61 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 3
  br label %62

62:                                               ; preds = %66, %60
  %63 = phi %struct.SkTSpanBounded* [ %7, %60 ], [ %68, %66 ]
  %64 = phi %struct.SkTSpanBounded* [ null, %60 ], [ %63, %66 ]
  %65 = icmp eq %struct.SkTSpanBounded* %63, null
  br i1 %65, label %78, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %63, i64 0, i32 1
  %68 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %67, align 8
  %69 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %63, i64 0, i32 0
  %70 = load %class.SkTSpan*, %class.SkTSpan** %69, align 8
  %71 = icmp eq %class.SkTSpan* %70, %1
  br i1 %71, label %72, label %62

72:                                               ; preds = %66
  %73 = icmp eq %struct.SkTSpanBounded* %64, null
  br i1 %73, label %76, label %74

74:                                               ; preds = %72
  %75 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %64, i64 0, i32 1
  store %struct.SkTSpanBounded* %68, %struct.SkTSpanBounded** %75, align 8
  br label %78

76:                                               ; preds = %72
  store %struct.SkTSpanBounded* %68, %struct.SkTSpanBounded** %61, align 8
  %77 = icmp eq %struct.SkTSpanBounded* %68, null
  br label %78

78:                                               ; preds = %62, %76, %74
  %79 = phi i1 [ %77, %76 ], [ false, %74 ], [ false, %62 ]
  ret i1 %79
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSpan7splitAtEPS_dP12SkArenaAlloc(%class.SkTSpan*, %class.SkTSpan*, double, %class.SkArenaAlloc*) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 7
  store double %2, double* %5, align 8
  %6 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 8
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 8
  store double %7, double* %8, align 8
  %9 = fcmp oeq double %7, %2
  br i1 %9, label %10, label %12

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 10
  store i8 1, i8* %11, align 8
  br label %114

12:                                               ; preds = %4
  store double %2, double* %6, align 8
  %13 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 7
  %14 = load double, double* %13, align 8
  %15 = fcmp oeq double %14, %2
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 10
  store i8 1, i8* %17, align 8
  br label %114

18:                                               ; preds = %12
  %19 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 4
  store %class.SkTSpan* %1, %class.SkTSpan** %19, align 8
  %20 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 5
  %21 = bitcast %class.SkTSpan** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 5
  %24 = bitcast %class.SkTSpan** %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 12
  %26 = load i8, i8* %25, align 2, !range !2
  %27 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 12
  store i8 %26, i8* %27, align 2
  %28 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 13
  %29 = load i8, i8* %28, align 1, !range !2
  %30 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 13
  store i8 %29, i8* %30, align 1
  store %class.SkTSpan* %0, %class.SkTSpan** %20, align 8
  %31 = load %class.SkTSpan*, %class.SkTSpan** %23, align 8
  %32 = icmp eq %class.SkTSpan* %31, null
  br i1 %32, label %35, label %33

33:                                               ; preds = %18
  %34 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %31, i64 0, i32 4
  store %class.SkTSpan* %0, %class.SkTSpan** %34, align 8
  br label %35

35:                                               ; preds = %18, %33
  %36 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 3
  %37 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %36, align 8
  %38 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 3
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %38, align 8
  %39 = icmp eq %struct.SkTSpanBounded* %37, null
  br i1 %39, label %114, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %3, i64 0, i32 1
  %42 = bitcast i8** %41 to i64*
  %43 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %3, i64 0, i32 2
  %44 = bitcast i8** %43 to i64*
  %45 = bitcast %struct.SkTSpanBounded** %38 to i64*
  %46 = bitcast %struct.SkTSpanBounded** %38 to i8**
  br label %55

47:                                               ; preds = %70
  %48 = icmp eq i8* %74, null
  br i1 %48, label %114, label %49

49:                                               ; preds = %47
  %50 = bitcast i8* %74 to %struct.SkTSpanBounded*
  %51 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %3, i64 0, i32 1
  %52 = bitcast i8** %51 to i64*
  %53 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %3, i64 0, i32 2
  %54 = bitcast i8** %53 to i64*
  br label %83

55:                                               ; preds = %40, %70
  %56 = phi %struct.SkTSpanBounded* [ %37, %40 ], [ %81, %70 ]
  %57 = bitcast %struct.SkTSpanBounded* %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = load i64, i64* %42, align 8
  %60 = sub i64 0, %59
  %61 = and i64 %60, 7
  %62 = or i64 %61, 16
  %63 = load i64, i64* %44, align 8
  %64 = sub i64 %63, %59
  %65 = icmp ugt i64 %62, %64
  br i1 %65, label %66, label %70

66:                                               ; preds = %55
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %3, i32 16, i32 8) #9
  %67 = load i64, i64* %42, align 8
  %68 = sub i64 0, %67
  %69 = and i64 %68, 7
  br label %70

70:                                               ; preds = %55, %66
  %71 = phi i64 [ %67, %66 ], [ %59, %55 ]
  %72 = phi i64 [ %69, %66 ], [ %61, %55 ]
  %73 = inttoptr i64 %71 to i8*
  %74 = getelementptr inbounds i8, i8* %73, i64 %72
  %75 = getelementptr inbounds i8, i8* %74, i64 16
  store i8* %75, i8** %41, align 8
  %76 = getelementptr inbounds i8, i8* %74, i64 8
  %77 = bitcast i8* %76 to i64*
  store i64 0, i64* %77, align 8
  %78 = bitcast i8* %74 to i64*
  store i64 %58, i64* %78, align 8
  %79 = load i64, i64* %45, align 8
  store i64 %79, i64* %77, align 8
  store i8* %74, i8** %46, align 8
  %80 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %56, i64 0, i32 1
  %81 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %80, align 8
  %82 = icmp eq %struct.SkTSpanBounded* %81, null
  br i1 %82, label %47, label %55

83:                                               ; preds = %49, %98
  %84 = phi %struct.SkTSpanBounded* [ %50, %49 ], [ %112, %98 ]
  %85 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %84, i64 0, i32 0
  %86 = load %class.SkTSpan*, %class.SkTSpan** %85, align 8
  %87 = load i64, i64* %52, align 8
  %88 = sub i64 0, %87
  %89 = and i64 %88, 7
  %90 = or i64 %89, 16
  %91 = load i64, i64* %54, align 8
  %92 = sub i64 %91, %87
  %93 = icmp ugt i64 %90, %92
  br i1 %93, label %94, label %98

94:                                               ; preds = %83
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %3, i32 16, i32 8) #9
  %95 = load i64, i64* %52, align 8
  %96 = sub i64 0, %95
  %97 = and i64 %96, 7
  br label %98

98:                                               ; preds = %83, %94
  %99 = phi i64 [ %95, %94 ], [ %87, %83 ]
  %100 = phi i64 [ %97, %94 ], [ %89, %83 ]
  %101 = inttoptr i64 %99 to i8*
  %102 = getelementptr inbounds i8, i8* %101, i64 %100
  %103 = getelementptr inbounds i8, i8* %102, i64 16
  store i8* %103, i8** %51, align 8
  %104 = getelementptr inbounds i8, i8* %102, i64 8
  %105 = bitcast i8* %104 to i64*
  store i64 0, i64* %105, align 8
  %106 = bitcast i8* %102 to %class.SkTSpan**
  store %class.SkTSpan* %0, %class.SkTSpan** %106, align 8
  %107 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %86, i64 0, i32 3
  %108 = bitcast %struct.SkTSpanBounded** %107 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %105, align 8
  %110 = bitcast %struct.SkTSpanBounded** %107 to i8**
  store i8* %102, i8** %110, align 8
  %111 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %84, i64 0, i32 1
  %112 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %111, align 8
  %113 = icmp eq %struct.SkTSpanBounded* %112, null
  br i1 %113, label %114, label %83

114:                                              ; preds = %98, %35, %47, %16, %10
  %115 = phi i1 [ false, %10 ], [ false, %16 ], [ true, %47 ], [ true, %35 ], [ true, %98 ]
  ret i1 %115
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK7SkTSpan15validateBoundedEv(%class.SkTSpan* nocapture) local_unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden void @_ZNK7SkTSpan13validatePerpTEd(%class.SkTSpan* nocapture, double) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %0, i64 0, i32 3
  %4 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %3, align 8
  %5 = icmp eq %struct.SkTSpanBounded* %4, null
  br i1 %5, label %31, label %6

6:                                                ; preds = %2, %27
  %7 = phi %struct.SkTSpanBounded* [ %29, %27 ], [ %4, %2 ]
  %8 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %7, i64 0, i32 0
  %9 = load %class.SkTSpan*, %class.SkTSpan** %8, align 8
  %10 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %9, i64 0, i32 7
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %9, i64 0, i32 8
  %13 = load double, double* %12, align 8
  %14 = fcmp ugt double %11, %13
  br i1 %14, label %21, label %15

15:                                               ; preds = %6
  %16 = fsub double %11, %1
  %17 = fcmp olt double %16, 0x3CD0000000000000
  %18 = fsub double %1, %13
  %19 = fcmp olt double %18, 0x3CD0000000000000
  %20 = and i1 %17, %19
  br i1 %20, label %31, label %27

21:                                               ; preds = %6
  %22 = fsub double %1, %11
  %23 = fcmp olt double %22, 0x3CD0000000000000
  %24 = fsub double %13, %1
  %25 = fcmp olt double %24, 0x3CD0000000000000
  %26 = and i1 %23, %25
  br i1 %26, label %31, label %27

27:                                               ; preds = %21, %15
  %28 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %7, i64 0, i32 1
  %29 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %28, align 8
  %30 = icmp eq %struct.SkTSpanBounded* %29, null
  br i1 %30, label %31, label %6

31:                                               ; preds = %27, %15, %21, %2
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK7SkTSpan14validatePerpPtEdRK8SkDPoint(%class.SkTSpan* nocapture, double, %struct.SkDPoint* nocapture dereferenceable(16)) local_unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkTSectC2ERK8SkTCurve(%class.SkTSect*, %class.SkTCurve* dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  store %class.SkTCurve* %1, %class.SkTCurve** %3, align 8
  %4 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %5 = bitcast i8* %4 to %class.SkArenaAlloc*
  %6 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %5, i8* %6, i64 1024, i64 640) #9
  %7 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 3
  %8 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %9 = bitcast %class.SkTSpan** %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 23, i1 false)
  %10 = load %class.SkTCurve*, %class.SkTCurve** %3, align 8
  %11 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1032
  %12 = bitcast i8* %11 to i8**
  %13 = bitcast i8* %11 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 0, %14
  %16 = and i64 %15, 7
  %17 = or i64 %16, 160
  %18 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1040
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %14
  %22 = icmp ugt i64 %17, %21
  br i1 %22, label %23, label %27

23:                                               ; preds = %2
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %5, i32 160, i32 8) #9
  %24 = load i64, i64* %13, align 8
  %25 = sub i64 0, %24
  %26 = and i64 %25, 7
  br label %27

27:                                               ; preds = %2, %23
  %28 = phi i64 [ %24, %23 ], [ %14, %2 ]
  %29 = phi i64 [ %26, %23 ], [ %16, %2 ]
  %30 = inttoptr i64 %28 to i8*
  %31 = getelementptr inbounds i8, i8* %30, i64 %29
  %32 = getelementptr inbounds i8, i8* %31, i64 160
  store i8* %32, i8** %12, align 8
  %33 = bitcast i8* %31 to %class.SkTSpan*
  %34 = getelementptr inbounds i8, i8* %31, i64 24
  %35 = bitcast i8* %34 to double*
  store double -1.000000e+00, double* %35, align 8
  %36 = getelementptr inbounds i8, i8* %31, i64 32
  store i8 0, i8* %36, align 8
  %37 = getelementptr inbounds i8, i8* %31, i64 8
  %38 = bitcast i8* %37 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %38, align 8
  %39 = getelementptr inbounds i8, i8* %31, i64 56
  %40 = bitcast i8* %39 to double*
  store double -1.000000e+00, double* %40, align 8
  %41 = getelementptr inbounds i8, i8* %31, i64 64
  store i8 0, i8* %41, align 8
  %42 = getelementptr inbounds i8, i8* %31, i64 40
  %43 = bitcast i8* %42 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %43, align 8
  %44 = bitcast %class.SkTCurve* %10 to %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)***
  %45 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)**, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*** %44, align 8
  %46 = getelementptr inbounds %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %45, i64 14
  %47 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %46, align 8
  %48 = tail call %class.SkTCurve* %47(%class.SkTCurve* %10, %class.SkArenaAlloc* dereferenceable(32) %5) #9
  %49 = bitcast i8* %31 to %class.SkTCurve**
  store %class.SkTCurve* %48, %class.SkTCurve** %49, align 8
  %50 = getelementptr inbounds i8, i8* %31, i64 72
  %51 = bitcast i8* %50 to %struct.SkTSpanBounded**
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %51, align 8
  %52 = getelementptr inbounds i8, i8* %31, i64 153
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds i8, i8* %31, i64 156
  store i8 0, i8* %53, align 4
  %54 = load i32, i32* %8, align 8
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %8, align 8
  %56 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %57 = bitcast %class.SkTSpan** %56 to i8**
  store i8* %31, i8** %57, align 8
  %58 = getelementptr inbounds i8, i8* %31, i64 80
  %59 = getelementptr inbounds i8, i8* %31, i64 128
  %60 = bitcast i8* %59 to double*
  store double 0.000000e+00, double* %60, align 8
  %61 = getelementptr inbounds i8, i8* %31, i64 136
  %62 = bitcast i8* %61 to double*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 16, i1 false) #9
  store double 1.000000e+00, double* %62, align 8
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %51, align 8
  %63 = getelementptr inbounds i8, i8* %31, i64 155
  store i8 0, i8* %63, align 1
  %64 = getelementptr inbounds i8, i8* %31, i64 154
  store i8 0, i8* %64, align 2
  %65 = tail call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* %33, %class.SkTCurve* dereferenceable(8) %1) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSect16binarySearchCoinEPS_ddPdS1_PP7SkTSpan(%class.SkTSect*, %class.SkTSect* nocapture readonly, double, double, double* nocapture, double* nocapture, %class.SkTSpan** nocapture) local_unnamed_addr #0 align 2 {
  %8 = alloca %class.SkTSpan, align 8
  %9 = alloca %struct.SkDPoint, align 8
  %10 = alloca %struct.SkDPoint, align 8
  %11 = bitcast %class.SkTSpan* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %11) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 bitcast (%class.SkTSpan* @__const._ZN7SkTSect16binarySearchCoinEPS_ddPdS1_PP7SkTSpan.work to i8*), i64 160, i1 false)
  %12 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %13 = load %class.SkTCurve*, %class.SkTCurve** %12, align 8
  %14 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %15 = bitcast i8* %14 to %class.SkArenaAlloc*
  %16 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 1, i32 1
  store double -1.000000e+00, double* %16, align 8
  %17 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 1, i32 2
  store i8 0, i8* %17, align 8
  %18 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 1, i32 0, i32 0
  %19 = bitcast double* %18 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %19, align 8
  %20 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 2, i32 1
  store double -1.000000e+00, double* %20, align 8
  %21 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 2, i32 2
  store i8 0, i8* %21, align 8
  %22 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 2, i32 0, i32 0
  %23 = bitcast double* %22 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %23, align 8
  %24 = bitcast %class.SkTCurve* %13 to %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)***
  %25 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)**, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*** %24, align 8
  %26 = getelementptr inbounds %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %25, i64 14
  %27 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %26, align 8
  %28 = tail call %class.SkTCurve* %27(%class.SkTCurve* %13, %class.SkArenaAlloc* dereferenceable(32) %15) #9
  %29 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 0
  store %class.SkTCurve* %28, %class.SkTCurve** %29, align 8
  %30 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 8
  store double %2, double* %30, align 8
  %31 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 7
  store double %2, double* %31, align 8
  %32 = bitcast %struct.SkDPoint* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #9
  %33 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 0
  %34 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 1
  %35 = bitcast %struct.SkDPoint* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -1, i64 16, i1 false)
  %36 = load %class.SkTCurve*, %class.SkTCurve** %12, align 8
  %37 = bitcast %class.SkTCurve* %36 to { double, double } (%class.SkTCurve*, double)***
  %38 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %37, align 8
  %39 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %38, i64 19
  %40 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %39, align 8
  %41 = tail call { double, double } %40(%class.SkTCurve* %36, double %2) #9
  %42 = extractvalue { double, double } %41, 0
  store double %42, double* %33, align 8
  %43 = extractvalue { double, double } %41, 1
  store double %43, double* %34, align 8
  %44 = bitcast %struct.SkDPoint* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #9
  %45 = fcmp olt double %3, 0.000000e+00
  %46 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 0
  %47 = bitcast %struct.SkDPoint* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 -1, i64 16, i1 false)
  %48 = load %class.SkTCurve*, %class.SkTCurve** %46, align 8
  %49 = fmul double %3, 5.000000e-01
  %50 = fadd double %49, %2
  store double %50, double* %31, align 8
  %51 = load %class.SkTCurve*, %class.SkTCurve** %12, align 8
  %52 = call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* nonnull %8, %class.SkTCurve* dereferenceable(8) %51)
  %53 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 10
  %54 = load i8, i8* %53, align 8, !range !2
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %179

56:                                               ; preds = %7
  %57 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 1
  %58 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 2
  %59 = bitcast %class.SkTCoincident* %57 to i8*
  br label %60

60:                                               ; preds = %56, %113
  %61 = phi i8 [ 0, %56 ], [ %125, %113 ]
  %62 = phi double [ %49, %56 ], [ %124, %113 ]
  %63 = phi i8 [ 0, %56 ], [ %118, %113 ]
  %64 = phi double [ %2, %56 ], [ %116, %113 ]
  %65 = load %class.SkTCurve*, %class.SkTCurve** %29, align 8
  %66 = bitcast %class.SkTCurve* %65 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %67 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %66, align 8
  %68 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %67, i64 3
  %69 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %68, align 8
  %70 = call dereferenceable(16) %struct.SkDPoint* %69(%class.SkTCurve* %65, i32 0) #9
  %71 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %9, %struct.SkDPoint* dereferenceable(16) %70)
  br i1 %71, label %130, label %72

72:                                               ; preds = %60
  %73 = load %class.SkTCurve*, %class.SkTCurve** %29, align 8
  %74 = bitcast %class.SkTCurve* %73 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %75 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %74, align 8
  %76 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %75, i64 3
  %77 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %76, align 8
  %78 = call dereferenceable(16) %struct.SkDPoint* %77(%class.SkTCurve* %73, i32 0) #9
  %79 = bitcast %struct.SkDPoint* %78 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %32, i8* align 8 %79, i64 16, i1 false)
  %80 = load %class.SkTCurve*, %class.SkTCurve** %12, align 8
  %81 = load double, double* %31, align 8
  call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* %57, %class.SkTCurve* dereferenceable(8) %80, double %81, %struct.SkDPoint* nonnull dereferenceable(16) %9, %class.SkTCurve* dereferenceable(8) %48)
  %82 = load i8, i8* %17, align 8, !range !2
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %110, label %84

84:                                               ; preds = %72
  %85 = load double, double* %16, align 8
  %86 = load %class.SkTSpan*, %class.SkTSpan** %58, align 8
  %87 = insertelement <2 x double> undef, double %85, i32 0
  %88 = shufflevector <2 x double> %87, <2 x double> undef, <2 x i32> zeroinitializer
  br label %89

89:                                               ; preds = %99, %84
  %90 = phi %class.SkTSpan* [ %86, %84 ], [ %101, %99 ]
  %91 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %90, i64 0, i32 7
  %92 = bitcast double* %91 to <2 x double>*
  %93 = load <2 x double>, <2 x double>* %92, align 8
  %94 = fsub <2 x double> %93, %88
  %95 = extractelement <2 x double> %94, i32 0
  %96 = extractelement <2 x double> %94, i32 1
  %97 = fmul double %95, %96
  %98 = fcmp ugt double %97, 0.000000e+00
  br i1 %98, label %99, label %103

99:                                               ; preds = %89
  %100 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %90, i64 0, i32 5
  %101 = load %class.SkTSpan*, %class.SkTSpan** %100, align 8
  %102 = icmp eq %class.SkTSpan* %101, null
  br i1 %102, label %110, label %89

103:                                              ; preds = %89
  store double %85, double* %5, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %44, i8* align 8 %59, i64 16, i1 false)
  %104 = load double, double* %31, align 8
  br i1 %45, label %105, label %107

105:                                              ; preds = %103
  %106 = fcmp ugt double %64, %104
  br i1 %106, label %113, label %109

107:                                              ; preds = %103
  %108 = fcmp ult double %64, %104
  br i1 %108, label %113, label %109

109:                                              ; preds = %107, %105
  store %class.SkTSpan* null, %class.SkTSpan** %6, align 8
  br label %179

110:                                              ; preds = %99, %72
  %111 = fsub double -0.000000e+00, %62
  %112 = load double, double* %31, align 8
  br label %113

113:                                              ; preds = %107, %105, %110
  %114 = phi double [ %112, %110 ], [ %104, %105 ], [ %104, %107 ]
  %115 = phi double [ %111, %110 ], [ %62, %105 ], [ %62, %107 ]
  %116 = phi double [ %64, %110 ], [ %104, %105 ], [ %104, %107 ]
  %117 = phi i8 [ 1, %110 ], [ %61, %105 ], [ %61, %107 ]
  %118 = phi i8 [ %63, %110 ], [ 1, %105 ], [ 1, %107 ]
  %119 = fmul double %115, 5.000000e-01
  %120 = fadd double %119, %114
  store double %120, double* %31, align 8
  %121 = and i8 %117, 1
  %122 = icmp eq i8 %121, 0
  %123 = fsub double -0.000000e+00, %119
  %124 = select i1 %122, double %119, double %123
  %125 = select i1 %122, i8 %117, i8 0
  %126 = load %class.SkTCurve*, %class.SkTCurve** %12, align 8
  %127 = call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* nonnull %8, %class.SkTCurve* dereferenceable(8) %126)
  %128 = load i8, i8* %53, align 8, !range !2
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %60, label %179

130:                                              ; preds = %60
  %131 = and i8 %63, 1
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %179, label %133

133:                                              ; preds = %130
  %134 = load %class.SkTCurve*, %class.SkTCurve** %12, align 8
  %135 = bitcast %class.SkTCurve* %134 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %136 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %135, align 8
  %137 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %136, i64 2
  %138 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %137, align 8
  %139 = call dereferenceable(16) %struct.SkDPoint* %138(%class.SkTCurve* %134, i32 0) #9
  %140 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %9, %struct.SkDPoint* dereferenceable(16) %139)
  br i1 %140, label %155, label %141

141:                                              ; preds = %133
  %142 = load %class.SkTCurve*, %class.SkTCurve** %12, align 8
  %143 = bitcast %class.SkTCurve* %142 to i32 (%class.SkTCurve*)***
  %144 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %143, align 8
  %145 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %144, i64 18
  %146 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %145, align 8
  %147 = call i32 %146(%class.SkTCurve* %142) #9
  %148 = bitcast %class.SkTCurve* %142 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %149 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %148, align 8
  %150 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %149, i64 2
  %151 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %150, align 8
  %152 = call dereferenceable(16) %struct.SkDPoint* %151(%class.SkTCurve* %142, i32 %147) #9
  %153 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %9, %struct.SkDPoint* dereferenceable(16) %152)
  %154 = select i1 %153, double 1.000000e+00, double %64
  br label %155

155:                                              ; preds = %141, %133
  %156 = phi double [ 0.000000e+00, %133 ], [ %154, %141 ]
  %157 = bitcast %class.SkTCurve* %48 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %158 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %157, align 8
  %159 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %158, i64 2
  %160 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %159, align 8
  %161 = call dereferenceable(16) %struct.SkDPoint* %160(%class.SkTCurve* %48, i32 0) #9
  %162 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %10, %struct.SkDPoint* dereferenceable(16) %161)
  br i1 %162, label %176, label %163

163:                                              ; preds = %155
  %164 = load %class.SkTCurve*, %class.SkTCurve** %46, align 8
  %165 = bitcast %class.SkTCurve* %164 to i32 (%class.SkTCurve*)***
  %166 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %165, align 8
  %167 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %166, i64 18
  %168 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %167, align 8
  %169 = call i32 %168(%class.SkTCurve* %164) #9
  %170 = bitcast %class.SkTCurve* %164 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %171 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %170, align 8
  %172 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %171, i64 2
  %173 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %172, align 8
  %174 = call dereferenceable(16) %struct.SkDPoint* %173(%class.SkTCurve* %164, i32 %169) #9
  %175 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %10, %struct.SkDPoint* dereferenceable(16) %174)
  br i1 %175, label %176, label %178

176:                                              ; preds = %163, %155
  %177 = phi double [ 0.000000e+00, %155 ], [ 1.000000e+00, %163 ]
  store double %177, double* %5, align 8
  br label %178

178:                                              ; preds = %176, %163
  store double %156, double* %4, align 8
  br label %179

179:                                              ; preds = %113, %7, %109, %130, %178
  %180 = phi i1 [ true, %178 ], [ false, %130 ], [ false, %109 ], [ false, %7 ], [ false, %113 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #9
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %11) #9
  ret i1 %180
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %class.SkTSpan* @_ZN7SkTSect9boundsMaxEv(%class.SkTSect* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %3 = load %class.SkTSpan*, %class.SkTSpan** %2, align 8
  %4 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 5
  %5 = load %class.SkTSpan*, %class.SkTSpan** %4, align 8
  %6 = icmp eq %class.SkTSpan* %5, null
  br i1 %6, label %41, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 10
  %9 = load i8, i8* %8, align 8, !range !2
  br label %10

10:                                               ; preds = %7, %35
  %11 = phi %class.SkTSpan* [ %39, %35 ], [ %5, %7 ]
  %12 = phi i32 [ %15, %35 ], [ 10000, %7 ]
  %13 = phi i8 [ %37, %35 ], [ %9, %7 ]
  %14 = phi %class.SkTSpan* [ %36, %35 ], [ %3, %7 ]
  %15 = add nsw i32 %12, -1
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %10
  %18 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 8
  store i8 1, i8* %18, align 2
  br label %41

19:                                               ; preds = %10
  %20 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %11, i64 0, i32 10
  %21 = load i8, i8* %20, align 8, !range !2
  %22 = and i8 %13, 1
  %23 = icmp ne i8 %22, 0
  %24 = icmp eq i8 %21, 0
  %25 = and i1 %23, %24
  br i1 %25, label %34, label %26

26:                                               ; preds = %19
  %27 = icmp eq i8 %22, %21
  br i1 %27, label %28, label %35

28:                                               ; preds = %26
  %29 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %14, i64 0, i32 9
  %30 = load double, double* %29, align 8
  %31 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %11, i64 0, i32 9
  %32 = load double, double* %31, align 8
  %33 = fcmp olt double %30, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %19, %28
  br label %35

35:                                               ; preds = %34, %28, %26
  %36 = phi %class.SkTSpan* [ %11, %34 ], [ %14, %28 ], [ %14, %26 ]
  %37 = phi i8 [ %21, %34 ], [ %13, %28 ], [ %13, %26 ]
  %38 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %11, i64 0, i32 5
  %39 = load %class.SkTSpan*, %class.SkTSpan** %38, align 8
  %40 = icmp eq %class.SkTSpan* %39, null
  br i1 %40, label %41, label %10

41:                                               ; preds = %35, %1, %17
  %42 = phi %class.SkTSpan* [ null, %17 ], [ %3, %1 ], [ %36, %35 ]
  ret %class.SkTSpan* %42
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSect15coincidentCheckEPS_(%class.SkTSect*, %class.SkTSect*) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkTSpan*, align 8
  %4 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %5 = load %class.SkTSpan*, %class.SkTSpan** %4, align 8
  %6 = icmp eq %class.SkTSpan* %5, null
  br i1 %6, label %62, label %7

7:                                                ; preds = %2
  %8 = bitcast %class.SkTSpan** %3 to i8*
  %9 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 2
  br label %10

10:                                               ; preds = %7, %60
  %11 = phi %class.SkTSpan* [ %30, %60 ], [ %5, %7 ]
  %12 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %11, i64 0, i32 5
  %13 = load %class.SkTSpan*, %class.SkTSpan** %12, align 8
  %14 = icmp eq %class.SkTSpan* %13, null
  br i1 %14, label %62, label %15

15:                                               ; preds = %10, %24
  %16 = phi %class.SkTSpan* [ %27, %24 ], [ %13, %10 ]
  %17 = phi %class.SkTSpan* [ %16, %24 ], [ %11, %10 ]
  %18 = phi i32 [ %25, %24 ], [ 1, %10 ]
  %19 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %16, i64 0, i32 7
  %20 = load double, double* %19, align 8
  %21 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %17, i64 0, i32 8
  %22 = load double, double* %21, align 8
  %23 = fcmp ogt double %20, %22
  br i1 %23, label %29, label %24

24:                                               ; preds = %15
  %25 = add nuw nsw i32 %18, 1
  %26 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %16, i64 0, i32 5
  %27 = load %class.SkTSpan*, %class.SkTSpan** %26, align 8
  %28 = icmp eq %class.SkTSpan* %27, null
  br i1 %28, label %29, label %15

29:                                               ; preds = %15, %24
  %30 = phi %class.SkTSpan* [ null, %24 ], [ %16, %15 ]
  %31 = phi i32 [ %25, %24 ], [ %18, %15 ]
  %32 = phi %class.SkTSpan* [ %16, %24 ], [ %17, %15 ]
  %33 = icmp slt i32 %31, 9
  br i1 %33, label %60, label %34

34:                                               ; preds = %29
  tail call void @_ZN7SkTSect21computePerpendicularsEPS_P7SkTSpanS2_(%class.SkTSect* %0, %class.SkTSect* %1, %class.SkTSpan* %11, %class.SkTSpan* nonnull %32)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #9
  store %class.SkTSpan* %11, %class.SkTSpan** %3, align 8
  %35 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %32, i64 0, i32 14
  br label %36

36:                                               ; preds = %42, %34
  %37 = phi %class.SkTSpan* [ %40, %42 ], [ %11, %34 ]
  %38 = call zeroext i1 @_ZN7SkTSect17extractCoincidentEPS_P7SkTSpanS2_PS2_(%class.SkTSect* %0, %class.SkTSect* %1, %class.SkTSpan* %37, %class.SkTSpan* %32, %class.SkTSpan** nonnull %3)
  br i1 %38, label %39, label %59

39:                                               ; preds = %36
  %40 = load %class.SkTSpan*, %class.SkTSpan** %3, align 8
  %41 = icmp eq %class.SkTSpan* %40, null
  br i1 %41, label %45, label %42

42:                                               ; preds = %39
  %43 = load i8, i8* %35, align 4, !range !2
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %36, label %45

45:                                               ; preds = %39, %42
  %46 = load %class.SkTSpan*, %class.SkTSpan** %4, align 8
  %47 = icmp eq %class.SkTSpan* %46, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %45
  %49 = load %class.SkTSpan*, %class.SkTSpan** %9, align 8
  %50 = icmp eq %class.SkTSpan* %49, null
  %51 = icmp eq %class.SkTSpan* %30, null
  %52 = or i1 %51, %50
  br i1 %52, label %58, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %30, i64 0, i32 14
  %55 = load i8, i8* %54, align 4, !range !2
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %53
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #9
  br label %60

58:                                               ; preds = %48, %45, %53
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #9
  br label %62

59:                                               ; preds = %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #9
  br label %62

60:                                               ; preds = %29, %57
  %61 = icmp eq %class.SkTSpan* %30, null
  br i1 %61, label %62, label %10

62:                                               ; preds = %10, %60, %58, %59, %2
  %63 = phi i1 [ false, %2 ], [ false, %59 ], [ true, %58 ], [ true, %60 ], [ true, %10 ]
  ret i1 %63
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZNK7SkTSect21countConsecutiveSpansEP7SkTSpanPS1_(%class.SkTSect* nocapture readnone, %class.SkTSpan*, %class.SkTSpan** nocapture) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 5
  %5 = load %class.SkTSpan*, %class.SkTSpan** %4, align 8
  %6 = icmp eq %class.SkTSpan* %5, null
  br i1 %6, label %21, label %7

7:                                                ; preds = %3, %16
  %8 = phi %class.SkTSpan* [ %19, %16 ], [ %5, %3 ]
  %9 = phi %class.SkTSpan* [ %8, %16 ], [ %1, %3 ]
  %10 = phi i32 [ %17, %16 ], [ 1, %3 ]
  %11 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 7
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %9, i64 0, i32 8
  %14 = load double, double* %13, align 8
  %15 = fcmp ogt double %12, %14
  br i1 %15, label %21, label %16

16:                                               ; preds = %7
  %17 = add nuw nsw i32 %10, 1
  %18 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 5
  %19 = load %class.SkTSpan*, %class.SkTSpan** %18, align 8
  %20 = icmp eq %class.SkTSpan* %19, null
  br i1 %20, label %21, label %7

21:                                               ; preds = %7, %16, %3
  %22 = phi i32 [ 1, %3 ], [ %17, %16 ], [ %10, %7 ]
  %23 = phi %class.SkTSpan* [ %1, %3 ], [ %8, %16 ], [ %9, %7 ]
  store %class.SkTSpan* %23, %class.SkTSpan** %2, align 8
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkTSect21computePerpendicularsEPS_P7SkTSpanS2_(%class.SkTSect* nocapture readonly, %class.SkTSect*, %class.SkTSpan*, %class.SkTSpan* readnone) local_unnamed_addr #0 align 2 {
  %5 = icmp eq %class.SkTSpan* %3, null
  br i1 %5, label %121, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 0
  %8 = load %class.SkTCurve*, %class.SkTCurve** %7, align 8
  %9 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %10 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 3
  br label %11

11:                                               ; preds = %118, %6
  %12 = phi %class.SkTSpan* [ %2, %6 ], [ %120, %118 ]
  %13 = phi %class.SkTSpan* [ null, %6 ], [ %12, %118 ]
  %14 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 11
  %15 = load i8, i8* %14, align 1, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %116

17:                                               ; preds = %11
  %18 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 10
  %19 = load i8, i8* %18, align 8, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %116

21:                                               ; preds = %17
  %22 = icmp eq %class.SkTSpan* %13, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %13, i64 0, i32 2
  %25 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 1
  %26 = bitcast %class.SkTCoincident* %25 to i8*
  %27 = bitcast %class.SkTCoincident* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 25, i1 false)
  br label %40

28:                                               ; preds = %21
  %29 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 1
  %30 = load %class.SkTCurve*, %class.SkTCurve** %9, align 8
  %31 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 7
  %32 = load double, double* %31, align 8
  %33 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 0
  %34 = load %class.SkTCurve*, %class.SkTCurve** %33, align 8
  %35 = bitcast %class.SkTCurve* %34 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %36 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %35, align 8
  %37 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %36, i64 3
  %38 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %37, align 8
  %39 = tail call dereferenceable(16) %struct.SkDPoint* %38(%class.SkTCurve* %34, i32 0) #9
  tail call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* %29, %class.SkTCurve* dereferenceable(8) %30, double %32, %struct.SkDPoint* dereferenceable(16) %39, %class.SkTCurve* dereferenceable(8) %8)
  br label %40

40:                                               ; preds = %28, %23
  %41 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 1, i32 2
  %42 = load i8, i8* %41, align 1, !range !2
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %70, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 1, i32 1
  %46 = load double, double* %45, align 8
  %47 = load %class.SkTSpan*, %class.SkTSpan** %10, align 8
  %48 = icmp eq %class.SkTSpan* %47, null
  br i1 %48, label %69, label %49

49:                                               ; preds = %44
  %50 = insertelement <2 x double> undef, double %46, i32 0
  %51 = shufflevector <2 x double> %50, <2 x double> undef, <2 x i32> zeroinitializer
  br label %56

52:                                               ; preds = %56
  %53 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %57, i64 0, i32 5
  %54 = load %class.SkTSpan*, %class.SkTSpan** %53, align 8
  %55 = icmp eq %class.SkTSpan* %54, null
  br i1 %55, label %69, label %56

56:                                               ; preds = %49, %52
  %57 = phi %class.SkTSpan* [ %54, %52 ], [ %47, %49 ]
  %58 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %57, i64 0, i32 7
  %59 = bitcast double* %58 to <2 x double>*
  %60 = load <2 x double>, <2 x double>* %59, align 8
  %61 = fsub <2 x double> %60, %51
  %62 = extractelement <2 x double> %61, i32 0
  %63 = extractelement <2 x double> %61, i32 1
  %64 = fmul double %62, %63
  %65 = fcmp ugt double %64, 0.000000e+00
  br i1 %65, label %52, label %66

66:                                               ; preds = %56
  store double -1.000000e+00, double* %45, align 8
  store i8 0, i8* %41, align 8
  %67 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 1, i32 0, i32 0
  %68 = bitcast double* %67 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %68, align 8
  br label %70

69:                                               ; preds = %52, %44
  tail call void @_ZN7SkTSect10addForPerpEP7SkTSpand(%class.SkTSect* %1, %class.SkTSpan* %12, double %46)
  br label %70

70:                                               ; preds = %40, %66, %69
  %71 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 2
  %72 = load %class.SkTCurve*, %class.SkTCurve** %9, align 8
  %73 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 8
  %74 = load double, double* %73, align 8
  %75 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 0
  %76 = load %class.SkTCurve*, %class.SkTCurve** %75, align 8
  %77 = bitcast %class.SkTCurve* %76 to i32 (%class.SkTCurve*)***
  %78 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %77, align 8
  %79 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %78, i64 18
  %80 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %79, align 8
  %81 = tail call i32 %80(%class.SkTCurve* %76) #9
  %82 = bitcast %class.SkTCurve* %76 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %83 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %82, align 8
  %84 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %83, i64 3
  %85 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %84, align 8
  %86 = tail call dereferenceable(16) %struct.SkDPoint* %85(%class.SkTCurve* %76, i32 %81) #9
  tail call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* %71, %class.SkTCurve* dereferenceable(8) %72, double %74, %struct.SkDPoint* dereferenceable(16) %86, %class.SkTCurve* dereferenceable(8) %8)
  %87 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 2, i32 2
  %88 = load i8, i8* %87, align 1, !range !2
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %115, label %90

90:                                               ; preds = %70
  %91 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 2, i32 1
  %92 = load double, double* %91, align 8
  %93 = load %class.SkTSpan*, %class.SkTSpan** %10, align 8
  %94 = icmp eq %class.SkTSpan* %93, null
  br i1 %94, label %114, label %95

95:                                               ; preds = %90
  %96 = insertelement <2 x double> undef, double %92, i32 0
  %97 = shufflevector <2 x double> %96, <2 x double> undef, <2 x i32> zeroinitializer
  br label %102

98:                                               ; preds = %102
  %99 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %103, i64 0, i32 5
  %100 = load %class.SkTSpan*, %class.SkTSpan** %99, align 8
  %101 = icmp eq %class.SkTSpan* %100, null
  br i1 %101, label %114, label %102

102:                                              ; preds = %95, %98
  %103 = phi %class.SkTSpan* [ %100, %98 ], [ %93, %95 ]
  %104 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %103, i64 0, i32 7
  %105 = bitcast double* %104 to <2 x double>*
  %106 = load <2 x double>, <2 x double>* %105, align 8
  %107 = fsub <2 x double> %106, %97
  %108 = extractelement <2 x double> %107, i32 0
  %109 = extractelement <2 x double> %107, i32 1
  %110 = fmul double %108, %109
  %111 = fcmp ugt double %110, 0.000000e+00
  br i1 %111, label %98, label %112

112:                                              ; preds = %102
  store double -1.000000e+00, double* %91, align 8
  store i8 0, i8* %87, align 8
  %113 = bitcast %class.SkTCoincident* %71 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %113, align 8
  br label %115

114:                                              ; preds = %98, %90
  tail call void @_ZN7SkTSect10addForPerpEP7SkTSpand(%class.SkTSect* %1, %class.SkTSpan* %12, double %92)
  br label %115

115:                                              ; preds = %70, %112, %114
  store i8 1, i8* %14, align 1
  br label %116

116:                                              ; preds = %17, %11, %115
  %117 = icmp eq %class.SkTSpan* %12, %3
  br i1 %117, label %121, label %118

118:                                              ; preds = %116
  %119 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 5
  %120 = load %class.SkTSpan*, %class.SkTSpan** %119, align 8
  br label %11

121:                                              ; preds = %116, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSect17extractCoincidentEPS_P7SkTSpanS2_PS2_(%class.SkTSect*, %class.SkTSect*, %class.SkTSpan*, %class.SkTSpan*, %class.SkTSpan** nocapture) local_unnamed_addr #0 align 2 {
  %6 = alloca double, align 8
  %7 = alloca %class.SkTSpan*, align 8
  %8 = alloca double, align 8
  %9 = ptrtoint %class.SkTSpan* %3 to i64
  br label %10

10:                                               ; preds = %36, %5
  %11 = phi %class.SkTSpan* [ null, %5 ], [ %33, %36 ]
  %12 = phi %class.SkTSpan* [ %2, %5 ], [ %38, %36 ]
  %13 = phi %class.SkTSpan* [ null, %5 ], [ %34, %36 ]
  %14 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 1, i32 2
  %15 = load i8, i8* %14, align 1, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %24, label %17

17:                                               ; preds = %10
  %18 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 2, i32 2
  %19 = load i8, i8* %18, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %40, label %21

21:                                               ; preds = %17
  %22 = icmp eq %class.SkTSpan* %11, null
  %23 = select i1 %22, %class.SkTSpan* %12, %class.SkTSpan* %11
  br label %32

24:                                               ; preds = %10
  %25 = icmp eq %class.SkTSpan* %11, null
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 10
  %28 = load i8, i8* %27, align 8, !range !2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = ptrtoint %class.SkTSpan* %13 to i64
  br label %44

32:                                               ; preds = %26, %24, %21
  %33 = phi %class.SkTSpan* [ %23, %21 ], [ %11, %26 ], [ null, %24 ]
  %34 = phi %class.SkTSpan* [ %12, %21 ], [ null, %26 ], [ null, %24 ]
  %35 = icmp eq %class.SkTSpan* %12, %3
  br i1 %35, label %44, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %12, i64 0, i32 5
  %38 = load %class.SkTSpan*, %class.SkTSpan** %37, align 8
  %39 = icmp eq %class.SkTSpan* %38, null
  br i1 %39, label %51, label %10

40:                                               ; preds = %17
  %41 = icmp eq %class.SkTSpan* %13, null
  %42 = ptrtoint %class.SkTSpan* %13 to i64
  %43 = select i1 %41, i64 %9, i64 %42
  br label %44

44:                                               ; preds = %32, %40, %30
  %45 = phi i64 [ %31, %30 ], [ %43, %40 ], [ %9, %32 ]
  %46 = phi %class.SkTSpan* [ %11, %30 ], [ %11, %40 ], [ %33, %32 ]
  %47 = icmp ne %class.SkTSpan* %46, null
  %48 = inttoptr i64 %45 to %class.SkTSpan*
  %49 = icmp ne i64 %45, 0
  %50 = and i1 %49, %47
  br i1 %50, label %52, label %51

51:                                               ; preds = %36, %44
  store %class.SkTSpan* null, %class.SkTSpan** %4, align 8
  br label %699

52:                                               ; preds = %44
  %53 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %46, i64 0, i32 7
  %54 = load double, double* %53, align 8
  %55 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #9
  store double 0.000000e+00, double* %6, align 8
  %56 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %46, i64 0, i32 4
  %57 = load %class.SkTSpan*, %class.SkTSpan** %56, align 8
  %58 = bitcast %class.SkTSpan** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #9
  store %class.SkTSpan* inttoptr (i64 -6148914691236517206 to %class.SkTSpan*), %class.SkTSpan** %7, align 8
  %59 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %46, i64 0, i32 1, i32 1
  %60 = load double, double* %59, align 8
  %61 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %46, i64 0, i32 3
  %62 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %61, align 8
  %63 = icmp eq %struct.SkTSpanBounded* %62, null
  br i1 %63, label %83, label %64

64:                                               ; preds = %52
  %65 = insertelement <2 x double> undef, double %60, i32 0
  %66 = shufflevector <2 x double> %65, <2 x double> undef, <2 x i32> zeroinitializer
  br label %71

67:                                               ; preds = %71
  %68 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %72, i64 0, i32 1
  %69 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %68, align 8
  %70 = icmp eq %struct.SkTSpanBounded* %69, null
  br i1 %70, label %83, label %71

71:                                               ; preds = %64, %67
  %72 = phi %struct.SkTSpanBounded* [ %69, %67 ], [ %62, %64 ]
  %73 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %72, i64 0, i32 0
  %74 = load %class.SkTSpan*, %class.SkTSpan** %73, align 8
  %75 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %74, i64 0, i32 7
  %76 = bitcast double* %75 to <2 x double>*
  %77 = load <2 x double>, <2 x double>* %76, align 8
  %78 = fsub <2 x double> %77, %66
  %79 = extractelement <2 x double> %78, i32 0
  %80 = extractelement <2 x double> %78, i32 1
  %81 = fmul double %79, %80
  %82 = fcmp ugt double %81, 0.000000e+00
  br i1 %82, label %67, label %83

83:                                               ; preds = %67, %71, %52
  %84 = phi %class.SkTSpan* [ null, %52 ], [ %74, %71 ], [ null, %67 ]
  store %class.SkTSpan* %84, %class.SkTSpan** %7, align 8
  %85 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %46, i64 0, i32 2, i32 1
  %86 = load double, double* %85, align 8
  %87 = fcmp olt double %60, %86
  %88 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %88) #9
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  %89 = icmp eq %class.SkTSpan* %57, null
  br i1 %89, label %198, label %90

90:                                               ; preds = %83
  %91 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %57, i64 0, i32 8
  %92 = load double, double* %91, align 8
  %93 = fcmp oeq double %92, %54
  br i1 %93, label %94, label %198

94:                                               ; preds = %90
  %95 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %57, i64 0, i32 7
  %96 = load double, double* %95, align 8
  %97 = fsub double %96, %54
  %98 = call zeroext i1 @_ZN7SkTSect16binarySearchCoinEPS_ddPdS1_PP7SkTSpan(%class.SkTSect* %0, %class.SkTSect* %1, double %54, double %97, double* nonnull %8, double* nonnull %6, %class.SkTSpan** nonnull %7)
  br i1 %98, label %99, label %198

99:                                               ; preds = %94
  %100 = load double, double* %95, align 8
  %101 = load double, double* %8, align 8
  %102 = fcmp olt double %100, %101
  %103 = fcmp olt double %101, %54
  %104 = and i1 %102, %103
  br i1 %104, label %105, label %198

105:                                              ; preds = %99
  %106 = load double, double* %6, align 8
  %107 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %57, i64 0, i32 3
  %108 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %107, align 8
  %109 = icmp eq %struct.SkTSpanBounded* %108, null
  br i1 %109, label %198, label %110

110:                                              ; preds = %105
  %111 = insertelement <2 x double> undef, double %106, i32 0
  %112 = shufflevector <2 x double> %111, <2 x double> undef, <2 x i32> zeroinitializer
  br label %117

113:                                              ; preds = %117
  %114 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %118, i64 0, i32 1
  %115 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %114, align 8
  %116 = icmp eq %struct.SkTSpanBounded* %115, null
  br i1 %116, label %198, label %117

117:                                              ; preds = %110, %113
  %118 = phi %struct.SkTSpanBounded* [ %115, %113 ], [ %108, %110 ]
  %119 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %118, i64 0, i32 0
  %120 = load %class.SkTSpan*, %class.SkTSpan** %119, align 8
  %121 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %120, i64 0, i32 7
  %122 = bitcast double* %121 to <2 x double>*
  %123 = load <2 x double>, <2 x double>* %122, align 8
  %124 = fsub <2 x double> %123, %112
  %125 = extractelement <2 x double> %124, i32 0
  %126 = extractelement <2 x double> %124, i32 1
  %127 = fmul double %125, %126
  %128 = fcmp ugt double %127, 0.000000e+00
  br i1 %128, label %113, label %129

129:                                              ; preds = %117
  %130 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %120, i64 0, i32 7
  %131 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %120, i64 0, i32 8
  %132 = icmp eq %class.SkTSpan* %120, null
  br i1 %132, label %198, label %133

133:                                              ; preds = %129
  store %class.SkTSpan* %120, %class.SkTSpan** %7, align 8
  %134 = tail call %class.SkTSpan* @_ZN7SkTSect10addSplitAtEP7SkTSpand(%class.SkTSect* %0, %class.SkTSpan* nonnull %57, double %101)
  %135 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %134, i64 0, i32 1, i32 2
  %136 = load i8, i8* %135, align 8, !range !2
  %137 = icmp eq i8 %136, 0
  br i1 %137, label %138, label %140

138:                                              ; preds = %133
  %139 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %134, i64 0, i32 1, i32 1
  store double -1.000000e+00, double* %139, align 8
  br label %140

140:                                              ; preds = %138, %133
  store i8 1, i8* %135, align 8
  %141 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %134, i64 0, i32 2, i32 2
  %142 = load i8, i8* %141, align 8, !range !2
  %143 = icmp eq i8 %142, 0
  br i1 %143, label %144, label %146

144:                                              ; preds = %140
  %145 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %134, i64 0, i32 2, i32 1
  store double -1.000000e+00, double* %145, align 8
  br label %146

146:                                              ; preds = %140, %144
  store i8 1, i8* %141, align 8
  %147 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %57, i64 0, i32 2, i32 2
  %148 = load i8, i8* %147, align 8, !range !2
  %149 = icmp eq i8 %148, 0
  br i1 %149, label %150, label %152

150:                                              ; preds = %146
  %151 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %57, i64 0, i32 2, i32 1
  store double -1.000000e+00, double* %151, align 8
  br label %152

152:                                              ; preds = %146, %150
  store i8 1, i8* %147, align 8
  %153 = load double, double* %130, align 8
  %154 = fcmp olt double %153, %106
  br i1 %154, label %155, label %201

155:                                              ; preds = %152
  %156 = load double, double* %131, align 8
  %157 = fcmp olt double %106, %156
  br i1 %157, label %158, label %201

158:                                              ; preds = %155
  %159 = tail call %class.SkTSpan* @_ZN7SkTSect10addSplitAtEP7SkTSpand(%class.SkTSect* %1, %class.SkTSpan* nonnull %120, double %106)
  br i1 %87, label %160, label %179

160:                                              ; preds = %158
  %161 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %120, i64 0, i32 2, i32 2
  %162 = load i8, i8* %161, align 8, !range !2
  %163 = icmp eq i8 %162, 0
  br i1 %163, label %164, label %166

164:                                              ; preds = %160
  %165 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %120, i64 0, i32 2, i32 1
  store double -1.000000e+00, double* %165, align 8
  br label %166

166:                                              ; preds = %160, %164
  store i8 1, i8* %161, align 8
  %167 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %159, i64 0, i32 1, i32 2
  %168 = load i8, i8* %167, align 8, !range !2
  %169 = icmp eq i8 %168, 0
  br i1 %169, label %170, label %172

170:                                              ; preds = %166
  %171 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %159, i64 0, i32 1, i32 1
  store double -1.000000e+00, double* %171, align 8
  br label %172

172:                                              ; preds = %170, %166
  store i8 1, i8* %167, align 8
  %173 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %159, i64 0, i32 2, i32 2
  %174 = load i8, i8* %173, align 8, !range !2
  %175 = icmp eq i8 %174, 0
  br i1 %175, label %176, label %178

176:                                              ; preds = %172
  %177 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %159, i64 0, i32 2, i32 1
  store double -1.000000e+00, double* %177, align 8
  br label %178

178:                                              ; preds = %172, %176
  store i8 1, i8* %173, align 8
  store %class.SkTSpan* %159, %class.SkTSpan** %7, align 8
  br label %201

179:                                              ; preds = %158
  %180 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %120, i64 0, i32 1, i32 2
  %181 = load i8, i8* %180, align 8, !range !2
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %183, label %185

183:                                              ; preds = %179
  %184 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %120, i64 0, i32 1, i32 1
  store double -1.000000e+00, double* %184, align 8
  br label %185

185:                                              ; preds = %183, %179
  store i8 1, i8* %180, align 8
  %186 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %120, i64 0, i32 2, i32 2
  %187 = load i8, i8* %186, align 8, !range !2
  %188 = icmp eq i8 %187, 0
  br i1 %188, label %189, label %191

189:                                              ; preds = %185
  %190 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %120, i64 0, i32 2, i32 1
  store double -1.000000e+00, double* %190, align 8
  br label %191

191:                                              ; preds = %185, %189
  store i8 1, i8* %186, align 8
  %192 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %159, i64 0, i32 1, i32 2
  %193 = load i8, i8* %192, align 8, !range !2
  %194 = icmp eq i8 %193, 0
  br i1 %194, label %195, label %197

195:                                              ; preds = %191
  %196 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %159, i64 0, i32 1, i32 1
  store double -1.000000e+00, double* %196, align 8
  br label %197

197:                                              ; preds = %191, %195
  store i8 1, i8* %192, align 8
  br label %201

198:                                              ; preds = %113, %105, %129, %83, %99, %94, %90
  %199 = load %class.SkTSpan*, %class.SkTSpan** %7, align 8
  %200 = icmp eq %class.SkTSpan* %199, null
  br i1 %200, label %697, label %201

201:                                              ; preds = %178, %197, %198, %152, %155
  %202 = phi %class.SkTSpan* [ %120, %155 ], [ %120, %152 ], [ %199, %198 ], [ %120, %197 ], [ %159, %178 ]
  %203 = phi %class.SkTSpan* [ %134, %155 ], [ %134, %152 ], [ %46, %198 ], [ %134, %197 ], [ %134, %178 ]
  %204 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %48, i64 0, i32 2, i32 1
  %205 = load double, double* %204, align 8
  %206 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %48, i64 0, i32 3
  %207 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %206, align 8
  %208 = icmp eq %struct.SkTSpanBounded* %207, null
  br i1 %208, label %228, label %209

209:                                              ; preds = %201
  %210 = insertelement <2 x double> undef, double %205, i32 0
  %211 = shufflevector <2 x double> %210, <2 x double> undef, <2 x i32> zeroinitializer
  br label %216

212:                                              ; preds = %216
  %213 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %217, i64 0, i32 1
  %214 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %213, align 8
  %215 = icmp eq %struct.SkTSpanBounded* %214, null
  br i1 %215, label %228, label %216

216:                                              ; preds = %209, %212
  %217 = phi %struct.SkTSpanBounded* [ %214, %212 ], [ %207, %209 ]
  %218 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %217, i64 0, i32 0
  %219 = load %class.SkTSpan*, %class.SkTSpan** %218, align 8
  %220 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %219, i64 0, i32 7
  %221 = bitcast double* %220 to <2 x double>*
  %222 = load <2 x double>, <2 x double>* %221, align 8
  %223 = fsub <2 x double> %222, %211
  %224 = extractelement <2 x double> %223, i32 0
  %225 = extractelement <2 x double> %223, i32 1
  %226 = fmul double %224, %225
  %227 = fcmp ugt double %226, 0.000000e+00
  br i1 %227, label %212, label %228

228:                                              ; preds = %212, %216, %201
  %229 = phi %class.SkTSpan* [ null, %201 ], [ %219, %216 ], [ null, %212 ]
  br i1 %87, label %234, label %230

230:                                              ; preds = %228
  %231 = ptrtoint %class.SkTSpan* %229 to i64
  %232 = bitcast %class.SkTSpan** %7 to i64*
  store i64 %231, i64* %232, align 8
  %233 = bitcast double* %6 to i64*
  store i64 0, i64* %233, align 8
  br label %234

234:                                              ; preds = %228, %230
  %235 = phi %class.SkTSpan* [ %229, %230 ], [ %202, %228 ]
  %236 = phi %class.SkTSpan* [ %202, %230 ], [ %229, %228 ]
  %237 = icmp eq %class.SkTSpan* %235, null
  br i1 %237, label %238, label %239

238:                                              ; preds = %234
  store %class.SkTSpan* null, %class.SkTSpan** %4, align 8
  br label %697

239:                                              ; preds = %234
  %240 = icmp eq %class.SkTSpan* %236, null
  br i1 %240, label %241, label %242

241:                                              ; preds = %239
  store %class.SkTSpan* null, %class.SkTSpan** %4, align 8
  br label %697

242:                                              ; preds = %239
  %243 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %48, i64 0, i32 5
  %244 = load %class.SkTSpan*, %class.SkTSpan** %243, align 8
  br label %245

245:                                              ; preds = %261, %242
  %246 = phi %class.SkTSpan* [ %203, %242 ], [ %265, %261 ]
  %247 = phi i1 [ false, %242 ], [ %263, %261 ]
  %248 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %246, i64 0, i32 3
  %249 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %248, align 8
  %250 = icmp eq %struct.SkTSpanBounded* %249, null
  br i1 %250, label %261, label %251

251:                                              ; preds = %245, %251
  %252 = phi %struct.SkTSpanBounded* [ %259, %251 ], [ %249, %245 ]
  %253 = phi i1 [ %257, %251 ], [ false, %245 ]
  %254 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %252, i64 0, i32 0
  %255 = load %class.SkTSpan*, %class.SkTSpan** %254, align 8
  %256 = tail call zeroext i1 @_ZN7SkTSpan13removeBoundedEPKS_(%class.SkTSpan* %255, %class.SkTSpan* %246) #9
  %257 = or i1 %253, %256
  %258 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %252, i64 0, i32 1
  %259 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %258, align 8
  %260 = icmp eq %struct.SkTSpanBounded* %259, null
  br i1 %260, label %261, label %251

261:                                              ; preds = %251, %245
  %262 = phi i1 [ false, %245 ], [ %257, %251 ]
  %263 = or i1 %247, %262
  %264 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %246, i64 0, i32 5
  %265 = load %class.SkTSpan*, %class.SkTSpan** %264, align 8
  %266 = icmp ne %class.SkTSpan* %265, %244
  %267 = icmp ne %class.SkTSpan* %265, null
  %268 = and i1 %267, %266
  br i1 %268, label %245, label %269

269:                                              ; preds = %261
  %270 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 3
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %270, align 8
  %271 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1032
  %272 = bitcast i8* %271 to i8**
  %273 = bitcast i8* %271 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = sub i64 0, %274
  %276 = and i64 %275, 7
  %277 = or i64 %276, 16
  %278 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1040
  %279 = bitcast i8* %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = sub i64 %280, %274
  %282 = icmp ugt i64 %277, %281
  br i1 %282, label %283, label %289

283:                                              ; preds = %269
  %284 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %285 = bitcast i8* %284 to %class.SkArenaAlloc*
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %285, i32 16, i32 8) #9
  %286 = load i64, i64* %273, align 8
  %287 = sub i64 0, %286
  %288 = and i64 %287, 7
  br label %289

289:                                              ; preds = %269, %283
  %290 = phi i64 [ %286, %283 ], [ %274, %269 ]
  %291 = phi i64 [ %288, %283 ], [ %276, %269 ]
  %292 = inttoptr i64 %290 to i8*
  %293 = getelementptr inbounds i8, i8* %292, i64 %291
  %294 = getelementptr inbounds i8, i8* %293, i64 16
  store i8* %294, i8** %272, align 8
  %295 = getelementptr inbounds i8, i8* %293, i64 8
  %296 = bitcast i8* %295 to i64*
  store i64 0, i64* %296, align 8
  %297 = bitcast i8* %293 to %class.SkTSpan**
  store %class.SkTSpan* %235, %class.SkTSpan** %297, align 8
  %298 = bitcast %struct.SkTSpanBounded** %270 to i64*
  %299 = load i64, i64* %298, align 8
  store i64 %299, i64* %296, align 8
  %300 = bitcast %struct.SkTSpanBounded** %270 to i8**
  store i8* %293, i8** %300, align 8
  %301 = load %class.SkTSpan*, %class.SkTSpan** %7, align 8
  %302 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %236, i64 0, i32 5
  %303 = load %class.SkTSpan*, %class.SkTSpan** %302, align 8
  br label %304

304:                                              ; preds = %320, %289
  %305 = phi %class.SkTSpan* [ %301, %289 ], [ %324, %320 ]
  %306 = phi i1 [ false, %289 ], [ %322, %320 ]
  %307 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %305, i64 0, i32 3
  %308 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %307, align 8
  %309 = icmp eq %struct.SkTSpanBounded* %308, null
  br i1 %309, label %320, label %310

310:                                              ; preds = %304, %310
  %311 = phi %struct.SkTSpanBounded* [ %318, %310 ], [ %308, %304 ]
  %312 = phi i1 [ %316, %310 ], [ false, %304 ]
  %313 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %311, i64 0, i32 0
  %314 = load %class.SkTSpan*, %class.SkTSpan** %313, align 8
  %315 = tail call zeroext i1 @_ZN7SkTSpan13removeBoundedEPKS_(%class.SkTSpan* %314, %class.SkTSpan* %305) #9
  %316 = or i1 %312, %315
  %317 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %311, i64 0, i32 1
  %318 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %317, align 8
  %319 = icmp eq %struct.SkTSpanBounded* %318, null
  br i1 %319, label %320, label %310

320:                                              ; preds = %310, %304
  %321 = phi i1 [ false, %304 ], [ %316, %310 ]
  %322 = or i1 %306, %321
  %323 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %305, i64 0, i32 5
  %324 = load %class.SkTSpan*, %class.SkTSpan** %323, align 8
  %325 = icmp ne %class.SkTSpan* %324, %303
  %326 = icmp ne %class.SkTSpan* %324, null
  %327 = and i1 %326, %325
  br i1 %327, label %304, label %328

328:                                              ; preds = %320
  %329 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %301, i64 0, i32 3
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %329, align 8
  %330 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 1, i32 0, i32 0, i64 1032
  %331 = bitcast i8* %330 to i8**
  %332 = bitcast i8* %330 to i64*
  %333 = load i64, i64* %332, align 8
  %334 = sub i64 0, %333
  %335 = and i64 %334, 7
  %336 = or i64 %335, 16
  %337 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 1, i32 0, i32 0, i64 1040
  %338 = bitcast i8* %337 to i64*
  %339 = load i64, i64* %338, align 8
  %340 = sub i64 %339, %333
  %341 = icmp ugt i64 %336, %340
  br i1 %341, label %342, label %348

342:                                              ; preds = %328
  %343 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 1, i32 0, i32 0, i64 1024
  %344 = bitcast i8* %343 to %class.SkArenaAlloc*
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %344, i32 16, i32 8) #9
  %345 = load i64, i64* %332, align 8
  %346 = sub i64 0, %345
  %347 = and i64 %346, 7
  br label %348

348:                                              ; preds = %328, %342
  %349 = phi i64 [ %345, %342 ], [ %333, %328 ]
  %350 = phi i64 [ %347, %342 ], [ %335, %328 ]
  %351 = inttoptr i64 %349 to i8*
  %352 = getelementptr inbounds i8, i8* %351, i64 %350
  %353 = getelementptr inbounds i8, i8* %352, i64 16
  store i8* %353, i8** %331, align 8
  %354 = getelementptr inbounds i8, i8* %352, i64 8
  %355 = bitcast i8* %354 to i64*
  store i64 0, i64* %355, align 8
  %356 = bitcast i8* %352 to %class.SkTSpan**
  store %class.SkTSpan* %203, %class.SkTSpan** %356, align 8
  %357 = bitcast %struct.SkTSpanBounded** %329 to i64*
  %358 = load i64, i64* %357, align 8
  store i64 %358, i64* %355, align 8
  %359 = bitcast %struct.SkTSpanBounded** %329 to i8**
  store i8* %352, i8** %359, align 8
  %360 = or i1 %263, %322
  %361 = icmp eq %class.SkTSpan* %203, %48
  br i1 %361, label %393, label %362

362:                                              ; preds = %348
  %363 = load %class.SkTSpan*, %class.SkTSpan** %243, align 8
  %364 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 5
  %365 = load %class.SkTSpan*, %class.SkTSpan** %364, align 8
  %366 = icmp eq %class.SkTSpan* %365, null
  %367 = icmp eq %class.SkTSpan* %365, %363
  %368 = or i1 %366, %367
  br i1 %368, label %388, label %369

369:                                              ; preds = %362
  %370 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %371 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %372 = bitcast %class.SkTSpan** %371 to i64*
  br label %373

373:                                              ; preds = %384, %369
  %374 = phi %class.SkTSpan* [ %365, %369 ], [ %376, %384 ]
  %375 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %374, i64 0, i32 5
  %376 = load %class.SkTSpan*, %class.SkTSpan** %375, align 8
  %377 = load i32, i32* %370, align 8
  %378 = add nsw i32 %377, -1
  store i32 %378, i32* %370, align 8
  %379 = icmp slt i32 %377, 1
  br i1 %379, label %384, label %380

380:                                              ; preds = %373
  %381 = load i64, i64* %372, align 8
  %382 = bitcast %class.SkTSpan** %375 to i64*
  store i64 %381, i64* %382, align 8
  store %class.SkTSpan* %374, %class.SkTSpan** %371, align 8
  %383 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %374, i64 0, i32 14
  store i8 1, i8* %383, align 4
  br label %384

384:                                              ; preds = %380, %373
  %385 = icmp eq %class.SkTSpan* %376, null
  %386 = icmp eq %class.SkTSpan* %376, %363
  %387 = or i1 %385, %386
  br i1 %387, label %388, label %373

388:                                              ; preds = %384, %362
  %389 = icmp eq %class.SkTSpan* %363, null
  br i1 %389, label %392, label %390

390:                                              ; preds = %388
  %391 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %363, i64 0, i32 4
  store %class.SkTSpan* %203, %class.SkTSpan** %391, align 8
  br label %392

392:                                              ; preds = %390, %388
  store %class.SkTSpan* %363, %class.SkTSpan** %364, align 8
  br label %393

393:                                              ; preds = %348, %392
  %394 = load %class.SkTSpan*, %class.SkTSpan** %7, align 8
  %395 = icmp eq %class.SkTSpan* %394, %236
  br i1 %395, label %427, label %396

396:                                              ; preds = %393
  %397 = load %class.SkTSpan*, %class.SkTSpan** %302, align 8
  %398 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %394, i64 0, i32 5
  %399 = load %class.SkTSpan*, %class.SkTSpan** %398, align 8
  %400 = icmp eq %class.SkTSpan* %399, null
  %401 = icmp eq %class.SkTSpan* %399, %397
  %402 = or i1 %400, %401
  br i1 %402, label %422, label %403

403:                                              ; preds = %396
  %404 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 5
  %405 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 4
  %406 = bitcast %class.SkTSpan** %405 to i64*
  br label %407

407:                                              ; preds = %418, %403
  %408 = phi %class.SkTSpan* [ %399, %403 ], [ %410, %418 ]
  %409 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %408, i64 0, i32 5
  %410 = load %class.SkTSpan*, %class.SkTSpan** %409, align 8
  %411 = load i32, i32* %404, align 8
  %412 = add nsw i32 %411, -1
  store i32 %412, i32* %404, align 8
  %413 = icmp slt i32 %411, 1
  br i1 %413, label %418, label %414

414:                                              ; preds = %407
  %415 = load i64, i64* %406, align 8
  %416 = bitcast %class.SkTSpan** %409 to i64*
  store i64 %415, i64* %416, align 8
  store %class.SkTSpan* %408, %class.SkTSpan** %405, align 8
  %417 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %408, i64 0, i32 14
  store i8 1, i8* %417, align 4
  br label %418

418:                                              ; preds = %414, %407
  %419 = icmp eq %class.SkTSpan* %410, null
  %420 = icmp eq %class.SkTSpan* %410, %397
  %421 = or i1 %419, %420
  br i1 %421, label %422, label %407

422:                                              ; preds = %418, %396
  %423 = icmp eq %class.SkTSpan* %397, null
  br i1 %423, label %426, label %424

424:                                              ; preds = %422
  %425 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %397, i64 0, i32 4
  store %class.SkTSpan* %394, %class.SkTSpan** %425, align 8
  br label %426

426:                                              ; preds = %424, %422
  store %class.SkTSpan* %397, %class.SkTSpan** %398, align 8
  br label %427

427:                                              ; preds = %393, %426
  %428 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %48, i64 0, i32 8
  %429 = bitcast double* %428 to i64*
  %430 = load i64, i64* %429, align 8
  %431 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 8
  %432 = bitcast double* %431 to i64*
  store i64 %430, i64* %432, align 8
  %433 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %434 = load %class.SkTCurve*, %class.SkTCurve** %433, align 8
  %435 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 13
  store i8 0, i8* %435, align 1
  %436 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 12
  store i8 0, i8* %436, align 2
  %437 = tail call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* %203, %class.SkTCurve* dereferenceable(8) %434) #9
  %438 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 1
  %439 = load %class.SkTCurve*, %class.SkTCurve** %433, align 8
  %440 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 7
  %441 = load double, double* %440, align 8
  %442 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 0
  %443 = load %class.SkTCurve*, %class.SkTCurve** %442, align 8
  %444 = bitcast %class.SkTCurve* %443 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %445 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %444, align 8
  %446 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %445, i64 3
  %447 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %446, align 8
  %448 = tail call dereferenceable(16) %struct.SkDPoint* %447(%class.SkTCurve* %443, i32 0) #9
  %449 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 0
  %450 = load %class.SkTCurve*, %class.SkTCurve** %449, align 8
  tail call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* %438, %class.SkTCurve* dereferenceable(8) %439, double %441, %struct.SkDPoint* dereferenceable(16) %448, %class.SkTCurve* dereferenceable(8) %450)
  %451 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 2
  %452 = load %class.SkTCurve*, %class.SkTCurve** %433, align 8
  %453 = load double, double* %431, align 8
  %454 = load %class.SkTCurve*, %class.SkTCurve** %442, align 8
  %455 = bitcast %class.SkTCurve* %454 to i32 (%class.SkTCurve*)***
  %456 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %455, align 8
  %457 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %456, i64 18
  %458 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %457, align 8
  %459 = tail call i32 %458(%class.SkTCurve* %454) #9
  %460 = bitcast %class.SkTCurve* %454 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %461 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %460, align 8
  %462 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %461, i64 3
  %463 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %462, align 8
  %464 = tail call dereferenceable(16) %struct.SkDPoint* %463(%class.SkTCurve* %454, i32 %459) #9
  %465 = load %class.SkTCurve*, %class.SkTCurve** %449, align 8
  tail call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* %451, %class.SkTCurve* dereferenceable(8) %452, double %453, %struct.SkDPoint* dereferenceable(16) %464, %class.SkTCurve* dereferenceable(8) %465)
  %466 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 1, i32 1
  %467 = load double, double* %466, align 8
  store double %467, double* %6, align 8
  %468 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 2, i32 1
  %469 = load double, double* %468, align 8
  %470 = bitcast double %469 to i64
  %471 = fsub double 0.000000e+00, %467
  %472 = fsub double 1.000000e+00, %467
  %473 = fmul double %471, %472
  %474 = fcmp ugt double %473, 0.000000e+00
  %475 = bitcast double %467 to i64
  br i1 %474, label %494, label %476

476:                                              ; preds = %427
  %477 = fsub double 0.000000e+00, %469
  %478 = fsub double 1.000000e+00, %469
  %479 = fmul double %477, %478
  %480 = fcmp ugt double %479, 0.000000e+00
  br i1 %480, label %494, label %481

481:                                              ; preds = %476
  br i1 %87, label %483, label %482

482:                                              ; preds = %481
  store double %469, double* %6, align 8
  br label %483

483:                                              ; preds = %481, %482
  %484 = phi i64 [ %470, %482 ], [ %475, %481 ]
  %485 = phi i64 [ %475, %482 ], [ %470, %481 ]
  %486 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %394, i64 0, i32 7
  %487 = bitcast double* %486 to i64*
  store i64 %484, i64* %487, align 8
  %488 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %394, i64 0, i32 8
  %489 = bitcast double* %488 to i64*
  store i64 %485, i64* %489, align 8
  %490 = load %class.SkTCurve*, %class.SkTCurve** %449, align 8
  %491 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %394, i64 0, i32 13
  store i8 0, i8* %491, align 1
  %492 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %394, i64 0, i32 12
  store i8 0, i8* %492, align 2
  %493 = tail call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* %394, %class.SkTCurve* dereferenceable(8) %490) #9
  br label %494

494:                                              ; preds = %476, %427, %483
  %495 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 5
  %496 = bitcast %class.SkTSpan** %495 to i64*
  %497 = load %class.SkTSpan*, %class.SkTSpan** %495, align 8
  %498 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 4
  %499 = load %class.SkTSpan*, %class.SkTSpan** %498, align 8
  %500 = icmp eq %class.SkTSpan* %499, null
  br i1 %500, label %511, label %501

501:                                              ; preds = %494
  %502 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %499, i64 0, i32 5
  store %class.SkTSpan* %497, %class.SkTSpan** %502, align 8
  %503 = icmp eq %class.SkTSpan* %497, null
  br i1 %503, label %516, label %504

504:                                              ; preds = %501
  %505 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %497, i64 0, i32 4
  store %class.SkTSpan* %499, %class.SkTSpan** %505, align 8
  %506 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %497, i64 0, i32 7
  %507 = load double, double* %506, align 8
  %508 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %497, i64 0, i32 8
  %509 = load double, double* %508, align 8
  %510 = fcmp ogt double %507, %509
  br i1 %510, label %697, label %516

511:                                              ; preds = %494
  %512 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  store %class.SkTSpan* %497, %class.SkTSpan** %512, align 8
  %513 = icmp eq %class.SkTSpan* %497, null
  br i1 %513, label %516, label %514

514:                                              ; preds = %511
  %515 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %497, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %515, align 8
  br label %516

516:                                              ; preds = %514, %511, %504, %501
  %517 = load double, double* %466, align 8
  %518 = fsub double 0.000000e+00, %517
  %519 = fsub double 1.000000e+00, %517
  %520 = fmul double %518, %519
  %521 = fcmp ugt double %520, 0.000000e+00
  %522 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %523 = load i32, i32* %522, align 8
  %524 = add nsw i32 %523, -1
  store i32 %524, i32* %522, align 8
  br i1 %521, label %529, label %525

525:                                              ; preds = %516
  %526 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 3
  %527 = bitcast %class.SkTSpan** %526 to i64*
  %528 = load i64, i64* %527, align 8
  store i64 %528, i64* %496, align 8
  store %class.SkTSpan* %203, %class.SkTSpan** %526, align 8
  br label %536

529:                                              ; preds = %516
  %530 = icmp slt i32 %523, 1
  br i1 %530, label %536, label %531

531:                                              ; preds = %529
  %532 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %533 = bitcast %class.SkTSpan** %532 to i64*
  %534 = load i64, i64* %533, align 8
  store i64 %534, i64* %496, align 8
  store %class.SkTSpan* %203, %class.SkTSpan** %532, align 8
  %535 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %203, i64 0, i32 14
  store i8 1, i8* %535, align 4
  br label %536

536:                                              ; preds = %525, %529, %531
  %537 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %394, i64 0, i32 4
  %538 = load %class.SkTSpan*, %class.SkTSpan** %537, align 8
  %539 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %394, i64 0, i32 5
  %540 = load %class.SkTSpan*, %class.SkTSpan** %539, align 8
  %541 = icmp eq %class.SkTSpan* %538, null
  br i1 %541, label %552, label %542

542:                                              ; preds = %536
  %543 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %538, i64 0, i32 5
  store %class.SkTSpan* %540, %class.SkTSpan** %543, align 8
  %544 = icmp eq %class.SkTSpan* %540, null
  br i1 %544, label %557, label %545

545:                                              ; preds = %542
  %546 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %540, i64 0, i32 4
  store %class.SkTSpan* %538, %class.SkTSpan** %546, align 8
  %547 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %540, i64 0, i32 7
  %548 = load double, double* %547, align 8
  %549 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %540, i64 0, i32 8
  %550 = load double, double* %549, align 8
  %551 = fcmp ogt double %548, %550
  br i1 %551, label %697, label %557

552:                                              ; preds = %536
  %553 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 2
  store %class.SkTSpan* %540, %class.SkTSpan** %553, align 8
  %554 = icmp eq %class.SkTSpan* %540, null
  br i1 %554, label %557, label %555

555:                                              ; preds = %552
  %556 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %540, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %556, align 8
  br label %557

557:                                              ; preds = %542, %545, %552, %555
  %558 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 5
  %559 = load i32, i32* %558, align 8
  %560 = add nsw i32 %559, -1
  store i32 %560, i32* %558, align 8
  %561 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 3
  %562 = bitcast %class.SkTSpan** %561 to i64*
  %563 = load i64, i64* %562, align 8
  %564 = bitcast %class.SkTSpan** %539 to i64*
  store i64 %563, i64* %564, align 8
  store %class.SkTSpan* %394, %class.SkTSpan** %561, align 8
  br i1 %360, label %565, label %680

565:                                              ; preds = %557
  %566 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %567 = load %class.SkTSpan*, %class.SkTSpan** %566, align 8
  %568 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 6
  %569 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 7
  %570 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %571 = bitcast %class.SkTSpan** %570 to i64*
  br label %572

572:                                              ; preds = %619, %565
  %573 = phi %class.SkTSpan* [ %567, %565 ], [ %578, %619 ]
  %574 = phi i32 [ 1000, %565 ], [ %620, %619 ]
  %575 = icmp eq %class.SkTSpan* %573, null
  br i1 %575, label %622, label %576

576:                                              ; preds = %572
  %577 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %573, i64 0, i32 5
  %578 = load %class.SkTSpan*, %class.SkTSpan** %577, align 8
  %579 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %573, i64 0, i32 3
  %580 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %579, align 8
  %581 = icmp eq %struct.SkTSpanBounded* %580, null
  br i1 %581, label %582, label %619

582:                                              ; preds = %576
  %583 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %573, i64 0, i32 7
  %584 = load double, double* %583, align 8
  %585 = fcmp une double %584, 0.000000e+00
  br i1 %585, label %587, label %586

586:                                              ; preds = %582
  store i8 1, i8* %568, align 4
  br label %587

587:                                              ; preds = %586, %582
  %588 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %573, i64 0, i32 8
  %589 = load double, double* %588, align 8
  %590 = fcmp oeq double %589, 1.000000e+00
  br i1 %590, label %591, label %592

591:                                              ; preds = %587
  store i8 1, i8* %569, align 1
  br label %592

592:                                              ; preds = %591, %587
  %593 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %573, i64 0, i32 4
  %594 = load %class.SkTSpan*, %class.SkTSpan** %593, align 8
  %595 = load %class.SkTSpan*, %class.SkTSpan** %577, align 8
  %596 = icmp eq %class.SkTSpan* %594, null
  br i1 %596, label %607, label %597

597:                                              ; preds = %592
  %598 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %594, i64 0, i32 5
  store %class.SkTSpan* %595, %class.SkTSpan** %598, align 8
  %599 = icmp eq %class.SkTSpan* %595, null
  br i1 %599, label %611, label %600

600:                                              ; preds = %597
  %601 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %595, i64 0, i32 4
  store %class.SkTSpan* %594, %class.SkTSpan** %601, align 8
  %602 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %595, i64 0, i32 7
  %603 = load double, double* %602, align 8
  %604 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %595, i64 0, i32 8
  %605 = load double, double* %604, align 8
  %606 = fcmp ogt double %603, %605
  br i1 %606, label %679, label %611

607:                                              ; preds = %592
  store %class.SkTSpan* %595, %class.SkTSpan** %566, align 8
  %608 = icmp eq %class.SkTSpan* %595, null
  br i1 %608, label %611, label %609

609:                                              ; preds = %607
  %610 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %595, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %610, align 8
  br label %611

611:                                              ; preds = %609, %607, %600, %597
  %612 = load i32, i32* %522, align 8
  %613 = add nsw i32 %612, -1
  store i32 %613, i32* %522, align 8
  %614 = icmp slt i32 %612, 1
  br i1 %614, label %679, label %615

615:                                              ; preds = %611
  %616 = load i64, i64* %571, align 8
  %617 = bitcast %class.SkTSpan** %577 to i64*
  store i64 %616, i64* %617, align 8
  store %class.SkTSpan* %573, %class.SkTSpan** %570, align 8
  %618 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %573, i64 0, i32 14
  store i8 1, i8* %618, align 4
  br label %619

619:                                              ; preds = %615, %576
  %620 = add nsw i32 %574, -1
  %621 = icmp eq i32 %574, 0
  br i1 %621, label %679, label %572

622:                                              ; preds = %572
  %623 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 2
  %624 = load %class.SkTSpan*, %class.SkTSpan** %623, align 8
  %625 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 6
  %626 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 7
  %627 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 4
  %628 = bitcast %class.SkTSpan** %627 to i64*
  br label %629

629:                                              ; preds = %676, %622
  %630 = phi %class.SkTSpan* [ %624, %622 ], [ %635, %676 ]
  %631 = phi i32 [ 1000, %622 ], [ %677, %676 ]
  %632 = icmp eq %class.SkTSpan* %630, null
  br i1 %632, label %680, label %633

633:                                              ; preds = %629
  %634 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %630, i64 0, i32 5
  %635 = load %class.SkTSpan*, %class.SkTSpan** %634, align 8
  %636 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %630, i64 0, i32 3
  %637 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %636, align 8
  %638 = icmp eq %struct.SkTSpanBounded* %637, null
  br i1 %638, label %639, label %676

639:                                              ; preds = %633
  %640 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %630, i64 0, i32 7
  %641 = load double, double* %640, align 8
  %642 = fcmp une double %641, 0.000000e+00
  br i1 %642, label %644, label %643

643:                                              ; preds = %639
  store i8 1, i8* %625, align 4
  br label %644

644:                                              ; preds = %643, %639
  %645 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %630, i64 0, i32 8
  %646 = load double, double* %645, align 8
  %647 = fcmp oeq double %646, 1.000000e+00
  br i1 %647, label %648, label %649

648:                                              ; preds = %644
  store i8 1, i8* %626, align 1
  br label %649

649:                                              ; preds = %648, %644
  %650 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %630, i64 0, i32 4
  %651 = load %class.SkTSpan*, %class.SkTSpan** %650, align 8
  %652 = load %class.SkTSpan*, %class.SkTSpan** %634, align 8
  %653 = icmp eq %class.SkTSpan* %651, null
  br i1 %653, label %664, label %654

654:                                              ; preds = %649
  %655 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %651, i64 0, i32 5
  store %class.SkTSpan* %652, %class.SkTSpan** %655, align 8
  %656 = icmp eq %class.SkTSpan* %652, null
  br i1 %656, label %668, label %657

657:                                              ; preds = %654
  %658 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %652, i64 0, i32 4
  store %class.SkTSpan* %651, %class.SkTSpan** %658, align 8
  %659 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %652, i64 0, i32 7
  %660 = load double, double* %659, align 8
  %661 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %652, i64 0, i32 8
  %662 = load double, double* %661, align 8
  %663 = fcmp ogt double %660, %662
  br i1 %663, label %679, label %668

664:                                              ; preds = %649
  store %class.SkTSpan* %652, %class.SkTSpan** %623, align 8
  %665 = icmp eq %class.SkTSpan* %652, null
  br i1 %665, label %668, label %666

666:                                              ; preds = %664
  %667 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %652, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %667, align 8
  br label %668

668:                                              ; preds = %666, %664, %657, %654
  %669 = load i32, i32* %558, align 8
  %670 = add nsw i32 %669, -1
  store i32 %670, i32* %558, align 8
  %671 = icmp slt i32 %669, 1
  br i1 %671, label %679, label %672

672:                                              ; preds = %668
  %673 = load i64, i64* %628, align 8
  %674 = bitcast %class.SkTSpan** %634 to i64*
  store i64 %673, i64* %674, align 8
  store %class.SkTSpan* %630, %class.SkTSpan** %627, align 8
  %675 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %630, i64 0, i32 14
  store i8 1, i8* %675, align 4
  br label %676

676:                                              ; preds = %672, %633
  %677 = add nsw i32 %631, -1
  %678 = icmp eq i32 %631, 0
  br i1 %678, label %679, label %629

679:                                              ; preds = %611, %600, %619, %668, %657, %676
  store %class.SkTSpan* null, %class.SkTSpan** %4, align 8
  br label %697

680:                                              ; preds = %629, %557
  %681 = icmp eq %class.SkTSpan* %497, null
  br i1 %681, label %695, label %682

682:                                              ; preds = %680
  %683 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %497, i64 0, i32 14
  %684 = load i8, i8* %683, align 4, !range !2
  %685 = icmp eq i8 %684, 0
  br i1 %685, label %686, label %695

686:                                              ; preds = %682
  %687 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %688 = load %class.SkTSpan*, %class.SkTSpan** %687, align 8
  %689 = icmp eq %class.SkTSpan* %688, null
  br i1 %689, label %695, label %690

690:                                              ; preds = %686
  %691 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 2
  %692 = load %class.SkTSpan*, %class.SkTSpan** %691, align 8
  %693 = icmp eq %class.SkTSpan* %692, null
  %694 = select i1 %693, %class.SkTSpan* null, %class.SkTSpan* %497
  br label %695

695:                                              ; preds = %686, %682, %680, %690
  %696 = phi %class.SkTSpan* [ null, %686 ], [ null, %682 ], [ null, %680 ], [ %694, %690 ]
  store %class.SkTSpan* %696, %class.SkTSpan** %4, align 8
  br label %697

697:                                              ; preds = %238, %241, %695, %679, %504, %545, %198
  %698 = phi i1 [ false, %198 ], [ true, %241 ], [ true, %238 ], [ true, %695 ], [ false, %679 ], [ false, %504 ], [ false, %545 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %88) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #9
  br label %699

699:                                              ; preds = %697, %51
  %700 = phi i1 [ %698, %697 ], [ true, %51 ]
  ret i1 %700
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkTSect15coincidentForceEPS_dd(%class.SkTSect*, %class.SkTSect*, double, double) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %6 = load %class.SkTSpan*, %class.SkTSpan** %5, align 8
  %7 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 5
  %8 = load %class.SkTSpan*, %class.SkTSpan** %7, align 8
  %9 = icmp eq %class.SkTSpan* %8, null
  br i1 %9, label %26, label %10

10:                                               ; preds = %4, %16
  %11 = phi %class.SkTSpan* [ %24, %16 ], [ %8, %4 ]
  %12 = phi i32 [ %14, %16 ], [ 100000, %4 ]
  %13 = phi %class.SkTSpan* [ %22, %16 ], [ %6, %4 ]
  %14 = add nsw i32 %12, -1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %26, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %11, i64 0, i32 8
  %18 = load double, double* %17, align 8
  %19 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %13, i64 0, i32 8
  %20 = load double, double* %19, align 8
  %21 = fcmp ogt double %18, %20
  %22 = select i1 %21, %class.SkTSpan* %11, %class.SkTSpan* %13
  %23 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %11, i64 0, i32 5
  %24 = load %class.SkTSpan*, %class.SkTSpan** %23, align 8
  %25 = icmp eq %class.SkTSpan* %24, null
  br i1 %25, label %26, label %10

26:                                               ; preds = %10, %16, %4
  %27 = phi %class.SkTSpan* [ %6, %4 ], [ null, %10 ], [ %22, %16 ]
  %28 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 2
  %29 = load %class.SkTSpan*, %class.SkTSpan** %28, align 8
  %30 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %29, i64 0, i32 5
  %31 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  %32 = icmp eq %class.SkTSpan* %31, null
  br i1 %32, label %49, label %33

33:                                               ; preds = %26, %39
  %34 = phi %class.SkTSpan* [ %47, %39 ], [ %31, %26 ]
  %35 = phi i32 [ %37, %39 ], [ 100000, %26 ]
  %36 = phi %class.SkTSpan* [ %45, %39 ], [ %29, %26 ]
  %37 = add nsw i32 %35, -1
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %472, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %34, i64 0, i32 8
  %41 = load double, double* %40, align 8
  %42 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %36, i64 0, i32 8
  %43 = load double, double* %42, align 8
  %44 = fcmp ogt double %41, %43
  %45 = select i1 %44, %class.SkTSpan* %34, %class.SkTSpan* %36
  %46 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %34, i64 0, i32 5
  %47 = load %class.SkTSpan*, %class.SkTSpan** %46, align 8
  %48 = icmp eq %class.SkTSpan* %47, null
  br i1 %48, label %49, label %33

49:                                               ; preds = %39, %26
  %50 = phi %class.SkTSpan* [ %29, %26 ], [ %45, %39 ]
  %51 = icmp ne %class.SkTSpan* %27, null
  %52 = icmp ne %class.SkTSpan* %50, null
  %53 = and i1 %51, %52
  br i1 %53, label %54, label %472

54:                                               ; preds = %49
  %55 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %27, i64 0, i32 5
  %56 = load %class.SkTSpan*, %class.SkTSpan** %55, align 8
  br label %57

57:                                               ; preds = %73, %54
  %58 = phi %class.SkTSpan* [ %6, %54 ], [ %77, %73 ]
  %59 = phi i1 [ false, %54 ], [ %75, %73 ]
  %60 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %58, i64 0, i32 3
  %61 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %60, align 8
  %62 = icmp eq %struct.SkTSpanBounded* %61, null
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %63
  %64 = phi %struct.SkTSpanBounded* [ %71, %63 ], [ %61, %57 ]
  %65 = phi i1 [ %69, %63 ], [ false, %57 ]
  %66 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %64, i64 0, i32 0
  %67 = load %class.SkTSpan*, %class.SkTSpan** %66, align 8
  %68 = tail call zeroext i1 @_ZN7SkTSpan13removeBoundedEPKS_(%class.SkTSpan* %67, %class.SkTSpan* %58) #9
  %69 = or i1 %65, %68
  %70 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %64, i64 0, i32 1
  %71 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %70, align 8
  %72 = icmp eq %struct.SkTSpanBounded* %71, null
  br i1 %72, label %73, label %63

73:                                               ; preds = %63, %57
  %74 = phi i1 [ false, %57 ], [ %69, %63 ]
  %75 = or i1 %59, %74
  %76 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %58, i64 0, i32 5
  %77 = load %class.SkTSpan*, %class.SkTSpan** %76, align 8
  %78 = icmp ne %class.SkTSpan* %77, %56
  %79 = icmp ne %class.SkTSpan* %77, null
  %80 = and i1 %79, %78
  br i1 %80, label %57, label %81

81:                                               ; preds = %73
  %82 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 3
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %82, align 8
  %83 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1032
  %84 = bitcast i8* %83 to i8**
  %85 = bitcast i8* %83 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = sub i64 0, %86
  %88 = and i64 %87, 7
  %89 = or i64 %88, 16
  %90 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1040
  %91 = bitcast i8* %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %92, %86
  %94 = icmp ugt i64 %89, %93
  br i1 %94, label %95, label %101

95:                                               ; preds = %81
  %96 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %97 = bitcast i8* %96 to %class.SkArenaAlloc*
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %97, i32 16, i32 8) #9
  %98 = load i64, i64* %85, align 8
  %99 = sub i64 0, %98
  %100 = and i64 %99, 7
  br label %101

101:                                              ; preds = %81, %95
  %102 = phi i64 [ %98, %95 ], [ %86, %81 ]
  %103 = phi i64 [ %100, %95 ], [ %88, %81 ]
  %104 = inttoptr i64 %102 to i8*
  %105 = getelementptr inbounds i8, i8* %104, i64 %103
  %106 = getelementptr inbounds i8, i8* %105, i64 16
  store i8* %106, i8** %84, align 8
  %107 = getelementptr inbounds i8, i8* %105, i64 8
  %108 = bitcast i8* %107 to i64*
  store i64 0, i64* %108, align 8
  %109 = bitcast i8* %105 to %class.SkTSpan**
  store %class.SkTSpan* %29, %class.SkTSpan** %109, align 8
  %110 = bitcast %struct.SkTSpanBounded** %82 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %108, align 8
  %112 = bitcast %struct.SkTSpanBounded** %82 to i8**
  store i8* %105, i8** %112, align 8
  %113 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %50, i64 0, i32 5
  %114 = load %class.SkTSpan*, %class.SkTSpan** %113, align 8
  br label %115

115:                                              ; preds = %131, %101
  %116 = phi %class.SkTSpan* [ %29, %101 ], [ %135, %131 ]
  %117 = phi i1 [ false, %101 ], [ %133, %131 ]
  %118 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %116, i64 0, i32 3
  %119 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %118, align 8
  %120 = icmp eq %struct.SkTSpanBounded* %119, null
  br i1 %120, label %131, label %121

121:                                              ; preds = %115, %121
  %122 = phi %struct.SkTSpanBounded* [ %129, %121 ], [ %119, %115 ]
  %123 = phi i1 [ %127, %121 ], [ false, %115 ]
  %124 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %122, i64 0, i32 0
  %125 = load %class.SkTSpan*, %class.SkTSpan** %124, align 8
  %126 = tail call zeroext i1 @_ZN7SkTSpan13removeBoundedEPKS_(%class.SkTSpan* %125, %class.SkTSpan* %116) #9
  %127 = or i1 %123, %126
  %128 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %122, i64 0, i32 1
  %129 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %128, align 8
  %130 = icmp eq %struct.SkTSpanBounded* %129, null
  br i1 %130, label %131, label %121

131:                                              ; preds = %121, %115
  %132 = phi i1 [ false, %115 ], [ %127, %121 ]
  %133 = or i1 %117, %132
  %134 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %116, i64 0, i32 5
  %135 = load %class.SkTSpan*, %class.SkTSpan** %134, align 8
  %136 = icmp ne %class.SkTSpan* %135, %114
  %137 = icmp ne %class.SkTSpan* %135, null
  %138 = and i1 %137, %136
  br i1 %138, label %115, label %139

139:                                              ; preds = %131
  %140 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %29, i64 0, i32 3
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %140, align 8
  %141 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 1, i32 0, i32 0, i64 1032
  %142 = bitcast i8* %141 to i8**
  %143 = bitcast i8* %141 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = sub i64 0, %144
  %146 = and i64 %145, 7
  %147 = or i64 %146, 16
  %148 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 1, i32 0, i32 0, i64 1040
  %149 = bitcast i8* %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = sub i64 %150, %144
  %152 = icmp ugt i64 %147, %151
  br i1 %152, label %153, label %159

153:                                              ; preds = %139
  %154 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 1, i32 0, i32 0, i64 1024
  %155 = bitcast i8* %154 to %class.SkArenaAlloc*
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %155, i32 16, i32 8) #9
  %156 = load i64, i64* %143, align 8
  %157 = sub i64 0, %156
  %158 = and i64 %157, 7
  br label %159

159:                                              ; preds = %139, %153
  %160 = phi i64 [ %156, %153 ], [ %144, %139 ]
  %161 = phi i64 [ %158, %153 ], [ %146, %139 ]
  %162 = inttoptr i64 %160 to i8*
  %163 = getelementptr inbounds i8, i8* %162, i64 %161
  %164 = getelementptr inbounds i8, i8* %163, i64 16
  store i8* %164, i8** %142, align 8
  %165 = getelementptr inbounds i8, i8* %163, i64 8
  %166 = bitcast i8* %165 to i64*
  store i64 0, i64* %166, align 8
  %167 = bitcast i8* %163 to %class.SkTSpan**
  store %class.SkTSpan* %6, %class.SkTSpan** %167, align 8
  %168 = bitcast %struct.SkTSpanBounded** %140 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %166, align 8
  %170 = bitcast %struct.SkTSpanBounded** %140 to i8**
  store i8* %163, i8** %170, align 8
  %171 = or i1 %75, %133
  %172 = icmp eq %class.SkTSpan* %6, %27
  br i1 %172, label %203, label %173

173:                                              ; preds = %159
  %174 = load %class.SkTSpan*, %class.SkTSpan** %55, align 8
  %175 = load %class.SkTSpan*, %class.SkTSpan** %7, align 8
  %176 = icmp eq %class.SkTSpan* %175, null
  %177 = icmp eq %class.SkTSpan* %175, %174
  %178 = or i1 %176, %177
  br i1 %178, label %198, label %179

179:                                              ; preds = %173
  %180 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %181 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %182 = bitcast %class.SkTSpan** %181 to i64*
  br label %183

183:                                              ; preds = %194, %179
  %184 = phi %class.SkTSpan* [ %175, %179 ], [ %186, %194 ]
  %185 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %184, i64 0, i32 5
  %186 = load %class.SkTSpan*, %class.SkTSpan** %185, align 8
  %187 = load i32, i32* %180, align 8
  %188 = add nsw i32 %187, -1
  store i32 %188, i32* %180, align 8
  %189 = icmp slt i32 %187, 1
  br i1 %189, label %194, label %190

190:                                              ; preds = %183
  %191 = load i64, i64* %182, align 8
  %192 = bitcast %class.SkTSpan** %185 to i64*
  store i64 %191, i64* %192, align 8
  store %class.SkTSpan* %184, %class.SkTSpan** %181, align 8
  %193 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %184, i64 0, i32 14
  store i8 1, i8* %193, align 4
  br label %194

194:                                              ; preds = %190, %183
  %195 = icmp eq %class.SkTSpan* %186, null
  %196 = icmp eq %class.SkTSpan* %186, %174
  %197 = or i1 %195, %196
  br i1 %197, label %198, label %183

198:                                              ; preds = %194, %173
  %199 = icmp eq %class.SkTSpan* %174, null
  br i1 %199, label %202, label %200

200:                                              ; preds = %198
  %201 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %174, i64 0, i32 4
  store %class.SkTSpan* %6, %class.SkTSpan** %201, align 8
  br label %202

202:                                              ; preds = %200, %198
  store %class.SkTSpan* %174, %class.SkTSpan** %7, align 8
  br label %203

203:                                              ; preds = %159, %202
  %204 = icmp eq %class.SkTSpan* %29, %50
  br i1 %204, label %235, label %205

205:                                              ; preds = %203
  %206 = load %class.SkTSpan*, %class.SkTSpan** %113, align 8
  %207 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  %208 = icmp eq %class.SkTSpan* %207, null
  %209 = icmp eq %class.SkTSpan* %207, %206
  %210 = or i1 %208, %209
  br i1 %210, label %230, label %211

211:                                              ; preds = %205
  %212 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 5
  %213 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 4
  %214 = bitcast %class.SkTSpan** %213 to i64*
  br label %215

215:                                              ; preds = %226, %211
  %216 = phi %class.SkTSpan* [ %207, %211 ], [ %218, %226 ]
  %217 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %216, i64 0, i32 5
  %218 = load %class.SkTSpan*, %class.SkTSpan** %217, align 8
  %219 = load i32, i32* %212, align 8
  %220 = add nsw i32 %219, -1
  store i32 %220, i32* %212, align 8
  %221 = icmp slt i32 %219, 1
  br i1 %221, label %226, label %222

222:                                              ; preds = %215
  %223 = load i64, i64* %214, align 8
  %224 = bitcast %class.SkTSpan** %217 to i64*
  store i64 %223, i64* %224, align 8
  store %class.SkTSpan* %216, %class.SkTSpan** %213, align 8
  %225 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %216, i64 0, i32 14
  store i8 1, i8* %225, align 4
  br label %226

226:                                              ; preds = %222, %215
  %227 = icmp eq %class.SkTSpan* %218, null
  %228 = icmp eq %class.SkTSpan* %218, %206
  %229 = or i1 %227, %228
  br i1 %229, label %230, label %215

230:                                              ; preds = %226, %205
  %231 = icmp eq %class.SkTSpan* %206, null
  br i1 %231, label %234, label %232

232:                                              ; preds = %230
  %233 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %206, i64 0, i32 4
  store %class.SkTSpan* %29, %class.SkTSpan** %233, align 8
  br label %234

234:                                              ; preds = %232, %230
  store %class.SkTSpan* %206, %class.SkTSpan** %30, align 8
  br label %235

235:                                              ; preds = %203, %234
  %236 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 7
  store double %2, double* %236, align 8
  %237 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 8
  store double %3, double* %237, align 8
  %238 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %239 = load %class.SkTCurve*, %class.SkTCurve** %238, align 8
  %240 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 13
  store i8 0, i8* %240, align 1
  %241 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 12
  store i8 0, i8* %241, align 2
  %242 = tail call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* %6, %class.SkTCurve* dereferenceable(8) %239) #9
  %243 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 1
  %244 = load %class.SkTCurve*, %class.SkTCurve** %238, align 8
  %245 = bitcast %class.SkTCurve* %244 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %246 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %245, align 8
  %247 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %246, i64 2
  %248 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %247, align 8
  %249 = tail call dereferenceable(16) %struct.SkDPoint* %248(%class.SkTCurve* %244, i32 0) #9
  %250 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 0
  %251 = load %class.SkTCurve*, %class.SkTCurve** %250, align 8
  tail call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* %243, %class.SkTCurve* dereferenceable(8) %244, double %2, %struct.SkDPoint* dereferenceable(16) %249, %class.SkTCurve* dereferenceable(8) %251)
  %252 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 2
  %253 = load %class.SkTCurve*, %class.SkTCurve** %238, align 8
  %254 = bitcast %class.SkTCurve* %253 to i32 (%class.SkTCurve*)***
  %255 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %254, align 8
  %256 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %255, i64 18
  %257 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %256, align 8
  %258 = tail call i32 %257(%class.SkTCurve* %253) #9
  %259 = bitcast %class.SkTCurve* %253 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %260 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %259, align 8
  %261 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %260, i64 2
  %262 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %261, align 8
  %263 = tail call dereferenceable(16) %struct.SkDPoint* %262(%class.SkTCurve* %253, i32 %258) #9
  %264 = load %class.SkTCurve*, %class.SkTCurve** %250, align 8
  tail call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* %252, %class.SkTCurve* dereferenceable(8) %253, double %3, %struct.SkDPoint* dereferenceable(16) %263, %class.SkTCurve* dereferenceable(8) %264)
  %265 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 1, i32 1
  %266 = load double, double* %265, align 8
  %267 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 2, i32 1
  %268 = load double, double* %267, align 8
  %269 = fcmp olt double %266, %268
  %270 = fcmp oeq double %266, -1.000000e+00
  %271 = fcmp ogt double %266, 0.000000e+00
  %272 = select i1 %271, double %266, double 0.000000e+00
  %273 = select i1 %270, double 0.000000e+00, double %272
  %274 = bitcast double %273 to i64
  %275 = fcmp oeq double %268, -1.000000e+00
  %276 = fcmp olt double %268, 1.000000e+00
  %277 = select i1 %276, double %268, double 1.000000e+00
  %278 = select i1 %275, double 1.000000e+00, double %277
  %279 = bitcast double %278 to i64
  %280 = select i1 %269, i64 %279, i64 %274
  %281 = select i1 %269, i64 %274, i64 %279
  %282 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %29, i64 0, i32 7
  %283 = bitcast double* %282 to i64*
  store i64 %281, i64* %283, align 8
  %284 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %29, i64 0, i32 8
  %285 = bitcast double* %284 to i64*
  store i64 %280, i64* %285, align 8
  %286 = load %class.SkTCurve*, %class.SkTCurve** %250, align 8
  %287 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %29, i64 0, i32 13
  store i8 0, i8* %287, align 1
  %288 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %29, i64 0, i32 12
  store i8 0, i8* %288, align 2
  %289 = tail call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* %29, %class.SkTCurve* dereferenceable(8) %286) #9
  %290 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 4
  %291 = load %class.SkTSpan*, %class.SkTSpan** %290, align 8
  %292 = load %class.SkTSpan*, %class.SkTSpan** %7, align 8
  %293 = icmp eq %class.SkTSpan* %291, null
  br i1 %293, label %304, label %294

294:                                              ; preds = %235
  %295 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %291, i64 0, i32 5
  store %class.SkTSpan* %292, %class.SkTSpan** %295, align 8
  %296 = icmp eq %class.SkTSpan* %292, null
  br i1 %296, label %308, label %297

297:                                              ; preds = %294
  %298 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %292, i64 0, i32 4
  store %class.SkTSpan* %291, %class.SkTSpan** %298, align 8
  %299 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %292, i64 0, i32 7
  %300 = load double, double* %299, align 8
  %301 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %292, i64 0, i32 8
  %302 = load double, double* %301, align 8
  %303 = fcmp ogt double %300, %302
  br i1 %303, label %330, label %308

304:                                              ; preds = %235
  store %class.SkTSpan* %292, %class.SkTSpan** %5, align 8
  %305 = icmp eq %class.SkTSpan* %292, null
  br i1 %305, label %308, label %306

306:                                              ; preds = %304
  %307 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %292, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %307, align 8
  br label %308

308:                                              ; preds = %306, %304, %297, %294
  %309 = load double, double* %265, align 8
  %310 = fsub double 0.000000e+00, %309
  %311 = fsub double 1.000000e+00, %309
  %312 = fmul double %310, %311
  %313 = fcmp ugt double %312, 0.000000e+00
  %314 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %315 = load i32, i32* %314, align 8
  %316 = add nsw i32 %315, -1
  store i32 %316, i32* %314, align 8
  br i1 %313, label %322, label %317

317:                                              ; preds = %308
  %318 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 3
  %319 = bitcast %class.SkTSpan** %318 to i64*
  %320 = load i64, i64* %319, align 8
  %321 = bitcast %class.SkTSpan** %7 to i64*
  store i64 %320, i64* %321, align 8
  store %class.SkTSpan* %6, %class.SkTSpan** %318, align 8
  br label %330

322:                                              ; preds = %308
  %323 = icmp slt i32 %315, 1
  br i1 %323, label %330, label %324

324:                                              ; preds = %322
  %325 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %326 = bitcast %class.SkTSpan** %325 to i64*
  %327 = load i64, i64* %326, align 8
  %328 = bitcast %class.SkTSpan** %7 to i64*
  store i64 %327, i64* %328, align 8
  store %class.SkTSpan* %6, %class.SkTSpan** %325, align 8
  %329 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 14
  store i8 1, i8* %329, align 4
  br label %330

330:                                              ; preds = %297, %317, %322, %324
  %331 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %29, i64 0, i32 4
  %332 = load %class.SkTSpan*, %class.SkTSpan** %331, align 8
  %333 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  %334 = icmp eq %class.SkTSpan* %332, null
  br i1 %334, label %345, label %335

335:                                              ; preds = %330
  %336 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %332, i64 0, i32 5
  store %class.SkTSpan* %333, %class.SkTSpan** %336, align 8
  %337 = icmp eq %class.SkTSpan* %333, null
  br i1 %337, label %349, label %338

338:                                              ; preds = %335
  %339 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %333, i64 0, i32 4
  store %class.SkTSpan* %332, %class.SkTSpan** %339, align 8
  %340 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %333, i64 0, i32 7
  %341 = load double, double* %340, align 8
  %342 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %333, i64 0, i32 8
  %343 = load double, double* %342, align 8
  %344 = fcmp ogt double %341, %343
  br i1 %344, label %357, label %349

345:                                              ; preds = %330
  store %class.SkTSpan* %333, %class.SkTSpan** %28, align 8
  %346 = icmp eq %class.SkTSpan* %333, null
  br i1 %346, label %349, label %347

347:                                              ; preds = %345
  %348 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %333, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %348, align 8
  br label %349

349:                                              ; preds = %347, %345, %338, %335
  %350 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 5
  %351 = load i32, i32* %350, align 8
  %352 = add nsw i32 %351, -1
  store i32 %352, i32* %350, align 8
  %353 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 3
  %354 = bitcast %class.SkTSpan** %353 to i64*
  %355 = load i64, i64* %354, align 8
  %356 = bitcast %class.SkTSpan** %30 to i64*
  store i64 %355, i64* %356, align 8
  store %class.SkTSpan* %29, %class.SkTSpan** %353, align 8
  br label %357

357:                                              ; preds = %338, %349
  br i1 %171, label %358, label %472

358:                                              ; preds = %357
  %359 = load %class.SkTSpan*, %class.SkTSpan** %5, align 8
  %360 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 6
  %361 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 7
  %362 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %363 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %364 = bitcast %class.SkTSpan** %363 to i64*
  br label %365

365:                                              ; preds = %412, %358
  %366 = phi %class.SkTSpan* [ %359, %358 ], [ %371, %412 ]
  %367 = phi i32 [ 1000, %358 ], [ %413, %412 ]
  %368 = icmp eq %class.SkTSpan* %366, null
  br i1 %368, label %415, label %369

369:                                              ; preds = %365
  %370 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %366, i64 0, i32 5
  %371 = load %class.SkTSpan*, %class.SkTSpan** %370, align 8
  %372 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %366, i64 0, i32 3
  %373 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %372, align 8
  %374 = icmp eq %struct.SkTSpanBounded* %373, null
  br i1 %374, label %375, label %412

375:                                              ; preds = %369
  %376 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %366, i64 0, i32 7
  %377 = load double, double* %376, align 8
  %378 = fcmp une double %377, 0.000000e+00
  br i1 %378, label %380, label %379

379:                                              ; preds = %375
  store i8 1, i8* %360, align 4
  br label %380

380:                                              ; preds = %379, %375
  %381 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %366, i64 0, i32 8
  %382 = load double, double* %381, align 8
  %383 = fcmp oeq double %382, 1.000000e+00
  br i1 %383, label %384, label %385

384:                                              ; preds = %380
  store i8 1, i8* %361, align 1
  br label %385

385:                                              ; preds = %384, %380
  %386 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %366, i64 0, i32 4
  %387 = load %class.SkTSpan*, %class.SkTSpan** %386, align 8
  %388 = load %class.SkTSpan*, %class.SkTSpan** %370, align 8
  %389 = icmp eq %class.SkTSpan* %387, null
  br i1 %389, label %400, label %390

390:                                              ; preds = %385
  %391 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %387, i64 0, i32 5
  store %class.SkTSpan* %388, %class.SkTSpan** %391, align 8
  %392 = icmp eq %class.SkTSpan* %388, null
  br i1 %392, label %404, label %393

393:                                              ; preds = %390
  %394 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %388, i64 0, i32 4
  store %class.SkTSpan* %387, %class.SkTSpan** %394, align 8
  %395 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %388, i64 0, i32 7
  %396 = load double, double* %395, align 8
  %397 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %388, i64 0, i32 8
  %398 = load double, double* %397, align 8
  %399 = fcmp ogt double %396, %398
  br i1 %399, label %415, label %404

400:                                              ; preds = %385
  store %class.SkTSpan* %388, %class.SkTSpan** %5, align 8
  %401 = icmp eq %class.SkTSpan* %388, null
  br i1 %401, label %404, label %402

402:                                              ; preds = %400
  %403 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %388, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %403, align 8
  br label %404

404:                                              ; preds = %402, %400, %393, %390
  %405 = load i32, i32* %362, align 8
  %406 = add nsw i32 %405, -1
  store i32 %406, i32* %362, align 8
  %407 = icmp slt i32 %405, 1
  br i1 %407, label %415, label %408

408:                                              ; preds = %404
  %409 = load i64, i64* %364, align 8
  %410 = bitcast %class.SkTSpan** %370 to i64*
  store i64 %409, i64* %410, align 8
  store %class.SkTSpan* %366, %class.SkTSpan** %363, align 8
  %411 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %366, i64 0, i32 14
  store i8 1, i8* %411, align 4
  br label %412

412:                                              ; preds = %408, %369
  %413 = add nsw i32 %367, -1
  %414 = icmp eq i32 %367, 0
  br i1 %414, label %415, label %365

415:                                              ; preds = %365, %393, %404, %412
  %416 = load %class.SkTSpan*, %class.SkTSpan** %28, align 8
  %417 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 6
  %418 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 7
  %419 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 5
  %420 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 4
  %421 = bitcast %class.SkTSpan** %420 to i64*
  br label %422

422:                                              ; preds = %469, %415
  %423 = phi %class.SkTSpan* [ %416, %415 ], [ %428, %469 ]
  %424 = phi i32 [ 1000, %415 ], [ %470, %469 ]
  %425 = icmp eq %class.SkTSpan* %423, null
  br i1 %425, label %472, label %426

426:                                              ; preds = %422
  %427 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %423, i64 0, i32 5
  %428 = load %class.SkTSpan*, %class.SkTSpan** %427, align 8
  %429 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %423, i64 0, i32 3
  %430 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %429, align 8
  %431 = icmp eq %struct.SkTSpanBounded* %430, null
  br i1 %431, label %432, label %469

432:                                              ; preds = %426
  %433 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %423, i64 0, i32 7
  %434 = load double, double* %433, align 8
  %435 = fcmp une double %434, 0.000000e+00
  br i1 %435, label %437, label %436

436:                                              ; preds = %432
  store i8 1, i8* %417, align 4
  br label %437

437:                                              ; preds = %436, %432
  %438 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %423, i64 0, i32 8
  %439 = load double, double* %438, align 8
  %440 = fcmp oeq double %439, 1.000000e+00
  br i1 %440, label %441, label %442

441:                                              ; preds = %437
  store i8 1, i8* %418, align 1
  br label %442

442:                                              ; preds = %441, %437
  %443 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %423, i64 0, i32 4
  %444 = load %class.SkTSpan*, %class.SkTSpan** %443, align 8
  %445 = load %class.SkTSpan*, %class.SkTSpan** %427, align 8
  %446 = icmp eq %class.SkTSpan* %444, null
  br i1 %446, label %457, label %447

447:                                              ; preds = %442
  %448 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %444, i64 0, i32 5
  store %class.SkTSpan* %445, %class.SkTSpan** %448, align 8
  %449 = icmp eq %class.SkTSpan* %445, null
  br i1 %449, label %461, label %450

450:                                              ; preds = %447
  %451 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %445, i64 0, i32 4
  store %class.SkTSpan* %444, %class.SkTSpan** %451, align 8
  %452 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %445, i64 0, i32 7
  %453 = load double, double* %452, align 8
  %454 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %445, i64 0, i32 8
  %455 = load double, double* %454, align 8
  %456 = fcmp ogt double %453, %455
  br i1 %456, label %472, label %461

457:                                              ; preds = %442
  store %class.SkTSpan* %445, %class.SkTSpan** %28, align 8
  %458 = icmp eq %class.SkTSpan* %445, null
  br i1 %458, label %461, label %459

459:                                              ; preds = %457
  %460 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %445, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %460, align 8
  br label %461

461:                                              ; preds = %459, %457, %450, %447
  %462 = load i32, i32* %419, align 8
  %463 = add nsw i32 %462, -1
  store i32 %463, i32* %419, align 8
  %464 = icmp slt i32 %462, 1
  br i1 %464, label %472, label %465

465:                                              ; preds = %461
  %466 = load i64, i64* %421, align 8
  %467 = bitcast %class.SkTSpan** %427 to i64*
  store i64 %466, i64* %467, align 8
  store %class.SkTSpan* %423, %class.SkTSpan** %420, align 8
  %468 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %423, i64 0, i32 14
  store i8 1, i8* %468, align 4
  br label %469

469:                                              ; preds = %465, %426
  %470 = add nsw i32 %424, -1
  %471 = icmp eq i32 %424, 0
  br i1 %471, label %472, label %422

472:                                              ; preds = %33, %422, %450, %461, %469, %357, %49
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkTSpan* @_ZN7SkTSect4tailEv(%class.SkTSect* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %3 = load %class.SkTSpan*, %class.SkTSpan** %2, align 8
  %4 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 5
  %5 = load %class.SkTSpan*, %class.SkTSpan** %4, align 8
  %6 = icmp eq %class.SkTSpan* %5, null
  br i1 %6, label %23, label %7

7:                                                ; preds = %1, %13
  %8 = phi %class.SkTSpan* [ %21, %13 ], [ %5, %1 ]
  %9 = phi i32 [ %11, %13 ], [ 100000, %1 ]
  %10 = phi %class.SkTSpan* [ %19, %13 ], [ %3, %1 ]
  %11 = add nsw i32 %9, -1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %23, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 8
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %10, i64 0, i32 8
  %17 = load double, double* %16, align 8
  %18 = fcmp ogt double %15, %17
  %19 = select i1 %18, %class.SkTSpan* %8, %class.SkTSpan* %10
  %20 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 5
  %21 = load %class.SkTSpan*, %class.SkTSpan** %20, align 8
  %22 = icmp eq %class.SkTSpan* %21, null
  br i1 %22, label %23, label %7

23:                                               ; preds = %7, %13, %1
  %24 = phi %class.SkTSpan* [ %3, %1 ], [ %19, %13 ], [ null, %7 ]
  ret %class.SkTSpan* %24
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSect13updateBoundedEP7SkTSpanS1_S1_(%class.SkTSect*, %class.SkTSpan*, %class.SkTSpan* nocapture readonly, %class.SkTSpan*) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %2, i64 0, i32 5
  %6 = load %class.SkTSpan*, %class.SkTSpan** %5, align 8
  br label %7

7:                                                ; preds = %23, %4
  %8 = phi %class.SkTSpan* [ %1, %4 ], [ %27, %23 ]
  %9 = phi i1 [ false, %4 ], [ %25, %23 ]
  %10 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 3
  %11 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %10, align 8
  %12 = icmp eq %struct.SkTSpanBounded* %11, null
  br i1 %12, label %23, label %13

13:                                               ; preds = %7, %13
  %14 = phi %struct.SkTSpanBounded* [ %21, %13 ], [ %11, %7 ]
  %15 = phi i1 [ %19, %13 ], [ false, %7 ]
  %16 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %14, i64 0, i32 0
  %17 = load %class.SkTSpan*, %class.SkTSpan** %16, align 8
  %18 = tail call zeroext i1 @_ZN7SkTSpan13removeBoundedEPKS_(%class.SkTSpan* %17, %class.SkTSpan* %8) #9
  %19 = or i1 %15, %18
  %20 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %14, i64 0, i32 1
  %21 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %20, align 8
  %22 = icmp eq %struct.SkTSpanBounded* %21, null
  br i1 %22, label %23, label %13

23:                                               ; preds = %13, %7
  %24 = phi i1 [ false, %7 ], [ %19, %13 ]
  %25 = or i1 %9, %24
  %26 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 5
  %27 = load %class.SkTSpan*, %class.SkTSpan** %26, align 8
  %28 = icmp ne %class.SkTSpan* %27, %6
  %29 = icmp ne %class.SkTSpan* %27, null
  %30 = and i1 %29, %28
  br i1 %30, label %7, label %31

31:                                               ; preds = %23
  %32 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 3
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %32, align 8
  %33 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1
  %34 = icmp eq %class.SkSTArenaAlloc* %33, null
  %35 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %36 = bitcast i8* %35 to %class.SkArenaAlloc*
  %37 = select i1 %34, %class.SkArenaAlloc* null, %class.SkArenaAlloc* %36
  %38 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %37, i64 0, i32 1
  %39 = bitcast i8** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 0, %40
  %42 = and i64 %41, 7
  %43 = or i64 %42, 16
  %44 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %37, i64 0, i32 2
  %45 = bitcast i8** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = sub i64 %46, %40
  %48 = icmp ugt i64 %43, %47
  br i1 %48, label %49, label %53

49:                                               ; preds = %31
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %37, i32 16, i32 8) #9
  %50 = load i64, i64* %39, align 8
  %51 = sub i64 0, %50
  %52 = and i64 %51, 7
  br label %53

53:                                               ; preds = %31, %49
  %54 = phi i64 [ %50, %49 ], [ %40, %31 ]
  %55 = phi i64 [ %52, %49 ], [ %42, %31 ]
  %56 = inttoptr i64 %54 to i8*
  %57 = getelementptr inbounds i8, i8* %56, i64 %55
  %58 = getelementptr inbounds i8, i8* %57, i64 16
  store i8* %58, i8** %38, align 8
  %59 = getelementptr inbounds i8, i8* %57, i64 8
  %60 = bitcast i8* %59 to i64*
  store i64 0, i64* %60, align 8
  %61 = bitcast i8* %57 to %class.SkTSpan**
  store %class.SkTSpan* %3, %class.SkTSpan** %61, align 8
  %62 = bitcast %struct.SkTSpanBounded** %32 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %60, align 8
  %64 = bitcast %struct.SkTSpanBounded** %32 to i8**
  store i8* %57, i8** %64, align 8
  ret i1 %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7SkTSect15removeSpanRangeEP7SkTSpanS1_(%class.SkTSect* nocapture, %class.SkTSpan*, %class.SkTSpan* readonly) local_unnamed_addr #3 align 2 {
  %4 = icmp eq %class.SkTSpan* %1, %2
  br i1 %4, label %37, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %2, i64 0, i32 5
  %7 = load %class.SkTSpan*, %class.SkTSpan** %6, align 8
  %8 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 5
  %9 = load %class.SkTSpan*, %class.SkTSpan** %8, align 8
  %10 = icmp eq %class.SkTSpan* %9, null
  %11 = icmp eq %class.SkTSpan* %9, %7
  %12 = or i1 %10, %11
  br i1 %12, label %32, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %15 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %16 = bitcast %class.SkTSpan** %15 to i64*
  br label %17

17:                                               ; preds = %13, %28
  %18 = phi %class.SkTSpan* [ %9, %13 ], [ %20, %28 ]
  %19 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %18, i64 0, i32 5
  %20 = load %class.SkTSpan*, %class.SkTSpan** %19, align 8
  %21 = load i32, i32* %14, align 8
  %22 = add nsw i32 %21, -1
  store i32 %22, i32* %14, align 8
  %23 = icmp slt i32 %21, 1
  br i1 %23, label %28, label %24

24:                                               ; preds = %17
  %25 = load i64, i64* %16, align 8
  %26 = bitcast %class.SkTSpan** %19 to i64*
  store i64 %25, i64* %26, align 8
  store %class.SkTSpan* %18, %class.SkTSpan** %15, align 8
  %27 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %18, i64 0, i32 14
  store i8 1, i8* %27, align 4
  br label %28

28:                                               ; preds = %17, %24
  %29 = icmp eq %class.SkTSpan* %20, null
  %30 = icmp eq %class.SkTSpan* %20, %7
  %31 = or i1 %29, %30
  br i1 %31, label %32, label %17

32:                                               ; preds = %28, %5
  %33 = icmp eq %class.SkTSpan* %7, null
  br i1 %33, label %36, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %7, i64 0, i32 4
  store %class.SkTSpan* %1, %class.SkTSpan** %35, align 8
  br label %36

36:                                               ; preds = %32, %34
  store %class.SkTSpan* %7, %class.SkTSpan** %8, align 8
  br label %37

37:                                               ; preds = %3, %36
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSect16removeCoincidentEP7SkTSpanb(%class.SkTSect* nocapture, %class.SkTSpan*, i1 zeroext) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 4
  %5 = load %class.SkTSpan*, %class.SkTSpan** %4, align 8
  %6 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 5
  %7 = load %class.SkTSpan*, %class.SkTSpan** %6, align 8
  %8 = icmp eq %class.SkTSpan* %5, null
  br i1 %8, label %19, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %5, i64 0, i32 5
  store %class.SkTSpan* %7, %class.SkTSpan** %10, align 8
  %11 = icmp eq %class.SkTSpan* %7, null
  br i1 %11, label %24, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %7, i64 0, i32 4
  store %class.SkTSpan* %5, %class.SkTSpan** %13, align 8
  %14 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %7, i64 0, i32 7
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %7, i64 0, i32 8
  %17 = load double, double* %16, align 8
  %18 = fcmp ogt double %15, %17
  br i1 %18, label %51, label %24

19:                                               ; preds = %3
  %20 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  store %class.SkTSpan* %7, %class.SkTSpan** %20, align 8
  %21 = icmp eq %class.SkTSpan* %7, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %7, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %23, align 8
  br label %24

24:                                               ; preds = %12, %9, %19, %22
  br i1 %2, label %32, label %25

25:                                               ; preds = %24
  %26 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 1, i32 1
  %27 = load double, double* %26, align 8
  %28 = fsub double 0.000000e+00, %27
  %29 = fsub double 1.000000e+00, %27
  %30 = fmul double %28, %29
  %31 = fcmp ugt double %30, 0.000000e+00
  br i1 %31, label %40, label %32

32:                                               ; preds = %25, %24
  %33 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %34 = load i32, i32* %33, align 8
  %35 = add nsw i32 %34, -1
  store i32 %35, i32* %33, align 8
  %36 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 3
  %37 = bitcast %class.SkTSpan** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %class.SkTSpan** %6 to i64*
  store i64 %38, i64* %39, align 8
  store %class.SkTSpan* %1, %class.SkTSpan** %36, align 8
  br label %51

40:                                               ; preds = %25
  %41 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %42 = load i32, i32* %41, align 8
  %43 = add nsw i32 %42, -1
  store i32 %43, i32* %41, align 8
  %44 = icmp slt i32 %42, 1
  br i1 %44, label %51, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %47 = bitcast %class.SkTSpan** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %class.SkTSpan** %6 to i64*
  store i64 %48, i64* %49, align 8
  store %class.SkTSpan* %1, %class.SkTSpan** %46, align 8
  %50 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 14
  store i8 1, i8* %50, align 4
  br label %51

51:                                               ; preds = %45, %40, %12, %32
  %52 = phi i1 [ true, %32 ], [ false, %12 ], [ true, %40 ], [ true, %45 ]
  ret i1 %52
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSect16deleteEmptySpansEv(%class.SkTSect* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %3 = load %class.SkTSpan*, %class.SkTSpan** %2, align 8
  %4 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 6
  %5 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 7
  %6 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %7 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %8 = bitcast %class.SkTSpan** %7 to i64*
  br label %9

9:                                                ; preds = %56, %1
  %10 = phi %class.SkTSpan* [ %3, %1 ], [ %15, %56 ]
  %11 = phi i32 [ 1000, %1 ], [ %57, %56 ]
  %12 = icmp eq %class.SkTSpan* %10, null
  br i1 %12, label %59, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %10, i64 0, i32 5
  %15 = load %class.SkTSpan*, %class.SkTSpan** %14, align 8
  %16 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %10, i64 0, i32 3
  %17 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %16, align 8
  %18 = icmp eq %struct.SkTSpanBounded* %17, null
  br i1 %18, label %19, label %56

19:                                               ; preds = %13
  %20 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %10, i64 0, i32 7
  %21 = load double, double* %20, align 8
  %22 = fcmp une double %21, 0.000000e+00
  br i1 %22, label %24, label %23

23:                                               ; preds = %19
  store i8 1, i8* %4, align 4
  br label %24

24:                                               ; preds = %23, %19
  %25 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %10, i64 0, i32 8
  %26 = load double, double* %25, align 8
  %27 = fcmp oeq double %26, 1.000000e+00
  br i1 %27, label %28, label %29

28:                                               ; preds = %24
  store i8 1, i8* %5, align 1
  br label %29

29:                                               ; preds = %28, %24
  %30 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %10, i64 0, i32 4
  %31 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  %32 = load %class.SkTSpan*, %class.SkTSpan** %14, align 8
  %33 = icmp eq %class.SkTSpan* %31, null
  br i1 %33, label %44, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %31, i64 0, i32 5
  store %class.SkTSpan* %32, %class.SkTSpan** %35, align 8
  %36 = icmp eq %class.SkTSpan* %32, null
  br i1 %36, label %48, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %32, i64 0, i32 4
  store %class.SkTSpan* %31, %class.SkTSpan** %38, align 8
  %39 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %32, i64 0, i32 7
  %40 = load double, double* %39, align 8
  %41 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %32, i64 0, i32 8
  %42 = load double, double* %41, align 8
  %43 = fcmp ogt double %40, %42
  br i1 %43, label %59, label %48

44:                                               ; preds = %29
  store %class.SkTSpan* %32, %class.SkTSpan** %2, align 8
  %45 = icmp eq %class.SkTSpan* %32, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %44
  %47 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %32, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %47, align 8
  br label %48

48:                                               ; preds = %46, %44, %37, %34
  %49 = load i32, i32* %6, align 8
  %50 = add nsw i32 %49, -1
  store i32 %50, i32* %6, align 8
  %51 = icmp slt i32 %49, 1
  br i1 %51, label %59, label %52

52:                                               ; preds = %48
  %53 = load i64, i64* %8, align 8
  %54 = bitcast %class.SkTSpan** %14 to i64*
  store i64 %53, i64* %54, align 8
  store %class.SkTSpan* %10, %class.SkTSpan** %7, align 8
  %55 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %10, i64 0, i32 14
  store i8 1, i8* %55, align 4
  br label %56

56:                                               ; preds = %52, %13
  %57 = add nsw i32 %11, -1
  %58 = icmp eq i32 %11, 0
  br i1 %58, label %59, label %9

59:                                               ; preds = %48, %37, %9, %56
  %60 = phi i1 [ false, %56 ], [ true, %9 ], [ false, %37 ], [ false, %48 ]
  ret i1 %60
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN7SkTSect14coincidentHasTEd(%class.SkTSect* nocapture readonly, double) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 3
  %4 = load %class.SkTSpan*, %class.SkTSpan** %3, align 8
  %5 = icmp eq %class.SkTSpan* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %2
  %7 = insertelement <2 x double> undef, double %1, i32 0
  %8 = shufflevector <2 x double> %7, <2 x double> undef, <2 x i32> zeroinitializer
  br label %13

9:                                                ; preds = %13
  %10 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %14, i64 0, i32 5
  %11 = load %class.SkTSpan*, %class.SkTSpan** %10, align 8
  %12 = icmp eq %class.SkTSpan* %11, null
  br i1 %12, label %23, label %13

13:                                               ; preds = %6, %9
  %14 = phi %class.SkTSpan* [ %11, %9 ], [ %4, %6 ]
  %15 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %14, i64 0, i32 7
  %16 = bitcast double* %15 to <2 x double>*
  %17 = load <2 x double>, <2 x double>* %16, align 8
  %18 = fsub <2 x double> %17, %8
  %19 = extractelement <2 x double> %18, i32 0
  %20 = extractelement <2 x double> %18, i32 1
  %21 = fmul double %19, %20
  %22 = fcmp ugt double %21, 0.000000e+00
  br i1 %22, label %9, label %23

23:                                               ; preds = %9, %13, %2
  %24 = phi i1 [ false, %2 ], [ true, %13 ], [ false, %9 ]
  ret i1 %24
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK7SkTSect9collapsedEv(%class.SkTSect* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %3 = load %class.SkTSpan*, %class.SkTSpan** %2, align 8
  %4 = icmp eq %class.SkTSpan* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1, %5
  %6 = phi %class.SkTSpan* [ %13, %5 ], [ %3, %1 ]
  %7 = phi i32 [ %11, %5 ], [ 0, %1 ]
  %8 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 10
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %7, %10
  %12 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 5
  %13 = load %class.SkTSpan*, %class.SkTSpan** %12, align 8
  %14 = icmp eq %class.SkTSpan* %13, null
  br i1 %14, label %15, label %5

15:                                               ; preds = %5, %1
  %16 = phi i32 [ 0, %1 ], [ %11, %5 ]
  ret i32 %16
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7SkTSect10hasBoundedEPK7SkTSpan(%class.SkTSect* nocapture readonly, %class.SkTSpan* readnone) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %4 = load %class.SkTSpan*, %class.SkTSpan** %3, align 8
  %5 = icmp eq %class.SkTSpan* %4, null
  br i1 %5, label %27, label %6

6:                                                ; preds = %2
  %7 = icmp eq %class.SkTSpan* %1, null
  br label %8

8:                                                ; preds = %6, %23
  %9 = phi %class.SkTSpan* [ %25, %23 ], [ %4, %6 ]
  %10 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %9, i64 0, i32 3
  %11 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %10, align 8
  %12 = icmp eq %struct.SkTSpanBounded* %11, null
  br i1 %12, label %23, label %17

13:                                               ; preds = %17
  %14 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %18, i64 0, i32 1
  %15 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %14, align 8
  %16 = icmp eq %struct.SkTSpanBounded* %15, null
  br i1 %16, label %23, label %17

17:                                               ; preds = %8, %13
  %18 = phi %struct.SkTSpanBounded* [ %15, %13 ], [ %11, %8 ]
  %19 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %18, i64 0, i32 0
  %20 = load %class.SkTSpan*, %class.SkTSpan** %19, align 8
  %21 = icmp eq %class.SkTSpan* %20, %1
  br i1 %21, label %22, label %13

22:                                               ; preds = %17
  br i1 %7, label %23, label %27

23:                                               ; preds = %13, %8, %22
  %24 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %9, i64 0, i32 5
  %25 = load %class.SkTSpan*, %class.SkTSpan** %24, align 8
  %26 = icmp eq %class.SkTSpan* %25, null
  br i1 %26, label %27, label %8

27:                                               ; preds = %23, %22, %2
  %28 = phi i1 [ false, %2 ], [ false, %23 ], [ true, %22 ]
  ret i1 %28
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSect10removeSpanEP7SkTSpan(%class.SkTSect* nocapture, %class.SkTSpan*) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 7
  %4 = load double, double* %3, align 8
  %5 = fcmp une double %4, 0.000000e+00
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 6
  store i8 1, i8* %7, align 4
  br label %8

8:                                                ; preds = %6, %2
  %9 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 8
  %10 = load double, double* %9, align 8
  %11 = fcmp oeq double %10, 1.000000e+00
  br i1 %11, label %12, label %14

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 7
  store i8 1, i8* %13, align 1
  br label %14

14:                                               ; preds = %8, %12
  %15 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 4
  %16 = load %class.SkTSpan*, %class.SkTSpan** %15, align 8
  %17 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 5
  %18 = load %class.SkTSpan*, %class.SkTSpan** %17, align 8
  %19 = icmp eq %class.SkTSpan* %16, null
  br i1 %19, label %30, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %16, i64 0, i32 5
  store %class.SkTSpan* %18, %class.SkTSpan** %21, align 8
  %22 = icmp eq %class.SkTSpan* %18, null
  br i1 %22, label %35, label %23

23:                                               ; preds = %20
  %24 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %18, i64 0, i32 4
  store %class.SkTSpan* %16, %class.SkTSpan** %24, align 8
  %25 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %18, i64 0, i32 7
  %26 = load double, double* %25, align 8
  %27 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %18, i64 0, i32 8
  %28 = load double, double* %27, align 8
  %29 = fcmp ogt double %26, %28
  br i1 %29, label %46, label %35

30:                                               ; preds = %14
  %31 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  store %class.SkTSpan* %18, %class.SkTSpan** %31, align 8
  %32 = icmp eq %class.SkTSpan* %18, null
  br i1 %32, label %35, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %18, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %34, align 8
  br label %35

35:                                               ; preds = %23, %20, %30, %33
  %36 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %37 = load i32, i32* %36, align 8
  %38 = add nsw i32 %37, -1
  store i32 %38, i32* %36, align 8
  %39 = icmp slt i32 %37, 1
  br i1 %39, label %46, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %42 = bitcast %class.SkTSpan** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %class.SkTSpan** %17 to i64*
  store i64 %43, i64* %44, align 8
  store %class.SkTSpan* %1, %class.SkTSpan** %41, align 8
  %45 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 14
  store i8 1, i8* %45, align 4
  br label %46

46:                                               ; preds = %40, %35, %23
  %47 = phi i1 [ false, %23 ], [ true, %40 ], [ false, %35 ]
  ret i1 %47
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %class.SkTSpan* @_ZN7SkTSect17findCoincidentRunEP7SkTSpanPS1_(%class.SkTSect* nocapture readnone, %class.SkTSpan*, %class.SkTSpan** nocapture) local_unnamed_addr #3 align 2 {
  br label %4

4:                                                ; preds = %30, %3
  %5 = phi %class.SkTSpan* [ null, %3 ], [ %26, %30 ]
  %6 = phi %class.SkTSpan* [ %1, %3 ], [ %32, %30 ]
  %7 = phi %class.SkTSpan* [ null, %3 ], [ %27, %30 ]
  %8 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 1, i32 2
  %9 = load i8, i8* %8, align 1, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 2, i32 2
  %13 = load i8, i8* %12, align 1, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %34, label %15

15:                                               ; preds = %11
  %16 = icmp eq %class.SkTSpan* %5, null
  %17 = select i1 %16, %class.SkTSpan* %6, %class.SkTSpan* %5
  br label %25

18:                                               ; preds = %4
  %19 = icmp eq %class.SkTSpan* %5, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %18
  %21 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 10
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %25, label %24

24:                                               ; preds = %20
  store %class.SkTSpan* %7, %class.SkTSpan** %2, align 8
  br label %37

25:                                               ; preds = %15, %18, %20
  %26 = phi %class.SkTSpan* [ %17, %15 ], [ %5, %20 ], [ null, %18 ]
  %27 = phi %class.SkTSpan* [ %6, %15 ], [ null, %20 ], [ null, %18 ]
  %28 = load %class.SkTSpan*, %class.SkTSpan** %2, align 8
  %29 = icmp eq %class.SkTSpan* %6, %28
  br i1 %29, label %37, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 5
  %32 = load %class.SkTSpan*, %class.SkTSpan** %31, align 8
  %33 = icmp eq %class.SkTSpan* %32, null
  br i1 %33, label %37, label %4

34:                                               ; preds = %11
  %35 = icmp eq %class.SkTSpan* %7, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %34
  store %class.SkTSpan* %7, %class.SkTSpan** %2, align 8
  br label %37

37:                                               ; preds = %30, %25, %36, %34, %24
  %38 = phi %class.SkTSpan* [ %5, %24 ], [ %5, %34 ], [ %5, %36 ], [ null, %30 ], [ %26, %25 ]
  ret %class.SkTSpan* %38
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkTSpan* @_ZN7SkTSect10addSplitAtEP7SkTSpand(%class.SkTSect*, %class.SkTSpan*, double) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %5 = load %class.SkTSpan*, %class.SkTSpan** %4, align 8
  %6 = icmp eq %class.SkTSpan* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %5, i64 0, i32 5
  %9 = bitcast %class.SkTSpan** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %class.SkTSpan** %4 to i64*
  store i64 %10, i64* %11, align 8
  br label %58

12:                                               ; preds = %3
  %13 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %14 = load %class.SkTCurve*, %class.SkTCurve** %13, align 8
  %15 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1032
  %16 = bitcast i8* %15 to i8**
  %17 = bitcast i8* %15 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 0, %18
  %20 = and i64 %19, 7
  %21 = or i64 %20, 160
  %22 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1040
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %24, %18
  %26 = icmp ugt i64 %21, %25
  br i1 %26, label %27, label %33

27:                                               ; preds = %12
  %28 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %29 = bitcast i8* %28 to %class.SkArenaAlloc*
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %29, i32 160, i32 8) #9
  %30 = load i64, i64* %17, align 8
  %31 = sub i64 0, %30
  %32 = and i64 %31, 7
  br label %33

33:                                               ; preds = %12, %27
  %34 = phi i64 [ %30, %27 ], [ %18, %12 ]
  %35 = phi i64 [ %32, %27 ], [ %20, %12 ]
  %36 = inttoptr i64 %34 to i8*
  %37 = getelementptr inbounds i8, i8* %36, i64 %35
  %38 = getelementptr inbounds i8, i8* %37, i64 160
  store i8* %38, i8** %16, align 8
  %39 = bitcast i8* %37 to %class.SkTSpan*
  %40 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %41 = bitcast i8* %40 to %class.SkArenaAlloc*
  %42 = getelementptr inbounds i8, i8* %37, i64 24
  %43 = bitcast i8* %42 to double*
  store double -1.000000e+00, double* %43, align 8
  %44 = getelementptr inbounds i8, i8* %37, i64 32
  store i8 0, i8* %44, align 8
  %45 = getelementptr inbounds i8, i8* %37, i64 8
  %46 = bitcast i8* %45 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %46, align 8
  %47 = getelementptr inbounds i8, i8* %37, i64 56
  %48 = bitcast i8* %47 to double*
  store double -1.000000e+00, double* %48, align 8
  %49 = getelementptr inbounds i8, i8* %37, i64 64
  store i8 0, i8* %49, align 8
  %50 = getelementptr inbounds i8, i8* %37, i64 40
  %51 = bitcast i8* %50 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %51, align 8
  %52 = bitcast %class.SkTCurve* %14 to %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)***
  %53 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)**, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*** %52, align 8
  %54 = getelementptr inbounds %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %53, i64 14
  %55 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %54, align 8
  %56 = tail call %class.SkTCurve* %55(%class.SkTCurve* %14, %class.SkArenaAlloc* dereferenceable(32) %41) #9
  %57 = bitcast i8* %37 to %class.SkTCurve**
  store %class.SkTCurve* %56, %class.SkTCurve** %57, align 8
  br label %58

58:                                               ; preds = %7, %33
  %59 = phi %class.SkTSpan* [ %5, %7 ], [ %39, %33 ]
  %60 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %59, i64 0, i32 3
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %60, align 8
  %61 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %59, i64 0, i32 11
  store i8 0, i8* %61, align 1
  %62 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %59, i64 0, i32 14
  store i8 0, i8* %62, align 4
  %63 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %64 = load i32, i32* %63, align 8
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %63, align 8
  %66 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1
  %67 = icmp eq %class.SkSTArenaAlloc* %66, null
  %68 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %69 = bitcast i8* %68 to %class.SkArenaAlloc*
  %70 = select i1 %67, %class.SkArenaAlloc* null, %class.SkArenaAlloc* %69
  %71 = tail call zeroext i1 @_ZN7SkTSpan7splitAtEPS_dP12SkArenaAlloc(%class.SkTSpan* %59, %class.SkTSpan* %1, double %2, %class.SkArenaAlloc* %70)
  %72 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %73 = load %class.SkTCurve*, %class.SkTCurve** %72, align 8
  %74 = tail call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* %59, %class.SkTCurve* dereferenceable(8) %73)
  %75 = load %class.SkTCurve*, %class.SkTCurve** %72, align 8
  %76 = tail call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* %1, %class.SkTCurve* dereferenceable(8) %75)
  ret %class.SkTSpan* %59
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK7SkTSect15validateBoundedEv(%class.SkTSect* nocapture) local_unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7SkTSect10intersectsEP7SkTSpanPS_S1_Pi(%class.SkTSect* nocapture, %class.SkTSpan*, %class.SkTSect* nocapture, %class.SkTSpan* nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = alloca %class.SkIntersections, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #9
  store i8 -86, i8* %6, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #9
  store i8 -86, i8* %7, align 1
  %9 = call i32 @_ZN7SkTSpan14hullsIntersectEPS_PbS1_(%class.SkTSpan* %1, %class.SkTSpan* %3, i8* nonnull %6, i8* nonnull %7)
  %10 = icmp sgt i32 %9, -1
  br i1 %10, label %11, label %60

11:                                               ; preds = %5
  %12 = icmp eq i32 %9, 2
  br i1 %12, label %13, label %59

13:                                               ; preds = %11
  %14 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 3
  %15 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %14, align 8
  %16 = icmp eq %struct.SkTSpanBounded* %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %15, i64 0, i32 1
  %19 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %18, align 8
  %20 = icmp eq %struct.SkTSpanBounded* %19, null
  br i1 %20, label %21, label %33

21:                                               ; preds = %17, %13
  %22 = load i8, i8* %6, align 1, !range !2
  %23 = icmp eq i8 %22, 0
  %24 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 7
  %25 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 8
  %26 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 8
  %27 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 7
  %28 = select i1 %23, double* %27, double* %25
  %29 = select i1 %23, double* %26, double* %24
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast double* %28 to i64*
  store i64 %31, i64* %32, align 8
  br label %33

33:                                               ; preds = %21, %17
  %34 = phi i32 [ 1, %17 ], [ 2, %21 ]
  %35 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 3
  %36 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %35, align 8
  %37 = icmp eq %struct.SkTSpanBounded* %36, null
  br i1 %37, label %46, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %36, i64 0, i32 1
  %40 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %39, align 8
  %41 = icmp eq %struct.SkTSpanBounded* %40, null
  br i1 %41, label %42, label %58

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %36, i64 0, i32 0
  %44 = load %class.SkTSpan*, %class.SkTSpan** %43, align 8
  %45 = icmp eq %class.SkTSpan* %44, %1
  br i1 %45, label %46, label %140

46:                                               ; preds = %33, %42
  %47 = load i8, i8* %7, align 1, !range !2
  %48 = icmp eq i8 %47, 0
  %49 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 8
  %50 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 7
  %51 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 7
  %52 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 8
  %53 = select i1 %48, double* %50, double* %52
  %54 = select i1 %48, double* %49, double* %51
  %55 = bitcast double* %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast double* %53 to i64*
  store i64 %56, i64* %57, align 8
  store i32 2, i32* %4, align 4
  br label %140

58:                                               ; preds = %38
  store i32 1, i32* %4, align 4
  br label %140

59:                                               ; preds = %11
  store i32 1, i32* %4, align 4
  br label %140

60:                                               ; preds = %5
  %61 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 13
  %62 = load i8, i8* %61, align 1, !range !2
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %118, label %64

64:                                               ; preds = %60
  %65 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 13
  %66 = load i8, i8* %65, align 1, !range !2
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %118, label %68

68:                                               ; preds = %64
  %69 = bitcast %class.SkIntersections* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %69) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %69, i8* align 8 bitcast (%class.SkIntersections* @__const._ZL11is_parallelI8SkTCurveEbRK7SkDLineRKT_.perpRayI to i8*), i64 464, i1 false)
  %70 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 8
  store i8 0, i8* %70, align 1
  %71 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 4, i64 0
  %72 = bitcast i8* %71 to i16*
  store i16 0, i16* %72, align 4
  %73 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 0, i64 448, i1 false) #9
  store i8 1, i8* %73, align 8
  %74 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 5
  store i8 0, i8* %74, align 2
  %75 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 3, i64 0
  %76 = bitcast i16* %75 to i32*
  store i32 0, i32* %76, align 8
  %77 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 6
  store i8 0, i8* %77, align 1
  %78 = call i32 @_ZN7SkTSect14linesIntersectEP7SkTSpanPS_S1_P15SkIntersections(%class.SkTSect* %0, %class.SkTSpan* %1, %class.SkTSect* %2, %class.SkTSpan* %3, %class.SkIntersections* nonnull %8)
  switch i32 %78, label %79 [
    i32 2, label %114
    i32 0, label %116
  ]

79:                                               ; preds = %68
  %80 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 7
  %81 = load double, double* %80, align 8
  %82 = fcmp une double %81, 0.000000e+00
  br i1 %82, label %85, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 6
  store i8 1, i8* %84, align 4
  br label %85

85:                                               ; preds = %83, %79
  %86 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 8
  %87 = load double, double* %86, align 8
  %88 = fcmp oeq double %87, 1.000000e+00
  br i1 %88, label %89, label %91

89:                                               ; preds = %85
  %90 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 7
  store i8 1, i8* %90, align 1
  br label %91

91:                                               ; preds = %85, %89
  %92 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 2, i64 0, i64 0
  %93 = bitcast double* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = bitcast double* %86 to i64*
  store i64 %94, i64* %95, align 8
  %96 = bitcast double* %80 to i64*
  store i64 %94, i64* %96, align 8
  %97 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 7
  %98 = load double, double* %97, align 8
  %99 = fcmp une double %98, 0.000000e+00
  br i1 %99, label %102, label %100

100:                                              ; preds = %91
  %101 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 6
  store i8 1, i8* %101, align 4
  br label %102

102:                                              ; preds = %100, %91
  %103 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 8
  %104 = load double, double* %103, align 8
  %105 = fcmp oeq double %104, 1.000000e+00
  br i1 %105, label %106, label %108

106:                                              ; preds = %102
  %107 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 7
  store i8 1, i8* %107, align 1
  br label %108

108:                                              ; preds = %102, %106
  %109 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 2, i64 1, i64 0
  %110 = bitcast double* %109 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = bitcast double* %103 to i64*
  store i64 %111, i64* %112, align 8
  %113 = bitcast double* %97 to i64*
  store i64 %111, i64* %113, align 8
  br label %114

114:                                              ; preds = %68, %108
  %115 = phi i32 [ 2, %108 ], [ 1, %68 ]
  store i32 %115, i32* %4, align 4
  br label %116

116:                                              ; preds = %114, %68
  %117 = phi i32 [ -1, %68 ], [ %115, %114 ]
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %69) #9
  br label %140

118:                                              ; preds = %64, %60
  %119 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 12
  %120 = load i8, i8* %119, align 2, !range !2
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %122, label %126

122:                                              ; preds = %118
  %123 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 12
  %124 = load i8, i8* %123, align 2, !range !2
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %139, label %126

126:                                              ; preds = %122, %118
  %127 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 0
  %128 = load %class.SkTCurve*, %class.SkTCurve** %127, align 8
  %129 = tail call i32 @_ZNK7SkTSpan16linearIntersectsERK8SkTCurve(%class.SkTSpan* %1, %class.SkTCurve* dereferenceable(8) %128) #9
  %130 = icmp slt i32 %129, 2
  br i1 %130, label %135, label %131

131:                                              ; preds = %126
  %132 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 0
  %133 = load %class.SkTCurve*, %class.SkTCurve** %132, align 8
  %134 = tail call i32 @_ZNK7SkTSpan16linearIntersectsERK8SkTCurve(%class.SkTSpan* %3, %class.SkTCurve* dereferenceable(8) %133) #9
  br label %135

135:                                              ; preds = %126, %131
  %136 = phi i32 [ %134, %131 ], [ %129, %126 ]
  %137 = icmp ne i32 %136, 0
  %138 = zext i1 %137 to i32
  store i32 %138, i32* %4, align 4
  br label %140

139:                                              ; preds = %122
  store i32 1, i32* %4, align 4
  br label %140

140:                                              ; preds = %59, %58, %46, %42, %139, %135, %116
  %141 = phi i32 [ %117, %116 ], [ %138, %135 ], [ 1, %139 ], [ 0, %42 ], [ %34, %58 ], [ %34, %46 ], [ %9, %59 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #9
  ret i32 %141
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7SkTSect14linesIntersectEP7SkTSpanPS_S1_P15SkIntersections(%class.SkTSect* nocapture readonly, %class.SkTSpan* nocapture readonly, %class.SkTSect* nocapture readonly, %class.SkTSpan* nocapture readonly, %class.SkIntersections*) local_unnamed_addr #0 align 2 {
  %6 = alloca %class.SkIntersections, align 8
  %7 = alloca %class.SkIntersections, align 8
  %8 = alloca %struct.SkDLine, align 16
  %9 = alloca %struct.SkDLine, align 16
  %10 = alloca %class.SkTCoincident, align 16
  %11 = alloca %class.SkTCoincident, align 16
  %12 = alloca %class.SkTCoincident, align 16
  %13 = alloca %class.SkTCoincident, align 16
  %14 = alloca %class.SkTCoincident, align 16
  %15 = alloca <2 x double>, align 16
  %16 = bitcast <2 x double>* %15 to %struct.SkDPoint*
  %17 = bitcast %class.SkIntersections* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %17) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* align 8 bitcast (%class.SkIntersections* @__const._ZL11is_parallelI8SkTCurveEbRK7SkDLineRKT_.perpRayI to i8*), i64 464, i1 false)
  %18 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %6, i64 0, i32 8
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %6, i64 0, i32 4, i64 0
  %20 = bitcast i8* %19 to i16*
  store i16 0, i16* %20, align 4
  %21 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %6, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 448, i1 false) #9
  store i8 1, i8* %21, align 8
  %22 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %6, i64 0, i32 5
  store i8 0, i8* %22, align 2
  %23 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %6, i64 0, i32 3, i64 0
  %24 = bitcast i16* %23 to i32*
  store i32 0, i32* %24, align 8
  %25 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %6, i64 0, i32 6
  store i8 0, i8* %25, align 1
  %26 = bitcast %class.SkIntersections* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %26) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* align 8 bitcast (%class.SkIntersections* @__const._ZL11is_parallelI8SkTCurveEbRK7SkDLineRKT_.perpRayI to i8*), i64 464, i1 false)
  %27 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 8
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 4, i64 0
  %29 = bitcast i8* %28 to i16*
  store i16 0, i16* %29, align 4
  %30 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 0, i64 448, i1 false) #9
  store i8 1, i8* %30, align 8
  %31 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 5
  store i8 0, i8* %31, align 2
  %32 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 3, i64 0
  %33 = bitcast i16* %32 to i32*
  store i32 0, i32* %33, align 8
  %34 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 6
  store i8 0, i8* %34, align 1
  %35 = bitcast %struct.SkDLine* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #9
  %36 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %8, i64 0, i32 0, i64 0, i32 0
  %37 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %8, i64 0, i32 0, i64 0, i32 1
  %38 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 0
  %39 = bitcast %struct.SkDLine* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %39, i8 -1, i64 32, i1 false)
  %40 = load %class.SkTCurve*, %class.SkTCurve** %38, align 8
  %41 = bitcast %class.SkTCurve* %40 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %42 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %41, align 8
  %43 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %42, i64 3
  %44 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %43, align 8
  %45 = tail call dereferenceable(16) %struct.SkDPoint* %44(%class.SkTCurve* %40, i32 0) #9
  %46 = bitcast %struct.SkDPoint* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %35, i8* align 8 %46, i64 16, i1 false)
  %47 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %8, i64 0, i32 0, i64 1
  %48 = load %class.SkTCurve*, %class.SkTCurve** %38, align 8
  %49 = bitcast %class.SkTCurve* %48 to i32 (%class.SkTCurve*)***
  %50 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %49, align 8
  %51 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %50, i64 18
  %52 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %51, align 8
  %53 = tail call i32 %52(%class.SkTCurve* %48) #9
  %54 = bitcast %class.SkTCurve* %48 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %55 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %54, align 8
  %56 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %55, i64 3
  %57 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %56, align 8
  %58 = tail call dereferenceable(16) %struct.SkDPoint* %57(%class.SkTCurve* %48, i32 %53) #9
  %59 = bitcast %struct.SkDPoint* %47 to i8*
  %60 = bitcast %struct.SkDPoint* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %59, i8* align 8 %60, i64 16, i1 false)
  %61 = bitcast %struct.SkDLine* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %61) #9
  %62 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %9, i64 0, i32 0, i64 0, i32 0
  %63 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %9, i64 0, i32 0, i64 0, i32 1
  %64 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 0
  %65 = bitcast %struct.SkDLine* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %65, i8 -1, i64 32, i1 false)
  %66 = load %class.SkTCurve*, %class.SkTCurve** %64, align 8
  %67 = bitcast %class.SkTCurve* %66 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %68 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %67, align 8
  %69 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %68, i64 3
  %70 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %69, align 8
  %71 = tail call dereferenceable(16) %struct.SkDPoint* %70(%class.SkTCurve* %66, i32 0) #9
  %72 = bitcast %struct.SkDPoint* %71 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %61, i8* align 8 %72, i64 16, i1 false)
  %73 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %9, i64 0, i32 0, i64 1
  %74 = load %class.SkTCurve*, %class.SkTCurve** %64, align 8
  %75 = bitcast %class.SkTCurve* %74 to i32 (%class.SkTCurve*)***
  %76 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %75, align 8
  %77 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %76, i64 18
  %78 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %77, align 8
  %79 = tail call i32 %78(%class.SkTCurve* %74) #9
  %80 = bitcast %class.SkTCurve* %74 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %81 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %80, align 8
  %82 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %81, i64 3
  %83 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %82, align 8
  %84 = tail call dereferenceable(16) %struct.SkDPoint* %83(%class.SkTCurve* %74, i32 %79) #9
  %85 = bitcast %struct.SkDPoint* %73 to i8*
  %86 = bitcast %struct.SkDPoint* %84 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %85, i8* align 8 %86, i64 16, i1 false)
  %87 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 0
  %88 = load %class.SkTCurve*, %class.SkTCurve** %87, align 8
  %89 = bitcast %class.SkTCurve* %88 to i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)***
  %90 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)**, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*** %89, align 8
  %91 = getelementptr inbounds i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %90, i64 12
  %92 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %91, align 8
  %93 = call i32 %92(%class.SkTCurve* %88, %class.SkIntersections* nonnull %6, %struct.SkDLine* nonnull dereferenceable(32) %8) #9
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %629, label %95

95:                                               ; preds = %5
  %96 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %97 = load %class.SkTCurve*, %class.SkTCurve** %96, align 8
  %98 = bitcast %class.SkTCurve* %97 to i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)***
  %99 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)**, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*** %98, align 8
  %100 = getelementptr inbounds i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %99, i64 12
  %101 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %100, align 8
  %102 = call i32 %101(%class.SkTCurve* %97, %class.SkIntersections* nonnull %7, %struct.SkDLine* nonnull dereferenceable(32) %9) #9
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %629, label %104

104:                                              ; preds = %95
  %105 = load i8, i8* %22, align 2
  %106 = icmp ugt i8 %105, 1
  br i1 %106, label %107, label %128

107:                                              ; preds = %104
  %108 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %8, i64 0, i32 0, i64 0
  br label %109

109:                                              ; preds = %107, %109
  %110 = phi i64 [ 0, %107 ], [ %119, %109 ]
  %111 = phi i32 [ 0, %107 ], [ %118, %109 ]
  %112 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %6, i64 0, i32 0, i64 %110
  %113 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %112, %struct.SkDPoint* nonnull dereferenceable(16) %108)
  %114 = zext i1 %113 to i32
  %115 = add nsw i32 %111, %114
  %116 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %112, %struct.SkDPoint* dereferenceable(16) %47)
  %117 = zext i1 %116 to i32
  %118 = add nsw i32 %115, %117
  %119 = add nuw nsw i64 %110, 1
  %120 = load i8, i8* %22, align 2
  %121 = zext i8 %120 to i64
  %122 = icmp ult i64 %119, %121
  br i1 %122, label %109, label %123

123:                                              ; preds = %109
  %124 = icmp eq i32 %118, 2
  br i1 %124, label %629, label %125

125:                                              ; preds = %123
  %126 = load %class.SkTCurve*, %class.SkTCurve** %87, align 8
  %127 = call fastcc zeroext i1 @_ZL11is_parallelI8SkTCurveEbRK7SkDLineRKT_(%struct.SkDLine* nonnull dereferenceable(32) %8, %class.SkTCurve* dereferenceable(8) %126)
  br i1 %127, label %629, label %128

128:                                              ; preds = %125, %104
  %129 = load i8, i8* %31, align 2
  %130 = icmp ugt i8 %129, 1
  br i1 %130, label %131, label %152

131:                                              ; preds = %128
  %132 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %9, i64 0, i32 0, i64 0
  br label %133

133:                                              ; preds = %131, %133
  %134 = phi i64 [ 0, %131 ], [ %143, %133 ]
  %135 = phi i32 [ 0, %131 ], [ %142, %133 ]
  %136 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 0, i64 %134
  %137 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %136, %struct.SkDPoint* nonnull dereferenceable(16) %132)
  %138 = zext i1 %137 to i32
  %139 = add nsw i32 %135, %138
  %140 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %136, %struct.SkDPoint* dereferenceable(16) %73)
  %141 = zext i1 %140 to i32
  %142 = add nsw i32 %139, %141
  %143 = add nuw nsw i64 %134, 1
  %144 = load i8, i8* %31, align 2
  %145 = zext i8 %144 to i64
  %146 = icmp ult i64 %143, %145
  br i1 %146, label %133, label %147

147:                                              ; preds = %133
  %148 = icmp eq i32 %142, 2
  br i1 %148, label %629, label %149

149:                                              ; preds = %147
  %150 = load %class.SkTCurve*, %class.SkTCurve** %96, align 8
  %151 = call fastcc zeroext i1 @_ZL11is_parallelI8SkTCurveEbRK7SkDLineRKT_(%struct.SkDLine* nonnull dereferenceable(32) %9, %class.SkTCurve* dereferenceable(8) %150)
  br i1 %151, label %629, label %152

152:                                              ; preds = %149, %128
  %153 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 7
  %154 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 8
  %155 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 7
  %156 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %3, i64 0, i32 8
  %157 = bitcast double* %153 to <2 x double>*
  %158 = bitcast double* %155 to <2 x double>*
  %159 = bitcast %struct.SkDLine* %8 to <2 x double>*
  %160 = bitcast %struct.SkDPoint* %47 to <2 x double>*
  %161 = bitcast %struct.SkDLine* %9 to <2 x double>*
  %162 = bitcast %struct.SkDPoint* %73 to <2 x double>*
  br label %163

163:                                              ; preds = %327, %152
  %164 = phi double [ 0x7FEFFFFFFFFFFFFF, %152 ], [ %293, %327 ]
  %165 = phi i32 [ 0, %152 ], [ %296, %327 ]
  %166 = load i8, i8* %31, align 2
  %167 = icmp eq i8 %166, 0
  br i1 %167, label %357, label %168

168:                                              ; preds = %163
  %169 = load double, double* %153, align 8
  %170 = load double, double* %154, align 8
  %171 = fcmp ugt double %169, %170
  %172 = load i8, i8* %22, align 2
  %173 = icmp eq i8 %172, 0
  %174 = zext i8 %166 to i64
  %175 = zext i8 %172 to i64
  br label %178

176:                                              ; preds = %246
  %177 = fcmp oeq double %249, 0x7FEFFFFFFFFFFFFF
  br i1 %177, label %357, label %252

178:                                              ; preds = %168, %246
  %179 = phi i64 [ 0, %168 ], [ %250, %246 ]
  %180 = phi double [ 0x7FEFFFFFFFFFFFFF, %168 ], [ %249, %246 ]
  %181 = phi i32 [ 0, %168 ], [ %248, %246 ]
  %182 = phi i32 [ 0, %168 ], [ %247, %246 ]
  %183 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 2, i64 0, i64 %179
  %184 = load double, double* %183, align 8
  br i1 %171, label %192, label %185

185:                                              ; preds = %178
  %186 = fsub double %169, %184
  %187 = fcmp uge double %186, 0x3EE0000000000000
  %188 = fsub double %184, %170
  %189 = fcmp uge double %188, 0x3EE0000000000000
  %190 = or i1 %189, %187
  %191 = or i1 %190, %173
  br i1 %191, label %246, label %199

192:                                              ; preds = %178
  %193 = fsub double %184, %169
  %194 = fcmp uge double %193, 0x3EE0000000000000
  %195 = fsub double %170, %184
  %196 = fcmp uge double %195, 0x3EE0000000000000
  %197 = or i1 %196, %194
  %198 = or i1 %197, %173
  br i1 %198, label %246, label %199

199:                                              ; preds = %192, %185
  %200 = load double, double* %155, align 8
  %201 = load double, double* %156, align 8
  %202 = fcmp ugt double %200, %201
  %203 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %6, i64 0, i32 0, i64 %179, i32 0
  %204 = trunc i64 %179 to i32
  %205 = bitcast double* %203 to <2 x double>*
  br label %206

206:                                              ; preds = %240, %199
  %207 = phi i64 [ 0, %199 ], [ %244, %240 ]
  %208 = phi double [ %180, %199 ], [ %243, %240 ]
  %209 = phi i32 [ %181, %199 ], [ %242, %240 ]
  %210 = phi i32 [ %182, %199 ], [ %241, %240 ]
  %211 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %6, i64 0, i32 2, i64 0, i64 %207
  %212 = load double, double* %211, align 8
  br i1 %202, label %219, label %213

213:                                              ; preds = %206
  %214 = fsub double %200, %212
  %215 = fcmp olt double %214, 0x3EE0000000000000
  %216 = fsub double %212, %201
  %217 = fcmp olt double %216, 0x3EE0000000000000
  %218 = and i1 %215, %217
  br i1 %218, label %225, label %240

219:                                              ; preds = %206
  %220 = fsub double %212, %200
  %221 = fcmp olt double %220, 0x3EE0000000000000
  %222 = fsub double %201, %212
  %223 = fcmp olt double %222, 0x3EE0000000000000
  %224 = and i1 %221, %223
  br i1 %224, label %225, label %240

225:                                              ; preds = %219, %213
  %226 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 0, i64 %207, i32 0
  %227 = load <2 x double>, <2 x double>* %205, align 8
  %228 = bitcast double* %226 to <2 x double>*
  %229 = load <2 x double>, <2 x double>* %228, align 8
  %230 = fsub <2 x double> %227, %229
  %231 = fmul <2 x double> %230, %230
  %232 = extractelement <2 x double> %231, i32 0
  %233 = extractelement <2 x double> %231, i32 1
  %234 = fadd double %232, %233
  %235 = fcmp ogt double %208, %234
  %236 = trunc i64 %207 to i32
  %237 = select i1 %235, i32 %236, i32 %210
  %238 = select i1 %235, i32 %204, i32 %209
  %239 = select i1 %235, double %234, double %208
  br label %240

240:                                              ; preds = %219, %213, %225
  %241 = phi i32 [ %237, %225 ], [ %210, %213 ], [ %210, %219 ]
  %242 = phi i32 [ %238, %225 ], [ %209, %213 ], [ %209, %219 ]
  %243 = phi double [ %239, %225 ], [ %208, %213 ], [ %208, %219 ]
  %244 = add nuw nsw i64 %207, 1
  %245 = icmp eq i64 %244, %175
  br i1 %245, label %246, label %206

246:                                              ; preds = %240, %192, %185
  %247 = phi i32 [ %182, %185 ], [ %182, %192 ], [ %241, %240 ]
  %248 = phi i32 [ %181, %185 ], [ %181, %192 ], [ %242, %240 ]
  %249 = phi double [ %180, %185 ], [ %180, %192 ], [ %243, %240 ]
  %250 = add nuw nsw i64 %179, 1
  %251 = icmp ult i64 %250, %174
  br i1 %251, label %178, label %176

252:                                              ; preds = %176
  %253 = sext i32 %247 to i64
  %254 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %6, i64 0, i32 0, i64 %253
  %255 = sext i32 %248 to i64
  %256 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 0, i64 %255
  %257 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 2, i64 0, i64 %255
  %258 = load double, double* %257, align 8
  %259 = load <2 x double>, <2 x double>* %157, align 8
  %260 = insertelement <2 x double> undef, double %258, i32 0
  %261 = shufflevector <2 x double> %260, <2 x double> undef, <2 x i32> zeroinitializer
  %262 = fsub <2 x double> %259, %261
  %263 = extractelement <2 x double> %262, i32 0
  %264 = extractelement <2 x double> %262, i32 1
  %265 = fmul double %263, %264
  %266 = fcmp ugt double %265, 0.000000e+00
  br i1 %266, label %284, label %267

267:                                              ; preds = %252
  %268 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %6, i64 0, i32 2, i64 0, i64 %253
  %269 = load double, double* %268, align 8
  %270 = load <2 x double>, <2 x double>* %158, align 8
  %271 = insertelement <2 x double> undef, double %269, i32 0
  %272 = shufflevector <2 x double> %271, <2 x double> undef, <2 x i32> zeroinitializer
  %273 = fsub <2 x double> %270, %272
  %274 = extractelement <2 x double> %273, i32 0
  %275 = extractelement <2 x double> %273, i32 1
  %276 = fmul double %274, %275
  %277 = fcmp ugt double %276, 0.000000e+00
  br i1 %277, label %284, label %278

278:                                              ; preds = %267
  %279 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %254, %struct.SkDPoint* dereferenceable(16) %256)
  br i1 %279, label %280, label %284

280:                                              ; preds = %278
  call void @_ZN15SkIntersections5mergeERKS_iS1_i(%class.SkIntersections* %4, %class.SkIntersections* nonnull dereferenceable(464) %7, i32 %248, %class.SkIntersections* nonnull dereferenceable(464) %6, i32 %247) #9
  %281 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %4, i64 0, i32 5
  %282 = load i8, i8* %281, align 2
  %283 = zext i8 %282 to i32
  br label %629

284:                                              ; preds = %267, %252, %278
  %285 = bitcast %struct.SkDPoint* %254 to <2 x double>*
  %286 = load <2 x double>, <2 x double>* %285, align 8
  %287 = bitcast %struct.SkDPoint* %256 to <2 x double>*
  %288 = load <2 x double>, <2 x double>* %287, align 8
  %289 = fsub <2 x double> %286, %288
  %290 = fmul <2 x double> %289, %289
  %291 = extractelement <2 x double> %290, i32 0
  %292 = extractelement <2 x double> %290, i32 1
  %293 = fadd double %291, %292
  %294 = fcmp olt double %164, %293
  br i1 %294, label %629, label %295

295:                                              ; preds = %284
  %296 = add nuw nsw i32 %165, 1
  %297 = icmp eq i32 %165, 5
  br i1 %297, label %629, label %298

298:                                              ; preds = %295
  %299 = load double, double* %257, align 8
  %300 = load %class.SkTCurve*, %class.SkTCurve** %96, align 8
  %301 = bitcast %class.SkTCurve* %300 to { double, double } (%class.SkTCurve*, double)***
  %302 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %301, align 8
  %303 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %302, i64 19
  %304 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %303, align 8
  %305 = call { double, double } %304(%class.SkTCurve* %300, double %299) #9
  %306 = extractvalue { double, double } %305, 0
  %307 = extractvalue { double, double } %305, 1
  store double %306, double* %36, align 16
  store double %307, double* %37, align 8
  %308 = load %class.SkTCurve*, %class.SkTCurve** %96, align 8
  %309 = bitcast %class.SkTCurve* %308 to { double, double } (%class.SkTCurve*, double)***
  %310 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %309, align 8
  %311 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %310, i64 7
  %312 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %311, align 8
  %313 = call { double, double } %312(%class.SkTCurve* %308, double %299) #9
  %314 = extractvalue { double, double } %313, 0
  %315 = extractvalue { double, double } %313, 1
  %316 = load <2 x double>, <2 x double>* %159, align 16
  %317 = insertelement <2 x double> undef, double %314, i32 0
  %318 = insertelement <2 x double> %317, double %315, i32 1
  %319 = fadd <2 x double> %316, %318
  store <2 x double> %319, <2 x double>* %160, align 16
  %320 = load %class.SkTCurve*, %class.SkTCurve** %87, align 8
  %321 = bitcast %class.SkTCurve* %320 to i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)***
  %322 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)**, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*** %321, align 8
  %323 = getelementptr inbounds i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %322, i64 12
  %324 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %323, align 8
  %325 = call i32 %324(%class.SkTCurve* %320, %class.SkIntersections* nonnull %6, %struct.SkDLine* nonnull dereferenceable(32) %8) #9
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %357, label %327

327:                                              ; preds = %298
  %328 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %6, i64 0, i32 2, i64 0, i64 %253
  %329 = load double, double* %328, align 8
  %330 = load %class.SkTCurve*, %class.SkTCurve** %87, align 8
  %331 = bitcast %class.SkTCurve* %330 to { double, double } (%class.SkTCurve*, double)***
  %332 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %331, align 8
  %333 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %332, i64 19
  %334 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %333, align 8
  %335 = call { double, double } %334(%class.SkTCurve* %330, double %329) #9
  %336 = extractvalue { double, double } %335, 0
  %337 = extractvalue { double, double } %335, 1
  store double %336, double* %62, align 16
  store double %337, double* %63, align 8
  %338 = load %class.SkTCurve*, %class.SkTCurve** %87, align 8
  %339 = bitcast %class.SkTCurve* %338 to { double, double } (%class.SkTCurve*, double)***
  %340 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %339, align 8
  %341 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %340, i64 7
  %342 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %341, align 8
  %343 = call { double, double } %342(%class.SkTCurve* %338, double %329) #9
  %344 = extractvalue { double, double } %343, 0
  %345 = extractvalue { double, double } %343, 1
  %346 = load <2 x double>, <2 x double>* %161, align 16
  %347 = insertelement <2 x double> undef, double %344, i32 0
  %348 = insertelement <2 x double> %347, double %345, i32 1
  %349 = fadd <2 x double> %346, %348
  store <2 x double> %349, <2 x double>* %162, align 16
  %350 = load %class.SkTCurve*, %class.SkTCurve** %96, align 8
  %351 = bitcast %class.SkTCurve* %350 to i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)***
  %352 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)**, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*** %351, align 8
  %353 = getelementptr inbounds i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %352, i64 12
  %354 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %353, align 8
  %355 = call i32 %354(%class.SkTCurve* %350, %class.SkIntersections* nonnull %7, %struct.SkDLine* nonnull dereferenceable(32) %9) #9
  %356 = icmp eq i32 %355, 0
  br i1 %356, label %357, label %163

357:                                              ; preds = %163, %327, %176, %298
  %358 = bitcast %class.SkTCoincident* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %358) #9
  %359 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %10, i64 0, i32 1
  %360 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %10, i64 0, i32 2
  %361 = bitcast i8* %360 to i64*
  store i64 -6148914691236517376, i64* %361, align 8
  store double -1.000000e+00, double* %359, align 16
  %362 = bitcast %class.SkTCoincident* %10 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %362, align 16
  %363 = bitcast %class.SkTCoincident* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %363) #9
  %364 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %11, i64 0, i32 1
  %365 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %11, i64 0, i32 2
  %366 = bitcast i8* %365 to i64*
  store i64 -6148914691236517376, i64* %366, align 8
  store double -1.000000e+00, double* %364, align 16
  %367 = bitcast %class.SkTCoincident* %11 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %367, align 16
  %368 = load %class.SkTCurve*, %class.SkTCurve** %87, align 8
  %369 = load double, double* %155, align 8
  %370 = load %class.SkTCurve*, %class.SkTCurve** %64, align 8
  %371 = bitcast %class.SkTCurve* %370 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %372 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %371, align 8
  %373 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %372, i64 3
  %374 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %373, align 8
  %375 = call dereferenceable(16) %struct.SkDPoint* %374(%class.SkTCurve* %370, i32 0) #9
  %376 = load %class.SkTCurve*, %class.SkTCurve** %96, align 8
  call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* nonnull %10, %class.SkTCurve* dereferenceable(8) %368, double %369, %struct.SkDPoint* dereferenceable(16) %375, %class.SkTCurve* dereferenceable(8) %376)
  %377 = load %class.SkTCurve*, %class.SkTCurve** %87, align 8
  %378 = load double, double* %156, align 8
  %379 = load %class.SkTCurve*, %class.SkTCurve** %64, align 8
  %380 = bitcast %class.SkTCurve* %379 to i32 (%class.SkTCurve*)***
  %381 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %380, align 8
  %382 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %381, i64 18
  %383 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %382, align 8
  %384 = call i32 %383(%class.SkTCurve* %379) #9
  %385 = bitcast %class.SkTCurve* %379 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %386 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %385, align 8
  %387 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %386, i64 3
  %388 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %387, align 8
  %389 = call dereferenceable(16) %struct.SkDPoint* %388(%class.SkTCurve* %379, i32 %384) #9
  %390 = load %class.SkTCurve*, %class.SkTCurve** %96, align 8
  call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* nonnull %11, %class.SkTCurve* dereferenceable(8) %377, double %378, %struct.SkDPoint* dereferenceable(16) %389, %class.SkTCurve* dereferenceable(8) %390)
  %391 = load double, double* %359, align 16
  %392 = load double, double* %364, align 16
  %393 = fcmp ogt double %391, %392
  %394 = select i1 %393, double %392, double %391
  %395 = select i1 %393, double %391, double %392
  %396 = load double, double* %153, align 8
  %397 = fcmp olt double %394, %396
  %398 = select i1 %397, double %396, double %394
  %399 = load double, double* %154, align 8
  %400 = fcmp olt double %399, %395
  %401 = select i1 %400, double %399, double %395
  %402 = fcmp ogt double %398, %401
  br i1 %402, label %627, label %403

403:                                              ; preds = %357
  %404 = fcmp oeq double %398, %396
  br i1 %404, label %405, label %430

405:                                              ; preds = %403
  %406 = bitcast %class.SkTCoincident* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %406) #9
  %407 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %12, i64 0, i32 1
  %408 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %12, i64 0, i32 2
  %409 = bitcast i8* %408 to i64*
  store i64 -6148914691236517376, i64* %409, align 8
  store double -1.000000e+00, double* %407, align 16
  %410 = bitcast %class.SkTCoincident* %12 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %410, align 16
  %411 = load %class.SkTCurve*, %class.SkTCurve** %96, align 8
  %412 = load %class.SkTCurve*, %class.SkTCurve** %38, align 8
  %413 = bitcast %class.SkTCurve* %412 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %414 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %413, align 8
  %415 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %414, i64 3
  %416 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %415, align 8
  %417 = call dereferenceable(16) %struct.SkDPoint* %416(%class.SkTCurve* %412, i32 0) #9
  %418 = load %class.SkTCurve*, %class.SkTCurve** %87, align 8
  call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* nonnull %12, %class.SkTCurve* dereferenceable(8) %411, double %396, %struct.SkDPoint* dereferenceable(16) %417, %class.SkTCurve* dereferenceable(8) %418)
  %419 = load %class.SkTCurve*, %class.SkTCurve** %38, align 8
  %420 = bitcast %class.SkTCurve* %419 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %421 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %420, align 8
  %422 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %421, i64 3
  %423 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %422, align 8
  %424 = call dereferenceable(16) %struct.SkDPoint* %423(%class.SkTCurve* %419, i32 0) #9
  %425 = bitcast %struct.SkDPoint* %424 to <2 x double>*
  %426 = load <2 x double>, <2 x double>* %425, align 8
  %427 = bitcast %class.SkTCoincident* %12 to <2 x double>*
  %428 = load <2 x double>, <2 x double>* %427, align 16
  %429 = fsub <2 x double> %426, %428
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %406) #9
  br label %459

430:                                              ; preds = %403
  %431 = load %class.SkTCurve*, %class.SkTCurve** %64, align 8
  br i1 %393, label %432, label %448

432:                                              ; preds = %430
  %433 = bitcast %class.SkTCurve* %431 to i32 (%class.SkTCurve*)***
  %434 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %433, align 8
  %435 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %434, i64 18
  %436 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %435, align 8
  %437 = call i32 %436(%class.SkTCurve* %431) #9
  %438 = bitcast %class.SkTCurve* %431 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %439 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %438, align 8
  %440 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %439, i64 3
  %441 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %440, align 8
  %442 = call dereferenceable(16) %struct.SkDPoint* %441(%class.SkTCurve* %431, i32 %437) #9
  %443 = bitcast %class.SkTCoincident* %11 to <2 x double>*
  %444 = load <2 x double>, <2 x double>* %443, align 16
  %445 = bitcast %struct.SkDPoint* %442 to <2 x double>*
  %446 = load <2 x double>, <2 x double>* %445, align 8
  %447 = fsub <2 x double> %444, %446
  br label %459

448:                                              ; preds = %430
  %449 = bitcast %class.SkTCurve* %431 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %450 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %449, align 8
  %451 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %450, i64 3
  %452 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %451, align 8
  %453 = call dereferenceable(16) %struct.SkDPoint* %452(%class.SkTCurve* %431, i32 0) #9
  %454 = bitcast %class.SkTCoincident* %10 to <2 x double>*
  %455 = load <2 x double>, <2 x double>* %454, align 16
  %456 = bitcast %struct.SkDPoint* %453 to <2 x double>*
  %457 = load <2 x double>, <2 x double>* %456, align 8
  %458 = fsub <2 x double> %455, %457
  br label %459

459:                                              ; preds = %432, %448, %405
  %460 = phi <2 x double> [ %429, %405 ], [ %447, %432 ], [ %458, %448 ]
  %461 = load double, double* %154, align 8
  %462 = fcmp oeq double %401, %461
  br i1 %462, label %463, label %498

463:                                              ; preds = %459
  %464 = bitcast %class.SkTCoincident* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %464) #9
  %465 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %13, i64 0, i32 1
  %466 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %13, i64 0, i32 2
  %467 = bitcast i8* %466 to i64*
  store i64 -6148914691236517376, i64* %467, align 8
  store double -1.000000e+00, double* %465, align 16
  %468 = bitcast %class.SkTCoincident* %13 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %468, align 16
  %469 = load %class.SkTCurve*, %class.SkTCurve** %96, align 8
  %470 = load %class.SkTCurve*, %class.SkTCurve** %38, align 8
  %471 = bitcast %class.SkTCurve* %470 to i32 (%class.SkTCurve*)***
  %472 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %471, align 8
  %473 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %472, i64 18
  %474 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %473, align 8
  %475 = call i32 %474(%class.SkTCurve* %470) #9
  %476 = bitcast %class.SkTCurve* %470 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %477 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %476, align 8
  %478 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %477, i64 3
  %479 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %478, align 8
  %480 = call dereferenceable(16) %struct.SkDPoint* %479(%class.SkTCurve* %470, i32 %475) #9
  %481 = load %class.SkTCurve*, %class.SkTCurve** %87, align 8
  call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* nonnull %13, %class.SkTCurve* dereferenceable(8) %469, double %461, %struct.SkDPoint* dereferenceable(16) %480, %class.SkTCurve* dereferenceable(8) %481)
  %482 = load %class.SkTCurve*, %class.SkTCurve** %38, align 8
  %483 = bitcast %class.SkTCurve* %482 to i32 (%class.SkTCurve*)***
  %484 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %483, align 8
  %485 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %484, i64 18
  %486 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %485, align 8
  %487 = call i32 %486(%class.SkTCurve* %482) #9
  %488 = bitcast %class.SkTCurve* %482 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %489 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %488, align 8
  %490 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %489, i64 3
  %491 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %490, align 8
  %492 = call dereferenceable(16) %struct.SkDPoint* %491(%class.SkTCurve* %482, i32 %487) #9
  %493 = bitcast %struct.SkDPoint* %492 to <2 x double>*
  %494 = load <2 x double>, <2 x double>* %493, align 8
  %495 = bitcast %class.SkTCoincident* %13 to <2 x double>*
  %496 = load <2 x double>, <2 x double>* %495, align 16
  %497 = fsub <2 x double> %494, %496
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %464) #9
  br label %527

498:                                              ; preds = %459
  %499 = load %class.SkTCurve*, %class.SkTCurve** %64, align 8
  br i1 %393, label %500, label %511

500:                                              ; preds = %498
  %501 = bitcast %class.SkTCurve* %499 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %502 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %501, align 8
  %503 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %502, i64 3
  %504 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %503, align 8
  %505 = call dereferenceable(16) %struct.SkDPoint* %504(%class.SkTCurve* %499, i32 0) #9
  %506 = bitcast %class.SkTCoincident* %10 to <2 x double>*
  %507 = load <2 x double>, <2 x double>* %506, align 16
  %508 = bitcast %struct.SkDPoint* %505 to <2 x double>*
  %509 = load <2 x double>, <2 x double>* %508, align 8
  %510 = fsub <2 x double> %507, %509
  br label %527

511:                                              ; preds = %498
  %512 = bitcast %class.SkTCurve* %499 to i32 (%class.SkTCurve*)***
  %513 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %512, align 8
  %514 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %513, i64 18
  %515 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %514, align 8
  %516 = call i32 %515(%class.SkTCurve* %499) #9
  %517 = bitcast %class.SkTCurve* %499 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %518 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %517, align 8
  %519 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %518, i64 3
  %520 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %519, align 8
  %521 = call dereferenceable(16) %struct.SkDPoint* %520(%class.SkTCurve* %499, i32 %516) #9
  %522 = bitcast %class.SkTCoincident* %11 to <2 x double>*
  %523 = load <2 x double>, <2 x double>* %522, align 16
  %524 = bitcast %struct.SkDPoint* %521 to <2 x double>*
  %525 = load <2 x double>, <2 x double>* %524, align 8
  %526 = fsub <2 x double> %523, %525
  br label %527

527:                                              ; preds = %500, %511, %463
  %528 = phi <2 x double> [ %497, %463 ], [ %510, %500 ], [ %526, %511 ]
  %529 = extractelement <2 x double> %460, i32 0
  %530 = extractelement <2 x double> %528, i32 0
  %531 = fmul double %529, %530
  %532 = extractelement <2 x double> %460, i32 1
  %533 = extractelement <2 x double> %528, i32 1
  %534 = fmul double %532, %533
  %535 = fadd double %534, %531
  %536 = fcmp ult double %535, 0.000000e+00
  br i1 %536, label %537, label %627

537:                                              ; preds = %527
  %538 = bitcast %class.SkTCoincident* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %538) #9
  %539 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %14, i64 0, i32 1
  %540 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %14, i64 0, i32 2
  %541 = bitcast i8* %540 to i64*
  store i64 -6148914691236517376, i64* %541, align 8
  store double -1.000000e+00, double* %539, align 16
  %542 = bitcast %class.SkTCoincident* %14 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %542, align 16
  %543 = fsub double %401, %398
  %544 = bitcast <2 x double>* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %544) #9
  %545 = getelementptr inbounds <2 x double>, <2 x double>* %15, i64 0, i64 0
  %546 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %16, i64 0, i32 1
  %547 = fmul double %543, 5.000000e-01
  %548 = call double @llvm.fabs.f64(double %547) #9
  %549 = fcmp olt double %548, 0x3CD0000000000000
  %550 = bitcast <2 x double>* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %550, i8 -1, i64 16, i1 false)
  br i1 %549, label %625, label %551

551:                                              ; preds = %537
  %552 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %14, i64 0, i32 0
  %553 = bitcast double* %155 to <2 x double>*
  %554 = bitcast %class.SkTCoincident* %14 to <2 x double>*
  br label %555

555:                                              ; preds = %551, %597
  %556 = phi double [ %547, %551 ], [ %599, %597 ]
  %557 = phi double [ %398, %551 ], [ %558, %597 ]
  %558 = fadd double %557, %556
  %559 = load %class.SkTCurve*, %class.SkTCurve** %96, align 8
  %560 = bitcast %class.SkTCurve* %559 to { double, double } (%class.SkTCurve*, double)***
  %561 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %560, align 8
  %562 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %561, i64 19
  %563 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %562, align 8
  %564 = call { double, double } %563(%class.SkTCurve* %559, double %558) #9
  %565 = extractvalue { double, double } %564, 0
  %566 = extractvalue { double, double } %564, 1
  store double %565, double* %545, align 16
  store double %566, double* %546, align 8
  %567 = load %class.SkTCurve*, %class.SkTCurve** %96, align 8
  %568 = load %class.SkTCurve*, %class.SkTCurve** %87, align 8
  call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* nonnull %14, %class.SkTCurve* dereferenceable(8) %567, double %558, %struct.SkDPoint* nonnull dereferenceable(16) %16, %class.SkTCurve* dereferenceable(8) %568)
  %569 = load double, double* %539, align 16
  %570 = load i8, i8* %540, align 8, !range !2
  %571 = icmp eq i8 %570, 0
  br i1 %571, label %581, label %572

572:                                              ; preds = %555
  %573 = load <2 x double>, <2 x double>* %553, align 8
  %574 = insertelement <2 x double> undef, double %569, i32 0
  %575 = shufflevector <2 x double> %574, <2 x double> undef, <2 x i32> zeroinitializer
  %576 = fsub <2 x double> %573, %575
  %577 = extractelement <2 x double> %576, i32 0
  %578 = extractelement <2 x double> %576, i32 1
  %579 = fmul double %577, %578
  %580 = fcmp ugt double %579, 0.000000e+00
  br i1 %580, label %597, label %583

581:                                              ; preds = %555
  %582 = fcmp olt double %569, 0.000000e+00
  br i1 %582, label %597, label %583

583:                                              ; preds = %572, %581
  %584 = load <2 x double>, <2 x double>* %15, align 16
  %585 = load <2 x double>, <2 x double>* %554, align 16
  %586 = fsub <2 x double> %584, %585
  %587 = fmul <2 x double> %460, %586
  %588 = extractelement <2 x double> %587, i32 0
  %589 = extractelement <2 x double> %587, i32 1
  %590 = fadd double %588, %589
  %591 = fcmp ult double %590, 0.000000e+00
  %592 = fcmp olt double %556, 0.000000e+00
  %593 = xor i1 %592, %591
  %594 = fsub double -0.000000e+00, %556
  %595 = select i1 %593, double %594, double %556
  %596 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %16, %struct.SkDPoint* nonnull dereferenceable(16) %552)
  br i1 %596, label %602, label %597

597:                                              ; preds = %572, %583, %581
  %598 = phi double [ %595, %583 ], [ %556, %581 ], [ %556, %572 ]
  %599 = fmul double %598, 5.000000e-01
  %600 = call double @llvm.fabs.f64(double %599) #9
  %601 = fcmp olt double %600, 0x3CD0000000000000
  br i1 %601, label %625, label %555

602:                                              ; preds = %583
  %603 = load double, double* %539, align 16
  %604 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 2
  %605 = load %class.SkTSpan*, %class.SkTSpan** %604, align 8
  %606 = insertelement <2 x double> undef, double %603, i32 0
  %607 = shufflevector <2 x double> %606, <2 x double> undef, <2 x i32> zeroinitializer
  br label %608

608:                                              ; preds = %618, %602
  %609 = phi %class.SkTSpan* [ %605, %602 ], [ %620, %618 ]
  %610 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %609, i64 0, i32 7
  %611 = bitcast double* %610 to <2 x double>*
  %612 = load <2 x double>, <2 x double>* %611, align 8
  %613 = fsub <2 x double> %612, %607
  %614 = extractelement <2 x double> %613, i32 0
  %615 = extractelement <2 x double> %613, i32 1
  %616 = fmul double %614, %615
  %617 = fcmp ugt double %616, 0.000000e+00
  br i1 %617, label %618, label %622

618:                                              ; preds = %608
  %619 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %609, i64 0, i32 5
  %620 = load %class.SkTSpan*, %class.SkTSpan** %619, align 8
  %621 = icmp eq %class.SkTSpan* %620, null
  br i1 %621, label %625, label %608

622:                                              ; preds = %608
  %623 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %4, i64 0, i32 6
  store i8 1, i8* %623, align 1
  %624 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %4, double %558, double %603, %struct.SkDPoint* nonnull dereferenceable(16) %16) #9
  br label %625

625:                                              ; preds = %597, %618, %537, %622
  %626 = phi i32 [ 1, %622 ], [ 0, %537 ], [ 0, %618 ], [ 0, %597 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %544) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %538) #9
  br label %627

627:                                              ; preds = %625, %527, %357
  %628 = phi i32 [ 0, %357 ], [ %626, %625 ], [ 0, %527 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %363) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %358) #9
  br label %629

629:                                              ; preds = %284, %295, %280, %149, %147, %125, %123, %95, %5, %627
  %630 = phi i32 [ %628, %627 ], [ 0, %5 ], [ 0, %95 ], [ 2, %123 ], [ 2, %125 ], [ 2, %147 ], [ 2, %149 ], [ %283, %280 ], [ 0, %295 ], [ 0, %284 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %61) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #9
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %26) #9
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %17) #9
  ret i32 %630
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7SkTSect15removedEndCheckEP7SkTSpan(%class.SkTSect* nocapture, %class.SkTSpan* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 7
  %4 = load double, double* %3, align 8
  %5 = fcmp une double %4, 0.000000e+00
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 6
  store i8 1, i8* %7, align 4
  br label %8

8:                                                ; preds = %6, %2
  %9 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 8
  %10 = load double, double* %9, align 8
  %11 = fcmp oeq double %10, 1.000000e+00
  br i1 %11, label %12, label %14

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 7
  store i8 1, i8* %13, align 1
  br label %14

14:                                               ; preds = %12, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZL11is_parallelI8SkTCurveEbRK7SkDLineRKT_(%struct.SkDLine* nocapture readonly dereferenceable(32), %class.SkTCurve* dereferenceable(8)) unnamed_addr #0 {
  %3 = alloca %struct.SkDLine, align 16
  %4 = alloca %class.SkIntersections, align 8
  %5 = bitcast %class.SkTCurve* %1 to i1 (%class.SkTCurve*)***
  %6 = load i1 (%class.SkTCurve*)**, i1 (%class.SkTCurve*)*** %5, align 8
  %7 = getelementptr inbounds i1 (%class.SkTCurve*)*, i1 (%class.SkTCurve*)** %6, i64 13
  %8 = load i1 (%class.SkTCurve*)*, i1 (%class.SkTCurve*)** %7, align 8
  %9 = tail call zeroext i1 %8(%class.SkTCurve* %1) #9
  br i1 %9, label %10, label %97

10:                                               ; preds = %2
  %11 = bitcast %struct.SkDLine* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #9
  %12 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %3, i64 0, i32 0, i64 0
  %13 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %3, i64 0, i32 0, i64 1
  %14 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 1
  %15 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %14, i64 0, i32 0
  %16 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %3, i64 0, i32 0, i64 1
  %17 = bitcast %struct.SkDPoint* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -1, i64 16, i1 false)
  %18 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 1, i32 1
  %19 = bitcast %struct.SkDPoint* %14 to <2 x double>*
  %20 = load <2 x double>, <2 x double>* %19, align 8
  %21 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 0, i32 1
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 0, i32 0
  %24 = load double, double* %23, align 8
  %25 = extractelement <2 x double> %20, i32 1
  %26 = insertelement <2 x double> undef, double %25, i32 0
  %27 = insertelement <2 x double> %26, double %24, i32 1
  %28 = insertelement <2 x double> undef, double %22, i32 0
  %29 = shufflevector <2 x double> %28, <2 x double> %20, <2 x i32> <i32 0, i32 2>
  %30 = fsub <2 x double> %27, %29
  %31 = fadd <2 x double> %20, %30
  %32 = bitcast %struct.SkDLine* %3 to <2 x double>*
  store <2 x double> %31, <2 x double>* %32, align 16
  %33 = bitcast %struct.SkDPoint* %13 to i8*
  %34 = bitcast %struct.SkDPoint* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %33, i8* align 8 %34, i64 16, i1 false)
  %35 = bitcast %class.SkIntersections* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %35) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %35, i8* align 8 bitcast (%class.SkIntersections* @__const._ZL11is_parallelI8SkTCurveEbRK7SkDLineRKT_.perpRayI to i8*), i64 464, i1 false)
  %36 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %4, i64 0, i32 8
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %4, i64 0, i32 4, i64 0
  %38 = bitcast i8* %37 to i16*
  store i16 0, i16* %38, align 4
  %39 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %4, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 448, i1 false) #9
  store i8 1, i8* %39, align 8
  %40 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %4, i64 0, i32 5
  store i8 0, i8* %40, align 2
  %41 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %4, i64 0, i32 3, i64 0
  %42 = bitcast i16* %41 to i32*
  store i32 0, i32* %42, align 8
  %43 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %4, i64 0, i32 6
  store i8 0, i8* %43, align 1
  %44 = bitcast %class.SkTCurve* %1 to i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)***
  %45 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)**, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*** %44, align 8
  %46 = getelementptr inbounds i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %45, i64 12
  %47 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %46, align 8
  %48 = call i32 %47(%class.SkTCurve* %1, %class.SkIntersections* nonnull %4, %struct.SkDLine* nonnull dereferenceable(32) %3) #9
  %49 = load i8, i8* %40, align 2
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %72

51:                                               ; preds = %72, %10
  %52 = phi i32 [ 0, %10 ], [ %78, %72 ]
  %53 = load double, double* %18, align 8
  %54 = bitcast %struct.SkDLine* %0 to <2 x double>*
  %55 = load <2 x double>, <2 x double>* %54, align 8
  %56 = load double, double* %15, align 8
  %57 = insertelement <2 x double> undef, double %53, i32 0
  %58 = shufflevector <2 x double> %57, <2 x double> %55, <2 x i32> <i32 0, i32 2>
  %59 = extractelement <2 x double> %55, i32 1
  %60 = insertelement <2 x double> undef, double %59, i32 0
  %61 = insertelement <2 x double> %60, double %56, i32 1
  %62 = fsub <2 x double> %58, %61
  %63 = fadd <2 x double> %55, %62
  %64 = bitcast %struct.SkDPoint* %13 to <2 x double>*
  store <2 x double> %63, <2 x double>* %64, align 16
  %65 = bitcast %struct.SkDLine* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %11, i8* align 8 %65, i64 16, i1 false)
  %66 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)**, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*** %44, align 8
  %67 = getelementptr inbounds i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %66, i64 12
  %68 = load i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)*, i32 (%class.SkTCurve*, %class.SkIntersections*, %struct.SkDLine*)** %67, align 8
  %69 = call i32 %68(%class.SkTCurve* %1, %class.SkIntersections* nonnull %4, %struct.SkDLine* nonnull dereferenceable(32) %3) #9
  %70 = load i8, i8* %40, align 2
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %83, label %86

72:                                               ; preds = %10, %72
  %73 = phi i64 [ %79, %72 ], [ 0, %10 ]
  %74 = phi i32 [ %78, %72 ], [ 0, %10 ]
  %75 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %4, i64 0, i32 0, i64 %73
  %76 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %75, %struct.SkDPoint* dereferenceable(16) %13)
  %77 = zext i1 %76 to i32
  %78 = add nuw nsw i32 %74, %77
  %79 = add nuw nsw i64 %73, 1
  %80 = load i8, i8* %40, align 2
  %81 = zext i8 %80 to i64
  %82 = icmp ult i64 %79, %81
  br i1 %82, label %72, label %51

83:                                               ; preds = %86, %51
  %84 = phi i32 [ %52, %51 ], [ %92, %86 ]
  %85 = icmp ugt i32 %84, 1
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %35) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #9
  br label %97

86:                                               ; preds = %51, %86
  %87 = phi i64 [ %93, %86 ], [ 0, %51 ]
  %88 = phi i32 [ %92, %86 ], [ %52, %51 ]
  %89 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %4, i64 0, i32 0, i64 %87
  %90 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %89, %struct.SkDPoint* nonnull dereferenceable(16) %12)
  %91 = zext i1 %90 to i32
  %92 = add nuw nsw i32 %88, %91
  %93 = add nuw nsw i64 %87, 1
  %94 = load i8, i8* %40, align 2
  %95 = zext i8 %94 to i64
  %96 = icmp ult i64 %93, %95
  br i1 %96, label %86, label %83

97:                                               ; preds = %2, %83
  %98 = phi i1 [ %85, %83 ], [ false, %2 ]
  ret i1 %98
}

declare void @_ZN15SkIntersections5mergeERKS_iS1_i(%class.SkIntersections*, %class.SkIntersections* dereferenceable(464), i32, %class.SkIntersections* dereferenceable(464), i32) local_unnamed_addr #5

declare i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections*, double, double, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #5

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSect12markSpanGoneEP7SkTSpan(%class.SkTSect* nocapture, %class.SkTSpan*) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 8
  %5 = add nsw i32 %4, -1
  store i32 %5, i32* %3, align 8
  %6 = icmp slt i32 %4, 1
  br i1 %6, label %14, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %9 = bitcast %class.SkTSpan** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 5
  %12 = bitcast %class.SkTSpan** %11 to i64*
  store i64 %10, i64* %12, align 8
  store %class.SkTSpan* %1, %class.SkTSpan** %8, align 8
  %13 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 14
  store i8 1, i8* %13, align 4
  br label %14

14:                                               ; preds = %2, %7
  %15 = phi i1 [ true, %7 ], [ false, %2 ]
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkTSect16matchedDirectionEdPKS_d(%class.SkTSect* nocapture readonly, double, %class.SkTSect* nocapture readonly, double) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %6 = load %class.SkTCurve*, %class.SkTCurve** %5, align 8
  %7 = bitcast %class.SkTCurve* %6 to { double, double } (%class.SkTCurve*, double)***
  %8 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %7, align 8
  %9 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %8, i64 7
  %10 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %9, align 8
  %11 = tail call { double, double } %10(%class.SkTCurve* %6, double %1) #9
  %12 = extractvalue { double, double } %11, 0
  %13 = extractvalue { double, double } %11, 1
  %14 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 0
  %15 = load %class.SkTCurve*, %class.SkTCurve** %14, align 8
  %16 = bitcast %class.SkTCurve* %15 to { double, double } (%class.SkTCurve*, double)***
  %17 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %16, align 8
  %18 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %17, i64 7
  %19 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %18, align 8
  %20 = tail call { double, double } %19(%class.SkTCurve* %15, double %3) #9
  %21 = extractvalue { double, double } %20, 0
  %22 = extractvalue { double, double } %20, 1
  %23 = fmul double %12, %21
  %24 = fmul double %13, %22
  %25 = fadd double %23, %24
  %26 = fcmp oge double %25, 0.000000e+00
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkTSect15matchedDirCheckEdPKS_dPbS2_(%class.SkTSect* nocapture readonly, double, %class.SkTSect* nocapture readonly, double, i8* nocapture, i8* nocapture) local_unnamed_addr #0 align 2 {
  %7 = load i8, i8* %4, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %33

9:                                                ; preds = %6
  %10 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %11 = load %class.SkTCurve*, %class.SkTCurve** %10, align 8
  %12 = bitcast %class.SkTCurve* %11 to { double, double } (%class.SkTCurve*, double)***
  %13 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %12, align 8
  %14 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %13, i64 7
  %15 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %14, align 8
  %16 = tail call { double, double } %15(%class.SkTCurve* %11, double %1) #9
  %17 = extractvalue { double, double } %16, 0
  %18 = extractvalue { double, double } %16, 1
  %19 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 0
  %20 = load %class.SkTCurve*, %class.SkTCurve** %19, align 8
  %21 = bitcast %class.SkTCurve* %20 to { double, double } (%class.SkTCurve*, double)***
  %22 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %21, align 8
  %23 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %22, i64 7
  %24 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %23, align 8
  %25 = tail call { double, double } %24(%class.SkTCurve* %20, double %3) #9
  %26 = extractvalue { double, double } %25, 0
  %27 = extractvalue { double, double } %25, 1
  %28 = fmul double %17, %26
  %29 = fmul double %18, %27
  %30 = fadd double %28, %29
  %31 = fcmp oge double %30, 0.000000e+00
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %5, align 1
  store i8 1, i8* %4, align 1
  br label %33

33:                                               ; preds = %6, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkTSect16mergeCoincidenceEPS_(%class.SkTSect* nocapture, %class.SkTSect* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.SkDPoint, align 8
  %4 = alloca %class.SkTCoincident, align 16
  %5 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 3
  %6 = bitcast %struct.SkDPoint* %3 to i8*
  %7 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 0
  %8 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 1
  %9 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %10 = bitcast %class.SkTCoincident* %4 to i8*
  %11 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %4, i64 0, i32 1
  %12 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %4, i64 0, i32 2
  %13 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 0
  %14 = bitcast %struct.SkDPoint* %3 to i8*
  %15 = bitcast i8* %12 to i64*
  %16 = bitcast %class.SkTCoincident* %4 to <2 x double>*
  br label %17

17:                                               ; preds = %68, %2
  %18 = phi double [ 0.000000e+00, %2 ], [ %44, %68 ]
  %19 = load %class.SkTSpan*, %class.SkTSpan** %5, align 8
  br label %20

20:                                               ; preds = %35, %17
  %21 = phi %class.SkTSpan* [ null, %17 ], [ %36, %35 ]
  %22 = phi %class.SkTSpan* [ %19, %17 ], [ %38, %35 ]
  %23 = icmp eq %class.SkTSpan* %22, null
  br i1 %23, label %103, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %22, i64 0, i32 7
  %26 = load double, double* %25, align 8
  %27 = fcmp olt double %26, %18
  br i1 %27, label %35, label %28

28:                                               ; preds = %24
  %29 = icmp eq %class.SkTSpan* %21, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %21, i64 0, i32 8
  %32 = load double, double* %31, align 8
  %33 = fcmp olt double %32, %26
  br i1 %33, label %35, label %34

34:                                               ; preds = %28, %30
  br label %35

35:                                               ; preds = %30, %24, %34
  %36 = phi %class.SkTSpan* [ %21, %24 ], [ %21, %30 ], [ %22, %34 ]
  %37 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %22, i64 0, i32 5
  %38 = load %class.SkTSpan*, %class.SkTSpan** %37, align 8
  %39 = icmp eq %class.SkTSpan* %38, null
  br i1 %39, label %40, label %20

40:                                               ; preds = %35
  %41 = icmp eq %class.SkTSpan* %36, null
  br i1 %41, label %103, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %36, i64 0, i32 8
  %44 = load double, double* %43, align 8
  br label %45

45:                                               ; preds = %60, %42
  %46 = phi %class.SkTSpan* [ %19, %42 ], [ %64, %60 ]
  %47 = phi %class.SkTSpan* [ null, %42 ], [ %46, %60 ]
  %48 = phi %class.SkTSpan* [ null, %42 ], [ %61, %60 ]
  %49 = phi %class.SkTSpan* [ null, %42 ], [ %62, %60 ]
  %50 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %46, i64 0, i32 7
  %51 = load double, double* %50, align 8
  %52 = fcmp olt double %51, %44
  br i1 %52, label %60, label %53

53:                                               ; preds = %45
  %54 = icmp eq %class.SkTSpan* %48, null
  br i1 %54, label %59, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %48, i64 0, i32 7
  %57 = load double, double* %56, align 8
  %58 = fcmp olt double %57, %51
  br i1 %58, label %60, label %59

59:                                               ; preds = %53, %55
  br label %60

60:                                               ; preds = %55, %45, %59
  %61 = phi %class.SkTSpan* [ %48, %45 ], [ %48, %55 ], [ %46, %59 ]
  %62 = phi %class.SkTSpan* [ %49, %45 ], [ %49, %55 ], [ %47, %59 ]
  %63 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %46, i64 0, i32 5
  %64 = load %class.SkTSpan*, %class.SkTSpan** %63, align 8
  %65 = icmp eq %class.SkTSpan* %64, null
  br i1 %65, label %66, label %45

66:                                               ; preds = %60
  %67 = icmp eq %class.SkTSpan* %61, null
  br i1 %67, label %68, label %69

68:                                               ; preds = %66, %102
  br label %17

69:                                               ; preds = %66
  %70 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %61, i64 0, i32 7
  %71 = load double, double* %70, align 8
  %72 = fadd double %44, %71
  %73 = fmul double %72, 5.000000e-01
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -1, i64 16, i1 false)
  %74 = load %class.SkTCurve*, %class.SkTCurve** %9, align 8
  %75 = bitcast %class.SkTCurve* %74 to { double, double } (%class.SkTCurve*, double)***
  %76 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %75, align 8
  %77 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %76, i64 19
  %78 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %77, align 8
  %79 = call { double, double } %78(%class.SkTCurve* %74, double %73) #9
  %80 = extractvalue { double, double } %79, 0
  store double %80, double* %7, align 8
  %81 = extractvalue { double, double } %79, 1
  store double %81, double* %8, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #9
  store i64 -6148914691236517376, i64* %15, align 8
  store double -1.000000e+00, double* %11, align 16
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %16, align 16
  %82 = load %class.SkTCurve*, %class.SkTCurve** %9, align 8
  %83 = load %class.SkTCurve*, %class.SkTCurve** %13, align 8
  call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* nonnull %4, %class.SkTCurve* dereferenceable(8) %82, double %73, %struct.SkDPoint* nonnull dereferenceable(16) %3, %class.SkTCurve* dereferenceable(8) %83)
  %84 = load i8, i8* %12, align 8, !range !2
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %102, label %86

86:                                               ; preds = %69
  %87 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %61, i64 0, i32 8
  %88 = bitcast double* %87 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast double* %43 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %61, i64 0, i32 2
  %92 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %36, i64 0, i32 2
  %93 = bitcast %class.SkTCoincident* %92 to i8*
  %94 = bitcast %class.SkTCoincident* %91 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %94, i64 25, i1 false)
  %95 = icmp eq %class.SkTSpan* %62, null
  %96 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %61, i64 0, i32 5
  %97 = bitcast %class.SkTSpan** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %62, i64 0, i32 5
  %100 = select i1 %95, %class.SkTSpan** %5, %class.SkTSpan** %99
  %101 = bitcast %class.SkTSpan** %100 to i64*
  store i64 %98, i64* %101, align 8
  br label %102

102:                                              ; preds = %86, %69
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #9
  br label %68

103:                                              ; preds = %40, %20
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkTSpan* @_ZNK7SkTSect4prevEP7SkTSpan(%class.SkTSect* nocapture readonly, %class.SkTSpan* readnone) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  br label %4

4:                                                ; preds = %4, %2
  %5 = phi %class.SkTSpan* [ null, %2 ], [ %7, %4 ]
  %6 = phi %class.SkTSpan** [ %3, %2 ], [ %9, %4 ]
  %7 = load %class.SkTSpan*, %class.SkTSpan** %6, align 8
  %8 = icmp eq %class.SkTSpan* %7, %1
  %9 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %7, i64 0, i32 5
  br i1 %8, label %10, label %4

10:                                               ; preds = %4
  ret %class.SkTSpan* %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7SkTSect16recoverCollapsedEv(%class.SkTSect* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %3 = load %class.SkTSpan*, %class.SkTSpan** %2, align 8
  %4 = icmp eq %class.SkTSpan* %3, null
  br i1 %4, label %40, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  br label %7

7:                                                ; preds = %5, %38
  %8 = phi %class.SkTSpan* [ %3, %5 ], [ %10, %38 ]
  %9 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 5
  %10 = load %class.SkTSpan*, %class.SkTSpan** %9, align 8
  %11 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 10
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %38, label %14

14:                                               ; preds = %7
  %15 = load %class.SkTSpan*, %class.SkTSpan** %6, align 8
  %16 = icmp eq %class.SkTSpan* %15, null
  br i1 %16, label %35, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %8, i64 0, i32 7
  %19 = load double, double* %18, align 8
  %20 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %15, i64 0, i32 8
  %21 = load double, double* %20, align 8
  %22 = fcmp ugt double %21, %19
  br i1 %22, label %35, label %27

23:                                               ; preds = %27
  %24 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %30, i64 0, i32 8
  %25 = load double, double* %24, align 8
  %26 = fcmp ugt double %25, %19
  br i1 %26, label %32, label %27

27:                                               ; preds = %17, %23
  %28 = phi %class.SkTSpan* [ %30, %23 ], [ %15, %17 ]
  %29 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %28, i64 0, i32 5
  %30 = load %class.SkTSpan*, %class.SkTSpan** %29, align 8
  %31 = icmp eq %class.SkTSpan* %30, null
  br i1 %31, label %32, label %23

32:                                               ; preds = %27, %23
  %33 = phi %class.SkTSpan* [ null, %27 ], [ %30, %23 ]
  %34 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %28, i64 0, i32 5
  br label %35

35:                                               ; preds = %32, %17, %14
  %36 = phi %class.SkTSpan** [ %6, %14 ], [ %6, %17 ], [ %34, %32 ]
  %37 = phi %class.SkTSpan* [ null, %14 ], [ %15, %17 ], [ %33, %32 ]
  store %class.SkTSpan* %37, %class.SkTSpan** %9, align 8
  store %class.SkTSpan* %8, %class.SkTSpan** %36, align 8
  br label %38

38:                                               ; preds = %7, %35
  %39 = icmp eq %class.SkTSpan* %10, null
  br i1 %39, label %40, label %7

40:                                               ; preds = %38, %1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7SkTSect12removeAllButEPK7SkTSpanPS0_PS_(%class.SkTSect* nocapture readnone, %class.SkTSpan* readnone, %class.SkTSpan*, %class.SkTSect* nocapture) local_unnamed_addr #3 align 2 {
  %5 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %2, i64 0, i32 3
  %6 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %5, align 8
  %7 = icmp eq %struct.SkTSpanBounded* %6, null
  br i1 %7, label %68, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %3, i64 0, i32 6
  %10 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %3, i64 0, i32 7
  %11 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %3, i64 0, i32 2
  %12 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %3, i64 0, i32 5
  %13 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %3, i64 0, i32 4
  %14 = bitcast %class.SkTSpan** %13 to i64*
  br label %15

15:                                               ; preds = %8, %66
  %16 = phi %struct.SkTSpanBounded* [ %6, %8 ], [ %20, %66 ]
  %17 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %16, i64 0, i32 0
  %18 = load %class.SkTSpan*, %class.SkTSpan** %17, align 8
  %19 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %16, i64 0, i32 1
  %20 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %19, align 8
  %21 = icmp eq %class.SkTSpan* %18, %1
  br i1 %21, label %66, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %18, i64 0, i32 14
  %24 = load i8, i8* %23, align 4, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %66

26:                                               ; preds = %22
  %27 = tail call zeroext i1 @_ZN7SkTSpan13removeBoundedEPKS_(%class.SkTSpan* %2, %class.SkTSpan* %18)
  %28 = tail call zeroext i1 @_ZN7SkTSpan13removeBoundedEPKS_(%class.SkTSpan* %18, %class.SkTSpan* %2)
  br i1 %28, label %29, label %66

29:                                               ; preds = %26
  %30 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %18, i64 0, i32 7
  %31 = load double, double* %30, align 8
  %32 = fcmp une double %31, 0.000000e+00
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  store i8 1, i8* %9, align 4
  br label %34

34:                                               ; preds = %33, %29
  %35 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %18, i64 0, i32 8
  %36 = load double, double* %35, align 8
  %37 = fcmp oeq double %36, 1.000000e+00
  br i1 %37, label %38, label %39

38:                                               ; preds = %34
  store i8 1, i8* %10, align 1
  br label %39

39:                                               ; preds = %38, %34
  %40 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %18, i64 0, i32 4
  %41 = load %class.SkTSpan*, %class.SkTSpan** %40, align 8
  %42 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %18, i64 0, i32 5
  %43 = load %class.SkTSpan*, %class.SkTSpan** %42, align 8
  %44 = icmp eq %class.SkTSpan* %41, null
  br i1 %44, label %55, label %45

45:                                               ; preds = %39
  %46 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %41, i64 0, i32 5
  store %class.SkTSpan* %43, %class.SkTSpan** %46, align 8
  %47 = icmp eq %class.SkTSpan* %43, null
  br i1 %47, label %59, label %48

48:                                               ; preds = %45
  %49 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %43, i64 0, i32 4
  store %class.SkTSpan* %41, %class.SkTSpan** %49, align 8
  %50 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %43, i64 0, i32 7
  %51 = load double, double* %50, align 8
  %52 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %43, i64 0, i32 8
  %53 = load double, double* %52, align 8
  %54 = fcmp ogt double %51, %53
  br i1 %54, label %66, label %59

55:                                               ; preds = %39
  store %class.SkTSpan* %43, %class.SkTSpan** %11, align 8
  %56 = icmp eq %class.SkTSpan* %43, null
  br i1 %56, label %59, label %57

57:                                               ; preds = %55
  %58 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %43, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %58, align 8
  br label %59

59:                                               ; preds = %57, %55, %48, %45
  %60 = load i32, i32* %12, align 8
  %61 = add nsw i32 %60, -1
  store i32 %61, i32* %12, align 8
  %62 = icmp slt i32 %60, 1
  br i1 %62, label %66, label %63

63:                                               ; preds = %59
  %64 = load i64, i64* %14, align 8
  %65 = bitcast %class.SkTSpan** %42 to i64*
  store i64 %64, i64* %65, align 8
  store %class.SkTSpan* %18, %class.SkTSpan** %13, align 8
  store i8 1, i8* %23, align 4
  br label %66

66:                                               ; preds = %63, %59, %48, %22, %15, %26
  %67 = icmp eq %struct.SkTSpanBounded* %20, null
  br i1 %67, label %68, label %15

68:                                               ; preds = %66, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSect21removeByPerpendicularEPS_(%class.SkTSect* nocapture, %class.SkTSect* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %4 = load %class.SkTSpan*, %class.SkTSpan** %3, align 8
  br label %5

5:                                                ; preds = %54, %2
  %6 = phi %class.SkTSpan* [ %4, %2 ], [ %8, %54 ]
  %7 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 5
  %8 = load %class.SkTSpan*, %class.SkTSpan** %7, align 8
  %9 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 1, i32 1
  %10 = load double, double* %9, align 8
  %11 = fcmp olt double %10, 0.000000e+00
  br i1 %11, label %54, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 2, i32 1
  %14 = load double, double* %13, align 8
  %15 = fcmp olt double %14, 0.000000e+00
  br i1 %15, label %54, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 0
  %18 = load %class.SkTCurve*, %class.SkTCurve** %17, align 8
  %19 = bitcast %class.SkTCurve* %18 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %20 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %19, align 8
  %21 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %20, i64 3
  %22 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %21, align 8
  %23 = tail call dereferenceable(16) %struct.SkDPoint* %22(%class.SkTCurve* %18, i32 0) #9
  %24 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 1, i32 0, i32 0
  %25 = bitcast double* %24 to <2 x double>*
  %26 = load <2 x double>, <2 x double>* %25, align 8
  %27 = bitcast %struct.SkDPoint* %23 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 8
  %29 = fsub <2 x double> %26, %28
  %30 = load %class.SkTCurve*, %class.SkTCurve** %17, align 8
  %31 = bitcast %class.SkTCurve* %30 to i32 (%class.SkTCurve*)***
  %32 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %31, align 8
  %33 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %32, i64 18
  %34 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %33, align 8
  %35 = tail call i32 %34(%class.SkTCurve* %30) #9
  %36 = bitcast %class.SkTCurve* %30 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %37 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %36, align 8
  %38 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %37, i64 3
  %39 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %38, align 8
  %40 = tail call dereferenceable(16) %struct.SkDPoint* %39(%class.SkTCurve* %30, i32 %35) #9
  %41 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 2, i32 0, i32 0
  %42 = bitcast double* %41 to <2 x double>*
  %43 = load <2 x double>, <2 x double>* %42, align 8
  %44 = bitcast %struct.SkDPoint* %40 to <2 x double>*
  %45 = load <2 x double>, <2 x double>* %44, align 8
  %46 = fsub <2 x double> %43, %45
  %47 = fmul <2 x double> %29, %46
  %48 = extractelement <2 x double> %47, i32 0
  %49 = extractelement <2 x double> %47, i32 1
  %50 = fadd double %48, %49
  %51 = fcmp ugt double %50, 0.000000e+00
  br i1 %51, label %52, label %54

52:                                               ; preds = %16
  %53 = tail call zeroext i1 @_ZN7SkTSect11removeSpansEP7SkTSpanPS_(%class.SkTSect* %0, %class.SkTSpan* %6, %class.SkTSect* %1)
  br i1 %53, label %54, label %56

54:                                               ; preds = %52, %16, %5, %12
  %55 = icmp eq %class.SkTSpan* %8, null
  br i1 %55, label %56, label %5

56:                                               ; preds = %52, %54
  %57 = phi i1 [ true, %54 ], [ false, %52 ]
  ret i1 %57
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSect11removeSpansEP7SkTSpanPS_(%class.SkTSect* nocapture, %class.SkTSpan*, %class.SkTSect* nocapture) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 3
  %5 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %4, align 8
  %6 = icmp eq %struct.SkTSpanBounded* %5, null
  br i1 %6, label %133, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 7
  %9 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 6
  %10 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 8
  %11 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 7
  %12 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 4
  %13 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 5
  %14 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %15 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %16 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %17 = bitcast %class.SkTSpan** %16 to i64*
  %18 = bitcast %class.SkTSpan** %13 to i64*
  %19 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 14
  %20 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 6
  %21 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 7
  %22 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 2
  %23 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 5
  %24 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 4
  %25 = bitcast %class.SkTSpan** %24 to i64*
  %26 = icmp eq %class.SkTSpan* %1, null
  br label %27

27:                                               ; preds = %7, %131
  %28 = phi %struct.SkTSpanBounded* [ %5, %7 ], [ %32, %131 ]
  %29 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %28, i64 0, i32 0
  %30 = load %class.SkTSpan*, %class.SkTSpan** %29, align 8
  %31 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %28, i64 0, i32 1
  %32 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %31, align 8
  %33 = tail call zeroext i1 @_ZN7SkTSpan13removeBoundedEPKS_(%class.SkTSpan* %1, %class.SkTSpan* %30)
  br i1 %33, label %34, label %66

34:                                               ; preds = %27
  %35 = load double, double* %8, align 8
  %36 = fcmp une double %35, 0.000000e+00
  br i1 %36, label %38, label %37

37:                                               ; preds = %34
  store i8 1, i8* %9, align 4
  br label %38

38:                                               ; preds = %37, %34
  %39 = load double, double* %10, align 8
  %40 = fcmp oeq double %39, 1.000000e+00
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  store i8 1, i8* %11, align 1
  br label %42

42:                                               ; preds = %41, %38
  %43 = load %class.SkTSpan*, %class.SkTSpan** %12, align 8
  %44 = load %class.SkTSpan*, %class.SkTSpan** %13, align 8
  %45 = icmp eq %class.SkTSpan* %43, null
  br i1 %45, label %56, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %43, i64 0, i32 5
  store %class.SkTSpan* %44, %class.SkTSpan** %47, align 8
  %48 = icmp eq %class.SkTSpan* %44, null
  br i1 %48, label %60, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %44, i64 0, i32 4
  store %class.SkTSpan* %43, %class.SkTSpan** %50, align 8
  %51 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %44, i64 0, i32 7
  %52 = load double, double* %51, align 8
  %53 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %44, i64 0, i32 8
  %54 = load double, double* %53, align 8
  %55 = fcmp ogt double %52, %54
  br i1 %55, label %66, label %60

56:                                               ; preds = %42
  store %class.SkTSpan* %44, %class.SkTSpan** %14, align 8
  %57 = icmp eq %class.SkTSpan* %44, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %56
  %59 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %44, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %59, align 8
  br label %60

60:                                               ; preds = %58, %56, %49, %46
  %61 = load i32, i32* %15, align 8
  %62 = add nsw i32 %61, -1
  store i32 %62, i32* %15, align 8
  %63 = icmp slt i32 %61, 1
  br i1 %63, label %66, label %64

64:                                               ; preds = %60
  %65 = load i64, i64* %17, align 8
  store i64 %65, i64* %18, align 8
  store %class.SkTSpan* %1, %class.SkTSpan** %16, align 8
  store i8 1, i8* %19, align 4
  br label %66

66:                                               ; preds = %64, %60, %49, %27
  %67 = tail call zeroext i1 @_ZN7SkTSpan13removeBoundedEPKS_(%class.SkTSpan* %30, %class.SkTSpan* %1)
  br i1 %67, label %68, label %106

68:                                               ; preds = %66
  %69 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %30, i64 0, i32 7
  %70 = load double, double* %69, align 8
  %71 = fcmp une double %70, 0.000000e+00
  br i1 %71, label %73, label %72

72:                                               ; preds = %68
  store i8 1, i8* %20, align 4
  br label %73

73:                                               ; preds = %72, %68
  %74 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %30, i64 0, i32 8
  %75 = load double, double* %74, align 8
  %76 = fcmp oeq double %75, 1.000000e+00
  br i1 %76, label %77, label %78

77:                                               ; preds = %73
  store i8 1, i8* %21, align 1
  br label %78

78:                                               ; preds = %77, %73
  %79 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %30, i64 0, i32 4
  %80 = load %class.SkTSpan*, %class.SkTSpan** %79, align 8
  %81 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %30, i64 0, i32 5
  %82 = load %class.SkTSpan*, %class.SkTSpan** %81, align 8
  %83 = icmp eq %class.SkTSpan* %80, null
  br i1 %83, label %94, label %84

84:                                               ; preds = %78
  %85 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %80, i64 0, i32 5
  store %class.SkTSpan* %82, %class.SkTSpan** %85, align 8
  %86 = icmp eq %class.SkTSpan* %82, null
  br i1 %86, label %98, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %82, i64 0, i32 4
  store %class.SkTSpan* %80, %class.SkTSpan** %88, align 8
  %89 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %82, i64 0, i32 7
  %90 = load double, double* %89, align 8
  %91 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %82, i64 0, i32 8
  %92 = load double, double* %91, align 8
  %93 = fcmp ogt double %90, %92
  br i1 %93, label %106, label %98

94:                                               ; preds = %78
  store %class.SkTSpan* %82, %class.SkTSpan** %22, align 8
  %95 = icmp eq %class.SkTSpan* %82, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %94
  %97 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %82, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %97, align 8
  br label %98

98:                                               ; preds = %96, %94, %87, %84
  %99 = load i32, i32* %23, align 8
  %100 = add nsw i32 %99, -1
  store i32 %100, i32* %23, align 8
  %101 = icmp slt i32 %99, 1
  br i1 %101, label %106, label %102

102:                                              ; preds = %98
  %103 = load i64, i64* %25, align 8
  %104 = bitcast %class.SkTSpan** %81 to i64*
  store i64 %103, i64* %104, align 8
  store %class.SkTSpan* %30, %class.SkTSpan** %24, align 8
  %105 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %30, i64 0, i32 14
  store i8 1, i8* %105, align 4
  br label %106

106:                                              ; preds = %102, %98, %87, %66
  %107 = load i8, i8* %19, align 4, !range !2
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %131, label %109

109:                                              ; preds = %106
  %110 = load %class.SkTSpan*, %class.SkTSpan** %22, align 8
  %111 = icmp eq %class.SkTSpan* %110, null
  br i1 %111, label %131, label %112

112:                                              ; preds = %109, %127
  %113 = phi %class.SkTSpan* [ %129, %127 ], [ %110, %109 ]
  %114 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %113, i64 0, i32 3
  %115 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %114, align 8
  %116 = icmp eq %struct.SkTSpanBounded* %115, null
  br i1 %116, label %127, label %121

117:                                              ; preds = %121
  %118 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %122, i64 0, i32 1
  %119 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %118, align 8
  %120 = icmp eq %struct.SkTSpanBounded* %119, null
  br i1 %120, label %127, label %121

121:                                              ; preds = %112, %117
  %122 = phi %struct.SkTSpanBounded* [ %119, %117 ], [ %115, %112 ]
  %123 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %122, i64 0, i32 0
  %124 = load %class.SkTSpan*, %class.SkTSpan** %123, align 8
  %125 = icmp eq %class.SkTSpan* %124, %1
  br i1 %125, label %126, label %117

126:                                              ; preds = %121
  br i1 %26, label %127, label %133

127:                                              ; preds = %117, %126, %112
  %128 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %113, i64 0, i32 5
  %129 = load %class.SkTSpan*, %class.SkTSpan** %128, align 8
  %130 = icmp eq %class.SkTSpan* %129, null
  br i1 %130, label %131, label %112

131:                                              ; preds = %127, %109, %106
  %132 = icmp eq %struct.SkTSpanBounded* %32, null
  br i1 %132, label %133, label %27

133:                                              ; preds = %131, %126, %3
  %134 = phi i1 [ true, %3 ], [ false, %126 ], [ true, %131 ]
  ret i1 %134
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSect10unlinkSpanEP7SkTSpan(%class.SkTSect* nocapture, %class.SkTSpan* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 4
  %4 = load %class.SkTSpan*, %class.SkTSpan** %3, align 8
  %5 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 5
  %6 = load %class.SkTSpan*, %class.SkTSpan** %5, align 8
  %7 = icmp eq %class.SkTSpan* %4, null
  br i1 %7, label %19, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %4, i64 0, i32 5
  store %class.SkTSpan* %6, %class.SkTSpan** %9, align 8
  %10 = icmp eq %class.SkTSpan* %6, null
  br i1 %10, label %24, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 4
  store %class.SkTSpan* %4, %class.SkTSpan** %12, align 8
  %13 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 7
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 8
  %16 = load double, double* %15, align 8
  %17 = fcmp ogt double %14, %16
  br i1 %17, label %24, label %18

18:                                               ; preds = %11
  br label %24

19:                                               ; preds = %2
  %20 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  store %class.SkTSpan* %6, %class.SkTSpan** %20, align 8
  %21 = icmp eq %class.SkTSpan* %6, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %6, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %23, align 8
  br label %24

24:                                               ; preds = %18, %22, %19, %8, %11
  %25 = phi i1 [ false, %11 ], [ true, %8 ], [ true, %19 ], [ true, %22 ], [ true, %18 ]
  ret i1 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkTSect4trimEP7SkTSpanPS_(%class.SkTSect* nocapture, %class.SkTSpan*, %class.SkTSect* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %6 = load %class.SkTCurve*, %class.SkTCurve** %5, align 8
  %7 = tail call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* %1, %class.SkTCurve* dereferenceable(8) %6)
  br i1 %7, label %8, label %128

8:                                                ; preds = %3
  %9 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 3
  %10 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %9, align 8
  %11 = icmp eq %struct.SkTSpanBounded* %10, null
  br i1 %11, label %128, label %12

12:                                               ; preds = %8
  %13 = bitcast i32* %4 to i8*
  %14 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 7
  %15 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 6
  %16 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 8
  %17 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 7
  %18 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 4
  %19 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 5
  %20 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %21 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %22 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %23 = bitcast %class.SkTSpan** %22 to i64*
  %24 = bitcast %class.SkTSpan** %19 to i64*
  %25 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 14
  %26 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 6
  %27 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 7
  %28 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 2
  %29 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 5
  %30 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 4
  %31 = bitcast %class.SkTSpan** %30 to i64*
  %32 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %2, i64 0, i32 0
  br label %33

33:                                               ; preds = %12, %126
  %34 = phi %struct.SkTSpanBounded* [ %10, %12 ], [ %38, %126 ]
  %35 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %34, i64 0, i32 0
  %36 = load %class.SkTSpan*, %class.SkTSpan** %35, align 8
  %37 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %34, i64 0, i32 1
  %38 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %37, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #9
  store i32 -1431655766, i32* %4, align 4
  %39 = call i32 @_ZN7SkTSect10intersectsEP7SkTSpanPS_S1_Pi(%class.SkTSect* %0, %class.SkTSpan* %1, %class.SkTSect* %2, %class.SkTSpan* %36, i32* nonnull %4)
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %52

41:                                               ; preds = %33
  %42 = load i32, i32* %4, align 4
  %43 = icmp eq i32 %42, 2
  br i1 %43, label %44, label %47

44:                                               ; preds = %41
  %45 = load %class.SkTCurve*, %class.SkTCurve** %32, align 8
  %46 = tail call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* %36, %class.SkTCurve* dereferenceable(8) %45)
  tail call void @_ZN7SkTSect12removeAllButEPK7SkTSpanPS0_PS_(%class.SkTSect* undef, %class.SkTSpan* %1, %class.SkTSpan* %36, %class.SkTSect* %0)
  br label %47

47:                                               ; preds = %44, %41
  %48 = icmp eq i32 %39, 2
  br i1 %48, label %49, label %126

49:                                               ; preds = %47
  %50 = load %class.SkTCurve*, %class.SkTCurve** %5, align 8
  %51 = tail call zeroext i1 @_ZN7SkTSpan10initBoundsERK8SkTCurve(%class.SkTSpan* %1, %class.SkTCurve* dereferenceable(8) %50)
  tail call void @_ZN7SkTSect12removeAllButEPK7SkTSpanPS0_PS_(%class.SkTSect* undef, %class.SkTSpan* %36, %class.SkTSpan* %1, %class.SkTSect* %2)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #9
  br label %128

52:                                               ; preds = %33
  %53 = tail call zeroext i1 @_ZN7SkTSpan13removeBoundedEPKS_(%class.SkTSpan* %1, %class.SkTSpan* %36)
  br i1 %53, label %54, label %86

54:                                               ; preds = %52
  %55 = load double, double* %14, align 8
  %56 = fcmp une double %55, 0.000000e+00
  br i1 %56, label %58, label %57

57:                                               ; preds = %54
  store i8 1, i8* %15, align 4
  br label %58

58:                                               ; preds = %57, %54
  %59 = load double, double* %16, align 8
  %60 = fcmp oeq double %59, 1.000000e+00
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  store i8 1, i8* %17, align 1
  br label %62

62:                                               ; preds = %61, %58
  %63 = load %class.SkTSpan*, %class.SkTSpan** %18, align 8
  %64 = load %class.SkTSpan*, %class.SkTSpan** %19, align 8
  %65 = icmp eq %class.SkTSpan* %63, null
  br i1 %65, label %76, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %63, i64 0, i32 5
  store %class.SkTSpan* %64, %class.SkTSpan** %67, align 8
  %68 = icmp eq %class.SkTSpan* %64, null
  br i1 %68, label %80, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %64, i64 0, i32 4
  store %class.SkTSpan* %63, %class.SkTSpan** %70, align 8
  %71 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %64, i64 0, i32 7
  %72 = load double, double* %71, align 8
  %73 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %64, i64 0, i32 8
  %74 = load double, double* %73, align 8
  %75 = fcmp ogt double %72, %74
  br i1 %75, label %86, label %80

76:                                               ; preds = %62
  store %class.SkTSpan* %64, %class.SkTSpan** %20, align 8
  %77 = icmp eq %class.SkTSpan* %64, null
  br i1 %77, label %80, label %78

78:                                               ; preds = %76
  %79 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %64, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %79, align 8
  br label %80

80:                                               ; preds = %78, %76, %69, %66
  %81 = load i32, i32* %21, align 8
  %82 = add nsw i32 %81, -1
  store i32 %82, i32* %21, align 8
  %83 = icmp slt i32 %81, 1
  br i1 %83, label %86, label %84

84:                                               ; preds = %80
  %85 = load i64, i64* %23, align 8
  store i64 %85, i64* %24, align 8
  store %class.SkTSpan* %1, %class.SkTSpan** %22, align 8
  store i8 1, i8* %25, align 4
  br label %86

86:                                               ; preds = %84, %80, %69, %52
  %87 = tail call zeroext i1 @_ZN7SkTSpan13removeBoundedEPKS_(%class.SkTSpan* %36, %class.SkTSpan* %1)
  br i1 %87, label %88, label %126

88:                                               ; preds = %86
  %89 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %36, i64 0, i32 7
  %90 = load double, double* %89, align 8
  %91 = fcmp une double %90, 0.000000e+00
  br i1 %91, label %93, label %92

92:                                               ; preds = %88
  store i8 1, i8* %26, align 4
  br label %93

93:                                               ; preds = %92, %88
  %94 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %36, i64 0, i32 8
  %95 = load double, double* %94, align 8
  %96 = fcmp oeq double %95, 1.000000e+00
  br i1 %96, label %97, label %98

97:                                               ; preds = %93
  store i8 1, i8* %27, align 1
  br label %98

98:                                               ; preds = %97, %93
  %99 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %36, i64 0, i32 4
  %100 = load %class.SkTSpan*, %class.SkTSpan** %99, align 8
  %101 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %36, i64 0, i32 5
  %102 = load %class.SkTSpan*, %class.SkTSpan** %101, align 8
  %103 = icmp eq %class.SkTSpan* %100, null
  br i1 %103, label %114, label %104

104:                                              ; preds = %98
  %105 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %100, i64 0, i32 5
  store %class.SkTSpan* %102, %class.SkTSpan** %105, align 8
  %106 = icmp eq %class.SkTSpan* %102, null
  br i1 %106, label %118, label %107

107:                                              ; preds = %104
  %108 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %102, i64 0, i32 4
  store %class.SkTSpan* %100, %class.SkTSpan** %108, align 8
  %109 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %102, i64 0, i32 7
  %110 = load double, double* %109, align 8
  %111 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %102, i64 0, i32 8
  %112 = load double, double* %111, align 8
  %113 = fcmp ogt double %110, %112
  br i1 %113, label %126, label %118

114:                                              ; preds = %98
  store %class.SkTSpan* %102, %class.SkTSpan** %28, align 8
  %115 = icmp eq %class.SkTSpan* %102, null
  br i1 %115, label %118, label %116

116:                                              ; preds = %114
  %117 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %102, i64 0, i32 4
  store %class.SkTSpan* null, %class.SkTSpan** %117, align 8
  br label %118

118:                                              ; preds = %116, %114, %107, %104
  %119 = load i32, i32* %29, align 8
  %120 = add nsw i32 %119, -1
  store i32 %120, i32* %29, align 8
  %121 = icmp slt i32 %119, 1
  br i1 %121, label %126, label %122

122:                                              ; preds = %118
  %123 = load i64, i64* %31, align 8
  %124 = bitcast %class.SkTSpan** %101 to i64*
  store i64 %123, i64* %124, align 8
  store %class.SkTSpan* %36, %class.SkTSpan** %30, align 8
  %125 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %36, i64 0, i32 14
  store i8 1, i8* %125, align 4
  br label %126

126:                                              ; preds = %122, %118, %107, %47, %86
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #9
  %127 = icmp eq %struct.SkTSpanBounded* %38, null
  br i1 %127, label %128, label %33

128:                                              ; preds = %126, %8, %49, %3
  %129 = phi i1 [ false, %3 ], [ true, %49 ], [ true, %8 ], [ true, %126 ]
  ret i1 %129
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7SkTSect9EndsEqualEPKS_S1_P15SkIntersections(%class.SkTSect* nocapture readonly, %class.SkTSect* nocapture readonly, %class.SkIntersections*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %5 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %6 = bitcast %class.SkTCurve* %5 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %7 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %6, align 8
  %8 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %7, i64 2
  %9 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %8, align 8
  %10 = tail call dereferenceable(16) %struct.SkDPoint* %9(%class.SkTCurve* %5, i32 0) #9
  %11 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 0
  %12 = load %class.SkTCurve*, %class.SkTCurve** %11, align 8
  %13 = bitcast %class.SkTCurve* %12 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %14 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %13, align 8
  %15 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %14, i64 2
  %16 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %15, align 8
  %17 = tail call dereferenceable(16) %struct.SkDPoint* %16(%class.SkTCurve* %12, i32 0) #9
  %18 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %10, i64 0, i32 0
  %19 = load double, double* %18, align 8
  %20 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %17, i64 0, i32 0
  %21 = load double, double* %20, align 8
  %22 = fcmp oeq double %19, %21
  br i1 %22, label %23, label %37

23:                                               ; preds = %3
  %24 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %10, i64 0, i32 1
  %25 = load double, double* %24, align 8
  %26 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %17, i64 0, i32 1
  %27 = load double, double* %26, align 8
  %28 = fcmp oeq double %25, %27
  br i1 %28, label %29, label %37

29:                                               ; preds = %23
  %30 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %31 = bitcast %class.SkTCurve* %30 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %32 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %31, align 8
  %33 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %32, i64 2
  %34 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %33, align 8
  %35 = tail call dereferenceable(16) %struct.SkDPoint* %34(%class.SkTCurve* %30, i32 0) #9
  %36 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %2, double 0.000000e+00, double 0.000000e+00, %struct.SkDPoint* dereferenceable(16) %35) #9
  br label %37

37:                                               ; preds = %3, %29, %23
  %38 = phi i32 [ 5, %29 ], [ 0, %23 ], [ 0, %3 ]
  %39 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %40 = bitcast %class.SkTCurve* %39 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %41 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %40, align 8
  %42 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %41, i64 2
  %43 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %42, align 8
  %44 = tail call dereferenceable(16) %struct.SkDPoint* %43(%class.SkTCurve* %39, i32 0) #9
  %45 = load %class.SkTCurve*, %class.SkTCurve** %11, align 8
  %46 = bitcast %class.SkTCurve* %45 to i32 (%class.SkTCurve*)***
  %47 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %46, align 8
  %48 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %47, i64 18
  %49 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %48, align 8
  %50 = tail call i32 %49(%class.SkTCurve* %45) #9
  %51 = bitcast %class.SkTCurve* %45 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %52 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %51, align 8
  %53 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %52, i64 2
  %54 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %53, align 8
  %55 = tail call dereferenceable(16) %struct.SkDPoint* %54(%class.SkTCurve* %45, i32 %50) #9
  %56 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %44, i64 0, i32 0
  %57 = load double, double* %56, align 8
  %58 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %55, i64 0, i32 0
  %59 = load double, double* %58, align 8
  %60 = fcmp oeq double %57, %59
  br i1 %60, label %61, label %76

61:                                               ; preds = %37
  %62 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %44, i64 0, i32 1
  %63 = load double, double* %62, align 8
  %64 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %55, i64 0, i32 1
  %65 = load double, double* %64, align 8
  %66 = fcmp oeq double %63, %65
  br i1 %66, label %67, label %76

67:                                               ; preds = %61
  %68 = or i32 %38, 9
  %69 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %70 = bitcast %class.SkTCurve* %69 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %71 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %70, align 8
  %72 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %71, i64 2
  %73 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %72, align 8
  %74 = tail call dereferenceable(16) %struct.SkDPoint* %73(%class.SkTCurve* %69, i32 0) #9
  %75 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %2, double 0.000000e+00, double 1.000000e+00, %struct.SkDPoint* dereferenceable(16) %74) #9
  br label %76

76:                                               ; preds = %37, %67, %61
  %77 = phi i32 [ %68, %67 ], [ %38, %61 ], [ %38, %37 ]
  %78 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %79 = bitcast %class.SkTCurve* %78 to i32 (%class.SkTCurve*)***
  %80 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %79, align 8
  %81 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %80, i64 18
  %82 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %81, align 8
  %83 = tail call i32 %82(%class.SkTCurve* %78) #9
  %84 = bitcast %class.SkTCurve* %78 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %85 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %84, align 8
  %86 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %85, i64 2
  %87 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %86, align 8
  %88 = tail call dereferenceable(16) %struct.SkDPoint* %87(%class.SkTCurve* %78, i32 %83) #9
  %89 = load %class.SkTCurve*, %class.SkTCurve** %11, align 8
  %90 = bitcast %class.SkTCurve* %89 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %91 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %90, align 8
  %92 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %91, i64 2
  %93 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %92, align 8
  %94 = tail call dereferenceable(16) %struct.SkDPoint* %93(%class.SkTCurve* %89, i32 0) #9
  %95 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %88, i64 0, i32 0
  %96 = load double, double* %95, align 8
  %97 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %94, i64 0, i32 0
  %98 = load double, double* %97, align 8
  %99 = fcmp oeq double %96, %98
  br i1 %99, label %100, label %120

100:                                              ; preds = %76
  %101 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %88, i64 0, i32 1
  %102 = load double, double* %101, align 8
  %103 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %94, i64 0, i32 1
  %104 = load double, double* %103, align 8
  %105 = fcmp oeq double %102, %104
  br i1 %105, label %106, label %120

106:                                              ; preds = %100
  %107 = or i32 %77, 6
  %108 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %109 = bitcast %class.SkTCurve* %108 to i32 (%class.SkTCurve*)***
  %110 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %109, align 8
  %111 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %110, i64 18
  %112 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %111, align 8
  %113 = tail call i32 %112(%class.SkTCurve* %108) #9
  %114 = bitcast %class.SkTCurve* %108 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %115 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %114, align 8
  %116 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %115, i64 2
  %117 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %116, align 8
  %118 = tail call dereferenceable(16) %struct.SkDPoint* %117(%class.SkTCurve* %108, i32 %113) #9
  %119 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %2, double 1.000000e+00, double 0.000000e+00, %struct.SkDPoint* dereferenceable(16) %118) #9
  br label %120

120:                                              ; preds = %76, %106, %100
  %121 = phi i32 [ %107, %106 ], [ %77, %100 ], [ %77, %76 ]
  %122 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %123 = bitcast %class.SkTCurve* %122 to i32 (%class.SkTCurve*)***
  %124 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %123, align 8
  %125 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %124, i64 18
  %126 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %125, align 8
  %127 = tail call i32 %126(%class.SkTCurve* %122) #9
  %128 = bitcast %class.SkTCurve* %122 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %129 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %128, align 8
  %130 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %129, i64 2
  %131 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %130, align 8
  %132 = tail call dereferenceable(16) %struct.SkDPoint* %131(%class.SkTCurve* %122, i32 %127) #9
  %133 = load %class.SkTCurve*, %class.SkTCurve** %11, align 8
  %134 = bitcast %class.SkTCurve* %133 to i32 (%class.SkTCurve*)***
  %135 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %134, align 8
  %136 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %135, i64 18
  %137 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %136, align 8
  %138 = tail call i32 %137(%class.SkTCurve* %133) #9
  %139 = bitcast %class.SkTCurve* %133 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %140 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %139, align 8
  %141 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %140, i64 2
  %142 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %141, align 8
  %143 = tail call dereferenceable(16) %struct.SkDPoint* %142(%class.SkTCurve* %133, i32 %138) #9
  %144 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %132, i64 0, i32 0
  %145 = load double, double* %144, align 8
  %146 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %143, i64 0, i32 0
  %147 = load double, double* %146, align 8
  %148 = fcmp oeq double %145, %147
  br i1 %148, label %149, label %169

149:                                              ; preds = %120
  %150 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %132, i64 0, i32 1
  %151 = load double, double* %150, align 8
  %152 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %143, i64 0, i32 1
  %153 = load double, double* %152, align 8
  %154 = fcmp oeq double %151, %153
  br i1 %154, label %155, label %169

155:                                              ; preds = %149
  %156 = or i32 %121, 10
  %157 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %158 = bitcast %class.SkTCurve* %157 to i32 (%class.SkTCurve*)***
  %159 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %158, align 8
  %160 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %159, i64 18
  %161 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %160, align 8
  %162 = tail call i32 %161(%class.SkTCurve* %157) #9
  %163 = bitcast %class.SkTCurve* %157 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %164 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %163, align 8
  %165 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %164, i64 2
  %166 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %165, align 8
  %167 = tail call dereferenceable(16) %struct.SkDPoint* %166(%class.SkTCurve* %157, i32 %162) #9
  %168 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %2, double 1.000000e+00, double 1.000000e+00, %struct.SkDPoint* dereferenceable(16) %167) #9
  br label %169

169:                                              ; preds = %120, %155, %149
  %170 = phi i32 [ %156, %155 ], [ %121, %149 ], [ %121, %120 ]
  %171 = and i32 %170, 5
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %201

173:                                              ; preds = %169
  %174 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %175 = bitcast %class.SkTCurve* %174 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %176 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %175, align 8
  %177 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %176, i64 2
  %178 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %177, align 8
  %179 = tail call dereferenceable(16) %struct.SkDPoint* %178(%class.SkTCurve* %174, i32 0) #9
  %180 = load %class.SkTCurve*, %class.SkTCurve** %11, align 8
  %181 = bitcast %class.SkTCurve* %180 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %182 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %181, align 8
  %183 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %182, i64 2
  %184 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %183, align 8
  %185 = tail call dereferenceable(16) %struct.SkDPoint* %184(%class.SkTCurve* %180, i32 0) #9
  %186 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %179, %struct.SkDPoint* dereferenceable(16) %185)
  br i1 %186, label %187, label %201

187:                                              ; preds = %173
  %188 = or i32 %170, 5
  %189 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %190 = bitcast %class.SkTCurve* %189 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %191 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %190, align 8
  %192 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %191, i64 2
  %193 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %192, align 8
  %194 = tail call dereferenceable(16) %struct.SkDPoint* %193(%class.SkTCurve* %189, i32 0) #9
  %195 = load %class.SkTCurve*, %class.SkTCurve** %11, align 8
  %196 = bitcast %class.SkTCurve* %195 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %197 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %196, align 8
  %198 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %197, i64 2
  %199 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %198, align 8
  %200 = tail call dereferenceable(16) %struct.SkDPoint* %199(%class.SkTCurve* %195, i32 0) #9
  tail call void @_ZN15SkIntersections10insertNearEddRK8SkDPointS2_(%class.SkIntersections* %2, double 0.000000e+00, double 0.000000e+00, %struct.SkDPoint* dereferenceable(16) %194, %struct.SkDPoint* dereferenceable(16) %200) #9
  br label %201

201:                                              ; preds = %169, %187, %173
  %202 = phi i32 [ %170, %169 ], [ %188, %187 ], [ %170, %173 ]
  %203 = and i32 %202, 9
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %243

205:                                              ; preds = %201
  %206 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %207 = bitcast %class.SkTCurve* %206 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %208 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %207, align 8
  %209 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %208, i64 2
  %210 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %209, align 8
  %211 = tail call dereferenceable(16) %struct.SkDPoint* %210(%class.SkTCurve* %206, i32 0) #9
  %212 = load %class.SkTCurve*, %class.SkTCurve** %11, align 8
  %213 = bitcast %class.SkTCurve* %212 to i32 (%class.SkTCurve*)***
  %214 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %213, align 8
  %215 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %214, i64 18
  %216 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %215, align 8
  %217 = tail call i32 %216(%class.SkTCurve* %212) #9
  %218 = bitcast %class.SkTCurve* %212 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %219 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %218, align 8
  %220 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %219, i64 2
  %221 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %220, align 8
  %222 = tail call dereferenceable(16) %struct.SkDPoint* %221(%class.SkTCurve* %212, i32 %217) #9
  %223 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %211, %struct.SkDPoint* dereferenceable(16) %222)
  br i1 %223, label %224, label %243

224:                                              ; preds = %205
  %225 = or i32 %202, 9
  %226 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %227 = bitcast %class.SkTCurve* %226 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %228 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %227, align 8
  %229 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %228, i64 2
  %230 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %229, align 8
  %231 = tail call dereferenceable(16) %struct.SkDPoint* %230(%class.SkTCurve* %226, i32 0) #9
  %232 = load %class.SkTCurve*, %class.SkTCurve** %11, align 8
  %233 = bitcast %class.SkTCurve* %232 to i32 (%class.SkTCurve*)***
  %234 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %233, align 8
  %235 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %234, i64 18
  %236 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %235, align 8
  %237 = tail call i32 %236(%class.SkTCurve* %232) #9
  %238 = bitcast %class.SkTCurve* %232 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %239 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %238, align 8
  %240 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %239, i64 2
  %241 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %240, align 8
  %242 = tail call dereferenceable(16) %struct.SkDPoint* %241(%class.SkTCurve* %232, i32 %237) #9
  tail call void @_ZN15SkIntersections10insertNearEddRK8SkDPointS2_(%class.SkIntersections* %2, double 0.000000e+00, double 1.000000e+00, %struct.SkDPoint* dereferenceable(16) %231, %struct.SkDPoint* dereferenceable(16) %242) #9
  br label %243

243:                                              ; preds = %201, %224, %205
  %244 = phi i32 [ %202, %201 ], [ %225, %224 ], [ %202, %205 ]
  %245 = and i32 %244, 6
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %285

247:                                              ; preds = %243
  %248 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %249 = bitcast %class.SkTCurve* %248 to i32 (%class.SkTCurve*)***
  %250 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %249, align 8
  %251 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %250, i64 18
  %252 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %251, align 8
  %253 = tail call i32 %252(%class.SkTCurve* %248) #9
  %254 = bitcast %class.SkTCurve* %248 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %255 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %254, align 8
  %256 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %255, i64 2
  %257 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %256, align 8
  %258 = tail call dereferenceable(16) %struct.SkDPoint* %257(%class.SkTCurve* %248, i32 %253) #9
  %259 = load %class.SkTCurve*, %class.SkTCurve** %11, align 8
  %260 = bitcast %class.SkTCurve* %259 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %261 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %260, align 8
  %262 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %261, i64 2
  %263 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %262, align 8
  %264 = tail call dereferenceable(16) %struct.SkDPoint* %263(%class.SkTCurve* %259, i32 0) #9
  %265 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %258, %struct.SkDPoint* dereferenceable(16) %264)
  br i1 %265, label %266, label %285

266:                                              ; preds = %247
  %267 = or i32 %244, 6
  %268 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %269 = bitcast %class.SkTCurve* %268 to i32 (%class.SkTCurve*)***
  %270 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %269, align 8
  %271 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %270, i64 18
  %272 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %271, align 8
  %273 = tail call i32 %272(%class.SkTCurve* %268) #9
  %274 = bitcast %class.SkTCurve* %268 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %275 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %274, align 8
  %276 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %275, i64 2
  %277 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %276, align 8
  %278 = tail call dereferenceable(16) %struct.SkDPoint* %277(%class.SkTCurve* %268, i32 %273) #9
  %279 = load %class.SkTCurve*, %class.SkTCurve** %11, align 8
  %280 = bitcast %class.SkTCurve* %279 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %281 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %280, align 8
  %282 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %281, i64 2
  %283 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %282, align 8
  %284 = tail call dereferenceable(16) %struct.SkDPoint* %283(%class.SkTCurve* %279, i32 0) #9
  tail call void @_ZN15SkIntersections10insertNearEddRK8SkDPointS2_(%class.SkIntersections* %2, double 1.000000e+00, double 0.000000e+00, %struct.SkDPoint* dereferenceable(16) %278, %struct.SkDPoint* dereferenceable(16) %284) #9
  br label %285

285:                                              ; preds = %243, %266, %247
  %286 = phi i32 [ %244, %243 ], [ %267, %266 ], [ %244, %247 ]
  %287 = and i32 %286, 10
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %337

289:                                              ; preds = %285
  %290 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %291 = bitcast %class.SkTCurve* %290 to i32 (%class.SkTCurve*)***
  %292 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %291, align 8
  %293 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %292, i64 18
  %294 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %293, align 8
  %295 = tail call i32 %294(%class.SkTCurve* %290) #9
  %296 = bitcast %class.SkTCurve* %290 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %297 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %296, align 8
  %298 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %297, i64 2
  %299 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %298, align 8
  %300 = tail call dereferenceable(16) %struct.SkDPoint* %299(%class.SkTCurve* %290, i32 %295) #9
  %301 = load %class.SkTCurve*, %class.SkTCurve** %11, align 8
  %302 = bitcast %class.SkTCurve* %301 to i32 (%class.SkTCurve*)***
  %303 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %302, align 8
  %304 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %303, i64 18
  %305 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %304, align 8
  %306 = tail call i32 %305(%class.SkTCurve* %301) #9
  %307 = bitcast %class.SkTCurve* %301 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %308 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %307, align 8
  %309 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %308, i64 2
  %310 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %309, align 8
  %311 = tail call dereferenceable(16) %struct.SkDPoint* %310(%class.SkTCurve* %301, i32 %306) #9
  %312 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %300, %struct.SkDPoint* dereferenceable(16) %311)
  br i1 %312, label %313, label %337

313:                                              ; preds = %289
  %314 = or i32 %286, 10
  %315 = load %class.SkTCurve*, %class.SkTCurve** %4, align 8
  %316 = bitcast %class.SkTCurve* %315 to i32 (%class.SkTCurve*)***
  %317 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %316, align 8
  %318 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %317, i64 18
  %319 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %318, align 8
  %320 = tail call i32 %319(%class.SkTCurve* %315) #9
  %321 = bitcast %class.SkTCurve* %315 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %322 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %321, align 8
  %323 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %322, i64 2
  %324 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %323, align 8
  %325 = tail call dereferenceable(16) %struct.SkDPoint* %324(%class.SkTCurve* %315, i32 %320) #9
  %326 = load %class.SkTCurve*, %class.SkTCurve** %11, align 8
  %327 = bitcast %class.SkTCurve* %326 to i32 (%class.SkTCurve*)***
  %328 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %327, align 8
  %329 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %328, i64 18
  %330 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %329, align 8
  %331 = tail call i32 %330(%class.SkTCurve* %326) #9
  %332 = bitcast %class.SkTCurve* %326 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %333 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %332, align 8
  %334 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %333, i64 2
  %335 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %334, align 8
  %336 = tail call dereferenceable(16) %struct.SkDPoint* %335(%class.SkTCurve* %326, i32 %331) #9
  tail call void @_ZN15SkIntersections10insertNearEddRK8SkDPointS2_(%class.SkIntersections* %2, double 1.000000e+00, double 1.000000e+00, %struct.SkDPoint* dereferenceable(16) %325, %struct.SkDPoint* dereferenceable(16) %336) #9
  br label %337

337:                                              ; preds = %285, %313, %289
  %338 = phi i32 [ %286, %285 ], [ %314, %313 ], [ %286, %289 ]
  ret i32 %338
}

declare void @_ZN15SkIntersections10insertNearEddRK8SkDPointS2_(%class.SkIntersections*, double, double, %struct.SkDPoint* dereferenceable(16), %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkTSect12BinarySearchEPS_S0_P15SkIntersections(%class.SkTSect*, %class.SkTSect*, %class.SkIntersections*) local_unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca %class.SkTCoincident, align 16
  %6 = alloca %class.SkTCoincident, align 16
  %7 = alloca %class.SkTCoincident, align 16
  %8 = alloca %class.SkTCoincident, align 16
  %9 = alloca %struct.SkDPoint, align 8
  %10 = alloca %struct.SkDPoint, align 8
  %11 = alloca %struct.SkDPoint, align 8
  %12 = alloca %struct.SkDPoint, align 8
  %13 = alloca %struct.SkClosestSect, align 8
  %14 = alloca %struct.SkDPoint, align 8
  %15 = alloca %class.SkTCoincident, align 16
  %16 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %2, i64 0, i32 7
  store i8 1, i8* %16, align 8
  %17 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %2, i64 0, i32 5
  store i8 0, i8* %17, align 2
  %18 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %2, i64 0, i32 3, i64 0
  %19 = bitcast i16* %18 to i32*
  store i32 0, i32* %19, align 1
  %20 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 0
  %21 = load %class.SkTCurve*, %class.SkTCurve** %20, align 8
  %22 = bitcast %class.SkTCurve* %21 to i32 (%class.SkTCurve*)***
  %23 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %22, align 8
  %24 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %23, i64 15
  %25 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %24, align 8
  %26 = tail call i32 %25(%class.SkTCurve* %21) #9
  %27 = trunc i32 %26 to i8
  %28 = add i8 %27, 4
  %29 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %2, i64 0, i32 6
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 2
  %31 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  %32 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 2
  %33 = load %class.SkTSpan*, %class.SkTSpan** %32, align 8
  %34 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #9
  store i32 -1431655766, i32* %4, align 4
  %35 = call i32 @_ZN7SkTSect10intersectsEP7SkTSpanPS_S1_Pi(%class.SkTSect* %0, %class.SkTSpan* %31, %class.SkTSect* %1, %class.SkTSpan* %33, i32* nonnull %4)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %1312, label %37

37:                                               ; preds = %3
  %38 = icmp eq i32 %35, 2
  %39 = load i32, i32* %4, align 4
  %40 = icmp eq i32 %39, 2
  %41 = and i1 %38, %40
  br i1 %41, label %42, label %44

42:                                               ; preds = %37
  %43 = tail call i32 @_ZN7SkTSect9EndsEqualEPKS_S1_P15SkIntersections(%class.SkTSect* %0, %class.SkTSect* %1, %class.SkIntersections* %2)
  br label %1312

44:                                               ; preds = %37
  %45 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1
  %46 = icmp eq %class.SkSTArenaAlloc* %45, null
  %47 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1024
  %48 = bitcast i8* %47 to %class.SkArenaAlloc*
  %49 = select i1 %46, %class.SkArenaAlloc* null, %class.SkArenaAlloc* %48
  %50 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %49, i64 0, i32 1
  %51 = bitcast i8** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 0, %52
  %54 = and i64 %53, 7
  %55 = or i64 %54, 16
  %56 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %49, i64 0, i32 2
  %57 = bitcast i8** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %58, %52
  %60 = icmp ugt i64 %55, %59
  br i1 %60, label %61, label %65

61:                                               ; preds = %44
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %49, i32 16, i32 8) #9
  %62 = load i64, i64* %51, align 8
  %63 = sub i64 0, %62
  %64 = and i64 %63, 7
  br label %65

65:                                               ; preds = %44, %61
  %66 = phi i64 [ %62, %61 ], [ %52, %44 ]
  %67 = phi i64 [ %64, %61 ], [ %54, %44 ]
  %68 = inttoptr i64 %66 to i8*
  %69 = getelementptr inbounds i8, i8* %68, i64 %67
  %70 = getelementptr inbounds i8, i8* %69, i64 16
  store i8* %70, i8** %50, align 8
  %71 = getelementptr inbounds i8, i8* %69, i64 8
  %72 = bitcast i8* %71 to i64*
  store i64 0, i64* %72, align 8
  %73 = bitcast i8* %69 to %class.SkTSpan**
  store %class.SkTSpan* %33, %class.SkTSpan** %73, align 8
  %74 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %31, i64 0, i32 3
  %75 = bitcast %struct.SkTSpanBounded** %74 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %72, align 8
  %77 = bitcast %struct.SkTSpanBounded** %74 to i8**
  store i8* %69, i8** %77, align 8
  %78 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 1
  %79 = icmp eq %class.SkSTArenaAlloc* %78, null
  %80 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 1, i32 0, i32 0, i64 1024
  %81 = bitcast i8* %80 to %class.SkArenaAlloc*
  %82 = select i1 %79, %class.SkArenaAlloc* null, %class.SkArenaAlloc* %81
  %83 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %82, i64 0, i32 1
  %84 = bitcast i8** %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = sub i64 0, %85
  %87 = and i64 %86, 7
  %88 = or i64 %87, 16
  %89 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %82, i64 0, i32 2
  %90 = bitcast i8** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = sub i64 %91, %85
  %93 = icmp ugt i64 %88, %92
  br i1 %93, label %94, label %98

94:                                               ; preds = %65
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %82, i32 16, i32 8) #9
  %95 = load i64, i64* %84, align 8
  %96 = sub i64 0, %95
  %97 = and i64 %96, 7
  br label %98

98:                                               ; preds = %65, %94
  %99 = phi i64 [ %95, %94 ], [ %85, %65 ]
  %100 = phi i64 [ %97, %94 ], [ %87, %65 ]
  %101 = inttoptr i64 %99 to i8*
  %102 = getelementptr inbounds i8, i8* %101, i64 %100
  %103 = getelementptr inbounds i8, i8* %102, i64 16
  store i8* %103, i8** %83, align 8
  %104 = getelementptr inbounds i8, i8* %102, i64 8
  %105 = bitcast i8* %104 to i64*
  store i64 0, i64* %105, align 8
  %106 = bitcast i8* %102 to %class.SkTSpan**
  store %class.SkTSpan* %31, %class.SkTSpan** %106, align 8
  %107 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %33, i64 0, i32 3
  %108 = bitcast %struct.SkTSpanBounded** %107 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %105, align 8
  %110 = bitcast %struct.SkTSpanBounded** %107 to i8**
  store i8* %102, i8** %110, align 8
  %111 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 8
  %112 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 7
  %113 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 6
  %114 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 7
  %115 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 6
  %116 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 4
  %117 = bitcast %class.SkTSpan** %116 to i64*
  %118 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 0
  %119 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 1, i32 0, i32 0, i64 1032
  %120 = bitcast i8* %119 to i8**
  %121 = bitcast i8* %119 to i64*
  %122 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 1, i32 0, i32 0, i64 1040
  %123 = bitcast i8* %122 to i64*
  %124 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %1, i64 0, i32 5
  %125 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 4
  %126 = bitcast %class.SkTSpan** %125 to i64*
  %127 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1032
  %128 = bitcast i8* %127 to i8**
  %129 = bitcast i8* %127 to i64*
  %130 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 1, i32 0, i32 0, i64 1040
  %131 = bitcast i8* %130 to i64*
  %132 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 5
  %133 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  br label %134

134:                                              ; preds = %501, %98
  %135 = phi %class.SkTSpan* [ %133, %98 ], [ %499, %501 ]
  %136 = phi i32 [ 8, %98 ], [ %498, %501 ]
  %137 = phi double [ 0.000000e+00, %98 ], [ %497, %501 ]
  %138 = phi double [ 0.000000e+00, %98 ], [ %496, %501 ]
  %139 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %135, i64 0, i32 5
  %140 = load %class.SkTSpan*, %class.SkTSpan** %139, align 8
  %141 = icmp eq %class.SkTSpan* %140, null
  br i1 %141, label %176, label %142

142:                                              ; preds = %134
  %143 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %135, i64 0, i32 10
  %144 = load i8, i8* %143, align 8, !range !2
  br label %145

145:                                              ; preds = %170, %142
  %146 = phi %class.SkTSpan* [ %174, %170 ], [ %140, %142 ]
  %147 = phi i32 [ %150, %170 ], [ 10000, %142 ]
  %148 = phi i8 [ %172, %170 ], [ %144, %142 ]
  %149 = phi %class.SkTSpan* [ %171, %170 ], [ %135, %142 ]
  %150 = add nsw i32 %147, -1
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %154

152:                                              ; preds = %145
  %153 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 8
  store i8 1, i8* %153, align 2
  br label %1312

154:                                              ; preds = %145
  %155 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %146, i64 0, i32 10
  %156 = load i8, i8* %155, align 8, !range !2
  %157 = and i8 %148, 1
  %158 = icmp ne i8 %157, 0
  %159 = icmp eq i8 %156, 0
  %160 = and i1 %158, %159
  br i1 %160, label %169, label %161

161:                                              ; preds = %154
  %162 = icmp eq i8 %157, %156
  br i1 %162, label %163, label %170

163:                                              ; preds = %161
  %164 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %149, i64 0, i32 9
  %165 = load double, double* %164, align 8
  %166 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %146, i64 0, i32 9
  %167 = load double, double* %166, align 8
  %168 = fcmp olt double %165, %167
  br i1 %168, label %169, label %170

169:                                              ; preds = %163, %154
  br label %170

170:                                              ; preds = %169, %163, %161
  %171 = phi %class.SkTSpan* [ %146, %169 ], [ %149, %163 ], [ %149, %161 ]
  %172 = phi i8 [ %156, %169 ], [ %148, %163 ], [ %148, %161 ]
  %173 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %146, i64 0, i32 5
  %174 = load %class.SkTSpan*, %class.SkTSpan** %173, align 8
  %175 = icmp eq %class.SkTSpan* %174, null
  br i1 %175, label %176, label %145

176:                                              ; preds = %170, %134
  %177 = phi %class.SkTSpan* [ %135, %134 ], [ %171, %170 ]
  %178 = icmp eq %class.SkTSpan* %177, null
  br i1 %178, label %179, label %183

179:                                              ; preds = %176
  %180 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 8
  %181 = load i8, i8* %180, align 2, !range !2
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %504, label %1312

183:                                              ; preds = %176
  %184 = load %class.SkTSpan*, %class.SkTSpan** %32, align 8
  %185 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %184, i64 0, i32 5
  %186 = load %class.SkTSpan*, %class.SkTSpan** %185, align 8
  %187 = icmp eq %class.SkTSpan* %186, null
  br i1 %187, label %221, label %188

188:                                              ; preds = %183
  %189 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %184, i64 0, i32 10
  %190 = load i8, i8* %189, align 8, !range !2
  br label %191

191:                                              ; preds = %215, %188
  %192 = phi %class.SkTSpan* [ %219, %215 ], [ %186, %188 ]
  %193 = phi i32 [ %196, %215 ], [ 10000, %188 ]
  %194 = phi i8 [ %217, %215 ], [ %190, %188 ]
  %195 = phi %class.SkTSpan* [ %216, %215 ], [ %184, %188 ]
  %196 = add nsw i32 %193, -1
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %199

198:                                              ; preds = %191
  store i8 1, i8* %111, align 2
  br label %1312

199:                                              ; preds = %191
  %200 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %192, i64 0, i32 10
  %201 = load i8, i8* %200, align 8, !range !2
  %202 = and i8 %194, 1
  %203 = icmp ne i8 %202, 0
  %204 = icmp eq i8 %201, 0
  %205 = and i1 %203, %204
  br i1 %205, label %214, label %206

206:                                              ; preds = %199
  %207 = icmp eq i8 %202, %201
  br i1 %207, label %208, label %215

208:                                              ; preds = %206
  %209 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %195, i64 0, i32 9
  %210 = load double, double* %209, align 8
  %211 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %192, i64 0, i32 9
  %212 = load double, double* %211, align 8
  %213 = fcmp olt double %210, %212
  br i1 %213, label %214, label %215

214:                                              ; preds = %208, %199
  br label %215

215:                                              ; preds = %214, %208, %206
  %216 = phi %class.SkTSpan* [ %192, %214 ], [ %195, %208 ], [ %195, %206 ]
  %217 = phi i8 [ %201, %214 ], [ %194, %208 ], [ %194, %206 ]
  %218 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %192, i64 0, i32 5
  %219 = load %class.SkTSpan*, %class.SkTSpan** %218, align 8
  %220 = icmp eq %class.SkTSpan* %219, null
  br i1 %220, label %221, label %191

221:                                              ; preds = %215, %183
  %222 = phi %class.SkTSpan* [ %184, %183 ], [ %216, %215 ]
  %223 = icmp eq %class.SkTSpan* %222, null
  br i1 %223, label %238, label %224

224:                                              ; preds = %221
  %225 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %177, i64 0, i32 9
  %226 = load double, double* %225, align 8
  %227 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %222, i64 0, i32 9
  %228 = load double, double* %227, align 8
  %229 = fcmp ogt double %226, %228
  br i1 %229, label %238, label %230

230:                                              ; preds = %224
  %231 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %177, i64 0, i32 10
  %232 = load i8, i8* %231, align 8, !range !2
  %233 = icmp eq i8 %232, 0
  %234 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %222, i64 0, i32 10
  %235 = load i8, i8* %234, align 8, !range !2
  %236 = icmp eq i8 %235, 0
  br i1 %233, label %237, label %306

237:                                              ; preds = %230
  br i1 %236, label %307, label %238

238:                                              ; preds = %237, %221, %224
  %239 = load i8, i8* %111, align 2
  %240 = icmp eq i8 %239, 0
  br i1 %240, label %241, label %1312

241:                                              ; preds = %238
  %242 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %177, i64 0, i32 10
  %243 = load i8, i8* %242, align 8, !range !2
  %244 = icmp eq i8 %243, 0
  br i1 %244, label %245, label %504

245:                                              ; preds = %241
  store i8 0, i8* %112, align 1
  store i8 0, i8* %113, align 4
  store i8 0, i8* %114, align 1
  store i8 0, i8* %115, align 4
  %246 = load %class.SkTSpan*, %class.SkTSpan** %125, align 8
  %247 = icmp eq %class.SkTSpan* %246, null
  br i1 %247, label %252, label %248

248:                                              ; preds = %245
  %249 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %246, i64 0, i32 5
  %250 = bitcast %class.SkTSpan** %249 to i64*
  %251 = load i64, i64* %250, align 8
  store i64 %251, i64* %126, align 8
  br label %288

252:                                              ; preds = %245
  %253 = load %class.SkTCurve*, %class.SkTCurve** %20, align 8
  %254 = load i64, i64* %129, align 8
  %255 = sub i64 0, %254
  %256 = and i64 %255, 7
  %257 = or i64 %256, 160
  %258 = load i64, i64* %131, align 8
  %259 = sub i64 %258, %254
  %260 = icmp ugt i64 %257, %259
  br i1 %260, label %261, label %265

261:                                              ; preds = %252
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %48, i32 160, i32 8) #9
  %262 = load i64, i64* %129, align 8
  %263 = sub i64 0, %262
  %264 = and i64 %263, 7
  br label %265

265:                                              ; preds = %261, %252
  %266 = phi i64 [ %262, %261 ], [ %254, %252 ]
  %267 = phi i64 [ %264, %261 ], [ %256, %252 ]
  %268 = inttoptr i64 %266 to i8*
  %269 = getelementptr inbounds i8, i8* %268, i64 %267
  %270 = getelementptr inbounds i8, i8* %269, i64 160
  store i8* %270, i8** %128, align 8
  %271 = bitcast i8* %269 to %class.SkTSpan*
  %272 = getelementptr inbounds i8, i8* %269, i64 24
  %273 = bitcast i8* %272 to double*
  store double -1.000000e+00, double* %273, align 8
  %274 = getelementptr inbounds i8, i8* %269, i64 32
  store i8 0, i8* %274, align 8
  %275 = getelementptr inbounds i8, i8* %269, i64 8
  %276 = bitcast i8* %275 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %276, align 8
  %277 = getelementptr inbounds i8, i8* %269, i64 56
  %278 = bitcast i8* %277 to double*
  store double -1.000000e+00, double* %278, align 8
  %279 = getelementptr inbounds i8, i8* %269, i64 64
  store i8 0, i8* %279, align 8
  %280 = getelementptr inbounds i8, i8* %269, i64 40
  %281 = bitcast i8* %280 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %281, align 8
  %282 = bitcast %class.SkTCurve* %253 to %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)***
  %283 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)**, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*** %282, align 8
  %284 = getelementptr inbounds %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %283, i64 14
  %285 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %284, align 8
  %286 = tail call %class.SkTCurve* %285(%class.SkTCurve* %253, %class.SkArenaAlloc* dereferenceable(32) %48) #9
  %287 = bitcast i8* %269 to %class.SkTCurve**
  store %class.SkTCurve* %286, %class.SkTCurve** %287, align 8
  br label %288

288:                                              ; preds = %248, %265
  %289 = phi %class.SkTSpan* [ %246, %248 ], [ %271, %265 ]
  %290 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %289, i64 0, i32 3
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %290, align 8
  %291 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %289, i64 0, i32 11
  store i8 0, i8* %291, align 1
  %292 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %289, i64 0, i32 14
  store i8 0, i8* %292, align 4
  %293 = load i32, i32* %132, align 8
  %294 = add nsw i32 %293, 1
  store i32 %294, i32* %132, align 8
  %295 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %177, i64 0, i32 7
  %296 = load double, double* %295, align 8
  %297 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %177, i64 0, i32 8
  %298 = load double, double* %297, align 8
  %299 = fadd double %296, %298
  %300 = fmul double %299, 5.000000e-01
  %301 = tail call zeroext i1 @_ZN7SkTSpan7splitAtEPS_dP12SkArenaAlloc(%class.SkTSpan* %289, %class.SkTSpan* nonnull %177, double %300, %class.SkArenaAlloc* %49) #9
  br i1 %301, label %302, label %504

302:                                              ; preds = %288
  %303 = tail call zeroext i1 @_ZN7SkTSect4trimEP7SkTSpanPS_(%class.SkTSect* %0, %class.SkTSpan* nonnull %177, %class.SkTSect* %1)
  br i1 %303, label %304, label %1312

304:                                              ; preds = %302
  %305 = tail call zeroext i1 @_ZN7SkTSect4trimEP7SkTSpanPS_(%class.SkTSect* %0, %class.SkTSpan* %289, %class.SkTSect* %1)
  br i1 %305, label %368, label %1312

306:                                              ; preds = %230
  br i1 %236, label %307, label %504

307:                                              ; preds = %237, %306
  store i8 0, i8* %112, align 1
  store i8 0, i8* %113, align 4
  store i8 0, i8* %114, align 1
  store i8 0, i8* %115, align 4
  %308 = load %class.SkTSpan*, %class.SkTSpan** %116, align 8
  %309 = icmp eq %class.SkTSpan* %308, null
  br i1 %309, label %314, label %310

310:                                              ; preds = %307
  %311 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %308, i64 0, i32 5
  %312 = bitcast %class.SkTSpan** %311 to i64*
  %313 = load i64, i64* %312, align 8
  store i64 %313, i64* %117, align 8
  br label %350

314:                                              ; preds = %307
  %315 = load %class.SkTCurve*, %class.SkTCurve** %118, align 8
  %316 = load i64, i64* %121, align 8
  %317 = sub i64 0, %316
  %318 = and i64 %317, 7
  %319 = or i64 %318, 160
  %320 = load i64, i64* %123, align 8
  %321 = sub i64 %320, %316
  %322 = icmp ugt i64 %319, %321
  br i1 %322, label %323, label %327

323:                                              ; preds = %314
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %81, i32 160, i32 8) #9
  %324 = load i64, i64* %121, align 8
  %325 = sub i64 0, %324
  %326 = and i64 %325, 7
  br label %327

327:                                              ; preds = %323, %314
  %328 = phi i64 [ %324, %323 ], [ %316, %314 ]
  %329 = phi i64 [ %326, %323 ], [ %318, %314 ]
  %330 = inttoptr i64 %328 to i8*
  %331 = getelementptr inbounds i8, i8* %330, i64 %329
  %332 = getelementptr inbounds i8, i8* %331, i64 160
  store i8* %332, i8** %120, align 8
  %333 = bitcast i8* %331 to %class.SkTSpan*
  %334 = getelementptr inbounds i8, i8* %331, i64 24
  %335 = bitcast i8* %334 to double*
  store double -1.000000e+00, double* %335, align 8
  %336 = getelementptr inbounds i8, i8* %331, i64 32
  store i8 0, i8* %336, align 8
  %337 = getelementptr inbounds i8, i8* %331, i64 8
  %338 = bitcast i8* %337 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %338, align 8
  %339 = getelementptr inbounds i8, i8* %331, i64 56
  %340 = bitcast i8* %339 to double*
  store double -1.000000e+00, double* %340, align 8
  %341 = getelementptr inbounds i8, i8* %331, i64 64
  store i8 0, i8* %341, align 8
  %342 = getelementptr inbounds i8, i8* %331, i64 40
  %343 = bitcast i8* %342 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %343, align 8
  %344 = bitcast %class.SkTCurve* %315 to %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)***
  %345 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)**, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*** %344, align 8
  %346 = getelementptr inbounds %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %345, i64 14
  %347 = load %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)*, %class.SkTCurve* (%class.SkTCurve*, %class.SkArenaAlloc*)** %346, align 8
  %348 = tail call %class.SkTCurve* %347(%class.SkTCurve* %315, %class.SkArenaAlloc* dereferenceable(32) %81) #9
  %349 = bitcast i8* %331 to %class.SkTCurve**
  store %class.SkTCurve* %348, %class.SkTCurve** %349, align 8
  br label %350

350:                                              ; preds = %310, %327
  %351 = phi %class.SkTSpan* [ %308, %310 ], [ %333, %327 ]
  %352 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %351, i64 0, i32 3
  store %struct.SkTSpanBounded* null, %struct.SkTSpanBounded** %352, align 8
  %353 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %351, i64 0, i32 11
  store i8 0, i8* %353, align 1
  %354 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %351, i64 0, i32 14
  store i8 0, i8* %354, align 4
  %355 = load i32, i32* %124, align 8
  %356 = add nsw i32 %355, 1
  store i32 %356, i32* %124, align 8
  %357 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %222, i64 0, i32 7
  %358 = load double, double* %357, align 8
  %359 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %222, i64 0, i32 8
  %360 = load double, double* %359, align 8
  %361 = fadd double %358, %360
  %362 = fmul double %361, 5.000000e-01
  %363 = tail call zeroext i1 @_ZN7SkTSpan7splitAtEPS_dP12SkArenaAlloc(%class.SkTSpan* %351, %class.SkTSpan* nonnull %222, double %362, %class.SkArenaAlloc* %82) #9
  br i1 %363, label %364, label %504

364:                                              ; preds = %350
  %365 = tail call zeroext i1 @_ZN7SkTSect4trimEP7SkTSpanPS_(%class.SkTSect* %1, %class.SkTSpan* nonnull %222, %class.SkTSect* %0)
  br i1 %365, label %366, label %1312

366:                                              ; preds = %364
  %367 = tail call zeroext i1 @_ZN7SkTSect4trimEP7SkTSpanPS_(%class.SkTSect* %1, %class.SkTSpan* %351, %class.SkTSect* %0)
  br i1 %367, label %368, label %1312

368:                                              ; preds = %366, %304
  %369 = load i32, i32* %132, align 8
  %370 = icmp sgt i32 %369, 8
  br i1 %370, label %371, label %495

371:                                              ; preds = %368
  %372 = load i32, i32* %124, align 8
  %373 = icmp sgt i32 %372, 8
  br i1 %373, label %374, label %495

374:                                              ; preds = %371
  %375 = icmp eq i32 %136, 8
  br i1 %375, label %376, label %403

376:                                              ; preds = %374
  %377 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  %378 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %377, i64 0, i32 7
  %379 = load double, double* %378, align 8
  %380 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %377, i64 0, i32 5
  %381 = load %class.SkTSpan*, %class.SkTSpan** %380, align 8
  %382 = icmp eq %class.SkTSpan* %381, null
  br i1 %382, label %399, label %383

383:                                              ; preds = %376, %389
  %384 = phi %class.SkTSpan* [ %397, %389 ], [ %381, %376 ]
  %385 = phi i32 [ %387, %389 ], [ 100000, %376 ]
  %386 = phi %class.SkTSpan* [ %395, %389 ], [ %377, %376 ]
  %387 = add nsw i32 %385, -1
  %388 = icmp eq i32 %387, 0
  br i1 %388, label %399, label %389

389:                                              ; preds = %383
  %390 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %384, i64 0, i32 8
  %391 = load double, double* %390, align 8
  %392 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %386, i64 0, i32 8
  %393 = load double, double* %392, align 8
  %394 = fcmp ogt double %391, %393
  %395 = select i1 %394, %class.SkTSpan* %384, %class.SkTSpan* %386
  %396 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %384, i64 0, i32 5
  %397 = load %class.SkTSpan*, %class.SkTSpan** %396, align 8
  %398 = icmp eq %class.SkTSpan* %397, null
  br i1 %398, label %399, label %383

399:                                              ; preds = %383, %389, %376
  %400 = phi %class.SkTSpan* [ %377, %376 ], [ null, %383 ], [ %395, %389 ]
  %401 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %400, i64 0, i32 8
  %402 = load double, double* %401, align 8
  br label %403

403:                                              ; preds = %399, %374
  %404 = phi double [ %379, %399 ], [ %137, %374 ]
  %405 = phi double [ %402, %399 ], [ %138, %374 ]
  %406 = tail call zeroext i1 @_ZN7SkTSect15coincidentCheckEPS_(%class.SkTSect* %0, %class.SkTSect* %1)
  br i1 %406, label %407, label %1312

407:                                              ; preds = %403
  %408 = add nsw i32 %136, -1
  %409 = icmp eq i32 %408, 0
  br i1 %409, label %410, label %417

410:                                              ; preds = %407
  %411 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  %412 = icmp eq %class.SkTSpan* %411, null
  br i1 %412, label %417, label %413

413:                                              ; preds = %410
  %414 = load %class.SkTSpan*, %class.SkTSpan** %32, align 8
  %415 = icmp eq %class.SkTSpan* %414, null
  br i1 %415, label %417, label %416

416:                                              ; preds = %413
  tail call void @_ZN7SkTSect15coincidentForceEPS_dd(%class.SkTSect* %0, %class.SkTSect* %1, double %404, double %405)
  br label %417

417:                                              ; preds = %413, %410, %407, %416
  %418 = load i32, i32* %132, align 8
  %419 = icmp sgt i32 %418, 8
  br i1 %419, label %420, label %495

420:                                              ; preds = %417
  %421 = load i32, i32* %124, align 8
  %422 = icmp sgt i32 %421, 8
  br i1 %422, label %423, label %495

423:                                              ; preds = %420
  %424 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  %425 = icmp eq %class.SkTSpan* %424, null
  br i1 %425, label %1312, label %426

426:                                              ; preds = %423
  %427 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %424, i64 0, i32 5
  %428 = load %class.SkTSpan*, %class.SkTSpan** %427, align 8
  %429 = icmp eq %class.SkTSpan* %428, null
  br i1 %429, label %446, label %430

430:                                              ; preds = %426, %436
  %431 = phi %class.SkTSpan* [ %444, %436 ], [ %428, %426 ]
  %432 = phi i32 [ %434, %436 ], [ 100000, %426 ]
  %433 = phi %class.SkTSpan* [ %442, %436 ], [ %424, %426 ]
  %434 = add nsw i32 %432, -1
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %446, label %436

436:                                              ; preds = %430
  %437 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %431, i64 0, i32 8
  %438 = load double, double* %437, align 8
  %439 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %433, i64 0, i32 8
  %440 = load double, double* %439, align 8
  %441 = fcmp ogt double %438, %440
  %442 = select i1 %441, %class.SkTSpan* %431, %class.SkTSpan* %433
  %443 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %431, i64 0, i32 5
  %444 = load %class.SkTSpan*, %class.SkTSpan** %443, align 8
  %445 = icmp eq %class.SkTSpan* %444, null
  br i1 %445, label %446, label %430

446:                                              ; preds = %430, %436, %426
  %447 = phi %class.SkTSpan* [ %424, %426 ], [ null, %430 ], [ %442, %436 ]
  tail call void @_ZN7SkTSect21computePerpendicularsEPS_P7SkTSpanS2_(%class.SkTSect* %0, %class.SkTSect* %1, %class.SkTSpan* nonnull %424, %class.SkTSpan* %447)
  %448 = load %class.SkTSpan*, %class.SkTSpan** %32, align 8
  %449 = icmp eq %class.SkTSpan* %448, null
  br i1 %449, label %1312, label %450

450:                                              ; preds = %446
  %451 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %448, i64 0, i32 5
  %452 = load %class.SkTSpan*, %class.SkTSpan** %451, align 8
  %453 = icmp eq %class.SkTSpan* %452, null
  br i1 %453, label %470, label %454

454:                                              ; preds = %450, %460
  %455 = phi %class.SkTSpan* [ %468, %460 ], [ %452, %450 ]
  %456 = phi i32 [ %458, %460 ], [ 100000, %450 ]
  %457 = phi %class.SkTSpan* [ %466, %460 ], [ %448, %450 ]
  %458 = add nsw i32 %456, -1
  %459 = icmp eq i32 %458, 0
  br i1 %459, label %470, label %460

460:                                              ; preds = %454
  %461 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %455, i64 0, i32 8
  %462 = load double, double* %461, align 8
  %463 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %457, i64 0, i32 8
  %464 = load double, double* %463, align 8
  %465 = fcmp ogt double %462, %464
  %466 = select i1 %465, %class.SkTSpan* %455, %class.SkTSpan* %457
  %467 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %455, i64 0, i32 5
  %468 = load %class.SkTSpan*, %class.SkTSpan** %467, align 8
  %469 = icmp eq %class.SkTSpan* %468, null
  br i1 %469, label %470, label %454

470:                                              ; preds = %454, %460, %450
  %471 = phi %class.SkTSpan* [ %448, %450 ], [ null, %454 ], [ %466, %460 ]
  tail call void @_ZN7SkTSect21computePerpendicularsEPS_P7SkTSpanS2_(%class.SkTSect* %1, %class.SkTSect* %0, %class.SkTSpan* nonnull %448, %class.SkTSpan* %471)
  %472 = tail call zeroext i1 @_ZN7SkTSect21removeByPerpendicularEPS_(%class.SkTSect* %0, %class.SkTSect* %1)
  br i1 %472, label %473, label %1312

473:                                              ; preds = %470
  %474 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  %475 = icmp eq %class.SkTSpan* %474, null
  br i1 %475, label %486, label %476

476:                                              ; preds = %473, %476
  %477 = phi %class.SkTSpan* [ %484, %476 ], [ %474, %473 ]
  %478 = phi i32 [ %482, %476 ], [ 0, %473 ]
  %479 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %477, i64 0, i32 10
  %480 = load i8, i8* %479, align 8, !range !2
  %481 = zext i8 %480 to i32
  %482 = add nuw nsw i32 %478, %481
  %483 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %477, i64 0, i32 5
  %484 = load %class.SkTSpan*, %class.SkTSpan** %483, align 8
  %485 = icmp eq %class.SkTSpan* %484, null
  br i1 %485, label %486, label %476

486:                                              ; preds = %476, %473
  %487 = phi i32 [ 0, %473 ], [ %482, %476 ]
  %488 = load %class.SkTCurve*, %class.SkTCurve** %20, align 8
  %489 = bitcast %class.SkTCurve* %488 to i32 (%class.SkTCurve*)***
  %490 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %489, align 8
  %491 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %490, i64 15
  %492 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %491, align 8
  %493 = tail call i32 %492(%class.SkTCurve* %488) #9
  %494 = icmp sgt i32 %487, %493
  br i1 %494, label %504, label %495

495:                                              ; preds = %371, %368, %486, %420, %417
  %496 = phi double [ %405, %486 ], [ %405, %420 ], [ %405, %417 ], [ %138, %368 ], [ %138, %371 ]
  %497 = phi double [ %404, %486 ], [ %404, %420 ], [ %404, %417 ], [ %137, %368 ], [ %137, %371 ]
  %498 = phi i32 [ %408, %486 ], [ %408, %420 ], [ %408, %417 ], [ %136, %368 ], [ %136, %371 ]
  %499 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  %500 = icmp eq %class.SkTSpan* %499, null
  br i1 %500, label %504, label %501

501:                                              ; preds = %495
  %502 = load %class.SkTSpan*, %class.SkTSpan** %32, align 8
  %503 = icmp eq %class.SkTSpan* %502, null
  br i1 %503, label %504, label %134

504:                                              ; preds = %350, %288, %501, %495, %486, %306, %241, %179
  %505 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %0, i64 0, i32 3
  %506 = load %class.SkTSpan*, %class.SkTSpan** %505, align 8
  %507 = icmp eq %class.SkTSpan* %506, null
  br i1 %507, label %574, label %508

508:                                              ; preds = %504
  %509 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %506, i64 0, i32 5
  %510 = load %class.SkTSpan*, %class.SkTSpan** %509, align 8
  %511 = icmp eq %class.SkTSpan* %510, null
  br i1 %511, label %514, label %512

512:                                              ; preds = %508
  tail call void @_ZN7SkTSect16mergeCoincidenceEPS_(%class.SkTSect* %0, %class.SkTSect* %1)
  %513 = load %class.SkTSpan*, %class.SkTSpan** %505, align 8
  br label %514

514:                                              ; preds = %508, %512
  %515 = phi %class.SkTSpan* [ %513, %512 ], [ %506, %508 ]
  %516 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %2, i64 0, i32 3, i64 1
  br label %517

517:                                              ; preds = %570, %514
  %518 = phi %class.SkTSpan* [ %515, %514 ], [ %572, %570 ]
  %519 = icmp eq %class.SkTSpan* %518, null
  br i1 %519, label %1312, label %520

520:                                              ; preds = %517
  %521 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %518, i64 0, i32 1, i32 2
  %522 = load i8, i8* %521, align 1, !range !2
  %523 = icmp eq i8 %522, 0
  br i1 %523, label %570, label %524

524:                                              ; preds = %520
  %525 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %518, i64 0, i32 2, i32 2
  %526 = load i8, i8* %525, align 1, !range !2
  %527 = icmp eq i8 %526, 0
  br i1 %527, label %570, label %528

528:                                              ; preds = %524
  %529 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %518, i64 0, i32 1, i32 1
  %530 = load double, double* %529, align 8
  %531 = fcmp olt double %530, 0.000000e+00
  br i1 %531, label %1312, label %532

532:                                              ; preds = %528
  %533 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %518, i64 0, i32 7
  %534 = load double, double* %533, align 8
  %535 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %518, i64 0, i32 0
  %536 = load %class.SkTCurve*, %class.SkTCurve** %535, align 8
  %537 = bitcast %class.SkTCurve* %536 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %538 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %537, align 8
  %539 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %538, i64 3
  %540 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %539, align 8
  %541 = tail call dereferenceable(16) %struct.SkDPoint* %540(%class.SkTCurve* %536, i32 0) #9
  %542 = tail call i32 @_ZN15SkIntersections16insertCoincidentEddRK8SkDPoint(%class.SkIntersections* %2, double %534, double %530, %struct.SkDPoint* dereferenceable(16) %541) #9
  %543 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %518, i64 0, i32 8
  %544 = load double, double* %543, align 8
  %545 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %518, i64 0, i32 2, i32 1
  %546 = load double, double* %545, align 8
  %547 = load %class.SkTCurve*, %class.SkTCurve** %535, align 8
  %548 = bitcast %class.SkTCurve* %547 to i32 (%class.SkTCurve*)***
  %549 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %548, align 8
  %550 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %549, i64 18
  %551 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %550, align 8
  %552 = tail call i32 %551(%class.SkTCurve* %547) #9
  %553 = bitcast %class.SkTCurve* %547 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %554 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %553, align 8
  %555 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %554, i64 3
  %556 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %555, align 8
  %557 = tail call dereferenceable(16) %struct.SkDPoint* %556(%class.SkTCurve* %547, i32 %552) #9
  %558 = tail call i32 @_ZN15SkIntersections16insertCoincidentEddRK8SkDPoint(%class.SkIntersections* %2, double %544, double %546, %struct.SkDPoint* dereferenceable(16) %557) #9
  %559 = icmp slt i32 %558, 0
  %560 = icmp sgt i32 %542, -1
  %561 = and i1 %560, %559
  br i1 %561, label %562, label %570

562:                                              ; preds = %532
  %563 = shl i32 1, %542
  %564 = load i16, i16* %18, align 8
  %565 = trunc i32 %563 to i16
  %566 = xor i16 %565, -1
  %567 = and i16 %564, %566
  store i16 %567, i16* %18, align 8
  %568 = load i16, i16* %516, align 2
  %569 = and i16 %568, %566
  store i16 %569, i16* %516, align 2
  br label %570

570:                                              ; preds = %524, %520, %562, %532
  %571 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %518, i64 0, i32 5
  %572 = load %class.SkTSpan*, %class.SkTSpan** %571, align 8
  %573 = icmp eq %class.SkTSpan* %572, null
  br i1 %573, label %574, label %517

574:                                              ; preds = %570, %504
  %575 = tail call i32 @_ZN7SkTSect9EndsEqualEPKS_S1_P15SkIntersections(%class.SkTSect* %0, %class.SkTSect* %1, %class.SkIntersections* %2)
  %576 = load i8, i8* %113, align 4, !range !2
  %577 = icmp ne i8 %576, 0
  %578 = and i32 %575, 1
  %579 = icmp eq i32 %578, 0
  %580 = and i1 %577, %579
  br i1 %580, label %581, label %601

581:                                              ; preds = %574
  %582 = bitcast %class.SkTCoincident* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %582) #9
  %583 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %5, i64 0, i32 1
  %584 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %5, i64 0, i32 2
  %585 = bitcast i8* %584 to i64*
  store i64 -6148914691236517376, i64* %585, align 8
  store double -1.000000e+00, double* %583, align 16
  %586 = bitcast %class.SkTCoincident* %5 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %586, align 16
  %587 = load %class.SkTCurve*, %class.SkTCurve** %20, align 8
  %588 = bitcast %class.SkTCurve* %587 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %589 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %588, align 8
  %590 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %589, i64 2
  %591 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %590, align 8
  %592 = tail call dereferenceable(16) %struct.SkDPoint* %591(%class.SkTCurve* %587, i32 0) #9
  %593 = load %class.SkTCurve*, %class.SkTCurve** %118, align 8
  call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* nonnull %5, %class.SkTCurve* dereferenceable(8) %587, double 0.000000e+00, %struct.SkDPoint* dereferenceable(16) %592, %class.SkTCurve* dereferenceable(8) %593)
  %594 = load i8, i8* %584, align 8, !range !2
  %595 = icmp eq i8 %594, 0
  br i1 %595, label %600, label %596

596:                                              ; preds = %581
  %597 = load double, double* %583, align 16
  %598 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %5, i64 0, i32 0
  %599 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %2, double 0.000000e+00, double %597, %struct.SkDPoint* nonnull dereferenceable(16) %598) #9
  br label %600

600:                                              ; preds = %581, %596
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %582) #9
  br label %601

601:                                              ; preds = %574, %600
  %602 = load i8, i8* %112, align 1, !range !2
  %603 = icmp ne i8 %602, 0
  %604 = and i32 %575, 2
  %605 = icmp eq i32 %604, 0
  %606 = and i1 %605, %603
  br i1 %606, label %607, label %632

607:                                              ; preds = %601
  %608 = bitcast %class.SkTCoincident* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %608) #9
  %609 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %6, i64 0, i32 1
  %610 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %6, i64 0, i32 2
  %611 = bitcast i8* %610 to i64*
  store i64 -6148914691236517376, i64* %611, align 8
  store double -1.000000e+00, double* %609, align 16
  %612 = bitcast %class.SkTCoincident* %6 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %612, align 16
  %613 = load %class.SkTCurve*, %class.SkTCurve** %20, align 8
  %614 = bitcast %class.SkTCurve* %613 to i32 (%class.SkTCurve*)***
  %615 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %614, align 8
  %616 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %615, i64 18
  %617 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %616, align 8
  %618 = call i32 %617(%class.SkTCurve* %613) #9
  %619 = bitcast %class.SkTCurve* %613 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %620 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %619, align 8
  %621 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %620, i64 2
  %622 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %621, align 8
  %623 = call dereferenceable(16) %struct.SkDPoint* %622(%class.SkTCurve* %613, i32 %618) #9
  %624 = load %class.SkTCurve*, %class.SkTCurve** %118, align 8
  call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* nonnull %6, %class.SkTCurve* dereferenceable(8) %613, double 1.000000e+00, %struct.SkDPoint* dereferenceable(16) %623, %class.SkTCurve* dereferenceable(8) %624)
  %625 = load i8, i8* %610, align 8, !range !2
  %626 = icmp eq i8 %625, 0
  br i1 %626, label %631, label %627

627:                                              ; preds = %607
  %628 = load double, double* %609, align 16
  %629 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %6, i64 0, i32 0
  %630 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %2, double 1.000000e+00, double %628, %struct.SkDPoint* nonnull dereferenceable(16) %629) #9
  br label %631

631:                                              ; preds = %607, %627
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %608) #9
  br label %632

632:                                              ; preds = %601, %631
  %633 = load i8, i8* %115, align 4, !range !2
  %634 = icmp ne i8 %633, 0
  %635 = and i32 %575, 4
  %636 = icmp eq i32 %635, 0
  %637 = and i1 %636, %634
  br i1 %637, label %638, label %658

638:                                              ; preds = %632
  %639 = bitcast %class.SkTCoincident* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %639) #9
  %640 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %7, i64 0, i32 1
  %641 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %7, i64 0, i32 2
  %642 = bitcast i8* %641 to i64*
  store i64 -6148914691236517376, i64* %642, align 8
  store double -1.000000e+00, double* %640, align 16
  %643 = bitcast %class.SkTCoincident* %7 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %643, align 16
  %644 = load %class.SkTCurve*, %class.SkTCurve** %118, align 8
  %645 = bitcast %class.SkTCurve* %644 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %646 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %645, align 8
  %647 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %646, i64 2
  %648 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %647, align 8
  %649 = call dereferenceable(16) %struct.SkDPoint* %648(%class.SkTCurve* %644, i32 0) #9
  %650 = load %class.SkTCurve*, %class.SkTCurve** %20, align 8
  call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* nonnull %7, %class.SkTCurve* dereferenceable(8) %644, double 0.000000e+00, %struct.SkDPoint* dereferenceable(16) %649, %class.SkTCurve* dereferenceable(8) %650)
  %651 = load i8, i8* %641, align 8, !range !2
  %652 = icmp eq i8 %651, 0
  br i1 %652, label %657, label %653

653:                                              ; preds = %638
  %654 = load double, double* %640, align 16
  %655 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %7, i64 0, i32 0
  %656 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %2, double %654, double 0.000000e+00, %struct.SkDPoint* nonnull dereferenceable(16) %655) #9
  br label %657

657:                                              ; preds = %638, %653
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %639) #9
  br label %658

658:                                              ; preds = %632, %657
  %659 = load i8, i8* %114, align 1, !range !2
  %660 = icmp ne i8 %659, 0
  %661 = and i32 %575, 8
  %662 = icmp eq i32 %661, 0
  %663 = and i1 %662, %660
  br i1 %663, label %664, label %689

664:                                              ; preds = %658
  %665 = bitcast %class.SkTCoincident* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %665) #9
  %666 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %8, i64 0, i32 1
  %667 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %8, i64 0, i32 2
  %668 = bitcast i8* %667 to i64*
  store i64 -6148914691236517376, i64* %668, align 8
  store double -1.000000e+00, double* %666, align 16
  %669 = bitcast %class.SkTCoincident* %8 to <2 x double>*
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %669, align 16
  %670 = load %class.SkTCurve*, %class.SkTCurve** %118, align 8
  %671 = bitcast %class.SkTCurve* %670 to i32 (%class.SkTCurve*)***
  %672 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %671, align 8
  %673 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %672, i64 18
  %674 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %673, align 8
  %675 = call i32 %674(%class.SkTCurve* %670) #9
  %676 = bitcast %class.SkTCurve* %670 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %677 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %676, align 8
  %678 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %677, i64 2
  %679 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %678, align 8
  %680 = call dereferenceable(16) %struct.SkDPoint* %679(%class.SkTCurve* %670, i32 %675) #9
  %681 = load %class.SkTCurve*, %class.SkTCurve** %20, align 8
  call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* nonnull %8, %class.SkTCurve* dereferenceable(8) %670, double 1.000000e+00, %struct.SkDPoint* dereferenceable(16) %680, %class.SkTCurve* dereferenceable(8) %681)
  %682 = load i8, i8* %667, align 8, !range !2
  %683 = icmp eq i8 %682, 0
  br i1 %683, label %688, label %684

684:                                              ; preds = %664
  %685 = load double, double* %666, align 16
  %686 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %8, i64 0, i32 0
  %687 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %2, double %685, double 1.000000e+00, %struct.SkDPoint* nonnull dereferenceable(16) %686) #9
  br label %688

688:                                              ; preds = %664, %684
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %665) #9
  br label %689

689:                                              ; preds = %658, %688
  %690 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  %691 = icmp eq %class.SkTSpan* %690, null
  br i1 %691, label %1312, label %692

692:                                              ; preds = %689
  %693 = load %class.SkTSpan*, %class.SkTSpan** %32, align 8
  %694 = icmp eq %class.SkTSpan* %693, null
  br i1 %694, label %1312, label %695

695:                                              ; preds = %692
  %696 = load %class.SkTSpan*, %class.SkTSpan** %125, align 8
  %697 = icmp eq %class.SkTSpan* %696, null
  br i1 %697, label %731, label %698

698:                                              ; preds = %695, %729
  %699 = phi %class.SkTSpan* [ %701, %729 ], [ %696, %695 ]
  %700 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %699, i64 0, i32 5
  %701 = load %class.SkTSpan*, %class.SkTSpan** %700, align 8
  %702 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %699, i64 0, i32 10
  %703 = load i8, i8* %702, align 8, !range !2
  %704 = icmp eq i8 %703, 0
  br i1 %704, label %729, label %705

705:                                              ; preds = %698
  %706 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  %707 = icmp eq %class.SkTSpan* %706, null
  br i1 %707, label %726, label %708

708:                                              ; preds = %705
  %709 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %699, i64 0, i32 7
  %710 = load double, double* %709, align 8
  %711 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %706, i64 0, i32 8
  %712 = load double, double* %711, align 8
  %713 = fcmp ugt double %712, %710
  br i1 %713, label %726, label %718

714:                                              ; preds = %718
  %715 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %721, i64 0, i32 8
  %716 = load double, double* %715, align 8
  %717 = fcmp ugt double %716, %710
  br i1 %717, label %723, label %718

718:                                              ; preds = %708, %714
  %719 = phi %class.SkTSpan* [ %721, %714 ], [ %706, %708 ]
  %720 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %719, i64 0, i32 5
  %721 = load %class.SkTSpan*, %class.SkTSpan** %720, align 8
  %722 = icmp eq %class.SkTSpan* %721, null
  br i1 %722, label %723, label %714

723:                                              ; preds = %718, %714
  %724 = phi %class.SkTSpan* [ %721, %714 ], [ null, %718 ]
  %725 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %719, i64 0, i32 5
  br label %726

726:                                              ; preds = %723, %708, %705
  %727 = phi %class.SkTSpan** [ %30, %705 ], [ %30, %708 ], [ %725, %723 ]
  %728 = phi %class.SkTSpan* [ null, %705 ], [ %706, %708 ], [ %724, %723 ]
  store %class.SkTSpan* %728, %class.SkTSpan** %700, align 8
  store %class.SkTSpan* %699, %class.SkTSpan** %727, align 8
  br label %729

729:                                              ; preds = %726, %698
  %730 = icmp eq %class.SkTSpan* %701, null
  br i1 %730, label %731, label %698

731:                                              ; preds = %729, %695
  %732 = load %class.SkTSpan*, %class.SkTSpan** %116, align 8
  %733 = icmp eq %class.SkTSpan* %732, null
  br i1 %733, label %767, label %734

734:                                              ; preds = %731, %765
  %735 = phi %class.SkTSpan* [ %737, %765 ], [ %732, %731 ]
  %736 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %735, i64 0, i32 5
  %737 = load %class.SkTSpan*, %class.SkTSpan** %736, align 8
  %738 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %735, i64 0, i32 10
  %739 = load i8, i8* %738, align 8, !range !2
  %740 = icmp eq i8 %739, 0
  br i1 %740, label %765, label %741

741:                                              ; preds = %734
  %742 = load %class.SkTSpan*, %class.SkTSpan** %32, align 8
  %743 = icmp eq %class.SkTSpan* %742, null
  br i1 %743, label %762, label %744

744:                                              ; preds = %741
  %745 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %735, i64 0, i32 7
  %746 = load double, double* %745, align 8
  %747 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %742, i64 0, i32 8
  %748 = load double, double* %747, align 8
  %749 = fcmp ugt double %748, %746
  br i1 %749, label %762, label %754

750:                                              ; preds = %754
  %751 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %757, i64 0, i32 8
  %752 = load double, double* %751, align 8
  %753 = fcmp ugt double %752, %746
  br i1 %753, label %759, label %754

754:                                              ; preds = %744, %750
  %755 = phi %class.SkTSpan* [ %757, %750 ], [ %742, %744 ]
  %756 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %755, i64 0, i32 5
  %757 = load %class.SkTSpan*, %class.SkTSpan** %756, align 8
  %758 = icmp eq %class.SkTSpan* %757, null
  br i1 %758, label %759, label %750

759:                                              ; preds = %754, %750
  %760 = phi %class.SkTSpan* [ %757, %750 ], [ null, %754 ]
  %761 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %755, i64 0, i32 5
  br label %762

762:                                              ; preds = %759, %744, %741
  %763 = phi %class.SkTSpan** [ %32, %741 ], [ %32, %744 ], [ %761, %759 ]
  %764 = phi %class.SkTSpan* [ null, %741 ], [ %742, %744 ], [ %760, %759 ]
  store %class.SkTSpan* %764, %class.SkTSpan** %736, align 8
  store %class.SkTSpan* %735, %class.SkTSpan** %763, align 8
  br label %765

765:                                              ; preds = %762, %734
  %766 = icmp eq %class.SkTSpan* %737, null
  br i1 %766, label %767, label %734

767:                                              ; preds = %765, %731
  %768 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  br i1 %579, label %769, label %858

769:                                              ; preds = %767
  %770 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %768, i64 0, i32 7
  %771 = load double, double* %770, align 8
  %772 = fcmp olt double %771, 0x3E80000000000000
  br i1 %772, label %773, label %858

773:                                              ; preds = %769
  %774 = load %class.SkTCurve*, %class.SkTCurve** %20, align 8
  %775 = bitcast %class.SkTCurve* %774 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %776 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %775, align 8
  %777 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %776, i64 2
  %778 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %777, align 8
  %779 = call dereferenceable(16) %struct.SkDPoint* %778(%class.SkTCurve* %774, i32 0) #9
  %780 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %768, i64 0, i32 3
  %781 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %780, align 8
  %782 = icmp eq %struct.SkTSpanBounded* %781, null
  br i1 %782, label %858, label %783

783:                                              ; preds = %773
  %784 = bitcast %struct.SkDPoint* %779 to <2 x double>*
  %785 = bitcast %struct.SkDPoint* %779 to <2 x double>*
  br label %786

786:                                              ; preds = %837, %783
  %787 = phi %struct.SkTSpanBounded* [ %781, %783 ], [ %841, %837 ]
  %788 = phi double [ 0x7FEFFFFFFFFFFFFF, %783 ], [ %839, %837 ]
  %789 = phi double [ -1.000000e+00, %783 ], [ %838, %837 ]
  %790 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %787, i64 0, i32 0
  %791 = load %class.SkTSpan*, %class.SkTSpan** %790, align 8
  %792 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %791, i64 0, i32 0
  %793 = load %class.SkTCurve*, %class.SkTCurve** %792, align 8
  %794 = bitcast %class.SkTCurve* %793 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %795 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %794, align 8
  %796 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %795, i64 3
  %797 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %796, align 8
  %798 = call dereferenceable(16) %struct.SkDPoint* %797(%class.SkTCurve* %793, i32 0) #9
  %799 = bitcast %struct.SkDPoint* %798 to <2 x double>*
  %800 = load <2 x double>, <2 x double>* %799, align 8
  %801 = load <2 x double>, <2 x double>* %784, align 8
  %802 = fsub <2 x double> %800, %801
  %803 = fmul <2 x double> %802, %802
  %804 = extractelement <2 x double> %803, i32 0
  %805 = extractelement <2 x double> %803, i32 1
  %806 = fadd double %804, %805
  %807 = fcmp ogt double %788, %806
  br i1 %807, label %808, label %811

808:                                              ; preds = %786
  %809 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %791, i64 0, i32 7
  %810 = load double, double* %809, align 8
  br label %811

811:                                              ; preds = %808, %786
  %812 = phi double [ %810, %808 ], [ %789, %786 ]
  %813 = phi double [ %806, %808 ], [ %788, %786 ]
  %814 = load %class.SkTCurve*, %class.SkTCurve** %792, align 8
  %815 = bitcast %class.SkTCurve* %814 to i32 (%class.SkTCurve*)***
  %816 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %815, align 8
  %817 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %816, i64 18
  %818 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %817, align 8
  %819 = call i32 %818(%class.SkTCurve* %814) #9
  %820 = bitcast %class.SkTCurve* %814 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %821 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %820, align 8
  %822 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %821, i64 3
  %823 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %822, align 8
  %824 = call dereferenceable(16) %struct.SkDPoint* %823(%class.SkTCurve* %814, i32 %819) #9
  %825 = bitcast %struct.SkDPoint* %824 to <2 x double>*
  %826 = load <2 x double>, <2 x double>* %825, align 8
  %827 = load <2 x double>, <2 x double>* %785, align 8
  %828 = fsub <2 x double> %826, %827
  %829 = fmul <2 x double> %828, %828
  %830 = extractelement <2 x double> %829, i32 0
  %831 = extractelement <2 x double> %829, i32 1
  %832 = fadd double %830, %831
  %833 = fcmp ogt double %813, %832
  br i1 %833, label %834, label %837

834:                                              ; preds = %811
  %835 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %791, i64 0, i32 8
  %836 = load double, double* %835, align 8
  br label %837

837:                                              ; preds = %834, %811
  %838 = phi double [ %836, %834 ], [ %812, %811 ]
  %839 = phi double [ %832, %834 ], [ %813, %811 ]
  %840 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %787, i64 0, i32 1
  %841 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %840, align 8
  %842 = icmp eq %struct.SkTSpanBounded* %841, null
  br i1 %842, label %843, label %786

843:                                              ; preds = %837
  %844 = bitcast %struct.SkDPoint* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %844) #9
  %845 = load %class.SkTCurve*, %class.SkTCurve** %118, align 8
  %846 = bitcast %class.SkTCurve* %845 to { double, double } (%class.SkTCurve*, double)***
  %847 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %846, align 8
  %848 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %847, i64 19
  %849 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %848, align 8
  %850 = call { double, double } %849(%class.SkTCurve* %845, double %838) #9
  %851 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 0
  %852 = extractvalue { double, double } %850, 0
  store double %852, double* %851, align 8
  %853 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 1
  %854 = extractvalue { double, double } %850, 1
  store double %854, double* %853, align 8
  %855 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %9, %struct.SkDPoint* dereferenceable(16) %779)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %844) #9
  br i1 %855, label %856, label %858

856:                                              ; preds = %843
  %857 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %2, double 0.000000e+00, double %838, %struct.SkDPoint* dereferenceable(16) %779) #9
  br label %858

858:                                              ; preds = %773, %856, %843, %767, %769
  %859 = load %class.SkTSpan*, %class.SkTSpan** %32, align 8
  br i1 %636, label %860, label %949

860:                                              ; preds = %858
  %861 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %859, i64 0, i32 7
  %862 = load double, double* %861, align 8
  %863 = fcmp olt double %862, 0x3E80000000000000
  br i1 %863, label %864, label %949

864:                                              ; preds = %860
  %865 = load %class.SkTCurve*, %class.SkTCurve** %118, align 8
  %866 = bitcast %class.SkTCurve* %865 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %867 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %866, align 8
  %868 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %867, i64 2
  %869 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %868, align 8
  %870 = call dereferenceable(16) %struct.SkDPoint* %869(%class.SkTCurve* %865, i32 0) #9
  %871 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %859, i64 0, i32 3
  %872 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %871, align 8
  %873 = icmp eq %struct.SkTSpanBounded* %872, null
  br i1 %873, label %949, label %874

874:                                              ; preds = %864
  %875 = bitcast %struct.SkDPoint* %870 to <2 x double>*
  %876 = bitcast %struct.SkDPoint* %870 to <2 x double>*
  br label %877

877:                                              ; preds = %928, %874
  %878 = phi %struct.SkTSpanBounded* [ %872, %874 ], [ %932, %928 ]
  %879 = phi double [ 0x7FEFFFFFFFFFFFFF, %874 ], [ %930, %928 ]
  %880 = phi double [ -1.000000e+00, %874 ], [ %929, %928 ]
  %881 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %878, i64 0, i32 0
  %882 = load %class.SkTSpan*, %class.SkTSpan** %881, align 8
  %883 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %882, i64 0, i32 0
  %884 = load %class.SkTCurve*, %class.SkTCurve** %883, align 8
  %885 = bitcast %class.SkTCurve* %884 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %886 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %885, align 8
  %887 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %886, i64 3
  %888 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %887, align 8
  %889 = call dereferenceable(16) %struct.SkDPoint* %888(%class.SkTCurve* %884, i32 0) #9
  %890 = bitcast %struct.SkDPoint* %889 to <2 x double>*
  %891 = load <2 x double>, <2 x double>* %890, align 8
  %892 = load <2 x double>, <2 x double>* %875, align 8
  %893 = fsub <2 x double> %891, %892
  %894 = fmul <2 x double> %893, %893
  %895 = extractelement <2 x double> %894, i32 0
  %896 = extractelement <2 x double> %894, i32 1
  %897 = fadd double %895, %896
  %898 = fcmp ogt double %879, %897
  br i1 %898, label %899, label %902

899:                                              ; preds = %877
  %900 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %882, i64 0, i32 7
  %901 = load double, double* %900, align 8
  br label %902

902:                                              ; preds = %899, %877
  %903 = phi double [ %901, %899 ], [ %880, %877 ]
  %904 = phi double [ %897, %899 ], [ %879, %877 ]
  %905 = load %class.SkTCurve*, %class.SkTCurve** %883, align 8
  %906 = bitcast %class.SkTCurve* %905 to i32 (%class.SkTCurve*)***
  %907 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %906, align 8
  %908 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %907, i64 18
  %909 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %908, align 8
  %910 = call i32 %909(%class.SkTCurve* %905) #9
  %911 = bitcast %class.SkTCurve* %905 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %912 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %911, align 8
  %913 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %912, i64 3
  %914 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %913, align 8
  %915 = call dereferenceable(16) %struct.SkDPoint* %914(%class.SkTCurve* %905, i32 %910) #9
  %916 = bitcast %struct.SkDPoint* %915 to <2 x double>*
  %917 = load <2 x double>, <2 x double>* %916, align 8
  %918 = load <2 x double>, <2 x double>* %876, align 8
  %919 = fsub <2 x double> %917, %918
  %920 = fmul <2 x double> %919, %919
  %921 = extractelement <2 x double> %920, i32 0
  %922 = extractelement <2 x double> %920, i32 1
  %923 = fadd double %921, %922
  %924 = fcmp ogt double %904, %923
  br i1 %924, label %925, label %928

925:                                              ; preds = %902
  %926 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %882, i64 0, i32 8
  %927 = load double, double* %926, align 8
  br label %928

928:                                              ; preds = %925, %902
  %929 = phi double [ %927, %925 ], [ %903, %902 ]
  %930 = phi double [ %923, %925 ], [ %904, %902 ]
  %931 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %878, i64 0, i32 1
  %932 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %931, align 8
  %933 = icmp eq %struct.SkTSpanBounded* %932, null
  br i1 %933, label %934, label %877

934:                                              ; preds = %928
  %935 = bitcast %struct.SkDPoint* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %935) #9
  %936 = load %class.SkTCurve*, %class.SkTCurve** %20, align 8
  %937 = bitcast %class.SkTCurve* %936 to { double, double } (%class.SkTCurve*, double)***
  %938 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %937, align 8
  %939 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %938, i64 19
  %940 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %939, align 8
  %941 = call { double, double } %940(%class.SkTCurve* %936, double %929) #9
  %942 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %10, i64 0, i32 0
  %943 = extractvalue { double, double } %941, 0
  store double %943, double* %942, align 8
  %944 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %10, i64 0, i32 1
  %945 = extractvalue { double, double } %941, 1
  store double %945, double* %944, align 8
  %946 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %10, %struct.SkDPoint* dereferenceable(16) %870)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %935) #9
  br i1 %946, label %947, label %949

947:                                              ; preds = %934
  %948 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %2, double %929, double 0.000000e+00, %struct.SkDPoint* dereferenceable(16) %870) #9
  br label %949

949:                                              ; preds = %864, %947, %934, %858, %860
  br i1 %605, label %950, label %1068

950:                                              ; preds = %949
  %951 = load %class.SkTSpan*, %class.SkTSpan** %30, align 8
  %952 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %951, i64 0, i32 5
  %953 = load %class.SkTSpan*, %class.SkTSpan** %952, align 8
  %954 = icmp eq %class.SkTSpan* %953, null
  br i1 %954, label %971, label %955

955:                                              ; preds = %950, %961
  %956 = phi %class.SkTSpan* [ %969, %961 ], [ %953, %950 ]
  %957 = phi i32 [ %959, %961 ], [ 100000, %950 ]
  %958 = phi %class.SkTSpan* [ %967, %961 ], [ %951, %950 ]
  %959 = add nsw i32 %957, -1
  %960 = icmp eq i32 %959, 0
  br i1 %960, label %1312, label %961

961:                                              ; preds = %955
  %962 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %956, i64 0, i32 8
  %963 = load double, double* %962, align 8
  %964 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %958, i64 0, i32 8
  %965 = load double, double* %964, align 8
  %966 = fcmp ogt double %963, %965
  %967 = select i1 %966, %class.SkTSpan* %956, %class.SkTSpan* %958
  %968 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %956, i64 0, i32 5
  %969 = load %class.SkTSpan*, %class.SkTSpan** %968, align 8
  %970 = icmp eq %class.SkTSpan* %969, null
  br i1 %970, label %971, label %955

971:                                              ; preds = %961, %950
  %972 = phi %class.SkTSpan* [ %951, %950 ], [ %967, %961 ]
  %973 = icmp eq %class.SkTSpan* %972, null
  br i1 %973, label %1312, label %974

974:                                              ; preds = %971
  %975 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %972, i64 0, i32 8
  %976 = load double, double* %975, align 8
  %977 = fcmp ogt double %976, 0x3FEFFFFFC0000000
  br i1 %977, label %978, label %1068

978:                                              ; preds = %974
  %979 = load %class.SkTCurve*, %class.SkTCurve** %20, align 8
  %980 = bitcast %class.SkTCurve* %979 to i32 (%class.SkTCurve*)***
  %981 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %980, align 8
  %982 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %981, i64 18
  %983 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %982, align 8
  %984 = call i32 %983(%class.SkTCurve* %979) #9
  %985 = bitcast %class.SkTCurve* %979 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %986 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %985, align 8
  %987 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %986, i64 2
  %988 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %987, align 8
  %989 = call dereferenceable(16) %struct.SkDPoint* %988(%class.SkTCurve* %979, i32 %984) #9
  %990 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %972, i64 0, i32 3
  %991 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %990, align 8
  %992 = icmp eq %struct.SkTSpanBounded* %991, null
  br i1 %992, label %1068, label %993

993:                                              ; preds = %978
  %994 = bitcast %struct.SkDPoint* %989 to <2 x double>*
  %995 = bitcast %struct.SkDPoint* %989 to <2 x double>*
  br label %996

996:                                              ; preds = %1047, %993
  %997 = phi %struct.SkTSpanBounded* [ %991, %993 ], [ %1051, %1047 ]
  %998 = phi double [ 0x7FEFFFFFFFFFFFFF, %993 ], [ %1049, %1047 ]
  %999 = phi double [ -1.000000e+00, %993 ], [ %1048, %1047 ]
  %1000 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %997, i64 0, i32 0
  %1001 = load %class.SkTSpan*, %class.SkTSpan** %1000, align 8
  %1002 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1001, i64 0, i32 0
  %1003 = load %class.SkTCurve*, %class.SkTCurve** %1002, align 8
  %1004 = bitcast %class.SkTCurve* %1003 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %1005 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %1004, align 8
  %1006 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %1005, i64 3
  %1007 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %1006, align 8
  %1008 = call dereferenceable(16) %struct.SkDPoint* %1007(%class.SkTCurve* %1003, i32 0) #9
  %1009 = bitcast %struct.SkDPoint* %1008 to <2 x double>*
  %1010 = load <2 x double>, <2 x double>* %1009, align 8
  %1011 = load <2 x double>, <2 x double>* %994, align 8
  %1012 = fsub <2 x double> %1010, %1011
  %1013 = fmul <2 x double> %1012, %1012
  %1014 = extractelement <2 x double> %1013, i32 0
  %1015 = extractelement <2 x double> %1013, i32 1
  %1016 = fadd double %1014, %1015
  %1017 = fcmp ogt double %998, %1016
  br i1 %1017, label %1018, label %1021

1018:                                             ; preds = %996
  %1019 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1001, i64 0, i32 7
  %1020 = load double, double* %1019, align 8
  br label %1021

1021:                                             ; preds = %1018, %996
  %1022 = phi double [ %1020, %1018 ], [ %999, %996 ]
  %1023 = phi double [ %1016, %1018 ], [ %998, %996 ]
  %1024 = load %class.SkTCurve*, %class.SkTCurve** %1002, align 8
  %1025 = bitcast %class.SkTCurve* %1024 to i32 (%class.SkTCurve*)***
  %1026 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %1025, align 8
  %1027 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %1026, i64 18
  %1028 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %1027, align 8
  %1029 = call i32 %1028(%class.SkTCurve* %1024) #9
  %1030 = bitcast %class.SkTCurve* %1024 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %1031 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %1030, align 8
  %1032 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %1031, i64 3
  %1033 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %1032, align 8
  %1034 = call dereferenceable(16) %struct.SkDPoint* %1033(%class.SkTCurve* %1024, i32 %1029) #9
  %1035 = bitcast %struct.SkDPoint* %1034 to <2 x double>*
  %1036 = load <2 x double>, <2 x double>* %1035, align 8
  %1037 = load <2 x double>, <2 x double>* %995, align 8
  %1038 = fsub <2 x double> %1036, %1037
  %1039 = fmul <2 x double> %1038, %1038
  %1040 = extractelement <2 x double> %1039, i32 0
  %1041 = extractelement <2 x double> %1039, i32 1
  %1042 = fadd double %1040, %1041
  %1043 = fcmp ogt double %1023, %1042
  br i1 %1043, label %1044, label %1047

1044:                                             ; preds = %1021
  %1045 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1001, i64 0, i32 8
  %1046 = load double, double* %1045, align 8
  br label %1047

1047:                                             ; preds = %1044, %1021
  %1048 = phi double [ %1046, %1044 ], [ %1022, %1021 ]
  %1049 = phi double [ %1042, %1044 ], [ %1023, %1021 ]
  %1050 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %997, i64 0, i32 1
  %1051 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %1050, align 8
  %1052 = icmp eq %struct.SkTSpanBounded* %1051, null
  br i1 %1052, label %1053, label %996

1053:                                             ; preds = %1047
  %1054 = bitcast %struct.SkDPoint* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1054) #9
  %1055 = load %class.SkTCurve*, %class.SkTCurve** %118, align 8
  %1056 = bitcast %class.SkTCurve* %1055 to { double, double } (%class.SkTCurve*, double)***
  %1057 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %1056, align 8
  %1058 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %1057, i64 19
  %1059 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %1058, align 8
  %1060 = call { double, double } %1059(%class.SkTCurve* %1055, double %1048) #9
  %1061 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %11, i64 0, i32 0
  %1062 = extractvalue { double, double } %1060, 0
  store double %1062, double* %1061, align 8
  %1063 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %11, i64 0, i32 1
  %1064 = extractvalue { double, double } %1060, 1
  store double %1064, double* %1063, align 8
  %1065 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %11, %struct.SkDPoint* dereferenceable(16) %989)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1054) #9
  br i1 %1065, label %1066, label %1068

1066:                                             ; preds = %1053
  %1067 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %2, double 1.000000e+00, double %1048, %struct.SkDPoint* dereferenceable(16) %989) #9
  br label %1068

1068:                                             ; preds = %978, %1066, %1053, %974, %949
  br i1 %662, label %1069, label %1187

1069:                                             ; preds = %1068
  %1070 = load %class.SkTSpan*, %class.SkTSpan** %32, align 8
  %1071 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1070, i64 0, i32 5
  %1072 = load %class.SkTSpan*, %class.SkTSpan** %1071, align 8
  %1073 = icmp eq %class.SkTSpan* %1072, null
  br i1 %1073, label %1090, label %1074

1074:                                             ; preds = %1069, %1080
  %1075 = phi %class.SkTSpan* [ %1088, %1080 ], [ %1072, %1069 ]
  %1076 = phi i32 [ %1078, %1080 ], [ 100000, %1069 ]
  %1077 = phi %class.SkTSpan* [ %1086, %1080 ], [ %1070, %1069 ]
  %1078 = add nsw i32 %1076, -1
  %1079 = icmp eq i32 %1078, 0
  br i1 %1079, label %1312, label %1080

1080:                                             ; preds = %1074
  %1081 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1075, i64 0, i32 8
  %1082 = load double, double* %1081, align 8
  %1083 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1077, i64 0, i32 8
  %1084 = load double, double* %1083, align 8
  %1085 = fcmp ogt double %1082, %1084
  %1086 = select i1 %1085, %class.SkTSpan* %1075, %class.SkTSpan* %1077
  %1087 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1075, i64 0, i32 5
  %1088 = load %class.SkTSpan*, %class.SkTSpan** %1087, align 8
  %1089 = icmp eq %class.SkTSpan* %1088, null
  br i1 %1089, label %1090, label %1074

1090:                                             ; preds = %1080, %1069
  %1091 = phi %class.SkTSpan* [ %1070, %1069 ], [ %1086, %1080 ]
  %1092 = icmp eq %class.SkTSpan* %1091, null
  br i1 %1092, label %1312, label %1093

1093:                                             ; preds = %1090
  %1094 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1091, i64 0, i32 8
  %1095 = load double, double* %1094, align 8
  %1096 = fcmp ogt double %1095, 0x3FEFFFFFC0000000
  br i1 %1096, label %1097, label %1187

1097:                                             ; preds = %1093
  %1098 = load %class.SkTCurve*, %class.SkTCurve** %118, align 8
  %1099 = bitcast %class.SkTCurve* %1098 to i32 (%class.SkTCurve*)***
  %1100 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %1099, align 8
  %1101 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %1100, i64 18
  %1102 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %1101, align 8
  %1103 = call i32 %1102(%class.SkTCurve* %1098) #9
  %1104 = bitcast %class.SkTCurve* %1098 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %1105 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %1104, align 8
  %1106 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %1105, i64 2
  %1107 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %1106, align 8
  %1108 = call dereferenceable(16) %struct.SkDPoint* %1107(%class.SkTCurve* %1098, i32 %1103) #9
  %1109 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1091, i64 0, i32 3
  %1110 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %1109, align 8
  %1111 = icmp eq %struct.SkTSpanBounded* %1110, null
  br i1 %1111, label %1187, label %1112

1112:                                             ; preds = %1097
  %1113 = bitcast %struct.SkDPoint* %1108 to <2 x double>*
  %1114 = bitcast %struct.SkDPoint* %1108 to <2 x double>*
  br label %1115

1115:                                             ; preds = %1166, %1112
  %1116 = phi %struct.SkTSpanBounded* [ %1110, %1112 ], [ %1170, %1166 ]
  %1117 = phi double [ 0x7FEFFFFFFFFFFFFF, %1112 ], [ %1168, %1166 ]
  %1118 = phi double [ -1.000000e+00, %1112 ], [ %1167, %1166 ]
  %1119 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %1116, i64 0, i32 0
  %1120 = load %class.SkTSpan*, %class.SkTSpan** %1119, align 8
  %1121 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1120, i64 0, i32 0
  %1122 = load %class.SkTCurve*, %class.SkTCurve** %1121, align 8
  %1123 = bitcast %class.SkTCurve* %1122 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %1124 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %1123, align 8
  %1125 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %1124, i64 3
  %1126 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %1125, align 8
  %1127 = call dereferenceable(16) %struct.SkDPoint* %1126(%class.SkTCurve* %1122, i32 0) #9
  %1128 = bitcast %struct.SkDPoint* %1127 to <2 x double>*
  %1129 = load <2 x double>, <2 x double>* %1128, align 8
  %1130 = load <2 x double>, <2 x double>* %1113, align 8
  %1131 = fsub <2 x double> %1129, %1130
  %1132 = fmul <2 x double> %1131, %1131
  %1133 = extractelement <2 x double> %1132, i32 0
  %1134 = extractelement <2 x double> %1132, i32 1
  %1135 = fadd double %1133, %1134
  %1136 = fcmp ogt double %1117, %1135
  br i1 %1136, label %1137, label %1140

1137:                                             ; preds = %1115
  %1138 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1120, i64 0, i32 7
  %1139 = load double, double* %1138, align 8
  br label %1140

1140:                                             ; preds = %1137, %1115
  %1141 = phi double [ %1139, %1137 ], [ %1118, %1115 ]
  %1142 = phi double [ %1135, %1137 ], [ %1117, %1115 ]
  %1143 = load %class.SkTCurve*, %class.SkTCurve** %1121, align 8
  %1144 = bitcast %class.SkTCurve* %1143 to i32 (%class.SkTCurve*)***
  %1145 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %1144, align 8
  %1146 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %1145, i64 18
  %1147 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %1146, align 8
  %1148 = call i32 %1147(%class.SkTCurve* %1143) #9
  %1149 = bitcast %class.SkTCurve* %1143 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %1150 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %1149, align 8
  %1151 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %1150, i64 3
  %1152 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %1151, align 8
  %1153 = call dereferenceable(16) %struct.SkDPoint* %1152(%class.SkTCurve* %1143, i32 %1148) #9
  %1154 = bitcast %struct.SkDPoint* %1153 to <2 x double>*
  %1155 = load <2 x double>, <2 x double>* %1154, align 8
  %1156 = load <2 x double>, <2 x double>* %1114, align 8
  %1157 = fsub <2 x double> %1155, %1156
  %1158 = fmul <2 x double> %1157, %1157
  %1159 = extractelement <2 x double> %1158, i32 0
  %1160 = extractelement <2 x double> %1158, i32 1
  %1161 = fadd double %1159, %1160
  %1162 = fcmp ogt double %1142, %1161
  br i1 %1162, label %1163, label %1166

1163:                                             ; preds = %1140
  %1164 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1120, i64 0, i32 8
  %1165 = load double, double* %1164, align 8
  br label %1166

1166:                                             ; preds = %1163, %1140
  %1167 = phi double [ %1165, %1163 ], [ %1141, %1140 ]
  %1168 = phi double [ %1161, %1163 ], [ %1142, %1140 ]
  %1169 = getelementptr inbounds %struct.SkTSpanBounded, %struct.SkTSpanBounded* %1116, i64 0, i32 1
  %1170 = load %struct.SkTSpanBounded*, %struct.SkTSpanBounded** %1169, align 8
  %1171 = icmp eq %struct.SkTSpanBounded* %1170, null
  br i1 %1171, label %1172, label %1115

1172:                                             ; preds = %1166
  %1173 = bitcast %struct.SkDPoint* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1173) #9
  %1174 = load %class.SkTCurve*, %class.SkTCurve** %20, align 8
  %1175 = bitcast %class.SkTCurve* %1174 to { double, double } (%class.SkTCurve*, double)***
  %1176 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %1175, align 8
  %1177 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %1176, i64 19
  %1178 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %1177, align 8
  %1179 = call { double, double } %1178(%class.SkTCurve* %1174, double %1167) #9
  %1180 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %12, i64 0, i32 0
  %1181 = extractvalue { double, double } %1179, 0
  store double %1181, double* %1180, align 8
  %1182 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %12, i64 0, i32 1
  %1183 = extractvalue { double, double } %1179, 1
  store double %1183, double* %1182, align 8
  %1184 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %12, %struct.SkDPoint* dereferenceable(16) %1108)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1173) #9
  br i1 %1184, label %1185, label %1187

1185:                                             ; preds = %1172
  %1186 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %2, double %1167, double 1.000000e+00, %struct.SkDPoint* dereferenceable(16) %1108) #9
  br label %1187

1187:                                             ; preds = %1097, %1185, %1172, %1093, %1068
  %1188 = getelementptr inbounds %struct.SkClosestSect, %struct.SkClosestSect* %13, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1176, i8* nonnull %1188) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1188, i8 -86, i64 1176, i1 false)
  %1189 = getelementptr inbounds %struct.SkClosestSect, %struct.SkClosestSect* %13, i64 0, i32 0, i32 0, i32 0, i64 1152
  %1190 = getelementptr inbounds %struct.SkClosestSect, %struct.SkClosestSect* %13, i64 0, i32 0, i32 0, i32 0, i64 1160
  %1191 = bitcast i8* %1190 to i64*
  %1192 = bitcast i8* %1189 to i8**
  store i8* %1188, i8** %1192, align 8
  store i64 154618822656, i64* %1191, align 8
  %1193 = getelementptr inbounds %struct.SkClosestSect, %struct.SkClosestSect* %13, i64 0, i32 1
  store i32 0, i32* %1193, align 8
  %1194 = bitcast i8* %1189 to %class.SkTArray*
  call void @_ZN8SkTArrayI15SkClosestRecordLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %1194, i32 1, i32 1) #9
  %1195 = bitcast i8* %1189 to %struct.SkClosestRecord**
  %1196 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %1195, align 8
  %1197 = load i64, i64* %1191, align 8
  %1198 = lshr i64 %1197, 1
  %1199 = and i64 %1198, 2147483647
  %1200 = add i64 %1197, 2
  %1201 = and i64 %1200, 4294967294
  %1202 = and i64 %1197, -4294967295
  %1203 = or i64 %1201, %1202
  store i64 %1203, i64* %1191, align 8
  %1204 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %1196, i64 %1199, i32 6
  store double 0x47EFFFFFE0000000, double* %1204, align 8
  br label %1205

1205:                                             ; preds = %1230, %1187
  %1206 = phi %class.SkTSpan* [ %768, %1187 ], [ %1232, %1230 ]
  %1207 = icmp eq %class.SkTSpan* %1206, null
  br i1 %1207, label %1234, label %1208

1208:                                             ; preds = %1205, %1217
  %1209 = phi %class.SkTSpan* [ %1219, %1217 ], [ %1206, %1205 ]
  %1210 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1209, i64 0, i32 1, i32 2
  %1211 = load i8, i8* %1210, align 1, !range !2
  %1212 = icmp eq i8 %1211, 0
  br i1 %1212, label %1221, label %1213

1213:                                             ; preds = %1208
  %1214 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1209, i64 0, i32 2, i32 2
  %1215 = load i8, i8* %1214, align 1, !range !2
  %1216 = icmp eq i8 %1215, 0
  br i1 %1216, label %1221, label %1217

1217:                                             ; preds = %1213
  %1218 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1209, i64 0, i32 5
  %1219 = load %class.SkTSpan*, %class.SkTSpan** %1218, align 8
  %1220 = icmp eq %class.SkTSpan* %1219, null
  br i1 %1220, label %1234, label %1208

1221:                                             ; preds = %1213, %1208
  %1222 = load %class.SkTSpan*, %class.SkTSpan** %32, align 8
  %1223 = icmp eq %class.SkTSpan* %1222, null
  br i1 %1223, label %1230, label %1224

1224:                                             ; preds = %1221, %1224
  %1225 = phi %class.SkTSpan* [ %1228, %1224 ], [ %1222, %1221 ]
  %1226 = call zeroext i1 @_ZN13SkClosestSect4findEPK7SkTSpanS2_(%struct.SkClosestSect* nonnull %13, %class.SkTSpan* nonnull %1209, %class.SkTSpan* nonnull %1225)
  %1227 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1225, i64 0, i32 5
  %1228 = load %class.SkTSpan*, %class.SkTSpan** %1227, align 8
  %1229 = icmp eq %class.SkTSpan* %1228, null
  br i1 %1229, label %1230, label %1224

1230:                                             ; preds = %1224, %1221
  %1231 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1209, i64 0, i32 5
  %1232 = load %class.SkTSpan*, %class.SkTSpan** %1231, align 8
  %1233 = icmp eq %class.SkTSpan* %1232, null
  br i1 %1233, label %1234, label %1205

1234:                                             ; preds = %1230, %1205, %1217
  call void @_ZNK13SkClosestSect6finishEP15SkIntersections(%struct.SkClosestSect* nonnull %13, %class.SkIntersections* %2)
  %1235 = load i8, i8* %17, align 2
  %1236 = zext i8 %1235 to i32
  %1237 = add nsw i32 %1236, -1
  %1238 = bitcast %struct.SkDPoint* %14 to i8*
  %1239 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %14, i64 0, i32 0
  %1240 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %14, i64 0, i32 1
  %1241 = bitcast %class.SkTCoincident* %15 to i8*
  %1242 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %15, i64 0, i32 1
  %1243 = getelementptr inbounds %class.SkTCoincident, %class.SkTCoincident* %15, i64 0, i32 2
  %1244 = bitcast %struct.SkDPoint* %14 to i8*
  %1245 = bitcast i8* %1243 to i64*
  %1246 = bitcast %class.SkTCoincident* %15 to <2 x double>*
  br label %1247

1247:                                             ; preds = %1309, %1234
  %1248 = phi i32 [ %1310, %1309 ], [ %1237, %1234 ]
  %1249 = phi i32 [ %1311, %1309 ], [ 0, %1234 ]
  br label %1250

1250:                                             ; preds = %1247, %1267
  %1251 = phi i32 [ %1266, %1267 ], [ %1249, %1247 ]
  %1252 = icmp slt i32 %1251, %1248
  br i1 %1252, label %1260, label %1253

1253:                                             ; preds = %1250
  %1254 = load i64, i64* %1191, align 8
  %1255 = and i64 %1254, 1
  %1256 = icmp eq i64 %1255, 0
  br i1 %1256, label %1259, label %1257

1257:                                             ; preds = %1253
  %1258 = load i8*, i8** %1192, align 8
  call void @_Z7sk_freePv(i8* %1258) #9
  br label %1259

1259:                                             ; preds = %1253, %1257
  call void @llvm.lifetime.end.p0i8(i64 1176, i8* nonnull %1188) #9
  br label %1312

1260:                                             ; preds = %1250
  %1261 = load i16, i16* %18, align 8
  %1262 = zext i16 %1261 to i32
  %1263 = shl i32 1, %1251
  %1264 = and i32 %1263, %1262
  %1265 = icmp eq i32 %1264, 0
  %1266 = add nsw i32 %1251, 1
  br i1 %1265, label %1271, label %1267

1267:                                             ; preds = %1260
  %1268 = shl i32 1, %1266
  %1269 = and i32 %1268, %1262
  %1270 = icmp eq i32 %1269, 0
  br i1 %1270, label %1271, label %1250

1271:                                             ; preds = %1267, %1260
  %1272 = sext i32 %1251 to i64
  %1273 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %2, i64 0, i32 2, i64 0, i64 %1272
  %1274 = load double, double* %1273, align 8
  %1275 = sext i32 %1266 to i64
  %1276 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %2, i64 0, i32 2, i64 0, i64 %1275
  %1277 = load double, double* %1276, align 8
  %1278 = fadd double %1274, %1277
  %1279 = fmul double %1278, 5.000000e-01
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1238) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1244, i8 -1, i64 16, i1 false)
  %1280 = load %class.SkTCurve*, %class.SkTCurve** %20, align 8
  %1281 = bitcast %class.SkTCurve* %1280 to { double, double } (%class.SkTCurve*, double)***
  %1282 = load { double, double } (%class.SkTCurve*, double)**, { double, double } (%class.SkTCurve*, double)*** %1281, align 8
  %1283 = getelementptr inbounds { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %1282, i64 19
  %1284 = load { double, double } (%class.SkTCurve*, double)*, { double, double } (%class.SkTCurve*, double)** %1283, align 8
  %1285 = call { double, double } %1284(%class.SkTCurve* %1280, double %1279) #9
  %1286 = extractvalue { double, double } %1285, 0
  store double %1286, double* %1239, align 8
  %1287 = extractvalue { double, double } %1285, 1
  store double %1287, double* %1240, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1241) #9
  store i64 -6148914691236517376, i64* %1245, align 8
  store double -1.000000e+00, double* %1242, align 16
  store <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double>* %1246, align 16
  %1288 = load %class.SkTCurve*, %class.SkTCurve** %20, align 8
  %1289 = load %class.SkTCurve*, %class.SkTCurve** %118, align 8
  call void @_ZN13SkTCoincident7setPerpERK8SkTCurvedRK8SkDPointS2_(%class.SkTCoincident* nonnull %15, %class.SkTCurve* dereferenceable(8) %1288, double %1279, %struct.SkDPoint* nonnull dereferenceable(16) %14, %class.SkTCurve* dereferenceable(8) %1289)
  %1290 = load i8, i8* %1243, align 8, !range !2
  %1291 = icmp eq i8 %1290, 0
  br i1 %1291, label %1309, label %1292

1292:                                             ; preds = %1271
  %1293 = load i16, i16* %18, align 8
  %1294 = zext i16 %1293 to i32
  %1295 = and i32 %1263, %1294
  %1296 = icmp eq i32 %1295, 0
  br i1 %1296, label %1299, label %1297

1297:                                             ; preds = %1292
  call void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections* %2, i32 %1251) #9
  %1298 = add nsw i32 %1248, -1
  br label %1306

1299:                                             ; preds = %1292
  %1300 = shl i32 1, %1266
  %1301 = and i32 %1300, %1294
  %1302 = icmp eq i32 %1301, 0
  br i1 %1302, label %1305, label %1303

1303:                                             ; preds = %1299
  call void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections* %2, i32 %1266) #9
  %1304 = add nsw i32 %1248, -1
  br label %1306

1305:                                             ; preds = %1299
  call void @_ZN15SkIntersections13setCoincidentEi(%class.SkIntersections* %2, i32 %1251) #9
  br label %1306

1306:                                             ; preds = %1303, %1305, %1297
  %1307 = phi i32 [ %1298, %1297 ], [ %1304, %1303 ], [ %1248, %1305 ]
  %1308 = phi i32 [ %1251, %1297 ], [ %1251, %1303 ], [ %1266, %1305 ]
  call void @_ZN15SkIntersections13setCoincidentEi(%class.SkIntersections* %2, i32 %1308) #9
  br label %1309

1309:                                             ; preds = %1271, %1306
  %1310 = phi i32 [ %1307, %1306 ], [ %1248, %1271 ]
  %1311 = phi i32 [ %1308, %1306 ], [ %1266, %1271 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1241) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1238) #9
  br label %1247

1312:                                             ; preds = %364, %366, %302, %304, %470, %446, %423, %403, %238, %528, %517, %955, %1074, %198, %152, %179, %692, %689, %1090, %971, %1259, %3, %42
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #9
  ret void
}

declare i32 @_ZN15SkIntersections16insertCoincidentEddRK8SkDPoint(%class.SkIntersections*, double, double, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN13SkClosestSect4findEPK7SkTSpanS2_(%struct.SkClosestSect*, %class.SkTSpan*, %class.SkTSpan*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %struct.SkClosestSect, %struct.SkClosestSect* %0, i64 0, i32 0, i32 0, i32 0, i64 1152
  %5 = bitcast i8* %4 to %class.SkTArray*
  %6 = getelementptr inbounds %struct.SkClosestSect, %struct.SkClosestSect* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = bitcast i8* %4 to %struct.SkClosestRecord**
  %9 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %8, align 8
  %10 = sext i32 %7 to i64
  %11 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %9, i64 %10
  tail call void @_ZN15SkClosestRecord7findEndEPK7SkTSpanS2_ii(%struct.SkClosestRecord* %11, %class.SkTSpan* %1, %class.SkTSpan* %2, i32 0, i32 0)
  %12 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %2, i64 0, i32 0
  %13 = load %class.SkTCurve*, %class.SkTCurve** %12, align 8
  %14 = bitcast %class.SkTCurve* %13 to i32 (%class.SkTCurve*)***
  %15 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %14, align 8
  %16 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %15, i64 18
  %17 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %16, align 8
  %18 = tail call i32 %17(%class.SkTCurve* %13) #9
  tail call void @_ZN15SkClosestRecord7findEndEPK7SkTSpanS2_ii(%struct.SkClosestRecord* %11, %class.SkTSpan* %1, %class.SkTSpan* %2, i32 0, i32 %18)
  %19 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 0
  %20 = load %class.SkTCurve*, %class.SkTCurve** %19, align 8
  %21 = bitcast %class.SkTCurve* %20 to i32 (%class.SkTCurve*)***
  %22 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %21, align 8
  %23 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %22, i64 18
  %24 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %23, align 8
  %25 = tail call i32 %24(%class.SkTCurve* %20) #9
  tail call void @_ZN15SkClosestRecord7findEndEPK7SkTSpanS2_ii(%struct.SkClosestRecord* %11, %class.SkTSpan* %1, %class.SkTSpan* %2, i32 %25, i32 0)
  %26 = load %class.SkTCurve*, %class.SkTCurve** %19, align 8
  %27 = bitcast %class.SkTCurve* %26 to i32 (%class.SkTCurve*)***
  %28 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %27, align 8
  %29 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %28, i64 18
  %30 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %29, align 8
  %31 = tail call i32 %30(%class.SkTCurve* %26) #9
  %32 = load %class.SkTCurve*, %class.SkTCurve** %12, align 8
  %33 = bitcast %class.SkTCurve* %32 to i32 (%class.SkTCurve*)***
  %34 = load i32 (%class.SkTCurve*)**, i32 (%class.SkTCurve*)*** %33, align 8
  %35 = getelementptr inbounds i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %34, i64 18
  %36 = load i32 (%class.SkTCurve*)*, i32 (%class.SkTCurve*)** %35, align 8
  %37 = tail call i32 %36(%class.SkTCurve* %32) #9
  tail call void @_ZN15SkClosestRecord7findEndEPK7SkTSpanS2_ii(%struct.SkClosestRecord* %11, %class.SkTSpan* %1, %class.SkTSpan* %2, i32 %31, i32 %37)
  %38 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %9, i64 %10, i32 6
  %39 = load double, double* %38, align 8
  %40 = fcmp oeq double %39, 0x47EFFFFFE0000000
  br i1 %40, label %150, label %41

41:                                               ; preds = %3
  %42 = load i32, i32* %6, align 8
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %134

44:                                               ; preds = %41
  %45 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %8, align 8
  %46 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %11, i64 0, i32 0
  %47 = load %class.SkTSpan*, %class.SkTSpan** %46, align 8
  %48 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %47, i64 0, i32 7
  %49 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %47, i64 0, i32 8
  %50 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %9, i64 %10, i32 1
  %51 = ptrtoint %class.SkTSpan* %47 to i64
  %52 = sext i32 %42 to i64
  br label %55

53:                                               ; preds = %82
  %54 = icmp slt i64 %88, %52
  br i1 %54, label %55, label %134

55:                                               ; preds = %44, %53
  %56 = phi i64 [ 0, %44 ], [ %88, %53 ]
  %57 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %45, i64 %56
  %58 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %57, i64 0, i32 0
  %59 = load %class.SkTSpan*, %class.SkTSpan** %58, align 8
  %60 = icmp eq %class.SkTSpan* %59, %47
  br i1 %60, label %89, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %59, i64 0, i32 8
  %63 = load double, double* %62, align 8
  %64 = load double, double* %48, align 8
  %65 = fcmp oeq double %63, %64
  br i1 %65, label %89, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %59, i64 0, i32 7
  %68 = load double, double* %67, align 8
  %69 = load double, double* %49, align 8
  %70 = fcmp oeq double %68, %69
  br i1 %70, label %89, label %71

71:                                               ; preds = %66
  %72 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %45, i64 %56, i32 1
  %73 = load %class.SkTSpan*, %class.SkTSpan** %72, align 8
  %74 = load %class.SkTSpan*, %class.SkTSpan** %50, align 8
  %75 = icmp eq %class.SkTSpan* %73, %74
  br i1 %75, label %89, label %76

76:                                               ; preds = %71
  %77 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %73, i64 0, i32 8
  %78 = load double, double* %77, align 8
  %79 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %74, i64 0, i32 7
  %80 = load double, double* %79, align 8
  %81 = fcmp oeq double %78, %80
  br i1 %81, label %89, label %82

82:                                               ; preds = %76
  %83 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %73, i64 0, i32 7
  %84 = load double, double* %83, align 8
  %85 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %74, i64 0, i32 8
  %86 = load double, double* %85, align 8
  %87 = fcmp oeq double %84, %86
  %88 = add nuw nsw i64 %56, 1
  br i1 %87, label %89, label %53

89:                                               ; preds = %55, %61, %66, %71, %76, %82
  %90 = and i64 %56, 4294967295
  %91 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %45, i64 %90, i32 6
  %92 = load double, double* %91, align 8
  %93 = fcmp ogt double %92, %39
  br i1 %93, label %94, label %109

94:                                               ; preds = %89
  %95 = bitcast %struct.SkClosestRecord* %57 to i64*
  store i64 %51, i64* %95, align 8
  %96 = bitcast %class.SkTSpan** %50 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %45, i64 %90, i32 1
  %99 = bitcast %class.SkTSpan** %98 to i64*
  store i64 %97, i64* %99, align 8
  %100 = bitcast double* %38 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast double* %91 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %9, i64 %10, i32 7
  %104 = load i32, i32* %103, align 8
  %105 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %45, i64 %90, i32 7
  store i32 %104, i32* %105, align 8
  %106 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %9, i64 %10, i32 8
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %45, i64 %90, i32 8
  store i32 %107, i32* %108, align 4
  br label %109

109:                                              ; preds = %94, %89
  %110 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %45, i64 %90, i32 2
  %111 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %9, i64 %10, i32 2
  %112 = load double, double* %111, align 8
  %113 = load double, double* %110, align 8
  %114 = fcmp olt double %112, %113
  %115 = select i1 %114, double %112, double %113
  store double %115, double* %110, align 8
  %116 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %45, i64 %90, i32 3
  %117 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %9, i64 %10, i32 3
  %118 = load double, double* %116, align 8
  %119 = load double, double* %117, align 8
  %120 = fcmp olt double %118, %119
  %121 = select i1 %120, double %119, double %118
  store double %121, double* %116, align 8
  %122 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %45, i64 %90, i32 4
  %123 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %9, i64 %10, i32 4
  %124 = load double, double* %123, align 8
  %125 = load double, double* %122, align 8
  %126 = fcmp olt double %124, %125
  %127 = select i1 %126, double %124, double %125
  store double %127, double* %122, align 8
  %128 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %45, i64 %90, i32 5
  %129 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %9, i64 %10, i32 5
  %130 = load double, double* %128, align 8
  %131 = load double, double* %129, align 8
  %132 = fcmp olt double %130, %131
  %133 = select i1 %132, double %131, double %130
  store double %133, double* %128, align 8
  br label %147

134:                                              ; preds = %53, %41
  %135 = add nsw i32 %42, 1
  store i32 %135, i32* %6, align 8
  tail call void @_ZN8SkTArrayI15SkClosestRecordLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %5, i32 1, i32 1) #9
  %136 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %8, align 8
  %137 = getelementptr inbounds %struct.SkClosestSect, %struct.SkClosestSect* %0, i64 0, i32 0, i32 0, i32 0, i64 1160
  %138 = bitcast i8* %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = lshr i64 %139, 1
  %141 = and i64 %140, 2147483647
  %142 = add i64 %139, 2
  %143 = and i64 %142, 4294967294
  %144 = and i64 %139, -4294967295
  %145 = or i64 %143, %144
  store i64 %145, i64* %138, align 8
  %146 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %136, i64 %141, i32 6
  br label %147

147:                                              ; preds = %134, %109
  %148 = phi double* [ %38, %109 ], [ %146, %134 ]
  %149 = phi i1 [ false, %109 ], [ true, %134 ]
  store double 0x47EFFFFFE0000000, double* %148, align 8
  br label %150

150:                                              ; preds = %147, %3
  %151 = phi i1 [ false, %3 ], [ %149, %147 ]
  ret i1 %151
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK13SkClosestSect6finishEP15SkIntersections(%struct.SkClosestSect*, %class.SkIntersections*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.anon, align 1
  %4 = alloca %class.SkSTArray.1, align 8
  %5 = getelementptr inbounds %class.SkSTArray.1, %class.SkSTArray.1* %4, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %5) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 216, i1 false)
  %6 = getelementptr inbounds %class.SkSTArray.1, %class.SkSTArray.1* %4, i64 0, i32 0, i32 0, i64 216
  %7 = getelementptr inbounds %class.SkSTArray.1, %class.SkSTArray.1* %4, i64 0, i32 0, i32 0, i64 224
  %8 = bitcast i8* %7 to i64*
  %9 = bitcast i8* %6 to i8**
  store i8* %5, i8** %9, align 8
  store i64 231928233984, i64* %8, align 8
  %10 = getelementptr inbounds %struct.SkClosestSect, %struct.SkClosestSect* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %2
  %14 = bitcast %class.SkSTArray.1* %4 to %struct.SkClosestRecord**
  %15 = bitcast i8* %6 to %struct.SkClosestRecord***
  br label %24

16:                                               ; preds = %2
  %17 = bitcast i8* %6 to %class.SkTArray.3*
  %18 = getelementptr inbounds %struct.SkClosestSect, %struct.SkClosestSect* %0, i64 0, i32 0, i32 0, i32 0, i64 1152
  %19 = bitcast i8* %18 to %struct.SkClosestRecord**
  %20 = bitcast i8* %6 to %struct.SkClosestRecord***
  br label %53

21:                                               ; preds = %53
  %22 = load %struct.SkClosestRecord**, %struct.SkClosestRecord*** %20, align 8
  %23 = icmp eq %struct.SkClosestRecord** %22, null
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %21
  %25 = phi %struct.SkClosestRecord** [ %14, %13 ], [ %22, %21 ]
  %26 = phi i32 [ %11, %13 ], [ %69, %21 ]
  %27 = phi %struct.SkClosestRecord*** [ %15, %13 ], [ %20, %21 ]
  %28 = load i64, i64* %8, align 8
  %29 = lshr i64 %28, 1
  %30 = and i64 %29, 2147483647
  %31 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %25, i64 %30
  %32 = ptrtoint %struct.SkClosestRecord** %31 to i64
  br label %33

33:                                               ; preds = %21, %24
  %34 = phi %struct.SkClosestRecord** [ %25, %24 ], [ null, %21 ]
  %35 = phi i32 [ %26, %24 ], [ %69, %21 ]
  %36 = phi %struct.SkClosestRecord*** [ %27, %24 ], [ %20, %21 ]
  %37 = phi i64 [ %32, %24 ], [ 0, %21 ]
  %38 = getelementptr inbounds %class.anon, %class.anon* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %38) #9
  %39 = ptrtoint %struct.SkClosestRecord** %34 to i64
  %40 = sub i64 %37, %39
  %41 = lshr exact i64 %40, 3
  %42 = trunc i64 %41 to i32
  %43 = icmp slt i32 %42, 2
  br i1 %43, label %50, label %44

44:                                               ; preds = %33
  %45 = add nsw i32 %42, -2
  %46 = call i32 @llvm.ctlz.i32(i32 %45, i1 false) #9, !range !3
  %47 = shl nuw nsw i32 %46, 1
  %48 = sub nsw i32 64, %47
  call void @_Z12SkTIntroSortIPK15SkClosestRecordZ8SkTQSortIS1_EvPPT_S6_EUlS2_S2_E_EviS5_iRKT0_(i32 %48, %struct.SkClosestRecord** %34, i32 %42, %class.anon* nonnull dereferenceable(1) %3) #9
  %49 = load i32, i32* %10, align 8
  br label %50

50:                                               ; preds = %33, %44
  %51 = phi i32 [ %35, %33 ], [ %49, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %38) #9
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %79, label %72

53:                                               ; preds = %16, %53
  %54 = phi i64 [ 0, %16 ], [ %68, %53 ]
  %55 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %19, align 8
  %56 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %55, i64 %54
  %57 = ptrtoint %struct.SkClosestRecord* %56 to i64
  call void @_ZN8SkTArrayIPK15SkClosestRecordLb1EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray.3* %17, i32 1, i32 1) #9
  %58 = load %struct.SkClosestRecord**, %struct.SkClosestRecord*** %20, align 8
  %59 = load i64, i64* %8, align 8
  %60 = lshr i64 %59, 1
  %61 = and i64 %60, 2147483647
  %62 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %58, i64 %61
  %63 = add i64 %59, 2
  %64 = and i64 %63, 4294967294
  %65 = and i64 %59, -4294967295
  %66 = or i64 %64, %65
  store i64 %66, i64* %8, align 8
  %67 = bitcast %struct.SkClosestRecord** %62 to i64*
  store i64 %57, i64* %67, align 8
  %68 = add nuw nsw i64 %54, 1
  %69 = load i32, i32* %10, align 8
  %70 = sext i32 %69 to i64
  %71 = icmp slt i64 %68, %70
  br i1 %71, label %53, label %21

72:                                               ; preds = %79, %50
  %73 = load i64, i64* %8, align 8
  %74 = and i64 %73, 1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %78, label %76

76:                                               ; preds = %72
  %77 = load i8*, i8** %9, align 8
  call void @_Z7sk_freePv(i8* %77) #9
  br label %78

78:                                               ; preds = %72, %76
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %5) #9
  ret void

79:                                               ; preds = %50, %79
  %80 = phi i64 [ %110, %79 ], [ 0, %50 ]
  %81 = load %struct.SkClosestRecord**, %struct.SkClosestRecord*** %36, align 8
  %82 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %81, i64 %80
  %83 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %82, align 8
  %84 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %83, i64 0, i32 7
  %85 = load i32, i32* %84, align 8
  %86 = icmp eq i32 %85, 0
  %87 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %83, i64 0, i32 0
  %88 = load %class.SkTSpan*, %class.SkTSpan** %87, align 8
  %89 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %88, i64 0, i32 8
  %90 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %88, i64 0, i32 7
  %91 = select i1 %86, double* %90, double* %89
  %92 = load double, double* %91, align 8
  %93 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %83, i64 0, i32 8
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 0
  %96 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %83, i64 0, i32 1
  %97 = load %class.SkTSpan*, %class.SkTSpan** %96, align 8
  %98 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %97, i64 0, i32 8
  %99 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %97, i64 0, i32 7
  %100 = select i1 %95, double* %99, double* %98
  %101 = load double, double* %100, align 8
  %102 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %88, i64 0, i32 0
  %103 = load %class.SkTCurve*, %class.SkTCurve** %102, align 8
  %104 = bitcast %class.SkTCurve* %103 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %105 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %104, align 8
  %106 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %105, i64 2
  %107 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %106, align 8
  %108 = call dereferenceable(16) %struct.SkDPoint* %107(%class.SkTCurve* %103, i32 %85) #9
  %109 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %1, double %92, double %101, %struct.SkDPoint* dereferenceable(16) %108) #9
  %110 = add nuw nsw i64 %80, 1
  %111 = load i32, i32* %10, align 8
  %112 = sext i32 %111 to i64
  %113 = icmp slt i64 %110, %112
  br i1 %113, label %79, label %72
}

declare void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections*, i32) local_unnamed_addr #5

declare void @_ZN15SkIntersections13setCoincidentEi(%class.SkIntersections*, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections9intersectERK7SkDQuadS2_(%class.SkIntersections*, %struct.SkDQuad* nocapture readonly dereferenceable(48), %struct.SkDQuad* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkTQuad, align 8
  %5 = alloca %class.SkTQuad, align 8
  %6 = alloca %class.SkTSect, align 8
  %7 = alloca %class.SkTSect, align 8
  %8 = bitcast %class.SkTQuad* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %8) #9
  %9 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %4, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %4, i64 0, i32 1
  %11 = bitcast %struct.SkDQuad* %10 to i8*
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV7SkTQuad, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %12 = bitcast %struct.SkDQuad* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 48, i1 false) #9
  %13 = bitcast %class.SkTQuad* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %13) #9
  %14 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %5, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %5, i64 0, i32 1
  %16 = bitcast %struct.SkDQuad* %15 to i8*
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV7SkTQuad, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %17 = bitcast %struct.SkDQuad* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 48, i1 false) #9
  %18 = bitcast %class.SkTSect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %18) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 1096, i1 false)
  %19 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %4, i64 0, i32 0
  call void @_ZN7SkTSectC2ERK8SkTCurve(%class.SkTSect* nonnull %6, %class.SkTCurve* nonnull dereferenceable(8) %19)
  %20 = bitcast %class.SkTSect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %20) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 1096, i1 false)
  %21 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %5, i64 0, i32 0
  call void @_ZN7SkTSectC2ERK8SkTCurve(%class.SkTSect* nonnull %7, %class.SkTCurve* nonnull dereferenceable(8) %21)
  call void @_ZN7SkTSect12BinarySearchEPS_S0_P15SkIntersections(%class.SkTSect* nonnull %6, %class.SkTSect* nonnull %7, %class.SkIntersections* %0)
  %22 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %23 = load i8, i8* %22, align 2
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %7, i64 0, i32 1, i32 0, i32 0, i64 1024
  %26 = bitcast i8* %25 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %26) #9
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %20) #9
  %27 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %6, i64 0, i32 1, i32 0, i32 0, i64 1024
  %28 = bitcast i8* %27 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %28) #9
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %18) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %13) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %8) #9
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections9intersectERK8SkDConicRK7SkDQuad(%class.SkIntersections*, %struct.SkDConic* nocapture readonly dereferenceable(56), %struct.SkDQuad* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkTConic, align 8
  %5 = alloca %class.SkTQuad, align 8
  %6 = alloca %class.SkTSect, align 8
  %7 = alloca %class.SkTSect, align 8
  %8 = bitcast %class.SkTConic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #9
  %9 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV8SkTConic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %4, i64 0, i32 1
  %11 = bitcast %struct.SkDConic* %10 to i8*
  %12 = bitcast %struct.SkDConic* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 56, i1 false) #9
  %13 = bitcast %class.SkTQuad* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %13) #9
  %14 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %5, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %5, i64 0, i32 1
  %16 = bitcast %struct.SkDQuad* %15 to i8*
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV7SkTQuad, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %17 = bitcast %struct.SkDQuad* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 48, i1 false) #9
  %18 = bitcast %class.SkTSect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %18) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 1096, i1 false)
  %19 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %4, i64 0, i32 0
  call void @_ZN7SkTSectC2ERK8SkTCurve(%class.SkTSect* nonnull %6, %class.SkTCurve* nonnull dereferenceable(8) %19)
  %20 = bitcast %class.SkTSect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %20) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 1096, i1 false)
  %21 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %5, i64 0, i32 0
  call void @_ZN7SkTSectC2ERK8SkTCurve(%class.SkTSect* nonnull %7, %class.SkTCurve* nonnull dereferenceable(8) %21)
  call void @_ZN7SkTSect12BinarySearchEPS_S0_P15SkIntersections(%class.SkTSect* nonnull %6, %class.SkTSect* nonnull %7, %class.SkIntersections* %0)
  %22 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %23 = load i8, i8* %22, align 2
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %7, i64 0, i32 1, i32 0, i32 0, i64 1024
  %26 = bitcast i8* %25 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %26) #9
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %20) #9
  %27 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %6, i64 0, i32 1, i32 0, i32 0, i64 1024
  %28 = bitcast i8* %27 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %28) #9
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %18) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %13) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #9
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections9intersectERK8SkDConicS2_(%class.SkIntersections*, %struct.SkDConic* nocapture readonly dereferenceable(56), %struct.SkDConic* nocapture readonly dereferenceable(56)) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkTConic, align 8
  %5 = alloca %class.SkTConic, align 8
  %6 = alloca %class.SkTSect, align 8
  %7 = alloca %class.SkTSect, align 8
  %8 = bitcast %class.SkTConic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #9
  %9 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV8SkTConic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %4, i64 0, i32 1
  %11 = bitcast %struct.SkDConic* %10 to i8*
  %12 = bitcast %struct.SkDConic* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 56, i1 false) #9
  %13 = bitcast %class.SkTConic* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #9
  %14 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV8SkTConic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %5, i64 0, i32 1
  %16 = bitcast %struct.SkDConic* %15 to i8*
  %17 = bitcast %struct.SkDConic* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 56, i1 false) #9
  %18 = bitcast %class.SkTSect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %18) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 1096, i1 false)
  %19 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %4, i64 0, i32 0
  call void @_ZN7SkTSectC2ERK8SkTCurve(%class.SkTSect* nonnull %6, %class.SkTCurve* nonnull dereferenceable(8) %19)
  %20 = bitcast %class.SkTSect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %20) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 1096, i1 false)
  %21 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %5, i64 0, i32 0
  call void @_ZN7SkTSectC2ERK8SkTCurve(%class.SkTSect* nonnull %7, %class.SkTCurve* nonnull dereferenceable(8) %21)
  call void @_ZN7SkTSect12BinarySearchEPS_S0_P15SkIntersections(%class.SkTSect* nonnull %6, %class.SkTSect* nonnull %7, %class.SkIntersections* %0)
  %22 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %23 = load i8, i8* %22, align 2
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %7, i64 0, i32 1, i32 0, i32 0, i64 1024
  %26 = bitcast i8* %25 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %26) #9
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %20) #9
  %27 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %6, i64 0, i32 1, i32 0, i32 0, i64 1024
  %28 = bitcast i8* %27 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %28) #9
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %18) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #9
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections9intersectERK8SkDCubicRK7SkDQuad(%class.SkIntersections*, %struct.SkDCubic* nocapture readonly dereferenceable(64), %struct.SkDQuad* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkTCubic, align 8
  %5 = alloca %class.SkTQuad, align 8
  %6 = alloca %class.SkTSect, align 8
  %7 = alloca %class.SkTSect, align 8
  %8 = bitcast %class.SkTCubic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %8) #9
  %9 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV8SkTCubic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %4, i64 0, i32 1
  %11 = bitcast %struct.SkDCubic* %10 to i8*
  %12 = bitcast %struct.SkDCubic* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 64, i1 false) #9
  %13 = bitcast %class.SkTQuad* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %13) #9
  %14 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %5, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %5, i64 0, i32 1
  %16 = bitcast %struct.SkDQuad* %15 to i8*
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV7SkTQuad, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %17 = bitcast %struct.SkDQuad* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 48, i1 false) #9
  %18 = bitcast %class.SkTSect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %18) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 1096, i1 false)
  %19 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %4, i64 0, i32 0
  call void @_ZN7SkTSectC2ERK8SkTCurve(%class.SkTSect* nonnull %6, %class.SkTCurve* nonnull dereferenceable(8) %19)
  %20 = bitcast %class.SkTSect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %20) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 1096, i1 false)
  %21 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %5, i64 0, i32 0
  call void @_ZN7SkTSectC2ERK8SkTCurve(%class.SkTSect* nonnull %7, %class.SkTCurve* nonnull dereferenceable(8) %21)
  call void @_ZN7SkTSect12BinarySearchEPS_S0_P15SkIntersections(%class.SkTSect* nonnull %6, %class.SkTSect* nonnull %7, %class.SkIntersections* %0)
  %22 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %23 = load i8, i8* %22, align 2
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %7, i64 0, i32 1, i32 0, i32 0, i64 1024
  %26 = bitcast i8* %25 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %26) #9
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %20) #9
  %27 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %6, i64 0, i32 1, i32 0, i32 0, i64 1024
  %28 = bitcast i8* %27 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %28) #9
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %18) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %13) #9
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %8) #9
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections9intersectERK8SkDCubicRK8SkDConic(%class.SkIntersections*, %struct.SkDCubic* nocapture readonly dereferenceable(64), %struct.SkDConic* nocapture readonly dereferenceable(56)) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkTCubic, align 8
  %5 = alloca %class.SkTConic, align 8
  %6 = alloca %class.SkTSect, align 8
  %7 = alloca %class.SkTSect, align 8
  %8 = bitcast %class.SkTCubic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %8) #9
  %9 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV8SkTCubic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %4, i64 0, i32 1
  %11 = bitcast %struct.SkDCubic* %10 to i8*
  %12 = bitcast %struct.SkDCubic* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 64, i1 false) #9
  %13 = bitcast %class.SkTConic* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #9
  %14 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV8SkTConic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %5, i64 0, i32 1
  %16 = bitcast %struct.SkDConic* %15 to i8*
  %17 = bitcast %struct.SkDConic* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 56, i1 false) #9
  %18 = bitcast %class.SkTSect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %18) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 1096, i1 false)
  %19 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %4, i64 0, i32 0
  call void @_ZN7SkTSectC2ERK8SkTCurve(%class.SkTSect* nonnull %6, %class.SkTCurve* nonnull dereferenceable(8) %19)
  %20 = bitcast %class.SkTSect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %20) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 1096, i1 false)
  %21 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %5, i64 0, i32 0
  call void @_ZN7SkTSectC2ERK8SkTCurve(%class.SkTSect* nonnull %7, %class.SkTCurve* nonnull dereferenceable(8) %21)
  call void @_ZN7SkTSect12BinarySearchEPS_S0_P15SkIntersections(%class.SkTSect* nonnull %6, %class.SkTSect* nonnull %7, %class.SkIntersections* %0)
  %22 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %23 = load i8, i8* %22, align 2
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %7, i64 0, i32 1, i32 0, i32 0, i64 1024
  %26 = bitcast i8* %25 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %26) #9
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %20) #9
  %27 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %6, i64 0, i32 1, i32 0, i32 0, i64 1024
  %28 = bitcast i8* %27 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %28) #9
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %18) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #9
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %8) #9
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections9intersectERK8SkDCubicS2_(%class.SkIntersections*, %struct.SkDCubic* nocapture readonly dereferenceable(64), %struct.SkDCubic* nocapture readonly dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkTCubic, align 8
  %5 = alloca %class.SkTCubic, align 8
  %6 = alloca %class.SkTSect, align 8
  %7 = alloca %class.SkTSect, align 8
  %8 = bitcast %class.SkTCubic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %8) #9
  %9 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV8SkTCubic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %4, i64 0, i32 1
  %11 = bitcast %struct.SkDCubic* %10 to i8*
  %12 = bitcast %struct.SkDCubic* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 64, i1 false) #9
  %13 = bitcast %class.SkTCubic* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %13) #9
  %14 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV8SkTCubic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %5, i64 0, i32 1
  %16 = bitcast %struct.SkDCubic* %15 to i8*
  %17 = bitcast %struct.SkDCubic* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 64, i1 false) #9
  %18 = bitcast %class.SkTSect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %18) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 1096, i1 false)
  %19 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %4, i64 0, i32 0
  call void @_ZN7SkTSectC2ERK8SkTCurve(%class.SkTSect* nonnull %6, %class.SkTCurve* nonnull dereferenceable(8) %19)
  %20 = bitcast %class.SkTSect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %20) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 1096, i1 false)
  %21 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %5, i64 0, i32 0
  call void @_ZN7SkTSectC2ERK8SkTCurve(%class.SkTSect* nonnull %7, %class.SkTCurve* nonnull dereferenceable(8) %21)
  call void @_ZN7SkTSect12BinarySearchEPS_S0_P15SkIntersections(%class.SkTSect* nonnull %6, %class.SkTSect* nonnull %7, %class.SkIntersections* %0)
  %22 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %23 = load i8, i8* %22, align 2
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %7, i64 0, i32 1, i32 0, i32 0, i64 1024
  %26 = bitcast i8* %25 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %26) #9
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %20) #9
  %27 = getelementptr inbounds %class.SkTSect, %class.SkTSect* %6, i64 0, i32 1, i32 0, i32 0, i64 1024
  %28 = bitcast i8* %27 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %28) #9
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %18) #9
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %13) #9
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %8) #9
  ret i32 %24
}

declare zeroext i1 @_Z16RoughlyEqualUlpsff(float, float) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #7

declare zeroext i1 @_Z16AlmostPequalUlpsff(float, float) local_unnamed_addr #5

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI15SkClosestRecordLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %65

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %65, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 64) #9
  %45 = load i64, i64* %4, align 8
  %46 = shl i64 %45, 5
  %47 = and i64 %46, 137438953408
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %35
  %50 = bitcast %class.SkTArray* %0 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %51, i64 %47, i1 false) #9
  %52 = load i64, i64* %4, align 8
  br label %53

53:                                               ; preds = %35, %49
  %54 = phi i64 [ %45, %35 ], [ %52, %49 ]
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  %57 = bitcast %class.SkTArray* %0 to i8**
  br i1 %56, label %61, label %58

58:                                               ; preds = %53
  %59 = load i8*, i8** %57, align 8
  tail call void @_Z7sk_freePv(i8* %59) #9
  %60 = load i64, i64* %4, align 8
  br label %61

61:                                               ; preds = %53, %58
  %62 = phi i64 [ %60, %58 ], [ %54, %53 ]
  store i8* %44, i8** %57, align 8
  %63 = and i64 %62, -4294967298
  %64 = or i64 %63, 1
  store i64 %64, i64* %4, align 8
  br label %65

65:                                               ; preds = %61, %32, %21
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN15SkClosestRecord7findEndEPK7SkTSpanS2_ii(%struct.SkClosestRecord*, %class.SkTSpan*, %class.SkTSpan*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 0
  %7 = load %class.SkTCurve*, %class.SkTCurve** %6, align 8
  %8 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %2, i64 0, i32 0
  %9 = load %class.SkTCurve*, %class.SkTCurve** %8, align 8
  %10 = bitcast %class.SkTCurve* %7 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %11 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %10, align 8
  %12 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %11, i64 2
  %13 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %12, align 8
  %14 = tail call dereferenceable(16) %struct.SkDPoint* %13(%class.SkTCurve* %7, i32 %3) #9
  %15 = bitcast %class.SkTCurve* %9 to %struct.SkDPoint* (%class.SkTCurve*, i32)***
  %16 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %15, align 8
  %17 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %16, i64 2
  %18 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %17, align 8
  %19 = tail call dereferenceable(16) %struct.SkDPoint* %18(%class.SkTCurve* %9, i32 %4) #9
  %20 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %14, %struct.SkDPoint* dereferenceable(16) %19)
  br i1 %20, label %21, label %67

21:                                               ; preds = %5
  %22 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %10, align 8
  %23 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %22, i64 2
  %24 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %23, align 8
  %25 = tail call dereferenceable(16) %struct.SkDPoint* %24(%class.SkTCurve* %7, i32 %3) #9
  %26 = load %struct.SkDPoint* (%class.SkTCurve*, i32)**, %struct.SkDPoint* (%class.SkTCurve*, i32)*** %15, align 8
  %27 = getelementptr inbounds %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %26, i64 2
  %28 = load %struct.SkDPoint* (%class.SkTCurve*, i32)*, %struct.SkDPoint* (%class.SkTCurve*, i32)** %27, align 8
  %29 = tail call dereferenceable(16) %struct.SkDPoint* %28(%class.SkTCurve* %9, i32 %4) #9
  %30 = bitcast %struct.SkDPoint* %25 to <2 x double>*
  %31 = load <2 x double>, <2 x double>* %30, align 8
  %32 = bitcast %struct.SkDPoint* %29 to <2 x double>*
  %33 = load <2 x double>, <2 x double>* %32, align 8
  %34 = fsub <2 x double> %31, %33
  %35 = fmul <2 x double> %34, %34
  %36 = extractelement <2 x double> %35, i32 0
  %37 = extractelement <2 x double> %35, i32 1
  %38 = fadd double %36, %37
  %39 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %0, i64 0, i32 6
  %40 = load double, double* %39, align 8
  %41 = fcmp olt double %40, %38
  br i1 %41, label %67, label %42

42:                                               ; preds = %21
  %43 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %0, i64 0, i32 0
  store %class.SkTSpan* %1, %class.SkTSpan** %43, align 8
  %44 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %0, i64 0, i32 1
  store %class.SkTSpan* %2, %class.SkTSpan** %44, align 8
  %45 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 7
  %46 = bitcast double* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %0, i64 0, i32 2
  %49 = bitcast double* %48 to i64*
  store i64 %47, i64* %49, align 8
  %50 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %1, i64 0, i32 8
  %51 = bitcast double* %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %0, i64 0, i32 3
  %54 = bitcast double* %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %2, i64 0, i32 7
  %56 = bitcast double* %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %0, i64 0, i32 4
  %59 = bitcast double* %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = getelementptr inbounds %class.SkTSpan, %class.SkTSpan* %2, i64 0, i32 8
  %61 = bitcast double* %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %0, i64 0, i32 5
  %64 = bitcast double* %63 to i64*
  store i64 %62, i64* %64, align 8
  %65 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %0, i64 0, i32 7
  store i32 %3, i32* %65, align 8
  %66 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %0, i64 0, i32 8
  store i32 %4, i32* %66, align 4
  store double %38, double* %39, align 8
  br label %67

67:                                               ; preds = %42, %21, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayIPK15SkClosestRecordLb1EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray.3*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.3, %class.SkTArray.3* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %65

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %65, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #9
  %45 = load i64, i64* %4, align 8
  %46 = shl i64 %45, 2
  %47 = and i64 %46, 17179869176
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %35
  %50 = bitcast %class.SkTArray.3* %0 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %51, i64 %47, i1 false) #9
  %52 = load i64, i64* %4, align 8
  br label %53

53:                                               ; preds = %35, %49
  %54 = phi i64 [ %45, %35 ], [ %52, %49 ]
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  %57 = bitcast %class.SkTArray.3* %0 to i8**
  br i1 %56, label %61, label %58

58:                                               ; preds = %53
  %59 = load i8*, i8** %57, align 8
  tail call void @_Z7sk_freePv(i8* %59) #9
  %60 = load i64, i64* %4, align 8
  br label %61

61:                                               ; preds = %53, %58
  %62 = phi i64 [ %60, %58 ], [ %54, %53 ]
  store i8* %44, i8** %57, align 8
  %63 = and i64 %62, -4294967298
  %64 = or i64 %63, 1
  store i64 %64, i64* %4, align 8
  br label %65

65:                                               ; preds = %61, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z12SkTIntroSortIPK15SkClosestRecordZ8SkTQSortIS1_EvPPT_S6_EUlS2_S2_E_EviS5_iRKT0_(i32, %struct.SkClosestRecord**, i32, %class.anon* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %5 = icmp slt i32 %2, 33
  br i1 %5, label %6, label %45

6:                                                ; preds = %116, %4
  %7 = phi i32 [ %2, %4 ], [ %129, %116 ]
  %8 = phi %struct.SkClosestRecord** [ %1, %4 ], [ %128, %116 ]
  %9 = sext i32 %7 to i64
  %10 = add nsw i64 %9, -1
  %11 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %8, i64 %10
  %12 = icmp slt i32 %7, 2
  br i1 %12, label %131, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %8, i64 1
  br label %15

15:                                               ; preds = %42, %13
  %16 = phi %struct.SkClosestRecord** [ %43, %42 ], [ %14, %13 ]
  %17 = phi %struct.SkClosestRecord** [ %16, %42 ], [ %8, %13 ]
  %18 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %16, align 8
  %19 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %17, align 8
  %20 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %18, i64 0, i32 6
  %21 = load double, double* %20, align 8
  %22 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %19, i64 0, i32 6
  %23 = load double, double* %22, align 8
  %24 = fcmp olt double %21, %23
  %25 = ptrtoint %struct.SkClosestRecord* %18 to i64
  br i1 %24, label %26, label %42

26:                                               ; preds = %15, %33
  %27 = phi %struct.SkClosestRecord** [ %28, %33 ], [ %16, %15 ]
  %28 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %27, i64 -1
  %29 = bitcast %struct.SkClosestRecord** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %struct.SkClosestRecord** %27 to i64*
  store i64 %30, i64* %31, align 8
  %32 = icmp ugt %struct.SkClosestRecord** %28, %8
  br i1 %32, label %33, label %40

33:                                               ; preds = %26
  %34 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %27, i64 -2
  %35 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %34, align 8
  %36 = load double, double* %20, align 8
  %37 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %35, i64 0, i32 6
  %38 = load double, double* %37, align 8
  %39 = fcmp olt double %36, %38
  br i1 %39, label %26, label %40

40:                                               ; preds = %33, %26
  %41 = bitcast %struct.SkClosestRecord** %28 to i64*
  store i64 %25, i64* %41, align 8
  br label %42

42:                                               ; preds = %40, %15
  %43 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %16, i64 1
  %44 = icmp ugt %struct.SkClosestRecord** %43, %11
  br i1 %44, label %131, label %15

45:                                               ; preds = %4, %116
  %46 = phi i32 [ %53, %116 ], [ %0, %4 ]
  %47 = phi %struct.SkClosestRecord** [ %128, %116 ], [ %1, %4 ]
  %48 = phi i32 [ %129, %116 ], [ %2, %4 ]
  %49 = icmp eq i32 %46, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %45
  %51 = sext i32 %48 to i64
  tail call void @_Z11SkTHeapSortIPK15SkClosestRecordZ8SkTQSortIS1_EvPPT_S6_EUlS2_S2_E_EvS5_mRKT0_(%struct.SkClosestRecord** %47, i64 %51, %class.anon* dereferenceable(1) %3)
  br label %131

52:                                               ; preds = %45
  %53 = add nsw i32 %46, -1
  %54 = add nsw i32 %48, -1
  %55 = ashr i32 %54, 1
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %47, i64 %56
  %58 = sext i32 %48 to i64
  %59 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %47, i64 -1
  %60 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %59, i64 %58
  %61 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %57, align 8
  %62 = bitcast %struct.SkClosestRecord** %57 to i64*
  %63 = ptrtoint %struct.SkClosestRecord* %61 to i64
  %64 = bitcast %struct.SkClosestRecord** %60 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %62, align 8
  store i64 %63, i64* %64, align 8
  %66 = icmp ugt %struct.SkClosestRecord** %60, %47
  br i1 %66, label %67, label %116

67:                                               ; preds = %52
  %68 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %61, i64 0, i32 6
  %69 = shl nsw i64 %58, 3
  %70 = add nsw i64 %69, -9
  %71 = and i64 %70, 8
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %86

73:                                               ; preds = %67
  %74 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %47, align 8
  %75 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %74, i64 0, i32 6
  %76 = load double, double* %75, align 8
  %77 = load double, double* %68, align 8
  %78 = fcmp olt double %76, %77
  br i1 %78, label %79, label %83

79:                                               ; preds = %73
  %80 = ptrtoint %struct.SkClosestRecord* %74 to i64
  %81 = bitcast %struct.SkClosestRecord** %47 to i64*
  store i64 %80, i64* %81, align 8
  %82 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %47, i64 1
  br label %83

83:                                               ; preds = %79, %73
  %84 = phi %struct.SkClosestRecord** [ %82, %79 ], [ %47, %73 ]
  %85 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %47, i64 1
  br label %86

86:                                               ; preds = %83, %67
  %87 = phi %struct.SkClosestRecord** [ %84, %83 ], [ %47, %67 ]
  %88 = phi %struct.SkClosestRecord** [ %85, %83 ], [ %47, %67 ]
  %89 = phi %struct.SkClosestRecord** [ %84, %83 ], [ undef, %67 ]
  %90 = icmp eq i64 %70, 7
  br i1 %90, label %113, label %91

91:                                               ; preds = %86, %138
  %92 = phi %struct.SkClosestRecord** [ %139, %138 ], [ %87, %86 ]
  %93 = phi %struct.SkClosestRecord** [ %140, %138 ], [ %88, %86 ]
  %94 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %93, align 8
  %95 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %94, i64 0, i32 6
  %96 = load double, double* %95, align 8
  %97 = load double, double* %68, align 8
  %98 = fcmp olt double %96, %97
  br i1 %98, label %99, label %105

99:                                               ; preds = %91
  %100 = ptrtoint %struct.SkClosestRecord* %94 to i64
  %101 = bitcast %struct.SkClosestRecord** %93 to i64*
  %102 = bitcast %struct.SkClosestRecord** %92 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %101, align 8
  store i64 %100, i64* %102, align 8
  %104 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %92, i64 1
  br label %105

105:                                              ; preds = %99, %91
  %106 = phi %struct.SkClosestRecord** [ %104, %99 ], [ %92, %91 ]
  %107 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %93, i64 1
  %108 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %107, align 8
  %109 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %108, i64 0, i32 6
  %110 = load double, double* %109, align 8
  %111 = load double, double* %68, align 8
  %112 = fcmp olt double %110, %111
  br i1 %112, label %132, label %138

113:                                              ; preds = %138, %86
  %114 = phi %struct.SkClosestRecord** [ %89, %86 ], [ %139, %138 ]
  %115 = load i64, i64* %64, align 8
  br label %116

116:                                              ; preds = %52, %113
  %117 = phi i64 [ %63, %52 ], [ %115, %113 ]
  %118 = phi %struct.SkClosestRecord** [ %47, %52 ], [ %114, %113 ]
  %119 = bitcast %struct.SkClosestRecord** %118 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %117, i64* %119, align 8
  store i64 %120, i64* %64, align 8
  %121 = ptrtoint %struct.SkClosestRecord** %118 to i64
  %122 = ptrtoint %struct.SkClosestRecord** %47 to i64
  %123 = sub i64 %121, %122
  %124 = lshr exact i64 %123, 3
  %125 = trunc i64 %124 to i32
  tail call void @_Z12SkTIntroSortIPK15SkClosestRecordZ8SkTQSortIS1_EvPPT_S6_EUlS2_S2_E_EviS5_iRKT0_(i32 %53, %struct.SkClosestRecord** %47, i32 %125, %class.anon* dereferenceable(1) %3)
  %126 = add nsw i32 %125, 1
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %47, i64 %127
  %129 = sub nsw i32 %48, %126
  %130 = icmp slt i32 %129, 33
  br i1 %130, label %6, label %45

131:                                              ; preds = %42, %6, %50
  ret void

132:                                              ; preds = %105
  %133 = ptrtoint %struct.SkClosestRecord* %108 to i64
  %134 = bitcast %struct.SkClosestRecord** %107 to i64*
  %135 = bitcast %struct.SkClosestRecord** %106 to i64*
  %136 = load i64, i64* %135, align 8
  store i64 %136, i64* %134, align 8
  store i64 %133, i64* %135, align 8
  %137 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %106, i64 1
  br label %138

138:                                              ; preds = %132, %105
  %139 = phi %struct.SkClosestRecord** [ %137, %132 ], [ %106, %105 ]
  %140 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %93, i64 2
  %141 = icmp ult %struct.SkClosestRecord** %140, %60
  br i1 %141, label %91, label %113
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z11SkTHeapSortIPK15SkClosestRecordZ8SkTQSortIS1_EvPPT_S6_EUlS2_S2_E_EvS5_mRKT0_(%struct.SkClosestRecord**, i64, %class.anon* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = lshr i64 %1, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %55, %3
  %7 = add i64 %1, -1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %59, label %9

9:                                                ; preds = %6
  %10 = bitcast %struct.SkClosestRecord** %0 to i64*
  br label %60

11:                                               ; preds = %3, %55
  %12 = phi i64 [ %13, %55 ], [ %4, %3 ]
  %13 = add nsw i64 %12, -1
  %14 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %13
  %15 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %14, align 8
  %16 = shl i64 %12, 1
  %17 = icmp ugt i64 %16, %1
  br i1 %17, label %55, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %15, i64 0, i32 6
  br label %20

20:                                               ; preds = %48, %18
  %21 = phi i64 [ %16, %18 ], [ %53, %48 ]
  %22 = phi i64 [ %12, %18 ], [ %38, %48 ]
  %23 = icmp ult i64 %21, %1
  br i1 %23, label %24, label %37

24:                                               ; preds = %20
  %25 = add i64 %21, -1
  %26 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %25
  %27 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %26, align 8
  %28 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %21
  %29 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %28, align 8
  %30 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %27, i64 0, i32 6
  %31 = load double, double* %30, align 8
  %32 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %29, i64 0, i32 6
  %33 = load double, double* %32, align 8
  %34 = fcmp olt double %31, %33
  %35 = zext i1 %34 to i64
  %36 = or i64 %21, %35
  br label %37

37:                                               ; preds = %24, %20
  %38 = phi i64 [ %21, %20 ], [ %36, %24 ]
  %39 = add i64 %38, -1
  %40 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %39
  %41 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %40, align 8
  %42 = load double, double* %19, align 8
  %43 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %41, i64 0, i32 6
  %44 = load double, double* %43, align 8
  %45 = fcmp olt double %42, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %37
  %47 = add i64 %22, -1
  br label %55

48:                                               ; preds = %37
  %49 = ptrtoint %struct.SkClosestRecord* %41 to i64
  %50 = add i64 %22, -1
  %51 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %50
  %52 = bitcast %struct.SkClosestRecord** %51 to i64*
  store i64 %49, i64* %52, align 8
  %53 = shl i64 %38, 1
  %54 = icmp ugt i64 %53, %1
  br i1 %54, label %55, label %20

55:                                               ; preds = %48, %11, %46
  %56 = phi i64 [ %13, %11 ], [ %47, %46 ], [ %39, %48 ]
  %57 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %56
  store %struct.SkClosestRecord* %15, %struct.SkClosestRecord** %57, align 8
  %58 = icmp eq i64 %13, 0
  br i1 %58, label %6, label %11

59:                                               ; preds = %60, %118, %6
  ret void

60:                                               ; preds = %9, %118
  %61 = phi i64 [ %7, %9 ], [ %122, %118 ]
  %62 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %61
  %63 = load i64, i64* %10, align 8
  %64 = bitcast %struct.SkClosestRecord** %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %10, align 8
  store i64 %63, i64* %64, align 8
  %66 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, align 8
  %67 = icmp eq i64 %61, 1
  br i1 %67, label %59, label %73

68:                                               ; preds = %90
  %69 = lshr i64 %91, 1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %118, label %71

71:                                               ; preds = %68
  %72 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %66, i64 0, i32 6
  br label %101

73:                                               ; preds = %60, %90
  %74 = phi i64 [ %99, %90 ], [ 2, %60 ]
  %75 = phi i64 [ %91, %90 ], [ 1, %60 ]
  %76 = icmp ult i64 %74, %61
  br i1 %76, label %77, label %90

77:                                               ; preds = %73
  %78 = add i64 %74, -1
  %79 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %78
  %80 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %79, align 8
  %81 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %74
  %82 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %81, align 8
  %83 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %80, i64 0, i32 6
  %84 = load double, double* %83, align 8
  %85 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %82, i64 0, i32 6
  %86 = load double, double* %85, align 8
  %87 = fcmp olt double %84, %86
  %88 = zext i1 %87 to i64
  %89 = or i64 %74, %88
  br label %90

90:                                               ; preds = %77, %73
  %91 = phi i64 [ %74, %73 ], [ %89, %77 ]
  %92 = add i64 %91, -1
  %93 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %92
  %94 = bitcast %struct.SkClosestRecord** %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %75, -1
  %97 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %96
  %98 = bitcast %struct.SkClosestRecord** %97 to i64*
  store i64 %95, i64* %98, align 8
  %99 = shl i64 %91, 1
  %100 = icmp ugt i64 %99, %61
  br i1 %100, label %68, label %73

101:                                              ; preds = %111, %71
  %102 = phi i64 [ %69, %71 ], [ %116, %111 ]
  %103 = phi i64 [ %91, %71 ], [ %102, %111 ]
  %104 = add nsw i64 %102, -1
  %105 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %104
  %106 = load %struct.SkClosestRecord*, %struct.SkClosestRecord** %105, align 8
  %107 = getelementptr inbounds %struct.SkClosestRecord, %struct.SkClosestRecord* %106, i64 0, i32 6
  %108 = load double, double* %107, align 8
  %109 = load double, double* %72, align 8
  %110 = fcmp olt double %108, %109
  br i1 %110, label %111, label %118

111:                                              ; preds = %101
  %112 = ptrtoint %struct.SkClosestRecord* %106 to i64
  %113 = add i64 %103, -1
  %114 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %113
  %115 = bitcast %struct.SkClosestRecord** %114 to i64*
  store i64 %112, i64* %115, align 8
  %116 = lshr i64 %102, 1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %101

118:                                              ; preds = %101, %111, %68
  %119 = phi i64 [ %91, %68 ], [ %103, %101 ], [ %102, %111 ]
  %120 = add i64 %119, -1
  %121 = getelementptr inbounds %struct.SkClosestRecord*, %struct.SkClosestRecord** %0, i64 %120
  store %struct.SkClosestRecord* %66, %struct.SkClosestRecord** %121, align 8
  %122 = add i64 %61, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %59, label %60
}

; Function Attrs: nounwind
declare void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc*) unnamed_addr #8

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #5

declare void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc*, i8*, i64, i64) unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i32 0, i32 33}
