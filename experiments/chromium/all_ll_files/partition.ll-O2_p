; ModuleID = '../../third_party/libgav1/src/src/tile/bitstream/partition.cc'
source_filename = "../../third_party/libgav1/src/src/tile/bitstream/partition.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.libgav1::Tile" = type { i32, i32, i32, i8*, i64, i32, i32, i32, i32, i32, i32, i8, [3 x i8], [3 x i8], [3 x i32], [3 x i32], [8 x [4 x [8 x [2 x i8]]]], i8, %"struct.std::__1::array", %"struct.std::__1::array.1", %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuFrameHeader"*, %"struct.std::__1::array.14"*, %"struct.std::__1::array.15"*, %"struct.libgav1::TemporalMotionField"*, %"struct.std::__1::array.21"*, %"struct.std::__1::array.40"*, %"struct.std::__1::array.41"*, %"class.libgav1::DaalaBitReader", [8 x i8], %"struct.libgav1::SymbolDecoderContext", %"struct.libgav1::SymbolDecoderContext"*, %"class.libgav1::SegmentationMap"*, %"struct.libgav1::dsp::Dsp"*, %"class.libgav1::PostFilter"*, %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::Quantizer", %"class.std::__1::unique_ptr.95", %"class.libgav1::Array2D.98", i64, i32, [3 x %"class.libgav1::Array2DView"], %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::Array2D.43"*, %"class.libgav1::Array2D.51"*, [24 x i8], %"struct.std::__1::array.125", %"class.libgav1::ThreadPool"*, %"struct.libgav1::Tile::ThreadingParameters", %"class.libgav1::ResidualBufferPool"*, %"class.libgav1::TileScratchBufferPool"*, %"class.libgav1::BlockingCounterImpl"*, i8, %"class.std::__1::unique_ptr.78", [32 x [32 x i8]], [4 x i8], i8, i8, i8, %"struct.std::__1::array.141"*, %"struct.std::__1::array.142", [24 x i8] }
%"struct.std::__1::array" = type { [2 x %"class.libgav1::Array2D"] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"struct.std::__1::array.1" = type { [2 x %"class.libgav1::Array2D.2"] }
%"class.libgav1::Array2D.2" = type { %"class.std::__1::unique_ptr.3", i64, i64, %"class.libgav1::Array2DView.9" }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i8* }
%"class.libgav1::Array2DView.9" = type { i32, i32, i8* }
%"struct.libgav1::ObuSequenceHeader" = type { i8, i8, i8, i32, [32 x i32], [32 x %"struct.libgav1::BitStreamLevel"], [32 x i8], i8, i8, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"struct.libgav1::ColorConfig", i8, %"struct.libgav1::TimingInfo", i8, %"struct.libgav1::DecoderModelInfo", [32 x i8], i8, [32 x i8], i8, %"struct.libgav1::OperatingParameters" }
%"struct.libgav1::BitStreamLevel" = type { i8, i8 }
%"struct.libgav1::ColorConfig" = type { i8, i8, i32, i32, i32, i32, i8, i8, i32, i8 }
%"struct.libgav1::TimingInfo" = type { i32, i32, i8, i32 }
%"struct.libgav1::DecoderModelInfo" = type { i8, i32, i8, i8 }
%"struct.libgav1::OperatingParameters" = type { [32 x i32], [32 x i32], [32 x i8] }
%"struct.libgav1::ObuFrameHeader" = type { i16, i16, i64, [7 x i16], i32, i32, i32, i32, i32, i32, i32, %"struct.libgav1::LoopRestoration", [32 x i32], i32, %"struct.std::__1::array.10", %"struct.libgav1::TileInfo", %"struct.libgav1::QuantizerParameters", %"struct.libgav1::Segmentation", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], i8, i8, i8, %"struct.libgav1::Delta", %"struct.libgav1::Delta", [7 x i8], [8 x i8], %"struct.libgav1::LoopFilter", %"struct.libgav1::Cdef", %"struct.libgav1::FilmGrainParams" }
%"struct.libgav1::LoopRestoration" = type { [3 x i8], [3 x i32] }
%"struct.std::__1::array.10" = type { [8 x %"struct.libgav1::GlobalMotion"] }
%"struct.libgav1::GlobalMotion" = type { i8, [6 x i32], i16, i16, i16, i16 }
%"struct.libgav1::TileInfo" = type { i8, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32, [65 x i32], [65 x i32], i16, i8 }
%"struct.libgav1::QuantizerParameters" = type { i8, [3 x i8], [3 x i8], i8, [3 x i8] }
%"struct.libgav1::Segmentation" = type { i8, i8, i8, i8, i8, i8, [8 x [8 x i8]], [8 x [8 x i16]], [8 x i8], [8 x i8] }
%"struct.libgav1::Delta" = type { i8, i8, i8 }
%"struct.libgav1::LoopFilter" = type { %"struct.std::__1::array.11", i8, i8, i8, %"struct.std::__1::array.12", %"struct.std::__1::array.13" }
%"struct.std::__1::array.11" = type { [4 x i8] }
%"struct.std::__1::array.12" = type { [8 x i8] }
%"struct.std::__1::array.13" = type { [2 x i8] }
%"struct.libgav1::Cdef" = type { i8, i8, [8 x i8], [8 x i8], [8 x i8], [8 x i8] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.std::__1::array.14" = type { [8 x i8] }
%"struct.std::__1::array.15" = type { [8 x %"class.std::__1::shared_ptr"] }
%"class.std::__1::shared_ptr" = type { %"class.libgav1::RefCountedBuffer"*, %"class.std::__1::__shared_weak_count"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.31", %"class.libgav1::Array2D.2" }
%"class.libgav1::Array2D.31" = type { %"class.std::__1::unique_ptr.32", i64, i64, %"class.libgav1::Array2DView.39" }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon.35 }
%union.anon.35 = type { i32 }
%"class.libgav1::Array2DView.39" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.std::__1::array.21" = type { [8 x i8] }
%"struct.std::__1::array.40" = type opaque
%"struct.std::__1::array.41" = type opaque
%"class.libgav1::DaalaBitReader" = type { %"class.libgav1::BitReader", i8*, i8*, i8*, i8, i32, i32, i64 }
%"class.libgav1::BitReader" = type { i32 (...)** }
%"struct.libgav1::SymbolDecoderContext" = type { [5 x [4 x [11 x i16]]], [8 x i8], [3 x [9 x i16]], [10 x i8], [3 x [3 x i16]], [14 x i8], [3 x [3 x i16]], [14 x i8], [3 x [3 x i16]], [14 x i8], [5 x i16], [22 x i8], [5 x i16], [22 x i8], [4 x [5 x i16]], [24 x i8], [3 x i16], [26 x i8], [5 x [5 x [14 x i16]]], [4 x i8], [4 x [14 x i16]], [16 x i8], [8 x [8 x i16]], [2 x [13 x [15 x i16]]], [20 x i8], [9 x i16], [14 x i8], [6 x [17 x i16]], [20 x i8], [22 x [3 x i16]], [28 x i8], [6 x i16], [20 x i8], [4 x [3 x [4 x i16]]], [21 x [3 x i16]], [2 x i8], [5 x [13 x [3 x i16]]], [26 x i8], [3 x [4 x [17 x i16]]], [8 x i8], [2 x [4 x [13 x [17 x i16]]]], [16 x i8], [2 x [2 x [6 x i16]]], [16 x i8], [2 x [2 x [7 x i16]]], [8 x i8], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [24 x i8], [2 x [2 x [10 x i16]]], [16 x i8], [2 x [11 x i16]], [20 x i8], [2 x [12 x i16]], [16 x i8], [5 x [2 x [9 x [3 x i16]]]], [4 x i8], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [24 x i8], [5 x [2 x [21 x [5 x i16]]]], [12 x i8], [2 x [3 x [3 x i16]]], [28 x i8], [4 x i16], [24 x i8], [3 x i16], [26 x i8], [3 x i16], [26 x i8], [7 x [3 x [3 x i16]]], [2 x i8], [7 x [8 x i16]], [16 x i8], [2 x [3 x i16]], [20 x i8], [7 x [8 x i16]], [16 x i8], [2 x [7 x [5 x [9 x i16]]]], [20 x i8], [4 x [3 x i16]], [8 x i8], [5 x [3 x i16]], [2 x i8], [5 x [3 x i16]], [2 x i8], [2 x [3 x [3 x [3 x i16]]]], [20 x i8], [3 x [2 x [3 x i16]]], [28 x i8], [3 x [6 x [3 x i16]]], [20 x i8], [8 x [9 x i16]], [16 x i8], [6 x [3 x i16]], [28 x i8], [2 x [3 x i16]], [20 x i8], [6 x [3 x i16]], [28 x i8], [3 x [3 x i16]], [14 x i8], [3 x [3 x i16]], [14 x i8], [3 x [5 x i16]], [2 x i8], [22 x [3 x i16]], [28 x i8], [22 x [17 x i16]], [20 x i8], [22 x [3 x i16]], [28 x i8], [22 x [4 x i16]], [16 x i8], [6 x [3 x i16]], [28 x i8], [6 x [3 x i16]], [28 x i8], [22 x [3 x i16]], [28 x i8], [16 x [4 x i16]], [2 x [5 x i16]], [12 x i8], [2 x [2 x [3 x i16]]], [8 x i8], [2 x [2 x [12 x i16]]], [2 x [2 x [3 x i16]]], [8 x i8], [2 x [2 x [2 x [5 x i16]]]], [16 x i8], [2 x [2 x [3 x i16]]], [8 x i8], [2 x [2 x [10 x [3 x i16]]]], [16 x i8], [2 x [2 x [5 x i16]]], [24 x i8], [2 x [2 x [3 x i16]]], [8 x i8] }
%"class.libgav1::SegmentationMap" = type { i32, i32, %"class.std::__1::unique_ptr.3", %"class.libgav1::Array2DView.9" }
%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array.21", %"struct.std::__1::array.12", %"struct.std::__1::array.12", %"struct.std::__1::array.14", %"struct.std::__1::array.22", %"class.libgav1::Array2D.23", %"class.libgav1::Array2D.31" }
%"struct.std::__1::array.22" = type { [8 x i16] }
%"class.libgav1::Array2D.23" = type { %"class.std::__1::unique_ptr.24", i64, i64, %"class.libgav1::Array2DView.30" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i8* }
%"class.libgav1::Array2DView.30" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }
%"class.libgav1::PostFilter" = type <{ [2 x { i64, i64 }], %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::LoopRestoration"*, %"struct.libgav1::dsp::Dsp"*, i32, i32, i32, i32, i8, [3 x i8], [3 x i8], i8, i32, [4 x i8], i8*, i8*, i8, [8 x [4 x [8 x [2 x i8]]]], [3 x i8], [3 x %struct.anon.42], %"class.libgav1::Array2D.43"*, %"class.libgav1::Array2D.51"*, %"class.libgav1::LoopRestorationInfo"*, [2 x i8*], %"class.libgav1::YuvBuffer"*, %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"*, [3 x i8*], [3 x i8*], [3 x i8*], [3 x i8*], %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"*, i8, [7 x i8], %"class.libgav1::ThreadPool"*, i32, [9248 x i16], [4 x i8] }>
%struct.anon.42 = type { i32, i32, i32 }
%"class.libgav1::LoopRestorationInfo" = type { [3 x %"struct.libgav1::RestorationUnitInfo"*], %"class.libgav1::DynamicBuffer", [3 x i8], %"struct.libgav1::LoopRestoration"*, i8, i8, [3 x i32], [3 x i32], [3 x i32] }
%"class.libgav1::DynamicBuffer" = type { %"class.std::__1::unique_ptr.59", i64 }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"struct.libgav1::RestorationUnitInfo"* }
%"class.libgav1::YuvBuffer" = type <{ i32, i8, [3 x i8], i32, i32, i32, i32, [3 x i32], [3 x i32], [3 x i32], [3 x i32], [3 x i32], [4 x i8], [3 x i8*], %"class.std::__1::unique_ptr", i64, i8, i8, [6 x i8] }>
%"class.libgav1::BlockParametersHolder" = type { i32, i32, %"class.libgav1::DynamicBuffer.65", %"struct.std::__1::atomic", %"class.libgav1::Array2D.74" }
%"class.libgav1::DynamicBuffer.65" = type { %"class.std::__1::unique_ptr.66", i64 }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.std::__1::unique_ptr.69"* }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"struct.libgav1::BlockParameters"* }
%"struct.libgav1::BlockParameters" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x i8], [4 x i8], %"union.libgav1::CompoundMotionVector", %"struct.libgav1::PaletteModeInfo", %"class.std::__1::unique_ptr.78" }
%"struct.libgav1::PaletteModeInfo" = type { [2 x i8], [3 x [8 x i16]] }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.73" }
%"struct.std::__1::__atomic_base.73" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.libgav1::Array2D.74" = type { %"class.std::__1::unique_ptr.75", i64, i64, %"class.libgav1::Array2DView.88" }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.libgav1::BlockParameters"** }
%"class.libgav1::Array2DView.88" = type { i32, i32, %"struct.libgav1::BlockParameters"** }
%"class.libgav1::Quantizer" = type { %"struct.libgav1::QuantizerParameters"*, i16*, i16* }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.libgav1::Array2D.98" = type { %"class.std::__1::unique_ptr.99", i64, i64, %"class.libgav1::Array2DView.124" }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.std::__1::unique_ptr.102"* }
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.libgav1::ResidualBuffer"* }
%"class.libgav1::ResidualBuffer" = type { %"class.std::__1::unique_ptr.95", %"class.libgav1::Queue", %"class.libgav1::Queue.111", %"class.libgav1::ResidualBuffer"* }
%"class.libgav1::Queue" = type { %"class.std::__1::unique_ptr.105", i64, i64, i64, i64 }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.libgav1::TransformParameters"* }
%"struct.libgav1::TransformParameters" = type { i8, i32 }
%"class.libgav1::Queue.111" = type { %"class.std::__1::unique_ptr.112", i64, i64, i64, i64 }
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"struct.libgav1::PartitionTreeNode"* }
%"struct.libgav1::PartitionTreeNode" = type <{ i32, i32, i8, [3 x i8] }>
%"class.libgav1::Array2DView.124" = type { i32, i32, %"class.std::__1::unique_ptr.102"* }
%"class.libgav1::RefCountedBuffer" = type { %"class.libgav1::BufferPool"*, i8, i8*, %"class.libgav1::YuvBuffer", i8, %"class.std::__1::mutex", i8, i32, %"class.std::__1::condition_variable", %"class.std::__1::condition_variable", %"class.std::__1::condition_variable", i8, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.libgav1::SegmentationMap", %"struct.std::__1::array.10", [8 x i8], %"struct.libgav1::SymbolDecoderContext", %"struct.std::__1::array.12", %"struct.std::__1::array.13", %"struct.libgav1::Segmentation", %"struct.libgav1::FilmGrainParams", %"struct.libgav1::ReferenceInfo", [16 x i8] }
%"class.libgav1::BufferPool" = type { %"class.std::__1::mutex", %"class.libgav1::Vector", %"class.libgav1::InternalFrameBufferList", i32 (i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.Libgav1FrameBuffer*)*, void (i8*, i8*)*, i8* }
%"class.libgav1::Vector" = type { %"class.libgav1::internal::VectorBase" }
%"class.libgav1::internal::VectorBase" = type { %"class.libgav1::RefCountedBuffer"**, i64, i64 }
%"class.libgav1::InternalFrameBufferList" = type { %"class.libgav1::Vector.16" }
%"class.libgav1::Vector.16" = type { %"class.libgav1::internal::VectorBase.17" }
%"class.libgav1::internal::VectorBase.17" = type { %"class.std::__1::unique_ptr.18"*, i64, i64 }
%"class.std::__1::unique_ptr.18" = type opaque
%struct.Libgav1FrameBuffer = type { [3 x i8*], [3 x i32], i8* }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::condition_variable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.19, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.19 = type { i64 }
%"class.libgav1::Array2D.43" = type { %"class.std::__1::unique_ptr.44", i64, i64, %"class.libgav1::Array2DView.50" }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { i16* }
%"class.libgav1::Array2DView.50" = type { i32, i32, i16* }
%"class.libgav1::Array2D.51" = type { %"class.std::__1::unique_ptr.52", i64, i64, %"class.libgav1::Array2DView.58" }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { i8* }
%"class.libgav1::Array2DView.58" = type { i32, i32, i8* }
%"struct.std::__1::array.125" = type { [3 x %"struct.libgav1::RestorationUnitInfo"] }
%"class.libgav1::ThreadPool" = type { %"class.libgav1::Executor", %"class.std::__1::condition_variable", %"class.std::__1::mutex", %"class.libgav1::UnboundedQueue", %"class.std::__1::unique_ptr.89", i8, i32, [16 x i8] }
%"class.libgav1::Executor" = type { i32 (...)** }
%"class.libgav1::UnboundedQueue" = type { %"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block"*, i64, %"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block"*, i64 }
%"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block" = type opaque
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.libgav1::ThreadPool::WorkerThread"** }
%"class.libgav1::ThreadPool::WorkerThread" = type opaque
%"struct.libgav1::Tile::ThreadingParameters" = type { %"class.std::__1::mutex", %"class.libgav1::Array2D.126", i8, i32, %"class.std::__1::condition_variable" }
%"class.libgav1::Array2D.126" = type { %"class.std::__1::unique_ptr.127", i64, i64, %"class.libgav1::Array2DView.133" }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { i8* }
%"class.libgav1::Array2DView.133" = type { i32, i32, i8* }
%"class.libgav1::ResidualBufferPool" = type <{ %"class.std::__1::mutex", %"class.libgav1::ResidualBufferStack", i64, i32, [4 x i8] }>
%"class.libgav1::ResidualBufferStack" = type { %"class.libgav1::ResidualBuffer"*, i64 }
%"class.libgav1::TileScratchBufferPool" = type <{ %"class.std::__1::mutex", %"class.libgav1::Stack", i32, [4 x i8] }>
%"class.libgav1::Stack" = type <{ [128 x %"class.std::__1::unique_ptr.134"], i32, [4 x i8] }>
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"struct.libgav1::TileScratchBuffer"* }
%"struct.libgav1::TileScratchBuffer" = type <{ [16384 x i8], %union.anon.137, %"class.std::__1::unique_ptr.95", i64, i8, [3 x [34 x [34 x i8]]], [3 x i8] }>
%union.anon.137 = type { [2 x [16384 x i16]] }
%"class.libgav1::BlockingCounterImpl" = type opaque
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"struct.libgav1::PredictionParameters"* }
%"struct.libgav1::PredictionParameters" = type { i8, i8, [2 x i32], i8, i8, i32, i32, [2 x %"class.libgav1::Array2D"], i8, i8, i8, i32, i32, i8, i8, i8, %union.anon.81, [8 x i16], i32, i32, i32, [2 x %"struct.libgav1::MotionVector"], i32, [8 x [4 x i32]] }
%union.anon.81 = type { [8 x %"union.libgav1::CompoundMotionVector"] }
%"struct.std::__1::array.141" = type { [3 x %"class.libgav1::AlignedDynamicBuffer"] }
%"class.libgav1::AlignedDynamicBuffer" = type { %"class.std::__1::unique_ptr.95", i64 }
%"struct.std::__1::array.142" = type { [8 x i32] }

@_ZN7libgav113k4x4WidthLog2E = external local_unnamed_addr constant [22 x i8], align 16
@_ZN7libgav114k4x4HeightLog2E = external local_unnamed_addr constant [22 x i8], align 16

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i16* @_ZN7libgav14Tile15GetPartitionCdfEiiNS_9BlockSizeE(%"class.libgav1::Tile"* readonly, i32, i32, i8 zeroext) local_unnamed_addr #0 align 2 {
  %5 = zext i8 %3 to i64
  %6 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav113k4x4WidthLog2E, i64 0, i64 %5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 5
  %10 = load i32, i32* %9, align 32
  %11 = icmp slt i32 %10, %1
  br i1 %11, label %12, label %34

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 35
  %14 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %13, align 32
  %15 = add nsw i32 %1, -1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %14, i64 0, i32 4, i32 3, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = sext i32 %18 to i64
  %20 = mul nsw i64 %19, %16
  %21 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %14, i64 0, i32 4, i32 3, i32 2
  %22 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %21, align 8
  %23 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %22, i64 %20
  %24 = sext i32 %2 to i64
  %25 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %23, i64 %24
  %26 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %25, align 8
  %27 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %26, i64 0, i32 0
  %28 = load i8, i8* %27, align 8
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav113k4x4WidthLog2E, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp ult i8 %31, %7
  %33 = zext i1 %32 to i32
  br label %34

34:                                               ; preds = %12, %4
  %35 = phi i32 [ %33, %12 ], [ 0, %4 ]
  %36 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 7
  %37 = load i32, i32* %36, align 8
  %38 = icmp slt i32 %37, %2
  br i1 %38, label %39, label %62

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 35
  %41 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %40, align 32
  %42 = add nsw i32 %2, -1
  %43 = sext i32 %1 to i64
  %44 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %41, i64 0, i32 4, i32 3, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  %47 = mul nsw i64 %46, %43
  %48 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %41, i64 0, i32 4, i32 3, i32 2
  %49 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %48, align 8
  %50 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %49, i64 %47
  %51 = sext i32 %42 to i64
  %52 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %50, i64 %51
  %53 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %52, align 8
  %54 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %53, i64 0, i32 0
  %55 = load i8, i8* %54, align 8
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav114k4x4HeightLog2E, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = icmp ult i8 %58, %7
  %60 = zext i1 %59 to i32
  %61 = shl nuw nsw i32 %60, 1
  br label %62

62:                                               ; preds = %39, %34
  %63 = phi i32 [ %61, %39 ], [ 0, %34 ]
  %64 = or i32 %63, %35
  %65 = add nsw i64 %8, -1
  %66 = sext i32 %64 to i64
  %67 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 0, i64 %65, i64 %66, i64 0
  ret i16* %67
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav14Tile13ReadPartitionEiiNS_9BlockSizeEbbPNS_9PartitionE(%"class.libgav1::Tile"*, i32, i32, i8 zeroext, i1 zeroext, i1 zeroext, i8* nocapture) local_unnamed_addr #1 align 2 {
  %8 = icmp ult i8 %3, 4
  %9 = icmp ne i8 %3, 2
  %10 = and i1 %8, %9
  br i1 %10, label %142, label %11

11:                                               ; preds = %7
  %12 = or i1 %4, %5
  br i1 %12, label %13, label %142

13:                                               ; preds = %11
  %14 = zext i8 %3 to i64
  %15 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav113k4x4WidthLog2E, i64 0, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 5
  %19 = load i32, i32* %18, align 32
  %20 = icmp slt i32 %19, %1
  br i1 %20, label %21, label %43

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 35
  %23 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %22, align 32
  %24 = add nsw i32 %1, -1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %23, i64 0, i32 4, i32 3, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = sext i32 %27 to i64
  %29 = mul nsw i64 %28, %25
  %30 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %23, i64 0, i32 4, i32 3, i32 2
  %31 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %30, align 8
  %32 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %31, i64 %29
  %33 = sext i32 %2 to i64
  %34 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %32, i64 %33
  %35 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %34, align 8
  %36 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %35, i64 0, i32 0
  %37 = load i8, i8* %36, align 8
  %38 = zext i8 %37 to i64
  %39 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav113k4x4WidthLog2E, i64 0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = icmp ult i8 %40, %16
  %42 = zext i1 %41 to i32
  br label %43

43:                                               ; preds = %21, %13
  %44 = phi i32 [ %42, %21 ], [ 0, %13 ]
  %45 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 7
  %46 = load i32, i32* %45, align 8
  %47 = icmp slt i32 %46, %2
  br i1 %47, label %48, label %71

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 35
  %50 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %49, align 32
  %51 = add nsw i32 %2, -1
  %52 = sext i32 %1 to i64
  %53 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %50, i64 0, i32 4, i32 3, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = sext i32 %54 to i64
  %56 = mul nsw i64 %55, %52
  %57 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %50, i64 0, i32 4, i32 3, i32 2
  %58 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %57, align 8
  %59 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %58, i64 %56
  %60 = sext i32 %51 to i64
  %61 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %59, i64 %60
  %62 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %61, align 8
  %63 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %62, i64 0, i32 0
  %64 = load i8, i8* %63, align 8
  %65 = zext i8 %64 to i64
  %66 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav114k4x4HeightLog2E, i64 0, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = icmp ult i8 %67, %16
  %69 = zext i1 %68 to i32
  %70 = shl nuw nsw i32 %69, 1
  br label %71

71:                                               ; preds = %43, %48
  %72 = phi i32 [ %70, %48 ], [ 0, %43 ]
  %73 = or i32 %72, %44
  %74 = add nsw i64 %17, -1
  %75 = sext i32 %73 to i64
  %76 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 0, i64 %74, i64 %75, i64 0
  %77 = icmp eq i16* %76, null
  br i1 %77, label %144, label %78

78:                                               ; preds = %71
  %79 = and i1 %4, %5
  br i1 %79, label %80, label %95

80:                                               ; preds = %78
  %81 = icmp eq i8 %16, 1
  br i1 %81, label %82, label %86

82:                                               ; preds = %80
  %83 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 28
  %84 = tail call i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi4EEEiPt(%"class.libgav1::DaalaBitReader"* %83, i16* nonnull %76) #3
  %85 = trunc i32 %84 to i8
  br label %142

86:                                               ; preds = %80
  %87 = icmp eq i8 %16, 5
  %88 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 28
  br i1 %87, label %89, label %92

89:                                               ; preds = %86
  %90 = tail call i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi8EEEiPt(%"class.libgav1::DaalaBitReader"* %88, i16* nonnull %76) #3
  %91 = trunc i32 %90 to i8
  br label %142

92:                                               ; preds = %86
  %93 = tail call i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi10EEEiPt(%"class.libgav1::DaalaBitReader"* %88, i16* nonnull %76) #3
  %94 = trunc i32 %93 to i8
  br label %142

95:                                               ; preds = %78
  br i1 %5, label %96, label %118

96:                                               ; preds = %95
  %97 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 0, i64 %74, i64 %75, i64 1
  %98 = load i16, i16* %97, align 2
  %99 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 0, i64 %74, i64 %75, i64 5
  %100 = load i16, i16* %99, align 2
  %101 = add i16 %100, %98
  %102 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 0, i64 %74, i64 %75, i64 4
  %103 = load i16, i16* %102, align 2
  %104 = sub i16 %101, %103
  %105 = icmp eq i8 %3, 21
  br i1 %105, label %113, label %106

106:                                              ; preds = %96
  %107 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 0, i64 %74, i64 %75, i64 8
  %108 = load i16, i16* %107, align 2
  %109 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 0, i64 %74, i64 %75, i64 7
  %110 = load i16, i16* %109, align 2
  %111 = add i16 %108, %104
  %112 = sub i16 %111, %110
  br label %113

113:                                              ; preds = %96, %106
  %114 = phi i16 [ %112, %106 ], [ %104, %96 ]
  %115 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 28
  %116 = tail call zeroext i1 @_ZN7libgav114DaalaBitReader26ReadSymbolWithoutCdfUpdateEt(%"class.libgav1::DaalaBitReader"* %115, i16 zeroext %114) #3
  %117 = select i1 %116, i8 3, i8 1
  br label %142

118:                                              ; preds = %95
  %119 = load i16, i16* %76, align 2
  %120 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 0, i64 %74, i64 %75, i64 1
  %121 = load i16, i16* %120, align 2
  %122 = sub i16 %119, %121
  %123 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 0, i64 %74, i64 %75, i64 2
  %124 = load i16, i16* %123, align 2
  %125 = add i16 %122, %124
  %126 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 0, i64 %74, i64 %75, i64 6
  %127 = load i16, i16* %126, align 2
  %128 = sub i16 %125, %127
  %129 = icmp eq i8 %3, 21
  br i1 %129, label %137, label %130

130:                                              ; preds = %118
  %131 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 0, i64 %74, i64 %75, i64 7
  %132 = load i16, i16* %131, align 2
  %133 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 0, i64 %74, i64 %75, i64 8
  %134 = load i16, i16* %133, align 2
  %135 = add i16 %132, %128
  %136 = sub i16 %135, %134
  br label %137

137:                                              ; preds = %118, %130
  %138 = phi i16 [ %136, %130 ], [ %128, %118 ]
  %139 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 28
  %140 = tail call zeroext i1 @_ZN7libgav114DaalaBitReader26ReadSymbolWithoutCdfUpdateEt(%"class.libgav1::DaalaBitReader"* %139, i16 zeroext %138) #3
  %141 = select i1 %140, i8 3, i8 2
  br label %142

142:                                              ; preds = %11, %7, %137, %113, %89, %92, %82
  %143 = phi i8 [ %85, %82 ], [ %94, %92 ], [ %91, %89 ], [ %117, %113 ], [ %141, %137 ], [ 0, %7 ], [ 3, %11 ]
  store i8 %143, i8* %6, align 1
  br label %144

144:                                              ; preds = %142, %71
  %145 = phi i1 [ false, %71 ], [ true, %142 ]
  ret i1 %145
}

declare i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi4EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #2

declare i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi8EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #2

declare i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi10EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #2

declare zeroext i1 @_ZN7libgav114DaalaBitReader26ReadSymbolWithoutCdfUpdateEt(%"class.libgav1::DaalaBitReader"*, i16 zeroext) local_unnamed_addr #2

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
