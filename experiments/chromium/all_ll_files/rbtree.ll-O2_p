; ModuleID = '../../third_party/nasm/nasmlib/rbtree.c'
source_filename = "../../third_party/nasm/nasmlib/rbtree.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rbtree = type { i64, %struct.rbtree*, %struct.rbtree*, i8 }

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.rbtree* @rb_search(%struct.rbtree* readonly, i64) local_unnamed_addr #0 {
  %3 = icmp eq %struct.rbtree* %0, null
  br i1 %3, label %18, label %4

4:                                                ; preds = %2, %10
  %5 = phi %struct.rbtree* [ %15, %10 ], [ null, %2 ]
  %6 = phi %struct.rbtree* [ %16, %10 ], [ %0, %2 ]
  %7 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %6, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, %1
  br i1 %9, label %18, label %10

10:                                               ; preds = %4
  %11 = icmp ugt i64 %8, %1
  %12 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %6, i64 0, i32 1
  %13 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %6, i64 0, i32 2
  %14 = select i1 %11, %struct.rbtree** %12, %struct.rbtree** %13
  %15 = select i1 %11, %struct.rbtree* %5, %struct.rbtree* %6
  %16 = load %struct.rbtree*, %struct.rbtree** %14, align 8
  %17 = icmp eq %struct.rbtree* %16, null
  br i1 %17, label %18, label %4

18:                                               ; preds = %4, %10, %2
  %19 = phi %struct.rbtree* [ null, %2 ], [ %15, %10 ], [ %6, %4 ]
  ret %struct.rbtree* %19
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden %struct.rbtree* @rb_insert(%struct.rbtree*, %struct.rbtree*) local_unnamed_addr #1 {
  %3 = icmp eq %struct.rbtree* %0, null
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %1, i64 0, i32 3
  store i8 1, i8* %5, align 8
  br label %86

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %0, i64 0, i32 1
  %8 = load %struct.rbtree*, %struct.rbtree** %7, align 8
  %9 = icmp eq %struct.rbtree* %8, null
  br i1 %9, label %32, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %8, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %32, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %0, i64 0, i32 2
  %16 = load %struct.rbtree*, %struct.rbtree** %15, align 8
  %17 = icmp eq %struct.rbtree* %16, null
  br i1 %17, label %32, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %16, i64 0, i32 3
  %20 = load i8, i8* %19, align 8, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %0, i64 0, i32 3
  %24 = load i8, i8* %23, align 8, !range !2
  %25 = xor i8 %24, 1
  store i8 %25, i8* %23, align 8
  %26 = load i8, i8* %11, align 8, !range !2
  %27 = xor i8 %26, 1
  store i8 %27, i8* %11, align 8
  %28 = load %struct.rbtree*, %struct.rbtree** %15, align 8
  %29 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %28, i64 0, i32 3
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = xor i8 %30, 1
  store i8 %31, i8* %29, align 8
  br label %32

32:                                               ; preds = %18, %10, %14, %6, %22
  %33 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %1, i64 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %0, i64 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = icmp ult i64 %34, %36
  br i1 %37, label %38, label %43

38:                                               ; preds = %32
  %39 = load %struct.rbtree*, %struct.rbtree** %7, align 8
  %40 = tail call %struct.rbtree* @rb_insert(%struct.rbtree* %39, %struct.rbtree* %1)
  store %struct.rbtree* %40, %struct.rbtree** %7, align 8
  %41 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %0, i64 0, i32 2
  %42 = load %struct.rbtree*, %struct.rbtree** %41, align 8
  br label %47

43:                                               ; preds = %32
  %44 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %0, i64 0, i32 2
  %45 = load %struct.rbtree*, %struct.rbtree** %44, align 8
  %46 = tail call %struct.rbtree* @rb_insert(%struct.rbtree* %45, %struct.rbtree* %1)
  store %struct.rbtree* %46, %struct.rbtree** %44, align 8
  br label %47

47:                                               ; preds = %43, %38
  %48 = phi %struct.rbtree* [ %46, %43 ], [ %42, %38 ]
  %49 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %0, i64 0, i32 2
  %50 = icmp eq %struct.rbtree* %48, null
  br i1 %50, label %62, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %48, i64 0, i32 3
  %53 = load i8, i8* %52, align 8, !range !2
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %48, i64 0, i32 1
  %57 = bitcast %struct.rbtree** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %struct.rbtree** %49 to i64*
  store i64 %58, i64* %59, align 8
  store %struct.rbtree* %0, %struct.rbtree** %56, align 8
  %60 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %0, i64 0, i32 3
  %61 = load i8, i8* %60, align 8, !range !2
  store i8 %61, i8* %52, align 8
  store i8 1, i8* %60, align 8
  br label %62

62:                                               ; preds = %51, %47, %55
  %63 = phi %struct.rbtree* [ %48, %55 ], [ %0, %51 ], [ %0, %47 ]
  %64 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %63, i64 0, i32 1
  %65 = load %struct.rbtree*, %struct.rbtree** %64, align 8
  %66 = icmp eq %struct.rbtree* %65, null
  br i1 %66, label %86, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %65, i64 0, i32 3
  %69 = load i8, i8* %68, align 8, !range !2
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %86, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %65, i64 0, i32 1
  %73 = load %struct.rbtree*, %struct.rbtree** %72, align 8
  %74 = icmp eq %struct.rbtree* %73, null
  br i1 %74, label %86, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %73, i64 0, i32 3
  %77 = load i8, i8* %76, align 8, !range !2
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %86, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %65, i64 0, i32 2
  %81 = bitcast %struct.rbtree** %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast %struct.rbtree** %64 to i64*
  store i64 %82, i64* %83, align 8
  store %struct.rbtree* %63, %struct.rbtree** %80, align 8
  %84 = getelementptr inbounds %struct.rbtree, %struct.rbtree* %63, i64 0, i32 3
  %85 = load i8, i8* %84, align 8, !range !2
  store i8 %85, i8* %68, align 8
  store i8 1, i8* %84, align 8
  br label %86

86:                                               ; preds = %75, %67, %71, %62, %79, %4
  %87 = phi %struct.rbtree* [ %1, %4 ], [ %65, %79 ], [ %63, %75 ], [ %63, %67 ], [ %63, %62 ], [ %63, %71 ]
  ret %struct.rbtree* %87
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
