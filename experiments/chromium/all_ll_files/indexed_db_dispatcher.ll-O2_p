; ModuleID = '../../third_party/blink/renderer/modules/indexeddb/indexed_db_dispatcher.cc'
source_filename = "../../third_party/blink/renderer/modules/indexeddb/indexed_db_dispatcher.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<WTF::ThreadSpecific<blink::IndexedDBDispatcher> >::InstanceStorage" }
%"class.WTF::StaticSingleton<WTF::ThreadSpecific<blink::IndexedDBDispatcher> >::InstanceStorage" = type { [16 x i8] }
%"class.blink::IndexedDBDispatcher" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.blink::WebIDBCursorImpl"**, i32, i32, i32, [4 x i8] }>
%"class.blink::WebIDBCursorImpl" = type { %"class.blink::WebIDBCursor", i64, %"class.mojo::AssociatedRemote", %"class.WTF::Vector", %"class.WTF::Vector", %"class.WTF::Vector.76", i32, i32, i32, i32, %class.scoped_refptr.120, %"class.base::WeakPtrFactory.121" }
%"class.blink::WebIDBCursor" = type { i32 (...)** }
%"class.mojo::AssociatedRemote" = type { %"class.mojo::internal::AssociatedInterfacePtrState" }
%"class.mojo::internal::AssociatedInterfacePtrState" = type { %"class.mojo::internal::AssociatedInterfacePtrStateBase.base", %"class.std::__1::unique_ptr.62" }
%"class.mojo::internal::AssociatedInterfacePtrStateBase.base" = type <{ %"class.std::__1::unique_ptr", i32 }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.mojo::InterfaceEndpointClient"* }
%"class.mojo::InterfaceEndpointClient" = type { %"class.mojo::MessageReceiverWithResponder", i8, %"class.base::RepeatingCallback", %"class.base::OnceCallback", %"class.absl::optional", %"class.absl::optional.1", %"class.mojo::ConnectionGroup::Ref", i32, %"class.mojo::ScopedInterfaceEndpointHandle", %"class.std::__1::unique_ptr.22", %"class.mojo::InterfaceEndpointController"*, %"class.mojo::MessageReceiverWithResponderStatus"*, %"class.mojo::InterfaceEndpointClient::HandleIncomingMessageThunk", %"class.mojo::MessageDispatcher", %"class.std::__1::map", %"class.std::__1::map.48", i64, %"class.base::OnceCallback.15", %"class.base::OnceCallback.57", i8, %class.scoped_refptr.6, %"class.mojo::internal::ControlMessageProxy", %"class.mojo::internal::ControlMessageHandler", i8*, %"class.base::WeakPtrFactory.58" }
%"class.mojo::MessageReceiverWithResponder" = type { %"class.mojo::MessageReceiver" }
%"class.mojo::MessageReceiver" = type { i32 (...)** }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.absl::optional.1" = type { %"class.absl::optional_internal::optional_data.2" }
%"class.absl::optional_internal::optional_data.2" = type { %"class.absl::optional_internal::optional_data_base.3" }
%"class.absl::optional_internal::optional_data_base.3" = type { %"class.absl::optional_internal::optional_data_dtor_base.4" }
%"class.absl::optional_internal::optional_data_dtor_base.4" = type { i8, %union.anon.5 }
%union.anon.5 = type { %"class.base::OneShotTimer" }
%"class.base::OneShotTimer" = type { %"class.base::internal::TimerBase", %"class.base::OnceCallback.15" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr.6, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.8 }
%class.scoped_refptr.8 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.9", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.9" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.10" }
%"struct.std::__1::atomic.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i8 }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.20 }
%class.scoped_refptr.20 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.122", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.6, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.105", [4 x i8] }>
%"class.base::RefCountedThreadSafe.122" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.105" = type { %"struct.std::__1::__atomic_base.106" }
%"struct.std::__1::__atomic_base.106" = type { %"struct.std::__1::__atomic_base.107" }
%"struct.std::__1::__atomic_base.107" = type { %"struct.std::__1::__cxx_atomic_impl.108" }
%"struct.std::__1::__cxx_atomic_impl.108" = type { %"struct.std::__1::__cxx_atomic_base_impl.109" }
%"struct.std::__1::__cxx_atomic_base_impl.109" = type { i32 }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr.21 }
%class.scoped_refptr.21 = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.mojo::AssociatedGroup"* }
%"class.mojo::AssociatedGroup" = type { %"class.base::RepeatingCallback.25", %class.scoped_refptr.26 }
%"class.base::RepeatingCallback.25" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.26 = type { %"class.mojo::AssociatedGroupController"* }
%"class.mojo::AssociatedGroupController" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.27", [4 x i8] }>
%"class.base::RefCountedThreadSafe.27" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.mojo::InterfaceEndpointController" = type opaque
%"class.mojo::MessageReceiverWithResponderStatus" = type { %"class.mojo::MessageReceiver" }
%"class.mojo::InterfaceEndpointClient::HandleIncomingMessageThunk" = type { %"class.mojo::MessageReceiver", %"class.mojo::InterfaceEndpointClient"* }
%"class.mojo::MessageDispatcher" = type { %"class.mojo::MessageReceiver", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.35", %"class.mojo::MessageReceiver"*, %"class.base::WeakPtrFactory.41" }
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.mojo::MessageReceiver"* }
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.mojo::MessageFilter"* }
%"class.mojo::MessageFilter" = type { i32 (...)** }
%"class.base::WeakPtrFactory.41" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.42", %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { i64 }
%"class.std::__1::map.48" = type { %"class.std::__1::__tree.49" }
%"class.std::__1::__tree.49" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.50", %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.base::OnceCallback.15" = type { %"class.base::internal::CallbackBase" }
%"class.base::OnceCallback.57" = type { %"class.base::internal::CallbackBase" }
%class.scoped_refptr.6 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.7" }>
%"class.base::RefCountedThreadSafe.7" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.mojo::internal::ControlMessageProxy" = type { %"class.mojo::InterfaceEndpointClient"*, i8, %"class.base::OnceCallback.15" }
%"class.mojo::internal::ControlMessageHandler" = type <{ %"class.mojo::MessageReceiverWithResponderStatus", %"class.mojo::InterfaceEndpointClient"*, i32, [4 x i8] }>
%"class.base::WeakPtrFactory.58" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.blink::mojom::blink::IDBCursorProxy"* }
%"class.blink::mojom::blink::IDBCursorProxy" = type { %"class.blink::mojom::blink::IDBCursor", %"class.mojo::MessageReceiverWithResponder"* }
%"class.blink::mojom::blink::IDBCursor" = type { i32 (...)** }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.std::__1::unique_ptr.68"*, i32, i32 }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.blink::IDBKey"* }
%"class.blink::IDBKey" = type { i32, %"class.WTF::Vector", %class.scoped_refptr.82, %"class.WTF::String", double, i64 }
%class.scoped_refptr.82 = type { %"class.WTF::SharedBuffer"* }
%"class.WTF::SharedBuffer" = type { %"class.WTF::RefCounted", i64, %"class.WTF::Vector.83", %"class.WTF::Vector.88" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::Vector.83" = type { %"class.WTF::VectorBuffer.84" }
%"class.WTF::VectorBuffer.84" = type { %"class.WTF::VectorBufferBase.85" }
%"class.WTF::VectorBufferBase.85" = type { i8*, i32, i32 }
%"class.WTF::Vector.88" = type { %"class.WTF::VectorBuffer.89" }
%"class.WTF::VectorBuffer.89" = type { %"class.WTF::VectorBufferBase.90" }
%"class.WTF::VectorBufferBase.90" = type { %"class.std::__1::unique_ptr.91"*, i32, i32 }
%"class.std::__1::unique_ptr.91" = type opaque
%"class.WTF::String" = type { %class.scoped_refptr.104 }
%class.scoped_refptr.104 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.105" }
%"class.WTF::Vector.76" = type { %"class.WTF::VectorBuffer.77" }
%"class.WTF::VectorBuffer.77" = type { %"class.WTF::VectorBufferBase.78" }
%"class.WTF::VectorBufferBase.78" = type { %"class.std::__1::unique_ptr.79"*, i32, i32 }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::IDBValue"* }
%"class.blink::IDBValue" = type { %class.scoped_refptr.82, %"class.WTF::Vector.94", %"class.WTF::Vector.99", %"class.std::__1::unique_ptr.68", %"class.blink::IDBKeyPath", %"class.v8::Isolate"*, i64 }
%"class.WTF::Vector.94" = type { %"class.WTF::VectorBuffer.95" }
%"class.WTF::VectorBuffer.95" = type { %"class.WTF::VectorBufferBase.96" }
%"class.WTF::VectorBufferBase.96" = type { %"class.blink::WebBlobInfo"*, i32, i32 }
%"class.blink::WebBlobInfo" = type opaque
%"class.WTF::Vector.99" = type { %"class.WTF::VectorBuffer.100" }
%"class.WTF::VectorBuffer.100" = type { %"class.WTF::VectorBufferBase.101" }
%"class.WTF::VectorBufferBase.101" = type { %"class.mojo::PendingRemote"*, i32, i32 }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.blink::IDBKeyPath" = type { i32, %"class.WTF::String", %"class.WTF::Vector.110" }
%"class.WTF::Vector.110" = type { %"class.WTF::VectorBuffer.111" }
%"class.WTF::VectorBuffer.111" = type { %"class.WTF::VectorBufferBase.112" }
%"class.WTF::VectorBufferBase.112" = type { %"class.WTF::String"*, i32, i32 }
%"class.v8::Isolate" = type { i8 }
%class.scoped_refptr.120 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::WeakPtrFactory.121" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.127 }
%union.anon.127 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF14ThreadSpecificIN5blink19IndexedDBDispatcherEE7DestroyEPv = comdat any

$_ZN3WTF9HashTableIPN5blink16WebIDBCursorImplES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS6_S8_S9_EERKS3_RS3_EENS_18HashTableAddResultISA_S3_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIPN5blink16WebIDBCursorImplES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_ = comdat any

$_ZN3WTF9HashTableIPN5blink16WebIDBCursorImplES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSB_ = comdat any

@_ZZN5blink19IndexedDBDispatcher27GetInstanceForCurrentThreadEvE26s_thread_specific_instance = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink19IndexedDBDispatcher27GetInstanceForCurrentThreadEvE26s_thread_specific_instance = internal global i64 0, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19IndexedDBDispatcherEEEPKcv = private unnamed_addr constant [74 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::IndexedDBDispatcher]\00", align 1
@.str = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink16WebIDBCursorImplEEEPKcv = private unnamed_addr constant [73 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::WebIDBCursorImpl *]\00", align 1

@_ZN5blink19IndexedDBDispatcherC1Ev = hidden unnamed_addr alias void (%"class.blink::IndexedDBDispatcher"*), void (%"class.blink::IndexedDBDispatcher"*)* @_ZN5blink19IndexedDBDispatcherC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::IndexedDBDispatcher"* @_ZN5blink19IndexedDBDispatcher27GetInstanceForCurrentThreadEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink19IndexedDBDispatcher27GetInstanceForCurrentThreadEvE26s_thread_specific_instance to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink19IndexedDBDispatcher27GetInstanceForCurrentThreadEvE26s_thread_specific_instance) #6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  store %"class.blink::IndexedDBDispatcher"* null, %"class.blink::IndexedDBDispatcher"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink19IndexedDBDispatcher27GetInstanceForCurrentThreadEvE26s_thread_specific_instance to %"class.blink::IndexedDBDispatcher"**), align 8
  tail call void @_ZN4base18ThreadLocalStorage4SlotC1EPFvPvE(%"class.base::ThreadLocalStorage::Slot"* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink19IndexedDBDispatcher27GetInstanceForCurrentThreadEvE26s_thread_specific_instance, i64 0, i32 0, i32 0, i64 8) to %"class.base::ThreadLocalStorage::Slot"*), void (i8*)* nonnull @_ZN3WTF14ThreadSpecificIN5blink19IndexedDBDispatcherEE7DestroyEPv) #6
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink19IndexedDBDispatcher27GetInstanceForCurrentThreadEvE26s_thread_specific_instance) #6
  br label %7

7:                                                ; preds = %3, %6, %0
  %8 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink19IndexedDBDispatcher27GetInstanceForCurrentThreadEvE26s_thread_specific_instance, i64 0, i32 0, i32 0, i64 8) to %"class.base::ThreadLocalStorage::Slot"*)) #6
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %12, !prof !3

10:                                               ; preds = %7
  %11 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 24, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19IndexedDBDispatcherEEEPKcv, i64 0, i64 0)) #6
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink19IndexedDBDispatcher27GetInstanceForCurrentThreadEvE26s_thread_specific_instance, i64 0, i32 0, i32 0, i64 8) to %"class.base::ThreadLocalStorage::Slot"*), i8* %11) #6
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 20, i1 false) #6
  br label %12

12:                                               ; preds = %7, %10
  %13 = phi i8* [ %11, %10 ], [ %8, %7 ]
  %14 = bitcast i8* %13 to %"class.blink::IndexedDBDispatcher"*
  ret %"class.blink::IndexedDBDispatcher"* %14
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19IndexedDBDispatcherC2Ev(%"class.blink::IndexedDBDispatcher"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::IndexedDBDispatcher"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 20, i1 false) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19IndexedDBDispatcher14RegisterCursorEPNS_16WebIDBCursorImplE(%"class.blink::WebIDBCursorImpl"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::WebIDBCursorImpl"*, align 8
  store %"class.blink::WebIDBCursorImpl"* %0, %"class.blink::WebIDBCursorImpl"** %2, align 8
  %3 = tail call %"class.blink::IndexedDBDispatcher"* @_ZN5blink19IndexedDBDispatcher27GetInstanceForCurrentThreadEv()
  %4 = getelementptr inbounds %"class.blink::IndexedDBDispatcher", %"class.blink::IndexedDBDispatcher"* %3, i64 0, i32 0, i32 0
  %5 = call { %"class.blink::WebIDBCursorImpl"**, i8 } @_ZN3WTF9HashTableIPN5blink16WebIDBCursorImplES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS6_S8_S9_EERKS3_RS3_EENS_18HashTableAddResultISA_S3_EEOT0_OT1_(%"class.WTF::HashTable"* %4, %"class.blink::WebIDBCursorImpl"** nonnull dereferenceable(8) %2, %"class.blink::WebIDBCursorImpl"** nonnull dereferenceable(8) %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19IndexedDBDispatcher16UnregisterCursorEPNS_16WebIDBCursorImplE(%"class.blink::WebIDBCursorImpl"*) local_unnamed_addr #0 align 2 {
  %2 = ptrtoint %"class.blink::WebIDBCursorImpl"* %0 to i64
  %3 = tail call %"class.blink::IndexedDBDispatcher"* @_ZN5blink19IndexedDBDispatcher27GetInstanceForCurrentThreadEv()
  %4 = getelementptr inbounds %"class.blink::IndexedDBDispatcher", %"class.blink::IndexedDBDispatcher"* %3, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.blink::IndexedDBDispatcher", %"class.blink::IndexedDBDispatcher"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::WebIDBCursorImpl"**, %"class.blink::WebIDBCursorImpl"*** %5, align 8
  %7 = icmp eq %"class.blink::WebIDBCursorImpl"** %6, null
  %8 = getelementptr inbounds %"class.blink::IndexedDBDispatcher", %"class.blink::IndexedDBDispatcher"* %3, i64 0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  br i1 %7, label %71, label %10

10:                                               ; preds = %1
  %11 = add i32 %9, -1
  %12 = zext i32 %11 to i64
  %13 = shl i64 %2, 32
  %14 = xor i64 %13, -1
  %15 = add i64 %14, %2
  %16 = lshr i64 %15, 22
  %17 = xor i64 %16, %15
  %18 = shl i64 %17, 13
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 8
  %22 = xor i64 %21, %20
  %23 = mul i64 %22, 9
  %24 = lshr i64 %23, 15
  %25 = xor i64 %24, %23
  %26 = shl i64 %25, 27
  %27 = xor i64 %26, -1
  %28 = add i64 %25, %27
  %29 = lshr i64 %28, 31
  %30 = xor i64 %29, %28
  %31 = trunc i64 %30 to i32
  %32 = and i32 %11, %31
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %6, i64 %33
  %35 = load %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %34, align 8
  %36 = icmp eq %"class.blink::WebIDBCursorImpl"* %35, %0
  br i1 %36, label %66, label %37

37:                                               ; preds = %10
  %38 = xor i32 %31, -1
  %39 = lshr i32 %31, 23
  %40 = add i32 %39, %38
  %41 = shl i32 %40, 12
  %42 = xor i32 %41, %40
  %43 = lshr i32 %42, 7
  %44 = xor i32 %43, %42
  %45 = shl i32 %44, 2
  %46 = xor i32 %45, %44
  %47 = lshr i32 %46, 20
  %48 = xor i32 %47, %46
  %49 = or i32 %48, 1
  %50 = zext i32 %49 to i64
  br label %51

51:                                               ; preds = %56, %37
  %52 = phi %"class.blink::WebIDBCursorImpl"* [ %35, %37 ], [ %62, %56 ]
  %53 = phi i64 [ %33, %37 ], [ %60, %56 ]
  %54 = phi i64 [ 0, %37 ], [ %58, %56 ]
  %55 = icmp eq %"class.blink::WebIDBCursorImpl"* %52, null
  br i1 %55, label %71, label %56

56:                                               ; preds = %51
  %57 = icmp eq i64 %54, 0
  %58 = select i1 %57, i64 %50, i64 %54
  %59 = add i64 %58, %53
  %60 = and i64 %59, %12
  %61 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %6, i64 %60
  %62 = load %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %61, align 8
  %63 = icmp eq %"class.blink::WebIDBCursorImpl"* %62, %0
  br i1 %63, label %64, label %51

64:                                               ; preds = %56
  %65 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %6, i64 %60
  br label %66

66:                                               ; preds = %64, %10
  %67 = phi %"class.blink::WebIDBCursorImpl"** [ %34, %10 ], [ %65, %64 ]
  %68 = icmp eq %"class.blink::WebIDBCursorImpl"** %67, null
  br i1 %68, label %71, label %69

69:                                               ; preds = %66
  %70 = zext i32 %9 to i64
  br label %74

71:                                               ; preds = %51, %66, %1
  %72 = zext i32 %9 to i64
  %73 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %6, i64 %72
  br label %74

74:                                               ; preds = %69, %71
  %75 = phi i64 [ %70, %69 ], [ %72, %71 ]
  %76 = phi %"class.blink::WebIDBCursorImpl"** [ %67, %69 ], [ %73, %71 ]
  %77 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %6, i64 %75
  %78 = icmp eq %"class.blink::WebIDBCursorImpl"** %77, %76
  br i1 %78, label %101, label %79

79:                                               ; preds = %74
  store %"class.blink::WebIDBCursorImpl"* inttoptr (i64 -1 to %"class.blink::WebIDBCursorImpl"*), %"class.blink::WebIDBCursorImpl"** %76, align 8
  %80 = getelementptr inbounds %"class.blink::IndexedDBDispatcher", %"class.blink::IndexedDBDispatcher"* %3, i64 0, i32 0, i32 0, i32 3
  %81 = load i32, i32* %80, align 8
  %82 = add i32 %81, 1
  %83 = and i32 %82, 2147483647
  %84 = and i32 %81, -2147483648
  %85 = or i32 %83, %84
  store i32 %85, i32* %80, align 8
  %86 = getelementptr inbounds %"class.blink::IndexedDBDispatcher", %"class.blink::IndexedDBDispatcher"* %3, i64 0, i32 0, i32 0, i32 2
  %87 = load i32, i32* %86, align 4
  %88 = add i32 %87, -1
  store i32 %88, i32* %86, align 4
  %89 = mul i32 %88, 6
  %90 = load i32, i32* %8, align 8
  %91 = icmp ult i32 %89, %90
  %92 = icmp ugt i32 %90, 8
  %93 = and i1 %91, %92
  br i1 %93, label %94, label %101

94:                                               ; preds = %79
  %95 = lshr i32 %90, 1
  %96 = zext i32 %95 to i64
  %97 = shl nuw nsw i64 %96, 3
  %98 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %97, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink16WebIDBCursorImplEEEPKcv, i64 0, i64 0)) #6
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %98, i8 0, i64 %97, i1 false) #6
  %99 = bitcast i8* %98 to %"class.blink::WebIDBCursorImpl"**
  %100 = tail call %"class.blink::WebIDBCursorImpl"** @_ZN3WTF9HashTableIPN5blink16WebIDBCursorImplES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSB_(%"class.WTF::HashTable"* %4, %"class.blink::WebIDBCursorImpl"** %99, i32 %95, %"class.blink::WebIDBCursorImpl"** null) #6
  br label %101

101:                                              ; preds = %74, %79, %94
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19IndexedDBDispatcher25ResetCursorPrefetchCachesElPNS_16WebIDBCursorImplE(i64, %"class.blink::WebIDBCursorImpl"* readnone) local_unnamed_addr #0 align 2 {
  %3 = tail call %"class.blink::IndexedDBDispatcher"* @_ZN5blink19IndexedDBDispatcher27GetInstanceForCurrentThreadEv()
  %4 = getelementptr inbounds %"class.blink::IndexedDBDispatcher", %"class.blink::IndexedDBDispatcher"* %3, i64 0, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.blink::IndexedDBDispatcher", %"class.blink::IndexedDBDispatcher"* %3, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.blink::WebIDBCursorImpl"**, %"class.blink::WebIDBCursorImpl"*** %7, align 8
  %9 = getelementptr inbounds %"class.blink::IndexedDBDispatcher", %"class.blink::IndexedDBDispatcher"* %3, i64 0, i32 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %8, i64 %11
  br i1 %6, label %25, label %13

13:                                               ; preds = %2
  %14 = icmp eq i32 %10, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %13, %19
  %16 = phi %"class.blink::WebIDBCursorImpl"** [ %20, %19 ], [ %8, %13 ]
  %17 = bitcast %"class.blink::WebIDBCursorImpl"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  switch i64 %18, label %22 [
    i64 -1, label %19
    i64 0, label %19
  ]

19:                                               ; preds = %15, %15
  %20 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %16, i64 1
  %21 = icmp eq %"class.blink::WebIDBCursorImpl"** %20, %12
  br i1 %21, label %25, label %15

22:                                               ; preds = %15, %13
  %23 = phi %"class.blink::WebIDBCursorImpl"** [ %8, %13 ], [ %16, %15 ]
  %24 = icmp eq %"class.blink::WebIDBCursorImpl"** %23, %12
  br i1 %24, label %25, label %26

25:                                               ; preds = %19, %39, %49, %46, %2, %22
  ret void

26:                                               ; preds = %22, %49
  %27 = phi %"class.blink::WebIDBCursorImpl"** [ %43, %49 ], [ %23, %22 ]
  %28 = load %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %27, align 8
  %29 = icmp eq %"class.blink::WebIDBCursorImpl"* %28, %1
  br i1 %29, label %39, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.blink::WebIDBCursorImpl", %"class.blink::WebIDBCursorImpl"* %28, i64 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %32, %0
  br i1 %33, label %34, label %39

34:                                               ; preds = %30
  %35 = bitcast %"class.blink::WebIDBCursorImpl"* %28 to void (%"class.blink::WebIDBCursorImpl"*)***
  %36 = load void (%"class.blink::WebIDBCursorImpl"*)**, void (%"class.blink::WebIDBCursorImpl"*)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.blink::WebIDBCursorImpl"*)*, void (%"class.blink::WebIDBCursorImpl"*)** %36, i64 5
  %38 = load void (%"class.blink::WebIDBCursorImpl"*)*, void (%"class.blink::WebIDBCursorImpl"*)** %37, align 8
  tail call void %38(%"class.blink::WebIDBCursorImpl"* %28) #6
  br label %39

39:                                               ; preds = %26, %34, %30
  %40 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %27, i64 1
  %41 = icmp eq %"class.blink::WebIDBCursorImpl"** %40, %12
  br i1 %41, label %25, label %42

42:                                               ; preds = %39, %46
  %43 = phi %"class.blink::WebIDBCursorImpl"** [ %47, %46 ], [ %40, %39 ]
  %44 = bitcast %"class.blink::WebIDBCursorImpl"** %43 to i64*
  %45 = load i64, i64* %44, align 8
  switch i64 %45, label %49 [
    i64 -1, label %46
    i64 0, label %46
  ]

46:                                               ; preds = %42, %42
  %47 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %43, i64 1
  %48 = icmp eq %"class.blink::WebIDBCursorImpl"** %47, %12
  br i1 %48, label %25, label %42

49:                                               ; preds = %42
  %50 = icmp eq %"class.blink::WebIDBCursorImpl"** %43, %12
  br i1 %50, label %25, label %26
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF14ThreadSpecificIN5blink19IndexedDBDispatcherEE7DestroyEPv(i8*) #3 comdat align 2 {
  %2 = tail call zeroext i1 @_ZN3WTF12IsMainThreadEv() #6
  br i1 %2, label %10, label %3

3:                                                ; preds = %1
  %4 = bitcast i8* %0 to %"class.blink::WebIDBCursorImpl"***
  %5 = load %"class.blink::WebIDBCursorImpl"**, %"class.blink::WebIDBCursorImpl"*** %4, align 8
  %6 = icmp eq %"class.blink::WebIDBCursorImpl"** %5, null
  br i1 %6, label %9, label %7, !prof !4

7:                                                ; preds = %3
  %8 = bitcast %"class.blink::WebIDBCursorImpl"** %5 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %8) #6
  store %"class.blink::WebIDBCursorImpl"** null, %"class.blink::WebIDBCursorImpl"*** %4, align 8
  br label %9

9:                                                ; preds = %3, %7
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %0) #6
  br label %10

10:                                               ; preds = %1, %9
  ret void
}

declare void @_ZN4base18ThreadLocalStorage4SlotC1EPFvPvE(%"class.base::ThreadLocalStorage::Slot"*, void (i8*)*) unnamed_addr #4

declare zeroext i1 @_ZN3WTF12IsMainThreadEv() local_unnamed_addr #4

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #4

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #4

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.blink::WebIDBCursorImpl"**, i8 } @_ZN3WTF9HashTableIPN5blink16WebIDBCursorImplES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS6_S8_S9_EERKS3_RS3_EENS_18HashTableAddResultISA_S3_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.blink::WebIDBCursorImpl"** dereferenceable(8), %"class.blink::WebIDBCursorImpl"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"class.blink::WebIDBCursorImpl"**, %"class.blink::WebIDBCursorImpl"*** %4, align 8
  %6 = icmp eq %"class.blink::WebIDBCursorImpl"** %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.blink::WebIDBCursorImpl"** @_ZN3WTF9HashTableIPN5blink16WebIDBCursorImplES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable"* %0, %"class.blink::WebIDBCursorImpl"** null)
  %9 = load %"class.blink::WebIDBCursorImpl"**, %"class.blink::WebIDBCursorImpl"*** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.blink::WebIDBCursorImpl"** [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = bitcast %"class.blink::WebIDBCursorImpl"** %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %17, 32
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 22
  %22 = xor i64 %21, %20
  %23 = shl i64 %22, 13
  %24 = xor i64 %23, -1
  %25 = add i64 %22, %24
  %26 = lshr i64 %25, 8
  %27 = xor i64 %26, %25
  %28 = mul i64 %27, 9
  %29 = lshr i64 %28, 15
  %30 = xor i64 %29, %28
  %31 = shl i64 %30, 27
  %32 = xor i64 %31, -1
  %33 = add i64 %30, %32
  %34 = lshr i64 %33, 31
  %35 = xor i64 %34, %33
  %36 = trunc i64 %35 to i32
  %37 = and i32 %14, %36
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %11, i64 %38
  %40 = load %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %39, align 8
  %41 = icmp eq %"class.blink::WebIDBCursorImpl"* %40, null
  %42 = inttoptr i64 %17 to %"class.blink::WebIDBCursorImpl"*
  br i1 %41, label %76, label %43

43:                                               ; preds = %10
  %44 = xor i32 %36, -1
  %45 = lshr i32 %36, 23
  %46 = add i32 %45, %44
  %47 = shl i32 %46, 12
  %48 = xor i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = xor i32 %49, %48
  %51 = shl i32 %50, 2
  %52 = xor i32 %51, %50
  %53 = lshr i32 %52, 20
  %54 = xor i32 %53, %52
  %55 = or i32 %54, 1
  %56 = zext i32 %55 to i64
  br label %57

57:                                               ; preds = %43, %64
  %58 = phi %"class.blink::WebIDBCursorImpl"* [ %40, %43 ], [ %72, %64 ]
  %59 = phi %"class.blink::WebIDBCursorImpl"** [ %39, %43 ], [ %71, %64 ]
  %60 = phi %"class.blink::WebIDBCursorImpl"** [ null, %43 ], [ %66, %64 ]
  %61 = phi i64 [ %38, %43 ], [ %70, %64 ]
  %62 = phi i64 [ 0, %43 ], [ %68, %64 ]
  %63 = icmp eq %"class.blink::WebIDBCursorImpl"* %58, %42
  br i1 %63, label %103, label %64

64:                                               ; preds = %57
  %65 = icmp eq %"class.blink::WebIDBCursorImpl"* %58, inttoptr (i64 -1 to %"class.blink::WebIDBCursorImpl"*)
  %66 = select i1 %65, %"class.blink::WebIDBCursorImpl"** %59, %"class.blink::WebIDBCursorImpl"** %60
  %67 = icmp eq i64 %62, 0
  %68 = select i1 %67, i64 %56, i64 %62
  %69 = add i64 %68, %61
  %70 = and i64 %69, %15
  %71 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %11, i64 %70
  %72 = load %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %71, align 8
  %73 = icmp eq %"class.blink::WebIDBCursorImpl"* %72, null
  br i1 %73, label %74, label %57

74:                                               ; preds = %64
  %75 = icmp eq %"class.blink::WebIDBCursorImpl"** %66, null
  br i1 %75, label %76, label %79

76:                                               ; preds = %10, %74
  %77 = phi %"class.blink::WebIDBCursorImpl"** [ %71, %74 ], [ %39, %10 ]
  %78 = bitcast %"class.blink::WebIDBCursorImpl"** %77 to i64*
  br label %87

79:                                               ; preds = %74
  %80 = bitcast %"class.blink::WebIDBCursorImpl"** %66 to i64*
  store i64 0, i64* %80, align 8
  %81 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %82 = load i32, i32* %81, align 8
  %83 = add i32 %82, 2147483647
  %84 = and i32 %83, 2147483647
  %85 = and i32 %82, -2147483648
  %86 = or i32 %84, %85
  store i32 %86, i32* %81, align 8
  br label %87

87:                                               ; preds = %76, %79
  %88 = phi i64* [ %78, %76 ], [ %80, %79 ]
  %89 = phi %"class.blink::WebIDBCursorImpl"** [ %77, %76 ], [ %66, %79 ]
  %90 = bitcast %"class.blink::WebIDBCursorImpl"** %2 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %88, align 8
  %92 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %93 = load i32, i32* %92, align 4
  %94 = add i32 %93, 1
  store i32 %94, i32* %92, align 4
  %95 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %96 = load i32, i32* %95, align 8
  %97 = add i32 %96, %94
  %98 = shl i32 %97, 1
  %99 = load i32, i32* %12, align 8
  %100 = icmp ult i32 %98, %99
  br i1 %100, label %103, label %101

101:                                              ; preds = %87
  %102 = tail call %"class.blink::WebIDBCursorImpl"** @_ZN3WTF9HashTableIPN5blink16WebIDBCursorImplES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable"* %0, %"class.blink::WebIDBCursorImpl"** %89)
  br label %103

103:                                              ; preds = %57, %87, %101
  %104 = phi i8 [ 1, %87 ], [ 1, %101 ], [ 0, %57 ]
  %105 = phi %"class.blink::WebIDBCursorImpl"** [ %89, %87 ], [ %102, %101 ], [ %59, %57 ]
  %106 = insertvalue { %"class.blink::WebIDBCursorImpl"**, i8 } undef, %"class.blink::WebIDBCursorImpl"** %105, 0
  %107 = insertvalue { %"class.blink::WebIDBCursorImpl"**, i8 } %106, i8 %104, 1
  ret { %"class.blink::WebIDBCursorImpl"**, i8 } %107
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::WebIDBCursorImpl"** @_ZN3WTF9HashTableIPN5blink16WebIDBCursorImplES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable"*, %"class.blink::WebIDBCursorImpl"**) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #6
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #6
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %22, i8* %23) #6
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #6
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #6
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #6
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink16WebIDBCursorImplEEEPKcv, i64 0, i64 0)) #6
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #6
  %36 = bitcast i8* %35 to %"class.blink::WebIDBCursorImpl"**
  %37 = call %"class.blink::WebIDBCursorImpl"** @_ZN3WTF9HashTableIPN5blink16WebIDBCursorImplES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSB_(%"class.WTF::HashTable"* %0, %"class.blink::WebIDBCursorImpl"** %36, i32 %32, %"class.blink::WebIDBCursorImpl"** %1) #6
  ret %"class.blink::WebIDBCursorImpl"** %37
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::WebIDBCursorImpl"** @_ZN3WTF9HashTableIPN5blink16WebIDBCursorImplES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSB_(%"class.WTF::HashTable"*, %"class.blink::WebIDBCursorImpl"**, i32, %"class.blink::WebIDBCursorImpl"**) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"class.blink::WebIDBCursorImpl"** %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.blink::WebIDBCursorImpl"**, %"class.blink::WebIDBCursorImpl"*** %9, align 8
  %17 = ptrtoint %"class.blink::WebIDBCursorImpl"** %16 to i64
  br label %31

18:                                               ; preds = %119
  %19 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %120, %18 ]
  %23 = phi %"class.blink::WebIDBCursorImpl"** [ null, %10 ], [ %123, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %26) #6
  br label %27

27:                                               ; preds = %20, %25
  %28 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, -2147483648
  store i32 %30, i32* %28, align 8
  ret %"class.blink::WebIDBCursorImpl"** %23

31:                                               ; preds = %13, %119
  %32 = phi i64 [ %17, %13 ], [ %120, %119 ]
  %33 = phi i32 [ %7, %13 ], [ %121, %119 ]
  %34 = phi %"class.blink::WebIDBCursorImpl"** [ %16, %13 ], [ %122, %119 ]
  %35 = phi %"class.blink::WebIDBCursorImpl"** [ null, %13 ], [ %123, %119 ]
  %36 = phi i32 [ 0, %13 ], [ %124, %119 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %34, i64 %37
  %39 = bitcast %"class.blink::WebIDBCursorImpl"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  switch i64 %40, label %41 [
    i64 -1, label %119
    i64 0, label %119
  ]

41:                                               ; preds = %31
  %42 = shl i64 %40, 32
  %43 = xor i64 %42, -1
  %44 = add i64 %40, %43
  %45 = lshr i64 %44, 22
  %46 = xor i64 %45, %44
  %47 = shl i64 %46, 13
  %48 = xor i64 %47, -1
  %49 = add i64 %46, %48
  %50 = lshr i64 %49, 8
  %51 = xor i64 %50, %49
  %52 = mul i64 %51, 9
  %53 = lshr i64 %52, 15
  %54 = xor i64 %53, %52
  %55 = shl i64 %54, 27
  %56 = xor i64 %55, -1
  %57 = add i64 %54, %56
  %58 = lshr i64 %57, 31
  %59 = xor i64 %58, %57
  %60 = trunc i64 %59 to i32
  %61 = and i32 %14, %60
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %1, i64 %62
  %64 = ptrtoint %"class.blink::WebIDBCursorImpl"** %63 to i64
  %65 = load %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %63, align 8
  %66 = icmp eq %"class.blink::WebIDBCursorImpl"* %65, null
  %67 = inttoptr i64 %40 to %"class.blink::WebIDBCursorImpl"*
  br i1 %66, label %85, label %68

68:                                               ; preds = %41
  %69 = xor i32 %60, -1
  %70 = lshr i32 %60, 23
  %71 = add i32 %70, %69
  %72 = shl i32 %71, 12
  %73 = xor i32 %72, %71
  %74 = lshr i32 %73, 7
  %75 = xor i32 %74, %73
  %76 = shl i32 %75, 2
  %77 = xor i32 %76, %75
  %78 = lshr i32 %77, 20
  %79 = xor i32 %78, %77
  %80 = or i32 %79, 1
  %81 = zext i32 %80 to i64
  br label %91

82:                                               ; preds = %98
  %83 = ptrtoint %"class.blink::WebIDBCursorImpl"** %105 to i64
  %84 = inttoptr i64 %100 to %"class.blink::WebIDBCursorImpl"**
  br label %85

85:                                               ; preds = %82, %41
  %86 = phi i64 [ %83, %82 ], [ %64, %41 ]
  %87 = phi %"class.blink::WebIDBCursorImpl"** [ %84, %82 ], [ null, %41 ]
  %88 = icmp eq %"class.blink::WebIDBCursorImpl"** %87, null
  %89 = ptrtoint %"class.blink::WebIDBCursorImpl"** %87 to i64
  %90 = select i1 %88, i64 %86, i64 %89
  br label %109

91:                                               ; preds = %98, %68
  %92 = phi i64 [ 0, %68 ], [ %100, %98 ]
  %93 = phi %"class.blink::WebIDBCursorImpl"* [ %65, %68 ], [ %107, %98 ]
  %94 = phi i64 [ %64, %68 ], [ %106, %98 ]
  %95 = phi i64 [ %62, %68 ], [ %104, %98 ]
  %96 = phi i64 [ 0, %68 ], [ %102, %98 ]
  %97 = icmp eq %"class.blink::WebIDBCursorImpl"* %93, %67
  br i1 %97, label %109, label %98

98:                                               ; preds = %91
  %99 = icmp eq %"class.blink::WebIDBCursorImpl"* %93, inttoptr (i64 -1 to %"class.blink::WebIDBCursorImpl"*)
  %100 = select i1 %99, i64 %94, i64 %92
  %101 = icmp eq i64 %96, 0
  %102 = select i1 %101, i64 %81, i64 %96
  %103 = add i64 %102, %95
  %104 = and i64 %103, %15
  %105 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %1, i64 %104
  %106 = ptrtoint %"class.blink::WebIDBCursorImpl"** %105 to i64
  %107 = load %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %105, align 8
  %108 = icmp eq %"class.blink::WebIDBCursorImpl"* %107, null
  br i1 %108, label %82, label %91

109:                                              ; preds = %91, %85
  %110 = phi i64 [ %90, %85 ], [ %94, %91 ]
  %111 = inttoptr i64 %110 to %"class.blink::WebIDBCursorImpl"**
  %112 = inttoptr i64 %110 to i64*
  store i64 %40, i64* %112, align 8
  %113 = load %"class.blink::WebIDBCursorImpl"**, %"class.blink::WebIDBCursorImpl"*** %9, align 8
  %114 = getelementptr inbounds %"class.blink::WebIDBCursorImpl"*, %"class.blink::WebIDBCursorImpl"** %113, i64 %37
  %115 = icmp eq %"class.blink::WebIDBCursorImpl"** %114, %3
  %116 = select i1 %115, %"class.blink::WebIDBCursorImpl"** %111, %"class.blink::WebIDBCursorImpl"** %35
  %117 = load i32, i32* %6, align 8
  %118 = ptrtoint %"class.blink::WebIDBCursorImpl"** %113 to i64
  br label %119

119:                                              ; preds = %31, %31, %109
  %120 = phi i64 [ %32, %31 ], [ %118, %109 ], [ %32, %31 ]
  %121 = phi i32 [ %33, %31 ], [ %117, %109 ], [ %33, %31 ]
  %122 = phi %"class.blink::WebIDBCursorImpl"** [ %34, %31 ], [ %113, %109 ], [ %34, %31 ]
  %123 = phi %"class.blink::WebIDBCursorImpl"** [ %35, %31 ], [ %116, %109 ], [ %35, %31 ]
  %124 = add i32 %36, 1
  %125 = icmp eq i32 %124, %121
  br i1 %125, label %18, label %31
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
