; ModuleID = '../../third_party/ffmpeg/libavcodec/mpegaudiodsp_fixed.c'
source_filename = "../../third_party/ffmpeg/libavcodec/mpegaudiodsp_fixed.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.MPADSPContext = type { void (float*, float*, i32*, float*, i64)*, void (i32*, i32*, i32*, i16*, i64)*, void (float*, float*)*, void (i32*, i32*)*, void (float*, float*, float*, i32, i32, i32)*, void (i32*, i32*, i32*, i32, i32, i32)* }

@ff_mpa_synth_init_fixed.init_static_once = internal global i32 0, align 4
@ff_mdct_win_fixed = common hidden local_unnamed_addr global [8 x [40 x i32]] zeroinitializer, align 16
@ff_mpa_synth_window_fixed = common hidden local_unnamed_addr global [768 x i32] zeroinitializer, align 16
@ff_mpa_enwindow = external local_unnamed_addr constant [257 x i32], align 16
@icos36h = internal unnamed_addr constant [9 x i32] [i32 1077843343, i32 1111619334, i32 1184743019, i32 1310796734, i32 1518500250, i32 1872011742, i32 1270344802, i32 2074309917, i32 0], align 16
@icos36 = internal unnamed_addr constant [9 x i32] [i32 4210326, i32 4342263, i32 4627902, i32 5120300, i32 5931642, i32 7312546, i32 9924569, i32 16205546, i32 48124241], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_mpadsp_apply_window_fixed(i32*, i32* readonly, i32* nocapture, i16* nocapture, i64) local_unnamed_addr #0 {
  %6 = getelementptr inbounds i32, i32* %0, i64 512
  %7 = bitcast i32* %6 to i8*
  %8 = bitcast i32* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 128, i1 false)
  %9 = mul nsw i64 %4, 31
  %10 = getelementptr inbounds i16, i16* %3, i64 %9
  %11 = getelementptr inbounds i32, i32* %1, i64 31
  %12 = load i32, i32* %2, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, i32* %0, i64 16
  %15 = load i32, i32* %1, align 4
  %16 = sext i32 %15 to i64
  %17 = load i32, i32* %14, align 4
  %18 = sext i32 %17 to i64
  %19 = mul nsw i64 %18, %16
  %20 = getelementptr inbounds i32, i32* %1, i64 64
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, i32* %0, i64 80
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = mul nsw i64 %25, %22
  %27 = getelementptr inbounds i32, i32* %1, i64 128
  %28 = load i32, i32* %27, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32* %0, i64 144
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = mul nsw i64 %32, %29
  %34 = getelementptr inbounds i32, i32* %1, i64 192
  %35 = load i32, i32* %34, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %0, i64 208
  %38 = load i32, i32* %37, align 4
  %39 = sext i32 %38 to i64
  %40 = mul nsw i64 %39, %36
  %41 = getelementptr inbounds i32, i32* %1, i64 256
  %42 = load i32, i32* %41, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i32, i32* %0, i64 272
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  %47 = mul nsw i64 %46, %43
  %48 = getelementptr inbounds i32, i32* %1, i64 320
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %0, i64 336
  %52 = load i32, i32* %51, align 4
  %53 = sext i32 %52 to i64
  %54 = mul nsw i64 %53, %50
  %55 = getelementptr inbounds i32, i32* %1, i64 384
  %56 = load i32, i32* %55, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %0, i64 400
  %59 = load i32, i32* %58, align 4
  %60 = sext i32 %59 to i64
  %61 = mul nsw i64 %60, %57
  %62 = getelementptr inbounds i32, i32* %1, i64 448
  %63 = load i32, i32* %62, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i32, i32* %0, i64 464
  %66 = load i32, i32* %65, align 4
  %67 = sext i32 %66 to i64
  %68 = mul nsw i64 %67, %64
  %69 = getelementptr inbounds i32, i32* %0, i64 48
  %70 = getelementptr inbounds i32, i32* %1, i64 32
  %71 = load i32, i32* %70, align 4
  %72 = sext i32 %71 to i64
  %73 = load i32, i32* %69, align 4
  %74 = sext i32 %73 to i64
  %75 = mul nsw i64 %74, %72
  %76 = getelementptr inbounds i32, i32* %1, i64 96
  %77 = load i32, i32* %76, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i32, i32* %0, i64 112
  %80 = load i32, i32* %79, align 4
  %81 = sext i32 %80 to i64
  %82 = mul nsw i64 %81, %78
  %83 = getelementptr inbounds i32, i32* %1, i64 160
  %84 = load i32, i32* %83, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i32, i32* %0, i64 176
  %87 = load i32, i32* %86, align 4
  %88 = sext i32 %87 to i64
  %89 = mul nsw i64 %88, %85
  %90 = getelementptr inbounds i32, i32* %1, i64 224
  %91 = load i32, i32* %90, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i32, i32* %0, i64 240
  %94 = load i32, i32* %93, align 4
  %95 = sext i32 %94 to i64
  %96 = mul nsw i64 %95, %92
  %97 = getelementptr inbounds i32, i32* %1, i64 288
  %98 = load i32, i32* %97, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i32, i32* %0, i64 304
  %101 = load i32, i32* %100, align 4
  %102 = sext i32 %101 to i64
  %103 = mul nsw i64 %102, %99
  %104 = getelementptr inbounds i32, i32* %1, i64 352
  %105 = load i32, i32* %104, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32, i32* %0, i64 368
  %108 = load i32, i32* %107, align 4
  %109 = sext i32 %108 to i64
  %110 = mul nsw i64 %109, %106
  %111 = getelementptr inbounds i32, i32* %1, i64 416
  %112 = load i32, i32* %111, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i32, i32* %0, i64 432
  %115 = load i32, i32* %114, align 4
  %116 = sext i32 %115 to i64
  %117 = mul nsw i64 %116, %113
  %118 = getelementptr inbounds i32, i32* %1, i64 480
  %119 = load i32, i32* %118, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i32, i32* %0, i64 496
  %122 = load i32, i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = mul nsw i64 %123, %120
  %125 = add i64 %82, %75
  %126 = add i64 %125, %89
  %127 = add i64 %126, %96
  %128 = add i64 %127, %103
  %129 = add i64 %128, %110
  %130 = add i64 %129, %117
  %131 = add i64 %130, %124
  %132 = add nsw i64 %19, %13
  %133 = add i64 %132, %26
  %134 = add i64 %133, %33
  %135 = add i64 %134, %40
  %136 = add i64 %135, %47
  %137 = add i64 %136, %54
  %138 = add i64 %137, %61
  %139 = add i64 %138, %68
  %140 = sub i64 %139, %131
  %141 = lshr i64 %140, 24
  %142 = trunc i64 %141 to i32
  %143 = add i32 %142, 32768
  %144 = icmp ugt i32 %143, 65535
  %145 = ashr i32 %142, 31
  %146 = xor i32 %145, 32767
  %147 = select i1 %144, i32 %146, i32 %142
  %148 = trunc i32 %147 to i16
  store i16 %148, i16* %3, align 2
  %149 = and i64 %140, 16777215
  %150 = getelementptr inbounds i16, i16* %3, i64 %4
  %151 = sub i64 0, %4
  br label %152

152:                                              ; preds = %152, %5
  %153 = phi i64 [ 1, %5 ], [ %386, %152 ]
  %154 = phi i16* [ %150, %5 ], [ %388, %152 ]
  %155 = phi i32* [ %1, %5 ], [ %159, %152 ]
  %156 = phi i64 [ %149, %5 ], [ %387, %152 ]
  %157 = phi i16* [ %10, %5 ], [ %384, %152 ]
  %158 = phi i32* [ %11, %5 ], [ %385, %152 ]
  %159 = getelementptr inbounds i32, i32* %155, i64 1
  %160 = getelementptr inbounds i32, i32* %14, i64 %153
  %161 = load i32, i32* %160, align 4
  %162 = load i32, i32* %159, align 4
  %163 = sext i32 %162 to i64
  %164 = sext i32 %161 to i64
  %165 = mul nsw i64 %163, %164
  %166 = load i32, i32* %158, align 4
  %167 = sext i32 %166 to i64
  %168 = mul nsw i64 %167, %164
  %169 = getelementptr inbounds i32, i32* %160, i64 64
  %170 = load i32, i32* %169, align 4
  %171 = getelementptr inbounds i32, i32* %155, i64 65
  %172 = load i32, i32* %171, align 4
  %173 = sext i32 %172 to i64
  %174 = sext i32 %170 to i64
  %175 = mul nsw i64 %173, %174
  %176 = getelementptr inbounds i32, i32* %158, i64 64
  %177 = load i32, i32* %176, align 4
  %178 = sext i32 %177 to i64
  %179 = mul nsw i64 %178, %174
  %180 = getelementptr inbounds i32, i32* %160, i64 128
  %181 = load i32, i32* %180, align 4
  %182 = getelementptr inbounds i32, i32* %155, i64 129
  %183 = load i32, i32* %182, align 4
  %184 = sext i32 %183 to i64
  %185 = sext i32 %181 to i64
  %186 = mul nsw i64 %184, %185
  %187 = getelementptr inbounds i32, i32* %158, i64 128
  %188 = load i32, i32* %187, align 4
  %189 = sext i32 %188 to i64
  %190 = mul nsw i64 %189, %185
  %191 = getelementptr inbounds i32, i32* %160, i64 192
  %192 = load i32, i32* %191, align 4
  %193 = getelementptr inbounds i32, i32* %155, i64 193
  %194 = load i32, i32* %193, align 4
  %195 = sext i32 %194 to i64
  %196 = sext i32 %192 to i64
  %197 = mul nsw i64 %195, %196
  %198 = getelementptr inbounds i32, i32* %158, i64 192
  %199 = load i32, i32* %198, align 4
  %200 = sext i32 %199 to i64
  %201 = mul nsw i64 %200, %196
  %202 = getelementptr inbounds i32, i32* %160, i64 256
  %203 = load i32, i32* %202, align 4
  %204 = getelementptr inbounds i32, i32* %155, i64 257
  %205 = load i32, i32* %204, align 4
  %206 = sext i32 %205 to i64
  %207 = sext i32 %203 to i64
  %208 = mul nsw i64 %206, %207
  %209 = getelementptr inbounds i32, i32* %158, i64 256
  %210 = load i32, i32* %209, align 4
  %211 = sext i32 %210 to i64
  %212 = mul nsw i64 %211, %207
  %213 = getelementptr inbounds i32, i32* %160, i64 320
  %214 = load i32, i32* %213, align 4
  %215 = getelementptr inbounds i32, i32* %155, i64 321
  %216 = load i32, i32* %215, align 4
  %217 = sext i32 %216 to i64
  %218 = sext i32 %214 to i64
  %219 = mul nsw i64 %217, %218
  %220 = getelementptr inbounds i32, i32* %158, i64 320
  %221 = load i32, i32* %220, align 4
  %222 = sext i32 %221 to i64
  %223 = mul nsw i64 %222, %218
  %224 = getelementptr inbounds i32, i32* %160, i64 384
  %225 = load i32, i32* %224, align 4
  %226 = getelementptr inbounds i32, i32* %155, i64 385
  %227 = load i32, i32* %226, align 4
  %228 = sext i32 %227 to i64
  %229 = sext i32 %225 to i64
  %230 = mul nsw i64 %228, %229
  %231 = getelementptr inbounds i32, i32* %158, i64 384
  %232 = load i32, i32* %231, align 4
  %233 = sext i32 %232 to i64
  %234 = mul nsw i64 %233, %229
  %235 = getelementptr inbounds i32, i32* %160, i64 448
  %236 = load i32, i32* %235, align 4
  %237 = getelementptr inbounds i32, i32* %155, i64 449
  %238 = load i32, i32* %237, align 4
  %239 = sext i32 %238 to i64
  %240 = sext i32 %236 to i64
  %241 = mul nsw i64 %239, %240
  %242 = getelementptr inbounds i32, i32* %158, i64 448
  %243 = load i32, i32* %242, align 4
  %244 = sext i32 %243 to i64
  %245 = mul nsw i64 %244, %240
  %246 = sub nsw i64 0, %153
  %247 = getelementptr inbounds i32, i32* %69, i64 %246
  %248 = load i32, i32* %247, align 4
  %249 = getelementptr inbounds i32, i32* %155, i64 33
  %250 = load i32, i32* %249, align 4
  %251 = sext i32 %250 to i64
  %252 = sext i32 %248 to i64
  %253 = mul nsw i64 %251, %252
  %254 = getelementptr inbounds i32, i32* %158, i64 32
  %255 = load i32, i32* %254, align 4
  %256 = sext i32 %255 to i64
  %257 = mul nsw i64 %256, %252
  %258 = getelementptr inbounds i32, i32* %247, i64 64
  %259 = load i32, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %155, i64 97
  %261 = load i32, i32* %260, align 4
  %262 = sext i32 %261 to i64
  %263 = sext i32 %259 to i64
  %264 = mul nsw i64 %262, %263
  %265 = getelementptr inbounds i32, i32* %158, i64 96
  %266 = load i32, i32* %265, align 4
  %267 = sext i32 %266 to i64
  %268 = mul nsw i64 %267, %263
  %269 = getelementptr inbounds i32, i32* %247, i64 128
  %270 = load i32, i32* %269, align 4
  %271 = getelementptr inbounds i32, i32* %155, i64 161
  %272 = load i32, i32* %271, align 4
  %273 = sext i32 %272 to i64
  %274 = sext i32 %270 to i64
  %275 = mul nsw i64 %273, %274
  %276 = getelementptr inbounds i32, i32* %158, i64 160
  %277 = load i32, i32* %276, align 4
  %278 = sext i32 %277 to i64
  %279 = mul nsw i64 %278, %274
  %280 = getelementptr inbounds i32, i32* %247, i64 192
  %281 = load i32, i32* %280, align 4
  %282 = getelementptr inbounds i32, i32* %155, i64 225
  %283 = load i32, i32* %282, align 4
  %284 = sext i32 %283 to i64
  %285 = sext i32 %281 to i64
  %286 = mul nsw i64 %284, %285
  %287 = getelementptr inbounds i32, i32* %158, i64 224
  %288 = load i32, i32* %287, align 4
  %289 = sext i32 %288 to i64
  %290 = mul nsw i64 %289, %285
  %291 = getelementptr inbounds i32, i32* %247, i64 256
  %292 = load i32, i32* %291, align 4
  %293 = getelementptr inbounds i32, i32* %155, i64 289
  %294 = load i32, i32* %293, align 4
  %295 = sext i32 %294 to i64
  %296 = sext i32 %292 to i64
  %297 = mul nsw i64 %295, %296
  %298 = getelementptr inbounds i32, i32* %158, i64 288
  %299 = load i32, i32* %298, align 4
  %300 = sext i32 %299 to i64
  %301 = mul nsw i64 %300, %296
  %302 = getelementptr inbounds i32, i32* %247, i64 320
  %303 = load i32, i32* %302, align 4
  %304 = getelementptr inbounds i32, i32* %155, i64 353
  %305 = load i32, i32* %304, align 4
  %306 = sext i32 %305 to i64
  %307 = sext i32 %303 to i64
  %308 = mul nsw i64 %306, %307
  %309 = getelementptr inbounds i32, i32* %158, i64 352
  %310 = load i32, i32* %309, align 4
  %311 = sext i32 %310 to i64
  %312 = mul nsw i64 %311, %307
  %313 = getelementptr inbounds i32, i32* %247, i64 384
  %314 = load i32, i32* %313, align 4
  %315 = getelementptr inbounds i32, i32* %155, i64 417
  %316 = load i32, i32* %315, align 4
  %317 = sext i32 %316 to i64
  %318 = sext i32 %314 to i64
  %319 = mul nsw i64 %317, %318
  %320 = getelementptr inbounds i32, i32* %158, i64 416
  %321 = load i32, i32* %320, align 4
  %322 = sext i32 %321 to i64
  %323 = mul nsw i64 %322, %318
  %324 = getelementptr inbounds i32, i32* %247, i64 448
  %325 = load i32, i32* %324, align 4
  %326 = getelementptr inbounds i32, i32* %155, i64 481
  %327 = load i32, i32* %326, align 4
  %328 = sext i32 %327 to i64
  %329 = sext i32 %325 to i64
  %330 = mul nsw i64 %328, %329
  %331 = add i64 %264, %253
  %332 = add i64 %331, %275
  %333 = add i64 %332, %286
  %334 = add i64 %333, %297
  %335 = add i64 %334, %308
  %336 = add i64 %335, %319
  %337 = add i64 %336, %330
  %338 = add i64 %165, %156
  %339 = add i64 %338, %175
  %340 = add i64 %339, %186
  %341 = add i64 %340, %197
  %342 = add i64 %341, %208
  %343 = add i64 %342, %219
  %344 = add i64 %343, %230
  %345 = add i64 %344, %241
  %346 = sub i64 %345, %337
  %347 = getelementptr inbounds i32, i32* %158, i64 480
  %348 = load i32, i32* %347, align 4
  %349 = sext i32 %348 to i64
  %350 = mul nsw i64 %349, %329
  %351 = lshr i64 %346, 24
  %352 = trunc i64 %351 to i32
  %353 = and i64 %346, 16777215
  %354 = add i32 %352, 32768
  %355 = icmp ugt i32 %354, 65535
  %356 = ashr i32 %352, 31
  %357 = xor i32 %356, 32767
  %358 = select i1 %355, i32 %357, i32 %352
  %359 = trunc i32 %358 to i16
  store i16 %359, i16* %154, align 2
  %360 = add i64 %179, %168
  %361 = add i64 %360, %190
  %362 = add i64 %361, %201
  %363 = add i64 %362, %212
  %364 = add i64 %363, %223
  %365 = add i64 %364, %234
  %366 = add i64 %365, %245
  %367 = add i64 %366, %257
  %368 = add i64 %367, %268
  %369 = add i64 %368, %279
  %370 = add i64 %369, %290
  %371 = add i64 %370, %301
  %372 = add i64 %371, %312
  %373 = add i64 %372, %323
  %374 = add i64 %373, %350
  %375 = sub i64 %353, %374
  %376 = lshr i64 %375, 24
  %377 = trunc i64 %376 to i32
  %378 = add i32 %377, 32768
  %379 = icmp ugt i32 %378, 65535
  %380 = ashr i32 %377, 31
  %381 = xor i32 %380, 32767
  %382 = select i1 %379, i32 %381, i32 %377
  %383 = trunc i32 %382 to i16
  store i16 %383, i16* %157, align 2
  %384 = getelementptr inbounds i16, i16* %157, i64 %151
  %385 = getelementptr inbounds i32, i32* %158, i64 -1
  %386 = add nuw nsw i64 %153, 1
  %387 = and i64 %375, 16777215
  %388 = getelementptr inbounds i16, i16* %154, i64 %4
  %389 = icmp eq i64 %386, 16
  br i1 %389, label %390, label %152

390:                                              ; preds = %152
  %391 = getelementptr inbounds i32, i32* %0, i64 32
  %392 = getelementptr inbounds i32, i32* %155, i64 34
  %393 = load i32, i32* %392, align 4
  %394 = sext i32 %393 to i64
  %395 = load i32, i32* %391, align 4
  %396 = sext i32 %395 to i64
  %397 = mul nsw i64 %396, %394
  %398 = getelementptr inbounds i32, i32* %155, i64 98
  %399 = load i32, i32* %398, align 4
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds i32, i32* %0, i64 96
  %402 = load i32, i32* %401, align 4
  %403 = sext i32 %402 to i64
  %404 = mul nsw i64 %403, %400
  %405 = getelementptr inbounds i32, i32* %155, i64 162
  %406 = load i32, i32* %405, align 4
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds i32, i32* %0, i64 160
  %409 = load i32, i32* %408, align 4
  %410 = sext i32 %409 to i64
  %411 = mul nsw i64 %410, %407
  %412 = getelementptr inbounds i32, i32* %155, i64 226
  %413 = load i32, i32* %412, align 4
  %414 = sext i32 %413 to i64
  %415 = getelementptr inbounds i32, i32* %0, i64 224
  %416 = load i32, i32* %415, align 4
  %417 = sext i32 %416 to i64
  %418 = mul nsw i64 %417, %414
  %419 = getelementptr inbounds i32, i32* %155, i64 290
  %420 = load i32, i32* %419, align 4
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds i32, i32* %0, i64 288
  %423 = load i32, i32* %422, align 4
  %424 = sext i32 %423 to i64
  %425 = mul nsw i64 %424, %421
  %426 = getelementptr inbounds i32, i32* %155, i64 354
  %427 = load i32, i32* %426, align 4
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds i32, i32* %0, i64 352
  %430 = load i32, i32* %429, align 4
  %431 = sext i32 %430 to i64
  %432 = mul nsw i64 %431, %428
  %433 = getelementptr inbounds i32, i32* %155, i64 418
  %434 = load i32, i32* %433, align 4
  %435 = sext i32 %434 to i64
  %436 = getelementptr inbounds i32, i32* %0, i64 416
  %437 = load i32, i32* %436, align 4
  %438 = sext i32 %437 to i64
  %439 = mul nsw i64 %438, %435
  %440 = getelementptr inbounds i32, i32* %155, i64 482
  %441 = load i32, i32* %440, align 4
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds i32, i32* %0, i64 480
  %444 = load i32, i32* %443, align 4
  %445 = sext i32 %444 to i64
  %446 = mul nsw i64 %445, %442
  %447 = add i64 %404, %397
  %448 = add i64 %447, %411
  %449 = add i64 %448, %418
  %450 = add i64 %449, %425
  %451 = add i64 %450, %432
  %452 = add i64 %451, %439
  %453 = add i64 %452, %446
  %454 = sub i64 %387, %453
  %455 = lshr i64 %454, 24
  %456 = trunc i64 %455 to i32
  %457 = add i32 %456, 32768
  %458 = icmp ugt i32 %457, 65535
  %459 = ashr i32 %456, 31
  %460 = xor i32 %459, 32767
  %461 = select i1 %458, i32 %460, i32 %456
  %462 = trunc i32 %461 to i16
  store i16 %462, i16* %388, align 2
  %463 = trunc i64 %454 to i32
  %464 = and i32 %463, 16777215
  store i32 %464, i32* %2, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_mpa_synth_filter_fixed(%struct.MPADSPContext* nocapture readonly, i32*, i32* nocapture, i32*, i32*, i16*, i64, i32*) local_unnamed_addr #0 {
  %9 = load i32, i32* %2, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i32, i32* %1, i64 %10
  %12 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 3
  %13 = load void (i32*, i32*)*, void (i32*, i32*)** %12, align 8
  tail call void %13(i32* %11, i32* %7) #5
  %14 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 1
  %15 = load void (i32*, i32*, i32*, i16*, i64)*, void (i32*, i32*, i32*, i16*, i64)** %14, align 8
  tail call void %15(i32* %11, i32* %3, i32* %4, i16* %5, i64 %6) #5
  %16 = add i32 %9, 480
  %17 = and i32 %16, 511
  store i32 %17, i32* %2, align 4
  ret void
}

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_mpa_synth_init_fixed() local_unnamed_addr #2 {
  %1 = tail call i32 @pthread_once(i32* nonnull @ff_mpa_synth_init_fixed.init_static_once, void ()* nonnull @mpa_synth_window_init) #5
  ret void
}

declare i32 @pthread_once(i32*, void ()*) local_unnamed_addr #3

; Function Attrs: cold nofree norecurse nounwind optsize ssp uwtable
define internal void @mpa_synth_window_init() #4 {
  tail call fastcc void @mpa_synth_init() #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_imdct36_blocks_fixed(i32* nocapture, i32* nocapture, i32* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  %7 = alloca [18 x i32], align 16
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %429

9:                                                ; preds = %6
  %10 = icmp ne i32 %4, 0
  %11 = bitcast [18 x i32]* %7 to i8*
  %12 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 16
  %13 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 17
  %14 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 0
  %15 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 6
  %16 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 16
  %17 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 10
  %18 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 2
  %19 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 14
  %20 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 4
  %21 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 12
  %22 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 8
  %23 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 1
  %24 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 7
  %25 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 17
  %26 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 11
  %27 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 3
  %28 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 15
  %29 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 5
  %30 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 13
  %31 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 9
  br label %32

32:                                               ; preds = %9, %377
  %33 = phi i32* [ %0, %9 ], [ %426, %377 ]
  %34 = phi i32* [ %1, %9 ], [ %425, %377 ]
  %35 = phi i32 [ 0, %9 ], [ %427, %377 ]
  %36 = phi i32* [ %2, %9 ], [ %421, %377 ]
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 72, i1 false) #5
  %37 = getelementptr inbounds i32, i32* %36, i64 16
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds i32, i32* %36, i64 17
  %40 = load i32, i32* %39, align 4
  %41 = add i32 %40, %38
  %42 = getelementptr inbounds i32, i32* %36, i64 15
  %43 = load i32, i32* %42, align 4
  %44 = add i32 %43, %38
  store i32 %44, i32* %37, align 4
  %45 = getelementptr inbounds i32, i32* %36, i64 14
  %46 = load i32, i32* %45, align 4
  %47 = add i32 %46, %43
  %48 = getelementptr inbounds i32, i32* %36, i64 13
  %49 = load i32, i32* %48, align 4
  %50 = add i32 %49, %46
  store i32 %50, i32* %45, align 4
  %51 = getelementptr inbounds i32, i32* %36, i64 12
  %52 = load i32, i32* %51, align 4
  %53 = add i32 %52, %49
  %54 = getelementptr inbounds i32, i32* %36, i64 11
  %55 = load i32, i32* %54, align 4
  %56 = add i32 %55, %52
  store i32 %56, i32* %51, align 4
  %57 = getelementptr inbounds i32, i32* %36, i64 10
  %58 = load i32, i32* %57, align 4
  %59 = add i32 %58, %55
  %60 = getelementptr inbounds i32, i32* %36, i64 9
  %61 = load i32, i32* %60, align 4
  %62 = add i32 %61, %58
  store i32 %62, i32* %57, align 4
  %63 = getelementptr inbounds i32, i32* %36, i64 8
  %64 = load i32, i32* %63, align 4
  %65 = add i32 %64, %61
  %66 = getelementptr inbounds i32, i32* %36, i64 7
  %67 = load i32, i32* %66, align 4
  %68 = add i32 %67, %64
  store i32 %68, i32* %63, align 4
  %69 = getelementptr inbounds i32, i32* %36, i64 6
  %70 = load i32, i32* %69, align 4
  %71 = add i32 %70, %67
  %72 = getelementptr inbounds i32, i32* %36, i64 5
  %73 = load i32, i32* %72, align 4
  %74 = add i32 %73, %70
  store i32 %74, i32* %69, align 4
  %75 = getelementptr inbounds i32, i32* %36, i64 4
  %76 = load i32, i32* %75, align 4
  %77 = add i32 %76, %73
  %78 = getelementptr inbounds i32, i32* %36, i64 3
  %79 = load i32, i32* %78, align 4
  %80 = add i32 %79, %76
  store i32 %80, i32* %75, align 4
  %81 = getelementptr inbounds i32, i32* %36, i64 2
  %82 = load i32, i32* %81, align 4
  %83 = add i32 %82, %79
  %84 = getelementptr inbounds i32, i32* %36, i64 1
  %85 = load i32, i32* %84, align 4
  %86 = add i32 %85, %82
  store i32 %86, i32* %81, align 4
  %87 = load i32, i32* %36, align 4
  %88 = add i32 %87, %85
  store i32 %88, i32* %84, align 4
  %89 = add i32 %41, %47
  store i32 %89, i32* %39, align 4
  %90 = add i32 %53, %47
  store i32 %90, i32* %42, align 4
  %91 = add i32 %59, %53
  store i32 %91, i32* %48, align 4
  %92 = add i32 %65, %59
  store i32 %92, i32* %54, align 4
  %93 = add i32 %71, %65
  store i32 %93, i32* %60, align 4
  %94 = add i32 %77, %71
  store i32 %94, i32* %66, align 4
  %95 = add i32 %83, %77
  store i32 %95, i32* %72, align 4
  %96 = add i32 %88, %83
  store i32 %96, i32* %78, align 4
  %97 = sub i32 %44, %80
  %98 = add i32 %97, %68
  %99 = ashr i32 %56, 1
  %100 = add i32 %99, %87
  %101 = sub i32 %87, %56
  %102 = ashr i32 %98, 1
  %103 = sub i32 %101, %102
  store i32 %103, i32* %15, align 8
  %104 = add i32 %98, %101
  store i32 %104, i32* %16, align 16
  %105 = add i32 %68, %80
  %106 = shl i32 %105, 1
  %107 = sext i32 %106 to i64
  %108 = mul nsw i64 %107, 2017974537
  %109 = lshr i64 %108, 32
  %110 = trunc i64 %109 to i32
  %111 = sub i32 %68, %44
  %112 = sext i32 %111 to i64
  %113 = mul nsw i64 %112, -745813244
  %114 = lshr i64 %113, 32
  %115 = trunc i64 %114 to i32
  %116 = add i32 %44, %80
  %117 = shl i32 %116, 1
  %118 = sext i32 %117 to i64
  %119 = mul nsw i64 %118, -1645067915
  %120 = lshr i64 %119, 32
  %121 = trunc i64 %120 to i32
  %122 = sub i32 %100, %121
  %123 = sub i32 %122, %110
  store i32 %123, i32* %17, align 8
  %124 = add i32 %100, %115
  %125 = add i32 %124, %110
  store i32 %125, i32* %18, align 8
  %126 = sub i32 %100, %115
  %127 = add i32 %126, %121
  store i32 %127, i32* %19, align 8
  %128 = sub i32 %50, %86
  %129 = add i32 %128, %62
  %130 = shl i32 %129, 1
  %131 = sext i32 %130 to i64
  %132 = mul nsw i64 %131, -1859775393
  %133 = lshr i64 %132, 32
  %134 = trunc i64 %133 to i32
  store i32 %134, i32* %20, align 16
  %135 = add i32 %62, %86
  %136 = shl i32 %135, 1
  %137 = sext i32 %136 to i64
  %138 = mul nsw i64 %137, 2114858546
  %139 = lshr i64 %138, 32
  %140 = trunc i64 %139 to i32
  %141 = sub i32 %62, %50
  %142 = sext i32 %141 to i64
  %143 = mul nsw i64 %142, -1468965330
  %144 = lshr i64 %143, 32
  %145 = trunc i64 %144 to i32
  %146 = shl i32 %74, 1
  %147 = sext i32 %146 to i64
  %148 = mul nsw i64 %147, 1859775393
  %149 = lshr i64 %148, 32
  %150 = trunc i64 %149 to i32
  %151 = add i32 %50, %86
  %152 = shl i32 %151, 1
  %153 = sext i32 %152 to i64
  %154 = mul nsw i64 %153, -1380375881
  %155 = lshr i64 %154, 32
  %156 = trunc i64 %155 to i32
  %157 = add i32 %145, %150
  %158 = add i32 %157, %140
  store i32 %158, i32* %14, align 16
  %159 = sub i32 %156, %150
  %160 = add i32 %159, %140
  store i32 %160, i32* %21, align 16
  %161 = add i32 %156, %150
  %162 = sub i32 %145, %161
  store i32 %162, i32* %22, align 16
  %163 = getelementptr inbounds i32, i32* %36, i64 9
  %164 = load i32, i32* %163, align 4
  %165 = getelementptr inbounds i32, i32* %36, i64 17
  %166 = load i32, i32* %165, align 4
  %167 = getelementptr inbounds i32, i32* %36, i64 5
  %168 = load i32, i32* %167, align 4
  %169 = load i32, i32* %84, align 4
  %170 = getelementptr inbounds i32, i32* %36, i64 13
  %171 = load i32, i32* %170, align 4
  %172 = getelementptr inbounds i32, i32* %36, i64 11
  %173 = load i32, i32* %172, align 4
  %174 = getelementptr inbounds i32, i32* %36, i64 15
  %175 = load i32, i32* %174, align 4
  %176 = getelementptr inbounds i32, i32* %36, i64 3
  %177 = load i32, i32* %176, align 4
  %178 = getelementptr inbounds i32, i32* %36, i64 7
  %179 = load i32, i32* %178, align 4
  %180 = sub i32 %166, %168
  %181 = add i32 %180, %164
  %182 = ashr i32 %171, 1
  %183 = add i32 %182, %169
  %184 = sub i32 %169, %171
  %185 = ashr i32 %181, 1
  %186 = sub i32 %184, %185
  store i32 %186, i32* %24, align 4
  %187 = add i32 %181, %184
  store i32 %187, i32* %25, align 4
  %188 = add i32 %164, %168
  %189 = shl i32 %188, 1
  %190 = sext i32 %189 to i64
  %191 = mul nsw i64 %190, 2017974537
  %192 = lshr i64 %191, 32
  %193 = trunc i64 %192 to i32
  %194 = sub i32 %164, %166
  %195 = sext i32 %194 to i64
  %196 = mul nsw i64 %195, -745813244
  %197 = lshr i64 %196, 32
  %198 = trunc i64 %197 to i32
  %199 = add i32 %166, %168
  %200 = shl i32 %199, 1
  %201 = sext i32 %200 to i64
  %202 = mul nsw i64 %201, -1645067915
  %203 = lshr i64 %202, 32
  %204 = trunc i64 %203 to i32
  %205 = sub i32 %183, %204
  %206 = sub i32 %205, %193
  store i32 %206, i32* %26, align 4
  %207 = add i32 %183, %198
  %208 = add i32 %207, %193
  store i32 %208, i32* %27, align 4
  %209 = sub i32 %183, %198
  %210 = add i32 %209, %204
  store i32 %210, i32* %28, align 4
  %211 = sub i32 %175, %177
  %212 = add i32 %211, %173
  %213 = shl i32 %212, 1
  %214 = sext i32 %213 to i64
  %215 = mul nsw i64 %214, -1859775393
  %216 = lshr i64 %215, 32
  %217 = trunc i64 %216 to i32
  store i32 %217, i32* %29, align 4
  %218 = add i32 %173, %177
  %219 = shl i32 %218, 1
  %220 = sext i32 %219 to i64
  %221 = mul nsw i64 %220, 2114858546
  %222 = lshr i64 %221, 32
  %223 = trunc i64 %222 to i32
  %224 = sub i32 %173, %175
  %225 = sext i32 %224 to i64
  %226 = mul nsw i64 %225, -1468965330
  %227 = lshr i64 %226, 32
  %228 = trunc i64 %227 to i32
  %229 = shl i32 %179, 1
  %230 = sext i32 %229 to i64
  %231 = mul nsw i64 %230, 1859775393
  %232 = lshr i64 %231, 32
  %233 = trunc i64 %232 to i32
  %234 = add i32 %175, %177
  %235 = shl i32 %234, 1
  %236 = sext i32 %235 to i64
  %237 = mul nsw i64 %236, -1380375881
  %238 = lshr i64 %237, 32
  %239 = trunc i64 %238 to i32
  %240 = add i32 %228, %233
  %241 = add i32 %240, %223
  store i32 %241, i32* %23, align 4
  %242 = sub i32 %239, %233
  %243 = add i32 %242, %223
  store i32 %243, i32* %30, align 4
  %244 = add i32 %239, %233
  %245 = sub i32 %228, %244
  store i32 %245, i32* %31, align 4
  %246 = icmp ult i32 %35, 2
  %247 = and i1 %10, %246
  %248 = select i1 %247, i32 0, i32 %5
  %249 = and i32 %35, 1
  %250 = sub nsw i32 0, %249
  %251 = and i32 %250, 4
  %252 = add nsw i32 %248, %251
  %253 = sext i32 %252 to i64
  br label %254

254:                                              ; preds = %32, %254
  %255 = phi i64 [ %374, %254 ], [ 0, %32 ]
  %256 = phi i64 [ %375, %254 ], [ 0, %32 ]
  %257 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 %255
  %258 = load i32, i32* %257, align 16
  %259 = or i64 %255, 2
  %260 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 %259
  %261 = load i32, i32* %260, align 8
  %262 = add i32 %261, %258
  %263 = sub i32 %261, %258
  %264 = or i64 %255, 1
  %265 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 %264
  %266 = load i32, i32* %265, align 4
  %267 = or i64 %255, 3
  %268 = getelementptr inbounds [18 x i32], [18 x i32]* %7, i64 0, i64 %267
  %269 = load i32, i32* %268, align 4
  %270 = add i32 %269, %266
  %271 = shl i32 %270, 1
  %272 = getelementptr inbounds [9 x i32], [9 x i32]* @icos36h, i64 0, i64 %256
  %273 = load i32, i32* %272, align 4
  %274 = sext i32 %271 to i64
  %275 = sext i32 %273 to i64
  %276 = mul nsw i64 %274, %275
  %277 = lshr i64 %276, 32
  %278 = trunc i64 %277 to i32
  %279 = sub i32 %269, %266
  %280 = sext i32 %279 to i64
  %281 = sub nuw nsw i64 8, %256
  %282 = getelementptr inbounds [9 x i32], [9 x i32]* @icos36, i64 0, i64 %281
  %283 = load i32, i32* %282, align 4
  %284 = sext i32 %283 to i64
  %285 = mul nsw i64 %284, %280
  %286 = lshr i64 %285, 23
  %287 = trunc i64 %286 to i32
  %288 = add i32 %262, %278
  %289 = sub i32 %262, %278
  %290 = add nuw nsw i64 %256, 9
  %291 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %253, i64 %290
  %292 = load i32, i32* %291, align 4
  %293 = sext i32 %289 to i64
  %294 = sext i32 %292 to i64
  %295 = mul nsw i64 %293, %294
  %296 = lshr i64 %295, 32
  %297 = trunc i64 %296 to i32
  %298 = shl nsw i64 %290, 2
  %299 = getelementptr inbounds i32, i32* %34, i64 %298
  %300 = load i32, i32* %299, align 4
  %301 = add nsw i32 %300, %297
  %302 = shl nsw i64 %290, 5
  %303 = getelementptr inbounds i32, i32* %33, i64 %302
  store i32 %301, i32* %303, align 4
  %304 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %253, i64 %281
  %305 = load i32, i32* %304, align 4
  %306 = sext i32 %305 to i64
  %307 = mul nsw i64 %293, %306
  %308 = lshr i64 %307, 32
  %309 = trunc i64 %308 to i32
  %310 = shl nsw i64 %281, 2
  %311 = getelementptr inbounds i32, i32* %34, i64 %310
  %312 = load i32, i32* %311, align 4
  %313 = add nsw i32 %312, %309
  %314 = shl nsw i64 %281, 5
  %315 = getelementptr inbounds i32, i32* %33, i64 %314
  store i32 %313, i32* %315, align 4
  %316 = add nuw nsw i64 %256, 29
  %317 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %253, i64 %316
  %318 = load i32, i32* %317, align 4
  %319 = sext i32 %288 to i64
  %320 = sext i32 %318 to i64
  %321 = mul nsw i64 %320, %319
  %322 = lshr i64 %321, 32
  %323 = trunc i64 %322 to i32
  store i32 %323, i32* %299, align 4
  %324 = sub nuw nsw i64 28, %256
  %325 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %253, i64 %324
  %326 = load i32, i32* %325, align 4
  %327 = sext i32 %326 to i64
  %328 = mul nsw i64 %327, %319
  %329 = lshr i64 %328, 32
  %330 = trunc i64 %329 to i32
  store i32 %330, i32* %311, align 4
  %331 = add i32 %263, %287
  %332 = sub i32 %263, %287
  %333 = sub nuw nsw i64 17, %256
  %334 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %253, i64 %333
  %335 = load i32, i32* %334, align 4
  %336 = sext i32 %332 to i64
  %337 = sext i32 %335 to i64
  %338 = mul nsw i64 %337, %336
  %339 = lshr i64 %338, 32
  %340 = trunc i64 %339 to i32
  %341 = shl nsw i64 %333, 2
  %342 = getelementptr inbounds i32, i32* %34, i64 %341
  %343 = load i32, i32* %342, align 4
  %344 = add nsw i32 %343, %340
  %345 = shl nsw i64 %333, 5
  %346 = getelementptr inbounds i32, i32* %33, i64 %345
  store i32 %344, i32* %346, align 4
  %347 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %253, i64 %256
  %348 = load i32, i32* %347, align 4
  %349 = sext i32 %348 to i64
  %350 = mul nsw i64 %349, %336
  %351 = lshr i64 %350, 32
  %352 = trunc i64 %351 to i32
  %353 = shl nsw i64 %256, 2
  %354 = getelementptr inbounds i32, i32* %34, i64 %353
  %355 = load i32, i32* %354, align 4
  %356 = add nsw i32 %355, %352
  %357 = shl nsw i64 %256, 5
  %358 = getelementptr inbounds i32, i32* %33, i64 %357
  store i32 %356, i32* %358, align 4
  %359 = sub nuw nsw i64 37, %256
  %360 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %253, i64 %359
  %361 = load i32, i32* %360, align 4
  %362 = sext i32 %331 to i64
  %363 = sext i32 %361 to i64
  %364 = mul nsw i64 %363, %362
  %365 = lshr i64 %364, 32
  %366 = trunc i64 %365 to i32
  store i32 %366, i32* %342, align 4
  %367 = add nuw nsw i64 %256, 20
  %368 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %253, i64 %367
  %369 = load i32, i32* %368, align 4
  %370 = sext i32 %369 to i64
  %371 = mul nsw i64 %370, %362
  %372 = lshr i64 %371, 32
  %373 = trunc i64 %372 to i32
  store i32 %373, i32* %354, align 4
  %374 = add nuw nsw i64 %255, 4
  %375 = add nuw nsw i64 %256, 1
  %376 = icmp eq i64 %375, 4
  br i1 %376, label %377, label %254

377:                                              ; preds = %254
  %378 = load i32, i32* %12, align 16
  %379 = load i32, i32* %13, align 4
  %380 = shl i32 %379, 1
  %381 = sext i32 %380 to i64
  %382 = mul nsw i64 %381, 1518500250
  %383 = lshr i64 %382, 32
  %384 = trunc i64 %383 to i32
  %385 = add i32 %378, %384
  %386 = sub i32 %378, %384
  %387 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %253, i64 13
  %388 = load i32, i32* %387, align 4
  %389 = sext i32 %386 to i64
  %390 = sext i32 %388 to i64
  %391 = mul nsw i64 %389, %390
  %392 = lshr i64 %391, 32
  %393 = trunc i64 %392 to i32
  %394 = getelementptr inbounds i32, i32* %34, i64 52
  %395 = load i32, i32* %394, align 4
  %396 = add nsw i32 %395, %393
  %397 = getelementptr inbounds i32, i32* %33, i64 416
  store i32 %396, i32* %397, align 4
  %398 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %253, i64 4
  %399 = load i32, i32* %398, align 16
  %400 = sext i32 %399 to i64
  %401 = mul nsw i64 %389, %400
  %402 = lshr i64 %401, 32
  %403 = trunc i64 %402 to i32
  %404 = getelementptr inbounds i32, i32* %34, i64 16
  %405 = load i32, i32* %404, align 4
  %406 = add nsw i32 %405, %403
  %407 = getelementptr inbounds i32, i32* %33, i64 128
  store i32 %406, i32* %407, align 4
  %408 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %253, i64 33
  %409 = load i32, i32* %408, align 4
  %410 = sext i32 %385 to i64
  %411 = sext i32 %409 to i64
  %412 = mul nsw i64 %411, %410
  %413 = lshr i64 %412, 32
  %414 = trunc i64 %413 to i32
  store i32 %414, i32* %394, align 4
  %415 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %253, i64 24
  %416 = load i32, i32* %415, align 16
  %417 = sext i32 %416 to i64
  %418 = mul nsw i64 %417, %410
  %419 = lshr i64 %418, 32
  %420 = trunc i64 %419 to i32
  store i32 %420, i32* %404, align 4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %11) #5
  %421 = getelementptr inbounds i32, i32* %36, i64 18
  %422 = and i32 %35, 3
  %423 = icmp eq i32 %422, 3
  %424 = select i1 %423, i64 69, i64 1
  %425 = getelementptr inbounds i32, i32* %34, i64 %424
  %426 = getelementptr inbounds i32, i32* %33, i64 1
  %427 = add nuw nsw i32 %35, 1
  %428 = icmp eq i32 %427, %3
  br i1 %428, label %429, label %32

429:                                              ; preds = %377, %6
  ret void
}

; Function Attrs: cold nofree norecurse nounwind optsize ssp uwtable
define internal fastcc void @mpa_synth_init() unnamed_addr #4 {
  br label %1

1:                                                ; preds = %14, %0
  %2 = phi i64 [ 0, %0 ], [ %15, %14 ]
  %3 = getelementptr inbounds [257 x i32], [257 x i32]* @ff_mpa_enwindow, i64 0, i64 %2
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds [768 x i32], [768 x i32]* @ff_mpa_synth_window_fixed, i64 0, i64 %2
  store i32 %4, i32* %5, align 4
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %1
  %8 = and i64 %2, 63
  %9 = icmp eq i64 %8, 0
  %10 = sub nsw i32 0, %4
  %11 = select i1 %9, i32 %4, i32 %10
  %12 = sub nuw nsw i64 512, %2
  %13 = getelementptr inbounds [768 x i32], [768 x i32]* @ff_mpa_synth_window_fixed, i64 0, i64 %12
  store i32 %11, i32* %13, align 4
  br label %14

14:                                               ; preds = %1, %7
  %15 = add nuw nsw i64 %2, 1
  %16 = icmp eq i64 %15, 257
  br i1 %16, label %17, label %1

17:                                               ; preds = %14, %32
  %18 = phi i64 [ %33, %32 ], [ 0, %14 ]
  %19 = shl nsw i64 %18, 6
  %20 = or i64 %19, 32
  %21 = shl i64 %18, 4
  %22 = add nuw nsw i64 %21, 512
  br label %23

23:                                               ; preds = %23, %17
  %24 = phi i64 [ 0, %17 ], [ %30, %23 ]
  %25 = sub nuw nsw i64 %20, %24
  %26 = getelementptr inbounds [768 x i32], [768 x i32]* @ff_mpa_synth_window_fixed, i64 0, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = add nuw nsw i64 %22, %24
  %29 = getelementptr inbounds [768 x i32], [768 x i32]* @ff_mpa_synth_window_fixed, i64 0, i64 %28
  store i32 %27, i32* %29, align 4
  %30 = add nuw nsw i64 %24, 1
  %31 = icmp eq i64 %30, 16
  br i1 %31, label %32, label %23

32:                                               ; preds = %23
  %33 = add nuw nsw i64 %18, 1
  %34 = icmp eq i64 %33, 8
  br i1 %34, label %35, label %17

35:                                               ; preds = %32, %50
  %36 = phi i64 [ %51, %50 ], [ 0, %32 ]
  %37 = shl nsw i64 %36, 6
  %38 = or i64 %37, 48
  %39 = shl i64 %36, 4
  %40 = add nuw nsw i64 %39, 640
  br label %41

41:                                               ; preds = %41, %35
  %42 = phi i64 [ 0, %35 ], [ %48, %41 ]
  %43 = sub nuw nsw i64 %38, %42
  %44 = getelementptr inbounds [768 x i32], [768 x i32]* @ff_mpa_synth_window_fixed, i64 0, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = add nuw nsw i64 %40, %42
  %47 = getelementptr inbounds [768 x i32], [768 x i32]* @ff_mpa_synth_window_fixed, i64 0, i64 %46
  store i32 %45, i32* %47, align 4
  %48 = add nuw nsw i64 %42, 1
  %49 = icmp eq i64 %48, 16
  br i1 %49, label %50, label %41

50:                                               ; preds = %41
  %51 = add nuw nsw i64 %36, 1
  %52 = icmp eq i64 %51, 8
  br i1 %52, label %53, label %35

53:                                               ; preds = %50
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { cold }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
