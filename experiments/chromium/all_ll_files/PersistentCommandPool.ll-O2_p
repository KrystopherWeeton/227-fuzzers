; ModuleID = '../../third_party/angle/src/libANGLE/renderer/vulkan/PersistentCommandPool.cpp'
source_filename = "../../third_party/angle/src/libANGLE/renderer/vulkan/PersistentCommandPool.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VkCommandBuffer_T = type opaque
%struct.VkDevice_T = type opaque
%struct.VkCommandPoolCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%struct.VkCommandPool_T = type opaque
%struct.VkCommandBufferAllocateInfo = type { i32, i8*, %struct.VkCommandPool_T*, i32, i32 }
%"class.rx::vk::PersistentCommandPool" = type { %"class.std::__1::vector", %"class.rx::vk::CommandPool" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"*, %"class.std::__1::__compressed_pair" }
%"class.rx::vk::priv::CommandBuffer" = type { %"class.rx::vk::WrappedObject" }
%"class.rx::vk::WrappedObject" = type { %struct.VkCommandBuffer_T* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.rx::vk::priv::CommandBuffer"* }
%"class.rx::vk::CommandPool" = type { %"class.rx::vk::WrappedObject.1" }
%"class.rx::vk::WrappedObject.1" = type { %struct.VkCommandPool_T* }
%"class.rx::vk::Context" = type { i32 (...)**, %"class.rx::RendererVk"* }
%"class.rx::RendererVk" = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }

@.str = private unnamed_addr constant [79 x i8] c"../../third_party/angle/src/libANGLE/renderer/vulkan/PersistentCommandPool.cpp\00", align 1
@__func__._ZN2rx2vk21PersistentCommandPool4initEPNS0_7ContextEj = private unnamed_addr constant [5 x i8] c"init\00", align 1
@vkResetCommandBuffer = external local_unnamed_addr global i32 (%struct.VkCommandBuffer_T*, i32)*, align 8
@__func__._ZN2rx2vk21PersistentCommandPool7collectEPNS0_7ContextEONS0_4priv13CommandBufferE = private unnamed_addr constant [8 x i8] c"collect\00", align 1
@__func__._ZN2rx2vk21PersistentCommandPool21allocateCommandBufferEPNS0_7ContextE = private unnamed_addr constant [22 x i8] c"allocateCommandBuffer\00", align 1
@vkCreateCommandPool = external local_unnamed_addr global i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)*, align 8
@vkFreeCommandBuffers = external local_unnamed_addr global void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)*, align 8
@vkDestroyCommandPool = external local_unnamed_addr global void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)*, align 8
@vkAllocateCommandBuffers = external local_unnamed_addr global i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)*, align 8

@_ZN2rx2vk21PersistentCommandPoolC1Ev = hidden unnamed_addr alias void (%"class.rx::vk::PersistentCommandPool"*), void (%"class.rx::vk::PersistentCommandPool"*)* @_ZN2rx2vk21PersistentCommandPoolC2Ev
@_ZN2rx2vk21PersistentCommandPoolD1Ev = hidden unnamed_addr alias void (%"class.rx::vk::PersistentCommandPool"*), void (%"class.rx::vk::PersistentCommandPool"*)* @_ZN2rx2vk21PersistentCommandPoolD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx2vk21PersistentCommandPoolC2Ev(%"class.rx::vk::PersistentCommandPool"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.rx::vk::PersistentCommandPool"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx2vk21PersistentCommandPoolD2Ev(%"class.rx::vk::PersistentCommandPool"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %2, align 8
  %4 = icmp eq %"class.rx::vk::priv::CommandBuffer"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %3 to i64
  %7 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %"class.rx::vk::priv::CommandBuffer"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"class.rx::vk::priv::CommandBuffer"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #7
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx2vk21PersistentCommandPool4initEPNS0_7ContextEj(%"class.rx::vk::PersistentCommandPool"*, %"class.rx::vk::Context"*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.VkCommandPoolCreateInfo, align 8
  %5 = bitcast %struct.VkCommandPoolCreateInfo* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false)
  %6 = getelementptr inbounds %struct.VkCommandPoolCreateInfo, %struct.VkCommandPoolCreateInfo* %4, i64 0, i32 0
  store i32 39, i32* %6, align 8
  %7 = getelementptr inbounds %struct.VkCommandPoolCreateInfo, %struct.VkCommandPoolCreateInfo* %4, i64 0, i32 2
  store i32 3, i32* %7, align 8
  %8 = getelementptr inbounds %struct.VkCommandPoolCreateInfo, %struct.VkCommandPoolCreateInfo* %4, i64 0, i32 3
  store i32 %2, i32* %8, align 4
  %9 = tail call %struct.VkDevice_T* @_ZNK2rx2vk7Context9getDeviceEv(%"class.rx::vk::Context"* %1) #8
  %10 = load i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)*, i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)** @vkCreateCommandPool, align 8
  %11 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = call i32 %10(%struct.VkDevice_T* %9, %struct.VkCommandPoolCreateInfo* nonnull %4, %struct.VkAllocationCallbacks* null, %struct.VkCommandPool_T** %11) #8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %17, !prof !2

14:                                               ; preds = %3
  %15 = call i32 @_ZN2rx2vk21PersistentCommandPool21allocateCommandBufferEPNS0_7ContextE(%"class.rx::vk::PersistentCommandPool"* %0, %"class.rx::vk::Context"* %1)
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %26, label %22

17:                                               ; preds = %3
  %18 = bitcast %"class.rx::vk::Context"* %1 to void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)***
  %19 = load void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)**, void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)*, void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)** %19, i64 2
  %21 = load void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)*, void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)** %20, align 8
  call void %21(%"class.rx::vk::Context"* %1, i32 %12, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__._ZN2rx2vk21PersistentCommandPool4initEPNS0_7ContextEj, i64 0, i64 0), i32 38) #8
  br label %26

22:                                               ; preds = %14
  %23 = call i32 @_ZN2rx2vk21PersistentCommandPool21allocateCommandBufferEPNS0_7ContextE(%"class.rx::vk::PersistentCommandPool"* %0, %"class.rx::vk::Context"* %1)
  %24 = icmp eq i32 %23, 1
  %25 = zext i1 %24 to i32
  br label %26

26:                                               ; preds = %22, %14, %17
  %27 = phi i32 [ 1, %17 ], [ 1, %14 ], [ %25, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #8
  ret i32 %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare %struct.VkDevice_T* @_ZNK2rx2vk7Context9getDeviceEv(%"class.rx::vk::Context"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx2vk21PersistentCommandPool21allocateCommandBufferEPNS0_7ContextE(%"class.rx::vk::PersistentCommandPool"*, %"class.rx::vk::Context"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.rx::vk::priv::CommandBuffer", align 8
  %4 = alloca %struct.VkCommandBufferAllocateInfo, align 8
  %5 = bitcast %"class.rx::vk::priv::CommandBuffer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %3, i64 0, i32 0, i32 0
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %6, align 8
  %7 = bitcast %struct.VkCommandBufferAllocateInfo* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 16, i1 false)
  %8 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %4, i64 0, i32 0
  store i32 40, i32* %8, align 8
  %9 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %struct.VkCommandPool_T** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %4, i64 0, i32 2
  %13 = bitcast %struct.VkCommandPool_T** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %4, i64 0, i32 3
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %4, i64 0, i32 4
  store i32 1, i32* %15, align 4
  %16 = tail call %struct.VkDevice_T* @_ZNK2rx2vk7Context9getDeviceEv(%"class.rx::vk::Context"* %1) #8
  %17 = load i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)** @vkAllocateCommandBuffers, align 8
  %18 = call i32 %17(%struct.VkDevice_T* %16, %struct.VkCommandBufferAllocateInfo* nonnull %4, %struct.VkCommandBuffer_T** nonnull %6) #8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %25, label %20, !prof !2

20:                                               ; preds = %2
  %21 = bitcast %"class.rx::vk::Context"* %1 to void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)***
  %22 = load void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)**, void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)*, void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)** %22, i64 2
  %24 = load void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)*, void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)** %23, align 8
  call void %24(%"class.rx::vk::Context"* %1, i32 %18, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__func__._ZN2rx2vk21PersistentCommandPool21allocateCommandBufferEPNS0_7ContextE, i64 0, i64 0), i32 101) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  br label %171

25:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  %26 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 0, i32 0, i32 1
  %27 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %26, align 8
  %28 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %29 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %28, align 8
  %30 = icmp ult %"class.rx::vk::priv::CommandBuffer"* %27, %29
  %31 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %29 to i64
  br i1 %30, label %32, label %39

32:                                               ; preds = %25
  %33 = bitcast %"class.rx::vk::priv::CommandBuffer"* %3 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.rx::vk::priv::CommandBuffer"* %27 to i64*
  store i64 %34, i64* %35, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %6, align 8
  %36 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %27, i64 1
  %37 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %36 to i64
  %38 = bitcast %"class.rx::vk::priv::CommandBuffer"** %26 to i64*
  store i64 %37, i64* %38, align 8
  br label %171

39:                                               ; preds = %25
  %40 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %27 to i64
  %41 = bitcast %"class.rx::vk::priv::CommandBuffer"** %26 to i64*
  %42 = bitcast %"class.rx::vk::PersistentCommandPool"* %0 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %40, %43
  %45 = ashr exact i64 %44, 3
  %46 = add nsw i64 %45, 1
  %47 = icmp ugt i64 %46, 2305843009213693951
  br i1 %47, label %48, label %50

48:                                               ; preds = %39
  %49 = bitcast %"class.rx::vk::PersistentCommandPool"* %0 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %49) #9
  unreachable

50:                                               ; preds = %39
  %51 = bitcast %"class.rx::vk::priv::CommandBuffer"** %28 to i64*
  %52 = sub i64 %31, %43
  %53 = ashr exact i64 %52, 3
  %54 = icmp ult i64 %53, 1152921504606846975
  br i1 %54, label %55, label %63

55:                                               ; preds = %50
  %56 = ashr exact i64 %52, 2
  %57 = icmp ult i64 %56, %46
  %58 = select i1 %57, i64 %46, i64 %56
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %68, label %60

60:                                               ; preds = %55
  %61 = icmp ugt i64 %58, 2305843009213693951
  br i1 %61, label %62, label %63

62:                                               ; preds = %60
  call void @abort() #9
  unreachable

63:                                               ; preds = %60, %50
  %64 = phi i64 [ %58, %60 ], [ 2305843009213693951, %50 ]
  %65 = shl i64 %64, 3
  %66 = call i8* @_Znwm(i64 %65) #7
  %67 = bitcast i8* %66 to %"class.rx::vk::priv::CommandBuffer"*
  br label %68

68:                                               ; preds = %63, %55
  %69 = phi i64 [ %64, %63 ], [ 0, %55 ]
  %70 = phi %"class.rx::vk::priv::CommandBuffer"* [ %67, %63 ], [ null, %55 ]
  %71 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %70, i64 %45
  %72 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %70, i64 %69
  %73 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %72 to i64
  %74 = bitcast %"class.rx::vk::priv::CommandBuffer"* %3 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.rx::vk::priv::CommandBuffer"* %71 to i64*
  store i64 %75, i64* %76, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %6, align 8
  %77 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %71, i64 1
  %78 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %77 to i64
  %79 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 0, i32 0, i32 0
  %80 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %79, align 8
  %81 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %80 to i64
  %82 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %26, align 8
  %83 = icmp eq %"class.rx::vk::priv::CommandBuffer"* %82, %80
  br i1 %83, label %164, label %84

84:                                               ; preds = %68
  %85 = getelementptr %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %82, i64 -1, i32 0, i32 0
  %86 = ptrtoint %struct.VkCommandBuffer_T** %85 to i64
  %87 = sub i64 %86, %81
  %88 = lshr i64 %87, 3
  %89 = add nuw nsw i64 %88, 1
  %90 = and i64 %89, 7
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %104, label %92

92:                                               ; preds = %84, %92
  %93 = phi %"class.rx::vk::priv::CommandBuffer"* [ %96, %92 ], [ %71, %84 ]
  %94 = phi %"class.rx::vk::priv::CommandBuffer"* [ %97, %92 ], [ %82, %84 ]
  %95 = phi i64 [ %102, %92 ], [ %90, %84 ]
  %96 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %93, i64 -1
  %97 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %94, i64 -1
  %98 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %97, i64 0, i32 0, i32 0
  %99 = bitcast %"class.rx::vk::priv::CommandBuffer"* %97 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.rx::vk::priv::CommandBuffer"* %96 to i64*
  store i64 %100, i64* %101, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %98, align 8
  %102 = add i64 %95, -1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %92, !llvm.loop !3

104:                                              ; preds = %92, %84
  %105 = phi %"class.rx::vk::priv::CommandBuffer"* [ undef, %84 ], [ %96, %92 ]
  %106 = phi %"class.rx::vk::priv::CommandBuffer"* [ %71, %84 ], [ %96, %92 ]
  %107 = phi %"class.rx::vk::priv::CommandBuffer"* [ %82, %84 ], [ %97, %92 ]
  %108 = icmp ult i64 %87, 56
  br i1 %108, label %161, label %109

109:                                              ; preds = %104, %109
  %110 = phi %"class.rx::vk::priv::CommandBuffer"* [ %154, %109 ], [ %106, %104 ]
  %111 = phi %"class.rx::vk::priv::CommandBuffer"* [ %155, %109 ], [ %107, %104 ]
  %112 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %110, i64 -1
  %113 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %111, i64 -1
  %114 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %113, i64 0, i32 0, i32 0
  %115 = bitcast %"class.rx::vk::priv::CommandBuffer"* %113 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = bitcast %"class.rx::vk::priv::CommandBuffer"* %112 to i64*
  store i64 %116, i64* %117, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %114, align 8
  %118 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %110, i64 -2
  %119 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %111, i64 -2
  %120 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %119, i64 0, i32 0, i32 0
  %121 = bitcast %"class.rx::vk::priv::CommandBuffer"* %119 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = bitcast %"class.rx::vk::priv::CommandBuffer"* %118 to i64*
  store i64 %122, i64* %123, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %120, align 8
  %124 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %110, i64 -3
  %125 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %111, i64 -3
  %126 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %125, i64 0, i32 0, i32 0
  %127 = bitcast %"class.rx::vk::priv::CommandBuffer"* %125 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.rx::vk::priv::CommandBuffer"* %124 to i64*
  store i64 %128, i64* %129, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %126, align 8
  %130 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %110, i64 -4
  %131 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %111, i64 -4
  %132 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %131, i64 0, i32 0, i32 0
  %133 = bitcast %"class.rx::vk::priv::CommandBuffer"* %131 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = bitcast %"class.rx::vk::priv::CommandBuffer"* %130 to i64*
  store i64 %134, i64* %135, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %132, align 8
  %136 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %110, i64 -5
  %137 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %111, i64 -5
  %138 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %137, i64 0, i32 0, i32 0
  %139 = bitcast %"class.rx::vk::priv::CommandBuffer"* %137 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = bitcast %"class.rx::vk::priv::CommandBuffer"* %136 to i64*
  store i64 %140, i64* %141, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %138, align 8
  %142 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %110, i64 -6
  %143 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %111, i64 -6
  %144 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %143, i64 0, i32 0, i32 0
  %145 = bitcast %"class.rx::vk::priv::CommandBuffer"* %143 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = bitcast %"class.rx::vk::priv::CommandBuffer"* %142 to i64*
  store i64 %146, i64* %147, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %144, align 8
  %148 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %110, i64 -7
  %149 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %111, i64 -7
  %150 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %149, i64 0, i32 0, i32 0
  %151 = bitcast %"class.rx::vk::priv::CommandBuffer"* %149 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = bitcast %"class.rx::vk::priv::CommandBuffer"* %148 to i64*
  store i64 %152, i64* %153, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %150, align 8
  %154 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %110, i64 -8
  %155 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %111, i64 -8
  %156 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %155, i64 0, i32 0, i32 0
  %157 = bitcast %"class.rx::vk::priv::CommandBuffer"* %155 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = bitcast %"class.rx::vk::priv::CommandBuffer"* %154 to i64*
  store i64 %158, i64* %159, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %156, align 8
  %160 = icmp eq %"class.rx::vk::priv::CommandBuffer"* %155, %80
  br i1 %160, label %161, label %109

161:                                              ; preds = %109, %104
  %162 = phi %"class.rx::vk::priv::CommandBuffer"* [ %105, %104 ], [ %154, %109 ]
  %163 = load i64, i64* %42, align 8
  br label %164

164:                                              ; preds = %68, %161
  %165 = phi %"class.rx::vk::priv::CommandBuffer"* [ %162, %161 ], [ %71, %68 ]
  %166 = phi i64 [ %163, %161 ], [ %81, %68 ]
  %167 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %165 to i64
  store i64 %167, i64* %42, align 8
  store i64 %78, i64* %41, align 8
  store i64 %73, i64* %51, align 8
  %168 = icmp eq i64 %166, 0
  br i1 %168, label %171, label %169

169:                                              ; preds = %164
  %170 = inttoptr i64 %166 to i8*
  call void @_ZdlPv(i8* %170) #7
  br label %171

171:                                              ; preds = %32, %164, %169, %20
  %172 = phi i32 [ 1, %20 ], [ 0, %169 ], [ 0, %164 ], [ 0, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  ret i32 %172
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx2vk21PersistentCommandPool7destroyEP10VkDevice_T(%"class.rx::vk::PersistentCommandPool"* nocapture, %struct.VkDevice_T*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %struct.VkCommandPool_T*, %struct.VkCommandPool_T** %3, align 8
  %5 = icmp eq %struct.VkCommandPool_T* %4, null
  br i1 %5, label %35, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %7, align 8
  %9 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %9, align 8
  %11 = icmp eq %"class.rx::vk::priv::CommandBuffer"* %8, %10
  br i1 %11, label %12, label %24

12:                                               ; preds = %6
  %13 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %8 to i64
  %14 = bitcast %"class.rx::vk::priv::CommandBuffer"** %9 to i64*
  store i64 %13, i64* %14, align 8
  br label %21

15:                                               ; preds = %32
  %16 = bitcast %"class.rx::vk::PersistentCommandPool"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = load %struct.VkCommandPool_T*, %struct.VkCommandPool_T** %3, align 8
  %19 = bitcast %"class.rx::vk::priv::CommandBuffer"** %9 to i64*
  store i64 %17, i64* %19, align 8
  %20 = icmp eq %struct.VkCommandPool_T* %18, null
  br i1 %20, label %35, label %21

21:                                               ; preds = %12, %15
  %22 = phi %struct.VkCommandPool_T* [ %4, %12 ], [ %18, %15 ]
  %23 = load void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)** @vkDestroyCommandPool, align 8
  tail call void %23(%struct.VkDevice_T* %1, %struct.VkCommandPool_T* nonnull %22, %struct.VkAllocationCallbacks* null) #8
  store %struct.VkCommandPool_T* null, %struct.VkCommandPool_T** %3, align 8
  br label %35

24:                                               ; preds = %6, %32
  %25 = phi %"class.rx::vk::priv::CommandBuffer"* [ %33, %32 ], [ %8, %6 ]
  %26 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %25, i64 0, i32 0, i32 0
  %27 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %26, align 8
  %28 = icmp eq %struct.VkCommandBuffer_T* %27, null
  br i1 %28, label %32, label %29

29:                                               ; preds = %24
  %30 = load void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)** @vkFreeCommandBuffers, align 8
  %31 = load %struct.VkCommandPool_T*, %struct.VkCommandPool_T** %3, align 8
  tail call void %30(%struct.VkDevice_T* %1, %struct.VkCommandPool_T* %31, i32 1, %struct.VkCommandBuffer_T** %26) #8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %26, align 8
  br label %32

32:                                               ; preds = %24, %29
  %33 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %25, i64 1
  %34 = icmp eq %"class.rx::vk::priv::CommandBuffer"* %33, %10
  br i1 %34, label %15, label %24

35:                                               ; preds = %2, %21, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx2vk21PersistentCommandPool8allocateEPNS0_7ContextEPNS0_4priv13CommandBufferE(%"class.rx::vk::PersistentCommandPool"*, %"class.rx::vk::Context"*, %"class.rx::vk::priv::CommandBuffer"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %4, align 8
  %6 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %6, align 8
  %8 = icmp eq %"class.rx::vk::priv::CommandBuffer"* %5, %7
  br i1 %8, label %9, label %14

9:                                                ; preds = %3
  %10 = tail call i32 @_ZN2rx2vk21PersistentCommandPool21allocateCommandBufferEPNS0_7ContextE(%"class.rx::vk::PersistentCommandPool"* %0, %"class.rx::vk::Context"* %1)
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %23, label %12

12:                                               ; preds = %9
  %13 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %6, align 8
  br label %14

14:                                               ; preds = %12, %3
  %15 = phi %"class.rx::vk::priv::CommandBuffer"* [ %13, %12 ], [ %7, %3 ]
  %16 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %15, i64 -1
  %17 = bitcast %"class.rx::vk::priv::CommandBuffer"* %2 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.rx::vk::priv::CommandBuffer"* %16 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %17, align 8
  store i64 %18, i64* %19, align 8
  %21 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %6, align 8
  %22 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %21, i64 -1
  store %"class.rx::vk::priv::CommandBuffer"* %22, %"class.rx::vk::priv::CommandBuffer"** %6, align 8
  br label %23

23:                                               ; preds = %9, %14
  %24 = phi i32 [ 0, %14 ], [ 1, %9 ]
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx2vk21PersistentCommandPool7collectEPNS0_7ContextEONS0_4priv13CommandBufferE(%"class.rx::vk::PersistentCommandPool"*, %"class.rx::vk::Context"*, %"class.rx::vk::priv::CommandBuffer"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = load i32 (%struct.VkCommandBuffer_T*, i32)*, i32 (%struct.VkCommandBuffer_T*, i32)** @vkResetCommandBuffer, align 8
  %5 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %2, i64 0, i32 0, i32 0
  %6 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %5, align 8
  %7 = tail call i32 %4(%struct.VkCommandBuffer_T* %6, i32 0) #8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %14, label %9, !prof !2

9:                                                ; preds = %3
  %10 = bitcast %"class.rx::vk::Context"* %1 to void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)***
  %11 = load void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)**, void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)*, void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)** %11, i64 2
  %13 = load void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)*, void (%"class.rx::vk::Context"*, i32, i8*, i8*, i32)** %12, align 8
  tail call void %13(%"class.rx::vk::Context"* %1, i32 %7, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN2rx2vk21PersistentCommandPool7collectEPNS0_7ContextEONS0_4priv13CommandBufferE, i64 0, i64 0), i32 84) #8
  br label %160

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 0, i32 0, i32 1
  %16 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %15, align 8
  %17 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %18 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %17, align 8
  %19 = icmp ult %"class.rx::vk::priv::CommandBuffer"* %16, %18
  %20 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %18 to i64
  br i1 %19, label %21, label %28

21:                                               ; preds = %14
  %22 = bitcast %"class.rx::vk::priv::CommandBuffer"* %2 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %"class.rx::vk::priv::CommandBuffer"* %16 to i64*
  store i64 %23, i64* %24, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %5, align 8
  %25 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %16, i64 1
  %26 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %25 to i64
  %27 = bitcast %"class.rx::vk::priv::CommandBuffer"** %15 to i64*
  store i64 %26, i64* %27, align 8
  br label %160

28:                                               ; preds = %14
  %29 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %16 to i64
  %30 = bitcast %"class.rx::vk::priv::CommandBuffer"** %15 to i64*
  %31 = bitcast %"class.rx::vk::PersistentCommandPool"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %29, %32
  %34 = ashr exact i64 %33, 3
  %35 = add nsw i64 %34, 1
  %36 = icmp ugt i64 %35, 2305843009213693951
  br i1 %36, label %37, label %39

37:                                               ; preds = %28
  %38 = bitcast %"class.rx::vk::PersistentCommandPool"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #9
  unreachable

39:                                               ; preds = %28
  %40 = bitcast %"class.rx::vk::priv::CommandBuffer"** %17 to i64*
  %41 = sub i64 %20, %32
  %42 = ashr exact i64 %41, 3
  %43 = icmp ult i64 %42, 1152921504606846975
  br i1 %43, label %44, label %52

44:                                               ; preds = %39
  %45 = ashr exact i64 %41, 2
  %46 = icmp ult i64 %45, %35
  %47 = select i1 %46, i64 %35, i64 %45
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %57, label %49

49:                                               ; preds = %44
  %50 = icmp ugt i64 %47, 2305843009213693951
  br i1 %50, label %51, label %52

51:                                               ; preds = %49
  tail call void @abort() #9
  unreachable

52:                                               ; preds = %49, %39
  %53 = phi i64 [ %47, %49 ], [ 2305843009213693951, %39 ]
  %54 = shl i64 %53, 3
  %55 = tail call i8* @_Znwm(i64 %54) #7
  %56 = bitcast i8* %55 to %"class.rx::vk::priv::CommandBuffer"*
  br label %57

57:                                               ; preds = %52, %44
  %58 = phi i64 [ %53, %52 ], [ 0, %44 ]
  %59 = phi %"class.rx::vk::priv::CommandBuffer"* [ %56, %52 ], [ null, %44 ]
  %60 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %59, i64 %34
  %61 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %59, i64 %58
  %62 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %61 to i64
  %63 = bitcast %"class.rx::vk::priv::CommandBuffer"* %2 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = bitcast %"class.rx::vk::priv::CommandBuffer"* %60 to i64*
  store i64 %64, i64* %65, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %5, align 8
  %66 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %60, i64 1
  %67 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %66 to i64
  %68 = getelementptr inbounds %"class.rx::vk::PersistentCommandPool", %"class.rx::vk::PersistentCommandPool"* %0, i64 0, i32 0, i32 0, i32 0
  %69 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %68, align 8
  %70 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %69 to i64
  %71 = load %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"** %15, align 8
  %72 = icmp eq %"class.rx::vk::priv::CommandBuffer"* %71, %69
  br i1 %72, label %153, label %73

73:                                               ; preds = %57
  %74 = getelementptr %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %71, i64 -1, i32 0, i32 0
  %75 = ptrtoint %struct.VkCommandBuffer_T** %74 to i64
  %76 = sub i64 %75, %70
  %77 = lshr i64 %76, 3
  %78 = add nuw nsw i64 %77, 1
  %79 = and i64 %78, 7
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %93, label %81

81:                                               ; preds = %73, %81
  %82 = phi %"class.rx::vk::priv::CommandBuffer"* [ %85, %81 ], [ %60, %73 ]
  %83 = phi %"class.rx::vk::priv::CommandBuffer"* [ %86, %81 ], [ %71, %73 ]
  %84 = phi i64 [ %91, %81 ], [ %79, %73 ]
  %85 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %82, i64 -1
  %86 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %83, i64 -1
  %87 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %86, i64 0, i32 0, i32 0
  %88 = bitcast %"class.rx::vk::priv::CommandBuffer"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %"class.rx::vk::priv::CommandBuffer"* %85 to i64*
  store i64 %89, i64* %90, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %87, align 8
  %91 = add i64 %84, -1
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %81, !llvm.loop !5

93:                                               ; preds = %81, %73
  %94 = phi %"class.rx::vk::priv::CommandBuffer"* [ undef, %73 ], [ %85, %81 ]
  %95 = phi %"class.rx::vk::priv::CommandBuffer"* [ %60, %73 ], [ %85, %81 ]
  %96 = phi %"class.rx::vk::priv::CommandBuffer"* [ %71, %73 ], [ %86, %81 ]
  %97 = icmp ult i64 %76, 56
  br i1 %97, label %150, label %98

98:                                               ; preds = %93, %98
  %99 = phi %"class.rx::vk::priv::CommandBuffer"* [ %143, %98 ], [ %95, %93 ]
  %100 = phi %"class.rx::vk::priv::CommandBuffer"* [ %144, %98 ], [ %96, %93 ]
  %101 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %99, i64 -1
  %102 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %100, i64 -1
  %103 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %102, i64 0, i32 0, i32 0
  %104 = bitcast %"class.rx::vk::priv::CommandBuffer"* %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %"class.rx::vk::priv::CommandBuffer"* %101 to i64*
  store i64 %105, i64* %106, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %103, align 8
  %107 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %99, i64 -2
  %108 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %100, i64 -2
  %109 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %108, i64 0, i32 0, i32 0
  %110 = bitcast %"class.rx::vk::priv::CommandBuffer"* %108 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = bitcast %"class.rx::vk::priv::CommandBuffer"* %107 to i64*
  store i64 %111, i64* %112, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %109, align 8
  %113 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %99, i64 -3
  %114 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %100, i64 -3
  %115 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %114, i64 0, i32 0, i32 0
  %116 = bitcast %"class.rx::vk::priv::CommandBuffer"* %114 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = bitcast %"class.rx::vk::priv::CommandBuffer"* %113 to i64*
  store i64 %117, i64* %118, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %115, align 8
  %119 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %99, i64 -4
  %120 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %100, i64 -4
  %121 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %120, i64 0, i32 0, i32 0
  %122 = bitcast %"class.rx::vk::priv::CommandBuffer"* %120 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.rx::vk::priv::CommandBuffer"* %119 to i64*
  store i64 %123, i64* %124, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %121, align 8
  %125 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %99, i64 -5
  %126 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %100, i64 -5
  %127 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %126, i64 0, i32 0, i32 0
  %128 = bitcast %"class.rx::vk::priv::CommandBuffer"* %126 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.rx::vk::priv::CommandBuffer"* %125 to i64*
  store i64 %129, i64* %130, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %127, align 8
  %131 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %99, i64 -6
  %132 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %100, i64 -6
  %133 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %132, i64 0, i32 0, i32 0
  %134 = bitcast %"class.rx::vk::priv::CommandBuffer"* %132 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = bitcast %"class.rx::vk::priv::CommandBuffer"* %131 to i64*
  store i64 %135, i64* %136, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %133, align 8
  %137 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %99, i64 -7
  %138 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %100, i64 -7
  %139 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %138, i64 0, i32 0, i32 0
  %140 = bitcast %"class.rx::vk::priv::CommandBuffer"* %138 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = bitcast %"class.rx::vk::priv::CommandBuffer"* %137 to i64*
  store i64 %141, i64* %142, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %139, align 8
  %143 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %99, i64 -8
  %144 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %100, i64 -8
  %145 = getelementptr inbounds %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::priv::CommandBuffer"* %144, i64 0, i32 0, i32 0
  %146 = bitcast %"class.rx::vk::priv::CommandBuffer"* %144 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = bitcast %"class.rx::vk::priv::CommandBuffer"* %143 to i64*
  store i64 %147, i64* %148, align 8
  store %struct.VkCommandBuffer_T* null, %struct.VkCommandBuffer_T** %145, align 8
  %149 = icmp eq %"class.rx::vk::priv::CommandBuffer"* %144, %69
  br i1 %149, label %150, label %98

150:                                              ; preds = %98, %93
  %151 = phi %"class.rx::vk::priv::CommandBuffer"* [ %94, %93 ], [ %143, %98 ]
  %152 = load i64, i64* %31, align 8
  br label %153

153:                                              ; preds = %57, %150
  %154 = phi %"class.rx::vk::priv::CommandBuffer"* [ %151, %150 ], [ %60, %57 ]
  %155 = phi i64 [ %152, %150 ], [ %70, %57 ]
  %156 = ptrtoint %"class.rx::vk::priv::CommandBuffer"* %154 to i64
  store i64 %156, i64* %31, align 8
  store i64 %67, i64* %30, align 8
  store i64 %62, i64* %40, align 8
  %157 = icmp eq i64 %155, 0
  br i1 %157, label %160, label %158

158:                                              ; preds = %153
  %159 = inttoptr i64 %155 to i8*
  tail call void @_ZdlPv(i8* %159) #7
  br label %160

160:                                              ; preds = %21, %153, %158, %9
  %161 = phi i32 [ 1, %9 ], [ 0, %158 ], [ 0, %153 ], [ 0, %21 ]
  ret i32 %161
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
