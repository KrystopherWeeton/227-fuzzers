; ModuleID = '../../third_party/skia/src/core/SkMatrix.cpp'
source_filename = "../../third_party/skia/src/core/SkMatrix.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkMatrix = type { [9 x float], i32 }
%struct.SkPoint = type { float, float }
%struct.SkRSXform = type { float, float, float, float }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint3 = type { float, float, float }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkSize = type { float, float }
%class.SkString = type { %class.sk_sp.13 }
%class.sk_sp.13 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%struct.SkISize = type { i32, i32 }
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }
%class.SkPaint = type <{ %class.sk_sp.14, %class.sk_sp.15, %class.sk_sp.16, %class.sk_sp.17, %class.sk_sp.18, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.14 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.15 = type { %class.SkShader* }
%class.SkShader = type opaque
%class.sk_sp.16 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.17 = type { %class.SkColorFilter* }
%class.SkColorFilter = type opaque
%class.sk_sp.18 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%struct.SkIRect = type { i32, i32, i32, i32 }

$_Z16get_scale_factorIL12MinMaxOrBoth2EEbN8SkMatrix8TypeMaskEPKfPf = comdat any

@_ZN8SkMatrix12gMapPtsProcsE = hidden local_unnamed_addr constant [16 x void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)*] [void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix12Identity_ptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix9Trans_ptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix9Scale_ptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix9Scale_ptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix11Affine_vptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix11Affine_vptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix11Affine_vptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix11Affine_vptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix9Persp_ptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix9Persp_ptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix9Persp_ptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix9Persp_ptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix9Persp_ptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix9Persp_ptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix9Persp_ptsERKS_P7SkPointPKS2_i, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)* @_ZN8SkMatrix9Persp_ptsERKS_P7SkPointPKS2_i], align 16
@_ZN8SkMatrix11gMapXYProcsE = hidden local_unnamed_addr constant [16 x void (%class.SkMatrix*, float, float, %struct.SkPoint*)*] [void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix11Identity_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix8Trans_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix8Scale_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix13ScaleTrans_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix6Rot_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix11RotTrans_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix6Rot_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix11RotTrans_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix8Persp_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix8Persp_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix8Persp_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix8Persp_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix8Persp_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix8Persp_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix8Persp_xyERKS_ffP7SkPoint, void (%class.SkMatrix*, float, float, %struct.SkPoint*)* @_ZN8SkMatrix8Persp_xyERKS_ffP7SkPoint], align 16
@.str = private unnamed_addr constant [45 x i8] c"../../third_party/skia/src/core/SkMatrix.cpp\00", align 1
@.str.1 = private unnamed_addr constant [51 x i8] c"--- SkMatrix::setPolyToPoly count out of range %d\0A\00", align 1
@_ZZN8SkMatrix13setPolyToPolyEPK7SkPointS2_iE13gPolyMapProcs = internal unnamed_addr constant [3 x i1 (%struct.SkPoint*, %class.SkMatrix*)*] [i1 (%struct.SkPoint*, %class.SkMatrix*)* @_ZN8SkMatrix9Poly2ProcEPK7SkPointPS_, i1 (%struct.SkPoint*, %class.SkMatrix*)* @_ZN8SkMatrix9Poly3ProcEPK7SkPointPS_, i1 (%struct.SkPoint*, %class.SkMatrix*)* @_ZN8SkMatrix9Poly4ProcEPK7SkPointPS_], align 16
@_ZZN8SkMatrix1IEvE8identity = internal global %class.SkMatrix { [9 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00], i32 16 }, align 4
@_ZZN8SkMatrix13InvalidMatrixEvE7invalid = internal global %class.SkMatrix { [9 x float] [float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000], i32 15 }, align 4
@.str.2 = private unnamed_addr constant [58 x i8] c"[%8.4f %8.4f %8.4f][%8.4f %8.4f %8.4f][%8.4f %8.4f %8.4f]\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN8SkMatrix22doNormalizePerspectiveEv(%class.SkMatrix* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %3 = load float, float* %2, align 4
  %4 = fcmp oeq float %3, 0.000000e+00
  br i1 %4, label %5, label %38

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %7 = load float, float* %6, align 4
  %8 = fcmp oeq float %7, 0.000000e+00
  br i1 %8, label %9, label %38

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %11 = load float, float* %10, align 4
  %12 = fcmp une float %11, 0.000000e+00
  %13 = fcmp une float %11, 1.000000e+00
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %36

15:                                               ; preds = %9
  %16 = fpext float %11 to double
  %17 = fdiv double 1.000000e+00, %16
  %18 = bitcast %class.SkMatrix* %0 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 4
  %20 = fpext <4 x float> %19 to <4 x double>
  %21 = insertelement <4 x double> undef, double %17, i32 0
  %22 = shufflevector <4 x double> %21, <4 x double> undef, <4 x i32> zeroinitializer
  %23 = fmul <4 x double> %22, %20
  %24 = fptrunc <4 x double> %23 to <4 x float>
  %25 = bitcast %class.SkMatrix* %0 to <4 x float>*
  store <4 x float> %24, <4 x float>* %25, align 4
  %26 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %27 = load float, float* %26, align 4
  %28 = fpext float %27 to double
  %29 = fmul double %17, %28
  %30 = fptrunc double %29 to float
  store float %30, float* %26, align 4
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %32 = load float, float* %31, align 4
  %33 = fpext float %32 to double
  %34 = fmul double %17, %33
  %35 = fptrunc double %34 to float
  store float %35, float* %31, align 4
  store float 1.000000e+00, float* %10, align 4
  br label %36

36:                                               ; preds = %15, %9
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 128, i32* %37, align 4
  br label %38

38:                                               ; preds = %36, %5, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* returned) local_unnamed_addr #2 align 2 {
  %2 = bitcast %class.SkMatrix* %0 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %2, align 4
  %3 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %4 = bitcast float* %3 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %4, align 4
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %5, align 4
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 16, i32* %6, align 4
  ret %class.SkMatrix* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix4set9EPKf(%class.SkMatrix* returned, float* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = bitcast %class.SkMatrix* %0 to i8*
  %4 = bitcast float* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 36, i1 false)
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 128, i32* %5, align 4
  ret %class.SkMatrix* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setAffineEPKf(%class.SkMatrix* returned, float* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast float* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast %class.SkMatrix* %0 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds float, float* %1, i64 2
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %10 = bitcast float* %9 to i32*
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds float, float* %1, i64 4
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %15 = bitcast float* %14 to i32*
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds float, float* %1, i64 1
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %20 = bitcast float* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = getelementptr inbounds float, float* %1, i64 3
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %25 = bitcast float* %24 to i32*
  store i32 %23, i32* %25, align 4
  %26 = getelementptr inbounds float, float* %1, i64 5
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %30 = bitcast float* %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %31, align 4
  %32 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %32, align 4
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %33, align 4
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 128, i32* %34, align 4
  ret %class.SkMatrix* %0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %3 = load float, float* %2, align 4
  %4 = fcmp une float %3, 0.000000e+00
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %7 = load float, float* %6, align 4
  %8 = fcmp une float %7, 0.000000e+00
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %11 = load float, float* %10, align 4
  %12 = fcmp une float %11, 1.000000e+00
  br i1 %12, label %14, label %13

13:                                               ; preds = %9
  br label %14

14:                                               ; preds = %1, %5, %9, %13
  %15 = phi i8 [ -64, %13 ], [ 15, %9 ], [ 15, %5 ], [ 15, %1 ]
  ret i8 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %3 = load float, float* %2, align 4
  %4 = fcmp une float %3, 0.000000e+00
  br i1 %4, label %79, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %7 = load float, float* %6, align 4
  %8 = fcmp une float %7, 0.000000e+00
  br i1 %8, label %79, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %11 = load float, float* %10, align 4
  %12 = fcmp une float %11, 1.000000e+00
  br i1 %12, label %79, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %15 = load float, float* %14, align 4
  %16 = fcmp une float %15, 0.000000e+00
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %19 = load float, float* %18, align 4
  %20 = fcmp une float %19, 0.000000e+00
  br i1 %20, label %21, label %22

21:                                               ; preds = %17, %13
  br label %22

22:                                               ; preds = %21, %17
  %23 = phi i32 [ 1, %21 ], [ 0, %17 ]
  %24 = bitcast %class.SkMatrix* %0 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  %27 = and i32 %25, 2147483647
  %28 = sub nsw i32 0, %27
  %29 = select i1 %26, i32 %28, i32 %25
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %31 = bitcast float* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  %34 = and i32 %32, 2147483647
  %35 = sub nsw i32 0, %34
  %36 = select i1 %33, i32 %35, i32 %32
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %39, 0
  %41 = and i32 %39, 2147483647
  %42 = sub nsw i32 0, %41
  %43 = select i1 %40, i32 %42, i32 %39
  %44 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %45 = bitcast float* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = icmp slt i32 %46, 0
  %48 = and i32 %46, 2147483647
  %49 = sub nsw i32 0, %48
  %50 = select i1 %47, i32 %49, i32 %46
  %51 = or i32 %43, %36
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %64, label %53

53:                                               ; preds = %22
  %54 = icmp ne i32 %36, 0
  %55 = icmp ne i32 %43, 0
  %56 = or i32 %50, %29
  %57 = icmp eq i32 %56, 0
  %58 = and i1 %54, %55
  %59 = and i1 %58, %57
  %60 = zext i1 %59 to i32
  %61 = shl nuw nsw i32 %60, 4
  %62 = or i32 %23, %61
  %63 = or i32 %62, 6
  br label %76

64:                                               ; preds = %22
  %65 = icmp ne i32 %29, 1065353216
  %66 = icmp ne i32 %50, 1065353216
  %67 = or i1 %65, %66
  %68 = or i32 %23, 2
  %69 = select i1 %67, i32 %68, i32 %23
  %70 = icmp ne i32 %29, 0
  %71 = icmp ne i32 %50, 0
  %72 = and i1 %70, %71
  %73 = zext i1 %72 to i32
  %74 = shl nuw nsw i32 %73, 4
  %75 = or i32 %74, %69
  br label %76

76:                                               ; preds = %64, %53
  %77 = phi i32 [ %63, %53 ], [ %75, %64 ]
  %78 = trunc i32 %77 to i8
  br label %79

79:                                               ; preds = %1, %5, %9, %76
  %80 = phi i8 [ %78, %76 ], [ 15, %9 ], [ 15, %5 ], [ 15, %1 ]
  ret i8 %80
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZeqRK8SkMatrixS1_(%class.SkMatrix* nocapture readonly dereferenceable(40), %class.SkMatrix* nocapture readonly dereferenceable(40)) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %4 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 0
  %5 = load float, float* %3, align 4
  %6 = load float, float* %4, align 4
  %7 = fcmp oeq float %5, %6
  br i1 %7, label %8, label %56

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  %12 = load float, float* %11, align 4
  %13 = fcmp oeq float %10, %12
  br i1 %13, label %14, label %56

14:                                               ; preds = %8
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fcmp oeq float %16, %18
  br i1 %19, label %20, label %56

20:                                               ; preds = %14
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  %24 = load float, float* %23, align 4
  %25 = fcmp oeq float %22, %24
  br i1 %25, label %26, label %56

26:                                               ; preds = %20
  %27 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %28 = load float, float* %27, align 4
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  %30 = load float, float* %29, align 4
  %31 = fcmp oeq float %28, %30
  br i1 %31, label %32, label %56

32:                                               ; preds = %26
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %34 = load float, float* %33, align 4
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  %36 = load float, float* %35, align 4
  %37 = fcmp oeq float %34, %36
  br i1 %37, label %38, label %56

38:                                               ; preds = %32
  %39 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %40 = load float, float* %39, align 4
  %41 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 6
  %42 = load float, float* %41, align 4
  %43 = fcmp oeq float %40, %42
  br i1 %43, label %44, label %56

44:                                               ; preds = %38
  %45 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %46 = load float, float* %45, align 4
  %47 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 7
  %48 = load float, float* %47, align 4
  %49 = fcmp oeq float %46, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %52 = load float, float* %51, align 4
  %53 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 8
  %54 = load float, float* %53, align 4
  %55 = fcmp oeq float %52, %54
  br label %56

56:                                               ; preds = %50, %44, %38, %32, %26, %20, %14, %8, %2
  %57 = phi i1 [ false, %44 ], [ false, %38 ], [ false, %32 ], [ false, %26 ], [ false, %20 ], [ false, %14 ], [ false, %8 ], [ false, %2 ], [ %55, %50 ]
  ret i1 %57
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkMatrix12isSimilarityEf(%class.SkMatrix* nocapture, float) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = trunc i32 %4 to i8
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %9 = zext i8 %8 to i32
  store i32 %9, i32* %3, align 4
  br label %10

10:                                               ; preds = %2, %7
  %11 = phi i32 [ %9, %7 ], [ %4, %2 ]
  %12 = and i32 %11, 14
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %58, label %14

14:                                               ; preds = %10
  %15 = and i32 %11, 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %58

17:                                               ; preds = %14
  %18 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %21 = load float, float* %20, align 4
  %22 = and i32 %11, 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %32

24:                                               ; preds = %17
  %25 = tail call float @llvm.fabs.f32(float %19) #14
  %26 = fcmp ugt float %25, 0x3F30000000000000
  br i1 %26, label %27, label %58

27:                                               ; preds = %24
  %28 = tail call float @llvm.fabs.f32(float %21)
  %29 = fsub float %25, %28
  %30 = tail call float @llvm.fabs.f32(float %29) #14
  %31 = fcmp ole float %30, 0x3F30000000000000
  br label %58

32:                                               ; preds = %17
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %34 = load float, float* %33, align 4
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %36 = load float, float* %35, align 4
  %37 = fmul float %19, %21
  %38 = fmul float %34, %36
  %39 = fsub float %37, %38
  %40 = tail call float @llvm.fabs.f32(float %39) #14
  %41 = fcmp ugt float %40, 0x3E70000000000000
  br i1 %41, label %42, label %58

42:                                               ; preds = %32
  %43 = fsub float %19, %21
  %44 = tail call float @llvm.fabs.f32(float %43) #14
  %45 = fcmp ugt float %44, %1
  br i1 %45, label %50, label %46

46:                                               ; preds = %42
  %47 = fadd float %34, %36
  %48 = tail call float @llvm.fabs.f32(float %47) #14
  %49 = fcmp ugt float %48, %1
  br i1 %49, label %50, label %58

50:                                               ; preds = %46, %42
  %51 = fadd float %19, %21
  %52 = tail call float @llvm.fabs.f32(float %51) #14
  %53 = fcmp ugt float %52, %1
  br i1 %53, label %58, label %54

54:                                               ; preds = %50
  %55 = fsub float %34, %36
  %56 = tail call float @llvm.fabs.f32(float %55) #14
  %57 = fcmp ole float %56, %1
  br label %58

58:                                               ; preds = %24, %46, %50, %32, %27, %54, %14, %10
  %59 = phi i1 [ true, %10 ], [ false, %14 ], [ false, %24 ], [ %31, %27 ], [ false, %32 ], [ true, %46 ], [ false, %50 ], [ %57, %54 ]
  ret i1 %59
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkMatrix20preservesRightAnglesEf(%class.SkMatrix* nocapture, float) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = trunc i32 %4 to i8
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %9 = zext i8 %8 to i32
  store i32 %9, i32* %3, align 4
  br label %10

10:                                               ; preds = %2, %7
  %11 = phi i32 [ %9, %7 ], [ %4, %2 ]
  %12 = and i32 %11, 14
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %38, label %14

14:                                               ; preds = %10
  %15 = and i32 %11, 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %38

17:                                               ; preds = %14
  %18 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %25 = load float, float* %24, align 4
  %26 = fmul float %19, %21
  %27 = fmul float %23, %25
  %28 = fsub float %26, %27
  %29 = tail call float @llvm.fabs.f32(float %28) #14
  %30 = fcmp ugt float %29, 0x3E70000000000000
  br i1 %30, label %31, label %38

31:                                               ; preds = %17
  %32 = fmul float %19, %23
  %33 = fmul float %21, %25
  %34 = fadd float %32, %33
  %35 = fmul float %1, %1
  %36 = tail call float @llvm.fabs.f32(float %34) #14
  %37 = fcmp ole float %36, %35
  br label %38

38:                                               ; preds = %17, %31, %14, %10
  %39 = phi i1 [ true, %10 ], [ false, %14 ], [ %37, %31 ], [ false, %17 ]
  ret i1 %39
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix* returned, float, float) local_unnamed_addr #2 align 2 {
  %4 = fcmp une float %1, 0.000000e+00
  %5 = fcmp une float %2, 0.000000e+00
  %6 = or i1 %4, %5
  %7 = select i1 %6, i32 17, i32 16
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  store float 1.000000e+00, float* %8, align 4
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  store float 0.000000e+00, float* %9, align 4
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  store float %1, float* %10, align 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  store float 0.000000e+00, float* %11, align 4
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  store float 1.000000e+00, float* %12, align 4
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  store float %2, float* %13, align 4
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %14, align 4
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %15, align 4
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %16, align 4
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 %7, i32* %17, align 4
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12preTranslateEff(%class.SkMatrix*, float, float) local_unnamed_addr #2 align 2 {
  %4 = alloca %class.SkMatrix, align 4
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = trunc i32 %6 to i8
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %11 = zext i8 %10 to i32
  store i32 %11, i32* %5, align 4
  br label %12

12:                                               ; preds = %3, %9
  %13 = phi i32 [ %11, %9 ], [ %6, %3 ]
  %14 = and i32 %13, 14
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fadd float %18, %1
  store float %19, float* %17, align 4
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %21 = load float, float* %20, align 4
  %22 = fadd float %21, %2
  store float %22, float* %20, align 4
  br label %68

23:                                               ; preds = %12
  %24 = and i32 %13, 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %47, label %26

26:                                               ; preds = %23
  %27 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %27) #14
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 0
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 1
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 2
  %32 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 3
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 4
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 5
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 6
  %36 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 7
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 8
  %38 = fcmp une float %1, 0.000000e+00
  %39 = fcmp une float %2, 0.000000e+00
  %40 = or i1 %38, %39
  %41 = select i1 %40, i32 17, i32 16
  store float 1.000000e+00, float* %29, align 4
  store float 0.000000e+00, float* %30, align 4
  store float %1, float* %31, align 4
  store float 0.000000e+00, float* %32, align 4
  store float 1.000000e+00, float* %33, align 4
  store float %2, float* %34, align 4
  store float 0.000000e+00, float* %35, align 4
  store float 0.000000e+00, float* %36, align 4
  store float 1.000000e+00, float* %37, align 4
  store i32 %41, i32* %28, align 4
  %42 = and i32 %41, 1
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %26
  %45 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* dereferenceable(40) %0, %class.SkMatrix* nonnull dereferenceable(40) %4) #14
  br label %46

46:                                               ; preds = %26, %44
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %27) #14
  br label %77

47:                                               ; preds = %23
  %48 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %51 = load float, float* %50, align 4
  %52 = fmul float %49, %1
  %53 = fmul float %51, %2
  %54 = fadd float %52, %53
  %55 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %56 = load float, float* %55, align 4
  %57 = fadd float %56, %54
  store float %57, float* %55, align 4
  %58 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %59 = load float, float* %58, align 4
  %60 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %61 = load float, float* %60, align 4
  %62 = fmul float %59, %1
  %63 = fmul float %61, %2
  %64 = fadd float %62, %63
  %65 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %66 = load float, float* %65, align 4
  %67 = fadd float %66, %64
  store float %67, float* %65, align 4
  br label %68

68:                                               ; preds = %47, %16
  %69 = phi float [ %67, %47 ], [ %22, %16 ]
  %70 = phi float [ %57, %47 ], [ %19, %16 ]
  %71 = fcmp une float %70, 0.000000e+00
  %72 = fcmp une float %69, 0.000000e+00
  %73 = or i1 %71, %72
  %74 = and i32 %13, -2
  %75 = or i32 %13, 1
  %76 = select i1 %73, i32 %75, i32 %74
  store i32 %76, i32* %5, align 4
  br label %77

77:                                               ; preds = %68, %46
  ret %class.SkMatrix* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9preConcatERKS_(%class.SkMatrix* returned, %class.SkMatrix* nocapture dereferenceable(40)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = trunc i32 %4 to i8
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %1) #14
  %9 = zext i8 %8 to i32
  store i32 %9, i32* %3, align 4
  br label %10

10:                                               ; preds = %2, %7
  %11 = phi i32 [ %9, %7 ], [ %4, %2 ]
  %12 = and i32 %11, 15
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* dereferenceable(40) %0, %class.SkMatrix* dereferenceable(40) %1)
  br label %16

16:                                               ; preds = %14, %10
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix13postTranslateEff(%class.SkMatrix* returned, float, float) local_unnamed_addr #2 align 2 {
  %4 = alloca %class.SkMatrix, align 4
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 192
  %8 = icmp eq i32 %7, 128
  br i1 %8, label %9, label %24

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %11 = load float, float* %10, align 4
  %12 = fcmp une float %11, 0.000000e+00
  br i1 %12, label %22, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %15 = load float, float* %14, align 4
  %16 = fcmp une float %15, 0.000000e+00
  br i1 %16, label %22, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %19 = load float, float* %18, align 4
  %20 = fcmp une float %19, 1.000000e+00
  br i1 %20, label %22, label %21

21:                                               ; preds = %17
  br label %22

22:                                               ; preds = %21, %17, %13, %9
  %23 = phi i32 [ 192, %21 ], [ 15, %17 ], [ 15, %13 ], [ 15, %9 ]
  store i32 %23, i32* %5, align 4
  br label %24

24:                                               ; preds = %3, %22
  %25 = phi i32 [ %23, %22 ], [ %6, %3 ]
  %26 = and i32 %25, 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %49, label %28

28:                                               ; preds = %24
  %29 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %29) #14
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 0
  %32 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 1
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 2
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 3
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 4
  %36 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 5
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 6
  %38 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 7
  %39 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 8
  %40 = fcmp une float %1, 0.000000e+00
  %41 = fcmp une float %2, 0.000000e+00
  %42 = or i1 %40, %41
  %43 = select i1 %42, i32 17, i32 16
  store float 1.000000e+00, float* %31, align 4
  store float 0.000000e+00, float* %32, align 4
  store float %1, float* %33, align 4
  store float 0.000000e+00, float* %34, align 4
  store float 1.000000e+00, float* %35, align 4
  store float %2, float* %36, align 4
  store float 0.000000e+00, float* %37, align 4
  store float 0.000000e+00, float* %38, align 4
  store float 1.000000e+00, float* %39, align 4
  store i32 %43, i32* %30, align 4
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %28
  %47 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* nonnull dereferenceable(40) %4, %class.SkMatrix* dereferenceable(40) %0) #14
  br label %48

48:                                               ; preds = %28, %46
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %29) #14
  br label %62

49:                                               ; preds = %24
  %50 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %51 = load float, float* %50, align 4
  %52 = fadd float %51, %1
  store float %52, float* %50, align 4
  %53 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %54 = load float, float* %53, align 4
  %55 = fadd float %54, %2
  store float %55, float* %53, align 4
  %56 = fcmp une float %52, 0.000000e+00
  %57 = fcmp une float %55, 0.000000e+00
  %58 = or i1 %56, %57
  %59 = and i32 %25, -2
  %60 = or i32 %25, 1
  %61 = select i1 %58, i32 %60, i32 %59
  store i32 %61, i32* %5, align 4
  br label %62

62:                                               ; preds = %49, %48
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix* returned, %class.SkMatrix* nocapture dereferenceable(40)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = trunc i32 %4 to i8
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %1) #14
  %9 = zext i8 %8 to i32
  store i32 %9, i32* %3, align 4
  br label %10

10:                                               ; preds = %2, %7
  %11 = phi i32 [ %9, %7 ], [ %4, %2 ]
  %12 = and i32 %11, 15
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* dereferenceable(40) %1, %class.SkMatrix* dereferenceable(40) %0)
  br label %16

16:                                               ; preds = %14, %10
  ret %class.SkMatrix* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEffff(%class.SkMatrix* returned, float, float, float, float) local_unnamed_addr #6 align 2 {
  %6 = fcmp oeq float %1, 1.000000e+00
  %7 = fcmp oeq float %2, 1.000000e+00
  %8 = and i1 %6, %7
  br i1 %8, label %23, label %9

9:                                                ; preds = %5
  %10 = fmul float %1, %3
  %11 = fsub float %3, %10
  %12 = fmul float %2, %4
  %13 = fsub float %4, %12
  %14 = fcmp une float %1, 1.000000e+00
  %15 = fcmp une float %2, 1.000000e+00
  %16 = or i1 %14, %15
  %17 = fcmp une float %11, 0.000000e+00
  %18 = fcmp une float %13, 0.000000e+00
  %19 = or i1 %17, %18
  %20 = zext i1 %19 to i32
  %21 = select i1 %16, i32 18, i32 16
  %22 = or i32 %21, %20
  br label %23

23:                                               ; preds = %5, %9
  %24 = phi float [ %1, %9 ], [ 1.000000e+00, %5 ]
  %25 = phi float [ %11, %9 ], [ 0.000000e+00, %5 ]
  %26 = phi float [ %2, %9 ], [ 1.000000e+00, %5 ]
  %27 = phi float [ %13, %9 ], [ 0.000000e+00, %5 ]
  %28 = phi i32 [ %22, %9 ], [ 16, %5 ]
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  store float %24, float* %29, align 4
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  store float 0.000000e+00, float* %30, align 4
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  store float %25, float* %31, align 4
  %32 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  store float 0.000000e+00, float* %32, align 4
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  store float %26, float* %33, align 4
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  store float %27, float* %34, align 4
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %35, align 4
  %36 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %36, align 4
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %37, align 4
  %38 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 %28, i32* %38, align 4
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix* returned, float, float) local_unnamed_addr #2 align 2 {
  %4 = fcmp oeq float %1, 1.000000e+00
  %5 = fcmp oeq float %2, 1.000000e+00
  %6 = and i1 %4, %5
  %7 = select i1 %6, i32 16, i32 18
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  store float %1, float* %8, align 4
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  store float 0.000000e+00, float* %9, align 4
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  store float 0.000000e+00, float* %10, align 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  store float 0.000000e+00, float* %11, align 4
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  store float %2, float* %12, align 4
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %14 = bitcast float* %13 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %14, align 4
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 %7, i32* %15, align 4
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8preScaleEffff(%class.SkMatrix*, float, float, float, float) local_unnamed_addr #2 align 2 {
  %6 = alloca %class.SkMatrix, align 4
  %7 = fcmp oeq float %1, 1.000000e+00
  %8 = fcmp oeq float %2, 1.000000e+00
  %9 = and i1 %7, %8
  br i1 %9, label %40, label %10

10:                                               ; preds = %5
  %11 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %11) #14
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 1
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 0
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 1
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 2
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 3
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %18 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 5
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 6
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 7
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  %22 = fmul float %1, %3
  %23 = fsub float %3, %22
  %24 = fmul float %2, %4
  %25 = fsub float %4, %24
  %26 = fcmp une float %1, 1.000000e+00
  %27 = fcmp une float %2, 1.000000e+00
  %28 = or i1 %26, %27
  %29 = fcmp une float %23, 0.000000e+00
  %30 = fcmp une float %25, 0.000000e+00
  %31 = or i1 %29, %30
  %32 = zext i1 %31 to i32
  %33 = select i1 %28, i32 18, i32 16
  %34 = or i32 %33, %32
  store float %1, float* %13, align 4
  store float 0.000000e+00, float* %14, align 4
  store float %23, float* %15, align 4
  store float 0.000000e+00, float* %16, align 4
  store float %2, float* %17, align 4
  store float %25, float* %18, align 4
  store float 0.000000e+00, float* %19, align 4
  store float 0.000000e+00, float* %20, align 4
  store float 1.000000e+00, float* %21, align 4
  store i32 %34, i32* %12, align 4
  %35 = and i32 %34, 3
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %10
  %38 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* dereferenceable(40) %0, %class.SkMatrix* nonnull dereferenceable(40) %6) #14
  br label %39

39:                                               ; preds = %10, %37
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %11) #14
  br label %40

40:                                               ; preds = %5, %39
  ret %class.SkMatrix* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8preScaleEff(%class.SkMatrix* returned, float, float) local_unnamed_addr #0 align 2 {
  %4 = fcmp oeq float %1, 1.000000e+00
  %5 = fcmp oeq float %2, 1.000000e+00
  %6 = and i1 %4, %5
  br i1 %6, label %39, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %9 = load float, float* %8, align 4
  %10 = fmul float %9, %1
  store float %10, float* %8, align 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, %1
  store float %13, float* %11, align 4
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %15 = load float, float* %14, align 4
  %16 = fmul float %15, %1
  store float %16, float* %14, align 4
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %18 = load float, float* %17, align 4
  %19 = fmul float %18, %2
  store float %19, float* %17, align 4
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %21 = load float, float* %20, align 4
  %22 = fmul float %21, %2
  store float %22, float* %20, align 4
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %24 = load float, float* %23, align 4
  %25 = fmul float %24, %2
  store float %25, float* %23, align 4
  %26 = fcmp oeq float %10, 1.000000e+00
  %27 = fcmp oeq float %22, 1.000000e+00
  %28 = and i1 %26, %27
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = and i32 %30, 12
  %32 = icmp eq i32 %31, 0
  %33 = and i1 %28, %32
  br i1 %33, label %34, label %36

34:                                               ; preds = %7
  %35 = and i32 %30, -3
  store i32 %35, i32* %29, align 4
  br label %39

36:                                               ; preds = %7
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %38 = or i32 %30, 2
  store i32 %38, i32* %37, align 4
  br label %39

39:                                               ; preds = %34, %36, %3
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9postScaleEffff(%class.SkMatrix*, float, float, float, float) local_unnamed_addr #2 align 2 {
  %6 = alloca %class.SkMatrix, align 4
  %7 = fcmp oeq float %1, 1.000000e+00
  %8 = fcmp oeq float %2, 1.000000e+00
  %9 = and i1 %7, %8
  br i1 %9, label %40, label %10

10:                                               ; preds = %5
  %11 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %11) #14
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 1
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 0
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 1
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 2
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 3
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %18 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 5
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 6
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 7
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  %22 = fmul float %1, %3
  %23 = fsub float %3, %22
  %24 = fmul float %2, %4
  %25 = fsub float %4, %24
  %26 = fcmp une float %1, 1.000000e+00
  %27 = fcmp une float %2, 1.000000e+00
  %28 = or i1 %26, %27
  %29 = fcmp une float %23, 0.000000e+00
  %30 = fcmp une float %25, 0.000000e+00
  %31 = or i1 %29, %30
  %32 = zext i1 %31 to i32
  %33 = select i1 %28, i32 18, i32 16
  %34 = or i32 %33, %32
  store float %1, float* %13, align 4
  store float 0.000000e+00, float* %14, align 4
  store float %23, float* %15, align 4
  store float 0.000000e+00, float* %16, align 4
  store float %2, float* %17, align 4
  store float %25, float* %18, align 4
  store float 0.000000e+00, float* %19, align 4
  store float 0.000000e+00, float* %20, align 4
  store float 1.000000e+00, float* %21, align 4
  store i32 %34, i32* %12, align 4
  %35 = and i32 %34, 3
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %10
  %38 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* nonnull dereferenceable(40) %6, %class.SkMatrix* dereferenceable(40) %0) #14
  br label %39

39:                                               ; preds = %10, %37
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %11) #14
  br label %40

40:                                               ; preds = %5, %39
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9postScaleEff(%class.SkMatrix*, float, float) local_unnamed_addr #2 align 2 {
  %4 = alloca %class.SkMatrix, align 4
  %5 = fcmp oeq float %1, 1.000000e+00
  %6 = fcmp oeq float %2, 1.000000e+00
  %7 = and i1 %5, %6
  br i1 %7, label %19, label %8

8:                                                ; preds = %3
  %9 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %9) #14
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 0
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 1
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 2
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 3
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 4
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 5
  store float %1, float* %11, align 4
  store float 0.000000e+00, float* %12, align 4
  store float 0.000000e+00, float* %13, align 4
  store float 0.000000e+00, float* %14, align 4
  store float %2, float* %15, align 4
  %17 = bitcast float* %16 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %17, align 4
  store i32 18, i32* %10, align 4
  %18 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* nonnull dereferenceable(40) %4, %class.SkMatrix* dereferenceable(40) %0) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %9) #14
  br label %19

19:                                               ; preds = %3, %8
  ret %class.SkMatrix* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN8SkMatrix8postIDivEii(%class.SkMatrix* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i32 %1, 0
  %5 = icmp eq i32 %2, 0
  %6 = or i1 %4, %5
  br i1 %6, label %25, label %7

7:                                                ; preds = %3
  %8 = insertelement <2 x i32> undef, i32 %1, i32 0
  %9 = insertelement <2 x i32> %8, i32 %2, i32 1
  %10 = sitofp <2 x i32> %9 to <2 x float>
  %11 = fdiv <2 x float> <float 1.000000e+00, float 1.000000e+00>, %10
  %12 = shufflevector <2 x float> %11, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %14 = load float, float* %13, align 4
  %15 = extractelement <2 x float> %11, i32 1
  %16 = fmul float %15, %14
  store float %16, float* %13, align 4
  %17 = bitcast %class.SkMatrix* %0 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4
  %19 = fmul <4 x float> %12, %18
  %20 = bitcast %class.SkMatrix* %0 to <4 x float>*
  store <4 x float> %19, <4 x float>* %20, align 4
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %22 = load float, float* %21, align 4
  %23 = fmul float %15, %22
  store float %23, float* %21, align 4
  %24 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 128, i32* %24, align 4
  br label %25

25:                                               ; preds = %3, %7
  %26 = phi i1 [ true, %7 ], [ false, %3 ]
  ret i1 %26
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setSinCosEffff(%class.SkMatrix* returned, float, float, float, float) local_unnamed_addr #6 align 2 {
  %6 = fsub float 1.000000e+00, %2
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  store float %2, float* %7, align 4
  %8 = fsub float -0.000000e+00, %1
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  store float %8, float* %9, align 4
  %10 = fmul float %1, %4
  %11 = fmul float %6, %3
  %12 = fadd float %11, %10
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  store float %12, float* %13, align 4
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  store float %1, float* %14, align 4
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  store float %2, float* %15, align 4
  %16 = fmul float %8, %3
  %17 = fmul float %6, %4
  %18 = fadd float %16, %17
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  store float %18, float* %19, align 4
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %20, align 4
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %21, align 4
  %22 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %22, align 4
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 192, i32* %23, align 4
  ret %class.SkMatrix* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10setRSXformERK9SkRSXform(%class.SkMatrix* returned, %struct.SkRSXform* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %struct.SkRSXform* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast %class.SkMatrix* %0 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %struct.SkRSXform, %struct.SkRSXform* %1, i64 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = fsub float -0.000000e+00, %7
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  store float %8, float* %9, align 4
  %10 = getelementptr inbounds %struct.SkRSXform, %struct.SkRSXform* %1, i64 0, i32 2
  %11 = bitcast float* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %14 = bitcast float* %13 to i32*
  store i32 %12, i32* %14, align 4
  %15 = bitcast float* %6 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %18 = bitcast float* %17 to i32*
  store i32 %16, i32* %18, align 4
  %19 = load i32, i32* %3, align 4
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %21 = bitcast float* %20 to i32*
  store i32 %19, i32* %21, align 4
  %22 = getelementptr inbounds %struct.SkRSXform, %struct.SkRSXform* %1, i64 0, i32 3
  %23 = bitcast float* %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %26 = bitcast float* %25 to i32*
  store i32 %24, i32* %26, align 4
  %27 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %27, align 4
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %28, align 4
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %29, align 4
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 192, i32* %30, align 4
  ret %class.SkMatrix* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setSinCosEff(%class.SkMatrix* returned, float, float) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  store float %2, float* %4, align 4
  %5 = fsub float -0.000000e+00, %1
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  store float %5, float* %6, align 4
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  store float 0.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  store float %1, float* %8, align 4
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  store float %2, float* %9, align 4
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %11 = bitcast float* %10 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %11, align 4
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 192, i32* %12, align 4
  ret %class.SkMatrix* %0
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setRotateEfff(%class.SkMatrix* returned, float, float, float) local_unnamed_addr #4 align 2 {
  %5 = fmul float %1, 0x3F91DF46A0000000
  %6 = tail call float @sinf(float %5) #14
  %7 = tail call float @llvm.fabs.f32(float %6) #14
  %8 = fcmp ole float %7, 0x3F30000000000000
  %9 = select i1 %8, float 0.000000e+00, float %6
  %10 = tail call float @cosf(float %5) #14
  %11 = tail call float @llvm.fabs.f32(float %10) #14
  %12 = fcmp ole float %11, 0x3F30000000000000
  %13 = select i1 %12, float 0.000000e+00, float %10
  %14 = fsub float 1.000000e+00, %13
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  store float %13, float* %15, align 4
  %16 = fsub float -0.000000e+00, %9
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  store float %16, float* %17, align 4
  %18 = fmul float %9, %3
  %19 = fmul float %14, %2
  %20 = fadd float %18, %19
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  store float %20, float* %21, align 4
  %22 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  store float %9, float* %22, align 4
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  store float %13, float* %23, align 4
  %24 = fmul float %16, %2
  %25 = fmul float %14, %3
  %26 = fadd float %24, %25
  %27 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  store float %26, float* %27, align 4
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %28, align 4
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %29, align 4
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %30, align 4
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 192, i32* %31, align 4
  ret %class.SkMatrix* %0
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setRotateEf(%class.SkMatrix* returned, float) local_unnamed_addr #4 align 2 {
  %3 = fmul float %1, 0x3F91DF46A0000000
  %4 = tail call float @sinf(float %3) #14
  %5 = tail call float @llvm.fabs.f32(float %4) #14
  %6 = fcmp ole float %5, 0x3F30000000000000
  %7 = select i1 %6, float 0.000000e+00, float %4
  %8 = tail call float @cosf(float %3) #14
  %9 = tail call float @llvm.fabs.f32(float %8) #14
  %10 = fcmp ole float %9, 0x3F30000000000000
  %11 = select i1 %10, float 0.000000e+00, float %8
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  store float %11, float* %12, align 4
  %13 = fsub float -0.000000e+00, %7
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  store float %13, float* %14, align 4
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  store float 0.000000e+00, float* %15, align 4
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  store float %7, float* %16, align 4
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  store float %11, float* %17, align 4
  %18 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %19, align 4
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 192, i32* %20, align 4
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9preRotateEfff(%class.SkMatrix* returned, float, float, float) local_unnamed_addr #2 align 2 {
  %5 = alloca %class.SkMatrix, align 4
  %6 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #14
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 0
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 1
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 2
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 3
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 4
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 5
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 6
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 7
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 8
  %17 = fmul float %1, 0x3F91DF46A0000000
  %18 = tail call float @sinf(float %17) #14
  %19 = tail call float @llvm.fabs.f32(float %18) #14
  %20 = fcmp ole float %19, 0x3F30000000000000
  %21 = select i1 %20, float 0.000000e+00, float %18
  %22 = tail call float @cosf(float %17) #14
  %23 = tail call float @llvm.fabs.f32(float %22) #14
  %24 = fcmp ole float %23, 0x3F30000000000000
  %25 = select i1 %24, float 0.000000e+00, float %22
  %26 = fsub float 1.000000e+00, %25
  store float %25, float* %8, align 4
  %27 = fsub float -0.000000e+00, %21
  store float %27, float* %9, align 4
  %28 = fmul float %21, %3
  %29 = fmul float %26, %2
  %30 = fadd float %28, %29
  store float %30, float* %10, align 4
  store float %21, float* %11, align 4
  store float %25, float* %12, align 4
  %31 = fmul float %27, %2
  %32 = fmul float %26, %3
  %33 = fadd float %31, %32
  store float %33, float* %13, align 4
  store float 0.000000e+00, float* %15, align 4
  store float 0.000000e+00, float* %14, align 4
  store float 1.000000e+00, float* %16, align 4
  store i32 192, i32* %7, align 4
  %34 = fcmp une float %30, 0.000000e+00
  %35 = fcmp une float %33, 0.000000e+00
  %36 = or i1 %34, %35
  %37 = zext i1 %36 to i32
  %38 = bitcast float %25 to i32
  %39 = icmp slt i32 %38, 0
  %40 = and i32 %38, 2147483647
  %41 = sub nsw i32 0, %40
  %42 = select i1 %39, i32 %41, i32 %38
  %43 = bitcast float %27 to i32
  %44 = icmp slt i32 %43, 0
  %45 = and i32 %43, 2147483647
  %46 = sub nsw i32 0, %45
  %47 = select i1 %44, i32 %46, i32 %43
  %48 = bitcast float %21 to i32
  %49 = icmp slt i32 %48, 0
  %50 = and i32 %48, 2147483647
  %51 = sub nsw i32 0, %50
  %52 = select i1 %49, i32 %51, i32 %48
  %53 = or i32 %52, %47
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %65, label %55

55:                                               ; preds = %4
  %56 = icmp ne i32 %47, 0
  %57 = icmp ne i32 %52, 0
  %58 = icmp eq i32 %42, 0
  %59 = and i1 %56, %57
  %60 = and i1 %59, %58
  %61 = zext i1 %60 to i32
  %62 = shl nuw nsw i32 %61, 4
  %63 = or i32 %62, %37
  %64 = or i32 %63, 6
  br label %73

65:                                               ; preds = %4
  %66 = icmp eq i32 %42, 1065353216
  %67 = or i32 %37, 2
  %68 = select i1 %66, i32 %37, i32 %67
  %69 = icmp ne i32 %42, 0
  %70 = zext i1 %69 to i32
  %71 = shl nuw nsw i32 %70, 4
  %72 = or i32 %71, %68
  br label %73

73:                                               ; preds = %65, %55
  %74 = phi i32 [ %64, %55 ], [ %72, %65 ]
  %75 = and i32 %74, 255
  store i32 %75, i32* %7, align 4
  %76 = and i32 %74, 15
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %80, label %78

78:                                               ; preds = %73
  %79 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* dereferenceable(40) %0, %class.SkMatrix* nonnull dereferenceable(40) %5) #14
  br label %80

80:                                               ; preds = %73, %78
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #14
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9preRotateEf(%class.SkMatrix* returned, float) local_unnamed_addr #2 align 2 {
  %3 = alloca %class.SkMatrix, align 4
  %4 = bitcast %class.SkMatrix* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #14
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 1
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 0
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 1
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 2
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 3
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 5
  %12 = fmul float %1, 0x3F91DF46A0000000
  %13 = tail call float @sinf(float %12) #14
  %14 = tail call float @llvm.fabs.f32(float %13) #14
  %15 = fcmp ole float %14, 0x3F30000000000000
  %16 = select i1 %15, float 0.000000e+00, float %13
  %17 = tail call float @cosf(float %12) #14
  %18 = tail call float @llvm.fabs.f32(float %17) #14
  %19 = fcmp ole float %18, 0x3F30000000000000
  %20 = select i1 %19, float 0.000000e+00, float %17
  store float %20, float* %6, align 4
  %21 = fsub float -0.000000e+00, %16
  store float %21, float* %7, align 4
  store float 0.000000e+00, float* %8, align 4
  store float %16, float* %9, align 4
  store float %20, float* %10, align 4
  %22 = bitcast float* %11 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %22, align 4
  store i32 192, i32* %5, align 4
  %23 = bitcast float %20 to i32
  %24 = icmp slt i32 %23, 0
  %25 = and i32 %23, 2147483647
  %26 = sub nsw i32 0, %25
  %27 = select i1 %24, i32 %26, i32 %23
  %28 = bitcast float %21 to i32
  %29 = icmp slt i32 %28, 0
  %30 = and i32 %28, 2147483647
  %31 = sub nsw i32 0, %30
  %32 = select i1 %29, i32 %31, i32 %28
  %33 = bitcast float %16 to i32
  %34 = icmp slt i32 %33, 0
  %35 = and i32 %33, 2147483647
  %36 = sub nsw i32 0, %35
  %37 = select i1 %34, i32 %36, i32 %33
  %38 = or i32 %37, %32
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %46, label %40

40:                                               ; preds = %2
  %41 = icmp ne i32 %32, 0
  %42 = icmp ne i32 %37, 0
  %43 = icmp eq i32 %27, 0
  %44 = and i1 %41, %42
  %45 = and i1 %44, %43
  br label %50

46:                                               ; preds = %2
  %47 = icmp eq i32 %27, 1065353216
  %48 = select i1 %47, i32 0, i32 2
  %49 = icmp ne i32 %27, 0
  br label %50

50:                                               ; preds = %46, %40
  %51 = phi i1 [ %49, %46 ], [ %45, %40 ]
  %52 = phi i32 [ %48, %46 ], [ 6, %40 ]
  %53 = zext i1 %51 to i32
  %54 = shl nuw nsw i32 %53, 4
  %55 = or i32 %54, %52
  store i32 %55, i32* %5, align 4
  %56 = icmp eq i32 %52, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %50
  %58 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* dereferenceable(40) %0, %class.SkMatrix* nonnull dereferenceable(40) %3) #14
  br label %59

59:                                               ; preds = %50, %57
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #14
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postRotateEfff(%class.SkMatrix* returned, float, float, float) local_unnamed_addr #2 align 2 {
  %5 = alloca %class.SkMatrix, align 4
  %6 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #14
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 0
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 1
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 2
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 3
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 4
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 5
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 6
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 7
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 8
  %17 = fmul float %1, 0x3F91DF46A0000000
  %18 = tail call float @sinf(float %17) #14
  %19 = tail call float @llvm.fabs.f32(float %18) #14
  %20 = fcmp ole float %19, 0x3F30000000000000
  %21 = select i1 %20, float 0.000000e+00, float %18
  %22 = tail call float @cosf(float %17) #14
  %23 = tail call float @llvm.fabs.f32(float %22) #14
  %24 = fcmp ole float %23, 0x3F30000000000000
  %25 = select i1 %24, float 0.000000e+00, float %22
  %26 = fsub float 1.000000e+00, %25
  store float %25, float* %8, align 4
  %27 = fsub float -0.000000e+00, %21
  store float %27, float* %9, align 4
  %28 = fmul float %21, %3
  %29 = fmul float %26, %2
  %30 = fadd float %28, %29
  store float %30, float* %10, align 4
  store float %21, float* %11, align 4
  store float %25, float* %12, align 4
  %31 = fmul float %27, %2
  %32 = fmul float %26, %3
  %33 = fadd float %31, %32
  store float %33, float* %13, align 4
  store float 0.000000e+00, float* %15, align 4
  store float 0.000000e+00, float* %14, align 4
  store float 1.000000e+00, float* %16, align 4
  store i32 192, i32* %7, align 4
  %34 = fcmp une float %30, 0.000000e+00
  %35 = fcmp une float %33, 0.000000e+00
  %36 = or i1 %34, %35
  %37 = zext i1 %36 to i32
  %38 = bitcast float %25 to i32
  %39 = icmp slt i32 %38, 0
  %40 = and i32 %38, 2147483647
  %41 = sub nsw i32 0, %40
  %42 = select i1 %39, i32 %41, i32 %38
  %43 = bitcast float %27 to i32
  %44 = icmp slt i32 %43, 0
  %45 = and i32 %43, 2147483647
  %46 = sub nsw i32 0, %45
  %47 = select i1 %44, i32 %46, i32 %43
  %48 = bitcast float %21 to i32
  %49 = icmp slt i32 %48, 0
  %50 = and i32 %48, 2147483647
  %51 = sub nsw i32 0, %50
  %52 = select i1 %49, i32 %51, i32 %48
  %53 = or i32 %52, %47
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %65, label %55

55:                                               ; preds = %4
  %56 = icmp ne i32 %47, 0
  %57 = icmp ne i32 %52, 0
  %58 = icmp eq i32 %42, 0
  %59 = and i1 %56, %57
  %60 = and i1 %59, %58
  %61 = zext i1 %60 to i32
  %62 = shl nuw nsw i32 %61, 4
  %63 = or i32 %62, %37
  %64 = or i32 %63, 6
  br label %73

65:                                               ; preds = %4
  %66 = icmp eq i32 %42, 1065353216
  %67 = or i32 %37, 2
  %68 = select i1 %66, i32 %37, i32 %67
  %69 = icmp ne i32 %42, 0
  %70 = zext i1 %69 to i32
  %71 = shl nuw nsw i32 %70, 4
  %72 = or i32 %71, %68
  br label %73

73:                                               ; preds = %65, %55
  %74 = phi i32 [ %64, %55 ], [ %72, %65 ]
  %75 = and i32 %74, 255
  store i32 %75, i32* %7, align 4
  %76 = and i32 %74, 15
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %80, label %78

78:                                               ; preds = %73
  %79 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* nonnull dereferenceable(40) %5, %class.SkMatrix* dereferenceable(40) %0) #14
  br label %80

80:                                               ; preds = %73, %78
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #14
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postRotateEf(%class.SkMatrix* returned, float) local_unnamed_addr #2 align 2 {
  %3 = alloca %class.SkMatrix, align 4
  %4 = bitcast %class.SkMatrix* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #14
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 1
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 0
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 1
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 2
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 3
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 5
  %12 = fmul float %1, 0x3F91DF46A0000000
  %13 = tail call float @sinf(float %12) #14
  %14 = tail call float @llvm.fabs.f32(float %13) #14
  %15 = fcmp ole float %14, 0x3F30000000000000
  %16 = select i1 %15, float 0.000000e+00, float %13
  %17 = tail call float @cosf(float %12) #14
  %18 = tail call float @llvm.fabs.f32(float %17) #14
  %19 = fcmp ole float %18, 0x3F30000000000000
  %20 = select i1 %19, float 0.000000e+00, float %17
  store float %20, float* %6, align 4
  %21 = fsub float -0.000000e+00, %16
  store float %21, float* %7, align 4
  store float 0.000000e+00, float* %8, align 4
  store float %16, float* %9, align 4
  store float %20, float* %10, align 4
  %22 = bitcast float* %11 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %22, align 4
  store i32 192, i32* %5, align 4
  %23 = bitcast float %20 to i32
  %24 = icmp slt i32 %23, 0
  %25 = and i32 %23, 2147483647
  %26 = sub nsw i32 0, %25
  %27 = select i1 %24, i32 %26, i32 %23
  %28 = bitcast float %21 to i32
  %29 = icmp slt i32 %28, 0
  %30 = and i32 %28, 2147483647
  %31 = sub nsw i32 0, %30
  %32 = select i1 %29, i32 %31, i32 %28
  %33 = bitcast float %16 to i32
  %34 = icmp slt i32 %33, 0
  %35 = and i32 %33, 2147483647
  %36 = sub nsw i32 0, %35
  %37 = select i1 %34, i32 %36, i32 %33
  %38 = or i32 %37, %32
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %46, label %40

40:                                               ; preds = %2
  %41 = icmp ne i32 %32, 0
  %42 = icmp ne i32 %37, 0
  %43 = icmp eq i32 %27, 0
  %44 = and i1 %41, %42
  %45 = and i1 %44, %43
  br label %50

46:                                               ; preds = %2
  %47 = icmp eq i32 %27, 1065353216
  %48 = select i1 %47, i32 0, i32 2
  %49 = icmp ne i32 %27, 0
  br label %50

50:                                               ; preds = %46, %40
  %51 = phi i1 [ %49, %46 ], [ %45, %40 ]
  %52 = phi i32 [ %48, %46 ], [ 6, %40 ]
  %53 = zext i1 %51 to i32
  %54 = shl nuw nsw i32 %53, 4
  %55 = or i32 %54, %52
  store i32 %55, i32* %5, align 4
  %56 = icmp eq i32 %52, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %50
  %58 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* nonnull dereferenceable(40) %3, %class.SkMatrix* dereferenceable(40) %0) #14
  br label %59

59:                                               ; preds = %50, %57
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #14
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix7setSkewEffff(%class.SkMatrix* returned, float, float, float, float) local_unnamed_addr #2 align 2 {
  %6 = fmul float %1, %4
  %7 = fsub float -0.000000e+00, %6
  %8 = fmul float %2, %3
  %9 = fsub float -0.000000e+00, %8
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  store float 1.000000e+00, float* %10, align 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  store float %1, float* %11, align 4
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  store float %7, float* %12, align 4
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  store float %2, float* %13, align 4
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  store float 1.000000e+00, float* %14, align 4
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  store float %9, float* %15, align 4
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %16, align 4
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %17, align 4
  %18 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %18, align 4
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 192, i32* %19, align 4
  ret %class.SkMatrix* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix7setSkewEff(%class.SkMatrix* returned, float, float) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  store float 1.000000e+00, float* %4, align 4
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  store float %1, float* %5, align 4
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  store float 0.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  store float %2, float* %7, align 4
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %9 = bitcast float* %8 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %9, align 4
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %10, align 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 192, i32* %11, align 4
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix7preSkewEffff(%class.SkMatrix* returned, float, float, float, float) local_unnamed_addr #2 align 2 {
  %6 = alloca %class.SkMatrix, align 4
  %7 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #14
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 1
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 0
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 1
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 2
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 3
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 5
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 6
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 7
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  %18 = fmul float %1, %4
  %19 = fsub float -0.000000e+00, %18
  %20 = fmul float %2, %3
  %21 = fsub float -0.000000e+00, %20
  store float 1.000000e+00, float* %9, align 4
  store float %1, float* %10, align 4
  store float %19, float* %11, align 4
  store float %2, float* %12, align 4
  store float 1.000000e+00, float* %13, align 4
  store float %21, float* %14, align 4
  store float 0.000000e+00, float* %15, align 4
  store float 0.000000e+00, float* %16, align 4
  store float 1.000000e+00, float* %17, align 4
  store i32 192, i32* %8, align 4
  %22 = fcmp une float %18, 0.000000e+00
  %23 = fcmp une float %20, 0.000000e+00
  %24 = or i1 %23, %22
  %25 = zext i1 %24 to i32
  %26 = bitcast float %1 to i32
  %27 = icmp slt i32 %26, 0
  %28 = and i32 %26, 2147483647
  %29 = sub nsw i32 0, %28
  %30 = select i1 %27, i32 %29, i32 %26
  %31 = bitcast float %2 to i32
  %32 = icmp slt i32 %31, 0
  %33 = and i32 %31, 2147483647
  %34 = sub nsw i32 0, %33
  %35 = select i1 %32, i32 %34, i32 %31
  %36 = or i32 %35, %30
  %37 = icmp eq i32 %36, 0
  %38 = select i1 %37, i32 16, i32 6
  %39 = or i32 %38, %25
  store i32 %39, i32* %8, align 4
  %40 = and i32 %39, 7
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %5
  %43 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* dereferenceable(40) %0, %class.SkMatrix* nonnull dereferenceable(40) %6) #14
  br label %44

44:                                               ; preds = %5, %42
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #14
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix7preSkewEff(%class.SkMatrix* returned, float, float) local_unnamed_addr #2 align 2 {
  %4 = alloca %class.SkMatrix, align 4
  %5 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #14
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 0
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 1
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 2
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 3
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 4
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %7, align 4
  store float %1, float* %8, align 4
  store float 0.000000e+00, float* %9, align 4
  store float %2, float* %10, align 4
  %13 = bitcast float* %11 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %13, align 4
  store float 1.000000e+00, float* %12, align 4
  store i32 192, i32* %6, align 4
  %14 = bitcast float %1 to i32
  %15 = icmp slt i32 %14, 0
  %16 = and i32 %14, 2147483647
  %17 = sub nsw i32 0, %16
  %18 = select i1 %15, i32 %17, i32 %14
  %19 = bitcast float %2 to i32
  %20 = icmp slt i32 %19, 0
  %21 = and i32 %19, 2147483647
  %22 = sub nsw i32 0, %21
  %23 = select i1 %20, i32 %22, i32 %19
  %24 = or i32 %23, %18
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %3
  store i32 16, i32* %6, align 4
  br label %29

27:                                               ; preds = %3
  store i32 6, i32* %6, align 4
  %28 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* dereferenceable(40) %0, %class.SkMatrix* nonnull dereferenceable(40) %4) #14
  br label %29

29:                                               ; preds = %26, %27
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #14
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8postSkewEffff(%class.SkMatrix* returned, float, float, float, float) local_unnamed_addr #2 align 2 {
  %6 = alloca %class.SkMatrix, align 4
  %7 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #14
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 1
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 0
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 1
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 2
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 3
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 5
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 6
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 7
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  %18 = fmul float %1, %4
  %19 = fsub float -0.000000e+00, %18
  %20 = fmul float %2, %3
  %21 = fsub float -0.000000e+00, %20
  store float 1.000000e+00, float* %9, align 4
  store float %1, float* %10, align 4
  store float %19, float* %11, align 4
  store float %2, float* %12, align 4
  store float 1.000000e+00, float* %13, align 4
  store float %21, float* %14, align 4
  store float 0.000000e+00, float* %15, align 4
  store float 0.000000e+00, float* %16, align 4
  store float 1.000000e+00, float* %17, align 4
  store i32 192, i32* %8, align 4
  %22 = fcmp une float %18, 0.000000e+00
  %23 = fcmp une float %20, 0.000000e+00
  %24 = or i1 %23, %22
  %25 = zext i1 %24 to i32
  %26 = bitcast float %1 to i32
  %27 = icmp slt i32 %26, 0
  %28 = and i32 %26, 2147483647
  %29 = sub nsw i32 0, %28
  %30 = select i1 %27, i32 %29, i32 %26
  %31 = bitcast float %2 to i32
  %32 = icmp slt i32 %31, 0
  %33 = and i32 %31, 2147483647
  %34 = sub nsw i32 0, %33
  %35 = select i1 %32, i32 %34, i32 %31
  %36 = or i32 %35, %30
  %37 = icmp eq i32 %36, 0
  %38 = select i1 %37, i32 16, i32 6
  %39 = or i32 %38, %25
  store i32 %39, i32* %8, align 4
  %40 = and i32 %39, 7
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %5
  %43 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* nonnull dereferenceable(40) %6, %class.SkMatrix* dereferenceable(40) %0) #14
  br label %44

44:                                               ; preds = %5, %42
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #14
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8postSkewEff(%class.SkMatrix* returned, float, float) local_unnamed_addr #2 align 2 {
  %4 = alloca %class.SkMatrix, align 4
  %5 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #14
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 0
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 1
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 2
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 3
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 4
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %7, align 4
  store float %1, float* %8, align 4
  store float 0.000000e+00, float* %9, align 4
  store float %2, float* %10, align 4
  %13 = bitcast float* %11 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %13, align 4
  store float 1.000000e+00, float* %12, align 4
  store i32 192, i32* %6, align 4
  %14 = bitcast float %1 to i32
  %15 = icmp slt i32 %14, 0
  %16 = and i32 %14, 2147483647
  %17 = sub nsw i32 0, %16
  %18 = select i1 %15, i32 %17, i32 %14
  %19 = bitcast float %2 to i32
  %20 = icmp slt i32 %19, 0
  %21 = and i32 %19, 2147483647
  %22 = sub nsw i32 0, %21
  %23 = select i1 %20, i32 %22, i32 %19
  %24 = or i32 %23, %18
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %3
  store i32 16, i32* %6, align 4
  br label %29

27:                                               ; preds = %3
  store i32 6, i32* %6, align 4
  %28 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* nonnull dereferenceable(40) %4, %class.SkMatrix* dereferenceable(40) %0) #14
  br label %29

29:                                               ; preds = %26, %27
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #14
  ret %class.SkMatrix* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8SkMatrix13setRectToRectERK6SkRectS2_NS_10ScaleToFitE(%class.SkMatrix*, %struct.SkRect* nocapture readonly dereferenceable(16), %struct.SkRect* nocapture readonly dereferenceable(16), i32) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = fcmp olt float %6, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %14 = load float, float* %13, align 4
  %15 = fcmp uge float %12, %14
  br i1 %15, label %16, label %21

16:                                               ; preds = %4, %10
  %17 = bitcast %class.SkMatrix* %0 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %17, align 4
  %18 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %19, align 4
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %20, align 4
  br label %101

21:                                               ; preds = %10
  %22 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 0
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 2
  %25 = load float, float* %24, align 4
  %26 = fcmp olt float %23, %25
  br i1 %26, label %27, label %33

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 1
  %29 = load float, float* %28, align 4
  %30 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 3
  %31 = load float, float* %30, align 4
  %32 = fcmp uge float %29, %31
  br i1 %32, label %33, label %36

33:                                               ; preds = %21, %27
  %34 = bitcast %class.SkMatrix* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 0, i64 32, i1 false) #14
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %35, align 4
  br label %101

36:                                               ; preds = %27
  %37 = insertelement <2 x float> undef, float %25, i32 0
  %38 = insertelement <2 x float> %37, float %31, i32 1
  %39 = insertelement <2 x float> undef, float %23, i32 0
  %40 = insertelement <2 x float> %39, float %29, i32 1
  %41 = fsub <2 x float> %38, %40
  %42 = insertelement <2 x float> undef, float %8, i32 0
  %43 = insertelement <2 x float> %42, float %14, i32 1
  %44 = insertelement <2 x float> undef, float %6, i32 0
  %45 = insertelement <2 x float> %44, float %12, i32 1
  %46 = fsub <2 x float> %43, %45
  %47 = fdiv <2 x float> %41, %46
  %48 = icmp eq i32 %3, 0
  %49 = extractelement <2 x float> %47, i32 0
  %50 = extractelement <2 x float> %47, i32 1
  %51 = fcmp ogt float %49, %50
  %52 = select i1 %51, float %50, float %49
  %53 = select i1 %48, float %49, float %52
  %54 = select i1 %48, float %50, float %52
  %55 = xor i1 %48, true
  %56 = and i1 %51, %55
  %57 = fmul float %6, %53
  %58 = fsub float %23, %57
  %59 = fmul float %12, %54
  %60 = fsub float %29, %59
  %61 = or i32 %3, 1
  %62 = icmp eq i32 %61, 3
  br i1 %62, label %63, label %80

63:                                               ; preds = %36
  %64 = icmp eq i32 %3, 2
  %65 = extractelement <2 x float> %46, i32 0
  %66 = fmul float %65, %54
  %67 = extractelement <2 x float> %41, i32 0
  %68 = fsub float %67, %66
  %69 = extractelement <2 x float> %46, i32 1
  %70 = fmul float %69, %54
  %71 = extractelement <2 x float> %41, i32 1
  %72 = fsub float %71, %70
  %73 = select i1 %56, float %68, float %72
  %74 = fmul float %73, 5.000000e-01
  %75 = select i1 %64, float %74, float %73
  %76 = fadd float %58, %75
  %77 = fadd float %60, %75
  %78 = select i1 %56, float %76, float %58
  %79 = select i1 %56, float %60, float %77
  br label %80

80:                                               ; preds = %63, %36
  %81 = phi float [ %58, %36 ], [ %78, %63 ]
  %82 = phi float [ %60, %36 ], [ %79, %63 ]
  %83 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  store float %53, float* %83, align 4
  %84 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  store float 0.000000e+00, float* %84, align 4
  %85 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  store float %81, float* %85, align 4
  %86 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  store float 0.000000e+00, float* %86, align 4
  %87 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  store float %54, float* %87, align 4
  %88 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  store float %82, float* %88, align 4
  %89 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %89, align 4
  %90 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %90, align 4
  %91 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %91, align 4
  %92 = fcmp une float %53, 1.000000e+00
  %93 = fcmp une float %54, 1.000000e+00
  %94 = or i1 %92, %93
  %95 = fcmp une float %81, 0.000000e+00
  %96 = fcmp une float %82, 0.000000e+00
  %97 = or i1 %95, %96
  %98 = zext i1 %97 to i32
  %99 = select i1 %94, i32 18, i32 16
  %100 = or i32 %99, %98
  br label %101

101:                                              ; preds = %33, %80, %16
  %102 = phi i32 [ 18, %33 ], [ %100, %80 ], [ 16, %16 ]
  %103 = phi i1 [ true, %33 ], [ true, %80 ], [ false, %16 ]
  %104 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 %102, i32* %104, align 4
  ret i1 %103
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* returned, %class.SkMatrix* nocapture dereferenceable(40), %class.SkMatrix* nocapture dereferenceable(40)) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = trunc i32 %5 to i8
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %1) #14
  %10 = zext i8 %9 to i32
  store i32 %10, i32* %4, align 4
  br label %11

11:                                               ; preds = %3, %8
  %12 = phi i32 [ %10, %8 ], [ %5, %3 ]
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = trunc i32 %14 to i8
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %11
  %18 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #14
  %19 = zext i8 %18 to i32
  store i32 %19, i32* %13, align 4
  %20 = load i32, i32* %4, align 4
  br label %21

21:                                               ; preds = %11, %17
  %22 = phi i32 [ %20, %17 ], [ %12, %11 ]
  %23 = phi i32 [ %19, %17 ], [ %14, %11 ]
  %24 = and i32 %22, 143
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %21
  %27 = bitcast %class.SkMatrix* %0 to i8*
  %28 = bitcast %class.SkMatrix* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %28, i64 40, i1 false)
  br label %261

29:                                               ; preds = %21
  %30 = and i32 %23, 143
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %29
  %33 = bitcast %class.SkMatrix* %0 to i8*
  %34 = bitcast %class.SkMatrix* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 40, i1 false)
  br label %261

35:                                               ; preds = %29
  %36 = or i32 %23, %12
  %37 = and i32 %36, 12
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %81

39:                                               ; preds = %35
  %40 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 0
  %41 = load float, float* %40, align 4
  %42 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 0
  %43 = load float, float* %42, align 4
  %44 = fmul float %41, %43
  %45 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  %46 = load float, float* %45, align 4
  %47 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 4
  %48 = load float, float* %47, align 4
  %49 = fmul float %46, %48
  %50 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 2
  %51 = load float, float* %50, align 4
  %52 = fmul float %41, %51
  %53 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  %54 = load float, float* %53, align 4
  %55 = fadd float %52, %54
  %56 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 5
  %57 = load float, float* %56, align 4
  %58 = fmul float %46, %57
  %59 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  %60 = load float, float* %59, align 4
  %61 = fadd float %58, %60
  %62 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  store float %44, float* %62, align 4
  %63 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  store float 0.000000e+00, float* %63, align 4
  %64 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  store float %55, float* %64, align 4
  %65 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  store float 0.000000e+00, float* %65, align 4
  %66 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  store float %49, float* %66, align 4
  %67 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  store float %61, float* %67, align 4
  %68 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %68, align 4
  %69 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %69, align 4
  %70 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %70, align 4
  %71 = fcmp une float %44, 1.000000e+00
  %72 = fcmp une float %49, 1.000000e+00
  %73 = or i1 %71, %72
  %74 = fcmp une float %55, 0.000000e+00
  %75 = fcmp une float %61, 0.000000e+00
  %76 = or i1 %74, %75
  %77 = zext i1 %76 to i32
  %78 = select i1 %73, i32 18, i32 16
  %79 = or i32 %78, %77
  %80 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 %79, i32* %80, align 4
  br label %261

81:                                               ; preds = %35
  %82 = and i32 %36, 8
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 0
  br i1 %83, label %184, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 0
  %87 = load float, float* %84, align 4
  %88 = load float, float* %86, align 4
  %89 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  %90 = load float, float* %89, align 4
  %91 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 3
  %92 = load float, float* %91, align 4
  %93 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  %94 = load float, float* %93, align 4
  %95 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 6
  %96 = load float, float* %95, align 4
  %97 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 1
  %98 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 4
  %99 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 7
  %100 = bitcast float* %97 to <2 x float>*
  %101 = load <2 x float>, <2 x float>* %100, align 4
  %102 = shufflevector <2 x float> %101, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %103 = bitcast float* %98 to <2 x float>*
  %104 = load <2 x float>, <2 x float>* %103, align 4
  %105 = shufflevector <2 x float> %104, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %106 = bitcast float* %99 to <2 x float>*
  %107 = load <2 x float>, <2 x float>* %106, align 4
  %108 = shufflevector <2 x float> %107, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %109 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  %110 = load float, float* %109, align 4
  %111 = insertelement <2 x float> undef, float %87, i32 0
  %112 = insertelement <2 x float> %111, float %88, i32 1
  %113 = shufflevector <2 x float> %112, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %114 = insertelement <4 x float> undef, float %88, i32 0
  %115 = extractelement <2 x float> %101, i32 0
  %116 = insertelement <4 x float> %114, float %115, i32 1
  %117 = extractelement <2 x float> %101, i32 1
  %118 = insertelement <4 x float> %116, float %117, i32 2
  %119 = insertelement <4 x float> %118, float %110, i32 3
  %120 = fmul <4 x float> %113, %119
  %121 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  %122 = load float, float* %121, align 4
  %123 = insertelement <2 x float> undef, float %90, i32 0
  %124 = insertelement <2 x float> %123, float %92, i32 1
  %125 = shufflevector <2 x float> %124, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %126 = insertelement <4 x float> undef, float %92, i32 0
  %127 = extractelement <2 x float> %104, i32 0
  %128 = insertelement <4 x float> %126, float %127, i32 1
  %129 = extractelement <2 x float> %104, i32 1
  %130 = insertelement <4 x float> %128, float %129, i32 2
  %131 = insertelement <4 x float> %130, float %122, i32 3
  %132 = fmul <4 x float> %125, %131
  %133 = fadd <4 x float> %120, %132
  %134 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  %135 = load float, float* %134, align 4
  %136 = insertelement <2 x float> undef, float %94, i32 0
  %137 = insertelement <2 x float> %136, float %96, i32 1
  %138 = shufflevector <2 x float> %137, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %139 = insertelement <4 x float> undef, float %96, i32 0
  %140 = extractelement <2 x float> %107, i32 0
  %141 = insertelement <4 x float> %139, float %140, i32 1
  %142 = extractelement <2 x float> %107, i32 1
  %143 = insertelement <4 x float> %141, float %142, i32 2
  %144 = insertelement <4 x float> %143, float %135, i32 3
  %145 = fmul <4 x float> %138, %144
  %146 = fadd <4 x float> %133, %145
  %147 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 6
  %148 = load float, float* %147, align 4
  %149 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 7
  %150 = load float, float* %149, align 4
  %151 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 8
  %152 = load float, float* %151, align 4
  %153 = insertelement <4 x float> undef, float %115, i32 0
  %154 = insertelement <4 x float> %153, float %117, i32 1
  %155 = insertelement <4 x float> %154, float %88, i32 2
  %156 = shufflevector <4 x float> %155, <4 x float> %102, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %157 = insertelement <2 x float> undef, float %110, i32 0
  %158 = insertelement <2 x float> %157, float %148, i32 1
  %159 = shufflevector <2 x float> %158, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %160 = fmul <4 x float> %156, %159
  %161 = insertelement <4 x float> undef, float %127, i32 0
  %162 = insertelement <4 x float> %161, float %129, i32 1
  %163 = insertelement <4 x float> %162, float %92, i32 2
  %164 = shufflevector <4 x float> %163, <4 x float> %105, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %165 = insertelement <2 x float> undef, float %122, i32 0
  %166 = insertelement <2 x float> %165, float %150, i32 1
  %167 = shufflevector <2 x float> %166, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %168 = fmul <4 x float> %164, %167
  %169 = fadd <4 x float> %160, %168
  %170 = insertelement <4 x float> undef, float %140, i32 0
  %171 = insertelement <4 x float> %170, float %142, i32 1
  %172 = insertelement <4 x float> %171, float %96, i32 2
  %173 = shufflevector <4 x float> %172, <4 x float> %108, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %174 = insertelement <2 x float> undef, float %135, i32 0
  %175 = insertelement <2 x float> %174, float %152, i32 1
  %176 = shufflevector <2 x float> %175, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %177 = fmul <4 x float> %173, %176
  %178 = fadd <4 x float> %169, %177
  %179 = fmul float %117, %148
  %180 = fmul float %129, %150
  %181 = fadd float %179, %180
  %182 = fmul float %142, %152
  %183 = fadd float %181, %182
  br label %251

184:                                              ; preds = %81
  %185 = load float, float* %84, align 4
  %186 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  %187 = load float, float* %186, align 4
  %188 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 3
  %189 = fpext float %185 to double
  %190 = fpext float %187 to double
  %191 = bitcast %class.SkMatrix* %2 to <2 x float>*
  %192 = load <2 x float>, <2 x float>* %191, align 4
  %193 = bitcast float* %188 to <2 x float>*
  %194 = load <2 x float>, <2 x float>* %193, align 4
  %195 = fpext <2 x float> %192 to <2 x double>
  %196 = insertelement <2 x double> undef, double %189, i32 0
  %197 = shufflevector <2 x double> %196, <2 x double> undef, <2 x i32> zeroinitializer
  %198 = fmul <2 x double> %197, %195
  %199 = fpext <2 x float> %194 to <2 x double>
  %200 = insertelement <2 x double> undef, double %190, i32 0
  %201 = shufflevector <2 x double> %200, <2 x double> undef, <2 x i32> zeroinitializer
  %202 = fmul <2 x double> %201, %199
  %203 = fadd <2 x double> %198, %202
  %204 = fptrunc <2 x double> %203 to <2 x float>
  %205 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 2
  %206 = load float, float* %205, align 4
  %207 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 5
  %208 = load float, float* %207, align 4
  %209 = fpext float %206 to double
  %210 = fmul double %189, %209
  %211 = fpext float %208 to double
  %212 = fmul double %190, %211
  %213 = fadd double %210, %212
  %214 = fptrunc double %213 to float
  %215 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  %216 = load float, float* %215, align 4
  %217 = fadd float %216, %214
  %218 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  %219 = load float, float* %218, align 4
  %220 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  %221 = load float, float* %220, align 4
  %222 = fpext float %219 to double
  %223 = extractelement <2 x double> %195, i32 0
  %224 = fmul double %223, %222
  %225 = fpext float %221 to double
  %226 = extractelement <2 x double> %199, i32 0
  %227 = fmul double %226, %225
  %228 = fadd double %224, %227
  %229 = fptrunc double %228 to float
  %230 = extractelement <2 x double> %195, i32 1
  %231 = fmul double %230, %222
  %232 = extractelement <2 x double> %199, i32 1
  %233 = fmul double %232, %225
  %234 = fadd double %231, %233
  %235 = fptrunc double %234 to float
  %236 = fmul double %209, %222
  %237 = fmul double %211, %225
  %238 = fadd double %236, %237
  %239 = fptrunc double %238 to float
  %240 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  %241 = load float, float* %240, align 4
  %242 = fadd float %241, %239
  %243 = extractelement <2 x float> %204, i32 0
  %244 = insertelement <4 x float> undef, float %243, i32 0
  %245 = extractelement <2 x float> %204, i32 1
  %246 = insertelement <4 x float> %244, float %245, i32 1
  %247 = insertelement <4 x float> %246, float %217, i32 2
  %248 = insertelement <4 x float> %247, float %229, i32 3
  %249 = insertelement <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, float %235, i32 0
  %250 = insertelement <4 x float> %249, float %242, i32 1
  br label %251

251:                                              ; preds = %184, %85
  %252 = phi float [ 1.000000e+00, %184 ], [ %183, %85 ]
  %253 = phi i32 [ 192, %184 ], [ 128, %85 ]
  %254 = phi <4 x float> [ %248, %184 ], [ %146, %85 ]
  %255 = phi <4 x float> [ %250, %184 ], [ %178, %85 ]
  %256 = bitcast %class.SkMatrix* %0 to <4 x float>*
  store <4 x float> %254, <4 x float>* %256, align 4
  %257 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %258 = bitcast float* %257 to <4 x float>*
  store <4 x float> %255, <4 x float>* %258, align 4
  %259 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float %252, float* %259, align 4
  %260 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 %253, i32* %260, align 4
  br label %261

261:                                              ; preds = %32, %251, %39, %26
  ret %class.SkMatrix* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN8SkMatrix17SetAffineIdentityEPf(float* nocapture) local_unnamed_addr #6 align 2 {
  %2 = bitcast float* %0 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %2, align 4
  %3 = getelementptr inbounds float, float* %0, i64 4
  store float 0.000000e+00, float* %3, align 4
  %4 = getelementptr inbounds float, float* %0, i64 5
  store float 0.000000e+00, float* %4, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkMatrix8asAffineEPf(%class.SkMatrix* nocapture, float*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 192
  %6 = icmp eq i32 %5, 128
  br i1 %6, label %7, label %22

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %9 = load float, float* %8, align 4
  %10 = fcmp une float %9, 0.000000e+00
  br i1 %10, label %20, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %13 = load float, float* %12, align 4
  %14 = fcmp une float %13, 0.000000e+00
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %17 = load float, float* %16, align 4
  %18 = fcmp une float %17, 1.000000e+00
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  br label %20

20:                                               ; preds = %19, %15, %11, %7
  %21 = phi i32 [ 192, %19 ], [ 15, %15 ], [ 15, %11 ], [ 15, %7 ]
  store i32 %21, i32* %3, align 4
  br label %22

22:                                               ; preds = %2, %20
  %23 = phi i32 [ %21, %20 ], [ %4, %2 ]
  %24 = and i32 %23, 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %57

26:                                               ; preds = %22
  %27 = icmp eq float* %1, null
  br i1 %27, label %57, label %28

28:                                               ; preds = %26
  %29 = bitcast %class.SkMatrix* %0 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = bitcast float* %1 to i32*
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %33 = bitcast float* %32 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds float, float* %1, i64 1
  %36 = bitcast float* %35 to i32*
  store i32 %34, i32* %36, align 4
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds float, float* %1, i64 2
  %41 = bitcast float* %40 to i32*
  store i32 %39, i32* %41, align 4
  %42 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %43 = bitcast float* %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds float, float* %1, i64 3
  %46 = bitcast float* %45 to i32*
  store i32 %44, i32* %46, align 4
  %47 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %48 = bitcast float* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds float, float* %1, i64 4
  %51 = bitcast float* %50 to i32*
  store i32 %49, i32* %51, align 4
  %52 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %53 = bitcast float* %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds float, float* %1, i64 5
  %56 = bitcast float* %55 to i32*
  store i32 %54, i32* %56, align 4
  br label %57

57:                                               ; preds = %22, %28, %26
  %58 = phi i1 [ false, %22 ], [ true, %26 ], [ true, %28 ]
  ret i1 %58
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = trunc i32 %6 to i8
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %4
  %10 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %11 = zext i8 %10 to i32
  store i32 %11, i32* %5, align 4
  br label %12

12:                                               ; preds = %4, %9
  %13 = phi i32 [ %11, %9 ], [ %6, %4 ]
  %14 = and i32 %13, 15
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [16 x void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)*], [16 x void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)*]* @_ZN8SkMatrix12gMapPtsProcsE, i64 0, i64 %15
  %17 = load void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)*, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)** %16, align 8
  tail call void %17(%class.SkMatrix* dereferenceable(40) %0, %struct.SkPoint* %1, %struct.SkPoint* %2, i32 %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkMatrix5mapXYEffP7SkPoint(%class.SkMatrix*, float, float, %struct.SkPoint*) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = trunc i32 %6 to i8
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %4
  %10 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %11 = zext i8 %10 to i32
  store i32 %11, i32* %5, align 4
  br label %12

12:                                               ; preds = %4, %9
  %13 = phi i32 [ %11, %9 ], [ %6, %4 ]
  %14 = and i32 %13, 15
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [16 x void (%class.SkMatrix*, float, float, %struct.SkPoint*)*], [16 x void (%class.SkMatrix*, float, float, %struct.SkPoint*)*]* @_ZN8SkMatrix11gMapXYProcsE, i64 0, i64 %15
  %17 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %16, align 8
  tail call void %17(%class.SkMatrix* dereferenceable(40) %0, float %1, float %2, %struct.SkPoint* %3) #14
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN8SkMatrix10ComputeInvEPfPKfdb(float* nocapture, float* nocapture readonly, double, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds float, float* %1, i64 4
  %6 = load float, float* %5, align 4
  br i1 %3, label %7, label %111

7:                                                ; preds = %4
  %8 = getelementptr inbounds float, float* %1, i64 8
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds float, float* %1, i64 5
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds float, float* %1, i64 7
  %13 = load float, float* %12, align 4
  %14 = fmul float %6, %9
  %15 = fmul float %11, %13
  %16 = fsub float %14, %15
  %17 = fpext float %16 to double
  %18 = fmul double %17, %2
  %19 = fptrunc double %18 to float
  store float %19, float* %0, align 4
  %20 = getelementptr inbounds float, float* %1, i64 2
  %21 = load float, float* %20, align 4
  %22 = load float, float* %12, align 4
  %23 = getelementptr inbounds float, float* %1, i64 1
  %24 = load float, float* %23, align 4
  %25 = load float, float* %8, align 4
  %26 = fmul float %21, %22
  %27 = fmul float %24, %25
  %28 = fsub float %26, %27
  %29 = fpext float %28 to double
  %30 = fmul double %29, %2
  %31 = fptrunc double %30 to float
  %32 = getelementptr inbounds float, float* %0, i64 1
  store float %31, float* %32, align 4
  %33 = load float, float* %23, align 4
  %34 = load float, float* %10, align 4
  %35 = load float, float* %20, align 4
  %36 = load float, float* %5, align 4
  %37 = fmul float %33, %34
  %38 = fmul float %35, %36
  %39 = fsub float %37, %38
  %40 = fpext float %39 to double
  %41 = fmul double %40, %2
  %42 = fptrunc double %41 to float
  %43 = getelementptr inbounds float, float* %0, i64 2
  store float %42, float* %43, align 4
  %44 = load float, float* %10, align 4
  %45 = getelementptr inbounds float, float* %1, i64 6
  %46 = load float, float* %45, align 4
  %47 = getelementptr inbounds float, float* %1, i64 3
  %48 = load float, float* %47, align 4
  %49 = load float, float* %8, align 4
  %50 = fmul float %44, %46
  %51 = fmul float %48, %49
  %52 = fsub float %50, %51
  %53 = fpext float %52 to double
  %54 = fmul double %53, %2
  %55 = fptrunc double %54 to float
  %56 = getelementptr inbounds float, float* %0, i64 3
  store float %55, float* %56, align 4
  %57 = load float, float* %1, align 4
  %58 = load float, float* %8, align 4
  %59 = load float, float* %20, align 4
  %60 = load float, float* %45, align 4
  %61 = fmul float %57, %58
  %62 = fmul float %59, %60
  %63 = fsub float %61, %62
  %64 = fpext float %63 to double
  %65 = fmul double %64, %2
  %66 = fptrunc double %65 to float
  %67 = getelementptr inbounds float, float* %0, i64 4
  store float %66, float* %67, align 4
  %68 = load float, float* %20, align 4
  %69 = load float, float* %47, align 4
  %70 = load float, float* %1, align 4
  %71 = load float, float* %10, align 4
  %72 = fmul float %68, %69
  %73 = fmul float %70, %71
  %74 = fsub float %72, %73
  %75 = fpext float %74 to double
  %76 = fmul double %75, %2
  %77 = fptrunc double %76 to float
  %78 = getelementptr inbounds float, float* %0, i64 5
  store float %77, float* %78, align 4
  %79 = load float, float* %47, align 4
  %80 = load float, float* %12, align 4
  %81 = load float, float* %5, align 4
  %82 = load float, float* %45, align 4
  %83 = fmul float %79, %80
  %84 = fmul float %81, %82
  %85 = fsub float %83, %84
  %86 = fpext float %85 to double
  %87 = fmul double %86, %2
  %88 = fptrunc double %87 to float
  %89 = getelementptr inbounds float, float* %0, i64 6
  store float %88, float* %89, align 4
  %90 = load float, float* %23, align 4
  %91 = load float, float* %45, align 4
  %92 = load float, float* %1, align 4
  %93 = load float, float* %12, align 4
  %94 = fmul float %90, %91
  %95 = fmul float %92, %93
  %96 = fsub float %94, %95
  %97 = fpext float %96 to double
  %98 = fmul double %97, %2
  %99 = fptrunc double %98 to float
  %100 = getelementptr inbounds float, float* %0, i64 7
  store float %99, float* %100, align 4
  %101 = load float, float* %1, align 4
  %102 = load float, float* %5, align 4
  %103 = load float, float* %23, align 4
  %104 = load float, float* %47, align 4
  %105 = fmul float %101, %102
  %106 = fmul float %103, %104
  %107 = fsub float %105, %106
  %108 = fpext float %107 to double
  %109 = fmul double %108, %2
  %110 = fptrunc double %109 to float
  br label %166

111:                                              ; preds = %4
  %112 = fpext float %6 to double
  %113 = fmul double %112, %2
  %114 = fptrunc double %113 to float
  store float %114, float* %0, align 4
  %115 = getelementptr inbounds float, float* %1, i64 1
  %116 = load float, float* %115, align 4
  %117 = fsub float -0.000000e+00, %116
  %118 = fpext float %117 to double
  %119 = fmul double %118, %2
  %120 = fptrunc double %119 to float
  %121 = getelementptr inbounds float, float* %0, i64 1
  store float %120, float* %121, align 4
  %122 = load float, float* %115, align 4
  %123 = fpext float %122 to double
  %124 = getelementptr inbounds float, float* %1, i64 5
  %125 = load float, float* %124, align 4
  %126 = fpext float %125 to double
  %127 = load float, float* %5, align 4
  %128 = fpext float %127 to double
  %129 = getelementptr inbounds float, float* %1, i64 2
  %130 = load float, float* %129, align 4
  %131 = fpext float %130 to double
  %132 = fmul double %123, %126
  %133 = fmul double %128, %131
  %134 = fsub double %132, %133
  %135 = fmul double %134, %2
  %136 = fptrunc double %135 to float
  %137 = getelementptr inbounds float, float* %0, i64 2
  store float %136, float* %137, align 4
  %138 = getelementptr inbounds float, float* %1, i64 3
  %139 = load float, float* %138, align 4
  %140 = fsub float -0.000000e+00, %139
  %141 = fpext float %140 to double
  %142 = fmul double %141, %2
  %143 = fptrunc double %142 to float
  %144 = getelementptr inbounds float, float* %0, i64 3
  store float %143, float* %144, align 4
  %145 = load float, float* %1, align 4
  %146 = fpext float %145 to double
  %147 = fmul double %146, %2
  %148 = fptrunc double %147 to float
  %149 = getelementptr inbounds float, float* %0, i64 4
  store float %148, float* %149, align 4
  %150 = load float, float* %138, align 4
  %151 = fpext float %150 to double
  %152 = load float, float* %129, align 4
  %153 = fpext float %152 to double
  %154 = load float, float* %1, align 4
  %155 = fpext float %154 to double
  %156 = load float, float* %124, align 4
  %157 = fpext float %156 to double
  %158 = fmul double %151, %153
  %159 = fmul double %155, %157
  %160 = fsub double %158, %159
  %161 = fmul double %160, %2
  %162 = fptrunc double %161 to float
  %163 = getelementptr inbounds float, float* %0, i64 5
  store float %162, float* %163, align 4
  %164 = getelementptr inbounds float, float* %0, i64 6
  store float 0.000000e+00, float* %164, align 4
  %165 = getelementptr inbounds float, float* %0, i64 7
  store float 0.000000e+00, float* %165, align 4
  br label %166

166:                                              ; preds = %111, %7
  %167 = phi float [ 1.000000e+00, %111 ], [ %110, %7 ]
  %168 = getelementptr inbounds float, float* %0, i64 8
  store float %167, float* %168, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix*, %class.SkMatrix*) local_unnamed_addr #2 align 2 {
  %3 = alloca %class.SkMatrix, align 16
  %4 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = trunc i32 %5 to i8
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %10 = zext i8 %9 to i32
  store i32 %10, i32* %4, align 4
  br label %11

11:                                               ; preds = %2, %8
  %12 = phi i32 [ %10, %8 ], [ %5, %2 ]
  %13 = and i32 %12, 15
  %14 = icmp ult i32 %13, 4
  br i1 %14, label %15, label %80

15:                                               ; preds = %11
  %16 = icmp eq %class.SkMatrix* %1, null
  br i1 %16, label %71, label %17

17:                                               ; preds = %15
  %18 = and i32 %12, 2
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %50, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %24 = load float, float* %23, align 4
  %25 = fcmp oeq float %22, 0.000000e+00
  %26 = fcmp oeq float %24, 0.000000e+00
  %27 = or i1 %25, %26
  br i1 %27, label %190, label %28

28:                                               ; preds = %20
  %29 = fdiv float 1.000000e+00, %22
  %30 = fdiv float 1.000000e+00, %24
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %31, align 4
  %32 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %32, align 4
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  store float 0.000000e+00, float* %33, align 4
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  store float 0.000000e+00, float* %34, align 4
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 0
  store float %29, float* %35, align 4
  %36 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  store float %30, float* %36, align 4
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %37, align 4
  %38 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %39 = load float, float* %38, align 4
  %40 = fmul float %29, %39
  %41 = fsub float -0.000000e+00, %40
  %42 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  store float %41, float* %42, align 4
  %43 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %44 = load float, float* %43, align 4
  %45 = fmul float %30, %44
  %46 = fsub float -0.000000e+00, %45
  %47 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  store float %46, float* %47, align 4
  %48 = or i32 %13, 16
  %49 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 1
  store i32 %48, i32* %49, align 4
  br label %190

50:                                               ; preds = %17
  %51 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %52 = load float, float* %51, align 4
  %53 = fsub float -0.000000e+00, %52
  %54 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %55 = load float, float* %54, align 4
  %56 = fsub float -0.000000e+00, %55
  %57 = fcmp une float %52, 0.000000e+00
  %58 = fcmp une float %55, 0.000000e+00
  %59 = or i1 %57, %58
  %60 = select i1 %59, i32 17, i32 16
  %61 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 0
  store float 1.000000e+00, float* %61, align 4
  %62 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  store float 0.000000e+00, float* %62, align 4
  %63 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  store float %53, float* %63, align 4
  %64 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  store float 0.000000e+00, float* %64, align 4
  %65 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  store float 1.000000e+00, float* %65, align 4
  %66 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  store float %56, float* %66, align 4
  %67 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %67, align 4
  %68 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %68, align 4
  %69 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %69, align 4
  %70 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 1
  store i32 %60, i32* %70, align 4
  br label %190

71:                                               ; preds = %15
  %72 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %73 = load float, float* %72, align 4
  %74 = fcmp une float %73, 0.000000e+00
  br i1 %74, label %75, label %79

75:                                               ; preds = %71
  %76 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %77 = load float, float* %76, align 4
  %78 = fcmp une float %77, 0.000000e+00
  br i1 %78, label %190, label %79

79:                                               ; preds = %75, %71
  br label %190

80:                                               ; preds = %11
  %81 = and i32 %12, 8
  %82 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %83 = icmp eq i32 %81, 0
  %84 = load float, float* %82, align 4
  %85 = fpext float %84 to double
  %86 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %87 = load float, float* %86, align 4
  %88 = fpext float %87 to double
  br i1 %83, label %125, label %89

89:                                               ; preds = %80
  %90 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %91 = load float, float* %90, align 4
  %92 = fpext float %91 to double
  %93 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %94 = load float, float* %93, align 4
  %95 = fpext float %94 to double
  %96 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %97 = load float, float* %96, align 4
  %98 = fpext float %97 to double
  %99 = fmul double %88, %92
  %100 = fmul double %95, %98
  %101 = fsub double %99, %100
  %102 = fmul double %101, %85
  %103 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %104 = load float, float* %103, align 4
  %105 = fpext float %104 to double
  %106 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %107 = load float, float* %106, align 4
  %108 = fpext float %107 to double
  %109 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %110 = load float, float* %109, align 4
  %111 = fpext float %110 to double
  %112 = fmul double %95, %108
  %113 = fmul double %92, %111
  %114 = fsub double %112, %113
  %115 = fmul double %114, %105
  %116 = fadd double %102, %115
  %117 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %118 = load float, float* %117, align 4
  %119 = fpext float %118 to double
  %120 = fmul double %98, %111
  %121 = fmul double %88, %108
  %122 = fsub double %120, %121
  %123 = fmul double %122, %119
  %124 = fadd double %123, %116
  br label %135

125:                                              ; preds = %80
  %126 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %127 = load float, float* %126, align 4
  %128 = fpext float %127 to double
  %129 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %130 = load float, float* %129, align 4
  %131 = fpext float %130 to double
  %132 = fmul double %85, %88
  %133 = fmul double %128, %131
  %134 = fsub double %132, %133
  br label %135

135:                                              ; preds = %89, %125
  %136 = phi double [ %124, %89 ], [ %134, %125 ]
  %137 = fptrunc double %136 to float
  %138 = tail call float @llvm.fabs.f32(float %137) #14
  %139 = fcmp ole float %138, 0x3DB0000000000000
  %140 = fdiv double 1.000000e+00, %136
  %141 = select i1 %139, double 0.000000e+00, double %140
  %142 = fcmp oeq double %141, 0.000000e+00
  br i1 %142, label %190, label %143

143:                                              ; preds = %135
  %144 = icmp eq %class.SkMatrix* %1, %0
  %145 = bitcast %class.SkMatrix* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %145) #14
  %146 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 1
  %147 = bitcast %class.SkMatrix* %3 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %147, align 16
  %148 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 4
  %149 = bitcast float* %148 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %149, align 16
  %150 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %150, align 16
  store i32 16, i32* %146, align 4
  %151 = icmp eq %class.SkMatrix* %1, null
  %152 = or i1 %144, %151
  %153 = select i1 %152, %class.SkMatrix* %3, %class.SkMatrix* %1
  %154 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %153, i64 0, i32 0, i64 0
  %155 = icmp ne i32 %81, 0
  call void @_ZN8SkMatrix10ComputeInvEPfPKfdb(float* %154, float* %82, double %141, i1 zeroext %155)
  %156 = load float, float* %154, align 4
  %157 = fmul float %156, 0.000000e+00
  %158 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %153, i64 0, i32 0, i64 1
  %159 = load float, float* %158, align 4
  %160 = fmul float %157, %159
  %161 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %153, i64 0, i32 0, i64 2
  %162 = load float, float* %161, align 4
  %163 = fmul float %160, %162
  %164 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %153, i64 0, i32 0, i64 3
  %165 = load float, float* %164, align 4
  %166 = fmul float %163, %165
  %167 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %153, i64 0, i32 0, i64 4
  %168 = load float, float* %167, align 4
  %169 = fmul float %166, %168
  %170 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %153, i64 0, i32 0, i64 5
  %171 = load float, float* %170, align 4
  %172 = fmul float %169, %171
  %173 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %153, i64 0, i32 0, i64 6
  %174 = load float, float* %173, align 4
  %175 = fmul float %172, %174
  %176 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %153, i64 0, i32 0, i64 7
  %177 = load float, float* %176, align 4
  %178 = fmul float %175, %177
  %179 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %153, i64 0, i32 0, i64 8
  %180 = load float, float* %179, align 4
  %181 = fmul float %178, %180
  %182 = fcmp oeq float %181, 0.000000e+00
  br i1 %182, label %183, label %188

183:                                              ; preds = %143
  %184 = load i32, i32* %4, align 4
  %185 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %153, i64 0, i32 1
  store i32 %184, i32* %185, align 4
  br i1 %144, label %186, label %188

186:                                              ; preds = %183
  %187 = bitcast %class.SkMatrix* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %187, i8* nonnull align 16 %145, i64 40, i1 false)
  br label %188

188:                                              ; preds = %183, %186, %143
  %189 = phi i1 [ false, %143 ], [ true, %186 ], [ true, %183 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %145) #14
  br label %190

190:                                              ; preds = %188, %135, %20, %28, %75, %79, %50
  %191 = phi i1 [ false, %20 ], [ true, %50 ], [ true, %75 ], [ false, %79 ], [ true, %28 ], [ %189, %188 ], [ false, %135 ]
  ret i1 %191
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkMatrix12Identity_ptsERKS_P7SkPointPKS2_i(%class.SkMatrix* nocapture readnone dereferenceable(40), %struct.SkPoint*, %struct.SkPoint* readonly, i32) #2 align 2 {
  %5 = icmp ne %struct.SkPoint* %1, %2
  %6 = icmp sgt i32 %3, 0
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %13

8:                                                ; preds = %4
  %9 = bitcast %struct.SkPoint* %1 to i8*
  %10 = bitcast %struct.SkPoint* %2 to i8*
  %11 = sext i32 %3 to i64
  %12 = shl nsw i64 %11, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %10, i64 %12, i1 false)
  br label %13

13:                                               ; preds = %8, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkMatrix9Trans_ptsERKS_P7SkPointPKS2_i(%class.SkMatrix* nocapture readonly dereferenceable(40), %struct.SkPoint* nocapture, %struct.SkPoint* nocapture readonly, i32) #7 align 2 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %95

6:                                                ; preds = %4
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %10 = load float, float* %9, align 4
  %11 = and i32 %3, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  %15 = load float, float* %14, align 4
  %16 = fadd float %8, %15
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  store float %16, float* %17, align 4
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  %19 = load float, float* %18, align 4
  %20 = fadd float %10, %19
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  store float %20, float* %21, align 4
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 1
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  br label %24

24:                                               ; preds = %6, %13
  %25 = phi %struct.SkPoint* [ %23, %13 ], [ %1, %6 ]
  %26 = phi %struct.SkPoint* [ %22, %13 ], [ %2, %6 ]
  %27 = insertelement <4 x float> undef, float %8, i32 0
  %28 = insertelement <4 x float> %27, float %10, i32 1
  %29 = insertelement <4 x float> %28, float %8, i32 2
  %30 = insertelement <4 x float> %29, float %10, i32 3
  %31 = and i32 %3, 2
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %40, label %33

33:                                               ; preds = %24
  %34 = bitcast %struct.SkPoint* %26 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 1
  %36 = fadd <4 x float> %30, %35
  %37 = bitcast %struct.SkPoint* %25 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 1
  %38 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %26, i64 2
  %39 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %25, i64 2
  br label %40

40:                                               ; preds = %24, %33
  %41 = phi %struct.SkPoint* [ %39, %33 ], [ %25, %24 ]
  %42 = phi %struct.SkPoint* [ %38, %33 ], [ %26, %24 ]
  %43 = lshr i32 %3, 2
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %95, label %45

45:                                               ; preds = %40
  %46 = and i32 %43, 1
  %47 = icmp eq i32 %43, 1
  br i1 %47, label %80, label %48

48:                                               ; preds = %45
  %49 = sub nsw i32 %43, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi %struct.SkPoint* [ %42, %48 ], [ %76, %50 ]
  %52 = phi %struct.SkPoint* [ %41, %48 ], [ %77, %50 ]
  %53 = phi i32 [ %49, %48 ], [ %78, %50 ]
  %54 = bitcast %struct.SkPoint* %51 to <4 x float>*
  %55 = load <4 x float>, <4 x float>* %54, align 1
  %56 = fadd <4 x float> %30, %55
  %57 = bitcast %struct.SkPoint* %52 to <4 x float>*
  store <4 x float> %56, <4 x float>* %57, align 1
  %58 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %51, i64 2
  %59 = bitcast %struct.SkPoint* %58 to <4 x float>*
  %60 = load <4 x float>, <4 x float>* %59, align 1
  %61 = fadd <4 x float> %30, %60
  %62 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %52, i64 2
  %63 = bitcast %struct.SkPoint* %62 to <4 x float>*
  store <4 x float> %61, <4 x float>* %63, align 1
  %64 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %51, i64 4
  %65 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %52, i64 4
  %66 = bitcast %struct.SkPoint* %64 to <4 x float>*
  %67 = load <4 x float>, <4 x float>* %66, align 1
  %68 = fadd <4 x float> %30, %67
  %69 = bitcast %struct.SkPoint* %65 to <4 x float>*
  store <4 x float> %68, <4 x float>* %69, align 1
  %70 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %51, i64 6
  %71 = bitcast %struct.SkPoint* %70 to <4 x float>*
  %72 = load <4 x float>, <4 x float>* %71, align 1
  %73 = fadd <4 x float> %30, %72
  %74 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %52, i64 6
  %75 = bitcast %struct.SkPoint* %74 to <4 x float>*
  store <4 x float> %73, <4 x float>* %75, align 1
  %76 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %51, i64 8
  %77 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %52, i64 8
  %78 = add i32 %53, -2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %50

80:                                               ; preds = %50, %45
  %81 = phi %struct.SkPoint* [ %42, %45 ], [ %76, %50 ]
  %82 = phi %struct.SkPoint* [ %41, %45 ], [ %77, %50 ]
  %83 = icmp eq i32 %46, 0
  br i1 %83, label %95, label %84

84:                                               ; preds = %80
  %85 = bitcast %struct.SkPoint* %81 to <4 x float>*
  %86 = load <4 x float>, <4 x float>* %85, align 1
  %87 = fadd <4 x float> %30, %86
  %88 = bitcast %struct.SkPoint* %82 to <4 x float>*
  store <4 x float> %87, <4 x float>* %88, align 1
  %89 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %81, i64 2
  %90 = bitcast %struct.SkPoint* %89 to <4 x float>*
  %91 = load <4 x float>, <4 x float>* %90, align 1
  %92 = fadd <4 x float> %30, %91
  %93 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %82, i64 2
  %94 = bitcast %struct.SkPoint* %93 to <4 x float>*
  store <4 x float> %92, <4 x float>* %94, align 1
  br label %95

95:                                               ; preds = %84, %80, %40, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkMatrix9Scale_ptsERKS_P7SkPointPKS2_i(%class.SkMatrix* nocapture readonly dereferenceable(40), %struct.SkPoint* nocapture, %struct.SkPoint* nocapture readonly, i32) #7 align 2 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %112

6:                                                ; preds = %4
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %14 = load float, float* %13, align 4
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %6
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  %19 = load float, float* %18, align 4
  %20 = fmul float %12, %19
  %21 = fadd float %8, %20
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  store float %21, float* %22, align 4
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  %24 = load float, float* %23, align 4
  %25 = fmul float %14, %24
  %26 = fadd float %10, %25
  %27 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  store float %26, float* %27, align 4
  %28 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 1
  %29 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  br label %30

30:                                               ; preds = %6, %17
  %31 = phi %struct.SkPoint* [ %29, %17 ], [ %1, %6 ]
  %32 = phi %struct.SkPoint* [ %28, %17 ], [ %2, %6 ]
  %33 = insertelement <4 x float> undef, float %8, i32 0
  %34 = insertelement <4 x float> %33, float %10, i32 1
  %35 = insertelement <4 x float> %34, float %8, i32 2
  %36 = insertelement <4 x float> %35, float %10, i32 3
  %37 = insertelement <4 x float> undef, float %12, i32 0
  %38 = insertelement <4 x float> %37, float %14, i32 1
  %39 = insertelement <4 x float> %38, float %12, i32 2
  %40 = insertelement <4 x float> %39, float %14, i32 3
  %41 = and i32 %3, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %51, label %43

43:                                               ; preds = %30
  %44 = bitcast %struct.SkPoint* %32 to <4 x float>*
  %45 = load <4 x float>, <4 x float>* %44, align 1
  %46 = fmul <4 x float> %40, %45
  %47 = fadd <4 x float> %36, %46
  %48 = bitcast %struct.SkPoint* %31 to <4 x float>*
  store <4 x float> %47, <4 x float>* %48, align 1
  %49 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %32, i64 2
  %50 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %31, i64 2
  br label %51

51:                                               ; preds = %30, %43
  %52 = phi %struct.SkPoint* [ %50, %43 ], [ %31, %30 ]
  %53 = phi %struct.SkPoint* [ %49, %43 ], [ %32, %30 ]
  %54 = lshr i32 %3, 2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %112, label %56

56:                                               ; preds = %51
  %57 = and i32 %54, 1
  %58 = icmp eq i32 %54, 1
  br i1 %58, label %95, label %59

59:                                               ; preds = %56
  %60 = sub nsw i32 %54, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi %struct.SkPoint* [ %53, %59 ], [ %91, %61 ]
  %63 = phi %struct.SkPoint* [ %52, %59 ], [ %92, %61 ]
  %64 = phi i32 [ %60, %59 ], [ %93, %61 ]
  %65 = bitcast %struct.SkPoint* %62 to <4 x float>*
  %66 = load <4 x float>, <4 x float>* %65, align 1
  %67 = fmul <4 x float> %40, %66
  %68 = fadd <4 x float> %36, %67
  %69 = bitcast %struct.SkPoint* %63 to <4 x float>*
  store <4 x float> %68, <4 x float>* %69, align 1
  %70 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %62, i64 2
  %71 = bitcast %struct.SkPoint* %70 to <4 x float>*
  %72 = load <4 x float>, <4 x float>* %71, align 1
  %73 = fmul <4 x float> %40, %72
  %74 = fadd <4 x float> %36, %73
  %75 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %63, i64 2
  %76 = bitcast %struct.SkPoint* %75 to <4 x float>*
  store <4 x float> %74, <4 x float>* %76, align 1
  %77 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %62, i64 4
  %78 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %63, i64 4
  %79 = bitcast %struct.SkPoint* %77 to <4 x float>*
  %80 = load <4 x float>, <4 x float>* %79, align 1
  %81 = fmul <4 x float> %40, %80
  %82 = fadd <4 x float> %36, %81
  %83 = bitcast %struct.SkPoint* %78 to <4 x float>*
  store <4 x float> %82, <4 x float>* %83, align 1
  %84 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %62, i64 6
  %85 = bitcast %struct.SkPoint* %84 to <4 x float>*
  %86 = load <4 x float>, <4 x float>* %85, align 1
  %87 = fmul <4 x float> %40, %86
  %88 = fadd <4 x float> %36, %87
  %89 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %63, i64 6
  %90 = bitcast %struct.SkPoint* %89 to <4 x float>*
  store <4 x float> %88, <4 x float>* %90, align 1
  %91 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %62, i64 8
  %92 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %63, i64 8
  %93 = add i32 %64, -2
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %61

95:                                               ; preds = %61, %56
  %96 = phi %struct.SkPoint* [ %53, %56 ], [ %91, %61 ]
  %97 = phi %struct.SkPoint* [ %52, %56 ], [ %92, %61 ]
  %98 = icmp eq i32 %57, 0
  br i1 %98, label %112, label %99

99:                                               ; preds = %95
  %100 = bitcast %struct.SkPoint* %96 to <4 x float>*
  %101 = load <4 x float>, <4 x float>* %100, align 1
  %102 = fmul <4 x float> %40, %101
  %103 = fadd <4 x float> %36, %102
  %104 = bitcast %struct.SkPoint* %97 to <4 x float>*
  store <4 x float> %103, <4 x float>* %104, align 1
  %105 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %96, i64 2
  %106 = bitcast %struct.SkPoint* %105 to <4 x float>*
  %107 = load <4 x float>, <4 x float>* %106, align 1
  %108 = fmul <4 x float> %40, %107
  %109 = fadd <4 x float> %36, %108
  %110 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %97, i64 2
  %111 = bitcast %struct.SkPoint* %110 to <4 x float>*
  store <4 x float> %109, <4 x float>* %111, align 1
  br label %112

112:                                              ; preds = %99, %95, %51, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN8SkMatrix9Persp_ptsERKS_P7SkPointPKS2_i(%class.SkMatrix* nocapture readonly dereferenceable(40), %struct.SkPoint* nocapture, %struct.SkPoint* nocapture readonly, i32) #0 align 2 {
  %5 = bitcast %struct.SkPoint* %1 to i8*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %147

7:                                                ; preds = %4
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %17 = add nsw i32 %3, -1
  %18 = zext i32 %17 to i64
  %19 = add nuw nsw i64 %18, 1
  %20 = icmp ult i64 %19, 4
  br i1 %20, label %103, label %21

21:                                               ; preds = %7
  %22 = add nsw i32 %3, -1
  %23 = zext i32 %22 to i64
  %24 = add nuw nsw i64 %23, 1
  %25 = getelementptr %struct.SkPoint, %struct.SkPoint* %1, i64 %24
  %26 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %24
  %27 = getelementptr %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %28 = bitcast float* %27 to i8*
  %29 = getelementptr i8, i8* %28, i64 1
  %30 = icmp ugt %struct.SkPoint* %26, %1
  %31 = icmp ugt %struct.SkPoint* %25, %2
  %32 = and i1 %30, %31
  %33 = icmp ugt i8* %29, %5
  %34 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %25, i64 0, i32 0
  %35 = icmp ult float* %16, %34
  %36 = and i1 %33, %35
  %37 = or i1 %32, %36
  br i1 %37, label %103, label %38

38:                                               ; preds = %21
  %39 = and i64 %19, 8589934588
  %40 = trunc i64 %39 to i32
  %41 = sub i32 %3, %40
  %42 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %39
  %43 = getelementptr %struct.SkPoint, %struct.SkPoint* %1, i64 %39
  br label %44

44:                                               ; preds = %44, %38
  %45 = phi i64 [ 0, %38 ], [ %99, %44 ]
  %46 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %45, i32 1
  %47 = getelementptr inbounds float, float* %46, i64 -1
  %48 = bitcast float* %47 to <8 x float>*
  %49 = load <8 x float>, <8 x float>* %48, align 4
  %50 = shufflevector <8 x float> %49, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %51 = shufflevector <8 x float> %49, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %52 = load float, float* %8, align 4, !alias.scope !2
  %53 = insertelement <4 x float> undef, float %52, i32 0
  %54 = shufflevector <4 x float> %53, <4 x float> undef, <4 x i32> zeroinitializer
  %55 = load float, float* %9, align 4, !alias.scope !2
  %56 = insertelement <4 x float> undef, float %55, i32 0
  %57 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> zeroinitializer
  %58 = fmul <4 x float> %50, %54
  %59 = fmul <4 x float> %51, %57
  %60 = fadd <4 x float> %58, %59
  %61 = load float, float* %10, align 4, !alias.scope !2
  %62 = insertelement <4 x float> undef, float %61, i32 0
  %63 = shufflevector <4 x float> %62, <4 x float> undef, <4 x i32> zeroinitializer
  %64 = fadd <4 x float> %63, %60
  %65 = load float, float* %11, align 4, !alias.scope !2
  %66 = insertelement <4 x float> undef, float %65, i32 0
  %67 = shufflevector <4 x float> %66, <4 x float> undef, <4 x i32> zeroinitializer
  %68 = load float, float* %12, align 4, !alias.scope !2
  %69 = insertelement <4 x float> undef, float %68, i32 0
  %70 = shufflevector <4 x float> %69, <4 x float> undef, <4 x i32> zeroinitializer
  %71 = fmul <4 x float> %50, %67
  %72 = fmul <4 x float> %51, %70
  %73 = fadd <4 x float> %71, %72
  %74 = load float, float* %13, align 4, !alias.scope !2
  %75 = insertelement <4 x float> undef, float %74, i32 0
  %76 = shufflevector <4 x float> %75, <4 x float> undef, <4 x i32> zeroinitializer
  %77 = fadd <4 x float> %76, %73
  %78 = load float, float* %14, align 4, !alias.scope !2
  %79 = insertelement <4 x float> undef, float %78, i32 0
  %80 = shufflevector <4 x float> %79, <4 x float> undef, <4 x i32> zeroinitializer
  %81 = fmul <4 x float> %50, %80
  %82 = load float, float* %15, align 4, !alias.scope !2
  %83 = insertelement <4 x float> undef, float %82, i32 0
  %84 = shufflevector <4 x float> %83, <4 x float> undef, <4 x i32> zeroinitializer
  %85 = fmul <4 x float> %51, %84
  %86 = load float, float* %16, align 4, !alias.scope !2
  %87 = insertelement <4 x float> undef, float %86, i32 0
  %88 = shufflevector <4 x float> %87, <4 x float> undef, <4 x i32> zeroinitializer
  %89 = fadd <4 x float> %85, %88
  %90 = fadd <4 x float> %81, %89
  %91 = fcmp une <4 x float> %90, zeroinitializer
  %92 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %90
  %93 = select <4 x i1> %91, <4 x float> %92, <4 x float> %90
  %94 = fmul <4 x float> %77, %93
  %95 = fmul <4 x float> %64, %93
  %96 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 %45, i32 0
  %97 = bitcast float* %96 to <8 x float>*
  %98 = shufflevector <4 x float> %95, <4 x float> %94, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %98, <8 x float>* %97, align 4
  %99 = add i64 %45, 4
  %100 = icmp eq i64 %99, %39
  br i1 %100, label %101, label %44, !llvm.loop !5

101:                                              ; preds = %44
  %102 = icmp eq i64 %19, %39
  br i1 %102, label %147, label %103

103:                                              ; preds = %101, %21, %7
  %104 = phi i32 [ %3, %21 ], [ %3, %7 ], [ %41, %101 ]
  %105 = phi %struct.SkPoint* [ %2, %21 ], [ %2, %7 ], [ %42, %101 ]
  %106 = phi %struct.SkPoint* [ %1, %21 ], [ %1, %7 ], [ %43, %101 ]
  br label %107

107:                                              ; preds = %103, %107
  %108 = phi i32 [ %145, %107 ], [ %104, %103 ]
  %109 = phi %struct.SkPoint* [ %115, %107 ], [ %105, %103 ]
  %110 = phi %struct.SkPoint* [ %144, %107 ], [ %106, %103 ]
  %111 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %109, i64 0, i32 1
  %112 = load float, float* %111, align 4
  %113 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %109, i64 0, i32 0
  %114 = load float, float* %113, align 4
  %115 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %109, i64 1
  %116 = load float, float* %8, align 4
  %117 = load float, float* %9, align 4
  %118 = fmul float %114, %116
  %119 = fmul float %112, %117
  %120 = fadd float %118, %119
  %121 = load float, float* %10, align 4
  %122 = fadd float %121, %120
  %123 = load float, float* %11, align 4
  %124 = load float, float* %12, align 4
  %125 = fmul float %114, %123
  %126 = fmul float %112, %124
  %127 = fadd float %125, %126
  %128 = load float, float* %13, align 4
  %129 = fadd float %128, %127
  %130 = load float, float* %14, align 4
  %131 = fmul float %114, %130
  %132 = load float, float* %15, align 4
  %133 = fmul float %112, %132
  %134 = load float, float* %16, align 4
  %135 = fadd float %133, %134
  %136 = fadd float %131, %135
  %137 = fcmp une float %136, 0.000000e+00
  %138 = fdiv float 1.000000e+00, %136
  %139 = select i1 %137, float %138, float %136
  %140 = fmul float %129, %139
  %141 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %110, i64 0, i32 1
  store float %140, float* %141, align 4
  %142 = fmul float %122, %139
  %143 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %110, i64 0, i32 0
  store float %142, float* %143, align 4
  %144 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %110, i64 1
  %145 = add nsw i32 %108, -1
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %107, !llvm.loop !7

147:                                              ; preds = %107, %101, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkMatrix11Affine_vptsERKS_P7SkPointPKS2_i(%class.SkMatrix* nocapture readonly dereferenceable(40), %struct.SkPoint* nocapture, %struct.SkPoint* nocapture readonly, i32) #7 align 2 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %99

6:                                                ; preds = %4
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %18 = load float, float* %17, align 4
  %19 = and i32 %3, 1
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %38, label %21

21:                                               ; preds = %6
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  %23 = load float, float* %22, align 4
  %24 = fmul float %12, %23
  %25 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = fmul float %16, %26
  %28 = fadd float %24, %27
  %29 = fadd float %8, %28
  %30 = fmul float %18, %23
  %31 = fmul float %14, %26
  %32 = fadd float %30, %31
  %33 = fadd float %10, %32
  %34 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  store float %29, float* %34, align 4
  %35 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  store float %33, float* %35, align 4
  %36 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 1
  %37 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  br label %38

38:                                               ; preds = %6, %21
  %39 = phi %struct.SkPoint* [ %37, %21 ], [ %1, %6 ]
  %40 = phi %struct.SkPoint* [ %36, %21 ], [ %2, %6 ]
  %41 = insertelement <4 x float> undef, float %8, i32 0
  %42 = insertelement <4 x float> %41, float %10, i32 1
  %43 = insertelement <4 x float> %42, float %8, i32 2
  %44 = insertelement <4 x float> %43, float %10, i32 3
  %45 = insertelement <4 x float> undef, float %12, i32 0
  %46 = insertelement <4 x float> %45, float %14, i32 1
  %47 = insertelement <4 x float> %46, float %12, i32 2
  %48 = insertelement <4 x float> %47, float %14, i32 3
  %49 = insertelement <4 x float> undef, float %16, i32 0
  %50 = insertelement <4 x float> %49, float %18, i32 1
  %51 = insertelement <4 x float> %50, float %16, i32 2
  %52 = insertelement <4 x float> %51, float %18, i32 3
  %53 = lshr i32 %3, 1
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %99, label %55

55:                                               ; preds = %38
  %56 = and i32 %53, 1
  %57 = icmp eq i32 %53, 1
  br i1 %57, label %86, label %58

58:                                               ; preds = %55
  %59 = sub nsw i32 %53, %56
  br label %60

60:                                               ; preds = %60, %58
  %61 = phi %struct.SkPoint* [ %40, %58 ], [ %82, %60 ]
  %62 = phi %struct.SkPoint* [ %39, %58 ], [ %83, %60 ]
  %63 = phi i32 [ %59, %58 ], [ %84, %60 ]
  %64 = bitcast %struct.SkPoint* %61 to <4 x float>*
  %65 = load <4 x float>, <4 x float>* %64, align 1
  %66 = shufflevector <4 x float> %65, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %67 = fmul <4 x float> %48, %65
  %68 = fmul <4 x float> %52, %66
  %69 = fadd <4 x float> %67, %68
  %70 = fadd <4 x float> %44, %69
  %71 = bitcast %struct.SkPoint* %62 to <4 x float>*
  store <4 x float> %70, <4 x float>* %71, align 1
  %72 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %61, i64 2
  %73 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %62, i64 2
  %74 = bitcast %struct.SkPoint* %72 to <4 x float>*
  %75 = load <4 x float>, <4 x float>* %74, align 1
  %76 = shufflevector <4 x float> %75, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %77 = fmul <4 x float> %48, %75
  %78 = fmul <4 x float> %52, %76
  %79 = fadd <4 x float> %77, %78
  %80 = fadd <4 x float> %44, %79
  %81 = bitcast %struct.SkPoint* %73 to <4 x float>*
  store <4 x float> %80, <4 x float>* %81, align 1
  %82 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %61, i64 4
  %83 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %62, i64 4
  %84 = add i32 %63, -2
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %60

86:                                               ; preds = %60, %55
  %87 = phi %struct.SkPoint* [ %40, %55 ], [ %82, %60 ]
  %88 = phi %struct.SkPoint* [ %39, %55 ], [ %83, %60 ]
  %89 = icmp eq i32 %56, 0
  br i1 %89, label %99, label %90

90:                                               ; preds = %86
  %91 = bitcast %struct.SkPoint* %87 to <4 x float>*
  %92 = load <4 x float>, <4 x float>* %91, align 1
  %93 = shufflevector <4 x float> %92, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %94 = fmul <4 x float> %48, %92
  %95 = fmul <4 x float> %52, %93
  %96 = fadd <4 x float> %94, %95
  %97 = fadd <4 x float> %44, %96
  %98 = bitcast %struct.SkPoint* %88 to <4 x float>*
  store <4 x float> %97, <4 x float>* %98, align 1
  br label %99

99:                                               ; preds = %90, %86, %38, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkMatrixPriv30MapHomogeneousPointsWithStrideERK8SkMatrixP8SkPoint3mPKS3_mi(%class.SkMatrix* nocapture dereferenceable(40), %struct.SkPoint3*, i64, %struct.SkPoint3* readonly, i64, i32) local_unnamed_addr #2 align 2 {
  %7 = icmp sgt i32 %5, 0
  br i1 %7, label %8, label %129

8:                                                ; preds = %6
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = trunc i32 %10 to i8
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %8
  %14 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %15 = zext i8 %14 to i32
  store i32 %15, i32* %9, align 4
  br label %16

16:                                               ; preds = %8, %13
  %17 = phi i32 [ %15, %13 ], [ %10, %8 ]
  %18 = and i32 %17, 15
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %30, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %22 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %24 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %25 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %26 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %27 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  br label %65

30:                                               ; preds = %16
  %31 = icmp eq %struct.SkPoint3* %3, %1
  br i1 %31, label %129, label %32

32:                                               ; preds = %30
  %33 = icmp eq i64 %4, 12
  %34 = icmp eq i64 %2, 12
  %35 = and i1 %34, %33
  br i1 %35, label %42, label %36

36:                                               ; preds = %32
  %37 = add i32 %5, -1
  %38 = and i32 %5, 3
  %39 = icmp ult i32 %37, 3
  br i1 %39, label %113, label %40

40:                                               ; preds = %36
  %41 = sub i32 %5, %38
  br label %47

42:                                               ; preds = %32
  %43 = bitcast %struct.SkPoint3* %1 to i8*
  %44 = bitcast %struct.SkPoint3* %3 to i8*
  %45 = sext i32 %5 to i64
  %46 = mul nsw i64 %45, 12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %43, i8* align 4 %44, i64 %46, i1 false)
  br label %129

47:                                               ; preds = %47, %40
  %48 = phi %struct.SkPoint3* [ %1, %40 ], [ %60, %47 ]
  %49 = phi %struct.SkPoint3* [ %3, %40 ], [ %62, %47 ]
  %50 = phi i32 [ %41, %40 ], [ %63, %47 ]
  %51 = bitcast %struct.SkPoint3* %48 to i8*
  %52 = bitcast %struct.SkPoint3* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* align 4 %52, i64 12, i1 false)
  %53 = getelementptr inbounds i8, i8* %51, i64 %2
  %54 = getelementptr inbounds i8, i8* %52, i64 %4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %53, i8* align 4 %54, i64 12, i1 false)
  %55 = getelementptr inbounds i8, i8* %53, i64 %2
  %56 = getelementptr inbounds i8, i8* %54, i64 %4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64 12, i1 false)
  %57 = getelementptr inbounds i8, i8* %55, i64 %2
  %58 = getelementptr inbounds i8, i8* %56, i64 %4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 %58, i64 12, i1 false)
  %59 = getelementptr inbounds i8, i8* %57, i64 %2
  %60 = bitcast i8* %59 to %struct.SkPoint3*
  %61 = getelementptr inbounds i8, i8* %58, i64 %4
  %62 = bitcast i8* %61 to %struct.SkPoint3*
  %63 = add i32 %50, -4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %110, label %47

65:                                               ; preds = %20, %65
  %66 = phi i32 [ %108, %65 ], [ %5, %20 ]
  %67 = phi %struct.SkPoint3* [ %77, %65 ], [ %3, %20 ]
  %68 = phi %struct.SkPoint3* [ %107, %65 ], [ %1, %20 ]
  %69 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %67, i64 0, i32 0
  %70 = load float, float* %69, align 4
  %71 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %67, i64 0, i32 1
  %72 = load float, float* %71, align 4
  %73 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %67, i64 0, i32 2
  %74 = load float, float* %73, align 4
  %75 = bitcast %struct.SkPoint3* %67 to i8*
  %76 = getelementptr inbounds i8, i8* %75, i64 %4
  %77 = bitcast i8* %76 to %struct.SkPoint3*
  %78 = load float, float* %21, align 4
  %79 = load float, float* %22, align 4
  %80 = load float, float* %23, align 4
  %81 = fmul float %70, %78
  %82 = fmul float %72, %79
  %83 = fadd float %81, %82
  %84 = fmul float %74, %80
  %85 = fadd float %83, %84
  %86 = load float, float* %24, align 4
  %87 = load float, float* %25, align 4
  %88 = load float, float* %26, align 4
  %89 = fmul float %70, %86
  %90 = fmul float %72, %87
  %91 = fadd float %89, %90
  %92 = fmul float %74, %88
  %93 = fadd float %91, %92
  %94 = load float, float* %27, align 4
  %95 = load float, float* %28, align 4
  %96 = load float, float* %29, align 4
  %97 = fmul float %70, %94
  %98 = fmul float %72, %95
  %99 = fadd float %97, %98
  %100 = fmul float %74, %96
  %101 = fadd float %99, %100
  %102 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %68, i64 0, i32 0
  store float %85, float* %102, align 4
  %103 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %68, i64 0, i32 1
  store float %93, float* %103, align 4
  %104 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %68, i64 0, i32 2
  store float %101, float* %104, align 4
  %105 = bitcast %struct.SkPoint3* %68 to i8*
  %106 = getelementptr inbounds i8, i8* %105, i64 %2
  %107 = bitcast i8* %106 to %struct.SkPoint3*
  %108 = add nsw i32 %66, -1
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %129, label %65

110:                                              ; preds = %47
  %111 = bitcast i8* %59 to %struct.SkPoint3*
  %112 = bitcast i8* %61 to %struct.SkPoint3*
  br label %113

113:                                              ; preds = %110, %36
  %114 = phi %struct.SkPoint3* [ %1, %36 ], [ %111, %110 ]
  %115 = phi %struct.SkPoint3* [ %3, %36 ], [ %112, %110 ]
  %116 = icmp eq i32 %38, 0
  br i1 %116, label %129, label %117

117:                                              ; preds = %113, %117
  %118 = phi %struct.SkPoint3* [ %124, %117 ], [ %114, %113 ]
  %119 = phi %struct.SkPoint3* [ %126, %117 ], [ %115, %113 ]
  %120 = phi i32 [ %127, %117 ], [ %38, %113 ]
  %121 = bitcast %struct.SkPoint3* %118 to i8*
  %122 = bitcast %struct.SkPoint3* %119 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %121, i8* align 4 %122, i64 12, i1 false)
  %123 = getelementptr inbounds i8, i8* %121, i64 %2
  %124 = bitcast i8* %123 to %struct.SkPoint3*
  %125 = getelementptr inbounds i8, i8* %122, i64 %4
  %126 = bitcast i8* %125 to %struct.SkPoint3*
  %127 = add i32 %120, -1
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %117, !llvm.loop !8

129:                                              ; preds = %65, %113, %117, %30, %42, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkMatrix20mapHomogeneousPointsEP8SkPoint3PKS0_i(%class.SkMatrix* nocapture, %struct.SkPoint3*, %struct.SkPoint3* readonly, i32) local_unnamed_addr #2 align 2 {
  %5 = bitcast %struct.SkPoint3* %1 to i8*
  %6 = bitcast %struct.SkPoint3* %2 to i8*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %167

8:                                                ; preds = %4
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = trunc i32 %10 to i8
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %8
  %14 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %15 = zext i8 %14 to i32
  store i32 %15, i32* %9, align 4
  br label %16

16:                                               ; preds = %13, %8
  %17 = phi i32 [ %15, %13 ], [ %10, %8 ]
  %18 = and i32 %17, 15
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %121, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %22 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %24 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %25 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %26 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %27 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %30 = add nsw i32 %3, -1
  %31 = zext i32 %30 to i64
  %32 = add nuw nsw i64 %31, 1
  %33 = icmp ult i64 %32, 4
  br i1 %33, label %34, label %38

34:                                               ; preds = %119, %38, %20
  %35 = phi i32 [ %3, %38 ], [ %3, %20 ], [ %58, %119 ]
  %36 = phi %struct.SkPoint3* [ %2, %38 ], [ %2, %20 ], [ %59, %119 ]
  %37 = phi %struct.SkPoint3* [ %1, %38 ], [ %1, %20 ], [ %60, %119 ]
  br label %126

38:                                               ; preds = %20
  %39 = add nsw i32 %3, -1
  %40 = zext i32 %39 to i64
  %41 = add nuw nsw i64 %40, 1
  %42 = getelementptr %struct.SkPoint3, %struct.SkPoint3* %1, i64 %41
  %43 = getelementptr %struct.SkPoint3, %struct.SkPoint3* %2, i64 %41
  %44 = getelementptr %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %45 = bitcast float* %44 to i8*
  %46 = getelementptr i8, i8* %45, i64 1
  %47 = icmp ugt %struct.SkPoint3* %43, %1
  %48 = icmp ugt %struct.SkPoint3* %42, %2
  %49 = and i1 %47, %48
  %50 = icmp ugt i8* %46, %5
  %51 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %42, i64 0, i32 0
  %52 = icmp ult float* %29, %51
  %53 = and i1 %50, %52
  %54 = or i1 %49, %53
  br i1 %54, label %34, label %55

55:                                               ; preds = %38
  %56 = and i64 %32, 8589934588
  %57 = trunc i64 %56 to i32
  %58 = sub i32 %3, %57
  %59 = getelementptr %struct.SkPoint3, %struct.SkPoint3* %2, i64 %56
  %60 = getelementptr %struct.SkPoint3, %struct.SkPoint3* %1, i64 %56
  br label %61

61:                                               ; preds = %61, %55
  %62 = phi i64 [ 0, %55 ], [ %117, %61 ]
  %63 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %2, i64 %62, i32 0
  %64 = bitcast float* %63 to <12 x float>*
  %65 = load <12 x float>, <12 x float>* %64, align 4
  %66 = shufflevector <12 x float> %65, <12 x float> undef, <4 x i32> <i32 0, i32 3, i32 6, i32 9>
  %67 = shufflevector <12 x float> %65, <12 x float> undef, <4 x i32> <i32 1, i32 4, i32 7, i32 10>
  %68 = shufflevector <12 x float> %65, <12 x float> undef, <4 x i32> <i32 2, i32 5, i32 8, i32 11>
  %69 = load float, float* %21, align 4, !alias.scope !10
  %70 = insertelement <4 x float> undef, float %69, i32 0
  %71 = shufflevector <4 x float> %70, <4 x float> undef, <4 x i32> zeroinitializer
  %72 = load float, float* %22, align 4, !alias.scope !10
  %73 = insertelement <4 x float> undef, float %72, i32 0
  %74 = shufflevector <4 x float> %73, <4 x float> undef, <4 x i32> zeroinitializer
  %75 = load float, float* %23, align 4, !alias.scope !10
  %76 = insertelement <4 x float> undef, float %75, i32 0
  %77 = shufflevector <4 x float> %76, <4 x float> undef, <4 x i32> zeroinitializer
  %78 = fmul <4 x float> %66, %71
  %79 = fmul <4 x float> %67, %74
  %80 = fadd <4 x float> %78, %79
  %81 = fmul <4 x float> %68, %77
  %82 = fadd <4 x float> %80, %81
  %83 = load float, float* %24, align 4, !alias.scope !10
  %84 = insertelement <4 x float> undef, float %83, i32 0
  %85 = shufflevector <4 x float> %84, <4 x float> undef, <4 x i32> zeroinitializer
  %86 = load float, float* %25, align 4, !alias.scope !10
  %87 = insertelement <4 x float> undef, float %86, i32 0
  %88 = shufflevector <4 x float> %87, <4 x float> undef, <4 x i32> zeroinitializer
  %89 = load float, float* %26, align 4, !alias.scope !10
  %90 = insertelement <4 x float> undef, float %89, i32 0
  %91 = shufflevector <4 x float> %90, <4 x float> undef, <4 x i32> zeroinitializer
  %92 = fmul <4 x float> %66, %85
  %93 = fmul <4 x float> %67, %88
  %94 = fadd <4 x float> %92, %93
  %95 = fmul <4 x float> %68, %91
  %96 = fadd <4 x float> %94, %95
  %97 = load float, float* %27, align 4, !alias.scope !10
  %98 = insertelement <4 x float> undef, float %97, i32 0
  %99 = shufflevector <4 x float> %98, <4 x float> undef, <4 x i32> zeroinitializer
  %100 = load float, float* %28, align 4, !alias.scope !10
  %101 = insertelement <4 x float> undef, float %100, i32 0
  %102 = shufflevector <4 x float> %101, <4 x float> undef, <4 x i32> zeroinitializer
  %103 = load float, float* %29, align 4, !alias.scope !10
  %104 = insertelement <4 x float> undef, float %103, i32 0
  %105 = shufflevector <4 x float> %104, <4 x float> undef, <4 x i32> zeroinitializer
  %106 = fmul <4 x float> %66, %99
  %107 = fmul <4 x float> %67, %102
  %108 = fadd <4 x float> %106, %107
  %109 = fmul <4 x float> %68, %105
  %110 = fadd <4 x float> %108, %109
  %111 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %62, i32 2
  %112 = getelementptr inbounds float, float* %111, i64 -2
  %113 = bitcast float* %112 to <12 x float>*
  %114 = shufflevector <4 x float> %82, <4 x float> %96, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %115 = shufflevector <4 x float> %110, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %116 = shufflevector <8 x float> %114, <8 x float> %115, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %116, <12 x float>* %113, align 4
  %117 = add i64 %62, 4
  %118 = icmp eq i64 %117, %56
  br i1 %118, label %119, label %61, !llvm.loop !13

119:                                              ; preds = %61
  %120 = icmp eq i64 %32, %56
  br i1 %120, label %167, label %34

121:                                              ; preds = %16
  %122 = icmp eq %struct.SkPoint3* %2, %1
  br i1 %122, label %167, label %123

123:                                              ; preds = %121
  %124 = sext i32 %3 to i64
  %125 = mul nsw i64 %124, 12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 %125, i1 false) #14
  br label %167

126:                                              ; preds = %34, %126
  %127 = phi i32 [ %165, %126 ], [ %35, %34 ]
  %128 = phi %struct.SkPoint3* [ %136, %126 ], [ %36, %34 ]
  %129 = phi %struct.SkPoint3* [ %164, %126 ], [ %37, %34 ]
  %130 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %128, i64 0, i32 0
  %131 = load float, float* %130, align 4
  %132 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %128, i64 0, i32 1
  %133 = load float, float* %132, align 4
  %134 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %128, i64 0, i32 2
  %135 = load float, float* %134, align 4
  %136 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %128, i64 1
  %137 = load float, float* %21, align 4
  %138 = load float, float* %22, align 4
  %139 = load float, float* %23, align 4
  %140 = fmul float %131, %137
  %141 = fmul float %133, %138
  %142 = fadd float %140, %141
  %143 = fmul float %135, %139
  %144 = fadd float %142, %143
  %145 = load float, float* %24, align 4
  %146 = load float, float* %25, align 4
  %147 = load float, float* %26, align 4
  %148 = fmul float %131, %145
  %149 = fmul float %133, %146
  %150 = fadd float %148, %149
  %151 = fmul float %135, %147
  %152 = fadd float %150, %151
  %153 = load float, float* %27, align 4
  %154 = load float, float* %28, align 4
  %155 = load float, float* %29, align 4
  %156 = fmul float %131, %153
  %157 = fmul float %133, %154
  %158 = fadd float %156, %157
  %159 = fmul float %135, %155
  %160 = fadd float %158, %159
  %161 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %129, i64 0, i32 0
  store float %144, float* %161, align 4
  %162 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %129, i64 0, i32 1
  store float %152, float* %162, align 4
  %163 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %129, i64 0, i32 2
  store float %160, float* %163, align 4
  %164 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %129, i64 1
  %165 = add nsw i32 %127, -1
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %126, !llvm.loop !14

167:                                              ; preds = %126, %119, %4, %121, %123
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK8SkMatrix20mapHomogeneousPointsEP8SkPoint3PK7SkPointi(%class.SkMatrix*, %struct.SkPoint3* nocapture, %struct.SkPoint* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %5 = bitcast %struct.SkPoint3* %1 to i8*
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = trunc i32 %7 to i8
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %4
  %11 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %12 = zext i8 %11 to i32
  store i32 %12, i32* %6, align 4
  br label %13

13:                                               ; preds = %4, %10
  %14 = phi i32 [ %12, %10 ], [ %7, %4 ]
  %15 = and i32 %14, 15
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %54

17:                                               ; preds = %13
  %18 = icmp sgt i32 %3, 0
  br i1 %18, label %19, label %310

19:                                               ; preds = %17
  %20 = zext i32 %3 to i64
  %21 = and i64 %20, 1
  %22 = icmp eq i32 %3, 1
  br i1 %22, label %295, label %23

23:                                               ; preds = %19
  %24 = sub nsw i64 %20, %21
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i64 [ 0, %23 ], [ %51, %25 ]
  %27 = phi i64 [ %24, %23 ], [ %52, %25 ]
  %28 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %26
  %29 = bitcast %struct.SkPoint* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %26, i32 1
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %26
  %35 = bitcast %struct.SkPoint3* %34 to i32*
  store i32 %30, i32* %35, align 4
  %36 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %26, i32 1
  %37 = bitcast float* %36 to i32*
  store i32 %33, i32* %37, align 4
  %38 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %26, i32 2
  store float 1.000000e+00, float* %38, align 4
  %39 = or i64 %26, 1
  %40 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %39
  %41 = bitcast %struct.SkPoint* %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %39, i32 1
  %44 = bitcast float* %43 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %39
  %47 = bitcast %struct.SkPoint3* %46 to i32*
  store i32 %42, i32* %47, align 4
  %48 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %39, i32 1
  %49 = bitcast float* %48 to i32*
  store i32 %45, i32* %49, align 4
  %50 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %39, i32 2
  store float 1.000000e+00, float* %50, align 4
  %51 = add nuw nsw i64 %26, 2
  %52 = add i64 %27, -2
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %295, label %25

54:                                               ; preds = %13
  %55 = and i32 %14, 192
  %56 = icmp eq i32 %55, 128
  br i1 %56, label %57, label %72

57:                                               ; preds = %54
  %58 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %59 = load float, float* %58, align 4
  %60 = fcmp une float %59, 0.000000e+00
  br i1 %60, label %70, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %63 = load float, float* %62, align 4
  %64 = fcmp une float %63, 0.000000e+00
  br i1 %64, label %70, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %67 = load float, float* %66, align 4
  %68 = fcmp une float %67, 1.000000e+00
  br i1 %68, label %70, label %69

69:                                               ; preds = %65
  br label %70

70:                                               ; preds = %69, %65, %61, %57
  %71 = phi i32 [ 192, %69 ], [ 15, %65 ], [ 15, %61 ], [ 15, %57 ]
  store i32 %71, i32* %6, align 4
  br label %72

72:                                               ; preds = %54, %70
  %73 = phi i32 [ %71, %70 ], [ %14, %54 ]
  %74 = and i32 %73, 8
  %75 = icmp eq i32 %74, 0
  %76 = icmp sgt i32 %3, 0
  br i1 %75, label %166, label %77

77:                                               ; preds = %72
  br i1 %76, label %78, label %310

78:                                               ; preds = %77
  %79 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %80 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %81 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %82 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %83 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %84 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %85 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %86 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %87 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %88 = zext i32 %3 to i64
  %89 = icmp ult i32 %3, 4
  br i1 %89, label %90, label %92

90:                                               ; preds = %164, %92, %78
  %91 = phi i64 [ 0, %92 ], [ 0, %78 ], [ %109, %164 ]
  br label %238

92:                                               ; preds = %78
  %93 = getelementptr %struct.SkPoint3, %struct.SkPoint3* %1, i64 %88
  %94 = getelementptr %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %95 = bitcast float* %94 to i8*
  %96 = getelementptr i8, i8* %95, i64 1
  %97 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %88
  %98 = icmp ugt i8* %96, %5
  %99 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %93, i64 0, i32 0
  %100 = icmp ult float* %87, %99
  %101 = and i1 %98, %100
  %102 = bitcast %struct.SkPoint* %97 to %struct.SkPoint3*
  %103 = icmp ugt %struct.SkPoint3* %102, %1
  %104 = bitcast %struct.SkPoint3* %93 to %struct.SkPoint*
  %105 = icmp ugt %struct.SkPoint* %104, %2
  %106 = and i1 %103, %105
  %107 = or i1 %101, %106
  br i1 %107, label %90, label %108

108:                                              ; preds = %92
  %109 = and i64 %88, 4294967292
  br label %110

110:                                              ; preds = %110, %108
  %111 = phi i64 [ 0, %108 ], [ %162, %110 ]
  %112 = load float, float* %79, align 4, !alias.scope !15
  %113 = insertelement <4 x float> undef, float %112, i32 0
  %114 = shufflevector <4 x float> %113, <4 x float> undef, <4 x i32> zeroinitializer
  %115 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %111, i32 0
  %116 = bitcast float* %115 to <8 x float>*
  %117 = load <8 x float>, <8 x float>* %116, align 4
  %118 = shufflevector <8 x float> %117, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %119 = shufflevector <8 x float> %117, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %120 = fmul <4 x float> %114, %118
  %121 = load float, float* %80, align 4, !alias.scope !15
  %122 = insertelement <4 x float> undef, float %121, i32 0
  %123 = shufflevector <4 x float> %122, <4 x float> undef, <4 x i32> zeroinitializer
  %124 = fmul <4 x float> %123, %119
  %125 = fadd <4 x float> %120, %124
  %126 = load float, float* %81, align 4, !alias.scope !15
  %127 = insertelement <4 x float> undef, float %126, i32 0
  %128 = shufflevector <4 x float> %127, <4 x float> undef, <4 x i32> zeroinitializer
  %129 = fadd <4 x float> %128, %125
  %130 = load float, float* %82, align 4, !alias.scope !15
  %131 = insertelement <4 x float> undef, float %130, i32 0
  %132 = shufflevector <4 x float> %131, <4 x float> undef, <4 x i32> zeroinitializer
  %133 = fmul <4 x float> %118, %132
  %134 = load float, float* %83, align 4, !alias.scope !15
  %135 = insertelement <4 x float> undef, float %134, i32 0
  %136 = shufflevector <4 x float> %135, <4 x float> undef, <4 x i32> zeroinitializer
  %137 = fmul <4 x float> %119, %136
  %138 = fadd <4 x float> %133, %137
  %139 = load float, float* %84, align 4, !alias.scope !15
  %140 = insertelement <4 x float> undef, float %139, i32 0
  %141 = shufflevector <4 x float> %140, <4 x float> undef, <4 x i32> zeroinitializer
  %142 = fadd <4 x float> %141, %138
  %143 = load float, float* %85, align 4, !alias.scope !15
  %144 = insertelement <4 x float> undef, float %143, i32 0
  %145 = shufflevector <4 x float> %144, <4 x float> undef, <4 x i32> zeroinitializer
  %146 = fmul <4 x float> %118, %145
  %147 = load float, float* %86, align 4, !alias.scope !15
  %148 = insertelement <4 x float> undef, float %147, i32 0
  %149 = shufflevector <4 x float> %148, <4 x float> undef, <4 x i32> zeroinitializer
  %150 = fmul <4 x float> %119, %149
  %151 = fadd <4 x float> %146, %150
  %152 = load float, float* %87, align 4, !alias.scope !15
  %153 = insertelement <4 x float> undef, float %152, i32 0
  %154 = shufflevector <4 x float> %153, <4 x float> undef, <4 x i32> zeroinitializer
  %155 = fadd <4 x float> %154, %151
  %156 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %111, i32 2
  %157 = getelementptr inbounds float, float* %156, i64 -2
  %158 = bitcast float* %157 to <12 x float>*
  %159 = shufflevector <4 x float> %129, <4 x float> %142, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %160 = shufflevector <4 x float> %155, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %161 = shufflevector <8 x float> %159, <8 x float> %160, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %161, <12 x float>* %158, align 4
  %162 = add i64 %111, 4
  %163 = icmp eq i64 %162, %109
  br i1 %163, label %164, label %110, !llvm.loop !18

164:                                              ; preds = %110
  %165 = icmp eq i64 %109, %88
  br i1 %165, label %310, label %90

166:                                              ; preds = %72
  br i1 %76, label %167, label %310

167:                                              ; preds = %166
  %168 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %169 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %170 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %171 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %172 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %173 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %174 = zext i32 %3 to i64
  %175 = icmp ult i32 %3, 4
  br i1 %175, label %176, label %178

176:                                              ; preds = %236, %178, %167
  %177 = phi i64 [ 0, %178 ], [ 0, %167 ], [ %195, %236 ]
  br label %270

178:                                              ; preds = %167
  %179 = getelementptr %struct.SkPoint3, %struct.SkPoint3* %1, i64 %174
  %180 = getelementptr %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %181 = bitcast float* %180 to i8*
  %182 = getelementptr i8, i8* %181, i64 1
  %183 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %174
  %184 = icmp ugt i8* %182, %5
  %185 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %179, i64 0, i32 0
  %186 = icmp ult float* %173, %185
  %187 = and i1 %184, %186
  %188 = bitcast %struct.SkPoint* %183 to %struct.SkPoint3*
  %189 = icmp ugt %struct.SkPoint3* %188, %1
  %190 = bitcast %struct.SkPoint3* %179 to %struct.SkPoint*
  %191 = icmp ugt %struct.SkPoint* %190, %2
  %192 = and i1 %189, %191
  %193 = or i1 %187, %192
  br i1 %193, label %176, label %194

194:                                              ; preds = %178
  %195 = and i64 %174, 4294967292
  br label %196

196:                                              ; preds = %196, %194
  %197 = phi i64 [ 0, %194 ], [ %234, %196 ]
  %198 = load float, float* %168, align 4, !alias.scope !19
  %199 = insertelement <4 x float> undef, float %198, i32 0
  %200 = shufflevector <4 x float> %199, <4 x float> undef, <4 x i32> zeroinitializer
  %201 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %197, i32 0
  %202 = bitcast float* %201 to <8 x float>*
  %203 = load <8 x float>, <8 x float>* %202, align 4
  %204 = shufflevector <8 x float> %203, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %205 = shufflevector <8 x float> %203, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %206 = fmul <4 x float> %200, %204
  %207 = load float, float* %169, align 4, !alias.scope !19
  %208 = insertelement <4 x float> undef, float %207, i32 0
  %209 = shufflevector <4 x float> %208, <4 x float> undef, <4 x i32> zeroinitializer
  %210 = fmul <4 x float> %209, %205
  %211 = fadd <4 x float> %206, %210
  %212 = load float, float* %170, align 4, !alias.scope !19
  %213 = insertelement <4 x float> undef, float %212, i32 0
  %214 = shufflevector <4 x float> %213, <4 x float> undef, <4 x i32> zeroinitializer
  %215 = fadd <4 x float> %214, %211
  %216 = load float, float* %171, align 4, !alias.scope !19
  %217 = insertelement <4 x float> undef, float %216, i32 0
  %218 = shufflevector <4 x float> %217, <4 x float> undef, <4 x i32> zeroinitializer
  %219 = fmul <4 x float> %204, %218
  %220 = load float, float* %172, align 4, !alias.scope !19
  %221 = insertelement <4 x float> undef, float %220, i32 0
  %222 = shufflevector <4 x float> %221, <4 x float> undef, <4 x i32> zeroinitializer
  %223 = fmul <4 x float> %205, %222
  %224 = fadd <4 x float> %219, %223
  %225 = load float, float* %173, align 4, !alias.scope !19
  %226 = insertelement <4 x float> undef, float %225, i32 0
  %227 = shufflevector <4 x float> %226, <4 x float> undef, <4 x i32> zeroinitializer
  %228 = fadd <4 x float> %227, %224
  %229 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %197, i32 2
  %230 = getelementptr inbounds float, float* %229, i64 -2
  %231 = bitcast float* %230 to <12 x float>*
  %232 = shufflevector <4 x float> %215, <4 x float> %228, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %233 = shufflevector <8 x float> %232, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float undef, float undef, float undef, float undef>, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %233, <12 x float>* %231, align 4
  %234 = add i64 %197, 4
  %235 = icmp eq i64 %234, %195
  br i1 %235, label %236, label %196, !llvm.loop !22

236:                                              ; preds = %196
  %237 = icmp eq i64 %195, %174
  br i1 %237, label %310, label %176

238:                                              ; preds = %90, %238
  %239 = phi i64 [ %268, %238 ], [ %91, %90 ]
  %240 = load float, float* %79, align 4
  %241 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %239, i32 0
  %242 = load float, float* %241, align 4
  %243 = fmul float %240, %242
  %244 = load float, float* %80, align 4
  %245 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %239, i32 1
  %246 = load float, float* %245, align 4
  %247 = fmul float %244, %246
  %248 = fadd float %243, %247
  %249 = load float, float* %81, align 4
  %250 = fadd float %249, %248
  %251 = load float, float* %82, align 4
  %252 = fmul float %242, %251
  %253 = load float, float* %83, align 4
  %254 = fmul float %246, %253
  %255 = fadd float %252, %254
  %256 = load float, float* %84, align 4
  %257 = fadd float %256, %255
  %258 = load float, float* %85, align 4
  %259 = fmul float %242, %258
  %260 = load float, float* %86, align 4
  %261 = fmul float %246, %260
  %262 = fadd float %259, %261
  %263 = load float, float* %87, align 4
  %264 = fadd float %263, %262
  %265 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %239, i32 0
  store float %250, float* %265, align 4
  %266 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %239, i32 1
  store float %257, float* %266, align 4
  %267 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %239, i32 2
  store float %264, float* %267, align 4
  %268 = add nuw nsw i64 %239, 1
  %269 = icmp eq i64 %268, %88
  br i1 %269, label %310, label %238, !llvm.loop !23

270:                                              ; preds = %176, %270
  %271 = phi i64 [ %293, %270 ], [ %177, %176 ]
  %272 = load float, float* %168, align 4
  %273 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %271, i32 0
  %274 = load float, float* %273, align 4
  %275 = fmul float %272, %274
  %276 = load float, float* %169, align 4
  %277 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %271, i32 1
  %278 = load float, float* %277, align 4
  %279 = fmul float %276, %278
  %280 = fadd float %275, %279
  %281 = load float, float* %170, align 4
  %282 = fadd float %281, %280
  %283 = load float, float* %171, align 4
  %284 = fmul float %274, %283
  %285 = load float, float* %172, align 4
  %286 = fmul float %278, %285
  %287 = fadd float %284, %286
  %288 = load float, float* %173, align 4
  %289 = fadd float %288, %287
  %290 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %271, i32 0
  store float %282, float* %290, align 4
  %291 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %271, i32 1
  store float %289, float* %291, align 4
  %292 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %271, i32 2
  store float 1.000000e+00, float* %292, align 4
  %293 = add nuw nsw i64 %271, 1
  %294 = icmp eq i64 %293, %174
  br i1 %294, label %310, label %270, !llvm.loop !24

295:                                              ; preds = %25, %19
  %296 = phi i64 [ 0, %19 ], [ %51, %25 ]
  %297 = icmp eq i64 %21, 0
  br i1 %297, label %310, label %298

298:                                              ; preds = %295
  %299 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %296
  %300 = bitcast %struct.SkPoint* %299 to i32*
  %301 = load i32, i32* %300, align 4
  %302 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %296, i32 1
  %303 = bitcast float* %302 to i32*
  %304 = load i32, i32* %303, align 4
  %305 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %296
  %306 = bitcast %struct.SkPoint3* %305 to i32*
  store i32 %301, i32* %306, align 4
  %307 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %296, i32 1
  %308 = bitcast float* %307 to i32*
  store i32 %304, i32* %308, align 4
  %309 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %1, i64 %296, i32 2
  store float 1.000000e+00, float* %309, align 4
  br label %310

310:                                              ; preds = %238, %270, %298, %295, %164, %236, %77, %166, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #2 align 2 {
  %5 = alloca %struct.SkPoint, align 4
  %6 = alloca %struct.SkPoint, align 4
  %7 = alloca %class.SkMatrix, align 4
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 192
  %11 = icmp eq i32 %10, 128
  br i1 %11, label %12, label %27

12:                                               ; preds = %4
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %14 = load float, float* %13, align 4
  %15 = fcmp une float %14, 0.000000e+00
  br i1 %15, label %25, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %18 = load float, float* %17, align 4
  %19 = fcmp une float %18, 0.000000e+00
  br i1 %19, label %25, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %22 = load float, float* %21, align 4
  %23 = fcmp une float %22, 1.000000e+00
  br i1 %23, label %25, label %24

24:                                               ; preds = %20
  br label %25

25:                                               ; preds = %24, %20, %16, %12
  %26 = phi i32 [ 192, %24 ], [ 15, %20 ], [ 15, %16 ], [ 15, %12 ]
  store i32 %26, i32* %8, align 4
  br label %27

27:                                               ; preds = %4, %25
  %28 = phi i32 [ %26, %25 ], [ %9, %4 ]
  %29 = and i32 %28, 8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %69, label %31

31:                                               ; preds = %27
  %32 = bitcast %struct.SkPoint* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #14
  %33 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %5, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %33, align 4
  %34 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %5, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %34, align 4
  %35 = trunc i32 %28 to i8
  %36 = icmp slt i8 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %31
  %38 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %39 = zext i8 %38 to i32
  store i32 %39, i32* %8, align 4
  br label %40

40:                                               ; preds = %31, %37
  %41 = phi i32 [ %39, %37 ], [ %28, %31 ]
  %42 = and i32 %41, 15
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds [16 x void (%class.SkMatrix*, float, float, %struct.SkPoint*)*], [16 x void (%class.SkMatrix*, float, float, %struct.SkPoint*)*]* @_ZN8SkMatrix11gMapXYProcsE, i64 0, i64 %43
  %45 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %44, align 8
  call void %45(%class.SkMatrix* dereferenceable(40) %0, float 0.000000e+00, float 0.000000e+00, %struct.SkPoint* nonnull %5) #14
  %46 = icmp sgt i32 %3, 0
  br i1 %46, label %47, label %52

47:                                               ; preds = %40
  %48 = bitcast %struct.SkPoint* %6 to i8*
  %49 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  %50 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  %51 = sext i32 %3 to i64
  br label %53

52:                                               ; preds = %53, %40
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #14
  br label %151

53:                                               ; preds = %47, %53
  %54 = phi i64 [ %51, %47 ], [ %55, %53 ]
  %55 = add nsw i64 %54, -1
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #14
  store float 0xFFFFFFFFE0000000, float* %49, align 4
  store float 0xFFFFFFFFE0000000, float* %50, align 4
  %56 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %55, i32 0
  %57 = load float, float* %56, align 4
  %58 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %55, i32 1
  %59 = load float, float* %58, align 4
  call void %45(%class.SkMatrix* dereferenceable(40) %0, float %57, float %59, %struct.SkPoint* nonnull %6) #14
  %60 = load float, float* %49, align 4
  %61 = load float, float* %33, align 4
  %62 = fsub float %60, %61
  %63 = load float, float* %50, align 4
  %64 = load float, float* %34, align 4
  %65 = fsub float %63, %64
  %66 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 %55, i32 0
  store float %62, float* %66, align 4
  %67 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 %55, i32 1
  store float %65, float* %67, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #14
  %68 = icmp sgt i64 %55, 0
  br i1 %68, label %53, label %52

69:                                               ; preds = %27
  %70 = bitcast %class.SkMatrix* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %70) #14
  %71 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 1
  %72 = bitcast %class.SkMatrix* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %70, i8* align 4 %72, i64 40, i1 false)
  %73 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 5
  store float 0.000000e+00, float* %73, align 4
  %74 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 2
  store float 0.000000e+00, float* %74, align 4
  %75 = load i32, i32* %71, align 4
  %76 = and i32 %75, -2
  store i32 %76, i32* %71, align 4
  %77 = trunc i32 %75 to i8
  %78 = icmp slt i8 %77, 0
  br i1 %78, label %79, label %145

79:                                               ; preds = %69
  %80 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 6
  %81 = load float, float* %80, align 4
  %82 = fcmp une float %81, 0.000000e+00
  br i1 %82, label %142, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 7
  %85 = load float, float* %84, align 4
  %86 = fcmp une float %85, 0.000000e+00
  br i1 %86, label %142, label %87

87:                                               ; preds = %83
  %88 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 8
  %89 = load float, float* %88, align 4
  %90 = fcmp une float %89, 1.000000e+00
  br i1 %90, label %142, label %91

91:                                               ; preds = %87
  %92 = bitcast %class.SkMatrix* %7 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = icmp slt i32 %93, 0
  %95 = and i32 %93, 2147483647
  %96 = sub nsw i32 0, %95
  %97 = select i1 %94, i32 %96, i32 %93
  %98 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 1
  %99 = bitcast float* %98 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = icmp slt i32 %100, 0
  %102 = and i32 %100, 2147483647
  %103 = sub nsw i32 0, %102
  %104 = select i1 %101, i32 %103, i32 %100
  %105 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 3
  %106 = bitcast float* %105 to i32*
  %107 = load i32, i32* %106, align 4
  %108 = icmp slt i32 %107, 0
  %109 = and i32 %107, 2147483647
  %110 = sub nsw i32 0, %109
  %111 = select i1 %108, i32 %110, i32 %107
  %112 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 4
  %113 = bitcast float* %112 to i32*
  %114 = load i32, i32* %113, align 4
  %115 = icmp slt i32 %114, 0
  %116 = and i32 %114, 2147483647
  %117 = sub nsw i32 0, %116
  %118 = select i1 %115, i32 %117, i32 %114
  %119 = or i32 %111, %104
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %131, label %121

121:                                              ; preds = %91
  %122 = icmp ne i32 %104, 0
  %123 = icmp ne i32 %111, 0
  %124 = or i32 %118, %97
  %125 = icmp eq i32 %124, 0
  %126 = and i1 %122, %123
  %127 = and i1 %126, %125
  %128 = zext i1 %127 to i32
  %129 = shl nuw nsw i32 %128, 4
  %130 = or i32 %129, 6
  br label %142

131:                                              ; preds = %91
  %132 = icmp ne i32 %97, 1065353216
  %133 = icmp ne i32 %118, 1065353216
  %134 = or i1 %132, %133
  %135 = select i1 %134, i32 2, i32 0
  %136 = icmp ne i32 %97, 0
  %137 = icmp ne i32 %118, 0
  %138 = and i1 %136, %137
  %139 = zext i1 %138 to i32
  %140 = shl nuw nsw i32 %139, 4
  %141 = or i32 %140, %135
  br label %142

142:                                              ; preds = %121, %131, %79, %83, %87
  %143 = phi i32 [ 15, %87 ], [ 15, %83 ], [ 15, %79 ], [ %130, %121 ], [ %141, %131 ]
  %144 = and i32 %143, 255
  store i32 %144, i32* %71, align 4
  br label %145

145:                                              ; preds = %69, %142
  %146 = phi i32 [ %144, %142 ], [ %76, %69 ]
  %147 = and i32 %146, 15
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds [16 x void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)*], [16 x void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)*]* @_ZN8SkMatrix12gMapPtsProcsE, i64 0, i64 %148
  %150 = load void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)*, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)** %149, align 8
  call void %150(%class.SkMatrix* nonnull dereferenceable(40) %7, %struct.SkPoint* %1, %struct.SkPoint* %2, i32 %3) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %70) #14
  br label %151

151:                                              ; preds = %145, %52
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkMatrix21mapRectScaleTranslateEP6SkRectRKS0_(%class.SkMatrix* nocapture readonly, %struct.SkRect* nocapture, %struct.SkRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #7 align 2 {
  %4 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %11 = load float, float* %10, align 4
  %12 = insertelement <4 x float> undef, float %5, i32 0
  %13 = insertelement <4 x float> %12, float %7, i32 1
  %14 = insertelement <4 x float> %13, float %5, i32 2
  %15 = insertelement <4 x float> %14, float %7, i32 3
  %16 = insertelement <4 x float> undef, float %9, i32 0
  %17 = insertelement <4 x float> %16, float %11, i32 1
  %18 = insertelement <4 x float> %17, float %9, i32 2
  %19 = insertelement <4 x float> %18, float %11, i32 3
  %20 = bitcast %struct.SkRect* %2 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 1
  %22 = fmul <4 x float> %21, %15
  %23 = fadd <4 x float> %22, %19
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %23, <4 x float> %24) #14
  %26 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %23, <4 x float> %24) #14
  %27 = shufflevector <4 x float> %25, <4 x float> %26, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %28 = bitcast %struct.SkRect* %1 to <4 x float>*
  store <4 x float> %27, <4 x float>* %28, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix*, %struct.SkRect*, %struct.SkRect* dereferenceable(16), i32) local_unnamed_addr #7 align 2 {
  %5 = alloca %class.SkPath, align 8
  %6 = alloca [4 x %struct.SkPoint], align 16
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = trunc i32 %8 to i8
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %4
  %12 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %13 = zext i8 %12 to i32
  store i32 %13, i32* %7, align 4
  br label %14

14:                                               ; preds = %4, %11
  %15 = phi i32 [ %13, %11 ], [ %8, %4 ]
  %16 = and i32 %15, 14
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %35

18:                                               ; preds = %14
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %20, i32 0
  %24 = insertelement <4 x float> %23, float %22, i32 1
  %25 = insertelement <4 x float> %24, float %20, i32 2
  %26 = insertelement <4 x float> %25, float %22, i32 3
  %27 = bitcast %struct.SkRect* %2 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 1
  %29 = fadd <4 x float> %28, %26
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %31 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %29, <4 x float> %30) #14
  %32 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %29, <4 x float> %30) #14
  %33 = shufflevector <4 x float> %31, <4 x float> %32, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %34 = bitcast %struct.SkRect* %1 to <4 x float>*
  store <4 x float> %33, <4 x float>* %34, align 1
  br label %143

35:                                               ; preds = %14
  %36 = trunc i32 %15 to i8
  %37 = icmp slt i8 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %35
  %39 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %40 = zext i8 %39 to i32
  store i32 %40, i32* %7, align 4
  br label %41

41:                                               ; preds = %35, %38
  %42 = phi i32 [ %40, %38 ], [ %15, %35 ]
  %43 = and i32 %42, 12
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %71

45:                                               ; preds = %41
  %46 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %47 = load float, float* %46, align 4
  %48 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %51 = load float, float* %50, align 4
  %52 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %53 = load float, float* %52, align 4
  %54 = insertelement <4 x float> undef, float %47, i32 0
  %55 = insertelement <4 x float> %54, float %49, i32 1
  %56 = insertelement <4 x float> %55, float %47, i32 2
  %57 = insertelement <4 x float> %56, float %49, i32 3
  %58 = insertelement <4 x float> undef, float %51, i32 0
  %59 = insertelement <4 x float> %58, float %53, i32 1
  %60 = insertelement <4 x float> %59, float %51, i32 2
  %61 = insertelement <4 x float> %60, float %53, i32 3
  %62 = bitcast %struct.SkRect* %2 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 1
  %64 = fmul <4 x float> %63, %57
  %65 = fadd <4 x float> %64, %61
  %66 = shufflevector <4 x float> %65, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %67 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %65, <4 x float> %66) #14
  %68 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %65, <4 x float> %66) #14
  %69 = shufflevector <4 x float> %67, <4 x float> %68, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %70 = bitcast %struct.SkRect* %1 to <4 x float>*
  store <4 x float> %69, <4 x float>* %70, align 1
  br label %143

71:                                               ; preds = %41
  %72 = icmp eq i32 %3, 1
  br i1 %72, label %73, label %117

73:                                               ; preds = %71
  %74 = and i32 %42, 192
  %75 = icmp eq i32 %74, 128
  br i1 %75, label %76, label %91

76:                                               ; preds = %73
  %77 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %78 = load float, float* %77, align 4
  %79 = fcmp une float %78, 0.000000e+00
  br i1 %79, label %89, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %82 = load float, float* %81, align 4
  %83 = fcmp une float %82, 0.000000e+00
  br i1 %83, label %89, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %86 = load float, float* %85, align 4
  %87 = fcmp une float %86, 1.000000e+00
  br i1 %87, label %89, label %88

88:                                               ; preds = %84
  br label %89

89:                                               ; preds = %88, %84, %80, %76
  %90 = phi i32 [ 192, %88 ], [ 15, %84 ], [ 15, %80 ], [ 15, %76 ]
  store i32 %90, i32* %7, align 4
  br label %91

91:                                               ; preds = %73, %89
  %92 = phi i32 [ %90, %89 ], [ %42, %73 ]
  %93 = and i32 %92, 8
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %117, label %95

95:                                               ; preds = %91
  %96 = bitcast %class.SkPath* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %96) #14
  %97 = getelementptr inbounds %class.SkPath, %class.SkPath* %5, i64 0, i32 0, i32 0
  %98 = bitcast %class.SkPath* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %98, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %5) #14
  %99 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath7addRectERK6SkRect15SkPathDirectionj(%class.SkPath* nonnull %5, %struct.SkRect* dereferenceable(16) %2, i32 0, i32 0) #14
  call void @_ZNK6SkPath9transformERK8SkMatrixPS_22SkApplyPerspectiveClip(%class.SkPath* nonnull %5, %class.SkMatrix* dereferenceable(40) %0, %class.SkPath* nonnull %5, i32 1) #14
  %100 = load %class.SkPathRef*, %class.SkPathRef** %97, align 8
  %101 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %100, i64 0, i32 9
  %102 = load i8, i8* %101, align 8
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %113, label %104

104:                                              ; preds = %95
  %105 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %100, i64 0, i32 1
  %106 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %100, i64 0, i32 3, i32 0
  %107 = load %struct.SkPoint*, %struct.SkPoint** %106, align 8
  %108 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %100, i64 0, i32 3, i32 2
  %109 = load i32, i32* %108, align 4
  %110 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %105, %struct.SkPoint* %107, i32 %109) #14
  %111 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %100, i64 0, i32 10
  %112 = zext i1 %110 to i8
  store i8 %112, i8* %111, align 1
  store i8 0, i8* %101, align 8
  br label %113

113:                                              ; preds = %95, %104
  %114 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %100, i64 0, i32 1
  %115 = bitcast %struct.SkRect* %1 to i8*
  %116 = bitcast %struct.SkRect* %114 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %115, i8* align 4 %116, i64 16, i1 false)
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %96) #14
  br label %143

117:                                              ; preds = %91, %71
  %118 = bitcast [4 x %struct.SkPoint]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %118) #14
  %119 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %6, i64 0, i64 0
  %120 = bitcast [4 x %struct.SkPoint]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %120, i8 -1, i64 32, i1 false)
  call void @_ZNK6SkRect6toQuadEP7SkPoint(%struct.SkRect* %2, %struct.SkPoint* nonnull %119) #14
  %121 = load i32, i32* %7, align 4
  %122 = trunc i32 %121 to i8
  %123 = icmp slt i8 %122, 0
  br i1 %123, label %124, label %127

124:                                              ; preds = %117
  %125 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %126 = zext i8 %125 to i32
  store i32 %126, i32* %7, align 4
  br label %127

127:                                              ; preds = %117, %124
  %128 = phi i32 [ %126, %124 ], [ %121, %117 ]
  %129 = and i32 %128, 15
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds [16 x void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)*], [16 x void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)*]* @_ZN8SkMatrix12gMapPtsProcsE, i64 0, i64 %130
  %132 = load void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)*, void (%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32)** %131, align 8
  call void %132(%class.SkMatrix* dereferenceable(40) %0, %struct.SkPoint* nonnull %119, %struct.SkPoint* nonnull %119, i32 4) #14
  call void @_ZN6SkRect16setBoundsNoCheckEPK7SkPointi(%struct.SkRect* %1, %struct.SkPoint* nonnull %119, i32 4) #14
  %133 = load i32, i32* %7, align 4
  %134 = trunc i32 %133 to i8
  %135 = icmp slt i8 %134, 0
  br i1 %135, label %136, label %139

136:                                              ; preds = %127
  %137 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %138 = zext i8 %137 to i32
  store i32 %138, i32* %7, align 4
  br label %139

139:                                              ; preds = %127, %136
  %140 = phi i32 [ %138, %136 ], [ %133, %127 ]
  %141 = and i32 %140, 16
  %142 = icmp ne i32 %141, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %118) #14
  br label %143

143:                                              ; preds = %139, %113, %45, %18
  %144 = phi i1 [ true, %18 ], [ true, %45 ], [ false, %113 ], [ %142, %139 ]
  ret i1 %144
}

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #9

declare void @_ZNK6SkRect6toQuadEP7SkPoint(%struct.SkRect*, %struct.SkPoint*) local_unnamed_addr #8

declare void @_ZN6SkRect16setBoundsNoCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK8SkMatrix9mapRadiusEf(%class.SkMatrix*, float) local_unnamed_addr #2 align 2 {
  %3 = alloca [2 x %struct.SkPoint], align 16
  %4 = bitcast [2 x %struct.SkPoint]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #14
  %5 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %3, i64 0, i64 0
  %6 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %3, i64 0, i64 0, i32 0
  %7 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %3, i64 0, i64 0, i32 1
  %8 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %3, i64 0, i64 1, i32 0
  %9 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %3, i64 0, i64 1, i32 1
  store float %1, float* %6, align 16
  store float 0.000000e+00, float* %7, align 4
  store float 0.000000e+00, float* %8, align 8
  store float %1, float* %9, align 4
  call void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix* %0, %struct.SkPoint* nonnull %5, %struct.SkPoint* nonnull %5, i32 2) #14
  %10 = load float, float* %6, align 16
  %11 = load float, float* %7, align 4
  %12 = call float @_ZN7SkPoint6LengthEff(float %10, float %11) #14
  %13 = load float, float* %8, align 8
  %14 = load float, float* %9, align 4
  %15 = call float @_ZN7SkPoint6LengthEff(float %13, float %14) #14
  %16 = fmul float %12, %15
  %17 = call float @sqrtf(float %16) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #14
  ret float %17
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #10

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN8SkMatrix8Persp_xyERKS_ffP7SkPoint(%class.SkMatrix* nocapture readonly dereferenceable(40), float, float, %struct.SkPoint* nocapture) #0 align 2 {
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %8 = load float, float* %7, align 4
  %9 = fmul float %6, %1
  %10 = fmul float %8, %2
  %11 = fadd float %9, %10
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %13 = load float, float* %12, align 4
  %14 = fadd float %13, %11
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %18 = load float, float* %17, align 4
  %19 = fmul float %16, %1
  %20 = fmul float %18, %2
  %21 = fadd float %19, %20
  %22 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %23 = load float, float* %22, align 4
  %24 = fadd float %23, %21
  %25 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %26 = bitcast float* %25 to <2 x float>*
  %27 = load <2 x float>, <2 x float>* %26, align 4
  %28 = insertelement <2 x float> undef, float %1, i32 0
  %29 = insertelement <2 x float> %28, float %2, i32 1
  %30 = fmul <2 x float> %27, %29
  %31 = extractelement <2 x float> %30, i32 0
  %32 = extractelement <2 x float> %30, i32 1
  %33 = fadd float %31, %32
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %35 = load float, float* %34, align 4
  %36 = fadd float %35, %33
  %37 = fcmp une float %36, 0.000000e+00
  %38 = fdiv float 1.000000e+00, %36
  %39 = select i1 %37, float %38, float %36
  %40 = fmul float %14, %39
  %41 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  store float %40, float* %41, align 4
  %42 = fmul float %24, %39
  %43 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  store float %42, float* %43, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN8SkMatrix11RotTrans_xyERKS_ffP7SkPoint(%class.SkMatrix* nocapture readonly dereferenceable(40), float, float, %struct.SkPoint* nocapture) #0 align 2 {
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %6 = load float, float* %5, align 4
  %7 = fmul float %6, %1
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %9 = load float, float* %8, align 4
  %10 = fmul float %9, %2
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %12 = load float, float* %11, align 4
  %13 = fadd float %10, %12
  %14 = fadd float %7, %13
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  store float %14, float* %15, align 4
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %17 = load float, float* %16, align 4
  %18 = fmul float %17, %1
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %20 = load float, float* %19, align 4
  %21 = fmul float %20, %2
  %22 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %23 = load float, float* %22, align 4
  %24 = fadd float %21, %23
  %25 = fadd float %18, %24
  %26 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  store float %25, float* %26, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN8SkMatrix6Rot_xyERKS_ffP7SkPoint(%class.SkMatrix* nocapture readonly dereferenceable(40), float, float, %struct.SkPoint* nocapture) #0 align 2 {
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %6 = load float, float* %5, align 4
  %7 = fmul float %6, %1
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %9 = load float, float* %8, align 4
  %10 = fmul float %9, %2
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %12 = load float, float* %11, align 4
  %13 = fadd float %10, %12
  %14 = fadd float %7, %13
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  store float %14, float* %15, align 4
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %17 = load float, float* %16, align 4
  %18 = fmul float %17, %1
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %20 = load float, float* %19, align 4
  %21 = fmul float %20, %2
  %22 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %23 = load float, float* %22, align 4
  %24 = fadd float %21, %23
  %25 = fadd float %18, %24
  %26 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  store float %25, float* %26, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN8SkMatrix13ScaleTrans_xyERKS_ffP7SkPoint(%class.SkMatrix* nocapture readonly dereferenceable(40), float, float, %struct.SkPoint* nocapture) #0 align 2 {
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %6 = load float, float* %5, align 4
  %7 = fmul float %6, %1
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %9 = load float, float* %8, align 4
  %10 = fadd float %7, %9
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  store float %10, float* %11, align 4
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %13 = load float, float* %12, align 4
  %14 = fmul float %13, %2
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %16 = load float, float* %15, align 4
  %17 = fadd float %14, %16
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  store float %17, float* %18, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN8SkMatrix8Scale_xyERKS_ffP7SkPoint(%class.SkMatrix* nocapture readonly dereferenceable(40), float, float, %struct.SkPoint* nocapture) #0 align 2 {
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %6 = load float, float* %5, align 4
  %7 = fmul float %6, %1
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  store float %7, float* %8, align 4
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %10 = load float, float* %9, align 4
  %11 = fmul float %10, %2
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  store float %11, float* %12, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN8SkMatrix8Trans_xyERKS_ffP7SkPoint(%class.SkMatrix* nocapture readonly dereferenceable(40), float, float, %struct.SkPoint* nocapture) #0 align 2 {
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %6 = load float, float* %5, align 4
  %7 = fadd float %6, %1
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  store float %7, float* %8, align 4
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %10 = load float, float* %9, align 4
  %11 = fadd float %10, %2
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  store float %11, float* %12, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN8SkMatrix11Identity_xyERKS_ffP7SkPoint(%class.SkMatrix* nocapture readnone dereferenceable(40), float, float, %struct.SkPoint* nocapture) #6 align 2 {
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  store float %1, float* %5, align 4
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  store float %2, float* %6, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN8SkMatrix9Poly2ProcEPK7SkPointPS_(%struct.SkPoint* nocapture readonly, %class.SkMatrix* nocapture) #0 align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = fsub float %4, %6
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 0
  store float %7, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %12 = load float, float* %11, align 4
  %13 = fsub float %10, %12
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  store float %13, float* %14, align 4
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %15, align 4
  %16 = load float, float* %11, align 4
  %17 = load float, float* %9, align 4
  %18 = fsub float %16, %17
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  store float %18, float* %19, align 4
  %20 = load float, float* %3, align 4
  %21 = load float, float* %5, align 4
  %22 = fsub float %20, %21
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  store float %22, float* %23, align 4
  %24 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %24, align 4
  %25 = bitcast %struct.SkPoint* %0 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  %28 = bitcast float* %27 to i32*
  store i32 %26, i32* %28, align 4
  %29 = bitcast float* %5 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  %32 = bitcast float* %31 to i32*
  store i32 %30, i32* %32, align 4
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %33, align 4
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 1
  store i32 128, i32* %34, align 4
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN8SkMatrix9Poly3ProcEPK7SkPointPS_(%struct.SkPoint* nocapture readonly, %class.SkMatrix* nocapture) #0 align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fsub float %4, %6
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 0
  store float %7, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = fsub float %10, %12
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  store float %13, float* %14, align 4
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %15, align 4
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %17 = load float, float* %16, align 4
  %18 = load float, float* %5, align 4
  %19 = fsub float %17, %18
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  store float %19, float* %20, align 4
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %22 = load float, float* %21, align 4
  %23 = load float, float* %11, align 4
  %24 = fsub float %22, %23
  %25 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  store float %24, float* %25, align 4
  %26 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %26, align 4
  %27 = bitcast %struct.SkPoint* %0 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  %30 = bitcast float* %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = bitcast float* %11 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  %34 = bitcast float* %33 to i32*
  store i32 %32, i32* %34, align 4
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %35, align 4
  %36 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 1
  store i32 128, i32* %36, align 4
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN8SkMatrix9Poly4ProcEPK7SkPointPS_(%struct.SkPoint* nocapture readonly, %class.SkMatrix* nocapture) #0 align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %4 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = bitcast float* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = extractelement <2 x float> %7, i32 0
  %9 = fsub float %8, %5
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = extractelement <2 x float> %7, i32 1
  %13 = fsub float %12, %11
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %16 = bitcast float* %14 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = fsub <2 x float> %7, %17
  %19 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 1
  %21 = bitcast float* %19 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = fsub <2 x float> %7, %22
  %24 = extractelement <2 x float> %23, i32 0
  %25 = fcmp ogt float %24, 0.000000e+00
  %26 = extractelement <2 x float> %23, i32 1
  %27 = fcmp ogt float %26, 0.000000e+00
  br i1 %25, label %28, label %34

28:                                               ; preds = %2
  br i1 %27, label %29, label %31

29:                                               ; preds = %28
  %30 = fcmp ogt float %24, %26
  br i1 %30, label %40, label %55

31:                                               ; preds = %28
  %32 = fsub float -0.000000e+00, %26
  %33 = fcmp ogt float %24, %32
  br i1 %33, label %40, label %55

34:                                               ; preds = %2
  br i1 %27, label %35, label %38

35:                                               ; preds = %34
  %36 = fsub float -0.000000e+00, %24
  %37 = fcmp olt float %26, %36
  br i1 %37, label %40, label %55

38:                                               ; preds = %34
  %39 = fcmp olt float %24, %26
  br i1 %39, label %40, label %55

40:                                               ; preds = %38, %35, %31, %29
  %41 = extractelement <2 x float> %18, i32 0
  %42 = fmul float %41, %26
  %43 = fdiv float %42, %24
  %44 = extractelement <2 x float> %18, i32 1
  %45 = fsub float %43, %44
  %46 = fmul float %45, %45
  %47 = fcmp oeq float %46, 0.000000e+00
  br i1 %47, label %162, label %48

48:                                               ; preds = %40
  %49 = fsub float %9, %41
  %50 = fmul float %49, %26
  %51 = fdiv float %50, %24
  %52 = fsub float %51, %13
  %53 = fadd float %44, %52
  %54 = fdiv float %53, %45
  br label %70

55:                                               ; preds = %38, %35, %31, %29
  %56 = extractelement <2 x float> %18, i32 1
  %57 = fmul float %56, %24
  %58 = fdiv float %57, %26
  %59 = extractelement <2 x float> %18, i32 0
  %60 = fsub float %59, %58
  %61 = fmul float %60, %60
  %62 = fcmp oeq float %61, 0.000000e+00
  br i1 %62, label %162, label %63

63:                                               ; preds = %55
  %64 = fsub float %9, %59
  %65 = fsub float %13, %56
  %66 = fmul float %65, %24
  %67 = fdiv float %66, %26
  %68 = fsub float %64, %67
  %69 = fdiv float %68, %60
  br label %70

70:                                               ; preds = %63, %48
  %71 = phi float [ %54, %48 ], [ %69, %63 ]
  %72 = extractelement <2 x float> %18, i32 0
  %73 = fcmp ogt float %72, 0.000000e+00
  %74 = extractelement <2 x float> %18, i32 1
  %75 = fcmp ogt float %74, 0.000000e+00
  br i1 %73, label %76, label %86

76:                                               ; preds = %70
  br i1 %75, label %77, label %81

77:                                               ; preds = %76
  %78 = extractelement <2 x float> %18, i32 0
  %79 = extractelement <2 x float> %18, i32 1
  %80 = fcmp ogt float %78, %79
  br i1 %80, label %95, label %110

81:                                               ; preds = %76
  %82 = extractelement <2 x float> %18, i32 1
  %83 = fsub float -0.000000e+00, %82
  %84 = extractelement <2 x float> %18, i32 0
  %85 = fcmp ogt float %84, %83
  br i1 %85, label %95, label %110

86:                                               ; preds = %70
  %87 = extractelement <2 x float> %18, i32 0
  br i1 %75, label %88, label %92

88:                                               ; preds = %86
  %89 = fsub float -0.000000e+00, %87
  %90 = extractelement <2 x float> %18, i32 1
  %91 = fcmp olt float %90, %89
  br i1 %91, label %95, label %110

92:                                               ; preds = %86
  %93 = extractelement <2 x float> %18, i32 1
  %94 = fcmp olt float %87, %93
  br i1 %94, label %95, label %110

95:                                               ; preds = %92, %88, %81, %77
  %96 = extractelement <2 x float> %18, i32 1
  %97 = fmul float %96, %24
  %98 = extractelement <2 x float> %18, i32 0
  %99 = fdiv float %97, %98
  %100 = fsub float %26, %99
  %101 = fmul float %100, %100
  %102 = fcmp oeq float %101, 0.000000e+00
  br i1 %102, label %162, label %103

103:                                              ; preds = %95
  %104 = fsub float %13, %26
  %105 = fsub float %9, %24
  %106 = fmul float %96, %105
  %107 = fdiv float %106, %98
  %108 = fsub float %104, %107
  %109 = fdiv float %108, %100
  br label %125

110:                                              ; preds = %92, %88, %81, %77
  %111 = extractelement <2 x float> %18, i32 0
  %112 = fmul float %111, %26
  %113 = extractelement <2 x float> %18, i32 1
  %114 = fdiv float %112, %113
  %115 = fsub float %114, %24
  %116 = fmul float %115, %115
  %117 = fcmp oeq float %116, 0.000000e+00
  br i1 %117, label %162, label %118

118:                                              ; preds = %110
  %119 = fsub float %13, %26
  %120 = fmul float %111, %119
  %121 = fdiv float %120, %113
  %122 = fsub float %121, %9
  %123 = fadd float %24, %122
  %124 = fdiv float %123, %115
  br label %125

125:                                              ; preds = %118, %103
  %126 = phi float [ %109, %103 ], [ %124, %118 ]
  %127 = extractelement <2 x float> %22, i32 0
  %128 = fmul float %127, %126
  %129 = fadd float %127, %128
  %130 = fsub float %129, %5
  %131 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 0
  store float %130, float* %131, align 4
  %132 = load float, float* %20, align 4
  %133 = fmul float %126, %132
  %134 = fadd float %132, %133
  %135 = load float, float* %10, align 4
  %136 = fsub float %134, %135
  %137 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  store float %136, float* %137, align 4
  %138 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 6
  store float %126, float* %138, align 4
  %139 = load float, float* %14, align 4
  %140 = fmul float %71, %139
  %141 = fadd float %139, %140
  %142 = load float, float* %4, align 4
  %143 = fsub float %141, %142
  %144 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  store float %143, float* %144, align 4
  %145 = load float, float* %15, align 4
  %146 = fmul float %71, %145
  %147 = fadd float %145, %146
  %148 = load float, float* %10, align 4
  %149 = fsub float %147, %148
  %150 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  store float %149, float* %150, align 4
  %151 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 7
  store float %71, float* %151, align 4
  %152 = bitcast %struct.SkPoint* %0 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  %155 = bitcast float* %154 to i32*
  store i32 %153, i32* %155, align 4
  %156 = bitcast float* %10 to i32*
  %157 = load i32, i32* %156, align 4
  %158 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  %159 = bitcast float* %158 to i32*
  store i32 %157, i32* %159, align 4
  %160 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %160, align 4
  %161 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 1
  store i32 128, i32* %161, align 4
  br label %162

162:                                              ; preds = %110, %95, %55, %40, %125
  %163 = phi i1 [ true, %125 ], [ false, %40 ], [ false, %55 ], [ false, %95 ], [ false, %110 ]
  ret i1 %163
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8SkMatrix13setPolyToPolyEPK7SkPointS2_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #2 align 2 {
  %5 = alloca %class.SkMatrix, align 16
  %6 = alloca %class.SkMatrix, align 16
  %7 = icmp ugt i32 %3, 4
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i32 1405, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0), i32 %3) #14
  br label %154

9:                                                ; preds = %4
  switch i32 %3, label %41 [
    i32 0, label %10
    i32 1, label %16
  ]

10:                                               ; preds = %9
  %11 = bitcast %class.SkMatrix* %0 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %11, align 4
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %13 = bitcast float* %12 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %13, align 4
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %14, align 4
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 16, i32* %15, align 4
  br label %154

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  %18 = load float, float* %17, align 4
  %19 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %20 = load float, float* %19, align 4
  %21 = fsub float %18, %20
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %25 = load float, float* %24, align 4
  %26 = fsub float %23, %25
  %27 = fcmp une float %21, 0.000000e+00
  %28 = fcmp une float %26, 0.000000e+00
  %29 = or i1 %27, %28
  %30 = select i1 %29, i32 17, i32 16
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  store float 1.000000e+00, float* %31, align 4
  %32 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  store float 0.000000e+00, float* %32, align 4
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  store float %21, float* %33, align 4
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  store float 0.000000e+00, float* %34, align 4
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  store float 1.000000e+00, float* %35, align 4
  %36 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  store float %26, float* %36, align 4
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %37, align 4
  %38 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %38, align 4
  %39 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %39, align 4
  %40 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 %30, i32* %40, align 4
  br label %154

41:                                               ; preds = %9
  %42 = add nsw i32 %3, -2
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [3 x i1 (%struct.SkPoint*, %class.SkMatrix*)*], [3 x i1 (%struct.SkPoint*, %class.SkMatrix*)*]* @_ZZN8SkMatrix13setPolyToPolyEPK7SkPointS2_iE13gPolyMapProcs, i64 0, i64 %43
  %45 = load i1 (%struct.SkPoint*, %class.SkMatrix*)*, i1 (%struct.SkPoint*, %class.SkMatrix*)** %44, align 8
  %46 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %46) #14
  %47 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  %48 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 1
  %49 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 2
  %50 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 3
  %51 = bitcast %class.SkMatrix* %5 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %51, align 16
  %52 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 4
  %53 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 5
  %54 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 6
  %55 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 7
  %56 = bitcast float* %52 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %56, align 16
  %57 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %57, align 16
  store i32 16, i32* %47, align 4
  %58 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %58) #14
  %59 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 1
  %60 = bitcast %class.SkMatrix* %6 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %60, align 16
  %61 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %62 = bitcast float* %61 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %62, align 16
  %63 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %63, align 16
  store i32 16, i32* %59, align 4
  %64 = call zeroext i1 %45(%struct.SkPoint* %1, %class.SkMatrix* nonnull %5) #14
  br i1 %64, label %65, label %152

65:                                               ; preds = %41
  %66 = load i32, i32* %47, align 4
  %67 = trunc i32 %66 to i8
  %68 = icmp slt i8 %67, 0
  br i1 %68, label %69, label %139

69:                                               ; preds = %65
  %70 = load float, float* %54, align 8
  %71 = fcmp une float %70, 0.000000e+00
  %72 = load float, float* %55, align 4
  %73 = fcmp une float %72, 0.000000e+00
  %74 = or i1 %71, %73
  %75 = load float, float* %57, align 16
  %76 = fcmp une float %75, 1.000000e+00
  %77 = or i1 %74, %76
  br i1 %77, label %137, label %78

78:                                               ; preds = %69
  %79 = load float, float* %49, align 8
  %80 = fcmp une float %79, 0.000000e+00
  %81 = load float, float* %53, align 4
  %82 = fcmp une float %81, 0.000000e+00
  %83 = or i1 %80, %82
  %84 = zext i1 %83 to i32
  %85 = bitcast %class.SkMatrix* %5 to i32*
  %86 = load i32, i32* %85, align 16
  %87 = icmp slt i32 %86, 0
  %88 = and i32 %86, 2147483647
  %89 = sub nsw i32 0, %88
  %90 = select i1 %87, i32 %89, i32 %86
  %91 = bitcast float* %48 to i32*
  %92 = load i32, i32* %91, align 4
  %93 = icmp slt i32 %92, 0
  %94 = and i32 %92, 2147483647
  %95 = sub nsw i32 0, %94
  %96 = select i1 %93, i32 %95, i32 %92
  %97 = bitcast float* %50 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = icmp slt i32 %98, 0
  %100 = and i32 %98, 2147483647
  %101 = sub nsw i32 0, %100
  %102 = select i1 %99, i32 %101, i32 %98
  %103 = bitcast float* %52 to i32*
  %104 = load i32, i32* %103, align 16
  %105 = icmp slt i32 %104, 0
  %106 = and i32 %104, 2147483647
  %107 = sub nsw i32 0, %106
  %108 = select i1 %105, i32 %107, i32 %104
  %109 = or i32 %102, %96
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %122, label %111

111:                                              ; preds = %78
  %112 = icmp ne i32 %96, 0
  %113 = icmp ne i32 %102, 0
  %114 = or i32 %108, %90
  %115 = icmp eq i32 %114, 0
  %116 = and i1 %112, %113
  %117 = and i1 %116, %115
  %118 = zext i1 %117 to i32
  %119 = shl nuw nsw i32 %118, 4
  %120 = or i32 %119, %84
  %121 = or i32 %120, 6
  br label %134

122:                                              ; preds = %78
  %123 = icmp ne i32 %90, 1065353216
  %124 = icmp ne i32 %108, 1065353216
  %125 = or i1 %123, %124
  %126 = or i32 %84, 2
  %127 = select i1 %125, i32 %126, i32 %84
  %128 = icmp ne i32 %90, 0
  %129 = icmp ne i32 %108, 0
  %130 = and i1 %128, %129
  %131 = zext i1 %130 to i32
  %132 = shl nuw nsw i32 %131, 4
  %133 = or i32 %132, %127
  br label %134

134:                                              ; preds = %122, %111
  %135 = phi i32 [ %121, %111 ], [ %133, %122 ]
  %136 = and i32 %135, 255
  br label %137

137:                                              ; preds = %69, %134
  %138 = phi i32 [ %136, %134 ], [ 15, %69 ]
  store i32 %138, i32* %47, align 4
  br label %139

139:                                              ; preds = %137, %65
  %140 = phi i32 [ %138, %137 ], [ %66, %65 ]
  %141 = and i32 %140, 15
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %146

143:                                              ; preds = %139
  %144 = bitcast %class.SkMatrix* %6 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %144, align 16
  %145 = bitcast float* %61 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %145, align 16
  store float 1.000000e+00, float* %63, align 16
  store i32 16, i32* %59, align 4
  br label %148

146:                                              ; preds = %139
  %147 = call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* nonnull %5, %class.SkMatrix* nonnull %6) #14
  br i1 %147, label %148, label %152

148:                                              ; preds = %143, %146
  %149 = call zeroext i1 %45(%struct.SkPoint* %2, %class.SkMatrix* nonnull %5) #14
  br i1 %149, label %150, label %152

150:                                              ; preds = %148
  %151 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %0, %class.SkMatrix* nonnull dereferenceable(40) %5, %class.SkMatrix* nonnull dereferenceable(40) %6)
  br label %152

152:                                              ; preds = %148, %146, %41, %150
  %153 = phi i1 [ true, %150 ], [ false, %41 ], [ false, %146 ], [ false, %148 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %58) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %46) #14
  br label %154

154:                                              ; preds = %152, %16, %10, %8
  %155 = phi i1 [ false, %8 ], [ true, %10 ], [ true, %16 ], [ %153, %152 ]
  ret i1 %155
}

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK8SkMatrix11getMinScaleEv(%class.SkMatrix* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = trunc i32 %3 to i8
  %5 = icmp slt i8 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %8 = zext i8 %7 to i32
  store i32 %8, i32* %2, align 4
  br label %9

9:                                                ; preds = %1, %6
  %10 = phi i32 [ %8, %6 ], [ %3, %1 ]
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %12 = and i32 %10, 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %70

14:                                               ; preds = %9
  %15 = and i32 %10, 15
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %70, label %17

17:                                               ; preds = %14
  %18 = and i32 %10, 4
  %19 = icmp eq i32 %18, 0
  %20 = load float, float* %11, align 4
  br i1 %19, label %21, label %28

21:                                               ; preds = %17
  %22 = tail call float @llvm.fabs.f32(float %20) #14
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %24 = load float, float* %23, align 4
  %25 = tail call float @llvm.fabs.f32(float %24) #14
  %26 = fcmp olt float %25, %22
  %27 = select i1 %26, float %25, float %22
  br label %70

28:                                               ; preds = %17
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %31 = load float, float* %30, align 4
  %32 = bitcast float* %29 to <2 x float>*
  %33 = load <2 x float>, <2 x float>* %32, align 4
  %34 = fmul float %20, %31
  %35 = extractelement <2 x float> %33, i32 0
  %36 = extractelement <2 x float> %33, i32 1
  %37 = fmul float %35, %36
  %38 = fadd float %34, %37
  %39 = insertelement <2 x float> undef, float %20, i32 0
  %40 = insertelement <2 x float> %39, float %31, i32 1
  %41 = fmul <2 x float> %40, %40
  %42 = fmul <2 x float> %33, %33
  %43 = fadd <2 x float> %41, %42
  %44 = fmul float %38, %38
  %45 = fcmp ugt float %44, 0x3E70000000000000
  %46 = extractelement <2 x float> %43, i32 0
  %47 = extractelement <2 x float> %43, i32 1
  br i1 %45, label %51, label %48

48:                                               ; preds = %28
  %49 = fcmp olt float %47, %46
  %50 = select i1 %49, float %47, float %46
  br label %61

51:                                               ; preds = %28
  %52 = fsub float %46, %47
  %53 = fadd float %46, %47
  %54 = fmul float %53, 5.000000e-01
  %55 = fmul float %52, %52
  %56 = fmul float %44, 4.000000e+00
  %57 = fadd float %55, %56
  %58 = tail call float @sqrtf(float %57) #14
  %59 = fmul float %58, 5.000000e-01
  %60 = fsub float %54, %59
  br label %61

61:                                               ; preds = %51, %48
  %62 = phi float [ %60, %51 ], [ %50, %48 ]
  %63 = bitcast float %62 to i32
  %64 = and i32 %63, 2139095040
  %65 = icmp eq i32 %64, 2139095040
  br i1 %65, label %70, label %66

66:                                               ; preds = %61
  %67 = fcmp olt float %62, 0.000000e+00
  %68 = select i1 %67, float 0.000000e+00, float %62
  %69 = tail call float @sqrtf(float %68) #14
  br label %70

70:                                               ; preds = %14, %66, %21, %61, %9
  %71 = phi float [ -1.000000e+00, %9 ], [ -1.000000e+00, %61 ], [ 1.000000e+00, %14 ], [ %69, %66 ], [ %27, %21 ]
  ret float %71
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK8SkMatrix11getMaxScaleEv(%class.SkMatrix* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = trunc i32 %3 to i8
  %5 = icmp slt i8 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %8 = zext i8 %7 to i32
  store i32 %8, i32* %2, align 4
  br label %9

9:                                                ; preds = %1, %6
  %10 = phi i32 [ %8, %6 ], [ %3, %1 ]
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %12 = and i32 %10, 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %70

14:                                               ; preds = %9
  %15 = and i32 %10, 15
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %70, label %17

17:                                               ; preds = %14
  %18 = and i32 %10, 4
  %19 = icmp eq i32 %18, 0
  %20 = load float, float* %11, align 4
  br i1 %19, label %21, label %28

21:                                               ; preds = %17
  %22 = tail call float @llvm.fabs.f32(float %20) #14
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %24 = load float, float* %23, align 4
  %25 = tail call float @llvm.fabs.f32(float %24) #14
  %26 = fcmp olt float %22, %25
  %27 = select i1 %26, float %25, float %22
  br label %70

28:                                               ; preds = %17
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %31 = load float, float* %30, align 4
  %32 = bitcast float* %29 to <2 x float>*
  %33 = load <2 x float>, <2 x float>* %32, align 4
  %34 = fmul float %20, %31
  %35 = extractelement <2 x float> %33, i32 0
  %36 = extractelement <2 x float> %33, i32 1
  %37 = fmul float %35, %36
  %38 = fadd float %34, %37
  %39 = insertelement <2 x float> undef, float %20, i32 0
  %40 = insertelement <2 x float> %39, float %31, i32 1
  %41 = fmul <2 x float> %40, %40
  %42 = fmul <2 x float> %33, %33
  %43 = fadd <2 x float> %41, %42
  %44 = fmul float %38, %38
  %45 = fcmp ugt float %44, 0x3E70000000000000
  %46 = extractelement <2 x float> %43, i32 0
  %47 = extractelement <2 x float> %43, i32 1
  br i1 %45, label %51, label %48

48:                                               ; preds = %28
  %49 = fcmp olt float %46, %47
  %50 = select i1 %49, float %47, float %46
  br label %61

51:                                               ; preds = %28
  %52 = fsub float %46, %47
  %53 = fadd float %46, %47
  %54 = fmul float %53, 5.000000e-01
  %55 = fmul float %52, %52
  %56 = fmul float %44, 4.000000e+00
  %57 = fadd float %55, %56
  %58 = tail call float @sqrtf(float %57) #14
  %59 = fmul float %58, 5.000000e-01
  %60 = fadd float %54, %59
  br label %61

61:                                               ; preds = %51, %48
  %62 = phi float [ %60, %51 ], [ %50, %48 ]
  %63 = bitcast float %62 to i32
  %64 = and i32 %63, 2139095040
  %65 = icmp eq i32 %64, 2139095040
  br i1 %65, label %70, label %66

66:                                               ; preds = %61
  %67 = fcmp olt float %62, 0.000000e+00
  %68 = select i1 %67, float 0.000000e+00, float %62
  %69 = tail call float @sqrtf(float %68) #14
  br label %70

70:                                               ; preds = %14, %66, %21, %61, %9
  %71 = phi float [ -1.000000e+00, %9 ], [ -1.000000e+00, %61 ], [ 1.000000e+00, %14 ], [ %69, %66 ], [ %27, %21 ]
  ret float %71
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkMatrix15getMinMaxScalesEPf(%class.SkMatrix*, float*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = trunc i32 %4 to i8
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %9 = zext i8 %8 to i32
  store i32 %9, i32* %3, align 4
  br label %10

10:                                               ; preds = %2, %7
  %11 = phi i32 [ %9, %7 ], [ %4, %2 ]
  %12 = and i32 %11, 15
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %14 = tail call zeroext i1 @_Z16get_scale_factorIL12MinMaxOrBoth2EEbN8SkMatrix8TypeMaskEPKfPf(i32 %12, float* %13, float* %1)
  ret i1 %14
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_Z16get_scale_factorIL12MinMaxOrBoth2EEbN8SkMatrix8TypeMaskEPKfPf(i32, float*, float*) local_unnamed_addr #2 comdat {
  %4 = and i32 %0, 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %81

6:                                                ; preds = %3
  %7 = icmp eq i32 %0, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %6
  store float 1.000000e+00, float* %2, align 4
  %9 = getelementptr inbounds float, float* %2, i64 1
  store float 1.000000e+00, float* %9, align 4
  br label %81

10:                                               ; preds = %6
  %11 = and i32 %0, 4
  %12 = icmp eq i32 %11, 0
  %13 = load float, float* %1, align 4
  br i1 %12, label %14, label %22

14:                                               ; preds = %10
  %15 = tail call float @llvm.fabs.f32(float %13)
  store float %15, float* %2, align 4
  %16 = getelementptr inbounds float, float* %1, i64 4
  %17 = load float, float* %16, align 4
  %18 = tail call float @llvm.fabs.f32(float %17)
  %19 = getelementptr inbounds float, float* %2, i64 1
  store float %18, float* %19, align 4
  %20 = fcmp ogt float %15, %18
  br i1 %20, label %21, label %81

21:                                               ; preds = %14
  store float %18, float* %2, align 4
  store float %15, float* %19, align 4
  br label %81

22:                                               ; preds = %10
  %23 = getelementptr inbounds float, float* %1, i64 3
  %24 = getelementptr inbounds float, float* %1, i64 1
  %25 = load float, float* %24, align 4
  %26 = bitcast float* %23 to <2 x float>*
  %27 = load <2 x float>, <2 x float>* %26, align 4
  %28 = fmul float %13, %25
  %29 = extractelement <2 x float> %27, i32 0
  %30 = extractelement <2 x float> %27, i32 1
  %31 = fmul float %29, %30
  %32 = fadd float %28, %31
  %33 = insertelement <2 x float> undef, float %13, i32 0
  %34 = insertelement <2 x float> %33, float %25, i32 1
  %35 = fmul <2 x float> %34, %34
  %36 = fmul <2 x float> %27, %27
  %37 = fadd <2 x float> %35, %36
  %38 = fmul float %32, %32
  %39 = fcmp ugt float %38, 0x3E70000000000000
  %40 = extractelement <2 x float> %37, i32 0
  br i1 %39, label %46, label %41

41:                                               ; preds = %22
  store float %40, float* %2, align 4
  %42 = getelementptr inbounds float, float* %2, i64 1
  %43 = extractelement <2 x float> %37, i32 1
  store float %43, float* %42, align 4
  %44 = fcmp ogt float %40, %43
  br i1 %44, label %45, label %59

45:                                               ; preds = %41
  store float %43, float* %2, align 4
  store float %40, float* %42, align 4
  br label %59

46:                                               ; preds = %22
  %47 = extractelement <2 x float> %37, i32 1
  %48 = fsub float %40, %47
  %49 = fadd float %40, %47
  %50 = fmul float %49, 5.000000e-01
  %51 = fmul float %48, %48
  %52 = fmul float %38, 4.000000e+00
  %53 = fadd float %51, %52
  %54 = tail call float @sqrtf(float %53) #14
  %55 = fmul float %54, 5.000000e-01
  %56 = fsub float %50, %55
  store float %56, float* %2, align 4
  %57 = fadd float %50, %55
  %58 = getelementptr inbounds float, float* %2, i64 1
  store float %57, float* %58, align 4
  br label %59

59:                                               ; preds = %41, %45, %46
  %60 = phi float [ %40, %41 ], [ %43, %45 ], [ %56, %46 ]
  %61 = bitcast float %60 to i32
  %62 = and i32 %61, 2139095040
  %63 = icmp eq i32 %62, 2139095040
  br i1 %63, label %81, label %64

64:                                               ; preds = %59
  %65 = fcmp olt float %60, 0.000000e+00
  br i1 %65, label %66, label %67

66:                                               ; preds = %64
  store float 0.000000e+00, float* %2, align 4
  br label %67

67:                                               ; preds = %66, %64
  %68 = phi float [ 0.000000e+00, %66 ], [ %60, %64 ]
  %69 = tail call float @sqrtf(float %68) #14
  store float %69, float* %2, align 4
  %70 = getelementptr inbounds float, float* %2, i64 1
  %71 = load float, float* %70, align 4
  %72 = bitcast float %71 to i32
  %73 = and i32 %72, 2139095040
  %74 = icmp eq i32 %73, 2139095040
  br i1 %74, label %81, label %75

75:                                               ; preds = %67
  %76 = fcmp olt float %71, 0.000000e+00
  br i1 %76, label %77, label %78

77:                                               ; preds = %75
  store float 0.000000e+00, float* %70, align 4
  br label %78

78:                                               ; preds = %77, %75
  %79 = phi float [ 0.000000e+00, %77 ], [ %71, %75 ]
  %80 = tail call float @sqrtf(float %79) #14
  store float %80, float* %70, align 4
  br label %81

81:                                               ; preds = %67, %59, %78, %14, %21, %3, %8
  %82 = phi i1 [ true, %8 ], [ false, %3 ], [ true, %21 ], [ true, %14 ], [ true, %78 ], [ false, %59 ], [ false, %67 ]
  ret i1 %82
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix1IEv() local_unnamed_addr #11 align 2 {
  ret %class.SkMatrix* @_ZZN8SkMatrix1IEvE8identity
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix13InvalidMatrixEv() local_unnamed_addr #11 align 2 {
  ret %class.SkMatrix* @_ZZN8SkMatrix13InvalidMatrixEvE7invalid
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkMatrix14decomposeScaleEP6SkSizePS_(%class.SkMatrix* nocapture, %struct.SkSize*, %class.SkMatrix*) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 192
  %7 = icmp eq i32 %6, 128
  br i1 %7, label %8, label %23

8:                                                ; preds = %3
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %10 = load float, float* %9, align 4
  %11 = fcmp une float %10, 0.000000e+00
  br i1 %11, label %21, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %14 = load float, float* %13, align 4
  %15 = fcmp une float %14, 0.000000e+00
  br i1 %15, label %21, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %18 = load float, float* %17, align 4
  %19 = fcmp une float %18, 1.000000e+00
  br i1 %19, label %21, label %20

20:                                               ; preds = %16
  br label %21

21:                                               ; preds = %20, %16, %12, %8
  %22 = phi i32 [ 192, %20 ], [ 15, %16 ], [ 15, %12 ], [ 15, %8 ]
  store i32 %22, i32* %4, align 4
  br label %23

23:                                               ; preds = %3, %21
  %24 = phi i32 [ %22, %21 ], [ %5, %3 ]
  %25 = and i32 %24, 8
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %104

27:                                               ; preds = %23
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %31 = load float, float* %30, align 4
  %32 = tail call float @_ZN7SkPoint6LengthEff(float %29, float %31) #14
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %34 = load float, float* %33, align 4
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %36 = load float, float* %35, align 4
  %37 = tail call float @_ZN7SkPoint6LengthEff(float %34, float %36) #14
  %38 = bitcast float %32 to i32
  %39 = and i32 %38, 2139095040
  %40 = icmp eq i32 %39, 2139095040
  br i1 %40, label %104, label %41

41:                                               ; preds = %27
  %42 = bitcast float %37 to i32
  %43 = and i32 %42, 2139095040
  %44 = icmp eq i32 %43, 2139095040
  %45 = tail call float @llvm.fabs.f32(float %32) #14
  %46 = fcmp ole float %45, 0x3F30000000000000
  %47 = or i1 %46, %44
  %48 = tail call float @llvm.fabs.f32(float %37) #14
  %49 = fcmp ole float %48, 0x3F30000000000000
  %50 = or i1 %49, %47
  br i1 %50, label %104, label %51

51:                                               ; preds = %41
  %52 = icmp eq %struct.SkSize* %1, null
  br i1 %52, label %56, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds %struct.SkSize, %struct.SkSize* %1, i64 0, i32 0
  store float %32, float* %54, align 4
  %55 = getelementptr inbounds %struct.SkSize, %struct.SkSize* %1, i64 0, i32 1
  store float %37, float* %55, align 4
  br label %56

56:                                               ; preds = %51, %53
  %57 = icmp eq %class.SkMatrix* %2, null
  br i1 %57, label %104, label %58

58:                                               ; preds = %56
  %59 = bitcast %class.SkMatrix* %2 to i8*
  %60 = bitcast %class.SkMatrix* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %59, i8* align 4 %60, i64 40, i1 false)
  %61 = insertelement <2 x float> undef, float %32, i32 0
  %62 = insertelement <2 x float> %61, float %37, i32 1
  %63 = fdiv <2 x float> <float 1.000000e+00, float 1.000000e+00>, %62
  %64 = extractelement <2 x float> %63, i32 0
  %65 = fcmp oeq float %64, 1.000000e+00
  %66 = extractelement <2 x float> %63, i32 1
  %67 = fcmp oeq float %66, 1.000000e+00
  %68 = and i1 %65, %67
  br i1 %68, label %104, label %69

69:                                               ; preds = %58
  %70 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 0
  %71 = load float, float* %70, align 4
  %72 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 4
  %73 = load float, float* %72, align 4
  %74 = insertelement <2 x float> undef, float %71, i32 0
  %75 = insertelement <2 x float> %74, float %73, i32 1
  %76 = fmul <2 x float> %63, %75
  %77 = extractelement <2 x float> %76, i32 0
  store float %77, float* %70, align 4
  %78 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 3
  %79 = load float, float* %78, align 4
  %80 = fmul float %64, %79
  store float %80, float* %78, align 4
  %81 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 6
  %82 = load float, float* %81, align 4
  %83 = fmul float %64, %82
  store float %83, float* %81, align 4
  %84 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 1
  %85 = load float, float* %84, align 4
  %86 = fmul float %66, %85
  store float %86, float* %84, align 4
  %87 = extractelement <2 x float> %76, i32 1
  store float %87, float* %72, align 4
  %88 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 7
  %89 = load float, float* %88, align 4
  %90 = fmul float %66, %89
  store float %90, float* %88, align 4
  %91 = fcmp oeq <2 x float> %76, <float 1.000000e+00, float 1.000000e+00>
  %92 = extractelement <2 x i1> %91, i32 0
  %93 = extractelement <2 x i1> %91, i32 1
  %94 = and i1 %92, %93
  %95 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  %96 = load i32, i32* %95, align 4
  %97 = and i32 %96, 12
  %98 = icmp eq i32 %97, 0
  %99 = and i1 %94, %98
  br i1 %99, label %100, label %102

100:                                              ; preds = %69
  %101 = and i32 %96, -3
  store i32 %101, i32* %95, align 4
  br label %104

102:                                              ; preds = %69
  %103 = or i32 %96, 2
  store i32 %103, i32* %95, align 4
  br label %104

104:                                              ; preds = %27, %23, %41, %102, %100, %58, %56
  %105 = phi i1 [ false, %23 ], [ false, %41 ], [ false, %27 ], [ true, %56 ], [ true, %58 ], [ true, %100 ], [ true, %102 ]
  ret i1 %105
}

declare float @_ZN7SkPoint6LengthEff(float, float) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK8SkMatrix13writeToMemoryEPv(%class.SkMatrix* nocapture readonly, i8*) local_unnamed_addr #2 align 2 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = bitcast %class.SkMatrix* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %1, i8* align 4 %5, i64 36, i1 false)
  br label %6

6:                                                ; preds = %2, %4
  ret i64 36
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN8SkMatrix14readFromMemoryEPKvm(%class.SkMatrix* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #2 align 2 {
  %4 = icmp ult i64 %2, 36
  br i1 %4, label %10, label %5

5:                                                ; preds = %3
  %6 = bitcast %class.SkMatrix* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 1 %1, i64 36, i1 false)
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  store i32 128, i32* %7, align 4
  %8 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %9 = zext i8 %8 to i32
  store i32 %9, i32* %7, align 4
  br label %10

10:                                               ; preds = %3, %5
  %11 = phi i64 [ 36, %5 ], [ 0, %3 ]
  ret i64 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkMatrix4dumpEv(%class.SkMatrix* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = alloca %class.SkString, align 8
  %3 = bitcast %class.SkString* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #14
  %4 = getelementptr inbounds %class.SkString, %class.SkString* %2, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %4, align 8
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %2) #14
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %6 = load float, float* %5, align 4
  %7 = fpext float %6 to double
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %9 = load float, float* %8, align 4
  %10 = fpext float %9 to double
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %12 = load float, float* %11, align 4
  %13 = fpext float %12 to double
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %24 = load float, float* %23, align 4
  %25 = fpext float %24 to double
  %26 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %27 = load float, float* %26, align 4
  %28 = fpext float %27 to double
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %30 = load float, float* %29, align 4
  %31 = fpext float %30 to double
  call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* nonnull %2, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.2, i64 0, i64 0), double %7, double %10, double %13, double %16, double %19, double %22, double %25, double %28, double %31) #14
  %32 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %4, align 8
  %33 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %32, i64 0, i32 2
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i32 1627, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* %33) #14
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #14
  ret void
}

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #8

declare void @_ZN8SkString7appendfEPKcz(%class.SkString*, i8*, ...) local_unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z15SkTreatAsSpriteRK8SkMatrixRK7SkISizeRK17SkSamplingOptionsRK7SkPaint(%class.SkMatrix* dereferenceable(40), %struct.SkISize* nocapture readonly dereferenceable(8), %struct.SkSamplingOptions* nocapture readonly dereferenceable(20), %class.SkPaint* nocapture readonly dereferenceable(72)) local_unnamed_addr #2 {
  %5 = alloca <4 x float>, align 16
  %6 = bitcast <4 x float>* %5 to %struct.SkRect*
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %struct.SkIRect*
  %9 = alloca %struct.SkRect, align 4
  %10 = alloca <4 x i32>, align 16
  %11 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %2, i64 0, i32 0
  %12 = load i8, i8* %11, align 4, !range !25
  %13 = icmp eq i8 %12, 0
  %14 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %2, i64 0, i32 1, i32 0
  %15 = load float, float* %14, align 4
  %16 = fcmp oeq float %15, 0.000000e+00
  %17 = or i1 %13, %16
  br i1 %17, label %18, label %144

18:                                               ; preds = %4
  %19 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %3, i64 0, i32 8, i32 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = and i32 %20, 1
  %22 = icmp ne i32 %21, 0
  %23 = shl nuw nsw i32 %21, 2
  %24 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = trunc i32 %25 to i8
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %18
  %29 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %30 = zext i8 %29 to i32
  store i32 %30, i32* %24, align 4
  br label %31

31:                                               ; preds = %18, %28
  %32 = phi i32 [ %30, %28 ], [ %25, %18 ]
  %33 = and i32 %32, 12
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %144

35:                                               ; preds = %31
  br i1 %22, label %46, label %36

36:                                               ; preds = %35
  %37 = trunc i32 %32 to i8
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %36
  %40 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %0) #14
  %41 = zext i8 %40 to i32
  store i32 %41, i32* %24, align 4
  br label %42

42:                                               ; preds = %36, %39
  %43 = phi i32 [ %41, %39 ], [ %32, %36 ]
  %44 = and i32 %43, 14
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %144, label %46

46:                                               ; preds = %42, %35
  %47 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %48 = load float, float* %47, align 4
  %49 = fcmp olt float %48, 0.000000e+00
  br i1 %49, label %144, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %52 = load float, float* %51, align 4
  %53 = fcmp olt float %52, 0.000000e+00
  br i1 %53, label %144, label %54

54:                                               ; preds = %50
  %55 = bitcast <4 x float>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %55) #14
  %56 = bitcast { i64, i64 }* %7 to i8*
  %57 = bitcast <4 x float>* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %57, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %56) #14
  %58 = bitcast { i64, i64 }* %7 to i32*
  %59 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 1
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %61 = bitcast i64* %60 to i32*
  %62 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 3
  %63 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %1, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %1, i64 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = bitcast %struct.SkRect* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67) #14
  %68 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %9, i64 0, i32 0
  %69 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %9, i64 0, i32 1
  %70 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %9, i64 0, i32 2
  %71 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %9, i64 0, i32 3
  store float 0.000000e+00, float* %68, align 4
  store float 0.000000e+00, float* %69, align 4
  %72 = sitofp i32 %64 to float
  store float %72, float* %70, align 4
  %73 = sitofp i32 %66 to float
  store float %73, float* %71, align 4
  %74 = call zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix* %0, %struct.SkRect* nonnull %6, %struct.SkRect* nonnull dereferenceable(16) %9, i32 1)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #14
  %75 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %76 = load float, float* %75, align 4
  %77 = fadd float %76, 5.000000e-01
  %78 = call float @llvm.floor.f32(float %77)
  %79 = fcmp olt float %78, 0x41DFFFFFE0000000
  %80 = select i1 %79, float %78, float 0x41DFFFFFE0000000
  %81 = fcmp ogt float %80, 0xC1DFFFFFE0000000
  %82 = select i1 %81, float %80, float 0xC1DFFFFFE0000000
  %83 = fptosi float %82 to i32
  %84 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %85 = load float, float* %84, align 4
  %86 = fadd float %85, 5.000000e-01
  %87 = call float @llvm.floor.f32(float %86)
  %88 = fcmp olt float %87, 0x41DFFFFFE0000000
  %89 = select i1 %88, float %87, float 0x41DFFFFFE0000000
  %90 = fcmp ogt float %89, 0xC1DFFFFFE0000000
  %91 = select i1 %90, float %89, float 0xC1DFFFFFE0000000
  %92 = fptosi float %91 to i32
  %93 = sext i32 %83 to i64
  %94 = icmp slt i64 %93, 2147483647
  %95 = select i1 %94, i64 %93, i64 2147483647
  %96 = icmp sgt i64 %95, -2147483647
  %97 = select i1 %96, i64 %95, i64 -2147483647
  %98 = trunc i64 %97 to i32
  store i32 %98, i32* %58, align 8
  %99 = sext i32 %92 to i64
  %100 = icmp slt i64 %99, 2147483647
  %101 = select i1 %100, i64 %99, i64 2147483647
  %102 = icmp sgt i64 %101, -2147483647
  %103 = select i1 %102, i64 %101, i64 -2147483647
  %104 = trunc i64 %103 to i32
  store i32 %104, i32* %59, align 4
  %105 = sext i32 %64 to i64
  %106 = add nsw i64 %93, %105
  %107 = icmp slt i64 %106, 2147483647
  %108 = select i1 %107, i64 %106, i64 2147483647
  %109 = icmp sgt i64 %108, -2147483647
  %110 = select i1 %109, i64 %108, i64 -2147483647
  %111 = trunc i64 %110 to i32
  store i32 %111, i32* %61, align 8
  %112 = sext i32 %66 to i64
  %113 = add nsw i64 %99, %112
  %114 = icmp slt i64 %113, 2147483647
  %115 = select i1 %114, i64 %113, i64 2147483647
  %116 = icmp sgt i64 %115, -2147483647
  %117 = select i1 %116, i64 %115, i64 -2147483647
  %118 = trunc i64 %117 to i32
  store i32 %118, i32* %62, align 4
  br i1 %22, label %121, label %119

119:                                              ; preds = %54
  %120 = load <4 x float>, <4 x float>* %5, align 16
  br label %132

121:                                              ; preds = %54
  %122 = shl i32 %98, %23
  store i32 %122, i32* %58, align 8
  %123 = shl i32 %104, %23
  store i32 %123, i32* %59, align 4
  %124 = shl i32 %111, %23
  store i32 %124, i32* %61, align 8
  %125 = shl i32 %118, %23
  store i32 %125, i32* %62, align 4
  %126 = shl i32 1, %23
  %127 = sitofp i32 %126 to float
  %128 = load <4 x float>, <4 x float>* %5, align 16
  %129 = insertelement <4 x float> undef, float %127, i32 0
  %130 = shufflevector <4 x float> %129, <4 x float> undef, <4 x i32> zeroinitializer
  %131 = fmul <4 x float> %128, %130
  store <4 x float> %131, <4 x float>* %5, align 16
  br label %132

132:                                              ; preds = %119, %121
  %133 = phi <4 x float> [ %120, %119 ], [ %131, %121 ]
  %134 = bitcast <4 x i32>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %134) #14
  %135 = fadd <4 x float> %133, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %136 = call <4 x float> @llvm.floor.v4f32(<4 x float> %135)
  %137 = fcmp olt <4 x float> %136, <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %138 = select <4 x i1> %137, <4 x float> %136, <4 x float> <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %139 = fcmp ogt <4 x float> %138, <float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000>
  %140 = select <4 x i1> %139, <4 x float> %138, <4 x float> <float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000>
  %141 = fptosi <4 x float> %140 to <4 x i32>
  store <4 x i32> %141, <4 x i32>* %10, align 16
  %142 = call i32 @bcmp(i8* nonnull %56, i8* nonnull %134, i64 16) #14
  %143 = icmp eq i32 %142, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %134) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %56) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %55) #14
  br label %144

144:                                              ; preds = %42, %31, %132, %50, %46, %4
  %145 = phi i1 [ false, %4 ], [ %143, %132 ], [ false, %31 ], [ true, %42 ], [ false, %50 ], [ false, %46 ]
  ret i1 %145
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_Z19SkDecomposeUpper2x2RK8SkMatrixP7SkPointS3_S3_(%class.SkMatrix* nocapture readonly dereferenceable(40), %struct.SkPoint*, %struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #4 {
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %12 = load float, float* %11, align 4
  %13 = fmul float %6, %12
  %14 = fmul float %8, %10
  %15 = fsub float %13, %14
  %16 = tail call float @llvm.fabs.f32(float %15) #14
  %17 = fcmp ugt float %16, 0x3E70000000000000
  br i1 %17, label %18, label %106

18:                                               ; preds = %4
  %19 = fsub float %8, %10
  %20 = tail call float @llvm.fabs.f32(float %19) #14
  %21 = fcmp ugt float %20, 0x3F30000000000000
  br i1 %21, label %22, label %41

22:                                               ; preds = %18
  %23 = fadd float %6, %12
  %24 = fsub float %10, %8
  %25 = fmul float %23, %23
  %26 = fmul float %24, %24
  %27 = fadd float %26, %25
  %28 = tail call float @sqrtf(float %27) #14
  %29 = fdiv float 1.000000e+00, %28
  %30 = fmul float %23, %29
  %31 = fmul float %24, %29
  %32 = fmul float %6, %30
  %33 = fmul float %10, %31
  %34 = fadd float %32, %33
  %35 = fmul float %8, %30
  %36 = fmul float %12, %31
  %37 = fadd float %35, %36
  %38 = fmul float %8, %31
  %39 = fmul float %12, %30
  %40 = fsub float %39, %38
  br label %41

41:                                               ; preds = %18, %22
  %42 = phi float [ %30, %22 ], [ 1.000000e+00, %18 ]
  %43 = phi float [ %31, %22 ], [ 0.000000e+00, %18 ]
  %44 = phi float [ %34, %22 ], [ %6, %18 ]
  %45 = phi float [ %37, %22 ], [ %8, %18 ]
  %46 = phi float [ %40, %22 ], [ %12, %18 ]
  %47 = fpext float %46 to double
  %48 = fpext float %45 to double
  %49 = fpext float %44 to double
  %50 = tail call float @llvm.fabs.f32(float %45) #14
  %51 = fcmp ugt float %50, 0x3F30000000000000
  br i1 %51, label %52, label %83

52:                                               ; preds = %41
  %53 = fsub double %49, %47
  %54 = fmul double %53, %53
  %55 = fmul double %48, 4.000000e+00
  %56 = fmul double %55, %48
  %57 = fadd double %56, %54
  %58 = tail call double @sqrt(double %57) #14
  %59 = fadd double %49, %47
  %60 = fcmp ogt double %53, 0.000000e+00
  %61 = fadd double %59, %58
  %62 = fsub double %59, %58
  %63 = select i1 %60, double %61, double %62
  %64 = select i1 %60, double %62, double %61
  %65 = fmul double %64, 5.000000e-01
  %66 = fmul double %63, 5.000000e-01
  %67 = fsub double %66, %49
  %68 = fptrunc double %67 to float
  %69 = fmul float %45, %45
  %70 = fmul float %68, %68
  %71 = fadd float %69, %70
  %72 = tail call float @sqrtf(float %71) #14
  %73 = fdiv float 1.000000e+00, %72
  %74 = fmul float %45, %73
  %75 = fmul float %73, %68
  %76 = fmul float %42, %74
  %77 = fmul float %43, %75
  %78 = fsub float %76, %77
  %79 = fmul float %42, %75
  %80 = fmul float %43, %74
  %81 = fadd float %80, %79
  %82 = fsub float -0.000000e+00, %75
  br label %83

83:                                               ; preds = %41, %52
  %84 = phi double [ %66, %52 ], [ %49, %41 ]
  %85 = phi double [ %65, %52 ], [ %47, %41 ]
  %86 = phi float [ %74, %52 ], [ 1.000000e+00, %41 ]
  %87 = phi float [ %82, %52 ], [ 0.000000e+00, %41 ]
  %88 = phi float [ %78, %52 ], [ %42, %41 ]
  %89 = phi float [ %81, %52 ], [ %43, %41 ]
  %90 = icmp eq %struct.SkPoint* %2, null
  br i1 %90, label %96, label %91

91:                                               ; preds = %83
  %92 = fptrunc double %84 to float
  %93 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  store float %92, float* %93, align 4
  %94 = fptrunc double %85 to float
  %95 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  store float %94, float* %95, align 4
  br label %96

96:                                               ; preds = %83, %91
  %97 = icmp eq %struct.SkPoint* %1, null
  br i1 %97, label %101, label %98

98:                                               ; preds = %96
  %99 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  store float %86, float* %99, align 4
  %100 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  store float %87, float* %100, align 4
  br label %101

101:                                              ; preds = %96, %98
  %102 = icmp eq %struct.SkPoint* %3, null
  br i1 %102, label %106, label %103

103:                                              ; preds = %101
  %104 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  store float %88, float* %104, align 4
  %105 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  store float %89, float* %105, align 4
  br label %106

106:                                              ; preds = %4, %103, %101
  %107 = phi i1 [ false, %4 ], [ true, %101 ], [ true, %103 ]
  ret i1 %107
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #10

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK9SkRSXform6toQuadEffP7SkPoint(%struct.SkRSXform* nocapture readonly, float, float, %struct.SkPoint* nocapture) local_unnamed_addr #0 align 2 {
  %5 = bitcast %struct.SkRSXform* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = getelementptr inbounds %struct.SkRSXform, %struct.SkRSXform* %0, i64 0, i32 2
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = shufflevector <2 x float> %9, <2 x float> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  %12 = extractelement <2 x float> %9, i32 0
  store float %12, float* %11, align 4
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  %14 = extractelement <2 x float> %9, i32 1
  store float %14, float* %13, align 4
  %15 = insertelement <2 x float> undef, float %1, i32 0
  %16 = shufflevector <2 x float> %15, <2 x float> undef, <2 x i32> zeroinitializer
  %17 = fmul <2 x float> %6, %16
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 1, i32 0
  %19 = extractelement <2 x float> %6, i32 1
  %20 = fmul float %19, %2
  %21 = extractelement <2 x float> %17, i32 0
  %22 = fsub float %21, %20
  %23 = extractelement <2 x float> %6, i32 0
  %24 = fmul float %23, %2
  %25 = extractelement <2 x float> %17, i32 1
  %26 = fadd float %24, %25
  %27 = insertelement <4 x float> undef, float %21, i32 0
  %28 = insertelement <4 x float> %27, float %25, i32 1
  %29 = insertelement <4 x float> %28, float %12, i32 2
  %30 = insertelement <4 x float> %29, float %26, i32 3
  %31 = insertelement <4 x float> undef, float %12, i32 0
  %32 = insertelement <4 x float> %31, float %14, i32 1
  %33 = insertelement <4 x float> %32, float %22, i32 2
  %34 = shufflevector <4 x float> %33, <4 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
  %35 = fadd <4 x float> %30, %34
  %36 = bitcast float* %18 to <4 x float>*
  store <4 x float> %35, <4 x float>* %36, align 4
  %37 = fsub float %12, %20
  %38 = fadd float %24, %14
  %39 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 3, i32 0
  store float %37, float* %39, align 4
  %40 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 3, i32 1
  store float %38, float* %40, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK9SkRSXform10toTriStripEffP7SkPoint(%struct.SkRSXform* nocapture readonly, float, float, %struct.SkPoint* nocapture) local_unnamed_addr #0 align 2 {
  %5 = bitcast %struct.SkRSXform* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = shufflevector <2 x float> %6, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %8 = shufflevector <2 x float> %7, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %9 = getelementptr inbounds %struct.SkRSXform, %struct.SkRSXform* %0, i64 0, i32 2
  %10 = bitcast float* %9 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = shufflevector <2 x float> %11, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  %14 = extractelement <2 x float> %11, i32 0
  store float %14, float* %13, align 4
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  %16 = extractelement <2 x float> %11, i32 1
  store float %16, float* %15, align 4
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 1, i32 0
  %18 = insertelement <2 x float> undef, float %2, i32 0
  %19 = insertelement <2 x float> %18, float %1, i32 1
  %20 = shufflevector <2 x float> %19, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %21 = fmul <4 x float> %8, %20
  %22 = fsub <4 x float> %12, %21
  %23 = fadd <4 x float> %12, %21
  %24 = shufflevector <4 x float> %22, <4 x float> %23, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %25 = bitcast float* %17 to <4 x float>*
  store <4 x float> %24, <4 x float>* %25, align 4
  %26 = extractelement <4 x float> %21, i32 0
  %27 = extractelement <4 x float> %21, i32 2
  %28 = fsub float %27, %26
  %29 = fadd float %14, %28
  %30 = extractelement <4 x float> %21, i32 1
  %31 = extractelement <4 x float> %21, i32 3
  %32 = fadd float %30, %31
  %33 = fadd float %32, %16
  %34 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 3, i32 0
  store float %29, float* %34, align 4
  %35 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 3, i32 1
  store float %33, float* %35, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN12SkMatrixPriv21DifferentialAreaScaleERK8SkMatrixRK7SkPoint(%class.SkMatrix* dereferenceable(40), %struct.SkPoint* nocapture readonly dereferenceable(8)) local_unnamed_addr #2 align 2 {
  %3 = alloca %struct.SkPoint3, align 4
  %4 = bitcast %struct.SkPoint3* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %4) #14
  %5 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %3, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %5, align 4
  %6 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %3, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %6, align 4
  %7 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %3, i64 0, i32 2
  store float 0xFFFFFFFFE0000000, float* %7, align 4
  call void @_ZNK8SkMatrix20mapHomogeneousPointsEP8SkPoint3PK7SkPointi(%class.SkMatrix* %0, %struct.SkPoint3* nonnull %3, %struct.SkPoint* %1, i32 1)
  %8 = load float, float* %7, align 4
  %9 = fcmp olt float %8, 0x3F30000000000000
  br i1 %9, label %54, label %10

10:                                               ; preds = %2
  %11 = load float, float* %5, align 4
  %12 = load float, float* %6, align 4
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 0
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %18 = load float, float* %17, align 4
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %24 = load float, float* %23, align 4
  %25 = fdiv float 1.000000e+00, %8
  %26 = fmul float %25, %25
  %27 = fmul float %25, %26
  %28 = fpext float %11 to double
  %29 = fpext float %16 to double
  %30 = fpext float %24 to double
  %31 = fpext float %18 to double
  %32 = fpext float %22 to double
  %33 = fmul double %29, %30
  %34 = fmul double %31, %32
  %35 = fsub double %33, %34
  %36 = fmul double %35, %28
  %37 = fpext float %12 to double
  %38 = fpext float %20 to double
  %39 = fpext float %14 to double
  %40 = fmul double %31, %38
  %41 = fmul double %39, %30
  %42 = fsub double %40, %41
  %43 = fmul double %42, %37
  %44 = fadd double %36, %43
  %45 = fpext float %8 to double
  %46 = fmul double %39, %32
  %47 = fmul double %29, %38
  %48 = fsub double %46, %47
  %49 = fmul double %48, %45
  %50 = fadd double %49, %44
  %51 = fptrunc double %50 to float
  %52 = fmul float %27, %51
  %53 = tail call float @llvm.fabs.f32(float %52)
  br label %54

54:                                               ; preds = %2, %10
  %55 = phi float [ %53, %10 ], [ 0x7FF0000000000000, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %4) #14
  ret float %55
}

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #10

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #10

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.min.ps(<4 x float>, <4 x float>) #12

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ps(<4 x float>, <4 x float>) #12

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath7addRectERK6SkRect15SkPathDirectionj(%class.SkPath*, %struct.SkRect* dereferenceable(16), i32, i32) local_unnamed_addr #8

declare void @_ZNK6SkPath9transformERK8SkMatrixPS_22SkApplyPerspectiveClip(%class.SkPath*, %class.SkMatrix* dereferenceable(40), %class.SkPath*, i32) local_unnamed_addr #8

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #8

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #13

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.floor.v4f32(<4 x float>) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone }
attributes #13 = { nofree nounwind readonly }
attributes #14 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !6}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = distinct !{!13, !6}
!14 = distinct !{!14, !6}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = distinct !{!18, !6}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = distinct !{!22, !6}
!23 = distinct !{!23, !6}
!24 = distinct !{!24, !6}
!25 = !{i8 0, i8 2}
