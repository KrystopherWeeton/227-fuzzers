; ModuleID = '../../services/data_decoder/gzipper.cc'
source_filename = "../../services/data_decoder/gzipper.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.data_decoder::Gzipper" = type { %"class.data_decoder::mojom::Gzipper" }
%"class.data_decoder::mojom::Gzipper" = type { i32 (...)** }
%"class.mojo_base::BigBuffer" = type { i32, %"class.std::__1::unique_ptr", i64, %"class.absl::optional" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.mojo_base::internal::BigBufferSharedMemoryRegion" }
%"class.mojo_base::internal::BigBufferSharedMemoryRegion" = type { i64, %"class.mojo::ScopedHandleBase", %"class.std::__1::unique_ptr.1" }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::SharedBufferHandle" }
%"class.mojo::SharedBufferHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i8* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.8 }
%union.anon.8 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional.10" = type { %"class.absl::optional_internal::optional_data.11" }
%"class.absl::optional_internal::optional_data.11" = type { %"class.absl::optional_internal::optional_data_base.12" }
%"class.absl::optional_internal::optional_data_base.12" = type { %"class.absl::optional_internal::optional_data_dtor_base.13" }
%"class.absl::optional_internal::optional_data_dtor_base.13" = type { i8, %union.anon.14 }
%union.anon.14 = type { %"class.mojo_base::BigBuffer" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZTVN12data_decoder7GzipperE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.data_decoder::Gzipper"*)* @_ZN12data_decoder7GzipperD2Ev to i8*), i8* bitcast (void (%"class.data_decoder::Gzipper"*)* @_ZN12data_decoder7GzipperD0Ev to i8*), i8* bitcast (void (%"class.data_decoder::Gzipper"*, %"class.mojo_base::BigBuffer"*, %"class.base::OnceCallback"*)* @_ZN12data_decoder7Gzipper8CompressEN9mojo_base9BigBufferEN4base12OnceCallbackIFvN4absl8optionalIS2_EEEEE to i8*), i8* bitcast (void (%"class.data_decoder::Gzipper"*, %"class.mojo_base::BigBuffer"*, %"class.base::OnceCallback"*)* @_ZN12data_decoder7Gzipper10UncompressEN9mojo_base9BigBufferEN4base12OnceCallbackIFvN4absl8optionalIS2_EEEEE to i8*)] }, align 8

@_ZN12data_decoder7GzipperC1Ev = hidden unnamed_addr alias void (%"class.data_decoder::Gzipper"*), void (%"class.data_decoder::Gzipper"*)* @_ZN12data_decoder7GzipperC2Ev
@_ZN12data_decoder7GzipperD1Ev = hidden unnamed_addr alias void (%"class.data_decoder::Gzipper"*), void (%"class.data_decoder::Gzipper"*)* @_ZN12data_decoder7GzipperD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN12data_decoder7GzipperC2Ev(%"class.data_decoder::Gzipper"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.data_decoder::Gzipper", %"class.data_decoder::Gzipper"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12data_decoder7GzipperE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN12data_decoder7GzipperD2Ev(%"class.data_decoder::Gzipper"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12data_decoder7GzipperD0Ev(%"class.data_decoder::Gzipper"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.data_decoder::Gzipper"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12data_decoder7Gzipper8CompressEN9mojo_base9BigBufferEN4base12OnceCallbackIFvN4absl8optionalIS2_EEEEE(%"class.data_decoder::Gzipper"* nocapture readnone, %"class.mojo_base::BigBuffer"*, %"class.base::OnceCallback"* nocapture) unnamed_addr #2 align 2 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.absl::optional.10", align 8
  %8 = alloca %"class.absl::optional.10", align 8
  %9 = alloca %"class.mojo_base::BigBuffer", align 8
  %10 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #8
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false) #8
  %12 = tail call i8* @_ZN9mojo_base9BigBuffer4dataEv(%"class.mojo_base::BigBuffer"* %1) #8
  %13 = tail call i64 @_ZNK9mojo_base9BigBuffer4sizeEv(%"class.mojo_base::BigBuffer"* %1) #8
  %14 = call zeroext i1 @_ZN11compression12GzipCompressEN4base4spanIKhLm18446744073709551615EEEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(i64 %13, i8* %12, %"class.std::__1::basic_string"* nonnull %6) #8
  br i1 %14, label %33, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.absl::optional.10", %"class.absl::optional.10"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %16, align 8
  %17 = getelementptr inbounds %"class.absl::optional.10", %"class.absl::optional.10"* %7, i64 0, i32 0, i32 0, i32 0, i32 1
  %18 = bitcast %union.anon.14* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 56, i1 false) #8
  %19 = bitcast %"class.base::OnceCallback"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #8
  %20 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %21 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %22, i64* %23, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %20, align 8
  %24 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  %25 = inttoptr i64 %22 to %"class.base::internal::BindStateBase"*
  %26 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %25, i64 0, i32 1
  %27 = bitcast void ()** %26 to void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.10"*)**
  %28 = load void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.10"*)*, void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.10"*)** %27, align 8
  call void %28(%"class.base::internal::BindStateBase"* %25, %"class.absl::optional.10"* nonnull dereferenceable(64) %7) #8
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %24) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #8
  %29 = load i8, i8* %16, align 8, !range !2
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %61, label %31

31:                                               ; preds = %15
  %32 = getelementptr inbounds %"class.absl::optional.10", %"class.absl::optional.10"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN9mojo_base9BigBufferD1Ev(%"class.mojo_base::BigBuffer"* %32) #8
  store i8 0, i8* %16, align 8
  br label %61

33:                                               ; preds = %3
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %35 = bitcast %"class.mojo_base::BigBuffer"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %35) #8
  %36 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  %38 = load i8, i8* %37, align 1, !noalias !3
  %39 = icmp slt i8 %38, 0
  %40 = load i8*, i8** %11, align 8, !noalias !3
  %41 = select i1 %39, i8* %40, i8* %10
  %42 = load i64, i64* %34, align 8, !noalias !3
  %43 = zext i8 %38 to i64
  %44 = select i1 %39, i64 %42, i64 %43
  call void @_ZN9mojo_base9BigBufferC1EN4base4spanIKhLm18446744073709551615EEE(%"class.mojo_base::BigBuffer"* nonnull %9, i64 %44, i8* %41) #8
  %45 = getelementptr inbounds %"class.absl::optional.10", %"class.absl::optional.10"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %45, align 8
  %46 = getelementptr inbounds %"class.absl::optional.10", %"class.absl::optional.10"* %8, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN9mojo_base9BigBufferC1EOS0_(%"class.mojo_base::BigBuffer"* %46, %"class.mojo_base::BigBuffer"* nonnull dereferenceable(56) %9) #8
  %47 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #8
  %48 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %49 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %50, i64* %51, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %48, align 8
  %52 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  %53 = inttoptr i64 %50 to %"class.base::internal::BindStateBase"*
  %54 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %53, i64 0, i32 1
  %55 = bitcast void ()** %54 to void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.10"*)**
  %56 = load void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.10"*)*, void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.10"*)** %55, align 8
  call void %56(%"class.base::internal::BindStateBase"* %53, %"class.absl::optional.10"* nonnull dereferenceable(64) %8) #8
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %52) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #8
  %57 = load i8, i8* %45, align 8, !range !2
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %60, label %59

59:                                               ; preds = %33
  call void @_ZN9mojo_base9BigBufferD1Ev(%"class.mojo_base::BigBuffer"* %46) #8
  store i8 0, i8* %45, align 8
  br label %60

60:                                               ; preds = %33, %59
  call void @_ZN9mojo_base9BigBufferD1Ev(%"class.mojo_base::BigBuffer"* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %35) #8
  br label %61

61:                                               ; preds = %31, %15, %60
  %62 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %63 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %62, i64 0, i32 1, i32 0
  %64 = load i8, i8* %63, align 1
  %65 = icmp slt i8 %64, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %61
  %67 = load i8*, i8** %11, align 8
  call void @_ZdlPv(i8* %67) #7
  br label %68

68:                                               ; preds = %61, %66
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare zeroext i1 @_ZN11compression12GzipCompressEN4base4spanIKhLm18446744073709551615EEEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(i64, i8*, %"class.std::__1::basic_string"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN9mojo_base9BigBufferD1Ev(%"class.mojo_base::BigBuffer"*) unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12data_decoder7Gzipper10UncompressEN9mojo_base9BigBufferEN4base12OnceCallbackIFvN4absl8optionalIS2_EEEEE(%"class.data_decoder::Gzipper"* nocapture readnone, %"class.mojo_base::BigBuffer"*, %"class.base::OnceCallback"* nocapture) unnamed_addr #2 align 2 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = alloca %"class.mojo_base::BigBuffer", align 8
  %7 = alloca %"class.absl::optional.10", align 8
  %8 = alloca %"class.absl::optional.10", align 8
  %9 = bitcast %"class.mojo_base::BigBuffer"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %9) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 56, i1 false)
  %10 = tail call i8* @_ZN9mojo_base9BigBuffer4dataEv(%"class.mojo_base::BigBuffer"* %1) #8
  %11 = tail call i64 @_ZNK9mojo_base9BigBuffer4sizeEv(%"class.mojo_base::BigBuffer"* %1) #8
  %12 = tail call i32 @_ZN11compression19GetUncompressedSizeEN4base4spanIKhLm18446744073709551615EEE(i64 %11, i8* %10) #8
  %13 = zext i32 %12 to i64
  call void @_ZN9mojo_base9BigBufferC1Em(%"class.mojo_base::BigBuffer"* nonnull %6, i64 %13) #8
  %14 = call i8* @_ZN9mojo_base9BigBuffer4dataEv(%"class.mojo_base::BigBuffer"* %1) #8
  %15 = call i64 @_ZNK9mojo_base9BigBuffer4sizeEv(%"class.mojo_base::BigBuffer"* %1) #8
  %16 = call i8* @_ZN9mojo_base9BigBuffer4dataEv(%"class.mojo_base::BigBuffer"* nonnull %6) #8
  %17 = call i64 @_ZNK9mojo_base9BigBuffer4sizeEv(%"class.mojo_base::BigBuffer"* nonnull %6) #8
  %18 = call zeroext i1 @_ZN11compression14GzipUncompressEN4base4spanIKhLm18446744073709551615EEES3_(i64 %15, i8* %14, i64 %17, i8* %16) #8
  br i1 %18, label %37, label %19

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.absl::optional.10", %"class.absl::optional.10"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %20, align 8
  %21 = getelementptr inbounds %"class.absl::optional.10", %"class.absl::optional.10"* %7, i64 0, i32 0, i32 0, i32 0, i32 1
  %22 = bitcast %union.anon.14* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 56, i1 false) #8
  %23 = bitcast %"class.base::OnceCallback"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #8
  %24 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %25 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %26, i64* %27, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %24, align 8
  %28 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  %29 = inttoptr i64 %26 to %"class.base::internal::BindStateBase"*
  %30 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %29, i64 0, i32 1
  %31 = bitcast void ()** %30 to void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.10"*)**
  %32 = load void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.10"*)*, void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.10"*)** %31, align 8
  call void %32(%"class.base::internal::BindStateBase"* %29, %"class.absl::optional.10"* nonnull dereferenceable(64) %7) #8
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %28) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #8
  %33 = load i8, i8* %20, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %53, label %35

35:                                               ; preds = %19
  %36 = getelementptr inbounds %"class.absl::optional.10", %"class.absl::optional.10"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN9mojo_base9BigBufferD1Ev(%"class.mojo_base::BigBuffer"* %36) #8
  store i8 0, i8* %20, align 8
  br label %53

37:                                               ; preds = %3
  %38 = getelementptr inbounds %"class.absl::optional.10", %"class.absl::optional.10"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %38, align 8
  %39 = getelementptr inbounds %"class.absl::optional.10", %"class.absl::optional.10"* %8, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN9mojo_base9BigBufferC1EOS0_(%"class.mojo_base::BigBuffer"* %39, %"class.mojo_base::BigBuffer"* nonnull dereferenceable(56) %6) #8
  %40 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #8
  %41 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %42 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %43, i64* %44, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %41, align 8
  %45 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  %46 = inttoptr i64 %43 to %"class.base::internal::BindStateBase"*
  %47 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %46, i64 0, i32 1
  %48 = bitcast void ()** %47 to void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.10"*)**
  %49 = load void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.10"*)*, void (%"class.base::internal::BindStateBase"*, %"class.absl::optional.10"*)** %48, align 8
  call void %49(%"class.base::internal::BindStateBase"* %46, %"class.absl::optional.10"* nonnull dereferenceable(64) %8) #8
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %45) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #8
  %50 = load i8, i8* %38, align 8, !range !2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %53, label %52

52:                                               ; preds = %37
  call void @_ZN9mojo_base9BigBufferD1Ev(%"class.mojo_base::BigBuffer"* %39) #8
  store i8 0, i8* %38, align 8
  br label %53

53:                                               ; preds = %52, %37, %35, %19
  call void @_ZN9mojo_base9BigBufferD1Ev(%"class.mojo_base::BigBuffer"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %9) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare i32 @_ZN11compression19GetUncompressedSizeEN4base4spanIKhLm18446744073709551615EEE(i64, i8*) local_unnamed_addr #5

declare void @_ZN9mojo_base9BigBufferC1Em(%"class.mojo_base::BigBuffer"*, i64) unnamed_addr #5

declare zeroext i1 @_ZN11compression14GzipUncompressEN4base4spanIKhLm18446744073709551615EEES3_(i64, i8*, i64, i8*) local_unnamed_addr #5

declare i8* @_ZN9mojo_base9BigBuffer4dataEv(%"class.mojo_base::BigBuffer"*) local_unnamed_addr #5

declare i64 @_ZNK9mojo_base9BigBuffer4sizeEv(%"class.mojo_base::BigBuffer"*) local_unnamed_addr #5

declare void @_ZN9mojo_base9BigBufferC1EN4base4spanIKhLm18446744073709551615EEE(%"class.mojo_base::BigBuffer"*, i64, i8*) unnamed_addr #5

declare void @_ZN9mojo_base9BigBufferC1EOS0_(%"class.mojo_base::BigBuffer"*, %"class.mojo_base::BigBuffer"* dereferenceable(56)) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN12data_decoder12_GLOBAL__N_114StringToBufferERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE: argument 0"}
!5 = distinct !{!5, !"_ZN12data_decoder12_GLOBAL__N_114StringToBufferERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"}
