; ModuleID = '../../third_party/ffmpeg/libavformat/protocols.c'
source_filename = "../../third_party/ffmpeg/libavformat/protocols.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.URLProtocol = type { i8*, i32 (%struct.URLContext*, i8*, i32)*, i32 (%struct.URLContext*, i8*, i32, %struct.AVDictionary**)*, i32 (%struct.URLContext*, %struct.URLContext**)*, i32 (%struct.URLContext*)*, i32 (%struct.URLContext*, i8*, i32)*, i32 (%struct.URLContext*, i8*, i32)*, i64 (%struct.URLContext*, i64, i32)*, i32 (%struct.URLContext*)*, i32 (%struct.URLContext*, i32)*, i64 (%struct.URLContext*, i32, i64, i32)*, i32 (%struct.URLContext*)*, i32 (%struct.URLContext*, i32**, i32*)*, i32 (%struct.URLContext*)*, i32 (%struct.URLContext*, i32)*, %struct.AVClass*, i32, i32, i32 (%struct.URLContext*, i32)*, i32 (%struct.URLContext*)*, i32 (%struct.URLContext*, %struct.AVIODirEntry**)*, i32 (%struct.URLContext*)*, i32 (%struct.URLContext*)*, i32 (%struct.URLContext*, %struct.URLContext*)*, i8* }
%struct.URLContext = type { %struct.AVClass*, %struct.URLProtocol*, i8*, i8*, i32, i32, i32, i32, %struct.AVIOInterruptCB, i64, i8*, i8*, i32 }
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVDictionary = type opaque
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, {}*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVIODirEntry = type { i8*, i32, i32, i64, i64, i64, i64, i64, i64, i64 }

@url_protocols = internal constant [1 x %struct.URLProtocol*] zeroinitializer, align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %struct.AVClass* @ff_urlcontext_child_class_next(%struct.AVClass* readnone) local_unnamed_addr #0 {
  ret %struct.AVClass* null
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden noalias %struct.AVClass* @ff_urlcontext_child_class_iterate(i8** nocapture) local_unnamed_addr #1 {
  ret %struct.AVClass* null
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i8* @avio_enum_protocols(i8** nocapture, i32) local_unnamed_addr #2 {
  %3 = bitcast i8** %0 to %struct.URLProtocol***
  %4 = load %struct.URLProtocol**, %struct.URLProtocol*** %3, align 8
  %5 = icmp eq %struct.URLProtocol** %4, null
  %6 = getelementptr inbounds %struct.URLProtocol*, %struct.URLProtocol** %4, i64 1
  %7 = select i1 %5, %struct.URLProtocol** getelementptr inbounds ([1 x %struct.URLProtocol*], [1 x %struct.URLProtocol*]* @url_protocols, i64 0, i64 0), %struct.URLProtocol** %6
  store %struct.URLProtocol** %7, %struct.URLProtocol*** %3, align 8
  %8 = load %struct.URLProtocol*, %struct.URLProtocol** %7, align 8
  %9 = icmp eq %struct.URLProtocol* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %2
  %11 = icmp eq i32 %1, 0
  br label %13

12:                                               ; preds = %27, %2
  store i8* null, i8** %0, align 8
  br label %33

13:                                               ; preds = %10, %27
  %14 = phi %struct.URLProtocol** [ %7, %10 ], [ %30, %27 ]
  %15 = phi %struct.URLProtocol* [ %8, %10 ], [ %31, %27 ]
  br i1 %11, label %20, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %15, i64 0, i32 6
  %18 = load i32 (%struct.URLContext*, i8*, i32)*, i32 (%struct.URLContext*, i8*, i32)** %17, align 8
  %19 = icmp eq i32 (%struct.URLContext*, i8*, i32)* %18, null
  br i1 %19, label %27, label %24

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %15, i64 0, i32 5
  %22 = load i32 (%struct.URLContext*, i8*, i32)*, i32 (%struct.URLContext*, i8*, i32)** %21, align 8
  %23 = icmp eq i32 (%struct.URLContext*, i8*, i32)* %22, null
  br i1 %23, label %27, label %24

24:                                               ; preds = %16, %20
  %25 = getelementptr inbounds %struct.URLProtocol, %struct.URLProtocol* %15, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  br label %33

27:                                               ; preds = %16, %20
  %28 = icmp eq %struct.URLProtocol** %14, null
  %29 = getelementptr inbounds %struct.URLProtocol*, %struct.URLProtocol** %14, i64 1
  %30 = select i1 %28, %struct.URLProtocol** getelementptr inbounds ([1 x %struct.URLProtocol*], [1 x %struct.URLProtocol*]* @url_protocols, i64 0, i64 0), %struct.URLProtocol** %29
  store %struct.URLProtocol** %30, %struct.URLProtocol*** %3, align 8
  %31 = load %struct.URLProtocol*, %struct.URLProtocol** %30, align 8
  %32 = icmp eq %struct.URLProtocol* %31, null
  br i1 %32, label %12, label %13

33:                                               ; preds = %24, %12
  %34 = phi i8* [ %26, %24 ], [ null, %12 ]
  ret i8* %34
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %struct.AVClass* @avio_protocol_get_class(i8* nocapture readnone) local_unnamed_addr #0 {
  ret %struct.AVClass* null
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.URLProtocol** @ffurl_get_protocols(i8* nocapture readnone, i8* nocapture readnone) local_unnamed_addr #3 {
  %3 = tail call i8* @av_mallocz_array(i64 1, i64 8) #5
  %4 = bitcast i8* %3 to %struct.URLProtocol**
  ret %struct.URLProtocol** %4
}

declare i8* @av_mallocz_array(i64, i64) local_unnamed_addr #4

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
