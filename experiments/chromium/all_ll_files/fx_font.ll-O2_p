; ModuleID = '../../third_party/pdfium/core/fxge/fx_font.cpp'
source_filename = "../../third_party/pdfium/core/fxge/fx_font.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.TextGlyphPos*, %class.TextGlyphPos*, %"class.std::__1::__compressed_pair.2" }
%class.TextGlyphPos = type { %"class.fxcrt::UnownedPtr", %class.CFX_PTemplate, %class.CFX_PTemplate.1 }
%"class.fxcrt::UnownedPtr" = type { %class.CFX_GlyphBitmap* }
%class.CFX_GlyphBitmap = type { i32, i32, %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type { %class.CFX_DIBBase, %"class.fxcrt::MaybeOwned" }
%class.CFX_DIBBase = type { %"class.fxcrt::Retainable", i16, i32, i32, i32, %"class.fxcrt::RetainPtr", %"class.std::__1::vector.5" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { i32*, i32*, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i32* }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.10", %"class.fxcrt::UnownedPtr.14" }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i8* }
%"class.fxcrt::UnownedPtr.14" = type { i8* }
%class.CFX_PTemplate = type { i32, i32 }
%class.CFX_PTemplate.1 = type { float, float }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.TextGlyphPos* }
%"class.pdfium::Optional" = type { %"class.pdfium::internal::OptionalBase" }
%"class.pdfium::internal::OptionalBase" = type { %"struct.pdfium::internal::OptionalStorage" }
%"struct.pdfium::internal::OptionalStorage" = type { %"struct.pdfium::internal::OptionalStorageBase" }
%"struct.pdfium::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { %class.CFX_PTemplate }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.15" }
%"class.fxcrt::RetainPtr.15" = type { %"class.std::__1::unique_ptr.16" }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.21", i64 }
%"class.fxcrt::UnownedPtr.21" = type { i8* }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr.22" }
%"class.fxcrt::RetainPtr.22" = type { %"class.std::__1::unique_ptr.23" }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.fxcrt::StringDataTemplate.26"* }
%"class.fxcrt::StringDataTemplate.26" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_Z13GetGlyphsBBoxRKNSt3__16vectorI12TextGlyphPosNS_9allocatorIS1_EEEEi(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), i32) local_unnamed_addr #0 {
  %3 = alloca %"class.pdfium::Optional", align 4
  %4 = alloca %class.CFX_PTemplate, align 4
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %6 = load %class.TextGlyphPos*, %class.TextGlyphPos** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = load %class.TextGlyphPos*, %class.TextGlyphPos** %7, align 8
  %9 = icmp eq %class.TextGlyphPos* %6, %8
  br i1 %9, label %18, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = bitcast %class.CFX_PTemplate* %4 to i8*
  %13 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %4, i64 0, i32 0
  %14 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %4, i64 0, i32 1
  %15 = icmp eq i32 %1, 3
  %16 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %17 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  br label %28

18:                                               ; preds = %88, %2
  %19 = phi i64 [ 0, %2 ], [ %89, %88 ]
  %20 = phi i32 [ 0, %2 ], [ %90, %88 ]
  %21 = phi i32 [ 0, %2 ], [ %91, %88 ]
  %22 = zext i32 %20 to i64
  %23 = shl nuw i64 %22, 32
  %24 = zext i32 %21 to i64
  %25 = or i64 %23, %24
  %26 = insertvalue { i64, i64 } undef, i64 %25, 0
  %27 = insertvalue { i64, i64 } %26, i64 %19, 1
  ret { i64, i64 } %27

28:                                               ; preds = %10, %88
  %29 = phi i8 [ 0, %10 ], [ %92, %88 ]
  %30 = phi i32 [ 0, %10 ], [ %91, %88 ]
  %31 = phi i32 [ 0, %10 ], [ %90, %88 ]
  %32 = phi i64 [ 0, %10 ], [ %89, %88 ]
  %33 = phi %class.TextGlyphPos* [ %6, %10 ], [ %93, %88 ]
  %34 = getelementptr inbounds %class.TextGlyphPos, %class.TextGlyphPos* %33, i64 0, i32 0, i32 0
  %35 = load %class.CFX_GlyphBitmap*, %class.CFX_GlyphBitmap** %34, align 8
  %36 = icmp eq %class.CFX_GlyphBitmap* %35, null
  br i1 %36, label %88, label %37

37:                                               ; preds = %28
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %11, i8 -86, i64 12, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #6
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  call void @_ZNK12TextGlyphPos9GetOriginERK13CFX_PTemplateIiE(%"class.pdfium::Optional"* nonnull sret %3, %class.TextGlyphPos* %33, %class.CFX_PTemplate* nonnull dereferenceable(8) %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #6
  %38 = load i8, i8* %11, align 4, !range !2
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %83, label %40

40:                                               ; preds = %37
  %41 = load %class.CFX_GlyphBitmap*, %class.CFX_GlyphBitmap** %34, align 8
  %42 = getelementptr inbounds %class.CFX_GlyphBitmap, %class.CFX_GlyphBitmap* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %43 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %42, align 8
  %44 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %43, i64 0, i32 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = sdiv i32 %45, 3
  %47 = select i1 %15, i32 %46, i32 %45
  %48 = load i32, i32* %16, align 4
  %49 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %48, i32 %47) #6
  %50 = extractvalue { i32, i1 } %49, 1
  %51 = extractvalue { i32, i1 } %49, 0
  br i1 %50, label %83, label %52

52:                                               ; preds = %40
  %53 = load i32, i32* %17, align 4
  %54 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %43, i64 0, i32 0, i32 3
  %55 = load i32, i32* %54, align 8
  %56 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %53, i32 %55) #6
  %57 = extractvalue { i32, i1 } %56, 1
  %58 = extractvalue { i32, i1 } %56, 0
  br i1 %57, label %83, label %59

59:                                               ; preds = %52
  %60 = and i8 %29, 1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %78, label %62

62:                                               ; preds = %59
  %63 = icmp slt i32 %48, %30
  %64 = select i1 %63, i32 %48, i32 %30
  %65 = icmp slt i32 %53, %31
  %66 = select i1 %65, i32 %53, i32 %31
  %67 = trunc i64 %32 to i32
  %68 = icmp slt i32 %51, %67
  %69 = select i1 %68, i32 %67, i32 %51
  %70 = zext i32 %69 to i64
  %71 = lshr i64 %32, 32
  %72 = trunc i64 %71 to i32
  %73 = icmp slt i32 %58, %72
  %74 = select i1 %73, i32 %72, i32 %58
  %75 = zext i32 %74 to i64
  %76 = shl nuw i64 %75, 32
  %77 = or i64 %76, %70
  br label %83

78:                                               ; preds = %59
  %79 = zext i32 %51 to i64
  %80 = zext i32 %58 to i64
  %81 = shl nuw i64 %80, 32
  %82 = or i64 %81, %79
  br label %83

83:                                               ; preds = %52, %40, %37, %78, %62
  %84 = phi i64 [ %32, %37 ], [ %32, %40 ], [ %82, %78 ], [ %77, %62 ], [ %32, %52 ]
  %85 = phi i32 [ %31, %37 ], [ %31, %40 ], [ %53, %78 ], [ %66, %62 ], [ %31, %52 ]
  %86 = phi i32 [ %30, %37 ], [ %30, %40 ], [ %48, %78 ], [ %64, %62 ], [ %30, %52 ]
  %87 = phi i8 [ %29, %37 ], [ %29, %40 ], [ 1, %78 ], [ %29, %62 ], [ %29, %52 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %11) #6
  br label %88

88:                                               ; preds = %28, %83
  %89 = phi i64 [ %84, %83 ], [ %32, %28 ]
  %90 = phi i32 [ %85, %83 ], [ %31, %28 ]
  %91 = phi i32 [ %86, %83 ], [ %30, %28 ]
  %92 = phi i8 [ %87, %83 ], [ %29, %28 ]
  %93 = getelementptr inbounds %class.TextGlyphPos, %class.TextGlyphPos* %33, i64 1
  %94 = icmp eq %class.TextGlyphPos* %93, %8
  br i1 %94, label %18, label %28
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK12TextGlyphPos9GetOriginERK13CFX_PTemplateIiE(%"class.pdfium::Optional"* sret, %class.TextGlyphPos*, %class.CFX_PTemplate* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z13GetNameFromTTN6pdfium4spanIKhEEj(%"class.fxcrt::ByteString"* noalias sret, %"class.pdfium::span"*, i32) local_unnamed_addr #0 {
  %4 = alloca %"class.fxcrt::ByteString", align 8
  %5 = alloca %"class.fxcrt::WideString", align 8
  %6 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 6
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  tail call void @_ZN5fxcrt10ByteStringC1Ev(%"class.fxcrt::ByteString"* %0) #6
  br label %179

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = shl nuw nsw i32 %15, 8
  %17 = getelementptr inbounds i8, i8* %12, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = or i32 %16, %19
  %21 = getelementptr inbounds i8, i8* %12, i64 4
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = shl nuw nsw i64 %23, 8
  %25 = getelementptr inbounds i8, i8* %12, i64 5
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = or i64 %24, %27
  %29 = icmp ult i64 %7, %28
  br i1 %29, label %30, label %31

30:                                               ; preds = %10
  tail call void @_ZN5fxcrt10ByteStringC1Ev(%"class.fxcrt::ByteString"* %0) #6
  br label %179

31:                                               ; preds = %10
  %32 = sub i64 %7, %28
  %33 = getelementptr inbounds i8, i8* %12, i64 %28
  %34 = add i64 %7, -6
  %35 = getelementptr inbounds i8, i8* %12, i64 6
  store i8* %35, i8** %11, align 8
  store i64 %34, i64* %6, align 8
  %36 = mul nuw nsw i32 %20, 12
  %37 = zext i32 %36 to i64
  %38 = icmp ult i64 %34, %37
  br i1 %38, label %41, label %39

39:                                               ; preds = %31
  %40 = icmp eq i32 %20, 0
  br i1 %40, label %178, label %42

41:                                               ; preds = %31
  tail call void @_ZN5fxcrt10ByteStringC1Ev(%"class.fxcrt::ByteString"* %0) #6
  br label %179

42:                                               ; preds = %39, %173
  %43 = phi i8* [ %176, %173 ], [ %35, %39 ]
  %44 = phi i64 [ %175, %173 ], [ %34, %39 ]
  %45 = phi i32 [ %174, %173 ], [ 0, %39 ]
  %46 = icmp ugt i64 %44, 6
  br i1 %46, label %48, label %47, !prof !3

47:                                               ; preds = %42
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !4
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !5
  unreachable

48:                                               ; preds = %42
  %49 = getelementptr inbounds i8, i8* %43, i64 6
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = shl nuw nsw i32 %51, 8
  %53 = getelementptr inbounds i8, i8* %43, i64 7
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = or i32 %52, %55
  %57 = icmp eq i32 %56, %2
  br i1 %57, label %58, label %170

58:                                               ; preds = %48
  %59 = load i8, i8* %43, align 1
  %60 = zext i8 %59 to i32
  %61 = shl nuw nsw i32 %60, 8
  %62 = getelementptr inbounds i8, i8* %43, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = or i32 %61, %64
  %66 = getelementptr inbounds i8, i8* %43, i64 2
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i16
  %69 = shl nuw i16 %68, 8
  %70 = getelementptr inbounds i8, i8* %43, i64 3
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i16
  %73 = or i16 %69, %72
  %74 = icmp eq i32 %65, 1
  %75 = icmp eq i16 %73, 0
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %112

77:                                               ; preds = %58
  %78 = icmp ugt i64 %44, 10
  br i1 %78, label %80, label %79, !prof !3

79:                                               ; preds = %77
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !4
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !5
  unreachable

80:                                               ; preds = %77
  %81 = getelementptr inbounds i8, i8* %43, i64 10
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = shl nuw i16 %83, 8
  %85 = getelementptr inbounds i8, i8* %43, i64 11
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i16
  %88 = or i16 %84, %87
  %89 = getelementptr inbounds i8, i8* %43, i64 8
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i64
  %92 = shl nuw nsw i64 %91, 8
  %93 = getelementptr inbounds i8, i8* %43, i64 9
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i64
  %96 = or i64 %92, %95
  %97 = zext i16 %88 to i64
  %98 = add nuw nsw i64 %96, %97
  %99 = icmp ult i64 %32, %98
  br i1 %99, label %100, label %101

100:                                              ; preds = %80
  tail call void @_ZN5fxcrt10ByteStringC1Ev(%"class.fxcrt::ByteString"* %0) #6
  br label %179

101:                                              ; preds = %80
  %102 = icmp ult i64 %32, %97
  br i1 %102, label %103, label %104, !prof !6

103:                                              ; preds = %101
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #6, !noalias !7, !srcloc !10
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #6, !noalias !7, !srcloc !11
  unreachable

104:                                              ; preds = %101
  %105 = sub i64 %32, %97
  %106 = icmp ult i64 %105, %96
  br i1 %106, label %107, label %108, !prof !6

107:                                              ; preds = %104
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #6, !noalias !7, !srcloc !12
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #6, !noalias !7, !srcloc !13
  unreachable

108:                                              ; preds = %104
  %109 = icmp eq i16 %88, 0
  %110 = getelementptr inbounds i8, i8* %33, i64 %97
  %111 = select i1 %109, i8* %33, i8* %110
  tail call void @_ZN5fxcrt10ByteStringC1EPKhm(%"class.fxcrt::ByteString"* %0, i8* %111, i64 %96) #6
  br label %179

112:                                              ; preds = %58
  %113 = icmp eq i32 %65, 3
  %114 = icmp eq i16 %73, 1
  %115 = and i1 %113, %114
  br i1 %115, label %116, label %170

116:                                              ; preds = %112
  %117 = bitcast %"class.fxcrt::ByteString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %117) #6
  %118 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %118, align 8
  %119 = icmp ugt i64 %44, 10
  br i1 %119, label %121, label %120, !prof !3

120:                                              ; preds = %116
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !4
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !5
  unreachable

121:                                              ; preds = %116
  %122 = getelementptr inbounds i8, i8* %43, i64 10
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i16
  %125 = shl nuw i16 %124, 8
  %126 = getelementptr inbounds i8, i8* %43, i64 11
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i16
  %129 = or i16 %125, %128
  %130 = getelementptr inbounds i8, i8* %43, i64 8
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i64
  %133 = shl nuw nsw i64 %132, 8
  %134 = getelementptr inbounds i8, i8* %43, i64 9
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i64
  %137 = or i64 %133, %136
  %138 = zext i16 %129 to i64
  %139 = add nuw nsw i64 %137, %138
  %140 = icmp ult i64 %32, %139
  br i1 %140, label %141, label %142

141:                                              ; preds = %121
  call void @_ZN5fxcrt10ByteStringC1Ev(%"class.fxcrt::ByteString"* nonnull %4) #6
  br label %153

142:                                              ; preds = %121
  %143 = icmp ult i64 %32, %138
  br i1 %143, label %144, label %145, !prof !6

144:                                              ; preds = %142
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #6, !noalias !14, !srcloc !10
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #6, !noalias !14, !srcloc !11
  unreachable

145:                                              ; preds = %142
  %146 = sub i64 %32, %138
  %147 = icmp ult i64 %146, %137
  br i1 %147, label %148, label %149, !prof !6

148:                                              ; preds = %145
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #6, !noalias !14, !srcloc !12
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #6, !noalias !14, !srcloc !13
  unreachable

149:                                              ; preds = %145
  %150 = icmp eq i16 %129, 0
  %151 = getelementptr inbounds i8, i8* %33, i64 %138
  %152 = select i1 %150, i8* %33, i8* %151
  call void @_ZN5fxcrt10ByteStringC1EPKhm(%"class.fxcrt::ByteString"* nonnull %4, i8* %152, i64 %137) #6
  br label %153

153:                                              ; preds = %141, %149
  %154 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %118, align 8
  %155 = icmp eq %"class.fxcrt::StringDataTemplate"* %154, null
  br i1 %155, label %163, label %156

156:                                              ; preds = %153
  %157 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %154, i64 0, i32 1
  %158 = load i64, i64* %157, align 8
  %159 = icmp ne i64 %158, 0
  %160 = and i64 %158, 1
  %161 = icmp eq i64 %160, 0
  %162 = and i1 %159, %161
  br i1 %162, label %164, label %163

163:                                              ; preds = %156, %153
  call void @_ZN5fxcrt10ByteStringC1Ev(%"class.fxcrt::ByteString"* %0) #6
  br label %169

164:                                              ; preds = %156
  %165 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %154, i64 0, i32 3, i64 0
  %166 = bitcast %"class.fxcrt::WideString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %166) #6
  %167 = bitcast i8* %165 to i16*
  %168 = lshr i64 %158, 1
  call void @_ZN5fxcrt10WideString11FromUTF16BEEPKtm(%"class.fxcrt::WideString"* nonnull sret %5, i16* %167, i64 %168) #6
  call void @_ZNK5fxcrt10WideString6ToUTF8Ev(%"class.fxcrt::ByteString"* sret %0, %"class.fxcrt::WideString"* nonnull %5) #6
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %166) #6
  br label %169

169:                                              ; preds = %164, %163
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %117) #6
  br label %179

170:                                              ; preds = %112, %48
  %171 = icmp ult i64 %44, 12
  br i1 %171, label %172, label %173, !prof !6

172:                                              ; preds = %170
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #6, !noalias !17, !srcloc !10
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #6, !noalias !17, !srcloc !11
  unreachable

173:                                              ; preds = %170
  %174 = add nuw nsw i32 %45, 1
  %175 = add i64 %44, -12
  %176 = getelementptr inbounds i8, i8* %43, i64 12
  store i8* %176, i8** %11, align 8
  store i64 %175, i64* %6, align 8
  %177 = icmp eq i32 %174, %20
  br i1 %177, label %178, label %42

178:                                              ; preds = %173, %39
  tail call void @_ZN5fxcrt10ByteStringC1Ev(%"class.fxcrt::ByteString"* %0) #6
  br label %179

179:                                              ; preds = %41, %178, %169, %100, %108, %30, %9
  ret void
}

declare void @_ZN5fxcrt10ByteStringC1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #2

declare void @_ZN5fxcrt10WideString11FromUTF16BEEPKtm(%"class.fxcrt::WideString"* sret, i16*, i64) local_unnamed_addr #2

declare void @_ZNK5fxcrt10WideString6ToUTF8Ev(%"class.fxcrt::ByteString"* sret, %"class.fxcrt::WideString"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_Z11GetTTCIndexN6pdfium4spanIKhEEj(%"class.pdfium::span"* nocapture readonly, i32) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 8
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw i32 %7, 24
  %9 = getelementptr inbounds i8, i8* %4, i64 9
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = shl nuw nsw i32 %11, 16
  %13 = or i32 %12, %8
  %14 = getelementptr inbounds i8, i8* %4, i64 10
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = shl nuw nsw i32 %16, 8
  %18 = or i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %4, i64 11
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = or i32 %18, %21
  %23 = getelementptr inbounds i8, i8* %4, i64 12
  %24 = icmp eq i32 %22, 0
  br i1 %24, label %55, label %25

25:                                               ; preds = %2
  %26 = zext i32 %22 to i64
  br label %27

27:                                               ; preds = %50, %25
  %28 = phi i64 [ 0, %25 ], [ %51, %50 ]
  %29 = shl i64 %28, 2
  %30 = and i64 %29, 4294967292
  %31 = getelementptr inbounds i8, i8* %23, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = shl nuw i32 %33, 24
  %35 = getelementptr inbounds i8, i8* %31, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = shl nuw nsw i32 %37, 16
  %39 = or i32 %38, %34
  %40 = getelementptr inbounds i8, i8* %31, i64 2
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = shl nuw nsw i32 %42, 8
  %44 = or i32 %39, %43
  %45 = getelementptr inbounds i8, i8* %31, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = or i32 %44, %47
  %49 = icmp eq i32 %48, %1
  br i1 %49, label %53, label %50

50:                                               ; preds = %27
  %51 = add nuw nsw i64 %28, 1
  %52 = icmp eq i64 %51, %26
  br i1 %52, label %55, label %27

53:                                               ; preds = %27
  %54 = trunc i64 %28 to i32
  br label %55

55:                                               ; preds = %50, %53, %2
  %56 = phi i32 [ 0, %2 ], [ %54, %53 ], [ 0, %50 ]
  ret i32 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i32 @_Z24PDF_UnicodeFromAdobeNamePKc(i8*) local_unnamed_addr #0 {
  %2 = tail call i32 @_Z28FXFT_unicode_from_adobe_namePKc(i8* %0) #6
  %3 = and i32 %2, 2147483647
  ret i32 %3
}

declare i32 @_Z28FXFT_unicode_from_adobe_namePKc(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z24PDF_AdobeNameFromUnicodew(%"class.fxcrt::ByteString"* noalias sret, i32 signext) local_unnamed_addr #0 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 64, i1 false)
  call void @_Z28FXFT_adobe_name_from_unicodePcw(i8* nonnull %4, i32 signext %1) #6
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* %0, i8* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_Z28FXFT_adobe_name_from_unicodePcw(i8*, i32 signext) local_unnamed_addr #2

declare void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"*, i8*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #5

declare void @_ZN5fxcrt10ByteStringC1EPKhm(%"class.fxcrt::ByteString"*, i8*, i64) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i32 -2143827055}
!5 = !{i32 -2143827034}
!6 = !{!"branch_weights", i32 1, i32 2000}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK6pdfium4spanIKhE7subspanEmm: argument 0"}
!9 = distinct !{!9, !"_ZNK6pdfium4spanIKhE7subspanEmm"}
!10 = !{i32 -2143828181}
!11 = !{i32 -2143828160}
!12 = !{i32 -2143827594}
!13 = !{i32 -2143827573}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZNK6pdfium4spanIKhE7subspanEmm: argument 0"}
!16 = distinct !{!16, !"_ZNK6pdfium4spanIKhE7subspanEmm"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZNK6pdfium4spanIKhE7subspanEmm: argument 0"}
!19 = distinct !{!19, !"_ZNK6pdfium4spanIKhE7subspanEmm"}
