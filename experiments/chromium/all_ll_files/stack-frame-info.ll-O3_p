; ModuleID = '../../v8/src/objects/stack-frame-info.cc'
source_filename = "../../v8/src/objects/stack-frame-info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::SoleReadOnlyHeap" = type { %"class.v8::internal::ReadOnlyHeap", [587 x i64] }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.542" }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.140", i64, i64, i8, i64, i64 }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.20", i64 }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.20", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.20", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.20", i64, i64, %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.30", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.147", %"class.std::__1::unique_ptr.147", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.162", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.20", i64, i8, %"struct.std::__1::atomic.20", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.166", %"class.std::__1::vector.166", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.173", %"class.std::__1::unique_ptr.179", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.309", %"class.std::__1::unique_ptr.315", %"class.std::__1::unique_ptr.321", %"class.std::__1::unique_ptr.360", %"class.std::__1::unique_ptr.399", %"class.std::__1::unique_ptr.429", %"class.std::__1::unique_ptr.435", %"class.std::__1::unique_ptr.445", %"class.std::__1::unique_ptr.451", %"class.std::__1::unique_ptr.451", %"class.std::__1::unique_ptr.457", %"class.std::__1::unique_ptr.463", %"class.std::__1::unique_ptr.463", %"class.std::__1::unique_ptr.469", %"class.std::__1::unique_ptr.475", %"class.std::__1::shared_ptr.481", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.504", %"class.std::__1::unique_ptr.530", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.536", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.549", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.331", i8, [7 x i8], %"class.std::__1::unordered_map.555", %"class.std::__1::unordered_map.581", %"class.std::__1::unordered_map.555", %"class.std::__1::unordered_map.605", %"class.std::__1::vector.633", i8, %"class.std::__1::unique_ptr.640", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.3", %"class.std::__1::__compressed_pair.10", %"class.std::__1::__compressed_pair.15", %"class.std::__1::__compressed_pair.17", [4 x i8] }>
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5", %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i64 }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.25", %"struct.std::__1::atomic.25", %"struct.std::__1::atomic.25" }
%"struct.std::__1::atomic.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__atomic_base.27" }
%"struct.std::__1::__atomic_base.27" = type { %"struct.std::__1::__cxx_atomic_impl.28" }
%"struct.std::__1::__cxx_atomic_impl.28" = type { %"struct.std::__1::__cxx_atomic_base_impl.29" }
%"struct.std::__1::__cxx_atomic_base_impl.29" = type { i64 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.646", %"class.std::__1::unique_ptr.667", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.677", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.821", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.834", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.844", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.855", %"struct.std::__1::atomic.153", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.930", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.973"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.981", i32, i8, i8, i32, i32, %"class.std::__1::vector.987", %"class.std::__1::vector.987", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.994", i64, %"class.std::__1::unordered_map.995", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.542", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.161", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1051", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1089", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1123", %"class.std::__1::vector.1127", %"class.std::__1::vector.1127", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle.0", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle.0" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.646" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.140", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.647", %"class.std::__1::unique_ptr.661" }
%"class.std::__1::unique_ptr.647" = type { %"class.std::__1::__compressed_pair.648" }
%"class.std::__1::__compressed_pair.648" = type { %"struct.std::__1::__compressed_pair_elem.649" }
%"struct.std::__1::__compressed_pair_elem.649" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.650" }
%"class.std::__1::vector.650" = type { %"class.std::__1::__vector_base.651" }
%"class.std::__1::__vector_base.651" = type { %"class.std::__1::unique_ptr.652"*, %"class.std::__1::unique_ptr.652"*, %"class.std::__1::__compressed_pair.653" }
%"class.std::__1::unique_ptr.652" = type { %"class.std::__1::__compressed_pair.1435" }
%"class.std::__1::__compressed_pair.1435" = type { %"struct.std::__1::__compressed_pair_elem.1436" }
%"struct.std::__1::__compressed_pair_elem.1436" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.653" = type { %"struct.std::__1::__compressed_pair_elem.654" }
%"struct.std::__1::__compressed_pair_elem.654" = type { %"class.std::__1::unique_ptr.652"* }
%"class.std::__1::unique_ptr.661" = type { %"class.std::__1::__compressed_pair.662" }
%"class.std::__1::__compressed_pair.662" = type { %"struct.std::__1::__compressed_pair_elem.663" }
%"struct.std::__1::__compressed_pair_elem.663" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.667" = type { %"class.std::__1::__compressed_pair.668" }
%"class.std::__1::__compressed_pair.668" = type { %"struct.std::__1::__compressed_pair_elem.669" }
%"struct.std::__1::__compressed_pair_elem.669" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.670", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.670" = type { %"struct.std::__1::__atomic_base.671" }
%"struct.std::__1::__atomic_base.671" = type { %"struct.std::__1::__cxx_atomic_impl.672" }
%"struct.std::__1::__cxx_atomic_impl.672" = type { %"struct.std::__1::__cxx_atomic_base_impl.673" }
%"struct.std::__1::__cxx_atomic_base_impl.673" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.677" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.678", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.678" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.679", %"class.v8::base::Optional.687", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.679" = type { %"class.std::__1::__vector_base.680" }
%"class.std::__1::__vector_base.680" = type { %"class.std::__1::unique_ptr.681"*, %"class.std::__1::unique_ptr.681"*, %"class.std::__1::__compressed_pair.682" }
%"class.std::__1::unique_ptr.681" = type opaque
%"class.std::__1::__compressed_pair.682" = type { %"struct.std::__1::__compressed_pair_elem.683" }
%"struct.std::__1::__compressed_pair_elem.683" = type { %"class.std::__1::unique_ptr.681"* }
%"class.v8::base::Optional.687" = type { %"class.v8::base::internal::OptionalBase.688" }
%"class.v8::base::internal::OptionalBase.688" = type { %"struct.v8::base::internal::OptionalStorage.689" }
%"struct.v8::base::internal::OptionalStorage.689" = type { %"struct.v8::base::internal::OptionalStorageBase.690" }
%"struct.v8::base::internal::OptionalStorageBase.690" = type { i8, %union.anon.691 }
%union.anon.691 = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.692", %"class.std::__1::unique_ptr.698", %"struct.std::__1::atomic.153", %"class.std::__1::unique_ptr.704", %"class.std::__1::unique_ptr.710", %"class.std::__1::unique_ptr.716", %"class.std::__1::unique_ptr.722", %"class.std::__1::unique_ptr.728", %"class.std::__1::set.734", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.692" = type { %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.694" }
%"struct.std::__1::__compressed_pair_elem.694" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.698" = type { %"class.std::__1::__compressed_pair.699" }
%"class.std::__1::__compressed_pair.699" = type { %"struct.std::__1::__compressed_pair_elem.700" }
%"struct.std::__1::__compressed_pair_elem.700" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.706" }
%"struct.std::__1::__compressed_pair_elem.706" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.710" = type { %"class.std::__1::__compressed_pair.711" }
%"class.std::__1::__compressed_pair.711" = type { %"struct.std::__1::__compressed_pair_elem.712" }
%"struct.std::__1::__compressed_pair_elem.712" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.716" = type { %"class.std::__1::__compressed_pair.717" }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.718" }
%"struct.std::__1::__compressed_pair_elem.718" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.722" = type { %"class.std::__1::__compressed_pair.723" }
%"class.std::__1::__compressed_pair.723" = type { %"struct.std::__1::__compressed_pair_elem.724" }
%"struct.std::__1::__compressed_pair_elem.724" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.728" = type { %"class.std::__1::__compressed_pair.729" }
%"class.std::__1::__compressed_pair.729" = type { %"struct.std::__1::__compressed_pair_elem.730" }
%"struct.std::__1::__compressed_pair_elem.730" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.734" = type { %"class.std::__1::__tree.735" }
%"class.std::__1::__tree.735" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.736", %"class.std::__1::__compressed_pair.740" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.736" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.740" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.743" }
%"class.v8::internal::TaggedImpl.743" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.742" }
%"class.v8::internal::TaggedImpl.742" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.750", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.750" = type { %"class.std::__1::__compressed_pair.751" }
%"class.std::__1::__compressed_pair.751" = type { %"struct.std::__1::__compressed_pair_elem.752" }
%"struct.std::__1::__compressed_pair_elem.752" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.756", %"class.v8::internal::DetachableVector.757", %"class.v8::internal::DetachableVector.756", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.757" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.756" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"class.std::__1::unique_ptr.744", %"class.std::__1::unique_ptr.482" }
%"class.std::__1::unique_ptr.744" = type { %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"struct.std::__1::__compressed_pair_elem.746" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.482" = type { %"class.std::__1::__compressed_pair.483" }
%"class.std::__1::__compressed_pair.483" = type { %"struct.std::__1::__compressed_pair_elem.484" }
%"struct.std::__1::__compressed_pair_elem.484" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.485", %"class.std::__1::set.493" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.485" = type { %"class.std::__1::__tree.486" }
%"class.std::__1::__tree.486" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.487", %"class.std::__1::__compressed_pair.491" }
%"class.std::__1::__compressed_pair.487" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"class.std::__1::__compressed_pair.491" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::set.493" = type { %"class.std::__1::__tree.494" }
%"class.std::__1::__tree.494" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.487", %"class.std::__1::__compressed_pair.495" }
%"class.std::__1::__compressed_pair.495" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.758", %"class.std::__1::vector.764", %"class.std::__1::unique_ptr.771", %"class.std::__1::vector.778", %"class.std::__1::unique_ptr.785", i64, %"class.std::__1::vector.791", %"class.std::__1::vector.799", %"class.std::__1::vector.807", i8, i8, i32 }
%"class.std::__1::unique_ptr.758" = type { %"class.std::__1::__compressed_pair.759" }
%"class.std::__1::__compressed_pair.759" = type { %"struct.std::__1::__compressed_pair_elem.760" }
%"struct.std::__1::__compressed_pair_elem.760" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.764" = type { %"class.std::__1::__vector_base.765" }
%"class.std::__1::__vector_base.765" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.766" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.771" = type { %"class.std::__1::__compressed_pair.772" }
%"class.std::__1::__compressed_pair.772" = type { %"struct.std::__1::__compressed_pair_elem.773" }
%"struct.std::__1::__compressed_pair_elem.773" = type { %"class.v8::internal::GlobalHandles::NodeSpace.774"* }
%"class.v8::internal::GlobalHandles::NodeSpace.774" = type opaque
%"class.std::__1::vector.778" = type { %"class.std::__1::__vector_base.779" }
%"class.std::__1::__vector_base.779" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.780" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.781" }
%"struct.std::__1::__compressed_pair_elem.781" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.785" = type { %"class.std::__1::__compressed_pair.786" }
%"class.std::__1::__compressed_pair.786" = type { %"struct.std::__1::__compressed_pair_elem.787" }
%"struct.std::__1::__compressed_pair_elem.787" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.791" = type { %"class.std::__1::__vector_base.792" }
%"class.std::__1::__vector_base.792" = type { %"struct.std::__1::pair.793"*, %"struct.std::__1::pair.793"*, %"class.std::__1::__compressed_pair.794" }
%"struct.std::__1::pair.793" = type opaque
%"class.std::__1::__compressed_pair.794" = type { %"struct.std::__1::__compressed_pair_elem.795" }
%"struct.std::__1::__compressed_pair_elem.795" = type { %"struct.std::__1::pair.793"* }
%"class.std::__1::vector.799" = type { %"class.std::__1::__vector_base.800" }
%"class.std::__1::__vector_base.800" = type { %"struct.std::__1::pair.801"*, %"struct.std::__1::pair.801"*, %"class.std::__1::__compressed_pair.802" }
%"struct.std::__1::pair.801" = type opaque
%"class.std::__1::__compressed_pair.802" = type { %"struct.std::__1::__compressed_pair_elem.803" }
%"struct.std::__1::__compressed_pair_elem.803" = type { %"struct.std::__1::pair.801"* }
%"class.std::__1::vector.807" = type { %"class.std::__1::__vector_base.808" }
%"class.std::__1::__vector_base.808" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.809" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.809" = type { %"struct.std::__1::__compressed_pair_elem.810" }
%"struct.std::__1::__compressed_pair_elem.810" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.814", %"class.std::__1::vector.821" }
%"class.std::__1::vector.814" = type { %"class.std::__1::__vector_base.815" }
%"class.std::__1::__vector_base.815" = type { i64**, i64**, %"class.std::__1::__compressed_pair.816" }
%"class.std::__1::__compressed_pair.816" = type { %"struct.std::__1::__compressed_pair_elem.817" }
%"struct.std::__1::__compressed_pair_elem.817" = type { i64** }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.828" }
%"class.std::__1::unique_ptr.828" = type { %"class.std::__1::__compressed_pair.829" }
%"class.std::__1::__compressed_pair.829" = type { %"struct.std::__1::__compressed_pair_elem.830" }
%"struct.std::__1::__compressed_pair_elem.830" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.821" = type { %"class.std::__1::__vector_base.822" }
%"class.std::__1::__vector_base.822" = type { i32*, i32*, %"class.std::__1::__compressed_pair.823" }
%"class.std::__1::__compressed_pair.823" = type { %"struct.std::__1::__compressed_pair_elem.824" }
%"struct.std::__1::__compressed_pair_elem.824" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"struct.std::__1::atomic.834" = type { %"struct.std::__1::__atomic_base.835" }
%"struct.std::__1::__atomic_base.835" = type { %"struct.std::__1::__cxx_atomic_impl.836" }
%"struct.std::__1::__cxx_atomic_impl.836" = type { %"struct.std::__1::__cxx_atomic_base_impl.837" }
%"struct.std::__1::__cxx_atomic_base_impl.837" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.844" = type { %"struct.std::__1::__atomic_base.845" }
%"struct.std::__1::__atomic_base.845" = type { %"struct.std::__1::__cxx_atomic_impl.846" }
%"struct.std::__1::__cxx_atomic_impl.846" = type { %"struct.std::__1::__cxx_atomic_base_impl.847" }
%"struct.std::__1::__cxx_atomic_base_impl.847" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.849" }
%"class.std::__1::__compressed_pair.849" = type { %"struct.std::__1::__compressed_pair_elem.850" }
%"struct.std::__1::__compressed_pair_elem.850" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.851 }
%union.anon.851 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.855" = type { %"class.std::__1::__hash_table.856" }
%"class.std::__1::__hash_table.856" = type <{ %"class.std::__1::unique_ptr.857", %"class.std::__1::__compressed_pair.867", %"class.std::__1::__compressed_pair.872", %"class.std::__1::__compressed_pair.875", [4 x i8] }>
%"class.std::__1::unique_ptr.857" = type { %"class.std::__1::__compressed_pair.858" }
%"class.std::__1::__compressed_pair.858" = type { %"struct.std::__1::__compressed_pair_elem.859", %"struct.std::__1::__compressed_pair_elem.861" }
%"struct.std::__1::__compressed_pair_elem.859" = type { %"struct.std::__1::__hash_node_base.860"** }
%"struct.std::__1::__hash_node_base.860" = type { %"struct.std::__1::__hash_node_base.860"* }
%"struct.std::__1::__compressed_pair_elem.861" = type { %"class.std::__1::__bucket_list_deallocator.862" }
%"class.std::__1::__bucket_list_deallocator.862" = type { %"class.std::__1::__compressed_pair.863" }
%"class.std::__1::__compressed_pair.863" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.867" = type { %"struct.std::__1::__compressed_pair_elem.868" }
%"struct.std::__1::__compressed_pair_elem.868" = type { %"struct.std::__1::__hash_node_base.860" }
%"class.std::__1::__compressed_pair.872" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.875" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::atomic.153" = type { %"struct.std::__1::__atomic_base.154" }
%"struct.std::__1::__atomic_base.154" = type { %"struct.std::__1::__cxx_atomic_impl.155" }
%"struct.std::__1::__cxx_atomic_impl.155" = type { %"struct.std::__1::__cxx_atomic_base_impl.156" }
%"struct.std::__1::__cxx_atomic_base_impl.156" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.881", %"class.v8::internal::Handle.887", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.888", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.881" = type { %"class.std::__1::__compressed_pair.882" }
%"class.std::__1::__compressed_pair.882" = type { %"struct.std::__1::__compressed_pair_elem.883" }
%"struct.std::__1::__compressed_pair_elem.883" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.887" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.888" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.889", %"class.std::__1::vector.895", %"class.std::__1::unique_ptr.903", %"class.std::__1::unique_ptr.909", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.915", %"class.std::__1::vector.921", %"struct.std::__1::pair.929" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::unique_ptr.889" = type { %"class.std::__1::__compressed_pair.890" }
%"class.std::__1::__compressed_pair.890" = type { %"struct.std::__1::__compressed_pair_elem.891" }
%"struct.std::__1::__compressed_pair_elem.891" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.895" = type { %"class.std::__1::__vector_base.896" }
%"class.std::__1::__vector_base.896" = type { %"class.std::__1::unique_ptr.897"*, %"class.std::__1::unique_ptr.897"*, %"class.std::__1::__compressed_pair.898" }
%"class.std::__1::unique_ptr.897" = type opaque
%"class.std::__1::__compressed_pair.898" = type { %"struct.std::__1::__compressed_pair_elem.899" }
%"struct.std::__1::__compressed_pair_elem.899" = type { %"class.std::__1::unique_ptr.897"* }
%"class.std::__1::unique_ptr.903" = type { %"class.std::__1::__compressed_pair.904" }
%"class.std::__1::__compressed_pair.904" = type { %"struct.std::__1::__compressed_pair_elem.905" }
%"struct.std::__1::__compressed_pair_elem.905" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.909" = type { %"class.std::__1::__compressed_pair.910" }
%"class.std::__1::__compressed_pair.910" = type { %"struct.std::__1::__compressed_pair_elem.911" }
%"struct.std::__1::__compressed_pair_elem.911" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.915" = type { %"class.std::__1::__compressed_pair.916" }
%"class.std::__1::__compressed_pair.916" = type { %"struct.std::__1::__compressed_pair_elem.917" }
%"struct.std::__1::__compressed_pair_elem.917" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.921" = type { %"class.std::__1::__vector_base.922" }
%"class.std::__1::__vector_base.922" = type { %"struct.std::__1::pair.923"*, %"struct.std::__1::pair.923"*, %"class.std::__1::__compressed_pair.924" }
%"struct.std::__1::pair.923" = type opaque
%"class.std::__1::__compressed_pair.924" = type { %"struct.std::__1::__compressed_pair_elem.925" }
%"struct.std::__1::__compressed_pair_elem.925" = type { %"struct.std::__1::pair.923"* }
%"struct.std::__1::pair.929" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.1"*, i16, i8*)*, i8* }
%"class.v8::Local.1" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.930" = type { %"class.std::__1::__compressed_pair.931" }
%"class.std::__1::__compressed_pair.931" = type { %"struct.std::__1::__compressed_pair_elem.932" }
%"struct.std::__1::__compressed_pair_elem.932" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.933", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.933" = type { %"class.std::__1::__hash_table.934" }
%"class.std::__1::__hash_table.934" = type <{ %"class.std::__1::unique_ptr.935", %"class.std::__1::__compressed_pair.945", %"class.std::__1::__compressed_pair.950", %"class.std::__1::__compressed_pair.954", [4 x i8] }>
%"class.std::__1::unique_ptr.935" = type { %"class.std::__1::__compressed_pair.936" }
%"class.std::__1::__compressed_pair.936" = type { %"struct.std::__1::__compressed_pair_elem.937", %"struct.std::__1::__compressed_pair_elem.939" }
%"struct.std::__1::__compressed_pair_elem.937" = type { %"struct.std::__1::__hash_node_base.938"** }
%"struct.std::__1::__hash_node_base.938" = type { %"struct.std::__1::__hash_node_base.938"* }
%"struct.std::__1::__compressed_pair_elem.939" = type { %"class.std::__1::__bucket_list_deallocator.940" }
%"class.std::__1::__bucket_list_deallocator.940" = type { %"class.std::__1::__compressed_pair.941" }
%"class.std::__1::__compressed_pair.941" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.945" = type { %"struct.std::__1::__compressed_pair_elem.946" }
%"struct.std::__1::__compressed_pair_elem.946" = type { %"struct.std::__1::__hash_node_base.938" }
%"class.std::__1::__compressed_pair.950" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.954" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.968" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.962"**, %"struct.std::__1::pair.962"**, %"struct.std::__1::pair.962"**, %"class.std::__1::__compressed_pair.963" }
%"struct.std::__1::pair.962" = type opaque
%"class.std::__1::__compressed_pair.963" = type { %"struct.std::__1::__compressed_pair_elem.964" }
%"struct.std::__1::__compressed_pair_elem.964" = type { %"struct.std::__1::pair.962"** }
%"class.std::__1::__compressed_pair.968" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.973" = type { %"class.std::__1::__vector_base.974" }
%"class.std::__1::__vector_base.974" = type { %"class.v8::internal::Handle.975"*, %"class.v8::internal::Handle.975"*, %"class.std::__1::__compressed_pair.976" }
%"class.v8::internal::Handle.975" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.976" = type { %"struct.std::__1::__compressed_pair_elem.977" }
%"struct.std::__1::__compressed_pair_elem.977" = type { %"class.v8::internal::Handle.975"* }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.839", i32, %"class.v8::Local.1" }
%"class.v8::Local.839" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.981" = type { %"class.std::__1::__compressed_pair.982" }
%"class.std::__1::__compressed_pair.982" = type { %"struct.std::__1::__compressed_pair_elem.983" }
%"struct.std::__1::__compressed_pair_elem.983" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.814", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.987" = type { %"class.std::__1::__vector_base.988" }
%"class.std::__1::__vector_base.988" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.989" }
%"class.std::__1::__compressed_pair.989" = type { %"struct.std::__1::__compressed_pair_elem.990" }
%"struct.std::__1::__compressed_pair_elem.990" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.994" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.995" = type { %"class.std::__1::__hash_table.996" }
%"class.std::__1::__hash_table.996" = type <{ %"class.std::__1::unique_ptr.997", %"class.std::__1::__compressed_pair.1007", %"class.std::__1::__compressed_pair.1012", %"class.std::__1::__compressed_pair.1015", [4 x i8] }>
%"class.std::__1::unique_ptr.997" = type { %"class.std::__1::__compressed_pair.998" }
%"class.std::__1::__compressed_pair.998" = type { %"struct.std::__1::__compressed_pair_elem.999", %"struct.std::__1::__compressed_pair_elem.1001" }
%"struct.std::__1::__compressed_pair_elem.999" = type { %"struct.std::__1::__hash_node_base.1000"** }
%"struct.std::__1::__hash_node_base.1000" = type { %"struct.std::__1::__hash_node_base.1000"* }
%"struct.std::__1::__compressed_pair_elem.1001" = type { %"class.std::__1::__bucket_list_deallocator.1002" }
%"class.std::__1::__bucket_list_deallocator.1002" = type { %"class.std::__1::__compressed_pair.1003" }
%"class.std::__1::__compressed_pair.1003" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1007" = type { %"struct.std::__1::__compressed_pair_elem.1008" }
%"struct.std::__1::__compressed_pair_elem.1008" = type { %"struct.std::__1::__hash_node_base.1000" }
%"class.std::__1::__compressed_pair.1012" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1015" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.161" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1019", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1048", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1049", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1019" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1044, %union.anon.1046, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1044 = type { i64 }
%union.anon.1046 = type { i64 }
%"class.std::__1::weak_ptr.1048" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.20", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.161" }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1049" = type { %"class.v8::PersistentBase.1050" }
%"class.v8::PersistentBase.1050" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1020", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1020" = type { %"class.std::__1::__hash_table.1021" }
%"class.std::__1::__hash_table.1021" = type <{ %"class.std::__1::unique_ptr.1022", %"class.std::__1::__compressed_pair.1032", %"class.std::__1::__compressed_pair.1037", %"class.std::__1::__compressed_pair.1040", [4 x i8] }>
%"class.std::__1::unique_ptr.1022" = type { %"class.std::__1::__compressed_pair.1023" }
%"class.std::__1::__compressed_pair.1023" = type { %"struct.std::__1::__compressed_pair_elem.1024", %"struct.std::__1::__compressed_pair_elem.1026" }
%"struct.std::__1::__compressed_pair_elem.1024" = type { %"struct.std::__1::__hash_node_base.1025"** }
%"struct.std::__1::__hash_node_base.1025" = type { %"struct.std::__1::__hash_node_base.1025"* }
%"struct.std::__1::__compressed_pair_elem.1026" = type { %"class.std::__1::__bucket_list_deallocator.1027" }
%"class.std::__1::__bucket_list_deallocator.1027" = type { %"class.std::__1::__compressed_pair.1028" }
%"class.std::__1::__compressed_pair.1028" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1032" = type { %"struct.std::__1::__compressed_pair_elem.1033" }
%"struct.std::__1::__compressed_pair_elem.1033" = type { %"struct.std::__1::__hash_node_base.1025" }
%"class.std::__1::__compressed_pair.1037" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1040" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1051" = type { %"class.std::__1::__compressed_pair.1052" }
%"class.std::__1::__compressed_pair.1052" = type { %"struct.std::__1::__compressed_pair_elem.1053" }
%"struct.std::__1::__compressed_pair_elem.1053" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1080", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1056", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1060", %"class.std::__1::unique_ptr.1066", %"class.std::__1::unique_ptr.475", %"class.std::__1::vector.1072", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1056" = type { %"struct.std::__1::__atomic_base.1057" }
%"struct.std::__1::__atomic_base.1057" = type { %"struct.std::__1::__cxx_atomic_impl.1058" }
%"struct.std::__1::__cxx_atomic_impl.1058" = type { %"struct.std::__1::__cxx_atomic_base_impl.1059" }
%"struct.std::__1::__cxx_atomic_base_impl.1059" = type { i32 }
%"class.std::__1::unique_ptr.1060" = type { %"class.std::__1::__compressed_pair.1061" }
%"class.std::__1::__compressed_pair.1061" = type { %"struct.std::__1::__compressed_pair_elem.1062" }
%"struct.std::__1::__compressed_pair_elem.1062" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.814" }
%"class.std::__1::unique_ptr.1066" = type { %"class.std::__1::__compressed_pair.1067" }
%"class.std::__1::__compressed_pair.1067" = type { %"struct.std::__1::__compressed_pair_elem.1068" }
%"struct.std::__1::__compressed_pair_elem.1068" = type { %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1072" = type { %"class.std::__1::__vector_base.1073" }
%"class.std::__1::__vector_base.1073" = type { %"struct.std::__1::pair.1074"*, %"struct.std::__1::pair.1074"*, %"class.std::__1::__compressed_pair.1075" }
%"struct.std::__1::pair.1074" = type opaque
%"class.std::__1::__compressed_pair.1075" = type { %"struct.std::__1::__compressed_pair_elem.1076" }
%"struct.std::__1::__compressed_pair_elem.1076" = type { %"struct.std::__1::pair.1074"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.20"*, %"class.std::__1::unique_ptr.98" }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.39", %"class.std::__1::vector.39", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.41" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.46" }
%"class.std::__1::__hash_table.46" = type <{ %"class.std::__1::unique_ptr.47", %"class.std::__1::__compressed_pair.57", %"class.std::__1::__compressed_pair.62", %"class.std::__1::__compressed_pair.64", [4 x i8] }>
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49", %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"struct.std::__1::__hash_node_base.50"** }
%"struct.std::__1::__hash_node_base.50" = type { %"struct.std::__1::__hash_node_base.50"* }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.std::__1::__bucket_list_deallocator.52" }
%"class.std::__1::__bucket_list_deallocator.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.std::__1::__hash_node_base.50" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.25", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.87", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.20"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.25", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.25", %"struct.std::__1::atomic.69", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.69" = type { %"struct.std::__1::__atomic_base.70" }
%"struct.std::__1::__atomic_base.70" = type { %"struct.std::__1::__cxx_atomic_impl.71" }
%"struct.std::__1::__cxx_atomic_impl.71" = type { %"struct.std::__1::__cxx_atomic_base_impl.72" }
%"struct.std::__1::__cxx_atomic_base_impl.72" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.73" }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.75" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.80", %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::atomic.87" = type { %"struct.std::__1::__atomic_base.88" }
%"struct.std::__1::__atomic_base.88" = type { %"struct.std::__1::__cxx_atomic_impl.89" }
%"struct.std::__1::__cxx_atomic_impl.89" = type { %"struct.std::__1::__cxx_atomic_base_impl.90" }
%"struct.std::__1::__cxx_atomic_base_impl.90" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.91", i8, [7 x i8] }>
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { i64*, i64*, %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.20", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.std::__1::unique_ptr.1080" = type { %"class.std::__1::__compressed_pair.1081" }
%"class.std::__1::__compressed_pair.1081" = type { %"struct.std::__1::__compressed_pair_elem.1082" }
%"struct.std::__1::__compressed_pair_elem.1082" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1089" = type { %"class.std::__1::__compressed_pair.1090" }
%"class.std::__1::__compressed_pair.1090" = type { %"struct.std::__1::__compressed_pair_elem.1091" }
%"struct.std::__1::__compressed_pair_elem.1091" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.840", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.840" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1097" }
%"class.std::__1::unordered_map.1097" = type { %"class.std::__1::__hash_table.1098" }
%"class.std::__1::__hash_table.1098" = type <{ %"class.std::__1::unique_ptr.1099", %"class.std::__1::__compressed_pair.1109", %"class.std::__1::__compressed_pair.1114", %"class.std::__1::__compressed_pair.1117", [4 x i8] }>
%"class.std::__1::unique_ptr.1099" = type { %"class.std::__1::__compressed_pair.1100" }
%"class.std::__1::__compressed_pair.1100" = type { %"struct.std::__1::__compressed_pair_elem.1101", %"struct.std::__1::__compressed_pair_elem.1103" }
%"struct.std::__1::__compressed_pair_elem.1101" = type { %"struct.std::__1::__hash_node_base.1102"** }
%"struct.std::__1::__hash_node_base.1102" = type { %"struct.std::__1::__hash_node_base.1102"* }
%"struct.std::__1::__compressed_pair_elem.1103" = type { %"class.std::__1::__bucket_list_deallocator.1104" }
%"class.std::__1::__bucket_list_deallocator.1104" = type { %"class.std::__1::__compressed_pair.1105" }
%"class.std::__1::__compressed_pair.1105" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1109" = type { %"struct.std::__1::__compressed_pair_elem.1110" }
%"struct.std::__1::__compressed_pair_elem.1110" = type { %"struct.std::__1::__hash_node_base.1102" }
%"class.std::__1::__compressed_pair.1114" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1117" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::atomic.1123" = type { %"struct.std::__1::__atomic_base.1124" }
%"struct.std::__1::__atomic_base.1124" = type { %"struct.std::__1::__cxx_atomic_impl.1125" }
%"struct.std::__1::__cxx_atomic_impl.1125" = type { %"struct.std::__1::__cxx_atomic_base_impl.1126" }
%"struct.std::__1::__cxx_atomic_base_impl.1126" = type { %"class.std::__1::vector.1127"* }
%"class.std::__1::vector.1127" = type { %"class.std::__1::__vector_base.1128" }
%"class.std::__1::__vector_base.1128" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1129" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1129" = type { %"struct.std::__1::__compressed_pair_elem.1130" }
%"struct.std::__1::__compressed_pair_elem.1130" = type { %"struct.v8::MemoryRange"* }
%"struct.std::__1::atomic.30" = type { %"struct.std::__1::__atomic_base.31" }
%"struct.std::__1::__atomic_base.31" = type { %"struct.std::__1::__cxx_atomic_impl.32" }
%"struct.std::__1::__cxx_atomic_impl.32" = type { %"struct.std::__1::__cxx_atomic_base_impl.33" }
%"struct.std::__1::__cxx_atomic_base_impl.33" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.34" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.104" }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.104" = type { %"class.std::__1::__vector_base.105" }
%"class.std::__1::__vector_base.105" = type { %"struct.std::__1::pair.106"*, %"struct.std::__1::pair.106"*, %"class.std::__1::__compressed_pair.107" }
%"struct.std::__1::pair.106" = type { i32, i64 }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"struct.std::__1::pair.106"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.20", i32, %"struct.std::__1::atomic.20", %"class.v8::base::Mutex", %"struct.std::__1::atomic.20" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.112" }
%"class.std::__1::unordered_map.112" = type { %"class.std::__1::__hash_table.113" }
%"class.std::__1::__hash_table.113" = type <{ %"class.std::__1::unique_ptr.114", %"class.std::__1::__compressed_pair.124", %"class.std::__1::__compressed_pair.129", %"class.std::__1::__compressed_pair.134", [4 x i8] }>
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116", %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"struct.std::__1::__hash_node_base.117"** }
%"struct.std::__1::__hash_node_base.117" = type { %"struct.std::__1::__hash_node_base.117"* }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.std::__1::__bucket_list_deallocator.119" }
%"class.std::__1::__bucket_list_deallocator.119" = type { %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"struct.std::__1::__hash_node_base.117" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.147" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.153", %"struct.std::__1::atomic.157", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.20" }
%"struct.std::__1::atomic.157" = type { %"struct.std::__1::__atomic_base.158" }
%"struct.std::__1::__atomic_base.158" = type { %"struct.std::__1::__cxx_atomic_impl.159" }
%"struct.std::__1::__cxx_atomic_impl.159" = type { %"struct.std::__1::__cxx_atomic_base_impl.160" }
%"struct.std::__1::__cxx_atomic_base_impl.160" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"struct.std::__1::atomic.162" = type { %"struct.std::__1::__atomic_base.163" }
%"struct.std::__1::__atomic_base.163" = type { %"struct.std::__1::__cxx_atomic_impl.164" }
%"struct.std::__1::__cxx_atomic_impl.164" = type { %"struct.std::__1::__cxx_atomic_base_impl.165" }
%"struct.std::__1::__cxx_atomic_base_impl.165" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.std::__1::vector.166" = type { %"class.std::__1::__vector_base.167" }
%"class.std::__1::__vector_base.167" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.168" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.227", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.281", %"class.std::__1::vector.281", %"class.std::__1::vector.281", %"class.std::__1::vector.288", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.182", %"class.std::__1::vector.183", %"class.std::__1::vector.190", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.182" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.183" = type { %"class.std::__1::__vector_base.184" }
%"class.std::__1::__vector_base.184" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.185" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.190" = type { %"class.std::__1::__vector_base.191" }
%"class.std::__1::__vector_base.191" = type { %"class.std::__1::unique_ptr.192"*, %"class.std::__1::unique_ptr.192"*, %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::unique_ptr.192" = type opaque
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.std::__1::unique_ptr.192"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.198", %"class.v8::internal::Worklist.200", %"class.v8::internal::Worklist.200", %"class.v8::internal::Worklist.200", %"class.v8::internal::Worklist.202", %"class.v8::internal::Worklist.204", %"class.v8::internal::Worklist.206", %"class.v8::internal::Worklist.208", %"class.v8::internal::Worklist.210", %"class.v8::internal::Worklist.212" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.198" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.200" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.202" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.204" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.206" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.208" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.210" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.212" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.214", i8, i64 }
%"class.std::__1::vector.214" = type { %"class.std::__1::__vector_base.215" }
%"class.std::__1::__vector_base.215" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.221" = type { %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.227" = type { %"class.std::__1::__compressed_pair.228" }
%"class.std::__1::__compressed_pair.228" = type { %"struct.std::__1::__compressed_pair_elem.229" }
%"struct.std::__1::__compressed_pair_elem.229" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.230" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.182"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.230" = type { %"class.std::__1::__hash_table.231" }
%"class.std::__1::__hash_table.231" = type <{ %"class.std::__1::unique_ptr.232", %"class.std::__1::__compressed_pair.242", %"class.std::__1::__compressed_pair.247", %"class.std::__1::__compressed_pair.250", [4 x i8] }>
%"class.std::__1::unique_ptr.232" = type { %"class.std::__1::__compressed_pair.233" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.234", %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.234" = type { %"struct.std::__1::__hash_node_base.235"** }
%"struct.std::__1::__hash_node_base.235" = type { %"struct.std::__1::__hash_node_base.235"* }
%"struct.std::__1::__compressed_pair_elem.236" = type { %"class.std::__1::__bucket_list_deallocator.237" }
%"class.std::__1::__bucket_list_deallocator.237" = type { %"class.std::__1::__compressed_pair.238" }
%"class.std::__1::__compressed_pair.238" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"struct.std::__1::__hash_node_base.235" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.250" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.257" }
%"class.std::__1::unordered_map.257" = type { %"class.std::__1::__hash_table.258" }
%"class.std::__1::__hash_table.258" = type <{ %"class.std::__1::unique_ptr.259", %"class.std::__1::__compressed_pair.269", %"class.std::__1::__compressed_pair.274", %"class.std::__1::__compressed_pair.277", [4 x i8] }>
%"class.std::__1::unique_ptr.259" = type { %"class.std::__1::__compressed_pair.260" }
%"class.std::__1::__compressed_pair.260" = type { %"struct.std::__1::__compressed_pair_elem.261", %"struct.std::__1::__compressed_pair_elem.263" }
%"struct.std::__1::__compressed_pair_elem.261" = type { %"struct.std::__1::__hash_node_base.262"** }
%"struct.std::__1::__hash_node_base.262" = type { %"struct.std::__1::__hash_node_base.262"* }
%"struct.std::__1::__compressed_pair_elem.263" = type { %"class.std::__1::__bucket_list_deallocator.264" }
%"class.std::__1::__bucket_list_deallocator.264" = type { %"class.std::__1::__compressed_pair.265" }
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"struct.std::__1::__hash_node_base.262" }
%"class.std::__1::__compressed_pair.274" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.277" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::vector.281" = type { %"class.std::__1::__vector_base.282" }
%"class.std::__1::__vector_base.282" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.283" }
%"class.std::__1::__compressed_pair.283" = type { %"struct.std::__1::__compressed_pair_elem.284" }
%"struct.std::__1::__compressed_pair_elem.284" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.288" = type { %"class.std::__1::__vector_base.289" }
%"class.std::__1::__vector_base.289" = type { %"struct.std::__1::pair.290"*, %"struct.std::__1::pair.290"*, %"class.std::__1::__compressed_pair.291" }
%"struct.std::__1::pair.290" = type opaque
%"class.std::__1::__compressed_pair.291" = type { %"struct.std::__1::__compressed_pair_elem.292" }
%"struct.std::__1::__compressed_pair_elem.292" = type { %"struct.std::__1::pair.290"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.296", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.281"], [3 x %"class.std::__1::vector.281"], i8, %"struct.std::__1::atomic.153", [6 x i8], %"class.std::__1::vector.281", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.296" = type { %"class.std::__1::__compressed_pair.297" }
%"class.std::__1::__compressed_pair.297" = type { %"struct.std::__1::__compressed_pair_elem.298" }
%"struct.std::__1::__compressed_pair_elem.298" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.306"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.281", %"class.std::__1::vector.281", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.306" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.309" = type { %"class.std::__1::__compressed_pair.310" }
%"class.std::__1::__compressed_pair.310" = type { %"struct.std::__1::__compressed_pair_elem.311" }
%"struct.std::__1::__compressed_pair_elem.311" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.315" = type { %"class.std::__1::__compressed_pair.316" }
%"class.std::__1::__compressed_pair.316" = type { %"struct.std::__1::__compressed_pair_elem.317" }
%"struct.std::__1::__compressed_pair_elem.317" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.321" = type { %"class.std::__1::__compressed_pair.322" }
%"class.std::__1::__compressed_pair.322" = type { %"struct.std::__1::__compressed_pair_elem.323" }
%"struct.std::__1::__compressed_pair_elem.323" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.331", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.324"], %"class.std::__1::unique_ptr.296" }
%"class.std::__1::vector.324" = type { %"class.std::__1::__vector_base.325" }
%"class.std::__1::__vector_base.325" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.326" }
%"class.std::__1::__compressed_pair.326" = type { %"struct.std::__1::__compressed_pair_elem.327" }
%"struct.std::__1::__compressed_pair_elem.327" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.360" = type { %"class.std::__1::__compressed_pair.361" }
%"class.std::__1::__compressed_pair.361" = type { %"struct.std::__1::__compressed_pair_elem.362" }
%"struct.std::__1::__compressed_pair_elem.362" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.363", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.367", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.372" }
%"struct.std::__1::atomic.363" = type { %"struct.std::__1::__atomic_base.364" }
%"struct.std::__1::__atomic_base.364" = type { %"struct.std::__1::__cxx_atomic_impl.365" }
%"struct.std::__1::__cxx_atomic_impl.365" = type { %"struct.std::__1::__cxx_atomic_base_impl.366" }
%"struct.std::__1::__cxx_atomic_base_impl.366" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.367" = type { %"struct.std::__1::__atomic_base.368" }
%"struct.std::__1::__atomic_base.368" = type { %"struct.std::__1::__cxx_atomic_impl.369" }
%"struct.std::__1::__cxx_atomic_impl.369" = type { %"struct.std::__1::__cxx_atomic_base_impl.370" }
%"struct.std::__1::__cxx_atomic_base_impl.370" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.372" = type { %"class.std::__1::__hash_table.373" }
%"class.std::__1::__hash_table.373" = type <{ %"class.std::__1::unique_ptr.374", %"class.std::__1::__compressed_pair.384", %"class.std::__1::__compressed_pair.389", %"class.std::__1::__compressed_pair.392", [4 x i8] }>
%"class.std::__1::unique_ptr.374" = type { %"class.std::__1::__compressed_pair.375" }
%"class.std::__1::__compressed_pair.375" = type { %"struct.std::__1::__compressed_pair_elem.376", %"struct.std::__1::__compressed_pair_elem.378" }
%"struct.std::__1::__compressed_pair_elem.376" = type { %"struct.std::__1::__hash_node_base.377"** }
%"struct.std::__1::__hash_node_base.377" = type { %"struct.std::__1::__hash_node_base.377"* }
%"struct.std::__1::__compressed_pair_elem.378" = type { %"class.std::__1::__bucket_list_deallocator.379" }
%"class.std::__1::__bucket_list_deallocator.379" = type { %"class.std::__1::__compressed_pair.380" }
%"class.std::__1::__compressed_pair.380" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.384" = type { %"struct.std::__1::__compressed_pair_elem.385" }
%"struct.std::__1::__compressed_pair_elem.385" = type { %"struct.std::__1::__hash_node_base.377" }
%"class.std::__1::__compressed_pair.389" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.392" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unique_ptr.399" = type { %"class.std::__1::__compressed_pair.400" }
%"class.std::__1::__compressed_pair.400" = type { %"struct.std::__1::__compressed_pair_elem.401" }
%"struct.std::__1::__compressed_pair_elem.401" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.296", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.153", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.402", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.402" = type { %"class.std::__1::__hash_table.403" }
%"class.std::__1::__hash_table.403" = type <{ %"class.std::__1::unique_ptr.404", %"class.std::__1::__compressed_pair.414", %"class.std::__1::__compressed_pair.419", %"class.std::__1::__compressed_pair.422", [4 x i8] }>
%"class.std::__1::unique_ptr.404" = type { %"class.std::__1::__compressed_pair.405" }
%"class.std::__1::__compressed_pair.405" = type { %"struct.std::__1::__compressed_pair_elem.406", %"struct.std::__1::__compressed_pair_elem.408" }
%"struct.std::__1::__compressed_pair_elem.406" = type { %"struct.std::__1::__hash_node_base.407"** }
%"struct.std::__1::__hash_node_base.407" = type { %"struct.std::__1::__hash_node_base.407"* }
%"struct.std::__1::__compressed_pair_elem.408" = type { %"class.std::__1::__bucket_list_deallocator.409" }
%"class.std::__1::__bucket_list_deallocator.409" = type { %"class.std::__1::__compressed_pair.410" }
%"class.std::__1::__compressed_pair.410" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.414" = type { %"struct.std::__1::__compressed_pair_elem.415" }
%"struct.std::__1::__compressed_pair_elem.415" = type { %"struct.std::__1::__hash_node_base.407" }
%"class.std::__1::__compressed_pair.419" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.422" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unique_ptr.429" = type { %"class.std::__1::__compressed_pair.430" }
%"class.std::__1::__compressed_pair.430" = type { %"struct.std::__1::__compressed_pair_elem.431" }
%"struct.std::__1::__compressed_pair_elem.431" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.435" = type { %"class.std::__1::__compressed_pair.436" }
%"class.std::__1::__compressed_pair.436" = type { %"struct.std::__1::__compressed_pair_elem.437" }
%"struct.std::__1::__compressed_pair_elem.437" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.438" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.438" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::unique_ptr.445" = type { %"class.std::__1::__compressed_pair.446" }
%"class.std::__1::__compressed_pair.446" = type { %"struct.std::__1::__compressed_pair_elem.447" }
%"struct.std::__1::__compressed_pair_elem.447" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.451" = type { %"class.std::__1::__compressed_pair.452" }
%"class.std::__1::__compressed_pair.452" = type { %"struct.std::__1::__compressed_pair_elem.453" }
%"struct.std::__1::__compressed_pair_elem.453" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.457" = type { %"class.std::__1::__compressed_pair.458" }
%"class.std::__1::__compressed_pair.458" = type { %"struct.std::__1::__compressed_pair_elem.459" }
%"struct.std::__1::__compressed_pair_elem.459" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.463" = type { %"class.std::__1::__compressed_pair.464" }
%"class.std::__1::__compressed_pair.464" = type { %"struct.std::__1::__compressed_pair_elem.465" }
%"struct.std::__1::__compressed_pair_elem.465" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.469" = type { %"class.std::__1::__compressed_pair.470" }
%"class.std::__1::__compressed_pair.470" = type { %"struct.std::__1::__compressed_pair_elem.471" }
%"struct.std::__1::__compressed_pair_elem.471" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.475" = type { %"class.std::__1::__compressed_pair.476" }
%"class.std::__1::__compressed_pair.476" = type { %"struct.std::__1::__compressed_pair_elem.477" }
%"struct.std::__1::__compressed_pair_elem.477" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.481" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.500", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.482", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.500" = type { %"struct.std::__1::__atomic_base.501" }
%"struct.std::__1::__atomic_base.501" = type { %"struct.std::__1::__cxx_atomic_impl.502" }
%"struct.std::__1::__cxx_atomic_impl.502" = type { %"struct.std::__1::__cxx_atomic_base_impl.503" }
%"struct.std::__1::__cxx_atomic_base_impl.503" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.504" = type { %"class.std::__1::__hash_table.505" }
%"class.std::__1::__hash_table.505" = type <{ %"class.std::__1::unique_ptr.506", %"class.std::__1::__compressed_pair.516", %"class.std::__1::__compressed_pair.521", %"class.std::__1::__compressed_pair.524", [4 x i8] }>
%"class.std::__1::unique_ptr.506" = type { %"class.std::__1::__compressed_pair.507" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.508", %"struct.std::__1::__compressed_pair_elem.510" }
%"struct.std::__1::__compressed_pair_elem.508" = type { %"struct.std::__1::__hash_node_base.509"** }
%"struct.std::__1::__hash_node_base.509" = type { %"struct.std::__1::__hash_node_base.509"* }
%"struct.std::__1::__compressed_pair_elem.510" = type { %"class.std::__1::__bucket_list_deallocator.511" }
%"class.std::__1::__bucket_list_deallocator.511" = type { %"class.std::__1::__compressed_pair.512" }
%"class.std::__1::__compressed_pair.512" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.516" = type { %"struct.std::__1::__compressed_pair_elem.517" }
%"struct.std::__1::__compressed_pair_elem.517" = type { %"struct.std::__1::__hash_node_base.509" }
%"class.std::__1::__compressed_pair.521" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.524" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unique_ptr.530" = type { %"class.std::__1::__compressed_pair.531" }
%"class.std::__1::__compressed_pair.531" = type { %"struct.std::__1::__compressed_pair_elem.532" }
%"struct.std::__1::__compressed_pair_elem.532" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.536" = type { %"class.std::__1::__compressed_pair.537" }
%"class.std::__1::__compressed_pair.537" = type { %"struct.std::__1::__compressed_pair_elem.538" }
%"struct.std::__1::__compressed_pair_elem.538" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.542", %"class.std::__1::vector.542" }
%"class.std::__1::unique_ptr.549" = type { %"class.std::__1::__compressed_pair.550" }
%"class.std::__1::__compressed_pair.550" = type { %"struct.std::__1::__compressed_pair_elem.551" }
%"struct.std::__1::__compressed_pair_elem.551" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set.331" = type { %"class.std::__1::__hash_table.332" }
%"class.std::__1::__hash_table.332" = type <{ %"class.std::__1::unique_ptr.333", %"class.std::__1::__compressed_pair.343", %"class.std::__1::__compressed_pair.348", %"class.std::__1::__compressed_pair.352", [4 x i8] }>
%"class.std::__1::unique_ptr.333" = type { %"class.std::__1::__compressed_pair.334" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.335", %"struct.std::__1::__compressed_pair_elem.337" }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"struct.std::__1::__hash_node_base.336"** }
%"struct.std::__1::__hash_node_base.336" = type { %"struct.std::__1::__hash_node_base.336"* }
%"struct.std::__1::__compressed_pair_elem.337" = type { %"class.std::__1::__bucket_list_deallocator.338" }
%"class.std::__1::__bucket_list_deallocator.338" = type { %"class.std::__1::__compressed_pair.339" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.343" = type { %"struct.std::__1::__compressed_pair_elem.344" }
%"struct.std::__1::__compressed_pair_elem.344" = type { %"struct.std::__1::__hash_node_base.336" }
%"class.std::__1::__compressed_pair.348" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.352" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unordered_map.581" = type { %"class.std::__1::__hash_table.582" }
%"class.std::__1::__hash_table.582" = type <{ %"class.std::__1::unique_ptr.583", %"class.std::__1::__compressed_pair.593", %"class.std::__1::__compressed_pair.598", %"class.std::__1::__compressed_pair.601", [4 x i8] }>
%"class.std::__1::unique_ptr.583" = type { %"class.std::__1::__compressed_pair.584" }
%"class.std::__1::__compressed_pair.584" = type { %"struct.std::__1::__compressed_pair_elem.585", %"struct.std::__1::__compressed_pair_elem.587" }
%"struct.std::__1::__compressed_pair_elem.585" = type { %"struct.std::__1::__hash_node_base.586"** }
%"struct.std::__1::__hash_node_base.586" = type { %"struct.std::__1::__hash_node_base.586"* }
%"struct.std::__1::__compressed_pair_elem.587" = type { %"class.std::__1::__bucket_list_deallocator.588" }
%"class.std::__1::__bucket_list_deallocator.588" = type { %"class.std::__1::__compressed_pair.589" }
%"class.std::__1::__compressed_pair.589" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.593" = type { %"struct.std::__1::__compressed_pair_elem.594" }
%"struct.std::__1::__compressed_pair_elem.594" = type { %"struct.std::__1::__hash_node_base.586" }
%"class.std::__1::__compressed_pair.598" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.601" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unordered_map.555" = type { %"class.std::__1::__hash_table.556" }
%"class.std::__1::__hash_table.556" = type <{ %"class.std::__1::unique_ptr.557", %"class.std::__1::__compressed_pair.567", %"class.std::__1::__compressed_pair.572", %"class.std::__1::__compressed_pair.575", [4 x i8] }>
%"class.std::__1::unique_ptr.557" = type { %"class.std::__1::__compressed_pair.558" }
%"class.std::__1::__compressed_pair.558" = type { %"struct.std::__1::__compressed_pair_elem.559", %"struct.std::__1::__compressed_pair_elem.561" }
%"struct.std::__1::__compressed_pair_elem.559" = type { %"struct.std::__1::__hash_node_base.560"** }
%"struct.std::__1::__hash_node_base.560" = type { %"struct.std::__1::__hash_node_base.560"* }
%"struct.std::__1::__compressed_pair_elem.561" = type { %"class.std::__1::__bucket_list_deallocator.562" }
%"class.std::__1::__bucket_list_deallocator.562" = type { %"class.std::__1::__compressed_pair.563" }
%"class.std::__1::__compressed_pair.563" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.567" = type { %"struct.std::__1::__compressed_pair_elem.568" }
%"struct.std::__1::__compressed_pair_elem.568" = type { %"struct.std::__1::__hash_node_base.560" }
%"class.std::__1::__compressed_pair.572" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.575" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unordered_map.605" = type { %"class.std::__1::__hash_table.606" }
%"class.std::__1::__hash_table.606" = type <{ %"class.std::__1::unique_ptr.607", %"class.std::__1::__compressed_pair.617", %"class.std::__1::__compressed_pair.622", %"class.std::__1::__compressed_pair.627", [4 x i8] }>
%"class.std::__1::unique_ptr.607" = type { %"class.std::__1::__compressed_pair.608" }
%"class.std::__1::__compressed_pair.608" = type { %"struct.std::__1::__compressed_pair_elem.609", %"struct.std::__1::__compressed_pair_elem.611" }
%"struct.std::__1::__compressed_pair_elem.609" = type { %"struct.std::__1::__hash_node_base.610"** }
%"struct.std::__1::__hash_node_base.610" = type { %"struct.std::__1::__hash_node_base.610"* }
%"struct.std::__1::__compressed_pair_elem.611" = type { %"class.std::__1::__bucket_list_deallocator.612" }
%"class.std::__1::__bucket_list_deallocator.612" = type { %"class.std::__1::__compressed_pair.613" }
%"class.std::__1::__compressed_pair.613" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.617" = type { %"struct.std::__1::__compressed_pair_elem.618" }
%"struct.std::__1::__compressed_pair_elem.618" = type { %"struct.std::__1::__hash_node_base.610" }
%"class.std::__1::__compressed_pair.622" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.627" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::vector.633" = type { %"class.std::__1::__vector_base.634" }
%"class.std::__1::__vector_base.634" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.635" }
%"class.std::__1::__compressed_pair.635" = type { %"struct.std::__1::__compressed_pair_elem.636" }
%"struct.std::__1::__compressed_pair_elem.636" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.640" = type { %"class.std::__1::__compressed_pair.641" }
%"class.std::__1::__compressed_pair.641" = type { %"struct.std::__1::__compressed_pair_elem.642" }
%"struct.std::__1::__compressed_pair_elem.642" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"struct.std::__1::atomic.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl.23" }
%"struct.std::__1::__cxx_atomic_impl.23" = type { %"struct.std::__1::__cxx_atomic_base_impl.24" }
%"struct.std::__1::__cxx_atomic_base_impl.24" = type { i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.20", i64, %"struct.std::__1::atomic.20" }
%"class.std::__1::vector.140" = type { %"class.std::__1::__vector_base.141" }
%"class.std::__1::__vector_base.141" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.142" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.std::__1::vector.542" = type { %"class.std::__1::__vector_base.543" }
%"class.std::__1::__vector_base.543" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.544" }
%"class.std::__1::__compressed_pair.544" = type { %"struct.std::__1::__compressed_pair_elem.545" }
%"struct.std::__1::__compressed_pair_elem.545" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::StackFrameInfo" = type { %"class.v8::internal::TorqueGeneratedStackFrameInfo" }
%"class.v8::internal::TorqueGeneratedStackFrameInfo" = type { %"class.v8::internal::Struct" }
%"class.v8::internal::Struct" = type { %"class.v8::internal::TorqueGeneratedStruct" }
%"class.v8::internal::TorqueGeneratedStruct" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Script" = type { %"class.v8::internal::TorqueGeneratedScript" }
%"class.v8::internal::TorqueGeneratedScript" = type { %"class.v8::internal::Struct" }
%"class.v8::internal::WasmInstanceObject" = type { %"class.v8::internal::JSObject" }
%"class.v8::internal::JSObject" = type { %"class.v8::internal::TorqueGeneratedJSObject" }
%"class.v8::internal::TorqueGeneratedJSObject" = type { %"class.v8::internal::JSReceiver" }
%"class.v8::internal::JSReceiver" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::SharedFunctionInfo" = type { %"class.v8::internal::TorqueGeneratedSharedFunctionInfo" }
%"class.v8::internal::TorqueGeneratedSharedFunctionInfo" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::wasm::WasmModule" = type { %"class.std::__1::unique_ptr.1135", i32, i32, i8, i8, i8, i8, i8, i32, %"class.std::__1::vector.1141", i32, i32, i32, i32, i32, i32, i32, i32, %"class.v8::internal::wasm::WireBytesRef", %"class.v8::internal::wasm::WireBytesRef", %"class.std::__1::vector.1155", %"class.std::__1::vector.1163", %"class.std::__1::vector.1170", %"class.std::__1::vector.1177", %"class.std::__1::vector.1184", %"class.std::__1::vector.1191", %"class.std::__1::vector.1198", %"class.std::__1::vector.1205", %"class.std::__1::vector.1212", %"class.std::__1::vector.1219", %"class.std::__1::vector.1232", %"class.std::__1::unordered_map.1239", %"class.v8::internal::wasm::SignatureMap", i8, %"class.v8::internal::wasm::LazilyGeneratedNames", %"struct.v8::internal::wasm::WasmDebugSymbols", %"class.std::__1::unique_ptr.1300" }
%"class.std::__1::unique_ptr.1135" = type { %"class.std::__1::__compressed_pair.1136" }
%"class.std::__1::__compressed_pair.1136" = type { %"struct.std::__1::__compressed_pair_elem.1137" }
%"struct.std::__1::__compressed_pair_elem.1137" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::vector.1141" = type { %"class.std::__1::__vector_base.1142" }
%"class.std::__1::__vector_base.1142" = type { %"struct.v8::internal::wasm::WasmGlobal"*, %"struct.v8::internal::wasm::WasmGlobal"*, %"class.std::__1::__compressed_pair.1150" }
%"struct.v8::internal::wasm::WasmGlobal" = type <{ %"class.v8::internal::wasm::ValueType", i8, [3 x i8], %"class.v8::internal::wasm::WasmInitExpr", %union.anon.1149, i8, i8, [2 x i8] }>
%"class.v8::internal::wasm::ValueType" = type { i32 }
%"class.v8::internal::wasm::WasmInitExpr" = type { %"union.v8::internal::wasm::WasmInitExpr::Immediate", i32, %"class.std::__1::unique_ptr.1143" }
%"union.v8::internal::wasm::WasmInitExpr::Immediate" = type { i64, [8 x i8] }
%"class.std::__1::unique_ptr.1143" = type { %"class.std::__1::__compressed_pair.1144" }
%"class.std::__1::__compressed_pair.1144" = type { %"struct.std::__1::__compressed_pair_elem.1145" }
%"struct.std::__1::__compressed_pair_elem.1145" = type { %"class.v8::internal::wasm::WasmInitExpr"* }
%union.anon.1149 = type { i32 }
%"class.std::__1::__compressed_pair.1150" = type { %"struct.std::__1::__compressed_pair_elem.1151" }
%"struct.std::__1::__compressed_pair_elem.1151" = type { %"struct.v8::internal::wasm::WasmGlobal"* }
%"class.v8::internal::wasm::WireBytesRef" = type { i32, i32 }
%"class.std::__1::vector.1155" = type { %"class.std::__1::__vector_base.1156" }
%"class.std::__1::__vector_base.1156" = type { %"struct.v8::internal::wasm::TypeDefinition"*, %"struct.v8::internal::wasm::TypeDefinition"*, %"class.std::__1::__compressed_pair.1158" }
%"struct.v8::internal::wasm::TypeDefinition" = type { %union.anon.1157 }
%union.anon.1157 = type { %"class.v8::internal::Signature"* }
%"class.v8::internal::Signature" = type { i64, i64, %"class.v8::internal::wasm::ValueType"* }
%"class.std::__1::__compressed_pair.1158" = type { %"struct.std::__1::__compressed_pair_elem.1159" }
%"struct.std::__1::__compressed_pair_elem.1159" = type { %"struct.v8::internal::wasm::TypeDefinition"* }
%"class.std::__1::vector.1163" = type { %"class.std::__1::__vector_base.1164" }
%"class.std::__1::__vector_base.1164" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1165" }
%"class.std::__1::__compressed_pair.1165" = type { %"struct.std::__1::__compressed_pair_elem.1166" }
%"struct.std::__1::__compressed_pair_elem.1166" = type { i8* }
%"class.std::__1::vector.1170" = type { %"class.std::__1::__vector_base.1171" }
%"class.std::__1::__vector_base.1171" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1172" }
%"class.std::__1::__compressed_pair.1172" = type { %"struct.std::__1::__compressed_pair_elem.1173" }
%"struct.std::__1::__compressed_pair_elem.1173" = type { i32* }
%"class.std::__1::vector.1177" = type { %"class.std::__1::__vector_base.1178" }
%"class.std::__1::__vector_base.1178" = type { %"struct.v8::internal::wasm::WasmFunction"*, %"struct.v8::internal::wasm::WasmFunction"*, %"class.std::__1::__compressed_pair.1179" }
%"struct.v8::internal::wasm::WasmFunction" = type <{ %"class.v8::internal::Signature"*, i32, i32, %"class.v8::internal::wasm::WireBytesRef", i8, i8, i8, [5 x i8] }>
%"class.std::__1::__compressed_pair.1179" = type { %"struct.std::__1::__compressed_pair_elem.1180" }
%"struct.std::__1::__compressed_pair_elem.1180" = type { %"struct.v8::internal::wasm::WasmFunction"* }
%"class.std::__1::vector.1184" = type { %"class.std::__1::__vector_base.1185" }
%"class.std::__1::__vector_base.1185" = type { %"struct.v8::internal::wasm::WasmDataSegment"*, %"struct.v8::internal::wasm::WasmDataSegment"*, %"class.std::__1::__compressed_pair.1186" }
%"struct.v8::internal::wasm::WasmDataSegment" = type <{ %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WireBytesRef", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.1186" = type { %"struct.std::__1::__compressed_pair_elem.1187" }
%"struct.std::__1::__compressed_pair_elem.1187" = type { %"struct.v8::internal::wasm::WasmDataSegment"* }
%"class.std::__1::vector.1191" = type { %"class.std::__1::__vector_base.1192" }
%"class.std::__1::__vector_base.1192" = type { %"struct.v8::internal::wasm::WasmTable"*, %"struct.v8::internal::wasm::WasmTable"*, %"class.std::__1::__compressed_pair.1193" }
%"struct.v8::internal::wasm::WasmTable" = type { %"class.v8::internal::wasm::ValueType", i32, i32, i8, i8, i8, %"class.v8::internal::wasm::WasmInitExpr" }
%"class.std::__1::__compressed_pair.1193" = type { %"struct.std::__1::__compressed_pair_elem.1194" }
%"struct.std::__1::__compressed_pair_elem.1194" = type { %"struct.v8::internal::wasm::WasmTable"* }
%"class.std::__1::vector.1198" = type { %"class.std::__1::__vector_base.1199" }
%"class.std::__1::__vector_base.1199" = type { %"struct.v8::internal::wasm::WasmImport"*, %"struct.v8::internal::wasm::WasmImport"*, %"class.std::__1::__compressed_pair.1200" }
%"struct.v8::internal::wasm::WasmImport" = type { %"class.v8::internal::wasm::WireBytesRef", %"class.v8::internal::wasm::WireBytesRef", i8, i32 }
%"class.std::__1::__compressed_pair.1200" = type { %"struct.std::__1::__compressed_pair_elem.1201" }
%"struct.std::__1::__compressed_pair_elem.1201" = type { %"struct.v8::internal::wasm::WasmImport"* }
%"class.std::__1::vector.1205" = type { %"class.std::__1::__vector_base.1206" }
%"class.std::__1::__vector_base.1206" = type { %"struct.v8::internal::wasm::WasmExport"*, %"struct.v8::internal::wasm::WasmExport"*, %"class.std::__1::__compressed_pair.1207" }
%"struct.v8::internal::wasm::WasmExport" = type { %"class.v8::internal::wasm::WireBytesRef", i8, i32 }
%"class.std::__1::__compressed_pair.1207" = type { %"struct.std::__1::__compressed_pair_elem.1208" }
%"struct.std::__1::__compressed_pair_elem.1208" = type { %"struct.v8::internal::wasm::WasmExport"* }
%"class.std::__1::vector.1212" = type { %"class.std::__1::__vector_base.1213" }
%"class.std::__1::__vector_base.1213" = type { %"struct.v8::internal::wasm::WasmException"*, %"struct.v8::internal::wasm::WasmException"*, %"class.std::__1::__compressed_pair.1214" }
%"struct.v8::internal::wasm::WasmException" = type { %"class.v8::internal::Signature"* }
%"class.std::__1::__compressed_pair.1214" = type { %"struct.std::__1::__compressed_pair_elem.1215" }
%"struct.std::__1::__compressed_pair_elem.1215" = type { %"struct.v8::internal::wasm::WasmException"* }
%"class.std::__1::vector.1219" = type { %"class.std::__1::__vector_base.1220" }
%"class.std::__1::__vector_base.1220" = type { %"struct.v8::internal::wasm::WasmElemSegment"*, %"struct.v8::internal::wasm::WasmElemSegment"*, %"class.std::__1::__compressed_pair.1227" }
%"struct.v8::internal::wasm::WasmElemSegment" = type <{ %"class.v8::internal::wasm::ValueType", i32, %"class.v8::internal::wasm::WasmInitExpr", %"class.std::__1::vector.1221", i32, [4 x i8] }>
%"class.std::__1::vector.1221" = type { %"class.std::__1::__vector_base.1222" }
%"class.std::__1::__vector_base.1222" = type { %"class.v8::internal::wasm::WasmInitExpr"*, %"class.v8::internal::wasm::WasmInitExpr"*, %"class.std::__1::__compressed_pair.1223" }
%"class.std::__1::__compressed_pair.1223" = type { %"struct.std::__1::__compressed_pair_elem.1145" }
%"class.std::__1::__compressed_pair.1227" = type { %"struct.std::__1::__compressed_pair_elem.1228" }
%"struct.std::__1::__compressed_pair_elem.1228" = type { %"struct.v8::internal::wasm::WasmElemSegment"* }
%"class.std::__1::vector.1232" = type { %"class.std::__1::__vector_base.1233" }
%"class.std::__1::__vector_base.1233" = type { %"struct.v8::internal::wasm::WasmCompilationHint"*, %"struct.v8::internal::wasm::WasmCompilationHint"*, %"class.std::__1::__compressed_pair.1234" }
%"struct.v8::internal::wasm::WasmCompilationHint" = type { i8, i8, i8 }
%"class.std::__1::__compressed_pair.1234" = type { %"struct.std::__1::__compressed_pair_elem.1235" }
%"struct.std::__1::__compressed_pair_elem.1235" = type { %"struct.v8::internal::wasm::WasmCompilationHint"* }
%"class.std::__1::unordered_map.1239" = type { %"class.std::__1::__hash_table.1240" }
%"class.std::__1::__hash_table.1240" = type <{ %"class.std::__1::unique_ptr.1241", %"class.std::__1::__compressed_pair.1251", %"class.std::__1::__compressed_pair.1256", %"class.std::__1::__compressed_pair.1261", [4 x i8] }>
%"class.std::__1::unique_ptr.1241" = type { %"class.std::__1::__compressed_pair.1242" }
%"class.std::__1::__compressed_pair.1242" = type { %"struct.std::__1::__compressed_pair_elem.1243", %"struct.std::__1::__compressed_pair_elem.1245" }
%"struct.std::__1::__compressed_pair_elem.1243" = type { %"struct.std::__1::__hash_node_base.1244"** }
%"struct.std::__1::__hash_node_base.1244" = type { %"struct.std::__1::__hash_node_base.1244"* }
%"struct.std::__1::__compressed_pair_elem.1245" = type { %"class.std::__1::__bucket_list_deallocator.1246" }
%"class.std::__1::__bucket_list_deallocator.1246" = type { %"class.std::__1::__compressed_pair.1247" }
%"class.std::__1::__compressed_pair.1247" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1251" = type { %"struct.std::__1::__compressed_pair_elem.1252" }
%"struct.std::__1::__compressed_pair_elem.1252" = type { %"struct.std::__1::__hash_node_base.1244" }
%"class.std::__1::__compressed_pair.1256" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1261" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::wasm::SignatureMap" = type { i8, [7 x i8], %"class.std::__1::unordered_map.1267" }
%"class.std::__1::unordered_map.1267" = type { %"class.std::__1::__hash_table.1268" }
%"class.std::__1::__hash_table.1268" = type <{ %"class.std::__1::unique_ptr.1269", %"class.std::__1::__compressed_pair.1279", %"class.std::__1::__compressed_pair.1284", %"class.std::__1::__compressed_pair.1287", [4 x i8] }>
%"class.std::__1::unique_ptr.1269" = type { %"class.std::__1::__compressed_pair.1270" }
%"class.std::__1::__compressed_pair.1270" = type { %"struct.std::__1::__compressed_pair_elem.1271", %"struct.std::__1::__compressed_pair_elem.1273" }
%"struct.std::__1::__compressed_pair_elem.1271" = type { %"struct.std::__1::__hash_node_base.1272"** }
%"struct.std::__1::__hash_node_base.1272" = type { %"struct.std::__1::__hash_node_base.1272"* }
%"struct.std::__1::__compressed_pair_elem.1273" = type { %"class.std::__1::__bucket_list_deallocator.1274" }
%"class.std::__1::__bucket_list_deallocator.1274" = type { %"class.std::__1::__compressed_pair.1275" }
%"class.std::__1::__compressed_pair.1275" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1279" = type { %"struct.std::__1::__compressed_pair_elem.1280" }
%"struct.std::__1::__compressed_pair_elem.1280" = type { %"struct.std::__1::__hash_node_base.1272" }
%"class.std::__1::__compressed_pair.1284" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1287" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::wasm::LazilyGeneratedNames" = type { %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.1293" }
%"class.std::__1::unique_ptr.1293" = type { %"class.std::__1::__compressed_pair.1294" }
%"class.std::__1::__compressed_pair.1294" = type { %"struct.std::__1::__compressed_pair_elem.1295" }
%"struct.std::__1::__compressed_pair_elem.1295" = type { %"class.std::__1::unordered_map.1296"* }
%"class.std::__1::unordered_map.1296" = type opaque
%"struct.v8::internal::wasm::WasmDebugSymbols" = type { i32, %"class.v8::internal::wasm::WireBytesRef" }
%"class.std::__1::unique_ptr.1300" = type { %"class.std::__1::__compressed_pair.1301" }
%"class.std::__1::__compressed_pair.1301" = type { %"struct.std::__1::__compressed_pair_elem.1302" }
%"struct.std::__1::__compressed_pair_elem.1302" = type { %"class.v8::internal::wasm::AsmJsOffsetInformation"* }
%"class.v8::internal::wasm::AsmJsOffsetInformation" = type { %"class.v8::base::Mutex", %"class.v8::internal::OwnedVector", %"class.std::__1::unique_ptr.1309" }
%"class.v8::internal::OwnedVector" = type { %"class.std::__1::unique_ptr.1303", i64 }
%"class.std::__1::unique_ptr.1303" = type { %"class.std::__1::__compressed_pair.1304" }
%"class.std::__1::__compressed_pair.1304" = type { %"struct.std::__1::__compressed_pair_elem.1305" }
%"struct.std::__1::__compressed_pair_elem.1305" = type { i8* }
%"class.std::__1::unique_ptr.1309" = type { %"class.std::__1::__compressed_pair.1310" }
%"class.std::__1::__compressed_pair.1310" = type { %"struct.std::__1::__compressed_pair_elem.1311" }
%"struct.std::__1::__compressed_pair_elem.1311" = type { %"struct.v8::internal::wasm::AsmJsOffsets"* }
%"struct.v8::internal::wasm::AsmJsOffsets" = type opaque
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { %"class.v8::internal::Script" }
%"class.v8::String::ExternalOneByteStringResource" = type { %"class.v8::String::ExternalStringResourceBase", i8* }
%"class.v8::String::ExternalStringResourceBase" = type { i32 (...)** }
%"class.v8::String::ExternalStringResource" = type { %"class.v8::String::ExternalStringResourceBase", i16* }
%"class.v8::internal::Factory" = type { i8 }
%"class.v8::internal::Handle<v8::internal::Script>::ObjectRef" = type { %"class.v8::internal::Script" }
%"class.v8::internal::IncrementalStringBuilder" = type { %"class.v8::internal::Isolate"*, i32, i8, i32, i32, %"class.v8::internal::Handle.1320", %"class.v8::internal::Handle.1320" }
%"class.v8::internal::Handle.1320" = type { %"class.v8::internal::HandleBase" }
%"struct.v8::internal::Script::PositionInfo" = type { i32, i32, i32, i32 }
%"class.v8::internal::String" = type { %"class.v8::internal::TorqueGeneratedString" }
%"class.v8::internal::TorqueGeneratedString" = type { %"class.v8::internal::Name" }
%"class.v8::internal::StringShape" = type { i32 }
%"class.v8::internal::PrototypeIterator" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::internal::Object", %"class.v8::internal::Handle.975", i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.v8::internal::Representation" = type { i8 }
%"class.v8::internal::Handle<v8::internal::String>::ObjectRef" = type { %"class.v8::internal::String" }
%"class.v8::internal::LookupIterator::Key" = type { %"class.v8::internal::Handle.1328", i64 }
%"class.v8::internal::Handle.1328" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::LookupIterator" = type { i32, i32, i8, i32, %"class.v8::internal::PropertyDetails", %"class.v8::internal::Isolate"*, %"class.v8::internal::Handle.1328", %"class.v8::internal::Handle.1322", %"class.v8::internal::Handle.1322", %"class.v8::internal::Handle.1325", %"class.v8::internal::Handle.1322", i64, %"class.v8::internal::InternalIndex" }
%"class.v8::internal::PropertyDetails" = type { i32 }
%"class.v8::internal::Handle.1325" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle.1322" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::InternalIndex" = type { i64 }
%"class.v8::internal::ScopeInfo" = type { %"class.v8::internal::TorqueGeneratedScopeInfo" }
%"class.v8::internal::TorqueGeneratedScopeInfo" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::AbstractCode" = type { %"class.v8::internal::HeapObject" }
%"class.std::__1::shared_ptr.1331" = type { %"class.v8::internal::wasm::GlobalWasmCodeRef"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::wasm::GlobalWasmCodeRef" = type { %"class.v8::internal::wasm::WasmCode"*, %"class.std::__1::shared_ptr.1434" }
%"class.v8::internal::wasm::WasmCode" = type { %"class.v8::internal::wasm::NativeModule"*, i8*, i8, %"class.std::__1::unique_ptr.1303", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::atomic.1429" }
%"class.v8::internal::wasm::NativeModule" = type { %"class.v8::internal::wasm::WasmEngine"*, %"class.v8::internal::OperationsBarrier::Token", %"class.v8::internal::wasm::WasmCodeAllocator", %"class.v8::internal::wasm::WasmFeatures", %"class.std::__1::shared_ptr.1354", %"class.std::__1::unique_ptr.1355", %"class.std::__1::shared_ptr.1368", %"class.v8::internal::wasm::WasmCode"*, %"class.v8::internal::wasm::WasmCode"*, %"class.v8::internal::wasm::WasmCode"*, %"class.std::__1::unique_ptr.1369", %"class.std::__1::unique_ptr.1375", %"class.std::__1::unique_ptr.1381", %"class.v8::base::RecursiveMutex", %"class.std::__1::map.1386", %"class.std::__1::vector.1395", %"class.std::__1::unique_ptr.1403", %"class.std::__1::vector.1409", %"class.std::__1::unique_ptr.1416", i8, %"class.std::__1::unique_ptr.1422", i8, i8, %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20" }
%"class.v8::internal::OperationsBarrier::Token" = type { %"class.v8::internal::OperationsBarrier"* }
%"class.v8::internal::OperationsBarrier" = type { %"class.v8::base::Mutex", %"class.v8::base::ConditionVariable", i8, i64 }
%"class.v8::internal::wasm::WasmCodeAllocator" = type { %"class.v8::internal::wasm::WasmCodeManager"*, %"class.v8::internal::wasm::DisjointAllocationPool", %"class.v8::internal::wasm::DisjointAllocationPool", %"class.v8::internal::wasm::DisjointAllocationPool", %"class.std::__1::vector.1348", i32, %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"class.std::__1::shared_ptr.677" }
%"class.v8::internal::wasm::WasmCodeManager" = type { i64, %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", i32, %"class.v8::base::Mutex", %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.1332" }
%"class.std::__1::__tree.1332" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1333", %"class.std::__1::__compressed_pair.1337" }
%"class.std::__1::__compressed_pair.1333" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"class.std::__1::__compressed_pair.1337" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.v8::internal::wasm::DisjointAllocationPool" = type { %"class.std::__1::set.1340" }
%"class.std::__1::set.1340" = type { %"class.std::__1::__tree.1341" }
%"class.std::__1::__tree.1341" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1342", %"class.std::__1::__compressed_pair.1346" }
%"class.std::__1::__compressed_pair.1342" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"class.std::__1::__compressed_pair.1346" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::vector.1348" = type { %"class.std::__1::__vector_base.1349" }
%"class.std::__1::__vector_base.1349" = type { %"class.v8::internal::VirtualMemory"*, %"class.v8::internal::VirtualMemory"*, %"class.std::__1::__compressed_pair.1350" }
%"class.std::__1::__compressed_pair.1350" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"class.v8::internal::wasm::WasmFeatures" = type { %"class.v8::base::EnumSet" }
%"class.v8::base::EnumSet" = type { i32 }
%"class.std::__1::shared_ptr.1354" = type { %"struct.v8::internal::wasm::WasmModule"*, %"class.std::__1::__shared_weak_count"* }
%"class.std::__1::unique_ptr.1355" = type { %"class.std::__1::__compressed_pair.1356" }
%"class.std::__1::__compressed_pair.1356" = type { %"struct.std::__1::__compressed_pair_elem.1357" }
%"struct.std::__1::__compressed_pair_elem.1357" = type { %"class.v8::internal::wasm::WasmModuleSourceMap"* }
%"class.v8::internal::wasm::WasmModuleSourceMap" = type <{ %"class.std::__1::vector.91", %"class.std::__1::vector.1358", %"class.std::__1::vector.91", %"class.std::__1::vector.91", i8, [7 x i8] }>
%"class.std::__1::vector.1358" = type { %"class.std::__1::__vector_base.1359" }
%"class.std::__1::__vector_base.1359" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.1360" }
%"class.std::__1::__compressed_pair.1360" = type { %"struct.std::__1::__compressed_pair_elem.1361" }
%"struct.std::__1::__compressed_pair_elem.1361" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::shared_ptr.1368" = type { %"class.v8::internal::OwnedVector"*, %"class.std::__1::__shared_weak_count"* }
%"class.std::__1::unique_ptr.1369" = type { %"class.std::__1::__compressed_pair.1370" }
%"class.std::__1::__compressed_pair.1370" = type { %"struct.std::__1::__compressed_pair_elem.1371" }
%"struct.std::__1::__compressed_pair_elem.1371" = type { %"class.v8::internal::wasm::CompilationState"* }
%"class.v8::internal::wasm::CompilationState" = type { i8 }
%"class.std::__1::unique_ptr.1375" = type { %"class.std::__1::__compressed_pair.1376" }
%"class.std::__1::__compressed_pair.1376" = type { %"struct.std::__1::__compressed_pair_elem.1377" }
%"struct.std::__1::__compressed_pair_elem.1377" = type { %"class.v8::internal::wasm::WasmImportWrapperCache"* }
%"class.v8::internal::wasm::WasmImportWrapperCache" = type opaque
%"class.std::__1::unique_ptr.1381" = type { %"class.std::__1::__compressed_pair.1382" }
%"class.std::__1::__compressed_pair.1382" = type { %"struct.std::__1::__compressed_pair_elem.1173" }
%"class.std::__1::map.1386" = type { %"class.std::__1::__tree.1387" }
%"class.std::__1::__tree.1387" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1388", %"class.std::__1::__compressed_pair.1392" }
%"class.std::__1::__compressed_pair.1388" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"class.std::__1::__compressed_pair.1392" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::vector.1395" = type { %"class.std::__1::__vector_base.1396" }
%"class.std::__1::__vector_base.1396" = type { %"class.std::__1::unique_ptr.1397"*, %"class.std::__1::unique_ptr.1397"*, %"class.std::__1::__compressed_pair.1398" }
%"class.std::__1::unique_ptr.1397" = type opaque
%"class.std::__1::__compressed_pair.1398" = type { %"struct.std::__1::__compressed_pair_elem.1399" }
%"struct.std::__1::__compressed_pair_elem.1399" = type { %"class.std::__1::unique_ptr.1397"* }
%"class.std::__1::unique_ptr.1403" = type { %"class.std::__1::__compressed_pair.1404" }
%"class.std::__1::__compressed_pair.1404" = type { %"struct.std::__1::__compressed_pair_elem.1405" }
%"struct.std::__1::__compressed_pair_elem.1405" = type { %"class.v8::internal::wasm::WasmCode"** }
%"class.std::__1::vector.1409" = type { %"class.std::__1::__vector_base.1410" }
%"class.std::__1::__vector_base.1410" = type { %"struct.v8::internal::wasm::NativeModule::CodeSpaceData"*, %"struct.v8::internal::wasm::NativeModule::CodeSpaceData"*, %"class.std::__1::__compressed_pair.1411" }
%"struct.v8::internal::wasm::NativeModule::CodeSpaceData" = type { %"class.v8::base::AddressRegion", %"class.v8::internal::wasm::WasmCode"*, %"class.v8::internal::wasm::WasmCode"* }
%"class.std::__1::__compressed_pair.1411" = type { %"struct.std::__1::__compressed_pair_elem.1412" }
%"struct.std::__1::__compressed_pair_elem.1412" = type { %"struct.v8::internal::wasm::NativeModule::CodeSpaceData"* }
%"class.std::__1::unique_ptr.1416" = type { %"class.std::__1::__compressed_pair.1417" }
%"class.std::__1::__compressed_pair.1417" = type { %"struct.std::__1::__compressed_pair_elem.1418" }
%"struct.std::__1::__compressed_pair_elem.1418" = type { %"class.v8::internal::wasm::DebugInfo"* }
%"class.v8::internal::wasm::DebugInfo" = type opaque
%"class.std::__1::unique_ptr.1422" = type { %"class.std::__1::__compressed_pair.1423" }
%"class.std::__1::__compressed_pair.1423" = type { %"struct.std::__1::__compressed_pair_elem.1424" }
%"struct.std::__1::__compressed_pair_elem.1424" = type { %"class.std::__1::map.1425"* }
%"class.std::__1::map.1425" = type opaque
%"struct.std::__1::atomic.1429" = type { %"struct.std::__1::__atomic_base.1430" }
%"struct.std::__1::__atomic_base.1430" = type { %"struct.std::__1::__atomic_base.1431" }
%"struct.std::__1::__atomic_base.1431" = type { %"struct.std::__1::__cxx_atomic_impl.1432" }
%"struct.std::__1::__cxx_atomic_impl.1432" = type { %"struct.std::__1::__cxx_atomic_base_impl.1433" }
%"struct.std::__1::__cxx_atomic_base_impl.1433" = type { i32 }
%"class.std::__1::shared_ptr.1434" = type { %"class.v8::internal::wasm::NativeModule"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::MessageLocation" = type { %"class.v8::internal::Handle.1134", i32, i32, i32, %"class.v8::internal::Handle.1330" }
%"class.v8::internal::Handle.1134" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle.1330" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef" = type { %"class.v8::internal::SharedFunctionInfo" }
%"class.v8::internal::Vector.1459" = type { i8*, i64 }
%"class.v8::internal::Handle<v8::internal::StackFrameInfo>::ObjectRef" = type { %"class.v8::internal::StackFrameInfo" }
%"class.v8::internal::FlatStringReader" = type { %"class.v8::internal::Relocatable", %"class.v8::internal::Handle.1320", i8, i32, i8* }
%"class.v8::internal::ConsString" = type { %"class.v8::internal::TorqueGeneratedConsString" }
%"class.v8::internal::TorqueGeneratedConsString" = type { %"class.v8::internal::String" }
%"class.v8::internal::SlicedString" = type { %"class.v8::internal::TorqueGeneratedSlicedString" }
%"class.v8::internal::TorqueGeneratedSlicedString" = type { %"class.v8::internal::String" }
%"class.v8::internal::ThinString" = type { %"class.v8::internal::TorqueGeneratedThinString" }
%"class.v8::internal::TorqueGeneratedThinString" = type { %"class.v8::internal::String" }
%"class.v8::internal::RootVisitor" = type { i32 (...)** }

$_ZNK2v88internal18SharedFunctionInfo4NameEv = comdat any

$_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE = comdat any

$_ZN2v88internal18SharedFunctionInfo13inferred_nameEv = comdat any

$_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_ = comdat any

$_ZN2v88internal11StringShape33DispatchToSpecificTypeWithoutCastIZNS1_22DispatchToSpecificTypeIZNKS0_6String7GetImplEiE19StringGetDispatchertJRiEEET0_S4_DpOT1_E17CastingDispatchertJRS4_S6_EEES7_SA_ = comdat any

$_ZN2v88internal14LookupIteratorC2EPNS0_7IsolateENS0_6HandleINS0_6ObjectEEENS4_INS0_4NameEEEmS6_NS1_13ConfigurationE = comdat any

$_ZN2v88internal17PrototypeIterator7AdvanceEv = comdat any

$_ZNK2v88internal14Representation8MnemonicEv = comdat any

$_ZN2v88internal11RelocatableD2Ev = comdat any

$_ZN2v88internal11RelocatableD0Ev = comdat any

$_ZN2v88internal11Relocatable15IterateInstanceEPNS0_11RootVisitorE = comdat any

$_ZN2v88internal11Relocatable21PostGarbageCollectionEv = comdat any

$_ZTVN2v88internal11RelocatableE = comdat any

@.str = private unnamed_addr constant [28 x i8] c"<static_fields_initializer>\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"get \00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"set \00", align 1
@_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E = external local_unnamed_addr global %"class.v8::internal::SoleReadOnlyHeap"*, align 8
@.str.9 = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"v\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"t\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"d\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"h\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"0x%x\00", align 1
@.str.21 = private unnamed_addr constant [13 x i8] c"wasm://wasm/\00", align 1
@_ZTVN2v88internal11RelocatableE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::Relocatable"*)* @_ZN2v88internal11RelocatableD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::Relocatable"*)* @_ZN2v88internal11RelocatableD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::Relocatable"*, %"class.v8::internal::RootVisitor"*)* @_ZN2v88internal11Relocatable15IterateInstanceEPNS0_11RootVisitorE to i8*), i8* bitcast (void (%"class.v8::internal::Relocatable"*)* @_ZN2v88internal11Relocatable21PostGarbageCollectionEv to i8*)] }, comdat, align 8
@.str.28 = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.29 = private unnamed_addr constant [23 x i8] c"(location_) != nullptr\00", align 1
@switch.table._ZN2v88internal14StackFrameInfo13GetMethodNameENS0_6HandleIS1_EE = private unnamed_addr constant [5 x i64] [i64 0, i64 0, i64 16384, i64 0, i64 0], align 8
@switch.table._ZNK2v88internal14Representation8MnemonicEv = private unnamed_addr constant [6 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)], align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal14StackFrameInfo12IsPromiseAllEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 19
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 64
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %35, label %9

9:                                                ; preds = %1
  %10 = and i64 %3, -4294967296
  %11 = add i64 %3, 7
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %10, %14
  %16 = add i64 %15, 15
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %10, %19
  %21 = add i64 %20, -1
  %22 = inttoptr i64 %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %10, %24
  %26 = add i64 %25, 19
  %27 = inttoptr i64 %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %28 to i64
  %30 = or i64 %10, %29
  %31 = add i64 %30, 939
  %32 = inttoptr i64 %31 to i32*
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = icmp eq i32 %13, %33
  br label %35

35:                                               ; preds = %1, %9
  %36 = phi i1 [ %34, %9 ], [ false, %1 ]
  ret i1 %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal14StackFrameInfo12IsPromiseAnyEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 19
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 64
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %35, label %9

9:                                                ; preds = %1
  %10 = and i64 %3, -4294967296
  %11 = add i64 %3, 7
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %10, %14
  %16 = add i64 %15, 15
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %10, %19
  %21 = add i64 %20, -1
  %22 = inttoptr i64 %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %10, %24
  %26 = add i64 %25, 19
  %27 = inttoptr i64 %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %28 to i64
  %30 = or i64 %10, %29
  %31 = add i64 %30, 943
  %32 = inttoptr i64 %31 to i32*
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = icmp eq i32 %13, %33
  br label %35

35:                                               ; preds = %1, %9
  %36 = phi i1 [ %34, %9 ], [ false, %1 ]
  ret i1 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal14StackFrameInfo8IsNativeEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 19
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, -4294967296
  br i1 %8, label %26, label %10

10:                                               ; preds = %1
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %9, %14
  %16 = add i64 %15, 111
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %9, %19
  %21 = add i64 %20, 19
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %9, %24
  br label %72

26:                                               ; preds = %1
  %27 = add i64 %3, 7
  %28 = inttoptr i64 %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %9, %30
  %32 = add i64 %31, 11
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = zext i32 %34 to i64
  %36 = or i64 %9, %35
  %37 = add i64 %36, 15
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 acquire, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %9, %40
  %42 = add i64 %41, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %9, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = icmp eq i16 %49, 100
  br i1 %50, label %51, label %57

51:                                               ; preds = %26
  %52 = add i64 %41, 11
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %9, %55
  br label %57

57:                                               ; preds = %51, %26
  %58 = phi i64 [ %56, %51 ], [ %41, %26 ]
  %59 = and i64 %58, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %78, label %61

61:                                               ; preds = %57
  %62 = and i64 %58, -4294967296
  %63 = add i64 %58, -1
  %64 = inttoptr i64 %63 to i32*
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %62, %66
  %68 = add i64 %67, 7
  %69 = inttoptr i64 %68 to i16*
  %70 = load atomic i16, i16* %69 monotonic, align 2
  %71 = icmp eq i16 %70, 112
  br i1 %71, label %72, label %78

72:                                               ; preds = %61, %10
  %73 = phi i64 [ %25, %10 ], [ %58, %61 ]
  %74 = add i64 %73, 23
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75, align 4
  %77 = icmp ult i32 %76, 2
  br label %78

78:                                               ; preds = %57, %61, %72
  %79 = phi i1 [ %77, %72 ], [ false, %61 ], [ false, %57 ]
  ret i1 %79
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8, i64 } @_ZNK2v88internal14StackFrameInfo9GetScriptEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 19
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, -4294967296
  br i1 %8, label %27, label %10

10:                                               ; preds = %1
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %9, %14
  %16 = add i64 %15, 111
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %9, %19
  %21 = add i64 %20, 19
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %9, %24
  %26 = and i64 %25, -256
  br label %77

27:                                               ; preds = %1
  %28 = add i64 %3, 7
  %29 = inttoptr i64 %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  %32 = or i64 %9, %31
  %33 = add i64 %32, 11
  %34 = inttoptr i64 %33 to i32*
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = zext i32 %35 to i64
  %37 = or i64 %9, %36
  %38 = add i64 %37, 15
  %39 = inttoptr i64 %38 to i32*
  %40 = load atomic i32, i32* %39 acquire, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %9, %41
  %43 = add i64 %42, -1
  %44 = inttoptr i64 %43 to i32*
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = zext i32 %45 to i64
  %47 = or i64 %9, %46
  %48 = add i64 %47, 7
  %49 = inttoptr i64 %48 to i16*
  %50 = load atomic i16, i16* %49 monotonic, align 2
  %51 = icmp eq i16 %50, 100
  br i1 %51, label %52, label %58

52:                                               ; preds = %27
  %53 = add i64 %42, 11
  %54 = inttoptr i64 %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i64
  %57 = or i64 %9, %56
  br label %58

58:                                               ; preds = %27, %52
  %59 = phi i64 [ %57, %52 ], [ %42, %27 ]
  %60 = and i64 %59, 1
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %77, label %62

62:                                               ; preds = %58
  %63 = and i64 %59, -4294967296
  %64 = add i64 %59, -1
  %65 = inttoptr i64 %64 to i32*
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = zext i32 %66 to i64
  %68 = or i64 %63, %67
  %69 = add i64 %68, 7
  %70 = inttoptr i64 %69 to i16*
  %71 = load atomic i16, i16* %70 monotonic, align 2
  %72 = icmp eq i16 %71, 112
  %73 = and i64 %59, -256
  %74 = zext i1 %72 to i8
  %75 = select i1 %72, i64 %59, i64 0
  %76 = select i1 %72, i64 %73, i64 0
  br label %77

77:                                               ; preds = %62, %58, %10
  %78 = phi i8 [ 1, %10 ], [ 0, %58 ], [ %74, %62 ]
  %79 = phi i64 [ %25, %10 ], [ 0, %58 ], [ %75, %62 ]
  %80 = phi i64 [ %26, %10 ], [ 0, %58 ], [ %76, %62 ]
  %81 = insertvalue { i8, i64 } undef, i8 %78, 0
  %82 = and i64 %79, 255
  %83 = or i64 %80, %82
  %84 = insertvalue { i8, i64 } %81, i64 %83, 1
  ret { i8, i64 } %84
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal14StackFrameInfo6IsEvalEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 19
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, -4294967296
  br i1 %8, label %26, label %10

10:                                               ; preds = %1
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %9, %14
  %16 = add i64 %15, 111
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %9, %19
  %21 = add i64 %20, 19
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %9, %24
  br label %72

26:                                               ; preds = %1
  %27 = add i64 %3, 7
  %28 = inttoptr i64 %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %9, %30
  %32 = add i64 %31, 11
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = zext i32 %34 to i64
  %36 = or i64 %9, %35
  %37 = add i64 %36, 15
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 acquire, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %9, %40
  %42 = add i64 %41, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %9, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = icmp eq i16 %49, 100
  br i1 %50, label %51, label %57

51:                                               ; preds = %26
  %52 = add i64 %41, 11
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %9, %55
  br label %57

57:                                               ; preds = %51, %26
  %58 = phi i64 [ %56, %51 ], [ %41, %26 ]
  %59 = and i64 %58, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %79, label %61

61:                                               ; preds = %57
  %62 = and i64 %58, -4294967296
  %63 = add i64 %58, -1
  %64 = inttoptr i64 %63 to i32*
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %62, %66
  %68 = add i64 %67, 7
  %69 = inttoptr i64 %68 to i16*
  %70 = load atomic i16, i16* %69 monotonic, align 2
  %71 = icmp eq i16 %70, 112
  br i1 %71, label %72, label %79

72:                                               ; preds = %61, %10
  %73 = phi i64 [ %25, %10 ], [ %58, %61 ]
  %74 = add i64 %73, 47
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75, align 4
  %77 = and i32 %76, 2
  %78 = icmp ne i32 %77, 0
  br label %79

79:                                               ; preds = %57, %61, %72
  %80 = phi i1 [ %78, %72 ], [ false, %61 ], [ false, %57 ]
  ret i1 %80
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal14StackFrameInfo16IsUserJavaScriptEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Script", align 8
  %3 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 19
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %74

10:                                               ; preds = %1
  %11 = and i64 %4, -4294967296
  %12 = add i64 %4, 7
  %13 = inttoptr i64 %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = or i64 %11, %15
  %17 = add i64 %16, 11
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = zext i32 %19 to i64
  %21 = or i64 %11, %20
  %22 = add i64 %21, 15
  %23 = inttoptr i64 %22 to i32*
  %24 = load atomic i32, i32* %23 acquire, align 4
  %25 = zext i32 %24 to i64
  %26 = or i64 %11, %25
  %27 = add i64 %26, -1
  %28 = inttoptr i64 %27 to i32*
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %11, %30
  %32 = add i64 %31, 7
  %33 = inttoptr i64 %32 to i16*
  %34 = load atomic i16, i16* %33 monotonic, align 2
  %35 = icmp eq i16 %34, 100
  br i1 %35, label %36, label %42

36:                                               ; preds = %10
  %37 = add i64 %26, 11
  %38 = inttoptr i64 %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %11, %40
  br label %42

42:                                               ; preds = %36, %10
  %43 = phi i64 [ %41, %36 ], [ %26, %10 ]
  %44 = and i64 %43, 1
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %70, label %46

46:                                               ; preds = %42
  %47 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %48 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %47, null
  br i1 %48, label %55, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %47, i64 0, i32 0, i32 1
  %51 = load i8, i8* %50, align 8, !range !2
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %47, i64 0, i32 1, i64 0
  br label %63

55:                                               ; preds = %49, %46
  %56 = and i64 %43, -262144
  %57 = or i64 %56, 16
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58, align 16
  %60 = add i64 %59, -41416
  %61 = inttoptr i64 %60 to %"class.v8::internal::Isolate"*
  %62 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %61, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %63

63:                                               ; preds = %55, %53
  %64 = phi i64* [ %62, %55 ], [ %54, %53 ]
  %65 = getelementptr inbounds i64, i64* %64, i64 4
  %66 = load i64, i64* %65, align 8
  %67 = trunc i64 %43 to i32
  %68 = trunc i64 %66 to i32
  %69 = icmp eq i32 %67, %68
  br i1 %69, label %74, label %70

70:                                               ; preds = %63, %42
  %71 = bitcast %"class.v8::internal::Script"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #6
  %72 = getelementptr inbounds %"class.v8::internal::Script", %"class.v8::internal::Script"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %43, i64* %72, align 8
  %73 = call zeroext i1 @_ZNK2v88internal6Script16IsUserJavaScriptEv(%"class.v8::internal::Script"* nonnull %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #6
  br label %74

74:                                               ; preds = %1, %70, %63
  %75 = phi i1 [ false, %1 ], [ %73, %70 ], [ false, %63 ]
  ret i1 %75
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal14StackFrameInfo21GetSharedFunctionInfoEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 7
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %9, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = zext i32 %12 to i64
  %14 = or i64 %4, %13
  ret i64 %14
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal14StackFrameInfo12IsMethodCallEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 19
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 2
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %59

9:                                                ; preds = %1
  %10 = and i64 %3, -4294967296
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %10, %14
  %16 = and i64 %14, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %56, label %18

18:                                               ; preds = %9
  %19 = add i64 %15, -1
  %20 = inttoptr i64 %19 to i32*
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = zext i32 %21 to i64
  %23 = or i64 %10, %22
  %24 = add i64 %23, 7
  %25 = inttoptr i64 %24 to i16*
  %26 = load atomic i16, i16* %25 monotonic, align 2
  %27 = icmp eq i16 %26, 190
  br i1 %27, label %59, label %28

28:                                               ; preds = %18
  %29 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %30 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %29, null
  br i1 %30, label %37, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %29, i64 0, i32 0, i32 1
  %33 = load i8, i8* %32, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %29, i64 0, i32 1, i64 0
  br label %45

37:                                               ; preds = %31, %28
  %38 = and i64 %15, -262144
  %39 = or i64 %38, 16
  %40 = inttoptr i64 %39 to i64*
  %41 = load i64, i64* %40, align 16
  %42 = add i64 %41, -41416
  %43 = inttoptr i64 %42 to %"class.v8::internal::Isolate"*
  %44 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %43, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %45

45:                                               ; preds = %37, %35
  %46 = phi i64* [ %44, %37 ], [ %36, %35 ]
  %47 = getelementptr inbounds i64, i64* %46, i64 6
  %48 = load i64, i64* %47, align 8
  %49 = trunc i64 %48 to i32
  %50 = icmp eq i32 %13, %49
  br i1 %50, label %59, label %51

51:                                               ; preds = %45
  %52 = getelementptr inbounds i64, i64* %46, i64 4
  %53 = load i64, i64* %52, align 8
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %13, %54
  br i1 %55, label %59, label %56

56:                                               ; preds = %9, %51
  %57 = and i32 %6, 16
  %58 = icmp eq i32 %57, 0
  br label %59

59:                                               ; preds = %1, %45, %18, %51, %56
  %60 = phi i1 [ false, %1 ], [ false, %51 ], [ %58, %56 ], [ false, %18 ], [ false, %45 ]
  ret i1 %60
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal14StackFrameInfo10IsToplevelEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = and i64 %8, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %50, label %12

12:                                               ; preds = %1
  %13 = add i64 %9, -1
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = zext i32 %15 to i64
  %17 = or i64 %4, %16
  %18 = add i64 %17, 7
  %19 = inttoptr i64 %18 to i16*
  %20 = load atomic i16, i16* %19 monotonic, align 2
  %21 = icmp eq i16 %20, 190
  br i1 %21, label %50, label %22

22:                                               ; preds = %12
  %23 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %24 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %23, null
  br i1 %24, label %31, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %23, i64 0, i32 0, i32 1
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %23, i64 0, i32 1, i64 0
  br label %39

31:                                               ; preds = %25, %22
  %32 = and i64 %9, -262144
  %33 = or i64 %32, 16
  %34 = inttoptr i64 %33 to i64*
  %35 = load i64, i64* %34, align 16
  %36 = add i64 %35, -41416
  %37 = inttoptr i64 %36 to %"class.v8::internal::Isolate"*
  %38 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %37, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %39

39:                                               ; preds = %31, %29
  %40 = phi i64* [ %38, %31 ], [ %30, %29 ]
  %41 = getelementptr inbounds i64, i64* %40, i64 6
  %42 = load i64, i64* %41, align 8
  %43 = trunc i64 %42 to i32
  %44 = icmp eq i32 %7, %43
  br i1 %44, label %50, label %45

45:                                               ; preds = %39
  %46 = getelementptr inbounds i64, i64* %40, i64 4
  %47 = load i64, i64* %46, align 8
  %48 = trunc i64 %47 to i32
  %49 = icmp eq i32 %7, %48
  br label %50

50:                                               ; preds = %1, %45, %39, %12
  %51 = phi i1 [ true, %12 ], [ true, %39 ], [ %49, %45 ], [ false, %1 ]
  ret i1 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal14StackFrameInfo13GetLineNumberENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = load i64, i64* %0, align 8
  %3 = add i64 %2, 19
  %4 = inttoptr i64 %3 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 6
  %7 = icmp eq i32 %6, 2
  br i1 %7, label %44, label %8

8:                                                ; preds = %1
  %9 = and i64 %2, -262144
  %10 = or i64 %9, 16
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11, align 16
  %13 = add i64 %12, -41416
  %14 = inttoptr i64 %13 to %"class.v8::internal::Isolate"*
  %15 = tail call i64* @_ZN2v88internal14StackFrameInfo9GetScriptEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %14, i64* %0)
  %16 = icmp eq i64* %15, null
  br i1 %16, label %44, label %17

17:                                               ; preds = %8
  %18 = load i64, i64* %0, align 8
  %19 = add i64 %18, 19
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = trunc i32 %21 to i8
  %23 = icmp sgt i8 %22, -1
  %24 = add i64 %18, 15
  %25 = inttoptr i64 %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = ashr i32 %26, 1
  br i1 %23, label %28, label %40

28:                                               ; preds = %17
  %29 = tail call i32 @_ZN2v88internal14StackFrameInfo21ComputeSourcePositionENS0_6HandleIS1_EEi(i64* %0, i32 %27) #6
  %30 = load i64, i64* %0, align 8
  %31 = shl i32 %29, 1
  %32 = add i64 %30, 15
  %33 = inttoptr i64 %32 to i32*
  store atomic volatile i32 %31, i32* %33 monotonic, align 4
  %34 = load i64, i64* %0, align 8
  %35 = add i64 %34, 19
  %36 = inttoptr i64 %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = and i32 %37, -130
  %39 = or i32 %38, 128
  store atomic volatile i32 %39, i32* %36 monotonic, align 4
  br label %40

40:                                               ; preds = %17, %28
  %41 = phi i32 [ %29, %28 ], [ %27, %17 ]
  %42 = tail call i32 @_ZN2v88internal6Script13GetLineNumberENS0_6HandleIS1_EEi(i64* nonnull %15, i32 %41) #6
  %43 = add nsw i32 %42, 1
  br label %44

44:                                               ; preds = %1, %40, %8
  %45 = phi i32 [ %43, %40 ], [ 0, %8 ], [ 1, %1 ]
  ret i32 %45
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal14StackFrameInfo9GetScriptEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = add i64 %3, 19
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, -4294967296
  br i1 %8, label %26, label %10

10:                                               ; preds = %2
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %9, %14
  %16 = add i64 %15, 111
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %9, %19
  %21 = add i64 %20, 19
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %9, %24
  br label %72

26:                                               ; preds = %2
  %27 = add i64 %3, 7
  %28 = inttoptr i64 %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %9, %30
  %32 = add i64 %31, 11
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = zext i32 %34 to i64
  %36 = or i64 %9, %35
  %37 = add i64 %36, 15
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 acquire, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %9, %40
  %42 = add i64 %41, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %9, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = icmp eq i16 %49, 100
  br i1 %50, label %51, label %57

51:                                               ; preds = %26
  %52 = add i64 %41, 11
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %9, %55
  br label %57

57:                                               ; preds = %51, %26
  %58 = phi i64 [ %56, %51 ], [ %41, %26 ]
  %59 = and i64 %58, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %92, label %61

61:                                               ; preds = %57
  %62 = and i64 %58, -4294967296
  %63 = add i64 %58, -1
  %64 = inttoptr i64 %63 to i32*
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %62, %66
  %68 = add i64 %67, 7
  %69 = inttoptr i64 %68 to i16*
  %70 = load atomic i16, i16* %69 monotonic, align 2
  %71 = icmp eq i16 %70, 112
  br i1 %71, label %72, label %92

72:                                               ; preds = %10, %61
  %73 = phi i64 [ %25, %10 ], [ %58, %61 ]
  %74 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %75 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %74, align 8
  %76 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %72
  %78 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %75, i64 %73) #6
  br label %92

79:                                               ; preds = %72
  %80 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %81 = load i64*, i64** %80, align 8
  %82 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %83 = load i64*, i64** %82, align 8
  %84 = icmp eq i64* %81, %83
  br i1 %84, label %85, label %87

85:                                               ; preds = %79
  %86 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %87

87:                                               ; preds = %85, %79
  %88 = phi i64* [ %86, %85 ], [ %81, %79 ]
  %89 = ptrtoint i64* %88 to i64
  %90 = add i64 %89, 8
  %91 = inttoptr i64 %90 to i64*
  store i64* %91, i64** %80, align 8
  store i64 %73, i64* %88, align 8
  br label %92

92:                                               ; preds = %57, %61, %87, %77
  %93 = phi i64* [ %78, %77 ], [ %88, %87 ], [ null, %61 ], [ null, %57 ]
  ret i64* %93
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal14StackFrameInfo17GetSourcePositionENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = load i64, i64* %0, align 8
  %3 = add i64 %2, 19
  %4 = inttoptr i64 %3 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = trunc i32 %5 to i8
  %7 = icmp sgt i8 %6, -1
  %8 = add i64 %2, 15
  %9 = inttoptr i64 %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = ashr i32 %10, 1
  br i1 %7, label %12, label %24

12:                                               ; preds = %1
  %13 = tail call i32 @_ZN2v88internal14StackFrameInfo21ComputeSourcePositionENS0_6HandleIS1_EEi(i64* %0, i32 %11)
  %14 = load i64, i64* %0, align 8
  %15 = shl i32 %13, 1
  %16 = add i64 %14, 15
  %17 = inttoptr i64 %16 to i32*
  store atomic volatile i32 %15, i32* %17 monotonic, align 4
  %18 = load i64, i64* %0, align 8
  %19 = add i64 %18, 19
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, -130
  %23 = or i32 %22, 128
  store atomic volatile i32 %23, i32* %20 monotonic, align 4
  br label %24

24:                                               ; preds = %1, %12
  %25 = phi i32 [ %13, %12 ], [ %11, %1 ]
  ret i32 %25
}

declare i32 @_ZN2v88internal6Script13GetLineNumberENS0_6HandleIS1_EEi(i64*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal14StackFrameInfo15GetColumnNumberENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = load i64, i64* %0, align 8
  %3 = and i64 %2, -262144
  %4 = or i64 %3, 16
  %5 = inttoptr i64 %4 to i64*
  %6 = load i64, i64* %5, align 16
  %7 = add i64 %6, -41416
  %8 = inttoptr i64 %7 to %"class.v8::internal::Isolate"*
  %9 = add i64 %2, 19
  %10 = inttoptr i64 %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = trunc i32 %11 to i8
  %13 = icmp sgt i8 %12, -1
  %14 = add i64 %2, 15
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = ashr i32 %16, 1
  br i1 %13, label %18, label %33

18:                                               ; preds = %1
  %19 = tail call i32 @_ZN2v88internal14StackFrameInfo21ComputeSourcePositionENS0_6HandleIS1_EEi(i64* %0, i32 %17) #6
  %20 = load i64, i64* %0, align 8
  %21 = shl i32 %19, 1
  %22 = add i64 %20, 15
  %23 = inttoptr i64 %22 to i32*
  store atomic volatile i32 %21, i32* %23 monotonic, align 4
  %24 = load i64, i64* %0, align 8
  %25 = add i64 %24, 19
  %26 = inttoptr i64 %25 to i32*
  %27 = load i32, i32* %26, align 4
  %28 = and i32 %27, -130
  %29 = or i32 %28, 128
  store atomic volatile i32 %29, i32* %26 monotonic, align 4
  %30 = load i64, i64* %0, align 8
  %31 = add i64 %30, 19
  %32 = inttoptr i64 %31 to i32*
  br label %33

33:                                               ; preds = %1, %18
  %34 = phi i32* [ %10, %1 ], [ %32, %18 ]
  %35 = phi i32 [ %17, %1 ], [ %19, %18 ]
  %36 = load i32, i32* %34, align 4
  %37 = and i32 %36, 6
  %38 = icmp eq i32 %37, 2
  br i1 %38, label %39, label %41

39:                                               ; preds = %33
  %40 = add nsw i32 %35, 1
  br label %47

41:                                               ; preds = %33
  %42 = tail call i64* @_ZN2v88internal14StackFrameInfo9GetScriptEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %8, i64* %0)
  %43 = icmp eq i64* %42, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %41
  %45 = tail call i32 @_ZN2v88internal6Script15GetColumnNumberENS0_6HandleIS1_EEi(i64* nonnull %42, i32 %35) #6
  %46 = add nsw i32 %45, 1
  br label %47

47:                                               ; preds = %44, %41, %39
  %48 = phi i32 [ %40, %39 ], [ %46, %44 ], [ 0, %41 ]
  ret i32 %48
}

declare i32 @_ZN2v88internal6Script15GetColumnNumberENS0_6HandleIS1_EEi(i64*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal14StackFrameInfo22GetEnclosingLineNumberENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::WasmInstanceObject", align 8
  %3 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %4 = load i64, i64* %0, align 8
  %5 = add i64 %4, 19
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 6
  %9 = icmp eq i32 %8, 2
  br i1 %9, label %75, label %10

10:                                               ; preds = %1
  %11 = and i64 %4, -262144
  %12 = or i64 %11, 16
  %13 = inttoptr i64 %12 to i64*
  %14 = load i64, i64* %13, align 16
  %15 = add i64 %14, -41416
  %16 = inttoptr i64 %15 to %"class.v8::internal::Isolate"*
  %17 = tail call i64* @_ZN2v88internal14StackFrameInfo9GetScriptEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %16, i64* %0)
  %18 = icmp eq i64* %17, null
  br i1 %18, label %75, label %19

19:                                               ; preds = %10
  %20 = load i64, i64* %0, align 8
  %21 = add i64 %20, 19
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = and i32 %23, 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %49, label %26

26:                                               ; preds = %19
  %27 = bitcast %"class.v8::internal::WasmInstanceObject"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #6
  %28 = and i64 %20, -4294967296
  %29 = add i64 %20, 3
  %30 = inttoptr i64 %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i64
  %33 = or i64 %28, %32
  %34 = getelementptr inbounds %"class.v8::internal::WasmInstanceObject", %"class.v8::internal::WasmInstanceObject"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %33, i64* %34, align 8
  %35 = call %"struct.v8::internal::wasm::WasmModule"* @_ZN2v88internal18WasmInstanceObject6moduleEv(%"class.v8::internal::WasmInstanceObject"* nonnull %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #6
  %36 = load i64, i64* %0, align 8
  %37 = add i64 %36, 7
  %38 = inttoptr i64 %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = ashr i32 %39, 1
  %41 = add i64 %36, 19
  %42 = inttoptr i64 %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = and i32 %43, 32
  %45 = icmp ne i32 %44, 0
  %46 = call i32 @_ZN2v88internal4wasm17GetSourcePositionEPKNS1_10WasmModuleEjjb(%"struct.v8::internal::wasm::WasmModule"* %35, i32 %40, i32 0, i1 zeroext %45) #6
  %47 = call i32 @_ZN2v88internal6Script13GetLineNumberENS0_6HandleIS1_EEi(i64* nonnull %17, i32 %46) #6
  %48 = add nsw i32 %47, 1
  br label %75

49:                                               ; preds = %19
  %50 = bitcast %"class.v8::internal::SharedFunctionInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50) #6
  %51 = and i64 %20, -4294967296
  %52 = add i64 %20, 7
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %51, %55
  %57 = add i64 %56, 11
  %58 = inttoptr i64 %57 to i32*
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = zext i32 %59 to i64
  %61 = or i64 %51, %60
  %62 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %61, i64* %62, align 8
  %63 = add i64 %61, 23
  %64 = inttoptr i64 %63 to i16*
  %65 = load i16, i16* %64, align 2
  %66 = icmp eq i16 %65, -1
  br i1 %66, label %71, label %67

67:                                               ; preds = %49
  %68 = zext i16 %65 to i32
  %69 = call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %3) #6
  %70 = sub nsw i32 %69, %68
  br label %71

71:                                               ; preds = %49, %67
  %72 = phi i32 [ %70, %67 ], [ -1, %49 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #6
  %73 = call i32 @_ZN2v88internal6Script13GetLineNumberENS0_6HandleIS1_EEi(i64* nonnull %17, i32 %72) #6
  %74 = add nsw i32 %73, 1
  br label %75

75:                                               ; preds = %1, %26, %71, %10
  %76 = phi i32 [ %48, %26 ], [ %74, %71 ], [ 0, %10 ], [ 1, %1 ]
  ret i32 %76
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2v88internal14StackFrameInfo15GetWasmInstanceEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  ret i64 %9
}

declare %"struct.v8::internal::wasm::WasmModule"* @_ZN2v88internal18WasmInstanceObject6moduleEv(%"class.v8::internal::WasmInstanceObject"*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal14StackFrameInfo20GetWasmFunctionIndexEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 7
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = ashr i32 %6, 1
  ret i32 %7
}

declare i32 @_ZN2v88internal4wasm17GetSourcePositionEPKNS1_10WasmModuleEjjb(%"struct.v8::internal::wasm::WasmModule"*, i32, i32, i1 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal14StackFrameInfo24GetEnclosingColumnNumberENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::WasmInstanceObject", align 8
  %3 = alloca %"class.v8::internal::WasmInstanceObject", align 8
  %4 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %5 = load i64, i64* %0, align 8
  %6 = add i64 %5, 19
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 6
  %10 = icmp eq i32 %9, 2
  br i1 %10, label %11, label %27

11:                                               ; preds = %1
  %12 = bitcast %"class.v8::internal::WasmInstanceObject"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #6
  %13 = and i64 %5, -4294967296
  %14 = add i64 %5, 3
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %13, %17
  %19 = getelementptr inbounds %"class.v8::internal::WasmInstanceObject", %"class.v8::internal::WasmInstanceObject"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %18, i64* %19, align 8
  %20 = call %"struct.v8::internal::wasm::WasmModule"* @_ZN2v88internal18WasmInstanceObject6moduleEv(%"class.v8::internal::WasmInstanceObject"* nonnull %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #6
  %21 = load i64, i64* %0, align 8
  %22 = add i64 %21, 7
  %23 = inttoptr i64 %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = ashr i32 %24, 1
  %26 = call i32 @_ZN2v88internal4wasm21GetWasmFunctionOffsetEPKNS1_10WasmModuleEj(%"struct.v8::internal::wasm::WasmModule"* %20, i32 %25) #6
  br label %92

27:                                               ; preds = %1
  %28 = and i64 %5, -262144
  %29 = or i64 %28, 16
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30, align 16
  %32 = add i64 %31, -41416
  %33 = inttoptr i64 %32 to %"class.v8::internal::Isolate"*
  %34 = tail call i64* @_ZN2v88internal14StackFrameInfo9GetScriptEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %33, i64* %0)
  %35 = icmp eq i64* %34, null
  br i1 %35, label %92, label %36

36:                                               ; preds = %27
  %37 = load i64, i64* %0, align 8
  %38 = add i64 %37, 19
  %39 = inttoptr i64 %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = and i32 %40, 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %66, label %43

43:                                               ; preds = %36
  %44 = bitcast %"class.v8::internal::WasmInstanceObject"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #6
  %45 = and i64 %37, -4294967296
  %46 = add i64 %37, 3
  %47 = inttoptr i64 %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = or i64 %45, %49
  %51 = getelementptr inbounds %"class.v8::internal::WasmInstanceObject", %"class.v8::internal::WasmInstanceObject"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %50, i64* %51, align 8
  %52 = call %"struct.v8::internal::wasm::WasmModule"* @_ZN2v88internal18WasmInstanceObject6moduleEv(%"class.v8::internal::WasmInstanceObject"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #6
  %53 = load i64, i64* %0, align 8
  %54 = add i64 %53, 7
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = ashr i32 %56, 1
  %58 = add i64 %53, 19
  %59 = inttoptr i64 %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = and i32 %60, 32
  %62 = icmp ne i32 %61, 0
  %63 = call i32 @_ZN2v88internal4wasm17GetSourcePositionEPKNS1_10WasmModuleEjjb(%"struct.v8::internal::wasm::WasmModule"* %52, i32 %57, i32 0, i1 zeroext %62) #6
  %64 = call i32 @_ZN2v88internal6Script15GetColumnNumberENS0_6HandleIS1_EEi(i64* nonnull %34, i32 %63) #6
  %65 = add nsw i32 %64, 1
  br label %92

66:                                               ; preds = %36
  %67 = bitcast %"class.v8::internal::SharedFunctionInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %67) #6
  %68 = and i64 %37, -4294967296
  %69 = add i64 %37, 7
  %70 = inttoptr i64 %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = zext i32 %71 to i64
  %73 = or i64 %68, %72
  %74 = add i64 %73, 11
  %75 = inttoptr i64 %74 to i32*
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = zext i32 %76 to i64
  %78 = or i64 %68, %77
  %79 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %78, i64* %79, align 8
  %80 = add i64 %78, 23
  %81 = inttoptr i64 %80 to i16*
  %82 = load i16, i16* %81, align 2
  %83 = icmp eq i16 %82, -1
  br i1 %83, label %88, label %84

84:                                               ; preds = %66
  %85 = zext i16 %82 to i32
  %86 = call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %4) #6
  %87 = sub nsw i32 %86, %85
  br label %88

88:                                               ; preds = %66, %84
  %89 = phi i32 [ %87, %84 ], [ -1, %66 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %67) #6
  %90 = call i32 @_ZN2v88internal6Script15GetColumnNumberENS0_6HandleIS1_EEi(i64* nonnull %34, i32 %89) #6
  %91 = add nsw i32 %90, 1
  br label %92

92:                                               ; preds = %43, %88, %27, %11
  %93 = phi i32 [ %26, %11 ], [ %65, %43 ], [ %91, %88 ], [ 0, %27 ]
  ret i32 %93
}

declare i32 @_ZN2v88internal4wasm21GetWasmFunctionOffsetEPKNS1_10WasmModuleEj(%"struct.v8::internal::wasm::WasmModule"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal14StackFrameInfo11GetScriptIdEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 19
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, -4294967296
  br i1 %8, label %26, label %10

10:                                               ; preds = %1
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %9, %14
  %16 = add i64 %15, 111
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %9, %19
  %21 = add i64 %20, 19
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %9, %24
  br label %72

26:                                               ; preds = %1
  %27 = add i64 %3, 7
  %28 = inttoptr i64 %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %9, %30
  %32 = add i64 %31, 11
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = zext i32 %34 to i64
  %36 = or i64 %9, %35
  %37 = add i64 %36, 15
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 acquire, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %9, %40
  %42 = add i64 %41, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %9, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = icmp eq i16 %49, 100
  br i1 %50, label %51, label %57

51:                                               ; preds = %26
  %52 = add i64 %41, 11
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %9, %55
  br label %57

57:                                               ; preds = %51, %26
  %58 = phi i64 [ %56, %51 ], [ %41, %26 ]
  %59 = and i64 %58, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %78, label %61

61:                                               ; preds = %57
  %62 = and i64 %58, -4294967296
  %63 = add i64 %58, -1
  %64 = inttoptr i64 %63 to i32*
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %62, %66
  %68 = add i64 %67, 7
  %69 = inttoptr i64 %68 to i16*
  %70 = load atomic i16, i16* %69 monotonic, align 2
  %71 = icmp eq i16 %70, 112
  br i1 %71, label %72, label %78

72:                                               ; preds = %61, %10
  %73 = phi i64 [ %25, %10 ], [ %58, %61 ]
  %74 = add i64 %73, 31
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75, align 4
  %77 = ashr i32 %76, 1
  br label %78

78:                                               ; preds = %57, %61, %72
  %79 = phi i32 [ %77, %72 ], [ 0, %61 ], [ 0, %57 ]
  ret i32 %79
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal14StackFrameInfo13GetScriptNameEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 19
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, -4294967296
  br i1 %8, label %26, label %10

10:                                               ; preds = %1
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %9, %14
  %16 = add i64 %15, 111
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %9, %19
  %21 = add i64 %20, 19
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %9, %24
  br label %72

26:                                               ; preds = %1
  %27 = add i64 %3, 7
  %28 = inttoptr i64 %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %9, %30
  %32 = add i64 %31, 11
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = zext i32 %34 to i64
  %36 = or i64 %9, %35
  %37 = add i64 %36, 15
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 acquire, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %9, %40
  %42 = add i64 %41, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %9, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = icmp eq i16 %49, 100
  br i1 %50, label %51, label %57

51:                                               ; preds = %26
  %52 = add i64 %41, 11
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %9, %55
  br label %57

57:                                               ; preds = %51, %26
  %58 = phi i64 [ %56, %51 ], [ %41, %26 ]
  %59 = and i64 %58, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %80, label %61

61:                                               ; preds = %57
  %62 = and i64 %58, -4294967296
  %63 = add i64 %58, -1
  %64 = inttoptr i64 %63 to i32*
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %62, %66
  %68 = add i64 %67, 7
  %69 = inttoptr i64 %68 to i16*
  %70 = load atomic i16, i16* %69 monotonic, align 2
  %71 = icmp eq i16 %70, 112
  br i1 %71, label %72, label %80

72:                                               ; preds = %61, %10
  %73 = phi i64 [ %25, %10 ], [ %58, %61 ]
  %74 = and i64 %73, -4294967296
  %75 = add i64 %73, 7
  %76 = inttoptr i64 %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = zext i32 %77 to i64
  %79 = or i64 %74, %78
  br label %90

80:                                               ; preds = %57, %61
  %81 = load i64, i64* %2, align 8
  %82 = and i64 %81, -262144
  %83 = or i64 %82, 16
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84, align 16
  %86 = add i64 %85, -41416
  %87 = inttoptr i64 %86 to %"class.v8::internal::Isolate"*
  %88 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %87, i64 0, i32 0, i32 7, i32 0, i64 6
  %89 = load i64, i64* %88, align 8
  br label %90

90:                                               ; preds = %72, %80
  %91 = phi i64 [ %89, %80 ], [ %79, %72 ]
  ret i64 %91
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal14StackFrameInfo24GetScriptNameOrSourceURLEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::base::Optional", align 8
  %3 = getelementptr inbounds %"class.v8::base::Optional", %"class.v8::base::Optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #6
  %4 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 19
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = and i64 %5, -4294967296
  br i1 %10, label %29, label %12

12:                                               ; preds = %1
  %13 = add i64 %5, 3
  %14 = inttoptr i64 %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = or i64 %11, %16
  %18 = add i64 %17, 111
  %19 = inttoptr i64 %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = or i64 %11, %21
  %23 = add i64 %22, 19
  %24 = inttoptr i64 %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %11, %26
  store i8 1, i8* %3, align 8
  %28 = getelementptr inbounds %"class.v8::base::Optional", %"class.v8::base::Optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %27, i64* %28, align 8
  br label %80

29:                                               ; preds = %1
  %30 = add i64 %5, 7
  %31 = inttoptr i64 %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = zext i32 %32 to i64
  %34 = or i64 %11, %33
  %35 = add i64 %34, 11
  %36 = inttoptr i64 %35 to i32*
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = zext i32 %37 to i64
  %39 = or i64 %11, %38
  %40 = add i64 %39, 15
  %41 = inttoptr i64 %40 to i32*
  %42 = load atomic i32, i32* %41 acquire, align 4
  %43 = zext i32 %42 to i64
  %44 = or i64 %11, %43
  %45 = add i64 %44, -1
  %46 = inttoptr i64 %45 to i32*
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = zext i32 %47 to i64
  %49 = or i64 %11, %48
  %50 = add i64 %49, 7
  %51 = inttoptr i64 %50 to i16*
  %52 = load atomic i16, i16* %51 monotonic, align 2
  %53 = icmp eq i16 %52, 100
  br i1 %53, label %54, label %60

54:                                               ; preds = %29
  %55 = add i64 %44, 11
  %56 = inttoptr i64 %55 to i32*
  %57 = load i32, i32* %56, align 4
  %58 = zext i32 %57 to i64
  %59 = or i64 %11, %58
  br label %60

60:                                               ; preds = %54, %29
  %61 = phi i64 [ %59, %54 ], [ %44, %29 ]
  %62 = and i64 %61, 1
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %60
  store i8 0, i8* %3, align 8
  %65 = getelementptr inbounds %"class.v8::base::Optional", %"class.v8::base::Optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %65, align 8
  br label %83

66:                                               ; preds = %60
  %67 = and i64 %61, -4294967296
  %68 = add i64 %61, -1
  %69 = inttoptr i64 %68 to i32*
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = zext i32 %70 to i64
  %72 = or i64 %67, %71
  %73 = add i64 %72, 7
  %74 = inttoptr i64 %73 to i16*
  %75 = load atomic i16, i16* %74 monotonic, align 2
  %76 = icmp eq i16 %75, 112
  %77 = zext i1 %76 to i8
  %78 = select i1 %76, i64 %61, i64 0
  store i8 %77, i8* %3, align 8
  %79 = getelementptr inbounds %"class.v8::base::Optional", %"class.v8::base::Optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %78, i64* %79, align 8
  br i1 %76, label %80, label %83

80:                                               ; preds = %66, %12
  %81 = getelementptr inbounds %"class.v8::base::Optional", %"class.v8::base::Optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %82 = call i64 @_ZN2v88internal6Script18GetNameOrSourceURLEv(%"class.v8::internal::Script"* %81) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #6
  br label %93

83:                                               ; preds = %66, %64
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #6
  %84 = load i64, i64* %4, align 8
  %85 = and i64 %84, -262144
  %86 = or i64 %85, 16
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87, align 16
  %89 = add i64 %88, -41416
  %90 = inttoptr i64 %89 to %"class.v8::internal::Isolate"*
  %91 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %90, i64 0, i32 0, i32 7, i32 0, i64 6
  %92 = load i64, i64* %91, align 8
  br label %93

93:                                               ; preds = %80, %83
  %94 = phi i64 [ %92, %83 ], [ %82, %80 ]
  ret i64 %94
}

declare i64 @_ZN2v88internal6Script18GetNameOrSourceURLEv(%"class.v8::internal::Script"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal14StackFrameInfo15GetScriptSourceEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 19
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, -4294967296
  br i1 %8, label %26, label %10

10:                                               ; preds = %1
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %9, %14
  %16 = add i64 %15, 111
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %9, %19
  %21 = add i64 %20, 19
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %9, %24
  br label %72

26:                                               ; preds = %1
  %27 = add i64 %3, 7
  %28 = inttoptr i64 %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %9, %30
  %32 = add i64 %31, 11
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = zext i32 %34 to i64
  %36 = or i64 %9, %35
  %37 = add i64 %36, 15
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 acquire, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %9, %40
  %42 = add i64 %41, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %9, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = icmp eq i16 %49, 100
  br i1 %50, label %51, label %57

51:                                               ; preds = %26
  %52 = add i64 %41, 11
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %9, %55
  br label %57

57:                                               ; preds = %51, %26
  %58 = phi i64 [ %56, %51 ], [ %41, %26 ]
  %59 = and i64 %58, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %133, label %61

61:                                               ; preds = %57
  %62 = and i64 %58, -4294967296
  %63 = add i64 %58, -1
  %64 = inttoptr i64 %63 to i32*
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %62, %66
  %68 = add i64 %67, 7
  %69 = inttoptr i64 %68 to i16*
  %70 = load atomic i16, i16* %69 monotonic, align 2
  %71 = icmp eq i16 %70, 112
  br i1 %71, label %72, label %133

72:                                               ; preds = %10, %61
  %73 = phi i64 [ %25, %10 ], [ %58, %61 ]
  %74 = and i64 %73, -4294967296
  %75 = add i64 %73, 3
  %76 = inttoptr i64 %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = zext i32 %77 to i64
  %79 = or i64 %74, %78
  %80 = and i64 %78, 1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %129, label %82

82:                                               ; preds = %72
  %83 = add i64 %79, -1
  %84 = inttoptr i64 %83 to i32*
  %85 = load atomic i32, i32* %84 monotonic, align 4
  %86 = zext i32 %85 to i64
  %87 = or i64 %74, %86
  %88 = add i64 %87, 7
  %89 = inttoptr i64 %88 to i16*
  %90 = load atomic i16, i16* %89 monotonic, align 2
  %91 = icmp ult i16 %90, 64
  br i1 %91, label %92, label %129

92:                                               ; preds = %82
  %93 = load atomic i32, i32* %84 acquire, align 4
  %94 = zext i32 %93 to i64
  %95 = or i64 %74, %94
  %96 = add i64 %95, 7
  %97 = inttoptr i64 %96 to i16*
  %98 = load atomic i16, i16* %97 monotonic, align 2
  %99 = and i16 %98, 7
  %100 = icmp eq i16 %99, 2
  br i1 %100, label %101, label %129

101:                                              ; preds = %92
  %102 = load atomic i32, i32* %84 monotonic, align 4
  %103 = zext i32 %102 to i64
  %104 = or i64 %74, %103
  %105 = add i64 %104, 7
  %106 = inttoptr i64 %105 to i16*
  %107 = load atomic i16, i16* %106 monotonic, align 2
  %108 = and i16 %107, 8
  %109 = icmp eq i16 %108, 0
  br i1 %109, label %115, label %110

110:                                              ; preds = %101
  %111 = add i64 %79, 11
  %112 = inttoptr i64 %111 to %"class.v8::String::ExternalOneByteStringResource"**
  %113 = load %"class.v8::String::ExternalOneByteStringResource"*, %"class.v8::String::ExternalOneByteStringResource"** %112, align 1
  %114 = icmp eq %"class.v8::String::ExternalOneByteStringResource"* %113, null
  br i1 %114, label %133, label %129

115:                                              ; preds = %101
  %116 = load atomic i32, i32* %84 monotonic, align 4
  %117 = zext i32 %116 to i64
  %118 = or i64 %74, %117
  %119 = add i64 %118, 7
  %120 = inttoptr i64 %119 to i16*
  %121 = load atomic i16, i16* %120 monotonic, align 2
  %122 = and i16 %121, 8
  %123 = icmp eq i16 %122, 0
  br i1 %123, label %124, label %129

124:                                              ; preds = %115
  %125 = add i64 %79, 11
  %126 = inttoptr i64 %125 to %"class.v8::String::ExternalStringResource"**
  %127 = load %"class.v8::String::ExternalStringResource"*, %"class.v8::String::ExternalStringResource"** %126, align 1
  %128 = icmp eq %"class.v8::String::ExternalStringResource"* %127, null
  br i1 %128, label %133, label %129

129:                                              ; preds = %124, %110, %72, %115, %92, %82
  %130 = load i32, i32* %76, align 4
  %131 = zext i32 %130 to i64
  %132 = or i64 %74, %131
  br label %143

133:                                              ; preds = %124, %110, %57, %61
  %134 = load i64, i64* %2, align 8
  %135 = and i64 %134, -262144
  %136 = or i64 %135, 16
  %137 = inttoptr i64 %136 to i64*
  %138 = load i64, i64* %137, align 16
  %139 = add i64 %138, -41416
  %140 = inttoptr i64 %139 to %"class.v8::internal::Isolate"*
  %141 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %140, i64 0, i32 0, i32 7, i32 0, i64 6
  %142 = load i64, i64* %141, align 8
  br label %143

143:                                              ; preds = %129, %133
  %144 = phi i64 [ %142, %133 ], [ %132, %129 ]
  ret i64 %144
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal14StackFrameInfo25GetScriptSourceMappingURLEv(%"class.v8::internal::StackFrameInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StackFrameInfo", %"class.v8::internal::StackFrameInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 19
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, -4294967296
  br i1 %8, label %26, label %10

10:                                               ; preds = %1
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %9, %14
  %16 = add i64 %15, 111
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %9, %19
  %21 = add i64 %20, 19
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %9, %24
  br label %72

26:                                               ; preds = %1
  %27 = add i64 %3, 7
  %28 = inttoptr i64 %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %9, %30
  %32 = add i64 %31, 11
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = zext i32 %34 to i64
  %36 = or i64 %9, %35
  %37 = add i64 %36, 15
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 acquire, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %9, %40
  %42 = add i64 %41, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %9, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = icmp eq i16 %49, 100
  br i1 %50, label %51, label %57

51:                                               ; preds = %26
  %52 = add i64 %41, 11
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %9, %55
  br label %57

57:                                               ; preds = %51, %26
  %58 = phi i64 [ %56, %51 ], [ %41, %26 ]
  %59 = and i64 %58, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %80, label %61

61:                                               ; preds = %57
  %62 = and i64 %58, -4294967296
  %63 = add i64 %58, -1
  %64 = inttoptr i64 %63 to i32*
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %62, %66
  %68 = add i64 %67, 7
  %69 = inttoptr i64 %68 to i16*
  %70 = load atomic i16, i16* %69 monotonic, align 2
  %71 = icmp eq i16 %70, 112
  br i1 %71, label %72, label %80

72:                                               ; preds = %61, %10
  %73 = phi i64 [ %25, %10 ], [ %58, %61 ]
  %74 = and i64 %73, -4294967296
  %75 = add i64 %73, 55
  %76 = inttoptr i64 %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = zext i32 %77 to i64
  %79 = or i64 %74, %78
  br label %90

80:                                               ; preds = %57, %61
  %81 = load i64, i64* %2, align 8
  %82 = and i64 %81, -262144
  %83 = or i64 %82, 16
  %84 = inttoptr i64 %83 to i64*
  %85 = load i64, i64* %84, align 16
  %86 = add i64 %85, -41416
  %87 = inttoptr i64 %86 to %"class.v8::internal::Isolate"*
  %88 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %87, i64 0, i32 0, i32 7, i32 0, i64 6
  %89 = load i64, i64* %88, align 8
  br label %90

90:                                               ; preds = %72, %80
  %91 = phi i64 [ %89, %80 ], [ %79, %72 ]
  ret i64 %91
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal14StackFrameInfo13GetEvalOriginENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = load i64, i64* %0, align 8
  %3 = and i64 %2, -262144
  %4 = or i64 %3, 16
  %5 = inttoptr i64 %4 to i64*
  %6 = load i64, i64* %5, align 16
  %7 = add i64 %6, -41416
  %8 = inttoptr i64 %7 to %"class.v8::internal::Isolate"*
  %9 = tail call i64* @_ZN2v88internal14StackFrameInfo9GetScriptEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %8, i64* %0)
  %10 = icmp eq i64* %9, null
  br i1 %10, label %18, label %11

11:                                               ; preds = %1
  %12 = load i64, i64* %9, align 8
  %13 = add i64 %12, 47
  %14 = inttoptr i64 %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %22

18:                                               ; preds = %11, %1
  %19 = inttoptr i64 %7 to %"class.v8::internal::Factory"*
  %20 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %19, i64 160
  %21 = bitcast %"class.v8::internal::Factory"* %20 to i64*
  br label %26

22:                                               ; preds = %11
  %23 = tail call fastcc i64* @_ZN2v88internal12_GLOBAL__N_116FormatEvalOriginEPNS0_7IsolateENS0_6HandleINS0_6ScriptEEE(%"class.v8::internal::Isolate"* %8, i64* nonnull %9)
  %24 = icmp eq i64* %23, null
  br i1 %24, label %25, label %26, !prof !3

25:                                               ; preds = %22
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29, i64 0, i64 0)) #9
  unreachable

26:                                               ; preds = %22, %18
  %27 = phi i64* [ %21, %18 ], [ %23, %22 ]
  ret i64* %27
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64* @_ZN2v88internal12_GLOBAL__N_116FormatEvalOriginEPNS0_7IsolateENS0_6HandleINS0_6ScriptEEE(%"class.v8::internal::Isolate"*, i64*) unnamed_addr #0 {
  %3 = alloca [100 x i8], align 16
  %4 = alloca %"class.v8::internal::Handle<v8::internal::Script>::ObjectRef", align 8
  %5 = alloca %"class.v8::internal::IncrementalStringBuilder", align 8
  %6 = alloca %"struct.v8::internal::Script::PositionInfo", align 4
  %7 = bitcast %"class.v8::internal::Handle<v8::internal::Script>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #6
  %8 = load i64, i64* %1, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Script>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Script>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Script>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Script>::ObjectRef"* %4, i64 0, i32 0
  %11 = call i64 @_ZN2v88internal6Script18GetNameOrSourceURLEv(%"class.v8::internal::Script"* nonnull %10) #6
  %12 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %13 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %12, align 8
  %14 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %2
  %16 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %13, i64 %11) #6
  br label %30

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %21 = load i64*, i64** %20, align 8
  %22 = icmp eq i64* %19, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %17
  %24 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %25

25:                                               ; preds = %23, %17
  %26 = phi i64* [ %24, %23 ], [ %19, %17 ]
  %27 = ptrtoint i64* %26 to i64
  %28 = add i64 %27, 8
  %29 = inttoptr i64 %28 to i64*
  store i64* %29, i64** %18, align 8
  store i64 %11, i64* %26, align 8
  br label %30

30:                                               ; preds = %15, %25
  %31 = phi i64* [ %16, %15 ], [ %26, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #6
  %32 = load i64, i64* %31, align 8
  %33 = and i64 %32, 1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %48, label %35

35:                                               ; preds = %30
  %36 = and i64 %32, -4294967296
  %37 = add i64 %32, -1
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %36, %40
  %42 = add i64 %41, 7
  %43 = inttoptr i64 %42 to i16*
  %44 = load atomic i16, i16* %43 monotonic, align 2
  %45 = icmp ult i16 %44, 64
  br i1 %45, label %46, label %48

46:                                               ; preds = %35
  %47 = ptrtoint i64* %31 to i64
  br label %697

48:                                               ; preds = %30, %35
  %49 = bitcast %"class.v8::internal::IncrementalStringBuilder"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %49) #6
  call void @_ZN2v88internal24IncrementalStringBuilderC1EPNS0_7IsolateE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5, %"class.v8::internal::Isolate"* %0) #6
  %50 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %5, i64 0, i32 1
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %5, i64 0, i32 6, i32 0, i32 0
  %54 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %5, i64 0, i32 4
  %55 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %5, i64 0, i32 3
  %56 = load i64*, i64** %53, align 8
  %57 = load i64, i64* %56, align 8
  %58 = load i32, i32* %54, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %54, align 4
  br i1 %52, label %69, label %60

60:                                               ; preds = %48
  %61 = shl nsw i32 %58, 1
  %62 = sext i32 %61 to i64
  %63 = add i64 %57, 11
  %64 = add i64 %63, %62
  %65 = inttoptr i64 %64 to i16*
  store i16 101, i16* %65, align 2
  %66 = load i32, i32* %54, align 4
  %67 = load i32, i32* %55, align 8
  %68 = icmp eq i32 %66, %67
  br i1 %68, label %91, label %93

69:                                               ; preds = %48
  %70 = sext i32 %58 to i64
  %71 = add i64 %57, 11
  %72 = add i64 %71, %70
  %73 = inttoptr i64 %72 to i8*
  store i8 101, i8* %73, align 1
  %74 = load i32, i32* %54, align 4
  %75 = load i32, i32* %55, align 8
  %76 = icmp eq i32 %74, %75
  br i1 %76, label %77, label %79

77:                                               ; preds = %69
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %78 = load i32, i32* %54, align 4
  br label %79

79:                                               ; preds = %77, %69
  %80 = phi i32 [ %78, %77 ], [ %74, %69 ]
  %81 = load i64*, i64** %53, align 8
  %82 = load i64, i64* %81, align 8
  %83 = add nsw i32 %80, 1
  store i32 %83, i32* %54, align 4
  %84 = sext i32 %80 to i64
  %85 = add i64 %82, 11
  %86 = add i64 %85, %84
  %87 = inttoptr i64 %86 to i8*
  store i8 118, i8* %87, align 1
  %88 = load i32, i32* %54, align 4
  %89 = load i32, i32* %55, align 8
  %90 = icmp eq i32 %88, %89
  br i1 %90, label %1578, label %1580

91:                                               ; preds = %60
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %92 = load i32, i32* %54, align 4
  br label %93

93:                                               ; preds = %91, %60
  %94 = phi i32 [ %92, %91 ], [ %66, %60 ]
  %95 = load i64*, i64** %53, align 8
  %96 = load i64, i64* %95, align 8
  %97 = add nsw i32 %94, 1
  store i32 %97, i32* %54, align 4
  %98 = shl nsw i32 %94, 1
  %99 = sext i32 %98 to i64
  %100 = add i64 %96, 11
  %101 = add i64 %100, %99
  %102 = inttoptr i64 %101 to i16*
  store i16 118, i16* %102, align 2
  %103 = load i32, i32* %54, align 4
  %104 = load i32, i32* %55, align 8
  %105 = icmp eq i32 %103, %104
  br i1 %105, label %1663, label %1665

106:                                              ; preds = %1740, %1753, %1650, %1662
  %107 = load i64, i64* %1, align 8
  %108 = and i64 %107, -4294967296
  %109 = add i64 %107, 35
  %110 = inttoptr i64 %109 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = zext i32 %111 to i64
  %113 = and i64 %112, 1
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %636, label %115

115:                                              ; preds = %106
  %116 = or i64 %108, %112
  %117 = add i64 %116, -1
  %118 = inttoptr i64 %117 to i32*
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = zext i32 %119 to i64
  %121 = or i64 %108, %120
  %122 = add i64 %121, 7
  %123 = inttoptr i64 %122 to i16*
  %124 = load atomic i16, i16* %123 monotonic, align 2
  %125 = icmp eq i16 %124, 179
  br i1 %125, label %126, label %636

126:                                              ; preds = %115
  %127 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %12, align 8
  %128 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %127, null
  br i1 %128, label %131, label %129

129:                                              ; preds = %126
  %130 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %127, i64 %116) #6
  br label %144

131:                                              ; preds = %126
  %132 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %133 = load i64*, i64** %132, align 8
  %134 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %135 = load i64*, i64** %134, align 8
  %136 = icmp eq i64* %133, %135
  br i1 %136, label %137, label %139

137:                                              ; preds = %131
  %138 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %139

139:                                              ; preds = %137, %131
  %140 = phi i64* [ %138, %137 ], [ %133, %131 ]
  %141 = ptrtoint i64* %140 to i64
  %142 = add i64 %141, 8
  %143 = inttoptr i64 %142 to i64*
  store i64* %143, i64** %132, align 8
  store i64 %116, i64* %140, align 8
  br label %144

144:                                              ; preds = %129, %139
  %145 = phi i64* [ %130, %129 ], [ %140, %139 ]
  %146 = call i64* @_ZN2v88internal18SharedFunctionInfo9DebugNameENS0_6HandleIS1_EE(i64* %145) #6
  %147 = load i64, i64* %146, align 8
  %148 = add i64 %147, 7
  %149 = inttoptr i64 %148 to i32*
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %153, label %152

152:                                              ; preds = %144
  call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5, i64* %146) #6
  br label %206

153:                                              ; preds = %144
  %154 = load i32, i32* %50, align 8
  %155 = icmp eq i32 %154, 0
  %156 = load i64*, i64** %53, align 8
  %157 = load i64, i64* %156, align 8
  %158 = load i32, i32* %54, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %54, align 4
  br i1 %155, label %169, label %160

160:                                              ; preds = %153
  %161 = shl nsw i32 %158, 1
  %162 = sext i32 %161 to i64
  %163 = add i64 %157, 11
  %164 = add i64 %163, %162
  %165 = inttoptr i64 %164 to i16*
  store i16 60, i16* %165, align 2
  %166 = load i32, i32* %54, align 4
  %167 = load i32, i32* %55, align 8
  %168 = icmp eq i32 %166, %167
  br i1 %168, label %191, label %193

169:                                              ; preds = %153
  %170 = sext i32 %158 to i64
  %171 = add i64 %157, 11
  %172 = add i64 %171, %170
  %173 = inttoptr i64 %172 to i8*
  store i8 60, i8* %173, align 1
  %174 = load i32, i32* %54, align 4
  %175 = load i32, i32* %55, align 8
  %176 = icmp eq i32 %174, %175
  br i1 %176, label %177, label %179

177:                                              ; preds = %169
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %178 = load i32, i32* %54, align 4
  br label %179

179:                                              ; preds = %177, %169
  %180 = phi i32 [ %178, %177 ], [ %174, %169 ]
  %181 = load i64*, i64** %53, align 8
  %182 = load i64, i64* %181, align 8
  %183 = add nsw i32 %180, 1
  store i32 %183, i32* %54, align 4
  %184 = sext i32 %180 to i64
  %185 = add i64 %182, 11
  %186 = add i64 %185, %184
  %187 = inttoptr i64 %186 to i8*
  store i8 97, i8* %187, align 1
  %188 = load i32, i32* %54, align 4
  %189 = load i32, i32* %55, align 8
  %190 = icmp eq i32 %188, %189
  br i1 %190, label %1315, label %1317

191:                                              ; preds = %160
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %192 = load i32, i32* %54, align 4
  br label %193

193:                                              ; preds = %191, %160
  %194 = phi i32 [ %192, %191 ], [ %166, %160 ]
  %195 = load i64*, i64** %53, align 8
  %196 = load i64, i64* %195, align 8
  %197 = add nsw i32 %194, 1
  store i32 %197, i32* %54, align 4
  %198 = shl nsw i32 %194, 1
  %199 = sext i32 %198 to i64
  %200 = add i64 %196, 11
  %201 = add i64 %200, %199
  %202 = inttoptr i64 %201 to i16*
  store i16 97, i16* %202, align 2
  %203 = load i32, i32* %54, align 4
  %204 = load i32, i32* %55, align 8
  %205 = icmp eq i32 %203, %204
  br i1 %205, label %1442, label %1444

206:                                              ; preds = %1564, %1577, %1429, %1441, %152
  %207 = load i64, i64* %145, align 8
  %208 = and i64 %207, -4294967296
  %209 = add i64 %207, 15
  %210 = inttoptr i64 %209 to i32*
  %211 = load atomic i32, i32* %210 acquire, align 4
  %212 = zext i32 %211 to i64
  %213 = or i64 %208, %212
  %214 = add i64 %213, -1
  %215 = inttoptr i64 %214 to i32*
  %216 = load atomic i32, i32* %215 monotonic, align 4
  %217 = zext i32 %216 to i64
  %218 = or i64 %208, %217
  %219 = add i64 %218, 7
  %220 = inttoptr i64 %219 to i16*
  %221 = load atomic i16, i16* %220 monotonic, align 2
  %222 = icmp eq i16 %221, 100
  br i1 %222, label %223, label %231

223:                                              ; preds = %206
  %224 = add i64 %213, 11
  %225 = inttoptr i64 %224 to i32*
  %226 = load i32, i32* %225, align 4
  %227 = zext i32 %226 to i64
  %228 = or i64 %208, %227
  %229 = add i64 %228, -1
  %230 = inttoptr i64 %229 to i32*
  br label %231

231:                                              ; preds = %206, %223
  %232 = phi i32* [ %215, %206 ], [ %230, %223 ]
  %233 = phi i64 [ %213, %206 ], [ %228, %223 ]
  %234 = and i64 %233, -4294967296
  %235 = load atomic i32, i32* %232 monotonic, align 4
  %236 = zext i32 %235 to i64
  %237 = or i64 %234, %236
  %238 = add i64 %237, 7
  %239 = inttoptr i64 %238 to i16*
  %240 = load atomic i16, i16* %239 monotonic, align 2
  %241 = icmp eq i16 %240, 112
  br i1 %241, label %242, label %689

242:                                              ; preds = %231
  %243 = load i64, i64* %145, align 8
  %244 = and i64 %243, -4294967296
  %245 = add i64 %243, 15
  %246 = inttoptr i64 %245 to i32*
  %247 = load atomic i32, i32* %246 acquire, align 4
  %248 = zext i32 %247 to i64
  %249 = or i64 %244, %248
  %250 = add i64 %249, -1
  %251 = inttoptr i64 %250 to i32*
  %252 = load atomic i32, i32* %251 monotonic, align 4
  %253 = zext i32 %252 to i64
  %254 = or i64 %244, %253
  %255 = add i64 %254, 7
  %256 = inttoptr i64 %255 to i16*
  %257 = load atomic i16, i16* %256 monotonic, align 2
  %258 = icmp eq i16 %257, 100
  br i1 %258, label %259, label %265

259:                                              ; preds = %242
  %260 = add i64 %249, 11
  %261 = inttoptr i64 %260 to i32*
  %262 = load i32, i32* %261, align 4
  %263 = zext i32 %262 to i64
  %264 = or i64 %244, %263
  br label %265

265:                                              ; preds = %242, %259
  %266 = phi i64 [ %264, %259 ], [ %249, %242 ]
  %267 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %12, align 8
  %268 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %267, null
  br i1 %268, label %271, label %269

269:                                              ; preds = %265
  %270 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %267, i64 %266) #6
  br label %284

271:                                              ; preds = %265
  %272 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %273 = load i64*, i64** %272, align 8
  %274 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %275 = load i64*, i64** %274, align 8
  %276 = icmp eq i64* %273, %275
  br i1 %276, label %277, label %279

277:                                              ; preds = %271
  %278 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %279

279:                                              ; preds = %277, %271
  %280 = phi i64* [ %278, %277 ], [ %273, %271 ]
  %281 = ptrtoint i64* %280 to i64
  %282 = add i64 %281, 8
  %283 = inttoptr i64 %282 to i64*
  store i64* %283, i64** %272, align 8
  store i64 %266, i64* %280, align 8
  br label %284

284:                                              ; preds = %269, %279
  %285 = phi i64* [ %270, %269 ], [ %280, %279 ]
  %286 = load i32, i32* %50, align 8
  %287 = icmp eq i32 %286, 0
  %288 = load i64*, i64** %53, align 8
  %289 = load i64, i64* %288, align 8
  %290 = load i32, i32* %54, align 4
  %291 = add nsw i32 %290, 1
  store i32 %291, i32* %54, align 4
  br i1 %287, label %301, label %292

292:                                              ; preds = %284
  %293 = shl nsw i32 %290, 1
  %294 = sext i32 %293 to i64
  %295 = add i64 %289, 11
  %296 = add i64 %295, %294
  %297 = inttoptr i64 %296 to i16*
  store i16 32, i16* %297, align 2
  %298 = load i32, i32* %54, align 4
  %299 = load i32, i32* %55, align 8
  %300 = icmp eq i32 %298, %299
  br i1 %300, label %323, label %325

301:                                              ; preds = %284
  %302 = sext i32 %290 to i64
  %303 = add i64 %289, 11
  %304 = add i64 %303, %302
  %305 = inttoptr i64 %304 to i8*
  store i8 32, i8* %305, align 1
  %306 = load i32, i32* %54, align 4
  %307 = load i32, i32* %55, align 8
  %308 = icmp eq i32 %306, %307
  br i1 %308, label %309, label %311

309:                                              ; preds = %301
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %310 = load i32, i32* %54, align 4
  br label %311

311:                                              ; preds = %309, %301
  %312 = phi i32 [ %310, %309 ], [ %306, %301 ]
  %313 = load i64*, i64** %53, align 8
  %314 = load i64, i64* %313, align 8
  %315 = add nsw i32 %312, 1
  store i32 %315, i32* %54, align 4
  %316 = sext i32 %312 to i64
  %317 = add i64 %314, 11
  %318 = add i64 %317, %316
  %319 = inttoptr i64 %318 to i8*
  store i8 40, i8* %319, align 1
  %320 = load i32, i32* %54, align 4
  %321 = load i32, i32* %55, align 8
  %322 = icmp eq i32 %320, %321
  br i1 %322, label %1313, label %338

323:                                              ; preds = %292
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %324 = load i32, i32* %54, align 4
  br label %325

325:                                              ; preds = %323, %292
  %326 = phi i32 [ %324, %323 ], [ %298, %292 ]
  %327 = load i64*, i64** %53, align 8
  %328 = load i64, i64* %327, align 8
  %329 = add nsw i32 %326, 1
  store i32 %329, i32* %54, align 4
  %330 = shl nsw i32 %326, 1
  %331 = sext i32 %330 to i64
  %332 = add i64 %328, 11
  %333 = add i64 %332, %331
  %334 = inttoptr i64 %333 to i16*
  store i16 40, i16* %334, align 2
  %335 = load i32, i32* %54, align 4
  %336 = load i32, i32* %55, align 8
  %337 = icmp eq i32 %335, %336
  br i1 %337, label %1314, label %338

338:                                              ; preds = %325, %1314, %311, %1313
  %339 = load i64, i64* %285, align 8
  %340 = add i64 %339, 47
  %341 = inttoptr i64 %340 to i32*
  %342 = load i32, i32* %341, align 4
  %343 = and i32 %342, 2
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %349, label %345

345:                                              ; preds = %338
  %346 = call fastcc i64* @_ZN2v88internal12_GLOBAL__N_116FormatEvalOriginEPNS0_7IsolateENS0_6HandleINS0_6ScriptEEE(%"class.v8::internal::Isolate"* %0, i64* %285)
  %347 = icmp eq i64* %346, null
  br i1 %347, label %695, label %348

348:                                              ; preds = %345
  call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5, i64* nonnull %346) #6
  br label %610

349:                                              ; preds = %338
  %350 = and i64 %339, -4294967296
  %351 = add i64 %339, 7
  %352 = inttoptr i64 %351 to i32*
  %353 = load i32, i32* %352, align 4
  %354 = zext i32 %353 to i64
  %355 = or i64 %350, %354
  %356 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %12, align 8
  %357 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %356, null
  br i1 %357, label %361, label %358

358:                                              ; preds = %349
  %359 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %356, i64 %355) #6
  %360 = load i64, i64* %359, align 8
  br label %374

361:                                              ; preds = %349
  %362 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %363 = load i64*, i64** %362, align 8
  %364 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %365 = load i64*, i64** %364, align 8
  %366 = icmp eq i64* %363, %365
  br i1 %366, label %367, label %369

367:                                              ; preds = %361
  %368 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %369

369:                                              ; preds = %367, %361
  %370 = phi i64* [ %368, %367 ], [ %363, %361 ]
  %371 = ptrtoint i64* %370 to i64
  %372 = add i64 %371, 8
  %373 = inttoptr i64 %372 to i64*
  store i64* %373, i64** %362, align 8
  store i64 %355, i64* %370, align 8
  br label %374

374:                                              ; preds = %358, %369
  %375 = phi i64 [ %360, %358 ], [ %355, %369 ]
  %376 = phi i64* [ %359, %358 ], [ %370, %369 ]
  %377 = and i64 %375, 1
  %378 = icmp eq i64 %377, 0
  br i1 %378, label %557, label %379

379:                                              ; preds = %374
  %380 = and i64 %375, -4294967296
  %381 = add i64 %375, -1
  %382 = inttoptr i64 %381 to i32*
  %383 = load atomic i32, i32* %382 monotonic, align 4
  %384 = zext i32 %383 to i64
  %385 = or i64 %380, %384
  %386 = add i64 %385, 7
  %387 = inttoptr i64 %386 to i16*
  %388 = load atomic i16, i16* %387 monotonic, align 2
  %389 = icmp ult i16 %388, 64
  br i1 %389, label %390, label %557

390:                                              ; preds = %379
  call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5, i64* %376) #6
  %391 = bitcast %"struct.v8::internal::Script::PositionInfo"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %391) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %391, i8 -1, i64 16, i1 false) #6
  %392 = call i32 @_ZN2v88internal6Script15GetEvalPositionEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %0, i64* %1) #6
  %393 = call zeroext i1 @_ZN2v88internal6Script15GetPositionInfoENS0_6HandleIS1_EEiPNS1_12PositionInfoENS1_10OffsetFlagE(i64* %285, i32 %392, %"struct.v8::internal::Script::PositionInfo"* nonnull %6, i32 0) #6
  br i1 %393, label %394, label %556

394:                                              ; preds = %390
  %395 = load i32, i32* %50, align 8
  %396 = icmp eq i32 %395, 0
  %397 = load i64*, i64** %53, align 8
  %398 = load i64, i64* %397, align 8
  %399 = load i32, i32* %54, align 4
  %400 = add nsw i32 %399, 1
  store i32 %400, i32* %54, align 4
  br i1 %396, label %410, label %401

401:                                              ; preds = %394
  %402 = shl nsw i32 %399, 1
  %403 = sext i32 %402 to i64
  %404 = add i64 %398, 11
  %405 = add i64 %404, %403
  %406 = inttoptr i64 %405 to i16*
  store i16 58, i16* %406, align 2
  %407 = load i32, i32* %54, align 4
  %408 = load i32, i32* %55, align 8
  %409 = icmp eq i32 %407, %408
  br i1 %409, label %419, label %420

410:                                              ; preds = %394
  %411 = sext i32 %399 to i64
  %412 = add i64 %398, 11
  %413 = add i64 %412, %411
  %414 = inttoptr i64 %413 to i8*
  store i8 58, i8* %414, align 1
  %415 = load i32, i32* %54, align 4
  %416 = load i32, i32* %55, align 8
  %417 = icmp eq i32 %415, %416
  br i1 %417, label %418, label %420

418:                                              ; preds = %410
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %420

419:                                              ; preds = %401
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %420

420:                                              ; preds = %401, %419, %410, %418
  %421 = getelementptr inbounds %"struct.v8::internal::Script::PositionInfo", %"struct.v8::internal::Script::PositionInfo"* %6, i64 0, i32 0
  %422 = load i32, i32* %421, align 4
  %423 = add nsw i32 %422, 1
  %424 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %424) #6
  %425 = call i8* @_ZN2v88internal12IntToCStringEiNS0_6VectorIcEE(i32 %423, i8* nonnull %424, i64 100) #6
  %426 = load i32, i32* %50, align 8
  %427 = icmp eq i32 %426, 0
  %428 = load i8, i8* %425, align 1
  %429 = icmp eq i8 %428, 0
  br i1 %427, label %432, label %430

430:                                              ; preds = %420
  br i1 %429, label %431, label %453

431:                                              ; preds = %430
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %424) #6
  br label %477

432:                                              ; preds = %420
  br i1 %429, label %433, label %434

433:                                              ; preds = %432
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %424) #6
  br label %490

434:                                              ; preds = %432, %450
  %435 = phi i8 [ %451, %450 ], [ %428, %432 ]
  %436 = phi i8* [ %437, %450 ], [ %425, %432 ]
  %437 = getelementptr inbounds i8, i8* %436, i64 1
  %438 = load i64*, i64** %53, align 8
  %439 = load i64, i64* %438, align 8
  %440 = load i32, i32* %54, align 4
  %441 = add nsw i32 %440, 1
  store i32 %441, i32* %54, align 4
  %442 = sext i32 %440 to i64
  %443 = add i64 %439, 11
  %444 = add i64 %443, %442
  %445 = inttoptr i64 %444 to i8*
  store i8 %435, i8* %445, align 1
  %446 = load i32, i32* %54, align 4
  %447 = load i32, i32* %55, align 8
  %448 = icmp eq i32 %446, %447
  br i1 %448, label %449, label %450

449:                                              ; preds = %434
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %450

450:                                              ; preds = %449, %434
  %451 = load i8, i8* %437, align 1
  %452 = icmp eq i8 %451, 0
  br i1 %452, label %474, label %434

453:                                              ; preds = %430, %471
  %454 = phi i8 [ %472, %471 ], [ %428, %430 ]
  %455 = phi i8* [ %456, %471 ], [ %425, %430 ]
  %456 = getelementptr inbounds i8, i8* %455, i64 1
  %457 = load i64*, i64** %53, align 8
  %458 = load i64, i64* %457, align 8
  %459 = load i32, i32* %54, align 4
  %460 = add nsw i32 %459, 1
  store i32 %460, i32* %54, align 4
  %461 = zext i8 %454 to i16
  %462 = shl nsw i32 %459, 1
  %463 = sext i32 %462 to i64
  %464 = add i64 %458, 11
  %465 = add i64 %464, %463
  %466 = inttoptr i64 %465 to i16*
  store i16 %461, i16* %466, align 2
  %467 = load i32, i32* %54, align 4
  %468 = load i32, i32* %55, align 8
  %469 = icmp eq i32 %467, %468
  br i1 %469, label %470, label %471

470:                                              ; preds = %453
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %471

471:                                              ; preds = %470, %453
  %472 = load i8, i8* %456, align 1
  %473 = icmp eq i8 %472, 0
  br i1 %473, label %474, label %453

474:                                              ; preds = %471, %450
  %475 = load i32, i32* %50, align 8
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %424) #6
  %476 = icmp eq i32 %475, 0
  br i1 %476, label %490, label %477

477:                                              ; preds = %431, %474
  %478 = load i64*, i64** %53, align 8
  %479 = load i64, i64* %478, align 8
  %480 = load i32, i32* %54, align 4
  %481 = add nsw i32 %480, 1
  store i32 %481, i32* %54, align 4
  %482 = shl nsw i32 %480, 1
  %483 = sext i32 %482 to i64
  %484 = add i64 %479, 11
  %485 = add i64 %484, %483
  %486 = inttoptr i64 %485 to i16*
  store i16 58, i16* %486, align 2
  %487 = load i32, i32* %54, align 4
  %488 = load i32, i32* %55, align 8
  %489 = icmp eq i32 %487, %488
  br i1 %489, label %503, label %504

490:                                              ; preds = %433, %474
  %491 = load i64*, i64** %53, align 8
  %492 = load i64, i64* %491, align 8
  %493 = load i32, i32* %54, align 4
  %494 = add nsw i32 %493, 1
  store i32 %494, i32* %54, align 4
  %495 = sext i32 %493 to i64
  %496 = add i64 %492, 11
  %497 = add i64 %496, %495
  %498 = inttoptr i64 %497 to i8*
  store i8 58, i8* %498, align 1
  %499 = load i32, i32* %54, align 4
  %500 = load i32, i32* %55, align 8
  %501 = icmp eq i32 %499, %500
  br i1 %501, label %502, label %504

502:                                              ; preds = %490
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %504

503:                                              ; preds = %477
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %504

504:                                              ; preds = %477, %503, %490, %502
  %505 = getelementptr inbounds %"struct.v8::internal::Script::PositionInfo", %"struct.v8::internal::Script::PositionInfo"* %6, i64 0, i32 1
  %506 = load i32, i32* %505, align 4
  %507 = add nsw i32 %506, 1
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %424) #6
  %508 = call i8* @_ZN2v88internal12IntToCStringEiNS0_6VectorIcEE(i32 %507, i8* nonnull %424, i64 100) #6
  %509 = load i32, i32* %50, align 8
  %510 = icmp eq i32 %509, 0
  %511 = load i8, i8* %508, align 1
  %512 = icmp eq i8 %511, 0
  br i1 %510, label %514, label %513

513:                                              ; preds = %504
  br i1 %512, label %555, label %534

514:                                              ; preds = %504
  br i1 %512, label %555, label %515

515:                                              ; preds = %514, %531
  %516 = phi i8 [ %532, %531 ], [ %511, %514 ]
  %517 = phi i8* [ %518, %531 ], [ %508, %514 ]
  %518 = getelementptr inbounds i8, i8* %517, i64 1
  %519 = load i64*, i64** %53, align 8
  %520 = load i64, i64* %519, align 8
  %521 = load i32, i32* %54, align 4
  %522 = add nsw i32 %521, 1
  store i32 %522, i32* %54, align 4
  %523 = sext i32 %521 to i64
  %524 = add i64 %520, 11
  %525 = add i64 %524, %523
  %526 = inttoptr i64 %525 to i8*
  store i8 %516, i8* %526, align 1
  %527 = load i32, i32* %54, align 4
  %528 = load i32, i32* %55, align 8
  %529 = icmp eq i32 %527, %528
  br i1 %529, label %530, label %531

530:                                              ; preds = %515
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %531

531:                                              ; preds = %530, %515
  %532 = load i8, i8* %518, align 1
  %533 = icmp eq i8 %532, 0
  br i1 %533, label %555, label %515

534:                                              ; preds = %513, %552
  %535 = phi i8 [ %553, %552 ], [ %511, %513 ]
  %536 = phi i8* [ %537, %552 ], [ %508, %513 ]
  %537 = getelementptr inbounds i8, i8* %536, i64 1
  %538 = load i64*, i64** %53, align 8
  %539 = load i64, i64* %538, align 8
  %540 = load i32, i32* %54, align 4
  %541 = add nsw i32 %540, 1
  store i32 %541, i32* %54, align 4
  %542 = zext i8 %535 to i16
  %543 = shl nsw i32 %540, 1
  %544 = sext i32 %543 to i64
  %545 = add i64 %539, 11
  %546 = add i64 %545, %544
  %547 = inttoptr i64 %546 to i16*
  store i16 %542, i16* %547, align 2
  %548 = load i32, i32* %54, align 4
  %549 = load i32, i32* %55, align 8
  %550 = icmp eq i32 %548, %549
  br i1 %550, label %551, label %552

551:                                              ; preds = %534
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %552

552:                                              ; preds = %551, %534
  %553 = load i8, i8* %537, align 1
  %554 = icmp eq i8 %553, 0
  br i1 %554, label %555, label %534

555:                                              ; preds = %552, %531, %513, %514
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %424) #6
  br label %556

556:                                              ; preds = %555, %390
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %391) #6
  br label %610

557:                                              ; preds = %374, %379
  %558 = load i32, i32* %50, align 8
  %559 = icmp eq i32 %558, 0
  %560 = load i64*, i64** %53, align 8
  %561 = load i64, i64* %560, align 8
  %562 = load i32, i32* %54, align 4
  %563 = add nsw i32 %562, 1
  store i32 %563, i32* %54, align 4
  br i1 %559, label %573, label %564

564:                                              ; preds = %557
  %565 = shl nsw i32 %562, 1
  %566 = sext i32 %565 to i64
  %567 = add i64 %561, 11
  %568 = add i64 %567, %566
  %569 = inttoptr i64 %568 to i16*
  store i16 117, i16* %569, align 2
  %570 = load i32, i32* %54, align 4
  %571 = load i32, i32* %55, align 8
  %572 = icmp eq i32 %570, %571
  br i1 %572, label %595, label %597

573:                                              ; preds = %557
  %574 = sext i32 %562 to i64
  %575 = add i64 %561, 11
  %576 = add i64 %575, %574
  %577 = inttoptr i64 %576 to i8*
  store i8 117, i8* %577, align 1
  %578 = load i32, i32* %54, align 4
  %579 = load i32, i32* %55, align 8
  %580 = icmp eq i32 %578, %579
  br i1 %580, label %581, label %583

581:                                              ; preds = %573
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %582 = load i32, i32* %54, align 4
  br label %583

583:                                              ; preds = %581, %573
  %584 = phi i32 [ %582, %581 ], [ %578, %573 ]
  %585 = load i64*, i64** %53, align 8
  %586 = load i64, i64* %585, align 8
  %587 = add nsw i32 %584, 1
  store i32 %587, i32* %54, align 4
  %588 = sext i32 %584 to i64
  %589 = add i64 %586, 11
  %590 = add i64 %589, %588
  %591 = inttoptr i64 %590 to i8*
  store i8 110, i8* %591, align 1
  %592 = load i32, i32* %54, align 4
  %593 = load i32, i32* %55, align 8
  %594 = icmp eq i32 %592, %593
  br i1 %594, label %963, label %965

595:                                              ; preds = %564
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %596 = load i32, i32* %54, align 4
  br label %597

597:                                              ; preds = %595, %564
  %598 = phi i32 [ %596, %595 ], [ %570, %564 ]
  %599 = load i64*, i64** %53, align 8
  %600 = load i64, i64* %599, align 8
  %601 = add nsw i32 %598, 1
  store i32 %601, i32* %54, align 4
  %602 = shl nsw i32 %598, 1
  %603 = sext i32 %602 to i64
  %604 = add i64 %600, 11
  %605 = add i64 %604, %603
  %606 = inttoptr i64 %605 to i16*
  store i16 110, i16* %606, align 2
  %607 = load i32, i32* %54, align 4
  %608 = load i32, i32* %55, align 8
  %609 = icmp eq i32 %607, %608
  br i1 %609, label %1132, label %1134

610:                                              ; preds = %1299, %1312, %1119, %1131, %556, %348
  %611 = load i32, i32* %50, align 8
  %612 = icmp eq i32 %611, 0
  %613 = load i64*, i64** %53, align 8
  %614 = load i64, i64* %613, align 8
  %615 = load i32, i32* %54, align 4
  %616 = add nsw i32 %615, 1
  store i32 %616, i32* %54, align 4
  br i1 %612, label %626, label %617

617:                                              ; preds = %610
  %618 = shl nsw i32 %615, 1
  %619 = sext i32 %618 to i64
  %620 = add i64 %614, 11
  %621 = add i64 %620, %619
  %622 = inttoptr i64 %621 to i16*
  store i16 41, i16* %622, align 2
  %623 = load i32, i32* %54, align 4
  %624 = load i32, i32* %55, align 8
  %625 = icmp eq i32 %623, %624
  br i1 %625, label %635, label %689

626:                                              ; preds = %610
  %627 = sext i32 %615 to i64
  %628 = add i64 %614, 11
  %629 = add i64 %628, %627
  %630 = inttoptr i64 %629 to i8*
  store i8 41, i8* %630, align 1
  %631 = load i32, i32* %54, align 4
  %632 = load i32, i32* %55, align 8
  %633 = icmp eq i32 %631, %632
  br i1 %633, label %634, label %689

634:                                              ; preds = %626
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %689

635:                                              ; preds = %617
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %689

636:                                              ; preds = %106, %115
  %637 = load i32, i32* %50, align 8
  %638 = icmp eq i32 %637, 0
  %639 = load i64*, i64** %53, align 8
  %640 = load i64, i64* %639, align 8
  %641 = load i32, i32* %54, align 4
  %642 = add nsw i32 %641, 1
  store i32 %642, i32* %54, align 4
  br i1 %638, label %652, label %643

643:                                              ; preds = %636
  %644 = shl nsw i32 %641, 1
  %645 = sext i32 %644 to i64
  %646 = add i64 %640, 11
  %647 = add i64 %646, %645
  %648 = inttoptr i64 %647 to i16*
  store i16 60, i16* %648, align 2
  %649 = load i32, i32* %54, align 4
  %650 = load i32, i32* %55, align 8
  %651 = icmp eq i32 %649, %650
  br i1 %651, label %674, label %676

652:                                              ; preds = %636
  %653 = sext i32 %641 to i64
  %654 = add i64 %640, 11
  %655 = add i64 %654, %653
  %656 = inttoptr i64 %655 to i8*
  store i8 60, i8* %656, align 1
  %657 = load i32, i32* %54, align 4
  %658 = load i32, i32* %55, align 8
  %659 = icmp eq i32 %657, %658
  br i1 %659, label %660, label %662

660:                                              ; preds = %652
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %661 = load i32, i32* %54, align 4
  br label %662

662:                                              ; preds = %660, %652
  %663 = phi i32 [ %661, %660 ], [ %657, %652 ]
  %664 = load i64*, i64** %53, align 8
  %665 = load i64, i64* %664, align 8
  %666 = add nsw i32 %663, 1
  store i32 %666, i32* %54, align 4
  %667 = sext i32 %663 to i64
  %668 = add i64 %665, 11
  %669 = add i64 %668, %667
  %670 = inttoptr i64 %669 to i8*
  store i8 97, i8* %670, align 1
  %671 = load i32, i32* %54, align 4
  %672 = load i32, i32* %55, align 8
  %673 = icmp eq i32 %671, %672
  br i1 %673, label %700, label %702

674:                                              ; preds = %643
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %675 = load i32, i32* %54, align 4
  br label %676

676:                                              ; preds = %674, %643
  %677 = phi i32 [ %675, %674 ], [ %649, %643 ]
  %678 = load i64*, i64** %53, align 8
  %679 = load i64, i64* %678, align 8
  %680 = add nsw i32 %677, 1
  store i32 %680, i32* %54, align 4
  %681 = shl nsw i32 %677, 1
  %682 = sext i32 %681 to i64
  %683 = add i64 %679, 11
  %684 = add i64 %683, %682
  %685 = inttoptr i64 %684 to i16*
  store i16 97, i16* %685, align 2
  %686 = load i32, i32* %54, align 4
  %687 = load i32, i32* %55, align 8
  %688 = icmp eq i32 %686, %687
  br i1 %688, label %827, label %829

689:                                              ; preds = %949, %962, %814, %826, %617, %635, %626, %634, %231
  %690 = call i64* @_ZN2v88internal24IncrementalStringBuilder6FinishEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %691 = icmp eq i64* %690, null
  br i1 %691, label %692, label %693, !prof !3

692:                                              ; preds = %689
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29, i64 0, i64 0)) #9
  unreachable

693:                                              ; preds = %689
  %694 = ptrtoint i64* %690 to i64
  br label %695

695:                                              ; preds = %345, %693
  %696 = phi i64 [ %694, %693 ], [ 0, %345 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %49) #6
  br label %697

697:                                              ; preds = %695, %46
  %698 = phi i64 [ %47, %46 ], [ %696, %695 ]
  %699 = inttoptr i64 %698 to i64*
  ret i64* %699

700:                                              ; preds = %662
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %701 = load i32, i32* %54, align 4
  br label %702

702:                                              ; preds = %700, %662
  %703 = phi i32 [ %701, %700 ], [ %671, %662 ]
  %704 = load i64*, i64** %53, align 8
  %705 = load i64, i64* %704, align 8
  %706 = add nsw i32 %703, 1
  store i32 %706, i32* %54, align 4
  %707 = sext i32 %703 to i64
  %708 = add i64 %705, 11
  %709 = add i64 %708, %707
  %710 = inttoptr i64 %709 to i8*
  store i8 110, i8* %710, align 1
  %711 = load i32, i32* %54, align 4
  %712 = load i32, i32* %55, align 8
  %713 = icmp eq i32 %711, %712
  br i1 %713, label %714, label %716

714:                                              ; preds = %702
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %715 = load i32, i32* %54, align 4
  br label %716

716:                                              ; preds = %714, %702
  %717 = phi i32 [ %715, %714 ], [ %711, %702 ]
  %718 = load i64*, i64** %53, align 8
  %719 = load i64, i64* %718, align 8
  %720 = add nsw i32 %717, 1
  store i32 %720, i32* %54, align 4
  %721 = sext i32 %717 to i64
  %722 = add i64 %719, 11
  %723 = add i64 %722, %721
  %724 = inttoptr i64 %723 to i8*
  store i8 111, i8* %724, align 1
  %725 = load i32, i32* %54, align 4
  %726 = load i32, i32* %55, align 8
  %727 = icmp eq i32 %725, %726
  br i1 %727, label %728, label %730

728:                                              ; preds = %716
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %729 = load i32, i32* %54, align 4
  br label %730

730:                                              ; preds = %728, %716
  %731 = phi i32 [ %729, %728 ], [ %725, %716 ]
  %732 = load i64*, i64** %53, align 8
  %733 = load i64, i64* %732, align 8
  %734 = add nsw i32 %731, 1
  store i32 %734, i32* %54, align 4
  %735 = sext i32 %731 to i64
  %736 = add i64 %733, 11
  %737 = add i64 %736, %735
  %738 = inttoptr i64 %737 to i8*
  store i8 110, i8* %738, align 1
  %739 = load i32, i32* %54, align 4
  %740 = load i32, i32* %55, align 8
  %741 = icmp eq i32 %739, %740
  br i1 %741, label %742, label %744

742:                                              ; preds = %730
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %743 = load i32, i32* %54, align 4
  br label %744

744:                                              ; preds = %742, %730
  %745 = phi i32 [ %743, %742 ], [ %739, %730 ]
  %746 = load i64*, i64** %53, align 8
  %747 = load i64, i64* %746, align 8
  %748 = add nsw i32 %745, 1
  store i32 %748, i32* %54, align 4
  %749 = sext i32 %745 to i64
  %750 = add i64 %747, 11
  %751 = add i64 %750, %749
  %752 = inttoptr i64 %751 to i8*
  store i8 121, i8* %752, align 1
  %753 = load i32, i32* %54, align 4
  %754 = load i32, i32* %55, align 8
  %755 = icmp eq i32 %753, %754
  br i1 %755, label %756, label %758

756:                                              ; preds = %744
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %757 = load i32, i32* %54, align 4
  br label %758

758:                                              ; preds = %756, %744
  %759 = phi i32 [ %757, %756 ], [ %753, %744 ]
  %760 = load i64*, i64** %53, align 8
  %761 = load i64, i64* %760, align 8
  %762 = add nsw i32 %759, 1
  store i32 %762, i32* %54, align 4
  %763 = sext i32 %759 to i64
  %764 = add i64 %761, 11
  %765 = add i64 %764, %763
  %766 = inttoptr i64 %765 to i8*
  store i8 109, i8* %766, align 1
  %767 = load i32, i32* %54, align 4
  %768 = load i32, i32* %55, align 8
  %769 = icmp eq i32 %767, %768
  br i1 %769, label %770, label %772

770:                                              ; preds = %758
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %771 = load i32, i32* %54, align 4
  br label %772

772:                                              ; preds = %770, %758
  %773 = phi i32 [ %771, %770 ], [ %767, %758 ]
  %774 = load i64*, i64** %53, align 8
  %775 = load i64, i64* %774, align 8
  %776 = add nsw i32 %773, 1
  store i32 %776, i32* %54, align 4
  %777 = sext i32 %773 to i64
  %778 = add i64 %775, 11
  %779 = add i64 %778, %777
  %780 = inttoptr i64 %779 to i8*
  store i8 111, i8* %780, align 1
  %781 = load i32, i32* %54, align 4
  %782 = load i32, i32* %55, align 8
  %783 = icmp eq i32 %781, %782
  br i1 %783, label %784, label %786

784:                                              ; preds = %772
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %785 = load i32, i32* %54, align 4
  br label %786

786:                                              ; preds = %784, %772
  %787 = phi i32 [ %785, %784 ], [ %781, %772 ]
  %788 = load i64*, i64** %53, align 8
  %789 = load i64, i64* %788, align 8
  %790 = add nsw i32 %787, 1
  store i32 %790, i32* %54, align 4
  %791 = sext i32 %787 to i64
  %792 = add i64 %789, 11
  %793 = add i64 %792, %791
  %794 = inttoptr i64 %793 to i8*
  store i8 117, i8* %794, align 1
  %795 = load i32, i32* %54, align 4
  %796 = load i32, i32* %55, align 8
  %797 = icmp eq i32 %795, %796
  br i1 %797, label %798, label %800

798:                                              ; preds = %786
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %799 = load i32, i32* %54, align 4
  br label %800

800:                                              ; preds = %798, %786
  %801 = phi i32 [ %799, %798 ], [ %795, %786 ]
  %802 = load i64*, i64** %53, align 8
  %803 = load i64, i64* %802, align 8
  %804 = add nsw i32 %801, 1
  store i32 %804, i32* %54, align 4
  %805 = sext i32 %801 to i64
  %806 = add i64 %803, 11
  %807 = add i64 %806, %805
  %808 = inttoptr i64 %807 to i8*
  store i8 115, i8* %808, align 1
  %809 = load i32, i32* %54, align 4
  %810 = load i32, i32* %55, align 8
  %811 = icmp eq i32 %809, %810
  br i1 %811, label %812, label %814

812:                                              ; preds = %800
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %813 = load i32, i32* %54, align 4
  br label %814

814:                                              ; preds = %812, %800
  %815 = phi i32 [ %813, %812 ], [ %809, %800 ]
  %816 = load i64*, i64** %53, align 8
  %817 = load i64, i64* %816, align 8
  %818 = add nsw i32 %815, 1
  store i32 %818, i32* %54, align 4
  %819 = sext i32 %815 to i64
  %820 = add i64 %817, 11
  %821 = add i64 %820, %819
  %822 = inttoptr i64 %821 to i8*
  store i8 62, i8* %822, align 1
  %823 = load i32, i32* %54, align 4
  %824 = load i32, i32* %55, align 8
  %825 = icmp eq i32 %823, %824
  br i1 %825, label %826, label %689

826:                                              ; preds = %814
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %689

827:                                              ; preds = %676
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %828 = load i32, i32* %54, align 4
  br label %829

829:                                              ; preds = %827, %676
  %830 = phi i32 [ %828, %827 ], [ %686, %676 ]
  %831 = load i64*, i64** %53, align 8
  %832 = load i64, i64* %831, align 8
  %833 = add nsw i32 %830, 1
  store i32 %833, i32* %54, align 4
  %834 = shl nsw i32 %830, 1
  %835 = sext i32 %834 to i64
  %836 = add i64 %832, 11
  %837 = add i64 %836, %835
  %838 = inttoptr i64 %837 to i16*
  store i16 110, i16* %838, align 2
  %839 = load i32, i32* %54, align 4
  %840 = load i32, i32* %55, align 8
  %841 = icmp eq i32 %839, %840
  br i1 %841, label %842, label %844

842:                                              ; preds = %829
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %843 = load i32, i32* %54, align 4
  br label %844

844:                                              ; preds = %842, %829
  %845 = phi i32 [ %843, %842 ], [ %839, %829 ]
  %846 = load i64*, i64** %53, align 8
  %847 = load i64, i64* %846, align 8
  %848 = add nsw i32 %845, 1
  store i32 %848, i32* %54, align 4
  %849 = shl nsw i32 %845, 1
  %850 = sext i32 %849 to i64
  %851 = add i64 %847, 11
  %852 = add i64 %851, %850
  %853 = inttoptr i64 %852 to i16*
  store i16 111, i16* %853, align 2
  %854 = load i32, i32* %54, align 4
  %855 = load i32, i32* %55, align 8
  %856 = icmp eq i32 %854, %855
  br i1 %856, label %857, label %859

857:                                              ; preds = %844
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %858 = load i32, i32* %54, align 4
  br label %859

859:                                              ; preds = %857, %844
  %860 = phi i32 [ %858, %857 ], [ %854, %844 ]
  %861 = load i64*, i64** %53, align 8
  %862 = load i64, i64* %861, align 8
  %863 = add nsw i32 %860, 1
  store i32 %863, i32* %54, align 4
  %864 = shl nsw i32 %860, 1
  %865 = sext i32 %864 to i64
  %866 = add i64 %862, 11
  %867 = add i64 %866, %865
  %868 = inttoptr i64 %867 to i16*
  store i16 110, i16* %868, align 2
  %869 = load i32, i32* %54, align 4
  %870 = load i32, i32* %55, align 8
  %871 = icmp eq i32 %869, %870
  br i1 %871, label %872, label %874

872:                                              ; preds = %859
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %873 = load i32, i32* %54, align 4
  br label %874

874:                                              ; preds = %872, %859
  %875 = phi i32 [ %873, %872 ], [ %869, %859 ]
  %876 = load i64*, i64** %53, align 8
  %877 = load i64, i64* %876, align 8
  %878 = add nsw i32 %875, 1
  store i32 %878, i32* %54, align 4
  %879 = shl nsw i32 %875, 1
  %880 = sext i32 %879 to i64
  %881 = add i64 %877, 11
  %882 = add i64 %881, %880
  %883 = inttoptr i64 %882 to i16*
  store i16 121, i16* %883, align 2
  %884 = load i32, i32* %54, align 4
  %885 = load i32, i32* %55, align 8
  %886 = icmp eq i32 %884, %885
  br i1 %886, label %887, label %889

887:                                              ; preds = %874
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %888 = load i32, i32* %54, align 4
  br label %889

889:                                              ; preds = %887, %874
  %890 = phi i32 [ %888, %887 ], [ %884, %874 ]
  %891 = load i64*, i64** %53, align 8
  %892 = load i64, i64* %891, align 8
  %893 = add nsw i32 %890, 1
  store i32 %893, i32* %54, align 4
  %894 = shl nsw i32 %890, 1
  %895 = sext i32 %894 to i64
  %896 = add i64 %892, 11
  %897 = add i64 %896, %895
  %898 = inttoptr i64 %897 to i16*
  store i16 109, i16* %898, align 2
  %899 = load i32, i32* %54, align 4
  %900 = load i32, i32* %55, align 8
  %901 = icmp eq i32 %899, %900
  br i1 %901, label %902, label %904

902:                                              ; preds = %889
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %903 = load i32, i32* %54, align 4
  br label %904

904:                                              ; preds = %902, %889
  %905 = phi i32 [ %903, %902 ], [ %899, %889 ]
  %906 = load i64*, i64** %53, align 8
  %907 = load i64, i64* %906, align 8
  %908 = add nsw i32 %905, 1
  store i32 %908, i32* %54, align 4
  %909 = shl nsw i32 %905, 1
  %910 = sext i32 %909 to i64
  %911 = add i64 %907, 11
  %912 = add i64 %911, %910
  %913 = inttoptr i64 %912 to i16*
  store i16 111, i16* %913, align 2
  %914 = load i32, i32* %54, align 4
  %915 = load i32, i32* %55, align 8
  %916 = icmp eq i32 %914, %915
  br i1 %916, label %917, label %919

917:                                              ; preds = %904
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %918 = load i32, i32* %54, align 4
  br label %919

919:                                              ; preds = %917, %904
  %920 = phi i32 [ %918, %917 ], [ %914, %904 ]
  %921 = load i64*, i64** %53, align 8
  %922 = load i64, i64* %921, align 8
  %923 = add nsw i32 %920, 1
  store i32 %923, i32* %54, align 4
  %924 = shl nsw i32 %920, 1
  %925 = sext i32 %924 to i64
  %926 = add i64 %922, 11
  %927 = add i64 %926, %925
  %928 = inttoptr i64 %927 to i16*
  store i16 117, i16* %928, align 2
  %929 = load i32, i32* %54, align 4
  %930 = load i32, i32* %55, align 8
  %931 = icmp eq i32 %929, %930
  br i1 %931, label %932, label %934

932:                                              ; preds = %919
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %933 = load i32, i32* %54, align 4
  br label %934

934:                                              ; preds = %932, %919
  %935 = phi i32 [ %933, %932 ], [ %929, %919 ]
  %936 = load i64*, i64** %53, align 8
  %937 = load i64, i64* %936, align 8
  %938 = add nsw i32 %935, 1
  store i32 %938, i32* %54, align 4
  %939 = shl nsw i32 %935, 1
  %940 = sext i32 %939 to i64
  %941 = add i64 %937, 11
  %942 = add i64 %941, %940
  %943 = inttoptr i64 %942 to i16*
  store i16 115, i16* %943, align 2
  %944 = load i32, i32* %54, align 4
  %945 = load i32, i32* %55, align 8
  %946 = icmp eq i32 %944, %945
  br i1 %946, label %947, label %949

947:                                              ; preds = %934
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %948 = load i32, i32* %54, align 4
  br label %949

949:                                              ; preds = %947, %934
  %950 = phi i32 [ %948, %947 ], [ %944, %934 ]
  %951 = load i64*, i64** %53, align 8
  %952 = load i64, i64* %951, align 8
  %953 = add nsw i32 %950, 1
  store i32 %953, i32* %54, align 4
  %954 = shl nsw i32 %950, 1
  %955 = sext i32 %954 to i64
  %956 = add i64 %952, 11
  %957 = add i64 %956, %955
  %958 = inttoptr i64 %957 to i16*
  store i16 62, i16* %958, align 2
  %959 = load i32, i32* %54, align 4
  %960 = load i32, i32* %55, align 8
  %961 = icmp eq i32 %959, %960
  br i1 %961, label %962, label %689

962:                                              ; preds = %949
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %689

963:                                              ; preds = %583
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %964 = load i32, i32* %54, align 4
  br label %965

965:                                              ; preds = %963, %583
  %966 = phi i32 [ %964, %963 ], [ %592, %583 ]
  %967 = load i64*, i64** %53, align 8
  %968 = load i64, i64* %967, align 8
  %969 = add nsw i32 %966, 1
  store i32 %969, i32* %54, align 4
  %970 = sext i32 %966 to i64
  %971 = add i64 %968, 11
  %972 = add i64 %971, %970
  %973 = inttoptr i64 %972 to i8*
  store i8 107, i8* %973, align 1
  %974 = load i32, i32* %54, align 4
  %975 = load i32, i32* %55, align 8
  %976 = icmp eq i32 %974, %975
  br i1 %976, label %977, label %979

977:                                              ; preds = %965
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %978 = load i32, i32* %54, align 4
  br label %979

979:                                              ; preds = %977, %965
  %980 = phi i32 [ %978, %977 ], [ %974, %965 ]
  %981 = load i64*, i64** %53, align 8
  %982 = load i64, i64* %981, align 8
  %983 = add nsw i32 %980, 1
  store i32 %983, i32* %54, align 4
  %984 = sext i32 %980 to i64
  %985 = add i64 %982, 11
  %986 = add i64 %985, %984
  %987 = inttoptr i64 %986 to i8*
  store i8 110, i8* %987, align 1
  %988 = load i32, i32* %54, align 4
  %989 = load i32, i32* %55, align 8
  %990 = icmp eq i32 %988, %989
  br i1 %990, label %991, label %993

991:                                              ; preds = %979
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %992 = load i32, i32* %54, align 4
  br label %993

993:                                              ; preds = %991, %979
  %994 = phi i32 [ %992, %991 ], [ %988, %979 ]
  %995 = load i64*, i64** %53, align 8
  %996 = load i64, i64* %995, align 8
  %997 = add nsw i32 %994, 1
  store i32 %997, i32* %54, align 4
  %998 = sext i32 %994 to i64
  %999 = add i64 %996, 11
  %1000 = add i64 %999, %998
  %1001 = inttoptr i64 %1000 to i8*
  store i8 111, i8* %1001, align 1
  %1002 = load i32, i32* %54, align 4
  %1003 = load i32, i32* %55, align 8
  %1004 = icmp eq i32 %1002, %1003
  br i1 %1004, label %1005, label %1007

1005:                                             ; preds = %993
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1006 = load i32, i32* %54, align 4
  br label %1007

1007:                                             ; preds = %1005, %993
  %1008 = phi i32 [ %1006, %1005 ], [ %1002, %993 ]
  %1009 = load i64*, i64** %53, align 8
  %1010 = load i64, i64* %1009, align 8
  %1011 = add nsw i32 %1008, 1
  store i32 %1011, i32* %54, align 4
  %1012 = sext i32 %1008 to i64
  %1013 = add i64 %1010, 11
  %1014 = add i64 %1013, %1012
  %1015 = inttoptr i64 %1014 to i8*
  store i8 119, i8* %1015, align 1
  %1016 = load i32, i32* %54, align 4
  %1017 = load i32, i32* %55, align 8
  %1018 = icmp eq i32 %1016, %1017
  br i1 %1018, label %1019, label %1021

1019:                                             ; preds = %1007
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1020 = load i32, i32* %54, align 4
  br label %1021

1021:                                             ; preds = %1019, %1007
  %1022 = phi i32 [ %1020, %1019 ], [ %1016, %1007 ]
  %1023 = load i64*, i64** %53, align 8
  %1024 = load i64, i64* %1023, align 8
  %1025 = add nsw i32 %1022, 1
  store i32 %1025, i32* %54, align 4
  %1026 = sext i32 %1022 to i64
  %1027 = add i64 %1024, 11
  %1028 = add i64 %1027, %1026
  %1029 = inttoptr i64 %1028 to i8*
  store i8 110, i8* %1029, align 1
  %1030 = load i32, i32* %54, align 4
  %1031 = load i32, i32* %55, align 8
  %1032 = icmp eq i32 %1030, %1031
  br i1 %1032, label %1033, label %1035

1033:                                             ; preds = %1021
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1034 = load i32, i32* %54, align 4
  br label %1035

1035:                                             ; preds = %1033, %1021
  %1036 = phi i32 [ %1034, %1033 ], [ %1030, %1021 ]
  %1037 = load i64*, i64** %53, align 8
  %1038 = load i64, i64* %1037, align 8
  %1039 = add nsw i32 %1036, 1
  store i32 %1039, i32* %54, align 4
  %1040 = sext i32 %1036 to i64
  %1041 = add i64 %1038, 11
  %1042 = add i64 %1041, %1040
  %1043 = inttoptr i64 %1042 to i8*
  store i8 32, i8* %1043, align 1
  %1044 = load i32, i32* %54, align 4
  %1045 = load i32, i32* %55, align 8
  %1046 = icmp eq i32 %1044, %1045
  br i1 %1046, label %1047, label %1049

1047:                                             ; preds = %1035
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1048 = load i32, i32* %54, align 4
  br label %1049

1049:                                             ; preds = %1047, %1035
  %1050 = phi i32 [ %1048, %1047 ], [ %1044, %1035 ]
  %1051 = load i64*, i64** %53, align 8
  %1052 = load i64, i64* %1051, align 8
  %1053 = add nsw i32 %1050, 1
  store i32 %1053, i32* %54, align 4
  %1054 = sext i32 %1050 to i64
  %1055 = add i64 %1052, 11
  %1056 = add i64 %1055, %1054
  %1057 = inttoptr i64 %1056 to i8*
  store i8 115, i8* %1057, align 1
  %1058 = load i32, i32* %54, align 4
  %1059 = load i32, i32* %55, align 8
  %1060 = icmp eq i32 %1058, %1059
  br i1 %1060, label %1061, label %1063

1061:                                             ; preds = %1049
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1062 = load i32, i32* %54, align 4
  br label %1063

1063:                                             ; preds = %1061, %1049
  %1064 = phi i32 [ %1062, %1061 ], [ %1058, %1049 ]
  %1065 = load i64*, i64** %53, align 8
  %1066 = load i64, i64* %1065, align 8
  %1067 = add nsw i32 %1064, 1
  store i32 %1067, i32* %54, align 4
  %1068 = sext i32 %1064 to i64
  %1069 = add i64 %1066, 11
  %1070 = add i64 %1069, %1068
  %1071 = inttoptr i64 %1070 to i8*
  store i8 111, i8* %1071, align 1
  %1072 = load i32, i32* %54, align 4
  %1073 = load i32, i32* %55, align 8
  %1074 = icmp eq i32 %1072, %1073
  br i1 %1074, label %1075, label %1077

1075:                                             ; preds = %1063
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1076 = load i32, i32* %54, align 4
  br label %1077

1077:                                             ; preds = %1075, %1063
  %1078 = phi i32 [ %1076, %1075 ], [ %1072, %1063 ]
  %1079 = load i64*, i64** %53, align 8
  %1080 = load i64, i64* %1079, align 8
  %1081 = add nsw i32 %1078, 1
  store i32 %1081, i32* %54, align 4
  %1082 = sext i32 %1078 to i64
  %1083 = add i64 %1080, 11
  %1084 = add i64 %1083, %1082
  %1085 = inttoptr i64 %1084 to i8*
  store i8 117, i8* %1085, align 1
  %1086 = load i32, i32* %54, align 4
  %1087 = load i32, i32* %55, align 8
  %1088 = icmp eq i32 %1086, %1087
  br i1 %1088, label %1089, label %1091

1089:                                             ; preds = %1077
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1090 = load i32, i32* %54, align 4
  br label %1091

1091:                                             ; preds = %1089, %1077
  %1092 = phi i32 [ %1090, %1089 ], [ %1086, %1077 ]
  %1093 = load i64*, i64** %53, align 8
  %1094 = load i64, i64* %1093, align 8
  %1095 = add nsw i32 %1092, 1
  store i32 %1095, i32* %54, align 4
  %1096 = sext i32 %1092 to i64
  %1097 = add i64 %1094, 11
  %1098 = add i64 %1097, %1096
  %1099 = inttoptr i64 %1098 to i8*
  store i8 114, i8* %1099, align 1
  %1100 = load i32, i32* %54, align 4
  %1101 = load i32, i32* %55, align 8
  %1102 = icmp eq i32 %1100, %1101
  br i1 %1102, label %1103, label %1105

1103:                                             ; preds = %1091
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1104 = load i32, i32* %54, align 4
  br label %1105

1105:                                             ; preds = %1103, %1091
  %1106 = phi i32 [ %1104, %1103 ], [ %1100, %1091 ]
  %1107 = load i64*, i64** %53, align 8
  %1108 = load i64, i64* %1107, align 8
  %1109 = add nsw i32 %1106, 1
  store i32 %1109, i32* %54, align 4
  %1110 = sext i32 %1106 to i64
  %1111 = add i64 %1108, 11
  %1112 = add i64 %1111, %1110
  %1113 = inttoptr i64 %1112 to i8*
  store i8 99, i8* %1113, align 1
  %1114 = load i32, i32* %54, align 4
  %1115 = load i32, i32* %55, align 8
  %1116 = icmp eq i32 %1114, %1115
  br i1 %1116, label %1117, label %1119

1117:                                             ; preds = %1105
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1118 = load i32, i32* %54, align 4
  br label %1119

1119:                                             ; preds = %1117, %1105
  %1120 = phi i32 [ %1118, %1117 ], [ %1114, %1105 ]
  %1121 = load i64*, i64** %53, align 8
  %1122 = load i64, i64* %1121, align 8
  %1123 = add nsw i32 %1120, 1
  store i32 %1123, i32* %54, align 4
  %1124 = sext i32 %1120 to i64
  %1125 = add i64 %1122, 11
  %1126 = add i64 %1125, %1124
  %1127 = inttoptr i64 %1126 to i8*
  store i8 101, i8* %1127, align 1
  %1128 = load i32, i32* %54, align 4
  %1129 = load i32, i32* %55, align 8
  %1130 = icmp eq i32 %1128, %1129
  br i1 %1130, label %1131, label %610

1131:                                             ; preds = %1119
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %610

1132:                                             ; preds = %597
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1133 = load i32, i32* %54, align 4
  br label %1134

1134:                                             ; preds = %1132, %597
  %1135 = phi i32 [ %1133, %1132 ], [ %607, %597 ]
  %1136 = load i64*, i64** %53, align 8
  %1137 = load i64, i64* %1136, align 8
  %1138 = add nsw i32 %1135, 1
  store i32 %1138, i32* %54, align 4
  %1139 = shl nsw i32 %1135, 1
  %1140 = sext i32 %1139 to i64
  %1141 = add i64 %1137, 11
  %1142 = add i64 %1141, %1140
  %1143 = inttoptr i64 %1142 to i16*
  store i16 107, i16* %1143, align 2
  %1144 = load i32, i32* %54, align 4
  %1145 = load i32, i32* %55, align 8
  %1146 = icmp eq i32 %1144, %1145
  br i1 %1146, label %1147, label %1149

1147:                                             ; preds = %1134
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1148 = load i32, i32* %54, align 4
  br label %1149

1149:                                             ; preds = %1147, %1134
  %1150 = phi i32 [ %1148, %1147 ], [ %1144, %1134 ]
  %1151 = load i64*, i64** %53, align 8
  %1152 = load i64, i64* %1151, align 8
  %1153 = add nsw i32 %1150, 1
  store i32 %1153, i32* %54, align 4
  %1154 = shl nsw i32 %1150, 1
  %1155 = sext i32 %1154 to i64
  %1156 = add i64 %1152, 11
  %1157 = add i64 %1156, %1155
  %1158 = inttoptr i64 %1157 to i16*
  store i16 110, i16* %1158, align 2
  %1159 = load i32, i32* %54, align 4
  %1160 = load i32, i32* %55, align 8
  %1161 = icmp eq i32 %1159, %1160
  br i1 %1161, label %1162, label %1164

1162:                                             ; preds = %1149
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1163 = load i32, i32* %54, align 4
  br label %1164

1164:                                             ; preds = %1162, %1149
  %1165 = phi i32 [ %1163, %1162 ], [ %1159, %1149 ]
  %1166 = load i64*, i64** %53, align 8
  %1167 = load i64, i64* %1166, align 8
  %1168 = add nsw i32 %1165, 1
  store i32 %1168, i32* %54, align 4
  %1169 = shl nsw i32 %1165, 1
  %1170 = sext i32 %1169 to i64
  %1171 = add i64 %1167, 11
  %1172 = add i64 %1171, %1170
  %1173 = inttoptr i64 %1172 to i16*
  store i16 111, i16* %1173, align 2
  %1174 = load i32, i32* %54, align 4
  %1175 = load i32, i32* %55, align 8
  %1176 = icmp eq i32 %1174, %1175
  br i1 %1176, label %1177, label %1179

1177:                                             ; preds = %1164
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1178 = load i32, i32* %54, align 4
  br label %1179

1179:                                             ; preds = %1177, %1164
  %1180 = phi i32 [ %1178, %1177 ], [ %1174, %1164 ]
  %1181 = load i64*, i64** %53, align 8
  %1182 = load i64, i64* %1181, align 8
  %1183 = add nsw i32 %1180, 1
  store i32 %1183, i32* %54, align 4
  %1184 = shl nsw i32 %1180, 1
  %1185 = sext i32 %1184 to i64
  %1186 = add i64 %1182, 11
  %1187 = add i64 %1186, %1185
  %1188 = inttoptr i64 %1187 to i16*
  store i16 119, i16* %1188, align 2
  %1189 = load i32, i32* %54, align 4
  %1190 = load i32, i32* %55, align 8
  %1191 = icmp eq i32 %1189, %1190
  br i1 %1191, label %1192, label %1194

1192:                                             ; preds = %1179
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1193 = load i32, i32* %54, align 4
  br label %1194

1194:                                             ; preds = %1192, %1179
  %1195 = phi i32 [ %1193, %1192 ], [ %1189, %1179 ]
  %1196 = load i64*, i64** %53, align 8
  %1197 = load i64, i64* %1196, align 8
  %1198 = add nsw i32 %1195, 1
  store i32 %1198, i32* %54, align 4
  %1199 = shl nsw i32 %1195, 1
  %1200 = sext i32 %1199 to i64
  %1201 = add i64 %1197, 11
  %1202 = add i64 %1201, %1200
  %1203 = inttoptr i64 %1202 to i16*
  store i16 110, i16* %1203, align 2
  %1204 = load i32, i32* %54, align 4
  %1205 = load i32, i32* %55, align 8
  %1206 = icmp eq i32 %1204, %1205
  br i1 %1206, label %1207, label %1209

1207:                                             ; preds = %1194
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1208 = load i32, i32* %54, align 4
  br label %1209

1209:                                             ; preds = %1207, %1194
  %1210 = phi i32 [ %1208, %1207 ], [ %1204, %1194 ]
  %1211 = load i64*, i64** %53, align 8
  %1212 = load i64, i64* %1211, align 8
  %1213 = add nsw i32 %1210, 1
  store i32 %1213, i32* %54, align 4
  %1214 = shl nsw i32 %1210, 1
  %1215 = sext i32 %1214 to i64
  %1216 = add i64 %1212, 11
  %1217 = add i64 %1216, %1215
  %1218 = inttoptr i64 %1217 to i16*
  store i16 32, i16* %1218, align 2
  %1219 = load i32, i32* %54, align 4
  %1220 = load i32, i32* %55, align 8
  %1221 = icmp eq i32 %1219, %1220
  br i1 %1221, label %1222, label %1224

1222:                                             ; preds = %1209
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1223 = load i32, i32* %54, align 4
  br label %1224

1224:                                             ; preds = %1222, %1209
  %1225 = phi i32 [ %1223, %1222 ], [ %1219, %1209 ]
  %1226 = load i64*, i64** %53, align 8
  %1227 = load i64, i64* %1226, align 8
  %1228 = add nsw i32 %1225, 1
  store i32 %1228, i32* %54, align 4
  %1229 = shl nsw i32 %1225, 1
  %1230 = sext i32 %1229 to i64
  %1231 = add i64 %1227, 11
  %1232 = add i64 %1231, %1230
  %1233 = inttoptr i64 %1232 to i16*
  store i16 115, i16* %1233, align 2
  %1234 = load i32, i32* %54, align 4
  %1235 = load i32, i32* %55, align 8
  %1236 = icmp eq i32 %1234, %1235
  br i1 %1236, label %1237, label %1239

1237:                                             ; preds = %1224
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1238 = load i32, i32* %54, align 4
  br label %1239

1239:                                             ; preds = %1237, %1224
  %1240 = phi i32 [ %1238, %1237 ], [ %1234, %1224 ]
  %1241 = load i64*, i64** %53, align 8
  %1242 = load i64, i64* %1241, align 8
  %1243 = add nsw i32 %1240, 1
  store i32 %1243, i32* %54, align 4
  %1244 = shl nsw i32 %1240, 1
  %1245 = sext i32 %1244 to i64
  %1246 = add i64 %1242, 11
  %1247 = add i64 %1246, %1245
  %1248 = inttoptr i64 %1247 to i16*
  store i16 111, i16* %1248, align 2
  %1249 = load i32, i32* %54, align 4
  %1250 = load i32, i32* %55, align 8
  %1251 = icmp eq i32 %1249, %1250
  br i1 %1251, label %1252, label %1254

1252:                                             ; preds = %1239
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1253 = load i32, i32* %54, align 4
  br label %1254

1254:                                             ; preds = %1252, %1239
  %1255 = phi i32 [ %1253, %1252 ], [ %1249, %1239 ]
  %1256 = load i64*, i64** %53, align 8
  %1257 = load i64, i64* %1256, align 8
  %1258 = add nsw i32 %1255, 1
  store i32 %1258, i32* %54, align 4
  %1259 = shl nsw i32 %1255, 1
  %1260 = sext i32 %1259 to i64
  %1261 = add i64 %1257, 11
  %1262 = add i64 %1261, %1260
  %1263 = inttoptr i64 %1262 to i16*
  store i16 117, i16* %1263, align 2
  %1264 = load i32, i32* %54, align 4
  %1265 = load i32, i32* %55, align 8
  %1266 = icmp eq i32 %1264, %1265
  br i1 %1266, label %1267, label %1269

1267:                                             ; preds = %1254
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1268 = load i32, i32* %54, align 4
  br label %1269

1269:                                             ; preds = %1267, %1254
  %1270 = phi i32 [ %1268, %1267 ], [ %1264, %1254 ]
  %1271 = load i64*, i64** %53, align 8
  %1272 = load i64, i64* %1271, align 8
  %1273 = add nsw i32 %1270, 1
  store i32 %1273, i32* %54, align 4
  %1274 = shl nsw i32 %1270, 1
  %1275 = sext i32 %1274 to i64
  %1276 = add i64 %1272, 11
  %1277 = add i64 %1276, %1275
  %1278 = inttoptr i64 %1277 to i16*
  store i16 114, i16* %1278, align 2
  %1279 = load i32, i32* %54, align 4
  %1280 = load i32, i32* %55, align 8
  %1281 = icmp eq i32 %1279, %1280
  br i1 %1281, label %1282, label %1284

1282:                                             ; preds = %1269
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1283 = load i32, i32* %54, align 4
  br label %1284

1284:                                             ; preds = %1282, %1269
  %1285 = phi i32 [ %1283, %1282 ], [ %1279, %1269 ]
  %1286 = load i64*, i64** %53, align 8
  %1287 = load i64, i64* %1286, align 8
  %1288 = add nsw i32 %1285, 1
  store i32 %1288, i32* %54, align 4
  %1289 = shl nsw i32 %1285, 1
  %1290 = sext i32 %1289 to i64
  %1291 = add i64 %1287, 11
  %1292 = add i64 %1291, %1290
  %1293 = inttoptr i64 %1292 to i16*
  store i16 99, i16* %1293, align 2
  %1294 = load i32, i32* %54, align 4
  %1295 = load i32, i32* %55, align 8
  %1296 = icmp eq i32 %1294, %1295
  br i1 %1296, label %1297, label %1299

1297:                                             ; preds = %1284
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1298 = load i32, i32* %54, align 4
  br label %1299

1299:                                             ; preds = %1297, %1284
  %1300 = phi i32 [ %1298, %1297 ], [ %1294, %1284 ]
  %1301 = load i64*, i64** %53, align 8
  %1302 = load i64, i64* %1301, align 8
  %1303 = add nsw i32 %1300, 1
  store i32 %1303, i32* %54, align 4
  %1304 = shl nsw i32 %1300, 1
  %1305 = sext i32 %1304 to i64
  %1306 = add i64 %1302, 11
  %1307 = add i64 %1306, %1305
  %1308 = inttoptr i64 %1307 to i16*
  store i16 101, i16* %1308, align 2
  %1309 = load i32, i32* %54, align 4
  %1310 = load i32, i32* %55, align 8
  %1311 = icmp eq i32 %1309, %1310
  br i1 %1311, label %1312, label %610

1312:                                             ; preds = %1299
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %610

1313:                                             ; preds = %311
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %338

1314:                                             ; preds = %325
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %338

1315:                                             ; preds = %179
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1316 = load i32, i32* %54, align 4
  br label %1317

1317:                                             ; preds = %1315, %179
  %1318 = phi i32 [ %1316, %1315 ], [ %188, %179 ]
  %1319 = load i64*, i64** %53, align 8
  %1320 = load i64, i64* %1319, align 8
  %1321 = add nsw i32 %1318, 1
  store i32 %1321, i32* %54, align 4
  %1322 = sext i32 %1318 to i64
  %1323 = add i64 %1320, 11
  %1324 = add i64 %1323, %1322
  %1325 = inttoptr i64 %1324 to i8*
  store i8 110, i8* %1325, align 1
  %1326 = load i32, i32* %54, align 4
  %1327 = load i32, i32* %55, align 8
  %1328 = icmp eq i32 %1326, %1327
  br i1 %1328, label %1329, label %1331

1329:                                             ; preds = %1317
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1330 = load i32, i32* %54, align 4
  br label %1331

1331:                                             ; preds = %1329, %1317
  %1332 = phi i32 [ %1330, %1329 ], [ %1326, %1317 ]
  %1333 = load i64*, i64** %53, align 8
  %1334 = load i64, i64* %1333, align 8
  %1335 = add nsw i32 %1332, 1
  store i32 %1335, i32* %54, align 4
  %1336 = sext i32 %1332 to i64
  %1337 = add i64 %1334, 11
  %1338 = add i64 %1337, %1336
  %1339 = inttoptr i64 %1338 to i8*
  store i8 111, i8* %1339, align 1
  %1340 = load i32, i32* %54, align 4
  %1341 = load i32, i32* %55, align 8
  %1342 = icmp eq i32 %1340, %1341
  br i1 %1342, label %1343, label %1345

1343:                                             ; preds = %1331
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1344 = load i32, i32* %54, align 4
  br label %1345

1345:                                             ; preds = %1343, %1331
  %1346 = phi i32 [ %1344, %1343 ], [ %1340, %1331 ]
  %1347 = load i64*, i64** %53, align 8
  %1348 = load i64, i64* %1347, align 8
  %1349 = add nsw i32 %1346, 1
  store i32 %1349, i32* %54, align 4
  %1350 = sext i32 %1346 to i64
  %1351 = add i64 %1348, 11
  %1352 = add i64 %1351, %1350
  %1353 = inttoptr i64 %1352 to i8*
  store i8 110, i8* %1353, align 1
  %1354 = load i32, i32* %54, align 4
  %1355 = load i32, i32* %55, align 8
  %1356 = icmp eq i32 %1354, %1355
  br i1 %1356, label %1357, label %1359

1357:                                             ; preds = %1345
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1358 = load i32, i32* %54, align 4
  br label %1359

1359:                                             ; preds = %1357, %1345
  %1360 = phi i32 [ %1358, %1357 ], [ %1354, %1345 ]
  %1361 = load i64*, i64** %53, align 8
  %1362 = load i64, i64* %1361, align 8
  %1363 = add nsw i32 %1360, 1
  store i32 %1363, i32* %54, align 4
  %1364 = sext i32 %1360 to i64
  %1365 = add i64 %1362, 11
  %1366 = add i64 %1365, %1364
  %1367 = inttoptr i64 %1366 to i8*
  store i8 121, i8* %1367, align 1
  %1368 = load i32, i32* %54, align 4
  %1369 = load i32, i32* %55, align 8
  %1370 = icmp eq i32 %1368, %1369
  br i1 %1370, label %1371, label %1373

1371:                                             ; preds = %1359
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1372 = load i32, i32* %54, align 4
  br label %1373

1373:                                             ; preds = %1371, %1359
  %1374 = phi i32 [ %1372, %1371 ], [ %1368, %1359 ]
  %1375 = load i64*, i64** %53, align 8
  %1376 = load i64, i64* %1375, align 8
  %1377 = add nsw i32 %1374, 1
  store i32 %1377, i32* %54, align 4
  %1378 = sext i32 %1374 to i64
  %1379 = add i64 %1376, 11
  %1380 = add i64 %1379, %1378
  %1381 = inttoptr i64 %1380 to i8*
  store i8 109, i8* %1381, align 1
  %1382 = load i32, i32* %54, align 4
  %1383 = load i32, i32* %55, align 8
  %1384 = icmp eq i32 %1382, %1383
  br i1 %1384, label %1385, label %1387

1385:                                             ; preds = %1373
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1386 = load i32, i32* %54, align 4
  br label %1387

1387:                                             ; preds = %1385, %1373
  %1388 = phi i32 [ %1386, %1385 ], [ %1382, %1373 ]
  %1389 = load i64*, i64** %53, align 8
  %1390 = load i64, i64* %1389, align 8
  %1391 = add nsw i32 %1388, 1
  store i32 %1391, i32* %54, align 4
  %1392 = sext i32 %1388 to i64
  %1393 = add i64 %1390, 11
  %1394 = add i64 %1393, %1392
  %1395 = inttoptr i64 %1394 to i8*
  store i8 111, i8* %1395, align 1
  %1396 = load i32, i32* %54, align 4
  %1397 = load i32, i32* %55, align 8
  %1398 = icmp eq i32 %1396, %1397
  br i1 %1398, label %1399, label %1401

1399:                                             ; preds = %1387
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1400 = load i32, i32* %54, align 4
  br label %1401

1401:                                             ; preds = %1399, %1387
  %1402 = phi i32 [ %1400, %1399 ], [ %1396, %1387 ]
  %1403 = load i64*, i64** %53, align 8
  %1404 = load i64, i64* %1403, align 8
  %1405 = add nsw i32 %1402, 1
  store i32 %1405, i32* %54, align 4
  %1406 = sext i32 %1402 to i64
  %1407 = add i64 %1404, 11
  %1408 = add i64 %1407, %1406
  %1409 = inttoptr i64 %1408 to i8*
  store i8 117, i8* %1409, align 1
  %1410 = load i32, i32* %54, align 4
  %1411 = load i32, i32* %55, align 8
  %1412 = icmp eq i32 %1410, %1411
  br i1 %1412, label %1413, label %1415

1413:                                             ; preds = %1401
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1414 = load i32, i32* %54, align 4
  br label %1415

1415:                                             ; preds = %1413, %1401
  %1416 = phi i32 [ %1414, %1413 ], [ %1410, %1401 ]
  %1417 = load i64*, i64** %53, align 8
  %1418 = load i64, i64* %1417, align 8
  %1419 = add nsw i32 %1416, 1
  store i32 %1419, i32* %54, align 4
  %1420 = sext i32 %1416 to i64
  %1421 = add i64 %1418, 11
  %1422 = add i64 %1421, %1420
  %1423 = inttoptr i64 %1422 to i8*
  store i8 115, i8* %1423, align 1
  %1424 = load i32, i32* %54, align 4
  %1425 = load i32, i32* %55, align 8
  %1426 = icmp eq i32 %1424, %1425
  br i1 %1426, label %1427, label %1429

1427:                                             ; preds = %1415
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1428 = load i32, i32* %54, align 4
  br label %1429

1429:                                             ; preds = %1427, %1415
  %1430 = phi i32 [ %1428, %1427 ], [ %1424, %1415 ]
  %1431 = load i64*, i64** %53, align 8
  %1432 = load i64, i64* %1431, align 8
  %1433 = add nsw i32 %1430, 1
  store i32 %1433, i32* %54, align 4
  %1434 = sext i32 %1430 to i64
  %1435 = add i64 %1432, 11
  %1436 = add i64 %1435, %1434
  %1437 = inttoptr i64 %1436 to i8*
  store i8 62, i8* %1437, align 1
  %1438 = load i32, i32* %54, align 4
  %1439 = load i32, i32* %55, align 8
  %1440 = icmp eq i32 %1438, %1439
  br i1 %1440, label %1441, label %206

1441:                                             ; preds = %1429
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %206

1442:                                             ; preds = %193
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1443 = load i32, i32* %54, align 4
  br label %1444

1444:                                             ; preds = %1442, %193
  %1445 = phi i32 [ %1443, %1442 ], [ %203, %193 ]
  %1446 = load i64*, i64** %53, align 8
  %1447 = load i64, i64* %1446, align 8
  %1448 = add nsw i32 %1445, 1
  store i32 %1448, i32* %54, align 4
  %1449 = shl nsw i32 %1445, 1
  %1450 = sext i32 %1449 to i64
  %1451 = add i64 %1447, 11
  %1452 = add i64 %1451, %1450
  %1453 = inttoptr i64 %1452 to i16*
  store i16 110, i16* %1453, align 2
  %1454 = load i32, i32* %54, align 4
  %1455 = load i32, i32* %55, align 8
  %1456 = icmp eq i32 %1454, %1455
  br i1 %1456, label %1457, label %1459

1457:                                             ; preds = %1444
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1458 = load i32, i32* %54, align 4
  br label %1459

1459:                                             ; preds = %1457, %1444
  %1460 = phi i32 [ %1458, %1457 ], [ %1454, %1444 ]
  %1461 = load i64*, i64** %53, align 8
  %1462 = load i64, i64* %1461, align 8
  %1463 = add nsw i32 %1460, 1
  store i32 %1463, i32* %54, align 4
  %1464 = shl nsw i32 %1460, 1
  %1465 = sext i32 %1464 to i64
  %1466 = add i64 %1462, 11
  %1467 = add i64 %1466, %1465
  %1468 = inttoptr i64 %1467 to i16*
  store i16 111, i16* %1468, align 2
  %1469 = load i32, i32* %54, align 4
  %1470 = load i32, i32* %55, align 8
  %1471 = icmp eq i32 %1469, %1470
  br i1 %1471, label %1472, label %1474

1472:                                             ; preds = %1459
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1473 = load i32, i32* %54, align 4
  br label %1474

1474:                                             ; preds = %1472, %1459
  %1475 = phi i32 [ %1473, %1472 ], [ %1469, %1459 ]
  %1476 = load i64*, i64** %53, align 8
  %1477 = load i64, i64* %1476, align 8
  %1478 = add nsw i32 %1475, 1
  store i32 %1478, i32* %54, align 4
  %1479 = shl nsw i32 %1475, 1
  %1480 = sext i32 %1479 to i64
  %1481 = add i64 %1477, 11
  %1482 = add i64 %1481, %1480
  %1483 = inttoptr i64 %1482 to i16*
  store i16 110, i16* %1483, align 2
  %1484 = load i32, i32* %54, align 4
  %1485 = load i32, i32* %55, align 8
  %1486 = icmp eq i32 %1484, %1485
  br i1 %1486, label %1487, label %1489

1487:                                             ; preds = %1474
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1488 = load i32, i32* %54, align 4
  br label %1489

1489:                                             ; preds = %1487, %1474
  %1490 = phi i32 [ %1488, %1487 ], [ %1484, %1474 ]
  %1491 = load i64*, i64** %53, align 8
  %1492 = load i64, i64* %1491, align 8
  %1493 = add nsw i32 %1490, 1
  store i32 %1493, i32* %54, align 4
  %1494 = shl nsw i32 %1490, 1
  %1495 = sext i32 %1494 to i64
  %1496 = add i64 %1492, 11
  %1497 = add i64 %1496, %1495
  %1498 = inttoptr i64 %1497 to i16*
  store i16 121, i16* %1498, align 2
  %1499 = load i32, i32* %54, align 4
  %1500 = load i32, i32* %55, align 8
  %1501 = icmp eq i32 %1499, %1500
  br i1 %1501, label %1502, label %1504

1502:                                             ; preds = %1489
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1503 = load i32, i32* %54, align 4
  br label %1504

1504:                                             ; preds = %1502, %1489
  %1505 = phi i32 [ %1503, %1502 ], [ %1499, %1489 ]
  %1506 = load i64*, i64** %53, align 8
  %1507 = load i64, i64* %1506, align 8
  %1508 = add nsw i32 %1505, 1
  store i32 %1508, i32* %54, align 4
  %1509 = shl nsw i32 %1505, 1
  %1510 = sext i32 %1509 to i64
  %1511 = add i64 %1507, 11
  %1512 = add i64 %1511, %1510
  %1513 = inttoptr i64 %1512 to i16*
  store i16 109, i16* %1513, align 2
  %1514 = load i32, i32* %54, align 4
  %1515 = load i32, i32* %55, align 8
  %1516 = icmp eq i32 %1514, %1515
  br i1 %1516, label %1517, label %1519

1517:                                             ; preds = %1504
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1518 = load i32, i32* %54, align 4
  br label %1519

1519:                                             ; preds = %1517, %1504
  %1520 = phi i32 [ %1518, %1517 ], [ %1514, %1504 ]
  %1521 = load i64*, i64** %53, align 8
  %1522 = load i64, i64* %1521, align 8
  %1523 = add nsw i32 %1520, 1
  store i32 %1523, i32* %54, align 4
  %1524 = shl nsw i32 %1520, 1
  %1525 = sext i32 %1524 to i64
  %1526 = add i64 %1522, 11
  %1527 = add i64 %1526, %1525
  %1528 = inttoptr i64 %1527 to i16*
  store i16 111, i16* %1528, align 2
  %1529 = load i32, i32* %54, align 4
  %1530 = load i32, i32* %55, align 8
  %1531 = icmp eq i32 %1529, %1530
  br i1 %1531, label %1532, label %1534

1532:                                             ; preds = %1519
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1533 = load i32, i32* %54, align 4
  br label %1534

1534:                                             ; preds = %1532, %1519
  %1535 = phi i32 [ %1533, %1532 ], [ %1529, %1519 ]
  %1536 = load i64*, i64** %53, align 8
  %1537 = load i64, i64* %1536, align 8
  %1538 = add nsw i32 %1535, 1
  store i32 %1538, i32* %54, align 4
  %1539 = shl nsw i32 %1535, 1
  %1540 = sext i32 %1539 to i64
  %1541 = add i64 %1537, 11
  %1542 = add i64 %1541, %1540
  %1543 = inttoptr i64 %1542 to i16*
  store i16 117, i16* %1543, align 2
  %1544 = load i32, i32* %54, align 4
  %1545 = load i32, i32* %55, align 8
  %1546 = icmp eq i32 %1544, %1545
  br i1 %1546, label %1547, label %1549

1547:                                             ; preds = %1534
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1548 = load i32, i32* %54, align 4
  br label %1549

1549:                                             ; preds = %1547, %1534
  %1550 = phi i32 [ %1548, %1547 ], [ %1544, %1534 ]
  %1551 = load i64*, i64** %53, align 8
  %1552 = load i64, i64* %1551, align 8
  %1553 = add nsw i32 %1550, 1
  store i32 %1553, i32* %54, align 4
  %1554 = shl nsw i32 %1550, 1
  %1555 = sext i32 %1554 to i64
  %1556 = add i64 %1552, 11
  %1557 = add i64 %1556, %1555
  %1558 = inttoptr i64 %1557 to i16*
  store i16 115, i16* %1558, align 2
  %1559 = load i32, i32* %54, align 4
  %1560 = load i32, i32* %55, align 8
  %1561 = icmp eq i32 %1559, %1560
  br i1 %1561, label %1562, label %1564

1562:                                             ; preds = %1549
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1563 = load i32, i32* %54, align 4
  br label %1564

1564:                                             ; preds = %1562, %1549
  %1565 = phi i32 [ %1563, %1562 ], [ %1559, %1549 ]
  %1566 = load i64*, i64** %53, align 8
  %1567 = load i64, i64* %1566, align 8
  %1568 = add nsw i32 %1565, 1
  store i32 %1568, i32* %54, align 4
  %1569 = shl nsw i32 %1565, 1
  %1570 = sext i32 %1569 to i64
  %1571 = add i64 %1567, 11
  %1572 = add i64 %1571, %1570
  %1573 = inttoptr i64 %1572 to i16*
  store i16 62, i16* %1573, align 2
  %1574 = load i32, i32* %54, align 4
  %1575 = load i32, i32* %55, align 8
  %1576 = icmp eq i32 %1574, %1575
  br i1 %1576, label %1577, label %206

1577:                                             ; preds = %1564
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %206

1578:                                             ; preds = %79
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1579 = load i32, i32* %54, align 4
  br label %1580

1580:                                             ; preds = %1578, %79
  %1581 = phi i32 [ %1579, %1578 ], [ %88, %79 ]
  %1582 = load i64*, i64** %53, align 8
  %1583 = load i64, i64* %1582, align 8
  %1584 = add nsw i32 %1581, 1
  store i32 %1584, i32* %54, align 4
  %1585 = sext i32 %1581 to i64
  %1586 = add i64 %1583, 11
  %1587 = add i64 %1586, %1585
  %1588 = inttoptr i64 %1587 to i8*
  store i8 97, i8* %1588, align 1
  %1589 = load i32, i32* %54, align 4
  %1590 = load i32, i32* %55, align 8
  %1591 = icmp eq i32 %1589, %1590
  br i1 %1591, label %1592, label %1594

1592:                                             ; preds = %1580
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1593 = load i32, i32* %54, align 4
  br label %1594

1594:                                             ; preds = %1592, %1580
  %1595 = phi i32 [ %1593, %1592 ], [ %1589, %1580 ]
  %1596 = load i64*, i64** %53, align 8
  %1597 = load i64, i64* %1596, align 8
  %1598 = add nsw i32 %1595, 1
  store i32 %1598, i32* %54, align 4
  %1599 = sext i32 %1595 to i64
  %1600 = add i64 %1597, 11
  %1601 = add i64 %1600, %1599
  %1602 = inttoptr i64 %1601 to i8*
  store i8 108, i8* %1602, align 1
  %1603 = load i32, i32* %54, align 4
  %1604 = load i32, i32* %55, align 8
  %1605 = icmp eq i32 %1603, %1604
  br i1 %1605, label %1606, label %1608

1606:                                             ; preds = %1594
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1607 = load i32, i32* %54, align 4
  br label %1608

1608:                                             ; preds = %1606, %1594
  %1609 = phi i32 [ %1607, %1606 ], [ %1603, %1594 ]
  %1610 = load i64*, i64** %53, align 8
  %1611 = load i64, i64* %1610, align 8
  %1612 = add nsw i32 %1609, 1
  store i32 %1612, i32* %54, align 4
  %1613 = sext i32 %1609 to i64
  %1614 = add i64 %1611, 11
  %1615 = add i64 %1614, %1613
  %1616 = inttoptr i64 %1615 to i8*
  store i8 32, i8* %1616, align 1
  %1617 = load i32, i32* %54, align 4
  %1618 = load i32, i32* %55, align 8
  %1619 = icmp eq i32 %1617, %1618
  br i1 %1619, label %1620, label %1622

1620:                                             ; preds = %1608
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1621 = load i32, i32* %54, align 4
  br label %1622

1622:                                             ; preds = %1620, %1608
  %1623 = phi i32 [ %1621, %1620 ], [ %1617, %1608 ]
  %1624 = load i64*, i64** %53, align 8
  %1625 = load i64, i64* %1624, align 8
  %1626 = add nsw i32 %1623, 1
  store i32 %1626, i32* %54, align 4
  %1627 = sext i32 %1623 to i64
  %1628 = add i64 %1625, 11
  %1629 = add i64 %1628, %1627
  %1630 = inttoptr i64 %1629 to i8*
  store i8 97, i8* %1630, align 1
  %1631 = load i32, i32* %54, align 4
  %1632 = load i32, i32* %55, align 8
  %1633 = icmp eq i32 %1631, %1632
  br i1 %1633, label %1634, label %1636

1634:                                             ; preds = %1622
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1635 = load i32, i32* %54, align 4
  br label %1636

1636:                                             ; preds = %1634, %1622
  %1637 = phi i32 [ %1635, %1634 ], [ %1631, %1622 ]
  %1638 = load i64*, i64** %53, align 8
  %1639 = load i64, i64* %1638, align 8
  %1640 = add nsw i32 %1637, 1
  store i32 %1640, i32* %54, align 4
  %1641 = sext i32 %1637 to i64
  %1642 = add i64 %1639, 11
  %1643 = add i64 %1642, %1641
  %1644 = inttoptr i64 %1643 to i8*
  store i8 116, i8* %1644, align 1
  %1645 = load i32, i32* %54, align 4
  %1646 = load i32, i32* %55, align 8
  %1647 = icmp eq i32 %1645, %1646
  br i1 %1647, label %1648, label %1650

1648:                                             ; preds = %1636
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1649 = load i32, i32* %54, align 4
  br label %1650

1650:                                             ; preds = %1648, %1636
  %1651 = phi i32 [ %1649, %1648 ], [ %1645, %1636 ]
  %1652 = load i64*, i64** %53, align 8
  %1653 = load i64, i64* %1652, align 8
  %1654 = add nsw i32 %1651, 1
  store i32 %1654, i32* %54, align 4
  %1655 = sext i32 %1651 to i64
  %1656 = add i64 %1653, 11
  %1657 = add i64 %1656, %1655
  %1658 = inttoptr i64 %1657 to i8*
  store i8 32, i8* %1658, align 1
  %1659 = load i32, i32* %54, align 4
  %1660 = load i32, i32* %55, align 8
  %1661 = icmp eq i32 %1659, %1660
  br i1 %1661, label %1662, label %106

1662:                                             ; preds = %1650
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %106

1663:                                             ; preds = %93
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1664 = load i32, i32* %54, align 4
  br label %1665

1665:                                             ; preds = %1663, %93
  %1666 = phi i32 [ %1664, %1663 ], [ %103, %93 ]
  %1667 = load i64*, i64** %53, align 8
  %1668 = load i64, i64* %1667, align 8
  %1669 = add nsw i32 %1666, 1
  store i32 %1669, i32* %54, align 4
  %1670 = shl nsw i32 %1666, 1
  %1671 = sext i32 %1670 to i64
  %1672 = add i64 %1668, 11
  %1673 = add i64 %1672, %1671
  %1674 = inttoptr i64 %1673 to i16*
  store i16 97, i16* %1674, align 2
  %1675 = load i32, i32* %54, align 4
  %1676 = load i32, i32* %55, align 8
  %1677 = icmp eq i32 %1675, %1676
  br i1 %1677, label %1678, label %1680

1678:                                             ; preds = %1665
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1679 = load i32, i32* %54, align 4
  br label %1680

1680:                                             ; preds = %1678, %1665
  %1681 = phi i32 [ %1679, %1678 ], [ %1675, %1665 ]
  %1682 = load i64*, i64** %53, align 8
  %1683 = load i64, i64* %1682, align 8
  %1684 = add nsw i32 %1681, 1
  store i32 %1684, i32* %54, align 4
  %1685 = shl nsw i32 %1681, 1
  %1686 = sext i32 %1685 to i64
  %1687 = add i64 %1683, 11
  %1688 = add i64 %1687, %1686
  %1689 = inttoptr i64 %1688 to i16*
  store i16 108, i16* %1689, align 2
  %1690 = load i32, i32* %54, align 4
  %1691 = load i32, i32* %55, align 8
  %1692 = icmp eq i32 %1690, %1691
  br i1 %1692, label %1693, label %1695

1693:                                             ; preds = %1680
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1694 = load i32, i32* %54, align 4
  br label %1695

1695:                                             ; preds = %1693, %1680
  %1696 = phi i32 [ %1694, %1693 ], [ %1690, %1680 ]
  %1697 = load i64*, i64** %53, align 8
  %1698 = load i64, i64* %1697, align 8
  %1699 = add nsw i32 %1696, 1
  store i32 %1699, i32* %54, align 4
  %1700 = shl nsw i32 %1696, 1
  %1701 = sext i32 %1700 to i64
  %1702 = add i64 %1698, 11
  %1703 = add i64 %1702, %1701
  %1704 = inttoptr i64 %1703 to i16*
  store i16 32, i16* %1704, align 2
  %1705 = load i32, i32* %54, align 4
  %1706 = load i32, i32* %55, align 8
  %1707 = icmp eq i32 %1705, %1706
  br i1 %1707, label %1708, label %1710

1708:                                             ; preds = %1695
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1709 = load i32, i32* %54, align 4
  br label %1710

1710:                                             ; preds = %1708, %1695
  %1711 = phi i32 [ %1709, %1708 ], [ %1705, %1695 ]
  %1712 = load i64*, i64** %53, align 8
  %1713 = load i64, i64* %1712, align 8
  %1714 = add nsw i32 %1711, 1
  store i32 %1714, i32* %54, align 4
  %1715 = shl nsw i32 %1711, 1
  %1716 = sext i32 %1715 to i64
  %1717 = add i64 %1713, 11
  %1718 = add i64 %1717, %1716
  %1719 = inttoptr i64 %1718 to i16*
  store i16 97, i16* %1719, align 2
  %1720 = load i32, i32* %54, align 4
  %1721 = load i32, i32* %55, align 8
  %1722 = icmp eq i32 %1720, %1721
  br i1 %1722, label %1723, label %1725

1723:                                             ; preds = %1710
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1724 = load i32, i32* %54, align 4
  br label %1725

1725:                                             ; preds = %1723, %1710
  %1726 = phi i32 [ %1724, %1723 ], [ %1720, %1710 ]
  %1727 = load i64*, i64** %53, align 8
  %1728 = load i64, i64* %1727, align 8
  %1729 = add nsw i32 %1726, 1
  store i32 %1729, i32* %54, align 4
  %1730 = shl nsw i32 %1726, 1
  %1731 = sext i32 %1730 to i64
  %1732 = add i64 %1728, 11
  %1733 = add i64 %1732, %1731
  %1734 = inttoptr i64 %1733 to i16*
  store i16 116, i16* %1734, align 2
  %1735 = load i32, i32* %54, align 4
  %1736 = load i32, i32* %55, align 8
  %1737 = icmp eq i32 %1735, %1736
  br i1 %1737, label %1738, label %1740

1738:                                             ; preds = %1725
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  %1739 = load i32, i32* %54, align 4
  br label %1740

1740:                                             ; preds = %1738, %1725
  %1741 = phi i32 [ %1739, %1738 ], [ %1735, %1725 ]
  %1742 = load i64*, i64** %53, align 8
  %1743 = load i64, i64* %1742, align 8
  %1744 = add nsw i32 %1741, 1
  store i32 %1744, i32* %54, align 4
  %1745 = shl nsw i32 %1741, 1
  %1746 = sext i32 %1745 to i64
  %1747 = add i64 %1743, 11
  %1748 = add i64 %1747, %1746
  %1749 = inttoptr i64 %1748 to i16*
  store i16 32, i16* %1749, align 2
  %1750 = load i32, i32* %54, align 4
  %1751 = load i32, i32* %55, align 8
  %1752 = icmp eq i32 %1750, %1751
  br i1 %1752, label %1753, label %106

1753:                                             ; preds = %1740
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %5) #6
  br label %106
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal14StackFrameInfo15GetFunctionNameENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = load i64, i64* %0, align 8
  %3 = and i64 %2, -262144
  %4 = or i64 %3, 16
  %5 = inttoptr i64 %4 to i64*
  %6 = load i64, i64* %5, align 16
  %7 = add i64 %6, -41416
  %8 = inttoptr i64 %7 to %"class.v8::internal::Isolate"*
  %9 = add i64 %2, 19
  %10 = inttoptr i64 %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = and i64 %2, -4294967296
  br i1 %13, label %57, label %15

15:                                               ; preds = %1
  %16 = add i64 %2, 3
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %14, %19
  %21 = add i64 %20, 111
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %14, %24
  %26 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 4
  %27 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %26, align 8
  %28 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %27, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %15
  %30 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %27, i64 %25) #6
  br label %44

31:                                               ; preds = %15
  %32 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 0
  %33 = load i64*, i64** %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 1
  %35 = load i64*, i64** %34, align 8
  %36 = icmp eq i64* %33, %35
  br i1 %36, label %37, label %39

37:                                               ; preds = %31
  %38 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %8) #6
  br label %39

39:                                               ; preds = %37, %31
  %40 = phi i64* [ %38, %37 ], [ %33, %31 ]
  %41 = ptrtoint i64* %40 to i64
  %42 = add i64 %41, 8
  %43 = inttoptr i64 %42 to i64*
  store i64* %43, i64** %32, align 8
  store i64 %25, i64* %40, align 8
  br label %44

44:                                               ; preds = %29, %39
  %45 = phi i64* [ %30, %29 ], [ %40, %39 ]
  %46 = load i64, i64* %0, align 8
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = ashr i32 %49, 1
  %51 = tail call i64* @_ZN2v88internal16WasmModuleObject21GetFunctionNameOrNullEPNS0_7IsolateENS0_6HandleIS1_EEj(%"class.v8::internal::Isolate"* %8, i64* %45, i32 %50) #6
  %52 = icmp eq i64* %51, null
  br i1 %52, label %53, label %176

53:                                               ; preds = %44
  %54 = inttoptr i64 %7 to %"class.v8::internal::Factory"*
  %55 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %54, i64 176
  %56 = bitcast %"class.v8::internal::Factory"* %55 to i64*
  br label %176

57:                                               ; preds = %1
  %58 = add i64 %2, 7
  %59 = inttoptr i64 %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %14, %61
  %63 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 4
  %64 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %63, align 8
  %65 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %57
  %67 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %64, i64 %62) #6
  br label %81

68:                                               ; preds = %57
  %69 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 0
  %70 = load i64*, i64** %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 1
  %72 = load i64*, i64** %71, align 8
  %73 = icmp eq i64* %70, %72
  br i1 %73, label %74, label %76

74:                                               ; preds = %68
  %75 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %8) #6
  br label %76

76:                                               ; preds = %74, %68
  %77 = phi i64* [ %75, %74 ], [ %70, %68 ]
  %78 = ptrtoint i64* %77 to i64
  %79 = add i64 %78, 8
  %80 = inttoptr i64 %79 to i64*
  store i64* %80, i64** %69, align 8
  store i64 %62, i64* %77, align 8
  br label %81

81:                                               ; preds = %66, %76
  %82 = phi i64* [ %67, %66 ], [ %77, %76 ]
  %83 = tail call i64* @_ZN2v88internal10JSFunction12GetDebugNameENS0_6HandleIS1_EE(i64* %82) #6
  %84 = load i64, i64* %83, align 8
  %85 = add i64 %84, 7
  %86 = inttoptr i64 %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %176

89:                                               ; preds = %81
  %90 = load i64, i64* %0, align 8
  %91 = add i64 %90, 19
  %92 = inttoptr i64 %91 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = and i64 %90, -4294967296
  br i1 %95, label %113, label %97

97:                                               ; preds = %89
  %98 = add i64 %90, 3
  %99 = inttoptr i64 %98 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = zext i32 %100 to i64
  %102 = or i64 %96, %101
  %103 = add i64 %102, 111
  %104 = inttoptr i64 %103 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = zext i32 %105 to i64
  %107 = or i64 %96, %106
  %108 = add i64 %107, 19
  %109 = inttoptr i64 %108 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = or i64 %96, %111
  br label %161

113:                                              ; preds = %89
  %114 = add i64 %90, 7
  %115 = inttoptr i64 %114 to i32*
  %116 = load i32, i32* %115, align 4
  %117 = zext i32 %116 to i64
  %118 = or i64 %96, %117
  %119 = add i64 %118, 11
  %120 = inttoptr i64 %119 to i32*
  %121 = load atomic i32, i32* %120 monotonic, align 4
  %122 = zext i32 %121 to i64
  %123 = or i64 %96, %122
  %124 = add i64 %123, 15
  %125 = inttoptr i64 %124 to i32*
  %126 = load atomic i32, i32* %125 acquire, align 4
  %127 = zext i32 %126 to i64
  %128 = or i64 %96, %127
  %129 = add i64 %128, -1
  %130 = inttoptr i64 %129 to i32*
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = zext i32 %131 to i64
  %133 = or i64 %96, %132
  %134 = add i64 %133, 7
  %135 = inttoptr i64 %134 to i16*
  %136 = load atomic i16, i16* %135 monotonic, align 2
  %137 = icmp eq i16 %136, 100
  br i1 %137, label %138, label %144

138:                                              ; preds = %113
  %139 = add i64 %128, 11
  %140 = inttoptr i64 %139 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = zext i32 %141 to i64
  %143 = or i64 %96, %142
  br label %144

144:                                              ; preds = %138, %113
  %145 = phi i64 [ %143, %138 ], [ %128, %113 ]
  %146 = and i64 %145, 1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %159, label %148

148:                                              ; preds = %144
  %149 = and i64 %145, -4294967296
  %150 = add i64 %145, -1
  %151 = inttoptr i64 %150 to i32*
  %152 = load atomic i32, i32* %151 monotonic, align 4
  %153 = zext i32 %152 to i64
  %154 = or i64 %149, %153
  %155 = add i64 %154, 7
  %156 = inttoptr i64 %155 to i16*
  %157 = load atomic i16, i16* %156 monotonic, align 2
  %158 = icmp eq i16 %157, 112
  br i1 %158, label %161, label %159

159:                                              ; preds = %148, %144
  %160 = inttoptr i64 %7 to %"class.v8::internal::Factory"*
  br label %172

161:                                              ; preds = %97, %148
  %162 = phi i64 [ %112, %97 ], [ %145, %148 ]
  %163 = add i64 %162, 47
  %164 = inttoptr i64 %163 to i32*
  %165 = load i32, i32* %164, align 4
  %166 = and i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = inttoptr i64 %7 to %"class.v8::internal::Factory"*
  br i1 %167, label %172, label %169

169:                                              ; preds = %161
  %170 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %168, i64 2712
  %171 = bitcast %"class.v8::internal::Factory"* %170 to i64*
  br label %176

172:                                              ; preds = %161, %159
  %173 = phi %"class.v8::internal::Factory"* [ %160, %159 ], [ %168, %161 ]
  %174 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %173, i64 176
  %175 = bitcast %"class.v8::internal::Factory"* %174 to i64*
  br label %176

176:                                              ; preds = %44, %169, %172, %81, %53
  %177 = phi i64* [ %56, %53 ], [ %171, %169 ], [ %175, %172 ], [ %83, %81 ], [ %51, %44 ]
  ret i64* %177
}

declare i64* @_ZN2v88internal16WasmModuleObject21GetFunctionNameOrNullEPNS0_7IsolateENS0_6HandleIS1_EEj(%"class.v8::internal::Isolate"*, i64*, i32) local_unnamed_addr #3

declare i64* @_ZN2v88internal10JSFunction12GetDebugNameENS0_6HandleIS1_EE(i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal14StackFrameInfo13GetMethodNameENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::String", align 8
  %3 = alloca i32, align 4
  %4 = alloca %"class.v8::internal::StringShape", align 4
  %5 = alloca %"class.v8::internal::String", align 8
  %6 = alloca %"class.v8::internal::PrototypeIterator", align 8
  %7 = alloca %"class.v8::internal::Context", align 8
  %8 = alloca %"class.v8::internal::Representation", align 1
  %9 = alloca %"class.v8::internal::PrototypeIterator", align 8
  %10 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %11 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %12 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %13 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %14 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %15 = alloca %"class.v8::internal::LookupIterator::Key", align 8
  %16 = alloca %"class.v8::internal::LookupIterator", align 8
  %17 = load i64, i64* %0, align 8
  %18 = and i64 %17, -262144
  %19 = or i64 %18, 16
  %20 = inttoptr i64 %19 to i64*
  %21 = load i64, i64* %20, align 16
  %22 = add i64 %21, -41416
  %23 = inttoptr i64 %22 to %"class.v8::internal::Isolate"*
  %24 = and i64 %17, -4294967296
  %25 = add i64 %17, 3
  %26 = inttoptr i64 %25 to i32*
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i64
  %29 = or i64 %24, %28
  %30 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 31, i32 4
  %31 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %30, align 8
  %32 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %31, null
  br i1 %32, label %35, label %33

33:                                               ; preds = %1
  %34 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %31, i64 %29) #6
  br label %48

35:                                               ; preds = %1
  %36 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 31, i32 0
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 31, i32 1
  %39 = load i64*, i64** %38, align 8
  %40 = icmp eq i64* %37, %39
  br i1 %40, label %41, label %43

41:                                               ; preds = %35
  %42 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %23) #6
  br label %43

43:                                               ; preds = %41, %35
  %44 = phi i64* [ %42, %41 ], [ %37, %35 ]
  %45 = ptrtoint i64* %44 to i64
  %46 = add i64 %45, 8
  %47 = inttoptr i64 %46 to i64*
  store i64* %47, i64** %36, align 8
  store i64 %29, i64* %44, align 8
  br label %48

48:                                               ; preds = %33, %43
  %49 = phi i64* [ %34, %33 ], [ %44, %43 ]
  %50 = load i64, i64* %0, align 8
  %51 = add i64 %50, 19
  %52 = inttoptr i64 %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %48
  %57 = inttoptr i64 %22 to %"class.v8::internal::Factory"*
  %58 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %57, i64 176
  %59 = bitcast %"class.v8::internal::Factory"* %58 to i64*
  br label %937

60:                                               ; preds = %48
  %61 = load i64, i64* %49, align 8
  %62 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 0, i32 7, i32 0, i64 6
  %63 = load i64, i64* %62, align 8
  %64 = trunc i64 %61 to i32
  %65 = trunc i64 %63 to i32
  %66 = icmp eq i32 %64, %65
  br i1 %66, label %72, label %67

67:                                               ; preds = %60
  %68 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 0, i32 7, i32 0, i64 4
  %69 = load i64, i64* %68, align 8
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %64, %70
  br i1 %71, label %72, label %76

72:                                               ; preds = %60, %67
  %73 = inttoptr i64 %22 to %"class.v8::internal::Factory"*
  %74 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %73, i64 176
  %75 = bitcast %"class.v8::internal::Factory"* %74 to i64*
  br label %937

76:                                               ; preds = %67
  %77 = and i64 %61, 1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %90, label %79

79:                                               ; preds = %76
  %80 = and i64 %61, -4294967296
  %81 = add i64 %61, -1
  %82 = inttoptr i64 %81 to i32*
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = zext i32 %83 to i64
  %85 = or i64 %80, %84
  %86 = add i64 %85, 7
  %87 = inttoptr i64 %86 to i16*
  %88 = load atomic i16, i16* %87 monotonic, align 2
  %89 = icmp ugt i16 %88, 185
  br i1 %89, label %92, label %90

90:                                               ; preds = %79, %76
  %91 = tail call i64* @_ZN2v88internal6Object12ToObjectImplEPNS0_7IsolateENS0_6HandleIS1_EEPKc(%"class.v8::internal::Isolate"* %23, i64* %49, i8* null) #6
  br label %92

92:                                               ; preds = %79, %90
  %93 = phi i64* [ %91, %90 ], [ %49, %79 ]
  %94 = icmp eq i64* %93, null
  br i1 %94, label %95, label %96, !prof !3

95:                                               ; preds = %92
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29, i64 0, i64 0)) #9
  unreachable

96:                                               ; preds = %92
  %97 = load i64, i64* %0, align 8
  %98 = and i64 %97, -4294967296
  %99 = add i64 %97, 7
  %100 = inttoptr i64 %99 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i64
  %103 = or i64 %98, %102
  %104 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %30, align 8
  %105 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %104, null
  br i1 %105, label %109, label %106

106:                                              ; preds = %96
  %107 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %104, i64 %103) #6
  %108 = load i64, i64* %107, align 8
  br label %122

109:                                              ; preds = %96
  %110 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 31, i32 0
  %111 = load i64*, i64** %110, align 8
  %112 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 31, i32 1
  %113 = load i64*, i64** %112, align 8
  %114 = icmp eq i64* %111, %113
  br i1 %114, label %115, label %117

115:                                              ; preds = %109
  %116 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %23) #6
  br label %117

117:                                              ; preds = %115, %109
  %118 = phi i64* [ %116, %115 ], [ %111, %109 ]
  %119 = ptrtoint i64* %118 to i64
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %120 to i64*
  store i64* %121, i64** %110, align 8
  store i64 %103, i64* %118, align 8
  br label %122

122:                                              ; preds = %106, %117
  %123 = phi i64 [ %108, %106 ], [ %103, %117 ]
  %124 = phi i64* [ %107, %106 ], [ %118, %117 ]
  %125 = bitcast %"class.v8::internal::SharedFunctionInfo"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %125) #6
  %126 = add i64 %123, 11
  %127 = inttoptr i64 %126 to i32*
  %128 = load atomic i32, i32* %127 monotonic, align 4
  %129 = and i64 %123, -4294967296
  %130 = zext i32 %128 to i64
  %131 = or i64 %129, %130
  %132 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %131, i64* %132, align 8
  %133 = call i64 @_ZNK2v88internal18SharedFunctionInfo4NameEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %10)
  %134 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %30, align 8
  %135 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %134, null
  br i1 %135, label %138, label %136

136:                                              ; preds = %122
  %137 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %134, i64 %133) #6
  br label %151

138:                                              ; preds = %122
  %139 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 31, i32 0
  %140 = load i64*, i64** %139, align 8
  %141 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 31, i32 1
  %142 = load i64*, i64** %141, align 8
  %143 = icmp eq i64* %140, %142
  br i1 %143, label %144, label %146

144:                                              ; preds = %138
  %145 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %23) #6
  br label %146

146:                                              ; preds = %144, %138
  %147 = phi i64* [ %145, %144 ], [ %140, %138 ]
  %148 = ptrtoint i64* %147 to i64
  %149 = add i64 %148, 8
  %150 = inttoptr i64 %149 to i64*
  store i64* %150, i64** %139, align 8
  store i64 %133, i64* %147, align 8
  br label %151

151:                                              ; preds = %136, %146
  %152 = phi i64* [ %137, %136 ], [ %147, %146 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %125) #6
  %153 = call i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %23, i64* %152, i8 zeroext 0)
  %154 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %154) #6
  %155 = load i64, i64* %153, align 8
  %156 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %155, i64* %156, align 8
  %157 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %11, i64 0, i32 0
  %158 = call zeroext i1 @_ZN2v88internal6String16HasOneBytePrefixENS0_6VectorIKcEE(%"class.v8::internal::String"* nonnull %157, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i64 27) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %154) #6
  br i1 %158, label %937, label %159

159:                                              ; preds = %151
  %160 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %160) #6
  %161 = load i64, i64* %153, align 8
  %162 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %161, i64* %162, align 8
  %163 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %12, i64 0, i32 0
  %164 = call zeroext i1 @_ZN2v88internal6String16HasOneBytePrefixENS0_6VectorIKcEE(%"class.v8::internal::String"* nonnull %163, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 4) #6
  %165 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %165) #6
  br i1 %164, label %171, label %166

166:                                              ; preds = %159
  %167 = load i64, i64* %153, align 8
  %168 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %167, i64* %168, align 8
  %169 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %13, i64 0, i32 0
  %170 = call zeroext i1 @_ZN2v88internal6String16HasOneBytePrefixENS0_6VectorIKcEE(%"class.v8::internal::String"* nonnull %169, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %165) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %160) #6
  br i1 %170, label %172, label %179

171:                                              ; preds = %159
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %165) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %160) #6
  br label %172

172:                                              ; preds = %171, %166
  %173 = inttoptr i64 %22 to %"class.v8::internal::Factory"*
  %174 = load i64, i64* %153, align 8
  %175 = add i64 %174, 7
  %176 = inttoptr i64 %175 to i32*
  %177 = load i32, i32* %176, align 4
  %178 = call i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"* %173, i64* %153, i32 4, i32 %177) #6
  br label %249

179:                                              ; preds = %166
  %180 = load i64, i64* %153, align 8
  %181 = add i64 %180, 7
  %182 = inttoptr i64 %181 to i32*
  %183 = load i32, i32* %182, align 4
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %249

185:                                              ; preds = %179
  %186 = bitcast %"class.v8::internal::SharedFunctionInfo"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %186) #6
  %187 = load i64, i64* %124, align 8
  %188 = add i64 %187, 11
  %189 = inttoptr i64 %188 to i32*
  %190 = load atomic i32, i32* %189 monotonic, align 4
  %191 = and i64 %187, -4294967296
  %192 = zext i32 %190 to i64
  %193 = or i64 %191, %192
  %194 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %193, i64* %194, align 8
  %195 = call i64 @_ZN2v88internal18SharedFunctionInfo13inferred_nameEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %14)
  %196 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %30, align 8
  %197 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %196, null
  br i1 %197, label %200, label %198

198:                                              ; preds = %185
  %199 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %196, i64 %195) #6
  br label %213

200:                                              ; preds = %185
  %201 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 31, i32 0
  %202 = load i64*, i64** %201, align 8
  %203 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 31, i32 1
  %204 = load i64*, i64** %203, align 8
  %205 = icmp eq i64* %202, %204
  br i1 %205, label %206, label %208

206:                                              ; preds = %200
  %207 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %23) #6
  br label %208

208:                                              ; preds = %206, %200
  %209 = phi i64* [ %207, %206 ], [ %202, %200 ]
  %210 = ptrtoint i64* %209 to i64
  %211 = add i64 %210, 8
  %212 = inttoptr i64 %211 to i64*
  store i64* %212, i64** %201, align 8
  store i64 %195, i64* %209, align 8
  br label %213

213:                                              ; preds = %198, %208
  %214 = phi i64* [ %199, %198 ], [ %209, %208 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %186) #6
  %215 = load i64, i64* %214, align 8
  %216 = add i64 %215, 7
  %217 = inttoptr i64 %216 to i32*
  %218 = load i32, i32* %217, align 4
  %219 = bitcast i32* %3 to i8*
  %220 = bitcast %"class.v8::internal::StringShape"* %4 to i8*
  %221 = getelementptr inbounds %"class.v8::internal::StringShape", %"class.v8::internal::StringShape"* %4, i64 0, i32 0
  %222 = bitcast %"class.v8::internal::String"* %2 to i8*
  %223 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %224

224:                                              ; preds = %228, %213
  %225 = phi i32 [ %218, %213 ], [ %226, %228 ]
  %226 = add nsw i32 %225, -1
  %227 = icmp sgt i32 %225, 0
  br i1 %227, label %228, label %249

228:                                              ; preds = %224
  %229 = load i64, i64* %214, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %219) #6
  store i32 %226, i32* %3, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %220) #6
  %230 = and i64 %229, -4294967296
  %231 = add i64 %229, -1
  %232 = inttoptr i64 %231 to i32*
  %233 = load atomic i32, i32* %232 acquire, align 4
  %234 = zext i32 %233 to i64
  %235 = or i64 %230, %234
  %236 = add i64 %235, 7
  %237 = inttoptr i64 %236 to i16*
  %238 = load atomic i16, i16* %237 monotonic, align 2
  %239 = zext i16 %238 to i32
  store i32 %239, i32* %221, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %222) #6
  store i64 %229, i64* %223, align 8
  %240 = call zeroext i16 @_ZN2v88internal11StringShape33DispatchToSpecificTypeWithoutCastIZNS1_22DispatchToSpecificTypeIZNKS0_6String7GetImplEiE19StringGetDispatchertJRiEEET0_S4_DpOT1_E17CastingDispatchertJRS4_S6_EEES7_SA_(%"class.v8::internal::StringShape"* nonnull %4, %"class.v8::internal::String"* nonnull dereferenceable(8) %2, i32* nonnull dereferenceable(4) %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %222) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %220) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %219) #6
  %241 = icmp eq i16 %240, 46
  br i1 %241, label %242, label %224

242:                                              ; preds = %228
  %243 = inttoptr i64 %22 to %"class.v8::internal::Factory"*
  %244 = load i64, i64* %214, align 8
  %245 = add i64 %244, 7
  %246 = inttoptr i64 %245 to i32*
  %247 = load i32, i32* %246, align 4
  %248 = call i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"* %243, i64* %214, i32 %225, i32 %247) #6
  br label %249

249:                                              ; preds = %224, %242, %179, %172
  %250 = phi i64* [ %178, %172 ], [ %248, %242 ], [ %153, %179 ], [ %214, %224 ]
  %251 = load i64, i64* %250, align 8
  %252 = add i64 %251, 7
  %253 = inttoptr i64 %252 to i32*
  %254 = load i32, i32* %253, align 4
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %360, label %256

256:                                              ; preds = %249
  %257 = bitcast %"class.v8::internal::LookupIterator::Key"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %257) #6
  %258 = ptrtoint i64* %250 to i64
  %259 = getelementptr inbounds %"class.v8::internal::LookupIterator::Key", %"class.v8::internal::LookupIterator::Key"* %15, i64 0, i32 0, i32 0, i32 0
  store i64* null, i64** %259, align 8
  %260 = load i64, i64* %250, align 8
  %261 = getelementptr inbounds %"class.v8::internal::LookupIterator::Key", %"class.v8::internal::LookupIterator::Key"* %15, i64 0, i32 1
  %262 = and i64 %260, -4294967296
  %263 = add i64 %260, -1
  %264 = inttoptr i64 %263 to i32*
  %265 = load atomic i32, i32* %264 monotonic, align 4
  %266 = zext i32 %265 to i64
  %267 = or i64 %262, %266
  %268 = add i64 %267, 7
  %269 = inttoptr i64 %268 to i16*
  %270 = load atomic i16, i16* %269 monotonic, align 2
  %271 = icmp ult i16 %270, 64
  %272 = bitcast %"class.v8::internal::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %272) #6
  br i1 %271, label %273, label %287

273:                                              ; preds = %256
  %274 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %260, i64* %274, align 8
  %275 = add i64 %260, 3
  %276 = inttoptr i64 %275 to i32*
  %277 = load i32, i32* %276, align 4
  %278 = and i32 %277, -536870910
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %280, label %284

280:                                              ; preds = %273
  %281 = lshr i32 %277, 2
  %282 = and i32 %281, 16777215
  %283 = zext i32 %282 to i64
  store i64 %283, i64* %261, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %272) #6
  br label %290

284:                                              ; preds = %273
  %285 = and i32 %277, 3
  %286 = icmp eq i32 %285, 2
  br i1 %286, label %287, label %288

287:                                              ; preds = %284, %256
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %272) #6
  br label %292

288:                                              ; preds = %284
  %289 = call zeroext i1 @_ZN2v88internal6String18SlowAsIntegerIndexEPm(%"class.v8::internal::String"* nonnull %5, i64* %261) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %272) #6
  br i1 %289, label %290, label %292

290:                                              ; preds = %288, %280
  %291 = bitcast %"class.v8::internal::LookupIterator::Key"* %15 to i64*
  store i64 %258, i64* %291, align 8
  br label %311

292:                                              ; preds = %288, %287
  store i64 -1, i64* %261, align 8
  %293 = load i64, i64* %250, align 8
  %294 = and i64 %293, -4294967296
  %295 = add i64 %293, -1
  %296 = inttoptr i64 %295 to i32*
  %297 = load atomic i32, i32* %296 monotonic, align 4
  %298 = zext i32 %297 to i64
  %299 = or i64 %294, %298
  %300 = add i64 %299, 7
  %301 = inttoptr i64 %300 to i16*
  %302 = load atomic i16, i16* %301 monotonic, align 2
  %303 = and i16 %302, -32
  %304 = icmp eq i16 %303, 32
  br i1 %304, label %305, label %309

305:                                              ; preds = %292
  %306 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 5, i32 0, i32 0, i32 0
  %307 = load %"class.v8::internal::StringTable"*, %"class.v8::internal::StringTable"** %306, align 8
  %308 = call i64* @_ZN2v88internal11StringTable12LookupStringEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::StringTable"* %307, %"class.v8::internal::Isolate"* %23, i64* %250) #6
  br label %309

309:                                              ; preds = %305, %292
  %310 = phi i64* [ %308, %305 ], [ %250, %292 ]
  store i64* %310, i64** %259, align 8
  br label %311

311:                                              ; preds = %290, %309
  %312 = phi i64* [ %250, %290 ], [ %310, %309 ]
  %313 = bitcast %"class.v8::internal::LookupIterator"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %313) #6
  %314 = load i64, i64* %261, align 8
  call void @_ZN2v88internal14LookupIteratorC2EPNS0_7IsolateENS0_6HandleINS0_6ObjectEEENS4_INS0_4NameEEEmS6_NS1_13ConfigurationE(%"class.v8::internal::LookupIterator"* nonnull %16, %"class.v8::internal::Isolate"* %23, i64* nonnull %93, i64* %312, i64 %314, i64* nonnull %93, i32 2) #6
  %315 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %16, i64 0, i32 1
  %316 = load i32, i32* %315, align 4
  switch i32 %316, label %359 [
    i32 6, label %317
    i32 5, label %330
  ]

317:                                              ; preds = %311
  %318 = call i64* @_ZNK2v88internal14LookupIterator12GetDataValueENS0_16AllocationPolicyE(%"class.v8::internal::LookupIterator"* nonnull %16, i32 0) #6
  %319 = icmp eq i64* %318, %124
  br i1 %319, label %358, label %320

320:                                              ; preds = %317
  %321 = icmp eq i64* %318, null
  %322 = icmp eq i64* %124, null
  %323 = or i1 %322, %321
  br i1 %323, label %359, label %324

324:                                              ; preds = %320
  %325 = load i64, i64* %318, align 8
  %326 = load i64, i64* %124, align 8
  %327 = trunc i64 %325 to i32
  %328 = trunc i64 %326 to i32
  %329 = icmp eq i32 %327, %328
  br i1 %329, label %358, label %359

330:                                              ; preds = %311
  %331 = call i64* @_ZNK2v88internal14LookupIterator12GetAccessorsEv(%"class.v8::internal::LookupIterator"* nonnull %16) #6
  %332 = load i64, i64* %331, align 8
  %333 = and i64 %332, 1
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %359, label %335

335:                                              ; preds = %330
  %336 = and i64 %332, -4294967296
  %337 = add i64 %332, -1
  %338 = inttoptr i64 %337 to i32*
  %339 = load atomic i32, i32* %338 monotonic, align 4
  %340 = zext i32 %339 to i64
  %341 = or i64 %336, %340
  %342 = add i64 %341, 7
  %343 = inttoptr i64 %342 to i16*
  %344 = load atomic i16, i16* %343 monotonic, align 2
  %345 = icmp eq i16 %344, 87
  br i1 %345, label %346, label %359

346:                                              ; preds = %335
  %347 = add i64 %332, 3
  %348 = inttoptr i64 %347 to i32*
  %349 = load i32, i32* %348, align 4
  %350 = load i64, i64* %124, align 8
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %349, %351
  br i1 %352, label %358, label %353

353:                                              ; preds = %346
  %354 = add i64 %332, 7
  %355 = inttoptr i64 %354 to i32*
  %356 = load i32, i32* %355, align 4
  %357 = icmp eq i32 %356, %351
  br i1 %357, label %358, label %359

358:                                              ; preds = %324, %353, %346, %317
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %313) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %257) #6
  br label %937

359:                                              ; preds = %311, %353, %330, %335, %320, %324
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %313) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %257) #6
  br label %360

360:                                              ; preds = %359, %249
  %361 = load i64, i64* %93, align 8
  %362 = load i64, i64* %124, align 8
  %363 = load i64, i64* %68, align 8
  %364 = bitcast %"class.v8::internal::PrototypeIterator"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %364) #6
  %365 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %9, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %23, %"class.v8::internal::Isolate"** %365, align 8
  %366 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %9, i64 0, i32 1, i32 0, i32 0
  store i64 %361, i64* %366, align 8
  %367 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %9, i64 0, i32 2, i32 0, i32 0
  store i64* null, i64** %367, align 8
  %368 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %9, i64 0, i32 3
  store i32 0, i32* %368, align 8
  %369 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %9, i64 0, i32 4
  store i8 0, i8* %369, align 4
  %370 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %9, i64 0, i32 6
  store i32 0, i32* %370, align 8
  %371 = bitcast %"class.v8::internal::Context"* %7 to i8*
  %372 = getelementptr inbounds %"class.v8::internal::Context", %"class.v8::internal::Context"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %373 = bitcast %"class.v8::internal::PrototypeIterator"* %6 to i8*
  %374 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %6, i64 0, i32 0
  %375 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %6, i64 0, i32 1, i32 0, i32 0
  %376 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %6, i64 0, i32 2, i32 0, i32 0
  %377 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %6, i64 0, i32 3
  %378 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %6, i64 0, i32 4
  %379 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %6, i64 0, i32 6
  %380 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 0, i32 7, i32 0, i64 5
  %381 = trunc i64 %362 to i32
  %382 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 0, i32 4
  %383 = getelementptr inbounds %"class.v8::internal::Representation", %"class.v8::internal::Representation"* %8, i64 0, i32 0
  %384 = and i64 %361, -4294967296
  %385 = add i64 %361, -1
  %386 = inttoptr i64 %385 to i32*
  %387 = load atomic i32, i32* %386 monotonic, align 4
  %388 = zext i32 %387 to i64
  %389 = or i64 %384, %388
  %390 = add i64 %389, 7
  %391 = inttoptr i64 %390 to i16*
  %392 = load atomic i16, i16* %391 monotonic, align 2
  %393 = icmp ugt i16 %392, 188
  br i1 %393, label %394, label %910

394:                                              ; preds = %360, %895
  %395 = phi i32* [ %899, %895 ], [ %386, %360 ]
  %396 = phi i64 [ %898, %895 ], [ %385, %360 ]
  %397 = phi i64 [ %897, %895 ], [ %384, %360 ]
  %398 = phi i64 [ %892, %895 ], [ %363, %360 ]
  %399 = phi i64 [ %896, %895 ], [ %361, %360 ]
  %400 = load atomic i32, i32* %395 monotonic, align 4
  %401 = zext i32 %400 to i64
  %402 = or i64 %397, %401
  %403 = add i64 %402, 7
  %404 = inttoptr i64 %403 to i16*
  %405 = load atomic i16, i16* %404 monotonic, align 2
  %406 = icmp eq i16 %405, 190
  br i1 %406, label %407, label %424

407:                                              ; preds = %394
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %371) #6
  %408 = and i64 %399, -262144
  %409 = or i64 %408, 16
  %410 = inttoptr i64 %409 to i64*
  %411 = load i64, i64* %410, align 16
  %412 = add i64 %411, -41416
  %413 = inttoptr i64 %412 to %"class.v8::internal::Isolate"*
  %414 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %413, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %415 = load i64, i64* %414, align 8
  store i64 %415, i64* %372, align 8
  %416 = call i64 @_ZN2v88internal7Context13global_objectEv(%"class.v8::internal::Context"* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %371) #6
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %373) #6
  %417 = load i64, i64* %410, align 16
  %418 = add i64 %417, -41416
  %419 = inttoptr i64 %418 to %"class.v8::internal::Isolate"*
  store %"class.v8::internal::Isolate"* %419, %"class.v8::internal::Isolate"** %374, align 8
  store i64 %399, i64* %375, align 8
  store i64* null, i64** %376, align 8
  store i32 0, i32* %377, align 8
  store i8 0, i8* %378, align 4
  store i32 0, i32* %379, align 8
  call void @_ZN2v88internal17PrototypeIterator7AdvanceEv(%"class.v8::internal::PrototypeIterator"* nonnull %6) #6
  %420 = load i64, i64* %375, align 8
  %421 = trunc i64 %420 to i32
  %422 = trunc i64 %416 to i32
  %423 = icmp eq i32 %421, %422
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %373) #6
  br i1 %423, label %433, label %907

424:                                              ; preds = %394
  %425 = load atomic i32, i32* %395 monotonic, align 4
  %426 = zext i32 %425 to i64
  %427 = or i64 %397, %426
  %428 = add i64 %427, 9
  %429 = inttoptr i64 %428 to i8*
  %430 = load atomic i8, i8* %429 monotonic, align 1
  %431 = and i8 %430, 32
  %432 = icmp eq i8 %431, 0
  br i1 %432, label %433, label %907

433:                                              ; preds = %424, %407
  %434 = load atomic i32, i32* %395 monotonic, align 4
  %435 = zext i32 %434 to i64
  %436 = or i64 %397, %435
  %437 = add i64 %436, 11
  %438 = inttoptr i64 %437 to i32*
  %439 = load atomic i32, i32* %438 monotonic, align 4
  %440 = and i32 %439, 2097152
  %441 = icmp eq i32 %440, 0
  %442 = load atomic i32, i32* %395 monotonic, align 4
  %443 = zext i32 %442 to i64
  %444 = or i64 %397, %443
  br i1 %441, label %445, label %662

445:                                              ; preds = %433
  %446 = load i64, i64* %382, align 8
  %447 = add i64 %444, 23
  %448 = inttoptr i64 %447 to i32*
  %449 = load i32, i32* %448, align 4
  %450 = and i64 %446, 4294967295
  %451 = icmp eq i64 %450, 0
  call void @llvm.assume(i1 %451) #6
  %452 = zext i32 %449 to i64
  %453 = or i64 %446, %452
  %454 = add i64 %444, 11
  %455 = inttoptr i64 %454 to i32*
  %456 = load atomic i32, i32* %455 acquire, align 4
  %457 = lshr i32 %456, 10
  %458 = and i32 %457, 1023
  %459 = zext i32 %458 to i64
  %460 = icmp eq i32 %458, 0
  br i1 %460, label %891, label %461

461:                                              ; preds = %445
  %462 = add i64 %444, 3
  %463 = inttoptr i64 %462 to i8*
  %464 = add i64 %444, 4
  %465 = inttoptr i64 %464 to i8*
  %466 = add i64 %399, 3
  %467 = inttoptr i64 %466 to i32*
  %468 = and i64 %399, -262144
  %469 = or i64 %468, 16
  %470 = inttoptr i64 %469 to i64*
  br label %471

471:                                              ; preds = %658, %461
  %472 = phi i64 [ %398, %461 ], [ %659, %658 ]
  %473 = phi i64 [ 0, %461 ], [ %660, %658 ]
  %474 = mul nuw nsw i64 %473, 51539607552
  %475 = add nuw nsw i64 %474, 68719476736
  %476 = lshr exact i64 %475, 32
  %477 = add i64 %476, %453
  %478 = add i64 %477, -1
  %479 = inttoptr i64 %478 to i32*
  %480 = load atomic i32, i32* %479 monotonic, align 4
  %481 = zext i32 %480 to i64
  %482 = or i64 %446, %481
  %483 = add i64 %482, -1
  %484 = inttoptr i64 %483 to i32*
  %485 = load atomic i32, i32* %484 monotonic, align 4
  %486 = zext i32 %485 to i64
  %487 = or i64 %446, %486
  %488 = add i64 %487, 7
  %489 = inttoptr i64 %488 to i16*
  %490 = load atomic i16, i16* %489 monotonic, align 2
  %491 = icmp eq i16 %490, 64
  br i1 %491, label %658, label %492

492:                                              ; preds = %471
  %493 = or i64 %476, 3
  %494 = add i64 %493, %453
  %495 = inttoptr i64 %494 to i32*
  %496 = load atomic i32, i32* %495 monotonic, align 4
  %497 = ashr i32 %496, 1
  %498 = and i32 %496, 32
  %499 = icmp eq i32 %498, 0
  br i1 %499, label %500, label %658

500:                                              ; preds = %492
  %501 = and i32 %496, 4
  %502 = icmp eq i32 %501, 0
  br i1 %502, label %503, label %614

503:                                              ; preds = %500
  %504 = lshr i32 %497, 19
  %505 = and i32 %504, 1023
  %506 = lshr i32 %497, 6
  %507 = trunc i32 %506 to i8
  %508 = and i8 %507, 7
  %509 = load atomic i8, i8* %463 monotonic, align 1
  %510 = zext i8 %509 to i32
  %511 = load atomic i8, i8* %465 monotonic, align 1
  %512 = zext i8 %511 to i32
  %513 = sub nsw i32 %510, %512
  %514 = icmp slt i32 %505, %513
  br i1 %514, label %515, label %523

515:                                              ; preds = %503
  %516 = load atomic i8, i8* %465 monotonic, align 1
  %517 = zext i8 %516 to i64
  %518 = shl nuw nsw i64 %517, 28
  %519 = load atomic i8, i8* %465 monotonic, align 1
  %520 = zext i8 %519 to i32
  %521 = add nuw nsw i32 %505, %520
  %522 = shl nuw nsw i32 %521, 2
  br label %527

523:                                              ; preds = %503
  %524 = sub nsw i32 %505, %513
  %525 = shl nsw i32 %524, 2
  %526 = add nsw i32 %525, 8
  br label %527

527:                                              ; preds = %523, %515
  %528 = phi i32 [ %522, %515 ], [ %526, %523 ]
  %529 = phi i64 [ %518, %515 ], [ 536870912, %523 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %383) #6
  store i8 %508, i8* %383, align 1
  %530 = icmp ult i8 %508, 5
  br i1 %530, label %533, label %531

531:                                              ; preds = %527
  %532 = call i8* @_ZNK2v88internal14Representation8MnemonicEv(%"class.v8::internal::Representation"* nonnull %8) #6
  call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0), i8* %532) #6
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0)) #9
  unreachable

533:                                              ; preds = %527
  %534 = zext i8 %508 to i64
  %535 = getelementptr inbounds [5 x i64], [5 x i64]* @switch.table._ZN2v88internal14StackFrameInfo13GetMethodNameENS0_6HandleIS1_EE, i64 0, i64 %534
  %536 = load i64, i64* %535, align 8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %383) #6
  %537 = zext i1 %514 to i64
  %538 = shl nuw nsw i64 %537, 13
  %539 = sext i32 %528 to i64
  %540 = sext i32 %513 to i64
  %541 = shl nsw i64 %540, 16
  %542 = or i64 %538, %541
  %543 = or i64 %542, %539
  %544 = or i64 %543, %529
  %545 = and i64 %539, 49152
  %546 = or i64 %536, %545
  %547 = icmp eq i64 %546, 16384
  br i1 %547, label %658, label %548

548:                                              ; preds = %533
  %549 = load i64, i64* %382, align 8
  %550 = and i64 %543, 8192
  %551 = icmp eq i64 %550, 0
  br i1 %551, label %559, label %552

552:                                              ; preds = %548
  %553 = and i64 %539, 8191
  %554 = add i64 %553, %396
  %555 = inttoptr i64 %554 to i32*
  %556 = load i32, i32* %555, align 4
  %557 = and i64 %549, 4294967295
  %558 = icmp eq i64 %557, 0
  call void @llvm.assume(i1 %558) #6
  br label %618

559:                                              ; preds = %548
  %560 = load i32, i32* %467, align 4
  %561 = and i64 %549, 4294967295
  %562 = icmp eq i64 %561, 0
  call void @llvm.assume(i1 %562) #6
  %563 = zext i32 %560 to i64
  %564 = or i64 %549, %563
  %565 = and i64 %563, 1
  %566 = icmp eq i64 %565, 0
  %567 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  br i1 %566, label %587, label %568

568:                                              ; preds = %559
  %569 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %567, null
  br i1 %569, label %576, label %570

570:                                              ; preds = %568
  %571 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %567, i64 0, i32 0, i32 1
  %572 = load i8, i8* %571, align 8, !range !2
  %573 = icmp eq i8 %572, 0
  br i1 %573, label %576, label %574

574:                                              ; preds = %570
  %575 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %567, i64 0, i32 1, i64 0
  br label %581

576:                                              ; preds = %570, %568
  %577 = load i64, i64* %470, align 16
  %578 = add i64 %577, -41416
  %579 = inttoptr i64 %578 to %"class.v8::internal::Isolate"*
  %580 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %579, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %581

581:                                              ; preds = %576, %574
  %582 = phi i64* [ %580, %576 ], [ %575, %574 ]
  %583 = getelementptr inbounds i64, i64* %582, i64 29
  %584 = load i64, i64* %583, align 8
  %585 = trunc i64 %584 to i32
  %586 = icmp eq i32 %560, %585
  br i1 %586, label %587, label %604

587:                                              ; preds = %581, %559
  %588 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %567, null
  br i1 %588, label %595, label %589

589:                                              ; preds = %587
  %590 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %567, i64 0, i32 0, i32 1
  %591 = load i8, i8* %590, align 8, !range !2
  %592 = icmp eq i8 %591, 0
  br i1 %592, label %595, label %593

593:                                              ; preds = %589
  %594 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %567, i64 0, i32 1, i64 0
  br label %600

595:                                              ; preds = %589, %587
  %596 = load i64, i64* %470, align 16
  %597 = add i64 %596, -41416
  %598 = inttoptr i64 %597 to %"class.v8::internal::Isolate"*
  %599 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %598, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %600

600:                                              ; preds = %595, %593
  %601 = phi i64* [ %599, %595 ], [ %594, %593 ]
  %602 = getelementptr inbounds i64, i64* %601, i64 106
  %603 = load i64, i64* %602, align 8
  br label %604

604:                                              ; preds = %600, %581
  %605 = phi i64 [ %603, %600 ], [ %564, %581 ]
  %606 = lshr i64 %544, 26
  %607 = and i64 %606, 124
  %608 = and i64 %539, 8188
  %609 = add nuw nsw i64 %608, 7
  %610 = sub nsw i64 %609, %607
  %611 = add i64 %610, %605
  %612 = inttoptr i64 %611 to i32*
  %613 = load atomic i32, i32* %612 monotonic, align 4
  br label %618

614:                                              ; preds = %500
  %615 = add i64 %477, 7
  %616 = inttoptr i64 %615 to i32*
  %617 = load atomic i32, i32* %616 monotonic, align 4
  br label %618

618:                                              ; preds = %552, %604, %614
  %619 = phi i32 [ %617, %614 ], [ %556, %552 ], [ %613, %604 ]
  %620 = phi i64 [ %446, %614 ], [ %549, %552 ], [ %549, %604 ]
  %621 = zext i32 %619 to i64
  %622 = or i64 %620, %621
  %623 = trunc i64 %622 to i32
  %624 = icmp eq i32 %623, %381
  br i1 %624, label %649, label %625

625:                                              ; preds = %618
  %626 = and i64 %622, 1
  %627 = icmp eq i64 %626, 0
  br i1 %627, label %658, label %628

628:                                              ; preds = %625
  %629 = and i64 %620, -4294967296
  %630 = add i64 %622, -1
  %631 = inttoptr i64 %630 to i32*
  %632 = load atomic i32, i32* %631 monotonic, align 4
  %633 = zext i32 %632 to i64
  %634 = or i64 %629, %633
  %635 = add i64 %634, 7
  %636 = inttoptr i64 %635 to i16*
  %637 = load atomic i16, i16* %636 monotonic, align 2
  %638 = icmp eq i16 %637, 87
  br i1 %638, label %639, label %658

639:                                              ; preds = %628
  %640 = add i64 %622, 3
  %641 = inttoptr i64 %640 to i32*
  %642 = load i32, i32* %641, align 4
  %643 = icmp eq i32 %642, %381
  br i1 %643, label %649, label %644

644:                                              ; preds = %639
  %645 = add i64 %622, 7
  %646 = inttoptr i64 %645 to i32*
  %647 = load i32, i32* %646, align 4
  %648 = icmp eq i32 %647, %381
  br i1 %648, label %649, label %658

649:                                              ; preds = %644, %639, %618
  %650 = trunc i64 %472 to i32
  %651 = icmp eq i32 %480, %650
  br i1 %651, label %658, label %652

652:                                              ; preds = %649
  %653 = load i64, i64* %68, align 8
  %654 = trunc i64 %653 to i32
  %655 = icmp eq i32 %650, %654
  br i1 %655, label %658, label %656

656:                                              ; preds = %652
  %657 = load i64, i64* %62, align 8
  br label %658

658:                                              ; preds = %656, %652, %649, %644, %628, %625, %533, %492, %471
  %659 = phi i64 [ %472, %471 ], [ %472, %492 ], [ %472, %649 ], [ %472, %628 ], [ %472, %533 ], [ %472, %644 ], [ %657, %656 ], [ %482, %652 ], [ %472, %625 ]
  %660 = add nuw nsw i64 %473, 1
  %661 = icmp eq i64 %660, %459
  br i1 %661, label %891, label %471

662:                                              ; preds = %433
  %663 = add i64 %444, 7
  %664 = inttoptr i64 %663 to i16*
  %665 = load atomic i16, i16* %664 monotonic, align 2
  %666 = icmp eq i16 %665, 189
  %667 = add i64 %399, 3
  %668 = inttoptr i64 %667 to i32*
  br i1 %666, label %669, label %771

669:                                              ; preds = %662
  %670 = load atomic i32, i32* %668 acquire, align 4
  %671 = zext i32 %670 to i64
  %672 = or i64 %397, %671
  %673 = add i64 %672, 15
  %674 = inttoptr i64 %673 to i32*
  %675 = load atomic i32, i32* %674 monotonic, align 4
  %676 = ashr i32 %675, 1
  %677 = sext i32 %676 to i64
  %678 = icmp eq i32 %676, 0
  br i1 %678, label %891, label %679

679:                                              ; preds = %669
  %680 = add i64 %672, 7
  %681 = load i64, i64* %68, align 8
  %682 = trunc i64 %681 to i32
  br label %683

683:                                              ; preds = %767, %679
  %684 = phi i64 [ %398, %679 ], [ %768, %767 ]
  %685 = phi i64 [ 0, %679 ], [ %769, %767 ]
  %686 = trunc i64 %685 to i32
  %687 = shl i32 %686, 2
  %688 = add i32 %687, 20
  %689 = sext i32 %688 to i64
  %690 = add i64 %680, %689
  %691 = inttoptr i64 %690 to i32*
  %692 = load atomic i32, i32* %691 monotonic, align 4
  %693 = zext i32 %692 to i64
  %694 = or i64 %397, %693
  %695 = icmp eq i32 %692, %682
  br i1 %695, label %767, label %696

696:                                              ; preds = %683
  %697 = load i64, i64* %380, align 8
  %698 = trunc i64 %697 to i32
  %699 = icmp eq i32 %692, %698
  br i1 %699, label %767, label %700

700:                                              ; preds = %696
  %701 = add i64 %694, 3
  %702 = inttoptr i64 %701 to i32*
  %703 = load i32, i32* %702, align 4
  %704 = zext i32 %703 to i64
  %705 = or i64 %397, %704
  %706 = and i64 %704, 1
  %707 = icmp eq i64 %706, 0
  br i1 %707, label %718, label %708

708:                                              ; preds = %700
  %709 = add i64 %705, -1
  %710 = inttoptr i64 %709 to i32*
  %711 = load atomic i32, i32* %710 monotonic, align 4
  %712 = zext i32 %711 to i64
  %713 = or i64 %397, %712
  %714 = add i64 %713, 7
  %715 = inttoptr i64 %714 to i16*
  %716 = load atomic i16, i16* %715 monotonic, align 2
  %717 = icmp eq i16 %716, 64
  br i1 %717, label %767, label %718

718:                                              ; preds = %708, %700
  %719 = load atomic i32, i32* %691 monotonic, align 4
  %720 = zext i32 %719 to i64
  %721 = or i64 %397, %720
  %722 = add i64 %721, 7
  %723 = inttoptr i64 %722 to i32*
  %724 = load i32, i32* %723, align 4
  %725 = and i32 %724, 32
  %726 = icmp eq i32 %725, 0
  br i1 %726, label %727, label %767

727:                                              ; preds = %718
  %728 = load atomic i32, i32* %691 monotonic, align 4
  %729 = zext i32 %728 to i64
  %730 = or i64 %397, %729
  %731 = add i64 %730, 11
  %732 = inttoptr i64 %731 to i32*
  %733 = load i32, i32* %732, align 4
  %734 = zext i32 %733 to i64
  %735 = or i64 %397, %734
  %736 = icmp eq i32 %733, %381
  br i1 %736, label %760, label %737

737:                                              ; preds = %727
  %738 = and i64 %734, 1
  %739 = icmp eq i64 %738, 0
  br i1 %739, label %767, label %740

740:                                              ; preds = %737
  %741 = add i64 %735, -1
  %742 = inttoptr i64 %741 to i32*
  %743 = load atomic i32, i32* %742 monotonic, align 4
  %744 = zext i32 %743 to i64
  %745 = or i64 %397, %744
  %746 = add i64 %745, 7
  %747 = inttoptr i64 %746 to i16*
  %748 = load atomic i16, i16* %747 monotonic, align 2
  %749 = icmp eq i16 %748, 87
  br i1 %749, label %750, label %767

750:                                              ; preds = %740
  %751 = add i64 %735, 3
  %752 = inttoptr i64 %751 to i32*
  %753 = load i32, i32* %752, align 4
  %754 = icmp eq i32 %753, %381
  br i1 %754, label %760, label %755

755:                                              ; preds = %750
  %756 = add i64 %735, 7
  %757 = inttoptr i64 %756 to i32*
  %758 = load i32, i32* %757, align 4
  %759 = icmp eq i32 %758, %381
  br i1 %759, label %760, label %767

760:                                              ; preds = %755, %750, %727
  %761 = trunc i64 %684 to i32
  %762 = icmp eq i32 %703, %761
  br i1 %762, label %767, label %763

763:                                              ; preds = %760
  %764 = icmp eq i32 %761, %682
  br i1 %764, label %767, label %765

765:                                              ; preds = %763
  %766 = load i64, i64* %62, align 8
  br label %767

767:                                              ; preds = %765, %763, %760, %755, %740, %737, %718, %708, %696, %683
  %768 = phi i64 [ %684, %708 ], [ %684, %718 ], [ %684, %760 ], [ %684, %740 ], [ %684, %755 ], [ %766, %765 ], [ %705, %763 ], [ %684, %696 ], [ %684, %683 ], [ %684, %737 ]
  %769 = add i64 %685, 1
  %770 = icmp eq i64 %769, %677
  br i1 %770, label %891, label %683

771:                                              ; preds = %662
  %772 = load i32, i32* %668, align 4
  %773 = zext i32 %772 to i64
  %774 = or i64 %397, %773
  %775 = and i64 %773, 1
  %776 = icmp eq i64 %775, 0
  br i1 %776, label %777, label %798

777:                                              ; preds = %771
  %778 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %779 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %778, null
  br i1 %779, label %786, label %780

780:                                              ; preds = %777
  %781 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %778, i64 0, i32 0, i32 1
  %782 = load i8, i8* %781, align 8, !range !2
  %783 = icmp eq i8 %782, 0
  br i1 %783, label %786, label %784

784:                                              ; preds = %780
  %785 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %778, i64 0, i32 1, i64 0
  br label %794

786:                                              ; preds = %780, %777
  %787 = and i64 %399, -262144
  %788 = or i64 %787, 16
  %789 = inttoptr i64 %788 to i64*
  %790 = load i64, i64* %789, align 16
  %791 = add i64 %790, -41416
  %792 = inttoptr i64 %791 to %"class.v8::internal::Isolate"*
  %793 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %792, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %794

794:                                              ; preds = %786, %784
  %795 = phi i64* [ %793, %786 ], [ %785, %784 ]
  %796 = getelementptr inbounds i64, i64* %795, i64 115
  %797 = load i64, i64* %796, align 8
  br label %798

798:                                              ; preds = %794, %771
  %799 = phi i64 [ %797, %794 ], [ %774, %771 ]
  %800 = add i64 %799, 15
  %801 = inttoptr i64 %800 to i32*
  %802 = load atomic i32, i32* %801 monotonic, align 4
  %803 = ashr i32 %802, 1
  %804 = sext i32 %803 to i64
  %805 = icmp eq i32 %803, 0
  br i1 %805, label %891, label %806

806:                                              ; preds = %798
  %807 = and i64 %799, -4294967296
  %808 = add i64 %799, 7
  %809 = load i64, i64* %68, align 8
  %810 = trunc i64 %809 to i32
  br label %811

811:                                              ; preds = %887, %806
  %812 = phi i64 [ %398, %806 ], [ %888, %887 ]
  %813 = phi i64 [ 0, %806 ], [ %889, %887 ]
  %814 = mul i64 %813, 51539607552
  %815 = add i64 %814, 85899345920
  %816 = ashr exact i64 %815, 32
  %817 = add i64 %816, %808
  %818 = inttoptr i64 %817 to i32*
  %819 = load atomic i32, i32* %818 monotonic, align 4
  %820 = zext i32 %819 to i64
  %821 = or i64 %807, %820
  %822 = icmp eq i32 %819, %810
  br i1 %822, label %887, label %823

823:                                              ; preds = %811
  %824 = load i64, i64* %380, align 8
  %825 = trunc i64 %824 to i32
  %826 = icmp eq i32 %819, %825
  br i1 %826, label %887, label %827

827:                                              ; preds = %823
  %828 = and i64 %820, 1
  %829 = icmp eq i64 %828, 0
  br i1 %829, label %840, label %830

830:                                              ; preds = %827
  %831 = add i64 %821, -1
  %832 = inttoptr i64 %831 to i32*
  %833 = load atomic i32, i32* %832 monotonic, align 4
  %834 = zext i32 %833 to i64
  %835 = or i64 %807, %834
  %836 = add i64 %835, 7
  %837 = inttoptr i64 %836 to i16*
  %838 = load atomic i16, i16* %837 monotonic, align 2
  %839 = icmp eq i16 %838, 64
  br i1 %839, label %887, label %840

840:                                              ; preds = %830, %827
  %841 = add i64 %814, 120259084288
  %842 = ashr exact i64 %841, 32
  %843 = add i64 %842, %808
  %844 = inttoptr i64 %843 to i32*
  %845 = load atomic i32, i32* %844 monotonic, align 4
  %846 = and i32 %845, 32
  %847 = icmp eq i32 %846, 0
  br i1 %847, label %848, label %887

848:                                              ; preds = %840
  %849 = add i64 %814, 103079215104
  %850 = ashr exact i64 %849, 32
  %851 = add i64 %850, %808
  %852 = inttoptr i64 %851 to i32*
  %853 = load atomic i32, i32* %852 monotonic, align 4
  %854 = zext i32 %853 to i64
  %855 = or i64 %807, %854
  %856 = icmp eq i32 %853, %381
  br i1 %856, label %880, label %857

857:                                              ; preds = %848
  %858 = and i64 %854, 1
  %859 = icmp eq i64 %858, 0
  br i1 %859, label %887, label %860

860:                                              ; preds = %857
  %861 = add i64 %855, -1
  %862 = inttoptr i64 %861 to i32*
  %863 = load atomic i32, i32* %862 monotonic, align 4
  %864 = zext i32 %863 to i64
  %865 = or i64 %807, %864
  %866 = add i64 %865, 7
  %867 = inttoptr i64 %866 to i16*
  %868 = load atomic i16, i16* %867 monotonic, align 2
  %869 = icmp eq i16 %868, 87
  br i1 %869, label %870, label %887

870:                                              ; preds = %860
  %871 = add i64 %855, 3
  %872 = inttoptr i64 %871 to i32*
  %873 = load i32, i32* %872, align 4
  %874 = icmp eq i32 %873, %381
  br i1 %874, label %880, label %875

875:                                              ; preds = %870
  %876 = add i64 %855, 7
  %877 = inttoptr i64 %876 to i32*
  %878 = load i32, i32* %877, align 4
  %879 = icmp eq i32 %878, %381
  br i1 %879, label %880, label %887

880:                                              ; preds = %875, %870, %848
  %881 = trunc i64 %812 to i32
  %882 = icmp eq i32 %819, %881
  br i1 %882, label %887, label %883

883:                                              ; preds = %880
  %884 = icmp eq i32 %881, %810
  br i1 %884, label %887, label %885

885:                                              ; preds = %883
  %886 = load i64, i64* %62, align 8
  br label %887

887:                                              ; preds = %885, %883, %880, %875, %860, %857, %840, %830, %823, %811
  %888 = phi i64 [ %812, %830 ], [ %812, %840 ], [ %812, %880 ], [ %812, %860 ], [ %812, %875 ], [ %886, %885 ], [ %821, %883 ], [ %812, %823 ], [ %812, %811 ], [ %812, %857 ]
  %889 = add i64 %813, 1
  %890 = icmp eq i64 %889, %804
  br i1 %890, label %891, label %811

891:                                              ; preds = %887, %767, %658, %798, %669, %445
  %892 = phi i64 [ %398, %798 ], [ %398, %669 ], [ %398, %445 ], [ %659, %658 ], [ %768, %767 ], [ %888, %887 ]
  call void @_ZN2v88internal17PrototypeIterator7AdvanceEv(%"class.v8::internal::PrototypeIterator"* nonnull %9) #6
  %893 = load i8, i8* %369, align 4
  %894 = icmp eq i8 %893, 0
  br i1 %894, label %895, label %907

895:                                              ; preds = %891
  %896 = load i64, i64* %366, align 8
  %897 = and i64 %896, -4294967296
  %898 = add i64 %896, -1
  %899 = inttoptr i64 %898 to i32*
  %900 = load atomic i32, i32* %899 monotonic, align 4
  %901 = zext i32 %900 to i64
  %902 = or i64 %897, %901
  %903 = add i64 %902, 7
  %904 = inttoptr i64 %903 to i16*
  %905 = load atomic i16, i16* %904 monotonic, align 2
  %906 = icmp ugt i16 %905, 188
  br i1 %906, label %394, label %907

907:                                              ; preds = %891, %424, %407, %895
  %908 = phi i64 [ %892, %895 ], [ %398, %407 ], [ %398, %424 ], [ %892, %891 ]
  %909 = load i64, i64* %68, align 8
  br label %910

910:                                              ; preds = %907, %360
  %911 = phi i64 [ %363, %360 ], [ %909, %907 ]
  %912 = phi i64 [ %363, %360 ], [ %908, %907 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %364) #6
  %913 = trunc i64 %912 to i32
  %914 = trunc i64 %911 to i32
  %915 = icmp eq i32 %913, %914
  br i1 %915, label %916, label %918

916:                                              ; preds = %910
  %917 = load i64, i64* %62, align 8
  br label %918

918:                                              ; preds = %910, %916
  %919 = phi i64 [ %917, %916 ], [ %912, %910 ]
  %920 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %30, align 8
  %921 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %920, null
  br i1 %921, label %924, label %922

922:                                              ; preds = %918
  %923 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %920, i64 %919) #6
  br label %937

924:                                              ; preds = %918
  %925 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 31, i32 0
  %926 = load i64*, i64** %925, align 8
  %927 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %23, i64 0, i32 31, i32 1
  %928 = load i64*, i64** %927, align 8
  %929 = icmp eq i64* %926, %928
  br i1 %929, label %930, label %932

930:                                              ; preds = %924
  %931 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %23) #6
  br label %932

932:                                              ; preds = %930, %924
  %933 = phi i64* [ %931, %930 ], [ %926, %924 ]
  %934 = ptrtoint i64* %933 to i64
  %935 = add i64 %934, 8
  %936 = inttoptr i64 %935 to i64*
  store i64* %936, i64** %925, align 8
  store i64 %919, i64* %933, align 8
  br label %937

937:                                              ; preds = %151, %358, %922, %932, %72, %56
  %938 = phi i64* [ %59, %56 ], [ %75, %72 ], [ %153, %151 ], [ %250, %358 ], [ %923, %922 ], [ %933, %932 ]
  ret i64* %938
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK2v88internal18SharedFunctionInfo4NameEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #5 comdat align 2 {
  %2 = alloca %"class.v8::internal::ScopeInfo", align 8
  %3 = alloca %"class.v8::internal::ScopeInfo", align 8
  %4 = alloca %"class.v8::internal::ScopeInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, -4294967296
  %8 = add i64 %6, 7
  %9 = inttoptr i64 %8 to i32*
  %10 = load atomic i32, i32* %9 acquire, align 4
  %11 = zext i32 %10 to i64
  %12 = or i64 %7, %11
  %13 = and i64 %11, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %29, label %15

15:                                               ; preds = %1
  %16 = add i64 %12, -1
  %17 = inttoptr i64 %16 to i32*
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %7, %19
  %21 = add i64 %20, 7
  %22 = inttoptr i64 %21 to i16*
  %23 = load atomic i16, i16* %22 monotonic, align 2
  %24 = icmp eq i16 %23, 178
  br i1 %24, label %25, label %29

25:                                               ; preds = %15
  %26 = bitcast %"class.v8::internal::ScopeInfo"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #6
  %27 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %12, i64* %27, align 8
  %28 = call zeroext i1 @_ZNK2v88internal9ScopeInfo21HasSharedFunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #6
  br i1 %28, label %53, label %31

29:                                               ; preds = %1, %15
  %30 = icmp eq i32 %10, 0
  br i1 %30, label %31, label %53

31:                                               ; preds = %29, %25
  %32 = load i64, i64* %5, align 8
  %33 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %34 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %33, null
  br i1 %34, label %41, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %33, i64 0, i32 0, i32 1
  %37 = load i8, i8* %36, align 8, !range !2
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %41, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %33, i64 0, i32 1, i64 0
  br label %49

41:                                               ; preds = %35, %31
  %42 = and i64 %32, -262144
  %43 = or i64 %42, 16
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44, align 16
  %46 = add i64 %45, -41416
  %47 = inttoptr i64 %46 to %"class.v8::internal::Isolate"*
  %48 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %47, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %49

49:                                               ; preds = %39, %41
  %50 = phi i64* [ %48, %41 ], [ %40, %39 ]
  %51 = getelementptr inbounds i64, i64* %50, i64 9
  %52 = load i64, i64* %51, align 8
  br label %103

53:                                               ; preds = %29, %25
  %54 = load i64, i64* %5, align 8
  %55 = and i64 %54, -4294967296
  %56 = add i64 %54, 7
  %57 = inttoptr i64 %56 to i32*
  %58 = load atomic i32, i32* %57 acquire, align 4
  %59 = zext i32 %58 to i64
  %60 = or i64 %55, %59
  %61 = and i64 %59, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %103, label %63

63:                                               ; preds = %53
  %64 = add i64 %60, -1
  %65 = inttoptr i64 %64 to i32*
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = zext i32 %66 to i64
  %68 = or i64 %55, %67
  %69 = add i64 %68, 7
  %70 = inttoptr i64 %69 to i16*
  %71 = load atomic i16, i16* %70 monotonic, align 2
  %72 = icmp eq i16 %71, 178
  br i1 %72, label %73, label %103

73:                                               ; preds = %63
  %74 = bitcast %"class.v8::internal::ScopeInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #6
  %75 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %60, i64* %75, align 8
  %76 = call zeroext i1 @_ZNK2v88internal9ScopeInfo15HasFunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #6
  br i1 %76, label %77, label %81

77:                                               ; preds = %73
  %78 = bitcast %"class.v8::internal::ScopeInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %78) #6
  %79 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %60, i64* %79, align 8
  %80 = call i64 @_ZNK2v88internal9ScopeInfo12FunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %78) #6
  br label %103

81:                                               ; preds = %73
  %82 = load i64, i64* %5, align 8
  %83 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %84 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %83, null
  br i1 %84, label %91, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %83, i64 0, i32 0, i32 1
  %87 = load i8, i8* %86, align 8, !range !2
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %91, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %83, i64 0, i32 1, i64 0
  br label %99

91:                                               ; preds = %85, %81
  %92 = and i64 %82, -262144
  %93 = or i64 %92, 16
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94, align 16
  %96 = add i64 %95, -41416
  %97 = inttoptr i64 %96 to %"class.v8::internal::Isolate"*
  %98 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %97, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %99

99:                                               ; preds = %89, %91
  %100 = phi i64* [ %98, %91 ], [ %90, %89 ]
  %101 = getelementptr inbounds i64, i64* %100, i64 9
  %102 = load i64, i64* %101, align 8
  br label %103

103:                                              ; preds = %53, %77, %99, %63, %49
  %104 = phi i64 [ %52, %49 ], [ %80, %77 ], [ %102, %99 ], [ %60, %63 ], [ %60, %53 ]
  ret i64 %104
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i64*, i8 zeroext) local_unnamed_addr #5 comdat align 2 {
  %4 = load i64, i64* %1, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, -1
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, 7
  %12 = inttoptr i64 %11 to i16*
  %13 = load atomic i16, i16* %12 monotonic, align 2
  %14 = icmp ult i16 %13, 64
  br i1 %14, label %15, label %72

15:                                               ; preds = %3
  %16 = load atomic i32, i32* %7 monotonic, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %5, %17
  %19 = add i64 %18, 7
  %20 = inttoptr i64 %19 to i16*
  %21 = load atomic i16, i16* %20 monotonic, align 2
  %22 = and i16 %21, 7
  %23 = icmp eq i16 %22, 1
  br i1 %23, label %24, label %72

24:                                               ; preds = %15
  %25 = load atomic i32, i32* %7 acquire, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %5, %26
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = and i16 %30, 7
  %32 = icmp eq i16 %31, 1
  br i1 %32, label %33, label %43

33:                                               ; preds = %24
  %34 = add i64 %4, 15
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %5, %37
  %39 = add i64 %38, 7
  %40 = inttoptr i64 %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %70

43:                                               ; preds = %24, %33
  %44 = load i64, i64* %1, align 8
  %45 = and i64 %44, -4294967296
  %46 = add i64 %44, 11
  %47 = inttoptr i64 %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = or i64 %45, %49
  %51 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %52 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %51, align 8
  %53 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %52, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %43
  %55 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %52, i64 %50) #6
  %56 = load i64, i64* %55, align 8
  br label %72

57:                                               ; preds = %43
  %58 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %61 = load i64*, i64** %60, align 8
  %62 = icmp eq i64* %59, %61
  br i1 %62, label %63, label %65

63:                                               ; preds = %57
  %64 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %65

65:                                               ; preds = %63, %57
  %66 = phi i64* [ %64, %63 ], [ %59, %57 ]
  %67 = ptrtoint i64* %66 to i64
  %68 = add i64 %67, 8
  %69 = inttoptr i64 %68 to i64*
  store i64* %69, i64** %58, align 8
  store i64 %50, i64* %66, align 8
  br label %72

70:                                               ; preds = %33
  %71 = tail call i64* @_ZN2v88internal6String11SlowFlattenEPNS0_7IsolateENS0_6HandleINS0_10ConsStringEEENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i64* %1, i8 zeroext %2) #6
  br label %118

72:                                               ; preds = %65, %54, %3, %15
  %73 = phi i64 [ %4, %15 ], [ %4, %3 ], [ %50, %65 ], [ %56, %54 ]
  %74 = phi i64* [ %1, %15 ], [ %1, %3 ], [ %66, %65 ], [ %55, %54 ]
  %75 = and i64 %73, -4294967296
  %76 = add i64 %73, -1
  %77 = inttoptr i64 %76 to i32*
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = zext i32 %78 to i64
  %80 = or i64 %75, %79
  %81 = add i64 %80, 7
  %82 = inttoptr i64 %81 to i16*
  %83 = load atomic i16, i16* %82 monotonic, align 2
  %84 = icmp ult i16 %83, 64
  br i1 %84, label %85, label %118

85:                                               ; preds = %72
  %86 = load atomic i32, i32* %77 monotonic, align 4
  %87 = zext i32 %86 to i64
  %88 = or i64 %75, %87
  %89 = add i64 %88, 7
  %90 = inttoptr i64 %89 to i16*
  %91 = load atomic i16, i16* %90 monotonic, align 2
  %92 = and i16 %91, 7
  %93 = icmp eq i16 %92, 5
  br i1 %93, label %94, label %118

94:                                               ; preds = %85
  %95 = add i64 %73, 11
  %96 = inttoptr i64 %95 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = zext i32 %97 to i64
  %99 = or i64 %75, %98
  %100 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %101 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %100, align 8
  %102 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %101, null
  br i1 %102, label %105, label %103

103:                                              ; preds = %94
  %104 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %101, i64 %99) #6
  br label %118

105:                                              ; preds = %94
  %106 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %107 = load i64*, i64** %106, align 8
  %108 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %109 = load i64*, i64** %108, align 8
  %110 = icmp eq i64* %107, %109
  br i1 %110, label %111, label %113

111:                                              ; preds = %105
  %112 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %113

113:                                              ; preds = %111, %105
  %114 = phi i64* [ %112, %111 ], [ %107, %105 ]
  %115 = ptrtoint i64* %114 to i64
  %116 = add i64 %115, 8
  %117 = inttoptr i64 %116 to i64*
  store i64* %117, i64** %106, align 8
  store i64 %99, i64* %114, align 8
  br label %118

118:                                              ; preds = %72, %85, %103, %113, %70
  %119 = phi i64* [ %71, %70 ], [ %74, %85 ], [ %104, %103 ], [ %114, %113 ], [ %74, %72 ]
  ret i64* %119
}

declare zeroext i1 @_ZN2v88internal6String16HasOneBytePrefixENS0_6VectorIKcEE(%"class.v8::internal::String"*, i8*, i64) local_unnamed_addr #3

declare i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"*, i64*, i32, i32) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN2v88internal18SharedFunctionInfo13inferred_nameEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #5 comdat align 2 {
  %2 = alloca %"class.v8::internal::ScopeInfo", align 8
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 7
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = and i64 %9, 1
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %44, label %13

13:                                               ; preds = %1
  %14 = add i64 %10, -1
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %5, %17
  %19 = add i64 %18, 7
  %20 = inttoptr i64 %19 to i16*
  %21 = load atomic i16, i16* %20 monotonic, align 2
  %22 = icmp eq i16 %21, 178
  br i1 %22, label %23, label %44

23:                                               ; preds = %13
  %24 = bitcast %"class.v8::internal::ScopeInfo"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #6
  %25 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %10, i64* %25, align 8
  %26 = call zeroext i1 @_ZNK2v88internal9ScopeInfo23HasInferredFunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %2) #6
  br i1 %26, label %27, label %42

27:                                               ; preds = %23
  %28 = call i64 @_ZNK2v88internal9ScopeInfo20InferredFunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %2) #6
  %29 = and i64 %28, 1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %42, label %31

31:                                               ; preds = %27
  %32 = and i64 %28, -4294967296
  %33 = add i64 %28, -1
  %34 = inttoptr i64 %33 to i32*
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = zext i32 %35 to i64
  %37 = or i64 %32, %36
  %38 = add i64 %37, 7
  %39 = inttoptr i64 %38 to i16*
  %40 = load atomic i16, i16* %39 monotonic, align 2
  %41 = icmp ult i16 %40, 64
  br i1 %41, label %43, label %42

42:                                               ; preds = %23, %31, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #6
  br label %78

43:                                               ; preds = %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #6
  br label %100

44:                                               ; preds = %1, %13
  %45 = load i64, i64* %3, align 8
  %46 = and i64 %45, -4294967296
  %47 = add i64 %45, 3
  %48 = inttoptr i64 %47 to i32*
  %49 = load atomic i32, i32* %48 acquire, align 4
  %50 = zext i32 %49 to i64
  %51 = and i64 %50, 1
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %78, label %53

53:                                               ; preds = %44
  %54 = or i64 %46, %50
  %55 = add i64 %54, -1
  %56 = inttoptr i64 %55 to i32*
  %57 = load atomic i32, i32* %56 monotonic, align 4
  %58 = zext i32 %57 to i64
  %59 = or i64 %46, %58
  %60 = add i64 %59, 7
  %61 = inttoptr i64 %60 to i16*
  %62 = load atomic i16, i16* %61 monotonic, align 2
  %63 = add i16 %62, -157
  %64 = icmp ult i16 %63, 2
  br i1 %64, label %65, label %78

65:                                               ; preds = %53
  %66 = load i64, i64* %3, align 8
  %67 = and i64 %66, -4294967296
  %68 = add i64 %66, 3
  %69 = inttoptr i64 %68 to i32*
  %70 = load atomic i32, i32* %69 acquire, align 4
  %71 = zext i32 %70 to i64
  %72 = or i64 %67, %71
  %73 = add i64 %72, 3
  %74 = inttoptr i64 %73 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = zext i32 %75 to i64
  %77 = or i64 %67, %76
  br label %100

78:                                               ; preds = %44, %42, %53
  %79 = load i64, i64* %3, align 8
  %80 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %81 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %80, null
  br i1 %81, label %88, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %80, i64 0, i32 0, i32 1
  %84 = load i8, i8* %83, align 8, !range !2
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %88, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %80, i64 0, i32 1, i64 0
  br label %96

88:                                               ; preds = %82, %78
  %89 = and i64 %79, -262144
  %90 = or i64 %89, 16
  %91 = inttoptr i64 %90 to i64*
  %92 = load i64, i64* %91, align 16
  %93 = add i64 %92, -41416
  %94 = inttoptr i64 %93 to %"class.v8::internal::Isolate"*
  %95 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %94, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %96

96:                                               ; preds = %86, %88
  %97 = phi i64* [ %95, %88 ], [ %87, %86 ]
  %98 = getelementptr inbounds i64, i64* %97, i64 9
  %99 = load i64, i64* %98, align 8
  br label %100

100:                                              ; preds = %43, %96, %65
  %101 = phi i64 [ %99, %96 ], [ %28, %43 ], [ %77, %65 ]
  ret i64 %101
}

declare i64* @_ZNK2v88internal14LookupIterator12GetDataValueENS0_16AllocationPolicyE(%"class.v8::internal::LookupIterator"*, i32) local_unnamed_addr #3

declare i64* @_ZNK2v88internal14LookupIterator12GetAccessorsEv(%"class.v8::internal::LookupIterator"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal14StackFrameInfo11GetTypeNameENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = load i64, i64* %0, align 8
  %3 = and i64 %2, -262144
  %4 = or i64 %3, 16
  %5 = inttoptr i64 %4 to i64*
  %6 = load i64, i64* %5, align 16
  %7 = add i64 %6, -41416
  %8 = inttoptr i64 %7 to %"class.v8::internal::Isolate"*
  %9 = add i64 %2, 19
  %10 = inttoptr i64 %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %64

14:                                               ; preds = %1
  %15 = and i64 %2, -4294967296
  %16 = add i64 %2, 3
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %15, %19
  %21 = and i64 %19, 1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %61, label %23

23:                                               ; preds = %14
  %24 = add i64 %20, -1
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = zext i32 %26 to i64
  %28 = or i64 %15, %27
  %29 = add i64 %28, 7
  %30 = inttoptr i64 %29 to i16*
  %31 = load atomic i16, i16* %30 monotonic, align 2
  %32 = icmp eq i16 %31, 190
  br i1 %32, label %64, label %33

33:                                               ; preds = %23
  %34 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %35 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %34, null
  br i1 %35, label %42, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %34, i64 0, i32 0, i32 1
  %38 = load i8, i8* %37, align 8, !range !2
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %34, i64 0, i32 1, i64 0
  br label %50

42:                                               ; preds = %36, %33
  %43 = and i64 %20, -262144
  %44 = or i64 %43, 16
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45, align 16
  %47 = add i64 %46, -41416
  %48 = inttoptr i64 %47 to %"class.v8::internal::Isolate"*
  %49 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %48, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %50

50:                                               ; preds = %42, %40
  %51 = phi i64* [ %49, %42 ], [ %41, %40 ]
  %52 = getelementptr inbounds i64, i64* %51, i64 6
  %53 = load i64, i64* %52, align 8
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %18, %54
  br i1 %55, label %64, label %56

56:                                               ; preds = %50
  %57 = getelementptr inbounds i64, i64* %51, i64 4
  %58 = load i64, i64* %57, align 8
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %18, %59
  br i1 %60, label %64, label %61

61:                                               ; preds = %14, %56
  %62 = and i32 %11, 16
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %68, label %64

64:                                               ; preds = %50, %23, %56, %1, %61
  %65 = inttoptr i64 %7 to %"class.v8::internal::Factory"*
  %66 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %65, i64 176
  %67 = bitcast %"class.v8::internal::Factory"* %66 to i64*
  br label %128

68:                                               ; preds = %61
  %69 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 4
  %70 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %69, align 8
  %71 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %70, null
  br i1 %71, label %75, label %72

72:                                               ; preds = %68
  %73 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %70, i64 %20) #6
  %74 = load i64, i64* %73, align 8
  br label %88

75:                                               ; preds = %68
  %76 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 0
  %77 = load i64*, i64** %76, align 8
  %78 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 1
  %79 = load i64*, i64** %78, align 8
  %80 = icmp eq i64* %77, %79
  br i1 %80, label %81, label %83

81:                                               ; preds = %75
  %82 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %8) #6
  br label %83

83:                                               ; preds = %81, %75
  %84 = phi i64* [ %82, %81 ], [ %77, %75 ]
  %85 = ptrtoint i64* %84 to i64
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %86 to i64*
  store i64* %87, i64** %76, align 8
  store i64 %20, i64* %84, align 8
  br label %88

88:                                               ; preds = %72, %83
  %89 = phi i64 [ %74, %72 ], [ %20, %83 ]
  %90 = phi i64* [ %73, %72 ], [ %84, %83 ]
  %91 = and i64 %89, 1
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %104, label %93

93:                                               ; preds = %88
  %94 = and i64 %89, -4294967296
  %95 = add i64 %89, -1
  %96 = inttoptr i64 %95 to i32*
  %97 = load atomic i32, i32* %96 monotonic, align 4
  %98 = zext i32 %97 to i64
  %99 = or i64 %94, %98
  %100 = add i64 %99, 7
  %101 = inttoptr i64 %100 to i16*
  %102 = load atomic i16, i16* %101 monotonic, align 2
  %103 = icmp ugt i16 %102, 185
  br i1 %103, label %106, label %104

104:                                              ; preds = %93, %88
  %105 = tail call i64* @_ZN2v88internal6Object12ToObjectImplEPNS0_7IsolateENS0_6HandleIS1_EEPKc(%"class.v8::internal::Isolate"* %8, i64* %90, i8* null) #6
  br label %106

106:                                              ; preds = %93, %104
  %107 = phi i64* [ %105, %104 ], [ %90, %93 ]
  %108 = icmp eq i64* %107, null
  br i1 %108, label %109, label %110, !prof !3

109:                                              ; preds = %106
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29, i64 0, i64 0)) #9
  unreachable

110:                                              ; preds = %106
  %111 = load i64, i64* %107, align 8
  %112 = and i64 %111, -4294967296
  %113 = add i64 %111, -1
  %114 = inttoptr i64 %113 to i32*
  %115 = load atomic i32, i32* %114 monotonic, align 4
  %116 = zext i32 %115 to i64
  %117 = or i64 %112, %116
  %118 = add i64 %117, 7
  %119 = inttoptr i64 %118 to i16*
  %120 = load atomic i16, i16* %119 monotonic, align 2
  %121 = icmp eq i16 %120, 188
  br i1 %121, label %122, label %126

122:                                              ; preds = %110
  %123 = inttoptr i64 %7 to %"class.v8::internal::Factory"*
  %124 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %123, i64 3408
  %125 = bitcast %"class.v8::internal::Factory"* %124 to i64*
  br label %128

126:                                              ; preds = %110
  %127 = tail call i64* @_ZN2v88internal10JSReceiver18GetConstructorNameENS0_6HandleIS1_EE(i64* nonnull %107) #6
  br label %128

128:                                              ; preds = %122, %126, %64
  %129 = phi i64* [ %67, %64 ], [ %125, %122 ], [ %127, %126 ]
  ret i64* %129
}

declare i64* @_ZN2v88internal10JSReceiver18GetConstructorNameENS0_6HandleIS1_EE(i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal14StackFrameInfo17GetWasmModuleNameENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = load i64, i64* %0, align 8
  %3 = and i64 %2, -262144
  %4 = or i64 %3, 16
  %5 = inttoptr i64 %4 to i64*
  %6 = load i64, i64* %5, align 16
  %7 = add i64 %6, -41416
  %8 = inttoptr i64 %7 to %"class.v8::internal::Isolate"*
  %9 = add i64 %2, 19
  %10 = inttoptr i64 %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %48, label %14

14:                                               ; preds = %1
  %15 = and i64 %2, -4294967296
  %16 = add i64 %2, 3
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %15, %19
  %21 = add i64 %20, 111
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %15, %24
  %26 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 4
  %27 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %26, align 8
  %28 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %27, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %14
  %30 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %27, i64 %25) #6
  br label %44

31:                                               ; preds = %14
  %32 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 0
  %33 = load i64*, i64** %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 1
  %35 = load i64*, i64** %34, align 8
  %36 = icmp eq i64* %33, %35
  br i1 %36, label %37, label %39

37:                                               ; preds = %31
  %38 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %8) #6
  br label %39

39:                                               ; preds = %37, %31
  %40 = phi i64* [ %38, %37 ], [ %33, %31 ]
  %41 = ptrtoint i64* %40 to i64
  %42 = add i64 %41, 8
  %43 = inttoptr i64 %42 to i64*
  store i64* %43, i64** %32, align 8
  store i64 %25, i64* %40, align 8
  br label %44

44:                                               ; preds = %29, %39
  %45 = phi i64* [ %30, %29 ], [ %40, %39 ]
  %46 = tail call i64* @_ZN2v88internal16WasmModuleObject19GetModuleNameOrNullEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %8, i64* %45) #6
  %47 = icmp eq i64* %46, null
  br i1 %47, label %48, label %52

48:                                               ; preds = %1, %44
  %49 = inttoptr i64 %7 to %"class.v8::internal::Factory"*
  %50 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %49, i64 176
  %51 = bitcast %"class.v8::internal::Factory"* %50 to i64*
  br label %52

52:                                               ; preds = %44, %48
  %53 = phi i64* [ %51, %48 ], [ %46, %44 ]
  ret i64* %53
}

declare i64* @_ZN2v88internal16WasmModuleObject19GetModuleNameOrNullEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal14StackFrameInfo21ComputeSourcePositionENS0_6HandleIS1_EEi(i64*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::WasmInstanceObject", align 8
  %4 = alloca %"class.v8::internal::AbstractCode", align 8
  %5 = load i64, i64* %0, align 8
  %6 = and i64 %5, -262144
  %7 = or i64 %6, 16
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8, align 16
  %10 = add i64 %9, -41416
  %11 = inttoptr i64 %10 to %"class.v8::internal::Isolate"*
  %12 = add i64 %5, 19
  %13 = inttoptr i64 %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = and i64 %5, -4294967296
  br i1 %16, label %56, label %18

18:                                               ; preds = %2
  %19 = add i64 %5, 11
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  %23 = or i64 %17, %22
  %24 = add i64 %23, 3
  %25 = inttoptr i64 %24 to %"struct.v8::internal::ManagedPtrDestructor"**
  %26 = load %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"** %25, align 1
  %27 = getelementptr inbounds %"struct.v8::internal::ManagedPtrDestructor", %"struct.v8::internal::ManagedPtrDestructor"* %26, i64 0, i32 3
  %28 = bitcast i8** %27 to %"class.std::__1::shared_ptr.1331"**
  %29 = load %"class.std::__1::shared_ptr.1331"*, %"class.std::__1::shared_ptr.1331"** %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::shared_ptr.1331", %"class.std::__1::shared_ptr.1331"* %29, i64 0, i32 0
  %31 = load %"class.v8::internal::wasm::GlobalWasmCodeRef"*, %"class.v8::internal::wasm::GlobalWasmCodeRef"** %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::wasm::GlobalWasmCodeRef", %"class.v8::internal::wasm::GlobalWasmCodeRef"* %31, i64 0, i32 0
  %33 = load %"class.v8::internal::wasm::WasmCode"*, %"class.v8::internal::wasm::WasmCode"** %32, align 8
  %34 = tail call i32 @_ZN2v88internal4wasm8WasmCode23GetSourcePositionBeforeEi(%"class.v8::internal::wasm::WasmCode"* %33, i32 %1) #6
  %35 = bitcast %"class.v8::internal::WasmInstanceObject"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #6
  %36 = load i64, i64* %0, align 8
  %37 = and i64 %36, -4294967296
  %38 = add i64 %36, 3
  %39 = inttoptr i64 %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %37, %41
  %43 = getelementptr inbounds %"class.v8::internal::WasmInstanceObject", %"class.v8::internal::WasmInstanceObject"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %42, i64* %43, align 8
  %44 = call %"struct.v8::internal::wasm::WasmModule"* @_ZN2v88internal18WasmInstanceObject6moduleEv(%"class.v8::internal::WasmInstanceObject"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #6
  %45 = load i64, i64* %0, align 8
  %46 = add i64 %45, 7
  %47 = inttoptr i64 %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = ashr i32 %48, 1
  %50 = add i64 %45, 19
  %51 = inttoptr i64 %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = and i32 %52, 32
  %54 = icmp ne i32 %53, 0
  %55 = call i32 @_ZN2v88internal4wasm17GetSourcePositionEPKNS1_10WasmModuleEjjb(%"struct.v8::internal::wasm::WasmModule"* %44, i32 %49, i32 %34, i1 zeroext %54) #6
  br label %97

56:                                               ; preds = %2
  %57 = add i64 %5, 7
  %58 = inttoptr i64 %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = zext i32 %59 to i64
  %61 = or i64 %17, %60
  %62 = add i64 %61, 11
  %63 = inttoptr i64 %62 to i32*
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = zext i32 %64 to i64
  %66 = or i64 %17, %65
  %67 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 4
  %68 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %67, align 8
  %69 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %68, null
  br i1 %69, label %72, label %70

70:                                               ; preds = %56
  %71 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %68, i64 %66) #6
  br label %85

72:                                               ; preds = %56
  %73 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 0
  %74 = load i64*, i64** %73, align 8
  %75 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 1
  %76 = load i64*, i64** %75, align 8
  %77 = icmp eq i64* %74, %76
  br i1 %77, label %78, label %80

78:                                               ; preds = %72
  %79 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %11) #6
  br label %80

80:                                               ; preds = %78, %72
  %81 = phi i64* [ %79, %78 ], [ %74, %72 ]
  %82 = ptrtoint i64* %81 to i64
  %83 = add i64 %82, 8
  %84 = inttoptr i64 %83 to i64*
  store i64* %84, i64** %73, align 8
  store i64 %66, i64* %81, align 8
  br label %85

85:                                               ; preds = %70, %80
  %86 = phi i64* [ %71, %70 ], [ %81, %80 ]
  tail call void @_ZN2v88internal18SharedFunctionInfo30EnsureSourcePositionsAvailableEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %11, i64* %86) #6
  %87 = bitcast %"class.v8::internal::AbstractCode"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %87) #6
  %88 = load i64, i64* %0, align 8
  %89 = and i64 %88, -4294967296
  %90 = add i64 %88, 11
  %91 = inttoptr i64 %90 to i32*
  %92 = load i32, i32* %91, align 4
  %93 = zext i32 %92 to i64
  %94 = or i64 %89, %93
  %95 = getelementptr inbounds %"class.v8::internal::AbstractCode", %"class.v8::internal::AbstractCode"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %94, i64* %95, align 8
  %96 = call i32 @_ZN2v88internal12AbstractCode14SourcePositionEi(%"class.v8::internal::AbstractCode"* nonnull %4, i32 %1) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %87) #6
  br label %97

97:                                               ; preds = %85, %18
  %98 = phi i32 [ %55, %18 ], [ %96, %85 ]
  ret i32 %98
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal14StackFrameInfo15ComputeLocationENS0_6HandleIS1_EEPNS0_15MessageLocationE(i64*, %"class.v8::internal::MessageLocation"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Script", align 8
  %4 = alloca %"class.v8::internal::MessageLocation", align 8
  %5 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %6 = alloca %"class.v8::internal::MessageLocation", align 8
  %7 = alloca %"class.v8::internal::MessageLocation", align 8
  %8 = load i64, i64* %0, align 8
  %9 = and i64 %8, -262144
  %10 = or i64 %9, 16
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11, align 16
  %13 = add i64 %12, -41416
  %14 = inttoptr i64 %13 to %"class.v8::internal::Isolate"*
  %15 = add i64 %8, 19
  %16 = inttoptr i64 %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %82, label %20

20:                                               ; preds = %2
  %21 = trunc i32 %17 to i8
  %22 = icmp sgt i8 %21, -1
  %23 = add i64 %8, 15
  %24 = inttoptr i64 %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  br i1 %22, label %27, label %40

27:                                               ; preds = %20
  %28 = tail call i32 @_ZN2v88internal14StackFrameInfo21ComputeSourcePositionENS0_6HandleIS1_EEi(i64* %0, i32 %26) #6
  %29 = load i64, i64* %0, align 8
  %30 = shl i32 %28, 1
  %31 = add i64 %29, 15
  %32 = inttoptr i64 %31 to i32*
  store atomic volatile i32 %30, i32* %32 monotonic, align 4
  %33 = load i64, i64* %0, align 8
  %34 = add i64 %33, 19
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = and i32 %36, -130
  %38 = or i32 %37, 128
  store atomic volatile i32 %38, i32* %35 monotonic, align 4
  %39 = load i64, i64* %0, align 8
  br label %40

40:                                               ; preds = %20, %27
  %41 = phi i64 [ %39, %27 ], [ %8, %20 ]
  %42 = phi i32 [ %28, %27 ], [ %26, %20 ]
  %43 = and i64 %41, -4294967296
  %44 = add i64 %41, 3
  %45 = inttoptr i64 %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i64
  %48 = or i64 %43, %47
  %49 = add i64 %48, 111
  %50 = inttoptr i64 %49 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = or i64 %43, %52
  %54 = add i64 %53, 19
  %55 = inttoptr i64 %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = zext i32 %56 to i64
  %58 = or i64 %43, %57
  %59 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %14, i64 0, i32 31, i32 4
  %60 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %59, align 8
  %61 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %60, null
  br i1 %61, label %64, label %62

62:                                               ; preds = %40
  %63 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %60, i64 %58) #6
  br label %77

64:                                               ; preds = %40
  %65 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %14, i64 0, i32 31, i32 0
  %66 = load i64*, i64** %65, align 8
  %67 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %14, i64 0, i32 31, i32 1
  %68 = load i64*, i64** %67, align 8
  %69 = icmp eq i64* %66, %68
  br i1 %69, label %70, label %72

70:                                               ; preds = %64
  %71 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %14) #6
  br label %72

72:                                               ; preds = %70, %64
  %73 = phi i64* [ %71, %70 ], [ %66, %64 ]
  %74 = ptrtoint i64* %73 to i64
  %75 = add i64 %74, 8
  %76 = inttoptr i64 %75 to i64*
  store i64* %76, i64** %65, align 8
  store i64 %58, i64* %73, align 8
  br label %77

77:                                               ; preds = %62, %72
  %78 = phi i64* [ %63, %62 ], [ %73, %72 ]
  %79 = bitcast %"class.v8::internal::MessageLocation"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %79) #6
  %80 = add nsw i32 %42, 1
  call void @_ZN2v88internal15MessageLocationC1ENS0_6HandleINS0_6ScriptEEEii(%"class.v8::internal::MessageLocation"* nonnull %4, i64* %78, i32 %42, i32 %80) #6
  %81 = bitcast %"class.v8::internal::MessageLocation"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* nonnull align 8 %79, i64 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %79) #6
  br label %408

82:                                               ; preds = %2
  %83 = and i64 %8, -4294967296
  %84 = add i64 %8, 7
  %85 = inttoptr i64 %84 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = zext i32 %86 to i64
  %88 = or i64 %83, %87
  %89 = add i64 %88, 11
  %90 = inttoptr i64 %89 to i32*
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = zext i32 %91 to i64
  %93 = or i64 %83, %92
  %94 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %14, i64 0, i32 31, i32 4
  %95 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %94, align 8
  %96 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %95, null
  br i1 %96, label %100, label %97

97:                                               ; preds = %82
  %98 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %95, i64 %93) #6
  %99 = load i64, i64* %98, align 8
  br label %113

100:                                              ; preds = %82
  %101 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %14, i64 0, i32 31, i32 0
  %102 = load i64*, i64** %101, align 8
  %103 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %14, i64 0, i32 31, i32 1
  %104 = load i64*, i64** %103, align 8
  %105 = icmp eq i64* %102, %104
  br i1 %105, label %106, label %108

106:                                              ; preds = %100
  %107 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %14) #6
  br label %108

108:                                              ; preds = %106, %100
  %109 = phi i64* [ %107, %106 ], [ %102, %100 ]
  %110 = ptrtoint i64* %109 to i64
  %111 = add i64 %110, 8
  %112 = inttoptr i64 %111 to i64*
  store i64* %112, i64** %101, align 8
  store i64 %93, i64* %109, align 8
  br label %113

113:                                              ; preds = %97, %108
  %114 = phi i64 [ %99, %97 ], [ %93, %108 ]
  %115 = phi i64* [ %98, %97 ], [ %109, %108 ]
  %116 = and i64 %114, -4294967296
  %117 = add i64 %114, 3
  %118 = inttoptr i64 %117 to i32*
  %119 = load atomic i32, i32* %118 acquire, align 4
  %120 = zext i32 %119 to i64
  %121 = and i64 %120, 1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %134, label %123

123:                                              ; preds = %113
  %124 = or i64 %116, %120
  %125 = add i64 %124, -1
  %126 = inttoptr i64 %125 to i32*
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = zext i32 %127 to i64
  %129 = or i64 %116, %128
  %130 = add i64 %129, 7
  %131 = inttoptr i64 %130 to i16*
  %132 = load atomic i16, i16* %131 monotonic, align 2
  %133 = icmp eq i16 %132, 92
  br i1 %133, label %408, label %134

134:                                              ; preds = %123, %113
  %135 = add i64 %114, 15
  %136 = inttoptr i64 %135 to i32*
  %137 = load atomic i32, i32* %136 acquire, align 4
  %138 = zext i32 %137 to i64
  %139 = or i64 %116, %138
  %140 = add i64 %139, -1
  %141 = inttoptr i64 %140 to i32*
  %142 = load atomic i32, i32* %141 monotonic, align 4
  %143 = zext i32 %142 to i64
  %144 = or i64 %116, %143
  %145 = add i64 %144, 7
  %146 = inttoptr i64 %145 to i16*
  %147 = load atomic i16, i16* %146 monotonic, align 2
  %148 = icmp eq i16 %147, 100
  br i1 %148, label %149, label %155

149:                                              ; preds = %134
  %150 = add i64 %139, 11
  %151 = inttoptr i64 %150 to i32*
  %152 = load i32, i32* %151, align 4
  %153 = zext i32 %152 to i64
  %154 = or i64 %116, %153
  br label %155

155:                                              ; preds = %149, %134
  %156 = phi i64 [ %154, %149 ], [ %139, %134 ]
  %157 = and i64 %156, 1
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %183, label %159

159:                                              ; preds = %155
  %160 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %161 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %160, null
  br i1 %161, label %168, label %162

162:                                              ; preds = %159
  %163 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %160, i64 0, i32 0, i32 1
  %164 = load i8, i8* %163, align 8, !range !2
  %165 = icmp eq i8 %164, 0
  br i1 %165, label %168, label %166

166:                                              ; preds = %162
  %167 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %160, i64 0, i32 1, i64 0
  br label %176

168:                                              ; preds = %162, %159
  %169 = and i64 %156, -262144
  %170 = or i64 %169, 16
  %171 = inttoptr i64 %170 to i64*
  %172 = load i64, i64* %171, align 16
  %173 = add i64 %172, -41416
  %174 = inttoptr i64 %173 to %"class.v8::internal::Isolate"*
  %175 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %174, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %176

176:                                              ; preds = %168, %166
  %177 = phi i64* [ %175, %168 ], [ %167, %166 ]
  %178 = getelementptr inbounds i64, i64* %177, i64 4
  %179 = load i64, i64* %178, align 8
  %180 = trunc i64 %156 to i32
  %181 = trunc i64 %179 to i32
  %182 = icmp eq i32 %180, %181
  br i1 %182, label %408, label %183

183:                                              ; preds = %155, %176
  %184 = bitcast %"class.v8::internal::Script"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %184) #6
  %185 = getelementptr inbounds %"class.v8::internal::Script", %"class.v8::internal::Script"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %156, i64* %185, align 8
  %186 = call zeroext i1 @_ZNK2v88internal6Script16IsUserJavaScriptEv(%"class.v8::internal::Script"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %184) #6
  br i1 %186, label %187, label %408

187:                                              ; preds = %183
  %188 = load i64, i64* %115, align 8
  %189 = and i64 %188, -4294967296
  %190 = add i64 %188, 15
  %191 = inttoptr i64 %190 to i32*
  %192 = load atomic i32, i32* %191 acquire, align 4
  %193 = zext i32 %192 to i64
  %194 = or i64 %189, %193
  %195 = add i64 %194, -1
  %196 = inttoptr i64 %195 to i32*
  %197 = load atomic i32, i32* %196 monotonic, align 4
  %198 = zext i32 %197 to i64
  %199 = or i64 %189, %198
  %200 = add i64 %199, 7
  %201 = inttoptr i64 %200 to i16*
  %202 = load atomic i16, i16* %201 monotonic, align 2
  %203 = icmp eq i16 %202, 100
  br i1 %203, label %204, label %210

204:                                              ; preds = %187
  %205 = add i64 %194, 11
  %206 = inttoptr i64 %205 to i32*
  %207 = load i32, i32* %206, align 4
  %208 = zext i32 %207 to i64
  %209 = or i64 %189, %208
  br label %210

210:                                              ; preds = %187, %204
  %211 = phi i64 [ %209, %204 ], [ %194, %187 ]
  %212 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %94, align 8
  %213 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %212, null
  br i1 %213, label %217, label %214

214:                                              ; preds = %210
  %215 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %212, i64 %211) #6
  %216 = load i64, i64* %215, align 8
  br label %230

217:                                              ; preds = %210
  %218 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %14, i64 0, i32 31, i32 0
  %219 = load i64*, i64** %218, align 8
  %220 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %14, i64 0, i32 31, i32 1
  %221 = load i64*, i64** %220, align 8
  %222 = icmp eq i64* %219, %221
  br i1 %222, label %223, label %225

223:                                              ; preds = %217
  %224 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %14) #6
  br label %225

225:                                              ; preds = %223, %217
  %226 = phi i64* [ %224, %223 ], [ %219, %217 ]
  %227 = ptrtoint i64* %226 to i64
  %228 = add i64 %227, 8
  %229 = inttoptr i64 %228 to i64*
  store i64* %229, i64** %218, align 8
  store i64 %211, i64* %226, align 8
  br label %230

230:                                              ; preds = %214, %225
  %231 = phi i64 [ %216, %214 ], [ %211, %225 ]
  %232 = phi i64* [ %215, %214 ], [ %226, %225 ]
  %233 = and i64 %231, -4294967296
  %234 = add i64 %231, 3
  %235 = inttoptr i64 %234 to i32*
  %236 = load i32, i32* %235, align 4
  %237 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %238 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %237, null
  br i1 %238, label %245, label %239

239:                                              ; preds = %230
  %240 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %237, i64 0, i32 0, i32 1
  %241 = load i8, i8* %240, align 8, !range !2
  %242 = icmp eq i8 %241, 0
  br i1 %242, label %245, label %243

243:                                              ; preds = %239
  %244 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %237, i64 0, i32 1, i64 0
  br label %255

245:                                              ; preds = %239, %230
  %246 = and i32 %236, -262144
  %247 = zext i32 %246 to i64
  %248 = or i64 %233, %247
  %249 = or i64 %248, 16
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250, align 16
  %252 = add i64 %251, -41416
  %253 = inttoptr i64 %252 to %"class.v8::internal::Isolate"*
  %254 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %253, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %255

255:                                              ; preds = %243, %245
  %256 = phi i64* [ %254, %245 ], [ %244, %243 ]
  %257 = getelementptr inbounds i64, i64* %256, i64 4
  %258 = load i64, i64* %257, align 8
  %259 = trunc i64 %258 to i32
  %260 = icmp eq i32 %236, %259
  br i1 %260, label %408, label %261

261:                                              ; preds = %255
  %262 = load i64, i64* %0, align 8
  %263 = add i64 %262, 19
  %264 = inttoptr i64 %263 to i32*
  %265 = load i32, i32* %264, align 4
  %266 = trunc i32 %265 to i8
  %267 = icmp sgt i8 %266, -1
  %268 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %268) #6
  br i1 %267, label %269, label %370

269:                                              ; preds = %261
  %270 = load i64, i64* %115, align 8
  %271 = and i64 %270, -4294967296
  %272 = add i64 %270, 3
  %273 = inttoptr i64 %272 to i32*
  %274 = load atomic i32, i32* %273 acquire, align 4
  %275 = zext i32 %274 to i64
  %276 = and i64 %275, 1
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %399, label %278

278:                                              ; preds = %269
  %279 = or i64 %271, %275
  %280 = add i64 %279, -1
  %281 = inttoptr i64 %280 to i32*
  %282 = load atomic i32, i32* %281 monotonic, align 4
  %283 = zext i32 %282 to i64
  %284 = or i64 %271, %283
  %285 = add i64 %284, 7
  %286 = inttoptr i64 %285 to i16*
  %287 = load atomic i16, i16* %286 monotonic, align 2
  %288 = icmp eq i16 %287, 133
  br i1 %288, label %305, label %289

289:                                              ; preds = %278
  %290 = load atomic i32, i32* %281 monotonic, align 4
  %291 = zext i32 %290 to i64
  %292 = or i64 %271, %291
  %293 = add i64 %292, 7
  %294 = inttoptr i64 %293 to i16*
  %295 = load atomic i16, i16* %294 monotonic, align 2
  %296 = icmp eq i16 %295, 105
  br i1 %296, label %305, label %297

297:                                              ; preds = %289
  %298 = load atomic i32, i32* %281 monotonic, align 4
  %299 = zext i32 %298 to i64
  %300 = or i64 %271, %299
  %301 = add i64 %300, 7
  %302 = inttoptr i64 %301 to i16*
  %303 = load atomic i16, i16* %302 monotonic, align 2
  %304 = icmp eq i16 %303, 94
  br i1 %304, label %305, label %399

305:                                              ; preds = %278, %289, %297
  %306 = load i64, i64* %115, align 8
  %307 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %306, i64* %307, align 8
  %308 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %5, i64 0, i32 0
  %309 = call i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"* nonnull %308, %"class.v8::internal::Isolate"* %14)
  %310 = and i64 %309, -4294967296
  %311 = add i64 %309, 15
  %312 = inttoptr i64 %311 to i32*
  %313 = load atomic i32, i32* %312 acquire, align 4
  %314 = zext i32 %313 to i64
  %315 = and i64 %314, 1
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %341, label %317

317:                                              ; preds = %305
  %318 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %319 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %318, null
  br i1 %319, label %326, label %320

320:                                              ; preds = %317
  %321 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %318, i64 0, i32 0, i32 1
  %322 = load i8, i8* %321, align 8, !range !2
  %323 = icmp eq i8 %322, 0
  br i1 %323, label %326, label %324

324:                                              ; preds = %320
  %325 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %318, i64 0, i32 1, i64 0
  br label %335

326:                                              ; preds = %320, %317
  %327 = and i64 %314, 4294705152
  %328 = or i64 %310, %327
  %329 = or i64 %328, 16
  %330 = inttoptr i64 %329 to i64*
  %331 = load i64, i64* %330, align 16
  %332 = add i64 %331, -41416
  %333 = inttoptr i64 %332 to %"class.v8::internal::Isolate"*
  %334 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %333, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %335

335:                                              ; preds = %326, %324
  %336 = phi i64* [ %334, %326 ], [ %325, %324 ]
  %337 = getelementptr inbounds i64, i64* %336, i64 4
  %338 = load i64, i64* %337, align 8
  %339 = trunc i64 %338 to i32
  %340 = icmp eq i32 %313, %339
  br i1 %340, label %399, label %341

341:                                              ; preds = %335, %305
  %342 = load atomic i32, i32* %312 acquire, align 4
  %343 = zext i32 %342 to i64
  %344 = and i64 %343, 1
  %345 = icmp eq i64 %344, 0
  br i1 %345, label %370, label %346

346:                                              ; preds = %341
  %347 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %348 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %347, null
  br i1 %348, label %355, label %349

349:                                              ; preds = %346
  %350 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %347, i64 0, i32 0, i32 1
  %351 = load i8, i8* %350, align 8, !range !2
  %352 = icmp eq i8 %351, 0
  br i1 %352, label %355, label %353

353:                                              ; preds = %349
  %354 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %347, i64 0, i32 1, i64 0
  br label %364

355:                                              ; preds = %349, %346
  %356 = and i64 %343, 4294705152
  %357 = or i64 %310, %356
  %358 = or i64 %357, 16
  %359 = inttoptr i64 %358 to i64*
  %360 = load i64, i64* %359, align 16
  %361 = add i64 %360, -41416
  %362 = inttoptr i64 %361 to %"class.v8::internal::Isolate"*
  %363 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %362, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %364

364:                                              ; preds = %353, %355
  %365 = phi i64* [ %363, %355 ], [ %354, %353 ]
  %366 = getelementptr inbounds i64, i64* %365, i64 32
  %367 = load i64, i64* %366, align 8
  %368 = trunc i64 %367 to i32
  %369 = icmp eq i32 %342, %368
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %268) #6
  br i1 %369, label %400, label %371

370:                                              ; preds = %261, %341
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %268) #6
  br label %371

371:                                              ; preds = %370, %364
  %372 = load i64, i64* %0, align 8
  %373 = add i64 %372, 19
  %374 = inttoptr i64 %373 to i32*
  %375 = load i32, i32* %374, align 4
  %376 = trunc i32 %375 to i8
  %377 = icmp sgt i8 %376, -1
  %378 = add i64 %372, 15
  %379 = inttoptr i64 %378 to i32*
  %380 = load i32, i32* %379, align 4
  %381 = ashr i32 %380, 1
  br i1 %377, label %382, label %394

382:                                              ; preds = %371
  %383 = call i32 @_ZN2v88internal14StackFrameInfo21ComputeSourcePositionENS0_6HandleIS1_EEi(i64* %0, i32 %381) #6
  %384 = load i64, i64* %0, align 8
  %385 = shl i32 %383, 1
  %386 = add i64 %384, 15
  %387 = inttoptr i64 %386 to i32*
  store atomic volatile i32 %385, i32* %387 monotonic, align 4
  %388 = load i64, i64* %0, align 8
  %389 = add i64 %388, 19
  %390 = inttoptr i64 %389 to i32*
  %391 = load i32, i32* %390, align 4
  %392 = and i32 %391, -130
  %393 = or i32 %392, 128
  store atomic volatile i32 %393, i32* %390 monotonic, align 4
  br label %394

394:                                              ; preds = %371, %382
  %395 = phi i32 [ %383, %382 ], [ %381, %371 ]
  %396 = bitcast %"class.v8::internal::MessageLocation"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %396) #6
  %397 = add nsw i32 %395, 1
  call void @_ZN2v88internal15MessageLocationC1ENS0_6HandleINS0_6ScriptEEEiiNS2_INS0_18SharedFunctionInfoEEE(%"class.v8::internal::MessageLocation"* nonnull %6, i64* %232, i32 %395, i32 %397, i64* %115) #6
  %398 = bitcast %"class.v8::internal::MessageLocation"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %398, i8* nonnull align 8 %396, i64 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %396) #6
  br label %408

399:                                              ; preds = %297, %269, %335
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %268) #6
  br label %400

400:                                              ; preds = %399, %364
  %401 = load i64, i64* %0, align 8
  %402 = add i64 %401, 15
  %403 = inttoptr i64 %402 to i32*
  %404 = load i32, i32* %403, align 4
  %405 = ashr i32 %404, 1
  %406 = bitcast %"class.v8::internal::MessageLocation"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %406) #6
  call void @_ZN2v88internal15MessageLocationC1ENS0_6HandleINS0_6ScriptEEENS2_INS0_18SharedFunctionInfoEEEi(%"class.v8::internal::MessageLocation"* nonnull %7, i64* %232, i64* %115, i32 %405) #6
  %407 = bitcast %"class.v8::internal::MessageLocation"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %407, i8* nonnull align 8 %406, i64 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %406) #6
  br label %408

408:                                              ; preds = %176, %123, %183, %394, %400, %255, %77
  %409 = phi i1 [ true, %77 ], [ false, %183 ], [ false, %255 ], [ true, %400 ], [ true, %394 ], [ false, %123 ], [ false, %176 ]
  ret i1 %409
}

declare void @_ZN2v88internal15MessageLocationC1ENS0_6HandleINS0_6ScriptEEEii(%"class.v8::internal::MessageLocation"*, i64*, i32, i32) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 15
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %5, %14
  %16 = add i64 %15, 7
  %17 = inttoptr i64 %16 to i16*
  %18 = load atomic i16, i16* %17 monotonic, align 2
  %19 = icmp eq i16 %18, 100
  br i1 %19, label %20, label %55

20:                                               ; preds = %2
  %21 = load i64, i64* %3, align 8
  %22 = and i64 %21, -4294967296
  %23 = add i64 %21, 15
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 acquire, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %22, %26
  %28 = add i64 %27, 19
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 acquire, align 4
  %31 = zext i32 %30 to i64
  %32 = or i64 %22, %31
  %33 = add i64 %32, -1
  %34 = inttoptr i64 %33 to i32*
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = zext i32 %35 to i64
  %37 = or i64 %22, %36
  %38 = add i64 %37, 7
  %39 = inttoptr i64 %38 to i16*
  %40 = load atomic i16, i16* %39 monotonic, align 2
  %41 = icmp eq i16 %40, 133
  br i1 %41, label %42, label %55

42:                                               ; preds = %20
  %43 = load i64, i64* %3, align 8
  %44 = and i64 %43, -4294967296
  %45 = add i64 %43, 15
  %46 = inttoptr i64 %45 to i32*
  %47 = load atomic i32, i32* %46 acquire, align 4
  %48 = zext i32 %47 to i64
  %49 = or i64 %44, %48
  %50 = add i64 %49, 15
  %51 = inttoptr i64 %50 to i32*
  %52 = load atomic i32, i32* %51 acquire, align 4
  %53 = zext i32 %52 to i64
  %54 = or i64 %44, %53
  br label %120

55:                                               ; preds = %2, %20
  %56 = load i64, i64* %3, align 8
  %57 = and i64 %56, -4294967296
  %58 = add i64 %56, 3
  %59 = inttoptr i64 %58 to i32*
  %60 = load atomic i32, i32* %59 acquire, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %57, %61
  %63 = and i64 %61, 1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %114, label %65

65:                                               ; preds = %55
  %66 = add i64 %62, -1
  %67 = inttoptr i64 %66 to i32*
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = zext i32 %68 to i64
  %70 = or i64 %57, %69
  %71 = add i64 %70, 7
  %72 = inttoptr i64 %71 to i16*
  %73 = load atomic i16, i16* %72 monotonic, align 2
  %74 = icmp eq i16 %73, 133
  br i1 %74, label %120, label %75

75:                                               ; preds = %65
  %76 = load atomic i32, i32* %67 monotonic, align 4
  %77 = zext i32 %76 to i64
  %78 = or i64 %57, %77
  %79 = add i64 %78, 7
  %80 = inttoptr i64 %79 to i16*
  %81 = load atomic i16, i16* %80 monotonic, align 2
  %82 = icmp eq i16 %81, 94
  br i1 %82, label %83, label %114

83:                                               ; preds = %75
  %84 = load i64, i64* %3, align 8
  %85 = and i64 %84, -4294967296
  %86 = add i64 %84, 3
  %87 = inttoptr i64 %86 to i32*
  %88 = load atomic i32, i32* %87 acquire, align 4
  %89 = zext i32 %88 to i64
  %90 = or i64 %85, %89
  %91 = add i64 %90, 7
  %92 = inttoptr i64 %91 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = or i64 %85, %94
  %96 = and i64 %94, 1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %108, label %98

98:                                               ; preds = %83
  %99 = add i64 %95, -1
  %100 = inttoptr i64 %99 to i32*
  %101 = load atomic i32, i32* %100 monotonic, align 4
  %102 = zext i32 %101 to i64
  %103 = or i64 %85, %102
  %104 = add i64 %103, 7
  %105 = inttoptr i64 %104 to i16*
  %106 = load atomic i16, i16* %105 monotonic, align 2
  %107 = icmp eq i16 %106, 133
  br i1 %107, label %120, label %108

108:                                              ; preds = %98, %83
  %109 = add i64 %95, 3
  %110 = inttoptr i64 %109 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = zext i32 %111 to i64
  %113 = or i64 %85, %112
  br label %120

114:                                              ; preds = %75, %55
  %115 = add i64 %62, 3
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = or i64 %57, %118
  br label %120

120:                                              ; preds = %114, %108, %98, %65, %42
  %121 = phi i64 [ %54, %42 ], [ %119, %114 ], [ %62, %65 ], [ %113, %108 ], [ %95, %98 ]
  ret i64 %121
}

declare void @_ZN2v88internal15MessageLocationC1ENS0_6HandleINS0_6ScriptEEEiiNS2_INS0_18SharedFunctionInfoEEE(%"class.v8::internal::MessageLocation"*, i64*, i32, i32, i64*) unnamed_addr #3

declare void @_ZN2v88internal15MessageLocationC1ENS0_6HandleINS0_6ScriptEEENS2_INS0_18SharedFunctionInfoEEEi(%"class.v8::internal::MessageLocation"*, i64*, i64*, i32) unnamed_addr #3

declare i32 @_ZN2v88internal4wasm8WasmCode23GetSourcePositionBeforeEi(%"class.v8::internal::wasm::WasmCode"*, i32) local_unnamed_addr #3

declare void @_ZN2v88internal18SharedFunctionInfo30EnsureSourcePositionsAvailableEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #3

declare i32 @_ZN2v88internal12AbstractCode14SourcePositionEi(%"class.v8::internal::AbstractCode"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal23SerializeStackFrameInfoEPNS0_7IsolateENS0_6HandleINS0_14StackFrameInfoEEEPNS0_24IncrementalStringBuilderE(%"class.v8::internal::Isolate"*, i64*, %"class.v8::internal::IncrementalStringBuilder"*) local_unnamed_addr #0 {
  %4 = alloca %"class.v8::internal::Vector.1459", align 8
  %5 = alloca %"class.v8::internal::Handle<v8::internal::StackFrameInfo>::ObjectRef", align 8
  %6 = alloca [16 x i8], align 16
  %7 = alloca %"class.v8::internal::FlatStringReader", align 8
  %8 = alloca %"class.v8::internal::FlatStringReader", align 8
  %9 = alloca [100 x i8], align 16
  %10 = load i64, i64* %1, align 8
  %11 = add i64 %10, 19
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 6
  %15 = icmp eq i32 %14, 2
  br i1 %15, label %16, label %1315

16:                                               ; preds = %3
  %17 = and i64 %10, -262144
  %18 = or i64 %17, 16
  %19 = inttoptr i64 %18 to i64*
  %20 = load i64, i64* %19, align 16
  %21 = add i64 %20, -41416
  %22 = inttoptr i64 %21 to %"class.v8::internal::Isolate"*
  %23 = and i64 %10, -4294967296
  %24 = add i64 %10, 3
  %25 = inttoptr i64 %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = or i64 %23, %27
  %29 = add i64 %28, 111
  %30 = inttoptr i64 %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i64
  %33 = or i64 %23, %32
  %34 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %22, i64 0, i32 31, i32 4
  %35 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %34, align 8
  %36 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %35, null
  br i1 %36, label %39, label %37

37:                                               ; preds = %16
  %38 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %35, i64 %33) #6
  br label %52

39:                                               ; preds = %16
  %40 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %22, i64 0, i32 31, i32 0
  %41 = load i64*, i64** %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %22, i64 0, i32 31, i32 1
  %43 = load i64*, i64** %42, align 8
  %44 = icmp eq i64* %41, %43
  br i1 %44, label %45, label %47

45:                                               ; preds = %39
  %46 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %22) #6
  br label %47

47:                                               ; preds = %45, %39
  %48 = phi i64* [ %46, %45 ], [ %41, %39 ]
  %49 = ptrtoint i64* %48 to i64
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %50 to i64*
  store i64* %51, i64** %40, align 8
  store i64 %33, i64* %48, align 8
  br label %52

52:                                               ; preds = %47, %37
  %53 = phi i64* [ %38, %37 ], [ %48, %47 ]
  %54 = tail call i64* @_ZN2v88internal16WasmModuleObject19GetModuleNameOrNullEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %22, i64* %53) #6
  %55 = icmp eq i64* %54, null
  %56 = inttoptr i64 %21 to %"class.v8::internal::Factory"*
  %57 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %56, i64 176
  %58 = bitcast %"class.v8::internal::Factory"* %57 to i64*
  %59 = select i1 %55, i64* %58, i64* %54
  %60 = tail call i64* @_ZN2v88internal14StackFrameInfo15GetFunctionNameENS0_6HandleIS1_EE(i64* %1) #6
  %61 = load i64, i64* %59, align 8
  %62 = and i64 %61, 1
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %135, label %64

64:                                               ; preds = %52
  %65 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %66 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %65, null
  br i1 %66, label %73, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %65, i64 0, i32 0, i32 1
  %69 = load i8, i8* %68, align 8, !range !2
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %73, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %65, i64 0, i32 1, i64 0
  br label %81

73:                                               ; preds = %67, %64
  %74 = and i64 %61, -262144
  %75 = or i64 %74, 16
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76, align 16
  %78 = add i64 %77, -41416
  %79 = inttoptr i64 %78 to %"class.v8::internal::Isolate"*
  %80 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %79, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %81

81:                                               ; preds = %73, %71
  %82 = phi i64* [ %80, %73 ], [ %72, %71 ]
  %83 = getelementptr inbounds i64, i64* %82, i64 6
  %84 = load i64, i64* %83, align 8
  %85 = trunc i64 %61 to i32
  %86 = trunc i64 %84 to i32
  %87 = icmp eq i32 %85, %86
  br i1 %87, label %88, label %114

88:                                               ; preds = %81
  %89 = load i64, i64* %60, align 8
  %90 = and i64 %89, 1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %114, label %92

92:                                               ; preds = %88
  br i1 %66, label %99, label %93

93:                                               ; preds = %92
  %94 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %65, i64 0, i32 0, i32 1
  %95 = load i8, i8* %94, align 8, !range !2
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %99, label %97

97:                                               ; preds = %93
  %98 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %65, i64 0, i32 1, i64 0
  br label %107

99:                                               ; preds = %93, %92
  %100 = and i64 %89, -262144
  %101 = or i64 %100, 16
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102, align 16
  %104 = add i64 %103, -41416
  %105 = inttoptr i64 %104 to %"class.v8::internal::Isolate"*
  %106 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %105, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %107

107:                                              ; preds = %99, %97
  %108 = phi i64* [ %106, %99 ], [ %98, %97 ]
  %109 = getelementptr inbounds i64, i64* %108, i64 6
  %110 = load i64, i64* %109, align 8
  %111 = trunc i64 %89 to i32
  %112 = trunc i64 %110 to i32
  %113 = icmp eq i32 %111, %112
  br i1 %113, label %251, label %114

114:                                              ; preds = %107, %88, %81
  br i1 %66, label %121, label %115

115:                                              ; preds = %114
  %116 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %65, i64 0, i32 0, i32 1
  %117 = load i8, i8* %116, align 8, !range !2
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %121, label %119

119:                                              ; preds = %115
  %120 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %65, i64 0, i32 1, i64 0
  br label %129

121:                                              ; preds = %115, %114
  %122 = and i64 %61, -262144
  %123 = or i64 %122, 16
  %124 = inttoptr i64 %123 to i64*
  %125 = load i64, i64* %124, align 16
  %126 = add i64 %125, -41416
  %127 = inttoptr i64 %126 to %"class.v8::internal::Isolate"*
  %128 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %127, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %129

129:                                              ; preds = %121, %119
  %130 = phi i64* [ %128, %121 ], [ %120, %119 ]
  %131 = getelementptr inbounds i64, i64* %130, i64 6
  %132 = load i64, i64* %131, align 8
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %85, %133
  br i1 %134, label %193, label %135

135:                                              ; preds = %129, %52
  tail call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* %2, i64* %59) #6
  %136 = load i64, i64* %60, align 8
  %137 = and i64 %136, 1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %163, label %139

139:                                              ; preds = %135
  %140 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %141 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %140, null
  br i1 %141, label %148, label %142

142:                                              ; preds = %139
  %143 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %140, i64 0, i32 0, i32 1
  %144 = load i8, i8* %143, align 8, !range !2
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %148, label %146

146:                                              ; preds = %142
  %147 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %140, i64 0, i32 1, i64 0
  br label %156

148:                                              ; preds = %142, %139
  %149 = and i64 %136, -262144
  %150 = or i64 %149, 16
  %151 = inttoptr i64 %150 to i64*
  %152 = load i64, i64* %151, align 16
  %153 = add i64 %152, -41416
  %154 = inttoptr i64 %153 to %"class.v8::internal::Isolate"*
  %155 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %154, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %156

156:                                              ; preds = %148, %146
  %157 = phi i64* [ %155, %148 ], [ %147, %146 ]
  %158 = getelementptr inbounds i64, i64* %157, i64 6
  %159 = load i64, i64* %158, align 8
  %160 = trunc i64 %136 to i32
  %161 = trunc i64 %159 to i32
  %162 = icmp eq i32 %160, %161
  br i1 %162, label %194, label %163

163:                                              ; preds = %156, %135
  %164 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %165 = load i32, i32* %164, align 8
  %166 = icmp eq i32 %165, 0
  %167 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %168 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %169 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %170 = load i64*, i64** %167, align 8
  %171 = load i64, i64* %170, align 8
  %172 = load i32, i32* %168, align 4
  %173 = add nsw i32 %172, 1
  store i32 %173, i32* %168, align 4
  br i1 %166, label %183, label %174

174:                                              ; preds = %163
  %175 = shl nsw i32 %172, 1
  %176 = sext i32 %175 to i64
  %177 = add i64 %171, 11
  %178 = add i64 %177, %176
  %179 = inttoptr i64 %178 to i16*
  store i16 46, i16* %179, align 2
  %180 = load i32, i32* %168, align 4
  %181 = load i32, i32* %169, align 8
  %182 = icmp eq i32 %180, %181
  br i1 %182, label %192, label %193

183:                                              ; preds = %163
  %184 = sext i32 %172 to i64
  %185 = add i64 %171, 11
  %186 = add i64 %185, %184
  %187 = inttoptr i64 %186 to i8*
  store i8 46, i8* %187, align 1
  %188 = load i32, i32* %168, align 4
  %189 = load i32, i32* %169, align 8
  %190 = icmp eq i32 %188, %189
  br i1 %190, label %191, label %193

191:                                              ; preds = %183
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %193

192:                                              ; preds = %174
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %193

193:                                              ; preds = %174, %183, %191, %192, %129
  tail call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* %2, i64* %60) #6
  br label %194

194:                                              ; preds = %193, %156
  %195 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %196 = load i32, i32* %195, align 8
  %197 = icmp eq i32 %196, 0
  %198 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %199 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %200 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %201 = load i64*, i64** %198, align 8
  %202 = load i64, i64* %201, align 8
  %203 = load i32, i32* %199, align 4
  %204 = add nsw i32 %203, 1
  store i32 %204, i32* %199, align 4
  br i1 %197, label %214, label %205

205:                                              ; preds = %194
  %206 = shl nsw i32 %203, 1
  %207 = sext i32 %206 to i64
  %208 = add i64 %202, 11
  %209 = add i64 %208, %207
  %210 = inttoptr i64 %209 to i16*
  store i16 32, i16* %210, align 2
  %211 = load i32, i32* %199, align 4
  %212 = load i32, i32* %200, align 8
  %213 = icmp eq i32 %211, %212
  br i1 %213, label %236, label %238

214:                                              ; preds = %194
  %215 = sext i32 %203 to i64
  %216 = add i64 %202, 11
  %217 = add i64 %216, %215
  %218 = inttoptr i64 %217 to i8*
  store i8 32, i8* %218, align 1
  %219 = load i32, i32* %199, align 4
  %220 = load i32, i32* %200, align 8
  %221 = icmp eq i32 %219, %220
  br i1 %221, label %222, label %224

222:                                              ; preds = %214
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %223 = load i32, i32* %199, align 4
  br label %224

224:                                              ; preds = %222, %214
  %225 = phi i32 [ %223, %222 ], [ %219, %214 ]
  %226 = load i64*, i64** %198, align 8
  %227 = load i64, i64* %226, align 8
  %228 = add nsw i32 %225, 1
  store i32 %228, i32* %199, align 4
  %229 = sext i32 %225 to i64
  %230 = add nsw i64 %229, 11
  %231 = add i64 %230, %227
  %232 = inttoptr i64 %231 to i8*
  store i8 40, i8* %232, align 1
  %233 = load i32, i32* %199, align 4
  %234 = load i32, i32* %200, align 8
  %235 = icmp eq i32 %233, %234
  br i1 %235, label %1312, label %251

236:                                              ; preds = %205
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %237 = load i32, i32* %199, align 4
  br label %238

238:                                              ; preds = %236, %205
  %239 = phi i32 [ %237, %236 ], [ %211, %205 ]
  %240 = load i64*, i64** %198, align 8
  %241 = load i64, i64* %240, align 8
  %242 = add nsw i32 %239, 1
  store i32 %242, i32* %199, align 4
  %243 = shl nsw i32 %239, 1
  %244 = sext i32 %243 to i64
  %245 = add i64 %241, 11
  %246 = add i64 %245, %244
  %247 = inttoptr i64 %246 to i16*
  store i16 40, i16* %247, align 2
  %248 = load i32, i32* %199, align 4
  %249 = load i32, i32* %200, align 8
  %250 = icmp eq i32 %248, %249
  br i1 %250, label %1313, label %251

251:                                              ; preds = %1313, %1312, %238, %224, %107
  %252 = phi i1 [ false, %107 ], [ true, %1312 ], [ true, %224 ], [ true, %1313 ], [ true, %238 ]
  %253 = bitcast %"class.v8::internal::Handle<v8::internal::StackFrameInfo>::ObjectRef"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %253) #6
  %254 = load i64, i64* %1, align 8
  %255 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::StackFrameInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::StackFrameInfo>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %254, i64* %255, align 8
  %256 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::StackFrameInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::StackFrameInfo>::ObjectRef"* %5, i64 0, i32 0
  %257 = call i64 @_ZNK2v88internal14StackFrameInfo24GetScriptNameOrSourceURLEv(%"class.v8::internal::StackFrameInfo"* nonnull %256) #6
  %258 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %259 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %258, align 8
  %260 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %259, null
  br i1 %260, label %264, label %261

261:                                              ; preds = %251
  %262 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %259, i64 %257) #6
  %263 = load i64, i64* %262, align 8
  br label %277

264:                                              ; preds = %251
  %265 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %266 = load i64*, i64** %265, align 8
  %267 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %268 = load i64*, i64** %267, align 8
  %269 = icmp eq i64* %266, %268
  br i1 %269, label %270, label %272

270:                                              ; preds = %264
  %271 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %272

272:                                              ; preds = %270, %264
  %273 = phi i64* [ %271, %270 ], [ %266, %264 ]
  %274 = ptrtoint i64* %273 to i64
  %275 = add i64 %274, 8
  %276 = inttoptr i64 %275 to i64*
  store i64* %276, i64** %265, align 8
  store i64 %257, i64* %273, align 8
  br label %277

277:                                              ; preds = %272, %261
  %278 = phi i64 [ %263, %261 ], [ %257, %272 ]
  %279 = phi i64* [ %262, %261 ], [ %273, %272 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %253) #6
  %280 = and i64 %278, 1
  %281 = icmp eq i64 %280, 0
  br i1 %281, label %320, label %282

282:                                              ; preds = %277
  %283 = and i64 %278, -4294967296
  %284 = add i64 %278, -1
  %285 = inttoptr i64 %284 to i32*
  %286 = load atomic i32, i32* %285 monotonic, align 4
  %287 = zext i32 %286 to i64
  %288 = or i64 %283, %287
  %289 = add i64 %288, 7
  %290 = inttoptr i64 %289 to i16*
  %291 = load atomic i16, i16* %290 monotonic, align 2
  %292 = icmp ult i16 %291, 64
  br i1 %292, label %293, label %320

293:                                              ; preds = %282
  %294 = add i64 %278, 7
  %295 = inttoptr i64 %294 to i32*
  %296 = load i32, i32* %295, align 4
  %297 = icmp sgt i32 %296, 0
  br i1 %297, label %298, label %320

298:                                              ; preds = %293
  %299 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %300 = bitcast %"class.v8::internal::Vector.1459"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %300) #6
  %301 = getelementptr inbounds %"class.v8::internal::Vector.1459", %"class.v8::internal::Vector.1459"* %4, i64 0, i32 0
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21, i64 0, i64 0), i8** %301, align 8
  %302 = getelementptr inbounds %"class.v8::internal::Vector.1459", %"class.v8::internal::Vector.1459"* %4, i64 0, i32 1
  store i64 12, i64* %302, align 8
  %303 = call i64* @_ZN2v88internal7Factory20NewStringFromOneByteERKNS0_6VectorIKhEENS0_14AllocationTypeE(%"class.v8::internal::Factory"* %299, %"class.v8::internal::Vector.1459"* nonnull dereferenceable(16) %4, i8 zeroext 0) #6
  %304 = icmp eq i64* %303, null
  br i1 %304, label %305, label %306, !prof !3

305:                                              ; preds = %298
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29, i64 0, i64 0)) #9
  unreachable

306:                                              ; preds = %298
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %300) #6
  %307 = load i64, i64* %303, align 8
  %308 = add i64 %307, 7
  %309 = inttoptr i64 %308 to i32*
  %310 = load i32, i32* %309, align 4
  %311 = load i64, i64* %279, align 8
  %312 = add i64 %311, 7
  %313 = inttoptr i64 %312 to i32*
  %314 = load i32, i32* %313, align 4
  %315 = icmp sgt i32 %310, %314
  br i1 %315, label %319, label %316

316:                                              ; preds = %306
  %317 = call i32 @_ZN2v88internal6String7IndexOfEPNS0_7IsolateENS0_6HandleIS1_EES5_i(%"class.v8::internal::Isolate"* %0, i64* %279, i64* nonnull %303, i32 0) #6
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %320, label %319

319:                                              ; preds = %316, %306
  call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* %2, i64* %279) #6
  br label %377

320:                                              ; preds = %316, %293, %282, %277
  %321 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %322 = load i32, i32* %321, align 8
  %323 = icmp eq i32 %322, 0
  %324 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %325 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %326 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %327 = load i64*, i64** %324, align 8
  %328 = load i64, i64* %327, align 8
  %329 = load i32, i32* %325, align 4
  %330 = add nsw i32 %329, 1
  store i32 %330, i32* %325, align 4
  br i1 %323, label %340, label %331

331:                                              ; preds = %320
  %332 = shl nsw i32 %329, 1
  %333 = sext i32 %332 to i64
  %334 = add i64 %328, 11
  %335 = add i64 %334, %333
  %336 = inttoptr i64 %335 to i16*
  store i16 60, i16* %336, align 2
  %337 = load i32, i32* %325, align 4
  %338 = load i32, i32* %326, align 8
  %339 = icmp eq i32 %337, %338
  br i1 %339, label %362, label %364

340:                                              ; preds = %320
  %341 = sext i32 %329 to i64
  %342 = add i64 %328, 11
  %343 = add i64 %342, %341
  %344 = inttoptr i64 %343 to i8*
  store i8 60, i8* %344, align 1
  %345 = load i32, i32* %325, align 4
  %346 = load i32, i32* %326, align 8
  %347 = icmp eq i32 %345, %346
  br i1 %347, label %348, label %350

348:                                              ; preds = %340
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %349 = load i32, i32* %325, align 4
  br label %350

350:                                              ; preds = %348, %340
  %351 = phi i32 [ %349, %348 ], [ %345, %340 ]
  %352 = load i64*, i64** %324, align 8
  %353 = load i64, i64* %352, align 8
  %354 = add nsw i32 %351, 1
  store i32 %354, i32* %325, align 4
  %355 = sext i32 %351 to i64
  %356 = add nsw i64 %355, 11
  %357 = add i64 %356, %353
  %358 = inttoptr i64 %357 to i8*
  store i8 97, i8* %358, align 1
  %359 = load i32, i32* %325, align 4
  %360 = load i32, i32* %326, align 8
  %361 = icmp eq i32 %359, %360
  br i1 %361, label %1049, label %1051

362:                                              ; preds = %331
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %363 = load i32, i32* %325, align 4
  br label %364

364:                                              ; preds = %362, %331
  %365 = phi i32 [ %363, %362 ], [ %337, %331 ]
  %366 = load i64*, i64** %324, align 8
  %367 = load i64, i64* %366, align 8
  %368 = add nsw i32 %365, 1
  store i32 %368, i32* %325, align 4
  %369 = shl nsw i32 %365, 1
  %370 = sext i32 %369 to i64
  %371 = add i64 %367, 11
  %372 = add i64 %371, %370
  %373 = inttoptr i64 %372 to i16*
  store i16 97, i16* %373, align 2
  %374 = load i32, i32* %325, align 4
  %375 = load i32, i32* %326, align 8
  %376 = icmp eq i32 %374, %375
  br i1 %376, label %1176, label %1178

377:                                              ; preds = %1311, %1298, %1175, %1163, %319
  %378 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %379 = load i32, i32* %378, align 8
  %380 = icmp eq i32 %379, 0
  %381 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %382 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %383 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %384 = load i64*, i64** %381, align 8
  %385 = load i64, i64* %384, align 8
  %386 = load i32, i32* %382, align 4
  %387 = add nsw i32 %386, 1
  store i32 %387, i32* %382, align 4
  br i1 %380, label %397, label %388

388:                                              ; preds = %377
  %389 = shl nsw i32 %386, 1
  %390 = sext i32 %389 to i64
  %391 = add i64 %385, 11
  %392 = add i64 %391, %390
  %393 = inttoptr i64 %392 to i16*
  store i16 58, i16* %393, align 2
  %394 = load i32, i32* %382, align 4
  %395 = load i32, i32* %383, align 8
  %396 = icmp eq i32 %394, %395
  br i1 %396, label %406, label %407

397:                                              ; preds = %377
  %398 = sext i32 %386 to i64
  %399 = add i64 %385, 11
  %400 = add i64 %399, %398
  %401 = inttoptr i64 %400 to i8*
  store i8 58, i8* %401, align 1
  %402 = load i32, i32* %382, align 4
  %403 = load i32, i32* %383, align 8
  %404 = icmp eq i32 %402, %403
  br i1 %404, label %405, label %407

405:                                              ; preds = %397
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %407

406:                                              ; preds = %388
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %407

407:                                              ; preds = %406, %405, %397, %388
  %408 = load i64, i64* %1, align 8
  %409 = add i64 %408, 7
  %410 = inttoptr i64 %409 to i32*
  %411 = load i32, i32* %410, align 4
  %412 = ashr i32 %411, 1
  %413 = load i32, i32* %378, align 8
  %414 = icmp eq i32 %413, 0
  %415 = load i64*, i64** %381, align 8
  %416 = load i64, i64* %415, align 8
  %417 = load i32, i32* %382, align 4
  %418 = add nsw i32 %417, 1
  store i32 %418, i32* %382, align 4
  br i1 %414, label %428, label %419

419:                                              ; preds = %407
  %420 = shl nsw i32 %417, 1
  %421 = sext i32 %420 to i64
  %422 = add i64 %416, 11
  %423 = add i64 %422, %421
  %424 = inttoptr i64 %423 to i16*
  store i16 119, i16* %424, align 2
  %425 = load i32, i32* %382, align 4
  %426 = load i32, i32* %383, align 8
  %427 = icmp eq i32 %425, %426
  br i1 %427, label %450, label %452

428:                                              ; preds = %407
  %429 = sext i32 %417 to i64
  %430 = add i64 %416, 11
  %431 = add i64 %430, %429
  %432 = inttoptr i64 %431 to i8*
  store i8 119, i8* %432, align 1
  %433 = load i32, i32* %382, align 4
  %434 = load i32, i32* %383, align 8
  %435 = icmp eq i32 %433, %434
  br i1 %435, label %436, label %438

436:                                              ; preds = %428
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %437 = load i32, i32* %382, align 4
  br label %438

438:                                              ; preds = %436, %428
  %439 = phi i32 [ %437, %436 ], [ %433, %428 ]
  %440 = load i64*, i64** %381, align 8
  %441 = load i64, i64* %440, align 8
  %442 = add nsw i32 %439, 1
  store i32 %442, i32* %382, align 4
  %443 = sext i32 %439 to i64
  %444 = add nsw i64 %443, 11
  %445 = add i64 %444, %441
  %446 = inttoptr i64 %445 to i8*
  store i8 97, i8* %446, align 1
  %447 = load i32, i32* %382, align 4
  %448 = load i32, i32* %383, align 8
  %449 = icmp eq i32 %447, %448
  br i1 %449, label %699, label %701

450:                                              ; preds = %419
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %451 = load i32, i32* %382, align 4
  br label %452

452:                                              ; preds = %450, %419
  %453 = phi i32 [ %451, %450 ], [ %425, %419 ]
  %454 = load i64*, i64** %381, align 8
  %455 = load i64, i64* %454, align 8
  %456 = add nsw i32 %453, 1
  store i32 %456, i32* %382, align 4
  %457 = shl nsw i32 %453, 1
  %458 = sext i32 %457 to i64
  %459 = add i64 %455, 11
  %460 = add i64 %459, %458
  %461 = inttoptr i64 %460 to i16*
  store i16 97, i16* %461, align 2
  %462 = load i32, i32* %382, align 4
  %463 = load i32, i32* %383, align 8
  %464 = icmp eq i32 %462, %463
  br i1 %464, label %868, label %870

465:                                              ; preds = %1048, %1035, %867, %855
  %466 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %466) #6
  %467 = call i8* @_ZN2v88internal12IntToCStringEiNS0_6VectorIcEE(i32 %412, i8* nonnull %466, i64 100) #6
  %468 = load i32, i32* %378, align 8
  %469 = icmp eq i32 %468, 0
  %470 = load i8, i8* %467, align 1
  %471 = icmp eq i8 %470, 0
  br i1 %469, label %474, label %472

472:                                              ; preds = %465
  br i1 %471, label %473, label %495

473:                                              ; preds = %472
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %466) #6
  br label %519

474:                                              ; preds = %465
  br i1 %471, label %475, label %476

475:                                              ; preds = %474
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %466) #6
  br label %532

476:                                              ; preds = %474, %492
  %477 = phi i8 [ %493, %492 ], [ %470, %474 ]
  %478 = phi i8* [ %479, %492 ], [ %467, %474 ]
  %479 = getelementptr inbounds i8, i8* %478, i64 1
  %480 = load i64*, i64** %381, align 8
  %481 = load i64, i64* %480, align 8
  %482 = load i32, i32* %382, align 4
  %483 = add nsw i32 %482, 1
  store i32 %483, i32* %382, align 4
  %484 = sext i32 %482 to i64
  %485 = add i64 %481, 11
  %486 = add i64 %485, %484
  %487 = inttoptr i64 %486 to i8*
  store i8 %477, i8* %487, align 1
  %488 = load i32, i32* %382, align 4
  %489 = load i32, i32* %383, align 8
  %490 = icmp eq i32 %488, %489
  br i1 %490, label %491, label %492

491:                                              ; preds = %476
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %492

492:                                              ; preds = %491, %476
  %493 = load i8, i8* %479, align 1
  %494 = icmp eq i8 %493, 0
  br i1 %494, label %516, label %476

495:                                              ; preds = %472, %513
  %496 = phi i8 [ %514, %513 ], [ %470, %472 ]
  %497 = phi i8* [ %498, %513 ], [ %467, %472 ]
  %498 = getelementptr inbounds i8, i8* %497, i64 1
  %499 = load i64*, i64** %381, align 8
  %500 = load i64, i64* %499, align 8
  %501 = load i32, i32* %382, align 4
  %502 = add nsw i32 %501, 1
  store i32 %502, i32* %382, align 4
  %503 = zext i8 %496 to i16
  %504 = shl nsw i32 %501, 1
  %505 = sext i32 %504 to i64
  %506 = add i64 %500, 11
  %507 = add i64 %506, %505
  %508 = inttoptr i64 %507 to i16*
  store i16 %503, i16* %508, align 2
  %509 = load i32, i32* %382, align 4
  %510 = load i32, i32* %383, align 8
  %511 = icmp eq i32 %509, %510
  br i1 %511, label %512, label %513

512:                                              ; preds = %495
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %513

513:                                              ; preds = %512, %495
  %514 = load i8, i8* %498, align 1
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %516, label %495

516:                                              ; preds = %513, %492
  %517 = load i32, i32* %378, align 8
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %466) #6
  %518 = icmp eq i32 %517, 0
  br i1 %518, label %532, label %519

519:                                              ; preds = %516, %473
  %520 = load i64*, i64** %381, align 8
  %521 = load i64, i64* %520, align 8
  %522 = load i32, i32* %382, align 4
  %523 = add nsw i32 %522, 1
  store i32 %523, i32* %382, align 4
  %524 = shl nsw i32 %522, 1
  %525 = sext i32 %524 to i64
  %526 = add i64 %521, 11
  %527 = add i64 %526, %525
  %528 = inttoptr i64 %527 to i16*
  store i16 93, i16* %528, align 2
  %529 = load i32, i32* %382, align 4
  %530 = load i32, i32* %383, align 8
  %531 = icmp eq i32 %529, %530
  br i1 %531, label %558, label %560

532:                                              ; preds = %516, %475
  %533 = load i64*, i64** %381, align 8
  %534 = load i64, i64* %533, align 8
  %535 = load i32, i32* %382, align 4
  %536 = add nsw i32 %535, 1
  store i32 %536, i32* %382, align 4
  %537 = sext i32 %535 to i64
  %538 = add i64 %534, 11
  %539 = add i64 %538, %537
  %540 = inttoptr i64 %539 to i8*
  store i8 93, i8* %540, align 1
  %541 = load i32, i32* %382, align 4
  %542 = load i32, i32* %383, align 8
  %543 = icmp eq i32 %541, %542
  br i1 %543, label %544, label %546

544:                                              ; preds = %532
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %545 = load i32, i32* %382, align 4
  br label %546

546:                                              ; preds = %544, %532
  %547 = phi i32 [ %545, %544 ], [ %541, %532 ]
  %548 = load i64*, i64** %381, align 8
  %549 = load i64, i64* %548, align 8
  %550 = add nsw i32 %547, 1
  store i32 %550, i32* %382, align 4
  %551 = sext i32 %547 to i64
  %552 = add nsw i64 %551, 11
  %553 = add i64 %552, %549
  %554 = inttoptr i64 %553 to i8*
  store i8 58, i8* %554, align 1
  %555 = load i32, i32* %382, align 4
  %556 = load i32, i32* %383, align 8
  %557 = icmp eq i32 %555, %556
  br i1 %557, label %697, label %573

558:                                              ; preds = %519
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %559 = load i32, i32* %382, align 4
  br label %560

560:                                              ; preds = %558, %519
  %561 = phi i32 [ %559, %558 ], [ %529, %519 ]
  %562 = load i64*, i64** %381, align 8
  %563 = load i64, i64* %562, align 8
  %564 = add nsw i32 %561, 1
  store i32 %564, i32* %382, align 4
  %565 = shl nsw i32 %561, 1
  %566 = sext i32 %565 to i64
  %567 = add i64 %563, 11
  %568 = add i64 %567, %566
  %569 = inttoptr i64 %568 to i16*
  store i16 58, i16* %569, align 2
  %570 = load i32, i32* %382, align 4
  %571 = load i32, i32* %383, align 8
  %572 = icmp eq i32 %570, %571
  br i1 %572, label %698, label %573

573:                                              ; preds = %698, %697, %560, %546
  %574 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %574) #6
  %575 = load i64, i64* %1, align 8
  %576 = and i64 %575, -262144
  %577 = or i64 %576, 16
  %578 = inttoptr i64 %577 to i64*
  %579 = load i64, i64* %578, align 16
  %580 = add i64 %579, -41416
  %581 = inttoptr i64 %580 to %"class.v8::internal::Isolate"*
  %582 = add i64 %575, 19
  %583 = inttoptr i64 %582 to i32*
  %584 = load i32, i32* %583, align 4
  %585 = trunc i32 %584 to i8
  %586 = icmp sgt i8 %585, -1
  %587 = add i64 %575, 15
  %588 = inttoptr i64 %587 to i32*
  %589 = load i32, i32* %588, align 4
  %590 = ashr i32 %589, 1
  br i1 %586, label %591, label %607

591:                                              ; preds = %573
  %592 = call i32 @_ZN2v88internal14StackFrameInfo21ComputeSourcePositionENS0_6HandleIS1_EEi(i64* %1, i32 %590) #6
  %593 = load i64, i64* %1, align 8
  %594 = shl i32 %592, 1
  %595 = add i64 %593, 15
  %596 = inttoptr i64 %595 to i32*
  store atomic volatile i32 %594, i32* %596 monotonic, align 4
  %597 = load i64, i64* %1, align 8
  %598 = add i64 %597, 19
  %599 = inttoptr i64 %598 to i32*
  %600 = load i32, i32* %599, align 4
  %601 = and i32 %600, -130
  %602 = or i32 %601, 128
  store atomic volatile i32 %602, i32* %599 monotonic, align 4
  %603 = load i64, i64* %1, align 8
  %604 = add i64 %603, 19
  %605 = inttoptr i64 %604 to i32*
  %606 = load i32, i32* %605, align 4
  br label %607

607:                                              ; preds = %591, %573
  %608 = phi i32 [ %584, %573 ], [ %606, %591 ]
  %609 = phi i32 [ %590, %573 ], [ %592, %591 ]
  %610 = and i32 %608, 6
  %611 = icmp eq i32 %610, 2
  br i1 %611, label %612, label %614

612:                                              ; preds = %607
  %613 = add nsw i32 %609, 1
  br label %620

614:                                              ; preds = %607
  %615 = call i64* @_ZN2v88internal14StackFrameInfo9GetScriptEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %581, i64* %1) #6
  %616 = icmp eq i64* %615, null
  br i1 %616, label %620, label %617

617:                                              ; preds = %614
  %618 = call i32 @_ZN2v88internal6Script15GetColumnNumberENS0_6HandleIS1_EEi(i64* nonnull %615, i32 %609) #6
  %619 = add nsw i32 %618, 1
  br label %620

620:                                              ; preds = %617, %614, %612
  %621 = phi i32 [ %613, %612 ], [ %619, %617 ], [ 0, %614 ]
  %622 = add nsw i32 %621, -1
  %623 = call i32 (i8*, i64, i8*, ...) @_ZN2v88internal8SNPrintFENS0_6VectorIcEEPKcz(i8* nonnull %574, i64 16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i64 0, i64 0), i32 %622) #6
  %624 = load i32, i32* %378, align 8
  %625 = icmp eq i32 %624, 0
  %626 = load i8, i8* %574, align 16
  %627 = icmp eq i8 %626, 0
  br i1 %625, label %629, label %628

628:                                              ; preds = %620
  br i1 %627, label %670, label %649

629:                                              ; preds = %620
  br i1 %627, label %670, label %630

630:                                              ; preds = %629, %646
  %631 = phi i8 [ %647, %646 ], [ %626, %629 ]
  %632 = phi i8* [ %633, %646 ], [ %574, %629 ]
  %633 = getelementptr inbounds i8, i8* %632, i64 1
  %634 = load i64*, i64** %381, align 8
  %635 = load i64, i64* %634, align 8
  %636 = load i32, i32* %382, align 4
  %637 = add nsw i32 %636, 1
  store i32 %637, i32* %382, align 4
  %638 = sext i32 %636 to i64
  %639 = add i64 %635, 11
  %640 = add i64 %639, %638
  %641 = inttoptr i64 %640 to i8*
  store i8 %631, i8* %641, align 1
  %642 = load i32, i32* %382, align 4
  %643 = load i32, i32* %383, align 8
  %644 = icmp eq i32 %642, %643
  br i1 %644, label %645, label %646

645:                                              ; preds = %630
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %646

646:                                              ; preds = %645, %630
  %647 = load i8, i8* %633, align 1
  %648 = icmp eq i8 %647, 0
  br i1 %648, label %670, label %630

649:                                              ; preds = %628, %667
  %650 = phi i8 [ %668, %667 ], [ %626, %628 ]
  %651 = phi i8* [ %652, %667 ], [ %574, %628 ]
  %652 = getelementptr inbounds i8, i8* %651, i64 1
  %653 = load i64*, i64** %381, align 8
  %654 = load i64, i64* %653, align 8
  %655 = load i32, i32* %382, align 4
  %656 = add nsw i32 %655, 1
  store i32 %656, i32* %382, align 4
  %657 = zext i8 %650 to i16
  %658 = shl nsw i32 %655, 1
  %659 = sext i32 %658 to i64
  %660 = add i64 %654, 11
  %661 = add i64 %660, %659
  %662 = inttoptr i64 %661 to i16*
  store i16 %657, i16* %662, align 2
  %663 = load i32, i32* %382, align 4
  %664 = load i32, i32* %383, align 8
  %665 = icmp eq i32 %663, %664
  br i1 %665, label %666, label %667

666:                                              ; preds = %649
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %667

667:                                              ; preds = %666, %649
  %668 = load i8, i8* %652, align 1
  %669 = icmp eq i8 %668, 0
  br i1 %669, label %670, label %649

670:                                              ; preds = %667, %646, %629, %628
  br i1 %252, label %671, label %1314

671:                                              ; preds = %670
  %672 = load i32, i32* %378, align 8
  %673 = icmp eq i32 %672, 0
  %674 = load i64*, i64** %381, align 8
  %675 = load i64, i64* %674, align 8
  %676 = load i32, i32* %382, align 4
  %677 = add nsw i32 %676, 1
  store i32 %677, i32* %382, align 4
  br i1 %673, label %687, label %678

678:                                              ; preds = %671
  %679 = shl nsw i32 %676, 1
  %680 = sext i32 %679 to i64
  %681 = add i64 %675, 11
  %682 = add i64 %681, %680
  %683 = inttoptr i64 %682 to i16*
  store i16 41, i16* %683, align 2
  %684 = load i32, i32* %382, align 4
  %685 = load i32, i32* %383, align 8
  %686 = icmp eq i32 %684, %685
  br i1 %686, label %696, label %1314

687:                                              ; preds = %671
  %688 = sext i32 %676 to i64
  %689 = add i64 %675, 11
  %690 = add i64 %689, %688
  %691 = inttoptr i64 %690 to i8*
  store i8 41, i8* %691, align 1
  %692 = load i32, i32* %382, align 4
  %693 = load i32, i32* %383, align 8
  %694 = icmp eq i32 %692, %693
  br i1 %694, label %695, label %1314

695:                                              ; preds = %687
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %1314

696:                                              ; preds = %678
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %1314

697:                                              ; preds = %546
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %573

698:                                              ; preds = %560
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %573

699:                                              ; preds = %438
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %700 = load i32, i32* %382, align 4
  br label %701

701:                                              ; preds = %699, %438
  %702 = phi i32 [ %700, %699 ], [ %447, %438 ]
  %703 = load i64*, i64** %381, align 8
  %704 = load i64, i64* %703, align 8
  %705 = add nsw i32 %702, 1
  store i32 %705, i32* %382, align 4
  %706 = sext i32 %702 to i64
  %707 = add nsw i64 %706, 11
  %708 = add i64 %707, %704
  %709 = inttoptr i64 %708 to i8*
  store i8 115, i8* %709, align 1
  %710 = load i32, i32* %382, align 4
  %711 = load i32, i32* %383, align 8
  %712 = icmp eq i32 %710, %711
  br i1 %712, label %713, label %715

713:                                              ; preds = %701
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %714 = load i32, i32* %382, align 4
  br label %715

715:                                              ; preds = %713, %701
  %716 = phi i32 [ %714, %713 ], [ %710, %701 ]
  %717 = load i64*, i64** %381, align 8
  %718 = load i64, i64* %717, align 8
  %719 = add nsw i32 %716, 1
  store i32 %719, i32* %382, align 4
  %720 = sext i32 %716 to i64
  %721 = add nsw i64 %720, 11
  %722 = add i64 %721, %718
  %723 = inttoptr i64 %722 to i8*
  store i8 109, i8* %723, align 1
  %724 = load i32, i32* %382, align 4
  %725 = load i32, i32* %383, align 8
  %726 = icmp eq i32 %724, %725
  br i1 %726, label %727, label %729

727:                                              ; preds = %715
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %728 = load i32, i32* %382, align 4
  br label %729

729:                                              ; preds = %727, %715
  %730 = phi i32 [ %728, %727 ], [ %724, %715 ]
  %731 = load i64*, i64** %381, align 8
  %732 = load i64, i64* %731, align 8
  %733 = add nsw i32 %730, 1
  store i32 %733, i32* %382, align 4
  %734 = sext i32 %730 to i64
  %735 = add nsw i64 %734, 11
  %736 = add i64 %735, %732
  %737 = inttoptr i64 %736 to i8*
  store i8 45, i8* %737, align 1
  %738 = load i32, i32* %382, align 4
  %739 = load i32, i32* %383, align 8
  %740 = icmp eq i32 %738, %739
  br i1 %740, label %741, label %743

741:                                              ; preds = %729
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %742 = load i32, i32* %382, align 4
  br label %743

743:                                              ; preds = %741, %729
  %744 = phi i32 [ %742, %741 ], [ %738, %729 ]
  %745 = load i64*, i64** %381, align 8
  %746 = load i64, i64* %745, align 8
  %747 = add nsw i32 %744, 1
  store i32 %747, i32* %382, align 4
  %748 = sext i32 %744 to i64
  %749 = add nsw i64 %748, 11
  %750 = add i64 %749, %746
  %751 = inttoptr i64 %750 to i8*
  store i8 102, i8* %751, align 1
  %752 = load i32, i32* %382, align 4
  %753 = load i32, i32* %383, align 8
  %754 = icmp eq i32 %752, %753
  br i1 %754, label %755, label %757

755:                                              ; preds = %743
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %756 = load i32, i32* %382, align 4
  br label %757

757:                                              ; preds = %755, %743
  %758 = phi i32 [ %756, %755 ], [ %752, %743 ]
  %759 = load i64*, i64** %381, align 8
  %760 = load i64, i64* %759, align 8
  %761 = add nsw i32 %758, 1
  store i32 %761, i32* %382, align 4
  %762 = sext i32 %758 to i64
  %763 = add nsw i64 %762, 11
  %764 = add i64 %763, %760
  %765 = inttoptr i64 %764 to i8*
  store i8 117, i8* %765, align 1
  %766 = load i32, i32* %382, align 4
  %767 = load i32, i32* %383, align 8
  %768 = icmp eq i32 %766, %767
  br i1 %768, label %769, label %771

769:                                              ; preds = %757
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %770 = load i32, i32* %382, align 4
  br label %771

771:                                              ; preds = %769, %757
  %772 = phi i32 [ %770, %769 ], [ %766, %757 ]
  %773 = load i64*, i64** %381, align 8
  %774 = load i64, i64* %773, align 8
  %775 = add nsw i32 %772, 1
  store i32 %775, i32* %382, align 4
  %776 = sext i32 %772 to i64
  %777 = add nsw i64 %776, 11
  %778 = add i64 %777, %774
  %779 = inttoptr i64 %778 to i8*
  store i8 110, i8* %779, align 1
  %780 = load i32, i32* %382, align 4
  %781 = load i32, i32* %383, align 8
  %782 = icmp eq i32 %780, %781
  br i1 %782, label %783, label %785

783:                                              ; preds = %771
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %784 = load i32, i32* %382, align 4
  br label %785

785:                                              ; preds = %783, %771
  %786 = phi i32 [ %784, %783 ], [ %780, %771 ]
  %787 = load i64*, i64** %381, align 8
  %788 = load i64, i64* %787, align 8
  %789 = add nsw i32 %786, 1
  store i32 %789, i32* %382, align 4
  %790 = sext i32 %786 to i64
  %791 = add nsw i64 %790, 11
  %792 = add i64 %791, %788
  %793 = inttoptr i64 %792 to i8*
  store i8 99, i8* %793, align 1
  %794 = load i32, i32* %382, align 4
  %795 = load i32, i32* %383, align 8
  %796 = icmp eq i32 %794, %795
  br i1 %796, label %797, label %799

797:                                              ; preds = %785
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %798 = load i32, i32* %382, align 4
  br label %799

799:                                              ; preds = %797, %785
  %800 = phi i32 [ %798, %797 ], [ %794, %785 ]
  %801 = load i64*, i64** %381, align 8
  %802 = load i64, i64* %801, align 8
  %803 = add nsw i32 %800, 1
  store i32 %803, i32* %382, align 4
  %804 = sext i32 %800 to i64
  %805 = add nsw i64 %804, 11
  %806 = add i64 %805, %802
  %807 = inttoptr i64 %806 to i8*
  store i8 116, i8* %807, align 1
  %808 = load i32, i32* %382, align 4
  %809 = load i32, i32* %383, align 8
  %810 = icmp eq i32 %808, %809
  br i1 %810, label %811, label %813

811:                                              ; preds = %799
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %812 = load i32, i32* %382, align 4
  br label %813

813:                                              ; preds = %811, %799
  %814 = phi i32 [ %812, %811 ], [ %808, %799 ]
  %815 = load i64*, i64** %381, align 8
  %816 = load i64, i64* %815, align 8
  %817 = add nsw i32 %814, 1
  store i32 %817, i32* %382, align 4
  %818 = sext i32 %814 to i64
  %819 = add nsw i64 %818, 11
  %820 = add i64 %819, %816
  %821 = inttoptr i64 %820 to i8*
  store i8 105, i8* %821, align 1
  %822 = load i32, i32* %382, align 4
  %823 = load i32, i32* %383, align 8
  %824 = icmp eq i32 %822, %823
  br i1 %824, label %825, label %827

825:                                              ; preds = %813
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %826 = load i32, i32* %382, align 4
  br label %827

827:                                              ; preds = %825, %813
  %828 = phi i32 [ %826, %825 ], [ %822, %813 ]
  %829 = load i64*, i64** %381, align 8
  %830 = load i64, i64* %829, align 8
  %831 = add nsw i32 %828, 1
  store i32 %831, i32* %382, align 4
  %832 = sext i32 %828 to i64
  %833 = add nsw i64 %832, 11
  %834 = add i64 %833, %830
  %835 = inttoptr i64 %834 to i8*
  store i8 111, i8* %835, align 1
  %836 = load i32, i32* %382, align 4
  %837 = load i32, i32* %383, align 8
  %838 = icmp eq i32 %836, %837
  br i1 %838, label %839, label %841

839:                                              ; preds = %827
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %840 = load i32, i32* %382, align 4
  br label %841

841:                                              ; preds = %839, %827
  %842 = phi i32 [ %840, %839 ], [ %836, %827 ]
  %843 = load i64*, i64** %381, align 8
  %844 = load i64, i64* %843, align 8
  %845 = add nsw i32 %842, 1
  store i32 %845, i32* %382, align 4
  %846 = sext i32 %842 to i64
  %847 = add nsw i64 %846, 11
  %848 = add i64 %847, %844
  %849 = inttoptr i64 %848 to i8*
  store i8 110, i8* %849, align 1
  %850 = load i32, i32* %382, align 4
  %851 = load i32, i32* %383, align 8
  %852 = icmp eq i32 %850, %851
  br i1 %852, label %853, label %855

853:                                              ; preds = %841
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %854 = load i32, i32* %382, align 4
  br label %855

855:                                              ; preds = %853, %841
  %856 = phi i32 [ %854, %853 ], [ %850, %841 ]
  %857 = load i64*, i64** %381, align 8
  %858 = load i64, i64* %857, align 8
  %859 = add nsw i32 %856, 1
  store i32 %859, i32* %382, align 4
  %860 = sext i32 %856 to i64
  %861 = add nsw i64 %860, 11
  %862 = add i64 %861, %858
  %863 = inttoptr i64 %862 to i8*
  store i8 91, i8* %863, align 1
  %864 = load i32, i32* %382, align 4
  %865 = load i32, i32* %383, align 8
  %866 = icmp eq i32 %864, %865
  br i1 %866, label %867, label %465

867:                                              ; preds = %855
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %465

868:                                              ; preds = %452
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %869 = load i32, i32* %382, align 4
  br label %870

870:                                              ; preds = %868, %452
  %871 = phi i32 [ %869, %868 ], [ %462, %452 ]
  %872 = load i64*, i64** %381, align 8
  %873 = load i64, i64* %872, align 8
  %874 = add nsw i32 %871, 1
  store i32 %874, i32* %382, align 4
  %875 = shl nsw i32 %871, 1
  %876 = sext i32 %875 to i64
  %877 = add i64 %873, 11
  %878 = add i64 %877, %876
  %879 = inttoptr i64 %878 to i16*
  store i16 115, i16* %879, align 2
  %880 = load i32, i32* %382, align 4
  %881 = load i32, i32* %383, align 8
  %882 = icmp eq i32 %880, %881
  br i1 %882, label %883, label %885

883:                                              ; preds = %870
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %884 = load i32, i32* %382, align 4
  br label %885

885:                                              ; preds = %883, %870
  %886 = phi i32 [ %884, %883 ], [ %880, %870 ]
  %887 = load i64*, i64** %381, align 8
  %888 = load i64, i64* %887, align 8
  %889 = add nsw i32 %886, 1
  store i32 %889, i32* %382, align 4
  %890 = shl nsw i32 %886, 1
  %891 = sext i32 %890 to i64
  %892 = add i64 %888, 11
  %893 = add i64 %892, %891
  %894 = inttoptr i64 %893 to i16*
  store i16 109, i16* %894, align 2
  %895 = load i32, i32* %382, align 4
  %896 = load i32, i32* %383, align 8
  %897 = icmp eq i32 %895, %896
  br i1 %897, label %898, label %900

898:                                              ; preds = %885
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %899 = load i32, i32* %382, align 4
  br label %900

900:                                              ; preds = %898, %885
  %901 = phi i32 [ %899, %898 ], [ %895, %885 ]
  %902 = load i64*, i64** %381, align 8
  %903 = load i64, i64* %902, align 8
  %904 = add nsw i32 %901, 1
  store i32 %904, i32* %382, align 4
  %905 = shl nsw i32 %901, 1
  %906 = sext i32 %905 to i64
  %907 = add i64 %903, 11
  %908 = add i64 %907, %906
  %909 = inttoptr i64 %908 to i16*
  store i16 45, i16* %909, align 2
  %910 = load i32, i32* %382, align 4
  %911 = load i32, i32* %383, align 8
  %912 = icmp eq i32 %910, %911
  br i1 %912, label %913, label %915

913:                                              ; preds = %900
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %914 = load i32, i32* %382, align 4
  br label %915

915:                                              ; preds = %913, %900
  %916 = phi i32 [ %914, %913 ], [ %910, %900 ]
  %917 = load i64*, i64** %381, align 8
  %918 = load i64, i64* %917, align 8
  %919 = add nsw i32 %916, 1
  store i32 %919, i32* %382, align 4
  %920 = shl nsw i32 %916, 1
  %921 = sext i32 %920 to i64
  %922 = add i64 %918, 11
  %923 = add i64 %922, %921
  %924 = inttoptr i64 %923 to i16*
  store i16 102, i16* %924, align 2
  %925 = load i32, i32* %382, align 4
  %926 = load i32, i32* %383, align 8
  %927 = icmp eq i32 %925, %926
  br i1 %927, label %928, label %930

928:                                              ; preds = %915
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %929 = load i32, i32* %382, align 4
  br label %930

930:                                              ; preds = %928, %915
  %931 = phi i32 [ %929, %928 ], [ %925, %915 ]
  %932 = load i64*, i64** %381, align 8
  %933 = load i64, i64* %932, align 8
  %934 = add nsw i32 %931, 1
  store i32 %934, i32* %382, align 4
  %935 = shl nsw i32 %931, 1
  %936 = sext i32 %935 to i64
  %937 = add i64 %933, 11
  %938 = add i64 %937, %936
  %939 = inttoptr i64 %938 to i16*
  store i16 117, i16* %939, align 2
  %940 = load i32, i32* %382, align 4
  %941 = load i32, i32* %383, align 8
  %942 = icmp eq i32 %940, %941
  br i1 %942, label %943, label %945

943:                                              ; preds = %930
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %944 = load i32, i32* %382, align 4
  br label %945

945:                                              ; preds = %943, %930
  %946 = phi i32 [ %944, %943 ], [ %940, %930 ]
  %947 = load i64*, i64** %381, align 8
  %948 = load i64, i64* %947, align 8
  %949 = add nsw i32 %946, 1
  store i32 %949, i32* %382, align 4
  %950 = shl nsw i32 %946, 1
  %951 = sext i32 %950 to i64
  %952 = add i64 %948, 11
  %953 = add i64 %952, %951
  %954 = inttoptr i64 %953 to i16*
  store i16 110, i16* %954, align 2
  %955 = load i32, i32* %382, align 4
  %956 = load i32, i32* %383, align 8
  %957 = icmp eq i32 %955, %956
  br i1 %957, label %958, label %960

958:                                              ; preds = %945
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %959 = load i32, i32* %382, align 4
  br label %960

960:                                              ; preds = %958, %945
  %961 = phi i32 [ %959, %958 ], [ %955, %945 ]
  %962 = load i64*, i64** %381, align 8
  %963 = load i64, i64* %962, align 8
  %964 = add nsw i32 %961, 1
  store i32 %964, i32* %382, align 4
  %965 = shl nsw i32 %961, 1
  %966 = sext i32 %965 to i64
  %967 = add i64 %963, 11
  %968 = add i64 %967, %966
  %969 = inttoptr i64 %968 to i16*
  store i16 99, i16* %969, align 2
  %970 = load i32, i32* %382, align 4
  %971 = load i32, i32* %383, align 8
  %972 = icmp eq i32 %970, %971
  br i1 %972, label %973, label %975

973:                                              ; preds = %960
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %974 = load i32, i32* %382, align 4
  br label %975

975:                                              ; preds = %973, %960
  %976 = phi i32 [ %974, %973 ], [ %970, %960 ]
  %977 = load i64*, i64** %381, align 8
  %978 = load i64, i64* %977, align 8
  %979 = add nsw i32 %976, 1
  store i32 %979, i32* %382, align 4
  %980 = shl nsw i32 %976, 1
  %981 = sext i32 %980 to i64
  %982 = add i64 %978, 11
  %983 = add i64 %982, %981
  %984 = inttoptr i64 %983 to i16*
  store i16 116, i16* %984, align 2
  %985 = load i32, i32* %382, align 4
  %986 = load i32, i32* %383, align 8
  %987 = icmp eq i32 %985, %986
  br i1 %987, label %988, label %990

988:                                              ; preds = %975
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %989 = load i32, i32* %382, align 4
  br label %990

990:                                              ; preds = %988, %975
  %991 = phi i32 [ %989, %988 ], [ %985, %975 ]
  %992 = load i64*, i64** %381, align 8
  %993 = load i64, i64* %992, align 8
  %994 = add nsw i32 %991, 1
  store i32 %994, i32* %382, align 4
  %995 = shl nsw i32 %991, 1
  %996 = sext i32 %995 to i64
  %997 = add i64 %993, 11
  %998 = add i64 %997, %996
  %999 = inttoptr i64 %998 to i16*
  store i16 105, i16* %999, align 2
  %1000 = load i32, i32* %382, align 4
  %1001 = load i32, i32* %383, align 8
  %1002 = icmp eq i32 %1000, %1001
  br i1 %1002, label %1003, label %1005

1003:                                             ; preds = %990
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1004 = load i32, i32* %382, align 4
  br label %1005

1005:                                             ; preds = %1003, %990
  %1006 = phi i32 [ %1004, %1003 ], [ %1000, %990 ]
  %1007 = load i64*, i64** %381, align 8
  %1008 = load i64, i64* %1007, align 8
  %1009 = add nsw i32 %1006, 1
  store i32 %1009, i32* %382, align 4
  %1010 = shl nsw i32 %1006, 1
  %1011 = sext i32 %1010 to i64
  %1012 = add i64 %1008, 11
  %1013 = add i64 %1012, %1011
  %1014 = inttoptr i64 %1013 to i16*
  store i16 111, i16* %1014, align 2
  %1015 = load i32, i32* %382, align 4
  %1016 = load i32, i32* %383, align 8
  %1017 = icmp eq i32 %1015, %1016
  br i1 %1017, label %1018, label %1020

1018:                                             ; preds = %1005
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1019 = load i32, i32* %382, align 4
  br label %1020

1020:                                             ; preds = %1018, %1005
  %1021 = phi i32 [ %1019, %1018 ], [ %1015, %1005 ]
  %1022 = load i64*, i64** %381, align 8
  %1023 = load i64, i64* %1022, align 8
  %1024 = add nsw i32 %1021, 1
  store i32 %1024, i32* %382, align 4
  %1025 = shl nsw i32 %1021, 1
  %1026 = sext i32 %1025 to i64
  %1027 = add i64 %1023, 11
  %1028 = add i64 %1027, %1026
  %1029 = inttoptr i64 %1028 to i16*
  store i16 110, i16* %1029, align 2
  %1030 = load i32, i32* %382, align 4
  %1031 = load i32, i32* %383, align 8
  %1032 = icmp eq i32 %1030, %1031
  br i1 %1032, label %1033, label %1035

1033:                                             ; preds = %1020
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1034 = load i32, i32* %382, align 4
  br label %1035

1035:                                             ; preds = %1033, %1020
  %1036 = phi i32 [ %1034, %1033 ], [ %1030, %1020 ]
  %1037 = load i64*, i64** %381, align 8
  %1038 = load i64, i64* %1037, align 8
  %1039 = add nsw i32 %1036, 1
  store i32 %1039, i32* %382, align 4
  %1040 = shl nsw i32 %1036, 1
  %1041 = sext i32 %1040 to i64
  %1042 = add i64 %1038, 11
  %1043 = add i64 %1042, %1041
  %1044 = inttoptr i64 %1043 to i16*
  store i16 91, i16* %1044, align 2
  %1045 = load i32, i32* %382, align 4
  %1046 = load i32, i32* %383, align 8
  %1047 = icmp eq i32 %1045, %1046
  br i1 %1047, label %1048, label %465

1048:                                             ; preds = %1035
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %465

1049:                                             ; preds = %350
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1050 = load i32, i32* %325, align 4
  br label %1051

1051:                                             ; preds = %1049, %350
  %1052 = phi i32 [ %1050, %1049 ], [ %359, %350 ]
  %1053 = load i64*, i64** %324, align 8
  %1054 = load i64, i64* %1053, align 8
  %1055 = add nsw i32 %1052, 1
  store i32 %1055, i32* %325, align 4
  %1056 = sext i32 %1052 to i64
  %1057 = add nsw i64 %1056, 11
  %1058 = add i64 %1057, %1054
  %1059 = inttoptr i64 %1058 to i8*
  store i8 110, i8* %1059, align 1
  %1060 = load i32, i32* %325, align 4
  %1061 = load i32, i32* %326, align 8
  %1062 = icmp eq i32 %1060, %1061
  br i1 %1062, label %1063, label %1065

1063:                                             ; preds = %1051
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1064 = load i32, i32* %325, align 4
  br label %1065

1065:                                             ; preds = %1063, %1051
  %1066 = phi i32 [ %1064, %1063 ], [ %1060, %1051 ]
  %1067 = load i64*, i64** %324, align 8
  %1068 = load i64, i64* %1067, align 8
  %1069 = add nsw i32 %1066, 1
  store i32 %1069, i32* %325, align 4
  %1070 = sext i32 %1066 to i64
  %1071 = add nsw i64 %1070, 11
  %1072 = add i64 %1071, %1068
  %1073 = inttoptr i64 %1072 to i8*
  store i8 111, i8* %1073, align 1
  %1074 = load i32, i32* %325, align 4
  %1075 = load i32, i32* %326, align 8
  %1076 = icmp eq i32 %1074, %1075
  br i1 %1076, label %1077, label %1079

1077:                                             ; preds = %1065
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1078 = load i32, i32* %325, align 4
  br label %1079

1079:                                             ; preds = %1077, %1065
  %1080 = phi i32 [ %1078, %1077 ], [ %1074, %1065 ]
  %1081 = load i64*, i64** %324, align 8
  %1082 = load i64, i64* %1081, align 8
  %1083 = add nsw i32 %1080, 1
  store i32 %1083, i32* %325, align 4
  %1084 = sext i32 %1080 to i64
  %1085 = add nsw i64 %1084, 11
  %1086 = add i64 %1085, %1082
  %1087 = inttoptr i64 %1086 to i8*
  store i8 110, i8* %1087, align 1
  %1088 = load i32, i32* %325, align 4
  %1089 = load i32, i32* %326, align 8
  %1090 = icmp eq i32 %1088, %1089
  br i1 %1090, label %1091, label %1093

1091:                                             ; preds = %1079
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1092 = load i32, i32* %325, align 4
  br label %1093

1093:                                             ; preds = %1091, %1079
  %1094 = phi i32 [ %1092, %1091 ], [ %1088, %1079 ]
  %1095 = load i64*, i64** %324, align 8
  %1096 = load i64, i64* %1095, align 8
  %1097 = add nsw i32 %1094, 1
  store i32 %1097, i32* %325, align 4
  %1098 = sext i32 %1094 to i64
  %1099 = add nsw i64 %1098, 11
  %1100 = add i64 %1099, %1096
  %1101 = inttoptr i64 %1100 to i8*
  store i8 121, i8* %1101, align 1
  %1102 = load i32, i32* %325, align 4
  %1103 = load i32, i32* %326, align 8
  %1104 = icmp eq i32 %1102, %1103
  br i1 %1104, label %1105, label %1107

1105:                                             ; preds = %1093
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1106 = load i32, i32* %325, align 4
  br label %1107

1107:                                             ; preds = %1105, %1093
  %1108 = phi i32 [ %1106, %1105 ], [ %1102, %1093 ]
  %1109 = load i64*, i64** %324, align 8
  %1110 = load i64, i64* %1109, align 8
  %1111 = add nsw i32 %1108, 1
  store i32 %1111, i32* %325, align 4
  %1112 = sext i32 %1108 to i64
  %1113 = add nsw i64 %1112, 11
  %1114 = add i64 %1113, %1110
  %1115 = inttoptr i64 %1114 to i8*
  store i8 109, i8* %1115, align 1
  %1116 = load i32, i32* %325, align 4
  %1117 = load i32, i32* %326, align 8
  %1118 = icmp eq i32 %1116, %1117
  br i1 %1118, label %1119, label %1121

1119:                                             ; preds = %1107
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1120 = load i32, i32* %325, align 4
  br label %1121

1121:                                             ; preds = %1119, %1107
  %1122 = phi i32 [ %1120, %1119 ], [ %1116, %1107 ]
  %1123 = load i64*, i64** %324, align 8
  %1124 = load i64, i64* %1123, align 8
  %1125 = add nsw i32 %1122, 1
  store i32 %1125, i32* %325, align 4
  %1126 = sext i32 %1122 to i64
  %1127 = add nsw i64 %1126, 11
  %1128 = add i64 %1127, %1124
  %1129 = inttoptr i64 %1128 to i8*
  store i8 111, i8* %1129, align 1
  %1130 = load i32, i32* %325, align 4
  %1131 = load i32, i32* %326, align 8
  %1132 = icmp eq i32 %1130, %1131
  br i1 %1132, label %1133, label %1135

1133:                                             ; preds = %1121
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1134 = load i32, i32* %325, align 4
  br label %1135

1135:                                             ; preds = %1133, %1121
  %1136 = phi i32 [ %1134, %1133 ], [ %1130, %1121 ]
  %1137 = load i64*, i64** %324, align 8
  %1138 = load i64, i64* %1137, align 8
  %1139 = add nsw i32 %1136, 1
  store i32 %1139, i32* %325, align 4
  %1140 = sext i32 %1136 to i64
  %1141 = add nsw i64 %1140, 11
  %1142 = add i64 %1141, %1138
  %1143 = inttoptr i64 %1142 to i8*
  store i8 117, i8* %1143, align 1
  %1144 = load i32, i32* %325, align 4
  %1145 = load i32, i32* %326, align 8
  %1146 = icmp eq i32 %1144, %1145
  br i1 %1146, label %1147, label %1149

1147:                                             ; preds = %1135
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1148 = load i32, i32* %325, align 4
  br label %1149

1149:                                             ; preds = %1147, %1135
  %1150 = phi i32 [ %1148, %1147 ], [ %1144, %1135 ]
  %1151 = load i64*, i64** %324, align 8
  %1152 = load i64, i64* %1151, align 8
  %1153 = add nsw i32 %1150, 1
  store i32 %1153, i32* %325, align 4
  %1154 = sext i32 %1150 to i64
  %1155 = add nsw i64 %1154, 11
  %1156 = add i64 %1155, %1152
  %1157 = inttoptr i64 %1156 to i8*
  store i8 115, i8* %1157, align 1
  %1158 = load i32, i32* %325, align 4
  %1159 = load i32, i32* %326, align 8
  %1160 = icmp eq i32 %1158, %1159
  br i1 %1160, label %1161, label %1163

1161:                                             ; preds = %1149
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1162 = load i32, i32* %325, align 4
  br label %1163

1163:                                             ; preds = %1161, %1149
  %1164 = phi i32 [ %1162, %1161 ], [ %1158, %1149 ]
  %1165 = load i64*, i64** %324, align 8
  %1166 = load i64, i64* %1165, align 8
  %1167 = add nsw i32 %1164, 1
  store i32 %1167, i32* %325, align 4
  %1168 = sext i32 %1164 to i64
  %1169 = add nsw i64 %1168, 11
  %1170 = add i64 %1169, %1166
  %1171 = inttoptr i64 %1170 to i8*
  store i8 62, i8* %1171, align 1
  %1172 = load i32, i32* %325, align 4
  %1173 = load i32, i32* %326, align 8
  %1174 = icmp eq i32 %1172, %1173
  br i1 %1174, label %1175, label %377

1175:                                             ; preds = %1163
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %377

1176:                                             ; preds = %364
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1177 = load i32, i32* %325, align 4
  br label %1178

1178:                                             ; preds = %1176, %364
  %1179 = phi i32 [ %1177, %1176 ], [ %374, %364 ]
  %1180 = load i64*, i64** %324, align 8
  %1181 = load i64, i64* %1180, align 8
  %1182 = add nsw i32 %1179, 1
  store i32 %1182, i32* %325, align 4
  %1183 = shl nsw i32 %1179, 1
  %1184 = sext i32 %1183 to i64
  %1185 = add i64 %1181, 11
  %1186 = add i64 %1185, %1184
  %1187 = inttoptr i64 %1186 to i16*
  store i16 110, i16* %1187, align 2
  %1188 = load i32, i32* %325, align 4
  %1189 = load i32, i32* %326, align 8
  %1190 = icmp eq i32 %1188, %1189
  br i1 %1190, label %1191, label %1193

1191:                                             ; preds = %1178
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1192 = load i32, i32* %325, align 4
  br label %1193

1193:                                             ; preds = %1191, %1178
  %1194 = phi i32 [ %1192, %1191 ], [ %1188, %1178 ]
  %1195 = load i64*, i64** %324, align 8
  %1196 = load i64, i64* %1195, align 8
  %1197 = add nsw i32 %1194, 1
  store i32 %1197, i32* %325, align 4
  %1198 = shl nsw i32 %1194, 1
  %1199 = sext i32 %1198 to i64
  %1200 = add i64 %1196, 11
  %1201 = add i64 %1200, %1199
  %1202 = inttoptr i64 %1201 to i16*
  store i16 111, i16* %1202, align 2
  %1203 = load i32, i32* %325, align 4
  %1204 = load i32, i32* %326, align 8
  %1205 = icmp eq i32 %1203, %1204
  br i1 %1205, label %1206, label %1208

1206:                                             ; preds = %1193
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1207 = load i32, i32* %325, align 4
  br label %1208

1208:                                             ; preds = %1206, %1193
  %1209 = phi i32 [ %1207, %1206 ], [ %1203, %1193 ]
  %1210 = load i64*, i64** %324, align 8
  %1211 = load i64, i64* %1210, align 8
  %1212 = add nsw i32 %1209, 1
  store i32 %1212, i32* %325, align 4
  %1213 = shl nsw i32 %1209, 1
  %1214 = sext i32 %1213 to i64
  %1215 = add i64 %1211, 11
  %1216 = add i64 %1215, %1214
  %1217 = inttoptr i64 %1216 to i16*
  store i16 110, i16* %1217, align 2
  %1218 = load i32, i32* %325, align 4
  %1219 = load i32, i32* %326, align 8
  %1220 = icmp eq i32 %1218, %1219
  br i1 %1220, label %1221, label %1223

1221:                                             ; preds = %1208
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1222 = load i32, i32* %325, align 4
  br label %1223

1223:                                             ; preds = %1221, %1208
  %1224 = phi i32 [ %1222, %1221 ], [ %1218, %1208 ]
  %1225 = load i64*, i64** %324, align 8
  %1226 = load i64, i64* %1225, align 8
  %1227 = add nsw i32 %1224, 1
  store i32 %1227, i32* %325, align 4
  %1228 = shl nsw i32 %1224, 1
  %1229 = sext i32 %1228 to i64
  %1230 = add i64 %1226, 11
  %1231 = add i64 %1230, %1229
  %1232 = inttoptr i64 %1231 to i16*
  store i16 121, i16* %1232, align 2
  %1233 = load i32, i32* %325, align 4
  %1234 = load i32, i32* %326, align 8
  %1235 = icmp eq i32 %1233, %1234
  br i1 %1235, label %1236, label %1238

1236:                                             ; preds = %1223
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1237 = load i32, i32* %325, align 4
  br label %1238

1238:                                             ; preds = %1236, %1223
  %1239 = phi i32 [ %1237, %1236 ], [ %1233, %1223 ]
  %1240 = load i64*, i64** %324, align 8
  %1241 = load i64, i64* %1240, align 8
  %1242 = add nsw i32 %1239, 1
  store i32 %1242, i32* %325, align 4
  %1243 = shl nsw i32 %1239, 1
  %1244 = sext i32 %1243 to i64
  %1245 = add i64 %1241, 11
  %1246 = add i64 %1245, %1244
  %1247 = inttoptr i64 %1246 to i16*
  store i16 109, i16* %1247, align 2
  %1248 = load i32, i32* %325, align 4
  %1249 = load i32, i32* %326, align 8
  %1250 = icmp eq i32 %1248, %1249
  br i1 %1250, label %1251, label %1253

1251:                                             ; preds = %1238
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1252 = load i32, i32* %325, align 4
  br label %1253

1253:                                             ; preds = %1251, %1238
  %1254 = phi i32 [ %1252, %1251 ], [ %1248, %1238 ]
  %1255 = load i64*, i64** %324, align 8
  %1256 = load i64, i64* %1255, align 8
  %1257 = add nsw i32 %1254, 1
  store i32 %1257, i32* %325, align 4
  %1258 = shl nsw i32 %1254, 1
  %1259 = sext i32 %1258 to i64
  %1260 = add i64 %1256, 11
  %1261 = add i64 %1260, %1259
  %1262 = inttoptr i64 %1261 to i16*
  store i16 111, i16* %1262, align 2
  %1263 = load i32, i32* %325, align 4
  %1264 = load i32, i32* %326, align 8
  %1265 = icmp eq i32 %1263, %1264
  br i1 %1265, label %1266, label %1268

1266:                                             ; preds = %1253
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1267 = load i32, i32* %325, align 4
  br label %1268

1268:                                             ; preds = %1266, %1253
  %1269 = phi i32 [ %1267, %1266 ], [ %1263, %1253 ]
  %1270 = load i64*, i64** %324, align 8
  %1271 = load i64, i64* %1270, align 8
  %1272 = add nsw i32 %1269, 1
  store i32 %1272, i32* %325, align 4
  %1273 = shl nsw i32 %1269, 1
  %1274 = sext i32 %1273 to i64
  %1275 = add i64 %1271, 11
  %1276 = add i64 %1275, %1274
  %1277 = inttoptr i64 %1276 to i16*
  store i16 117, i16* %1277, align 2
  %1278 = load i32, i32* %325, align 4
  %1279 = load i32, i32* %326, align 8
  %1280 = icmp eq i32 %1278, %1279
  br i1 %1280, label %1281, label %1283

1281:                                             ; preds = %1268
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1282 = load i32, i32* %325, align 4
  br label %1283

1283:                                             ; preds = %1281, %1268
  %1284 = phi i32 [ %1282, %1281 ], [ %1278, %1268 ]
  %1285 = load i64*, i64** %324, align 8
  %1286 = load i64, i64* %1285, align 8
  %1287 = add nsw i32 %1284, 1
  store i32 %1287, i32* %325, align 4
  %1288 = shl nsw i32 %1284, 1
  %1289 = sext i32 %1288 to i64
  %1290 = add i64 %1286, 11
  %1291 = add i64 %1290, %1289
  %1292 = inttoptr i64 %1291 to i16*
  store i16 115, i16* %1292, align 2
  %1293 = load i32, i32* %325, align 4
  %1294 = load i32, i32* %326, align 8
  %1295 = icmp eq i32 %1293, %1294
  br i1 %1295, label %1296, label %1298

1296:                                             ; preds = %1283
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1297 = load i32, i32* %325, align 4
  br label %1298

1298:                                             ; preds = %1296, %1283
  %1299 = phi i32 [ %1297, %1296 ], [ %1293, %1283 ]
  %1300 = load i64*, i64** %324, align 8
  %1301 = load i64, i64* %1300, align 8
  %1302 = add nsw i32 %1299, 1
  store i32 %1302, i32* %325, align 4
  %1303 = shl nsw i32 %1299, 1
  %1304 = sext i32 %1303 to i64
  %1305 = add i64 %1301, 11
  %1306 = add i64 %1305, %1304
  %1307 = inttoptr i64 %1306 to i16*
  store i16 62, i16* %1307, align 2
  %1308 = load i32, i32* %325, align 4
  %1309 = load i32, i32* %326, align 8
  %1310 = icmp eq i32 %1308, %1309
  br i1 %1310, label %1311, label %377

1311:                                             ; preds = %1298
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %377

1312:                                             ; preds = %224
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %251

1313:                                             ; preds = %238
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %251

1314:                                             ; preds = %670, %678, %687, %695, %696
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %574) #6
  br label %3549

1315:                                             ; preds = %3
  %1316 = tail call i64* @_ZN2v88internal14StackFrameInfo15GetFunctionNameENS0_6HandleIS1_EE(i64* %1) #6
  %1317 = load i64, i64* %1, align 8
  %1318 = add i64 %1317, 19
  %1319 = inttoptr i64 %1318 to i32*
  %1320 = load i32, i32* %1319, align 4
  %1321 = and i32 %1320, 64
  %1322 = icmp eq i32 %1321, 0
  br i1 %1322, label %1637, label %1323

1323:                                             ; preds = %1315
  %1324 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %1325 = load i32, i32* %1324, align 8
  %1326 = icmp eq i32 %1325, 0
  %1327 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %1328 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %1329 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %1330 = load i64*, i64** %1327, align 8
  %1331 = load i64, i64* %1330, align 8
  %1332 = load i32, i32* %1328, align 4
  %1333 = add nsw i32 %1332, 1
  store i32 %1333, i32* %1328, align 4
  br i1 %1326, label %1343, label %1334

1334:                                             ; preds = %1323
  %1335 = shl nsw i32 %1332, 1
  %1336 = sext i32 %1335 to i64
  %1337 = add i64 %1331, 11
  %1338 = add i64 %1337, %1336
  %1339 = inttoptr i64 %1338 to i16*
  store i16 97, i16* %1339, align 2
  %1340 = load i32, i32* %1328, align 4
  %1341 = load i32, i32* %1329, align 8
  %1342 = icmp eq i32 %1340, %1341
  br i1 %1342, label %1365, label %1367

1343:                                             ; preds = %1323
  %1344 = sext i32 %1332 to i64
  %1345 = add i64 %1331, 11
  %1346 = add i64 %1345, %1344
  %1347 = inttoptr i64 %1346 to i8*
  store i8 97, i8* %1347, align 1
  %1348 = load i32, i32* %1328, align 4
  %1349 = load i32, i32* %1329, align 8
  %1350 = icmp eq i32 %1348, %1349
  br i1 %1350, label %1351, label %1353

1351:                                             ; preds = %1343
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1352 = load i32, i32* %1328, align 4
  br label %1353

1353:                                             ; preds = %1351, %1343
  %1354 = phi i32 [ %1352, %1351 ], [ %1348, %1343 ]
  %1355 = load i64*, i64** %1327, align 8
  %1356 = load i64, i64* %1355, align 8
  %1357 = add nsw i32 %1354, 1
  store i32 %1357, i32* %1328, align 4
  %1358 = sext i32 %1354 to i64
  %1359 = add nsw i64 %1358, 11
  %1360 = add i64 %1359, %1356
  %1361 = inttoptr i64 %1360 to i8*
  store i8 115, i8* %1361, align 1
  %1362 = load i32, i32* %1328, align 4
  %1363 = load i32, i32* %1329, align 8
  %1364 = icmp eq i32 %1362, %1363
  br i1 %1364, label %3431, label %3433

1365:                                             ; preds = %1334
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1366 = load i32, i32* %1328, align 4
  br label %1367

1367:                                             ; preds = %1365, %1334
  %1368 = phi i32 [ %1366, %1365 ], [ %1340, %1334 ]
  %1369 = load i64*, i64** %1327, align 8
  %1370 = load i64, i64* %1369, align 8
  %1371 = add nsw i32 %1368, 1
  store i32 %1371, i32* %1328, align 4
  %1372 = shl nsw i32 %1368, 1
  %1373 = sext i32 %1372 to i64
  %1374 = add i64 %1370, 11
  %1375 = add i64 %1374, %1373
  %1376 = inttoptr i64 %1375 to i16*
  store i16 115, i16* %1376, align 2
  %1377 = load i32, i32* %1328, align 4
  %1378 = load i32, i32* %1329, align 8
  %1379 = icmp eq i32 %1377, %1378
  br i1 %1379, label %3488, label %3490

1380:                                             ; preds = %3548, %3535, %3487, %3475
  %1381 = load i64, i64* %1, align 8
  %1382 = add i64 %1381, 19
  %1383 = inttoptr i64 %1382 to i32*
  %1384 = load i32, i32* %1383, align 4
  %1385 = and i32 %1384, 64
  %1386 = icmp eq i32 %1385, 0
  br i1 %1386, label %1637, label %1387

1387:                                             ; preds = %1380
  %1388 = and i64 %1381, -4294967296
  %1389 = add i64 %1381, 7
  %1390 = inttoptr i64 %1389 to i32*
  %1391 = load i32, i32* %1390, align 4
  %1392 = zext i32 %1391 to i64
  %1393 = or i64 %1388, %1392
  %1394 = add i64 %1393, 15
  %1395 = inttoptr i64 %1394 to i32*
  %1396 = load i32, i32* %1395, align 4
  %1397 = zext i32 %1396 to i64
  %1398 = or i64 %1388, %1397
  %1399 = add i64 %1398, -1
  %1400 = inttoptr i64 %1399 to i32*
  %1401 = load atomic i32, i32* %1400 monotonic, align 4
  %1402 = zext i32 %1401 to i64
  %1403 = or i64 %1388, %1402
  %1404 = add i64 %1403, 19
  %1405 = inttoptr i64 %1404 to i32*
  %1406 = load i32, i32* %1405, align 4
  %1407 = zext i32 %1406 to i64
  %1408 = or i64 %1388, %1407
  %1409 = add i64 %1408, 939
  %1410 = inttoptr i64 %1409 to i32*
  %1411 = load atomic i32, i32* %1410 monotonic, align 4
  %1412 = icmp eq i32 %1391, %1411
  br i1 %1412, label %1426, label %1413

1413:                                             ; preds = %1387
  %1414 = load atomic i32, i32* %1400 monotonic, align 4
  %1415 = zext i32 %1414 to i64
  %1416 = or i64 %1388, %1415
  %1417 = add i64 %1416, 19
  %1418 = inttoptr i64 %1417 to i32*
  %1419 = load i32, i32* %1418, align 4
  %1420 = zext i32 %1419 to i64
  %1421 = or i64 %1388, %1420
  %1422 = add i64 %1421, 943
  %1423 = inttoptr i64 %1422 to i32*
  %1424 = load atomic i32, i32* %1423 monotonic, align 4
  %1425 = icmp eq i32 %1391, %1424
  br i1 %1425, label %1426, label %1637

1426:                                             ; preds = %1413, %1387
  %1427 = load i32, i32* %1324, align 8
  %1428 = icmp eq i32 %1427, 0
  %1429 = load i64*, i64** %1327, align 8
  %1430 = load i64, i64* %1429, align 8
  %1431 = load i32, i32* %1328, align 4
  %1432 = add nsw i32 %1431, 1
  store i32 %1432, i32* %1328, align 4
  br i1 %1428, label %1442, label %1433

1433:                                             ; preds = %1426
  %1434 = shl nsw i32 %1431, 1
  %1435 = sext i32 %1434 to i64
  %1436 = add i64 %1430, 11
  %1437 = add i64 %1436, %1435
  %1438 = inttoptr i64 %1437 to i16*
  store i16 80, i16* %1438, align 2
  %1439 = load i32, i32* %1328, align 4
  %1440 = load i32, i32* %1329, align 8
  %1441 = icmp eq i32 %1439, %1440
  br i1 %1441, label %1464, label %1466

1442:                                             ; preds = %1426
  %1443 = sext i32 %1431 to i64
  %1444 = add i64 %1430, 11
  %1445 = add i64 %1444, %1443
  %1446 = inttoptr i64 %1445 to i8*
  store i8 80, i8* %1446, align 1
  %1447 = load i32, i32* %1328, align 4
  %1448 = load i32, i32* %1329, align 8
  %1449 = icmp eq i32 %1447, %1448
  br i1 %1449, label %1450, label %1452

1450:                                             ; preds = %1442
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1451 = load i32, i32* %1328, align 4
  br label %1452

1452:                                             ; preds = %1450, %1442
  %1453 = phi i32 [ %1451, %1450 ], [ %1447, %1442 ]
  %1454 = load i64*, i64** %1327, align 8
  %1455 = load i64, i64* %1454, align 8
  %1456 = add nsw i32 %1453, 1
  store i32 %1456, i32* %1328, align 4
  %1457 = sext i32 %1453 to i64
  %1458 = add nsw i64 %1457, 11
  %1459 = add i64 %1458, %1455
  %1460 = inttoptr i64 %1459 to i8*
  store i8 114, i8* %1460, align 1
  %1461 = load i32, i32* %1328, align 4
  %1462 = load i32, i32* %1329, align 8
  %1463 = icmp eq i32 %1461, %1462
  br i1 %1463, label %3255, label %3257

1464:                                             ; preds = %1433
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1465 = load i32, i32* %1328, align 4
  br label %1466

1466:                                             ; preds = %1464, %1433
  %1467 = phi i32 [ %1465, %1464 ], [ %1439, %1433 ]
  %1468 = load i64*, i64** %1327, align 8
  %1469 = load i64, i64* %1468, align 8
  %1470 = add nsw i32 %1467, 1
  store i32 %1470, i32* %1328, align 4
  %1471 = shl nsw i32 %1467, 1
  %1472 = sext i32 %1471 to i64
  %1473 = add i64 %1469, 11
  %1474 = add i64 %1473, %1472
  %1475 = inttoptr i64 %1474 to i16*
  store i16 114, i16* %1475, align 2
  %1476 = load i32, i32* %1328, align 4
  %1477 = load i32, i32* %1329, align 8
  %1478 = icmp eq i32 %1476, %1477
  br i1 %1478, label %3340, label %3342

1479:                                             ; preds = %3430, %3417, %3339, %3327
  tail call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* %2, i64* %1316) #6
  %1480 = load i32, i32* %1324, align 8
  %1481 = icmp eq i32 %1480, 0
  %1482 = load i64*, i64** %1327, align 8
  %1483 = load i64, i64* %1482, align 8
  %1484 = load i32, i32* %1328, align 4
  %1485 = add nsw i32 %1484, 1
  store i32 %1485, i32* %1328, align 4
  br i1 %1481, label %1495, label %1486

1486:                                             ; preds = %1479
  %1487 = shl nsw i32 %1484, 1
  %1488 = sext i32 %1487 to i64
  %1489 = add i64 %1483, 11
  %1490 = add i64 %1489, %1488
  %1491 = inttoptr i64 %1490 to i16*
  store i16 32, i16* %1491, align 2
  %1492 = load i32, i32* %1328, align 4
  %1493 = load i32, i32* %1329, align 8
  %1494 = icmp eq i32 %1492, %1493
  br i1 %1494, label %1517, label %1519

1495:                                             ; preds = %1479
  %1496 = sext i32 %1484 to i64
  %1497 = add i64 %1483, 11
  %1498 = add i64 %1497, %1496
  %1499 = inttoptr i64 %1498 to i8*
  store i8 32, i8* %1499, align 1
  %1500 = load i32, i32* %1328, align 4
  %1501 = load i32, i32* %1329, align 8
  %1502 = icmp eq i32 %1500, %1501
  br i1 %1502, label %1503, label %1505

1503:                                             ; preds = %1495
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1504 = load i32, i32* %1328, align 4
  br label %1505

1505:                                             ; preds = %1503, %1495
  %1506 = phi i32 [ %1504, %1503 ], [ %1500, %1495 ]
  %1507 = load i64*, i64** %1327, align 8
  %1508 = load i64, i64* %1507, align 8
  %1509 = add nsw i32 %1506, 1
  store i32 %1509, i32* %1328, align 4
  %1510 = sext i32 %1506 to i64
  %1511 = add nsw i64 %1510, 11
  %1512 = add i64 %1511, %1508
  %1513 = inttoptr i64 %1512 to i8*
  store i8 40, i8* %1513, align 1
  %1514 = load i32, i32* %1328, align 4
  %1515 = load i32, i32* %1329, align 8
  %1516 = icmp eq i32 %1514, %1515
  br i1 %1516, label %3079, label %3081

1517:                                             ; preds = %1486
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1518 = load i32, i32* %1328, align 4
  br label %1519

1519:                                             ; preds = %1517, %1486
  %1520 = phi i32 [ %1518, %1517 ], [ %1492, %1486 ]
  %1521 = load i64*, i64** %1327, align 8
  %1522 = load i64, i64* %1521, align 8
  %1523 = add nsw i32 %1520, 1
  store i32 %1523, i32* %1328, align 4
  %1524 = shl nsw i32 %1520, 1
  %1525 = sext i32 %1524 to i64
  %1526 = add i64 %1522, 11
  %1527 = add i64 %1526, %1525
  %1528 = inttoptr i64 %1527 to i16*
  store i16 40, i16* %1528, align 2
  %1529 = load i32, i32* %1328, align 4
  %1530 = load i32, i32* %1329, align 8
  %1531 = icmp eq i32 %1529, %1530
  br i1 %1531, label %3164, label %3166

1532:                                             ; preds = %3254, %3241, %3163, %3151
  %1533 = load i64, i64* %1, align 8
  %1534 = add i64 %1533, 19
  %1535 = inttoptr i64 %1534 to i32*
  %1536 = load i32, i32* %1535, align 4
  %1537 = trunc i32 %1536 to i8
  %1538 = icmp sgt i8 %1537, -1
  %1539 = add i64 %1533, 15
  %1540 = inttoptr i64 %1539 to i32*
  %1541 = load i32, i32* %1540, align 4
  %1542 = ashr i32 %1541, 1
  br i1 %1538, label %1543, label %1555

1543:                                             ; preds = %1532
  %1544 = tail call i32 @_ZN2v88internal14StackFrameInfo21ComputeSourcePositionENS0_6HandleIS1_EEi(i64* %1, i32 %1542) #6
  %1545 = load i64, i64* %1, align 8
  %1546 = shl i32 %1544, 1
  %1547 = add i64 %1545, 15
  %1548 = inttoptr i64 %1547 to i32*
  store atomic volatile i32 %1546, i32* %1548 monotonic, align 4
  %1549 = load i64, i64* %1, align 8
  %1550 = add i64 %1549, 19
  %1551 = inttoptr i64 %1550 to i32*
  %1552 = load i32, i32* %1551, align 4
  %1553 = and i32 %1552, -130
  %1554 = or i32 %1553, 128
  store atomic volatile i32 %1554, i32* %1551 monotonic, align 4
  br label %1555

1555:                                             ; preds = %1543, %1532
  %1556 = phi i32 [ %1544, %1543 ], [ %1542, %1532 ]
  %1557 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %1557) #6
  %1558 = call i8* @_ZN2v88internal12IntToCStringEiNS0_6VectorIcEE(i32 %1556, i8* nonnull %1557, i64 100) #6
  %1559 = load i32, i32* %1324, align 8
  %1560 = icmp eq i32 %1559, 0
  %1561 = load i8, i8* %1558, align 1
  %1562 = icmp eq i8 %1561, 0
  br i1 %1560, label %1565, label %1563

1563:                                             ; preds = %1555
  br i1 %1562, label %1564, label %1586

1564:                                             ; preds = %1563
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %1557) #6
  br label %1610

1565:                                             ; preds = %1555
  br i1 %1562, label %1566, label %1567

1566:                                             ; preds = %1565
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %1557) #6
  br label %1623

1567:                                             ; preds = %1565, %1583
  %1568 = phi i8 [ %1584, %1583 ], [ %1561, %1565 ]
  %1569 = phi i8* [ %1570, %1583 ], [ %1558, %1565 ]
  %1570 = getelementptr inbounds i8, i8* %1569, i64 1
  %1571 = load i64*, i64** %1327, align 8
  %1572 = load i64, i64* %1571, align 8
  %1573 = load i32, i32* %1328, align 4
  %1574 = add nsw i32 %1573, 1
  store i32 %1574, i32* %1328, align 4
  %1575 = sext i32 %1573 to i64
  %1576 = add i64 %1572, 11
  %1577 = add i64 %1576, %1575
  %1578 = inttoptr i64 %1577 to i8*
  store i8 %1568, i8* %1578, align 1
  %1579 = load i32, i32* %1328, align 4
  %1580 = load i32, i32* %1329, align 8
  %1581 = icmp eq i32 %1579, %1580
  br i1 %1581, label %1582, label %1583

1582:                                             ; preds = %1567
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %1583

1583:                                             ; preds = %1582, %1567
  %1584 = load i8, i8* %1570, align 1
  %1585 = icmp eq i8 %1584, 0
  br i1 %1585, label %1607, label %1567

1586:                                             ; preds = %1563, %1604
  %1587 = phi i8 [ %1605, %1604 ], [ %1561, %1563 ]
  %1588 = phi i8* [ %1589, %1604 ], [ %1558, %1563 ]
  %1589 = getelementptr inbounds i8, i8* %1588, i64 1
  %1590 = load i64*, i64** %1327, align 8
  %1591 = load i64, i64* %1590, align 8
  %1592 = load i32, i32* %1328, align 4
  %1593 = add nsw i32 %1592, 1
  store i32 %1593, i32* %1328, align 4
  %1594 = zext i8 %1587 to i16
  %1595 = shl nsw i32 %1592, 1
  %1596 = sext i32 %1595 to i64
  %1597 = add i64 %1591, 11
  %1598 = add i64 %1597, %1596
  %1599 = inttoptr i64 %1598 to i16*
  store i16 %1594, i16* %1599, align 2
  %1600 = load i32, i32* %1328, align 4
  %1601 = load i32, i32* %1329, align 8
  %1602 = icmp eq i32 %1600, %1601
  br i1 %1602, label %1603, label %1604

1603:                                             ; preds = %1586
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %1604

1604:                                             ; preds = %1603, %1586
  %1605 = load i8, i8* %1589, align 1
  %1606 = icmp eq i8 %1605, 0
  br i1 %1606, label %1607, label %1586

1607:                                             ; preds = %1604, %1583
  %1608 = load i32, i32* %1324, align 8
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %1557) #6
  %1609 = icmp eq i32 %1608, 0
  br i1 %1609, label %1623, label %1610

1610:                                             ; preds = %1607, %1564
  %1611 = load i64*, i64** %1327, align 8
  %1612 = load i64, i64* %1611, align 8
  %1613 = load i32, i32* %1328, align 4
  %1614 = add nsw i32 %1613, 1
  store i32 %1614, i32* %1328, align 4
  %1615 = shl nsw i32 %1613, 1
  %1616 = sext i32 %1615 to i64
  %1617 = add i64 %1612, 11
  %1618 = add i64 %1617, %1616
  %1619 = inttoptr i64 %1618 to i16*
  store i16 41, i16* %1619, align 2
  %1620 = load i32, i32* %1328, align 4
  %1621 = load i32, i32* %1329, align 8
  %1622 = icmp eq i32 %1620, %1621
  br i1 %1622, label %1636, label %3549

1623:                                             ; preds = %1607, %1566
  %1624 = load i64*, i64** %1327, align 8
  %1625 = load i64, i64* %1624, align 8
  %1626 = load i32, i32* %1328, align 4
  %1627 = add nsw i32 %1626, 1
  store i32 %1627, i32* %1328, align 4
  %1628 = sext i32 %1626 to i64
  %1629 = add i64 %1625, 11
  %1630 = add i64 %1629, %1628
  %1631 = inttoptr i64 %1630 to i8*
  store i8 41, i8* %1631, align 1
  %1632 = load i32, i32* %1328, align 4
  %1633 = load i32, i32* %1329, align 8
  %1634 = icmp eq i32 %1632, %1633
  br i1 %1634, label %1635, label %3549

1635:                                             ; preds = %1623
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %3549

1636:                                             ; preds = %1610
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %3549

1637:                                             ; preds = %1413, %1380, %1315
  %1638 = phi i32 [ %1320, %1315 ], [ %1384, %1380 ], [ %1384, %1413 ]
  %1639 = phi i64 [ %1317, %1315 ], [ %1381, %1380 ], [ %1381, %1413 ]
  %1640 = and i32 %1638, 2
  %1641 = icmp eq i32 %1640, 0
  br i1 %1641, label %1642, label %2515

1642:                                             ; preds = %1637
  %1643 = and i64 %1639, -4294967296
  %1644 = add i64 %1639, 3
  %1645 = inttoptr i64 %1644 to i32*
  %1646 = load i32, i32* %1645, align 4
  %1647 = zext i32 %1646 to i64
  %1648 = or i64 %1643, %1647
  %1649 = and i64 %1647, 1
  %1650 = icmp eq i64 %1649, 0
  br i1 %1650, label %1689, label %1651

1651:                                             ; preds = %1642
  %1652 = add i64 %1648, -1
  %1653 = inttoptr i64 %1652 to i32*
  %1654 = load atomic i32, i32* %1653 monotonic, align 4
  %1655 = zext i32 %1654 to i64
  %1656 = or i64 %1643, %1655
  %1657 = add i64 %1656, 7
  %1658 = inttoptr i64 %1657 to i16*
  %1659 = load atomic i16, i16* %1658 monotonic, align 2
  %1660 = icmp eq i16 %1659, 190
  br i1 %1660, label %2515, label %1661

1661:                                             ; preds = %1651
  %1662 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %1663 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %1662, null
  br i1 %1663, label %1670, label %1664

1664:                                             ; preds = %1661
  %1665 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %1662, i64 0, i32 0, i32 1
  %1666 = load i8, i8* %1665, align 8, !range !2
  %1667 = icmp eq i8 %1666, 0
  br i1 %1667, label %1670, label %1668

1668:                                             ; preds = %1664
  %1669 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %1662, i64 0, i32 1, i64 0
  br label %1678

1670:                                             ; preds = %1664, %1661
  %1671 = and i64 %1648, -262144
  %1672 = or i64 %1671, 16
  %1673 = inttoptr i64 %1672 to i64*
  %1674 = load i64, i64* %1673, align 16
  %1675 = add i64 %1674, -41416
  %1676 = inttoptr i64 %1675 to %"class.v8::internal::Isolate"*
  %1677 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1676, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %1678

1678:                                             ; preds = %1670, %1668
  %1679 = phi i64* [ %1677, %1670 ], [ %1669, %1668 ]
  %1680 = getelementptr inbounds i64, i64* %1679, i64 6
  %1681 = load i64, i64* %1680, align 8
  %1682 = trunc i64 %1681 to i32
  %1683 = icmp eq i32 %1646, %1682
  br i1 %1683, label %2515, label %1684

1684:                                             ; preds = %1678
  %1685 = getelementptr inbounds i64, i64* %1679, i64 4
  %1686 = load i64, i64* %1685, align 8
  %1687 = trunc i64 %1686 to i32
  %1688 = icmp eq i32 %1646, %1687
  br i1 %1688, label %2515, label %1689

1689:                                             ; preds = %1684, %1642
  %1690 = and i32 %1638, 16
  %1691 = icmp eq i32 %1690, 0
  br i1 %1691, label %1692, label %2515

1692:                                             ; preds = %1689
  %1693 = tail call i64* @_ZN2v88internal14StackFrameInfo11GetTypeNameENS0_6HandleIS1_EE(i64* %1) #6
  %1694 = tail call i64* @_ZN2v88internal14StackFrameInfo13GetMethodNameENS0_6HandleIS1_EE(i64* %1) #6
  %1695 = tail call i64* @_ZN2v88internal14StackFrameInfo15GetFunctionNameENS0_6HandleIS1_EE(i64* %1) #6
  %1696 = load i64, i64* %1695, align 8
  %1697 = and i64 %1696, 1
  %1698 = icmp eq i64 %1697, 0
  br i1 %1698, label %2034, label %1699

1699:                                             ; preds = %1692
  %1700 = and i64 %1696, -4294967296
  %1701 = add i64 %1696, -1
  %1702 = inttoptr i64 %1701 to i32*
  %1703 = load atomic i32, i32* %1702 monotonic, align 4
  %1704 = zext i32 %1703 to i64
  %1705 = or i64 %1700, %1704
  %1706 = add i64 %1705, 7
  %1707 = inttoptr i64 %1706 to i16*
  %1708 = load atomic i16, i16* %1707 monotonic, align 2
  %1709 = icmp ult i16 %1708, 64
  br i1 %1709, label %1710, label %2034

1710:                                             ; preds = %1699
  %1711 = add i64 %1696, 7
  %1712 = inttoptr i64 %1711 to i32*
  %1713 = load i32, i32* %1712, align 4
  %1714 = icmp sgt i32 %1713, 0
  br i1 %1714, label %1715, label %2034

1715:                                             ; preds = %1710
  %1716 = load i64, i64* %1693, align 8
  %1717 = and i64 %1716, 1
  %1718 = icmp eq i64 %1717, 0
  br i1 %1718, label %1771, label %1719

1719:                                             ; preds = %1715
  %1720 = and i64 %1716, -4294967296
  %1721 = add i64 %1716, -1
  %1722 = inttoptr i64 %1721 to i32*
  %1723 = load atomic i32, i32* %1722 monotonic, align 4
  %1724 = zext i32 %1723 to i64
  %1725 = or i64 %1720, %1724
  %1726 = add i64 %1725, 7
  %1727 = inttoptr i64 %1726 to i16*
  %1728 = load atomic i16, i16* %1727 monotonic, align 2
  %1729 = icmp ult i16 %1728, 64
  br i1 %1729, label %1730, label %1771

1730:                                             ; preds = %1719
  %1731 = add i64 %1716, 7
  %1732 = inttoptr i64 %1731 to i32*
  %1733 = load i32, i32* %1732, align 4
  %1734 = icmp sgt i32 %1733, 0
  br i1 %1734, label %1735, label %1771

1735:                                             ; preds = %1730
  %1736 = icmp sgt i32 %1733, %1713
  br i1 %1736, label %1740, label %1737

1737:                                             ; preds = %1735
  %1738 = tail call i32 @_ZN2v88internal6String7IndexOfEPNS0_7IsolateENS0_6HandleIS1_EES5_i(%"class.v8::internal::Isolate"* %0, i64* %1695, i64* %1693, i32 0) #6
  %1739 = icmp eq i32 %1738, 0
  br i1 %1739, label %1771, label %1740

1740:                                             ; preds = %1737, %1735
  tail call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* %2, i64* %1693) #6
  %1741 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %1742 = load i32, i32* %1741, align 8
  %1743 = icmp eq i32 %1742, 0
  %1744 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %1745 = load i64*, i64** %1744, align 8
  %1746 = load i64, i64* %1745, align 8
  %1747 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %1748 = load i32, i32* %1747, align 4
  %1749 = add nsw i32 %1748, 1
  store i32 %1749, i32* %1747, align 4
  br i1 %1743, label %1750, label %1760

1750:                                             ; preds = %1740
  %1751 = sext i32 %1748 to i64
  %1752 = add i64 %1746, 11
  %1753 = add i64 %1752, %1751
  %1754 = inttoptr i64 %1753 to i8*
  store i8 46, i8* %1754, align 1
  %1755 = load i32, i32* %1747, align 4
  %1756 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %1757 = load i32, i32* %1756, align 8
  %1758 = icmp eq i32 %1755, %1757
  br i1 %1758, label %1759, label %1771

1759:                                             ; preds = %1750
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %1771

1760:                                             ; preds = %1740
  %1761 = shl nsw i32 %1748, 1
  %1762 = sext i32 %1761 to i64
  %1763 = add i64 %1746, 11
  %1764 = add i64 %1763, %1762
  %1765 = inttoptr i64 %1764 to i16*
  store i16 46, i16* %1765, align 2
  %1766 = load i32, i32* %1747, align 4
  %1767 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %1768 = load i32, i32* %1767, align 8
  %1769 = icmp eq i32 %1766, %1768
  br i1 %1769, label %1770, label %1771

1770:                                             ; preds = %1760
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %1771

1771:                                             ; preds = %1770, %1760, %1759, %1750, %1737, %1730, %1719, %1715
  tail call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* %2, i64* %1695) #6
  %1772 = load i64, i64* %1694, align 8
  %1773 = and i64 %1772, 1
  %1774 = icmp eq i64 %1773, 0
  br i1 %1774, label %2671, label %1775

1775:                                             ; preds = %1771
  %1776 = and i64 %1772, -4294967296
  %1777 = add i64 %1772, -1
  %1778 = inttoptr i64 %1777 to i32*
  %1779 = load atomic i32, i32* %1778 monotonic, align 4
  %1780 = zext i32 %1779 to i64
  %1781 = or i64 %1776, %1780
  %1782 = add i64 %1781, 7
  %1783 = inttoptr i64 %1782 to i16*
  %1784 = load atomic i16, i16* %1783 monotonic, align 2
  %1785 = icmp ult i16 %1784, 64
  br i1 %1785, label %1786, label %2671

1786:                                             ; preds = %1775
  %1787 = add i64 %1772, 7
  %1788 = inttoptr i64 %1787 to i32*
  %1789 = load i32, i32* %1788, align 4
  %1790 = icmp slt i32 %1789, 1
  %1791 = icmp eq i64* %1695, %1694
  %1792 = or i1 %1791, %1790
  br i1 %1792, label %2671, label %1793

1793:                                             ; preds = %1786
  %1794 = icmp eq i64* %1695, null
  %1795 = icmp eq i64* %1694, null
  %1796 = or i1 %1795, %1794
  %1797 = load i64, i64* %1695, align 8
  br i1 %1796, label %1802, label %1798

1798:                                             ; preds = %1793
  %1799 = trunc i64 %1797 to i32
  %1800 = trunc i64 %1772 to i32
  %1801 = icmp eq i32 %1799, %1800
  br i1 %1801, label %2671, label %1802

1802:                                             ; preds = %1798, %1793
  %1803 = and i64 %1797, -4294967296
  %1804 = add i64 %1797, -1
  %1805 = inttoptr i64 %1804 to i32*
  %1806 = load atomic i32, i32* %1805 monotonic, align 4
  %1807 = zext i32 %1806 to i64
  %1808 = or i64 %1803, %1807
  %1809 = add i64 %1808, 7
  %1810 = inttoptr i64 %1809 to i16*
  %1811 = load atomic i16, i16* %1810 monotonic, align 2
  %1812 = icmp ult i16 %1811, 32
  br i1 %1812, label %1813, label %1821

1813:                                             ; preds = %1802
  %1814 = load atomic i32, i32* %1778 monotonic, align 4
  %1815 = zext i32 %1814 to i64
  %1816 = or i64 %1776, %1815
  %1817 = add i64 %1816, 7
  %1818 = inttoptr i64 %1817 to i16*
  %1819 = load atomic i16, i16* %1818 monotonic, align 2
  %1820 = icmp ult i16 %1819, 32
  br i1 %1820, label %1823, label %1821

1821:                                             ; preds = %1813, %1802
  %1822 = tail call zeroext i1 @_ZN2v88internal6String10SlowEqualsEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"* %0, i64* %1695, i64* %1694) #6
  br i1 %1822, label %2671, label %1823

1823:                                             ; preds = %1821, %1813
  %1824 = bitcast %"class.v8::internal::FlatStringReader"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %1824) #6
  %1825 = tail call i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i64* %1695, i8 zeroext 0) #6
  call void @_ZN2v88internal16FlatStringReaderC1EPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::FlatStringReader"* nonnull %7, %"class.v8::internal::Isolate"* %0, i64* %1825) #6
  %1826 = bitcast %"class.v8::internal::FlatStringReader"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %1826) #6
  %1827 = call i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i64* %1694, i8 zeroext 0) #6
  call void @_ZN2v88internal16FlatStringReaderC1EPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::FlatStringReader"* nonnull %8, %"class.v8::internal::Isolate"* %0, i64* %1827) #6
  %1828 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %8, i64 0, i32 3
  %1829 = load i32, i32* %1828, align 4
  %1830 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %7, i64 0, i32 3
  %1831 = load i32, i32* %1830, align 4
  %1832 = icmp slt i32 %1829, 0
  br i1 %1832, label %1933, label %1833

1833:                                             ; preds = %1823
  %1834 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %7, i64 0, i32 2
  %1835 = load i8, i8* %1834, align 8
  %1836 = icmp eq i8 %1835, 0
  %1837 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %7, i64 0, i32 4
  %1838 = load i8*, i8** %1837, align 8
  %1839 = bitcast i8* %1838 to i16*
  %1840 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %8, i64 0, i32 2
  %1841 = load i8, i8* %1840, align 8
  %1842 = icmp eq i8 %1841, 0
  %1843 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %8, i64 0, i32 4
  %1844 = load i8*, i8** %1843, align 8
  %1845 = bitcast i8* %1844 to i16*
  %1846 = sext i32 %1829 to i64
  %1847 = add i32 %1831, -1
  %1848 = sext i32 %1847 to i64
  %1849 = add nsw i64 %1846, -1
  %1850 = icmp slt i32 %1831, 1
  br i1 %1836, label %1851, label %1892

1851:                                             ; preds = %1833
  br i1 %1842, label %1853, label %1852

1852:                                             ; preds = %1851
  br i1 %1850, label %1933, label %1872

1853:                                             ; preds = %1851
  br i1 %1850, label %1933, label %1854

1854:                                             ; preds = %1853, %1867
  %1855 = phi i64 [ %1870, %1867 ], [ %1849, %1853 ]
  %1856 = phi i32 [ %1868, %1867 ], [ 0, %1853 ]
  %1857 = phi i64 [ %1869, %1867 ], [ %1848, %1853 ]
  %1858 = getelementptr inbounds i16, i16* %1839, i64 %1857
  %1859 = load i16, i16* %1858, align 2
  %1860 = icmp eq i32 %1856, %1829
  br i1 %1860, label %1865, label %1861

1861:                                             ; preds = %1854
  %1862 = getelementptr inbounds i16, i16* %1845, i64 %1855
  %1863 = load i16, i16* %1862, align 2
  %1864 = icmp eq i16 %1859, %1863
  br i1 %1864, label %1867, label %1933

1865:                                             ; preds = %1854
  %1866 = icmp eq i16 %1859, 46
  br label %1933

1867:                                             ; preds = %1861
  %1868 = add nuw i32 %1856, 1
  %1869 = add nsw i64 %1857, -1
  %1870 = add i64 %1855, -1
  %1871 = icmp eq i32 %1868, %1831
  br i1 %1871, label %1933, label %1854

1872:                                             ; preds = %1852, %1887
  %1873 = phi i64 [ %1890, %1887 ], [ %1849, %1852 ]
  %1874 = phi i32 [ %1888, %1887 ], [ 0, %1852 ]
  %1875 = phi i64 [ %1889, %1887 ], [ %1848, %1852 ]
  %1876 = getelementptr inbounds i16, i16* %1839, i64 %1875
  %1877 = load i16, i16* %1876, align 2
  %1878 = icmp eq i32 %1874, %1829
  br i1 %1878, label %1885, label %1879

1879:                                             ; preds = %1872
  %1880 = zext i16 %1877 to i32
  %1881 = getelementptr inbounds i8, i8* %1844, i64 %1873
  %1882 = load i8, i8* %1881, align 1
  %1883 = zext i8 %1882 to i32
  %1884 = icmp eq i32 %1880, %1883
  br i1 %1884, label %1887, label %1933

1885:                                             ; preds = %1872
  %1886 = icmp eq i16 %1877, 46
  br label %1933

1887:                                             ; preds = %1879
  %1888 = add nuw i32 %1874, 1
  %1889 = add nsw i64 %1875, -1
  %1890 = add i64 %1873, -1
  %1891 = icmp eq i32 %1888, %1831
  br i1 %1891, label %1933, label %1872

1892:                                             ; preds = %1833
  br i1 %1842, label %1894, label %1893

1893:                                             ; preds = %1892
  br i1 %1850, label %1933, label %1915

1894:                                             ; preds = %1892
  br i1 %1850, label %1933, label %1895

1895:                                             ; preds = %1894, %1910
  %1896 = phi i64 [ %1913, %1910 ], [ %1849, %1894 ]
  %1897 = phi i32 [ %1911, %1910 ], [ 0, %1894 ]
  %1898 = phi i64 [ %1912, %1910 ], [ %1848, %1894 ]
  %1899 = getelementptr inbounds i8, i8* %1838, i64 %1898
  %1900 = load i8, i8* %1899, align 1
  %1901 = icmp eq i32 %1897, %1829
  br i1 %1901, label %1908, label %1902

1902:                                             ; preds = %1895
  %1903 = zext i8 %1900 to i32
  %1904 = getelementptr inbounds i16, i16* %1845, i64 %1896
  %1905 = load i16, i16* %1904, align 2
  %1906 = zext i16 %1905 to i32
  %1907 = icmp eq i32 %1903, %1906
  br i1 %1907, label %1910, label %1933

1908:                                             ; preds = %1895
  %1909 = icmp eq i8 %1900, 46
  br label %1933

1910:                                             ; preds = %1902
  %1911 = add nuw i32 %1897, 1
  %1912 = add nsw i64 %1898, -1
  %1913 = add i64 %1896, -1
  %1914 = icmp eq i32 %1911, %1831
  br i1 %1914, label %1933, label %1895

1915:                                             ; preds = %1893, %1928
  %1916 = phi i64 [ %1931, %1928 ], [ %1849, %1893 ]
  %1917 = phi i32 [ %1929, %1928 ], [ 0, %1893 ]
  %1918 = phi i64 [ %1930, %1928 ], [ %1848, %1893 ]
  %1919 = getelementptr inbounds i8, i8* %1838, i64 %1918
  %1920 = load i8, i8* %1919, align 1
  %1921 = icmp eq i32 %1917, %1829
  br i1 %1921, label %1922, label %1924

1922:                                             ; preds = %1915
  %1923 = icmp eq i8 %1920, 46
  br label %1933

1924:                                             ; preds = %1915
  %1925 = getelementptr inbounds i8, i8* %1844, i64 %1916
  %1926 = load i8, i8* %1925, align 1
  %1927 = icmp eq i8 %1920, %1926
  br i1 %1927, label %1928, label %1933

1928:                                             ; preds = %1924
  %1929 = add nuw i32 %1917, 1
  %1930 = add nsw i64 %1918, -1
  %1931 = add i64 %1916, -1
  %1932 = icmp eq i32 %1929, %1831
  br i1 %1932, label %1933, label %1915

1933:                                             ; preds = %1928, %1924, %1910, %1902, %1887, %1879, %1867, %1861, %1922, %1908, %1894, %1893, %1885, %1865, %1853, %1852, %1823
  %1934 = phi i1 [ true, %1823 ], [ %1866, %1865 ], [ %1886, %1885 ], [ %1909, %1908 ], [ %1923, %1922 ], [ false, %1853 ], [ false, %1852 ], [ false, %1894 ], [ false, %1893 ], [ false, %1861 ], [ false, %1867 ], [ false, %1879 ], [ false, %1887 ], [ false, %1902 ], [ false, %1910 ], [ false, %1924 ], [ false, %1928 ]
  %1935 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %8, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2v88internal11RelocatableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1935, align 8
  %1936 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %8, i64 0, i32 0, i32 1
  %1937 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %1936, align 8
  %1938 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %8, i64 0, i32 0, i32 2
  %1939 = bitcast %"class.v8::internal::Relocatable"** %1938 to i64*
  %1940 = load i64, i64* %1939, align 8
  %1941 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1937, i64 0, i32 91
  %1942 = bitcast %"class.v8::internal::Relocatable"** %1941 to i64*
  store i64 %1940, i64* %1942, align 8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %1826) #6
  %1943 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %7, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2v88internal11RelocatableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1943, align 8
  %1944 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %7, i64 0, i32 0, i32 1
  %1945 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %1944, align 8
  %1946 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %7, i64 0, i32 0, i32 2
  %1947 = bitcast %"class.v8::internal::Relocatable"** %1946 to i64*
  %1948 = load i64, i64* %1947, align 8
  %1949 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1945, i64 0, i32 91
  %1950 = bitcast %"class.v8::internal::Relocatable"** %1949 to i64*
  store i64 %1948, i64* %1950, align 8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %1824) #6
  br i1 %1934, label %2671, label %1951

1951:                                             ; preds = %1933
  %1952 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %1953 = load i32, i32* %1952, align 8
  %1954 = icmp eq i32 %1953, 0
  %1955 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %1956 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %1957 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %1958 = load i64*, i64** %1955, align 8
  %1959 = load i64, i64* %1958, align 8
  %1960 = load i32, i32* %1956, align 4
  %1961 = add nsw i32 %1960, 1
  store i32 %1961, i32* %1956, align 4
  br i1 %1954, label %1971, label %1962

1962:                                             ; preds = %1951
  %1963 = shl nsw i32 %1960, 1
  %1964 = sext i32 %1963 to i64
  %1965 = add i64 %1959, 11
  %1966 = add i64 %1965, %1964
  %1967 = inttoptr i64 %1966 to i16*
  store i16 32, i16* %1967, align 2
  %1968 = load i32, i32* %1956, align 4
  %1969 = load i32, i32* %1957, align 8
  %1970 = icmp eq i32 %1968, %1969
  br i1 %1970, label %1993, label %1995

1971:                                             ; preds = %1951
  %1972 = sext i32 %1960 to i64
  %1973 = add i64 %1959, 11
  %1974 = add i64 %1973, %1972
  %1975 = inttoptr i64 %1974 to i8*
  store i8 32, i8* %1975, align 1
  %1976 = load i32, i32* %1956, align 4
  %1977 = load i32, i32* %1957, align 8
  %1978 = icmp eq i32 %1976, %1977
  br i1 %1978, label %1979, label %1981

1979:                                             ; preds = %1971
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1980 = load i32, i32* %1956, align 4
  br label %1981

1981:                                             ; preds = %1979, %1971
  %1982 = phi i32 [ %1980, %1979 ], [ %1976, %1971 ]
  %1983 = load i64*, i64** %1955, align 8
  %1984 = load i64, i64* %1983, align 8
  %1985 = add nsw i32 %1982, 1
  store i32 %1985, i32* %1956, align 4
  %1986 = sext i32 %1982 to i64
  %1987 = add nsw i64 %1986, 11
  %1988 = add i64 %1987, %1984
  %1989 = inttoptr i64 %1988 to i8*
  store i8 91, i8* %1989, align 1
  %1990 = load i32, i32* %1956, align 4
  %1991 = load i32, i32* %1957, align 8
  %1992 = icmp eq i32 %1990, %1991
  br i1 %1992, label %2426, label %2428

1993:                                             ; preds = %1962
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %1994 = load i32, i32* %1956, align 4
  br label %1995

1995:                                             ; preds = %1993, %1962
  %1996 = phi i32 [ %1994, %1993 ], [ %1968, %1962 ]
  %1997 = load i64*, i64** %1955, align 8
  %1998 = load i64, i64* %1997, align 8
  %1999 = add nsw i32 %1996, 1
  store i32 %1999, i32* %1956, align 4
  %2000 = shl nsw i32 %1996, 1
  %2001 = sext i32 %2000 to i64
  %2002 = add i64 %1998, 11
  %2003 = add i64 %2002, %2001
  %2004 = inttoptr i64 %2003 to i16*
  store i16 91, i16* %2004, align 2
  %2005 = load i32, i32* %1956, align 4
  %2006 = load i32, i32* %1957, align 8
  %2007 = icmp eq i32 %2005, %2006
  br i1 %2007, label %2469, label %2471

2008:                                             ; preds = %2514, %2501, %2468, %2456
  call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* %2, i64* %1694) #6
  %2009 = load i32, i32* %1952, align 8
  %2010 = icmp eq i32 %2009, 0
  %2011 = load i64*, i64** %1955, align 8
  %2012 = load i64, i64* %2011, align 8
  %2013 = load i32, i32* %1956, align 4
  %2014 = add nsw i32 %2013, 1
  store i32 %2014, i32* %1956, align 4
  br i1 %2010, label %2015, label %2024

2015:                                             ; preds = %2008
  %2016 = sext i32 %2013 to i64
  %2017 = add i64 %2012, 11
  %2018 = add i64 %2017, %2016
  %2019 = inttoptr i64 %2018 to i8*
  store i8 93, i8* %2019, align 1
  %2020 = load i32, i32* %1956, align 4
  %2021 = load i32, i32* %1957, align 8
  %2022 = icmp eq i32 %2020, %2021
  br i1 %2022, label %2023, label %2671

2023:                                             ; preds = %2015
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2671

2024:                                             ; preds = %2008
  %2025 = shl nsw i32 %2013, 1
  %2026 = sext i32 %2025 to i64
  %2027 = add i64 %2012, 11
  %2028 = add i64 %2027, %2026
  %2029 = inttoptr i64 %2028 to i16*
  store i16 93, i16* %2029, align 2
  %2030 = load i32, i32* %1956, align 4
  %2031 = load i32, i32* %1957, align 8
  %2032 = icmp eq i32 %2030, %2031
  br i1 %2032, label %2033, label %2671

2033:                                             ; preds = %2024
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2671

2034:                                             ; preds = %1710, %1699, %1692
  %2035 = load i64, i64* %1693, align 8
  %2036 = and i64 %2035, 1
  %2037 = icmp eq i64 %2036, 0
  br i1 %2037, label %2085, label %2038

2038:                                             ; preds = %2034
  %2039 = and i64 %2035, -4294967296
  %2040 = add i64 %2035, -1
  %2041 = inttoptr i64 %2040 to i32*
  %2042 = load atomic i32, i32* %2041 monotonic, align 4
  %2043 = zext i32 %2042 to i64
  %2044 = or i64 %2039, %2043
  %2045 = add i64 %2044, 7
  %2046 = inttoptr i64 %2045 to i16*
  %2047 = load atomic i16, i16* %2046 monotonic, align 2
  %2048 = icmp ult i16 %2047, 64
  br i1 %2048, label %2049, label %2085

2049:                                             ; preds = %2038
  %2050 = add i64 %2035, 7
  %2051 = inttoptr i64 %2050 to i32*
  %2052 = load i32, i32* %2051, align 4
  %2053 = icmp sgt i32 %2052, 0
  br i1 %2053, label %2054, label %2085

2054:                                             ; preds = %2049
  tail call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* %2, i64* %1693) #6
  %2055 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %2056 = load i32, i32* %2055, align 8
  %2057 = icmp eq i32 %2056, 0
  %2058 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %2059 = load i64*, i64** %2058, align 8
  %2060 = load i64, i64* %2059, align 8
  %2061 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %2062 = load i32, i32* %2061, align 4
  %2063 = add nsw i32 %2062, 1
  store i32 %2063, i32* %2061, align 4
  br i1 %2057, label %2064, label %2074

2064:                                             ; preds = %2054
  %2065 = sext i32 %2062 to i64
  %2066 = add i64 %2060, 11
  %2067 = add i64 %2066, %2065
  %2068 = inttoptr i64 %2067 to i8*
  store i8 46, i8* %2068, align 1
  %2069 = load i32, i32* %2061, align 4
  %2070 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %2071 = load i32, i32* %2070, align 8
  %2072 = icmp eq i32 %2069, %2071
  br i1 %2072, label %2073, label %2085

2073:                                             ; preds = %2064
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2085

2074:                                             ; preds = %2054
  %2075 = shl nsw i32 %2062, 1
  %2076 = sext i32 %2075 to i64
  %2077 = add i64 %2060, 11
  %2078 = add i64 %2077, %2076
  %2079 = inttoptr i64 %2078 to i16*
  store i16 46, i16* %2079, align 2
  %2080 = load i32, i32* %2061, align 4
  %2081 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %2082 = load i32, i32* %2081, align 8
  %2083 = icmp eq i32 %2080, %2082
  br i1 %2083, label %2084, label %2085

2084:                                             ; preds = %2074
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2085

2085:                                             ; preds = %2084, %2074, %2073, %2064, %2049, %2038, %2034
  %2086 = load i64, i64* %1694, align 8
  %2087 = and i64 %2086, 1
  %2088 = icmp eq i64 %2087, 0
  br i1 %2088, label %2106, label %2089

2089:                                             ; preds = %2085
  %2090 = and i64 %2086, -4294967296
  %2091 = add i64 %2086, -1
  %2092 = inttoptr i64 %2091 to i32*
  %2093 = load atomic i32, i32* %2092 monotonic, align 4
  %2094 = zext i32 %2093 to i64
  %2095 = or i64 %2090, %2094
  %2096 = add i64 %2095, 7
  %2097 = inttoptr i64 %2096 to i16*
  %2098 = load atomic i16, i16* %2097 monotonic, align 2
  %2099 = icmp ult i16 %2098, 64
  br i1 %2099, label %2100, label %2106

2100:                                             ; preds = %2089
  %2101 = add i64 %2086, 7
  %2102 = inttoptr i64 %2101 to i32*
  %2103 = load i32, i32* %2102, align 4
  %2104 = icmp sgt i32 %2103, 0
  br i1 %2104, label %2105, label %2106

2105:                                             ; preds = %2100
  tail call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* %2, i64* %1694) #6
  br label %2671

2106:                                             ; preds = %2100, %2089, %2085
  %2107 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %2108 = load i32, i32* %2107, align 8
  %2109 = icmp eq i32 %2108, 0
  %2110 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %2111 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %2112 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %2113 = load i64*, i64** %2110, align 8
  %2114 = load i64, i64* %2113, align 8
  %2115 = load i32, i32* %2111, align 4
  %2116 = add nsw i32 %2115, 1
  store i32 %2116, i32* %2111, align 4
  br i1 %2109, label %2126, label %2117

2117:                                             ; preds = %2106
  %2118 = shl nsw i32 %2115, 1
  %2119 = sext i32 %2118 to i64
  %2120 = add i64 %2114, 11
  %2121 = add i64 %2120, %2119
  %2122 = inttoptr i64 %2121 to i16*
  store i16 60, i16* %2122, align 2
  %2123 = load i32, i32* %2111, align 4
  %2124 = load i32, i32* %2112, align 8
  %2125 = icmp eq i32 %2123, %2124
  br i1 %2125, label %2148, label %2150

2126:                                             ; preds = %2106
  %2127 = sext i32 %2115 to i64
  %2128 = add i64 %2114, 11
  %2129 = add i64 %2128, %2127
  %2130 = inttoptr i64 %2129 to i8*
  store i8 60, i8* %2130, align 1
  %2131 = load i32, i32* %2111, align 4
  %2132 = load i32, i32* %2112, align 8
  %2133 = icmp eq i32 %2131, %2132
  br i1 %2133, label %2134, label %2136

2134:                                             ; preds = %2126
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2135 = load i32, i32* %2111, align 4
  br label %2136

2136:                                             ; preds = %2134, %2126
  %2137 = phi i32 [ %2135, %2134 ], [ %2131, %2126 ]
  %2138 = load i64*, i64** %2110, align 8
  %2139 = load i64, i64* %2138, align 8
  %2140 = add nsw i32 %2137, 1
  store i32 %2140, i32* %2111, align 4
  %2141 = sext i32 %2137 to i64
  %2142 = add nsw i64 %2141, 11
  %2143 = add i64 %2142, %2139
  %2144 = inttoptr i64 %2143 to i8*
  store i8 97, i8* %2144, align 1
  %2145 = load i32, i32* %2111, align 4
  %2146 = load i32, i32* %2112, align 8
  %2147 = icmp eq i32 %2145, %2146
  br i1 %2147, label %2163, label %2165

2148:                                             ; preds = %2117
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2149 = load i32, i32* %2111, align 4
  br label %2150

2150:                                             ; preds = %2148, %2117
  %2151 = phi i32 [ %2149, %2148 ], [ %2123, %2117 ]
  %2152 = load i64*, i64** %2110, align 8
  %2153 = load i64, i64* %2152, align 8
  %2154 = add nsw i32 %2151, 1
  store i32 %2154, i32* %2111, align 4
  %2155 = shl nsw i32 %2151, 1
  %2156 = sext i32 %2155 to i64
  %2157 = add i64 %2153, 11
  %2158 = add i64 %2157, %2156
  %2159 = inttoptr i64 %2158 to i16*
  store i16 97, i16* %2159, align 2
  %2160 = load i32, i32* %2111, align 4
  %2161 = load i32, i32* %2112, align 8
  %2162 = icmp eq i32 %2160, %2161
  br i1 %2162, label %2290, label %2292

2163:                                             ; preds = %2136
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2164 = load i32, i32* %2111, align 4
  br label %2165

2165:                                             ; preds = %2163, %2136
  %2166 = phi i32 [ %2164, %2163 ], [ %2145, %2136 ]
  %2167 = load i64*, i64** %2110, align 8
  %2168 = load i64, i64* %2167, align 8
  %2169 = add nsw i32 %2166, 1
  store i32 %2169, i32* %2111, align 4
  %2170 = sext i32 %2166 to i64
  %2171 = add nsw i64 %2170, 11
  %2172 = add i64 %2171, %2168
  %2173 = inttoptr i64 %2172 to i8*
  store i8 110, i8* %2173, align 1
  %2174 = load i32, i32* %2111, align 4
  %2175 = load i32, i32* %2112, align 8
  %2176 = icmp eq i32 %2174, %2175
  br i1 %2176, label %2177, label %2179

2177:                                             ; preds = %2165
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2178 = load i32, i32* %2111, align 4
  br label %2179

2179:                                             ; preds = %2177, %2165
  %2180 = phi i32 [ %2178, %2177 ], [ %2174, %2165 ]
  %2181 = load i64*, i64** %2110, align 8
  %2182 = load i64, i64* %2181, align 8
  %2183 = add nsw i32 %2180, 1
  store i32 %2183, i32* %2111, align 4
  %2184 = sext i32 %2180 to i64
  %2185 = add nsw i64 %2184, 11
  %2186 = add i64 %2185, %2182
  %2187 = inttoptr i64 %2186 to i8*
  store i8 111, i8* %2187, align 1
  %2188 = load i32, i32* %2111, align 4
  %2189 = load i32, i32* %2112, align 8
  %2190 = icmp eq i32 %2188, %2189
  br i1 %2190, label %2191, label %2193

2191:                                             ; preds = %2179
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2192 = load i32, i32* %2111, align 4
  br label %2193

2193:                                             ; preds = %2191, %2179
  %2194 = phi i32 [ %2192, %2191 ], [ %2188, %2179 ]
  %2195 = load i64*, i64** %2110, align 8
  %2196 = load i64, i64* %2195, align 8
  %2197 = add nsw i32 %2194, 1
  store i32 %2197, i32* %2111, align 4
  %2198 = sext i32 %2194 to i64
  %2199 = add nsw i64 %2198, 11
  %2200 = add i64 %2199, %2196
  %2201 = inttoptr i64 %2200 to i8*
  store i8 110, i8* %2201, align 1
  %2202 = load i32, i32* %2111, align 4
  %2203 = load i32, i32* %2112, align 8
  %2204 = icmp eq i32 %2202, %2203
  br i1 %2204, label %2205, label %2207

2205:                                             ; preds = %2193
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2206 = load i32, i32* %2111, align 4
  br label %2207

2207:                                             ; preds = %2205, %2193
  %2208 = phi i32 [ %2206, %2205 ], [ %2202, %2193 ]
  %2209 = load i64*, i64** %2110, align 8
  %2210 = load i64, i64* %2209, align 8
  %2211 = add nsw i32 %2208, 1
  store i32 %2211, i32* %2111, align 4
  %2212 = sext i32 %2208 to i64
  %2213 = add nsw i64 %2212, 11
  %2214 = add i64 %2213, %2210
  %2215 = inttoptr i64 %2214 to i8*
  store i8 121, i8* %2215, align 1
  %2216 = load i32, i32* %2111, align 4
  %2217 = load i32, i32* %2112, align 8
  %2218 = icmp eq i32 %2216, %2217
  br i1 %2218, label %2219, label %2221

2219:                                             ; preds = %2207
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2220 = load i32, i32* %2111, align 4
  br label %2221

2221:                                             ; preds = %2219, %2207
  %2222 = phi i32 [ %2220, %2219 ], [ %2216, %2207 ]
  %2223 = load i64*, i64** %2110, align 8
  %2224 = load i64, i64* %2223, align 8
  %2225 = add nsw i32 %2222, 1
  store i32 %2225, i32* %2111, align 4
  %2226 = sext i32 %2222 to i64
  %2227 = add nsw i64 %2226, 11
  %2228 = add i64 %2227, %2224
  %2229 = inttoptr i64 %2228 to i8*
  store i8 109, i8* %2229, align 1
  %2230 = load i32, i32* %2111, align 4
  %2231 = load i32, i32* %2112, align 8
  %2232 = icmp eq i32 %2230, %2231
  br i1 %2232, label %2233, label %2235

2233:                                             ; preds = %2221
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2234 = load i32, i32* %2111, align 4
  br label %2235

2235:                                             ; preds = %2233, %2221
  %2236 = phi i32 [ %2234, %2233 ], [ %2230, %2221 ]
  %2237 = load i64*, i64** %2110, align 8
  %2238 = load i64, i64* %2237, align 8
  %2239 = add nsw i32 %2236, 1
  store i32 %2239, i32* %2111, align 4
  %2240 = sext i32 %2236 to i64
  %2241 = add nsw i64 %2240, 11
  %2242 = add i64 %2241, %2238
  %2243 = inttoptr i64 %2242 to i8*
  store i8 111, i8* %2243, align 1
  %2244 = load i32, i32* %2111, align 4
  %2245 = load i32, i32* %2112, align 8
  %2246 = icmp eq i32 %2244, %2245
  br i1 %2246, label %2247, label %2249

2247:                                             ; preds = %2235
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2248 = load i32, i32* %2111, align 4
  br label %2249

2249:                                             ; preds = %2247, %2235
  %2250 = phi i32 [ %2248, %2247 ], [ %2244, %2235 ]
  %2251 = load i64*, i64** %2110, align 8
  %2252 = load i64, i64* %2251, align 8
  %2253 = add nsw i32 %2250, 1
  store i32 %2253, i32* %2111, align 4
  %2254 = sext i32 %2250 to i64
  %2255 = add nsw i64 %2254, 11
  %2256 = add i64 %2255, %2252
  %2257 = inttoptr i64 %2256 to i8*
  store i8 117, i8* %2257, align 1
  %2258 = load i32, i32* %2111, align 4
  %2259 = load i32, i32* %2112, align 8
  %2260 = icmp eq i32 %2258, %2259
  br i1 %2260, label %2261, label %2263

2261:                                             ; preds = %2249
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2262 = load i32, i32* %2111, align 4
  br label %2263

2263:                                             ; preds = %2261, %2249
  %2264 = phi i32 [ %2262, %2261 ], [ %2258, %2249 ]
  %2265 = load i64*, i64** %2110, align 8
  %2266 = load i64, i64* %2265, align 8
  %2267 = add nsw i32 %2264, 1
  store i32 %2267, i32* %2111, align 4
  %2268 = sext i32 %2264 to i64
  %2269 = add nsw i64 %2268, 11
  %2270 = add i64 %2269, %2266
  %2271 = inttoptr i64 %2270 to i8*
  store i8 115, i8* %2271, align 1
  %2272 = load i32, i32* %2111, align 4
  %2273 = load i32, i32* %2112, align 8
  %2274 = icmp eq i32 %2272, %2273
  br i1 %2274, label %2275, label %2277

2275:                                             ; preds = %2263
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2276 = load i32, i32* %2111, align 4
  br label %2277

2277:                                             ; preds = %2275, %2263
  %2278 = phi i32 [ %2276, %2275 ], [ %2272, %2263 ]
  %2279 = load i64*, i64** %2110, align 8
  %2280 = load i64, i64* %2279, align 8
  %2281 = add nsw i32 %2278, 1
  store i32 %2281, i32* %2111, align 4
  %2282 = sext i32 %2278 to i64
  %2283 = add nsw i64 %2282, 11
  %2284 = add i64 %2283, %2280
  %2285 = inttoptr i64 %2284 to i8*
  store i8 62, i8* %2285, align 1
  %2286 = load i32, i32* %2111, align 4
  %2287 = load i32, i32* %2112, align 8
  %2288 = icmp eq i32 %2286, %2287
  br i1 %2288, label %2289, label %2671

2289:                                             ; preds = %2277
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2671

2290:                                             ; preds = %2150
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2291 = load i32, i32* %2111, align 4
  br label %2292

2292:                                             ; preds = %2290, %2150
  %2293 = phi i32 [ %2291, %2290 ], [ %2160, %2150 ]
  %2294 = load i64*, i64** %2110, align 8
  %2295 = load i64, i64* %2294, align 8
  %2296 = add nsw i32 %2293, 1
  store i32 %2296, i32* %2111, align 4
  %2297 = shl nsw i32 %2293, 1
  %2298 = sext i32 %2297 to i64
  %2299 = add i64 %2295, 11
  %2300 = add i64 %2299, %2298
  %2301 = inttoptr i64 %2300 to i16*
  store i16 110, i16* %2301, align 2
  %2302 = load i32, i32* %2111, align 4
  %2303 = load i32, i32* %2112, align 8
  %2304 = icmp eq i32 %2302, %2303
  br i1 %2304, label %2305, label %2307

2305:                                             ; preds = %2292
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2306 = load i32, i32* %2111, align 4
  br label %2307

2307:                                             ; preds = %2305, %2292
  %2308 = phi i32 [ %2306, %2305 ], [ %2302, %2292 ]
  %2309 = load i64*, i64** %2110, align 8
  %2310 = load i64, i64* %2309, align 8
  %2311 = add nsw i32 %2308, 1
  store i32 %2311, i32* %2111, align 4
  %2312 = shl nsw i32 %2308, 1
  %2313 = sext i32 %2312 to i64
  %2314 = add i64 %2310, 11
  %2315 = add i64 %2314, %2313
  %2316 = inttoptr i64 %2315 to i16*
  store i16 111, i16* %2316, align 2
  %2317 = load i32, i32* %2111, align 4
  %2318 = load i32, i32* %2112, align 8
  %2319 = icmp eq i32 %2317, %2318
  br i1 %2319, label %2320, label %2322

2320:                                             ; preds = %2307
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2321 = load i32, i32* %2111, align 4
  br label %2322

2322:                                             ; preds = %2320, %2307
  %2323 = phi i32 [ %2321, %2320 ], [ %2317, %2307 ]
  %2324 = load i64*, i64** %2110, align 8
  %2325 = load i64, i64* %2324, align 8
  %2326 = add nsw i32 %2323, 1
  store i32 %2326, i32* %2111, align 4
  %2327 = shl nsw i32 %2323, 1
  %2328 = sext i32 %2327 to i64
  %2329 = add i64 %2325, 11
  %2330 = add i64 %2329, %2328
  %2331 = inttoptr i64 %2330 to i16*
  store i16 110, i16* %2331, align 2
  %2332 = load i32, i32* %2111, align 4
  %2333 = load i32, i32* %2112, align 8
  %2334 = icmp eq i32 %2332, %2333
  br i1 %2334, label %2335, label %2337

2335:                                             ; preds = %2322
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2336 = load i32, i32* %2111, align 4
  br label %2337

2337:                                             ; preds = %2335, %2322
  %2338 = phi i32 [ %2336, %2335 ], [ %2332, %2322 ]
  %2339 = load i64*, i64** %2110, align 8
  %2340 = load i64, i64* %2339, align 8
  %2341 = add nsw i32 %2338, 1
  store i32 %2341, i32* %2111, align 4
  %2342 = shl nsw i32 %2338, 1
  %2343 = sext i32 %2342 to i64
  %2344 = add i64 %2340, 11
  %2345 = add i64 %2344, %2343
  %2346 = inttoptr i64 %2345 to i16*
  store i16 121, i16* %2346, align 2
  %2347 = load i32, i32* %2111, align 4
  %2348 = load i32, i32* %2112, align 8
  %2349 = icmp eq i32 %2347, %2348
  br i1 %2349, label %2350, label %2352

2350:                                             ; preds = %2337
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2351 = load i32, i32* %2111, align 4
  br label %2352

2352:                                             ; preds = %2350, %2337
  %2353 = phi i32 [ %2351, %2350 ], [ %2347, %2337 ]
  %2354 = load i64*, i64** %2110, align 8
  %2355 = load i64, i64* %2354, align 8
  %2356 = add nsw i32 %2353, 1
  store i32 %2356, i32* %2111, align 4
  %2357 = shl nsw i32 %2353, 1
  %2358 = sext i32 %2357 to i64
  %2359 = add i64 %2355, 11
  %2360 = add i64 %2359, %2358
  %2361 = inttoptr i64 %2360 to i16*
  store i16 109, i16* %2361, align 2
  %2362 = load i32, i32* %2111, align 4
  %2363 = load i32, i32* %2112, align 8
  %2364 = icmp eq i32 %2362, %2363
  br i1 %2364, label %2365, label %2367

2365:                                             ; preds = %2352
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2366 = load i32, i32* %2111, align 4
  br label %2367

2367:                                             ; preds = %2365, %2352
  %2368 = phi i32 [ %2366, %2365 ], [ %2362, %2352 ]
  %2369 = load i64*, i64** %2110, align 8
  %2370 = load i64, i64* %2369, align 8
  %2371 = add nsw i32 %2368, 1
  store i32 %2371, i32* %2111, align 4
  %2372 = shl nsw i32 %2368, 1
  %2373 = sext i32 %2372 to i64
  %2374 = add i64 %2370, 11
  %2375 = add i64 %2374, %2373
  %2376 = inttoptr i64 %2375 to i16*
  store i16 111, i16* %2376, align 2
  %2377 = load i32, i32* %2111, align 4
  %2378 = load i32, i32* %2112, align 8
  %2379 = icmp eq i32 %2377, %2378
  br i1 %2379, label %2380, label %2382

2380:                                             ; preds = %2367
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2381 = load i32, i32* %2111, align 4
  br label %2382

2382:                                             ; preds = %2380, %2367
  %2383 = phi i32 [ %2381, %2380 ], [ %2377, %2367 ]
  %2384 = load i64*, i64** %2110, align 8
  %2385 = load i64, i64* %2384, align 8
  %2386 = add nsw i32 %2383, 1
  store i32 %2386, i32* %2111, align 4
  %2387 = shl nsw i32 %2383, 1
  %2388 = sext i32 %2387 to i64
  %2389 = add i64 %2385, 11
  %2390 = add i64 %2389, %2388
  %2391 = inttoptr i64 %2390 to i16*
  store i16 117, i16* %2391, align 2
  %2392 = load i32, i32* %2111, align 4
  %2393 = load i32, i32* %2112, align 8
  %2394 = icmp eq i32 %2392, %2393
  br i1 %2394, label %2395, label %2397

2395:                                             ; preds = %2382
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2396 = load i32, i32* %2111, align 4
  br label %2397

2397:                                             ; preds = %2395, %2382
  %2398 = phi i32 [ %2396, %2395 ], [ %2392, %2382 ]
  %2399 = load i64*, i64** %2110, align 8
  %2400 = load i64, i64* %2399, align 8
  %2401 = add nsw i32 %2398, 1
  store i32 %2401, i32* %2111, align 4
  %2402 = shl nsw i32 %2398, 1
  %2403 = sext i32 %2402 to i64
  %2404 = add i64 %2400, 11
  %2405 = add i64 %2404, %2403
  %2406 = inttoptr i64 %2405 to i16*
  store i16 115, i16* %2406, align 2
  %2407 = load i32, i32* %2111, align 4
  %2408 = load i32, i32* %2112, align 8
  %2409 = icmp eq i32 %2407, %2408
  br i1 %2409, label %2410, label %2412

2410:                                             ; preds = %2397
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2411 = load i32, i32* %2111, align 4
  br label %2412

2412:                                             ; preds = %2410, %2397
  %2413 = phi i32 [ %2411, %2410 ], [ %2407, %2397 ]
  %2414 = load i64*, i64** %2110, align 8
  %2415 = load i64, i64* %2414, align 8
  %2416 = add nsw i32 %2413, 1
  store i32 %2416, i32* %2111, align 4
  %2417 = shl nsw i32 %2413, 1
  %2418 = sext i32 %2417 to i64
  %2419 = add i64 %2415, 11
  %2420 = add i64 %2419, %2418
  %2421 = inttoptr i64 %2420 to i16*
  store i16 62, i16* %2421, align 2
  %2422 = load i32, i32* %2111, align 4
  %2423 = load i32, i32* %2112, align 8
  %2424 = icmp eq i32 %2422, %2423
  br i1 %2424, label %2425, label %2671

2425:                                             ; preds = %2412
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2671

2426:                                             ; preds = %1981
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2427 = load i32, i32* %1956, align 4
  br label %2428

2428:                                             ; preds = %2426, %1981
  %2429 = phi i32 [ %2427, %2426 ], [ %1990, %1981 ]
  %2430 = load i64*, i64** %1955, align 8
  %2431 = load i64, i64* %2430, align 8
  %2432 = add nsw i32 %2429, 1
  store i32 %2432, i32* %1956, align 4
  %2433 = sext i32 %2429 to i64
  %2434 = add nsw i64 %2433, 11
  %2435 = add i64 %2434, %2431
  %2436 = inttoptr i64 %2435 to i8*
  store i8 97, i8* %2436, align 1
  %2437 = load i32, i32* %1956, align 4
  %2438 = load i32, i32* %1957, align 8
  %2439 = icmp eq i32 %2437, %2438
  br i1 %2439, label %2440, label %2442

2440:                                             ; preds = %2428
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2441 = load i32, i32* %1956, align 4
  br label %2442

2442:                                             ; preds = %2440, %2428
  %2443 = phi i32 [ %2441, %2440 ], [ %2437, %2428 ]
  %2444 = load i64*, i64** %1955, align 8
  %2445 = load i64, i64* %2444, align 8
  %2446 = add nsw i32 %2443, 1
  store i32 %2446, i32* %1956, align 4
  %2447 = sext i32 %2443 to i64
  %2448 = add nsw i64 %2447, 11
  %2449 = add i64 %2448, %2445
  %2450 = inttoptr i64 %2449 to i8*
  store i8 115, i8* %2450, align 1
  %2451 = load i32, i32* %1956, align 4
  %2452 = load i32, i32* %1957, align 8
  %2453 = icmp eq i32 %2451, %2452
  br i1 %2453, label %2454, label %2456

2454:                                             ; preds = %2442
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2455 = load i32, i32* %1956, align 4
  br label %2456

2456:                                             ; preds = %2454, %2442
  %2457 = phi i32 [ %2455, %2454 ], [ %2451, %2442 ]
  %2458 = load i64*, i64** %1955, align 8
  %2459 = load i64, i64* %2458, align 8
  %2460 = add nsw i32 %2457, 1
  store i32 %2460, i32* %1956, align 4
  %2461 = sext i32 %2457 to i64
  %2462 = add nsw i64 %2461, 11
  %2463 = add i64 %2462, %2459
  %2464 = inttoptr i64 %2463 to i8*
  store i8 32, i8* %2464, align 1
  %2465 = load i32, i32* %1956, align 4
  %2466 = load i32, i32* %1957, align 8
  %2467 = icmp eq i32 %2465, %2466
  br i1 %2467, label %2468, label %2008

2468:                                             ; preds = %2456
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2008

2469:                                             ; preds = %1995
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2470 = load i32, i32* %1956, align 4
  br label %2471

2471:                                             ; preds = %2469, %1995
  %2472 = phi i32 [ %2470, %2469 ], [ %2005, %1995 ]
  %2473 = load i64*, i64** %1955, align 8
  %2474 = load i64, i64* %2473, align 8
  %2475 = add nsw i32 %2472, 1
  store i32 %2475, i32* %1956, align 4
  %2476 = shl nsw i32 %2472, 1
  %2477 = sext i32 %2476 to i64
  %2478 = add i64 %2474, 11
  %2479 = add i64 %2478, %2477
  %2480 = inttoptr i64 %2479 to i16*
  store i16 97, i16* %2480, align 2
  %2481 = load i32, i32* %1956, align 4
  %2482 = load i32, i32* %1957, align 8
  %2483 = icmp eq i32 %2481, %2482
  br i1 %2483, label %2484, label %2486

2484:                                             ; preds = %2471
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2485 = load i32, i32* %1956, align 4
  br label %2486

2486:                                             ; preds = %2484, %2471
  %2487 = phi i32 [ %2485, %2484 ], [ %2481, %2471 ]
  %2488 = load i64*, i64** %1955, align 8
  %2489 = load i64, i64* %2488, align 8
  %2490 = add nsw i32 %2487, 1
  store i32 %2490, i32* %1956, align 4
  %2491 = shl nsw i32 %2487, 1
  %2492 = sext i32 %2491 to i64
  %2493 = add i64 %2489, 11
  %2494 = add i64 %2493, %2492
  %2495 = inttoptr i64 %2494 to i16*
  store i16 115, i16* %2495, align 2
  %2496 = load i32, i32* %1956, align 4
  %2497 = load i32, i32* %1957, align 8
  %2498 = icmp eq i32 %2496, %2497
  br i1 %2498, label %2499, label %2501

2499:                                             ; preds = %2486
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2500 = load i32, i32* %1956, align 4
  br label %2501

2501:                                             ; preds = %2499, %2486
  %2502 = phi i32 [ %2500, %2499 ], [ %2496, %2486 ]
  %2503 = load i64*, i64** %1955, align 8
  %2504 = load i64, i64* %2503, align 8
  %2505 = add nsw i32 %2502, 1
  store i32 %2505, i32* %1956, align 4
  %2506 = shl nsw i32 %2502, 1
  %2507 = sext i32 %2506 to i64
  %2508 = add i64 %2504, 11
  %2509 = add i64 %2508, %2507
  %2510 = inttoptr i64 %2509 to i16*
  store i16 32, i16* %2510, align 2
  %2511 = load i32, i32* %1956, align 4
  %2512 = load i32, i32* %1957, align 8
  %2513 = icmp eq i32 %2511, %2512
  br i1 %2513, label %2514, label %2008

2514:                                             ; preds = %2501
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2008

2515:                                             ; preds = %1689, %1684, %1678, %1651, %1637
  %2516 = and i32 %1638, 16
  %2517 = icmp eq i32 %2516, 0
  br i1 %2517, label %2649, label %2518

2518:                                             ; preds = %2515
  %2519 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %2520 = load i32, i32* %2519, align 8
  %2521 = icmp eq i32 %2520, 0
  %2522 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %2523 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %2524 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %2525 = load i64*, i64** %2522, align 8
  %2526 = load i64, i64* %2525, align 8
  %2527 = load i32, i32* %2523, align 4
  %2528 = add nsw i32 %2527, 1
  store i32 %2528, i32* %2523, align 4
  br i1 %2521, label %2538, label %2529

2529:                                             ; preds = %2518
  %2530 = shl nsw i32 %2527, 1
  %2531 = sext i32 %2530 to i64
  %2532 = add i64 %2526, 11
  %2533 = add i64 %2532, %2531
  %2534 = inttoptr i64 %2533 to i16*
  store i16 110, i16* %2534, align 2
  %2535 = load i32, i32* %2523, align 4
  %2536 = load i32, i32* %2524, align 8
  %2537 = icmp eq i32 %2535, %2536
  br i1 %2537, label %2560, label %2562

2538:                                             ; preds = %2518
  %2539 = sext i32 %2527 to i64
  %2540 = add i64 %2526, 11
  %2541 = add i64 %2540, %2539
  %2542 = inttoptr i64 %2541 to i8*
  store i8 110, i8* %2542, align 1
  %2543 = load i32, i32* %2523, align 4
  %2544 = load i32, i32* %2524, align 8
  %2545 = icmp eq i32 %2543, %2544
  br i1 %2545, label %2546, label %2548

2546:                                             ; preds = %2538
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2547 = load i32, i32* %2523, align 4
  br label %2548

2548:                                             ; preds = %2546, %2538
  %2549 = phi i32 [ %2547, %2546 ], [ %2543, %2538 ]
  %2550 = load i64*, i64** %2522, align 8
  %2551 = load i64, i64* %2550, align 8
  %2552 = add nsw i32 %2549, 1
  store i32 %2552, i32* %2523, align 4
  %2553 = sext i32 %2549 to i64
  %2554 = add nsw i64 %2553, 11
  %2555 = add i64 %2554, %2551
  %2556 = inttoptr i64 %2555 to i8*
  store i8 101, i8* %2556, align 1
  %2557 = load i32, i32* %2523, align 4
  %2558 = load i32, i32* %2524, align 8
  %2559 = icmp eq i32 %2557, %2558
  br i1 %2559, label %3019, label %3021

2560:                                             ; preds = %2529
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2561 = load i32, i32* %2523, align 4
  br label %2562

2562:                                             ; preds = %2560, %2529
  %2563 = phi i32 [ %2561, %2560 ], [ %2535, %2529 ]
  %2564 = load i64*, i64** %2522, align 8
  %2565 = load i64, i64* %2564, align 8
  %2566 = add nsw i32 %2563, 1
  store i32 %2566, i32* %2523, align 4
  %2567 = shl nsw i32 %2563, 1
  %2568 = sext i32 %2567 to i64
  %2569 = add i64 %2565, 11
  %2570 = add i64 %2569, %2568
  %2571 = inttoptr i64 %2570 to i16*
  store i16 101, i16* %2571, align 2
  %2572 = load i32, i32* %2523, align 4
  %2573 = load i32, i32* %2524, align 8
  %2574 = icmp eq i32 %2572, %2573
  br i1 %2574, label %3048, label %3050

2575:                                             ; preds = %3078, %3065, %3047, %3035
  %2576 = load i64, i64* %1316, align 8
  %2577 = and i64 %2576, 1
  %2578 = icmp eq i64 %2577, 0
  br i1 %2578, label %2596, label %2579

2579:                                             ; preds = %2575
  %2580 = and i64 %2576, -4294967296
  %2581 = add i64 %2576, -1
  %2582 = inttoptr i64 %2581 to i32*
  %2583 = load atomic i32, i32* %2582 monotonic, align 4
  %2584 = zext i32 %2583 to i64
  %2585 = or i64 %2580, %2584
  %2586 = add i64 %2585, 7
  %2587 = inttoptr i64 %2586 to i16*
  %2588 = load atomic i16, i16* %2587 monotonic, align 2
  %2589 = icmp ult i16 %2588, 64
  br i1 %2589, label %2590, label %2596

2590:                                             ; preds = %2579
  %2591 = add i64 %2576, 7
  %2592 = inttoptr i64 %2591 to i32*
  %2593 = load i32, i32* %2592, align 4
  %2594 = icmp sgt i32 %2593, 0
  br i1 %2594, label %2595, label %2596

2595:                                             ; preds = %2590
  tail call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* %2, i64* %1316) #6
  br label %2671

2596:                                             ; preds = %2590, %2579, %2575
  %2597 = load i32, i32* %2519, align 8
  %2598 = icmp eq i32 %2597, 0
  %2599 = load i64*, i64** %2522, align 8
  %2600 = load i64, i64* %2599, align 8
  %2601 = load i32, i32* %2523, align 4
  %2602 = add nsw i32 %2601, 1
  store i32 %2602, i32* %2523, align 4
  br i1 %2598, label %2612, label %2603

2603:                                             ; preds = %2596
  %2604 = shl nsw i32 %2601, 1
  %2605 = sext i32 %2604 to i64
  %2606 = add i64 %2600, 11
  %2607 = add i64 %2606, %2605
  %2608 = inttoptr i64 %2607 to i16*
  store i16 60, i16* %2608, align 2
  %2609 = load i32, i32* %2523, align 4
  %2610 = load i32, i32* %2524, align 8
  %2611 = icmp eq i32 %2609, %2610
  br i1 %2611, label %2634, label %2636

2612:                                             ; preds = %2596
  %2613 = sext i32 %2601 to i64
  %2614 = add i64 %2600, 11
  %2615 = add i64 %2614, %2613
  %2616 = inttoptr i64 %2615 to i8*
  store i8 60, i8* %2616, align 1
  %2617 = load i32, i32* %2523, align 4
  %2618 = load i32, i32* %2524, align 8
  %2619 = icmp eq i32 %2617, %2618
  br i1 %2619, label %2620, label %2622

2620:                                             ; preds = %2612
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2621 = load i32, i32* %2523, align 4
  br label %2622

2622:                                             ; preds = %2620, %2612
  %2623 = phi i32 [ %2621, %2620 ], [ %2617, %2612 ]
  %2624 = load i64*, i64** %2522, align 8
  %2625 = load i64, i64* %2624, align 8
  %2626 = add nsw i32 %2623, 1
  store i32 %2626, i32* %2523, align 4
  %2627 = sext i32 %2623 to i64
  %2628 = add nsw i64 %2627, 11
  %2629 = add i64 %2628, %2625
  %2630 = inttoptr i64 %2629 to i8*
  store i8 97, i8* %2630, align 1
  %2631 = load i32, i32* %2523, align 4
  %2632 = load i32, i32* %2524, align 8
  %2633 = icmp eq i32 %2631, %2632
  br i1 %2633, label %2756, label %2758

2634:                                             ; preds = %2603
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2635 = load i32, i32* %2523, align 4
  br label %2636

2636:                                             ; preds = %2634, %2603
  %2637 = phi i32 [ %2635, %2634 ], [ %2609, %2603 ]
  %2638 = load i64*, i64** %2522, align 8
  %2639 = load i64, i64* %2638, align 8
  %2640 = add nsw i32 %2637, 1
  store i32 %2640, i32* %2523, align 4
  %2641 = shl nsw i32 %2637, 1
  %2642 = sext i32 %2641 to i64
  %2643 = add i64 %2639, 11
  %2644 = add i64 %2643, %2642
  %2645 = inttoptr i64 %2644 to i16*
  store i16 97, i16* %2645, align 2
  %2646 = load i32, i32* %2523, align 4
  %2647 = load i32, i32* %2524, align 8
  %2648 = icmp eq i32 %2646, %2647
  br i1 %2648, label %2883, label %2885

2649:                                             ; preds = %2515
  %2650 = load i64, i64* %1316, align 8
  %2651 = and i64 %2650, 1
  %2652 = icmp eq i64 %2651, 0
  br i1 %2652, label %2670, label %2653

2653:                                             ; preds = %2649
  %2654 = and i64 %2650, -4294967296
  %2655 = add i64 %2650, -1
  %2656 = inttoptr i64 %2655 to i32*
  %2657 = load atomic i32, i32* %2656 monotonic, align 4
  %2658 = zext i32 %2657 to i64
  %2659 = or i64 %2654, %2658
  %2660 = add i64 %2659, 7
  %2661 = inttoptr i64 %2660 to i16*
  %2662 = load atomic i16, i16* %2661 monotonic, align 2
  %2663 = icmp ult i16 %2662, 64
  br i1 %2663, label %2664, label %2670

2664:                                             ; preds = %2653
  %2665 = add i64 %2650, 7
  %2666 = inttoptr i64 %2665 to i32*
  %2667 = load i32, i32* %2666, align 4
  %2668 = icmp sgt i32 %2667, 0
  br i1 %2668, label %2669, label %2670

2669:                                             ; preds = %2664
  tail call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* %2, i64* %1316) #6
  br label %2671

2670:                                             ; preds = %2664, %2653, %2649
  tail call fastcc void @_ZN2v88internal12_GLOBAL__N_118AppendFileLocationEPNS0_7IsolateENS0_6HandleINS0_14StackFrameInfoEEEPNS0_24IncrementalStringBuilderE(%"class.v8::internal::Isolate"* %0, i64* %1, %"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %3549

2671:                                             ; preds = %3018, %3005, %2882, %2870, %2669, %2595, %2425, %2412, %2289, %2277, %2105, %2033, %2024, %2023, %2015, %1933, %1821, %1798, %1786, %1775, %1771
  %2672 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %2673 = load i32, i32* %2672, align 8
  %2674 = icmp eq i32 %2673, 0
  %2675 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %2676 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %2677 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %2678 = load i64*, i64** %2675, align 8
  %2679 = load i64, i64* %2678, align 8
  %2680 = load i32, i32* %2676, align 4
  %2681 = add nsw i32 %2680, 1
  store i32 %2681, i32* %2676, align 4
  br i1 %2674, label %2691, label %2682

2682:                                             ; preds = %2671
  %2683 = shl nsw i32 %2680, 1
  %2684 = sext i32 %2683 to i64
  %2685 = add i64 %2679, 11
  %2686 = add i64 %2685, %2684
  %2687 = inttoptr i64 %2686 to i16*
  store i16 32, i16* %2687, align 2
  %2688 = load i32, i32* %2676, align 4
  %2689 = load i32, i32* %2677, align 8
  %2690 = icmp eq i32 %2688, %2689
  br i1 %2690, label %2713, label %2715

2691:                                             ; preds = %2671
  %2692 = sext i32 %2680 to i64
  %2693 = add i64 %2679, 11
  %2694 = add i64 %2693, %2692
  %2695 = inttoptr i64 %2694 to i8*
  store i8 32, i8* %2695, align 1
  %2696 = load i32, i32* %2676, align 4
  %2697 = load i32, i32* %2677, align 8
  %2698 = icmp eq i32 %2696, %2697
  br i1 %2698, label %2699, label %2701

2699:                                             ; preds = %2691
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2700 = load i32, i32* %2676, align 4
  br label %2701

2701:                                             ; preds = %2699, %2691
  %2702 = phi i32 [ %2700, %2699 ], [ %2696, %2691 ]
  %2703 = load i64*, i64** %2675, align 8
  %2704 = load i64, i64* %2703, align 8
  %2705 = add nsw i32 %2702, 1
  store i32 %2705, i32* %2676, align 4
  %2706 = sext i32 %2702 to i64
  %2707 = add nsw i64 %2706, 11
  %2708 = add i64 %2707, %2704
  %2709 = inttoptr i64 %2708 to i8*
  store i8 40, i8* %2709, align 1
  %2710 = load i32, i32* %2676, align 4
  %2711 = load i32, i32* %2677, align 8
  %2712 = icmp eq i32 %2710, %2711
  br i1 %2712, label %2754, label %2728

2713:                                             ; preds = %2682
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2714 = load i32, i32* %2676, align 4
  br label %2715

2715:                                             ; preds = %2713, %2682
  %2716 = phi i32 [ %2714, %2713 ], [ %2688, %2682 ]
  %2717 = load i64*, i64** %2675, align 8
  %2718 = load i64, i64* %2717, align 8
  %2719 = add nsw i32 %2716, 1
  store i32 %2719, i32* %2676, align 4
  %2720 = shl nsw i32 %2716, 1
  %2721 = sext i32 %2720 to i64
  %2722 = add i64 %2718, 11
  %2723 = add i64 %2722, %2721
  %2724 = inttoptr i64 %2723 to i16*
  store i16 40, i16* %2724, align 2
  %2725 = load i32, i32* %2676, align 4
  %2726 = load i32, i32* %2677, align 8
  %2727 = icmp eq i32 %2725, %2726
  br i1 %2727, label %2755, label %2728

2728:                                             ; preds = %2755, %2754, %2715, %2701
  call fastcc void @_ZN2v88internal12_GLOBAL__N_118AppendFileLocationEPNS0_7IsolateENS0_6HandleINS0_14StackFrameInfoEEEPNS0_24IncrementalStringBuilderE(%"class.v8::internal::Isolate"* %0, i64* %1, %"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2729 = load i32, i32* %2672, align 8
  %2730 = icmp eq i32 %2729, 0
  %2731 = load i64*, i64** %2675, align 8
  %2732 = load i64, i64* %2731, align 8
  %2733 = load i32, i32* %2676, align 4
  %2734 = add nsw i32 %2733, 1
  store i32 %2734, i32* %2676, align 4
  br i1 %2730, label %2744, label %2735

2735:                                             ; preds = %2728
  %2736 = shl nsw i32 %2733, 1
  %2737 = sext i32 %2736 to i64
  %2738 = add i64 %2732, 11
  %2739 = add i64 %2738, %2737
  %2740 = inttoptr i64 %2739 to i16*
  store i16 41, i16* %2740, align 2
  %2741 = load i32, i32* %2676, align 4
  %2742 = load i32, i32* %2677, align 8
  %2743 = icmp eq i32 %2741, %2742
  br i1 %2743, label %2753, label %3549

2744:                                             ; preds = %2728
  %2745 = sext i32 %2733 to i64
  %2746 = add i64 %2732, 11
  %2747 = add i64 %2746, %2745
  %2748 = inttoptr i64 %2747 to i8*
  store i8 41, i8* %2748, align 1
  %2749 = load i32, i32* %2676, align 4
  %2750 = load i32, i32* %2677, align 8
  %2751 = icmp eq i32 %2749, %2750
  br i1 %2751, label %2752, label %3549

2752:                                             ; preds = %2744
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %3549

2753:                                             ; preds = %2735
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %3549

2754:                                             ; preds = %2701
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2728

2755:                                             ; preds = %2715
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2728

2756:                                             ; preds = %2622
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2757 = load i32, i32* %2523, align 4
  br label %2758

2758:                                             ; preds = %2756, %2622
  %2759 = phi i32 [ %2757, %2756 ], [ %2631, %2622 ]
  %2760 = load i64*, i64** %2522, align 8
  %2761 = load i64, i64* %2760, align 8
  %2762 = add nsw i32 %2759, 1
  store i32 %2762, i32* %2523, align 4
  %2763 = sext i32 %2759 to i64
  %2764 = add nsw i64 %2763, 11
  %2765 = add i64 %2764, %2761
  %2766 = inttoptr i64 %2765 to i8*
  store i8 110, i8* %2766, align 1
  %2767 = load i32, i32* %2523, align 4
  %2768 = load i32, i32* %2524, align 8
  %2769 = icmp eq i32 %2767, %2768
  br i1 %2769, label %2770, label %2772

2770:                                             ; preds = %2758
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2771 = load i32, i32* %2523, align 4
  br label %2772

2772:                                             ; preds = %2770, %2758
  %2773 = phi i32 [ %2771, %2770 ], [ %2767, %2758 ]
  %2774 = load i64*, i64** %2522, align 8
  %2775 = load i64, i64* %2774, align 8
  %2776 = add nsw i32 %2773, 1
  store i32 %2776, i32* %2523, align 4
  %2777 = sext i32 %2773 to i64
  %2778 = add nsw i64 %2777, 11
  %2779 = add i64 %2778, %2775
  %2780 = inttoptr i64 %2779 to i8*
  store i8 111, i8* %2780, align 1
  %2781 = load i32, i32* %2523, align 4
  %2782 = load i32, i32* %2524, align 8
  %2783 = icmp eq i32 %2781, %2782
  br i1 %2783, label %2784, label %2786

2784:                                             ; preds = %2772
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2785 = load i32, i32* %2523, align 4
  br label %2786

2786:                                             ; preds = %2784, %2772
  %2787 = phi i32 [ %2785, %2784 ], [ %2781, %2772 ]
  %2788 = load i64*, i64** %2522, align 8
  %2789 = load i64, i64* %2788, align 8
  %2790 = add nsw i32 %2787, 1
  store i32 %2790, i32* %2523, align 4
  %2791 = sext i32 %2787 to i64
  %2792 = add nsw i64 %2791, 11
  %2793 = add i64 %2792, %2789
  %2794 = inttoptr i64 %2793 to i8*
  store i8 110, i8* %2794, align 1
  %2795 = load i32, i32* %2523, align 4
  %2796 = load i32, i32* %2524, align 8
  %2797 = icmp eq i32 %2795, %2796
  br i1 %2797, label %2798, label %2800

2798:                                             ; preds = %2786
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2799 = load i32, i32* %2523, align 4
  br label %2800

2800:                                             ; preds = %2798, %2786
  %2801 = phi i32 [ %2799, %2798 ], [ %2795, %2786 ]
  %2802 = load i64*, i64** %2522, align 8
  %2803 = load i64, i64* %2802, align 8
  %2804 = add nsw i32 %2801, 1
  store i32 %2804, i32* %2523, align 4
  %2805 = sext i32 %2801 to i64
  %2806 = add nsw i64 %2805, 11
  %2807 = add i64 %2806, %2803
  %2808 = inttoptr i64 %2807 to i8*
  store i8 121, i8* %2808, align 1
  %2809 = load i32, i32* %2523, align 4
  %2810 = load i32, i32* %2524, align 8
  %2811 = icmp eq i32 %2809, %2810
  br i1 %2811, label %2812, label %2814

2812:                                             ; preds = %2800
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2813 = load i32, i32* %2523, align 4
  br label %2814

2814:                                             ; preds = %2812, %2800
  %2815 = phi i32 [ %2813, %2812 ], [ %2809, %2800 ]
  %2816 = load i64*, i64** %2522, align 8
  %2817 = load i64, i64* %2816, align 8
  %2818 = add nsw i32 %2815, 1
  store i32 %2818, i32* %2523, align 4
  %2819 = sext i32 %2815 to i64
  %2820 = add nsw i64 %2819, 11
  %2821 = add i64 %2820, %2817
  %2822 = inttoptr i64 %2821 to i8*
  store i8 109, i8* %2822, align 1
  %2823 = load i32, i32* %2523, align 4
  %2824 = load i32, i32* %2524, align 8
  %2825 = icmp eq i32 %2823, %2824
  br i1 %2825, label %2826, label %2828

2826:                                             ; preds = %2814
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2827 = load i32, i32* %2523, align 4
  br label %2828

2828:                                             ; preds = %2826, %2814
  %2829 = phi i32 [ %2827, %2826 ], [ %2823, %2814 ]
  %2830 = load i64*, i64** %2522, align 8
  %2831 = load i64, i64* %2830, align 8
  %2832 = add nsw i32 %2829, 1
  store i32 %2832, i32* %2523, align 4
  %2833 = sext i32 %2829 to i64
  %2834 = add nsw i64 %2833, 11
  %2835 = add i64 %2834, %2831
  %2836 = inttoptr i64 %2835 to i8*
  store i8 111, i8* %2836, align 1
  %2837 = load i32, i32* %2523, align 4
  %2838 = load i32, i32* %2524, align 8
  %2839 = icmp eq i32 %2837, %2838
  br i1 %2839, label %2840, label %2842

2840:                                             ; preds = %2828
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2841 = load i32, i32* %2523, align 4
  br label %2842

2842:                                             ; preds = %2840, %2828
  %2843 = phi i32 [ %2841, %2840 ], [ %2837, %2828 ]
  %2844 = load i64*, i64** %2522, align 8
  %2845 = load i64, i64* %2844, align 8
  %2846 = add nsw i32 %2843, 1
  store i32 %2846, i32* %2523, align 4
  %2847 = sext i32 %2843 to i64
  %2848 = add nsw i64 %2847, 11
  %2849 = add i64 %2848, %2845
  %2850 = inttoptr i64 %2849 to i8*
  store i8 117, i8* %2850, align 1
  %2851 = load i32, i32* %2523, align 4
  %2852 = load i32, i32* %2524, align 8
  %2853 = icmp eq i32 %2851, %2852
  br i1 %2853, label %2854, label %2856

2854:                                             ; preds = %2842
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2855 = load i32, i32* %2523, align 4
  br label %2856

2856:                                             ; preds = %2854, %2842
  %2857 = phi i32 [ %2855, %2854 ], [ %2851, %2842 ]
  %2858 = load i64*, i64** %2522, align 8
  %2859 = load i64, i64* %2858, align 8
  %2860 = add nsw i32 %2857, 1
  store i32 %2860, i32* %2523, align 4
  %2861 = sext i32 %2857 to i64
  %2862 = add nsw i64 %2861, 11
  %2863 = add i64 %2862, %2859
  %2864 = inttoptr i64 %2863 to i8*
  store i8 115, i8* %2864, align 1
  %2865 = load i32, i32* %2523, align 4
  %2866 = load i32, i32* %2524, align 8
  %2867 = icmp eq i32 %2865, %2866
  br i1 %2867, label %2868, label %2870

2868:                                             ; preds = %2856
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2869 = load i32, i32* %2523, align 4
  br label %2870

2870:                                             ; preds = %2868, %2856
  %2871 = phi i32 [ %2869, %2868 ], [ %2865, %2856 ]
  %2872 = load i64*, i64** %2522, align 8
  %2873 = load i64, i64* %2872, align 8
  %2874 = add nsw i32 %2871, 1
  store i32 %2874, i32* %2523, align 4
  %2875 = sext i32 %2871 to i64
  %2876 = add nsw i64 %2875, 11
  %2877 = add i64 %2876, %2873
  %2878 = inttoptr i64 %2877 to i8*
  store i8 62, i8* %2878, align 1
  %2879 = load i32, i32* %2523, align 4
  %2880 = load i32, i32* %2524, align 8
  %2881 = icmp eq i32 %2879, %2880
  br i1 %2881, label %2882, label %2671

2882:                                             ; preds = %2870
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2671

2883:                                             ; preds = %2636
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2884 = load i32, i32* %2523, align 4
  br label %2885

2885:                                             ; preds = %2883, %2636
  %2886 = phi i32 [ %2884, %2883 ], [ %2646, %2636 ]
  %2887 = load i64*, i64** %2522, align 8
  %2888 = load i64, i64* %2887, align 8
  %2889 = add nsw i32 %2886, 1
  store i32 %2889, i32* %2523, align 4
  %2890 = shl nsw i32 %2886, 1
  %2891 = sext i32 %2890 to i64
  %2892 = add i64 %2888, 11
  %2893 = add i64 %2892, %2891
  %2894 = inttoptr i64 %2893 to i16*
  store i16 110, i16* %2894, align 2
  %2895 = load i32, i32* %2523, align 4
  %2896 = load i32, i32* %2524, align 8
  %2897 = icmp eq i32 %2895, %2896
  br i1 %2897, label %2898, label %2900

2898:                                             ; preds = %2885
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2899 = load i32, i32* %2523, align 4
  br label %2900

2900:                                             ; preds = %2898, %2885
  %2901 = phi i32 [ %2899, %2898 ], [ %2895, %2885 ]
  %2902 = load i64*, i64** %2522, align 8
  %2903 = load i64, i64* %2902, align 8
  %2904 = add nsw i32 %2901, 1
  store i32 %2904, i32* %2523, align 4
  %2905 = shl nsw i32 %2901, 1
  %2906 = sext i32 %2905 to i64
  %2907 = add i64 %2903, 11
  %2908 = add i64 %2907, %2906
  %2909 = inttoptr i64 %2908 to i16*
  store i16 111, i16* %2909, align 2
  %2910 = load i32, i32* %2523, align 4
  %2911 = load i32, i32* %2524, align 8
  %2912 = icmp eq i32 %2910, %2911
  br i1 %2912, label %2913, label %2915

2913:                                             ; preds = %2900
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2914 = load i32, i32* %2523, align 4
  br label %2915

2915:                                             ; preds = %2913, %2900
  %2916 = phi i32 [ %2914, %2913 ], [ %2910, %2900 ]
  %2917 = load i64*, i64** %2522, align 8
  %2918 = load i64, i64* %2917, align 8
  %2919 = add nsw i32 %2916, 1
  store i32 %2919, i32* %2523, align 4
  %2920 = shl nsw i32 %2916, 1
  %2921 = sext i32 %2920 to i64
  %2922 = add i64 %2918, 11
  %2923 = add i64 %2922, %2921
  %2924 = inttoptr i64 %2923 to i16*
  store i16 110, i16* %2924, align 2
  %2925 = load i32, i32* %2523, align 4
  %2926 = load i32, i32* %2524, align 8
  %2927 = icmp eq i32 %2925, %2926
  br i1 %2927, label %2928, label %2930

2928:                                             ; preds = %2915
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2929 = load i32, i32* %2523, align 4
  br label %2930

2930:                                             ; preds = %2928, %2915
  %2931 = phi i32 [ %2929, %2928 ], [ %2925, %2915 ]
  %2932 = load i64*, i64** %2522, align 8
  %2933 = load i64, i64* %2932, align 8
  %2934 = add nsw i32 %2931, 1
  store i32 %2934, i32* %2523, align 4
  %2935 = shl nsw i32 %2931, 1
  %2936 = sext i32 %2935 to i64
  %2937 = add i64 %2933, 11
  %2938 = add i64 %2937, %2936
  %2939 = inttoptr i64 %2938 to i16*
  store i16 121, i16* %2939, align 2
  %2940 = load i32, i32* %2523, align 4
  %2941 = load i32, i32* %2524, align 8
  %2942 = icmp eq i32 %2940, %2941
  br i1 %2942, label %2943, label %2945

2943:                                             ; preds = %2930
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2944 = load i32, i32* %2523, align 4
  br label %2945

2945:                                             ; preds = %2943, %2930
  %2946 = phi i32 [ %2944, %2943 ], [ %2940, %2930 ]
  %2947 = load i64*, i64** %2522, align 8
  %2948 = load i64, i64* %2947, align 8
  %2949 = add nsw i32 %2946, 1
  store i32 %2949, i32* %2523, align 4
  %2950 = shl nsw i32 %2946, 1
  %2951 = sext i32 %2950 to i64
  %2952 = add i64 %2948, 11
  %2953 = add i64 %2952, %2951
  %2954 = inttoptr i64 %2953 to i16*
  store i16 109, i16* %2954, align 2
  %2955 = load i32, i32* %2523, align 4
  %2956 = load i32, i32* %2524, align 8
  %2957 = icmp eq i32 %2955, %2956
  br i1 %2957, label %2958, label %2960

2958:                                             ; preds = %2945
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2959 = load i32, i32* %2523, align 4
  br label %2960

2960:                                             ; preds = %2958, %2945
  %2961 = phi i32 [ %2959, %2958 ], [ %2955, %2945 ]
  %2962 = load i64*, i64** %2522, align 8
  %2963 = load i64, i64* %2962, align 8
  %2964 = add nsw i32 %2961, 1
  store i32 %2964, i32* %2523, align 4
  %2965 = shl nsw i32 %2961, 1
  %2966 = sext i32 %2965 to i64
  %2967 = add i64 %2963, 11
  %2968 = add i64 %2967, %2966
  %2969 = inttoptr i64 %2968 to i16*
  store i16 111, i16* %2969, align 2
  %2970 = load i32, i32* %2523, align 4
  %2971 = load i32, i32* %2524, align 8
  %2972 = icmp eq i32 %2970, %2971
  br i1 %2972, label %2973, label %2975

2973:                                             ; preds = %2960
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2974 = load i32, i32* %2523, align 4
  br label %2975

2975:                                             ; preds = %2973, %2960
  %2976 = phi i32 [ %2974, %2973 ], [ %2970, %2960 ]
  %2977 = load i64*, i64** %2522, align 8
  %2978 = load i64, i64* %2977, align 8
  %2979 = add nsw i32 %2976, 1
  store i32 %2979, i32* %2523, align 4
  %2980 = shl nsw i32 %2976, 1
  %2981 = sext i32 %2980 to i64
  %2982 = add i64 %2978, 11
  %2983 = add i64 %2982, %2981
  %2984 = inttoptr i64 %2983 to i16*
  store i16 117, i16* %2984, align 2
  %2985 = load i32, i32* %2523, align 4
  %2986 = load i32, i32* %2524, align 8
  %2987 = icmp eq i32 %2985, %2986
  br i1 %2987, label %2988, label %2990

2988:                                             ; preds = %2975
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %2989 = load i32, i32* %2523, align 4
  br label %2990

2990:                                             ; preds = %2988, %2975
  %2991 = phi i32 [ %2989, %2988 ], [ %2985, %2975 ]
  %2992 = load i64*, i64** %2522, align 8
  %2993 = load i64, i64* %2992, align 8
  %2994 = add nsw i32 %2991, 1
  store i32 %2994, i32* %2523, align 4
  %2995 = shl nsw i32 %2991, 1
  %2996 = sext i32 %2995 to i64
  %2997 = add i64 %2993, 11
  %2998 = add i64 %2997, %2996
  %2999 = inttoptr i64 %2998 to i16*
  store i16 115, i16* %2999, align 2
  %3000 = load i32, i32* %2523, align 4
  %3001 = load i32, i32* %2524, align 8
  %3002 = icmp eq i32 %3000, %3001
  br i1 %3002, label %3003, label %3005

3003:                                             ; preds = %2990
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3004 = load i32, i32* %2523, align 4
  br label %3005

3005:                                             ; preds = %3003, %2990
  %3006 = phi i32 [ %3004, %3003 ], [ %3000, %2990 ]
  %3007 = load i64*, i64** %2522, align 8
  %3008 = load i64, i64* %3007, align 8
  %3009 = add nsw i32 %3006, 1
  store i32 %3009, i32* %2523, align 4
  %3010 = shl nsw i32 %3006, 1
  %3011 = sext i32 %3010 to i64
  %3012 = add i64 %3008, 11
  %3013 = add i64 %3012, %3011
  %3014 = inttoptr i64 %3013 to i16*
  store i16 62, i16* %3014, align 2
  %3015 = load i32, i32* %2523, align 4
  %3016 = load i32, i32* %2524, align 8
  %3017 = icmp eq i32 %3015, %3016
  br i1 %3017, label %3018, label %2671

3018:                                             ; preds = %3005
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2671

3019:                                             ; preds = %2548
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3020 = load i32, i32* %2523, align 4
  br label %3021

3021:                                             ; preds = %3019, %2548
  %3022 = phi i32 [ %3020, %3019 ], [ %2557, %2548 ]
  %3023 = load i64*, i64** %2522, align 8
  %3024 = load i64, i64* %3023, align 8
  %3025 = add nsw i32 %3022, 1
  store i32 %3025, i32* %2523, align 4
  %3026 = sext i32 %3022 to i64
  %3027 = add nsw i64 %3026, 11
  %3028 = add i64 %3027, %3024
  %3029 = inttoptr i64 %3028 to i8*
  store i8 119, i8* %3029, align 1
  %3030 = load i32, i32* %2523, align 4
  %3031 = load i32, i32* %2524, align 8
  %3032 = icmp eq i32 %3030, %3031
  br i1 %3032, label %3033, label %3035

3033:                                             ; preds = %3021
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3034 = load i32, i32* %2523, align 4
  br label %3035

3035:                                             ; preds = %3033, %3021
  %3036 = phi i32 [ %3034, %3033 ], [ %3030, %3021 ]
  %3037 = load i64*, i64** %2522, align 8
  %3038 = load i64, i64* %3037, align 8
  %3039 = add nsw i32 %3036, 1
  store i32 %3039, i32* %2523, align 4
  %3040 = sext i32 %3036 to i64
  %3041 = add nsw i64 %3040, 11
  %3042 = add i64 %3041, %3038
  %3043 = inttoptr i64 %3042 to i8*
  store i8 32, i8* %3043, align 1
  %3044 = load i32, i32* %2523, align 4
  %3045 = load i32, i32* %2524, align 8
  %3046 = icmp eq i32 %3044, %3045
  br i1 %3046, label %3047, label %2575

3047:                                             ; preds = %3035
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2575

3048:                                             ; preds = %2562
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3049 = load i32, i32* %2523, align 4
  br label %3050

3050:                                             ; preds = %3048, %2562
  %3051 = phi i32 [ %3049, %3048 ], [ %2572, %2562 ]
  %3052 = load i64*, i64** %2522, align 8
  %3053 = load i64, i64* %3052, align 8
  %3054 = add nsw i32 %3051, 1
  store i32 %3054, i32* %2523, align 4
  %3055 = shl nsw i32 %3051, 1
  %3056 = sext i32 %3055 to i64
  %3057 = add i64 %3053, 11
  %3058 = add i64 %3057, %3056
  %3059 = inttoptr i64 %3058 to i16*
  store i16 119, i16* %3059, align 2
  %3060 = load i32, i32* %2523, align 4
  %3061 = load i32, i32* %2524, align 8
  %3062 = icmp eq i32 %3060, %3061
  br i1 %3062, label %3063, label %3065

3063:                                             ; preds = %3050
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3064 = load i32, i32* %2523, align 4
  br label %3065

3065:                                             ; preds = %3063, %3050
  %3066 = phi i32 [ %3064, %3063 ], [ %3060, %3050 ]
  %3067 = load i64*, i64** %2522, align 8
  %3068 = load i64, i64* %3067, align 8
  %3069 = add nsw i32 %3066, 1
  store i32 %3069, i32* %2523, align 4
  %3070 = shl nsw i32 %3066, 1
  %3071 = sext i32 %3070 to i64
  %3072 = add i64 %3068, 11
  %3073 = add i64 %3072, %3071
  %3074 = inttoptr i64 %3073 to i16*
  store i16 32, i16* %3074, align 2
  %3075 = load i32, i32* %2523, align 4
  %3076 = load i32, i32* %2524, align 8
  %3077 = icmp eq i32 %3075, %3076
  br i1 %3077, label %3078, label %2575

3078:                                             ; preds = %3065
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %2575

3079:                                             ; preds = %1505
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3080 = load i32, i32* %1328, align 4
  br label %3081

3081:                                             ; preds = %3079, %1505
  %3082 = phi i32 [ %3080, %3079 ], [ %1514, %1505 ]
  %3083 = load i64*, i64** %1327, align 8
  %3084 = load i64, i64* %3083, align 8
  %3085 = add nsw i32 %3082, 1
  store i32 %3085, i32* %1328, align 4
  %3086 = sext i32 %3082 to i64
  %3087 = add nsw i64 %3086, 11
  %3088 = add i64 %3087, %3084
  %3089 = inttoptr i64 %3088 to i8*
  store i8 105, i8* %3089, align 1
  %3090 = load i32, i32* %1328, align 4
  %3091 = load i32, i32* %1329, align 8
  %3092 = icmp eq i32 %3090, %3091
  br i1 %3092, label %3093, label %3095

3093:                                             ; preds = %3081
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3094 = load i32, i32* %1328, align 4
  br label %3095

3095:                                             ; preds = %3093, %3081
  %3096 = phi i32 [ %3094, %3093 ], [ %3090, %3081 ]
  %3097 = load i64*, i64** %1327, align 8
  %3098 = load i64, i64* %3097, align 8
  %3099 = add nsw i32 %3096, 1
  store i32 %3099, i32* %1328, align 4
  %3100 = sext i32 %3096 to i64
  %3101 = add nsw i64 %3100, 11
  %3102 = add i64 %3101, %3098
  %3103 = inttoptr i64 %3102 to i8*
  store i8 110, i8* %3103, align 1
  %3104 = load i32, i32* %1328, align 4
  %3105 = load i32, i32* %1329, align 8
  %3106 = icmp eq i32 %3104, %3105
  br i1 %3106, label %3107, label %3109

3107:                                             ; preds = %3095
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3108 = load i32, i32* %1328, align 4
  br label %3109

3109:                                             ; preds = %3107, %3095
  %3110 = phi i32 [ %3108, %3107 ], [ %3104, %3095 ]
  %3111 = load i64*, i64** %1327, align 8
  %3112 = load i64, i64* %3111, align 8
  %3113 = add nsw i32 %3110, 1
  store i32 %3113, i32* %1328, align 4
  %3114 = sext i32 %3110 to i64
  %3115 = add nsw i64 %3114, 11
  %3116 = add i64 %3115, %3112
  %3117 = inttoptr i64 %3116 to i8*
  store i8 100, i8* %3117, align 1
  %3118 = load i32, i32* %1328, align 4
  %3119 = load i32, i32* %1329, align 8
  %3120 = icmp eq i32 %3118, %3119
  br i1 %3120, label %3121, label %3123

3121:                                             ; preds = %3109
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3122 = load i32, i32* %1328, align 4
  br label %3123

3123:                                             ; preds = %3121, %3109
  %3124 = phi i32 [ %3122, %3121 ], [ %3118, %3109 ]
  %3125 = load i64*, i64** %1327, align 8
  %3126 = load i64, i64* %3125, align 8
  %3127 = add nsw i32 %3124, 1
  store i32 %3127, i32* %1328, align 4
  %3128 = sext i32 %3124 to i64
  %3129 = add nsw i64 %3128, 11
  %3130 = add i64 %3129, %3126
  %3131 = inttoptr i64 %3130 to i8*
  store i8 101, i8* %3131, align 1
  %3132 = load i32, i32* %1328, align 4
  %3133 = load i32, i32* %1329, align 8
  %3134 = icmp eq i32 %3132, %3133
  br i1 %3134, label %3135, label %3137

3135:                                             ; preds = %3123
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3136 = load i32, i32* %1328, align 4
  br label %3137

3137:                                             ; preds = %3135, %3123
  %3138 = phi i32 [ %3136, %3135 ], [ %3132, %3123 ]
  %3139 = load i64*, i64** %1327, align 8
  %3140 = load i64, i64* %3139, align 8
  %3141 = add nsw i32 %3138, 1
  store i32 %3141, i32* %1328, align 4
  %3142 = sext i32 %3138 to i64
  %3143 = add nsw i64 %3142, 11
  %3144 = add i64 %3143, %3140
  %3145 = inttoptr i64 %3144 to i8*
  store i8 120, i8* %3145, align 1
  %3146 = load i32, i32* %1328, align 4
  %3147 = load i32, i32* %1329, align 8
  %3148 = icmp eq i32 %3146, %3147
  br i1 %3148, label %3149, label %3151

3149:                                             ; preds = %3137
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3150 = load i32, i32* %1328, align 4
  br label %3151

3151:                                             ; preds = %3149, %3137
  %3152 = phi i32 [ %3150, %3149 ], [ %3146, %3137 ]
  %3153 = load i64*, i64** %1327, align 8
  %3154 = load i64, i64* %3153, align 8
  %3155 = add nsw i32 %3152, 1
  store i32 %3155, i32* %1328, align 4
  %3156 = sext i32 %3152 to i64
  %3157 = add nsw i64 %3156, 11
  %3158 = add i64 %3157, %3154
  %3159 = inttoptr i64 %3158 to i8*
  store i8 32, i8* %3159, align 1
  %3160 = load i32, i32* %1328, align 4
  %3161 = load i32, i32* %1329, align 8
  %3162 = icmp eq i32 %3160, %3161
  br i1 %3162, label %3163, label %1532

3163:                                             ; preds = %3151
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %1532

3164:                                             ; preds = %1519
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3165 = load i32, i32* %1328, align 4
  br label %3166

3166:                                             ; preds = %3164, %1519
  %3167 = phi i32 [ %3165, %3164 ], [ %1529, %1519 ]
  %3168 = load i64*, i64** %1327, align 8
  %3169 = load i64, i64* %3168, align 8
  %3170 = add nsw i32 %3167, 1
  store i32 %3170, i32* %1328, align 4
  %3171 = shl nsw i32 %3167, 1
  %3172 = sext i32 %3171 to i64
  %3173 = add i64 %3169, 11
  %3174 = add i64 %3173, %3172
  %3175 = inttoptr i64 %3174 to i16*
  store i16 105, i16* %3175, align 2
  %3176 = load i32, i32* %1328, align 4
  %3177 = load i32, i32* %1329, align 8
  %3178 = icmp eq i32 %3176, %3177
  br i1 %3178, label %3179, label %3181

3179:                                             ; preds = %3166
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3180 = load i32, i32* %1328, align 4
  br label %3181

3181:                                             ; preds = %3179, %3166
  %3182 = phi i32 [ %3180, %3179 ], [ %3176, %3166 ]
  %3183 = load i64*, i64** %1327, align 8
  %3184 = load i64, i64* %3183, align 8
  %3185 = add nsw i32 %3182, 1
  store i32 %3185, i32* %1328, align 4
  %3186 = shl nsw i32 %3182, 1
  %3187 = sext i32 %3186 to i64
  %3188 = add i64 %3184, 11
  %3189 = add i64 %3188, %3187
  %3190 = inttoptr i64 %3189 to i16*
  store i16 110, i16* %3190, align 2
  %3191 = load i32, i32* %1328, align 4
  %3192 = load i32, i32* %1329, align 8
  %3193 = icmp eq i32 %3191, %3192
  br i1 %3193, label %3194, label %3196

3194:                                             ; preds = %3181
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3195 = load i32, i32* %1328, align 4
  br label %3196

3196:                                             ; preds = %3194, %3181
  %3197 = phi i32 [ %3195, %3194 ], [ %3191, %3181 ]
  %3198 = load i64*, i64** %1327, align 8
  %3199 = load i64, i64* %3198, align 8
  %3200 = add nsw i32 %3197, 1
  store i32 %3200, i32* %1328, align 4
  %3201 = shl nsw i32 %3197, 1
  %3202 = sext i32 %3201 to i64
  %3203 = add i64 %3199, 11
  %3204 = add i64 %3203, %3202
  %3205 = inttoptr i64 %3204 to i16*
  store i16 100, i16* %3205, align 2
  %3206 = load i32, i32* %1328, align 4
  %3207 = load i32, i32* %1329, align 8
  %3208 = icmp eq i32 %3206, %3207
  br i1 %3208, label %3209, label %3211

3209:                                             ; preds = %3196
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3210 = load i32, i32* %1328, align 4
  br label %3211

3211:                                             ; preds = %3209, %3196
  %3212 = phi i32 [ %3210, %3209 ], [ %3206, %3196 ]
  %3213 = load i64*, i64** %1327, align 8
  %3214 = load i64, i64* %3213, align 8
  %3215 = add nsw i32 %3212, 1
  store i32 %3215, i32* %1328, align 4
  %3216 = shl nsw i32 %3212, 1
  %3217 = sext i32 %3216 to i64
  %3218 = add i64 %3214, 11
  %3219 = add i64 %3218, %3217
  %3220 = inttoptr i64 %3219 to i16*
  store i16 101, i16* %3220, align 2
  %3221 = load i32, i32* %1328, align 4
  %3222 = load i32, i32* %1329, align 8
  %3223 = icmp eq i32 %3221, %3222
  br i1 %3223, label %3224, label %3226

3224:                                             ; preds = %3211
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3225 = load i32, i32* %1328, align 4
  br label %3226

3226:                                             ; preds = %3224, %3211
  %3227 = phi i32 [ %3225, %3224 ], [ %3221, %3211 ]
  %3228 = load i64*, i64** %1327, align 8
  %3229 = load i64, i64* %3228, align 8
  %3230 = add nsw i32 %3227, 1
  store i32 %3230, i32* %1328, align 4
  %3231 = shl nsw i32 %3227, 1
  %3232 = sext i32 %3231 to i64
  %3233 = add i64 %3229, 11
  %3234 = add i64 %3233, %3232
  %3235 = inttoptr i64 %3234 to i16*
  store i16 120, i16* %3235, align 2
  %3236 = load i32, i32* %1328, align 4
  %3237 = load i32, i32* %1329, align 8
  %3238 = icmp eq i32 %3236, %3237
  br i1 %3238, label %3239, label %3241

3239:                                             ; preds = %3226
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3240 = load i32, i32* %1328, align 4
  br label %3241

3241:                                             ; preds = %3239, %3226
  %3242 = phi i32 [ %3240, %3239 ], [ %3236, %3226 ]
  %3243 = load i64*, i64** %1327, align 8
  %3244 = load i64, i64* %3243, align 8
  %3245 = add nsw i32 %3242, 1
  store i32 %3245, i32* %1328, align 4
  %3246 = shl nsw i32 %3242, 1
  %3247 = sext i32 %3246 to i64
  %3248 = add i64 %3244, 11
  %3249 = add i64 %3248, %3247
  %3250 = inttoptr i64 %3249 to i16*
  store i16 32, i16* %3250, align 2
  %3251 = load i32, i32* %1328, align 4
  %3252 = load i32, i32* %1329, align 8
  %3253 = icmp eq i32 %3251, %3252
  br i1 %3253, label %3254, label %1532

3254:                                             ; preds = %3241
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %1532

3255:                                             ; preds = %1452
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3256 = load i32, i32* %1328, align 4
  br label %3257

3257:                                             ; preds = %3255, %1452
  %3258 = phi i32 [ %3256, %3255 ], [ %1461, %1452 ]
  %3259 = load i64*, i64** %1327, align 8
  %3260 = load i64, i64* %3259, align 8
  %3261 = add nsw i32 %3258, 1
  store i32 %3261, i32* %1328, align 4
  %3262 = sext i32 %3258 to i64
  %3263 = add nsw i64 %3262, 11
  %3264 = add i64 %3263, %3260
  %3265 = inttoptr i64 %3264 to i8*
  store i8 111, i8* %3265, align 1
  %3266 = load i32, i32* %1328, align 4
  %3267 = load i32, i32* %1329, align 8
  %3268 = icmp eq i32 %3266, %3267
  br i1 %3268, label %3269, label %3271

3269:                                             ; preds = %3257
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3270 = load i32, i32* %1328, align 4
  br label %3271

3271:                                             ; preds = %3269, %3257
  %3272 = phi i32 [ %3270, %3269 ], [ %3266, %3257 ]
  %3273 = load i64*, i64** %1327, align 8
  %3274 = load i64, i64* %3273, align 8
  %3275 = add nsw i32 %3272, 1
  store i32 %3275, i32* %1328, align 4
  %3276 = sext i32 %3272 to i64
  %3277 = add nsw i64 %3276, 11
  %3278 = add i64 %3277, %3274
  %3279 = inttoptr i64 %3278 to i8*
  store i8 109, i8* %3279, align 1
  %3280 = load i32, i32* %1328, align 4
  %3281 = load i32, i32* %1329, align 8
  %3282 = icmp eq i32 %3280, %3281
  br i1 %3282, label %3283, label %3285

3283:                                             ; preds = %3271
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3284 = load i32, i32* %1328, align 4
  br label %3285

3285:                                             ; preds = %3283, %3271
  %3286 = phi i32 [ %3284, %3283 ], [ %3280, %3271 ]
  %3287 = load i64*, i64** %1327, align 8
  %3288 = load i64, i64* %3287, align 8
  %3289 = add nsw i32 %3286, 1
  store i32 %3289, i32* %1328, align 4
  %3290 = sext i32 %3286 to i64
  %3291 = add nsw i64 %3290, 11
  %3292 = add i64 %3291, %3288
  %3293 = inttoptr i64 %3292 to i8*
  store i8 105, i8* %3293, align 1
  %3294 = load i32, i32* %1328, align 4
  %3295 = load i32, i32* %1329, align 8
  %3296 = icmp eq i32 %3294, %3295
  br i1 %3296, label %3297, label %3299

3297:                                             ; preds = %3285
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3298 = load i32, i32* %1328, align 4
  br label %3299

3299:                                             ; preds = %3297, %3285
  %3300 = phi i32 [ %3298, %3297 ], [ %3294, %3285 ]
  %3301 = load i64*, i64** %1327, align 8
  %3302 = load i64, i64* %3301, align 8
  %3303 = add nsw i32 %3300, 1
  store i32 %3303, i32* %1328, align 4
  %3304 = sext i32 %3300 to i64
  %3305 = add nsw i64 %3304, 11
  %3306 = add i64 %3305, %3302
  %3307 = inttoptr i64 %3306 to i8*
  store i8 115, i8* %3307, align 1
  %3308 = load i32, i32* %1328, align 4
  %3309 = load i32, i32* %1329, align 8
  %3310 = icmp eq i32 %3308, %3309
  br i1 %3310, label %3311, label %3313

3311:                                             ; preds = %3299
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3312 = load i32, i32* %1328, align 4
  br label %3313

3313:                                             ; preds = %3311, %3299
  %3314 = phi i32 [ %3312, %3311 ], [ %3308, %3299 ]
  %3315 = load i64*, i64** %1327, align 8
  %3316 = load i64, i64* %3315, align 8
  %3317 = add nsw i32 %3314, 1
  store i32 %3317, i32* %1328, align 4
  %3318 = sext i32 %3314 to i64
  %3319 = add nsw i64 %3318, 11
  %3320 = add i64 %3319, %3316
  %3321 = inttoptr i64 %3320 to i8*
  store i8 101, i8* %3321, align 1
  %3322 = load i32, i32* %1328, align 4
  %3323 = load i32, i32* %1329, align 8
  %3324 = icmp eq i32 %3322, %3323
  br i1 %3324, label %3325, label %3327

3325:                                             ; preds = %3313
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3326 = load i32, i32* %1328, align 4
  br label %3327

3327:                                             ; preds = %3325, %3313
  %3328 = phi i32 [ %3326, %3325 ], [ %3322, %3313 ]
  %3329 = load i64*, i64** %1327, align 8
  %3330 = load i64, i64* %3329, align 8
  %3331 = add nsw i32 %3328, 1
  store i32 %3331, i32* %1328, align 4
  %3332 = sext i32 %3328 to i64
  %3333 = add nsw i64 %3332, 11
  %3334 = add i64 %3333, %3330
  %3335 = inttoptr i64 %3334 to i8*
  store i8 46, i8* %3335, align 1
  %3336 = load i32, i32* %1328, align 4
  %3337 = load i32, i32* %1329, align 8
  %3338 = icmp eq i32 %3336, %3337
  br i1 %3338, label %3339, label %1479

3339:                                             ; preds = %3327
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %1479

3340:                                             ; preds = %1466
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3341 = load i32, i32* %1328, align 4
  br label %3342

3342:                                             ; preds = %3340, %1466
  %3343 = phi i32 [ %3341, %3340 ], [ %1476, %1466 ]
  %3344 = load i64*, i64** %1327, align 8
  %3345 = load i64, i64* %3344, align 8
  %3346 = add nsw i32 %3343, 1
  store i32 %3346, i32* %1328, align 4
  %3347 = shl nsw i32 %3343, 1
  %3348 = sext i32 %3347 to i64
  %3349 = add i64 %3345, 11
  %3350 = add i64 %3349, %3348
  %3351 = inttoptr i64 %3350 to i16*
  store i16 111, i16* %3351, align 2
  %3352 = load i32, i32* %1328, align 4
  %3353 = load i32, i32* %1329, align 8
  %3354 = icmp eq i32 %3352, %3353
  br i1 %3354, label %3355, label %3357

3355:                                             ; preds = %3342
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3356 = load i32, i32* %1328, align 4
  br label %3357

3357:                                             ; preds = %3355, %3342
  %3358 = phi i32 [ %3356, %3355 ], [ %3352, %3342 ]
  %3359 = load i64*, i64** %1327, align 8
  %3360 = load i64, i64* %3359, align 8
  %3361 = add nsw i32 %3358, 1
  store i32 %3361, i32* %1328, align 4
  %3362 = shl nsw i32 %3358, 1
  %3363 = sext i32 %3362 to i64
  %3364 = add i64 %3360, 11
  %3365 = add i64 %3364, %3363
  %3366 = inttoptr i64 %3365 to i16*
  store i16 109, i16* %3366, align 2
  %3367 = load i32, i32* %1328, align 4
  %3368 = load i32, i32* %1329, align 8
  %3369 = icmp eq i32 %3367, %3368
  br i1 %3369, label %3370, label %3372

3370:                                             ; preds = %3357
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3371 = load i32, i32* %1328, align 4
  br label %3372

3372:                                             ; preds = %3370, %3357
  %3373 = phi i32 [ %3371, %3370 ], [ %3367, %3357 ]
  %3374 = load i64*, i64** %1327, align 8
  %3375 = load i64, i64* %3374, align 8
  %3376 = add nsw i32 %3373, 1
  store i32 %3376, i32* %1328, align 4
  %3377 = shl nsw i32 %3373, 1
  %3378 = sext i32 %3377 to i64
  %3379 = add i64 %3375, 11
  %3380 = add i64 %3379, %3378
  %3381 = inttoptr i64 %3380 to i16*
  store i16 105, i16* %3381, align 2
  %3382 = load i32, i32* %1328, align 4
  %3383 = load i32, i32* %1329, align 8
  %3384 = icmp eq i32 %3382, %3383
  br i1 %3384, label %3385, label %3387

3385:                                             ; preds = %3372
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3386 = load i32, i32* %1328, align 4
  br label %3387

3387:                                             ; preds = %3385, %3372
  %3388 = phi i32 [ %3386, %3385 ], [ %3382, %3372 ]
  %3389 = load i64*, i64** %1327, align 8
  %3390 = load i64, i64* %3389, align 8
  %3391 = add nsw i32 %3388, 1
  store i32 %3391, i32* %1328, align 4
  %3392 = shl nsw i32 %3388, 1
  %3393 = sext i32 %3392 to i64
  %3394 = add i64 %3390, 11
  %3395 = add i64 %3394, %3393
  %3396 = inttoptr i64 %3395 to i16*
  store i16 115, i16* %3396, align 2
  %3397 = load i32, i32* %1328, align 4
  %3398 = load i32, i32* %1329, align 8
  %3399 = icmp eq i32 %3397, %3398
  br i1 %3399, label %3400, label %3402

3400:                                             ; preds = %3387
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3401 = load i32, i32* %1328, align 4
  br label %3402

3402:                                             ; preds = %3400, %3387
  %3403 = phi i32 [ %3401, %3400 ], [ %3397, %3387 ]
  %3404 = load i64*, i64** %1327, align 8
  %3405 = load i64, i64* %3404, align 8
  %3406 = add nsw i32 %3403, 1
  store i32 %3406, i32* %1328, align 4
  %3407 = shl nsw i32 %3403, 1
  %3408 = sext i32 %3407 to i64
  %3409 = add i64 %3405, 11
  %3410 = add i64 %3409, %3408
  %3411 = inttoptr i64 %3410 to i16*
  store i16 101, i16* %3411, align 2
  %3412 = load i32, i32* %1328, align 4
  %3413 = load i32, i32* %1329, align 8
  %3414 = icmp eq i32 %3412, %3413
  br i1 %3414, label %3415, label %3417

3415:                                             ; preds = %3402
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3416 = load i32, i32* %1328, align 4
  br label %3417

3417:                                             ; preds = %3415, %3402
  %3418 = phi i32 [ %3416, %3415 ], [ %3412, %3402 ]
  %3419 = load i64*, i64** %1327, align 8
  %3420 = load i64, i64* %3419, align 8
  %3421 = add nsw i32 %3418, 1
  store i32 %3421, i32* %1328, align 4
  %3422 = shl nsw i32 %3418, 1
  %3423 = sext i32 %3422 to i64
  %3424 = add i64 %3420, 11
  %3425 = add i64 %3424, %3423
  %3426 = inttoptr i64 %3425 to i16*
  store i16 46, i16* %3426, align 2
  %3427 = load i32, i32* %1328, align 4
  %3428 = load i32, i32* %1329, align 8
  %3429 = icmp eq i32 %3427, %3428
  br i1 %3429, label %3430, label %1479

3430:                                             ; preds = %3417
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %1479

3431:                                             ; preds = %1353
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3432 = load i32, i32* %1328, align 4
  br label %3433

3433:                                             ; preds = %3431, %1353
  %3434 = phi i32 [ %3432, %3431 ], [ %1362, %1353 ]
  %3435 = load i64*, i64** %1327, align 8
  %3436 = load i64, i64* %3435, align 8
  %3437 = add nsw i32 %3434, 1
  store i32 %3437, i32* %1328, align 4
  %3438 = sext i32 %3434 to i64
  %3439 = add nsw i64 %3438, 11
  %3440 = add i64 %3439, %3436
  %3441 = inttoptr i64 %3440 to i8*
  store i8 121, i8* %3441, align 1
  %3442 = load i32, i32* %1328, align 4
  %3443 = load i32, i32* %1329, align 8
  %3444 = icmp eq i32 %3442, %3443
  br i1 %3444, label %3445, label %3447

3445:                                             ; preds = %3433
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3446 = load i32, i32* %1328, align 4
  br label %3447

3447:                                             ; preds = %3445, %3433
  %3448 = phi i32 [ %3446, %3445 ], [ %3442, %3433 ]
  %3449 = load i64*, i64** %1327, align 8
  %3450 = load i64, i64* %3449, align 8
  %3451 = add nsw i32 %3448, 1
  store i32 %3451, i32* %1328, align 4
  %3452 = sext i32 %3448 to i64
  %3453 = add nsw i64 %3452, 11
  %3454 = add i64 %3453, %3450
  %3455 = inttoptr i64 %3454 to i8*
  store i8 110, i8* %3455, align 1
  %3456 = load i32, i32* %1328, align 4
  %3457 = load i32, i32* %1329, align 8
  %3458 = icmp eq i32 %3456, %3457
  br i1 %3458, label %3459, label %3461

3459:                                             ; preds = %3447
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3460 = load i32, i32* %1328, align 4
  br label %3461

3461:                                             ; preds = %3459, %3447
  %3462 = phi i32 [ %3460, %3459 ], [ %3456, %3447 ]
  %3463 = load i64*, i64** %1327, align 8
  %3464 = load i64, i64* %3463, align 8
  %3465 = add nsw i32 %3462, 1
  store i32 %3465, i32* %1328, align 4
  %3466 = sext i32 %3462 to i64
  %3467 = add nsw i64 %3466, 11
  %3468 = add i64 %3467, %3464
  %3469 = inttoptr i64 %3468 to i8*
  store i8 99, i8* %3469, align 1
  %3470 = load i32, i32* %1328, align 4
  %3471 = load i32, i32* %1329, align 8
  %3472 = icmp eq i32 %3470, %3471
  br i1 %3472, label %3473, label %3475

3473:                                             ; preds = %3461
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3474 = load i32, i32* %1328, align 4
  br label %3475

3475:                                             ; preds = %3473, %3461
  %3476 = phi i32 [ %3474, %3473 ], [ %3470, %3461 ]
  %3477 = load i64*, i64** %1327, align 8
  %3478 = load i64, i64* %3477, align 8
  %3479 = add nsw i32 %3476, 1
  store i32 %3479, i32* %1328, align 4
  %3480 = sext i32 %3476 to i64
  %3481 = add nsw i64 %3480, 11
  %3482 = add i64 %3481, %3478
  %3483 = inttoptr i64 %3482 to i8*
  store i8 32, i8* %3483, align 1
  %3484 = load i32, i32* %1328, align 4
  %3485 = load i32, i32* %1329, align 8
  %3486 = icmp eq i32 %3484, %3485
  br i1 %3486, label %3487, label %1380

3487:                                             ; preds = %3475
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %1380

3488:                                             ; preds = %1367
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3489 = load i32, i32* %1328, align 4
  br label %3490

3490:                                             ; preds = %3488, %1367
  %3491 = phi i32 [ %3489, %3488 ], [ %1377, %1367 ]
  %3492 = load i64*, i64** %1327, align 8
  %3493 = load i64, i64* %3492, align 8
  %3494 = add nsw i32 %3491, 1
  store i32 %3494, i32* %1328, align 4
  %3495 = shl nsw i32 %3491, 1
  %3496 = sext i32 %3495 to i64
  %3497 = add i64 %3493, 11
  %3498 = add i64 %3497, %3496
  %3499 = inttoptr i64 %3498 to i16*
  store i16 121, i16* %3499, align 2
  %3500 = load i32, i32* %1328, align 4
  %3501 = load i32, i32* %1329, align 8
  %3502 = icmp eq i32 %3500, %3501
  br i1 %3502, label %3503, label %3505

3503:                                             ; preds = %3490
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3504 = load i32, i32* %1328, align 4
  br label %3505

3505:                                             ; preds = %3503, %3490
  %3506 = phi i32 [ %3504, %3503 ], [ %3500, %3490 ]
  %3507 = load i64*, i64** %1327, align 8
  %3508 = load i64, i64* %3507, align 8
  %3509 = add nsw i32 %3506, 1
  store i32 %3509, i32* %1328, align 4
  %3510 = shl nsw i32 %3506, 1
  %3511 = sext i32 %3510 to i64
  %3512 = add i64 %3508, 11
  %3513 = add i64 %3512, %3511
  %3514 = inttoptr i64 %3513 to i16*
  store i16 110, i16* %3514, align 2
  %3515 = load i32, i32* %1328, align 4
  %3516 = load i32, i32* %1329, align 8
  %3517 = icmp eq i32 %3515, %3516
  br i1 %3517, label %3518, label %3520

3518:                                             ; preds = %3505
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3519 = load i32, i32* %1328, align 4
  br label %3520

3520:                                             ; preds = %3518, %3505
  %3521 = phi i32 [ %3519, %3518 ], [ %3515, %3505 ]
  %3522 = load i64*, i64** %1327, align 8
  %3523 = load i64, i64* %3522, align 8
  %3524 = add nsw i32 %3521, 1
  store i32 %3524, i32* %1328, align 4
  %3525 = shl nsw i32 %3521, 1
  %3526 = sext i32 %3525 to i64
  %3527 = add i64 %3523, 11
  %3528 = add i64 %3527, %3526
  %3529 = inttoptr i64 %3528 to i16*
  store i16 99, i16* %3529, align 2
  %3530 = load i32, i32* %1328, align 4
  %3531 = load i32, i32* %1329, align 8
  %3532 = icmp eq i32 %3530, %3531
  br i1 %3532, label %3533, label %3535

3533:                                             ; preds = %3520
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %3534 = load i32, i32* %1328, align 4
  br label %3535

3535:                                             ; preds = %3533, %3520
  %3536 = phi i32 [ %3534, %3533 ], [ %3530, %3520 ]
  %3537 = load i64*, i64** %1327, align 8
  %3538 = load i64, i64* %3537, align 8
  %3539 = add nsw i32 %3536, 1
  store i32 %3539, i32* %1328, align 4
  %3540 = shl nsw i32 %3536, 1
  %3541 = sext i32 %3540 to i64
  %3542 = add i64 %3538, 11
  %3543 = add i64 %3542, %3541
  %3544 = inttoptr i64 %3543 to i16*
  store i16 32, i16* %3544, align 2
  %3545 = load i32, i32* %1328, align 4
  %3546 = load i32, i32* %1329, align 8
  %3547 = icmp eq i32 %3545, %3546
  br i1 %3547, label %3548, label %1380

3548:                                             ; preds = %3535
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %1380

3549:                                             ; preds = %2753, %2752, %2744, %2735, %2670, %1636, %1635, %1623, %1610, %1314
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal23SerializeStackFrameInfoEPNS0_7IsolateENS0_6HandleINS0_14StackFrameInfoEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 {
  %3 = alloca %"class.v8::internal::IncrementalStringBuilder", align 8
  %4 = bitcast %"class.v8::internal::IncrementalStringBuilder"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #6
  call void @_ZN2v88internal24IncrementalStringBuilderC1EPNS0_7IsolateE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %3, %"class.v8::internal::Isolate"* %0) #6
  call void @_ZN2v88internal23SerializeStackFrameInfoEPNS0_7IsolateENS0_6HandleINS0_14StackFrameInfoEEEPNS0_24IncrementalStringBuilderE(%"class.v8::internal::Isolate"* %0, i64* %1, %"class.v8::internal::IncrementalStringBuilder"* nonnull %3)
  %5 = call i64* @_ZN2v88internal24IncrementalStringBuilder6FinishEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #6
  ret i64* %5
}

declare void @_ZN2v88internal24IncrementalStringBuilderC1EPNS0_7IsolateE(%"class.v8::internal::IncrementalStringBuilder"*, %"class.v8::internal::Isolate"*) unnamed_addr #3

declare i64* @_ZN2v88internal24IncrementalStringBuilder6FinishEv(%"class.v8::internal::IncrementalStringBuilder"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @llvm.assume(i1) #6

declare zeroext i1 @_ZNK2v88internal6Script16IsUserJavaScriptEv(%"class.v8::internal::Script"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #3

declare i64* @_ZN2v88internal18SharedFunctionInfo9DebugNameENS0_6HandleIS1_EE(i64*) local_unnamed_addr #3

declare void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"*, i64*) local_unnamed_addr #3

declare zeroext i1 @_ZN2v88internal6Script15GetPositionInfoENS0_6HandleIS1_EEiPNS1_12PositionInfoENS1_10OffsetFlagE(i64*, i32, %"struct.v8::internal::Script::PositionInfo"*, i32) local_unnamed_addr #3

declare i32 @_ZN2v88internal6Script15GetEvalPositionEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #3

declare void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"*) local_unnamed_addr #3

declare i8* @_ZN2v88internal12IntToCStringEiNS0_6VectorIcEE(i32, i8*, i64) local_unnamed_addr #3

declare i64* @_ZN2v88internal6Object12ToObjectImplEPNS0_7IsolateENS0_6HandleIS1_EEPKc(%"class.v8::internal::Isolate"*, i64*, i8*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2v88internal9ScopeInfo15HasFunctionNameEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

declare i64 @_ZNK2v88internal9ScopeInfo12FunctionNameEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2v88internal9ScopeInfo21HasSharedFunctionNameEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

declare i64* @_ZN2v88internal6String11SlowFlattenEPNS0_7IsolateENS0_6HandleINS0_10ConsStringEEENS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i64*, i8 zeroext) local_unnamed_addr #3

declare zeroext i1 @_ZNK2v88internal9ScopeInfo23HasInferredFunctionNameEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

declare i64 @_ZNK2v88internal9ScopeInfo20InferredFunctionNameEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i16 @_ZN2v88internal11StringShape33DispatchToSpecificTypeWithoutCastIZNS1_22DispatchToSpecificTypeIZNKS0_6String7GetImplEiE19StringGetDispatchertJRiEEET0_S4_DpOT1_E17CastingDispatchertJRS4_S6_EEES7_SA_(%"class.v8::internal::StringShape"*, %"class.v8::internal::String"* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #5 comdat align 2 {
  %4 = alloca %"class.v8::internal::ConsString", align 8
  %5 = alloca %"class.v8::internal::SlicedString", align 8
  %6 = alloca %"class.v8::internal::ThinString", align 8
  %7 = getelementptr inbounds %"class.v8::internal::StringShape", %"class.v8::internal::StringShape"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 15
  switch i32 %9, label %134 [
    i32 8, label %10
    i32 0, label %20
    i32 9, label %30
    i32 1, label %30
    i32 10, label %37
    i32 2, label %79
    i32 11, label %120
    i32 3, label %120
    i32 13, label %127
    i32 5, label %127
  ]

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i32, i32* %2, align 4
  %14 = sext i32 %13 to i64
  %15 = add i64 %12, 11
  %16 = add i64 %15, %14
  %17 = inttoptr i64 %16 to i8*
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  br label %135

20:                                               ; preds = %3
  %21 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = load i32, i32* %2, align 4
  %24 = shl nsw i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = add i64 %22, 11
  %27 = add i64 %26, %25
  %28 = inttoptr i64 %27 to i16*
  %29 = load i16, i16* %28, align 2
  br label %135

30:                                               ; preds = %3, %3
  %31 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = load i32, i32* %2, align 4
  %34 = bitcast %"class.v8::internal::ConsString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #6
  %35 = getelementptr inbounds %"class.v8::internal::ConsString", %"class.v8::internal::ConsString"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %32, i64* %35, align 8
  %36 = call zeroext i16 @_ZNK2v88internal10ConsString3GetEi(%"class.v8::internal::ConsString"* nonnull %4, i32 %33) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #6
  br label %135

37:                                               ; preds = %3
  %38 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = load i32, i32* %2, align 4
  %41 = and i64 %39, -4294967296
  %42 = add i64 %39, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %41, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = and i16 %49, 16
  %51 = icmp eq i16 %50, 0
  %52 = add i64 %39, 11
  %53 = inttoptr i64 %52 to %"class.v8::String::ExternalOneByteStringResource"**
  br i1 %51, label %66, label %54

54:                                               ; preds = %37
  %55 = load %"class.v8::String::ExternalOneByteStringResource"*, %"class.v8::String::ExternalOneByteStringResource"** %53, align 1
  %56 = getelementptr inbounds %"class.v8::String::ExternalOneByteStringResource", %"class.v8::String::ExternalOneByteStringResource"* %55, i64 0, i32 0
  %57 = bitcast %"class.v8::String::ExternalOneByteStringResource"* %55 to i1 (%"class.v8::String::ExternalStringResourceBase"*)***
  %58 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)**, i1 (%"class.v8::String::ExternalStringResourceBase"*)*** %57, align 8
  %59 = getelementptr inbounds i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %58, i64 2
  %60 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %59, align 8
  %61 = tail call zeroext i1 %60(%"class.v8::String::ExternalStringResourceBase"* %56) #6
  br i1 %61, label %62, label %66

62:                                               ; preds = %54
  %63 = load %"class.v8::String::ExternalOneByteStringResource"*, %"class.v8::String::ExternalOneByteStringResource"** %53, align 1
  tail call void @_ZNK2v86String29ExternalOneByteStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalOneByteStringResource"* %63) #6
  %64 = getelementptr inbounds %"class.v8::String::ExternalOneByteStringResource", %"class.v8::String::ExternalOneByteStringResource"* %63, i64 0, i32 1
  %65 = load i8*, i8** %64, align 8
  br label %73

66:                                               ; preds = %54, %37
  %67 = load %"class.v8::String::ExternalOneByteStringResource"*, %"class.v8::String::ExternalOneByteStringResource"** %53, align 1
  %68 = bitcast %"class.v8::String::ExternalOneByteStringResource"* %67 to i8* (%"class.v8::String::ExternalOneByteStringResource"*)***
  %69 = load i8* (%"class.v8::String::ExternalOneByteStringResource"*)**, i8* (%"class.v8::String::ExternalOneByteStringResource"*)*** %68, align 8
  %70 = getelementptr inbounds i8* (%"class.v8::String::ExternalOneByteStringResource"*)*, i8* (%"class.v8::String::ExternalOneByteStringResource"*)** %69, i64 6
  %71 = load i8* (%"class.v8::String::ExternalOneByteStringResource"*)*, i8* (%"class.v8::String::ExternalOneByteStringResource"*)** %70, align 8
  %72 = tail call i8* %71(%"class.v8::String::ExternalOneByteStringResource"* %67) #6
  br label %73

73:                                               ; preds = %62, %66
  %74 = phi i8* [ %65, %62 ], [ %72, %66 ]
  %75 = sext i32 %40 to i64
  %76 = getelementptr inbounds i8, i8* %74, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i16
  br label %135

79:                                               ; preds = %3
  %80 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = load i32, i32* %2, align 4
  %83 = and i64 %81, -4294967296
  %84 = add i64 %81, -1
  %85 = inttoptr i64 %84 to i32*
  %86 = load atomic i32, i32* %85 monotonic, align 4
  %87 = zext i32 %86 to i64
  %88 = or i64 %83, %87
  %89 = add i64 %88, 7
  %90 = inttoptr i64 %89 to i16*
  %91 = load atomic i16, i16* %90 monotonic, align 2
  %92 = and i16 %91, 16
  %93 = icmp eq i16 %92, 0
  %94 = add i64 %81, 11
  %95 = inttoptr i64 %94 to %"class.v8::String::ExternalStringResource"**
  br i1 %93, label %108, label %96

96:                                               ; preds = %79
  %97 = load %"class.v8::String::ExternalStringResource"*, %"class.v8::String::ExternalStringResource"** %95, align 1
  %98 = getelementptr inbounds %"class.v8::String::ExternalStringResource", %"class.v8::String::ExternalStringResource"* %97, i64 0, i32 0
  %99 = bitcast %"class.v8::String::ExternalStringResource"* %97 to i1 (%"class.v8::String::ExternalStringResourceBase"*)***
  %100 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)**, i1 (%"class.v8::String::ExternalStringResourceBase"*)*** %99, align 8
  %101 = getelementptr inbounds i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %100, i64 2
  %102 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %101, align 8
  %103 = tail call zeroext i1 %102(%"class.v8::String::ExternalStringResourceBase"* %98) #6
  br i1 %103, label %104, label %108

104:                                              ; preds = %96
  %105 = load %"class.v8::String::ExternalStringResource"*, %"class.v8::String::ExternalStringResource"** %95, align 1
  tail call void @_ZNK2v86String22ExternalStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalStringResource"* %105) #6
  %106 = getelementptr inbounds %"class.v8::String::ExternalStringResource", %"class.v8::String::ExternalStringResource"* %105, i64 0, i32 1
  %107 = load i16*, i16** %106, align 8
  br label %115

108:                                              ; preds = %96, %79
  %109 = load %"class.v8::String::ExternalStringResource"*, %"class.v8::String::ExternalStringResource"** %95, align 1
  %110 = bitcast %"class.v8::String::ExternalStringResource"* %109 to i16* (%"class.v8::String::ExternalStringResource"*)***
  %111 = load i16* (%"class.v8::String::ExternalStringResource"*)**, i16* (%"class.v8::String::ExternalStringResource"*)*** %110, align 8
  %112 = getelementptr inbounds i16* (%"class.v8::String::ExternalStringResource"*)*, i16* (%"class.v8::String::ExternalStringResource"*)** %111, i64 6
  %113 = load i16* (%"class.v8::String::ExternalStringResource"*)*, i16* (%"class.v8::String::ExternalStringResource"*)** %112, align 8
  %114 = tail call i16* %113(%"class.v8::String::ExternalStringResource"* %109) #6
  br label %115

115:                                              ; preds = %104, %108
  %116 = phi i16* [ %107, %104 ], [ %114, %108 ]
  %117 = sext i32 %82 to i64
  %118 = getelementptr inbounds i16, i16* %116, i64 %117
  %119 = load i16, i16* %118, align 2
  br label %135

120:                                              ; preds = %3, %3
  %121 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = load i64, i64* %121, align 8
  %123 = load i32, i32* %2, align 4
  %124 = bitcast %"class.v8::internal::SlicedString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %124) #6
  %125 = getelementptr inbounds %"class.v8::internal::SlicedString", %"class.v8::internal::SlicedString"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %122, i64* %125, align 8
  %126 = call zeroext i16 @_ZNK2v88internal12SlicedString3GetEi(%"class.v8::internal::SlicedString"* nonnull %5, i32 %123) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %124) #6
  br label %135

127:                                              ; preds = %3, %3
  %128 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load i64, i64* %128, align 8
  %130 = load i32, i32* %2, align 4
  %131 = bitcast %"class.v8::internal::ThinString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %131) #6
  %132 = getelementptr inbounds %"class.v8::internal::ThinString", %"class.v8::internal::ThinString"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %129, i64* %132, align 8
  %133 = call zeroext i16 @_ZNK2v88internal10ThinString3GetEi(%"class.v8::internal::ThinString"* nonnull %6, i32 %130) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %131) #6
  br label %135

134:                                              ; preds = %3
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0)) #9
  unreachable

135:                                              ; preds = %127, %120, %115, %73, %30, %20, %10
  %136 = phi i16 [ %133, %127 ], [ %126, %120 ], [ %119, %115 ], [ %78, %73 ], [ %36, %30 ], [ %29, %20 ], [ %19, %10 ]
  ret i16 %136
}

declare zeroext i16 @_ZNK2v88internal10ConsString3GetEi(%"class.v8::internal::ConsString"*, i32) local_unnamed_addr #3

declare void @_ZNK2v86String29ExternalOneByteStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalOneByteStringResource"*) local_unnamed_addr #3

declare void @_ZNK2v86String22ExternalStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalStringResource"*) local_unnamed_addr #3

declare zeroext i16 @_ZNK2v88internal12SlicedString3GetEi(%"class.v8::internal::SlicedString"*, i32) local_unnamed_addr #3

declare zeroext i16 @_ZNK2v88internal10ThinString3GetEi(%"class.v8::internal::ThinString"*, i32) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #7

declare zeroext i1 @_ZN2v88internal6String18SlowAsIntegerIndexEPm(%"class.v8::internal::String"*, i64*) local_unnamed_addr #3

declare i64* @_ZN2v88internal11StringTable12LookupStringEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::StringTable"*, %"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal14LookupIteratorC2EPNS0_7IsolateENS0_6HandleINS0_6ObjectEEENS4_INS0_4NameEEEmS6_NS1_13ConfigurationE(%"class.v8::internal::LookupIterator"*, %"class.v8::internal::Isolate"*, i64*, i64*, i64, i64*, i32) unnamed_addr #5 comdat align 2 {
  %8 = ptrtoint i64* %5 to i64
  %9 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 0
  %10 = icmp eq i64* %3, null
  br i1 %10, label %32, label %11

11:                                               ; preds = %7
  %12 = load i64, i64* %3, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 4
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %12, -1
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i64 %14, 4294967295
  %19 = icmp eq i64 %18, 0
  tail call void @llvm.assume(i1 %19) #6
  %20 = zext i32 %17 to i64
  %21 = or i64 %14, %20
  %22 = add i64 %21, 7
  %23 = inttoptr i64 %22 to i16*
  %24 = load atomic i16, i16* %23 monotonic, align 2
  %25 = icmp eq i16 %24, 64
  br i1 %25, label %26, label %32

26:                                               ; preds = %11
  %27 = add i64 %12, 7
  %28 = inttoptr i64 %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %26, %11, %7
  br label %33

33:                                               ; preds = %26, %32
  %34 = phi i32 [ %6, %32 ], [ 0, %26 ]
  store i32 %34, i32* %9, align 8
  %35 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 1
  store i32 4, i32* %35, align 4
  %36 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 2
  store i8 0, i8* %36, align 8
  %37 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 3
  store i32 0, i32* %37, align 4
  %38 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 4, i32 0
  store i32 0, i32* %38, align 8
  %39 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 5
  store %"class.v8::internal::Isolate"* %1, %"class.v8::internal::Isolate"** %39, align 8
  %40 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 6, i32 0, i32 0
  store i64* %3, i64** %40, align 8
  %41 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 7, i32 0, i32 0
  store i64* null, i64** %41, align 8
  %42 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 8, i32 0, i32 0
  store i64* %2, i64** %42, align 8
  %43 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 9, i32 0, i32 0
  store i64* null, i64** %43, align 8
  %44 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 10
  %45 = bitcast %"class.v8::internal::Handle.1322"* %44 to i64*
  store i64 %8, i64* %45, align 8
  %46 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 11
  store i64 %4, i64* %46, align 8
  %47 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 12, i32 0
  store i64 -1, i64* %47, align 8
  %48 = icmp eq i64 %4, -1
  br i1 %48, label %115, label %49

49:                                               ; preds = %33
  %50 = icmp ugt i64 %4, 4294967294
  br i1 %50, label %53, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 6
  br i1 %10, label %114, label %99

53:                                               ; preds = %49
  %54 = load i64, i64* %5, align 8
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %53
  %58 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 6
  br i1 %10, label %72, label %78

59:                                               ; preds = %53
  %60 = and i64 %54, -4294967296
  %61 = add i64 %54, -1
  %62 = inttoptr i64 %61 to i32*
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = zext i32 %63 to i64
  %65 = or i64 %60, %64
  %66 = add i64 %65, 7
  %67 = inttoptr i64 %66 to i16*
  %68 = load atomic i16, i16* %67 monotonic, align 2
  %69 = icmp eq i16 %68, 1080
  %70 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %0, i64 0, i32 6
  br i1 %69, label %98, label %71

71:                                               ; preds = %59
  br i1 %10, label %72, label %78

72:                                               ; preds = %57, %71
  %73 = phi %"class.v8::internal::Handle.1328"* [ %58, %57 ], [ %70, %71 ]
  %74 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::Factory"*
  %75 = tail call i64* @_ZN2v88internal7Factory12SizeToStringEmb(%"class.v8::internal::Factory"* %74, i64 %4, i1 zeroext true) #6
  %76 = ptrtoint i64* %75 to i64
  %77 = bitcast %"class.v8::internal::Handle.1328"* %73 to i64*
  store i64 %76, i64* %77, align 8
  br label %78

78:                                               ; preds = %57, %72, %71
  %79 = phi i64* [ %3, %57 ], [ %75, %72 ], [ %3, %71 ]
  %80 = load i64, i64* %79, align 8
  %81 = and i64 %80, -4294967296
  %82 = add i64 %80, -1
  %83 = inttoptr i64 %82 to i32*
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = zext i32 %84 to i64
  %86 = or i64 %81, %85
  %87 = add i64 %86, 7
  %88 = inttoptr i64 %87 to i16*
  %89 = load atomic i16, i16* %88 monotonic, align 2
  %90 = and i16 %89, -32
  %91 = icmp eq i16 %90, 32
  br i1 %91, label %92, label %96

92:                                               ; preds = %78
  %93 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 5, i32 0, i32 0, i32 0
  %94 = load %"class.v8::internal::StringTable"*, %"class.v8::internal::StringTable"** %93, align 8
  %95 = tail call i64* @_ZN2v88internal11StringTable12LookupStringEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::StringTable"* %94, %"class.v8::internal::Isolate"* %1, i64* %79) #6
  br label %96

96:                                               ; preds = %78, %92
  %97 = phi i64* [ %95, %92 ], [ %79, %78 ]
  store i64* %97, i64** %40, align 8
  br label %114

98:                                               ; preds = %59
  br i1 %10, label %114, label %99

99:                                               ; preds = %51, %98
  %100 = phi %"class.v8::internal::Handle.1328"* [ %52, %51 ], [ %70, %98 ]
  %101 = load i64, i64* %3, align 8
  %102 = and i64 %101, -4294967296
  %103 = add i64 %101, -1
  %104 = inttoptr i64 %103 to i32*
  %105 = load atomic i32, i32* %104 monotonic, align 4
  %106 = zext i32 %105 to i64
  %107 = or i64 %102, %106
  %108 = add i64 %107, 7
  %109 = inttoptr i64 %108 to i16*
  %110 = load atomic i16, i16* %109 monotonic, align 2
  %111 = icmp ult i16 %110, 32
  br i1 %111, label %114, label %112

112:                                              ; preds = %99
  %113 = bitcast %"class.v8::internal::Handle.1328"* %100 to i64*
  store i64 0, i64* %113, align 8
  br label %114

114:                                              ; preds = %98, %51, %99, %112, %96
  tail call void @_ZN2v88internal14LookupIterator5StartILb1EEEvv(%"class.v8::internal::LookupIterator"* %0) #6
  br label %134

115:                                              ; preds = %33
  %116 = load i64, i64* %3, align 8
  %117 = and i64 %116, -4294967296
  %118 = add i64 %116, -1
  %119 = inttoptr i64 %118 to i32*
  %120 = load atomic i32, i32* %119 monotonic, align 4
  %121 = zext i32 %120 to i64
  %122 = or i64 %117, %121
  %123 = add i64 %122, 7
  %124 = inttoptr i64 %123 to i16*
  %125 = load atomic i16, i16* %124 monotonic, align 2
  %126 = and i16 %125, -32
  %127 = icmp eq i16 %126, 32
  br i1 %127, label %128, label %132

128:                                              ; preds = %115
  %129 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 5, i32 0, i32 0, i32 0
  %130 = load %"class.v8::internal::StringTable"*, %"class.v8::internal::StringTable"** %129, align 8
  %131 = tail call i64* @_ZN2v88internal11StringTable12LookupStringEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::StringTable"* %130, %"class.v8::internal::Isolate"* %1, i64* %3) #6
  br label %132

132:                                              ; preds = %115, %128
  %133 = phi i64* [ %131, %128 ], [ %3, %115 ]
  store i64* %133, i64** %40, align 8
  tail call void @_ZN2v88internal14LookupIterator5StartILb0EEEvv(%"class.v8::internal::LookupIterator"* %0) #6
  br label %134

134:                                              ; preds = %132, %114
  ret void
}

declare i64* @_ZN2v88internal7Factory12SizeToStringEmb(%"class.v8::internal::Factory"*, i64, i1 zeroext) local_unnamed_addr #3

declare void @_ZN2v88internal14LookupIterator5StartILb1EEEvv(%"class.v8::internal::LookupIterator"*) local_unnamed_addr #3

declare void @_ZN2v88internal14LookupIterator5StartILb0EEEvv(%"class.v8::internal::LookupIterator"*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17PrototypeIterator7AdvanceEv(%"class.v8::internal::PrototypeIterator"*) local_unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.v8::internal::Handle.975", %"class.v8::internal::Handle.975"* %2, i64 0, i32 0, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = icmp eq i64* %4, null
  br i1 %5, label %6, label %28

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, 1
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %47, label %11

11:                                               ; preds = %6
  %12 = and i64 %8, -4294967296
  %13 = add i64 %8, -1
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = zext i32 %15 to i64
  %17 = or i64 %12, %16
  %18 = add i64 %17, 7
  %19 = inttoptr i64 %18 to i16*
  %20 = load atomic i16, i16* %19 monotonic, align 2
  %21 = icmp eq i16 %20, 188
  br i1 %21, label %22, label %47

22:                                               ; preds = %11
  %23 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 4
  store i8 1, i8* %23, align 4
  %24 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 0
  %25 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %25, i64 0, i32 0, i32 7, i32 0, i64 6
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %7, align 8
  br label %104

28:                                               ; preds = %1
  %29 = load i64, i64* %4, align 8
  %30 = and i64 %29, -4294967296
  %31 = add i64 %29, -1
  %32 = inttoptr i64 %31 to i32*
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = zext i32 %33 to i64
  %35 = or i64 %30, %34
  %36 = add i64 %35, 7
  %37 = inttoptr i64 %36 to i16*
  %38 = load atomic i16, i16* %37 monotonic, align 2
  %39 = icmp eq i16 %38, 188
  br i1 %39, label %40, label %47

40:                                               ; preds = %28
  %41 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 4
  store i8 1, i8* %41, align 4
  %42 = bitcast %"class.v8::internal::PrototypeIterator"* %0 to %"class.v8::internal::Factory"**
  %43 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %43, i64 176
  %45 = ptrtoint %"class.v8::internal::Factory"* %44 to i64
  %46 = bitcast %"class.v8::internal::Handle.975"* %2 to i64*
  store i64 %45, i64* %46, align 8
  br label %104

47:                                               ; preds = %6, %11, %28
  %48 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 2, i32 0, i32 0
  %49 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 1, i32 0, i32 0
  %50 = select i1 %5, i64* %49, i64* %4
  %51 = load i64, i64* %50, align 8
  %52 = and i64 %51, -4294967296
  %53 = add i64 %51, -1
  %54 = inttoptr i64 %53 to i32*
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = zext i32 %55 to i64
  %57 = or i64 %52, %56
  %58 = add i64 %57, 15
  %59 = inttoptr i64 %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %52, %61
  %63 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 0
  %64 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %64, i64 0, i32 0, i32 7, i32 0, i64 6
  %66 = load i64, i64* %65, align 8
  %67 = trunc i64 %66 to i32
  %68 = icmp eq i32 %60, %67
  br i1 %68, label %79, label %69

69:                                               ; preds = %47
  %70 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 3
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %73, label %79

73:                                               ; preds = %69
  %74 = add i64 %57, 7
  %75 = inttoptr i64 %74 to i16*
  %76 = load atomic i16, i16* %75 monotonic, align 2
  %77 = icmp ne i16 %76, 190
  %78 = zext i1 %77 to i8
  br label %79

79:                                               ; preds = %73, %69, %47
  %80 = phi i8 [ 1, %47 ], [ 0, %69 ], [ %78, %73 ]
  %81 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 4
  store i8 %80, i8* %81, align 4
  br i1 %5, label %82, label %83

82:                                               ; preds = %79
  store i64 %62, i64* %49, align 8
  br label %104

83:                                               ; preds = %79
  %84 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %64, i64 0, i32 31, i32 4
  %85 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %84, align 8
  %86 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %85, null
  br i1 %86, label %89, label %87

87:                                               ; preds = %83
  %88 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %85, i64 %62) #6
  br label %102

89:                                               ; preds = %83
  %90 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %64, i64 0, i32 31, i32 0
  %91 = load i64*, i64** %90, align 8
  %92 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %64, i64 0, i32 31, i32 1
  %93 = load i64*, i64** %92, align 8
  %94 = icmp eq i64* %91, %93
  br i1 %94, label %95, label %97

95:                                               ; preds = %89
  %96 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %64) #6
  br label %97

97:                                               ; preds = %95, %89
  %98 = phi i64* [ %96, %95 ], [ %91, %89 ]
  %99 = ptrtoint i64* %98 to i64
  %100 = add i64 %99, 8
  %101 = inttoptr i64 %100 to i64*
  store i64* %101, i64** %90, align 8
  store i64 %62, i64* %98, align 8
  br label %102

102:                                              ; preds = %97, %87
  %103 = phi i64* [ %88, %87 ], [ %98, %97 ]
  store i64* %103, i64** %48, align 8
  br label %104

104:                                              ; preds = %102, %82, %40, %22
  ret void
}

declare i64 @_ZN2v88internal7Context13global_objectEv(%"class.v8::internal::Context"*) local_unnamed_addr #3

declare void @_ZN2v88internal6PrintFEPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK2v88internal14Representation8MnemonicEv(%"class.v8::internal::Representation"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Representation", %"class.v8::internal::Representation"* %0, i64 0, i32 0
  %3 = load i8, i8* %2, align 1
  %4 = icmp ult i8 %3, 6
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0)) #9
  unreachable

6:                                                ; preds = %1
  %7 = sext i8 %3 to i64
  %8 = getelementptr inbounds [6 x i8*], [6 x i8*]* @switch.table._ZNK2v88internal14Representation8MnemonicEv, i64 0, i64 %7
  %9 = load i8*, i8** %8, align 8
  ret i8* %9
}

declare i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"*, i64) local_unnamed_addr #3

declare i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #3

declare i32 @_ZN2v88internal8SNPrintFENS0_6VectorIcEEPKcz(i8*, i64, i8*, ...) local_unnamed_addr #3

declare i64* @_ZN2v88internal7Factory20NewStringFromOneByteERKNS0_6VectorIKhEENS0_14AllocationTypeE(%"class.v8::internal::Factory"*, %"class.v8::internal::Vector.1459"* dereferenceable(16), i8 zeroext) local_unnamed_addr #3

declare i32 @_ZN2v88internal6String7IndexOfEPNS0_7IsolateENS0_6HandleIS1_EES5_i(%"class.v8::internal::Isolate"*, i64*, i64*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2v88internal12_GLOBAL__N_118AppendFileLocationEPNS0_7IsolateENS0_6HandleINS0_14StackFrameInfoEEEPNS0_24IncrementalStringBuilderE(%"class.v8::internal::Isolate"*, i64*, %"class.v8::internal::IncrementalStringBuilder"*) unnamed_addr #0 {
  %4 = alloca [100 x i8], align 16
  %5 = alloca %"class.v8::internal::Handle<v8::internal::StackFrameInfo>::ObjectRef", align 8
  %6 = bitcast %"class.v8::internal::Handle<v8::internal::StackFrameInfo>::ObjectRef"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = load i64, i64* %1, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::StackFrameInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::StackFrameInfo>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::StackFrameInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::StackFrameInfo>::ObjectRef"* %5, i64 0, i32 0
  %10 = call i64 @_ZNK2v88internal14StackFrameInfo24GetScriptNameOrSourceURLEv(%"class.v8::internal::StackFrameInfo"* nonnull %9)
  %11 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %12 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %11, align 8
  %13 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %3
  %15 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %12, i64 %10) #6
  %16 = load i64, i64* %15, align 8
  br label %30

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %21 = load i64*, i64** %20, align 8
  %22 = icmp eq i64* %19, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %17
  %24 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %25

25:                                               ; preds = %23, %17
  %26 = phi i64* [ %24, %23 ], [ %19, %17 ]
  %27 = ptrtoint i64* %26 to i64
  %28 = add i64 %27, 8
  %29 = inttoptr i64 %28 to i64*
  store i64* %29, i64** %18, align 8
  store i64 %10, i64* %26, align 8
  br label %30

30:                                               ; preds = %14, %25
  %31 = phi i64 [ %16, %14 ], [ %10, %25 ]
  %32 = phi i64* [ %15, %14 ], [ %26, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  %33 = and i64 %31, 1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %46, label %35

35:                                               ; preds = %30
  %36 = and i64 %31, -4294967296
  %37 = add i64 %31, -1
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %36, %40
  %42 = add i64 %41, 7
  %43 = inttoptr i64 %42 to i16*
  %44 = load atomic i16, i16* %43 monotonic, align 2
  %45 = icmp ult i16 %44, 64
  br i1 %45, label %206, label %46

46:                                               ; preds = %30, %35
  %47 = load i64, i64* %1, align 8
  %48 = add i64 %47, 19
  %49 = inttoptr i64 %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = and i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = and i64 %47, -4294967296
  br i1 %52, label %70, label %54

54:                                               ; preds = %46
  %55 = add i64 %47, 3
  %56 = inttoptr i64 %55 to i32*
  %57 = load i32, i32* %56, align 4
  %58 = zext i32 %57 to i64
  %59 = or i64 %53, %58
  %60 = add i64 %59, 111
  %61 = inttoptr i64 %60 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  %64 = or i64 %53, %63
  %65 = add i64 %64, 19
  %66 = inttoptr i64 %65 to i32*
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i64
  %69 = or i64 %53, %68
  br label %116

70:                                               ; preds = %46
  %71 = add i64 %47, 7
  %72 = inttoptr i64 %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = zext i32 %73 to i64
  %75 = or i64 %53, %74
  %76 = add i64 %75, 11
  %77 = inttoptr i64 %76 to i32*
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = zext i32 %78 to i64
  %80 = or i64 %53, %79
  %81 = add i64 %80, 15
  %82 = inttoptr i64 %81 to i32*
  %83 = load atomic i32, i32* %82 acquire, align 4
  %84 = zext i32 %83 to i64
  %85 = or i64 %53, %84
  %86 = add i64 %85, -1
  %87 = inttoptr i64 %86 to i32*
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = zext i32 %88 to i64
  %90 = or i64 %53, %89
  %91 = add i64 %90, 7
  %92 = inttoptr i64 %91 to i16*
  %93 = load atomic i16, i16* %92 monotonic, align 2
  %94 = icmp eq i16 %93, 100
  br i1 %94, label %95, label %101

95:                                               ; preds = %70
  %96 = add i64 %85, 11
  %97 = inttoptr i64 %96 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = zext i32 %98 to i64
  %100 = or i64 %53, %99
  br label %101

101:                                              ; preds = %95, %70
  %102 = phi i64 [ %100, %95 ], [ %85, %70 ]
  %103 = and i64 %102, 1
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %206, label %105

105:                                              ; preds = %101
  %106 = and i64 %102, -4294967296
  %107 = add i64 %102, -1
  %108 = inttoptr i64 %107 to i32*
  %109 = load atomic i32, i32* %108 monotonic, align 4
  %110 = zext i32 %109 to i64
  %111 = or i64 %106, %110
  %112 = add i64 %111, 7
  %113 = inttoptr i64 %112 to i16*
  %114 = load atomic i16, i16* %113 monotonic, align 2
  %115 = icmp eq i16 %114, 112
  br i1 %115, label %116, label %206

116:                                              ; preds = %54, %105
  %117 = phi i64 [ %69, %54 ], [ %102, %105 ]
  %118 = add i64 %117, 47
  %119 = inttoptr i64 %118 to i32*
  %120 = load i32, i32* %119, align 4
  %121 = and i32 %120, 2
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %206, label %123

123:                                              ; preds = %116
  %124 = load i64, i64* %1, align 8
  %125 = and i64 %124, -262144
  %126 = or i64 %125, 16
  %127 = inttoptr i64 %126 to i64*
  %128 = load i64, i64* %127, align 16
  %129 = add i64 %128, -41416
  %130 = inttoptr i64 %129 to %"class.v8::internal::Isolate"*
  %131 = tail call i64* @_ZN2v88internal14StackFrameInfo9GetScriptEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %130, i64* %1) #6
  %132 = icmp eq i64* %131, null
  br i1 %132, label %140, label %133

133:                                              ; preds = %123
  %134 = load i64, i64* %131, align 8
  %135 = add i64 %134, 47
  %136 = inttoptr i64 %135 to i32*
  %137 = load i32, i32* %136, align 4
  %138 = and i32 %137, 2
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %144

140:                                              ; preds = %133, %123
  %141 = inttoptr i64 %129 to %"class.v8::internal::Factory"*
  %142 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %141, i64 160
  %143 = bitcast %"class.v8::internal::Factory"* %142 to i64*
  br label %148

144:                                              ; preds = %133
  %145 = tail call fastcc i64* @_ZN2v88internal12_GLOBAL__N_116FormatEvalOriginEPNS0_7IsolateENS0_6HandleINS0_6ScriptEEE(%"class.v8::internal::Isolate"* %130, i64* nonnull %131) #6
  %146 = icmp eq i64* %145, null
  br i1 %146, label %147, label %148, !prof !3

147:                                              ; preds = %144
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29, i64 0, i64 0)) #9
  unreachable

148:                                              ; preds = %140, %144
  %149 = phi i64* [ %143, %140 ], [ %145, %144 ]
  tail call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* %2, i64* %149) #6
  %150 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %151 = load i32, i32* %150, align 8
  %152 = icmp eq i32 %151, 0
  %153 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %154 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %155 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %156 = load i64*, i64** %153, align 8
  %157 = load i64, i64* %156, align 8
  %158 = load i32, i32* %154, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %154, align 4
  br i1 %152, label %169, label %160

160:                                              ; preds = %148
  %161 = shl nsw i32 %158, 1
  %162 = sext i32 %161 to i64
  %163 = add i64 %157, 11
  %164 = add i64 %163, %162
  %165 = inttoptr i64 %164 to i16*
  store i16 44, i16* %165, align 2
  %166 = load i32, i32* %154, align 4
  %167 = load i32, i32* %155, align 8
  %168 = icmp eq i32 %166, %167
  br i1 %168, label %191, label %193

169:                                              ; preds = %148
  %170 = sext i32 %158 to i64
  %171 = add i64 %157, 11
  %172 = add i64 %171, %170
  %173 = inttoptr i64 %172 to i8*
  store i8 44, i8* %173, align 1
  %174 = load i32, i32* %154, align 4
  %175 = load i32, i32* %155, align 8
  %176 = icmp eq i32 %174, %175
  br i1 %176, label %177, label %179

177:                                              ; preds = %169
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %178 = load i32, i32* %154, align 4
  br label %179

179:                                              ; preds = %177, %169
  %180 = phi i32 [ %178, %177 ], [ %174, %169 ]
  %181 = load i64*, i64** %153, align 8
  %182 = load i64, i64* %181, align 8
  %183 = add nsw i32 %180, 1
  store i32 %183, i32* %154, align 4
  %184 = sext i32 %180 to i64
  %185 = add i64 %182, 11
  %186 = add i64 %185, %184
  %187 = inttoptr i64 %186 to i8*
  store i8 32, i8* %187, align 1
  %188 = load i32, i32* %154, align 4
  %189 = load i32, i32* %155, align 8
  %190 = icmp eq i32 %188, %189
  br i1 %190, label %805, label %206

191:                                              ; preds = %160
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %192 = load i32, i32* %154, align 4
  br label %193

193:                                              ; preds = %191, %160
  %194 = phi i32 [ %192, %191 ], [ %166, %160 ]
  %195 = load i64*, i64** %153, align 8
  %196 = load i64, i64* %195, align 8
  %197 = add nsw i32 %194, 1
  store i32 %197, i32* %154, align 4
  %198 = shl nsw i32 %194, 1
  %199 = sext i32 %198 to i64
  %200 = add i64 %196, 11
  %201 = add i64 %200, %199
  %202 = inttoptr i64 %201 to i16*
  store i16 32, i16* %202, align 2
  %203 = load i32, i32* %154, align 4
  %204 = load i32, i32* %155, align 8
  %205 = icmp eq i32 %203, %204
  br i1 %205, label %806, label %206

206:                                              ; preds = %193, %806, %179, %805, %116, %101, %105, %35
  %207 = load i64, i64* %32, align 8
  %208 = and i64 %207, 1
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %227, label %210

210:                                              ; preds = %206
  %211 = and i64 %207, -4294967296
  %212 = add i64 %207, -1
  %213 = inttoptr i64 %212 to i32*
  %214 = load atomic i32, i32* %213 monotonic, align 4
  %215 = zext i32 %214 to i64
  %216 = or i64 %211, %215
  %217 = add i64 %216, 7
  %218 = inttoptr i64 %217 to i16*
  %219 = load atomic i16, i16* %218 monotonic, align 2
  %220 = icmp ult i16 %219, 64
  br i1 %220, label %221, label %227

221:                                              ; preds = %210
  %222 = add i64 %207, 7
  %223 = inttoptr i64 %222 to i32*
  %224 = load i32, i32* %223, align 4
  %225 = icmp sgt i32 %224, 0
  br i1 %225, label %226, label %227

226:                                              ; preds = %221
  tail call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* %2, i64* %32) #6
  br label %284

227:                                              ; preds = %206, %210, %221
  %228 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %229 = load i32, i32* %228, align 8
  %230 = icmp eq i32 %229, 0
  %231 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %232 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %233 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %234 = load i64*, i64** %231, align 8
  %235 = load i64, i64* %234, align 8
  %236 = load i32, i32* %232, align 4
  %237 = add nsw i32 %236, 1
  store i32 %237, i32* %232, align 4
  br i1 %230, label %247, label %238

238:                                              ; preds = %227
  %239 = shl nsw i32 %236, 1
  %240 = sext i32 %239 to i64
  %241 = add i64 %235, 11
  %242 = add i64 %241, %240
  %243 = inttoptr i64 %242 to i16*
  store i16 60, i16* %243, align 2
  %244 = load i32, i32* %232, align 4
  %245 = load i32, i32* %233, align 8
  %246 = icmp eq i32 %244, %245
  br i1 %246, label %269, label %271

247:                                              ; preds = %227
  %248 = sext i32 %236 to i64
  %249 = add i64 %235, 11
  %250 = add i64 %249, %248
  %251 = inttoptr i64 %250 to i8*
  store i8 60, i8* %251, align 1
  %252 = load i32, i32* %232, align 4
  %253 = load i32, i32* %233, align 8
  %254 = icmp eq i32 %252, %253
  br i1 %254, label %255, label %257

255:                                              ; preds = %247
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %256 = load i32, i32* %232, align 4
  br label %257

257:                                              ; preds = %255, %247
  %258 = phi i32 [ %256, %255 ], [ %252, %247 ]
  %259 = load i64*, i64** %231, align 8
  %260 = load i64, i64* %259, align 8
  %261 = add nsw i32 %258, 1
  store i32 %261, i32* %232, align 4
  %262 = sext i32 %258 to i64
  %263 = add i64 %260, 11
  %264 = add i64 %263, %262
  %265 = inttoptr i64 %264 to i8*
  store i8 97, i8* %265, align 1
  %266 = load i32, i32* %232, align 4
  %267 = load i32, i32* %233, align 8
  %268 = icmp eq i32 %266, %267
  br i1 %268, label %542, label %544

269:                                              ; preds = %238
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %270 = load i32, i32* %232, align 4
  br label %271

271:                                              ; preds = %269, %238
  %272 = phi i32 [ %270, %269 ], [ %244, %238 ]
  %273 = load i64*, i64** %231, align 8
  %274 = load i64, i64* %273, align 8
  %275 = add nsw i32 %272, 1
  store i32 %275, i32* %232, align 4
  %276 = shl nsw i32 %272, 1
  %277 = sext i32 %276 to i64
  %278 = add i64 %274, 11
  %279 = add i64 %278, %277
  %280 = inttoptr i64 %279 to i16*
  store i16 97, i16* %280, align 2
  %281 = load i32, i32* %232, align 4
  %282 = load i32, i32* %233, align 8
  %283 = icmp eq i32 %281, %282
  br i1 %283, label %669, label %671

284:                                              ; preds = %791, %804, %656, %668, %226
  %285 = load i64, i64* %1, align 8
  %286 = add i64 %285, 19
  %287 = inttoptr i64 %286 to i32*
  %288 = load i32, i32* %287, align 4
  %289 = and i32 %288, 6
  %290 = icmp eq i32 %289, 2
  br i1 %290, label %328, label %291

291:                                              ; preds = %284
  %292 = and i64 %285, -262144
  %293 = or i64 %292, 16
  %294 = inttoptr i64 %293 to i64*
  %295 = load i64, i64* %294, align 16
  %296 = add i64 %295, -41416
  %297 = inttoptr i64 %296 to %"class.v8::internal::Isolate"*
  %298 = tail call i64* @_ZN2v88internal14StackFrameInfo9GetScriptEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %297, i64* %1) #6
  %299 = icmp eq i64* %298, null
  br i1 %299, label %541, label %300

300:                                              ; preds = %291
  %301 = load i64, i64* %1, align 8
  %302 = add i64 %301, 19
  %303 = inttoptr i64 %302 to i32*
  %304 = load i32, i32* %303, align 4
  %305 = trunc i32 %304 to i8
  %306 = icmp sgt i8 %305, -1
  %307 = add i64 %301, 15
  %308 = inttoptr i64 %307 to i32*
  %309 = load i32, i32* %308, align 4
  %310 = ashr i32 %309, 1
  br i1 %306, label %311, label %323

311:                                              ; preds = %300
  %312 = tail call i32 @_ZN2v88internal14StackFrameInfo21ComputeSourcePositionENS0_6HandleIS1_EEi(i64* %1, i32 %310) #6
  %313 = load i64, i64* %1, align 8
  %314 = shl i32 %312, 1
  %315 = add i64 %313, 15
  %316 = inttoptr i64 %315 to i32*
  store atomic volatile i32 %314, i32* %316 monotonic, align 4
  %317 = load i64, i64* %1, align 8
  %318 = add i64 %317, 19
  %319 = inttoptr i64 %318 to i32*
  %320 = load i32, i32* %319, align 4
  %321 = and i32 %320, -130
  %322 = or i32 %321, 128
  store atomic volatile i32 %322, i32* %319 monotonic, align 4
  br label %323

323:                                              ; preds = %300, %311
  %324 = phi i32 [ %312, %311 ], [ %310, %300 ]
  %325 = tail call i32 @_ZN2v88internal6Script13GetLineNumberENS0_6HandleIS1_EEi(i64* nonnull %298, i32 %324) #6
  %326 = add nsw i32 %325, 1
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %541, label %328

328:                                              ; preds = %284, %323
  %329 = phi i32 [ %326, %323 ], [ 1, %284 ]
  %330 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %331 = load i32, i32* %330, align 8
  %332 = icmp eq i32 %331, 0
  %333 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %334 = load i64*, i64** %333, align 8
  %335 = load i64, i64* %334, align 8
  %336 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %337 = load i32, i32* %336, align 4
  %338 = add nsw i32 %337, 1
  store i32 %338, i32* %336, align 4
  br i1 %332, label %339, label %349

339:                                              ; preds = %328
  %340 = sext i32 %337 to i64
  %341 = add i64 %335, 11
  %342 = add i64 %341, %340
  %343 = inttoptr i64 %342 to i8*
  store i8 58, i8* %343, align 1
  %344 = load i32, i32* %336, align 4
  %345 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %346 = load i32, i32* %345, align 8
  %347 = icmp eq i32 %344, %346
  br i1 %347, label %348, label %360

348:                                              ; preds = %339
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %360

349:                                              ; preds = %328
  %350 = shl nsw i32 %337, 1
  %351 = sext i32 %350 to i64
  %352 = add i64 %335, 11
  %353 = add i64 %352, %351
  %354 = inttoptr i64 %353 to i16*
  store i16 58, i16* %354, align 2
  %355 = load i32, i32* %336, align 4
  %356 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %357 = load i32, i32* %356, align 8
  %358 = icmp eq i32 %355, %357
  br i1 %358, label %359, label %360

359:                                              ; preds = %349
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %360

360:                                              ; preds = %339, %348, %349, %359
  %361 = getelementptr inbounds [100 x i8], [100 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %361) #6
  %362 = call i8* @_ZN2v88internal12IntToCStringEiNS0_6VectorIcEE(i32 %329, i8* nonnull %361, i64 100) #6
  %363 = load i32, i32* %330, align 8
  %364 = icmp eq i32 %363, 0
  %365 = load i8, i8* %362, align 1
  %366 = icmp eq i8 %365, 0
  br i1 %364, label %370, label %367

367:                                              ; preds = %360
  br i1 %366, label %413, label %368

368:                                              ; preds = %367
  %369 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  br label %392

370:                                              ; preds = %360
  br i1 %366, label %413, label %371

371:                                              ; preds = %370
  %372 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  br label %373

373:                                              ; preds = %389, %371
  %374 = phi i8 [ %365, %371 ], [ %390, %389 ]
  %375 = phi i8* [ %362, %371 ], [ %376, %389 ]
  %376 = getelementptr inbounds i8, i8* %375, i64 1
  %377 = load i64*, i64** %333, align 8
  %378 = load i64, i64* %377, align 8
  %379 = load i32, i32* %336, align 4
  %380 = add nsw i32 %379, 1
  store i32 %380, i32* %336, align 4
  %381 = sext i32 %379 to i64
  %382 = add i64 %378, 11
  %383 = add i64 %382, %381
  %384 = inttoptr i64 %383 to i8*
  store i8 %374, i8* %384, align 1
  %385 = load i32, i32* %336, align 4
  %386 = load i32, i32* %372, align 8
  %387 = icmp eq i32 %385, %386
  br i1 %387, label %388, label %389

388:                                              ; preds = %373
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %389

389:                                              ; preds = %388, %373
  %390 = load i8, i8* %376, align 1
  %391 = icmp eq i8 %390, 0
  br i1 %391, label %413, label %373

392:                                              ; preds = %410, %368
  %393 = phi i8 [ %365, %368 ], [ %411, %410 ]
  %394 = phi i8* [ %362, %368 ], [ %395, %410 ]
  %395 = getelementptr inbounds i8, i8* %394, i64 1
  %396 = load i64*, i64** %333, align 8
  %397 = load i64, i64* %396, align 8
  %398 = load i32, i32* %336, align 4
  %399 = add nsw i32 %398, 1
  store i32 %399, i32* %336, align 4
  %400 = zext i8 %393 to i16
  %401 = shl nsw i32 %398, 1
  %402 = sext i32 %401 to i64
  %403 = add i64 %397, 11
  %404 = add i64 %403, %402
  %405 = inttoptr i64 %404 to i16*
  store i16 %400, i16* %405, align 2
  %406 = load i32, i32* %336, align 4
  %407 = load i32, i32* %369, align 8
  %408 = icmp eq i32 %406, %407
  br i1 %408, label %409, label %410

409:                                              ; preds = %392
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %410

410:                                              ; preds = %409, %392
  %411 = load i8, i8* %395, align 1
  %412 = icmp eq i8 %411, 0
  br i1 %412, label %413, label %392

413:                                              ; preds = %410, %389, %367, %370
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %361) #6
  %414 = load i64, i64* %1, align 8
  %415 = and i64 %414, -262144
  %416 = or i64 %415, 16
  %417 = inttoptr i64 %416 to i64*
  %418 = load i64, i64* %417, align 16
  %419 = add i64 %418, -41416
  %420 = inttoptr i64 %419 to %"class.v8::internal::Isolate"*
  %421 = add i64 %414, 19
  %422 = inttoptr i64 %421 to i32*
  %423 = load i32, i32* %422, align 4
  %424 = trunc i32 %423 to i8
  %425 = icmp sgt i8 %424, -1
  %426 = add i64 %414, 15
  %427 = inttoptr i64 %426 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = ashr i32 %428, 1
  br i1 %425, label %430, label %446

430:                                              ; preds = %413
  %431 = call i32 @_ZN2v88internal14StackFrameInfo21ComputeSourcePositionENS0_6HandleIS1_EEi(i64* %1, i32 %429) #6
  %432 = load i64, i64* %1, align 8
  %433 = shl i32 %431, 1
  %434 = add i64 %432, 15
  %435 = inttoptr i64 %434 to i32*
  store atomic volatile i32 %433, i32* %435 monotonic, align 4
  %436 = load i64, i64* %1, align 8
  %437 = add i64 %436, 19
  %438 = inttoptr i64 %437 to i32*
  %439 = load i32, i32* %438, align 4
  %440 = and i32 %439, -130
  %441 = or i32 %440, 128
  store atomic volatile i32 %441, i32* %438 monotonic, align 4
  %442 = load i64, i64* %1, align 8
  %443 = add i64 %442, 19
  %444 = inttoptr i64 %443 to i32*
  %445 = load i32, i32* %444, align 4
  br label %446

446:                                              ; preds = %430, %413
  %447 = phi i32 [ %423, %413 ], [ %445, %430 ]
  %448 = phi i32 [ %429, %413 ], [ %431, %430 ]
  %449 = and i32 %447, 6
  %450 = icmp eq i32 %449, 2
  br i1 %450, label %456, label %451

451:                                              ; preds = %446
  %452 = call i64* @_ZN2v88internal14StackFrameInfo9GetScriptEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %420, i64* %1) #6
  %453 = icmp eq i64* %452, null
  br i1 %453, label %541, label %454

454:                                              ; preds = %451
  %455 = call i32 @_ZN2v88internal6Script15GetColumnNumberENS0_6HandleIS1_EEi(i64* nonnull %452, i32 %448) #6
  br label %456

456:                                              ; preds = %446, %454
  %457 = phi i32 [ %455, %454 ], [ %448, %446 ]
  %458 = add nsw i32 %457, 1
  %459 = icmp eq i32 %458, 0
  br i1 %459, label %541, label %460

460:                                              ; preds = %456
  %461 = load i32, i32* %330, align 8
  %462 = icmp eq i32 %461, 0
  %463 = load i64*, i64** %333, align 8
  %464 = load i64, i64* %463, align 8
  %465 = load i32, i32* %336, align 4
  %466 = add nsw i32 %465, 1
  store i32 %466, i32* %336, align 4
  br i1 %462, label %467, label %477

467:                                              ; preds = %460
  %468 = sext i32 %465 to i64
  %469 = add i64 %464, 11
  %470 = add i64 %469, %468
  %471 = inttoptr i64 %470 to i8*
  store i8 58, i8* %471, align 1
  %472 = load i32, i32* %336, align 4
  %473 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %474 = load i32, i32* %473, align 8
  %475 = icmp eq i32 %472, %474
  br i1 %475, label %476, label %488

476:                                              ; preds = %467
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %488

477:                                              ; preds = %460
  %478 = shl nsw i32 %465, 1
  %479 = sext i32 %478 to i64
  %480 = add i64 %464, 11
  %481 = add i64 %480, %479
  %482 = inttoptr i64 %481 to i16*
  store i16 58, i16* %482, align 2
  %483 = load i32, i32* %336, align 4
  %484 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %485 = load i32, i32* %484, align 8
  %486 = icmp eq i32 %483, %485
  br i1 %486, label %487, label %488

487:                                              ; preds = %477
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %488

488:                                              ; preds = %467, %476, %477, %487
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %361) #6
  %489 = call i8* @_ZN2v88internal12IntToCStringEiNS0_6VectorIcEE(i32 %458, i8* nonnull %361, i64 100) #6
  %490 = load i32, i32* %330, align 8
  %491 = icmp eq i32 %490, 0
  %492 = load i8, i8* %489, align 1
  %493 = icmp eq i8 %492, 0
  br i1 %491, label %497, label %494

494:                                              ; preds = %488
  br i1 %493, label %540, label %495

495:                                              ; preds = %494
  %496 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  br label %519

497:                                              ; preds = %488
  br i1 %493, label %540, label %498

498:                                              ; preds = %497
  %499 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  br label %500

500:                                              ; preds = %516, %498
  %501 = phi i8 [ %492, %498 ], [ %517, %516 ]
  %502 = phi i8* [ %489, %498 ], [ %503, %516 ]
  %503 = getelementptr inbounds i8, i8* %502, i64 1
  %504 = load i64*, i64** %333, align 8
  %505 = load i64, i64* %504, align 8
  %506 = load i32, i32* %336, align 4
  %507 = add nsw i32 %506, 1
  store i32 %507, i32* %336, align 4
  %508 = sext i32 %506 to i64
  %509 = add i64 %505, 11
  %510 = add i64 %509, %508
  %511 = inttoptr i64 %510 to i8*
  store i8 %501, i8* %511, align 1
  %512 = load i32, i32* %336, align 4
  %513 = load i32, i32* %499, align 8
  %514 = icmp eq i32 %512, %513
  br i1 %514, label %515, label %516

515:                                              ; preds = %500
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %516

516:                                              ; preds = %515, %500
  %517 = load i8, i8* %503, align 1
  %518 = icmp eq i8 %517, 0
  br i1 %518, label %540, label %500

519:                                              ; preds = %537, %495
  %520 = phi i8 [ %492, %495 ], [ %538, %537 ]
  %521 = phi i8* [ %489, %495 ], [ %522, %537 ]
  %522 = getelementptr inbounds i8, i8* %521, i64 1
  %523 = load i64*, i64** %333, align 8
  %524 = load i64, i64* %523, align 8
  %525 = load i32, i32* %336, align 4
  %526 = add nsw i32 %525, 1
  store i32 %526, i32* %336, align 4
  %527 = zext i8 %520 to i16
  %528 = shl nsw i32 %525, 1
  %529 = sext i32 %528 to i64
  %530 = add i64 %524, 11
  %531 = add i64 %530, %529
  %532 = inttoptr i64 %531 to i16*
  store i16 %527, i16* %532, align 2
  %533 = load i32, i32* %336, align 4
  %534 = load i32, i32* %496, align 8
  %535 = icmp eq i32 %533, %534
  br i1 %535, label %536, label %537

536:                                              ; preds = %519
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %537

537:                                              ; preds = %536, %519
  %538 = load i8, i8* %522, align 1
  %539 = icmp eq i8 %538, 0
  br i1 %539, label %540, label %519

540:                                              ; preds = %537, %516, %494, %497
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %361) #6
  br label %541

541:                                              ; preds = %451, %291, %540, %456, %323
  ret void

542:                                              ; preds = %257
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %543 = load i32, i32* %232, align 4
  br label %544

544:                                              ; preds = %542, %257
  %545 = phi i32 [ %543, %542 ], [ %266, %257 ]
  %546 = load i64*, i64** %231, align 8
  %547 = load i64, i64* %546, align 8
  %548 = add nsw i32 %545, 1
  store i32 %548, i32* %232, align 4
  %549 = sext i32 %545 to i64
  %550 = add i64 %547, 11
  %551 = add i64 %550, %549
  %552 = inttoptr i64 %551 to i8*
  store i8 110, i8* %552, align 1
  %553 = load i32, i32* %232, align 4
  %554 = load i32, i32* %233, align 8
  %555 = icmp eq i32 %553, %554
  br i1 %555, label %556, label %558

556:                                              ; preds = %544
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %557 = load i32, i32* %232, align 4
  br label %558

558:                                              ; preds = %556, %544
  %559 = phi i32 [ %557, %556 ], [ %553, %544 ]
  %560 = load i64*, i64** %231, align 8
  %561 = load i64, i64* %560, align 8
  %562 = add nsw i32 %559, 1
  store i32 %562, i32* %232, align 4
  %563 = sext i32 %559 to i64
  %564 = add i64 %561, 11
  %565 = add i64 %564, %563
  %566 = inttoptr i64 %565 to i8*
  store i8 111, i8* %566, align 1
  %567 = load i32, i32* %232, align 4
  %568 = load i32, i32* %233, align 8
  %569 = icmp eq i32 %567, %568
  br i1 %569, label %570, label %572

570:                                              ; preds = %558
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %571 = load i32, i32* %232, align 4
  br label %572

572:                                              ; preds = %570, %558
  %573 = phi i32 [ %571, %570 ], [ %567, %558 ]
  %574 = load i64*, i64** %231, align 8
  %575 = load i64, i64* %574, align 8
  %576 = add nsw i32 %573, 1
  store i32 %576, i32* %232, align 4
  %577 = sext i32 %573 to i64
  %578 = add i64 %575, 11
  %579 = add i64 %578, %577
  %580 = inttoptr i64 %579 to i8*
  store i8 110, i8* %580, align 1
  %581 = load i32, i32* %232, align 4
  %582 = load i32, i32* %233, align 8
  %583 = icmp eq i32 %581, %582
  br i1 %583, label %584, label %586

584:                                              ; preds = %572
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %585 = load i32, i32* %232, align 4
  br label %586

586:                                              ; preds = %584, %572
  %587 = phi i32 [ %585, %584 ], [ %581, %572 ]
  %588 = load i64*, i64** %231, align 8
  %589 = load i64, i64* %588, align 8
  %590 = add nsw i32 %587, 1
  store i32 %590, i32* %232, align 4
  %591 = sext i32 %587 to i64
  %592 = add i64 %589, 11
  %593 = add i64 %592, %591
  %594 = inttoptr i64 %593 to i8*
  store i8 121, i8* %594, align 1
  %595 = load i32, i32* %232, align 4
  %596 = load i32, i32* %233, align 8
  %597 = icmp eq i32 %595, %596
  br i1 %597, label %598, label %600

598:                                              ; preds = %586
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %599 = load i32, i32* %232, align 4
  br label %600

600:                                              ; preds = %598, %586
  %601 = phi i32 [ %599, %598 ], [ %595, %586 ]
  %602 = load i64*, i64** %231, align 8
  %603 = load i64, i64* %602, align 8
  %604 = add nsw i32 %601, 1
  store i32 %604, i32* %232, align 4
  %605 = sext i32 %601 to i64
  %606 = add i64 %603, 11
  %607 = add i64 %606, %605
  %608 = inttoptr i64 %607 to i8*
  store i8 109, i8* %608, align 1
  %609 = load i32, i32* %232, align 4
  %610 = load i32, i32* %233, align 8
  %611 = icmp eq i32 %609, %610
  br i1 %611, label %612, label %614

612:                                              ; preds = %600
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %613 = load i32, i32* %232, align 4
  br label %614

614:                                              ; preds = %612, %600
  %615 = phi i32 [ %613, %612 ], [ %609, %600 ]
  %616 = load i64*, i64** %231, align 8
  %617 = load i64, i64* %616, align 8
  %618 = add nsw i32 %615, 1
  store i32 %618, i32* %232, align 4
  %619 = sext i32 %615 to i64
  %620 = add i64 %617, 11
  %621 = add i64 %620, %619
  %622 = inttoptr i64 %621 to i8*
  store i8 111, i8* %622, align 1
  %623 = load i32, i32* %232, align 4
  %624 = load i32, i32* %233, align 8
  %625 = icmp eq i32 %623, %624
  br i1 %625, label %626, label %628

626:                                              ; preds = %614
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %627 = load i32, i32* %232, align 4
  br label %628

628:                                              ; preds = %626, %614
  %629 = phi i32 [ %627, %626 ], [ %623, %614 ]
  %630 = load i64*, i64** %231, align 8
  %631 = load i64, i64* %630, align 8
  %632 = add nsw i32 %629, 1
  store i32 %632, i32* %232, align 4
  %633 = sext i32 %629 to i64
  %634 = add i64 %631, 11
  %635 = add i64 %634, %633
  %636 = inttoptr i64 %635 to i8*
  store i8 117, i8* %636, align 1
  %637 = load i32, i32* %232, align 4
  %638 = load i32, i32* %233, align 8
  %639 = icmp eq i32 %637, %638
  br i1 %639, label %640, label %642

640:                                              ; preds = %628
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %641 = load i32, i32* %232, align 4
  br label %642

642:                                              ; preds = %640, %628
  %643 = phi i32 [ %641, %640 ], [ %637, %628 ]
  %644 = load i64*, i64** %231, align 8
  %645 = load i64, i64* %644, align 8
  %646 = add nsw i32 %643, 1
  store i32 %646, i32* %232, align 4
  %647 = sext i32 %643 to i64
  %648 = add i64 %645, 11
  %649 = add i64 %648, %647
  %650 = inttoptr i64 %649 to i8*
  store i8 115, i8* %650, align 1
  %651 = load i32, i32* %232, align 4
  %652 = load i32, i32* %233, align 8
  %653 = icmp eq i32 %651, %652
  br i1 %653, label %654, label %656

654:                                              ; preds = %642
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %655 = load i32, i32* %232, align 4
  br label %656

656:                                              ; preds = %654, %642
  %657 = phi i32 [ %655, %654 ], [ %651, %642 ]
  %658 = load i64*, i64** %231, align 8
  %659 = load i64, i64* %658, align 8
  %660 = add nsw i32 %657, 1
  store i32 %660, i32* %232, align 4
  %661 = sext i32 %657 to i64
  %662 = add i64 %659, 11
  %663 = add i64 %662, %661
  %664 = inttoptr i64 %663 to i8*
  store i8 62, i8* %664, align 1
  %665 = load i32, i32* %232, align 4
  %666 = load i32, i32* %233, align 8
  %667 = icmp eq i32 %665, %666
  br i1 %667, label %668, label %284

668:                                              ; preds = %656
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %284

669:                                              ; preds = %271
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %670 = load i32, i32* %232, align 4
  br label %671

671:                                              ; preds = %669, %271
  %672 = phi i32 [ %670, %669 ], [ %281, %271 ]
  %673 = load i64*, i64** %231, align 8
  %674 = load i64, i64* %673, align 8
  %675 = add nsw i32 %672, 1
  store i32 %675, i32* %232, align 4
  %676 = shl nsw i32 %672, 1
  %677 = sext i32 %676 to i64
  %678 = add i64 %674, 11
  %679 = add i64 %678, %677
  %680 = inttoptr i64 %679 to i16*
  store i16 110, i16* %680, align 2
  %681 = load i32, i32* %232, align 4
  %682 = load i32, i32* %233, align 8
  %683 = icmp eq i32 %681, %682
  br i1 %683, label %684, label %686

684:                                              ; preds = %671
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %685 = load i32, i32* %232, align 4
  br label %686

686:                                              ; preds = %684, %671
  %687 = phi i32 [ %685, %684 ], [ %681, %671 ]
  %688 = load i64*, i64** %231, align 8
  %689 = load i64, i64* %688, align 8
  %690 = add nsw i32 %687, 1
  store i32 %690, i32* %232, align 4
  %691 = shl nsw i32 %687, 1
  %692 = sext i32 %691 to i64
  %693 = add i64 %689, 11
  %694 = add i64 %693, %692
  %695 = inttoptr i64 %694 to i16*
  store i16 111, i16* %695, align 2
  %696 = load i32, i32* %232, align 4
  %697 = load i32, i32* %233, align 8
  %698 = icmp eq i32 %696, %697
  br i1 %698, label %699, label %701

699:                                              ; preds = %686
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %700 = load i32, i32* %232, align 4
  br label %701

701:                                              ; preds = %699, %686
  %702 = phi i32 [ %700, %699 ], [ %696, %686 ]
  %703 = load i64*, i64** %231, align 8
  %704 = load i64, i64* %703, align 8
  %705 = add nsw i32 %702, 1
  store i32 %705, i32* %232, align 4
  %706 = shl nsw i32 %702, 1
  %707 = sext i32 %706 to i64
  %708 = add i64 %704, 11
  %709 = add i64 %708, %707
  %710 = inttoptr i64 %709 to i16*
  store i16 110, i16* %710, align 2
  %711 = load i32, i32* %232, align 4
  %712 = load i32, i32* %233, align 8
  %713 = icmp eq i32 %711, %712
  br i1 %713, label %714, label %716

714:                                              ; preds = %701
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %715 = load i32, i32* %232, align 4
  br label %716

716:                                              ; preds = %714, %701
  %717 = phi i32 [ %715, %714 ], [ %711, %701 ]
  %718 = load i64*, i64** %231, align 8
  %719 = load i64, i64* %718, align 8
  %720 = add nsw i32 %717, 1
  store i32 %720, i32* %232, align 4
  %721 = shl nsw i32 %717, 1
  %722 = sext i32 %721 to i64
  %723 = add i64 %719, 11
  %724 = add i64 %723, %722
  %725 = inttoptr i64 %724 to i16*
  store i16 121, i16* %725, align 2
  %726 = load i32, i32* %232, align 4
  %727 = load i32, i32* %233, align 8
  %728 = icmp eq i32 %726, %727
  br i1 %728, label %729, label %731

729:                                              ; preds = %716
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %730 = load i32, i32* %232, align 4
  br label %731

731:                                              ; preds = %729, %716
  %732 = phi i32 [ %730, %729 ], [ %726, %716 ]
  %733 = load i64*, i64** %231, align 8
  %734 = load i64, i64* %733, align 8
  %735 = add nsw i32 %732, 1
  store i32 %735, i32* %232, align 4
  %736 = shl nsw i32 %732, 1
  %737 = sext i32 %736 to i64
  %738 = add i64 %734, 11
  %739 = add i64 %738, %737
  %740 = inttoptr i64 %739 to i16*
  store i16 109, i16* %740, align 2
  %741 = load i32, i32* %232, align 4
  %742 = load i32, i32* %233, align 8
  %743 = icmp eq i32 %741, %742
  br i1 %743, label %744, label %746

744:                                              ; preds = %731
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %745 = load i32, i32* %232, align 4
  br label %746

746:                                              ; preds = %744, %731
  %747 = phi i32 [ %745, %744 ], [ %741, %731 ]
  %748 = load i64*, i64** %231, align 8
  %749 = load i64, i64* %748, align 8
  %750 = add nsw i32 %747, 1
  store i32 %750, i32* %232, align 4
  %751 = shl nsw i32 %747, 1
  %752 = sext i32 %751 to i64
  %753 = add i64 %749, 11
  %754 = add i64 %753, %752
  %755 = inttoptr i64 %754 to i16*
  store i16 111, i16* %755, align 2
  %756 = load i32, i32* %232, align 4
  %757 = load i32, i32* %233, align 8
  %758 = icmp eq i32 %756, %757
  br i1 %758, label %759, label %761

759:                                              ; preds = %746
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %760 = load i32, i32* %232, align 4
  br label %761

761:                                              ; preds = %759, %746
  %762 = phi i32 [ %760, %759 ], [ %756, %746 ]
  %763 = load i64*, i64** %231, align 8
  %764 = load i64, i64* %763, align 8
  %765 = add nsw i32 %762, 1
  store i32 %765, i32* %232, align 4
  %766 = shl nsw i32 %762, 1
  %767 = sext i32 %766 to i64
  %768 = add i64 %764, 11
  %769 = add i64 %768, %767
  %770 = inttoptr i64 %769 to i16*
  store i16 117, i16* %770, align 2
  %771 = load i32, i32* %232, align 4
  %772 = load i32, i32* %233, align 8
  %773 = icmp eq i32 %771, %772
  br i1 %773, label %774, label %776

774:                                              ; preds = %761
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %775 = load i32, i32* %232, align 4
  br label %776

776:                                              ; preds = %774, %761
  %777 = phi i32 [ %775, %774 ], [ %771, %761 ]
  %778 = load i64*, i64** %231, align 8
  %779 = load i64, i64* %778, align 8
  %780 = add nsw i32 %777, 1
  store i32 %780, i32* %232, align 4
  %781 = shl nsw i32 %777, 1
  %782 = sext i32 %781 to i64
  %783 = add i64 %779, 11
  %784 = add i64 %783, %782
  %785 = inttoptr i64 %784 to i16*
  store i16 115, i16* %785, align 2
  %786 = load i32, i32* %232, align 4
  %787 = load i32, i32* %233, align 8
  %788 = icmp eq i32 %786, %787
  br i1 %788, label %789, label %791

789:                                              ; preds = %776
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  %790 = load i32, i32* %232, align 4
  br label %791

791:                                              ; preds = %789, %776
  %792 = phi i32 [ %790, %789 ], [ %786, %776 ]
  %793 = load i64*, i64** %231, align 8
  %794 = load i64, i64* %793, align 8
  %795 = add nsw i32 %792, 1
  store i32 %795, i32* %232, align 4
  %796 = shl nsw i32 %792, 1
  %797 = sext i32 %796 to i64
  %798 = add i64 %794, 11
  %799 = add i64 %798, %797
  %800 = inttoptr i64 %799 to i16*
  store i16 62, i16* %800, align 2
  %801 = load i32, i32* %232, align 4
  %802 = load i32, i32* %233, align 8
  %803 = icmp eq i32 %801, %802
  br i1 %803, label %804, label %284

804:                                              ; preds = %791
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %284

805:                                              ; preds = %179
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %206

806:                                              ; preds = %193
  tail call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* %2) #6
  br label %206
}

declare void @_ZN2v88internal16FlatStringReaderC1EPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::FlatStringReader"*, %"class.v8::internal::Isolate"*, i64*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal11RelocatableD2Ev(%"class.v8::internal::Relocatable"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Relocatable", %"class.v8::internal::Relocatable"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2v88internal11RelocatableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::Relocatable", %"class.v8::internal::Relocatable"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Relocatable", %"class.v8::internal::Relocatable"* %0, i64 0, i32 2
  %6 = bitcast %"class.v8::internal::Relocatable"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %4, i64 0, i32 91
  %9 = bitcast %"class.v8::internal::Relocatable"** %8 to i64*
  store i64 %7, i64* %9, align 8
  ret void
}

declare zeroext i1 @_ZN2v88internal6String10SlowEqualsEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal11RelocatableD0Ev(%"class.v8::internal::Relocatable"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Relocatable", %"class.v8::internal::Relocatable"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2v88internal11RelocatableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::Relocatable", %"class.v8::internal::Relocatable"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Relocatable", %"class.v8::internal::Relocatable"* %0, i64 0, i32 2
  %6 = bitcast %"class.v8::internal::Relocatable"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %4, i64 0, i32 91
  %9 = bitcast %"class.v8::internal::Relocatable"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"class.v8::internal::Relocatable"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal11Relocatable15IterateInstanceEPNS0_11RootVisitorE(%"class.v8::internal::Relocatable"*, %"class.v8::internal::RootVisitor"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal11Relocatable21PostGarbageCollectionEv(%"class.v8::internal::Relocatable"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
