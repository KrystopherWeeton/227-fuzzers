; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/reconinter_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/reconinter_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @av1_build_compound_diffwtd_mask_sse4_1(i8* nocapture, i8 zeroext, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i8 %1, 1
  %10 = select i1 %9, i16 -26, i16 38
  %11 = insertelement <8 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> zeroinitializer
  switch i32 %7, label %23 [
    i32 4, label %16
    i32 8, label %13
  ]

13:                                               ; preds = %8
  %14 = sext i32 %3 to i64
  %15 = sext i32 %5 to i64
  br label %73

16:                                               ; preds = %8
  %17 = sext i32 %3 to i64
  %18 = sext i32 %5 to i64
  %19 = shl i32 %3, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %5, 1
  %22 = sext i32 %21 to i64
  br label %27

23:                                               ; preds = %8
  %24 = sext i32 %3 to i64
  %25 = sext i32 %5 to i64
  %26 = sext i32 %7 to i64
  br label %108

27:                                               ; preds = %16, %27
  %28 = phi i32 [ %71, %27 ], [ 0, %16 ]
  %29 = phi i8* [ %69, %27 ], [ %4, %16 ]
  %30 = phi i8* [ %68, %27 ], [ %2, %16 ]
  %31 = phi i8* [ %70, %27 ], [ %0, %16 ]
  %32 = bitcast i8* %30 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = insertelement <4 x i32> undef, i32 %33, i32 0
  %35 = getelementptr inbounds i8, i8* %30, i64 %17
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = insertelement <4 x i32> %34, i32 %37, i32 1
  %39 = bitcast <4 x i32> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %41 = zext <8 x i8> %40 to <8 x i16>
  %42 = bitcast i8* %29 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = insertelement <4 x i32> undef, i32 %43, i32 0
  %45 = getelementptr inbounds i8, i8* %29, i64 %18
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 4
  %48 = insertelement <4 x i32> %44, i32 %47, i32 1
  %49 = bitcast <4 x i32> %48 to <16 x i8>
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %51 = zext <8 x i8> %50 to <8 x i16>
  %52 = sub nsw <8 x i16> %41, %51
  %53 = sub nsw <8 x i16> zeroinitializer, %52
  %54 = icmp slt <8 x i16> %52, zeroinitializer
  %55 = select <8 x i1> %54, <8 x i16> %53, <8 x i16> %52
  %56 = lshr <8 x i16> %55, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %57 = add <8 x i16> %56, %12
  %58 = sub <8 x i16> zeroinitializer, %57
  %59 = icmp slt <8 x i16> %57, zeroinitializer
  %60 = select <8 x i1> %59, <8 x i16> %58, <8 x i16> %57
  %61 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %60) #3
  %62 = bitcast <16 x i8> %61 to <4 x i32>
  %63 = extractelement <4 x i32> %62, i32 0
  %64 = bitcast i8* %31 to i32*
  store i32 %63, i32* %64, align 4
  %65 = extractelement <4 x i32> %62, i64 1
  %66 = getelementptr inbounds i8, i8* %31, i64 4
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 4
  %68 = getelementptr inbounds i8, i8* %30, i64 %20
  %69 = getelementptr inbounds i8, i8* %29, i64 %22
  %70 = getelementptr inbounds i8, i8* %31, i64 8
  %71 = add nuw nsw i32 %28, 2
  %72 = icmp slt i32 %71, %6
  br i1 %72, label %27, label %158

73:                                               ; preds = %13, %73
  %74 = phi i32 [ %106, %73 ], [ 0, %13 ]
  %75 = phi i8* [ %104, %73 ], [ %4, %13 ]
  %76 = phi i8* [ %103, %73 ], [ %2, %13 ]
  %77 = phi i8* [ %105, %73 ], [ %0, %13 ]
  %78 = bitcast i8* %76 to i64*
  %79 = load i64, i64* %78, align 1
  %80 = insertelement <2 x i64> undef, i64 %79, i32 0
  %81 = bitcast i8* %75 to i64*
  %82 = load i64, i64* %81, align 1
  %83 = insertelement <2 x i64> undef, i64 %82, i32 0
  %84 = bitcast <2 x i64> %80 to <16 x i8>
  %85 = shufflevector <16 x i8> %84, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %86 = zext <8 x i8> %85 to <8 x i16>
  %87 = bitcast <2 x i64> %83 to <16 x i8>
  %88 = shufflevector <16 x i8> %87, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %89 = zext <8 x i8> %88 to <8 x i16>
  %90 = sub nsw <8 x i16> %86, %89
  %91 = sub nsw <8 x i16> zeroinitializer, %90
  %92 = icmp slt <8 x i16> %90, zeroinitializer
  %93 = select <8 x i1> %92, <8 x i16> %91, <8 x i16> %90
  %94 = lshr <8 x i16> %93, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %95 = add <8 x i16> %94, %12
  %96 = sub <8 x i16> zeroinitializer, %95
  %97 = icmp slt <8 x i16> %95, zeroinitializer
  %98 = select <8 x i1> %97, <8 x i16> %96, <8 x i16> %95
  %99 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %98, <8 x i16> undef) #3
  %100 = bitcast <16 x i8> %99 to <2 x i64>
  %101 = extractelement <2 x i64> %100, i32 0
  %102 = bitcast i8* %77 to i64*
  store i64 %101, i64* %102, align 1
  %103 = getelementptr inbounds i8, i8* %76, i64 %14
  %104 = getelementptr inbounds i8, i8* %75, i64 %15
  %105 = getelementptr inbounds i8, i8* %77, i64 8
  %106 = add nuw nsw i32 %74, 1
  %107 = icmp slt i32 %106, %6
  br i1 %107, label %73, label %158

108:                                              ; preds = %23, %152
  %109 = phi i32 [ %156, %152 ], [ 0, %23 ]
  %110 = phi i8* [ %154, %152 ], [ %4, %23 ]
  %111 = phi i8* [ %153, %152 ], [ %2, %23 ]
  %112 = phi i8* [ %155, %152 ], [ %0, %23 ]
  br label %113

113:                                              ; preds = %113, %108
  %114 = phi i64 [ %150, %113 ], [ 0, %108 ]
  %115 = getelementptr inbounds i8, i8* %111, i64 %114
  %116 = bitcast i8* %115 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 16
  %118 = getelementptr inbounds i8, i8* %110, i64 %114
  %119 = bitcast i8* %118 to <16 x i8>*
  %120 = load <16 x i8>, <16 x i8>* %119, align 16
  %121 = shufflevector <16 x i8> %117, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %122 = zext <8 x i8> %121 to <8 x i16>
  %123 = shufflevector <16 x i8> %120, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %124 = zext <8 x i8> %123 to <8 x i16>
  %125 = shufflevector <16 x i8> %117, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = shufflevector <16 x i8> %120, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %127 = sub nsw <8 x i16> %122, %124
  %128 = sub nsw <8 x i16> zeroinitializer, %127
  %129 = icmp slt <8 x i16> %127, zeroinitializer
  %130 = select <8 x i1> %129, <8 x i16> %128, <8 x i16> %127
  %131 = lshr <8 x i16> %130, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %132 = add <8 x i16> %131, %12
  %133 = sub <8 x i16> zeroinitializer, %132
  %134 = icmp slt <8 x i16> %132, zeroinitializer
  %135 = select <8 x i1> %134, <8 x i16> %133, <8 x i16> %132
  %136 = bitcast <16 x i8> %125 to <8 x i16>
  %137 = bitcast <16 x i8> %126 to <8 x i16>
  %138 = sub <8 x i16> %136, %137
  %139 = sub <8 x i16> zeroinitializer, %138
  %140 = icmp slt <8 x i16> %138, zeroinitializer
  %141 = select <8 x i1> %140, <8 x i16> %139, <8 x i16> %138
  %142 = lshr <8 x i16> %141, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %143 = add <8 x i16> %142, %12
  %144 = sub <8 x i16> zeroinitializer, %143
  %145 = icmp slt <8 x i16> %143, zeroinitializer
  %146 = select <8 x i1> %145, <8 x i16> %144, <8 x i16> %143
  %147 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %135, <8 x i16> %146) #3
  %148 = getelementptr inbounds i8, i8* %112, i64 %114
  %149 = bitcast i8* %148 to <16 x i8>*
  store <16 x i8> %147, <16 x i8>* %149, align 16
  %150 = add nuw nsw i64 %114, 16
  %151 = icmp slt i64 %150, %26
  br i1 %151, label %113, label %152

152:                                              ; preds = %113
  %153 = getelementptr inbounds i8, i8* %111, i64 %24
  %154 = getelementptr inbounds i8, i8* %110, i64 %25
  %155 = getelementptr inbounds i8, i8* %112, i64 %26
  %156 = add nuw nsw i32 %109, 1
  %157 = icmp slt i32 %156, %6
  br i1 %157, label %108, label %158

158:                                              ; preds = %73, %27, %152
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @av1_build_compound_diffwtd_mask_d16_sse4_1(i8* nocapture, i8 zeroext, i16* nocapture readonly, i32, i16* nocapture readonly, i32, i32, i32, %struct.ConvolveParams* nocapture readonly, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8 %1, 0
  %12 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = add i32 %9, 6
  %17 = sub i32 %16, %13
  %18 = sub i32 %17, %15
  %19 = shl i32 1, %18
  %20 = lshr i32 %19, 1
  %21 = trunc i32 %20 to i16
  %22 = insertelement <8 x i16> undef, i16 %21, i32 0
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> zeroinitializer
  %24 = select i1 %11, i16 64, i16 0
  %25 = insertelement <8 x i16> undef, i16 %24, i32 0
  %26 = shufflevector <8 x i16> %25, <8 x i16> undef, <8 x i32> zeroinitializer
  %27 = select i1 %11, i16 -1, i16 1
  %28 = insertelement <8 x i16> undef, i16 %27, i32 0
  %29 = shufflevector <8 x i16> %28, <8 x i16> undef, <8 x i32> zeroinitializer
  %30 = icmp sgt i32 %6, 0
  br i1 %30, label %31, label %84

31:                                               ; preds = %10
  %32 = icmp sgt i32 %7, 0
  %33 = sext i32 %7 to i64
  %34 = sext i32 %5 to i64
  %35 = sext i32 %3 to i64
  %36 = zext i32 %6 to i64
  br label %37

37:                                               ; preds = %81, %31
  %38 = phi i64 [ 0, %31 ], [ %82, %81 ]
  br i1 %32, label %39, label %81

39:                                               ; preds = %37
  %40 = mul nsw i64 %38, %35
  %41 = mul nsw i64 %38, %34
  %42 = mul nsw i64 %38, %33
  br label %43

43:                                               ; preds = %39, %78
  %44 = phi i64 [ 0, %39 ], [ %79, %78 ]
  %45 = add nsw i64 %44, %40
  %46 = getelementptr inbounds i16, i16* %2, i64 %45
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 1
  %49 = add nsw i64 %44, %41
  %50 = getelementptr inbounds i16, i16* %4, i64 %49
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 1
  %53 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %48, <8 x i16> %52) #3
  %54 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %52, <8 x i16> %48) #3
  %55 = icmp ugt <8 x i16> %53, %54
  %56 = select <8 x i1> %55, <8 x i16> %53, <8 x i16> %54
  %57 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %56, <8 x i16> %23) #3
  %58 = tail call <8 x i16> @llvm.x86.sse2.psrli.w(<8 x i16> %57, i32 %18) #3
  %59 = lshr <8 x i16> %58, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %60 = icmp ult <8 x i16> %59, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %61 = select <8 x i1> %60, <8 x i16> %59, <8 x i16> <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %62 = add nuw nsw <8 x i16> %61, <i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38>
  %63 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %62, <8 x i16> %29) #3
  %64 = add <8 x i16> %63, %26
  %65 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %64, <8 x i16> %64) #3
  %66 = add nsw i64 %44, %42
  %67 = getelementptr inbounds i8, i8* %0, i64 %66
  %68 = sub nsw i64 %33, %44
  %69 = icmp sgt i64 %68, 4
  br i1 %69, label %70, label %74

70:                                               ; preds = %43
  %71 = bitcast <16 x i8> %65 to <2 x i64>
  %72 = extractelement <2 x i64> %71, i32 0
  %73 = bitcast i8* %67 to i64*
  store i64 %72, i64* %73, align 1
  br label %78

74:                                               ; preds = %43
  %75 = bitcast <16 x i8> %65 to <4 x i32>
  %76 = extractelement <4 x i32> %75, i32 0
  %77 = bitcast i8* %67 to i32*
  store i32 %76, i32* %77, align 4
  br label %78

78:                                               ; preds = %74, %70
  %79 = add nuw nsw i64 %44, 8
  %80 = icmp slt i64 %79, %33
  br i1 %80, label %43, label %81

81:                                               ; preds = %78, %37
  %82 = add nuw nsw i64 %38, 1
  %83 = icmp eq i64 %82, %36
  br i1 %83, label %84, label %37

84:                                               ; preds = %81, %10
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.usub.sat.v8i16(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.psrli.w(<8 x i16>, i32) #1

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16>, <8 x i16>) #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
