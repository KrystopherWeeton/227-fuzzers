; ModuleID = '../../third_party/blink/renderer/platform/audio/fft_convolver.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/fft_convolver.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::FFTConvolver" = type { %"class.blink::FFTFrame", i64, %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::FFTFrame" = type { i32, i32, %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::AudioArray" = type <{ float*, float*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink10AudioArrayIfE8AllocateEm = comdat any

@.str = private unnamed_addr constant [54 x i8] c"n <= std::numeric_limits<unsigned>::max() / sizeof(T)\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"../../third_party/blink/renderer/platform/audio/audio_array.h\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"allocation_\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv = private unnamed_addr constant [72 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::AudioArray<float>]\00", align 1

@_ZN5blink12FFTConvolverC1Em = hidden unnamed_addr alias void (%"class.blink::FFTConvolver"*, i64), void (%"class.blink::FFTConvolver"*, i64)* @_ZN5blink12FFTConvolverC2Em

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12FFTConvolverC2Em(%"class.blink::FFTConvolver"*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 0
  %4 = trunc i64 %1 to i32
  tail call void @_ZN5blink8FFTFrameC1Ej(%"class.blink::FFTFrame"* %3, i32 %4) #6
  %5 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 2
  %7 = bitcast i64* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 28, i1 false)
  tail call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %6, i64 %1) #6
  %8 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 3
  %9 = bitcast %"class.blink::AudioArray"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 20, i1 false) #6
  tail call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %8, i64 %1) #6
  %10 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 4
  %11 = lshr i64 %1, 1
  %12 = bitcast %"class.blink::AudioArray"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 20, i1 false) #6
  tail call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %10, i64 %11) #6
  ret void
}

declare void @_ZN5blink8FFTFrameC1Ej(%"class.blink::FFTFrame"*, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12FFTConvolver7ProcessEPKNS_8FFTFrameEPKfPfj(%"class.blink::FFTConvolver"*, %"class.blink::FFTFrame"*, float* nocapture readonly, float* nocapture, i32) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 1
  %9 = zext i32 %8 to i64
  %10 = zext i32 %4 to i64
  %11 = icmp ugt i32 %8, %4
  br i1 %11, label %18, label %12

12:                                               ; preds = %5
  %13 = udiv i32 %4, %8
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %18, label %15

15:                                               ; preds = %12
  %16 = zext i32 %13 to i64
  %17 = icmp ugt i32 %8, %4
  br i1 %17, label %30, label %18

18:                                               ; preds = %5, %12, %15
  %19 = phi i64 [ %9, %15 ], [ %10, %12 ], [ %10, %5 ]
  %20 = phi i64 [ %16, %15 ], [ 1, %12 ], [ 1, %5 ]
  %21 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 2, i32 1
  %22 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 1
  %23 = shl nuw nsw i64 %19, 2
  %24 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 3, i32 1
  %25 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 0
  %26 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 4, i32 1
  %27 = bitcast float** %26 to i8**
  %28 = shl nuw nsw i64 %9, 2
  %29 = load i64, i64* %22, align 8
  br label %31

30:                                               ; preds = %57, %15
  ret void

31:                                               ; preds = %57, %18
  %32 = phi i64 [ %29, %18 ], [ %58, %57 ]
  %33 = phi float* [ %2, %18 ], [ %60, %57 ]
  %34 = phi float* [ %3, %18 ], [ %61, %57 ]
  %35 = phi i64 [ 0, %18 ], [ %59, %57 ]
  %36 = load float*, float** %21, align 8
  %37 = getelementptr inbounds float, float* %36, i64 %32
  %38 = bitcast float* %37 to i8*
  %39 = bitcast float* %33 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 4 %39, i64 %23, i1 false)
  %40 = load float*, float** %24, align 8
  %41 = bitcast float* %34 to i8*
  %42 = load i64, i64* %22, align 8
  %43 = getelementptr inbounds float, float* %40, i64 %42
  %44 = bitcast float* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %44, i64 %23, i1 false)
  %45 = load i64, i64* %22, align 8
  %46 = add i64 %45, %19
  store i64 %46, i64* %22, align 8
  %47 = icmp eq i64 %46, %9
  br i1 %47, label %48, label %57

48:                                               ; preds = %31
  %49 = load float*, float** %21, align 8
  tail call void @_ZN5blink8FFTFrame5DoFFTEPKf(%"class.blink::FFTFrame"* %25, float* %49) #6
  tail call void @_ZN5blink8FFTFrame8MultiplyERKS0_(%"class.blink::FFTFrame"* %25, %"class.blink::FFTFrame"* dereferenceable(104) %1) #6
  %50 = load float*, float** %24, align 8
  tail call void @_ZN5blink8FFTFrame12DoInverseFFTEPf(%"class.blink::FFTFrame"* %25, float* %50) #6
  %51 = load float*, float** %24, align 8
  %52 = load float*, float** %26, align 8
  tail call void @_ZN5blink11vector_math4VaddEPKfiS2_iPfij(float* %51, i32 1, float* %52, i32 1, float* %51, i32 1, i32 %8) #6
  %53 = load i8*, i8** %27, align 8
  %54 = load float*, float** %24, align 8
  %55 = getelementptr inbounds float, float* %54, i64 %9
  %56 = bitcast float* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %53, i8* align 4 %56, i64 %28, i1 false)
  store i64 0, i64* %22, align 8
  br label %57

57:                                               ; preds = %48, %31
  %58 = phi i64 [ 0, %48 ], [ %46, %31 ]
  %59 = add nuw nsw i64 %35, 1
  %60 = getelementptr inbounds float, float* %33, i64 %19
  %61 = getelementptr inbounds float, float* %34, i64 %19
  %62 = icmp eq i64 %59, %20
  br i1 %62, label %30, label %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN5blink8FFTFrame5DoFFTEPKf(%"class.blink::FFTFrame"*, float*) local_unnamed_addr #1

declare void @_ZN5blink8FFTFrame8MultiplyERKS0_(%"class.blink::FFTFrame"*, %"class.blink::FFTFrame"* dereferenceable(104)) local_unnamed_addr #1

declare void @_ZN5blink8FFTFrame12DoInverseFFTEPf(%"class.blink::FFTFrame"*, float*) local_unnamed_addr #1

declare void @_ZN5blink11vector_math4VaddEPKfiS2_iPfij(float*, i32, float*, i32, float*, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12FFTConvolver5ResetEv(%"class.blink::FFTConvolver"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 4, i32 1
  %3 = bitcast float** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 4, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = shl nuw nsw i64 %7, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 %8, i1 false) #6
  %9 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %0, i64 0, i32 1
  store i64 0, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #6
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = icmp ugt i64 %1, 1073741823
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* null, i8** %8, align 8
  br label %21

12:                                               ; preds = %2
  %13 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #6
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1073741823) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i8* %13, i8* %14) #6
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* %16, i8** %8, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 63, %"class.logging::CheckOpResult"* nonnull %4) #6
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #6
  br label %21

21:                                               ; preds = %11, %12, %18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #6
  %22 = trunc i64 %1 to i32
  %23 = shl i32 %22, 2
  %24 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 0
  %25 = load float*, float** %24, align 8
  %26 = icmp eq float* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %21
  %28 = bitcast float* %25 to i8*
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %28) #6
  br label %29

29:                                               ; preds = %21, %27
  %30 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %23, i32 32) #6
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %29
  call void @llvm.trap() #6
  unreachable

33:                                               ; preds = %29
  %34 = extractvalue { i32, i1 } %30, 0
  %35 = zext i32 %34 to i64
  %36 = call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 %35, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv, i64 0, i64 0)) #6
  %37 = bitcast %"class.blink::AudioArray"* %0 to i8**
  store i8* %36, i8** %37, align 8
  %38 = icmp eq i8* %36, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %33
  %40 = ptrtoint i8* %36 to i64
  br label %46

41:                                               ; preds = %33
  %42 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)) #6
  %43 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #6
  %44 = bitcast %"class.blink::AudioArray"* %0 to i64*
  %45 = load i64, i64* %44, align 8
  br label %46

46:                                               ; preds = %39, %41
  %47 = phi i64 [ %40, %39 ], [ %45, %41 ]
  %48 = add i64 %47, 31
  %49 = and i64 %48, -32
  %50 = inttoptr i64 %49 to float*
  %51 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 1
  store float* %50, float** %51, align 8
  %52 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 2
  store i32 %22, i32* %52, align 8
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #1

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
