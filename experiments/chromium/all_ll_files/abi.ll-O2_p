; ModuleID = '../../native_client/src/trusted/debug_stub/abi.cc'
source_filename = "../../native_client/src/trusted/debug_stub/abi.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.gdb_rsp::Abi" = type { i8*, %"struct.gdb_rsp::Abi::RegDef"*, i32, i32, %"struct.gdb_rsp::Abi::BPDef"*, i32, i8* }
%"struct.gdb_rsp::Abi::RegDef" = type { i8*, i32, i32, i32, i32 }
%"struct.gdb_rsp::Abi::BPDef" = type { i32, i8* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"class.std::__1::basic_string", %"class.gdb_rsp::Abi"* }

$_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN7gdb_rsp3AbiEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISM_EERKT_ = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN7gdb_rsp3AbiEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE4findIS7_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEElEERKT_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"Failed to initalize ABIs.\00", align 1
@_ZZN7gdb_rsp3Abi3GetEvE3abi = internal unnamed_addr global %"class.gdb_rsp::Abi"* null, align 8
@.str.1 = private unnamed_addr constant [12 x i8] c"i386:x86-64\00", align 1
@_ZZN7gdb_rspL7GetAbisEvE5_abis = internal unnamed_addr global %"class.std::__1::map"* null, align 8
@_ZGVZN7gdb_rspL7GetAbisEvE5_abis = internal global i64 0, align 8
@_ZZN7gdb_rspL14AbiIsAvailableEvE12initialized_ = internal unnamed_addr global i1 false, align 1
@_ZGVZN7gdb_rspL14AbiIsAvailableEvE12initialized_ = internal global i64 0, align 8
@.str.2 = private unnamed_addr constant [5 x i8] c"i386\00", align 1
@_ZN7gdb_rspL10RegsX86_32E = internal global [16 x %"struct.gdb_rsp::Abi::RegDef"] [%"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i32 4, i32 5, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i32 4, i32 5, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i32 4, i32 5, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i32 4, i32 5, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0), i32 4, i32 5, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 4, i32 5, i32 0, i32 0 }], align 16
@_ZN7gdb_rspL14breakpoint_x86E = internal global %"struct.gdb_rsp::Abi::BPDef" { i32 1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZN7gdb_rspL19breakpoint_code_x86E, i32 0, i32 0) }, align 8
@.str.3 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZN7gdb_rspL10RegsX86_64E = internal global [24 x %"struct.gdb_rsp::Abi::RegDef"] [%"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i32 0, i32 0), i32 8, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0), i32 8, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i32 0, i32 0), i32 8, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i32 8, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i32 0, i32 0), i32 8, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i32 0, i32 0), i32 8, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28, i32 0, i32 0), i32 8, i32 4, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i32 0, i32 0), i32 8, i32 4, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 8, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i32 8, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i32 0, i32 0), i32 8, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.33, i32 0, i32 0), i32 8, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i32 0, i32 0), i32 8, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i32 0, i32 0), i32 8, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i32 8, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i32 0, i32 0), i32 8, i32 1, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.38, i32 0, i32 0), i32 8, i32 4, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i32 4, i32 5, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i32 4, i32 5, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i32 4, i32 5, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i32 4, i32 5, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0), i32 4, i32 5, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 4, i32 5, i32 0, i32 0 }], align 16
@.str.4 = private unnamed_addr constant [7 x i8] c"iwmmxt\00", align 1
@_ZN7gdb_rspL7RegsArmE = internal global [17 x %"struct.gdb_rsp::Abi::RegDef"] [%"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i32 4, i32 5, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.33, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i32 4, i32 2, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i32 0, i32 0), i32 4, i32 3, i32 0, i32 0 }], align 16
@_ZN7gdb_rspL14breakpoint_armE = internal global %"struct.gdb_rsp::Abi::BPDef" { i32 4, i8* bitcast ([1 x i32]* @_ZN7gdb_rspL19breakpoint_code_armE to i8*) }, align 8
@_ZN7gdb_rspL6XmlArmE = internal constant [825 x i8] c"<feature name=\22org.gnu.gdb.arm.core\22>\0A  <reg name=\22r0\22 bitsize=\2232\22 type=\22uint32\22/>\0A  <reg name=\22r1\22 bitsize=\2232\22 type=\22uint32\22/>\0A  <reg name=\22r2\22 bitsize=\2232\22 type=\22uint32\22/>\0A  <reg name=\22r3\22 bitsize=\2232\22 type=\22uint32\22/>\0A  <reg name=\22r4\22 bitsize=\2232\22 type=\22uint32\22/>\0A  <reg name=\22r5\22 bitsize=\2232\22 type=\22uint32\22/>\0A  <reg name=\22r6\22 bitsize=\2232\22 type=\22uint32\22/>\0A  <reg name=\22r7\22 bitsize=\2232\22 type=\22uint32\22/>\0A  <reg name=\22r8\22 bitsize=\2232\22 type=\22uint32\22/>\0A  <reg name=\22r9\22 bitsize=\2232\22 type=\22uint32\22/>\0A  <reg name=\22r10\22 bitsize=\2232\22 type=\22uint32\22/>\0A  <reg name=\22r11\22 bitsize=\2232\22 type=\22uint32\22/>\0A  <reg name=\22r12\22 bitsize=\2232\22 type=\22uint32\22/>\0A  <reg name=\22sp\22 bitsize=\2232\22 type=\22data_ptr\22/>\0A  <reg name=\22lr\22 bitsize=\2232\22/>\0A  <reg name=\22pc\22 bitsize=\2232\22 type=\22code_ptr\22/>\0A  <reg name=\22cpsr\22 bitsize=\2232\22 regnum=\2225\22/>\0A</feature>\0A\00", align 16
@.str.5 = private unnamed_addr constant [5 x i8] c"mips\00", align 1
@_ZN7gdb_rspL8RegsMipsE = internal global [33 x %"struct.gdb_rsp::Abi::RegDef"] [%"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0), i32 4, i32 1, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.63, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.65, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.67, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.68, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.71, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.72, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.73, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.74, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.75, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.76, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.77, i32 0, i32 0), i32 4, i32 1, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.78, i32 0, i32 0), i32 4, i32 1, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.79, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.80, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.81, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }, %"struct.gdb_rsp::Abi::RegDef" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i32 4, i32 0, i32 0, i32 0 }], align 16
@_ZN7gdb_rspL15breakpoint_mipsE = internal global %"struct.gdb_rsp::Abi::BPDef" { i32 4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZN7gdb_rspL20breakpoint_code_mipsE, i32 0, i32 0) }, align 8
@_ZN7gdb_rspL7XmlMipsE = internal constant [3253 x i8] c"<feature name=\22org.gnu.gdb.mips.cpu\22>\0A  <reg name=\22r0\22 bitsize=\2232\22 regnum=\220\22/>\0A  <reg name=\22r1\22 bitsize=\2232\22/>\0A  <reg name=\22r2\22 bitsize=\2232\22/>\0A  <reg name=\22r3\22 bitsize=\2232\22/>\0A  <reg name=\22r4\22 bitsize=\2232\22/>\0A  <reg name=\22r5\22 bitsize=\2232\22/>\0A  <reg name=\22r6\22 bitsize=\2232\22/>\0A  <reg name=\22r7\22 bitsize=\2232\22/>\0A  <reg name=\22r8\22 bitsize=\2232\22/>\0A  <reg name=\22r9\22 bitsize=\2232\22/>\0A  <reg name=\22r10\22 bitsize=\2232\22/>\0A  <reg name=\22r11\22 bitsize=\2232\22/>\0A  <reg name=\22r12\22 bitsize=\2232\22/>\0A  <reg name=\22r13\22 bitsize=\2232\22/>\0A  <reg name=\22r14\22 bitsize=\2232\22/>\0A  <reg name=\22r15\22 bitsize=\2232\22/>\0A  <reg name=\22r16\22 bitsize=\2232\22/>\0A  <reg name=\22r17\22 bitsize=\2232\22/>\0A  <reg name=\22r18\22 bitsize=\2232\22/>\0A  <reg name=\22r19\22 bitsize=\2232\22/>\0A  <reg name=\22r20\22 bitsize=\2232\22/>\0A  <reg name=\22r21\22 bitsize=\2232\22/>\0A  <reg name=\22r22\22 bitsize=\2232\22/>\0A  <reg name=\22r23\22 bitsize=\2232\22/>\0A  <reg name=\22r24\22 bitsize=\2232\22/>\0A  <reg name=\22r25\22 bitsize=\2232\22/>\0A  <reg name=\22r26\22 bitsize=\2232\22/>\0A  <reg name=\22r27\22 bitsize=\2232\22/>\0A  <reg name=\22r28\22 bitsize=\2232\22/>\0A  <reg name=\22r29\22 bitsize=\2232\22/>\0A  <reg name=\22r30\22 bitsize=\2232\22/>\0A  <reg name=\22r31\22 bitsize=\2232\22/>\0A  <reg name=\22lo\22 bitsize=\2232\22 regnum=\2233\22/>\0A  <reg name=\22hi\22 bitsize=\2232\22 regnum=\2234\22/>\0A  <reg name=\22pc\22 bitsize=\2232\22 regnum=\2232\22/>\0A</feature>\0A<feature name=\22org.gnu.gdb.mips.cp0\22>\0A  <reg name=\22status\22 bitsize=\2232\22 regnum=\2237\22/>\0A  <reg name=\22badvaddr\22 bitsize=\2232\22 regnum=\2235\22/>\0A  <reg name=\22cause\22 bitsize=\2232\22 regnum=\2236\22/>\0A</feature>\0A<feature name=\22org.gnu.gdb.mips.fpu\22>\0A  <reg name=\22f0\22 bitsize=\2232\22  type=\22ieee_single\22 regnum=\2238\22/>\0A  <reg name=\22f1\22 bitsize=\2232\22  type=\22ieee_single\22/>\0A  <reg name=\22f2\22 bitsize=\2232\22  type=\22ieee_single\22/>\0A  <reg name=\22f3\22 bitsize=\2232\22  type=\22ieee_single\22/>\0A  <reg name=\22f4\22 bitsize=\2232\22  type=\22ieee_single\22/>\0A  <reg name=\22f5\22 bitsize=\2232\22  type=\22ieee_single\22/>\0A  <reg name=\22f6\22 bitsize=\2232\22  type=\22ieee_single\22/>\0A  <reg name=\22f7\22 bitsize=\2232\22  type=\22ieee_single\22/>\0A  <reg name=\22f8\22 bitsize=\2232\22  type=\22ieee_single\22/>\0A  <reg name=\22f9\22 bitsize=\2232\22  type=\22ieee_single\22/>\0A  <reg name=\22f10\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f11\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f12\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f13\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f14\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f15\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f16\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f17\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f18\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f19\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f20\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f21\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f22\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f23\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f24\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f25\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f26\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f27\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f28\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f29\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f30\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22f31\22 bitsize=\2232\22 type=\22ieee_single\22/>\0A  <reg name=\22fcsr\22 bitsize=\2232\22 group=\22float\22/>\0A  <reg name=\22fir\22 bitsize=\2232\22 group=\22float\22/>\0A</feature>\0A\00", align 16
@.str.6 = private unnamed_addr constant [4 x i8] c"eax\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"ecx\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"edx\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"ebx\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"esp\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"ebp\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"esi\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"edi\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"eip\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"eflags\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"cs\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"ss\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"ds\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"es\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"fs\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"gs\00", align 1
@_ZN7gdb_rspL19breakpoint_code_x86E = internal global [1 x i8] c"\F4", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"rax\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"rbx\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"rcx\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"rdx\00", align 1
@.str.26 = private unnamed_addr constant [4 x i8] c"rsi\00", align 1
@.str.27 = private unnamed_addr constant [4 x i8] c"rdi\00", align 1
@.str.28 = private unnamed_addr constant [4 x i8] c"rbp\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c"rsp\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"r8\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"r9\00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c"r10\00", align 1
@.str.33 = private unnamed_addr constant [4 x i8] c"r11\00", align 1
@.str.34 = private unnamed_addr constant [4 x i8] c"r12\00", align 1
@.str.35 = private unnamed_addr constant [4 x i8] c"r13\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"r14\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c"r15\00", align 1
@.str.38 = private unnamed_addr constant [4 x i8] c"rip\00", align 1
@.str.39 = private unnamed_addr constant [3 x i8] c"r0\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"r1\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"r2\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"r3\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"r4\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"r5\00", align 1
@.str.45 = private unnamed_addr constant [3 x i8] c"r6\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"r7\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"sp\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"lr\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"pc\00", align 1
@.str.50 = private unnamed_addr constant [5 x i8] c"cpsr\00", align 1
@_ZN7gdb_rspL19breakpoint_code_armE = internal global [1 x i32] [i32 -402727184], align 4
@.str.51 = private unnamed_addr constant [5 x i8] c"zero\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c"at\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"v0\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"v1\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"a0\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"a1\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"a2\00", align 1
@.str.58 = private unnamed_addr constant [3 x i8] c"a3\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"t0\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"t1\00", align 1
@.str.61 = private unnamed_addr constant [3 x i8] c"t2\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"t3\00", align 1
@.str.63 = private unnamed_addr constant [3 x i8] c"t4\00", align 1
@.str.64 = private unnamed_addr constant [3 x i8] c"t5\00", align 1
@.str.65 = private unnamed_addr constant [3 x i8] c"t6\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c"t7\00", align 1
@.str.67 = private unnamed_addr constant [3 x i8] c"s0\00", align 1
@.str.68 = private unnamed_addr constant [3 x i8] c"s1\00", align 1
@.str.69 = private unnamed_addr constant [3 x i8] c"s2\00", align 1
@.str.70 = private unnamed_addr constant [3 x i8] c"s3\00", align 1
@.str.71 = private unnamed_addr constant [3 x i8] c"s4\00", align 1
@.str.72 = private unnamed_addr constant [3 x i8] c"s5\00", align 1
@.str.73 = private unnamed_addr constant [3 x i8] c"s6\00", align 1
@.str.74 = private unnamed_addr constant [3 x i8] c"s7\00", align 1
@.str.75 = private unnamed_addr constant [3 x i8] c"t8\00", align 1
@.str.76 = private unnamed_addr constant [3 x i8] c"t9\00", align 1
@.str.77 = private unnamed_addr constant [3 x i8] c"k0\00", align 1
@.str.78 = private unnamed_addr constant [3 x i8] c"k1\00", align 1
@.str.79 = private unnamed_addr constant [3 x i8] c"gp\00", align 1
@.str.80 = private unnamed_addr constant [3 x i8] c"fp\00", align 1
@.str.81 = private unnamed_addr constant [3 x i8] c"ra\00", align 1
@_ZN7gdb_rspL20breakpoint_code_mipsE = internal global [4 x i8] c"\0D\00\00\00", align 1

@_ZN7gdb_rsp3AbiC1Ev = hidden unnamed_addr alias void (%"class.gdb_rsp::Abi"*), void (%"class.gdb_rsp::Abi"*)* @_ZN7gdb_rsp3AbiC2Ev
@_ZN7gdb_rsp3AbiD1Ev = hidden unnamed_addr alias void (%"class.gdb_rsp::Abi"*), void (%"class.gdb_rsp::Abi"*)* @_ZN7gdb_rsp3AbiD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN7gdb_rsp3AbiC2Ev(%"class.gdb_rsp::Abi"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN7gdb_rsp3AbiD2Ev(%"class.gdb_rsp::Abi"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7gdb_rsp3Abi8RegisterEPKcPNS0_6RegDefEjjPKNS0_5BPDefES2_(i8*, %"struct.gdb_rsp::Abi::RegDef"*, i32, i32, %"struct.gdb_rsp::Abi::BPDef"*, i8*) local_unnamed_addr #1 align 2 {
  %7 = alloca %"class.std::__1::__tree_end_node"*, align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = udiv i32 %2, 24
  %10 = icmp ugt i32 %2, 23
  br i1 %10, label %11, label %13

11:                                               ; preds = %6
  %12 = zext i32 %9 to i64
  br label %111

13:                                               ; preds = %111, %6
  %14 = phi i32 [ 0, %6 ], [ %119, %111 ]
  %15 = tail call i8* @_Znwm(i64 48) #11
  %16 = bitcast i8* %15 to i8**
  store i8* %0, i8** %16, align 8
  %17 = getelementptr inbounds i8, i8* %15, i64 16
  %18 = bitcast i8* %17 to i32*
  store i32 %9, i32* %18, align 8
  %19 = getelementptr inbounds i8, i8* %15, i64 8
  %20 = bitcast i8* %19 to %"struct.gdb_rsp::Abi::RegDef"**
  store %"struct.gdb_rsp::Abi::RegDef"* %1, %"struct.gdb_rsp::Abi::RegDef"** %20, align 8
  %21 = getelementptr inbounds i8, i8* %15, i64 20
  %22 = bitcast i8* %21 to i32*
  store i32 %14, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %15, i64 24
  %24 = bitcast i8* %23 to %"struct.gdb_rsp::Abi::BPDef"**
  store %"struct.gdb_rsp::Abi::BPDef"* %4, %"struct.gdb_rsp::Abi::BPDef"** %24, align 8
  %25 = getelementptr inbounds i8, i8* %15, i64 32
  %26 = bitcast i8* %25 to i32*
  store i32 %3, i32* %26, align 8
  %27 = getelementptr inbounds i8, i8* %15, i64 40
  %28 = bitcast i8* %27 to i8**
  store i8* %5, i8** %28, align 8
  %29 = load atomic i8, i8* bitcast (i64* @_ZGVZN7gdb_rspL7GetAbisEvE5_abis to i8*) acquire, align 8
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %38, !prof !2

31:                                               ; preds = %13
  %32 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN7gdb_rspL7GetAbisEvE5_abis) #12
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %31
  %35 = tail call i8* @_Znwm(i64 24) #11
  %36 = getelementptr inbounds i8, i8* %35, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 16, i1 false) #12
  %37 = bitcast i8* %35 to i8**
  store i8* %36, i8** %37, align 8
  store i8* %35, i8** bitcast (%"class.std::__1::map"** @_ZZN7gdb_rspL7GetAbisEvE5_abis to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN7gdb_rspL7GetAbisEvE5_abis) #12
  br label %38

38:                                               ; preds = %13, %31, %34
  %39 = load %"class.std::__1::map"*, %"class.std::__1::map"** @_ZZN7gdb_rspL7GetAbisEvE5_abis, align 8
  %40 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %40) #12
  %41 = tail call i64 @strlen(i8* %0) #12
  %42 = icmp ugt i64 %41, -17
  br i1 %42, label %43, label %45

43:                                               ; preds = %38
  %44 = bitcast %"class.std::__1::basic_string"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %44) #13
  unreachable

45:                                               ; preds = %38
  %46 = icmp ult i64 %41, 23
  br i1 %46, label %55, label %47

47:                                               ; preds = %45
  %48 = add nuw i64 %41, 16
  %49 = and i64 %48, -16
  %50 = tail call i8* @_Znwm(i64 %49) #11
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %50, i8** %51, align 8
  %52 = or i64 %49, -9223372036854775808
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %41, i64* %54, align 8
  br label %60

55:                                               ; preds = %45
  %56 = trunc i64 %41 to i8
  %57 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %58 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %57, i64 0, i32 1, i32 0
  store i8 %56, i8* %58, align 1
  %59 = icmp eq i64 %41, 0
  br i1 %59, label %62, label %60

60:                                               ; preds = %55, %47
  %61 = phi i8* [ %50, %47 ], [ %40, %55 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %61, i8* align 1 %0, i64 %41, i1 false) #12
  br label %62

62:                                               ; preds = %55, %60
  %63 = phi i8* [ %40, %55 ], [ %61, %60 ]
  %64 = getelementptr inbounds i8, i8* %63, i64 %41
  store i8 0, i8* %64, align 1
  %65 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %39, i64 0, i32 0
  %66 = bitcast %"class.std::__1::__tree_end_node"** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #12
  store %"class.std::__1::__tree_end_node"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::__tree_end_node"*), %"class.std::__1::__tree_end_node"** %7, align 8
  %67 = call dereferenceable(8) %"class.std::__1::__tree_node_base"** @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN7gdb_rsp3AbiEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISM_EERKT_(%"class.std::__1::__tree"* %65, %"class.std::__1::__tree_end_node"** nonnull dereferenceable(8) %7, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %8) #12
  %68 = bitcast %"class.std::__1::__tree_node_base"** %67 to %"class.std::__1::__tree_node"**
  %69 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %68, align 8
  %70 = icmp eq %"class.std::__1::__tree_node"* %69, null
  br i1 %70, label %71, label %99

71:                                               ; preds = %62
  %72 = call i8* @_Znwm(i64 64) #11, !noalias !3
  %73 = getelementptr inbounds i8, i8* %72, i64 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %73, i8* nonnull align 8 %40, i64 24, i1 false) #12, !noalias !3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 24, i1 false) #12, !noalias !3
  %74 = getelementptr inbounds i8, i8* %72, i64 56
  %75 = bitcast i8* %74 to %"class.gdb_rsp::Abi"**
  store %"class.gdb_rsp::Abi"* null, %"class.gdb_rsp::Abi"** %75, align 8, !noalias !3
  %76 = bitcast %"class.std::__1::__tree_end_node"** %7 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = bitcast i8* %72 to %"class.std::__1::__tree_node"*
  %79 = bitcast i8* %72 to %"class.std::__1::__tree_node_base"*
  %80 = getelementptr inbounds i8, i8* %72, i64 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 0, i64 16, i1 false) #12
  %81 = bitcast i8* %80 to i64*
  store i64 %77, i64* %81, align 8
  %82 = bitcast %"class.std::__1::__tree_node_base"** %67 to i8**
  store i8* %72, i8** %82, align 8
  %83 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %39, i64 0, i32 0, i32 0
  %84 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %83, align 8
  %85 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %84, i64 0, i32 0
  %86 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %85, align 8
  %87 = icmp eq %"class.std::__1::__tree_node_base"* %86, null
  br i1 %87, label %92, label %88

88:                                               ; preds = %71
  %89 = ptrtoint %"class.std::__1::__tree_node_base"* %86 to i64
  %90 = bitcast %"class.std::__1::map"* %39 to i64*
  store i64 %89, i64* %90, align 8
  %91 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %67, align 8
  br label %92

92:                                               ; preds = %88, %71
  %93 = phi %"class.std::__1::__tree_node_base"* [ %79, %71 ], [ %91, %88 ]
  %94 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %39, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %95 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %94, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %95, %"class.std::__1::__tree_node_base"* %93) #12
  %96 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %39, i64 0, i32 0, i32 2, i32 0, i32 0
  %97 = load i64, i64* %96, align 8
  %98 = add i64 %97, 1
  store i64 %98, i64* %96, align 8
  br label %99

99:                                               ; preds = %62, %92
  %100 = phi %"class.std::__1::__tree_node"* [ %78, %92 ], [ %69, %62 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #12
  %101 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %100, i64 0, i32 1, i32 0, i32 1
  %102 = bitcast %"class.gdb_rsp::Abi"** %101 to i8**
  store i8* %15, i8** %102, align 8
  %103 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %104 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %103, i64 0, i32 1, i32 0
  %105 = load i8, i8* %104, align 1
  %106 = icmp slt i8 %105, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %99
  %108 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %109 = load i8*, i8** %108, align 8
  call void @_ZdlPv(i8* %109) #11
  br label %110

110:                                              ; preds = %99, %107
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %40) #12
  ret void

111:                                              ; preds = %11, %111
  %112 = phi i64 [ 0, %11 ], [ %120, %111 ]
  %113 = phi i32 [ 0, %11 ], [ %119, %111 ]
  %114 = getelementptr inbounds %"struct.gdb_rsp::Abi::RegDef", %"struct.gdb_rsp::Abi::RegDef"* %1, i64 %112, i32 3
  %115 = trunc i64 %112 to i32
  store i32 %115, i32* %114, align 8
  %116 = getelementptr inbounds %"struct.gdb_rsp::Abi::RegDef", %"struct.gdb_rsp::Abi::RegDef"* %1, i64 %112, i32 4
  store i32 %113, i32* %116, align 4
  %117 = getelementptr inbounds %"struct.gdb_rsp::Abi::RegDef", %"struct.gdb_rsp::Abi::RegDef"* %1, i64 %112, i32 1
  %118 = load i32, i32* %117, align 8
  %119 = add i32 %118, %113
  %120 = add nuw nsw i64 %112, 1
  %121 = icmp ult i64 %120, %12
  br i1 %121, label %111, label %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.gdb_rsp::Abi"* @_ZN7gdb_rsp3Abi4FindEPKc(i8* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = tail call fastcc zeroext i1 @_ZN7gdb_rspL14AbiIsAvailableEv()
  br i1 %3, label %5, label %4

4:                                                ; preds = %1
  tail call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #12
  br label %71

5:                                                ; preds = %1
  %6 = load atomic i8, i8* bitcast (i64* @_ZGVZN7gdb_rspL7GetAbisEvE5_abis to i8*) acquire, align 8
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %15, !prof !2

8:                                                ; preds = %5
  %9 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN7gdb_rspL7GetAbisEvE5_abis) #12
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %8
  %12 = tail call i8* @_Znwm(i64 24) #11
  %13 = getelementptr inbounds i8, i8* %12, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #12
  %14 = bitcast i8* %12 to i8**
  store i8* %13, i8** %14, align 8
  store i8* %12, i8** bitcast (%"class.std::__1::map"** @_ZZN7gdb_rspL7GetAbisEvE5_abis to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN7gdb_rspL7GetAbisEvE5_abis) #12
  br label %15

15:                                               ; preds = %5, %8, %11
  %16 = load %"class.std::__1::map"*, %"class.std::__1::map"** @_ZZN7gdb_rspL7GetAbisEvE5_abis, align 8
  %17 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #12
  %18 = tail call i64 @strlen(i8* %0) #12
  %19 = icmp ugt i64 %18, -17
  br i1 %19, label %20, label %22

20:                                               ; preds = %15
  %21 = bitcast %"class.std::__1::basic_string"* %2 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %21) #13
  unreachable

22:                                               ; preds = %15
  %23 = icmp ult i64 %18, 23
  br i1 %23, label %33, label %24

24:                                               ; preds = %22
  %25 = add nuw i64 %18, 16
  %26 = and i64 %25, -16
  %27 = tail call i8* @_Znwm(i64 %26) #11
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %27, i8** %28, align 8
  %29 = or i64 %26, -9223372036854775808
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %18, i64* %31, align 8
  %32 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %38

33:                                               ; preds = %22
  %34 = trunc i64 %18 to i8
  %35 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  store i8 %34, i8* %36, align 1
  %37 = icmp eq i64 %18, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %33, %24
  %39 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %35, %33 ], [ %32, %24 ]
  %40 = phi i8* [ %17, %33 ], [ %27, %24 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %40, i8* align 1 %0, i64 %18, i1 false) #12
  br label %41

41:                                               ; preds = %33, %38
  %42 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %35, %33 ], [ %39, %38 ]
  %43 = phi i8* [ %17, %33 ], [ %40, %38 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %18
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %16, i64 0, i32 0
  %46 = call %"class.std::__1::__tree_end_node"* @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN7gdb_rsp3AbiEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE4findIS7_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEElEERKT_(%"class.std::__1::__tree"* %45, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %2) #12
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %42, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %41
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  call void @_ZdlPv(i8* %52) #11
  br label %53

53:                                               ; preds = %41, %50
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #12
  %54 = load atomic i8, i8* bitcast (i64* @_ZGVZN7gdb_rspL7GetAbisEvE5_abis to i8*) acquire, align 8
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %63, !prof !2

56:                                               ; preds = %53
  %57 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN7gdb_rspL7GetAbisEvE5_abis) #12
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %63, label %59

59:                                               ; preds = %56
  %60 = call i8* @_Znwm(i64 24) #11
  %61 = getelementptr inbounds i8, i8* %60, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 16, i1 false) #12
  %62 = bitcast i8* %60 to i8**
  store i8* %61, i8** %62, align 8
  store i8* %60, i8** bitcast (%"class.std::__1::map"** @_ZZN7gdb_rspL7GetAbisEvE5_abis to i8**), align 8
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN7gdb_rspL7GetAbisEvE5_abis) #12
  br label %63

63:                                               ; preds = %53, %56, %59
  %64 = load %"class.std::__1::map"*, %"class.std::__1::map"** @_ZZN7gdb_rspL7GetAbisEvE5_abis, align 8
  %65 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %64, i64 0, i32 0, i32 1, i32 0, i32 0
  %66 = icmp eq %"class.std::__1::__tree_end_node"* %46, %65
  br i1 %66, label %71, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %46, i64 7
  %69 = bitcast %"class.std::__1::__tree_end_node"* %68 to %"class.gdb_rsp::Abi"**
  %70 = load %"class.gdb_rsp::Abi"*, %"class.gdb_rsp::Abi"** %69, align 8
  br label %71

71:                                               ; preds = %67, %63, %4
  %72 = phi %"class.gdb_rsp::Abi"* [ null, %4 ], [ %70, %67 ], [ null, %63 ]
  ret %"class.gdb_rsp::Abi"* %72
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN7gdb_rspL14AbiIsAvailableEv() unnamed_addr #1 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN7gdb_rspL14AbiIsAvailableEvE12initialized_ to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN7gdb_rspL14AbiIsAvailableEvE12initialized_) #12
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @_ZN7gdb_rsp3Abi8RegisterEPKcPNS0_6RegDefEjjPKNS0_5BPDefES2_(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), %"struct.gdb_rsp::Abi::RegDef"* getelementptr inbounds ([16 x %"struct.gdb_rsp::Abi::RegDef"], [16 x %"struct.gdb_rsp::Abi::RegDef"]* @_ZN7gdb_rspL10RegsX86_32E, i64 0, i64 0), i32 384, i32 8, %"struct.gdb_rsp::Abi::BPDef"* nonnull @_ZN7gdb_rspL14breakpoint_x86E, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0)) #12
  tail call void @_ZN7gdb_rsp3Abi8RegisterEPKcPNS0_6RegDefEjjPKNS0_5BPDefES2_(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), %"struct.gdb_rsp::Abi::RegDef"* getelementptr inbounds ([24 x %"struct.gdb_rsp::Abi::RegDef"], [24 x %"struct.gdb_rsp::Abi::RegDef"]* @_ZN7gdb_rspL10RegsX86_64E, i64 0, i64 0), i32 576, i32 16, %"struct.gdb_rsp::Abi::BPDef"* nonnull @_ZN7gdb_rspL14breakpoint_x86E, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0)) #12
  tail call void @_ZN7gdb_rsp3Abi8RegisterEPKcPNS0_6RegDefEjjPKNS0_5BPDefES2_(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), %"struct.gdb_rsp::Abi::RegDef"* getelementptr inbounds ([17 x %"struct.gdb_rsp::Abi::RegDef"], [17 x %"struct.gdb_rsp::Abi::RegDef"]* @_ZN7gdb_rspL7RegsArmE, i64 0, i64 0), i32 408, i32 15, %"struct.gdb_rsp::Abi::BPDef"* nonnull @_ZN7gdb_rspL14breakpoint_armE, i8* getelementptr inbounds ([825 x i8], [825 x i8]* @_ZN7gdb_rspL6XmlArmE, i64 0, i64 0)) #12
  tail call void @_ZN7gdb_rsp3Abi8RegisterEPKcPNS0_6RegDefEjjPKNS0_5BPDefES2_(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), %"struct.gdb_rsp::Abi::RegDef"* getelementptr inbounds ([33 x %"struct.gdb_rsp::Abi::RegDef"], [33 x %"struct.gdb_rsp::Abi::RegDef"]* @_ZN7gdb_rspL8RegsMipsE, i64 0, i64 0), i32 792, i32 32, %"struct.gdb_rsp::Abi::BPDef"* nonnull @_ZN7gdb_rspL15breakpoint_mipsE, i8* getelementptr inbounds ([3253 x i8], [3253 x i8]* @_ZN7gdb_rspL7XmlMipsE, i64 0, i64 0)) #12
  store i1 true, i1* @_ZZN7gdb_rspL14AbiIsAvailableEvE12initialized_, align 1
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN7gdb_rspL14AbiIsAvailableEvE12initialized_) #12
  br label %7

7:                                                ; preds = %3, %6, %0
  %8 = load i1, i1* @_ZZN7gdb_rspL14AbiIsAvailableEvE12initialized_, align 1
  ret i1 %8
}

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.gdb_rsp::Abi"* @_ZN7gdb_rsp3Abi3GetEv() local_unnamed_addr #1 align 2 {
  %1 = load %"class.gdb_rsp::Abi"*, %"class.gdb_rsp::Abi"** @_ZZN7gdb_rsp3Abi3GetEvE3abi, align 8
  %2 = icmp eq %"class.gdb_rsp::Abi"* %1, null
  br i1 %2, label %3, label %9

3:                                                ; preds = %0
  %4 = tail call fastcc zeroext i1 @_ZN7gdb_rspL14AbiIsAvailableEv()
  br i1 %4, label %7, label %5

5:                                                ; preds = %3
  %6 = load %"class.gdb_rsp::Abi"*, %"class.gdb_rsp::Abi"** @_ZZN7gdb_rsp3Abi3GetEvE3abi, align 8
  br label %9

7:                                                ; preds = %3
  %8 = tail call %"class.gdb_rsp::Abi"* @_ZN7gdb_rsp3Abi4FindEPKc(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  store %"class.gdb_rsp::Abi"* %8, %"class.gdb_rsp::Abi"** @_ZZN7gdb_rsp3Abi3GetEvE3abi, align 8
  br label %9

9:                                                ; preds = %5, %7, %0
  %10 = phi %"class.gdb_rsp::Abi"* [ %6, %5 ], [ %8, %7 ], [ %1, %0 ]
  ret %"class.gdb_rsp::Abi"* %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK7gdb_rsp3Abi7GetNameEv(%"class.gdb_rsp::Abi"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gdb_rsp::Abi", %"class.gdb_rsp::Abi"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"struct.gdb_rsp::Abi::BPDef"* @_ZNK7gdb_rsp3Abi16GetBreakpointDefEv(%"class.gdb_rsp::Abi"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gdb_rsp::Abi", %"class.gdb_rsp::Abi"* %0, i64 0, i32 4
  %3 = load %"struct.gdb_rsp::Abi::BPDef"*, %"struct.gdb_rsp::Abi::BPDef"** %2, align 8
  ret %"struct.gdb_rsp::Abi::BPDef"* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK7gdb_rsp3Abi14GetContextSizeEv(%"class.gdb_rsp::Abi"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gdb_rsp::Abi", %"class.gdb_rsp::Abi"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK7gdb_rsp3Abi16GetRegisterCountEv(%"class.gdb_rsp::Abi"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gdb_rsp::Abi", %"class.gdb_rsp::Abi"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"struct.gdb_rsp::Abi::RegDef"* @_ZNK7gdb_rsp3Abi14GetRegisterDefEj(%"class.gdb_rsp::Abi"* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.gdb_rsp::Abi", %"class.gdb_rsp::Abi"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp ugt i32 %4, %1
  br i1 %5, label %6, label %11

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.gdb_rsp::Abi", %"class.gdb_rsp::Abi"* %0, i64 0, i32 1
  %8 = load %"struct.gdb_rsp::Abi::RegDef"*, %"struct.gdb_rsp::Abi::RegDef"** %7, align 8
  %9 = zext i32 %1 to i64
  %10 = getelementptr inbounds %"struct.gdb_rsp::Abi::RegDef", %"struct.gdb_rsp::Abi::RegDef"* %8, i64 %9
  br label %11

11:                                               ; preds = %2, %6
  %12 = phi %"struct.gdb_rsp::Abi::RegDef"* [ %10, %6 ], [ null, %2 ]
  ret %"struct.gdb_rsp::Abi::RegDef"* %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"struct.gdb_rsp::Abi::RegDef"* @_ZNK7gdb_rsp3Abi13GetInstPtrDefEv(%"class.gdb_rsp::Abi"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gdb_rsp::Abi", %"class.gdb_rsp::Abi"* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.gdb_rsp::Abi", %"class.gdb_rsp::Abi"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = icmp ugt i32 %5, %3
  br i1 %6, label %7, label %12

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.gdb_rsp::Abi", %"class.gdb_rsp::Abi"* %0, i64 0, i32 1
  %9 = load %"struct.gdb_rsp::Abi::RegDef"*, %"struct.gdb_rsp::Abi::RegDef"** %8, align 8
  %10 = zext i32 %3 to i64
  %11 = getelementptr inbounds %"struct.gdb_rsp::Abi::RegDef", %"struct.gdb_rsp::Abi::RegDef"* %9, i64 %10
  br label %12

12:                                               ; preds = %1, %7
  %13 = phi %"struct.gdb_rsp::Abi::RegDef"* [ %11, %7 ], [ null, %1 ]
  ret %"struct.gdb_rsp::Abi::RegDef"* %13
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.std::__1::__tree_node_base"** @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN7gdb_rsp3AbiEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISM_EERKT_(%"class.std::__1::__tree"*, %"class.std::__1::__tree_end_node"** dereferenceable(8), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  %7 = icmp eq %"class.std::__1::__tree_node"* %6, null
  br i1 %7, label %79, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %10 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = zext i8 %12 to i64
  %17 = select i1 %13, i64 %15, i64 %16
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %21 = select i1 %13, i8* %19, i8* %20
  br label %22

22:                                               ; preds = %8, %75
  %23 = phi %"class.std::__1::__tree_node"* [ %78, %75 ], [ %6, %8 ]
  %24 = phi %"class.std::__1::__tree_node_base"** [ %77, %75 ], [ %9, %8 ]
  %25 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %23, i64 0, i32 1
  %26 = bitcast %"struct.std::__1::__value_type"* %25 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %27 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %26, i64 0, i32 1, i32 0
  %28 = load i8, i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  %30 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %23, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = zext i8 %28 to i64
  %33 = select i1 %29, i64 %31, i64 %32
  %34 = icmp ult i64 %33, %17
  %35 = select i1 %34, i64 %33, i64 %17
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %22
  %38 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast %"struct.std::__1::__value_type"* %25 to i8*
  %41 = select i1 %29, i8* %39, i8* %40
  %42 = tail call i32 @memcmp(i8* %21, i8* %41, i64 %35) #12
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %37, %22
  %45 = icmp ult i64 %17, %33
  br i1 %45, label %48, label %54

46:                                               ; preds = %37
  %47 = icmp slt i32 %42, 0
  br i1 %47, label %48, label %60

48:                                               ; preds = %44, %46
  %49 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %23, i64 0, i32 0, i32 0, i32 0
  %50 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %49, align 8
  %51 = icmp eq %"class.std::__1::__tree_node_base"* %50, null
  br i1 %51, label %52, label %75

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %23, i64 0, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %53, %"class.std::__1::__tree_end_node"** %1, align 8
  br label %81

54:                                               ; preds = %44
  br i1 %36, label %64, label %55

55:                                               ; preds = %54
  %56 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = bitcast %"struct.std::__1::__value_type"* %25 to i8*
  %59 = select i1 %29, i8* %57, i8* %58
  br label %60

60:                                               ; preds = %55, %46
  %61 = phi i8* [ %59, %55 ], [ %41, %46 ]
  %62 = tail call i32 @memcmp(i8* %61, i8* %21, i64 %35) #12
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %60, %54
  br i1 %34, label %67, label %73

65:                                               ; preds = %60
  %66 = icmp slt i32 %62, 0
  br i1 %66, label %67, label %73

67:                                               ; preds = %64, %65
  %68 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %23, i64 0, i32 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %71, label %75

71:                                               ; preds = %67
  %72 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %23, i64 0, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %1, align 8
  br label %81

73:                                               ; preds = %64, %65
  %74 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %23, i64 0, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %74, %"class.std::__1::__tree_end_node"** %1, align 8
  br label %81

75:                                               ; preds = %67, %48
  %76 = phi %"class.std::__1::__tree_node_base"* [ %50, %48 ], [ %69, %67 ]
  %77 = phi %"class.std::__1::__tree_node_base"** [ %49, %48 ], [ %68, %67 ]
  %78 = bitcast %"class.std::__1::__tree_node_base"* %76 to %"class.std::__1::__tree_node"*
  br label %22

79:                                               ; preds = %3
  store %"class.std::__1::__tree_end_node"* %4, %"class.std::__1::__tree_end_node"** %1, align 8
  %80 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %4, i64 0, i32 0
  br label %81

81:                                               ; preds = %79, %73, %71, %52
  %82 = phi %"class.std::__1::__tree_node_base"** [ %49, %52 ], [ %68, %71 ], [ %24, %73 ], [ %80, %79 ]
  ret %"class.std::__1::__tree_node_base"** %82
}

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #1 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !6
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !6
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !6
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::__tree_end_node"* @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN7gdb_rsp3AbiEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE4findIS7_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEElEERKT_(%"class.std::__1::__tree"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = bitcast %"class.std::__1::__tree_end_node"* %3 to %"class.std::__1::__tree_node"**
  %5 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %4, align 8
  %6 = icmp eq %"class.std::__1::__tree_node"* %5, null
  br i1 %6, label %84, label %7

7:                                                ; preds = %2
  %8 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = zext i8 %10 to i64
  %15 = select i1 %11, i64 %13, i64 %14
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %19 = select i1 %11, i8* %17, i8* %18
  br label %20

20:                                               ; preds = %46, %7
  %21 = phi %"class.std::__1::__tree_end_node"* [ %3, %7 ], [ %54, %46 ]
  %22 = phi %"class.std::__1::__tree_node"* [ %5, %7 ], [ %55, %46 ]
  %23 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %22, i64 0, i32 1
  %24 = bitcast %"struct.std::__1::__value_type"* %23 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  %28 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %22, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = zext i8 %26 to i64
  %31 = select i1 %27, i64 %29, i64 %30
  %32 = icmp ult i64 %15, %31
  %33 = select i1 %32, i64 %15, i64 %31
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %42, label %35

35:                                               ; preds = %20
  %36 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = bitcast %"struct.std::__1::__value_type"* %23 to i8*
  %39 = select i1 %27, i8* %37, i8* %38
  %40 = tail call i32 @memcmp(i8* %39, i8* %19, i64 %33) #12
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %35, %20
  %43 = icmp ult i64 %31, %15
  %44 = zext i1 %32 to i32
  %45 = select i1 %43, i32 -1, i32 %44
  br label %46

46:                                               ; preds = %42, %35
  %47 = phi i32 [ %45, %42 ], [ %40, %35 ]
  %48 = icmp slt i32 %47, 0
  %49 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %22, i64 0, i32 0, i32 1
  %50 = bitcast %"class.std::__1::__tree_node_base"** %49 to %"class.std::__1::__tree_node"**
  %51 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %22, i64 0, i32 0, i32 0
  %52 = bitcast %"class.std::__1::__tree_node"* %22 to %"class.std::__1::__tree_node"**
  %53 = select i1 %48, %"class.std::__1::__tree_node"** %50, %"class.std::__1::__tree_node"** %52
  %54 = select i1 %48, %"class.std::__1::__tree_end_node"* %21, %"class.std::__1::__tree_end_node"* %51
  %55 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %53, align 8
  %56 = icmp eq %"class.std::__1::__tree_node"* %55, null
  br i1 %56, label %57, label %20

57:                                               ; preds = %46
  %58 = icmp eq %"class.std::__1::__tree_end_node"* %54, %3
  br i1 %58, label %84, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %54, i64 4
  %61 = bitcast %"class.std::__1::__tree_end_node"* %60 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %62 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %61, i64 0, i32 1, i32 0
  %63 = load i8, i8* %62, align 1
  %64 = icmp slt i8 %63, 0
  %65 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %54, i64 5
  %66 = bitcast %"class.std::__1::__tree_end_node"* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = zext i8 %63 to i64
  %69 = select i1 %64, i64 %67, i64 %68
  %70 = icmp ult i64 %69, %15
  %71 = select i1 %70, i64 %69, i64 %15
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %80, label %73

73:                                               ; preds = %59
  %74 = bitcast %"class.std::__1::__tree_end_node"* %60 to i8**
  %75 = load i8*, i8** %74, align 8
  %76 = bitcast %"class.std::__1::__tree_end_node"* %60 to i8*
  %77 = select i1 %64, i8* %75, i8* %76
  %78 = tail call i32 @memcmp(i8* %19, i8* %77, i64 %71) #12
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %73, %59
  %81 = icmp ult i64 %15, %69
  br i1 %81, label %84, label %85

82:                                               ; preds = %73
  %83 = icmp slt i32 %78, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %57, %80, %2, %82
  br label %85

85:                                               ; preds = %80, %82, %84
  %86 = phi %"class.std::__1::__tree_end_node"* [ %3, %84 ], [ %54, %82 ], [ %54, %80 ]
  ret %"class.std::__1::__tree_end_node"* %86
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN7gdb_rsp3AbiEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJOS7_EEENSM_IJEEEEEENS_10unique_ptrINS_11__tree_nodeISB_PvEENS_22__tree_node_destructorINS5_IST_EEEEEEDpOT_: argument 0"}
!5 = distinct !{!5, !"_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPN7gdb_rsp3AbiEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJOS7_EEENSM_IJEEEEEENS_10unique_ptrINS_11__tree_nodeISB_PvEENS_22__tree_node_destructorINS5_IST_EEEEEEDpOT_"}
!6 = !{i8 0, i8 2}
