; ModuleID = '../../media/cast/sender/sender_encoded_frame.cc'
source_filename = "../../media/cast/sender/sender_encoded_frame.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.media::cast::SenderEncodedFrame" = type { %"struct.media::cast::EncodedFrame", double, double, %"class.base::TimeTicks" }
%"struct.media::cast::EncodedFrame" = type { i32 (...)**, i32, %"class.media::cast::FrameId", %"class.media::cast::FrameId", %"class.media::cast::RtpTimeTicks", %"class.base::TimeTicks", i16, %"class.std::__1::basic_string" }
%"class.media::cast::FrameId" = type { %"class.media::cast::ExpandedValueBase" }
%"class.media::cast::ExpandedValueBase" = type { i64 }
%"class.media::cast::RtpTimeTicks" = type { %"class.media::cast::ExpandedValueBase.0" }
%"class.media::cast::ExpandedValueBase.0" = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }

@_ZTVN5media4cast18SenderEncodedFrameE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.media::cast::SenderEncodedFrame"*)* @_ZN5media4cast18SenderEncodedFrameD2Ev to i8*), i8* bitcast (void (%"struct.media::cast::SenderEncodedFrame"*)* @_ZN5media4cast18SenderEncodedFrameD0Ev to i8*)] }, align 8

@_ZN5media4cast18SenderEncodedFrameC1Ev = hidden unnamed_addr alias void (%"struct.media::cast::SenderEncodedFrame"*), void (%"struct.media::cast::SenderEncodedFrame"*)* @_ZN5media4cast18SenderEncodedFrameC2Ev
@_ZN5media4cast18SenderEncodedFrameD1Ev = hidden unnamed_addr alias void (%"struct.media::cast::SenderEncodedFrame"*), void (%"struct.media::cast::SenderEncodedFrame"*)* @_ZN5media4cast18SenderEncodedFrameD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media4cast18SenderEncodedFrameC2Ev(%"struct.media::cast::SenderEncodedFrame"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %0, i64 0, i32 0
  tail call void @_ZN5media4cast12EncodedFrameC2Ev(%"struct.media::cast::EncodedFrame"* %2) #4
  %3 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5media4cast18SenderEncodedFrameE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %0, i64 0, i32 1
  %5 = bitcast double* %4 to <2 x double>*
  store <2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double>* %5, align 8
  %6 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %0, i64 0, i32 3, i32 0, i32 0
  store i64 0, i64* %6, align 8
  ret void
}

declare void @_ZN5media4cast12EncodedFrameC2Ev(%"struct.media::cast::EncodedFrame"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5media4cast12EncodedFrameD2Ev(%"struct.media::cast::EncodedFrame"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media4cast18SenderEncodedFrameD2Ev(%"struct.media::cast::SenderEncodedFrame"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %0, i64 0, i32 0
  tail call void @_ZN5media4cast12EncodedFrameD2Ev(%"struct.media::cast::EncodedFrame"* %2) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media4cast18SenderEncodedFrameD0Ev(%"struct.media::cast::SenderEncodedFrame"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %0, i64 0, i32 0
  tail call void @_ZN5media4cast12EncodedFrameD2Ev(%"struct.media::cast::EncodedFrame"* %2) #4
  %3 = bitcast %"struct.media::cast::SenderEncodedFrame"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
