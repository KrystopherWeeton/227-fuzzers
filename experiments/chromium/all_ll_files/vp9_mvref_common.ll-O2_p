; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/common/vp9_mvref_common.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/common/vp9_mvref_common.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.position = type { i32, i32 }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%union.int_mv = type { i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.buf_2d = type { i8*, i32 }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.mv = type { i16, i16 }

@mv_ref_blocks = internal unnamed_addr constant [13 x [8 x %struct.position]] [[8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -2 }], [8 x %struct.position] [%struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 0 }, %struct.position { i32 1, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -1 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 1 }, %struct.position { i32 1, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 -3 }], [8 x %struct.position] [%struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 0 }, %struct.position { i32 2, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -1, i32 1 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 -3, i32 -3 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 2 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 1, i32 -1 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 -3 }], [8 x %struct.position] [%struct.position { i32 -1, i32 1 }, %struct.position { i32 1, i32 -1 }, %struct.position { i32 -1, i32 2 }, %struct.position { i32 2, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 -3 }], [8 x %struct.position] [%struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 0 }, %struct.position { i32 4, i32 -1 }, %struct.position { i32 -1, i32 2 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 2, i32 -1 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 4 }, %struct.position { i32 2, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -1, i32 2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 3 }, %struct.position { i32 3, i32 -1 }, %struct.position { i32 -1, i32 4 }, %struct.position { i32 4, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 6 }]], align 16
@mode_2_counter = internal unnamed_addr constant [14 x i32] [i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 0, i32 0, i32 3, i32 1], align 16
@counter_to_context = internal unnamed_addr constant [19 x i32] [i32 2, i32 3, i32 4, i32 1, i32 3, i32 9, i32 0, i32 9, i32 9, i32 5, i32 5, i32 9, i32 5, i32 9, i32 9, i32 9, i32 9, i32 9, i32 6], align 16
@idx_n_column_to_subblock = internal unnamed_addr constant [4 x [2 x i32]] [[2 x i32] [i32 1, i32 2], [2 x i32] [i32 1, i32 3], [2 x i32] [i32 3, i32 2], [2 x i32] [i32 3, i32 3]], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_find_mv_refs(%struct.VP9Common* nocapture readonly, %struct.macroblockd* nocapture readonly, %struct.MODE_INFO* nocapture readonly, i8 signext, %union.int_mv*, i32, i32, i8* nocapture) local_unnamed_addr #0 {
  tail call fastcc void @find_mv_refs_idx(%struct.VP9Common* %0, %struct.macroblockd* %1, %struct.MODE_INFO* %2, i8 signext %3, %union.int_mv* %4, i32 -1, i32 %5, i32 %6, i8* %7)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @find_mv_refs_idx(%struct.VP9Common* nocapture readonly, %struct.macroblockd* nocapture readonly, %struct.MODE_INFO* nocapture readonly, i8 signext, %union.int_mv*, i32, i32, i32, i8* nocapture) unnamed_addr #0 {
  %10 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %2, i64 0, i32 0
  %11 = load i8, i8* %10, align 4
  %12 = zext i8 %11 to i64
  %13 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 56
  %14 = load i32, i32* %13, align 16
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %28, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 13
  %18 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %17, align 16
  %19 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %18, i64 0, i32 1
  %20 = load %struct.MV_REF*, %struct.MV_REF** %19, align 8
  %21 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %22 = load i32, i32* %21, align 8
  %23 = mul nsw i32 %22, %6
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %20, i64 %24
  %26 = sext i32 %7 to i64
  %27 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %25, i64 %26
  br label %28

28:                                               ; preds = %9, %16
  %29 = phi %struct.MV_REF* [ %27, %16 ], [ null, %9 ]
  %30 = bitcast %union.int_mv* %4 to i64*
  store i64 0, i64* %30, align 4
  %31 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %32 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i32 2
  %33 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i32 3
  %34 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %35 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5
  %36 = icmp sgt i32 %5, -1
  %37 = sext i32 %5 to i64
  %38 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 0, i32 0
  %39 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %12, i64 0, i32 0
  %40 = load i32, i32* %39, align 16
  %41 = add nsw i32 %40, %6
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %152, label %48

43:                                               ; preds = %152, %541, %550, %570, %592, %594, %613, %615
  %44 = phi i32 [ %153, %550 ], [ %153, %541 ], [ %153, %152 ], [ %153, %613 ], [ %153, %592 ], [ %153, %570 ], [ %591, %594 ], [ %612, %615 ]
  %45 = phi i32 [ %154, %550 ], [ %154, %541 ], [ %154, %152 ], [ %566, %613 ], [ %566, %592 ], [ %566, %570 ], [ %566, %594 ], [ %566, %615 ]
  %46 = phi i32 [ %155, %550 ], [ %155, %541 ], [ %155, %152 ], [ 1, %613 ], [ 1, %592 ], [ 1, %570 ], [ 1, %594 ], [ 1, %615 ]
  %47 = phi i32 [ %156, %550 ], [ %156, %541 ], [ %156, %152 ], [ 1, %613 ], [ 1, %592 ], [ %156, %570 ], [ 1, %594 ], [ 1, %615 ]
  br label %161

48:                                               ; preds = %28
  %49 = load i32, i32* %31, align 16
  %50 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %12, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = add nsw i32 %51, %7
  %53 = load i32, i32* %32, align 4
  %54 = icmp sge i32 %52, %53
  %55 = icmp slt i32 %41, %49
  %56 = and i1 %55, %54
  br i1 %56, label %57, label %152

57:                                               ; preds = %48
  %58 = load i32, i32* %33, align 4
  %59 = icmp slt i32 %52, %58
  br i1 %59, label %60, label %152

60:                                               ; preds = %57
  %61 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %34, align 8
  %62 = load i32, i32* %35, align 8
  %63 = mul nsw i32 %62, %40
  %64 = add nsw i32 %63, %51
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %61, i64 %65
  %67 = load %struct.MODE_INFO*, %struct.MODE_INFO** %66, align 8
  %68 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %67, i64 0, i32 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [14 x i32], [14 x i32]* @mode_2_counter, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %67, i64 0, i32 8, i64 0
  %74 = load i8, i8* %73, align 4
  %75 = icmp eq i8 %74, %3
  br i1 %75, label %76, label %112

76:                                               ; preds = %60
  br i1 %36, label %77, label %88

77:                                               ; preds = %76
  %78 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %67, i64 0, i32 0
  %79 = load i8, i8* %78, align 4
  %80 = icmp ult i8 %79, 3
  br i1 %80, label %81, label %88

81:                                               ; preds = %77
  %82 = lshr i64 2415, %12
  %83 = and i64 %82, 1
  %84 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @idx_n_column_to_subblock, i64 0, i64 %37, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %67, i64 0, i32 10, i64 %86, i32 1, i64 0, i32 0
  br label %109

88:                                               ; preds = %77, %76
  %89 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %67, i64 0, i32 9, i64 0, i32 0
  br label %109

90:                                               ; preds = %613
  %91 = zext i32 %156 to i64
  br i1 %36, label %92, label %103

92:                                               ; preds = %90
  %93 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 0
  %94 = load i8, i8* %93, align 4
  %95 = icmp ult i8 %94, 3
  br i1 %95, label %96, label %103

96:                                               ; preds = %92
  %97 = lshr i64 1168, %12
  %98 = and i64 %97, 1
  %99 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @idx_n_column_to_subblock, i64 0, i64 %37, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 10, i64 %101, i32 1, i64 0, i32 0
  br label %105

103:                                              ; preds = %92, %90
  %104 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 9, i64 0, i32 0
  br label %105

105:                                              ; preds = %96, %103
  %106 = phi i32* [ %102, %96 ], [ %104, %103 ]
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 %91, i32 0
  store i32 %107, i32* %108, align 4
  br label %478

109:                                              ; preds = %88, %81
  %110 = phi i32* [ %87, %81 ], [ %89, %88 ]
  %111 = load i32, i32* %110, align 4
  store i32 %111, i32* %38, align 4
  br label %152

112:                                              ; preds = %60
  %113 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %67, i64 0, i32 8, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, %3
  br i1 %115, label %116, label %152

116:                                              ; preds = %112
  br i1 %36, label %117, label %128

117:                                              ; preds = %116
  %118 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %67, i64 0, i32 0
  %119 = load i8, i8* %118, align 4
  %120 = icmp ult i8 %119, 3
  br i1 %120, label %121, label %128

121:                                              ; preds = %117
  %122 = lshr i64 2415, %12
  %123 = and i64 %122, 1
  %124 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @idx_n_column_to_subblock, i64 0, i64 %37, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %67, i64 0, i32 10, i64 %126, i32 1, i64 1, i32 0
  br label %149

128:                                              ; preds = %117, %116
  %129 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %67, i64 0, i32 9, i64 1, i32 0
  br label %149

130:                                              ; preds = %592
  %131 = zext i32 %156 to i64
  br i1 %36, label %132, label %143

132:                                              ; preds = %130
  %133 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 0
  %134 = load i8, i8* %133, align 4
  %135 = icmp ult i8 %134, 3
  br i1 %135, label %136, label %143

136:                                              ; preds = %132
  %137 = lshr i64 1168, %12
  %138 = and i64 %137, 1
  %139 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @idx_n_column_to_subblock, i64 0, i64 %37, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 10, i64 %141, i32 1, i64 1, i32 0
  br label %145

143:                                              ; preds = %132, %130
  %144 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 9, i64 1, i32 0
  br label %145

145:                                              ; preds = %136, %143
  %146 = phi i32* [ %142, %136 ], [ %144, %143 ]
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 %131, i32 0
  store i32 %147, i32* %148, align 4
  br label %478

149:                                              ; preds = %128, %121
  %150 = phi i32* [ %127, %121 ], [ %129, %128 ]
  %151 = load i32, i32* %150, align 4
  store i32 %151, i32* %38, align 4
  br label %152

152:                                              ; preds = %57, %109, %149, %112, %28, %48
  %153 = phi i32 [ 0, %57 ], [ 0, %48 ], [ 0, %28 ], [ 0, %112 ], [ %151, %149 ], [ %111, %109 ]
  %154 = phi i32 [ 0, %57 ], [ 0, %48 ], [ 0, %28 ], [ %72, %112 ], [ %72, %149 ], [ %72, %109 ]
  %155 = phi i32 [ 0, %57 ], [ 0, %48 ], [ 0, %28 ], [ 1, %112 ], [ 1, %149 ], [ 1, %109 ]
  %156 = phi i32 [ 0, %57 ], [ 0, %48 ], [ 0, %28 ], [ 0, %112 ], [ 1, %149 ], [ 1, %109 ]
  %157 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %12, i64 1, i32 0
  %158 = load i32, i32* %157, align 8
  %159 = add nsw i32 %158, %6
  %160 = icmp slt i32 %159, 0
  br i1 %160, label %43, label %541

161:                                              ; preds = %219, %43
  %162 = phi i32 [ %44, %43 ], [ %220, %219 ]
  %163 = phi i32 [ %44, %43 ], [ %221, %219 ]
  %164 = phi i32 [ %44, %43 ], [ %222, %219 ]
  %165 = phi i64 [ 2, %43 ], [ %225, %219 ]
  %166 = phi i32 [ %47, %43 ], [ %224, %219 ]
  %167 = phi i32 [ %46, %43 ], [ %223, %219 ]
  %168 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %12, i64 %165, i32 0
  %169 = load i32, i32* %168, align 8
  %170 = add nsw i32 %169, %6
  %171 = icmp slt i32 %170, 0
  br i1 %171, label %219, label %172

172:                                              ; preds = %161
  %173 = load i32, i32* %31, align 16
  %174 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %12, i64 %165, i32 1
  %175 = load i32, i32* %174, align 4
  %176 = add nsw i32 %175, %7
  %177 = load i32, i32* %32, align 4
  %178 = icmp sge i32 %176, %177
  %179 = icmp slt i32 %170, %173
  %180 = and i1 %179, %178
  br i1 %180, label %181, label %219

181:                                              ; preds = %172
  %182 = load i32, i32* %33, align 4
  %183 = icmp slt i32 %176, %182
  br i1 %183, label %184, label %219

184:                                              ; preds = %181
  %185 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %34, align 8
  %186 = load i32, i32* %35, align 8
  %187 = mul nsw i32 %186, %169
  %188 = add nsw i32 %187, %175
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %185, i64 %189
  %191 = load %struct.MODE_INFO*, %struct.MODE_INFO** %190, align 8
  %192 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %191, i64 0, i32 8, i64 0
  %193 = load i8, i8* %192, align 4
  %194 = icmp eq i8 %193, %3
  br i1 %194, label %195, label %205

195:                                              ; preds = %184
  %196 = icmp eq i32 %166, 0
  %197 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %191, i64 0, i32 9, i64 0, i32 0
  %198 = load i32, i32* %197, align 4
  br i1 %196, label %204, label %199

199:                                              ; preds = %195
  %200 = icmp eq i32 %198, %163
  br i1 %200, label %219, label %201

201:                                              ; preds = %199
  %202 = sext i32 %166 to i64
  %203 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 %202, i32 0
  store i32 %198, i32* %203, align 4
  br label %478

204:                                              ; preds = %195
  store i32 %198, i32* %38, align 4
  br label %219

205:                                              ; preds = %184
  %206 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %191, i64 0, i32 8, i64 1
  %207 = load i8, i8* %206, align 1
  %208 = icmp eq i8 %207, %3
  br i1 %208, label %209, label %219

209:                                              ; preds = %205
  %210 = icmp eq i32 %166, 0
  %211 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %191, i64 0, i32 9, i64 1, i32 0
  %212 = load i32, i32* %211, align 4
  br i1 %210, label %218, label %213

213:                                              ; preds = %209
  %214 = icmp eq i32 %212, %164
  br i1 %214, label %219, label %215

215:                                              ; preds = %213
  %216 = sext i32 %166 to i64
  %217 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 %216, i32 0
  store i32 %212, i32* %217, align 4
  br label %478

218:                                              ; preds = %209
  store i32 %212, i32* %38, align 4
  br label %219

219:                                              ; preds = %181, %204, %218, %205, %213, %199, %161, %172
  %220 = phi i32 [ %162, %181 ], [ %162, %172 ], [ %162, %161 ], [ %162, %199 ], [ %162, %213 ], [ %162, %205 ], [ %212, %218 ], [ %198, %204 ]
  %221 = phi i32 [ %163, %181 ], [ %163, %172 ], [ %163, %161 ], [ %163, %199 ], [ %163, %213 ], [ %163, %205 ], [ %212, %218 ], [ %198, %204 ]
  %222 = phi i32 [ %164, %181 ], [ %164, %172 ], [ %164, %161 ], [ %163, %199 ], [ %164, %213 ], [ %164, %205 ], [ %212, %218 ], [ %198, %204 ]
  %223 = phi i32 [ %167, %181 ], [ %167, %172 ], [ %167, %161 ], [ 1, %199 ], [ 1, %213 ], [ 1, %205 ], [ 1, %218 ], [ 1, %204 ]
  %224 = phi i32 [ %166, %181 ], [ %166, %172 ], [ %166, %161 ], [ %166, %199 ], [ %166, %213 ], [ %166, %205 ], [ 1, %218 ], [ 1, %204 ]
  %225 = add nuw nsw i64 %165, 1
  %226 = icmp eq i64 %225, 8
  br i1 %226, label %227, label %161

227:                                              ; preds = %219
  %228 = load i32, i32* %13, align 16
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %258, label %230

230:                                              ; preds = %227
  %231 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %29, i64 0, i32 1, i64 0
  %232 = load i8, i8* %231, align 4
  %233 = icmp eq i8 %232, %3
  br i1 %233, label %234, label %244

234:                                              ; preds = %230
  %235 = icmp eq i32 %224, 0
  %236 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %29, i64 0, i32 0, i64 0, i32 0
  %237 = load i32, i32* %236, align 4
  br i1 %235, label %243, label %238

238:                                              ; preds = %234
  %239 = icmp eq i32 %237, %220
  br i1 %239, label %258, label %240

240:                                              ; preds = %238
  %241 = sext i32 %224 to i64
  %242 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 %241, i32 0
  store i32 %237, i32* %242, align 4
  br label %478

243:                                              ; preds = %234
  store i32 %237, i32* %38, align 4
  br label %258

244:                                              ; preds = %230
  %245 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %29, i64 0, i32 1, i64 1
  %246 = load i8, i8* %245, align 1
  %247 = icmp eq i8 %246, %3
  br i1 %247, label %248, label %258

248:                                              ; preds = %244
  %249 = icmp eq i32 %224, 0
  %250 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %29, i64 0, i32 0, i64 1, i32 0
  %251 = load i32, i32* %250, align 4
  br i1 %249, label %257, label %252

252:                                              ; preds = %248
  %253 = icmp eq i32 %251, %220
  br i1 %253, label %258, label %254

254:                                              ; preds = %252
  %255 = sext i32 %224 to i64
  %256 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 %255, i32 0
  store i32 %251, i32* %256, align 4
  br label %478

257:                                              ; preds = %248
  store i32 %251, i32* %38, align 4
  br label %258

258:                                              ; preds = %238, %252, %227, %243, %257, %244
  %259 = phi i32 [ %220, %238 ], [ %237, %243 ], [ %220, %252 ], [ %251, %257 ], [ %220, %244 ], [ %220, %227 ]
  %260 = phi i32 [ %224, %238 ], [ 1, %243 ], [ %224, %252 ], [ 1, %257 ], [ %224, %244 ], [ %224, %227 ]
  %261 = icmp eq i32 %223, 0
  br i1 %261, label %379, label %262

262:                                              ; preds = %258
  %263 = sext i8 %3 to i64
  %264 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %263
  br label %265

265:                                              ; preds = %376, %262
  %266 = phi i32 [ %259, %262 ], [ %370, %376 ]
  %267 = phi i32 [ %259, %262 ], [ %371, %376 ]
  %268 = phi i32 [ %259, %262 ], [ %372, %376 ]
  %269 = phi i32 [ %40, %262 ], [ %378, %376 ]
  %270 = phi i64 [ 0, %262 ], [ %374, %376 ]
  %271 = phi i32 [ %260, %262 ], [ %373, %376 ]
  %272 = add nsw i32 %269, %6
  %273 = icmp slt i32 %272, 0
  br i1 %273, label %369, label %274

274:                                              ; preds = %265
  %275 = load i32, i32* %31, align 16
  %276 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %12, i64 %270, i32 1
  %277 = load i32, i32* %276, align 4
  %278 = add nsw i32 %277, %7
  %279 = load i32, i32* %32, align 4
  %280 = icmp sge i32 %278, %279
  %281 = icmp slt i32 %272, %275
  %282 = and i1 %281, %280
  br i1 %282, label %283, label %369

283:                                              ; preds = %274
  %284 = load i32, i32* %33, align 4
  %285 = icmp slt i32 %278, %284
  br i1 %285, label %286, label %369

286:                                              ; preds = %283
  %287 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %34, align 8
  %288 = load i32, i32* %35, align 8
  %289 = mul nsw i32 %288, %269
  %290 = add nsw i32 %289, %277
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %287, i64 %291
  %293 = load %struct.MODE_INFO*, %struct.MODE_INFO** %292, align 8
  %294 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %293, i64 0, i32 8, i64 0
  %295 = load i8, i8* %294, align 4
  %296 = icmp slt i8 %295, 1
  br i1 %296, label %369, label %297

297:                                              ; preds = %286
  %298 = icmp eq i8 %295, %3
  br i1 %298, label %327, label %299

299:                                              ; preds = %297
  %300 = icmp eq i32 %271, 0
  %301 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %293, i64 0, i32 9, i64 0
  %302 = bitcast %union.int_mv* %301 to i8*
  %303 = bitcast %union.int_mv* %301 to i16*
  %304 = load i16, i16* %303, align 4
  %305 = getelementptr inbounds i8, i8* %302, i64 2
  %306 = bitcast i8* %305 to i16*
  %307 = load i16, i16* %306, align 2
  %308 = sext i8 %295 to i64
  %309 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %308
  %310 = load i32, i32* %309, align 4
  %311 = load i32, i32* %264, align 4
  %312 = icmp eq i32 %310, %311
  %313 = sub i16 0, %304
  %314 = sub i16 0, %307
  %315 = select i1 %312, i16 %304, i16 %313
  %316 = select i1 %312, i16 %307, i16 %314
  %317 = zext i16 %316 to i32
  %318 = shl nuw i32 %317, 16
  %319 = zext i16 %315 to i32
  %320 = or i32 %318, %319
  br i1 %300, label %326, label %321

321:                                              ; preds = %299
  %322 = icmp eq i32 %320, %268
  br i1 %322, label %327, label %323

323:                                              ; preds = %321
  %324 = sext i32 %271 to i64
  %325 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 %324, i32 0
  store i32 %320, i32* %325, align 4
  br label %478

326:                                              ; preds = %299
  store i32 %320, i32* %38, align 4
  br label %327

327:                                              ; preds = %321, %297, %326
  %328 = phi i32 [ %266, %321 ], [ %320, %326 ], [ %266, %297 ]
  %329 = phi i32 [ %267, %321 ], [ %320, %326 ], [ %267, %297 ]
  %330 = phi i32 [ %268, %321 ], [ %320, %326 ], [ %268, %297 ]
  %331 = phi i32 [ %271, %321 ], [ 1, %326 ], [ %271, %297 ]
  %332 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %293, i64 0, i32 8, i64 1
  %333 = load i8, i8* %332, align 1
  %334 = icmp slt i8 %333, 1
  %335 = icmp eq i8 %333, %3
  %336 = or i1 %334, %335
  br i1 %336, label %369, label %337

337:                                              ; preds = %327
  %338 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %293, i64 0, i32 9, i64 1, i32 0
  %339 = load i32, i32* %338, align 4
  %340 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %293, i64 0, i32 9, i64 0, i32 0
  %341 = load i32, i32* %340, align 4
  %342 = icmp eq i32 %339, %341
  br i1 %342, label %369, label %343

343:                                              ; preds = %337
  %344 = icmp eq i32 %331, 0
  %345 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %293, i64 0, i32 9, i64 1
  %346 = bitcast %union.int_mv* %345 to i8*
  %347 = getelementptr inbounds i8, i8* %346, i64 2
  %348 = bitcast i8* %347 to i16*
  %349 = load i16, i16* %348, align 2
  %350 = sext i8 %333 to i64
  %351 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %350
  %352 = load i32, i32* %351, align 4
  %353 = load i32, i32* %264, align 4
  %354 = icmp eq i32 %352, %353
  %355 = sub i32 0, %339
  %356 = sub i16 0, %349
  %357 = select i1 %354, i32 %339, i32 %355
  %358 = select i1 %354, i16 %349, i16 %356
  %359 = zext i16 %358 to i32
  %360 = shl nuw i32 %359, 16
  %361 = and i32 %357, 65535
  %362 = or i32 %360, %361
  br i1 %344, label %368, label %363

363:                                              ; preds = %343
  %364 = icmp eq i32 %362, %329
  br i1 %364, label %369, label %365

365:                                              ; preds = %363
  %366 = sext i32 %331 to i64
  %367 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 %366, i32 0
  store i32 %362, i32* %367, align 4
  br label %478

368:                                              ; preds = %343
  store i32 %362, i32* %38, align 4
  br label %369

369:                                              ; preds = %283, %368, %286, %327, %337, %363, %265, %274
  %370 = phi i32 [ %266, %283 ], [ %266, %274 ], [ %266, %265 ], [ %266, %286 ], [ %328, %327 ], [ %328, %337 ], [ %362, %368 ], [ %328, %363 ]
  %371 = phi i32 [ %267, %283 ], [ %267, %274 ], [ %267, %265 ], [ %267, %286 ], [ %329, %327 ], [ %329, %337 ], [ %362, %368 ], [ %329, %363 ]
  %372 = phi i32 [ %268, %283 ], [ %268, %274 ], [ %268, %265 ], [ %268, %286 ], [ %330, %327 ], [ %330, %337 ], [ %362, %368 ], [ %329, %363 ]
  %373 = phi i32 [ %271, %283 ], [ %271, %274 ], [ %271, %265 ], [ %271, %286 ], [ %331, %327 ], [ %331, %337 ], [ 1, %368 ], [ %331, %363 ]
  %374 = add nuw nsw i64 %270, 1
  %375 = icmp eq i64 %374, 8
  br i1 %375, label %379, label %376

376:                                              ; preds = %369
  %377 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %12, i64 %374, i32 0
  %378 = load i32, i32* %377, align 8
  br label %265

379:                                              ; preds = %369, %258
  %380 = phi i32 [ %259, %258 ], [ %370, %369 ]
  %381 = phi i32 [ %260, %258 ], [ %373, %369 ]
  %382 = load i32, i32* %13, align 16
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %478, label %384

384:                                              ; preds = %379
  %385 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %29, i64 0, i32 1, i64 0
  %386 = load i8, i8* %385, align 4
  %387 = icmp ne i8 %386, %3
  %388 = icmp sgt i8 %386, 0
  %389 = and i1 %387, %388
  br i1 %389, label %390, label %427

390:                                              ; preds = %384
  %391 = bitcast %struct.MV_REF* %29 to i8*
  %392 = bitcast %struct.MV_REF* %29 to i16*
  %393 = load i16, i16* %392, align 4
  %394 = getelementptr inbounds i8, i8* %391, i64 2
  %395 = bitcast i8* %394 to i16*
  %396 = load i16, i16* %395, align 2
  %397 = sext i8 %386 to i64
  %398 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %397
  %399 = load i32, i32* %398, align 4
  %400 = sext i8 %3 to i64
  %401 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %400
  %402 = load i32, i32* %401, align 4
  %403 = icmp eq i32 %399, %402
  %404 = sub i16 0, %393
  %405 = sub i16 0, %396
  %406 = select i1 %403, i16 %396, i16 %405
  %407 = select i1 %403, i16 %393, i16 %404
  %408 = icmp eq i32 %381, 0
  br i1 %408, label %415, label %409

409:                                              ; preds = %390
  %410 = zext i16 %406 to i32
  %411 = shl nuw i32 %410, 16
  %412 = zext i16 %407 to i32
  %413 = or i32 %411, %412
  %414 = icmp eq i32 %413, %380
  br i1 %414, label %427, label %420

415:                                              ; preds = %390
  %416 = bitcast %union.int_mv* %4 to i8*
  %417 = bitcast %union.int_mv* %4 to i16*
  store i16 %407, i16* %417, align 4
  %418 = getelementptr inbounds i8, i8* %416, i64 2
  %419 = bitcast i8* %418 to i16*
  store i16 %406, i16* %419, align 2
  br label %427

420:                                              ; preds = %409
  %421 = sext i32 %381 to i64
  %422 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 %421
  %423 = bitcast %union.int_mv* %422 to i8*
  %424 = bitcast %union.int_mv* %422 to i16*
  store i16 %407, i16* %424, align 4
  %425 = getelementptr inbounds i8, i8* %423, i64 2
  %426 = bitcast i8* %425 to i16*
  store i16 %406, i16* %426, align 2
  br label %478

427:                                              ; preds = %415, %409, %384
  %428 = phi i32 [ %381, %384 ], [ 1, %415 ], [ %381, %409 ]
  %429 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %29, i64 0, i32 1, i64 1
  %430 = load i8, i8* %429, align 1
  %431 = icmp slt i8 %430, 1
  %432 = icmp eq i8 %430, %3
  %433 = or i1 %431, %432
  br i1 %433, label %478, label %434

434:                                              ; preds = %427
  %435 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %29, i64 0, i32 0, i64 1
  %436 = getelementptr inbounds %union.int_mv, %union.int_mv* %435, i64 0, i32 0
  %437 = load i32, i32* %436, align 4
  %438 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %29, i64 0, i32 0, i64 0, i32 0
  %439 = load i32, i32* %438, align 4
  %440 = icmp eq i32 %437, %439
  %441 = trunc i32 %437 to i16
  br i1 %440, label %478, label %442

442:                                              ; preds = %434
  %443 = bitcast %union.int_mv* %435 to i8*
  %444 = getelementptr inbounds i8, i8* %443, i64 2
  %445 = bitcast i8* %444 to i16*
  %446 = load i16, i16* %445, align 2
  %447 = sext i8 %430 to i64
  %448 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %447
  %449 = load i32, i32* %448, align 4
  %450 = sext i8 %3 to i64
  %451 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %450
  %452 = load i32, i32* %451, align 4
  %453 = icmp eq i32 %449, %452
  %454 = sub i16 0, %441
  %455 = sub i16 0, %446
  %456 = select i1 %453, i16 %446, i16 %455
  %457 = select i1 %453, i16 %441, i16 %454
  %458 = icmp eq i32 %428, 0
  br i1 %458, label %473, label %459

459:                                              ; preds = %442
  %460 = zext i16 %456 to i32
  %461 = shl nuw i32 %460, 16
  %462 = zext i16 %457 to i32
  %463 = or i32 %461, %462
  %464 = load i32, i32* %38, align 4
  %465 = icmp eq i32 %463, %464
  br i1 %465, label %478, label %466

466:                                              ; preds = %459
  %467 = sext i32 %428 to i64
  %468 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 %467
  %469 = bitcast %union.int_mv* %468 to i8*
  %470 = bitcast %union.int_mv* %468 to i16*
  store i16 %457, i16* %470, align 4
  %471 = getelementptr inbounds i8, i8* %469, i64 2
  %472 = bitcast i8* %471 to i16*
  store i16 %456, i16* %472, align 2
  br label %478

473:                                              ; preds = %442
  %474 = bitcast %union.int_mv* %4 to i8*
  %475 = bitcast %union.int_mv* %4 to i16*
  store i16 %457, i16* %475, align 4
  %476 = getelementptr inbounds i8, i8* %474, i64 2
  %477 = bitcast i8* %476 to i16*
  store i16 %456, i16* %477, align 2
  br label %478

478:                                              ; preds = %420, %365, %323, %215, %201, %145, %105, %466, %459, %473, %427, %434, %379, %254, %240
  %479 = phi i32 [ %45, %240 ], [ %45, %434 ], [ %45, %427 ], [ %45, %420 ], [ %45, %379 ], [ %45, %254 ], [ %45, %473 ], [ %45, %459 ], [ %45, %466 ], [ %566, %145 ], [ %566, %105 ], [ %45, %201 ], [ %45, %215 ], [ %45, %323 ], [ %45, %365 ]
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds [19 x i32], [19 x i32]* @counter_to_context, i64 0, i64 %480
  %482 = load i32, i32* %481, align 4
  %483 = trunc i32 %482 to i8
  %484 = sext i8 %3 to i64
  %485 = getelementptr inbounds i8, i8* %8, i64 %484
  store i8 %483, i8* %485, align 1
  %486 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 12
  %487 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 13
  %488 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 14
  %489 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 15
  %490 = bitcast %union.int_mv* %4 to %struct.mv*
  %491 = load i32, i32* %486, align 8
  %492 = add nsw i32 %491, -128
  %493 = load i32, i32* %487, align 4
  %494 = add nsw i32 %493, 128
  %495 = load i32, i32* %488, align 8
  %496 = add nsw i32 %495, -128
  %497 = load i32, i32* %489, align 4
  %498 = add nsw i32 %497, 128
  %499 = getelementptr inbounds %struct.mv, %struct.mv* %490, i64 0, i32 1
  %500 = load i16, i16* %499, align 2
  %501 = sext i16 %500 to i32
  %502 = icmp sgt i32 %492, %501
  %503 = icmp slt i32 %494, %501
  %504 = select i1 %503, i32 %494, i32 %501
  %505 = select i1 %502, i32 %492, i32 %504
  %506 = trunc i32 %505 to i16
  store i16 %506, i16* %499, align 2
  %507 = bitcast %union.int_mv* %4 to i16*
  %508 = load i16, i16* %507, align 2
  %509 = sext i16 %508 to i32
  %510 = icmp sgt i32 %496, %509
  %511 = icmp slt i32 %498, %509
  %512 = select i1 %511, i32 %498, i32 %509
  %513 = select i1 %510, i32 %496, i32 %512
  %514 = trunc i32 %513 to i16
  store i16 %514, i16* %507, align 2
  %515 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 1
  %516 = bitcast %union.int_mv* %515 to %struct.mv*
  %517 = load i32, i32* %486, align 8
  %518 = add nsw i32 %517, -128
  %519 = load i32, i32* %487, align 4
  %520 = add nsw i32 %519, 128
  %521 = load i32, i32* %488, align 8
  %522 = add nsw i32 %521, -128
  %523 = load i32, i32* %489, align 4
  %524 = add nsw i32 %523, 128
  %525 = getelementptr inbounds %struct.mv, %struct.mv* %516, i64 0, i32 1
  %526 = load i16, i16* %525, align 2
  %527 = sext i16 %526 to i32
  %528 = icmp sgt i32 %518, %527
  %529 = icmp slt i32 %520, %527
  %530 = select i1 %529, i32 %520, i32 %527
  %531 = select i1 %528, i32 %518, i32 %530
  %532 = trunc i32 %531 to i16
  store i16 %532, i16* %525, align 2
  %533 = bitcast %union.int_mv* %515 to i16*
  %534 = load i16, i16* %533, align 2
  %535 = sext i16 %534 to i32
  %536 = icmp sgt i32 %522, %535
  %537 = icmp slt i32 %524, %535
  %538 = select i1 %537, i32 %524, i32 %535
  %539 = select i1 %536, i32 %522, i32 %538
  %540 = trunc i32 %539 to i16
  store i16 %540, i16* %533, align 2
  ret void

541:                                              ; preds = %152
  %542 = load i32, i32* %31, align 16
  %543 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %12, i64 1, i32 1
  %544 = load i32, i32* %543, align 4
  %545 = add nsw i32 %544, %7
  %546 = load i32, i32* %32, align 4
  %547 = icmp sge i32 %545, %546
  %548 = icmp slt i32 %159, %542
  %549 = and i1 %548, %547
  br i1 %549, label %550, label %43

550:                                              ; preds = %541
  %551 = load i32, i32* %33, align 4
  %552 = icmp slt i32 %545, %551
  br i1 %552, label %553, label %43

553:                                              ; preds = %550
  %554 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %34, align 8
  %555 = load i32, i32* %35, align 8
  %556 = mul nsw i32 %555, %158
  %557 = add nsw i32 %556, %544
  %558 = sext i32 %557 to i64
  %559 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %554, i64 %558
  %560 = load %struct.MODE_INFO*, %struct.MODE_INFO** %559, align 8
  %561 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 1
  %562 = load i8, i8* %561, align 1
  %563 = zext i8 %562 to i64
  %564 = getelementptr inbounds [14 x i32], [14 x i32]* @mode_2_counter, i64 0, i64 %563
  %565 = load i32, i32* %564, align 4
  %566 = add nsw i32 %565, %154
  %567 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 8, i64 0
  %568 = load i8, i8* %567, align 4
  %569 = icmp eq i8 %568, %3
  br i1 %569, label %595, label %570

570:                                              ; preds = %553
  %571 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 8, i64 1
  %572 = load i8, i8* %571, align 1
  %573 = icmp eq i8 %572, %3
  br i1 %573, label %574, label %43

574:                                              ; preds = %570
  %575 = icmp eq i32 %156, 0
  br i1 %36, label %576, label %580

576:                                              ; preds = %574
  %577 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 0
  %578 = load i8, i8* %577, align 4
  %579 = icmp ult i8 %578, 3
  br i1 %579, label %582, label %580

580:                                              ; preds = %576, %574
  %581 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 9, i64 1, i32 0
  br label %589

582:                                              ; preds = %576
  %583 = lshr i64 1168, %12
  %584 = and i64 %583, 1
  %585 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @idx_n_column_to_subblock, i64 0, i64 %37, i64 %584
  %586 = load i32, i32* %585, align 4
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 10, i64 %587, i32 1, i64 1, i32 0
  br label %589

589:                                              ; preds = %582, %580
  %590 = phi i32* [ %588, %582 ], [ %581, %580 ]
  %591 = load i32, i32* %590, align 4
  br i1 %575, label %594, label %592

592:                                              ; preds = %589
  %593 = icmp eq i32 %591, %153
  br i1 %593, label %43, label %130

594:                                              ; preds = %589
  store i32 %591, i32* %38, align 4
  br label %43

595:                                              ; preds = %553
  %596 = icmp eq i32 %156, 0
  br i1 %36, label %597, label %601

597:                                              ; preds = %595
  %598 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 0
  %599 = load i8, i8* %598, align 4
  %600 = icmp ult i8 %599, 3
  br i1 %600, label %603, label %601

601:                                              ; preds = %597, %595
  %602 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 9, i64 0, i32 0
  br label %610

603:                                              ; preds = %597
  %604 = lshr i64 1168, %12
  %605 = and i64 %604, 1
  %606 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @idx_n_column_to_subblock, i64 0, i64 %37, i64 %605
  %607 = load i32, i32* %606, align 4
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %560, i64 0, i32 10, i64 %608, i32 1, i64 0, i32 0
  br label %610

610:                                              ; preds = %603, %601
  %611 = phi i32* [ %609, %603 ], [ %602, %601 ]
  %612 = load i32, i32* %611, align 4
  br i1 %596, label %615, label %613

613:                                              ; preds = %610
  %614 = icmp eq i32 %612, %153
  br i1 %614, label %43, label %90

615:                                              ; preds = %610
  store i32 %612, i32* %38, align 4
  br label %43
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_find_best_ref_mvs(%struct.macroblockd* nocapture readonly, i32, %union.int_mv* nocapture, %union.int_mv* nocapture, %union.int_mv* nocapture) local_unnamed_addr #0 {
  %6 = icmp eq i32 %1, 0
  %7 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 12
  %8 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 13
  %9 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 14
  %10 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 15
  %11 = bitcast %union.int_mv* %2 to %struct.mv*
  %12 = bitcast %union.int_mv* %2 to i16*
  %13 = load i16, i16* %12, align 2
  br i1 %6, label %28, label %14

14:                                               ; preds = %5
  %15 = sext i16 %13 to i32
  %16 = icmp slt i32 %15, 0
  %17 = sub nsw i32 0, %15
  %18 = select i1 %16, i32 %17, i32 %15
  %19 = icmp slt i32 %18, 64
  br i1 %19, label %20, label %28

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.mv, %struct.mv* %11, i64 0, i32 1
  %22 = load i16, i16* %21, align 2
  %23 = sext i16 %22 to i32
  %24 = icmp slt i32 %23, 0
  %25 = sub nsw i32 0, %23
  %26 = select i1 %24, i32 %25, i32 %23
  %27 = icmp slt i32 %26, 64
  br i1 %27, label %45, label %28

28:                                               ; preds = %20, %14, %5
  %29 = and i16 %13, 1
  %30 = icmp eq i16 %29, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %28
  %32 = icmp sgt i16 %13, 0
  %33 = select i1 %32, i16 -1, i16 1
  %34 = add i16 %33, %13
  store i16 %34, i16* %12, align 2
  br label %35

35:                                               ; preds = %31, %28
  %36 = phi i16 [ %34, %31 ], [ %13, %28 ]
  %37 = getelementptr inbounds %struct.mv, %struct.mv* %11, i64 0, i32 1
  %38 = load i16, i16* %37, align 2
  %39 = and i16 %38, 1
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %45, label %41

41:                                               ; preds = %35
  %42 = icmp sgt i16 %38, 0
  %43 = select i1 %42, i16 -1, i16 1
  %44 = add i16 %43, %38
  store i16 %44, i16* %37, align 2
  br label %45

45:                                               ; preds = %20, %35, %41
  %46 = phi i16 [ %13, %20 ], [ %36, %35 ], [ %36, %41 ]
  %47 = phi i16 [ %22, %20 ], [ %38, %35 ], [ %44, %41 ]
  %48 = load i32, i32* %7, align 8
  %49 = add nsw i32 %48, -1248
  %50 = load i32, i32* %8, align 4
  %51 = add nsw i32 %50, 1248
  %52 = load i32, i32* %9, align 8
  %53 = add nsw i32 %52, -1248
  %54 = load i32, i32* %10, align 4
  %55 = add nsw i32 %54, 1248
  %56 = getelementptr inbounds %struct.mv, %struct.mv* %11, i64 0, i32 1
  %57 = sext i16 %47 to i32
  %58 = icmp sgt i32 %49, %57
  %59 = icmp slt i32 %51, %57
  %60 = select i1 %59, i32 %51, i32 %57
  %61 = select i1 %58, i32 %49, i32 %60
  %62 = trunc i32 %61 to i16
  store i16 %62, i16* %56, align 2
  %63 = sext i16 %46 to i32
  %64 = icmp sgt i32 %53, %63
  %65 = icmp slt i32 %55, %63
  %66 = select i1 %65, i32 %55, i32 %63
  %67 = select i1 %64, i32 %53, i32 %66
  %68 = trunc i32 %67 to i16
  store i16 %68, i16* %12, align 2
  %69 = getelementptr inbounds %union.int_mv, %union.int_mv* %2, i64 1
  %70 = bitcast %union.int_mv* %69 to %struct.mv*
  %71 = bitcast %union.int_mv* %69 to i16*
  %72 = load i16, i16* %71, align 2
  br i1 %6, label %87, label %73

73:                                               ; preds = %45
  %74 = sext i16 %72 to i32
  %75 = icmp slt i32 %74, 0
  %76 = sub nsw i32 0, %74
  %77 = select i1 %75, i32 %76, i32 %74
  %78 = icmp slt i32 %77, 64
  br i1 %78, label %79, label %87

79:                                               ; preds = %73
  %80 = getelementptr inbounds %struct.mv, %struct.mv* %70, i64 0, i32 1
  %81 = load i16, i16* %80, align 2
  %82 = sext i16 %81 to i32
  %83 = icmp slt i32 %82, 0
  %84 = sub nsw i32 0, %82
  %85 = select i1 %83, i32 %84, i32 %82
  %86 = icmp slt i32 %85, 64
  br i1 %86, label %104, label %87

87:                                               ; preds = %79, %73, %45
  %88 = and i16 %72, 1
  %89 = icmp eq i16 %88, 0
  br i1 %89, label %94, label %90

90:                                               ; preds = %87
  %91 = icmp sgt i16 %72, 0
  %92 = select i1 %91, i16 -1, i16 1
  %93 = add i16 %92, %72
  store i16 %93, i16* %71, align 2
  br label %94

94:                                               ; preds = %90, %87
  %95 = phi i16 [ %93, %90 ], [ %72, %87 ]
  %96 = getelementptr inbounds %struct.mv, %struct.mv* %70, i64 0, i32 1
  %97 = load i16, i16* %96, align 2
  %98 = and i16 %97, 1
  %99 = icmp eq i16 %98, 0
  br i1 %99, label %104, label %100

100:                                              ; preds = %94
  %101 = icmp sgt i16 %97, 0
  %102 = select i1 %101, i16 -1, i16 1
  %103 = add i16 %102, %97
  store i16 %103, i16* %96, align 2
  br label %104

104:                                              ; preds = %100, %94, %79
  %105 = phi i16 [ %95, %100 ], [ %95, %94 ], [ %72, %79 ]
  %106 = phi i16 [ %103, %100 ], [ %97, %94 ], [ %81, %79 ]
  %107 = load i32, i32* %7, align 8
  %108 = add nsw i32 %107, -1248
  %109 = load i32, i32* %8, align 4
  %110 = add nsw i32 %109, 1248
  %111 = load i32, i32* %9, align 8
  %112 = add nsw i32 %111, -1248
  %113 = load i32, i32* %10, align 4
  %114 = add nsw i32 %113, 1248
  %115 = getelementptr inbounds %struct.mv, %struct.mv* %70, i64 0, i32 1
  %116 = sext i16 %106 to i32
  %117 = icmp sgt i32 %108, %116
  %118 = icmp slt i32 %110, %116
  %119 = select i1 %118, i32 %110, i32 %116
  %120 = select i1 %117, i32 %108, i32 %119
  %121 = trunc i32 %120 to i16
  store i16 %121, i16* %115, align 2
  %122 = sext i16 %105 to i32
  %123 = icmp sgt i32 %112, %122
  %124 = icmp slt i32 %114, %122
  %125 = select i1 %124, i32 %114, i32 %122
  %126 = select i1 %123, i32 %112, i32 %125
  %127 = trunc i32 %126 to i16
  store i16 %127, i16* %71, align 2
  %128 = getelementptr inbounds %union.int_mv, %union.int_mv* %2, i64 0, i32 0
  %129 = getelementptr inbounds %union.int_mv, %union.int_mv* %3, i64 0, i32 0
  %130 = load i32, i32* %128, align 4
  store i32 %130, i32* %129, align 4
  %131 = getelementptr inbounds %union.int_mv, %union.int_mv* %2, i64 1, i32 0
  %132 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 0, i32 0
  %133 = load i32, i32* %131, align 4
  store i32 %133, i32* %132, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_append_sub8x8_mvs_for_idx(%struct.VP9Common* nocapture readonly, %struct.macroblockd* nocapture readonly, i32, i32, i32, i32, %union.int_mv* nocapture, %union.int_mv* nocapture, i8* nocapture) local_unnamed_addr #2 {
  %10 = alloca [2 x %union.int_mv], align 4
  %11 = bitcast [2 x %union.int_mv]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #3
  %12 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %10, i64 0, i64 0
  %13 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %10, i64 0, i64 0, i32 0
  store i32 -1431655766, i32* %13, align 4
  %14 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %10, i64 0, i64 1, i32 0
  store i32 -1431655766, i32* %14, align 4
  %15 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %16 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %15, align 8
  %17 = load %struct.MODE_INFO*, %struct.MODE_INFO** %16, align 8
  %18 = sext i32 %3 to i64
  %19 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 %18
  %20 = load i8, i8* %19, align 1
  call fastcc void @find_mv_refs_idx(%struct.VP9Common* %0, %struct.macroblockd* %1, %struct.MODE_INFO* %17, i8 signext %20, %union.int_mv* nonnull %12, i32 %2, i32 %4, i32 %5, i8* %8)
  %21 = getelementptr inbounds %union.int_mv, %union.int_mv* %7, i64 0, i32 0
  store i32 0, i32* %21, align 4
  switch i32 %2, label %52 [
    i32 0, label %22
    i32 1, label %26
    i32 2, label %26
    i32 3, label %37
  ]

22:                                               ; preds = %9
  %23 = load i32, i32* %13, align 4
  %24 = getelementptr inbounds %union.int_mv, %union.int_mv* %6, i64 0, i32 0
  store i32 %23, i32* %24, align 4
  %25 = load i32, i32* %14, align 4
  store i32 %25, i32* %21, align 4
  br label %52

26:                                               ; preds = %9, %9
  %27 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 0, i32 1, i64 %18, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %union.int_mv, %union.int_mv* %6, i64 0, i32 0
  store i32 %28, i32* %29, align 4
  %30 = load i32, i32* %13, align 4
  %31 = icmp eq i32 %28, %30
  br i1 %31, label %32, label %35

32:                                               ; preds = %26
  %33 = load i32, i32* %14, align 4
  %34 = icmp eq i32 %28, %33
  br i1 %34, label %52, label %35

35:                                               ; preds = %32, %26
  %36 = phi i32 [ %30, %26 ], [ %33, %32 ]
  store i32 %36, i32* %21, align 4
  br label %52

37:                                               ; preds = %9
  %38 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 1, i32 1, i64 %18, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 0, i32 1, i64 %18, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = load i32, i32* %13, align 4
  %43 = load i32, i32* %14, align 4
  %44 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 2, i32 1, i64 %18, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %union.int_mv, %union.int_mv* %6, i64 0, i32 0
  store i32 %45, i32* %46, align 4
  %47 = icmp eq i32 %45, %39
  br i1 %47, label %48, label %50

48:                                               ; preds = %37
  %49 = icmp eq i32 %39, %41
  br i1 %49, label %53, label %50

50:                                               ; preds = %55, %53, %48, %37
  %51 = phi i32 [ %39, %37 ], [ %41, %48 ], [ %42, %53 ], [ %43, %55 ]
  store i32 %51, i32* %21, align 4
  br label %52

52:                                               ; preds = %55, %32, %50, %9, %35, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #3
  ret void

53:                                               ; preds = %48
  %54 = icmp eq i32 %39, %42
  br i1 %54, label %55, label %50

55:                                               ; preds = %53
  %56 = icmp eq i32 %39, %43
  br i1 %56, label %52, label %50
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
