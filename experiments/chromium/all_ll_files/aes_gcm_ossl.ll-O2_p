; ModuleID = '../../third_party/libsrtp/crypto/cipher/aes_gcm_ossl.c'
source_filename = "../../third_party/libsrtp/crypto/cipher/aes_gcm_ossl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.srtp_debug_module_t = type { i32, i8* }
%struct.srtp_cipher_test_case_t = type { i32, i8*, i8*, i32, i8*, i32, i8*, i32, i8*, i32, %struct.srtp_cipher_test_case_t* }
%struct.srtp_cipher_t = type { %struct.srtp_cipher_type_t*, i8*, i32, i32 }
%struct.srtp_cipher_type_t = type { {}*, i32 (%struct.srtp_cipher_t*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i8*, %struct.srtp_cipher_test_case_t*, i32 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.engine_st = type opaque

@.str = private unnamed_addr constant [8 x i8] c"aes gcm\00", align 1
@srtp_mod_aes_gcm = hidden local_unnamed_addr global %struct.srtp_debug_module_t { i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0) }, align 8
@srtp_aes_gcm_128_openssl_description = internal constant [26 x i8] c"AES-128 GCM using openssl\00", align 16
@srtp_aes_gcm_test_case_0 = internal constant %struct.srtp_cipher_test_case_t { i32 28, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @srtp_aes_gcm_test_case_0_key, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @srtp_aes_gcm_test_case_0_iv, i32 0, i32 0), i32 60, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @srtp_aes_gcm_test_case_0_plaintext, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @srtp_aes_gcm_test_case_0_ciphertext, i32 0, i32 0), i32 20, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @srtp_aes_gcm_test_case_0_aad, i32 0, i32 0), i32 16, %struct.srtp_cipher_test_case_t* @srtp_aes_gcm_test_case_0a }, align 8
@srtp_aes_gcm_128 = hidden constant { i32 (%struct.srtp_cipher_t**, i32, i32)*, i32 (%struct.srtp_cipher_t*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i8*, %struct.srtp_cipher_test_case_t*, i32 } { i32 (%struct.srtp_cipher_t**, i32, i32)* @srtp_aes_gcm_openssl_alloc, i32 (%struct.srtp_cipher_t*)* @srtp_aes_gcm_openssl_dealloc, i32 (i8*, i8*)* @srtp_aes_gcm_openssl_context_init, i32 (i8*, i8*, i32)* @srtp_aes_gcm_openssl_set_aad, i32 (i8*, i8*, i32*)* @srtp_aes_gcm_openssl_encrypt, i32 (i8*, i8*, i32*)* @srtp_aes_gcm_openssl_decrypt, i32 (i8*, i8*, i32)* @srtp_aes_gcm_openssl_set_iv, i32 (i8*, i8*, i32*)* @srtp_aes_gcm_openssl_get_tag, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @srtp_aes_gcm_128_openssl_description, i32 0, i32 0), %struct.srtp_cipher_test_case_t* @srtp_aes_gcm_test_case_0, i32 6 }, align 8
@srtp_aes_gcm_256_openssl_description = internal constant [26 x i8] c"AES-256 GCM using openssl\00", align 16
@srtp_aes_gcm_test_case_1 = internal constant %struct.srtp_cipher_test_case_t { i32 44, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @srtp_aes_gcm_test_case_1_key, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @srtp_aes_gcm_test_case_1_iv, i32 0, i32 0), i32 60, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @srtp_aes_gcm_test_case_1_plaintext, i32 0, i32 0), i32 76, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @srtp_aes_gcm_test_case_1_ciphertext, i32 0, i32 0), i32 20, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @srtp_aes_gcm_test_case_1_aad, i32 0, i32 0), i32 16, %struct.srtp_cipher_test_case_t* @srtp_aes_gcm_test_case_1a }, align 8
@srtp_aes_gcm_256 = hidden constant { i32 (%struct.srtp_cipher_t**, i32, i32)*, i32 (%struct.srtp_cipher_t*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i8*, %struct.srtp_cipher_test_case_t*, i32 } { i32 (%struct.srtp_cipher_t**, i32, i32)* @srtp_aes_gcm_openssl_alloc, i32 (%struct.srtp_cipher_t*)* @srtp_aes_gcm_openssl_dealloc, i32 (i8*, i8*)* @srtp_aes_gcm_openssl_context_init, i32 (i8*, i8*, i32)* @srtp_aes_gcm_openssl_set_aad, i32 (i8*, i8*, i32*)* @srtp_aes_gcm_openssl_encrypt, i32 (i8*, i8*, i32*)* @srtp_aes_gcm_openssl_decrypt, i32 (i8*, i8*, i32)* @srtp_aes_gcm_openssl_set_iv, i32 (i8*, i8*, i32*)* @srtp_aes_gcm_openssl_get_tag, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @srtp_aes_gcm_256_openssl_description, i32 0, i32 0), %struct.srtp_cipher_test_case_t* @srtp_aes_gcm_test_case_1, i32 7 }, align 8
@.str.1 = private unnamed_addr constant [42 x i8] c"%s: allocating cipher with key length %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [42 x i8] c"%s: allocating cipher with tag length %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"%s: key:  %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"%s: setting AAD: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"%s: setting iv: %s\0A\00", align 1
@srtp_aes_gcm_test_case_0_key = internal constant [28 x i8] c"\FE\FF\E9\92\86es\1Cmj\8F\94g0\83\08\01\02\03\04\05\06\07\08\09\0A\0B\0C", align 16
@srtp_aes_gcm_test_case_0_iv = internal global [12 x i8] c"\CA\FE\BA\BE\FA\CE\DB\AD\DE\CA\F8\88", align 1
@srtp_aes_gcm_test_case_0_plaintext = internal constant [60 x i8] c"\D912%\F8\84\06\E5\A5Y\09\C5\AF\F5&\9A\86\A7\A9S\154\F7\DA.L0=\8A1\8Ar\1C<\0C\95\95h\09S/\CF\0E$I\A6\B5%\B1j\ED\F5\AA\0D\E6W\BAc{9", align 16
@srtp_aes_gcm_test_case_0_ciphertext = internal constant [76 x i8] c"B\83\1E\C2!wt$Kr!\B7\84\D0\D4\9C\E3\AA!/,\02\A4\E05\C1~#)\AC\A1.!\D5\14\B2Tf\93\1C}\8FjZ\AC\84\AA\05\1B\A3\0B9j\0A\AC\97=X\E0\91[\C9O\BC2!\A5\DB\94\FA\E9Z\E7\12\1AG", align 16
@srtp_aes_gcm_test_case_0_aad = internal constant [20 x i8] c"\FE\ED\FA\CE\DE\AD\BE\EF\FE\ED\FA\CE\DE\AD\BE\EF\AB\AD\DA\D2", align 16
@srtp_aes_gcm_test_case_0a = internal constant %struct.srtp_cipher_test_case_t { i32 28, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @srtp_aes_gcm_test_case_0_key, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @srtp_aes_gcm_test_case_0_iv, i32 0, i32 0), i32 60, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @srtp_aes_gcm_test_case_0_plaintext, i32 0, i32 0), i32 68, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @srtp_aes_gcm_test_case_0_ciphertext, i32 0, i32 0), i32 20, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @srtp_aes_gcm_test_case_0_aad, i32 0, i32 0), i32 8, %struct.srtp_cipher_test_case_t* null }, align 8
@srtp_aes_gcm_test_case_1_key = internal constant [44 x i8] c"\FE\FF\E9\92\86es\1C\A5Y\09\C5Tf\93\1C\AF\F5&\9A!\D5\14\B2mj\8F\94g0\83\08\01\02\03\04\05\06\07\08\09\0A\0B\0C", align 16
@srtp_aes_gcm_test_case_1_iv = internal global [12 x i8] c"\CA\FE\BA\BE\FA\CE\DB\AD\DE\CA\F8\88", align 1
@srtp_aes_gcm_test_case_1_plaintext = internal constant [60 x i8] c"\D912%\F8\84\06\E5\A5Y\09\C5\AF\F5&\9A\86\A7\A9S\154\F7\DA.L0=\8A1\8Ar\1C<\0C\95\95h\09S/\CF\0E$I\A6\B5%\B1j\ED\F5\AA\0D\E6W\BAc{9", align 16
@srtp_aes_gcm_test_case_1_ciphertext = internal constant [76 x i8] c"\0B\11\CF\AFhM\AEF\C7\90\B8\8E\B7jv*\94\82\CA\AB>9\D7\86\1B\C7\93\EDu\7F#Z\DA\FD\D3\E2\0E\80\87\A9m\D7\E2j}_\B4\80\EF\EF\C5)\12\D1\AA\10\09\C9\86\C1E\BC\03\E6\E1\AC\0A\9F\81\CB\8E[Fec\1D", align 16
@srtp_aes_gcm_test_case_1_aad = internal constant [20 x i8] c"\FE\ED\FA\CE\DE\AD\BE\EF\FE\ED\FA\CE\DE\AD\BE\EF\AB\AD\DA\D2", align 16
@srtp_aes_gcm_test_case_1a = internal constant %struct.srtp_cipher_test_case_t { i32 44, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @srtp_aes_gcm_test_case_1_key, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @srtp_aes_gcm_test_case_1_iv, i32 0, i32 0), i32 60, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @srtp_aes_gcm_test_case_1_plaintext, i32 0, i32 0), i32 68, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @srtp_aes_gcm_test_case_1_ciphertext, i32 0, i32 0), i32 20, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @srtp_aes_gcm_test_case_1_aad, i32 0, i32 0), i32 8, %struct.srtp_cipher_test_case_t* null }, align 8

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_aes_gcm_openssl_alloc(%struct.srtp_cipher_t** nocapture, i32, i32) #0 {
  %4 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_gcm, i64 0, i32 0), align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %3
  %7 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_gcm, i64 0, i32 1), align 8
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i8* %7, i32 %1) #3
  %8 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_gcm, i64 0, i32 0), align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_gcm, i64 0, i32 1), align 8
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.2, i64 0, i64 0), i8* %11, i32 %2) #3
  br label %12

12:                                               ; preds = %3, %6, %10
  switch i32 %1, label %48 [
    i32 44, label %13
    i32 28, label %13
  ]

13:                                               ; preds = %12, %12
  switch i32 %2, label %48 [
    i32 16, label %14
    i32 8, label %14
  ]

14:                                               ; preds = %13, %13
  %15 = tail call i8* @srtp_crypto_alloc(i64 24) #3
  %16 = bitcast %struct.srtp_cipher_t** %0 to i8**
  store i8* %15, i8** %16, align 8
  %17 = icmp eq i8* %15, null
  br i1 %17, label %48, label %18

18:                                               ; preds = %14
  %19 = tail call i8* @srtp_crypto_alloc(i64 24) #3
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %18
  %22 = load i8*, i8** %16, align 8
  tail call void @srtp_crypto_free(i8* %22) #3
  store %struct.srtp_cipher_t* null, %struct.srtp_cipher_t** %0, align 8
  br label %48

23:                                               ; preds = %18
  %24 = tail call %struct.evp_cipher_ctx_st* @EVP_CIPHER_CTX_new() #3
  %25 = getelementptr inbounds i8, i8* %19, i64 8
  %26 = bitcast i8* %25 to %struct.evp_cipher_ctx_st**
  store %struct.evp_cipher_ctx_st* %24, %struct.evp_cipher_ctx_st** %26, align 8
  %27 = icmp eq %struct.evp_cipher_ctx_st* %24, null
  br i1 %27, label %28, label %30

28:                                               ; preds = %23
  tail call void @srtp_crypto_free(i8* nonnull %19) #3
  %29 = load i8*, i8** %16, align 8
  tail call void @srtp_crypto_free(i8* %29) #3
  store %struct.srtp_cipher_t* null, %struct.srtp_cipher_t** %0, align 8
  br label %48

30:                                               ; preds = %23
  %31 = load %struct.srtp_cipher_t*, %struct.srtp_cipher_t** %0, align 8
  %32 = getelementptr inbounds %struct.srtp_cipher_t, %struct.srtp_cipher_t* %31, i64 0, i32 1
  store i8* %19, i8** %32, align 8
  switch i32 %1, label %45 [
    i32 28, label %34
    i32 44, label %33
  ]

33:                                               ; preds = %30
  br label %34

34:                                               ; preds = %30, %33
  %35 = phi %struct.srtp_cipher_type_t* [ bitcast ({ i32 (%struct.srtp_cipher_t**, i32, i32)*, i32 (%struct.srtp_cipher_t*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i8*, %struct.srtp_cipher_test_case_t*, i32 }* @srtp_aes_gcm_256 to %struct.srtp_cipher_type_t*), %33 ], [ bitcast ({ i32 (%struct.srtp_cipher_t**, i32, i32)*, i32 (%struct.srtp_cipher_t*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*)*, i8*, %struct.srtp_cipher_test_case_t*, i32 }* @srtp_aes_gcm_128 to %struct.srtp_cipher_type_t*), %30 ]
  %36 = phi i32 [ 7, %33 ], [ 6, %30 ]
  %37 = phi i32 [ 32, %33 ], [ 16, %30 ]
  %38 = load %struct.srtp_cipher_t*, %struct.srtp_cipher_t** %0, align 8
  %39 = getelementptr inbounds %struct.srtp_cipher_t, %struct.srtp_cipher_t* %38, i64 0, i32 0
  store %struct.srtp_cipher_type_t* %35, %struct.srtp_cipher_type_t** %39, align 8
  %40 = load %struct.srtp_cipher_t*, %struct.srtp_cipher_t** %0, align 8
  %41 = getelementptr inbounds %struct.srtp_cipher_t, %struct.srtp_cipher_t* %40, i64 0, i32 3
  store i32 %36, i32* %41, align 4
  %42 = bitcast i8* %19 to i32*
  store i32 %37, i32* %42, align 8
  %43 = getelementptr inbounds i8, i8* %19, i64 4
  %44 = bitcast i8* %43 to i32*
  store i32 %2, i32* %44, align 4
  br label %45

45:                                               ; preds = %34, %30
  %46 = load %struct.srtp_cipher_t*, %struct.srtp_cipher_t** %0, align 8
  %47 = getelementptr inbounds %struct.srtp_cipher_t, %struct.srtp_cipher_t* %46, i64 0, i32 2
  store i32 %1, i32* %47, align 8
  br label %48

48:                                               ; preds = %14, %13, %12, %45, %28, %21
  %49 = phi i32 [ 3, %21 ], [ 3, %28 ], [ 0, %45 ], [ 2, %12 ], [ 2, %13 ], [ 3, %14 ]
  ret i32 %49
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_aes_gcm_openssl_dealloc(%struct.srtp_cipher_t*) #0 {
  %2 = getelementptr inbounds %struct.srtp_cipher_t, %struct.srtp_cipher_t* %0, i64 0, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to %struct.evp_cipher_ctx_st**
  %8 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %7, align 8
  tail call void @EVP_CIPHER_CTX_free(%struct.evp_cipher_ctx_st* %8) #3
  tail call void @octet_string_set_to_zero(i8* nonnull %3, i64 24) #3
  tail call void @srtp_crypto_free(i8* nonnull %3) #3
  br label %9

9:                                                ; preds = %1, %5
  %10 = bitcast %struct.srtp_cipher_t* %0 to i8*
  tail call void @srtp_crypto_free(i8* %10) #3
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_aes_gcm_openssl_context_init(i8* nocapture, i8*) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 16
  %4 = bitcast i8* %3 to i32*
  store i32 2, i32* %4, align 8
  %5 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_gcm, i64 0, i32 0), align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = bitcast i8* %0 to i32*
  br label %14

9:                                                ; preds = %2
  %10 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_gcm, i64 0, i32 1), align 8
  %11 = bitcast i8* %0 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = tail call i8* @srtp_octet_string_hex_string(i8* %1, i32 %12) #3
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i8* %10, i8* %13) #3
  br label %14

14:                                               ; preds = %7, %9
  %15 = phi i32* [ %8, %7 ], [ %11, %9 ]
  %16 = load i32, i32* %15, align 8
  switch i32 %16, label %31 [
    i32 32, label %17
    i32 16, label %19
  ]

17:                                               ; preds = %14
  %18 = tail call %struct.evp_cipher_st* @EVP_aes_256_gcm() #3
  br label %21

19:                                               ; preds = %14
  %20 = tail call %struct.evp_cipher_st* @EVP_aes_128_gcm() #3
  br label %21

21:                                               ; preds = %19, %17
  %22 = phi %struct.evp_cipher_st* [ %20, %19 ], [ %18, %17 ]
  %23 = getelementptr inbounds i8, i8* %0, i64 8
  %24 = bitcast i8* %23 to %struct.evp_cipher_ctx_st**
  %25 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %24, align 8
  %26 = tail call i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st* %25) #3
  %27 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %24, align 8
  %28 = tail call i32 @EVP_CipherInit_ex(%struct.evp_cipher_ctx_st* %27, %struct.evp_cipher_st* %22, %struct.engine_st* null, i8* %1, i8* null, i32 0) #3
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 5, i32 0
  br label %31

31:                                               ; preds = %21, %14
  %32 = phi i32 [ 2, %14 ], [ %30, %21 ]
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_aes_gcm_openssl_set_aad(i8* nocapture readonly, i8*, i32) #0 {
  %4 = alloca [16 x i8], align 16
  %5 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_gcm, i64 0, i32 0), align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_gcm, i64 0, i32 1), align 8
  %9 = tail call i8* @srtp_octet_string_hex_string(i8* %1, i32 %2) #3
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i8* %8, i8* %9) #3
  br label %10

10:                                               ; preds = %3, %7
  %11 = getelementptr inbounds i8, i8* %0, i64 16
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %25

15:                                               ; preds = %10
  %16 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 0, i64 16, i1 false)
  %17 = getelementptr inbounds i8, i8* %0, i64 8
  %18 = bitcast i8* %17 to %struct.evp_cipher_ctx_st**
  %19 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %18, align 8
  %20 = getelementptr inbounds i8, i8* %0, i64 4
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = call i32 @EVP_CIPHER_CTX_ctrl(%struct.evp_cipher_ctx_st* %19, i32 17, i32 %22, i8* nonnull %16) #3
  %24 = icmp eq i32 %23, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #3
  br i1 %24, label %33, label %25

25:                                               ; preds = %10, %15
  %26 = getelementptr inbounds i8, i8* %0, i64 8
  %27 = bitcast i8* %26 to %struct.evp_cipher_ctx_st**
  %28 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %27, align 8
  %29 = zext i32 %2 to i64
  %30 = call i32 @EVP_Cipher(%struct.evp_cipher_ctx_st* %28, i8* null, i8* %1, i64 %29) #3
  %31 = icmp eq i32 %30, %2
  %32 = select i1 %31, i32 0, i32 11
  br label %33

33:                                               ; preds = %15, %25
  %34 = phi i32 [ 11, %15 ], [ %32, %25 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_aes_gcm_openssl_encrypt(i8* nocapture readonly, i8*, i32* nocapture readonly) #0 {
  %4 = getelementptr inbounds i8, i8* %0, i64 16
  %5 = bitcast i8* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 2
  br i1 %7, label %8, label %15

8:                                                ; preds = %3
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  %10 = bitcast i8* %9 to %struct.evp_cipher_ctx_st**
  %11 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %10, align 8
  %12 = load i32, i32* %2, align 4
  %13 = zext i32 %12 to i64
  %14 = tail call i32 @EVP_Cipher(%struct.evp_cipher_ctx_st* %11, i8* %1, i8* %1, i64 %13) #3
  br label %15

15:                                               ; preds = %3, %8
  %16 = phi i32 [ 0, %8 ], [ 2, %3 ]
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_aes_gcm_openssl_decrypt(i8* nocapture readonly, i8*, i32* nocapture) #0 {
  %4 = getelementptr inbounds i8, i8* %0, i64 16
  %5 = bitcast i8* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 2
  br i1 %7, label %8, label %35

8:                                                ; preds = %3
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  %10 = bitcast i8* %9 to %struct.evp_cipher_ctx_st**
  %11 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %10, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 4
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = load i32, i32* %2, align 4
  %16 = sub i32 %15, %14
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %1, i64 %17
  %19 = tail call i32 @EVP_CIPHER_CTX_ctrl(%struct.evp_cipher_ctx_st* %11, i32 17, i32 %14, i8* %18) #3
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %35, label %21

21:                                               ; preds = %8
  %22 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %10, align 8
  %23 = load i32, i32* %2, align 4
  %24 = load i32, i32* %13, align 4
  %25 = sub i32 %23, %24
  %26 = zext i32 %25 to i64
  %27 = tail call i32 @EVP_Cipher(%struct.evp_cipher_ctx_st* %22, i8* %1, i8* %1, i64 %26) #3
  %28 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %10, align 8
  %29 = tail call i32 @EVP_Cipher(%struct.evp_cipher_ctx_st* %28, i8* null, i8* null, i64 0) #3
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %35

31:                                               ; preds = %21
  %32 = load i32, i32* %13, align 4
  %33 = load i32, i32* %2, align 4
  %34 = sub i32 %33, %32
  store i32 %34, i32* %2, align 4
  br label %35

35:                                               ; preds = %3, %21, %8, %31
  %36 = phi i32 [ 0, %31 ], [ 2, %3 ], [ 7, %8 ], [ 7, %21 ]
  ret i32 %36
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_aes_gcm_openssl_set_iv(i8* nocapture, i8*, i32) #0 {
  %4 = icmp ugt i32 %2, 1
  br i1 %4, label %27, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds i8, i8* %0, i64 16
  %7 = bitcast i8* %6 to i32*
  store i32 %2, i32* %7, align 8
  %8 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_gcm, i64 0, i32 0), align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %5
  %11 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_aes_gcm, i64 0, i32 1), align 8
  %12 = tail call i8* @srtp_octet_string_hex_string(i8* %1, i32 12) #3
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i8* %11, i8* %12) #3
  br label %13

13:                                               ; preds = %5, %10
  %14 = getelementptr inbounds i8, i8* %0, i64 8
  %15 = bitcast i8* %14 to %struct.evp_cipher_ctx_st**
  %16 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %15, align 8
  %17 = tail call i32 @EVP_CIPHER_CTX_ctrl(%struct.evp_cipher_ctx_st* %16, i32 9, i32 12, i8* null) #3
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %13
  %20 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %15, align 8
  %21 = load i32, i32* %7, align 8
  %22 = icmp eq i32 %21, 0
  %23 = zext i1 %22 to i32
  %24 = tail call i32 @EVP_CipherInit_ex(%struct.evp_cipher_ctx_st* %20, %struct.evp_cipher_st* null, %struct.engine_st* null, i8* null, i8* %1, i32 %23) #3
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, i32 5, i32 0
  br label %27

27:                                               ; preds = %19, %13, %3
  %28 = phi i32 [ 2, %3 ], [ 5, %13 ], [ %26, %19 ]
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_aes_gcm_openssl_get_tag(i8* nocapture readonly, i8*, i32* nocapture) #0 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %struct.evp_cipher_ctx_st**
  %6 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %5, align 8
  %7 = tail call i32 @EVP_Cipher(%struct.evp_cipher_ctx_st* %6, i8* null, i8* null, i64 0) #3
  %8 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %5, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 4
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = tail call i32 @EVP_CIPHER_CTX_ctrl(%struct.evp_cipher_ctx_st* %8, i32 16, i32 %11, i8* %1) #3
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %3
  %15 = load i32, i32* %10, align 4
  store i32 %15, i32* %2, align 4
  br label %16

16:                                               ; preds = %3, %14
  %17 = phi i32 [ 0, %14 ], [ 11, %3 ]
  ret i32 %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @srtp_err_report(i32, i8*, ...) local_unnamed_addr #2

declare i8* @srtp_crypto_alloc(i64) local_unnamed_addr #2

declare void @srtp_crypto_free(i8*) local_unnamed_addr #2

declare %struct.evp_cipher_ctx_st* @EVP_CIPHER_CTX_new() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @EVP_CIPHER_CTX_free(%struct.evp_cipher_ctx_st*) local_unnamed_addr #2

declare void @octet_string_set_to_zero(i8*, i64) local_unnamed_addr #2

declare i8* @srtp_octet_string_hex_string(i8*, i32) local_unnamed_addr #2

declare %struct.evp_cipher_st* @EVP_aes_256_gcm() local_unnamed_addr #2

declare %struct.evp_cipher_st* @EVP_aes_128_gcm() local_unnamed_addr #2

declare i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st*) local_unnamed_addr #2

declare i32 @EVP_CipherInit_ex(%struct.evp_cipher_ctx_st*, %struct.evp_cipher_st*, %struct.engine_st*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @EVP_CIPHER_CTX_ctrl(%struct.evp_cipher_ctx_st*, i32, i32, i8*) local_unnamed_addr #2

declare i32 @EVP_Cipher(%struct.evp_cipher_ctx_st*, i8*, i8*, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
