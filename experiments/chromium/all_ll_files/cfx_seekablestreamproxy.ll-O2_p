; ModuleID = '../../third_party/pdfium/core/fxcrt/cfx_seekablestreamproxy.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/cfx_seekablestreamproxy.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_SeekableStreamProxy = type { %"class.fxcrt::Retainable", i16, i64, i64, %"class.fxcrt::RetainPtr" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.IFX_SeekableReadStream* }
%class.IFX_SeekableReadStream = type { %class.IFX_StreamWithSize, %"class.fxcrt::Retainable" }
%class.IFX_StreamWithSize = type { i32 (...)** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZTV23CFX_SeekableStreamProxy = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFX_SeekableStreamProxy*)* @_ZN23CFX_SeekableStreamProxyD2Ev to i8*), i8* bitcast (void (%class.CFX_SeekableStreamProxy*)* @_ZN23CFX_SeekableStreamProxyD0Ev to i8*)] }, align 8

@_ZN23CFX_SeekableStreamProxyC1ERKN5fxcrt9RetainPtrI22IFX_SeekableReadStreamEE = hidden unnamed_addr alias void (%class.CFX_SeekableStreamProxy*, %"class.fxcrt::RetainPtr"*), void (%class.CFX_SeekableStreamProxy*, %"class.fxcrt::RetainPtr"*)* @_ZN23CFX_SeekableStreamProxyC2ERKN5fxcrt9RetainPtrI22IFX_SeekableReadStreamEE
@_ZN23CFX_SeekableStreamProxyD1Ev = hidden unnamed_addr alias void (%class.CFX_SeekableStreamProxy*), void (%class.CFX_SeekableStreamProxy*)* @_ZN23CFX_SeekableStreamProxyD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23CFX_SeekableStreamProxyC2ERKN5fxcrt9RetainPtrI22IFX_SeekableReadStreamEE(%class.CFX_SeekableStreamProxy* nocapture, %"class.fxcrt::RetainPtr"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 0, i32 1
  store i64 0, i64* %5, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV23CFX_SeekableStreamProxy, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %6 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 1
  store i16 0, i16* %6, align 8
  %7 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 2
  %8 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 3
  %9 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 4
  %10 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = bitcast i64* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false)
  %12 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %10, align 8
  %13 = ptrtoint %class.IFX_SeekableReadStream* %12 to i64
  %14 = bitcast %"class.fxcrt::RetainPtr"* %9 to i64*
  store i64 %13, i64* %14, align 8
  %15 = icmp eq %class.IFX_SeekableReadStream* %12, null
  br i1 %15, label %32, label %16

16:                                               ; preds = %2
  %17 = bitcast %class.IFX_SeekableReadStream* %12 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 -32
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %class.IFX_SeekableReadStream* %12 to i8*
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = getelementptr inbounds i8, i8* %23, i64 8
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = add nsw i64 %26, 1
  store i64 %27, i64* %25, align 8
  %28 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %29 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %28, align 8
  %30 = bitcast %class.IFX_SeekableReadStream* %29 to i8**
  %31 = bitcast %class.IFX_SeekableReadStream* %29 to i8*
  br label %32

32:                                               ; preds = %2, %16
  %33 = phi i8** [ null, %2 ], [ %30, %16 ]
  %34 = phi i8* [ null, %2 ], [ %31, %16 ]
  store i64 0, i64* %8, align 8
  %35 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %33, align 8
  %37 = getelementptr i8, i8* %36, i64 -40
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds i8, i8* %34, i64 %39
  %41 = bitcast i8* %40 to %class.IFX_StreamWithSize*
  %42 = bitcast i8* %40 to i64 (%class.IFX_StreamWithSize*)***
  %43 = load i64 (%class.IFX_StreamWithSize*)**, i64 (%class.IFX_StreamWithSize*)*** %42, align 8
  %44 = load i64 (%class.IFX_StreamWithSize*)*, i64 (%class.IFX_StreamWithSize*)** %43, align 8
  %45 = tail call i64 %44(%class.IFX_StreamWithSize* %41) #8
  %46 = load i64, i64* %8, align 8
  %47 = icmp sgt i64 %46, 0
  %48 = select i1 %47, i64 %46, i64 0
  %49 = icmp slt i64 %45, %48
  %50 = select i1 %49, i64 %45, i64 %48
  store i64 %50, i64* %8, align 8
  %51 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %51) #8
  store i32 0, i32* %3, align 4
  %52 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %35, align 8
  %53 = bitcast %class.IFX_SeekableReadStream* %52 to i8**
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr i8, i8* %54, i64 -40
  %56 = bitcast i8* %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast %class.IFX_SeekableReadStream* %52 to i8*
  %59 = getelementptr inbounds i8, i8* %58, i64 %57
  %60 = bitcast i8* %59 to %class.IFX_StreamWithSize*
  %61 = bitcast i8* %59 to i64 (%class.IFX_StreamWithSize*)***
  %62 = load i64 (%class.IFX_StreamWithSize*)**, i64 (%class.IFX_StreamWithSize*)*** %61, align 8
  %63 = load i64 (%class.IFX_StreamWithSize*)*, i64 (%class.IFX_StreamWithSize*)** %62, align 8
  %64 = tail call i64 %63(%class.IFX_StreamWithSize* %60) #8
  %65 = load i64, i64* %8, align 8
  %66 = sub nsw i64 %64, %65
  %67 = icmp ult i64 %66, 3
  %68 = select i1 %67, i64 %66, i64 3
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %86, label %70

70:                                               ; preds = %32
  %71 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %35, align 8
  %72 = bitcast %class.IFX_SeekableReadStream* %71 to i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)***
  %73 = load i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)**, i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)*** %72, align 8
  %74 = getelementptr inbounds i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)*, i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)** %73, i64 4
  %75 = load i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)*, i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)** %74, align 8
  %76 = call zeroext i1 %75(%class.IFX_SeekableReadStream* %71, i8* nonnull %51, i64 %65, i64 %68) #8
  br i1 %76, label %77, label %86

77:                                               ; preds = %70
  %78 = load i64, i64* %8, align 8
  %79 = sext i64 %78 to i65
  %80 = zext i64 %68 to i65
  %81 = add nsw i65 %79, %80
  %82 = trunc i65 %81 to i64
  %83 = sext i64 %82 to i65
  %84 = icmp eq i65 %81, %83
  %85 = select i1 %84, i64 %82, i64 %78, !prof !2
  store i64 %85, i64* %8, align 8
  br label %86

86:                                               ; preds = %32, %70, %77
  %87 = load i32, i32* %3, align 4
  %88 = and i32 %87, 16777215
  store i32 %88, i32* %3, align 4
  %89 = icmp eq i32 %88, 12565487
  br i1 %89, label %90, label %91

90:                                               ; preds = %86
  store i64 3, i64* %7, align 8
  store i16 -535, i16* %6, align 8
  br label %100

91:                                               ; preds = %86
  %92 = and i32 %87, 65535
  store i32 %92, i32* %3, align 4
  %93 = trunc i32 %87 to i16
  switch i16 %93, label %96 [
    i16 -2, label %94
    i16 -257, label %95
  ]

94:                                               ; preds = %91
  store i64 2, i64* %7, align 8
  store i16 1201, i16* %6, align 8
  br label %100

95:                                               ; preds = %91
  store i64 2, i64* %7, align 8
  store i16 1200, i16* %6, align 8
  br label %100

96:                                               ; preds = %91
  store i64 0, i64* %7, align 8
  %97 = call i32 @FXSYS_GetACP() #8
  %98 = trunc i32 %97 to i16
  store i16 %98, i16* %6, align 8
  %99 = load i64, i64* %7, align 8
  br label %100

100:                                              ; preds = %94, %96, %95, %90
  %101 = phi i64 [ 2, %94 ], [ %99, %96 ], [ 2, %95 ], [ 3, %90 ]
  store i64 %101, i64* %8, align 8
  %102 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %35, align 8
  %103 = bitcast %class.IFX_SeekableReadStream* %102 to i8**
  %104 = load i8*, i8** %103, align 8
  %105 = getelementptr i8, i8* %104, i64 -40
  %106 = bitcast i8* %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %class.IFX_SeekableReadStream* %102 to i8*
  %109 = getelementptr inbounds i8, i8* %108, i64 %107
  %110 = bitcast i8* %109 to %class.IFX_StreamWithSize*
  %111 = bitcast i8* %109 to i64 (%class.IFX_StreamWithSize*)***
  %112 = load i64 (%class.IFX_StreamWithSize*)**, i64 (%class.IFX_StreamWithSize*)*** %111, align 8
  %113 = load i64 (%class.IFX_StreamWithSize*)*, i64 (%class.IFX_StreamWithSize*)** %112, align 8
  %114 = call i64 %113(%class.IFX_StreamWithSize* %110) #8
  %115 = load i64, i64* %8, align 8
  %116 = icmp sgt i64 %115, 0
  %117 = select i1 %116, i64 %115, i64 0
  %118 = icmp slt i64 %114, %117
  %119 = select i1 %118, i64 %114, i64 %117
  store i64 %119, i64* %8, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %51) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23CFX_SeekableStreamProxy4SeekENS_4FromEl(%class.CFX_SeekableStreamProxy* nocapture, i32, i64) local_unnamed_addr #0 align 2 {
  switch i32 %1, label %13 [
    i32 0, label %4
    i32 1, label %6
  ]

4:                                                ; preds = %3
  %5 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 3
  store i64 %2, i64* %5, align 8
  br label %13

6:                                                ; preds = %3
  %7 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %8, i64 %2) #8
  %10 = extractvalue { i64, i1 } %9, 1
  %11 = extractvalue { i64, i1 } %9, 0
  %12 = select i1 %10, i64 9223372036854775807, i64 %11, !prof !3
  store i64 %12, i64* %7, align 8
  br label %13

13:                                               ; preds = %3, %6, %4
  %14 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 3
  %15 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %16 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %15, align 8
  %17 = bitcast %class.IFX_SeekableReadStream* %16 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 -40
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %class.IFX_SeekableReadStream* %16 to i8*
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = bitcast i8* %23 to %class.IFX_StreamWithSize*
  %25 = bitcast i8* %23 to i64 (%class.IFX_StreamWithSize*)***
  %26 = load i64 (%class.IFX_StreamWithSize*)**, i64 (%class.IFX_StreamWithSize*)*** %25, align 8
  %27 = load i64 (%class.IFX_StreamWithSize*)*, i64 (%class.IFX_StreamWithSize*)** %26, align 8
  %28 = tail call i64 %27(%class.IFX_StreamWithSize* %24) #8
  %29 = load i64, i64* %14, align 8
  %30 = icmp sgt i64 %29, 0
  %31 = select i1 %30, i64 %29, i64 0
  %32 = icmp slt i64 %28, %31
  %33 = select i1 %32, i64 %28, i64 %31
  store i64 %33, i64* %14, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN23CFX_SeekableStreamProxy8ReadDataEPhm(%class.CFX_SeekableStreamProxy* nocapture, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %5 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %4, align 8
  %6 = bitcast %class.IFX_SeekableReadStream* %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8, i8* %7, i64 -40
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %class.IFX_SeekableReadStream* %5 to i8*
  %12 = getelementptr inbounds i8, i8* %11, i64 %10
  %13 = bitcast i8* %12 to %class.IFX_StreamWithSize*
  %14 = bitcast i8* %12 to i64 (%class.IFX_StreamWithSize*)***
  %15 = load i64 (%class.IFX_StreamWithSize*)**, i64 (%class.IFX_StreamWithSize*)*** %14, align 8
  %16 = load i64 (%class.IFX_StreamWithSize*)*, i64 (%class.IFX_StreamWithSize*)** %15, align 8
  %17 = tail call i64 %16(%class.IFX_StreamWithSize* %13) #8
  %18 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = sub nsw i64 %17, %19
  %21 = icmp ult i64 %20, %2
  %22 = select i1 %21, i64 %20, i64 %2
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %44, label %24

24:                                               ; preds = %3
  %25 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %4, align 8
  %26 = bitcast %class.IFX_SeekableReadStream* %25 to i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)***
  %27 = load i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)**, i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)*** %26, align 8
  %28 = getelementptr inbounds i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)*, i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)** %27, i64 4
  %29 = load i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)*, i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)** %28, align 8
  %30 = tail call zeroext i1 %29(%class.IFX_SeekableReadStream* %25, i8* %1, i64 %19, i64 %22) #8
  br i1 %30, label %31, label %44

31:                                               ; preds = %24
  %32 = load i64, i64* %18, align 8
  %33 = sext i64 %32 to i65
  %34 = zext i64 %22 to i65
  %35 = tail call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %33, i65 %34) #8
  %36 = extractvalue { i65, i1 } %35, 1
  %37 = extractvalue { i65, i1 } %35, 0
  %38 = trunc i65 %37 to i64
  %39 = sext i64 %38 to i65
  %40 = icmp ne i65 %37, %39
  %41 = or i1 %36, %40
  %42 = select i1 %41, i64 %32, i64 %38, !prof !3
  store i64 %42, i64* %18, align 8
  %43 = select i1 %41, i64 0, i64 %22
  br label %44

44:                                               ; preds = %24, %3, %31
  %45 = phi i64 [ %43, %31 ], [ 0, %3 ], [ 0, %24 ]
  ret i64 %45
}

declare i32 @FXSYS_GetACP() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23CFX_SeekableStreamProxyD2Ev(%class.CFX_SeekableStreamProxy* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV23CFX_SeekableStreamProxy, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %3, align 8
  store %class.IFX_SeekableReadStream* null, %class.IFX_SeekableReadStream** %3, align 8
  %5 = icmp eq %class.IFX_SeekableReadStream* %4, null
  br i1 %5, label %27, label %6

6:                                                ; preds = %1
  %7 = bitcast %class.IFX_SeekableReadStream* %4 to i8**
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr i8, i8* %8, i64 -32
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %class.IFX_SeekableReadStream* %4 to i8*
  %13 = getelementptr inbounds i8, i8* %12, i64 %11
  %14 = getelementptr inbounds i8, i8* %13, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = add nsw i64 %16, -1
  store i64 %17, i64* %15, align 8
  %18 = icmp ne i64 %17, 0
  %19 = icmp eq i8* %13, null
  %20 = or i1 %19, %18
  br i1 %20, label %27, label %21

21:                                               ; preds = %6
  %22 = bitcast i8* %13 to %"class.fxcrt::Retainable"*
  %23 = bitcast i8* %13 to void (%"class.fxcrt::Retainable"*)***
  %24 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %24, i64 1
  %26 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %25, align 8
  tail call void %26(%"class.fxcrt::Retainable"* nonnull %22) #8
  br label %27

27:                                               ; preds = %1, %6, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23CFX_SeekableStreamProxyD0Ev(%class.CFX_SeekableStreamProxy*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV23CFX_SeekableStreamProxy, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %3, align 8
  store %class.IFX_SeekableReadStream* null, %class.IFX_SeekableReadStream** %3, align 8
  %5 = icmp eq %class.IFX_SeekableReadStream* %4, null
  br i1 %5, label %27, label %6

6:                                                ; preds = %1
  %7 = bitcast %class.IFX_SeekableReadStream* %4 to i8**
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr i8, i8* %8, i64 -32
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %class.IFX_SeekableReadStream* %4 to i8*
  %13 = getelementptr inbounds i8, i8* %12, i64 %11
  %14 = getelementptr inbounds i8, i8* %13, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = add nsw i64 %16, -1
  store i64 %17, i64* %15, align 8
  %18 = icmp ne i64 %17, 0
  %19 = icmp eq i8* %13, null
  %20 = or i1 %19, %18
  br i1 %20, label %27, label %21

21:                                               ; preds = %6
  %22 = bitcast i8* %13 to %"class.fxcrt::Retainable"*
  %23 = bitcast i8* %13 to void (%"class.fxcrt::Retainable"*)***
  %24 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %24, i64 1
  %26 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %25, align 8
  tail call void %26(%"class.fxcrt::Retainable"* nonnull %22) #8
  br label %27

27:                                               ; preds = %1, %6, %21
  %28 = bitcast %class.CFX_SeekableStreamProxy* %0 to i8*
  tail call void @_ZdlPv(i8* %28) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN23CFX_SeekableStreamProxy7GetSizeEv(%class.CFX_SeekableStreamProxy* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %3 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %2, align 8
  %4 = bitcast %class.IFX_SeekableReadStream* %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8, i8* %5, i64 -40
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %class.IFX_SeekableReadStream* %3 to i8*
  %10 = getelementptr inbounds i8, i8* %9, i64 %8
  %11 = bitcast i8* %10 to %class.IFX_StreamWithSize*
  %12 = bitcast i8* %10 to i64 (%class.IFX_StreamWithSize*)***
  %13 = load i64 (%class.IFX_StreamWithSize*)**, i64 (%class.IFX_StreamWithSize*)*** %12, align 8
  %14 = load i64 (%class.IFX_StreamWithSize*)*, i64 (%class.IFX_StreamWithSize*)** %13, align 8
  %15 = tail call i64 %14(%class.IFX_StreamWithSize* %11) #8
  ret i64 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN23CFX_SeekableStreamProxy11GetPositionEv(%class.CFX_SeekableStreamProxy* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN23CFX_SeekableStreamProxy5IsEOFEv(%class.CFX_SeekableStreamProxy* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %5 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %4, align 8
  %6 = bitcast %class.IFX_SeekableReadStream* %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8, i8* %7, i64 -40
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %class.IFX_SeekableReadStream* %5 to i8*
  %12 = getelementptr inbounds i8, i8* %11, i64 %10
  %13 = bitcast i8* %12 to %class.IFX_StreamWithSize*
  %14 = bitcast i8* %12 to i64 (%class.IFX_StreamWithSize*)***
  %15 = load i64 (%class.IFX_StreamWithSize*)**, i64 (%class.IFX_StreamWithSize*)*** %14, align 8
  %16 = load i64 (%class.IFX_StreamWithSize*)*, i64 (%class.IFX_StreamWithSize*)** %15, align 8
  %17 = tail call i64 %16(%class.IFX_StreamWithSize* %13) #8
  %18 = icmp sge i64 %3, %17
  ret i1 %18
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN23CFX_SeekableStreamProxy11SetCodePageEt(%class.CFX_SeekableStreamProxy* nocapture, i16 zeroext) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 1
  store i16 %1, i16* %7, align 8
  br label %8

8:                                                ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN23CFX_SeekableStreamProxy9ReadBlockEPwm(%class.CFX_SeekableStreamProxy* nocapture, i32*, i64) local_unnamed_addr #0 align 2 {
  %4 = bitcast i32* %1 to i8*
  %5 = alloca i64, align 8
  %6 = alloca %"class.std::__1::vector", align 8
  store i64 %2, i64* %5, align 8
  %7 = icmp eq i32* %1, null
  %8 = icmp eq i64 %2, 0
  %9 = or i1 %7, %8
  br i1 %9, label %461, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = and i16 %12, -2
  %14 = icmp eq i16 %13, 1200
  br i1 %14, label %15, label %296

15:                                               ; preds = %10
  %16 = shl i64 %2, 1
  %17 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %18 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %17, align 8
  %19 = bitcast %class.IFX_SeekableReadStream* %18 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr i8, i8* %20, i64 -40
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %class.IFX_SeekableReadStream* %18 to i8*
  %25 = getelementptr inbounds i8, i8* %24, i64 %23
  %26 = bitcast i8* %25 to %class.IFX_StreamWithSize*
  %27 = bitcast i8* %25 to i64 (%class.IFX_StreamWithSize*)***
  %28 = load i64 (%class.IFX_StreamWithSize*)**, i64 (%class.IFX_StreamWithSize*)*** %27, align 8
  %29 = load i64 (%class.IFX_StreamWithSize*)*, i64 (%class.IFX_StreamWithSize*)** %28, align 8
  %30 = tail call i64 %29(%class.IFX_StreamWithSize* %26) #8
  %31 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 3
  %32 = load i64, i64* %31, align 8
  %33 = sub nsw i64 %30, %32
  %34 = icmp ult i64 %33, %16
  %35 = select i1 %34, i64 %33, i64 %16
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %58, label %37

37:                                               ; preds = %15
  %38 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %17, align 8
  %39 = bitcast %class.IFX_SeekableReadStream* %38 to i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)***
  %40 = load i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)**, i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)*** %39, align 8
  %41 = getelementptr inbounds i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)*, i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)** %40, i64 4
  %42 = load i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)*, i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)** %41, align 8
  %43 = tail call zeroext i1 %42(%class.IFX_SeekableReadStream* %38, i8* %4, i64 %32, i64 %35) #8
  br i1 %43, label %44, label %58

44:                                               ; preds = %37
  %45 = load i64, i64* %31, align 8
  %46 = sext i64 %45 to i65
  %47 = zext i64 %35 to i65
  %48 = tail call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %46, i65 %47) #8
  %49 = extractvalue { i65, i1 } %48, 1
  %50 = extractvalue { i65, i1 } %48, 0
  %51 = trunc i65 %50 to i64
  %52 = sext i64 %51 to i65
  %53 = icmp ne i65 %50, %52
  %54 = or i1 %49, %53
  %55 = select i1 %54, i64 %45, i64 %51, !prof !3
  store i64 %55, i64* %31, align 8
  %56 = lshr i64 %35, 1
  %57 = select i1 %54, i64 0, i64 %56
  br label %58

58:                                               ; preds = %15, %37, %44
  %59 = phi i64 [ %57, %44 ], [ 0, %15 ], [ 0, %37 ]
  store i64 %59, i64* %5, align 8
  %60 = load i16, i16* %11, align 8
  %61 = icmp eq i16 %60, 1201
  br i1 %61, label %62, label %134

62:                                               ; preds = %58
  %63 = icmp eq i64 %59, 0
  br i1 %63, label %461, label %64

64:                                               ; preds = %62
  %65 = bitcast i32* %1 to i16*
  %66 = icmp ult i64 %59, 16
  br i1 %66, label %121, label %67

67:                                               ; preds = %64
  %68 = and i64 %59, -16
  %69 = getelementptr i16, i16* %65, i64 %68
  %70 = sub i64 %59, %68
  %71 = add i64 %68, -16
  %72 = lshr exact i64 %71, 4
  %73 = add nuw nsw i64 %72, 1
  %74 = and i64 %73, 1
  %75 = icmp eq i64 %71, 0
  br i1 %75, label %105, label %76

76:                                               ; preds = %67
  %77 = sub nuw nsw i64 %73, %74
  br label %78

78:                                               ; preds = %78, %76
  %79 = phi i64 [ 0, %76 ], [ %102, %78 ]
  %80 = phi i64 [ %77, %76 ], [ %103, %78 ]
  %81 = getelementptr i16, i16* %65, i64 %79
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2
  %84 = getelementptr i16, i16* %81, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2
  %87 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %83)
  %88 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %86)
  %89 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2
  %90 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %90, align 2
  %91 = or i64 %79, 16
  %92 = getelementptr i16, i16* %65, i64 %91
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2
  %95 = getelementptr i16, i16* %92, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2
  %98 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %94)
  %99 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %97)
  %100 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %100, align 2
  %101 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %101, align 2
  %102 = add i64 %79, 32
  %103 = add i64 %80, -2
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %78, !llvm.loop !4

105:                                              ; preds = %78, %67
  %106 = phi i64 [ 0, %67 ], [ %102, %78 ]
  %107 = icmp eq i64 %74, 0
  br i1 %107, label %119, label %108

108:                                              ; preds = %105
  %109 = getelementptr i16, i16* %65, i64 %106
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2
  %112 = getelementptr i16, i16* %109, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2
  %115 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %111)
  %116 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %114)
  %117 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %117, align 2
  %118 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %118, align 2
  br label %119

119:                                              ; preds = %105, %108
  %120 = icmp eq i64 %59, %68
  br i1 %120, label %132, label %121

121:                                              ; preds = %119, %64
  %122 = phi i16* [ %65, %64 ], [ %69, %119 ]
  %123 = phi i64 [ %59, %64 ], [ %70, %119 ]
  br label %124

124:                                              ; preds = %121, %124
  %125 = phi i16* [ %130, %124 ], [ %122, %121 ]
  %126 = phi i64 [ %127, %124 ], [ %123, %121 ]
  %127 = add i64 %126, -1
  %128 = load i16, i16* %125, align 2
  %129 = tail call i16 @llvm.bswap.i16(i16 %128) #8
  %130 = getelementptr inbounds i16, i16* %125, i64 1
  store i16 %129, i16* %125, align 2
  %131 = icmp eq i64 %127, 0
  br i1 %131, label %132, label %124, !llvm.loop !6

132:                                              ; preds = %124, %119
  %133 = load i64, i64* %5, align 8
  br label %134

134:                                              ; preds = %132, %58
  %135 = phi i64 [ %59, %58 ], [ %133, %132 ]
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %461, label %137

137:                                              ; preds = %134
  %138 = bitcast i32* %1 to i16*
  %139 = icmp ult i64 %135, 8
  br i1 %139, label %255, label %140

140:                                              ; preds = %137
  %141 = add i64 %135, -1
  %142 = getelementptr i32, i32* %1, i64 %141
  %143 = ptrtoint i32* %142 to i64
  %144 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %141, i64 4)
  %145 = extractvalue { i64, i1 } %144, 0
  %146 = extractvalue { i64, i1 } %144, 1
  %147 = icmp ugt i64 %145, %143
  %148 = or i1 %147, %146
  %149 = shl i64 %135, 1
  %150 = add i64 %149, -2
  %151 = getelementptr i8, i8* %4, i64 %150
  %152 = ptrtoint i8* %151 to i64
  %153 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %141, i64 2)
  %154 = extractvalue { i64, i1 } %153, 0
  %155 = extractvalue { i64, i1 } %153, 1
  %156 = icmp ugt i64 %154, %152
  %157 = or i1 %156, %155
  %158 = or i1 %148, %157
  br i1 %158, label %255, label %159

159:                                              ; preds = %140
  %160 = getelementptr i32, i32* %1, i64 %135
  %161 = shl i64 %135, 1
  %162 = getelementptr i8, i8* %4, i64 %161
  %163 = icmp ugt i8* %162, %4
  %164 = icmp ugt i32* %160, %1
  %165 = and i1 %163, %164
  br i1 %165, label %255, label %166

166:                                              ; preds = %159
  %167 = and i64 %135, -8
  %168 = sub i64 %135, %167
  %169 = add i64 %167, -8
  %170 = lshr exact i64 %169, 3
  %171 = add nuw nsw i64 %170, 1
  %172 = and i64 %171, 1
  %173 = icmp eq i64 %169, 0
  br i1 %173, label %228, label %174

174:                                              ; preds = %166
  %175 = sub nuw nsw i64 %171, %172
  br label %176

176:                                              ; preds = %176, %174
  %177 = phi i64 [ 0, %174 ], [ %223, %176 ]
  %178 = phi i64 [ %175, %174 ], [ %224, %176 ]
  %179 = xor i64 %177, -1
  %180 = add i64 %135, %179
  %181 = getelementptr inbounds i16, i16* %138, i64 %180
  %182 = getelementptr inbounds i16, i16* %181, i64 -3
  %183 = bitcast i16* %182 to <4 x i16>*
  %184 = load <4 x i16>, <4 x i16>* %183, align 2, !alias.scope !8
  %185 = shufflevector <4 x i16> %184, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %186 = getelementptr inbounds i16, i16* %181, i64 -4
  %187 = getelementptr inbounds i16, i16* %186, i64 -3
  %188 = bitcast i16* %187 to <4 x i16>*
  %189 = load <4 x i16>, <4 x i16>* %188, align 2, !alias.scope !8
  %190 = shufflevector <4 x i16> %189, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %191 = zext <4 x i16> %185 to <4 x i32>
  %192 = zext <4 x i16> %190 to <4 x i32>
  %193 = getelementptr inbounds i32, i32* %1, i64 %180
  %194 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %195 = getelementptr inbounds i32, i32* %193, i64 -3
  %196 = bitcast i32* %195 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %196, align 4, !alias.scope !11, !noalias !8
  %197 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %198 = getelementptr inbounds i32, i32* %193, i64 -4
  %199 = getelementptr inbounds i32, i32* %198, i64 -3
  %200 = bitcast i32* %199 to <4 x i32>*
  store <4 x i32> %197, <4 x i32>* %200, align 4, !alias.scope !11, !noalias !8
  %201 = sub nuw nsw i64 -9, %177
  %202 = add i64 %135, %201
  %203 = getelementptr inbounds i16, i16* %138, i64 %202
  %204 = getelementptr inbounds i16, i16* %203, i64 -3
  %205 = bitcast i16* %204 to <4 x i16>*
  %206 = load <4 x i16>, <4 x i16>* %205, align 2, !alias.scope !8
  %207 = shufflevector <4 x i16> %206, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %208 = getelementptr inbounds i16, i16* %203, i64 -4
  %209 = getelementptr inbounds i16, i16* %208, i64 -3
  %210 = bitcast i16* %209 to <4 x i16>*
  %211 = load <4 x i16>, <4 x i16>* %210, align 2, !alias.scope !8
  %212 = shufflevector <4 x i16> %211, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %213 = zext <4 x i16> %207 to <4 x i32>
  %214 = zext <4 x i16> %212 to <4 x i32>
  %215 = getelementptr inbounds i32, i32* %1, i64 %202
  %216 = shufflevector <4 x i32> %213, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %217 = getelementptr inbounds i32, i32* %215, i64 -3
  %218 = bitcast i32* %217 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %218, align 4, !alias.scope !11, !noalias !8
  %219 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %220 = getelementptr inbounds i32, i32* %215, i64 -4
  %221 = getelementptr inbounds i32, i32* %220, i64 -3
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %222, align 4, !alias.scope !11, !noalias !8
  %223 = add i64 %177, 16
  %224 = add i64 %178, -2
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %176, !llvm.loop !13

226:                                              ; preds = %176
  %227 = sub i64 -17, %177
  br label %228

228:                                              ; preds = %226, %166
  %229 = phi i64 [ -1, %166 ], [ %227, %226 ]
  %230 = icmp eq i64 %172, 0
  br i1 %230, label %253, label %231

231:                                              ; preds = %228
  %232 = add i64 %135, %229
  %233 = getelementptr inbounds i16, i16* %138, i64 %232
  %234 = getelementptr inbounds i16, i16* %233, i64 -3
  %235 = bitcast i16* %234 to <4 x i16>*
  %236 = load <4 x i16>, <4 x i16>* %235, align 2, !alias.scope !8
  %237 = shufflevector <4 x i16> %236, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %238 = getelementptr inbounds i16, i16* %233, i64 -4
  %239 = getelementptr inbounds i16, i16* %238, i64 -3
  %240 = bitcast i16* %239 to <4 x i16>*
  %241 = load <4 x i16>, <4 x i16>* %240, align 2, !alias.scope !8
  %242 = shufflevector <4 x i16> %241, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %243 = zext <4 x i16> %237 to <4 x i32>
  %244 = zext <4 x i16> %242 to <4 x i32>
  %245 = getelementptr inbounds i32, i32* %1, i64 %232
  %246 = shufflevector <4 x i32> %243, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %247 = getelementptr inbounds i32, i32* %245, i64 -3
  %248 = bitcast i32* %247 to <4 x i32>*
  store <4 x i32> %246, <4 x i32>* %248, align 4, !alias.scope !11, !noalias !8
  %249 = shufflevector <4 x i32> %244, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %250 = getelementptr inbounds i32, i32* %245, i64 -4
  %251 = getelementptr inbounds i32, i32* %250, i64 -3
  %252 = bitcast i32* %251 to <4 x i32>*
  store <4 x i32> %249, <4 x i32>* %252, align 4, !alias.scope !11, !noalias !8
  br label %253

253:                                              ; preds = %228, %231
  %254 = icmp eq i64 %135, %167
  br i1 %254, label %461, label %255

255:                                              ; preds = %253, %159, %140, %137
  %256 = phi i64 [ %135, %159 ], [ %135, %140 ], [ %135, %137 ], [ %168, %253 ]
  %257 = add i64 %256, -1
  %258 = and i64 %256, 3
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %270, label %260

260:                                              ; preds = %255, %260
  %261 = phi i64 [ %263, %260 ], [ %256, %255 ]
  %262 = phi i64 [ %268, %260 ], [ %258, %255 ]
  %263 = add i64 %261, -1
  %264 = getelementptr inbounds i16, i16* %138, i64 %263
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = getelementptr inbounds i32, i32* %1, i64 %263
  store i32 %266, i32* %267, align 4
  %268 = add i64 %262, -1
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %270, label %260, !llvm.loop !14

270:                                              ; preds = %260, %255
  %271 = phi i64 [ %256, %255 ], [ %263, %260 ]
  %272 = icmp ult i64 %257, 3
  br i1 %272, label %461, label %273

273:                                              ; preds = %270, %273
  %274 = phi i64 [ %290, %273 ], [ %271, %270 ]
  %275 = add i64 %274, -1
  %276 = getelementptr inbounds i16, i16* %138, i64 %275
  %277 = load i16, i16* %276, align 2
  %278 = zext i16 %277 to i32
  %279 = getelementptr inbounds i32, i32* %1, i64 %275
  store i32 %278, i32* %279, align 4
  %280 = add i64 %274, -2
  %281 = getelementptr inbounds i16, i16* %138, i64 %280
  %282 = load i16, i16* %281, align 2
  %283 = zext i16 %282 to i32
  %284 = getelementptr inbounds i32, i32* %1, i64 %280
  store i32 %283, i32* %284, align 4
  %285 = add i64 %274, -3
  %286 = getelementptr inbounds i16, i16* %138, i64 %285
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = getelementptr inbounds i32, i32* %1, i64 %285
  store i32 %288, i32* %289, align 4
  %290 = add i64 %274, -4
  %291 = getelementptr inbounds i16, i16* %138, i64 %290
  %292 = load i16, i16* %291, align 2
  %293 = zext i16 %292 to i32
  %294 = getelementptr inbounds i32, i32* %1, i64 %290
  store i32 %293, i32* %294, align 4
  %295 = icmp eq i64 %290, 0
  br i1 %295, label %461, label %273, !llvm.loop !16

296:                                              ; preds = %10
  %297 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 3
  %298 = load i64, i64* %297, align 8
  %299 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %300 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %299, align 8
  %301 = bitcast %class.IFX_SeekableReadStream* %300 to i8**
  %302 = load i8*, i8** %301, align 8
  %303 = getelementptr i8, i8* %302, i64 -40
  %304 = bitcast i8* %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast %class.IFX_SeekableReadStream* %300 to i8*
  %307 = getelementptr inbounds i8, i8* %306, i64 %305
  %308 = bitcast i8* %307 to %class.IFX_StreamWithSize*
  %309 = bitcast i8* %307 to i64 (%class.IFX_StreamWithSize*)***
  %310 = load i64 (%class.IFX_StreamWithSize*)**, i64 (%class.IFX_StreamWithSize*)*** %309, align 8
  %311 = load i64 (%class.IFX_StreamWithSize*)*, i64 (%class.IFX_StreamWithSize*)** %310, align 8
  %312 = tail call i64 %311(%class.IFX_StreamWithSize* %308) #8
  %313 = sub nsw i64 %312, %298
  %314 = icmp ult i64 %313, %2
  %315 = select i1 %314, i64 %313, i64 %2
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %461, label %317

317:                                              ; preds = %296
  %318 = bitcast %"class.std::__1::vector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %318) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %318, i8 0, i64 24, i1 false) #8
  %319 = icmp slt i64 %315, 0
  br i1 %319, label %320, label %322

320:                                              ; preds = %317
  %321 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %321) #10
  unreachable

322:                                              ; preds = %317
  %323 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %324 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %325 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %326 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %315, i64 1) #8
  store i8* %326, i8** %323, align 8
  %327 = getelementptr inbounds i8, i8* %326, i64 %315
  store i8* %327, i8** %324, align 8
  %328 = bitcast i8** %325 to i64*
  %329 = ptrtoint i8* %326 to i64
  %330 = sub i64 %315, %329
  %331 = getelementptr i8, i8* %326, i64 %330
  %332 = ptrtoint i8* %331 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %326, i8 0, i64 %332, i1 false) #8
  %333 = ptrtoint i8* %327 to i64
  store i64 %333, i64* %328, align 8
  %334 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %299, align 8
  %335 = bitcast %class.IFX_SeekableReadStream* %334 to i8**
  %336 = load i8*, i8** %335, align 8
  %337 = getelementptr i8, i8* %336, i64 -40
  %338 = bitcast i8* %337 to i64*
  %339 = load i64, i64* %338, align 8
  %340 = bitcast %class.IFX_SeekableReadStream* %334 to i8*
  %341 = getelementptr inbounds i8, i8* %340, i64 %339
  %342 = bitcast i8* %341 to %class.IFX_StreamWithSize*
  %343 = bitcast i8* %341 to i64 (%class.IFX_StreamWithSize*)***
  %344 = load i64 (%class.IFX_StreamWithSize*)**, i64 (%class.IFX_StreamWithSize*)*** %343, align 8
  %345 = load i64 (%class.IFX_StreamWithSize*)*, i64 (%class.IFX_StreamWithSize*)** %344, align 8
  %346 = tail call i64 %345(%class.IFX_StreamWithSize* %342) #8
  %347 = load i64, i64* %297, align 8
  %348 = sub nsw i64 %346, %347
  %349 = icmp ult i64 %348, %315
  %350 = select i1 %349, i64 %348, i64 %315
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %369, label %352

352:                                              ; preds = %322
  %353 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %299, align 8
  %354 = bitcast %class.IFX_SeekableReadStream* %353 to i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)***
  %355 = load i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)**, i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)*** %354, align 8
  %356 = getelementptr inbounds i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)*, i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)** %355, i64 4
  %357 = load i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)*, i1 (%class.IFX_SeekableReadStream*, i8*, i64, i64)** %356, align 8
  %358 = tail call zeroext i1 %357(%class.IFX_SeekableReadStream* %353, i8* %326, i64 %347, i64 %350) #8
  br i1 %358, label %359, label %369

359:                                              ; preds = %352
  %360 = load i64, i64* %297, align 8
  %361 = sext i64 %360 to i65
  %362 = zext i64 %350 to i65
  %363 = add nsw i65 %361, %362
  %364 = trunc i65 %363 to i64
  %365 = sext i64 %364 to i65
  %366 = icmp ne i65 %363, %365
  %367 = select i1 %366, i64 %360, i64 %364, !prof !3
  store i64 %367, i64* %297, align 8
  %368 = select i1 %366, i64 0, i64 %350
  br label %369

369:                                              ; preds = %322, %352, %359
  %370 = phi i64 [ %368, %359 ], [ 0, %322 ], [ 0, %352 ]
  %371 = load i16, i16* %11, align 8
  %372 = icmp eq i16 %371, -535
  br i1 %372, label %373, label %456

373:                                              ; preds = %369
  %374 = icmp eq i64 %370, 0
  br i1 %374, label %429, label %375

375:                                              ; preds = %373, %424
  %376 = phi i64 [ %382, %424 ], [ 0, %373 ]
  %377 = phi i32 [ %427, %424 ], [ 0, %373 ]
  %378 = phi i32 [ %426, %424 ], [ 0, %373 ]
  %379 = phi i64 [ %425, %424 ], [ 0, %373 ]
  %380 = icmp ult i64 %379, %2
  br i1 %380, label %381, label %429

381:                                              ; preds = %375
  %382 = add nuw i64 %376, 1
  %383 = getelementptr inbounds i8, i8* %326, i64 %376
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i32
  %386 = icmp sgt i8 %384, -1
  br i1 %386, label %387, label %390

387:                                              ; preds = %381
  %388 = add nuw i64 %379, 1
  %389 = getelementptr inbounds i32, i32* %1, i64 %379
  store i32 %385, i32* %389, align 4
  br label %424

390:                                              ; preds = %381
  %391 = icmp ult i8 %384, -64
  br i1 %391, label %392, label %403

392:                                              ; preds = %390
  %393 = icmp slt i32 %377, 1
  br i1 %393, label %424, label %394

394:                                              ; preds = %392
  %395 = shl i32 %378, 6
  %396 = and i32 %385, 63
  %397 = or i32 %396, %395
  %398 = add nsw i32 %377, -1
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %400, label %424

400:                                              ; preds = %394
  %401 = add nuw i64 %379, 1
  %402 = getelementptr inbounds i32, i32* %1, i64 %379
  store i32 %397, i32* %402, align 4
  br label %424

403:                                              ; preds = %390
  %404 = icmp ult i8 %384, -32
  br i1 %404, label %405, label %407

405:                                              ; preds = %403
  %406 = and i32 %385, 31
  br label %424

407:                                              ; preds = %403
  %408 = icmp ult i8 %384, -16
  br i1 %408, label %409, label %411

409:                                              ; preds = %407
  %410 = and i32 %385, 15
  br label %424

411:                                              ; preds = %407
  %412 = icmp ult i8 %384, -8
  br i1 %412, label %413, label %415

413:                                              ; preds = %411
  %414 = and i32 %385, 7
  br label %424

415:                                              ; preds = %411
  %416 = icmp ult i8 %384, -4
  br i1 %416, label %417, label %419

417:                                              ; preds = %415
  %418 = and i32 %385, 3
  br label %424

419:                                              ; preds = %415
  %420 = icmp ult i8 %384, -2
  %421 = and i32 %385, 1
  %422 = select i1 %420, i32 %421, i32 %378
  %423 = select i1 %420, i32 5, i32 %377
  br label %424

424:                                              ; preds = %419, %417, %413, %409, %405, %400, %394, %392, %387
  %425 = phi i64 [ %388, %387 ], [ %379, %392 ], [ %401, %400 ], [ %379, %394 ], [ %379, %405 ], [ %379, %409 ], [ %379, %413 ], [ %379, %417 ], [ %379, %419 ]
  %426 = phi i32 [ %378, %387 ], [ %378, %392 ], [ %397, %400 ], [ %397, %394 ], [ %406, %405 ], [ %410, %409 ], [ %414, %413 ], [ %418, %417 ], [ %422, %419 ]
  %427 = phi i32 [ 0, %387 ], [ %377, %392 ], [ 0, %400 ], [ %398, %394 ], [ 1, %405 ], [ 2, %409 ], [ 3, %413 ], [ 4, %417 ], [ %423, %419 ]
  %428 = icmp eq i64 %382, %370
  br i1 %428, label %429, label %375

429:                                              ; preds = %375, %424, %373
  %430 = phi i64 [ 0, %373 ], [ %376, %375 ], [ %370, %424 ]
  %431 = phi i64 [ 0, %373 ], [ %379, %375 ], [ %425, %424 ]
  store i64 %431, i64* %5, align 8
  %432 = sub i64 %430, %370
  %433 = load i64, i64* %297, align 8
  %434 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %433, i64 %432) #8
  %435 = extractvalue { i64, i1 } %434, 1
  %436 = extractvalue { i64, i1 } %434, 0
  %437 = select i1 %435, i64 9223372036854775807, i64 %436, !prof !3
  store i64 %437, i64* %297, align 8
  %438 = load %class.IFX_SeekableReadStream*, %class.IFX_SeekableReadStream** %299, align 8
  %439 = bitcast %class.IFX_SeekableReadStream* %438 to i8**
  %440 = load i8*, i8** %439, align 8
  %441 = getelementptr i8, i8* %440, i64 -40
  %442 = bitcast i8* %441 to i64*
  %443 = load i64, i64* %442, align 8
  %444 = bitcast %class.IFX_SeekableReadStream* %438 to i8*
  %445 = getelementptr inbounds i8, i8* %444, i64 %443
  %446 = bitcast i8* %445 to %class.IFX_StreamWithSize*
  %447 = bitcast i8* %445 to i64 (%class.IFX_StreamWithSize*)***
  %448 = load i64 (%class.IFX_StreamWithSize*)**, i64 (%class.IFX_StreamWithSize*)*** %447, align 8
  %449 = load i64 (%class.IFX_StreamWithSize*)*, i64 (%class.IFX_StreamWithSize*)** %448, align 8
  %450 = tail call i64 %449(%class.IFX_StreamWithSize* %446) #8
  %451 = load i64, i64* %297, align 8
  %452 = icmp sgt i64 %451, 0
  %453 = select i1 %452, i64 %451, i64 0
  %454 = icmp slt i64 %450, %453
  %455 = select i1 %454, i64 %450, i64 %453
  store i64 %455, i64* %297, align 8
  br label %456

456:                                              ; preds = %369, %429
  %457 = phi i64 [ %431, %429 ], [ 0, %369 ]
  %458 = icmp eq i8* %326, null
  br i1 %458, label %460, label %459

459:                                              ; preds = %456
  store i64 %329, i64* %328, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %326) #8
  br label %460

460:                                              ; preds = %456, %459
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %318) #8
  br label %461

461:                                              ; preds = %270, %273, %253, %62, %134, %460, %296, %3
  %462 = phi i64 [ 0, %3 ], [ %457, %460 ], [ 0, %296 ], [ 0, %134 ], [ 0, %62 ], [ %135, %253 ], [ %135, %273 ], [ %135, %270 ]
  ret i64 %462
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #6

; Function Attrs: nounwind readnone speculatable
declare { i65, i1 } @llvm.sadd.with.overflow.i65(i65, i65) #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #2

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.bswap.v8i16(<8 x i16>) #6

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !7, !5}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !5}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !5}
