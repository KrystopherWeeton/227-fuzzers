; ModuleID = '../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/encode_lpc_swb.c'
source_filename = "../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/encode_lpc_swb.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@WebRtcIsac_kMeanLarUb12 = external local_unnamed_addr constant [4 x double], align 16
@WebRtcIsac_kMeanLarUb16 = external local_unnamed_addr constant [4 x double], align 16
@WebRtcIsac_kIntraVecDecorrMatUb12 = external local_unnamed_addr constant [4 x [4 x double]], align 16
@WebRtcIsac_kIintraVecDecorrMatUb16 = external local_unnamed_addr constant [4 x [4 x double]], align 16
@WebRtcIsac_kInterVecDecorrMatUb12 = external local_unnamed_addr constant [2 x [2 x double]], align 16
@WebRtcIsac_kInterVecDecorrMatUb16 = external local_unnamed_addr constant [4 x [4 x double]], align 16
@WebRtcIsac_kLpcShapeLeftRecPointUb12 = external local_unnamed_addr constant [8 x double], align 16
@WebRtcIsac_kLpcShapeQStepSizeUb12 = external local_unnamed_addr constant double, align 8
@WebRtcIsac_kLpcShapeNumRecPointUb12 = external local_unnamed_addr constant [8 x i16], align 16
@WebRtcIsac_kLpcShapeLeftRecPointUb16 = external local_unnamed_addr constant [16 x double], align 16
@WebRtcIsac_kLpcShapeQStepSizeUb16 = external local_unnamed_addr constant double, align 8
@WebRtcIsac_kLpcShapeNumRecPointUb16 = external local_unnamed_addr constant [16 x i16], align 16
@WebRtcIsac_kMeanLpcGain = external local_unnamed_addr constant double, align 8
@WebRtcIsac_kLpcGainDecorrMat = external local_unnamed_addr constant [6 x [6 x double]], align 16
@WebRtcIsac_kLeftRecPointLpcGain = external local_unnamed_addr constant [6 x double], align 16
@WebRtcIsac_kQSizeLpcGain = external local_unnamed_addr constant double, align 8
@WebRtcIsac_kNumQCellLpcGain = external local_unnamed_addr constant [6 x i16], align 2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_RemoveLarMean(double* nocapture, i16 signext) local_unnamed_addr #0 {
  %3 = sext i16 %1 to i32
  switch i32 %3, label %55 [
    i32 12, label %5
    i32 16, label %4
  ]

4:                                                ; preds = %2
  br label %5

5:                                                ; preds = %2, %4
  %6 = phi i32 [ 4, %4 ], [ 2, %2 ]
  %7 = phi <2 x double>* [ bitcast ([4 x double]* @WebRtcIsac_kMeanLarUb16 to <2 x double>*), %4 ], [ bitcast ([4 x double]* @WebRtcIsac_kMeanLarUb12 to <2 x double>*), %2 ]
  %8 = phi double* [ getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kMeanLarUb16, i64 0, i64 0), %4 ], [ getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kMeanLarUb12, i64 0, i64 0), %2 ]
  %9 = load <2 x double>, <2 x double>* %7, align 8
  %10 = getelementptr inbounds double, double* %8, i64 2
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = add nsw i32 %6, -1
  %14 = trunc i32 %13 to i16
  %15 = add i16 %14, 1
  %16 = icmp slt i16 %15, 1
  %17 = icmp ugt i32 %13, 65535
  %18 = or i1 %16, %17
  br i1 %18, label %39, label %19

19:                                               ; preds = %5
  %20 = shufflevector <2 x double> %9, <2 x double> undef, <2 x i32> zeroinitializer
  %21 = shufflevector <2 x double> %9, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %22 = shufflevector <2 x double> %12, <2 x double> undef, <2 x i32> zeroinitializer
  %23 = shufflevector <2 x double> %12, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %24 = bitcast double* %0 to <8 x double>*
  %25 = load <8 x double>, <8 x double>* %24, align 8
  %26 = shufflevector <8 x double> %25, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %27 = shufflevector <8 x double> %25, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %28 = shufflevector <8 x double> %25, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %29 = shufflevector <8 x double> %25, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %30 = fsub <2 x double> %26, %20
  %31 = fsub <2 x double> %27, %21
  %32 = fsub <2 x double> %28, %22
  %33 = fsub <2 x double> %29, %23
  %34 = bitcast double* %0 to <8 x double>*
  %35 = shufflevector <2 x double> %30, <2 x double> %31, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %36 = shufflevector <2 x double> %32, <2 x double> %33, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %37 = shufflevector <4 x double> %35, <4 x double> %36, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  store <8 x double> %37, <8 x double>* %34, align 8
  %38 = icmp eq i32 %6, 2
  br i1 %38, label %55, label %57, !llvm.loop !2

39:                                               ; preds = %5, %39
  %40 = phi i16 [ %52, %39 ], [ 0, %5 ]
  %41 = phi double* [ %47, %39 ], [ %0, %5 ]
  %42 = getelementptr inbounds double, double* %41, i64 2
  %43 = bitcast double* %41 to <2 x double>*
  %44 = load <2 x double>, <2 x double>* %43, align 8
  %45 = fsub <2 x double> %44, %9
  %46 = bitcast double* %41 to <2 x double>*
  store <2 x double> %45, <2 x double>* %46, align 8
  %47 = getelementptr inbounds double, double* %41, i64 4
  %48 = bitcast double* %42 to <2 x double>*
  %49 = load <2 x double>, <2 x double>* %48, align 8
  %50 = fsub <2 x double> %49, %12
  %51 = bitcast double* %42 to <2 x double>*
  store <2 x double> %50, <2 x double>* %51, align 8
  %52 = add i16 %40, 1
  %53 = sext i16 %52 to i32
  %54 = icmp sgt i32 %6, %53
  br i1 %54, label %39, label %55, !llvm.loop !4

55:                                               ; preds = %19, %57, %39, %2
  %56 = phi i16 [ -1, %2 ], [ 0, %39 ], [ 0, %57 ], [ 0, %19 ]
  ret i16 %56

57:                                               ; preds = %19
  %58 = getelementptr double, double* %0, i64 8
  %59 = bitcast double* %58 to <8 x double>*
  %60 = load <8 x double>, <8 x double>* %59, align 8
  %61 = shufflevector <8 x double> %60, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %62 = shufflevector <8 x double> %60, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %63 = shufflevector <8 x double> %60, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %64 = shufflevector <8 x double> %60, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %65 = fsub <2 x double> %61, %20
  %66 = fsub <2 x double> %62, %21
  %67 = fsub <2 x double> %63, %22
  %68 = fsub <2 x double> %64, %23
  %69 = getelementptr inbounds double, double* %0, i64 8
  %70 = bitcast double* %69 to <8 x double>*
  %71 = shufflevector <2 x double> %65, <2 x double> %66, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %72 = shufflevector <2 x double> %67, <2 x double> %68, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %73 = shufflevector <4 x double> %71, <4 x double> %72, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  store <8 x double> %73, <8 x double>* %70, align 8
  br label %55
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_DecorrelateIntraVec(double* nocapture readonly, double* nocapture, i16 signext) local_unnamed_addr #0 {
  %4 = sext i16 %2 to i32
  switch i32 %4, label %215 [
    i32 12, label %6
    i32 16, label %5
  ]

5:                                                ; preds = %3
  br label %6

6:                                                ; preds = %3, %5
  %7 = phi i32 [ 4, %5 ], [ 2, %3 ]
  %8 = phi double* [ getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kIintraVecDecorrMatUb16, i64 0, i64 0, i64 0), %5 ], [ getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kIntraVecDecorrMatUb12, i64 0, i64 0, i64 0), %3 ]
  %9 = getelementptr inbounds double, double* %8, i64 4
  %10 = getelementptr inbounds double, double* %8, i64 5
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds double, double* %8, i64 6
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds double, double* %8, i64 7
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds double, double* %8, i64 8
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds double, double* %8, i64 9
  %19 = load double, double* %18, align 8
  %20 = getelementptr inbounds double, double* %8, i64 10
  %21 = load double, double* %20, align 8
  %22 = getelementptr inbounds double, double* %8, i64 11
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds double, double* %8, i64 12
  %25 = load double, double* %24, align 8
  %26 = getelementptr inbounds double, double* %8, i64 13
  %27 = load double, double* %26, align 8
  %28 = getelementptr inbounds double, double* %8, i64 14
  %29 = load double, double* %28, align 8
  %30 = getelementptr inbounds double, double* %8, i64 15
  %31 = load double, double* %30, align 8
  %32 = load double, double* %9, align 8
  %33 = load double, double* %8, align 8
  %34 = getelementptr inbounds double, double* %8, i64 1
  %35 = load double, double* %34, align 8
  %36 = getelementptr inbounds double, double* %8, i64 2
  %37 = load double, double* %36, align 8
  %38 = getelementptr inbounds double, double* %8, i64 3
  %39 = load double, double* %38, align 8
  %40 = add nsw i32 %7, -1
  %41 = trunc i32 %40 to i16
  %42 = add i16 %41, 1
  %43 = icmp slt i16 %42, 1
  %44 = icmp ugt i32 %40, 65535
  %45 = or i1 %43, %44
  br i1 %45, label %46, label %47

46:                                               ; preds = %47, %6
  br label %152

47:                                               ; preds = %6
  %48 = add nsw i32 %7, -2
  %49 = zext i32 %48 to i64
  %50 = shl nuw nsw i64 %49, 2
  %51 = add nuw nsw i64 %50, 8
  %52 = getelementptr double, double* %1, i64 %51
  %53 = getelementptr double, double* %0, i64 %51
  %54 = icmp ugt double* %53, %1
  %55 = icmp ugt double* %52, %0
  %56 = and i1 %54, %55
  br i1 %56, label %46, label %57

57:                                               ; preds = %47
  %58 = insertelement <2 x double> undef, double %33, i32 0
  %59 = shufflevector <2 x double> %58, <2 x double> undef, <2 x i32> zeroinitializer
  %60 = insertelement <2 x double> undef, double %35, i32 0
  %61 = shufflevector <2 x double> %60, <2 x double> undef, <2 x i32> zeroinitializer
  %62 = insertelement <2 x double> undef, double %37, i32 0
  %63 = shufflevector <2 x double> %62, <2 x double> undef, <2 x i32> zeroinitializer
  %64 = insertelement <2 x double> undef, double %39, i32 0
  %65 = shufflevector <2 x double> %64, <2 x double> undef, <2 x i32> zeroinitializer
  %66 = insertelement <2 x double> undef, double %32, i32 0
  %67 = shufflevector <2 x double> %66, <2 x double> undef, <2 x i32> zeroinitializer
  %68 = insertelement <2 x double> undef, double %11, i32 0
  %69 = shufflevector <2 x double> %68, <2 x double> undef, <2 x i32> zeroinitializer
  %70 = insertelement <2 x double> undef, double %13, i32 0
  %71 = shufflevector <2 x double> %70, <2 x double> undef, <2 x i32> zeroinitializer
  %72 = insertelement <2 x double> undef, double %15, i32 0
  %73 = shufflevector <2 x double> %72, <2 x double> undef, <2 x i32> zeroinitializer
  %74 = insertelement <2 x double> undef, double %17, i32 0
  %75 = shufflevector <2 x double> %74, <2 x double> undef, <2 x i32> zeroinitializer
  %76 = insertelement <2 x double> undef, double %19, i32 0
  %77 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> zeroinitializer
  %78 = insertelement <2 x double> undef, double %21, i32 0
  %79 = shufflevector <2 x double> %78, <2 x double> undef, <2 x i32> zeroinitializer
  %80 = insertelement <2 x double> undef, double %23, i32 0
  %81 = shufflevector <2 x double> %80, <2 x double> undef, <2 x i32> zeroinitializer
  %82 = insertelement <2 x double> undef, double %25, i32 0
  %83 = shufflevector <2 x double> %82, <2 x double> undef, <2 x i32> zeroinitializer
  %84 = insertelement <2 x double> undef, double %27, i32 0
  %85 = shufflevector <2 x double> %84, <2 x double> undef, <2 x i32> zeroinitializer
  %86 = insertelement <2 x double> undef, double %29, i32 0
  %87 = shufflevector <2 x double> %86, <2 x double> undef, <2 x i32> zeroinitializer
  %88 = insertelement <2 x double> undef, double %31, i32 0
  %89 = shufflevector <2 x double> %88, <2 x double> undef, <2 x i32> zeroinitializer
  %90 = bitcast double* %0 to <8 x double>*
  %91 = load <8 x double>, <8 x double>* %90, align 8
  %92 = shufflevector <8 x double> %91, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %93 = shufflevector <8 x double> %91, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %94 = shufflevector <8 x double> %91, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %95 = shufflevector <8 x double> %91, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %96 = fmul <2 x double> %92, %59
  %97 = fadd <2 x double> %96, zeroinitializer
  %98 = fmul <2 x double> %93, %61
  %99 = fadd <2 x double> %97, %98
  %100 = fmul <2 x double> %94, %63
  %101 = fadd <2 x double> %99, %100
  %102 = fmul <2 x double> %95, %65
  %103 = fadd <2 x double> %101, %102
  %104 = bitcast double* %0 to <8 x double>*
  %105 = load <8 x double>, <8 x double>* %104, align 8
  %106 = shufflevector <8 x double> %105, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %107 = shufflevector <8 x double> %105, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %108 = shufflevector <8 x double> %105, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %109 = shufflevector <8 x double> %105, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %110 = fmul <2 x double> %106, %67
  %111 = fadd <2 x double> %110, zeroinitializer
  %112 = fmul <2 x double> %107, %69
  %113 = fadd <2 x double> %111, %112
  %114 = fmul <2 x double> %108, %71
  %115 = fadd <2 x double> %113, %114
  %116 = fmul <2 x double> %109, %73
  %117 = fadd <2 x double> %115, %116
  %118 = bitcast double* %0 to <8 x double>*
  %119 = load <8 x double>, <8 x double>* %118, align 8
  %120 = shufflevector <8 x double> %119, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %121 = shufflevector <8 x double> %119, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %122 = shufflevector <8 x double> %119, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %123 = shufflevector <8 x double> %119, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %124 = fmul <2 x double> %120, %75
  %125 = fadd <2 x double> %124, zeroinitializer
  %126 = fmul <2 x double> %121, %77
  %127 = fadd <2 x double> %125, %126
  %128 = fmul <2 x double> %122, %79
  %129 = fadd <2 x double> %127, %128
  %130 = fmul <2 x double> %123, %81
  %131 = fadd <2 x double> %129, %130
  %132 = bitcast double* %1 to <8 x double>*
  store <8 x double> zeroinitializer, <8 x double>* %132, align 8
  %133 = bitcast double* %0 to <8 x double>*
  %134 = load <8 x double>, <8 x double>* %133, align 8
  %135 = shufflevector <8 x double> %134, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %136 = shufflevector <8 x double> %134, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %137 = shufflevector <8 x double> %134, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %138 = shufflevector <8 x double> %134, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %139 = fmul <2 x double> %135, %83
  %140 = fadd <2 x double> %139, zeroinitializer
  %141 = fmul <2 x double> %136, %85
  %142 = fadd <2 x double> %140, %141
  %143 = fmul <2 x double> %137, %87
  %144 = fadd <2 x double> %142, %143
  %145 = fmul <2 x double> %138, %89
  %146 = fadd <2 x double> %144, %145
  %147 = bitcast double* %1 to <8 x double>*
  %148 = shufflevector <2 x double> %103, <2 x double> %117, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %149 = shufflevector <2 x double> %131, <2 x double> %146, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %150 = shufflevector <4 x double> %148, <4 x double> %149, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  store <8 x double> %150, <8 x double>* %147, align 8
  %151 = icmp eq i32 %7, 2
  br i1 %151, label %215, label %217, !llvm.loop !5

152:                                              ; preds = %46, %152
  %153 = phi i16 [ %212, %152 ], [ 0, %46 ]
  %154 = phi double* [ %211, %152 ], [ %0, %46 ]
  %155 = phi double* [ %210, %152 ], [ %1, %46 ]
  store double 0.000000e+00, double* %155, align 8
  %156 = load double, double* %154, align 8
  %157 = fmul double %156, %33
  %158 = fadd double %157, 0.000000e+00
  store double %158, double* %155, align 8
  %159 = getelementptr inbounds double, double* %154, i64 1
  %160 = load double, double* %159, align 8
  %161 = fmul double %160, %35
  %162 = fadd double %158, %161
  store double %162, double* %155, align 8
  %163 = getelementptr inbounds double, double* %154, i64 2
  %164 = load double, double* %163, align 8
  %165 = fmul double %164, %37
  %166 = fadd double %162, %165
  store double %166, double* %155, align 8
  %167 = getelementptr inbounds double, double* %154, i64 3
  %168 = load double, double* %167, align 8
  %169 = fmul double %168, %39
  %170 = fadd double %166, %169
  store double %170, double* %155, align 8
  %171 = getelementptr inbounds double, double* %155, i64 1
  store double 0.000000e+00, double* %171, align 8
  %172 = load double, double* %154, align 8
  %173 = fmul double %172, %32
  %174 = fadd double %173, 0.000000e+00
  store double %174, double* %171, align 8
  %175 = load double, double* %159, align 8
  %176 = fmul double %175, %11
  %177 = fadd double %174, %176
  store double %177, double* %171, align 8
  %178 = load double, double* %163, align 8
  %179 = fmul double %178, %13
  %180 = fadd double %177, %179
  store double %180, double* %171, align 8
  %181 = load double, double* %167, align 8
  %182 = fmul double %181, %15
  %183 = fadd double %180, %182
  store double %183, double* %171, align 8
  %184 = getelementptr inbounds double, double* %155, i64 2
  store double 0.000000e+00, double* %184, align 8
  %185 = load double, double* %154, align 8
  %186 = fmul double %185, %17
  %187 = fadd double %186, 0.000000e+00
  store double %187, double* %184, align 8
  %188 = load double, double* %159, align 8
  %189 = fmul double %188, %19
  %190 = fadd double %187, %189
  store double %190, double* %184, align 8
  %191 = load double, double* %163, align 8
  %192 = fmul double %191, %21
  %193 = fadd double %190, %192
  store double %193, double* %184, align 8
  %194 = load double, double* %167, align 8
  %195 = fmul double %194, %23
  %196 = fadd double %193, %195
  store double %196, double* %184, align 8
  %197 = getelementptr inbounds double, double* %155, i64 3
  store double 0.000000e+00, double* %197, align 8
  %198 = load double, double* %154, align 8
  %199 = fmul double %198, %25
  %200 = fadd double %199, 0.000000e+00
  store double %200, double* %197, align 8
  %201 = load double, double* %159, align 8
  %202 = fmul double %201, %27
  %203 = fadd double %200, %202
  store double %203, double* %197, align 8
  %204 = load double, double* %163, align 8
  %205 = fmul double %204, %29
  %206 = fadd double %203, %205
  store double %206, double* %197, align 8
  %207 = load double, double* %167, align 8
  %208 = fmul double %207, %31
  %209 = fadd double %206, %208
  store double %209, double* %197, align 8
  %210 = getelementptr inbounds double, double* %155, i64 4
  %211 = getelementptr inbounds double, double* %154, i64 4
  %212 = add i16 %153, 1
  %213 = sext i16 %212 to i32
  %214 = icmp sgt i32 %7, %213
  br i1 %214, label %152, label %215, !llvm.loop !6

215:                                              ; preds = %57, %217, %152, %3
  %216 = phi i16 [ -1, %3 ], [ 0, %152 ], [ 0, %217 ], [ 0, %57 ]
  ret i16 %216

217:                                              ; preds = %57
  %218 = getelementptr double, double* %0, i64 8
  %219 = bitcast double* %218 to <8 x double>*
  %220 = load <8 x double>, <8 x double>* %219, align 8
  %221 = shufflevector <8 x double> %220, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %222 = shufflevector <8 x double> %220, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %223 = shufflevector <8 x double> %220, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %224 = shufflevector <8 x double> %220, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %225 = fmul <2 x double> %221, %59
  %226 = fadd <2 x double> %225, zeroinitializer
  %227 = fmul <2 x double> %222, %61
  %228 = fadd <2 x double> %226, %227
  %229 = fmul <2 x double> %223, %63
  %230 = fadd <2 x double> %228, %229
  %231 = fmul <2 x double> %224, %65
  %232 = fadd <2 x double> %230, %231
  %233 = bitcast double* %218 to <8 x double>*
  %234 = load <8 x double>, <8 x double>* %233, align 8
  %235 = shufflevector <8 x double> %234, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %236 = shufflevector <8 x double> %234, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %237 = shufflevector <8 x double> %234, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %238 = shufflevector <8 x double> %234, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %239 = fmul <2 x double> %235, %67
  %240 = fadd <2 x double> %239, zeroinitializer
  %241 = fmul <2 x double> %236, %69
  %242 = fadd <2 x double> %240, %241
  %243 = fmul <2 x double> %237, %71
  %244 = fadd <2 x double> %242, %243
  %245 = fmul <2 x double> %238, %73
  %246 = fadd <2 x double> %244, %245
  %247 = bitcast double* %218 to <8 x double>*
  %248 = load <8 x double>, <8 x double>* %247, align 8
  %249 = shufflevector <8 x double> %248, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %250 = shufflevector <8 x double> %248, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %251 = shufflevector <8 x double> %248, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %252 = shufflevector <8 x double> %248, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %253 = fmul <2 x double> %249, %75
  %254 = fadd <2 x double> %253, zeroinitializer
  %255 = fmul <2 x double> %250, %77
  %256 = fadd <2 x double> %254, %255
  %257 = fmul <2 x double> %251, %79
  %258 = fadd <2 x double> %256, %257
  %259 = fmul <2 x double> %252, %81
  %260 = fadd <2 x double> %258, %259
  %261 = getelementptr inbounds double, double* %1, i64 8
  %262 = bitcast double* %261 to <8 x double>*
  store <8 x double> zeroinitializer, <8 x double>* %262, align 8
  %263 = bitcast double* %218 to <8 x double>*
  %264 = load <8 x double>, <8 x double>* %263, align 8
  %265 = shufflevector <8 x double> %264, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %266 = shufflevector <8 x double> %264, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %267 = shufflevector <8 x double> %264, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %268 = shufflevector <8 x double> %264, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %269 = fmul <2 x double> %265, %83
  %270 = fadd <2 x double> %269, zeroinitializer
  %271 = fmul <2 x double> %266, %85
  %272 = fadd <2 x double> %270, %271
  %273 = fmul <2 x double> %267, %87
  %274 = fadd <2 x double> %272, %273
  %275 = fmul <2 x double> %268, %89
  %276 = fadd <2 x double> %274, %275
  %277 = bitcast double* %261 to <8 x double>*
  %278 = shufflevector <2 x double> %232, <2 x double> %246, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %279 = shufflevector <2 x double> %260, <2 x double> %276, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %280 = shufflevector <4 x double> %278, <4 x double> %279, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  store <8 x double> %280, <8 x double>* %277, align 8
  br label %215
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_DecorrelateInterVec(double* nocapture readonly, double* nocapture, i16 signext) local_unnamed_addr #0 {
  %4 = sext i16 %2 to i32
  switch i32 %4, label %37 [
    i32 12, label %6
    i32 16, label %5
  ]

5:                                                ; preds = %3
  br label %6

6:                                                ; preds = %3, %5
  %7 = phi double* [ getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kInterVecDecorrMatUb16, i64 0, i64 0, i64 0), %5 ], [ getelementptr inbounds ([2 x [2 x double]], [2 x [2 x double]]* @WebRtcIsac_kInterVecDecorrMatUb12, i64 0, i64 0, i64 0), %3 ]
  %8 = phi i32 [ 4, %5 ], [ 2, %3 ]
  br label %9

9:                                                ; preds = %6, %33
  %10 = phi i32 [ 0, %6 ], [ %35, %33 ]
  %11 = phi i16 [ 0, %6 ], [ %34, %33 ]
  %12 = shl nsw i32 %10, 2
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds double, double* %1, i64 %13
  store double 0.000000e+00, double* %14, align 8
  br label %15

15:                                               ; preds = %9, %15
  %16 = phi double [ 0.000000e+00, %9 ], [ %29, %15 ]
  %17 = phi i32 [ 0, %9 ], [ %31, %15 ]
  %18 = phi i16 [ 0, %9 ], [ %30, %15 ]
  %19 = shl nsw i32 %17, 2
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds double, double* %0, i64 %20
  %22 = load double, double* %21, align 8
  %23 = mul nsw i32 %17, %8
  %24 = add nsw i32 %23, %10
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds double, double* %7, i64 %25
  %27 = load double, double* %26, align 8
  %28 = fmul double %22, %27
  %29 = fadd double %16, %28
  store double %29, double* %14, align 8
  %30 = add i16 %18, 1
  %31 = sext i16 %30 to i32
  %32 = icmp sgt i32 %8, %31
  br i1 %32, label %15, label %33

33:                                               ; preds = %15
  %34 = add i16 %11, 1
  %35 = sext i16 %34 to i32
  %36 = icmp sgt i32 %8, %35
  br i1 %36, label %9, label %39

37:                                               ; preds = %125, %3
  %38 = phi i16 [ -1, %3 ], [ 0, %125 ]
  ret i16 %38

39:                                               ; preds = %33, %65
  %40 = phi i32 [ %67, %65 ], [ 0, %33 ]
  %41 = phi i16 [ %66, %65 ], [ 0, %33 ]
  %42 = shl nsw i32 %40, 2
  %43 = or i32 %42, 1
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds double, double* %1, i64 %44
  store double 0.000000e+00, double* %45, align 8
  br label %46

46:                                               ; preds = %46, %39
  %47 = phi double [ 0.000000e+00, %39 ], [ %61, %46 ]
  %48 = phi i32 [ 0, %39 ], [ %63, %46 ]
  %49 = phi i16 [ 0, %39 ], [ %62, %46 ]
  %50 = shl nsw i32 %48, 2
  %51 = or i32 %50, 1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds double, double* %0, i64 %52
  %54 = load double, double* %53, align 8
  %55 = mul nsw i32 %48, %8
  %56 = add nsw i32 %55, %40
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds double, double* %7, i64 %57
  %59 = load double, double* %58, align 8
  %60 = fmul double %54, %59
  %61 = fadd double %47, %60
  store double %61, double* %45, align 8
  %62 = add i16 %49, 1
  %63 = sext i16 %62 to i32
  %64 = icmp sgt i32 %8, %63
  br i1 %64, label %46, label %65

65:                                               ; preds = %46
  %66 = add i16 %41, 1
  %67 = sext i16 %66 to i32
  %68 = icmp sgt i32 %8, %67
  br i1 %68, label %39, label %69

69:                                               ; preds = %65, %95
  %70 = phi i32 [ %97, %95 ], [ 0, %65 ]
  %71 = phi i16 [ %96, %95 ], [ 0, %65 ]
  %72 = shl nsw i32 %70, 2
  %73 = or i32 %72, 2
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds double, double* %1, i64 %74
  store double 0.000000e+00, double* %75, align 8
  br label %76

76:                                               ; preds = %76, %69
  %77 = phi double [ 0.000000e+00, %69 ], [ %91, %76 ]
  %78 = phi i32 [ 0, %69 ], [ %93, %76 ]
  %79 = phi i16 [ 0, %69 ], [ %92, %76 ]
  %80 = shl nsw i32 %78, 2
  %81 = or i32 %80, 2
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds double, double* %0, i64 %82
  %84 = load double, double* %83, align 8
  %85 = mul nsw i32 %78, %8
  %86 = add nsw i32 %85, %70
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds double, double* %7, i64 %87
  %89 = load double, double* %88, align 8
  %90 = fmul double %84, %89
  %91 = fadd double %77, %90
  store double %91, double* %75, align 8
  %92 = add i16 %79, 1
  %93 = sext i16 %92 to i32
  %94 = icmp sgt i32 %8, %93
  br i1 %94, label %76, label %95

95:                                               ; preds = %76
  %96 = add i16 %71, 1
  %97 = sext i16 %96 to i32
  %98 = icmp sgt i32 %8, %97
  br i1 %98, label %69, label %99

99:                                               ; preds = %95, %125
  %100 = phi i32 [ %127, %125 ], [ 0, %95 ]
  %101 = phi i16 [ %126, %125 ], [ 0, %95 ]
  %102 = shl nsw i32 %100, 2
  %103 = or i32 %102, 3
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds double, double* %1, i64 %104
  store double 0.000000e+00, double* %105, align 8
  br label %106

106:                                              ; preds = %106, %99
  %107 = phi double [ 0.000000e+00, %99 ], [ %121, %106 ]
  %108 = phi i32 [ 0, %99 ], [ %123, %106 ]
  %109 = phi i16 [ 0, %99 ], [ %122, %106 ]
  %110 = shl nsw i32 %108, 2
  %111 = or i32 %110, 3
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds double, double* %0, i64 %112
  %114 = load double, double* %113, align 8
  %115 = mul nsw i32 %108, %8
  %116 = add nsw i32 %115, %100
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds double, double* %7, i64 %117
  %119 = load double, double* %118, align 8
  %120 = fmul double %114, %119
  %121 = fadd double %107, %120
  store double %121, double* %105, align 8
  %122 = add i16 %109, 1
  %123 = sext i16 %122 to i32
  %124 = icmp sgt i32 %8, %123
  br i1 %124, label %106, label %125

125:                                              ; preds = %106
  %126 = add i16 %101, 1
  %127 = sext i16 %126 to i32
  %128 = icmp sgt i32 %8, %127
  br i1 %128, label %99, label %37
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @WebRtcIsac_QuantizeUncorrLar(double* nocapture, i32* nocapture, i16 signext) local_unnamed_addr #2 {
  %4 = sext i16 %2 to i32
  switch i32 %4, label %43 [
    i32 12, label %6
    i32 16, label %5
  ]

5:                                                ; preds = %3
  br label %6

6:                                                ; preds = %3, %5
  %7 = phi i32 [ 16, %5 ], [ 8, %3 ]
  %8 = phi double* [ getelementptr inbounds ([16 x double], [16 x double]* @WebRtcIsac_kLpcShapeLeftRecPointUb16, i64 0, i64 0), %5 ], [ getelementptr inbounds ([8 x double], [8 x double]* @WebRtcIsac_kLpcShapeLeftRecPointUb12, i64 0, i64 0), %3 ]
  %9 = phi double* [ @WebRtcIsac_kLpcShapeQStepSizeUb16, %5 ], [ @WebRtcIsac_kLpcShapeQStepSizeUb12, %3 ]
  %10 = phi i16* [ getelementptr inbounds ([16 x i16], [16 x i16]* @WebRtcIsac_kLpcShapeNumRecPointUb16, i64 0, i64 0), %5 ], [ getelementptr inbounds ([8 x i16], [8 x i16]* @WebRtcIsac_kLpcShapeNumRecPointUb12, i64 0, i64 0), %3 ]
  %11 = load double, double* %9, align 8
  br label %12

12:                                               ; preds = %6, %33
  %13 = phi i16 [ 0, %6 ], [ %40, %33 ]
  %14 = phi i32* [ %1, %6 ], [ %39, %33 ]
  %15 = phi double* [ %0, %6 ], [ %38, %33 ]
  %16 = load double, double* %15, align 8
  %17 = sext i16 %13 to i64
  %18 = getelementptr inbounds double, double* %8, i64 %17
  %19 = load double, double* %18, align 8
  %20 = fsub double %16, %19
  %21 = fdiv double %20, %11
  %22 = fadd double %21, 5.000000e-01
  %23 = tail call double @llvm.floor.f64(double %22)
  %24 = fptosi double %23 to i32
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %10, i64 %17
  %28 = load i16, i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = icmp slt i32 %24, %29
  %31 = add nsw i32 %29, -1
  %32 = select i1 %30, i32 %24, i32 %31
  br label %33

33:                                               ; preds = %26, %12
  %34 = phi i32 [ 0, %12 ], [ %32, %26 ]
  %35 = sitofp i32 %34 to double
  %36 = fmul double %11, %35
  %37 = fadd double %19, %36
  %38 = getelementptr inbounds double, double* %15, i64 1
  store double %37, double* %15, align 8
  %39 = getelementptr inbounds i32, i32* %14, i64 1
  store i32 %34, i32* %14, align 4
  %40 = add i16 %13, 1
  %41 = sext i16 %40 to i32
  %42 = icmp sgt i32 %7, %41
  br i1 %42, label %12, label %43

43:                                               ; preds = %33, %3
  %44 = phi double [ -1.000000e+00, %3 ], [ 0.000000e+00, %33 ]
  ret double %44
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_DequantizeLpcParam(i32* nocapture readonly, double* nocapture, i16 signext) local_unnamed_addr #0 {
  %4 = sext i16 %2 to i32
  switch i32 %4, label %27 [
    i32 12, label %6
    i32 16, label %5
  ]

5:                                                ; preds = %3
  br label %6

6:                                                ; preds = %3, %5
  %7 = phi i32 [ 16, %5 ], [ 8, %3 ]
  %8 = phi double* [ getelementptr inbounds ([16 x double], [16 x double]* @WebRtcIsac_kLpcShapeLeftRecPointUb16, i64 0, i64 0), %5 ], [ getelementptr inbounds ([8 x double], [8 x double]* @WebRtcIsac_kLpcShapeLeftRecPointUb12, i64 0, i64 0), %3 ]
  %9 = phi double* [ @WebRtcIsac_kLpcShapeQStepSizeUb16, %5 ], [ @WebRtcIsac_kLpcShapeQStepSizeUb12, %3 ]
  %10 = load double, double* %9, align 8
  br label %11

11:                                               ; preds = %6, %11
  %12 = phi i16 [ 0, %6 ], [ %24, %11 ]
  %13 = phi double* [ %1, %6 ], [ %23, %11 ]
  %14 = phi i32* [ %0, %6 ], [ %18, %11 ]
  %15 = sext i16 %12 to i64
  %16 = getelementptr inbounds double, double* %8, i64 %15
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds i32, i32* %14, i64 1
  %19 = load i32, i32* %14, align 4
  %20 = sitofp i32 %19 to double
  %21 = fmul double %10, %20
  %22 = fadd double %17, %21
  %23 = getelementptr inbounds double, double* %13, i64 1
  store double %22, double* %13, align 8
  %24 = add i16 %12, 1
  %25 = sext i16 %24 to i32
  %26 = icmp sgt i32 %7, %25
  br i1 %26, label %11, label %27

27:                                               ; preds = %11, %3
  %28 = phi i16 [ -1, %3 ], [ 0, %11 ]
  ret i16 %28
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_CorrelateIntraVec(double* nocapture readonly, double* nocapture, i16 signext) local_unnamed_addr #0 {
  %4 = sext i16 %2 to i32
  switch i32 %4, label %215 [
    i32 12, label %6
    i32 16, label %5
  ]

5:                                                ; preds = %3
  br label %6

6:                                                ; preds = %3, %5
  %7 = phi i32 [ 4, %5 ], [ 2, %3 ]
  %8 = phi double* [ getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kIintraVecDecorrMatUb16, i64 0, i64 0, i64 0), %5 ], [ getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kIntraVecDecorrMatUb12, i64 0, i64 0, i64 0), %3 ]
  %9 = getelementptr inbounds double, double* %8, i64 5
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds double, double* %8, i64 9
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds double, double* %8, i64 13
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds double, double* %8, i64 2
  %16 = load double, double* %15, align 8
  %17 = getelementptr inbounds double, double* %8, i64 6
  %18 = load double, double* %17, align 8
  %19 = getelementptr inbounds double, double* %8, i64 10
  %20 = load double, double* %19, align 8
  %21 = getelementptr inbounds double, double* %8, i64 14
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds double, double* %8, i64 3
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds double, double* %8, i64 7
  %26 = load double, double* %25, align 8
  %27 = getelementptr inbounds double, double* %8, i64 11
  %28 = load double, double* %27, align 8
  %29 = getelementptr inbounds double, double* %8, i64 15
  %30 = load double, double* %29, align 8
  %31 = load double, double* %8, align 8
  %32 = getelementptr inbounds double, double* %8, i64 4
  %33 = load double, double* %32, align 8
  %34 = getelementptr inbounds double, double* %8, i64 8
  %35 = load double, double* %34, align 8
  %36 = getelementptr inbounds double, double* %8, i64 12
  %37 = load double, double* %36, align 8
  %38 = getelementptr inbounds double, double* %8, i64 1
  %39 = load double, double* %38, align 8
  %40 = add nsw i32 %7, -1
  %41 = trunc i32 %40 to i16
  %42 = add i16 %41, 1
  %43 = icmp slt i16 %42, 1
  %44 = icmp ugt i32 %40, 65535
  %45 = or i1 %43, %44
  br i1 %45, label %46, label %47

46:                                               ; preds = %47, %6
  br label %152

47:                                               ; preds = %6
  %48 = add nsw i32 %7, -2
  %49 = zext i32 %48 to i64
  %50 = shl nuw nsw i64 %49, 2
  %51 = add nuw nsw i64 %50, 8
  %52 = getelementptr double, double* %1, i64 %51
  %53 = getelementptr double, double* %0, i64 %51
  %54 = icmp ugt double* %53, %1
  %55 = icmp ugt double* %52, %0
  %56 = and i1 %54, %55
  br i1 %56, label %46, label %57

57:                                               ; preds = %47
  %58 = insertelement <2 x double> undef, double %31, i32 0
  %59 = shufflevector <2 x double> %58, <2 x double> undef, <2 x i32> zeroinitializer
  %60 = insertelement <2 x double> undef, double %33, i32 0
  %61 = shufflevector <2 x double> %60, <2 x double> undef, <2 x i32> zeroinitializer
  %62 = insertelement <2 x double> undef, double %35, i32 0
  %63 = shufflevector <2 x double> %62, <2 x double> undef, <2 x i32> zeroinitializer
  %64 = insertelement <2 x double> undef, double %37, i32 0
  %65 = shufflevector <2 x double> %64, <2 x double> undef, <2 x i32> zeroinitializer
  %66 = insertelement <2 x double> undef, double %39, i32 0
  %67 = shufflevector <2 x double> %66, <2 x double> undef, <2 x i32> zeroinitializer
  %68 = insertelement <2 x double> undef, double %10, i32 0
  %69 = shufflevector <2 x double> %68, <2 x double> undef, <2 x i32> zeroinitializer
  %70 = insertelement <2 x double> undef, double %12, i32 0
  %71 = shufflevector <2 x double> %70, <2 x double> undef, <2 x i32> zeroinitializer
  %72 = insertelement <2 x double> undef, double %14, i32 0
  %73 = shufflevector <2 x double> %72, <2 x double> undef, <2 x i32> zeroinitializer
  %74 = insertelement <2 x double> undef, double %16, i32 0
  %75 = shufflevector <2 x double> %74, <2 x double> undef, <2 x i32> zeroinitializer
  %76 = insertelement <2 x double> undef, double %18, i32 0
  %77 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> zeroinitializer
  %78 = insertelement <2 x double> undef, double %20, i32 0
  %79 = shufflevector <2 x double> %78, <2 x double> undef, <2 x i32> zeroinitializer
  %80 = insertelement <2 x double> undef, double %22, i32 0
  %81 = shufflevector <2 x double> %80, <2 x double> undef, <2 x i32> zeroinitializer
  %82 = insertelement <2 x double> undef, double %24, i32 0
  %83 = shufflevector <2 x double> %82, <2 x double> undef, <2 x i32> zeroinitializer
  %84 = insertelement <2 x double> undef, double %26, i32 0
  %85 = shufflevector <2 x double> %84, <2 x double> undef, <2 x i32> zeroinitializer
  %86 = insertelement <2 x double> undef, double %28, i32 0
  %87 = shufflevector <2 x double> %86, <2 x double> undef, <2 x i32> zeroinitializer
  %88 = insertelement <2 x double> undef, double %30, i32 0
  %89 = shufflevector <2 x double> %88, <2 x double> undef, <2 x i32> zeroinitializer
  %90 = bitcast double* %0 to <8 x double>*
  %91 = load <8 x double>, <8 x double>* %90, align 8
  %92 = shufflevector <8 x double> %91, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %93 = shufflevector <8 x double> %91, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %94 = shufflevector <8 x double> %91, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %95 = shufflevector <8 x double> %91, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %96 = fmul <2 x double> %92, %59
  %97 = fadd <2 x double> %96, zeroinitializer
  %98 = fmul <2 x double> %93, %61
  %99 = fadd <2 x double> %97, %98
  %100 = fmul <2 x double> %94, %63
  %101 = fadd <2 x double> %99, %100
  %102 = fmul <2 x double> %95, %65
  %103 = fadd <2 x double> %101, %102
  %104 = bitcast double* %0 to <8 x double>*
  %105 = load <8 x double>, <8 x double>* %104, align 8
  %106 = shufflevector <8 x double> %105, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %107 = shufflevector <8 x double> %105, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %108 = shufflevector <8 x double> %105, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %109 = shufflevector <8 x double> %105, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %110 = fmul <2 x double> %106, %67
  %111 = fadd <2 x double> %110, zeroinitializer
  %112 = fmul <2 x double> %107, %69
  %113 = fadd <2 x double> %111, %112
  %114 = fmul <2 x double> %108, %71
  %115 = fadd <2 x double> %113, %114
  %116 = fmul <2 x double> %109, %73
  %117 = fadd <2 x double> %115, %116
  %118 = bitcast double* %0 to <8 x double>*
  %119 = load <8 x double>, <8 x double>* %118, align 8
  %120 = shufflevector <8 x double> %119, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %121 = shufflevector <8 x double> %119, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %122 = shufflevector <8 x double> %119, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %123 = shufflevector <8 x double> %119, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %124 = fmul <2 x double> %120, %75
  %125 = fadd <2 x double> %124, zeroinitializer
  %126 = fmul <2 x double> %121, %77
  %127 = fadd <2 x double> %125, %126
  %128 = fmul <2 x double> %122, %79
  %129 = fadd <2 x double> %127, %128
  %130 = fmul <2 x double> %123, %81
  %131 = fadd <2 x double> %129, %130
  %132 = bitcast double* %1 to <8 x double>*
  store <8 x double> zeroinitializer, <8 x double>* %132, align 8
  %133 = bitcast double* %0 to <8 x double>*
  %134 = load <8 x double>, <8 x double>* %133, align 8
  %135 = shufflevector <8 x double> %134, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %136 = shufflevector <8 x double> %134, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %137 = shufflevector <8 x double> %134, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %138 = shufflevector <8 x double> %134, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %139 = fmul <2 x double> %135, %83
  %140 = fadd <2 x double> %139, zeroinitializer
  %141 = fmul <2 x double> %136, %85
  %142 = fadd <2 x double> %140, %141
  %143 = fmul <2 x double> %137, %87
  %144 = fadd <2 x double> %142, %143
  %145 = fmul <2 x double> %138, %89
  %146 = fadd <2 x double> %144, %145
  %147 = bitcast double* %1 to <8 x double>*
  %148 = shufflevector <2 x double> %103, <2 x double> %117, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %149 = shufflevector <2 x double> %131, <2 x double> %146, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %150 = shufflevector <4 x double> %148, <4 x double> %149, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  store <8 x double> %150, <8 x double>* %147, align 8
  %151 = icmp eq i32 %7, 2
  br i1 %151, label %215, label %217, !llvm.loop !7

152:                                              ; preds = %46, %152
  %153 = phi double* [ %211, %152 ], [ %0, %46 ]
  %154 = phi i16 [ %212, %152 ], [ 0, %46 ]
  %155 = phi double* [ %210, %152 ], [ %1, %46 ]
  store double 0.000000e+00, double* %155, align 8
  %156 = load double, double* %153, align 8
  %157 = fmul double %156, %31
  %158 = fadd double %157, 0.000000e+00
  store double %158, double* %155, align 8
  %159 = getelementptr inbounds double, double* %153, i64 1
  %160 = load double, double* %159, align 8
  %161 = fmul double %160, %33
  %162 = fadd double %158, %161
  store double %162, double* %155, align 8
  %163 = getelementptr inbounds double, double* %153, i64 2
  %164 = load double, double* %163, align 8
  %165 = fmul double %164, %35
  %166 = fadd double %162, %165
  store double %166, double* %155, align 8
  %167 = getelementptr inbounds double, double* %153, i64 3
  %168 = load double, double* %167, align 8
  %169 = fmul double %168, %37
  %170 = fadd double %166, %169
  store double %170, double* %155, align 8
  %171 = getelementptr inbounds double, double* %155, i64 1
  store double 0.000000e+00, double* %171, align 8
  %172 = load double, double* %153, align 8
  %173 = fmul double %172, %39
  %174 = fadd double %173, 0.000000e+00
  store double %174, double* %171, align 8
  %175 = load double, double* %159, align 8
  %176 = fmul double %175, %10
  %177 = fadd double %174, %176
  store double %177, double* %171, align 8
  %178 = load double, double* %163, align 8
  %179 = fmul double %178, %12
  %180 = fadd double %177, %179
  store double %180, double* %171, align 8
  %181 = load double, double* %167, align 8
  %182 = fmul double %181, %14
  %183 = fadd double %180, %182
  store double %183, double* %171, align 8
  %184 = getelementptr inbounds double, double* %155, i64 2
  store double 0.000000e+00, double* %184, align 8
  %185 = load double, double* %153, align 8
  %186 = fmul double %185, %16
  %187 = fadd double %186, 0.000000e+00
  store double %187, double* %184, align 8
  %188 = load double, double* %159, align 8
  %189 = fmul double %188, %18
  %190 = fadd double %187, %189
  store double %190, double* %184, align 8
  %191 = load double, double* %163, align 8
  %192 = fmul double %191, %20
  %193 = fadd double %190, %192
  store double %193, double* %184, align 8
  %194 = load double, double* %167, align 8
  %195 = fmul double %194, %22
  %196 = fadd double %193, %195
  store double %196, double* %184, align 8
  %197 = getelementptr inbounds double, double* %155, i64 3
  store double 0.000000e+00, double* %197, align 8
  %198 = load double, double* %153, align 8
  %199 = fmul double %198, %24
  %200 = fadd double %199, 0.000000e+00
  store double %200, double* %197, align 8
  %201 = load double, double* %159, align 8
  %202 = fmul double %201, %26
  %203 = fadd double %200, %202
  store double %203, double* %197, align 8
  %204 = load double, double* %163, align 8
  %205 = fmul double %204, %28
  %206 = fadd double %203, %205
  store double %206, double* %197, align 8
  %207 = load double, double* %167, align 8
  %208 = fmul double %207, %30
  %209 = fadd double %206, %208
  store double %209, double* %197, align 8
  %210 = getelementptr inbounds double, double* %155, i64 4
  %211 = getelementptr inbounds double, double* %153, i64 4
  %212 = add i16 %154, 1
  %213 = sext i16 %212 to i32
  %214 = icmp sgt i32 %7, %213
  br i1 %214, label %152, label %215, !llvm.loop !8

215:                                              ; preds = %57, %217, %152, %3
  %216 = phi i16 [ -1, %3 ], [ 0, %152 ], [ 0, %217 ], [ 0, %57 ]
  ret i16 %216

217:                                              ; preds = %57
  %218 = getelementptr double, double* %0, i64 8
  %219 = bitcast double* %218 to <8 x double>*
  %220 = load <8 x double>, <8 x double>* %219, align 8
  %221 = shufflevector <8 x double> %220, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %222 = shufflevector <8 x double> %220, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %223 = shufflevector <8 x double> %220, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %224 = shufflevector <8 x double> %220, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %225 = fmul <2 x double> %221, %59
  %226 = fadd <2 x double> %225, zeroinitializer
  %227 = fmul <2 x double> %222, %61
  %228 = fadd <2 x double> %226, %227
  %229 = fmul <2 x double> %223, %63
  %230 = fadd <2 x double> %228, %229
  %231 = fmul <2 x double> %224, %65
  %232 = fadd <2 x double> %230, %231
  %233 = bitcast double* %218 to <8 x double>*
  %234 = load <8 x double>, <8 x double>* %233, align 8
  %235 = shufflevector <8 x double> %234, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %236 = shufflevector <8 x double> %234, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %237 = shufflevector <8 x double> %234, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %238 = shufflevector <8 x double> %234, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %239 = fmul <2 x double> %235, %67
  %240 = fadd <2 x double> %239, zeroinitializer
  %241 = fmul <2 x double> %236, %69
  %242 = fadd <2 x double> %240, %241
  %243 = fmul <2 x double> %237, %71
  %244 = fadd <2 x double> %242, %243
  %245 = fmul <2 x double> %238, %73
  %246 = fadd <2 x double> %244, %245
  %247 = bitcast double* %218 to <8 x double>*
  %248 = load <8 x double>, <8 x double>* %247, align 8
  %249 = shufflevector <8 x double> %248, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %250 = shufflevector <8 x double> %248, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %251 = shufflevector <8 x double> %248, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %252 = shufflevector <8 x double> %248, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %253 = fmul <2 x double> %249, %75
  %254 = fadd <2 x double> %253, zeroinitializer
  %255 = fmul <2 x double> %250, %77
  %256 = fadd <2 x double> %254, %255
  %257 = fmul <2 x double> %251, %79
  %258 = fadd <2 x double> %256, %257
  %259 = fmul <2 x double> %252, %81
  %260 = fadd <2 x double> %258, %259
  %261 = getelementptr inbounds double, double* %1, i64 8
  %262 = bitcast double* %261 to <8 x double>*
  store <8 x double> zeroinitializer, <8 x double>* %262, align 8
  %263 = bitcast double* %218 to <8 x double>*
  %264 = load <8 x double>, <8 x double>* %263, align 8
  %265 = shufflevector <8 x double> %264, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %266 = shufflevector <8 x double> %264, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %267 = shufflevector <8 x double> %264, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %268 = shufflevector <8 x double> %264, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %269 = fmul <2 x double> %265, %83
  %270 = fadd <2 x double> %269, zeroinitializer
  %271 = fmul <2 x double> %266, %85
  %272 = fadd <2 x double> %270, %271
  %273 = fmul <2 x double> %267, %87
  %274 = fadd <2 x double> %272, %273
  %275 = fmul <2 x double> %268, %89
  %276 = fadd <2 x double> %274, %275
  %277 = bitcast double* %261 to <8 x double>*
  %278 = shufflevector <2 x double> %232, <2 x double> %246, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %279 = shufflevector <2 x double> %260, <2 x double> %276, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %280 = shufflevector <4 x double> %278, <4 x double> %279, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  store <8 x double> %280, <8 x double>* %277, align 8
  br label %215
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_CorrelateInterVec(double* nocapture readonly, double* nocapture, i16 signext) local_unnamed_addr #4 {
  %4 = alloca [4 x double], align 16
  %5 = bitcast [4 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 0, i64 32, i1 false)
  %6 = sext i16 %2 to i32
  switch i32 %6, label %59 [
    i32 12, label %8
    i32 16, label %7
  ]

7:                                                ; preds = %3
  br label %8

8:                                                ; preds = %3, %7
  %9 = phi i32 [ 4, %7 ], [ 2, %3 ]
  %10 = phi double* [ getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kInterVecDecorrMatUb16, i64 0, i64 0, i64 0), %7 ], [ getelementptr inbounds ([2 x [2 x double]], [2 x [2 x double]]* @WebRtcIsac_kInterVecDecorrMatUb12, i64 0, i64 0, i64 0), %3 ]
  br label %11

11:                                               ; preds = %56, %8
  %12 = phi i32 [ 0, %8 ], [ %57, %56 ]
  br label %13

13:                                               ; preds = %11, %37
  %14 = phi i32 [ 0, %11 ], [ %39, %37 ]
  %15 = phi i16 [ 0, %11 ], [ %38, %37 ]
  %16 = sext i16 %15 to i64
  %17 = getelementptr inbounds [4 x double], [4 x double]* %4, i64 0, i64 %16
  store double 0.000000e+00, double* %17, align 8
  %18 = mul nsw i32 %14, %9
  br label %19

19:                                               ; preds = %13, %19
  %20 = phi double [ 0.000000e+00, %13 ], [ %33, %19 ]
  %21 = phi i32 [ 0, %13 ], [ %35, %19 ]
  %22 = phi i16 [ 0, %13 ], [ %34, %19 ]
  %23 = shl nsw i32 %21, 2
  %24 = add nsw i32 %23, %12
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds double, double* %0, i64 %25
  %27 = load double, double* %26, align 8
  %28 = add nsw i32 %21, %18
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %10, i64 %29
  %31 = load double, double* %30, align 8
  %32 = fmul double %27, %31
  %33 = fadd double %20, %32
  %34 = add i16 %22, 1
  %35 = sext i16 %34 to i32
  %36 = icmp sgt i32 %9, %35
  br i1 %36, label %19, label %37

37:                                               ; preds = %19
  store double %33, double* %17, align 8
  %38 = add i16 %15, 1
  %39 = sext i16 %38 to i32
  %40 = icmp sgt i32 %9, %39
  br i1 %40, label %13, label %41

41:                                               ; preds = %37, %41
  %42 = phi i32 [ %54, %41 ], [ 0, %37 ]
  %43 = phi i16 [ %53, %41 ], [ 0, %37 ]
  %44 = sext i16 %43 to i64
  %45 = getelementptr inbounds [4 x double], [4 x double]* %4, i64 0, i64 %44
  %46 = bitcast double* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = shl nsw i32 %42, 2
  %49 = add nsw i32 %48, %12
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds double, double* %1, i64 %50
  %52 = bitcast double* %51 to i64*
  store i64 %47, i64* %52, align 8
  %53 = add i16 %43, 1
  %54 = sext i16 %53 to i32
  %55 = icmp sgt i32 %9, %54
  br i1 %55, label %41, label %56

56:                                               ; preds = %41
  %57 = add nuw nsw i32 %12, 1
  %58 = icmp eq i32 %57, 4
  br i1 %58, label %59, label %11

59:                                               ; preds = %56, %3
  %60 = phi i16 [ -1, %3 ], [ 0, %56 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #6
  ret i16 %60
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_AddLarMean(double* nocapture, i16 signext) local_unnamed_addr #0 {
  %3 = sext i16 %1 to i32
  switch i32 %3, label %55 [
    i32 12, label %5
    i32 16, label %4
  ]

4:                                                ; preds = %2
  br label %5

5:                                                ; preds = %2, %4
  %6 = phi i32 [ 4, %4 ], [ 2, %2 ]
  %7 = phi <2 x double>* [ bitcast ([4 x double]* @WebRtcIsac_kMeanLarUb16 to <2 x double>*), %4 ], [ bitcast ([4 x double]* @WebRtcIsac_kMeanLarUb12 to <2 x double>*), %2 ]
  %8 = phi double* [ getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kMeanLarUb16, i64 0, i64 0), %4 ], [ getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kMeanLarUb12, i64 0, i64 0), %2 ]
  %9 = load <2 x double>, <2 x double>* %7, align 8
  %10 = getelementptr inbounds double, double* %8, i64 2
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = add nsw i32 %6, -1
  %14 = trunc i32 %13 to i16
  %15 = add i16 %14, 1
  %16 = icmp slt i16 %15, 1
  %17 = icmp ugt i32 %13, 65535
  %18 = or i1 %16, %17
  br i1 %18, label %39, label %19

19:                                               ; preds = %5
  %20 = shufflevector <2 x double> %9, <2 x double> undef, <2 x i32> zeroinitializer
  %21 = shufflevector <2 x double> %9, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %22 = shufflevector <2 x double> %12, <2 x double> undef, <2 x i32> zeroinitializer
  %23 = shufflevector <2 x double> %12, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %24 = bitcast double* %0 to <8 x double>*
  %25 = load <8 x double>, <8 x double>* %24, align 8
  %26 = shufflevector <8 x double> %25, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %27 = shufflevector <8 x double> %25, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %28 = shufflevector <8 x double> %25, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %29 = shufflevector <8 x double> %25, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %30 = fadd <2 x double> %20, %26
  %31 = fadd <2 x double> %21, %27
  %32 = fadd <2 x double> %22, %28
  %33 = fadd <2 x double> %23, %29
  %34 = bitcast double* %0 to <8 x double>*
  %35 = shufflevector <2 x double> %30, <2 x double> %31, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %36 = shufflevector <2 x double> %32, <2 x double> %33, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %37 = shufflevector <4 x double> %35, <4 x double> %36, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  store <8 x double> %37, <8 x double>* %34, align 8
  %38 = icmp eq i32 %6, 2
  br i1 %38, label %55, label %57, !llvm.loop !9

39:                                               ; preds = %5, %39
  %40 = phi i16 [ %52, %39 ], [ 0, %5 ]
  %41 = phi double* [ %47, %39 ], [ %0, %5 ]
  %42 = getelementptr inbounds double, double* %41, i64 2
  %43 = bitcast double* %41 to <2 x double>*
  %44 = load <2 x double>, <2 x double>* %43, align 8
  %45 = fadd <2 x double> %9, %44
  %46 = bitcast double* %41 to <2 x double>*
  store <2 x double> %45, <2 x double>* %46, align 8
  %47 = getelementptr inbounds double, double* %41, i64 4
  %48 = bitcast double* %42 to <2 x double>*
  %49 = load <2 x double>, <2 x double>* %48, align 8
  %50 = fadd <2 x double> %12, %49
  %51 = bitcast double* %42 to <2 x double>*
  store <2 x double> %50, <2 x double>* %51, align 8
  %52 = add i16 %40, 1
  %53 = sext i16 %52 to i32
  %54 = icmp sgt i32 %6, %53
  br i1 %54, label %39, label %55, !llvm.loop !10

55:                                               ; preds = %19, %57, %39, %2
  %56 = phi i16 [ -1, %2 ], [ 0, %39 ], [ 0, %57 ], [ 0, %19 ]
  ret i16 %56

57:                                               ; preds = %19
  %58 = getelementptr double, double* %0, i64 8
  %59 = bitcast double* %58 to <8 x double>*
  %60 = load <8 x double>, <8 x double>* %59, align 8
  %61 = shufflevector <8 x double> %60, <8 x double> undef, <2 x i32> <i32 0, i32 4>
  %62 = shufflevector <8 x double> %60, <8 x double> undef, <2 x i32> <i32 1, i32 5>
  %63 = shufflevector <8 x double> %60, <8 x double> undef, <2 x i32> <i32 2, i32 6>
  %64 = shufflevector <8 x double> %60, <8 x double> undef, <2 x i32> <i32 3, i32 7>
  %65 = fadd <2 x double> %20, %61
  %66 = fadd <2 x double> %21, %62
  %67 = fadd <2 x double> %22, %63
  %68 = fadd <2 x double> %23, %64
  %69 = getelementptr inbounds double, double* %0, i64 8
  %70 = bitcast double* %69 to <8 x double>*
  %71 = shufflevector <2 x double> %65, <2 x double> %66, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %72 = shufflevector <2 x double> %67, <2 x double> %68, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %73 = shufflevector <4 x double> %71, <4 x double> %72, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  store <8 x double> %73, <8 x double>* %70, align 8
  br label %55
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_ToLogDomainRemoveMean(double* nocapture) local_unnamed_addr #2 {
  %2 = load double, double* @WebRtcIsac_kMeanLpcGain, align 8
  %3 = load double, double* %0, align 8
  %4 = tail call double @log(double %3) #6
  %5 = fsub double %4, %2
  store double %5, double* %0, align 8
  %6 = getelementptr inbounds double, double* %0, i64 1
  %7 = load double, double* %6, align 8
  %8 = tail call double @log(double %7) #6
  %9 = fsub double %8, %2
  store double %9, double* %6, align 8
  %10 = getelementptr inbounds double, double* %0, i64 2
  %11 = load double, double* %10, align 8
  %12 = tail call double @log(double %11) #6
  %13 = fsub double %12, %2
  store double %13, double* %10, align 8
  %14 = getelementptr inbounds double, double* %0, i64 3
  %15 = load double, double* %14, align 8
  %16 = tail call double @log(double %15) #6
  %17 = fsub double %16, %2
  store double %17, double* %14, align 8
  %18 = getelementptr inbounds double, double* %0, i64 4
  %19 = load double, double* %18, align 8
  %20 = tail call double @log(double %19) #6
  %21 = fsub double %20, %2
  store double %21, double* %18, align 8
  %22 = getelementptr inbounds double, double* %0, i64 5
  %23 = load double, double* %22, align 8
  %24 = tail call double @log(double %23) #6
  %25 = fsub double %24, %2
  store double %25, double* %22, align 8
  ret i16 0
}

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #5

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_DecorrelateLPGain(double* nocapture readonly, double* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds double, double* %0, i64 1
  %4 = getelementptr inbounds double, double* %0, i64 2
  %5 = getelementptr inbounds double, double* %0, i64 3
  %6 = getelementptr inbounds double, double* %0, i64 4
  %7 = getelementptr inbounds double, double* %0, i64 5
  br label %8

8:                                                ; preds = %8, %2
  %9 = phi i64 [ 0, %2 ], [ %42, %8 ]
  %10 = phi double* [ %1, %2 ], [ %41, %8 ]
  store double 0.000000e+00, double* %10, align 8
  %11 = load double, double* %0, align 8
  %12 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @WebRtcIsac_kLpcGainDecorrMat, i64 0, i64 0, i64 %9
  %13 = load double, double* %12, align 8
  %14 = fmul double %11, %13
  %15 = fadd double %14, 0.000000e+00
  store double %15, double* %10, align 8
  %16 = load double, double* %3, align 8
  %17 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @WebRtcIsac_kLpcGainDecorrMat, i64 0, i64 1, i64 %9
  %18 = load double, double* %17, align 8
  %19 = fmul double %16, %18
  %20 = fadd double %15, %19
  store double %20, double* %10, align 8
  %21 = load double, double* %4, align 8
  %22 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @WebRtcIsac_kLpcGainDecorrMat, i64 0, i64 2, i64 %9
  %23 = load double, double* %22, align 8
  %24 = fmul double %21, %23
  %25 = fadd double %20, %24
  store double %25, double* %10, align 8
  %26 = load double, double* %5, align 8
  %27 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @WebRtcIsac_kLpcGainDecorrMat, i64 0, i64 3, i64 %9
  %28 = load double, double* %27, align 8
  %29 = fmul double %26, %28
  %30 = fadd double %25, %29
  store double %30, double* %10, align 8
  %31 = load double, double* %6, align 8
  %32 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @WebRtcIsac_kLpcGainDecorrMat, i64 0, i64 4, i64 %9
  %33 = load double, double* %32, align 8
  %34 = fmul double %31, %33
  %35 = fadd double %30, %34
  store double %35, double* %10, align 8
  %36 = load double, double* %7, align 8
  %37 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @WebRtcIsac_kLpcGainDecorrMat, i64 0, i64 5, i64 %9
  %38 = load double, double* %37, align 8
  %39 = fmul double %36, %38
  %40 = fadd double %35, %39
  store double %40, double* %10, align 8
  %41 = getelementptr inbounds double, double* %10, i64 1
  %42 = add nuw nsw i64 %9, 1
  %43 = icmp eq i64 %42, 6
  br i1 %43, label %44, label %8

44:                                               ; preds = %8
  ret i16 0
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @WebRtcIsac_QuantizeLpcGain(double* nocapture, i32* nocapture) local_unnamed_addr #2 {
  %3 = load double, double* @WebRtcIsac_kQSizeLpcGain, align 8
  %4 = load double, double* %0, align 8
  %5 = load double, double* getelementptr inbounds ([6 x double], [6 x double]* @WebRtcIsac_kLeftRecPointLpcGain, i64 0, i64 0), align 16
  %6 = fsub double %4, %5
  %7 = fdiv double %6, %3
  %8 = fadd double %7, 5.000000e-01
  %9 = tail call double @llvm.floor.f64(double %8)
  %10 = fptosi double %9 to i32
  store i32 %10, i32* %1, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %18, label %12

12:                                               ; preds = %2
  %13 = load i16, i16* getelementptr inbounds ([6 x i16], [6 x i16]* @WebRtcIsac_kNumQCellLpcGain, i64 0, i64 0), align 2
  %14 = sext i16 %13 to i32
  %15 = icmp slt i32 %10, %14
  br i1 %15, label %20, label %16

16:                                               ; preds = %12
  %17 = add nsw i32 %14, -1
  br label %18

18:                                               ; preds = %2, %16
  %19 = phi i32 [ %17, %16 ], [ 0, %2 ]
  store i32 %19, i32* %1, align 4
  br label %20

20:                                               ; preds = %18, %12
  %21 = phi i32 [ %10, %12 ], [ %19, %18 ]
  %22 = sitofp i32 %21 to double
  %23 = fmul double %3, %22
  %24 = fadd double %5, %23
  store double %24, double* %0, align 8
  %25 = getelementptr inbounds double, double* %0, i64 1
  %26 = getelementptr inbounds i32, i32* %1, i64 1
  %27 = load double, double* %25, align 8
  %28 = load double, double* getelementptr inbounds ([6 x double], [6 x double]* @WebRtcIsac_kLeftRecPointLpcGain, i64 0, i64 1), align 8
  %29 = fsub double %27, %28
  %30 = fdiv double %29, %3
  %31 = fadd double %30, 5.000000e-01
  %32 = tail call double @llvm.floor.f64(double %31)
  %33 = fptosi double %32 to i32
  store i32 %33, i32* %26, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %41, label %35

35:                                               ; preds = %20
  %36 = load i16, i16* getelementptr inbounds ([6 x i16], [6 x i16]* @WebRtcIsac_kNumQCellLpcGain, i64 0, i64 1), align 2
  %37 = sext i16 %36 to i32
  %38 = icmp slt i32 %33, %37
  br i1 %38, label %43, label %39

39:                                               ; preds = %35
  %40 = add nsw i32 %37, -1
  br label %41

41:                                               ; preds = %39, %20
  %42 = phi i32 [ %40, %39 ], [ 0, %20 ]
  store i32 %42, i32* %26, align 4
  br label %43

43:                                               ; preds = %41, %35
  %44 = phi i32 [ %33, %35 ], [ %42, %41 ]
  %45 = sitofp i32 %44 to double
  %46 = fmul double %3, %45
  %47 = fadd double %28, %46
  store double %47, double* %25, align 8
  %48 = getelementptr inbounds double, double* %0, i64 2
  %49 = getelementptr inbounds i32, i32* %1, i64 2
  %50 = load double, double* %48, align 8
  %51 = load double, double* getelementptr inbounds ([6 x double], [6 x double]* @WebRtcIsac_kLeftRecPointLpcGain, i64 0, i64 2), align 16
  %52 = fsub double %50, %51
  %53 = fdiv double %52, %3
  %54 = fadd double %53, 5.000000e-01
  %55 = tail call double @llvm.floor.f64(double %54)
  %56 = fptosi double %55 to i32
  store i32 %56, i32* %49, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %64, label %58

58:                                               ; preds = %43
  %59 = load i16, i16* getelementptr inbounds ([6 x i16], [6 x i16]* @WebRtcIsac_kNumQCellLpcGain, i64 0, i64 2), align 2
  %60 = sext i16 %59 to i32
  %61 = icmp slt i32 %56, %60
  br i1 %61, label %66, label %62

62:                                               ; preds = %58
  %63 = add nsw i32 %60, -1
  br label %64

64:                                               ; preds = %62, %43
  %65 = phi i32 [ %63, %62 ], [ 0, %43 ]
  store i32 %65, i32* %49, align 4
  br label %66

66:                                               ; preds = %64, %58
  %67 = phi i32 [ %56, %58 ], [ %65, %64 ]
  %68 = sitofp i32 %67 to double
  %69 = fmul double %3, %68
  %70 = fadd double %51, %69
  store double %70, double* %48, align 8
  %71 = getelementptr inbounds double, double* %0, i64 3
  %72 = getelementptr inbounds i32, i32* %1, i64 3
  %73 = load double, double* %71, align 8
  %74 = load double, double* getelementptr inbounds ([6 x double], [6 x double]* @WebRtcIsac_kLeftRecPointLpcGain, i64 0, i64 3), align 8
  %75 = fsub double %73, %74
  %76 = fdiv double %75, %3
  %77 = fadd double %76, 5.000000e-01
  %78 = tail call double @llvm.floor.f64(double %77)
  %79 = fptosi double %78 to i32
  store i32 %79, i32* %72, align 4
  %80 = icmp slt i32 %79, 0
  br i1 %80, label %87, label %81

81:                                               ; preds = %66
  %82 = load i16, i16* getelementptr inbounds ([6 x i16], [6 x i16]* @WebRtcIsac_kNumQCellLpcGain, i64 0, i64 3), align 2
  %83 = sext i16 %82 to i32
  %84 = icmp slt i32 %79, %83
  br i1 %84, label %89, label %85

85:                                               ; preds = %81
  %86 = add nsw i32 %83, -1
  br label %87

87:                                               ; preds = %85, %66
  %88 = phi i32 [ %86, %85 ], [ 0, %66 ]
  store i32 %88, i32* %72, align 4
  br label %89

89:                                               ; preds = %87, %81
  %90 = phi i32 [ %79, %81 ], [ %88, %87 ]
  %91 = sitofp i32 %90 to double
  %92 = fmul double %3, %91
  %93 = fadd double %74, %92
  store double %93, double* %71, align 8
  %94 = getelementptr inbounds double, double* %0, i64 4
  %95 = getelementptr inbounds i32, i32* %1, i64 4
  %96 = load double, double* %94, align 8
  %97 = load double, double* getelementptr inbounds ([6 x double], [6 x double]* @WebRtcIsac_kLeftRecPointLpcGain, i64 0, i64 4), align 16
  %98 = fsub double %96, %97
  %99 = fdiv double %98, %3
  %100 = fadd double %99, 5.000000e-01
  %101 = tail call double @llvm.floor.f64(double %100)
  %102 = fptosi double %101 to i32
  store i32 %102, i32* %95, align 4
  %103 = icmp slt i32 %102, 0
  br i1 %103, label %110, label %104

104:                                              ; preds = %89
  %105 = load i16, i16* getelementptr inbounds ([6 x i16], [6 x i16]* @WebRtcIsac_kNumQCellLpcGain, i64 0, i64 4), align 2
  %106 = sext i16 %105 to i32
  %107 = icmp slt i32 %102, %106
  br i1 %107, label %112, label %108

108:                                              ; preds = %104
  %109 = add nsw i32 %106, -1
  br label %110

110:                                              ; preds = %108, %89
  %111 = phi i32 [ %109, %108 ], [ 0, %89 ]
  store i32 %111, i32* %95, align 4
  br label %112

112:                                              ; preds = %110, %104
  %113 = phi i32 [ %102, %104 ], [ %111, %110 ]
  %114 = sitofp i32 %113 to double
  %115 = fmul double %3, %114
  %116 = fadd double %97, %115
  store double %116, double* %94, align 8
  %117 = getelementptr inbounds double, double* %0, i64 5
  %118 = getelementptr inbounds i32, i32* %1, i64 5
  %119 = load double, double* %117, align 8
  %120 = load double, double* getelementptr inbounds ([6 x double], [6 x double]* @WebRtcIsac_kLeftRecPointLpcGain, i64 0, i64 5), align 8
  %121 = fsub double %119, %120
  %122 = fdiv double %121, %3
  %123 = fadd double %122, 5.000000e-01
  %124 = tail call double @llvm.floor.f64(double %123)
  %125 = fptosi double %124 to i32
  store i32 %125, i32* %118, align 4
  %126 = icmp slt i32 %125, 0
  br i1 %126, label %133, label %127

127:                                              ; preds = %112
  %128 = load i16, i16* getelementptr inbounds ([6 x i16], [6 x i16]* @WebRtcIsac_kNumQCellLpcGain, i64 0, i64 5), align 2
  %129 = sext i16 %128 to i32
  %130 = icmp slt i32 %125, %129
  br i1 %130, label %135, label %131

131:                                              ; preds = %127
  %132 = add nsw i32 %129, -1
  br label %133

133:                                              ; preds = %131, %112
  %134 = phi i32 [ %132, %131 ], [ 0, %112 ]
  store i32 %134, i32* %118, align 4
  br label %135

135:                                              ; preds = %133, %127
  %136 = phi i32 [ %125, %127 ], [ %134, %133 ]
  %137 = sitofp i32 %136 to double
  %138 = fmul double %3, %137
  %139 = fadd double %120, %138
  store double %139, double* %117, align 8
  ret double 0.000000e+00
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_DequantizeLpcGain(i32* nocapture readonly, double* nocapture) local_unnamed_addr #0 {
  %3 = load double, double* @WebRtcIsac_kQSizeLpcGain, align 8
  %4 = load double, double* getelementptr inbounds ([6 x double], [6 x double]* @WebRtcIsac_kLeftRecPointLpcGain, i64 0, i64 0), align 16
  %5 = load i32, i32* %0, align 4
  %6 = sitofp i32 %5 to double
  %7 = fmul double %3, %6
  %8 = fadd double %4, %7
  store double %8, double* %1, align 8
  %9 = getelementptr inbounds double, double* %1, i64 1
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load double, double* getelementptr inbounds ([6 x double], [6 x double]* @WebRtcIsac_kLeftRecPointLpcGain, i64 0, i64 1), align 8
  %12 = load i32, i32* %10, align 4
  %13 = sitofp i32 %12 to double
  %14 = fmul double %3, %13
  %15 = fadd double %11, %14
  store double %15, double* %9, align 8
  %16 = getelementptr inbounds double, double* %1, i64 2
  %17 = getelementptr inbounds i32, i32* %0, i64 2
  %18 = load double, double* getelementptr inbounds ([6 x double], [6 x double]* @WebRtcIsac_kLeftRecPointLpcGain, i64 0, i64 2), align 16
  %19 = load i32, i32* %17, align 4
  %20 = sitofp i32 %19 to double
  %21 = fmul double %3, %20
  %22 = fadd double %18, %21
  store double %22, double* %16, align 8
  %23 = getelementptr inbounds double, double* %1, i64 3
  %24 = getelementptr inbounds i32, i32* %0, i64 3
  %25 = load double, double* getelementptr inbounds ([6 x double], [6 x double]* @WebRtcIsac_kLeftRecPointLpcGain, i64 0, i64 3), align 8
  %26 = load i32, i32* %24, align 4
  %27 = sitofp i32 %26 to double
  %28 = fmul double %3, %27
  %29 = fadd double %25, %28
  store double %29, double* %23, align 8
  %30 = getelementptr inbounds double, double* %1, i64 4
  %31 = getelementptr inbounds i32, i32* %0, i64 4
  %32 = load double, double* getelementptr inbounds ([6 x double], [6 x double]* @WebRtcIsac_kLeftRecPointLpcGain, i64 0, i64 4), align 16
  %33 = load i32, i32* %31, align 4
  %34 = sitofp i32 %33 to double
  %35 = fmul double %3, %34
  %36 = fadd double %32, %35
  store double %36, double* %30, align 8
  %37 = getelementptr inbounds double, double* %1, i64 5
  %38 = getelementptr inbounds i32, i32* %0, i64 5
  %39 = load double, double* getelementptr inbounds ([6 x double], [6 x double]* @WebRtcIsac_kLeftRecPointLpcGain, i64 0, i64 5), align 8
  %40 = load i32, i32* %38, align 4
  %41 = sitofp i32 %40 to double
  %42 = fmul double %3, %41
  %43 = fadd double %39, %42
  store double %43, double* %37, align 8
  ret i16 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_CorrelateLpcGain(double* nocapture readonly, double* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds double, double* %0, i64 1
  %4 = getelementptr inbounds double, double* %0, i64 2
  %5 = getelementptr inbounds double, double* %0, i64 3
  %6 = getelementptr inbounds double, double* %0, i64 4
  %7 = getelementptr inbounds double, double* %0, i64 5
  br label %8

8:                                                ; preds = %8, %2
  %9 = phi i64 [ 0, %2 ], [ %42, %8 ]
  %10 = phi double* [ %1, %2 ], [ %41, %8 ]
  store double 0.000000e+00, double* %10, align 8
  %11 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @WebRtcIsac_kLpcGainDecorrMat, i64 0, i64 %9, i64 0
  %12 = load double, double* %11, align 16
  %13 = load double, double* %0, align 8
  %14 = fmul double %12, %13
  %15 = fadd double %14, 0.000000e+00
  store double %15, double* %10, align 8
  %16 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @WebRtcIsac_kLpcGainDecorrMat, i64 0, i64 %9, i64 1
  %17 = load double, double* %16, align 8
  %18 = load double, double* %3, align 8
  %19 = fmul double %17, %18
  %20 = fadd double %15, %19
  store double %20, double* %10, align 8
  %21 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @WebRtcIsac_kLpcGainDecorrMat, i64 0, i64 %9, i64 2
  %22 = load double, double* %21, align 16
  %23 = load double, double* %4, align 8
  %24 = fmul double %22, %23
  %25 = fadd double %20, %24
  store double %25, double* %10, align 8
  %26 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @WebRtcIsac_kLpcGainDecorrMat, i64 0, i64 %9, i64 3
  %27 = load double, double* %26, align 8
  %28 = load double, double* %5, align 8
  %29 = fmul double %27, %28
  %30 = fadd double %25, %29
  store double %30, double* %10, align 8
  %31 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @WebRtcIsac_kLpcGainDecorrMat, i64 0, i64 %9, i64 4
  %32 = load double, double* %31, align 16
  %33 = load double, double* %6, align 8
  %34 = fmul double %32, %33
  %35 = fadd double %30, %34
  store double %35, double* %10, align 8
  %36 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @WebRtcIsac_kLpcGainDecorrMat, i64 0, i64 %9, i64 5
  %37 = load double, double* %36, align 8
  %38 = load double, double* %7, align 8
  %39 = fmul double %37, %38
  %40 = fadd double %35, %39
  store double %40, double* %10, align 8
  %41 = getelementptr inbounds double, double* %10, i64 1
  %42 = add nuw nsw i64 %9, 1
  %43 = icmp eq i64 %42, 6
  br i1 %43, label %44, label %8

44:                                               ; preds = %8
  ret i16 0
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_AddMeanToLinearDomain(double* nocapture) local_unnamed_addr #2 {
  %2 = load double, double* @WebRtcIsac_kMeanLpcGain, align 8
  %3 = load double, double* %0, align 8
  %4 = fadd double %3, %2
  %5 = tail call double @exp(double %4) #6
  store double %5, double* %0, align 8
  %6 = getelementptr inbounds double, double* %0, i64 1
  %7 = load double, double* %6, align 8
  %8 = fadd double %7, %2
  %9 = tail call double @exp(double %8) #6
  store double %9, double* %6, align 8
  %10 = getelementptr inbounds double, double* %0, i64 2
  %11 = load double, double* %10, align 8
  %12 = fadd double %11, %2
  %13 = tail call double @exp(double %12) #6
  store double %13, double* %10, align 8
  %14 = getelementptr inbounds double, double* %0, i64 3
  %15 = load double, double* %14, align 8
  %16 = fadd double %15, %2
  %17 = tail call double @exp(double %16) #6
  store double %17, double* %14, align 8
  %18 = getelementptr inbounds double, double* %0, i64 4
  %19 = load double, double* %18, align 8
  %20 = fadd double %19, %2
  %21 = tail call double @exp(double %20) #6
  store double %21, double* %18, align 8
  %22 = getelementptr inbounds double, double* %0, i64 5
  %23 = load double, double* %22, align 8
  %24 = fadd double %23, %2
  %25 = tail call double @exp(double %24) #6
  store double %25, double* %22, align 8
  ret i16 0
}

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
