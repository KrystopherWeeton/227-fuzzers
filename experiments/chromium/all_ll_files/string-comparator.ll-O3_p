; ModuleID = '../../v8/src/objects/string-comparator.cc'
source_filename = "../../v8/src/objects/string-comparator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::StringComparator::State" = type { %"class.v8::internal::ConsStringIterator", i8, i32, %union.anon }
%"class.v8::internal::ConsStringIterator" = type <{ [32 x %"class.v8::internal::ConsString"], %"class.v8::internal::ConsString", i32, i32, i32, [4 x i8] }>
%"class.v8::internal::ConsString" = type { %"class.v8::internal::TorqueGeneratedConsString" }
%"class.v8::internal::TorqueGeneratedConsString" = type { %"class.v8::internal::String" }
%"class.v8::internal::String" = type { %"class.v8::internal::TorqueGeneratedString" }
%"class.v8::internal::TorqueGeneratedString" = type { %"class.v8::internal::Name" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%union.anon = type { i8* }
%"class.v8::internal::SharedStringAccessGuardIfNeeded" = type { %"class.v8::base::Optional" }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon.0 }
%union.anon.0 = type { %"class.v8::base::SharedMutexGuard" }
%"class.v8::base::SharedMutexGuard" = type { %"class.v8::base::SharedMutex"* }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::StringComparator" = type { %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State" }
%"class.v8::String::ExternalOneByteStringResource" = type { %"class.v8::String::ExternalStringResourceBase", i8* }
%"class.v8::String::ExternalStringResourceBase" = type { i32 (...)** }
%"class.v8::String::ExternalStringResource" = type { %"class.v8::String::ExternalStringResourceBase", i16* }

$_ZN2v88internal6String9VisitFlatINS0_16StringComparator5StateEEENS0_10ConsStringEPT_S1_iRKNS0_31SharedStringAccessGuardIfNeededE = comdat any

@.str = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal16StringComparator5State4InitENS0_6StringE(%"class.v8::internal::StringComparator::State"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::SharedStringAccessGuardIfNeeded", align 8
  %4 = alloca %"class.v8::internal::SharedStringAccessGuardIfNeeded", align 8
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 16, i1 false) #6, !alias.scope !2
  %7 = call i64 @_ZN2v88internal6String9VisitFlatINS0_16StringComparator5StateEEENS0_10ConsStringEPT_S1_iRKNS0_31SharedStringAccessGuardIfNeededE(%"class.v8::internal::StringComparator::State"* %0, i64 %1, i32 0, %"class.v8::internal::SharedStringAccessGuardIfNeeded"* nonnull dereferenceable(16) %4) #6
  %8 = load i8, i8* %6, align 8, !range !5
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %12 = load %"class.v8::base::SharedMutex"*, %"class.v8::base::SharedMutex"** %11, align 8
  call void @_ZN2v84base11SharedMutex12UnlockSharedEv(%"class.v8::base::SharedMutex"* %12) #6
  br label %13

13:                                               ; preds = %2, %10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  %14 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 0, i32 2
  store i32 0, i32* %15, align 8
  %16 = trunc i64 %7 to i32
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %36, label %18

18:                                               ; preds = %13
  call void @_ZN2v88internal18ConsStringIterator10InitializeENS0_10ConsStringEi(%"class.v8::internal::ConsStringIterator"* %14, i64 %7, i32 0) #6
  %19 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #6
  store i32 0, i32* %5, align 4
  %20 = load i32, i32* %15, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %18
  %23 = call i64 @_ZN2v88internal18ConsStringIterator8ContinueEPi(%"class.v8::internal::ConsStringIterator"* %14, i32* nonnull %5) #6
  %24 = load i32, i32* %5, align 4
  br label %25

25:                                               ; preds = %18, %22
  %26 = phi i32 [ %24, %22 ], [ 0, %18 ]
  %27 = phi i64 [ %23, %22 ], [ 0, %18 ]
  %28 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 0, i64 16, i1 false) #6, !alias.scope !6
  %29 = call i64 @_ZN2v88internal6String9VisitFlatINS0_16StringComparator5StateEEENS0_10ConsStringEPT_S1_iRKNS0_31SharedStringAccessGuardIfNeededE(%"class.v8::internal::StringComparator::State"* %0, i64 %27, i32 %26, %"class.v8::internal::SharedStringAccessGuardIfNeeded"* nonnull dereferenceable(16) %3) #6
  %30 = load i8, i8* %28, align 8, !range !5
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %25
  %33 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %34 = load %"class.v8::base::SharedMutex"*, %"class.v8::base::SharedMutex"** %33, align 8
  call void @_ZN2v84base11SharedMutex12UnlockSharedEv(%"class.v8::base::SharedMutex"* %34) #6
  br label %35

35:                                               ; preds = %25, %32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #6
  br label %36

36:                                               ; preds = %13, %35
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal16StringComparator5State7AdvanceEi(%"class.v8::internal::StringComparator::State"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::SharedStringAccessGuardIfNeeded", align 8
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, %1
  br i1 %7, label %25, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 8, !range !5
  %11 = icmp eq i8 %10, 0
  %12 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 3
  br i1 %11, label %18, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = sext i32 %1 to i64
  %17 = getelementptr inbounds i8, i8* %15, i64 %16
  store i8* %17, i8** %14, align 8
  br label %23

18:                                               ; preds = %8
  %19 = bitcast %union.anon* %12 to i16**
  %20 = load i16*, i16** %19, align 8
  %21 = sext i32 %1 to i64
  %22 = getelementptr inbounds i16, i16* %20, i64 %21
  store i16* %22, i16** %19, align 8
  br label %23

23:                                               ; preds = %18, %13
  %24 = sub nsw i32 %6, %1
  store i32 %24, i32* %5, align 4
  br label %43

25:                                               ; preds = %2
  %26 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #6
  store i32 0, i32* %4, align 4
  %27 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 0, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 0
  %32 = call i64 @_ZN2v88internal18ConsStringIterator8ContinueEPi(%"class.v8::internal::ConsStringIterator"* %31, i32* nonnull %4) #6
  br label %33

33:                                               ; preds = %25, %30
  %34 = phi i64 [ %32, %30 ], [ 0, %25 ]
  %35 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 16, i1 false) #6, !alias.scope !9
  %36 = call i64 @_ZN2v88internal6String9VisitFlatINS0_16StringComparator5StateEEENS0_10ConsStringEPT_S1_iRKNS0_31SharedStringAccessGuardIfNeededE(%"class.v8::internal::StringComparator::State"* %0, i64 %34, i32 0, %"class.v8::internal::SharedStringAccessGuardIfNeeded"* nonnull dereferenceable(16) %3) #6
  %37 = load i8, i8* %35, align 8, !range !5
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %41 = load %"class.v8::base::SharedMutex"*, %"class.v8::base::SharedMutex"** %40, align 8
  call void @_ZN2v84base11SharedMutex12UnlockSharedEv(%"class.v8::base::SharedMutex"* %41) #6
  br label %42

42:                                               ; preds = %33, %39
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #6
  br label %43

43:                                               ; preds = %42, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal16StringComparator6EqualsENS0_6StringES2_(%"class.v8::internal::StringComparator"*, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::SharedStringAccessGuardIfNeeded", align 8
  %5 = alloca i32, align 4
  %6 = alloca %"class.v8::internal::SharedStringAccessGuardIfNeeded", align 8
  %7 = alloca i32, align 4
  %8 = add i64 %1, 7
  %9 = inttoptr i64 %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.v8::internal::StringComparator", %"class.v8::internal::StringComparator"* %0, i64 0, i32 0
  tail call void @_ZN2v88internal16StringComparator5State4InitENS0_6StringE(%"class.v8::internal::StringComparator::State"* %11, i64 %1)
  %12 = getelementptr inbounds %"class.v8::internal::StringComparator", %"class.v8::internal::StringComparator"* %0, i64 0, i32 1
  tail call void @_ZN2v88internal16StringComparator5State4InitENS0_6StringE(%"class.v8::internal::StringComparator::State"* %12, i64 %2)
  %13 = getelementptr inbounds %"class.v8::internal::StringComparator", %"class.v8::internal::StringComparator"* %0, i64 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.v8::internal::StringComparator", %"class.v8::internal::StringComparator"* %0, i64 0, i32 1, i32 2
  %15 = getelementptr inbounds %"class.v8::internal::StringComparator", %"class.v8::internal::StringComparator"* %0, i64 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.v8::internal::StringComparator", %"class.v8::internal::StringComparator"* %0, i64 0, i32 1, i32 1
  %17 = getelementptr inbounds %"class.v8::internal::StringComparator", %"class.v8::internal::StringComparator"* %0, i64 0, i32 0, i32 3, i32 0
  %18 = getelementptr inbounds %"class.v8::internal::StringComparator", %"class.v8::internal::StringComparator"* %0, i64 0, i32 1, i32 3, i32 0
  %19 = bitcast i8** %18 to i16**
  %20 = bitcast i8** %17 to i16**
  %21 = getelementptr inbounds %"class.v8::internal::StringComparator", %"class.v8::internal::StringComparator"* %0, i64 0, i32 0, i32 3
  %22 = getelementptr inbounds %union.anon, %union.anon* %21, i64 0, i32 0
  %23 = bitcast %union.anon* %21 to i16**
  %24 = bitcast i32* %5 to i8*
  %25 = getelementptr inbounds %"class.v8::internal::StringComparator", %"class.v8::internal::StringComparator"* %0, i64 0, i32 0, i32 0, i32 2
  %26 = getelementptr inbounds %"class.v8::internal::StringComparator", %"class.v8::internal::StringComparator"* %0, i64 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %29 = getelementptr inbounds %"class.v8::internal::StringComparator", %"class.v8::internal::StringComparator"* %0, i64 0, i32 1, i32 3
  %30 = getelementptr inbounds %union.anon, %union.anon* %29, i64 0, i32 0
  %31 = bitcast %union.anon* %29 to i16**
  %32 = bitcast i32* %7 to i8*
  %33 = getelementptr inbounds %"class.v8::internal::StringComparator", %"class.v8::internal::StringComparator"* %0, i64 0, i32 1, i32 0, i32 2
  %34 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %12, i64 0, i32 0
  %35 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  br label %37

37:                                               ; preds = %160, %3
  %38 = phi i32 [ %10, %3 ], [ %105, %160 ]
  %39 = load i32, i32* %14, align 4
  %40 = load i32, i32* %13, align 4
  %41 = icmp slt i32 %39, %40
  %42 = select i1 %41, i32 %39, i32 %40
  %43 = load i8, i8* %15, align 8, !range !5
  %44 = icmp eq i8 %43, 0
  %45 = load i8, i8* %16, align 8, !range !5
  %46 = icmp ne i8 %45, 0
  br i1 %44, label %73, label %47

47:                                               ; preds = %37
  %48 = load i8*, i8** %17, align 8
  %49 = bitcast i8* %48 to i16*
  br i1 %46, label %50, label %55

50:                                               ; preds = %47
  %51 = load i8*, i8** %18, align 8
  %52 = sext i32 %42 to i64
  %53 = call i32 @bcmp(i8* %48, i8* %51, i64 %52) #6
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %102, label %161

55:                                               ; preds = %47
  %56 = sext i32 %42 to i64
  %57 = getelementptr inbounds i8, i8* %48, i64 %56
  %58 = icmp sgt i32 %42, 0
  br i1 %58, label %59, label %102

59:                                               ; preds = %55
  %60 = load i16*, i16** %19, align 8
  br label %61

61:                                               ; preds = %69, %59
  %62 = phi i8* [ %70, %69 ], [ %48, %59 ]
  %63 = phi i16* [ %71, %69 ], [ %60, %59 ]
  %64 = load i8, i8* %62, align 1
  %65 = zext i8 %64 to i32
  %66 = load i16, i16* %63, align 2
  %67 = zext i16 %66 to i32
  %68 = icmp eq i32 %65, %67
  br i1 %68, label %69, label %161

69:                                               ; preds = %61
  %70 = getelementptr inbounds i8, i8* %62, i64 1
  %71 = getelementptr inbounds i16, i16* %63, i64 1
  %72 = icmp ult i8* %70, %57
  br i1 %72, label %61, label %102

73:                                               ; preds = %37
  br i1 %46, label %74, label %94

74:                                               ; preds = %73
  %75 = load i16*, i16** %20, align 8
  %76 = sext i32 %42 to i64
  %77 = getelementptr inbounds i16, i16* %75, i64 %76
  %78 = icmp sgt i32 %42, 0
  %79 = bitcast i16* %75 to i8*
  br i1 %78, label %80, label %102

80:                                               ; preds = %74
  %81 = load i8*, i8** %18, align 8
  br label %82

82:                                               ; preds = %90, %80
  %83 = phi i16* [ %91, %90 ], [ %75, %80 ]
  %84 = phi i8* [ %92, %90 ], [ %81, %80 ]
  %85 = load i16, i16* %83, align 2
  %86 = zext i16 %85 to i32
  %87 = load i8, i8* %84, align 1
  %88 = zext i8 %87 to i32
  %89 = icmp eq i32 %86, %88
  br i1 %89, label %90, label %161

90:                                               ; preds = %82
  %91 = getelementptr inbounds i16, i16* %83, i64 1
  %92 = getelementptr inbounds i8, i8* %84, i64 1
  %93 = icmp ult i16* %91, %77
  br i1 %93, label %82, label %102

94:                                               ; preds = %73
  %95 = load i8*, i8** %17, align 8
  %96 = load i8*, i8** %18, align 8
  %97 = sext i32 %42 to i64
  %98 = shl nsw i64 %97, 1
  %99 = call i32 @bcmp(i8* %95, i8* %96, i64 %98) #6
  %100 = icmp eq i32 %99, 0
  %101 = bitcast i8* %95 to i16*
  br i1 %100, label %102, label %161

102:                                              ; preds = %69, %90, %74, %55, %50, %94
  %103 = phi i16* [ %75, %74 ], [ %49, %55 ], [ %49, %50 ], [ %101, %94 ], [ %75, %90 ], [ %49, %69 ]
  %104 = phi i8* [ %79, %74 ], [ %48, %55 ], [ %48, %50 ], [ %95, %94 ], [ %79, %90 ], [ %48, %69 ]
  %105 = sub nsw i32 %38, %42
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %161, label %107

107:                                              ; preds = %102
  %108 = icmp sgt i32 %40, %39
  br i1 %108, label %109, label %117

109:                                              ; preds = %107
  %110 = sext i32 %42 to i64
  br i1 %44, label %113, label %111

111:                                              ; preds = %109
  %112 = getelementptr inbounds i8, i8* %104, i64 %110
  store i8* %112, i8** %22, align 8
  br label %115

113:                                              ; preds = %109
  %114 = getelementptr inbounds i16, i16* %103, i64 %110
  store i16* %114, i16** %23, align 8
  br label %115

115:                                              ; preds = %113, %111
  %116 = sub nsw i32 %40, %42
  store i32 %116, i32* %13, align 4
  br label %131

117:                                              ; preds = %107
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #6
  store i32 0, i32* %5, align 4
  %118 = load i32, i32* %25, align 8
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %122, label %120

120:                                              ; preds = %117
  %121 = call i64 @_ZN2v88internal18ConsStringIterator8ContinueEPi(%"class.v8::internal::ConsStringIterator"* %26, i32* nonnull %5) #6
  br label %122

122:                                              ; preds = %120, %117
  %123 = phi i64 [ %121, %120 ], [ 0, %117 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 16, i1 false) #6, !alias.scope !12
  %124 = call i64 @_ZN2v88internal6String9VisitFlatINS0_16StringComparator5StateEEENS0_10ConsStringEPT_S1_iRKNS0_31SharedStringAccessGuardIfNeededE(%"class.v8::internal::StringComparator::State"* %11, i64 %123, i32 0, %"class.v8::internal::SharedStringAccessGuardIfNeeded"* nonnull dereferenceable(16) %4) #6
  %125 = load i8, i8* %27, align 8, !range !5
  %126 = icmp eq i8 %125, 0
  br i1 %126, label %129, label %127

127:                                              ; preds = %122
  %128 = load %"class.v8::base::SharedMutex"*, %"class.v8::base::SharedMutex"** %28, align 8
  call void @_ZN2v84base11SharedMutex12UnlockSharedEv(%"class.v8::base::SharedMutex"* %128) #6
  br label %129

129:                                              ; preds = %127, %122
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #6
  %130 = load i32, i32* %14, align 4
  br label %131

131:                                              ; preds = %115, %129
  %132 = phi i32 [ %39, %115 ], [ %130, %129 ]
  %133 = icmp eq i32 %132, %42
  br i1 %133, label %147, label %134

134:                                              ; preds = %131
  %135 = load i8, i8* %16, align 8, !range !5
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %141, label %137

137:                                              ; preds = %134
  %138 = load i8*, i8** %30, align 8
  %139 = sext i32 %42 to i64
  %140 = getelementptr inbounds i8, i8* %138, i64 %139
  store i8* %140, i8** %30, align 8
  br label %145

141:                                              ; preds = %134
  %142 = load i16*, i16** %31, align 8
  %143 = sext i32 %42 to i64
  %144 = getelementptr inbounds i16, i16* %142, i64 %143
  store i16* %144, i16** %31, align 8
  br label %145

145:                                              ; preds = %141, %137
  %146 = sub nsw i32 %132, %42
  store i32 %146, i32* %14, align 4
  br label %160

147:                                              ; preds = %131
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #6
  store i32 0, i32* %7, align 4
  %148 = load i32, i32* %33, align 8
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %152, label %150

150:                                              ; preds = %147
  %151 = call i64 @_ZN2v88internal18ConsStringIterator8ContinueEPi(%"class.v8::internal::ConsStringIterator"* %34, i32* nonnull %7) #6
  br label %152

152:                                              ; preds = %150, %147
  %153 = phi i64 [ %151, %150 ], [ 0, %147 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 16, i1 false) #6, !alias.scope !15
  %154 = call i64 @_ZN2v88internal6String9VisitFlatINS0_16StringComparator5StateEEENS0_10ConsStringEPT_S1_iRKNS0_31SharedStringAccessGuardIfNeededE(%"class.v8::internal::StringComparator::State"* %12, i64 %153, i32 0, %"class.v8::internal::SharedStringAccessGuardIfNeeded"* nonnull dereferenceable(16) %6) #6
  %155 = load i8, i8* %35, align 8, !range !5
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %159, label %157

157:                                              ; preds = %152
  %158 = load %"class.v8::base::SharedMutex"*, %"class.v8::base::SharedMutex"** %36, align 8
  call void @_ZN2v84base11SharedMutex12UnlockSharedEv(%"class.v8::base::SharedMutex"* %158) #6
  br label %159

159:                                              ; preds = %157, %152
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #6
  br label %160

160:                                              ; preds = %159, %145
  br label %37

161:                                              ; preds = %94, %102, %50, %61, %82
  %162 = phi i1 [ false, %82 ], [ false, %61 ], [ false, %94 ], [ true, %102 ], [ false, %50 ]
  ret i1 %162
}

declare void @_ZN2v88internal18ConsStringIterator10InitializeENS0_10ConsStringEi(%"class.v8::internal::ConsStringIterator"*, i64, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @_ZN2v88internal18ConsStringIterator8ContinueEPi(%"class.v8::internal::ConsStringIterator"*, i32*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN2v88internal6String9VisitFlatINS0_16StringComparator5StateEEENS0_10ConsStringEPT_S1_iRKNS0_31SharedStringAccessGuardIfNeededE(%"class.v8::internal::StringComparator::State"*, i64, i32, %"class.v8::internal::SharedStringAccessGuardIfNeeded"* dereferenceable(16)) local_unnamed_addr #3 comdat align 2 {
  %5 = add i64 %1, 7
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  br label %8

8:                                                ; preds = %127, %4
  %9 = phi i64 [ %1, %4 ], [ %133, %127 ]
  %10 = phi i32 [ %2, %4 ], [ %128, %127 ]
  %11 = and i64 %9, -4294967296
  %12 = add i64 %9, -1
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = zext i32 %14 to i64
  %16 = or i64 %11, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load atomic i16, i16* %18 monotonic, align 2
  %20 = and i16 %19, 15
  %21 = zext i16 %20 to i32
  switch i32 %21, label %126 [
    i32 8, label %22
    i32 0, label %31
    i32 10, label %41
    i32 2, label %80
    i32 11, label %120
    i32 3, label %120
    i32 9, label %134
    i32 1, label %134
    i32 13, label %127
    i32 5, label %127
  ]

22:                                               ; preds = %8
  %23 = add i64 %9, 11
  %24 = inttoptr i64 %23 to i8*
  %25 = sext i32 %10 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  %27 = sub nsw i32 %7, %2
  %28 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 1
  store i8 1, i8* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 3, i32 0
  store i8* %26, i8** %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 2
  store i32 %27, i32* %30, align 4
  br label %134

31:                                               ; preds = %8
  %32 = add i64 %9, 11
  %33 = inttoptr i64 %32 to i16*
  %34 = sext i32 %10 to i64
  %35 = getelementptr inbounds i16, i16* %33, i64 %34
  %36 = sub nsw i32 %7, %2
  %37 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 1
  store i8 0, i8* %37, align 8
  %38 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 3
  %39 = bitcast %union.anon* %38 to i16**
  store i16* %35, i16** %39, align 8
  %40 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 2
  store i32 %36, i32* %40, align 4
  br label %134

41:                                               ; preds = %8
  %42 = inttoptr i64 %12 to i32*
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = zext i32 %43 to i64
  %45 = or i64 %11, %44
  %46 = add i64 %45, 7
  %47 = inttoptr i64 %46 to i16*
  %48 = load atomic i16, i16* %47 monotonic, align 2
  %49 = and i16 %48, 16
  %50 = icmp eq i16 %49, 0
  %51 = add i64 %9, 11
  %52 = inttoptr i64 %51 to %"class.v8::String::ExternalOneByteStringResource"**
  br i1 %50, label %65, label %53

53:                                               ; preds = %41
  %54 = load %"class.v8::String::ExternalOneByteStringResource"*, %"class.v8::String::ExternalOneByteStringResource"** %52, align 1
  %55 = getelementptr inbounds %"class.v8::String::ExternalOneByteStringResource", %"class.v8::String::ExternalOneByteStringResource"* %54, i64 0, i32 0
  %56 = bitcast %"class.v8::String::ExternalOneByteStringResource"* %54 to i1 (%"class.v8::String::ExternalStringResourceBase"*)***
  %57 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)**, i1 (%"class.v8::String::ExternalStringResourceBase"*)*** %56, align 8
  %58 = getelementptr inbounds i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %57, i64 2
  %59 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %58, align 8
  %60 = tail call zeroext i1 %59(%"class.v8::String::ExternalStringResourceBase"* %55) #6
  br i1 %60, label %61, label %65

61:                                               ; preds = %53
  %62 = load %"class.v8::String::ExternalOneByteStringResource"*, %"class.v8::String::ExternalOneByteStringResource"** %52, align 1
  tail call void @_ZNK2v86String29ExternalOneByteStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalOneByteStringResource"* %62) #6
  %63 = getelementptr inbounds %"class.v8::String::ExternalOneByteStringResource", %"class.v8::String::ExternalOneByteStringResource"* %62, i64 0, i32 1
  %64 = load i8*, i8** %63, align 8
  br label %72

65:                                               ; preds = %41, %53
  %66 = load %"class.v8::String::ExternalOneByteStringResource"*, %"class.v8::String::ExternalOneByteStringResource"** %52, align 1
  %67 = bitcast %"class.v8::String::ExternalOneByteStringResource"* %66 to i8* (%"class.v8::String::ExternalOneByteStringResource"*)***
  %68 = load i8* (%"class.v8::String::ExternalOneByteStringResource"*)**, i8* (%"class.v8::String::ExternalOneByteStringResource"*)*** %67, align 8
  %69 = getelementptr inbounds i8* (%"class.v8::String::ExternalOneByteStringResource"*)*, i8* (%"class.v8::String::ExternalOneByteStringResource"*)** %68, i64 6
  %70 = load i8* (%"class.v8::String::ExternalOneByteStringResource"*)*, i8* (%"class.v8::String::ExternalOneByteStringResource"*)** %69, align 8
  %71 = tail call i8* %70(%"class.v8::String::ExternalOneByteStringResource"* %66) #6
  br label %72

72:                                               ; preds = %61, %65
  %73 = phi i8* [ %64, %61 ], [ %71, %65 ]
  %74 = sext i32 %10 to i64
  %75 = getelementptr inbounds i8, i8* %73, i64 %74
  %76 = sub nsw i32 %7, %2
  %77 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 1
  store i8 1, i8* %77, align 8
  %78 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 3, i32 0
  store i8* %75, i8** %78, align 8
  %79 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 2
  store i32 %76, i32* %79, align 4
  br label %134

80:                                               ; preds = %8
  %81 = inttoptr i64 %12 to i32*
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = zext i32 %82 to i64
  %84 = or i64 %11, %83
  %85 = add i64 %84, 7
  %86 = inttoptr i64 %85 to i16*
  %87 = load atomic i16, i16* %86 monotonic, align 2
  %88 = and i16 %87, 16
  %89 = icmp eq i16 %88, 0
  %90 = add i64 %9, 11
  %91 = inttoptr i64 %90 to %"class.v8::String::ExternalStringResource"**
  br i1 %89, label %104, label %92

92:                                               ; preds = %80
  %93 = load %"class.v8::String::ExternalStringResource"*, %"class.v8::String::ExternalStringResource"** %91, align 1
  %94 = getelementptr inbounds %"class.v8::String::ExternalStringResource", %"class.v8::String::ExternalStringResource"* %93, i64 0, i32 0
  %95 = bitcast %"class.v8::String::ExternalStringResource"* %93 to i1 (%"class.v8::String::ExternalStringResourceBase"*)***
  %96 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)**, i1 (%"class.v8::String::ExternalStringResourceBase"*)*** %95, align 8
  %97 = getelementptr inbounds i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %96, i64 2
  %98 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %97, align 8
  %99 = tail call zeroext i1 %98(%"class.v8::String::ExternalStringResourceBase"* %94) #6
  br i1 %99, label %100, label %104

100:                                              ; preds = %92
  %101 = load %"class.v8::String::ExternalStringResource"*, %"class.v8::String::ExternalStringResource"** %91, align 1
  tail call void @_ZNK2v86String22ExternalStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalStringResource"* %101) #6
  %102 = getelementptr inbounds %"class.v8::String::ExternalStringResource", %"class.v8::String::ExternalStringResource"* %101, i64 0, i32 1
  %103 = load i16*, i16** %102, align 8
  br label %111

104:                                              ; preds = %80, %92
  %105 = load %"class.v8::String::ExternalStringResource"*, %"class.v8::String::ExternalStringResource"** %91, align 1
  %106 = bitcast %"class.v8::String::ExternalStringResource"* %105 to i16* (%"class.v8::String::ExternalStringResource"*)***
  %107 = load i16* (%"class.v8::String::ExternalStringResource"*)**, i16* (%"class.v8::String::ExternalStringResource"*)*** %106, align 8
  %108 = getelementptr inbounds i16* (%"class.v8::String::ExternalStringResource"*)*, i16* (%"class.v8::String::ExternalStringResource"*)** %107, i64 6
  %109 = load i16* (%"class.v8::String::ExternalStringResource"*)*, i16* (%"class.v8::String::ExternalStringResource"*)** %108, align 8
  %110 = tail call i16* %109(%"class.v8::String::ExternalStringResource"* %105) #6
  br label %111

111:                                              ; preds = %100, %104
  %112 = phi i16* [ %103, %100 ], [ %110, %104 ]
  %113 = sext i32 %10 to i64
  %114 = getelementptr inbounds i16, i16* %112, i64 %113
  %115 = sub nsw i32 %7, %2
  %116 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 1
  store i8 0, i8* %116, align 8
  %117 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 3
  %118 = bitcast %union.anon* %117 to i16**
  store i16* %114, i16** %118, align 8
  %119 = getelementptr inbounds %"class.v8::internal::StringComparator::State", %"class.v8::internal::StringComparator::State"* %0, i64 0, i32 2
  store i32 %115, i32* %119, align 4
  br label %134

120:                                              ; preds = %8, %8
  %121 = add i64 %9, 15
  %122 = inttoptr i64 %121 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = ashr i32 %123, 1
  %125 = add nsw i32 %124, %10
  br label %127

126:                                              ; preds = %8
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

127:                                              ; preds = %8, %8, %120
  %128 = phi i32 [ %125, %120 ], [ %10, %8 ], [ %10, %8 ]
  %129 = add i64 %9, 11
  %130 = inttoptr i64 %129 to i32*
  %131 = load i32, i32* %130, align 4
  %132 = zext i32 %131 to i64
  %133 = or i64 %11, %132
  br label %8

134:                                              ; preds = %8, %8, %111, %72, %31, %22
  %135 = phi i64 [ 0, %22 ], [ 0, %31 ], [ 0, %72 ], [ 0, %111 ], [ %9, %8 ], [ %9, %8 ]
  ret i64 %135
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #4

declare void @_ZNK2v86String29ExternalOneByteStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalOneByteStringResource"*) local_unnamed_addr #2

declare void @_ZNK2v86String22ExternalStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalStringResource"*) local_unnamed_addr #2

declare void @_ZN2v84base11SharedMutex12UnlockSharedEv(%"class.v8::base::SharedMutex"*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN2v88internal31SharedStringAccessGuardIfNeeded9NotNeededEv: argument 0"}
!4 = distinct !{!4, !"_ZN2v88internal31SharedStringAccessGuardIfNeeded9NotNeededEv"}
!5 = !{i8 0, i8 2}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN2v88internal31SharedStringAccessGuardIfNeeded9NotNeededEv: argument 0"}
!8 = distinct !{!8, !"_ZN2v88internal31SharedStringAccessGuardIfNeeded9NotNeededEv"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN2v88internal31SharedStringAccessGuardIfNeeded9NotNeededEv: argument 0"}
!11 = distinct !{!11, !"_ZN2v88internal31SharedStringAccessGuardIfNeeded9NotNeededEv"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN2v88internal31SharedStringAccessGuardIfNeeded9NotNeededEv: argument 0"}
!14 = distinct !{!14, !"_ZN2v88internal31SharedStringAccessGuardIfNeeded9NotNeededEv"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN2v88internal31SharedStringAccessGuardIfNeeded9NotNeededEv: argument 0"}
!17 = distinct !{!17, !"_ZN2v88internal31SharedStringAccessGuardIfNeeded9NotNeededEv"}
