; ModuleID = '../../services/viz/public/cpp/compositing/filter_operation_mojom_traits.cc'
source_filename = "../../services/viz/public/cpp/compositing/filter_operation_mojom_traits.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp, [20 x float], i32, [4 x i8], %"class.std::__1::vector", i32, [4 x i8] }>
%"class.gfx::Point" = type { i32, i32 }
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.1, i32, %"class.absl::optional", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.1 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gfx::Rect"* }
%"class.viz::mojom::internal::FilterOperation_Data" = type { %"struct.mojo::internal::StructHeader", i32, float, float, i32, %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer.3", %"struct.mojo::internal::Pointer.4", i32, i32, %"struct.mojo::internal::Pointer.5" }
%"struct.mojo::internal::StructHeader" = type { i32, i32 }
%"struct.mojo::internal::Pointer" = type { i64 }
%"struct.mojo::internal::Pointer.3" = type { i64 }
%"struct.mojo::internal::Pointer.4" = type { i64 }
%"struct.mojo::internal::Pointer.5" = type { i64 }
%"class.mojo::Message" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::internal::Buffer", %"class.std::__1::vector.6", %"class.std::__1::vector.14", %"class.mojo::ConnectionGroup::Ref"*, i8, i8, i8* }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessageHandle" }
%"class.mojo::MessageHandle" = type { i64 }
%"class.mojo::internal::Buffer" = type { %"class.mojo::MessageHandle", i64, i8*, i64, i64 }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.mojo::ScopedHandleBase.8"*, %"class.mojo::ScopedHandleBase.8"*, %"class.std::__1::__compressed_pair.9" }
%"class.mojo::ScopedHandleBase.8" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.mojo::ScopedHandleBase.8"* }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.std::__1::__compressed_pair.16" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.mojo::ScopedInterfaceEndpointHandle"* }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.21 }
%class.scoped_refptr.21 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.24, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.26", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.22 }
%class.scoped_refptr.22 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.23", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.23" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.24 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.25" }>
%"class.base::RefCountedThreadSafe.25" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.26" = type { %"struct.std::__1::__atomic_base.27" }
%"struct.std::__1::__atomic_base.27" = type { %"struct.std::__1::__atomic_base.28" }
%"struct.std::__1::__atomic_base.28" = type { %"struct.std::__1::__cxx_atomic_impl.29" }
%"struct.std::__1::__cxx_atomic_impl.29" = type { %"struct.std::__1::__cxx_atomic_base_impl.30" }
%"struct.std::__1::__cxx_atomic_base_impl.30" = type { i32 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.33 }
%union.anon.33 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.viz::mojom::internal::PaintFilter_Data" = type { %"struct.mojo::internal::StructHeader", %"struct.mojo::internal::Pointer.37" }
%"struct.mojo::internal::Pointer.37" = type { i64 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"class.mojo::internal::Array_Data.38" = type { %"struct.mojo::internal::ArrayHeader" }
%"struct.mojo::internal::ArrayHeader" = type { i32, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZN4mojo8internal15ArraySerializerINS_13ArrayDataViewIN3gfx5mojom12RectDataViewEEENSt3__16vectorINS3_4RectENS7_9allocatorIS9_EEEENS0_13ArrayIteratorINS_11ArrayTraitsISC_EESC_Lb0EEEvE19DeserializeElementsEPNS0_10Array_DataINS0_7PointerINS4_8internal9Rect_DataEEEEEPSC_PNS_7MessageE = comdat any

@.str = private unnamed_addr constant [29 x i8] c"../../base/containers/span.h\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"Extent == dynamic_extent || Extent == count\00", align 1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN4mojo12StructTraitsIN3viz5mojom23FilterOperationDataViewEN2cc15FilterOperationEE4typeERKS5_(%"class.cc::FilterOperation"* nocapture readonly dereferenceable(152)) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp ult i32 %3, 14
  %5 = select i1 %4, i32 %3, i32 14
  ret i32 %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4mojo12StructTraitsIN3viz5mojom23FilterOperationDataViewEN2cc15FilterOperationEE4ReadES3_PS5_(%"class.viz::mojom::internal::FilterOperation_Data"*, %"class.mojo::Message"*, %"class.cc::FilterOperation"*) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %class.sk_sp, align 8
  %6 = alloca %"class.std::__1::vector", align 8
  %7 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 1
  switch i32 %8, label %240 [
    i32 0, label %9
    i32 1, label %9
    i32 2, label %9
    i32 3, label %9
    i32 4, label %9
    i32 5, label %9
    i32 6, label %9
    i32 7, label %9
    i32 8, label %16
    i32 9, label %28
    i32 10, label %60
    i32 11, label %179
    i32 12, label %192
    i32 13, label %9
  ]

9:                                                ; preds = %3, %3, %3, %3, %3, %3, %3, %3, %3
  %10 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 0
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 2
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 1
  %15 = bitcast float* %14 to i32*
  store i32 %13, i32* %15, align 4
  br label %281

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 0
  store i32 8, i32* %17, align 8
  %18 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 2
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 1
  %22 = bitcast float* %21 to i32*
  store i32 %20, i32* %22, align 4
  %23 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 9
  %24 = load i32, i32* %23, align 1
  %25 = icmp ult i32 %24, 4
  br i1 %25, label %26, label %281

26:                                               ; preds = %16
  %27 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 10
  store i32 %24, i32* %27, align 8
  br label %281

28:                                               ; preds = %3
  %29 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 0
  store i32 9, i32* %29, align 8
  %30 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 2
  %31 = bitcast float* %30 to i32*
  %32 = load i32, i32* %31, align 1
  %33 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 1
  %34 = bitcast float* %33 to i32*
  store i32 %32, i32* %34, align 4
  %35 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 5
  %36 = getelementptr inbounds %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer"* %35, i64 0, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = icmp eq i64 %37, 0
  %39 = bitcast %"struct.mojo::internal::Pointer"* %35 to i8*
  %40 = getelementptr inbounds i8, i8* %39, i64 %37
  br i1 %38, label %51, label %41

41:                                               ; preds = %28
  %42 = getelementptr inbounds i8, i8* %40, i64 8
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 1
  %45 = getelementptr inbounds i8, i8* %40, i64 12
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = zext i32 %47 to i64
  %49 = shl nuw i64 %48, 32
  %50 = zext i32 %44 to i64
  br label %51

51:                                               ; preds = %28, %41
  %52 = phi i64 [ 0, %28 ], [ %49, %41 ]
  %53 = phi i64 [ 0, %28 ], [ %50, %41 ]
  %54 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 3
  %55 = bitcast %"class.gfx::Point"* %54 to i64*
  %56 = or i64 %53, %52
  store i64 %56, i64* %55, align 4
  %57 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 4
  %58 = load i32, i32* %57, align 1
  %59 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 4
  store i32 %58, i32* %59, align 4
  br label %281

60:                                               ; preds = %3
  %61 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 0
  store i32 10, i32* %61, align 8
  %62 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 7
  %63 = getelementptr inbounds %"struct.mojo::internal::Pointer.4", %"struct.mojo::internal::Pointer.4"* %62, i64 0, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = icmp eq i64 %64, 0
  %66 = bitcast %"struct.mojo::internal::Pointer.4"* %62 to i8*
  %67 = getelementptr inbounds i8, i8* %66, i64 %64
  %68 = icmp eq i8* %67, null
  %69 = or i1 %65, %68
  br i1 %69, label %281, label %70

70:                                               ; preds = %60
  %71 = getelementptr inbounds i8, i8* %67, i64 8
  %72 = getelementptr inbounds i8, i8* %67, i64 4
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = icmp eq i32 %74, 20
  br i1 %75, label %79, label %76

76:                                               ; preds = %70
  %77 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %77) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 287, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0)) #8
  %78 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %77) #8
  br label %79

79:                                               ; preds = %70, %76
  %80 = bitcast i8* %71 to i32*
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 0
  %83 = bitcast float* %82 to i32*
  store i32 %81, i32* %83, align 4
  %84 = getelementptr inbounds i8, i8* %71, i64 4
  %85 = bitcast i8* %84 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 1
  %88 = bitcast float* %87 to i32*
  store i32 %86, i32* %88, align 4
  %89 = getelementptr inbounds i8, i8* %71, i64 8
  %90 = bitcast i8* %89 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 2
  %93 = bitcast float* %92 to i32*
  store i32 %91, i32* %93, align 4
  %94 = getelementptr inbounds i8, i8* %71, i64 12
  %95 = bitcast i8* %94 to i32*
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 3
  %98 = bitcast float* %97 to i32*
  store i32 %96, i32* %98, align 4
  %99 = getelementptr inbounds i8, i8* %71, i64 16
  %100 = bitcast i8* %99 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 4
  %103 = bitcast float* %102 to i32*
  store i32 %101, i32* %103, align 4
  %104 = getelementptr inbounds i8, i8* %71, i64 20
  %105 = bitcast i8* %104 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 5
  %108 = bitcast float* %107 to i32*
  store i32 %106, i32* %108, align 4
  %109 = getelementptr inbounds i8, i8* %71, i64 24
  %110 = bitcast i8* %109 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 6
  %113 = bitcast float* %112 to i32*
  store i32 %111, i32* %113, align 4
  %114 = getelementptr inbounds i8, i8* %71, i64 28
  %115 = bitcast i8* %114 to i32*
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 7
  %118 = bitcast float* %117 to i32*
  store i32 %116, i32* %118, align 4
  %119 = getelementptr inbounds i8, i8* %71, i64 32
  %120 = bitcast i8* %119 to i32*
  %121 = load i32, i32* %120, align 4
  %122 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 8
  %123 = bitcast float* %122 to i32*
  store i32 %121, i32* %123, align 4
  %124 = getelementptr inbounds i8, i8* %71, i64 36
  %125 = bitcast i8* %124 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 9
  %128 = bitcast float* %127 to i32*
  store i32 %126, i32* %128, align 4
  %129 = getelementptr inbounds i8, i8* %71, i64 40
  %130 = bitcast i8* %129 to i32*
  %131 = load i32, i32* %130, align 4
  %132 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 10
  %133 = bitcast float* %132 to i32*
  store i32 %131, i32* %133, align 4
  %134 = getelementptr inbounds i8, i8* %71, i64 44
  %135 = bitcast i8* %134 to i32*
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 11
  %138 = bitcast float* %137 to i32*
  store i32 %136, i32* %138, align 4
  %139 = getelementptr inbounds i8, i8* %71, i64 48
  %140 = bitcast i8* %139 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 12
  %143 = bitcast float* %142 to i32*
  store i32 %141, i32* %143, align 4
  %144 = getelementptr inbounds i8, i8* %71, i64 52
  %145 = bitcast i8* %144 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 13
  %148 = bitcast float* %147 to i32*
  store i32 %146, i32* %148, align 4
  %149 = getelementptr inbounds i8, i8* %71, i64 56
  %150 = bitcast i8* %149 to i32*
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 14
  %153 = bitcast float* %152 to i32*
  store i32 %151, i32* %153, align 4
  %154 = getelementptr inbounds i8, i8* %71, i64 60
  %155 = bitcast i8* %154 to i32*
  %156 = load i32, i32* %155, align 4
  %157 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 15
  %158 = bitcast float* %157 to i32*
  store i32 %156, i32* %158, align 4
  %159 = getelementptr inbounds i8, i8* %71, i64 64
  %160 = bitcast i8* %159 to i32*
  %161 = load i32, i32* %160, align 4
  %162 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 16
  %163 = bitcast float* %162 to i32*
  store i32 %161, i32* %163, align 4
  %164 = getelementptr inbounds i8, i8* %71, i64 68
  %165 = bitcast i8* %164 to i32*
  %166 = load i32, i32* %165, align 4
  %167 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 17
  %168 = bitcast float* %167 to i32*
  store i32 %166, i32* %168, align 4
  %169 = getelementptr inbounds i8, i8* %71, i64 72
  %170 = bitcast i8* %169 to i32*
  %171 = load i32, i32* %170, align 4
  %172 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 18
  %173 = bitcast float* %172 to i32*
  store i32 %171, i32* %173, align 4
  %174 = getelementptr inbounds i8, i8* %71, i64 76
  %175 = bitcast i8* %174 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 6, i64 19
  %178 = bitcast float* %177 to i32*
  store i32 %176, i32* %178, align 4
  br label %281

179:                                              ; preds = %3
  %180 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 0
  store i32 11, i32* %180, align 8
  %181 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 2
  %182 = load float, float* %181, align 1
  %183 = fcmp olt float %182, 0.000000e+00
  br i1 %183, label %281, label %184

184:                                              ; preds = %179
  %185 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 8
  %186 = load i32, i32* %185, align 1
  %187 = icmp slt i32 %186, 0
  br i1 %187, label %281, label %188

188:                                              ; preds = %184
  %189 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 1
  store float %182, float* %189, align 4
  %190 = load i32, i32* %185, align 1
  %191 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 7
  store i32 %190, i32* %191, align 8
  br label %281

192:                                              ; preds = %3
  %193 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 0
  store i32 12, i32* %193, align 8
  %194 = bitcast %class.sk_sp* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %194) #8
  %195 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %5, i64 0, i32 0
  store %"class.cc::PaintFilter"* null, %"class.cc::PaintFilter"** %195, align 8
  %196 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 6
  %197 = getelementptr inbounds %"struct.mojo::internal::Pointer.3", %"struct.mojo::internal::Pointer.3"* %196, i64 0, i32 0
  %198 = load i64, i64* %197, align 8
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %208, label %200

200:                                              ; preds = %192
  %201 = bitcast %"struct.mojo::internal::Pointer.3"* %196 to i8*
  %202 = getelementptr inbounds i8, i8* %201, i64 %198
  %203 = bitcast i8* %202 to %"class.viz::mojom::internal::PaintFilter_Data"*
  %204 = call zeroext i1 @_ZN4mojo12StructTraitsIN3viz5mojom19PaintFilterDataViewE5sk_spIN2cc11PaintFilterEEE4ReadES3_PS7_(%"class.viz::mojom::internal::PaintFilter_Data"* nonnull %203, %"class.mojo::Message"* %1, %class.sk_sp* nonnull %5) #8
  br i1 %204, label %205, label %225

205:                                              ; preds = %200
  %206 = bitcast %class.sk_sp* %5 to i64*
  %207 = load i64, i64* %206, align 8
  br label %208

208:                                              ; preds = %192, %205
  %209 = phi i64 [ %207, %205 ], [ 0, %192 ]
  store %"class.cc::PaintFilter"* null, %"class.cc::PaintFilter"** %195, align 8
  %210 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 5
  %211 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %210, i64 0, i32 0
  %212 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %211, align 8
  %213 = bitcast %class.sk_sp* %210 to i64*
  store i64 %209, i64* %213, align 8
  %214 = icmp eq %"class.cc::PaintFilter"* %212, null
  br i1 %214, label %225, label %215

215:                                              ; preds = %208
  %216 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %212, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %217 = atomicrmw add i32* %216, i32 -1 acq_rel
  %218 = icmp eq i32 %217, 1
  br i1 %218, label %219, label %225

219:                                              ; preds = %215
  %220 = bitcast %"class.cc::PaintFilter"* %212 to %class.SkRefCntBase*
  %221 = bitcast %"class.cc::PaintFilter"* %212 to void (%class.SkRefCntBase*)***
  %222 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %221, align 8
  %223 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %222, i64 2
  %224 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %223, align 8
  call void %224(%class.SkRefCntBase* nonnull %220) #8
  br label %225

225:                                              ; preds = %208, %215, %219, %200
  %226 = phi i1 [ false, %200 ], [ true, %219 ], [ true, %215 ], [ true, %208 ]
  %227 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %195, align 8
  %228 = icmp eq %"class.cc::PaintFilter"* %227, null
  br i1 %228, label %239, label %229

229:                                              ; preds = %225
  %230 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %227, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %231 = atomicrmw add i32* %230, i32 -1 acq_rel
  %232 = icmp eq i32 %231, 1
  br i1 %232, label %233, label %239

233:                                              ; preds = %229
  %234 = bitcast %"class.cc::PaintFilter"* %227 to %class.SkRefCntBase*
  %235 = bitcast %"class.cc::PaintFilter"* %227 to void (%class.SkRefCntBase*)***
  %236 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %235, align 8
  %237 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %236, i64 2
  %238 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %237, align 8
  call void %238(%class.SkRefCntBase* nonnull %234) #8
  br label %239

239:                                              ; preds = %225, %229, %233
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %194) #8
  br label %281

240:                                              ; preds = %3
  %241 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 0
  store i32 14, i32* %241, align 8
  %242 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 2
  %243 = bitcast float* %242 to i32*
  %244 = load i32, i32* %243, align 1
  %245 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 1
  %246 = bitcast float* %245 to i32*
  store i32 %244, i32* %246, align 4
  %247 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 3
  %248 = bitcast float* %247 to i32*
  %249 = load i32, i32* %248, align 1
  %250 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 2
  %251 = bitcast float* %250 to i32*
  store i32 %249, i32* %251, align 8
  %252 = bitcast %"class.std::__1::vector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %252) #8
  %253 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %254 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %252, i8 0, i64 24, i1 false) #8
  %255 = getelementptr inbounds %"class.viz::mojom::internal::FilterOperation_Data", %"class.viz::mojom::internal::FilterOperation_Data"* %0, i64 0, i32 10
  %256 = getelementptr inbounds %"struct.mojo::internal::Pointer.5", %"struct.mojo::internal::Pointer.5"* %255, i64 0, i32 0
  %257 = load i64, i64* %256, align 8
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %261

259:                                              ; preds = %240
  %260 = bitcast %"class.gfx::Rect"** %254 to i64*
  store i64 0, i64* %260, align 8
  br label %266

261:                                              ; preds = %240
  %262 = bitcast %"struct.mojo::internal::Pointer.5"* %255 to i8*
  %263 = getelementptr inbounds i8, i8* %262, i64 %257
  %264 = bitcast i8* %263 to %"class.mojo::internal::Array_Data.38"*
  %265 = call zeroext i1 @_ZN4mojo8internal15ArraySerializerINS_13ArrayDataViewIN3gfx5mojom12RectDataViewEEENSt3__16vectorINS3_4RectENS7_9allocatorIS9_EEEENS0_13ArrayIteratorINS_11ArrayTraitsISC_EESC_Lb0EEEvE19DeserializeElementsEPNS0_10Array_DataINS0_7PointerINS4_8internal9Rect_DataEEEEEPSC_PNS_7MessageE(%"class.mojo::internal::Array_Data.38"* nonnull %264, %"class.std::__1::vector"* nonnull %6, %"class.mojo::Message"* %1) #8
  br i1 %265, label %266, label %272

266:                                              ; preds = %259, %261
  %267 = getelementptr inbounds %"class.cc::FilterOperation", %"class.cc::FilterOperation"* %2, i64 0, i32 9
  %268 = icmp eq %"class.std::__1::vector"* %267, %6
  br i1 %268, label %272, label %269

269:                                              ; preds = %266
  %270 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %253, align 8
  %271 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %254, align 8
  call void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"* %267, %"class.gfx::Rect"* %270, %"class.gfx::Rect"* %271) #8
  br label %272

272:                                              ; preds = %269, %266, %261
  %273 = phi i1 [ false, %261 ], [ true, %266 ], [ true, %269 ]
  %274 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %253, align 8
  %275 = icmp eq %"class.gfx::Rect"* %274, null
  br i1 %275, label %280, label %276

276:                                              ; preds = %272
  %277 = ptrtoint %"class.gfx::Rect"* %274 to i64
  %278 = bitcast %"class.gfx::Rect"** %254 to i64*
  store i64 %277, i64* %278, align 8
  %279 = bitcast %"class.gfx::Rect"* %274 to i8*
  call void @_ZdlPv(i8* %279) #9
  br label %280

280:                                              ; preds = %272, %276
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %252) #8
  br label %281

281:                                              ; preds = %16, %60, %79, %179, %184, %280, %239, %188, %51, %26, %9
  %282 = phi i1 [ %273, %280 ], [ %226, %239 ], [ true, %188 ], [ true, %51 ], [ true, %26 ], [ true, %9 ], [ false, %184 ], [ false, %179 ], [ false, %16 ], [ true, %79 ], [ true, %60 ]
  ret i1 %282
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"*, %"class.gfx::Rect"*, %"class.gfx::Rect"*) local_unnamed_addr #2 comdat align 2 {
  %4 = ptrtoint %"class.gfx::Rect"* %2 to i64
  %5 = ptrtoint %"class.gfx::Rect"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 4
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"class.gfx::Rect"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 4
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"class.gfx::Rect"*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"class.gfx::Rect"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 4
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 %22
  %25 = select i1 %23, %"class.gfx::Rect"* %24, %"class.gfx::Rect"* %2
  %26 = ptrtoint %"class.gfx::Rect"* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 4
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast %"class.gfx::Rect"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #8
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 4
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast %"class.gfx::Rect"* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #8
  %42 = inttoptr i64 %35 to %"class.gfx::Rect"*
  %43 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %42, i64 %39
  %44 = ptrtoint %"class.gfx::Rect"* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %16, i64 %28
  store %"class.gfx::Rect"* %48, %"class.gfx::Rect"** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %53 = bitcast %"class.gfx::Rect"** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #9
  %55 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #8
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 1152921504606846975
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #10
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 4
  %63 = icmp ult i64 %62, 576460752303423487
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 3
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 1152921504606846975
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #10
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 1152921504606846975, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 4
  %74 = tail call i8* @_Znwm(i64 %73) #9
  %75 = bitcast i8* %74 to %"class.gfx::Rect"*
  %76 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %77 = bitcast %"class.gfx::Rect"** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %75, i64 %72
  store %"class.gfx::Rect"* %79, %"class.gfx::Rect"** %8, align 8
  %80 = bitcast %"class.gfx::Rect"** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 4
  %85 = bitcast %"class.gfx::Rect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #8
  %86 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %75, i64 %84
  %87 = ptrtoint %"class.gfx::Rect"* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare zeroext i1 @_ZN4mojo12StructTraitsIN3viz5mojom19PaintFilterDataViewE5sk_spIN2cc11PaintFilterEEE4ReadES3_PS7_(%"class.viz::mojom::internal::PaintFilter_Data"*, %"class.mojo::Message"*, %class.sk_sp*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4mojo8internal15ArraySerializerINS_13ArrayDataViewIN3gfx5mojom12RectDataViewEEENSt3__16vectorINS3_4RectENS7_9allocatorIS9_EEEENS0_13ArrayIteratorINS_11ArrayTraitsISC_EESC_Lb0EEEvE19DeserializeElementsEPNS0_10Array_DataINS0_7PointerINS4_8internal9Rect_DataEEEEEPSC_PNS_7MessageE(%"class.mojo::internal::Array_Data.38"*, %"class.std::__1::vector"*, %"class.mojo::Message"*) local_unnamed_addr #2 comdat align 2 {
  %4 = getelementptr inbounds %"class.mojo::internal::Array_Data.38", %"class.mojo::internal::Array_Data.38"* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 1
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.gfx::Rect"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 4
  %14 = icmp eq i64 %13, %6
  br i1 %14, label %38, label %15

15:                                               ; preds = %3
  %16 = icmp eq i32 %5, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %15
  %18 = shl nuw nsw i64 %6, 4
  %19 = tail call i8* @_Znwm(i64 %18) #9
  %20 = bitcast i8* %19 to %"class.gfx::Rect"*
  %21 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %20, i64 %6
  %22 = ptrtoint i8* %19 to i64
  %23 = add nsw i64 %6, -1
  %24 = getelementptr %"class.gfx::Rect", %"class.gfx::Rect"* %20, i64 %23, i32 0, i32 0
  %25 = ptrtoint i32* %24 to i64
  %26 = sub i64 16, %22
  %27 = add i64 %26, %25
  %28 = and i64 %27, -16
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %19, i8 0, i64 %28, i1 false) #8
  %29 = ptrtoint %"class.gfx::Rect"* %21 to i64
  br label %30

30:                                               ; preds = %15, %17
  %31 = phi i64 [ %29, %17 ], [ 0, %15 ]
  %32 = phi i64 [ %22, %17 ], [ 0, %15 ]
  store i64 %32, i64* %10, align 8
  store i64 %31, i64* %8, align 8
  %33 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %34 = bitcast %"class.gfx::Rect"** %33 to i64*
  store i64 %31, i64* %34, align 8
  %35 = icmp eq i64 %11, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %30
  %37 = inttoptr i64 %11 to i8*
  tail call void @_ZdlPv(i8* %37) #9
  br label %38

38:                                               ; preds = %3, %36, %30
  %39 = getelementptr inbounds %"class.mojo::internal::Array_Data.38", %"class.mojo::internal::Array_Data.38"* %0, i64 1
  %40 = load i32, i32* %4, align 1
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %99, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  br label %44

44:                                               ; preds = %42, %95
  %45 = phi i32 [ %40, %42 ], [ %96, %95 ]
  %46 = phi i64 [ 0, %42 ], [ %53, %95 ]
  %47 = getelementptr inbounds %"class.mojo::internal::Array_Data.38", %"class.mojo::internal::Array_Data.38"* %39, i64 %46
  %48 = bitcast %"class.mojo::internal::Array_Data.38"* %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = icmp eq i64 %49, 0
  %51 = bitcast %"class.mojo::internal::Array_Data.38"* %47 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 %49
  %53 = add nuw nsw i64 %46, 1
  %54 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %43, align 8
  %55 = icmp eq i8* %52, null
  %56 = or i1 %50, %55
  br i1 %56, label %95, label %57

57:                                               ; preds = %44
  %58 = getelementptr inbounds i8, i8* %52, i64 16
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 1
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %99, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds i8, i8* %52, i64 20
  %64 = bitcast i8* %63 to i32*
  %65 = load i32, i32* %64, align 1
  %66 = icmp slt i32 %65, 0
  br i1 %66, label %99, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds i8, i8* %52, i64 8
  %69 = bitcast i8* %68 to i32*
  %70 = load i32, i32* %69, align 1
  %71 = getelementptr inbounds i8, i8* %52, i64 12
  %72 = bitcast i8* %71 to i32*
  %73 = load i32, i32* %72, align 1
  %74 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %54, i64 %46, i32 0, i32 0
  store i32 %70, i32* %74, align 4
  %75 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %54, i64 %46, i32 0, i32 1
  store i32 %73, i32* %75, align 4
  %76 = icmp sgt i32 %70, 0
  %77 = icmp sgt i32 %60, 0
  %78 = and i1 %77, %76
  %79 = sub nuw nsw i32 2147483647, %70
  %80 = icmp ult i32 %79, %60
  %81 = and i1 %80, %78
  %82 = select i1 %81, i32 %79, i32 %60
  %83 = icmp sgt i32 %82, 0
  %84 = select i1 %83, i32 %82, i32 0
  %85 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %54, i64 %46, i32 1, i32 0
  store i32 %84, i32* %85, align 4
  %86 = icmp sgt i32 %73, 0
  %87 = sub nuw nsw i32 2147483647, %73
  %88 = icmp ult i32 %87, %65
  %89 = and i1 %86, %88
  %90 = select i1 %89, i32 %87, i32 %65
  %91 = icmp sgt i32 %90, 0
  %92 = select i1 %91, i32 %90, i32 0
  %93 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %54, i64 %46, i32 1, i32 1
  store i32 %92, i32* %93, align 4
  %94 = load i32, i32* %4, align 1
  br label %95

95:                                               ; preds = %44, %67
  %96 = phi i32 [ %45, %44 ], [ %94, %67 ]
  %97 = zext i32 %96 to i64
  %98 = icmp ult i64 %53, %97
  br i1 %98, label %44, label %99

99:                                               ; preds = %95, %57, %62, %38
  %100 = phi i1 [ true, %38 ], [ false, %62 ], [ false, %57 ], [ true, %95 ]
  ret i1 %100
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
