; ModuleID = '../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/SmallPtrSet.cpp'
source_filename = "../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/SmallPtrSet.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.llvm::SmallPtrSetImplBase" = type <{ i8**, i8**, i32, i32, i32, [4 x i8] }>

@_ZN4llvm19SmallPtrSetImplBaseC1EPPKvRKS0_ = hidden unnamed_addr alias void (%"class.llvm::SmallPtrSetImplBase"*, i8**, %"class.llvm::SmallPtrSetImplBase"*), void (%"class.llvm::SmallPtrSetImplBase"*, i8**, %"class.llvm::SmallPtrSetImplBase"*)* @_ZN4llvm19SmallPtrSetImplBaseC2EPPKvRKS0_
@_ZN4llvm19SmallPtrSetImplBaseC1EPPKvjOS0_ = hidden unnamed_addr alias void (%"class.llvm::SmallPtrSetImplBase"*, i8**, i32, %"class.llvm::SmallPtrSetImplBase"*), void (%"class.llvm::SmallPtrSetImplBase"*, i8**, i32, %"class.llvm::SmallPtrSetImplBase"*)* @_ZN4llvm19SmallPtrSetImplBaseC2EPPKvjOS0_

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm19SmallPtrSetImplBase16shrink_and_clearEv(%"class.llvm::SmallPtrSetImplBase"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 1
  %3 = bitcast i8*** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  tail call void @free(i8* %4) #7
  %5 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = sub i32 %6, %8
  %10 = icmp ugt i32 %9, 16
  br i1 %10, label %11, label %16

11:                                               ; preds = %1
  %12 = add i32 %9, -1
  %13 = tail call i32 @llvm.ctlz.i32(i32 %12, i1 true) #8, !range !2
  %14 = sub nuw nsw i32 33, %13
  %15 = shl i32 1, %14
  br label %16

16:                                               ; preds = %1, %11
  %17 = phi i32 [ %15, %11 ], [ 32, %1 ]
  %18 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 2
  store i32 %17, i32* %18, align 8
  store i32 0, i32* %7, align 8
  store i32 0, i32* %5, align 4
  %19 = zext i32 %17 to i64
  %20 = shl nuw nsw i64 %19, 3
  %21 = tail call noalias i8* @malloc(i64 %20) #7
  store i8* %21, i8** %3, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 -1, i64 %20, i1 false)
  ret void
}

; Function Attrs: nounwind optsize
declare void @free(i8* nocapture) local_unnamed_addr #1

; Function Attrs: nofree nounwind optsize
declare noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind optsize ssp uwtable
define hidden { i8**, i8 } @_ZN4llvm19SmallPtrSetImplBase14insert_imp_bigEPKv(%"class.llvm::SmallPtrSetImplBase"* nocapture, i8*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = sub i32 %4, %6
  %8 = shl i32 %7, 2
  %9 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = mul i32 %10, 3
  %12 = icmp ult i32 %8, %11
  br i1 %12, label %17, label %13, !prof !3

13:                                               ; preds = %2
  %14 = icmp ult i32 %10, 64
  %15 = shl i32 %10, 1
  %16 = select i1 %14, i32 128, i32 %15
  br label %21

17:                                               ; preds = %2
  %18 = sub i32 %10, %4
  %19 = lshr i32 %10, 3
  %20 = icmp ult i32 %18, %19
  br i1 %20, label %21, label %23, !prof !4

21:                                               ; preds = %17, %13
  %22 = phi i32 [ %16, %13 ], [ %10, %17 ]
  tail call void @_ZN4llvm19SmallPtrSetImplBase4GrowEj(%"class.llvm::SmallPtrSetImplBase"* %0, i32 %22) #9
  br label %23

23:                                               ; preds = %21, %17
  %24 = tail call i8** @_ZNK4llvm19SmallPtrSetImplBase13FindBucketForEPKv(%"class.llvm::SmallPtrSetImplBase"* %0, i8* %1) #9
  %25 = load i8*, i8** %24, align 8
  %26 = icmp eq i8* %25, %1
  br i1 %26, label %36, label %27

27:                                               ; preds = %23
  %28 = icmp eq i8* %25, inttoptr (i64 -2 to i8*)
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = load i32, i32* %5, align 8
  %31 = add i32 %30, -1
  store i32 %31, i32* %5, align 8
  br label %35

32:                                               ; preds = %27
  %33 = load i32, i32* %3, align 4
  %34 = add i32 %33, 1
  store i32 %34, i32* %3, align 4
  br label %35

35:                                               ; preds = %32, %29
  store i8* %1, i8** %24, align 8
  br label %36

36:                                               ; preds = %23, %35
  %37 = phi i8 [ 1, %35 ], [ 0, %23 ]
  %38 = insertvalue { i8**, i8 } undef, i8** %24, 0
  %39 = insertvalue { i8**, i8 } %38, i8 %37, 1
  ret { i8**, i8 } %39
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm19SmallPtrSetImplBase4GrowEj(%"class.llvm::SmallPtrSetImplBase"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 1
  %4 = load i8**, i8*** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 0
  %6 = load i8**, i8*** %5, align 8
  %7 = icmp eq i8** %4, %6
  %8 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 2
  %10 = select i1 %7, i32* %8, i32* %9
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds i8*, i8** %4, i64 %12
  %14 = zext i32 %1 to i64
  %15 = shl nuw nsw i64 %14, 3
  %16 = tail call noalias i8* @malloc(i64 %15) #7
  %17 = bitcast i8*** %3 to i8**
  store i8* %16, i8** %17, align 8
  store i32 %1, i32* %9, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 -1, i64 %15, i1 false)
  %18 = icmp eq i32 %11, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %26, %2
  br i1 %7, label %31, label %29

20:                                               ; preds = %2, %26
  %21 = phi i8** [ %27, %26 ], [ %4, %2 ]
  %22 = load i8*, i8** %21, align 8
  %23 = icmp ugt i8* %22, inttoptr (i64 -3 to i8*)
  br i1 %23, label %26, label %24

24:                                               ; preds = %20
  %25 = tail call i8** @_ZNK4llvm19SmallPtrSetImplBase13FindBucketForEPKv(%"class.llvm::SmallPtrSetImplBase"* %0, i8* %22) #9
  store i8* %22, i8** %25, align 8
  br label %26

26:                                               ; preds = %20, %24
  %27 = getelementptr inbounds i8*, i8** %21, i64 1
  %28 = icmp eq i8** %27, %13
  br i1 %28, label %19, label %20

29:                                               ; preds = %19
  %30 = bitcast i8** %4 to i8*
  tail call void @free(i8* %30) #7
  br label %31

31:                                               ; preds = %29, %19
  %32 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 4
  %33 = load i32, i32* %32, align 8
  %34 = load i32, i32* %8, align 4
  %35 = sub i32 %34, %33
  store i32 %35, i32* %8, align 4
  store i32 0, i32* %32, align 8
  ret void
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i8** @_ZNK4llvm19SmallPtrSetImplBase13FindBucketForEPKv(%"class.llvm::SmallPtrSetImplBase"* nocapture readonly, i8*) local_unnamed_addr #4 align 2 {
  %3 = ptrtoint i8* %1 to i64
  %4 = trunc i64 %3 to i32
  %5 = lshr i32 %4, 4
  %6 = lshr i32 %4, 9
  %7 = xor i32 %5, %6
  %8 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -1
  %11 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 1
  %12 = load i8**, i8*** %11, align 8
  %13 = and i32 %7, %10
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds i8*, i8** %12, i64 %14
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, inttoptr (i64 -1 to i8*)
  br i1 %17, label %18, label %23, !prof !3

18:                                               ; preds = %30, %2
  %19 = phi i8** [ null, %2 ], [ %34, %30 ]
  %20 = phi i8** [ %15, %2 ], [ %39, %30 ]
  %21 = icmp eq i8** %19, null
  %22 = select i1 %21, i8** %20, i8** %19
  br label %42

23:                                               ; preds = %2, %30
  %24 = phi i8* [ %40, %30 ], [ %16, %2 ]
  %25 = phi i8** [ %39, %30 ], [ %15, %2 ]
  %26 = phi i32 [ %37, %30 ], [ %13, %2 ]
  %27 = phi i8** [ %34, %30 ], [ null, %2 ]
  %28 = phi i32 [ %35, %30 ], [ 1, %2 ]
  %29 = icmp eq i8* %24, %1
  br i1 %29, label %42, label %30, !prof !3

30:                                               ; preds = %23
  %31 = icmp ne i8* %24, inttoptr (i64 -2 to i8*)
  %32 = icmp ne i8** %27, null
  %33 = or i1 %32, %31
  %34 = select i1 %33, i8** %27, i8** %25
  %35 = add i32 %28, 1
  %36 = add i32 %26, %28
  %37 = and i32 %36, %10
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i8*, i8** %12, i64 %38
  %40 = load i8*, i8** %39, align 8
  %41 = icmp eq i8* %40, inttoptr (i64 -1 to i8*)
  br i1 %41, label %18, label %23, !prof !3

42:                                               ; preds = %23, %18
  %43 = phi i8** [ %22, %18 ], [ %25, %23 ]
  ret i8** %43
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm19SmallPtrSetImplBase9erase_impEPKv(%"class.llvm::SmallPtrSetImplBase"* nocapture, i8*) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 1
  %4 = load i8**, i8*** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 0
  %6 = load i8**, i8*** %5, align 8
  %7 = icmp eq i8** %4, %6
  br i1 %7, label %8, label %27

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds i8*, i8** %4, i64 %11
  %13 = icmp eq i32 %10, 0
  br i1 %13, label %25, label %14

14:                                               ; preds = %8, %18
  %15 = phi i8** [ %19, %18 ], [ %4, %8 ]
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, %1
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds i8*, i8** %15, i64 1
  %20 = icmp eq i8** %19, %12
  br i1 %20, label %25, label %14

21:                                               ; preds = %14
  store i8* inttoptr (i64 -2 to i8*), i8** %15, align 8
  %22 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 4
  %23 = load i32, i32* %22, align 8
  %24 = add i32 %23, 1
  store i32 %24, i32* %22, align 8
  br label %25

25:                                               ; preds = %18, %8, %27, %31, %21
  %26 = phi i1 [ true, %21 ], [ true, %31 ], [ false, %27 ], [ false, %8 ], [ false, %18 ]
  ret i1 %26

27:                                               ; preds = %2
  %28 = tail call i8** @_ZNK4llvm19SmallPtrSetImplBase13FindBucketForEPKv(%"class.llvm::SmallPtrSetImplBase"* %0, i8* %1) #9
  %29 = load i8*, i8** %28, align 8
  %30 = icmp eq i8* %29, %1
  br i1 %30, label %31, label %25

31:                                               ; preds = %27
  store i8* inttoptr (i64 -2 to i8*), i8** %28, align 8
  %32 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 4
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, 1
  store i32 %34, i32* %32, align 8
  br label %25
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm19SmallPtrSetImplBaseC2EPPKvRKS0_(%"class.llvm::SmallPtrSetImplBase"* nocapture, i8**, %"class.llvm::SmallPtrSetImplBase"* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 0
  store i8** %1, i8*** %4, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %2, i64 0, i32 1
  %6 = load i8**, i8*** %5, align 8
  %7 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %2, i64 0, i32 0
  %8 = load i8**, i8*** %7, align 8
  %9 = icmp eq i8** %6, %8
  br i1 %9, label %10, label %15

10:                                               ; preds = %3
  %11 = ptrtoint i8** %1 to i64
  %12 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 1
  %13 = bitcast i8*** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = bitcast i8** %1 to i8*
  br label %23

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %2, i64 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = shl nuw nsw i64 %18, 3
  %20 = tail call noalias i8* @malloc(i64 %19) #7
  %21 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 1
  %22 = bitcast i8*** %21 to i8**
  store i8* %20, i8** %22, align 8
  br label %23

23:                                               ; preds = %15, %10
  %24 = phi i8* [ %20, %15 ], [ %14, %10 ]
  %25 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %2, i64 0, i32 2
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 2
  store i32 %26, i32* %27, align 8
  %28 = load i8**, i8*** %5, align 8
  %29 = load i8**, i8*** %7, align 8
  %30 = icmp eq i8** %28, %29
  %31 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %2, i64 0, i32 3
  %32 = select i1 %30, i32* %31, i32* %25
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %23
  %36 = zext i32 %33 to i64
  %37 = shl nuw nsw i64 %36, 3
  %38 = bitcast i8** %28 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %38, i64 %37, i1 false) #8
  br label %39

39:                                               ; preds = %23, %35
  %40 = load i32, i32* %31, align 4
  %41 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 3
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %2, i64 0, i32 4
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 4
  store i32 %43, i32* %44, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm19SmallPtrSetImplBase10CopyHelperERKS0_(%"class.llvm::SmallPtrSetImplBase"* nocapture, %"class.llvm::SmallPtrSetImplBase"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 2
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 1
  %7 = load i8**, i8*** %6, align 8
  %8 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 0
  %9 = load i8**, i8*** %8, align 8
  %10 = icmp eq i8** %7, %9
  %11 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 3
  %12 = select i1 %10, i32* %11, i32* %3
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %2
  %16 = zext i32 %13 to i64
  %17 = shl nuw nsw i64 %16, 3
  %18 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 1
  %19 = bitcast i8*** %18 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast i8** %7 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 %17, i1 false) #8
  br label %22

22:                                               ; preds = %2, %15
  %23 = load i32, i32* %11, align 4
  %24 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 3
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 4
  store i32 %26, i32* %27, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm19SmallPtrSetImplBaseC2EPPKvjOS0_(%"class.llvm::SmallPtrSetImplBase"* nocapture, i8**, i32, %"class.llvm::SmallPtrSetImplBase"* nocapture dereferenceable(32)) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 0
  store i8** %1, i8*** %5, align 8
  tail call void @_ZN4llvm19SmallPtrSetImplBase10MoveHelperEjOS0_(%"class.llvm::SmallPtrSetImplBase"* %0, i32 %2, %"class.llvm::SmallPtrSetImplBase"* dereferenceable(32) %3) #9
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm19SmallPtrSetImplBase10MoveHelperEjOS0_(%"class.llvm::SmallPtrSetImplBase"* nocapture, i32, %"class.llvm::SmallPtrSetImplBase"* nocapture dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %2, i64 0, i32 1
  %5 = load i8**, i8*** %4, align 8
  %6 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %2, i64 0, i32 0
  %7 = load i8**, i8*** %6, align 8
  %8 = icmp eq i8** %5, %7
  br i1 %8, label %9, label %22

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 0
  %11 = load i8**, i8*** %10, align 8
  %12 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 1
  store i8** %11, i8*** %12, align 8
  %13 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %2, i64 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %29, label %16

16:                                               ; preds = %9
  %17 = zext i32 %14 to i64
  %18 = shl nuw nsw i64 %17, 3
  %19 = bitcast i8*** %4 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast i8** %11 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %20, i64 %18, i1 false) #8
  br label %29

22:                                               ; preds = %3
  %23 = ptrtoint i8** %5 to i64
  %24 = bitcast i8*** %4 to i64*
  %25 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 1
  %26 = bitcast i8*** %25 to i64*
  store i64 %23, i64* %26, align 8
  %27 = bitcast %"class.llvm::SmallPtrSetImplBase"* %2 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %24, align 8
  br label %29

29:                                               ; preds = %16, %9, %22
  %30 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %2, i64 0, i32 2
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 2
  store i32 %31, i32* %32, align 8
  %33 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %2, i64 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 3
  store i32 %34, i32* %35, align 4
  %36 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %2, i64 0, i32 4
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 4
  store i32 %37, i32* %38, align 8
  store i32 %1, i32* %30, align 8
  store i32 0, i32* %33, align 4
  store i32 0, i32* %36, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm19SmallPtrSetImplBase8CopyFromERKS0_(%"class.llvm::SmallPtrSetImplBase"* nocapture, %"class.llvm::SmallPtrSetImplBase"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 1
  %4 = load i8**, i8*** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 0
  %6 = load i8**, i8*** %5, align 8
  %7 = icmp eq i8** %4, %6
  %8 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 1
  %9 = load i8**, i8*** %8, align 8
  %10 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 0
  %11 = load i8**, i8*** %10, align 8
  %12 = icmp eq i8** %9, %11
  %13 = bitcast i8** %4 to i8*
  br i1 %12, label %14, label %23

14:                                               ; preds = %2
  %15 = ptrtoint i8** %6 to i64
  br i1 %7, label %19, label %16

16:                                               ; preds = %14
  tail call void @free(i8* %13) #7
  %17 = bitcast %"class.llvm::SmallPtrSetImplBase"* %0 to i64*
  %18 = load i64, i64* %17, align 8
  br label %19

19:                                               ; preds = %14, %16
  %20 = phi i64 [ %18, %16 ], [ %15, %14 ]
  %21 = bitcast i8*** %3 to i64*
  store i64 %20, i64* %21, align 8
  %22 = inttoptr i64 %20 to i8*
  br label %44

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %25, %27
  br i1 %28, label %44, label %29

29:                                               ; preds = %23
  br i1 %7, label %30, label %35

30:                                               ; preds = %29
  %31 = zext i32 %27 to i64
  %32 = shl nuw nsw i64 %31, 3
  %33 = tail call noalias i8* @malloc(i64 %32) #7
  %34 = bitcast i8*** %3 to i8**
  store i8* %33, i8** %34, align 8
  br label %44

35:                                               ; preds = %29
  %36 = bitcast i8*** %3 to i8**
  %37 = zext i32 %27 to i64
  %38 = shl nuw nsw i64 %37, 3
  %39 = tail call i8* @realloc(i8* %13, i64 %38) #7
  %40 = icmp eq i8* %39, null
  br i1 %40, label %41, label %43

41:                                               ; preds = %35
  %42 = load i8*, i8** %36, align 8
  tail call void @free(i8* %42) #7
  br label %43

43:                                               ; preds = %35, %41
  store i8* %39, i8** %36, align 8
  br label %44

44:                                               ; preds = %23, %43, %30, %19
  %45 = phi i8* [ %13, %23 ], [ %39, %43 ], [ %33, %30 ], [ %22, %19 ]
  %46 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 2
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 2
  store i32 %47, i32* %48, align 8
  %49 = load i8**, i8*** %8, align 8
  %50 = load i8**, i8*** %10, align 8
  %51 = icmp eq i8** %49, %50
  %52 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 3
  %53 = select i1 %51, i32* %52, i32* %46
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %44
  %57 = zext i32 %54 to i64
  %58 = shl nuw nsw i64 %57, 3
  %59 = bitcast i8** %49 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %59, i64 %58, i1 false) #8
  br label %60

60:                                               ; preds = %44, %56
  %61 = load i32, i32* %52, align 4
  %62 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 3
  store i32 %61, i32* %62, align 4
  %63 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 4
  %64 = load i32, i32* %63, align 8
  %65 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 4
  store i32 %64, i32* %65, align 8
  ret void
}

; Function Attrs: nounwind optsize
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm19SmallPtrSetImplBase8MoveFromEjOS0_(%"class.llvm::SmallPtrSetImplBase"* nocapture, i32, %"class.llvm::SmallPtrSetImplBase"* nocapture dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 1
  %5 = load i8**, i8*** %4, align 8
  %6 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 0
  %7 = load i8**, i8*** %6, align 8
  %8 = icmp eq i8** %5, %7
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = bitcast i8** %5 to i8*
  tail call void @free(i8* %10) #7
  br label %11

11:                                               ; preds = %9, %3
  tail call void @_ZN4llvm19SmallPtrSetImplBase10MoveHelperEjOS0_(%"class.llvm::SmallPtrSetImplBase"* %0, i32 %1, %"class.llvm::SmallPtrSetImplBase"* dereferenceable(32) %2) #9
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm19SmallPtrSetImplBase4swapERS0_(%"class.llvm::SmallPtrSetImplBase"*, %"class.llvm::SmallPtrSetImplBase"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.llvm::SmallPtrSetImplBase"* %0, %1
  br i1 %3, label %146, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 1
  %6 = load i8**, i8*** %5, align 8
  %7 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 0
  %8 = load i8**, i8*** %7, align 8
  %9 = bitcast i8** %8 to i8*
  %10 = icmp eq i8** %6, %8
  %11 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 1
  %12 = load i8**, i8*** %11, align 8
  %13 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 0
  %14 = load i8**, i8*** %13, align 8
  %15 = icmp eq i8** %12, %14
  %16 = ptrtoint i8** %6 to i64
  %17 = ptrtoint i8** %12 to i64
  br i1 %10, label %59, label %18

18:                                               ; preds = %4
  br i1 %15, label %34, label %19

19:                                               ; preds = %18
  %20 = bitcast i8*** %5 to i64*
  %21 = bitcast i8*** %11 to i64*
  store i64 %17, i64* %20, align 8
  store i64 %16, i64* %21, align 8
  %22 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 2
  %23 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 2
  %24 = load i32, i32* %22, align 4
  %25 = load i32, i32* %23, align 4
  store i32 %25, i32* %22, align 4
  store i32 %24, i32* %23, align 4
  %26 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 3
  %27 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 3
  %28 = load i32, i32* %26, align 4
  %29 = load i32, i32* %27, align 4
  store i32 %29, i32* %26, align 4
  store i32 %28, i32* %27, align 4
  %30 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 4
  %31 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 4
  %32 = load i32, i32* %30, align 4
  %33 = load i32, i32* %31, align 4
  store i32 %33, i32* %30, align 4
  store i32 %32, i32* %31, align 4
  br label %146

34:                                               ; preds = %18
  %35 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 3
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %34
  %39 = zext i32 %36 to i64
  %40 = shl nuw nsw i64 %39, 3
  %41 = bitcast i8** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %41, i64 %40, i1 false) #8
  br label %42

42:                                               ; preds = %34, %38
  %43 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 2
  %44 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 2
  %45 = load i32, i32* %43, align 4
  %46 = load i32, i32* %44, align 4
  store i32 %46, i32* %43, align 4
  store i32 %45, i32* %44, align 4
  %47 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 3
  %48 = load i32, i32* %47, align 4
  %49 = load i32, i32* %35, align 4
  store i32 %49, i32* %47, align 4
  store i32 %48, i32* %35, align 4
  %50 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 4
  %51 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 4
  %52 = load i32, i32* %50, align 4
  %53 = load i32, i32* %51, align 4
  store i32 %53, i32* %50, align 4
  store i32 %52, i32* %51, align 4
  %54 = bitcast i8*** %5 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast i8*** %11 to i64*
  store i64 %55, i64* %56, align 8
  %57 = bitcast %"class.llvm::SmallPtrSetImplBase"* %0 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %54, align 8
  br label %146

59:                                               ; preds = %4
  %60 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 3
  br i1 %15, label %86, label %61

61:                                               ; preds = %59
  %62 = load i32, i32* %60, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %69, label %64

64:                                               ; preds = %61
  %65 = zext i32 %62 to i64
  %66 = shl nuw nsw i64 %65, 3
  %67 = bitcast i8** %14 to i8*
  %68 = bitcast i8** %6 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 %66, i1 false) #8
  br label %69

69:                                               ; preds = %61, %64
  %70 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 2
  %71 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 2
  %72 = load i32, i32* %70, align 4
  %73 = load i32, i32* %71, align 4
  store i32 %73, i32* %70, align 4
  store i32 %72, i32* %71, align 4
  %74 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 3
  %75 = load i32, i32* %74, align 4
  %76 = load i32, i32* %60, align 4
  store i32 %76, i32* %74, align 4
  store i32 %75, i32* %60, align 4
  %77 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 4
  %78 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 4
  %79 = load i32, i32* %77, align 4
  %80 = load i32, i32* %78, align 4
  store i32 %80, i32* %77, align 4
  store i32 %79, i32* %78, align 4
  %81 = bitcast i8*** %11 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast i8*** %5 to i64*
  store i64 %82, i64* %83, align 8
  %84 = bitcast %"class.llvm::SmallPtrSetImplBase"* %1 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %81, align 8
  br label %146

86:                                               ; preds = %59
  %87 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 3
  %88 = load i32, i32* %87, align 4
  %89 = load i32, i32* %60, align 4
  %90 = icmp ult i32 %88, %89
  %91 = select i1 %90, i32 %88, i32 %89
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i8*, i8** %8, i64 %92
  %94 = icmp eq i32 %91, 0
  br i1 %94, label %107, label %95

95:                                               ; preds = %86, %95
  %96 = phi i8** [ %103, %95 ], [ %14, %86 ]
  %97 = phi i8** [ %102, %95 ], [ %8, %86 ]
  %98 = bitcast i8** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i8** %96 to i64*
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %98, align 8
  store i64 %99, i64* %100, align 8
  %102 = getelementptr inbounds i8*, i8** %97, i64 1
  %103 = getelementptr inbounds i8*, i8** %96, i64 1
  %104 = icmp eq i8** %102, %93
  br i1 %104, label %105, label %95

105:                                              ; preds = %95
  %106 = load i32, i32* %60, align 4
  br label %107

107:                                              ; preds = %105, %86
  %108 = phi i32 [ %106, %105 ], [ %89, %86 ]
  %109 = icmp ugt i32 %108, %91
  br i1 %109, label %110, label %124

110:                                              ; preds = %107
  %111 = load i8**, i8*** %7, align 8
  %112 = getelementptr inbounds i8*, i8** %111, i64 %92
  %113 = zext i32 %108 to i64
  %114 = getelementptr inbounds i8*, i8** %111, i64 %113
  %115 = ptrtoint i8** %114 to i64
  %116 = ptrtoint i8** %112 to i64
  %117 = sub i64 %115, %116
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %139, label %119

119:                                              ; preds = %110
  %120 = load i8**, i8*** %13, align 8
  %121 = getelementptr inbounds i8*, i8** %120, i64 %92
  %122 = bitcast i8** %121 to i8*
  %123 = bitcast i8** %112 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %123, i64 %117, i1 false) #8
  br label %139

124:                                              ; preds = %107
  %125 = load i8**, i8*** %13, align 8
  %126 = getelementptr inbounds i8*, i8** %125, i64 %92
  %127 = load i32, i32* %87, align 4
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds i8*, i8** %125, i64 %128
  %130 = ptrtoint i8** %129 to i64
  %131 = ptrtoint i8** %126 to i64
  %132 = sub i64 %130, %131
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %139, label %134

134:                                              ; preds = %124
  %135 = load i8**, i8*** %7, align 8
  %136 = getelementptr inbounds i8*, i8** %135, i64 %92
  %137 = bitcast i8** %136 to i8*
  %138 = bitcast i8** %126 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %137, i8* align 8 %138, i64 %132, i1 false) #8
  br label %139

139:                                              ; preds = %134, %124, %119, %110
  %140 = load i32, i32* %60, align 4
  %141 = load i32, i32* %87, align 4
  store i32 %141, i32* %60, align 4
  store i32 %140, i32* %87, align 4
  %142 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %0, i64 0, i32 4
  %143 = getelementptr inbounds %"class.llvm::SmallPtrSetImplBase", %"class.llvm::SmallPtrSetImplBase"* %1, i64 0, i32 4
  %144 = load i32, i32* %142, align 4
  %145 = load i32, i32* %143, align 4
  store i32 %145, i32* %142, align 4
  store i32 %144, i32* %143, align 4
  br label %146

146:                                              ; preds = %2, %139, %69, %42, %19
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind optsize }
attributes #8 = { nounwind }
attributes #9 = { optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!"branch_weights", i32 1, i32 2000}
