; ModuleID = '../../third_party/vulkan-deps/spirv-tools/src/source/libspirv.cpp'
source_filename = "../../third_party/vulkan-deps/spirv-tools/src/source/libspirv.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.spvtools::Context" = type { %struct.spv_context_t* }
%struct.spv_context_t = type { i32, %struct.spv_opcode_table_t*, %struct.spv_operand_table_t*, %struct.spv_ext_inst_table_t*, %"class.std::__1::function" }
%struct.spv_opcode_table_t = type { i32, %struct.spv_opcode_desc_t* }
%struct.spv_opcode_desc_t = type { i8*, i32, i32, i32*, i16, [16 x i32], i8, i8, i32, i32*, i32, i32 }
%struct.spv_operand_table_t = type { i32, %struct.spv_operand_desc_group_t* }
%struct.spv_operand_desc_group_t = type { i32, i32, %struct.spv_operand_desc_t* }
%struct.spv_operand_desc_t = type { i8*, i32, i32, i32*, i32, i32*, [16 x i32], i32, i32 }
%struct.spv_ext_inst_table_t = type { i32, %struct.spv_ext_inst_group_t* }
%struct.spv_ext_inst_group_t = type { i32, i32, %struct.spv_ext_inst_desc_t* }
%struct.spv_ext_inst_desc_t = type { i8*, i32, i32, i32*, [16 x i32] }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, i32, i8*, %struct.spv_position_t*, i8*)* }
%struct.spv_position_t = type { i64, i64, i64 }
%"class.spvtools::SpirvTools" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.spvtools::SpirvTools::Impl"* }
%"struct.spvtools::SpirvTools::Impl" = type { %struct.spv_context_t* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i32* }
%struct.spv_binary_t = type { i32*, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%struct.spv_diagnostic_t = type { %struct.spv_position_t, i8*, i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%struct.spv_text_t = type { i8*, i64 }
%struct.spv_validator_options_t = type opaque
%struct.spv_const_binary_t = type { i32*, i64 }

$_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZNSt3__110__function16__policy_invokerIFv19spv_message_level_tPKcRK14spv_position_tS4_EE12__call_emptyEPKNS0_16__policy_storageES2_S4_S7_S4_ = comdat any

$_ZNSt3__125__throw_bad_function_callEv = comdat any

$_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = comdat any

@_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" { i8* (i8*)* null, void (i8*)* null, i8 1, %"class.std::type_info"* null }, comdat, align 8

@_ZN8spvtools7ContextC1E14spv_target_env = hidden unnamed_addr alias void (%"class.spvtools::Context"*, i32), void (%"class.spvtools::Context"*, i32)* @_ZN8spvtools7ContextC2E14spv_target_env
@_ZN8spvtools7ContextC1EOS0_ = hidden unnamed_addr alias void (%"class.spvtools::Context"*, %"class.spvtools::Context"*), void (%"class.spvtools::Context"*, %"class.spvtools::Context"*)* @_ZN8spvtools7ContextC2EOS0_
@_ZN8spvtools7ContextD1Ev = hidden unnamed_addr alias void (%"class.spvtools::Context"*), void (%"class.spvtools::Context"*)* @_ZN8spvtools7ContextD2Ev
@_ZN8spvtools10SpirvToolsC1E14spv_target_env = hidden unnamed_addr alias void (%"class.spvtools::SpirvTools"*, i32), void (%"class.spvtools::SpirvTools"*, i32)* @_ZN8spvtools10SpirvToolsC2E14spv_target_env
@_ZN8spvtools10SpirvToolsD1Ev = hidden unnamed_addr alias void (%"class.spvtools::SpirvTools"*), void (%"class.spvtools::SpirvTools"*)* @_ZN8spvtools10SpirvToolsD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8spvtools7ContextC2E14spv_target_env(%"class.spvtools::Context"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.spvtools::Context", %"class.spvtools::Context"* %0, i64 0, i32 0
  %4 = tail call %struct.spv_context_t* @spvContextCreate(i32 %1) #11
  store %struct.spv_context_t* %4, %struct.spv_context_t** %3, align 8
  ret void
}

declare %struct.spv_context_t* @spvContextCreate(i32) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN8spvtools7ContextC2EOS0_(%"class.spvtools::Context"* nocapture, %"class.spvtools::Context"* nocapture dereferenceable(8)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.spvtools::Context", %"class.spvtools::Context"* %1, i64 0, i32 0
  %4 = bitcast %"class.spvtools::Context"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.spvtools::Context"* %0 to i64*
  store i64 %5, i64* %6, align 8
  store %struct.spv_context_t* null, %struct.spv_context_t** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.spvtools::Context"* @_ZN8spvtools7ContextaSEOS0_(%"class.spvtools::Context"* returned, %"class.spvtools::Context"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.spvtools::Context", %"class.spvtools::Context"* %0, i64 0, i32 0
  %4 = load %struct.spv_context_t*, %struct.spv_context_t** %3, align 8
  tail call void @spvContextDestroy(%struct.spv_context_t* %4) #11
  %5 = getelementptr inbounds %"class.spvtools::Context", %"class.spvtools::Context"* %1, i64 0, i32 0
  %6 = bitcast %"class.spvtools::Context"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.spvtools::Context"* %0 to i64*
  store i64 %7, i64* %8, align 8
  store %struct.spv_context_t* null, %struct.spv_context_t** %5, align 8
  ret %"class.spvtools::Context"* %0
}

declare void @spvContextDestroy(%struct.spv_context_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8spvtools7ContextD2Ev(%"class.spvtools::Context"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.spvtools::Context", %"class.spvtools::Context"* %0, i64 0, i32 0
  %3 = load %struct.spv_context_t*, %struct.spv_context_t** %2, align 8
  tail call void @spvContextDestroy(%struct.spv_context_t* %3) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8spvtools7Context18SetMessageConsumerENSt3__18functionIFv19spv_message_level_tPKcRK14spv_position_tS5_EEE(%"class.spvtools::Context"* nocapture readonly, %"class.std::__1::function"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::function", align 8
  %4 = getelementptr inbounds %"class.spvtools::Context", %"class.spvtools::Context"* %0, i64 0, i32 0
  %5 = load %struct.spv_context_t*, %struct.spv_context_t** %4, align 8
  %6 = bitcast %"class.std::__1::function"* %3 to i8*
  %7 = bitcast %"class.std::__1::function"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 %7, i64 16, i1 false) #11
  %8 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 1
  %10 = bitcast %"struct.std::__1::__function::__policy_invoker"* %9 to i64*
  %11 = bitcast %"struct.std::__1::__function::__policy_invoker"* %8 to i64*
  %12 = load i64, i64* %10, align 8
  store i64 %12, i64* %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 2
  %15 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %14, align 8
  store %"struct.std::__1::__function::__policy"* %15, %"struct.std::__1::__function::__policy"** %13, align 8
  %16 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %15, i64 0, i32 1
  %17 = load void (i8*)*, void (i8*)** %16, align 8
  %18 = icmp eq void (i8*)* %17, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %2
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %14, align 8
  store i64 ptrtoint (void (%"union.std::__1::__function::__policy_storage"*, i32, i8*, %struct.spv_position_t*, i8*)* @_ZNSt3__110__function16__policy_invokerIFv19spv_message_level_tPKcRK14spv_position_tS4_EE12__call_emptyEPKNS0_16__policy_storageES2_S4_S7_S4_ to i64), i64* %10, align 8
  br label %20

20:                                               ; preds = %2, %19
  call void @_ZN8spvtools25SetContextMessageConsumerEP13spv_context_tNSt3__18functionIFv19spv_message_level_tPKcRK14spv_position_tS6_EEE(%struct.spv_context_t* %5, %"class.std::__1::function"* nonnull %3) #11
  %21 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %13, align 8
  %22 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %21, i64 0, i32 1
  %23 = load void (i8*)*, void (i8*)** %22, align 8
  %24 = icmp eq void (i8*)* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  call void %23(i8* %27) #11
  br label %28

28:                                               ; preds = %20, %25
  ret void
}

declare void @_ZN8spvtools25SetContextMessageConsumerEP13spv_context_tNSt3__18functionIFv19spv_message_level_tPKcRK14spv_position_tS6_EEE(%struct.spv_context_t*, %"class.std::__1::function"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(8) %struct.spv_context_t** @_ZN8spvtools7Context8CContextEv(%"class.spvtools::Context"* readnone) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.spvtools::Context", %"class.spvtools::Context"* %0, i64 0, i32 0
  ret %struct.spv_context_t** %2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(8) %struct.spv_context_t** @_ZNK8spvtools7Context8CContextEv(%"class.spvtools::Context"* readnone) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.spvtools::Context", %"class.spvtools::Context"* %0, i64 0, i32 0
  ret %struct.spv_context_t** %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8spvtools10SpirvToolsC2E14spv_target_env(%"class.spvtools::SpirvTools"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 8) #12
  %4 = bitcast i8* %3 to %struct.spv_context_t**
  %5 = tail call %struct.spv_context_t* @spvContextCreate(i32 %1) #11
  store %struct.spv_context_t* %5, %struct.spv_context_t** %4, align 8
  %6 = ptrtoint i8* %3 to i64
  %7 = bitcast %"class.spvtools::SpirvTools"* %0 to i64*
  store i64 %6, i64* %7, align 8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8spvtools10SpirvToolsD2Ev(%"class.spvtools::SpirvTools"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.spvtools::SpirvTools", %"class.spvtools::SpirvTools"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"struct.spvtools::SpirvTools::Impl"*, %"struct.spvtools::SpirvTools::Impl"** %2, align 8
  store %"struct.spvtools::SpirvTools::Impl"* null, %"struct.spvtools::SpirvTools::Impl"** %2, align 8
  %4 = icmp eq %"struct.spvtools::SpirvTools::Impl"* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"struct.spvtools::SpirvTools::Impl", %"struct.spvtools::SpirvTools::Impl"* %3, i64 0, i32 0
  %7 = load %struct.spv_context_t*, %struct.spv_context_t** %6, align 8
  tail call void @spvContextDestroy(%struct.spv_context_t* %7) #11
  %8 = bitcast %"struct.spvtools::SpirvTools::Impl"* %3 to i8*
  tail call void @_ZdlPv(i8* %8) #12
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8spvtools10SpirvTools18SetMessageConsumerENSt3__18functionIFv19spv_message_level_tPKcRK14spv_position_tS5_EEE(%"class.spvtools::SpirvTools"* nocapture readonly, %"class.std::__1::function"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::function", align 8
  %4 = getelementptr inbounds %"class.spvtools::SpirvTools", %"class.spvtools::SpirvTools"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"struct.spvtools::SpirvTools::Impl"*, %"struct.spvtools::SpirvTools::Impl"** %4, align 8
  %6 = getelementptr inbounds %"struct.spvtools::SpirvTools::Impl", %"struct.spvtools::SpirvTools::Impl"* %5, i64 0, i32 0
  %7 = load %struct.spv_context_t*, %struct.spv_context_t** %6, align 8
  %8 = bitcast %"class.std::__1::function"* %3 to i8*
  %9 = bitcast %"class.std::__1::function"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* align 8 %9, i64 16, i1 false) #11
  %10 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 1
  %12 = bitcast %"struct.std::__1::__function::__policy_invoker"* %11 to i64*
  %13 = bitcast %"struct.std::__1::__function::__policy_invoker"* %10 to i64*
  %14 = load i64, i64* %12, align 8
  store i64 %14, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 2
  %16 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 2
  %17 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %16, align 8
  store %"struct.std::__1::__function::__policy"* %17, %"struct.std::__1::__function::__policy"** %15, align 8
  %18 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %17, i64 0, i32 1
  %19 = load void (i8*)*, void (i8*)** %18, align 8
  %20 = icmp eq void (i8*)* %19, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %2
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %16, align 8
  store i64 ptrtoint (void (%"union.std::__1::__function::__policy_storage"*, i32, i8*, %struct.spv_position_t*, i8*)* @_ZNSt3__110__function16__policy_invokerIFv19spv_message_level_tPKcRK14spv_position_tS4_EE12__call_emptyEPKNS0_16__policy_storageES2_S4_S7_S4_ to i64), i64* %12, align 8
  br label %22

22:                                               ; preds = %2, %21
  call void @_ZN8spvtools25SetContextMessageConsumerEP13spv_context_tNSt3__18functionIFv19spv_message_level_tPKcRK14spv_position_tS6_EEE(%struct.spv_context_t* %7, %"class.std::__1::function"* nonnull %3) #11
  %23 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %15, align 8
  %24 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %23, i64 0, i32 1
  %25 = load void (i8*)*, void (i8*)** %24, align 8
  %26 = icmp eq void (i8*)* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void %25(i8* %29) #11
  br label %30

30:                                               ; preds = %22, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8spvtools10SpirvTools8AssembleERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS1_6vectorIjNS5_IjEEEEj(%"class.spvtools::SpirvTools"* nocapture readonly, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::vector"*, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %struct.spv_binary_t*, align 8
  %6 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %15 = zext i8 %8 to i64
  %16 = select i1 %9, i8* %11, i8* %14
  %17 = select i1 %9, i64 %13, i64 %15
  %18 = bitcast %struct.spv_binary_t** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #11
  store %struct.spv_binary_t* null, %struct.spv_binary_t** %5, align 8
  %19 = getelementptr inbounds %"class.spvtools::SpirvTools", %"class.spvtools::SpirvTools"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load %"struct.spvtools::SpirvTools::Impl"*, %"struct.spvtools::SpirvTools::Impl"** %19, align 8
  %21 = getelementptr inbounds %"struct.spvtools::SpirvTools::Impl", %"struct.spvtools::SpirvTools::Impl"* %20, i64 0, i32 0
  %22 = load %struct.spv_context_t*, %struct.spv_context_t** %21, align 8
  %23 = call i32 @spvTextToBinaryWithOptions(%struct.spv_context_t* %22, i8* %16, i64 %17, i32 %3, %struct.spv_binary_t** nonnull %5, %struct.spv_diagnostic_t** null) #11
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %4
  %26 = load %struct.spv_binary_t*, %struct.spv_binary_t** %5, align 8
  %27 = getelementptr inbounds %struct.spv_binary_t, %struct.spv_binary_t* %26, i64 0, i32 0
  %28 = load i32*, i32** %27, align 8
  %29 = getelementptr inbounds %struct.spv_binary_t, %struct.spv_binary_t* %26, i64 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds i32, i32* %28, i64 %30
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %2, i32* %28, i32* %31) #11
  br label %32

32:                                               ; preds = %4, %25
  %33 = load %struct.spv_binary_t*, %struct.spv_binary_t** %5, align 8
  call void @spvBinaryDestroy(%struct.spv_binary_t* %33) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #11
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8spvtools10SpirvTools8AssembleEPKcmPNSt3__16vectorIjNS3_9allocatorIjEEEEj(%"class.spvtools::SpirvTools"* nocapture readonly, i8*, i64, %"class.std::__1::vector"*, i32) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.spv_binary_t*, align 8
  %7 = bitcast %struct.spv_binary_t** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #11
  store %struct.spv_binary_t* null, %struct.spv_binary_t** %6, align 8
  %8 = getelementptr inbounds %"class.spvtools::SpirvTools", %"class.spvtools::SpirvTools"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load %"struct.spvtools::SpirvTools::Impl"*, %"struct.spvtools::SpirvTools::Impl"** %8, align 8
  %10 = getelementptr inbounds %"struct.spvtools::SpirvTools::Impl", %"struct.spvtools::SpirvTools::Impl"* %9, i64 0, i32 0
  %11 = load %struct.spv_context_t*, %struct.spv_context_t** %10, align 8
  %12 = call i32 @spvTextToBinaryWithOptions(%struct.spv_context_t* %11, i8* %1, i64 %2, i32 %4, %struct.spv_binary_t** nonnull %6, %struct.spv_diagnostic_t** null) #11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %21

14:                                               ; preds = %5
  %15 = load %struct.spv_binary_t*, %struct.spv_binary_t** %6, align 8
  %16 = getelementptr inbounds %struct.spv_binary_t, %struct.spv_binary_t* %15, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds %struct.spv_binary_t, %struct.spv_binary_t* %15, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds i32, i32* %17, i64 %19
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %3, i32* %17, i32* %20)
  br label %21

21:                                               ; preds = %14, %5
  %22 = load %struct.spv_binary_t*, %struct.spv_binary_t** %6, align 8
  call void @spvBinaryDestroy(%struct.spv_binary_t* %22) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #11
  ret i1 %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare i32 @spvTextToBinaryWithOptions(%struct.spv_context_t*, i8*, i64, i32, %struct.spv_binary_t**, %struct.spv_diagnostic_t**) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #11
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i32* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #11
  %42 = inttoptr i64 %35 to i32*
  %43 = getelementptr inbounds i32, i32* %42, i64 %39
  %44 = ptrtoint i32* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %48, i32** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #12
  %55 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #11
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #13
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #13
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #12
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i32** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i32, i32* %75, i64 %72
  store i32* %79, i32** %8, align 8
  %80 = bitcast i32** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #11
  %86 = getelementptr inbounds i32, i32* %75, i64 %84
  %87 = ptrtoint i32* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

declare void @spvBinaryDestroy(%struct.spv_binary_t*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8spvtools10SpirvTools11DisassembleERKNSt3__16vectorIjNS1_9allocatorIjEEEEPNS1_12basic_stringIcNS1_11char_traitsIcEENS3_IcEEEEj(%"class.spvtools::SpirvTools"* nocapture readonly, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), %"class.std::__1::basic_string"*, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = ptrtoint i32* %6 to i64
  %11 = sub i64 %9, %10
  %12 = ashr exact i64 %11, 2
  %13 = tail call zeroext i1 @_ZNK8spvtools10SpirvTools11DisassembleEPKjmPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEj(%"class.spvtools::SpirvTools"* %0, i32* %6, i64 %12, %"class.std::__1::basic_string"* %2, i32 %3)
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8spvtools10SpirvTools11DisassembleEPKjmPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEj(%"class.spvtools::SpirvTools"* nocapture readonly, i32*, i64, %"class.std::__1::basic_string"*, i32) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.spv_text_t*, align 8
  %7 = bitcast %struct.spv_text_t** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #11
  store %struct.spv_text_t* null, %struct.spv_text_t** %6, align 8
  %8 = getelementptr inbounds %"class.spvtools::SpirvTools", %"class.spvtools::SpirvTools"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load %"struct.spvtools::SpirvTools::Impl"*, %"struct.spvtools::SpirvTools::Impl"** %8, align 8
  %10 = getelementptr inbounds %"struct.spvtools::SpirvTools::Impl", %"struct.spvtools::SpirvTools::Impl"* %9, i64 0, i32 0
  %11 = load %struct.spv_context_t*, %struct.spv_context_t** %10, align 8
  %12 = call i32 @spvBinaryToText(%struct.spv_context_t* %11, i32* %1, i64 %2, i32 %4, %struct.spv_text_t** nonnull %6, %struct.spv_diagnostic_t** null) #11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %160

14:                                               ; preds = %5
  %15 = load %struct.spv_text_t*, %struct.spv_text_t** %6, align 8
  %16 = getelementptr inbounds %struct.spv_text_t, %struct.spv_text_t* %15, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %struct.spv_text_t, %struct.spv_text_t* %15, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds i8, i8* %17, i64 %19
  %21 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %21, i64 0, i32 1, i32 0
  %23 = load i8, i8* %22, align 1
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %25, label %30

25:                                               ; preds = %14
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, 9223372036854775807
  %29 = add nsw i64 %28, -1
  br label %30

30:                                               ; preds = %25, %14
  %31 = phi i64 [ %29, %25 ], [ 22, %14 ]
  %32 = icmp ugt i64 %19, %31
  br i1 %32, label %33, label %43

33:                                               ; preds = %30
  br i1 %24, label %34, label %37

34:                                               ; preds = %33
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  br label %39

37:                                               ; preds = %33
  %38 = zext i8 %23 to i64
  br label %39

39:                                               ; preds = %37, %34
  %40 = phi i64 [ %36, %34 ], [ %38, %37 ]
  %41 = sub i64 %19, %31
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"* %3, i64 %31, i64 %41, i64 %40, i64 0, i64 %40, i64 0) #11
  %42 = load i8, i8* %22, align 1
  br label %43

43:                                               ; preds = %39, %30
  %44 = phi i8 [ %23, %30 ], [ %42, %39 ]
  %45 = icmp slt i8 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  br label %51

49:                                               ; preds = %43
  %50 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  br label %51

51:                                               ; preds = %49, %46
  %52 = phi i8* [ %48, %46 ], [ %50, %49 ]
  %53 = icmp eq i64 %19, 0
  br i1 %53, label %152, label %54

54:                                               ; preds = %51
  %55 = icmp ult i64 %19, 32
  br i1 %55, label %142, label %56

56:                                               ; preds = %54
  %57 = getelementptr i8, i8* %52, i64 %19
  %58 = icmp ult i8* %52, %20
  %59 = icmp ult i8* %17, %57
  %60 = and i1 %58, %59
  br i1 %60, label %142, label %61

61:                                               ; preds = %56
  %62 = and i64 %19, -32
  %63 = getelementptr i8, i8* %52, i64 %62
  %64 = getelementptr i8, i8* %17, i64 %62
  %65 = add i64 %62, -32
  %66 = lshr exact i64 %65, 5
  %67 = add nuw nsw i64 %66, 1
  %68 = and i64 %67, 3
  %69 = icmp ult i64 %65, 96
  br i1 %69, label %121, label %70

70:                                               ; preds = %61
  %71 = sub nsw i64 %67, %68
  br label %72

72:                                               ; preds = %72, %70
  %73 = phi i64 [ 0, %70 ], [ %118, %72 ]
  %74 = phi i64 [ %71, %70 ], [ %119, %72 ]
  %75 = getelementptr i8, i8* %52, i64 %73
  %76 = getelementptr i8, i8* %17, i64 %73
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1, !alias.scope !2
  %79 = getelementptr i8, i8* %76, i64 16
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !2
  %82 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %82, align 1, !alias.scope !5, !noalias !2
  %83 = getelementptr i8, i8* %75, i64 16
  %84 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %84, align 1, !alias.scope !5, !noalias !2
  %85 = or i64 %73, 32
  %86 = getelementptr i8, i8* %52, i64 %85
  %87 = getelementptr i8, i8* %17, i64 %85
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !2
  %90 = getelementptr i8, i8* %87, i64 16
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !2
  %93 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %89, <16 x i8>* %93, align 1, !alias.scope !5, !noalias !2
  %94 = getelementptr i8, i8* %86, i64 16
  %95 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %95, align 1, !alias.scope !5, !noalias !2
  %96 = or i64 %73, 64
  %97 = getelementptr i8, i8* %52, i64 %96
  %98 = getelementptr i8, i8* %17, i64 %96
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1, !alias.scope !2
  %101 = getelementptr i8, i8* %98, i64 16
  %102 = bitcast i8* %101 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1, !alias.scope !2
  %104 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %100, <16 x i8>* %104, align 1, !alias.scope !5, !noalias !2
  %105 = getelementptr i8, i8* %97, i64 16
  %106 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %106, align 1, !alias.scope !5, !noalias !2
  %107 = or i64 %73, 96
  %108 = getelementptr i8, i8* %52, i64 %107
  %109 = getelementptr i8, i8* %17, i64 %107
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !2
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !2
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !5, !noalias !2
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !5, !noalias !2
  %118 = add i64 %73, 128
  %119 = add i64 %74, -4
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %72, !llvm.loop !7

121:                                              ; preds = %72, %61
  %122 = phi i64 [ 0, %61 ], [ %118, %72 ]
  %123 = icmp eq i64 %68, 0
  br i1 %123, label %140, label %124

124:                                              ; preds = %121, %124
  %125 = phi i64 [ %137, %124 ], [ %122, %121 ]
  %126 = phi i64 [ %138, %124 ], [ %68, %121 ]
  %127 = getelementptr i8, i8* %52, i64 %125
  %128 = getelementptr i8, i8* %17, i64 %125
  %129 = bitcast i8* %128 to <16 x i8>*
  %130 = load <16 x i8>, <16 x i8>* %129, align 1, !alias.scope !2
  %131 = getelementptr i8, i8* %128, i64 16
  %132 = bitcast i8* %131 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 1, !alias.scope !2
  %134 = bitcast i8* %127 to <16 x i8>*
  store <16 x i8> %130, <16 x i8>* %134, align 1, !alias.scope !5, !noalias !2
  %135 = getelementptr i8, i8* %127, i64 16
  %136 = bitcast i8* %135 to <16 x i8>*
  store <16 x i8> %133, <16 x i8>* %136, align 1, !alias.scope !5, !noalias !2
  %137 = add i64 %125, 32
  %138 = add i64 %126, -1
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %124, !llvm.loop !9

140:                                              ; preds = %124, %121
  %141 = icmp eq i64 %19, %62
  br i1 %141, label %152, label %142

142:                                              ; preds = %140, %56, %54
  %143 = phi i8* [ %52, %56 ], [ %52, %54 ], [ %63, %140 ]
  %144 = phi i8* [ %17, %56 ], [ %17, %54 ], [ %64, %140 ]
  br label %145

145:                                              ; preds = %142, %145
  %146 = phi i8* [ %150, %145 ], [ %143, %142 ]
  %147 = phi i8* [ %149, %145 ], [ %144, %142 ]
  %148 = load i8, i8* %147, align 1
  store i8 %148, i8* %146, align 1
  %149 = getelementptr inbounds i8, i8* %147, i64 1
  %150 = getelementptr inbounds i8, i8* %146, i64 1
  %151 = icmp eq i8* %149, %20
  br i1 %151, label %152, label %145, !llvm.loop !11

152:                                              ; preds = %145, %140, %51
  %153 = phi i8* [ %52, %51 ], [ %63, %140 ], [ %150, %145 ]
  store i8 0, i8* %153, align 1
  %154 = load i8, i8* %22, align 1
  %155 = icmp slt i8 %154, 0
  br i1 %155, label %156, label %158

156:                                              ; preds = %152
  %157 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %19, i64* %157, align 8
  br label %160

158:                                              ; preds = %152
  %159 = trunc i64 %19 to i8
  store i8 %159, i8* %22, align 1
  br label %160

160:                                              ; preds = %158, %156, %5
  %161 = load %struct.spv_text_t*, %struct.spv_text_t** %6, align 8
  call void @spvTextDestroy(%struct.spv_text_t* %161) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #11
  ret i1 %13
}

declare i32 @spvBinaryToText(%struct.spv_context_t*, i32*, i64, i32, %struct.spv_text_t**, %struct.spv_diagnostic_t**) local_unnamed_addr #1

declare void @spvTextDestroy(%struct.spv_text_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8spvtools10SpirvTools8ValidateERKNSt3__16vectorIjNS1_9allocatorIjEEEE(%"class.spvtools::SpirvTools"* nocapture readonly, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %6 = bitcast i32** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint i32* %4 to i64
  %9 = sub i64 %7, %8
  %10 = ashr exact i64 %9, 2
  %11 = getelementptr inbounds %"class.spvtools::SpirvTools", %"class.spvtools::SpirvTools"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.spvtools::SpirvTools::Impl"*, %"struct.spvtools::SpirvTools::Impl"** %11, align 8
  %13 = getelementptr inbounds %"struct.spvtools::SpirvTools::Impl", %"struct.spvtools::SpirvTools::Impl"* %12, i64 0, i32 0
  %14 = load %struct.spv_context_t*, %struct.spv_context_t** %13, align 8
  %15 = tail call i32 @spvValidateBinary(%struct.spv_context_t* %14, i32* %4, i64 %10, %struct.spv_diagnostic_t** null) #11
  %16 = icmp eq i32 %15, 0
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8spvtools10SpirvTools8ValidateEPKjm(%"class.spvtools::SpirvTools"* nocapture readonly, i32*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.spvtools::SpirvTools", %"class.spvtools::SpirvTools"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"struct.spvtools::SpirvTools::Impl"*, %"struct.spvtools::SpirvTools::Impl"** %4, align 8
  %6 = getelementptr inbounds %"struct.spvtools::SpirvTools::Impl", %"struct.spvtools::SpirvTools::Impl"* %5, i64 0, i32 0
  %7 = load %struct.spv_context_t*, %struct.spv_context_t** %6, align 8
  %8 = tail call i32 @spvValidateBinary(%struct.spv_context_t* %7, i32* %1, i64 %2, %struct.spv_diagnostic_t** null) #11
  %9 = icmp eq i32 %8, 0
  ret i1 %9
}

declare i32 @spvValidateBinary(%struct.spv_context_t*, i32*, i64, %struct.spv_diagnostic_t**) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8spvtools10SpirvTools8ValidateEPKjmP23spv_validator_options_t(%"class.spvtools::SpirvTools"* nocapture readonly, i32*, i64, %struct.spv_validator_options_t*) local_unnamed_addr #0 align 2 {
  %5 = alloca %struct.spv_const_binary_t, align 8
  %6 = alloca %struct.spv_diagnostic_t*, align 8
  %7 = bitcast %struct.spv_const_binary_t* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #11
  %8 = getelementptr inbounds %struct.spv_const_binary_t, %struct.spv_const_binary_t* %5, i64 0, i32 0
  %9 = getelementptr inbounds %struct.spv_const_binary_t, %struct.spv_const_binary_t* %5, i64 0, i32 1
  store i32* %1, i32** %8, align 8
  store i64 %2, i64* %9, align 8
  %10 = bitcast %struct.spv_diagnostic_t** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #11
  store %struct.spv_diagnostic_t* null, %struct.spv_diagnostic_t** %6, align 8
  %11 = getelementptr inbounds %"class.spvtools::SpirvTools", %"class.spvtools::SpirvTools"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.spvtools::SpirvTools::Impl"*, %"struct.spvtools::SpirvTools::Impl"** %11, align 8
  %13 = getelementptr inbounds %"struct.spvtools::SpirvTools::Impl", %"struct.spvtools::SpirvTools::Impl"* %12, i64 0, i32 0
  %14 = load %struct.spv_context_t*, %struct.spv_context_t** %13, align 8
  %15 = call i32 @spvValidateWithOptions(%struct.spv_context_t* %14, %struct.spv_validator_options_t* %3, %struct.spv_const_binary_t* nonnull %5, %struct.spv_diagnostic_t** nonnull %6) #11
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %34, label %17

17:                                               ; preds = %4
  %18 = load %"struct.spvtools::SpirvTools::Impl"*, %"struct.spvtools::SpirvTools::Impl"** %11, align 8
  %19 = getelementptr inbounds %"struct.spvtools::SpirvTools::Impl", %"struct.spvtools::SpirvTools::Impl"* %18, i64 0, i32 0
  %20 = load %struct.spv_context_t*, %struct.spv_context_t** %19, align 8
  %21 = getelementptr inbounds %struct.spv_context_t, %struct.spv_context_t* %20, i64 0, i32 4, i32 0, i32 2
  %22 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %21, align 8
  %23 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %22, i64 0, i32 2
  %24 = load i8, i8* %23, align 8, !range !12
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %34

26:                                               ; preds = %17
  %27 = load %struct.spv_diagnostic_t*, %struct.spv_diagnostic_t** %6, align 8
  %28 = getelementptr inbounds %struct.spv_diagnostic_t, %struct.spv_diagnostic_t* %27, i64 0, i32 0
  %29 = getelementptr inbounds %struct.spv_diagnostic_t, %struct.spv_diagnostic_t* %27, i64 0, i32 1
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %struct.spv_context_t, %struct.spv_context_t* %20, i64 0, i32 4, i32 0, i32 1, i32 0
  %32 = load void (%"union.std::__1::__function::__policy_storage"*, i32, i8*, %struct.spv_position_t*, i8*)*, void (%"union.std::__1::__function::__policy_storage"*, i32, i8*, %struct.spv_position_t*, i8*)** %31, align 8
  %33 = getelementptr inbounds %struct.spv_context_t, %struct.spv_context_t* %20, i64 0, i32 4, i32 0, i32 0
  call void %32(%"union.std::__1::__function::__policy_storage"* %33, i32 2, i8* null, %struct.spv_position_t* dereferenceable(24) %28, i8* %30) #11
  br label %34

34:                                               ; preds = %26, %17, %4
  %35 = load %struct.spv_diagnostic_t*, %struct.spv_diagnostic_t** %6, align 8
  call void @spvDiagnosticDestroy(%struct.spv_diagnostic_t* %35) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #11
  ret i1 %16
}

declare i32 @spvValidateWithOptions(%struct.spv_context_t*, %struct.spv_validator_options_t*, %struct.spv_const_binary_t*, %struct.spv_diagnostic_t**) local_unnamed_addr #1

declare void @spvDiagnosticDestroy(%struct.spv_diagnostic_t*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8spvtools10SpirvTools7IsValidEv(%"class.spvtools::SpirvTools"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.spvtools::SpirvTools", %"class.spvtools::SpirvTools"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"struct.spvtools::SpirvTools::Impl"*, %"struct.spvtools::SpirvTools::Impl"** %2, align 8
  %4 = getelementptr inbounds %"struct.spvtools::SpirvTools::Impl", %"struct.spvtools::SpirvTools::Impl"* %3, i64 0, i32 0
  %5 = load %struct.spv_context_t*, %struct.spv_context_t** %4, align 8
  %6 = icmp ne %struct.spv_context_t* %5, null
  ret i1 %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110__function16__policy_invokerIFv19spv_message_level_tPKcRK14spv_position_tS4_EE12__call_emptyEPKNS0_16__policy_storageES2_S4_S7_S4_(%"union.std::__1::__function::__policy_storage"*, i32, i8*, %struct.spv_position_t* dereferenceable(24), i8*) #0 comdat align 2 {
  tail call void @_ZNSt3__125__throw_bad_function_callEv() #14
  unreachable
}

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__125__throw_bad_function_callEv() local_unnamed_addr #7 comdat {
  tail call void @abort() #13
  unreachable
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { noreturn }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{i8 0, i8 2}
