; ModuleID = '../../third_party/libwebp/src/dsp/enc.c'
source_filename = "../../third_party/libwebp/src/dsp/enc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8Histogram = type { i32, i32 }
%struct.VP8Matrix = type { [16 x i16], [16 x i16], [16 x i32], [16 x i32], [16 x i16] }

@VP8DspScan = hidden local_unnamed_addr constant [24 x i32] [i32 0, i32 4, i32 8, i32 12, i32 128, i32 132, i32 136, i32 140, i32 256, i32 260, i32 264, i32 268, i32 384, i32 388, i32 392, i32 396, i32 0, i32 4, i32 128, i32 132, i32 8, i32 12, i32 136, i32 140], align 16
@VP8EncDspInit.VP8EncDspInit_body_last_cpuinfo_used = internal global i32 (i32)* bitcast (i32 (i32)** @VP8EncDspInit.VP8EncDspInit_body_last_cpuinfo_used to i32 (i32)*), align 8
@VP8GetCPUInfo = external local_unnamed_addr global i32 (i32)*, align 8
@VP8CollectHistogram = common hidden local_unnamed_addr global void (i8*, i8*, i32, i32, %struct.VP8Histogram*)* null, align 8
@VP8ITransform = common hidden local_unnamed_addr global void (i8*, i16*, i8*, i32)* null, align 8
@VP8FTransform = common hidden local_unnamed_addr global void (i8*, i8*, i16*)* null, align 8
@VP8FTransform2 = common hidden local_unnamed_addr global void (i8*, i8*, i16*)* null, align 8
@VP8FTransformWHT = common hidden local_unnamed_addr global void (i16*, i16*)* null, align 8
@VP8EncPredLuma4 = common hidden local_unnamed_addr global void (i8*, i8*)* null, align 8
@VP8EncPredLuma16 = common hidden local_unnamed_addr global void (i8*, i8*, i8*)* null, align 8
@VP8EncPredChroma8 = common hidden local_unnamed_addr global void (i8*, i8*, i8*)* null, align 8
@VP8SSE16x16 = common hidden local_unnamed_addr global i32 (i8*, i8*)* null, align 8
@VP8SSE8x8 = common hidden local_unnamed_addr global i32 (i8*, i8*)* null, align 8
@VP8SSE16x8 = common hidden local_unnamed_addr global i32 (i8*, i8*)* null, align 8
@VP8SSE4x4 = common hidden local_unnamed_addr global i32 (i8*, i8*)* null, align 8
@VP8TDisto4x4 = common hidden local_unnamed_addr global i32 (i8*, i8*, i16*)* null, align 8
@VP8TDisto16x16 = common hidden local_unnamed_addr global i32 (i8*, i8*, i16*)* null, align 8
@VP8Mean16x4 = common hidden local_unnamed_addr global void (i8*, i32*)* null, align 8
@VP8EncQuantizeBlock = common hidden local_unnamed_addr global i32 (i16*, i16*, %struct.VP8Matrix*)* null, align 8
@VP8EncQuantize2Blocks = common hidden local_unnamed_addr global i32 (i16*, i16*, %struct.VP8Matrix*)* null, align 8
@VP8EncQuantizeBlockWHT = common hidden local_unnamed_addr global i32 (i16*, i16*, %struct.VP8Matrix*)* null, align 8
@VP8Copy4x4 = common hidden local_unnamed_addr global void (i8*, i8*)* null, align 8
@VP8Copy16x8 = common hidden local_unnamed_addr global void (i8*, i8*)* null, align 8
@tables_ok = internal global i32 0, align 4
@clip1 = internal unnamed_addr global [766 x i8] zeroinitializer, align 16
@kZigzag = internal unnamed_addr constant [16 x i8] c"\00\01\04\08\05\02\03\06\09\0C\0D\0A\07\0B\0E\0F", align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8SetHistogramData(i32* nocapture readonly, %struct.VP8Histogram* nocapture) local_unnamed_addr #0 {
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i64 [ 0, %2 ], [ %24, %3 ]
  %5 = phi i32 [ 1, %2 ], [ %23, %3 ]
  %6 = phi i32 [ 0, %2 ], [ %21, %3 ]
  %7 = getelementptr inbounds i32, i32* %0, i64 %4
  %8 = load i32, i32* %7, align 4
  %9 = icmp sgt i32 %8, 0
  %10 = icmp sgt i32 %8, %6
  %11 = and i1 %9, %10
  %12 = select i1 %11, i32 %8, i32 %6
  %13 = trunc i64 %4 to i32
  %14 = select i1 %9, i32 %13, i32 %5
  %15 = or i64 %4, 1
  %16 = getelementptr inbounds i32, i32* %0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %17, 0
  %19 = icmp sgt i32 %17, %12
  %20 = and i1 %18, %19
  %21 = select i1 %20, i32 %17, i32 %12
  %22 = trunc i64 %15 to i32
  %23 = select i1 %18, i32 %22, i32 %14
  %24 = add nuw nsw i64 %4, 2
  %25 = icmp eq i64 %24, 32
  br i1 %25, label %26, label %3

26:                                               ; preds = %3
  %27 = getelementptr inbounds %struct.VP8Histogram, %struct.VP8Histogram* %1, i64 0, i32 0
  store i32 %21, i32* %27, align 4
  %28 = getelementptr inbounds %struct.VP8Histogram, %struct.VP8Histogram* %1, i64 0, i32 1
  store i32 %23, i32* %28, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8EncDspInit() local_unnamed_addr #2 {
  %1 = load volatile i32 (i32)*, i32 (i32)** @VP8EncDspInit.VP8EncDspInit_body_last_cpuinfo_used, align 8
  %2 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %3 = icmp eq i32 (i32)* %1, %2
  br i1 %3, label %35, label %4

4:                                                ; preds = %0
  tail call void @VP8DspInit() #7
  %5 = load volatile i32, i32* @tables_ok, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %22

7:                                                ; preds = %4, %36
  %8 = phi i64 [ %45, %36 ], [ 0, %4 ]
  %9 = phi <16 x i64> [ %46, %36 ], [ <i64 -255, i64 -254, i64 -253, i64 -252, i64 -251, i64 -250, i64 -249, i64 -248, i64 -247, i64 -246, i64 -245, i64 -244, i64 -243, i64 -242, i64 -241, i64 -240>, %4 ]
  %10 = phi <16 x i32> [ %47, %36 ], [ <i32 -255, i32 -254, i32 -253, i32 -252, i32 -251, i32 -250, i32 -249, i32 -248, i32 -247, i32 -246, i32 -245, i32 -244, i32 -243, i32 -242, i32 -241, i32 -240>, %4 ]
  %11 = icmp ugt <16 x i32> %10, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %12 = icmp slt <16 x i64> %9, zeroinitializer
  %13 = select <16 x i1> %12, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %14 = select <16 x i1> %11, <16 x i32> %13, <16 x i32> %10
  %15 = trunc <16 x i32> %14 to <16 x i8>
  %16 = getelementptr inbounds [766 x i8], [766 x i8]* @clip1, i64 0, i64 %8
  %17 = bitcast i8* %16 to <16 x i8>*
  store <16 x i8> %15, <16 x i8>* %17, align 16
  %18 = or i64 %8, 16
  %19 = add <16 x i32> %10, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %20 = icmp eq i64 %18, 752
  br i1 %20, label %21, label %36, !llvm.loop !2

21:                                               ; preds = %7
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 752), align 16
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 753), align 1
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 754), align 2
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 755), align 1
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 756), align 4
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 757), align 1
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 758), align 2
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 759), align 1
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 760), align 8
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 761), align 1
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 762), align 2
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 763), align 1
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 764), align 4
  store i8 -1, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 765), align 1
  store volatile i32 1, i32* @tables_ok, align 4
  br label %22

22:                                               ; preds = %21, %4
  store void (i8*, i16*, i8*, i32)* @ITransform_C, void (i8*, i16*, i8*, i32)** @VP8ITransform, align 8
  store void (i8*, i8*, i16*)* @FTransform_C, void (i8*, i8*, i16*)** @VP8FTransform, align 8
  store void (i16*, i16*)* @FTransformWHT_C, void (i16*, i16*)** @VP8FTransformWHT, align 8
  store i32 (i8*, i8*, i16*)* @Disto4x4_C, i32 (i8*, i8*, i16*)** @VP8TDisto4x4, align 8
  store i32 (i8*, i8*, i16*)* @Disto16x16_C, i32 (i8*, i8*, i16*)** @VP8TDisto16x16, align 8
  store void (i8*, i8*, i32, i32, %struct.VP8Histogram*)* @CollectHistogram_C, void (i8*, i8*, i32, i32, %struct.VP8Histogram*)** @VP8CollectHistogram, align 8
  store i32 (i8*, i8*)* @SSE16x16_C, i32 (i8*, i8*)** @VP8SSE16x16, align 8
  store i32 (i8*, i8*)* @SSE16x8_C, i32 (i8*, i8*)** @VP8SSE16x8, align 8
  store i32 (i8*, i8*)* @SSE8x8_C, i32 (i8*, i8*)** @VP8SSE8x8, align 8
  store i32 (i8*, i8*)* @SSE4x4_C, i32 (i8*, i8*)** @VP8SSE4x4, align 8
  store i32 (i16*, i16*, %struct.VP8Matrix*)* @QuantizeBlock_C, i32 (i16*, i16*, %struct.VP8Matrix*)** @VP8EncQuantizeBlock, align 8
  store i32 (i16*, i16*, %struct.VP8Matrix*)* @Quantize2Blocks_C, i32 (i16*, i16*, %struct.VP8Matrix*)** @VP8EncQuantize2Blocks, align 8
  store void (i8*, i8*, i16*)* @FTransform2_C, void (i8*, i8*, i16*)** @VP8FTransform2, align 8
  store void (i8*, i8*)* @Intra4Preds_C, void (i8*, i8*)** @VP8EncPredLuma4, align 8
  store void (i8*, i8*, i8*)* @Intra16Preds_C, void (i8*, i8*, i8*)** @VP8EncPredLuma16, align 8
  store void (i8*, i8*, i8*)* @IntraChromaPreds_C, void (i8*, i8*, i8*)** @VP8EncPredChroma8, align 8
  store void (i8*, i32*)* @Mean16x4_C, void (i8*, i32*)** @VP8Mean16x4, align 8
  store i32 (i16*, i16*, %struct.VP8Matrix*)* @QuantizeBlock_C, i32 (i16*, i16*, %struct.VP8Matrix*)** @VP8EncQuantizeBlockWHT, align 8
  store void (i8*, i8*)* @Copy4x4_C, void (i8*, i8*)** @VP8Copy4x4, align 8
  store void (i8*, i8*)* @Copy16x8_C, void (i8*, i8*)** @VP8Copy16x8, align 8
  %23 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %24 = icmp eq i32 (i32)* %23, null
  br i1 %24, label %33, label %25

25:                                               ; preds = %22
  %26 = tail call i32 %23(i32 0) #7
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %25
  tail call void @VP8EncDspInitSSE2() #7
  %29 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %30 = tail call i32 %29(i32 3) #7
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %33, label %32

32:                                               ; preds = %28
  tail call void @VP8EncDspInitSSE41() #7
  br label %33

33:                                               ; preds = %22, %25, %28, %32
  %34 = load i64, i64* bitcast (i32 (i32)** @VP8GetCPUInfo to i64*), align 8
  store volatile i64 %34, i64* bitcast (i32 (i32)** @VP8EncDspInit.VP8EncDspInit_body_last_cpuinfo_used to i64*), align 8
  br label %35

35:                                               ; preds = %0, %33
  ret void

36:                                               ; preds = %7
  %37 = add <16 x i64> %9, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %38 = icmp ugt <16 x i32> %19, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %39 = icmp slt <16 x i64> %37, zeroinitializer
  %40 = select <16 x i1> %39, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %41 = select <16 x i1> %38, <16 x i32> %40, <16 x i32> %19
  %42 = trunc <16 x i32> %41 to <16 x i8>
  %43 = getelementptr inbounds [766 x i8], [766 x i8]* @clip1, i64 0, i64 %18
  %44 = bitcast i8* %43 to <16 x i8>*
  store <16 x i8> %42, <16 x i8>* %44, align 16
  %45 = add nuw nsw i64 %8, 32
  %46 = add <16 x i64> %9, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %47 = add <16 x i32> %10, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  br label %7
}

declare void @VP8DspInit() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @ITransform_C(i8* nocapture readonly, i16* nocapture readonly, i8* nocapture, i32) #2 {
  tail call fastcc void @ITransformOne(i8* %0, i16* %1, i8* %2)
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds i8, i8* %0, i64 4
  %8 = getelementptr inbounds i16, i16* %1, i64 16
  %9 = getelementptr inbounds i8, i8* %2, i64 4
  tail call fastcc void @ITransformOne(i8* %7, i16* %8, i8* %9)
  br label %10

10:                                               ; preds = %4, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @FTransform_C(i8* nocapture readonly, i8* nocapture readonly, i16* nocapture) #2 {
  %4 = alloca [16 x i32], align 16
  %5 = bitcast [16 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 64, i1 false)
  %6 = load i8, i8* %0, align 1
  %7 = zext i8 %6 to i32
  %8 = load i8, i8* %1, align 1
  %9 = zext i8 %8 to i32
  %10 = sub nsw i32 %7, %9
  %11 = getelementptr inbounds i8, i8* %0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds i8, i8* %1, i64 1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = sub nsw i32 %13, %16
  %18 = getelementptr inbounds i8, i8* %0, i64 2
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %1, i64 2
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = sub nsw i32 %20, %23
  %25 = getelementptr inbounds i8, i8* %0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds i8, i8* %1, i64 3
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = sub nsw i32 %27, %30
  %32 = add nsw i32 %31, %10
  %33 = add nsw i32 %24, %17
  %34 = sub nsw i32 %17, %24
  %35 = sub nsw i32 %10, %31
  %36 = add nsw i32 %32, %33
  %37 = shl nsw i32 %36, 3
  %38 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  store i32 %37, i32* %38, align 16
  %39 = mul nsw i32 %34, 2217
  %40 = mul nsw i32 %35, 5352
  %41 = add nsw i32 %39, 1812
  %42 = add nsw i32 %41, %40
  %43 = ashr i32 %42, 9
  %44 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  store i32 %43, i32* %44, align 4
  %45 = sub nsw i32 %32, %33
  %46 = shl nsw i32 %45, 3
  %47 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  store i32 %46, i32* %47, align 8
  %48 = mul nsw i32 %35, 2217
  %49 = mul nsw i32 %34, -5352
  %50 = add nsw i32 %49, 937
  %51 = add nsw i32 %50, %48
  %52 = ashr i32 %51, 9
  %53 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds i8, i8* %0, i64 32
  %55 = getelementptr inbounds i8, i8* %1, i64 32
  %56 = load i8, i8* %54, align 1
  %57 = zext i8 %56 to i32
  %58 = load i8, i8* %55, align 1
  %59 = zext i8 %58 to i32
  %60 = sub nsw i32 %57, %59
  %61 = getelementptr inbounds i8, i8* %0, i64 33
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = getelementptr inbounds i8, i8* %1, i64 33
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = sub nsw i32 %63, %66
  %68 = getelementptr inbounds i8, i8* %0, i64 34
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = getelementptr inbounds i8, i8* %1, i64 34
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = sub nsw i32 %70, %73
  %75 = getelementptr inbounds i8, i8* %0, i64 35
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = getelementptr inbounds i8, i8* %1, i64 35
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = sub nsw i32 %77, %80
  %82 = add nsw i32 %81, %60
  %83 = add nsw i32 %74, %67
  %84 = sub nsw i32 %67, %74
  %85 = sub nsw i32 %60, %81
  %86 = add nsw i32 %82, %83
  %87 = shl nsw i32 %86, 3
  %88 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  store i32 %87, i32* %88, align 16
  %89 = mul nsw i32 %84, 2217
  %90 = mul nsw i32 %85, 5352
  %91 = add nsw i32 %89, 1812
  %92 = add nsw i32 %91, %90
  %93 = ashr i32 %92, 9
  %94 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  store i32 %93, i32* %94, align 4
  %95 = sub nsw i32 %82, %83
  %96 = shl nsw i32 %95, 3
  %97 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  store i32 %96, i32* %97, align 8
  %98 = mul nsw i32 %85, 2217
  %99 = mul nsw i32 %84, -5352
  %100 = add nsw i32 %99, 937
  %101 = add nsw i32 %100, %98
  %102 = ashr i32 %101, 9
  %103 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  store i32 %102, i32* %103, align 4
  %104 = getelementptr inbounds i8, i8* %0, i64 64
  %105 = getelementptr inbounds i8, i8* %1, i64 64
  %106 = load i8, i8* %104, align 1
  %107 = zext i8 %106 to i32
  %108 = load i8, i8* %105, align 1
  %109 = zext i8 %108 to i32
  %110 = sub nsw i32 %107, %109
  %111 = getelementptr inbounds i8, i8* %0, i64 65
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = getelementptr inbounds i8, i8* %1, i64 65
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = sub nsw i32 %113, %116
  %118 = getelementptr inbounds i8, i8* %0, i64 66
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = getelementptr inbounds i8, i8* %1, i64 66
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = sub nsw i32 %120, %123
  %125 = getelementptr inbounds i8, i8* %0, i64 67
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = getelementptr inbounds i8, i8* %1, i64 67
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = sub nsw i32 %127, %130
  %132 = add nsw i32 %131, %110
  %133 = add nsw i32 %124, %117
  %134 = sub nsw i32 %117, %124
  %135 = sub nsw i32 %110, %131
  %136 = add nsw i32 %132, %133
  %137 = shl nsw i32 %136, 3
  %138 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  store i32 %137, i32* %138, align 16
  %139 = mul nsw i32 %134, 2217
  %140 = mul nsw i32 %135, 5352
  %141 = add nsw i32 %139, 1812
  %142 = add nsw i32 %141, %140
  %143 = ashr i32 %142, 9
  %144 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  store i32 %143, i32* %144, align 4
  %145 = sub nsw i32 %132, %133
  %146 = shl nsw i32 %145, 3
  %147 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  store i32 %146, i32* %147, align 8
  %148 = mul nsw i32 %135, 2217
  %149 = mul nsw i32 %134, -5352
  %150 = add nsw i32 %149, 937
  %151 = add nsw i32 %150, %148
  %152 = ashr i32 %151, 9
  %153 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  store i32 %152, i32* %153, align 4
  %154 = getelementptr inbounds i8, i8* %0, i64 96
  %155 = getelementptr inbounds i8, i8* %1, i64 96
  %156 = load i8, i8* %154, align 1
  %157 = zext i8 %156 to i32
  %158 = load i8, i8* %155, align 1
  %159 = zext i8 %158 to i32
  %160 = sub nsw i32 %157, %159
  %161 = getelementptr inbounds i8, i8* %0, i64 97
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = getelementptr inbounds i8, i8* %1, i64 97
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = sub nsw i32 %163, %166
  %168 = getelementptr inbounds i8, i8* %0, i64 98
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = getelementptr inbounds i8, i8* %1, i64 98
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = sub nsw i32 %170, %173
  %175 = getelementptr inbounds i8, i8* %0, i64 99
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = getelementptr inbounds i8, i8* %1, i64 99
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = sub nsw i32 %177, %180
  %182 = add nsw i32 %181, %160
  %183 = add nsw i32 %174, %167
  %184 = sub nsw i32 %167, %174
  %185 = sub nsw i32 %160, %181
  %186 = add nsw i32 %182, %183
  %187 = shl nsw i32 %186, 3
  %188 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  store i32 %187, i32* %188, align 16
  %189 = mul nsw i32 %184, 2217
  %190 = mul nsw i32 %185, 5352
  %191 = add nsw i32 %189, 1812
  %192 = add nsw i32 %191, %190
  %193 = ashr i32 %192, 9
  %194 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  store i32 %193, i32* %194, align 4
  %195 = sub nsw i32 %182, %183
  %196 = shl nsw i32 %195, 3
  %197 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  store i32 %196, i32* %197, align 8
  %198 = mul nsw i32 %185, 2217
  %199 = mul nsw i32 %184, -5352
  %200 = add nsw i32 %199, 937
  %201 = add nsw i32 %200, %198
  %202 = ashr i32 %201, 9
  %203 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  store i32 %202, i32* %203, align 4
  %204 = load i32, i32* %38, align 16
  %205 = add nsw i32 %187, %204
  %206 = load i32, i32* %88, align 16
  %207 = add nsw i32 %137, %206
  %208 = sub nsw i32 %206, %137
  %209 = sub nsw i32 %204, %187
  %210 = add i32 %205, 7
  %211 = add i32 %210, %207
  %212 = lshr i32 %211, 4
  %213 = trunc i32 %212 to i16
  store i16 %213, i16* %2, align 2
  %214 = mul nsw i32 %208, 2217
  %215 = mul nsw i32 %209, 5352
  %216 = add i32 %215, 12000
  %217 = add i32 %216, %214
  %218 = lshr i32 %217, 16
  %219 = icmp ne i32 %209, 0
  %220 = zext i1 %219 to i32
  %221 = add nuw nsw i32 %218, %220
  %222 = trunc i32 %221 to i16
  %223 = getelementptr inbounds i16, i16* %2, i64 4
  store i16 %222, i16* %223, align 2
  %224 = sub i32 %210, %207
  %225 = lshr i32 %224, 4
  %226 = trunc i32 %225 to i16
  %227 = getelementptr inbounds i16, i16* %2, i64 8
  store i16 %226, i16* %227, align 2
  %228 = mul nsw i32 %209, 2217
  %229 = mul i32 %208, -5352
  %230 = add i32 %228, 51000
  %231 = add i32 %230, %229
  %232 = lshr i32 %231, 16
  %233 = trunc i32 %232 to i16
  %234 = getelementptr inbounds i16, i16* %2, i64 12
  store i16 %233, i16* %234, align 2
  %235 = load i32, i32* %44, align 4
  %236 = add nsw i32 %193, %235
  %237 = load i32, i32* %94, align 4
  %238 = load i32, i32* %144, align 4
  %239 = add nsw i32 %238, %237
  %240 = sub nsw i32 %237, %238
  %241 = sub nsw i32 %235, %193
  %242 = add i32 %236, 7
  %243 = add i32 %242, %239
  %244 = lshr i32 %243, 4
  %245 = trunc i32 %244 to i16
  %246 = getelementptr inbounds i16, i16* %2, i64 1
  store i16 %245, i16* %246, align 2
  %247 = mul nsw i32 %240, 2217
  %248 = mul nsw i32 %241, 5352
  %249 = add i32 %248, 12000
  %250 = add i32 %249, %247
  %251 = lshr i32 %250, 16
  %252 = icmp ne i32 %241, 0
  %253 = zext i1 %252 to i32
  %254 = add nuw nsw i32 %251, %253
  %255 = trunc i32 %254 to i16
  %256 = getelementptr inbounds i16, i16* %2, i64 5
  store i16 %255, i16* %256, align 2
  %257 = sub i32 %242, %239
  %258 = lshr i32 %257, 4
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds i16, i16* %2, i64 9
  store i16 %259, i16* %260, align 2
  %261 = mul nsw i32 %241, 2217
  %262 = mul i32 %240, -5352
  %263 = add i32 %261, 51000
  %264 = add i32 %263, %262
  %265 = lshr i32 %264, 16
  %266 = trunc i32 %265 to i16
  %267 = getelementptr inbounds i16, i16* %2, i64 13
  store i16 %266, i16* %267, align 2
  %268 = load i32, i32* %47, align 8
  %269 = add nsw i32 %196, %268
  %270 = load i32, i32* %97, align 8
  %271 = load i32, i32* %147, align 8
  %272 = add nsw i32 %271, %270
  %273 = sub nsw i32 %270, %271
  %274 = sub nsw i32 %268, %196
  %275 = add i32 %269, 7
  %276 = add i32 %275, %272
  %277 = lshr i32 %276, 4
  %278 = trunc i32 %277 to i16
  %279 = getelementptr inbounds i16, i16* %2, i64 2
  store i16 %278, i16* %279, align 2
  %280 = mul nsw i32 %273, 2217
  %281 = mul nsw i32 %274, 5352
  %282 = add i32 %281, 12000
  %283 = add i32 %282, %280
  %284 = lshr i32 %283, 16
  %285 = icmp ne i32 %274, 0
  %286 = zext i1 %285 to i32
  %287 = add nuw nsw i32 %284, %286
  %288 = trunc i32 %287 to i16
  %289 = getelementptr inbounds i16, i16* %2, i64 6
  store i16 %288, i16* %289, align 2
  %290 = sub i32 %275, %272
  %291 = lshr i32 %290, 4
  %292 = trunc i32 %291 to i16
  %293 = getelementptr inbounds i16, i16* %2, i64 10
  store i16 %292, i16* %293, align 2
  %294 = mul nsw i32 %274, 2217
  %295 = mul i32 %273, -5352
  %296 = add i32 %294, 51000
  %297 = add i32 %296, %295
  %298 = lshr i32 %297, 16
  %299 = trunc i32 %298 to i16
  %300 = getelementptr inbounds i16, i16* %2, i64 14
  store i16 %299, i16* %300, align 2
  %301 = load i32, i32* %53, align 4
  %302 = load i32, i32* %203, align 4
  %303 = add nsw i32 %302, %301
  %304 = load i32, i32* %103, align 4
  %305 = load i32, i32* %153, align 4
  %306 = add nsw i32 %305, %304
  %307 = sub nsw i32 %304, %305
  %308 = sub nsw i32 %301, %302
  %309 = add i32 %303, 7
  %310 = add i32 %309, %306
  %311 = lshr i32 %310, 4
  %312 = trunc i32 %311 to i16
  %313 = getelementptr inbounds i16, i16* %2, i64 3
  store i16 %312, i16* %313, align 2
  %314 = mul nsw i32 %307, 2217
  %315 = mul nsw i32 %308, 5352
  %316 = add i32 %315, 12000
  %317 = add i32 %316, %314
  %318 = lshr i32 %317, 16
  %319 = icmp ne i32 %308, 0
  %320 = zext i1 %319 to i32
  %321 = add nuw nsw i32 %318, %320
  %322 = trunc i32 %321 to i16
  %323 = getelementptr inbounds i16, i16* %2, i64 7
  store i16 %322, i16* %323, align 2
  %324 = sub i32 %309, %306
  %325 = lshr i32 %324, 4
  %326 = trunc i32 %325 to i16
  %327 = getelementptr inbounds i16, i16* %2, i64 11
  store i16 %326, i16* %327, align 2
  %328 = mul nsw i32 %308, 2217
  %329 = mul i32 %307, -5352
  %330 = add i32 %328, 51000
  %331 = add i32 %330, %329
  %332 = lshr i32 %331, 16
  %333 = trunc i32 %332 to i16
  %334 = getelementptr inbounds i16, i16* %2, i64 15
  store i16 %333, i16* %334, align 2
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @FTransformWHT_C(i16* nocapture readonly, i16* nocapture) #2 {
  %3 = alloca [16 x i32], align 16
  %4 = bitcast [16 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #7
  %5 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12
  %6 = bitcast i32* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 16, i1 false)
  %7 = load i16, i16* %0, align 2
  %8 = sext i16 %7 to i32
  %9 = getelementptr inbounds i16, i16* %0, i64 32
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i32
  %12 = add nsw i32 %11, %8
  %13 = getelementptr inbounds i16, i16* %0, i64 16
  %14 = load i16, i16* %13, align 2
  %15 = sext i16 %14 to i32
  %16 = getelementptr inbounds i16, i16* %0, i64 48
  %17 = load i16, i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = add nsw i32 %18, %15
  %20 = sub nsw i32 %15, %18
  %21 = sub nsw i32 %8, %11
  %22 = add nsw i32 %19, %12
  %23 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0
  store i32 %22, i32* %23, align 16
  %24 = add nsw i32 %20, %21
  %25 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1
  store i32 %24, i32* %25, align 4
  %26 = sub nsw i32 %21, %20
  %27 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2
  store i32 %26, i32* %27, align 8
  %28 = sub nsw i32 %12, %19
  %29 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3
  store i32 %28, i32* %29, align 4
  %30 = getelementptr inbounds i16, i16* %0, i64 64
  %31 = load i16, i16* %30, align 2
  %32 = sext i16 %31 to i32
  %33 = getelementptr inbounds i16, i16* %0, i64 96
  %34 = load i16, i16* %33, align 2
  %35 = sext i16 %34 to i32
  %36 = add nsw i32 %35, %32
  %37 = getelementptr inbounds i16, i16* %0, i64 80
  %38 = load i16, i16* %37, align 2
  %39 = sext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %0, i64 112
  %41 = load i16, i16* %40, align 2
  %42 = sext i16 %41 to i32
  %43 = add nsw i32 %42, %39
  %44 = sub nsw i32 %39, %42
  %45 = sub nsw i32 %32, %35
  %46 = add nsw i32 %43, %36
  %47 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4
  store i32 %46, i32* %47, align 16
  %48 = add nsw i32 %44, %45
  %49 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5
  store i32 %48, i32* %49, align 4
  %50 = sub nsw i32 %45, %44
  %51 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6
  store i32 %50, i32* %51, align 8
  %52 = sub nsw i32 %36, %43
  %53 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds i16, i16* %0, i64 128
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = getelementptr inbounds i16, i16* %0, i64 160
  %58 = load i16, i16* %57, align 2
  %59 = sext i16 %58 to i32
  %60 = add nsw i32 %59, %56
  %61 = getelementptr inbounds i16, i16* %0, i64 144
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = getelementptr inbounds i16, i16* %0, i64 176
  %65 = load i16, i16* %64, align 2
  %66 = sext i16 %65 to i32
  %67 = add nsw i32 %66, %63
  %68 = sub nsw i32 %63, %66
  %69 = sub nsw i32 %56, %59
  %70 = add nsw i32 %67, %60
  %71 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8
  store i32 %70, i32* %71, align 16
  %72 = add nsw i32 %68, %69
  %73 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9
  store i32 %72, i32* %73, align 4
  %74 = sub nsw i32 %69, %68
  %75 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10
  store i32 %74, i32* %75, align 8
  %76 = sub nsw i32 %60, %67
  %77 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11
  store i32 %76, i32* %77, align 4
  %78 = getelementptr inbounds i16, i16* %0, i64 192
  %79 = load i16, i16* %78, align 2
  %80 = sext i16 %79 to i32
  %81 = getelementptr inbounds i16, i16* %0, i64 224
  %82 = load i16, i16* %81, align 2
  %83 = sext i16 %82 to i32
  %84 = add nsw i32 %83, %80
  %85 = getelementptr inbounds i16, i16* %0, i64 208
  %86 = load i16, i16* %85, align 2
  %87 = sext i16 %86 to i32
  %88 = getelementptr inbounds i16, i16* %0, i64 240
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = add nsw i32 %90, %87
  %92 = sub nsw i32 %87, %90
  %93 = sub nsw i32 %80, %83
  %94 = add nsw i32 %91, %84
  %95 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12
  store i32 %94, i32* %95, align 16
  %96 = add nsw i32 %92, %93
  %97 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13
  store i32 %96, i32* %97, align 4
  %98 = sub nsw i32 %93, %92
  %99 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14
  store i32 %98, i32* %99, align 8
  %100 = sub nsw i32 %84, %91
  %101 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15
  store i32 %100, i32* %101, align 4
  %102 = add nsw i32 %70, %22
  %103 = add nsw i32 %94, %46
  %104 = sub nsw i32 %46, %94
  %105 = sub nsw i32 %22, %70
  %106 = add nsw i32 %103, %102
  %107 = add nsw i32 %104, %105
  %108 = sub nsw i32 %105, %104
  %109 = sub nsw i32 %102, %103
  %110 = lshr i32 %106, 1
  %111 = trunc i32 %110 to i16
  store i16 %111, i16* %1, align 2
  %112 = lshr i32 %107, 1
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %1, i64 4
  store i16 %113, i16* %114, align 2
  %115 = lshr i32 %108, 1
  %116 = trunc i32 %115 to i16
  %117 = getelementptr inbounds i16, i16* %1, i64 8
  store i16 %116, i16* %117, align 2
  %118 = lshr i32 %109, 1
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %1, i64 12
  store i16 %119, i16* %120, align 2
  %121 = load i32, i32* %25, align 4
  %122 = add nsw i32 %72, %121
  %123 = add nsw i32 %96, %48
  %124 = sub nsw i32 %48, %96
  %125 = sub nsw i32 %121, %72
  %126 = add nsw i32 %123, %122
  %127 = add nsw i32 %124, %125
  %128 = sub nsw i32 %125, %124
  %129 = sub nsw i32 %122, %123
  %130 = lshr i32 %126, 1
  %131 = trunc i32 %130 to i16
  %132 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %131, i16* %132, align 2
  %133 = lshr i32 %127, 1
  %134 = trunc i32 %133 to i16
  %135 = getelementptr inbounds i16, i16* %1, i64 5
  store i16 %134, i16* %135, align 2
  %136 = lshr i32 %128, 1
  %137 = trunc i32 %136 to i16
  %138 = getelementptr inbounds i16, i16* %1, i64 9
  store i16 %137, i16* %138, align 2
  %139 = lshr i32 %129, 1
  %140 = trunc i32 %139 to i16
  %141 = getelementptr inbounds i16, i16* %1, i64 13
  store i16 %140, i16* %141, align 2
  %142 = load i32, i32* %27, align 8
  %143 = add nsw i32 %74, %142
  %144 = load i32, i32* %51, align 8
  %145 = add nsw i32 %98, %144
  %146 = sub nsw i32 %144, %98
  %147 = sub nsw i32 %142, %74
  %148 = add nsw i32 %145, %143
  %149 = add nsw i32 %146, %147
  %150 = sub nsw i32 %147, %146
  %151 = sub nsw i32 %143, %145
  %152 = lshr i32 %148, 1
  %153 = trunc i32 %152 to i16
  %154 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %153, i16* %154, align 2
  %155 = lshr i32 %149, 1
  %156 = trunc i32 %155 to i16
  %157 = getelementptr inbounds i16, i16* %1, i64 6
  store i16 %156, i16* %157, align 2
  %158 = lshr i32 %150, 1
  %159 = trunc i32 %158 to i16
  %160 = getelementptr inbounds i16, i16* %1, i64 10
  store i16 %159, i16* %160, align 2
  %161 = lshr i32 %151, 1
  %162 = trunc i32 %161 to i16
  %163 = getelementptr inbounds i16, i16* %1, i64 14
  store i16 %162, i16* %163, align 2
  %164 = load i32, i32* %29, align 4
  %165 = load i32, i32* %77, align 4
  %166 = add nsw i32 %165, %164
  %167 = load i32, i32* %53, align 4
  %168 = add nsw i32 %100, %167
  %169 = sub nsw i32 %167, %100
  %170 = sub nsw i32 %164, %165
  %171 = add nsw i32 %168, %166
  %172 = add nsw i32 %169, %170
  %173 = sub nsw i32 %170, %169
  %174 = sub nsw i32 %166, %168
  %175 = lshr i32 %171, 1
  %176 = trunc i32 %175 to i16
  %177 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 %176, i16* %177, align 2
  %178 = lshr i32 %172, 1
  %179 = trunc i32 %178 to i16
  %180 = getelementptr inbounds i16, i16* %1, i64 7
  store i16 %179, i16* %180, align 2
  %181 = lshr i32 %173, 1
  %182 = trunc i32 %181 to i16
  %183 = getelementptr inbounds i16, i16* %1, i64 11
  store i16 %182, i16* %183, align 2
  %184 = lshr i32 %174, 1
  %185 = trunc i32 %184 to i16
  %186 = getelementptr inbounds i16, i16* %1, i64 15
  store i16 %185, i16* %186, align 2
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #7
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Disto4x4_C(i8* nocapture readonly, i8* nocapture readonly, i16* nocapture readonly) #4 {
  %4 = tail call fastcc i32 @TTransform(i8* %0, i16* %2)
  %5 = tail call fastcc i32 @TTransform(i8* %1, i16* %2)
  %6 = sub nsw i32 %5, %4
  %7 = icmp slt i32 %6, 0
  %8 = sub nsw i32 0, %6
  %9 = select i1 %7, i32 %8, i32 %6
  %10 = lshr i32 %9, 5
  ret i32 %10
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Disto16x16_C(i8* nocapture readonly, i8* nocapture readonly, i16* nocapture readonly) #4 {
  br label %4

4:                                                ; preds = %3, %4
  %5 = phi i64 [ 0, %3 ], [ %42, %4 ]
  %6 = phi i32 [ 0, %3 ], [ %41, %4 ]
  %7 = getelementptr inbounds i8, i8* %0, i64 %5
  %8 = getelementptr inbounds i8, i8* %1, i64 %5
  %9 = tail call fastcc i32 @TTransform(i8* %7, i16* %2) #7
  %10 = tail call fastcc i32 @TTransform(i8* %8, i16* %2) #7
  %11 = getelementptr inbounds i8, i8* %7, i64 4
  %12 = getelementptr inbounds i8, i8* %8, i64 4
  %13 = tail call fastcc i32 @TTransform(i8* %11, i16* %2) #7
  %14 = tail call fastcc i32 @TTransform(i8* %12, i16* %2) #7
  %15 = getelementptr inbounds i8, i8* %7, i64 8
  %16 = getelementptr inbounds i8, i8* %8, i64 8
  %17 = tail call fastcc i32 @TTransform(i8* %15, i16* %2) #7
  %18 = tail call fastcc i32 @TTransform(i8* %16, i16* %2) #7
  %19 = getelementptr inbounds i8, i8* %7, i64 12
  %20 = getelementptr inbounds i8, i8* %8, i64 12
  %21 = tail call fastcc i32 @TTransform(i8* %19, i16* %2) #7
  %22 = tail call fastcc i32 @TTransform(i8* %20, i16* %2) #7
  %23 = insertelement <4 x i32> undef, i32 %22, i32 0
  %24 = insertelement <4 x i32> %23, i32 %18, i32 1
  %25 = insertelement <4 x i32> %24, i32 %14, i32 2
  %26 = insertelement <4 x i32> %25, i32 %10, i32 3
  %27 = insertelement <4 x i32> undef, i32 %21, i32 0
  %28 = insertelement <4 x i32> %27, i32 %17, i32 1
  %29 = insertelement <4 x i32> %28, i32 %13, i32 2
  %30 = insertelement <4 x i32> %29, i32 %9, i32 3
  %31 = sub nsw <4 x i32> %26, %30
  %32 = icmp slt <4 x i32> %31, zeroinitializer
  %33 = sub nsw <4 x i32> zeroinitializer, %31
  %34 = select <4 x i1> %32, <4 x i32> %33, <4 x i32> %31
  %35 = lshr <4 x i32> %34, <i32 5, i32 5, i32 5, i32 5>
  %36 = shufflevector <4 x i32> %35, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %37 = add nsw <4 x i32> %35, %36
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %39 = add nsw <4 x i32> %37, %38
  %40 = extractelement <4 x i32> %39, i32 0
  %41 = add nsw i32 %40, %6
  %42 = add nuw nsw i64 %5, 128
  %43 = icmp ult i64 %42, 512
  br i1 %43, label %4, label %44

44:                                               ; preds = %4
  ret i32 %41
}

; Function Attrs: nounwind ssp uwtable
define internal void @CollectHistogram_C(i8*, i8*, i32, i32, %struct.VP8Histogram* nocapture) #2 {
  %6 = alloca [32 x i32], align 16
  %7 = alloca [16 x i16], align 16
  %8 = bitcast [32 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 128, i1 false)
  %9 = icmp slt i32 %2, %3
  br i1 %9, label %10, label %58

10:                                               ; preds = %5
  %11 = bitcast [16 x i16]* %7 to i8*
  %12 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = bitcast [16 x i16]* %7 to i8*
  br label %15

15:                                               ; preds = %54, %10
  %16 = phi i64 [ %13, %10 ], [ %55, %54 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 32, i1 false)
  %17 = load void (i8*, i8*, i16*)*, void (i8*, i8*, i16*)** @VP8FTransform, align 8
  %18 = getelementptr inbounds [24 x i32], [24 x i32]* @VP8DspScan, i64 0, i64 %16
  %19 = load i32, i32* %18, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = getelementptr inbounds i8, i8* %1, i64 %20
  call void %17(i8* %21, i8* %22, i16* nonnull %12) #7
  br label %23

23:                                               ; preds = %23, %15
  %24 = phi i64 [ 0, %15 ], [ %52, %23 ]
  %25 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %24
  %26 = load i16, i16* %25, align 4
  %27 = sext i16 %26 to i32
  %28 = icmp slt i32 %27, 0
  %29 = sub nsw i32 0, %27
  %30 = select i1 %28, i32 %29, i32 %27
  %31 = lshr i32 %30, 3
  %32 = icmp ult i32 %31, 31
  %33 = select i1 %32, i32 %31, i32 31
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %35, align 4
  %38 = or i64 %24, 1
  %39 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = icmp slt i32 %41, 0
  %43 = sub nsw i32 0, %41
  %44 = select i1 %42, i32 %43, i32 %41
  %45 = lshr i32 %44, 3
  %46 = icmp ult i32 %45, 31
  %47 = select i1 %46, i32 %45, i32 31
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %49, align 4
  %52 = add nuw nsw i64 %24, 2
  %53 = icmp eq i64 %52, 16
  br i1 %53, label %54, label %23

54:                                               ; preds = %23
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #7
  %55 = add nsw i64 %16, 1
  %56 = trunc i64 %55 to i32
  %57 = icmp eq i32 %56, %3
  br i1 %57, label %58, label %15

58:                                               ; preds = %54, %5
  br label %59

59:                                               ; preds = %59, %58
  %60 = phi i64 [ 0, %58 ], [ %80, %59 ]
  %61 = phi i32 [ 1, %58 ], [ %79, %59 ]
  %62 = phi i32 [ 0, %58 ], [ %77, %59 ]
  %63 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %60
  %64 = load i32, i32* %63, align 8
  %65 = icmp sgt i32 %64, 0
  %66 = icmp sgt i32 %64, %62
  %67 = and i1 %65, %66
  %68 = select i1 %67, i32 %64, i32 %62
  %69 = trunc i64 %60 to i32
  %70 = select i1 %65, i32 %69, i32 %61
  %71 = or i64 %60, 1
  %72 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = icmp sgt i32 %73, 0
  %75 = icmp sgt i32 %73, %68
  %76 = and i1 %74, %75
  %77 = select i1 %76, i32 %73, i32 %68
  %78 = trunc i64 %71 to i32
  %79 = select i1 %74, i32 %78, i32 %70
  %80 = add nuw nsw i64 %60, 2
  %81 = icmp eq i64 %80, 32
  br i1 %81, label %82, label %59

82:                                               ; preds = %59
  %83 = getelementptr inbounds %struct.VP8Histogram, %struct.VP8Histogram* %4, i64 0, i32 0
  store i32 %77, i32* %83, align 4
  %84 = getelementptr inbounds %struct.VP8Histogram, %struct.VP8Histogram* %4, i64 0, i32 1
  store i32 %79, i32* %84, align 4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #7
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @SSE16x16_C(i8* nocapture readonly, i8* nocapture readonly) #5 {
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i8* [ %0, %2 ], [ %26, %3 ]
  %5 = phi i32 [ 0, %2 ], [ %28, %3 ]
  %6 = phi i32 [ 0, %2 ], [ %25, %3 ]
  %7 = phi i8* [ %1, %2 ], [ %27, %3 ]
  %8 = bitcast i8* %4 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 1
  %10 = zext <16 x i8> %9 to <16 x i32>
  %11 = bitcast i8* %7 to <16 x i8>*
  %12 = load <16 x i8>, <16 x i8>* %11, align 1
  %13 = zext <16 x i8> %12 to <16 x i32>
  %14 = sub nsw <16 x i32> %10, %13
  %15 = mul nsw <16 x i32> %14, %14
  %16 = shufflevector <16 x i32> %15, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %17 = add nsw <16 x i32> %15, %16
  %18 = shufflevector <16 x i32> %17, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = add nsw <16 x i32> %17, %18
  %20 = shufflevector <16 x i32> %19, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %21 = add nsw <16 x i32> %19, %20
  %22 = shufflevector <16 x i32> %21, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %23 = add nsw <16 x i32> %21, %22
  %24 = extractelement <16 x i32> %23, i32 0
  %25 = add nsw i32 %24, %6
  %26 = getelementptr inbounds i8, i8* %4, i64 32
  %27 = getelementptr inbounds i8, i8* %7, i64 32
  %28 = add nuw nsw i32 %5, 1
  %29 = icmp eq i32 %28, 16
  br i1 %29, label %30, label %3

30:                                               ; preds = %3
  ret i32 %25
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @SSE16x8_C(i8* nocapture readonly, i8* nocapture readonly) #5 {
  %3 = bitcast i8* %0 to <16 x i8>*
  %4 = load <16 x i8>, <16 x i8>* %3, align 1
  %5 = zext <16 x i8> %4 to <16 x i32>
  %6 = bitcast i8* %1 to <16 x i8>*
  %7 = load <16 x i8>, <16 x i8>* %6, align 1
  %8 = zext <16 x i8> %7 to <16 x i32>
  %9 = sub nsw <16 x i32> %5, %8
  %10 = mul nsw <16 x i32> %9, %9
  %11 = shufflevector <16 x i32> %10, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = add nsw <16 x i32> %10, %11
  %13 = shufflevector <16 x i32> %12, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = add nsw <16 x i32> %12, %13
  %15 = shufflevector <16 x i32> %14, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = add nsw <16 x i32> %14, %15
  %17 = shufflevector <16 x i32> %16, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %18 = add nsw <16 x i32> %16, %17
  %19 = extractelement <16 x i32> %18, i32 0
  %20 = getelementptr inbounds i8, i8* %0, i64 32
  %21 = getelementptr inbounds i8, i8* %1, i64 32
  %22 = bitcast i8* %20 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = zext <16 x i8> %23 to <16 x i32>
  %25 = bitcast i8* %21 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = zext <16 x i8> %26 to <16 x i32>
  %28 = sub nsw <16 x i32> %24, %27
  %29 = mul nsw <16 x i32> %28, %28
  %30 = shufflevector <16 x i32> %29, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = add nsw <16 x i32> %29, %30
  %32 = shufflevector <16 x i32> %31, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = add nsw <16 x i32> %31, %32
  %34 = shufflevector <16 x i32> %33, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %35 = add nsw <16 x i32> %33, %34
  %36 = shufflevector <16 x i32> %35, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %37 = add nsw <16 x i32> %35, %36
  %38 = extractelement <16 x i32> %37, i32 0
  %39 = add nsw i32 %38, %19
  %40 = getelementptr inbounds i8, i8* %0, i64 64
  %41 = getelementptr inbounds i8, i8* %1, i64 64
  %42 = bitcast i8* %40 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 1
  %44 = zext <16 x i8> %43 to <16 x i32>
  %45 = bitcast i8* %41 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1
  %47 = zext <16 x i8> %46 to <16 x i32>
  %48 = sub nsw <16 x i32> %44, %47
  %49 = mul nsw <16 x i32> %48, %48
  %50 = shufflevector <16 x i32> %49, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %51 = add nsw <16 x i32> %49, %50
  %52 = shufflevector <16 x i32> %51, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %53 = add nsw <16 x i32> %51, %52
  %54 = shufflevector <16 x i32> %53, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = add nsw <16 x i32> %53, %54
  %56 = shufflevector <16 x i32> %55, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %57 = add nsw <16 x i32> %55, %56
  %58 = extractelement <16 x i32> %57, i32 0
  %59 = add nsw i32 %58, %39
  %60 = getelementptr inbounds i8, i8* %0, i64 96
  %61 = getelementptr inbounds i8, i8* %1, i64 96
  %62 = bitcast i8* %60 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1
  %64 = zext <16 x i8> %63 to <16 x i32>
  %65 = bitcast i8* %61 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1
  %67 = zext <16 x i8> %66 to <16 x i32>
  %68 = sub nsw <16 x i32> %64, %67
  %69 = mul nsw <16 x i32> %68, %68
  %70 = shufflevector <16 x i32> %69, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %71 = add nsw <16 x i32> %69, %70
  %72 = shufflevector <16 x i32> %71, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %73 = add nsw <16 x i32> %71, %72
  %74 = shufflevector <16 x i32> %73, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %75 = add nsw <16 x i32> %73, %74
  %76 = shufflevector <16 x i32> %75, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %77 = add nsw <16 x i32> %75, %76
  %78 = extractelement <16 x i32> %77, i32 0
  %79 = add nsw i32 %78, %59
  %80 = getelementptr inbounds i8, i8* %0, i64 128
  %81 = getelementptr inbounds i8, i8* %1, i64 128
  %82 = bitcast i8* %80 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1
  %84 = zext <16 x i8> %83 to <16 x i32>
  %85 = bitcast i8* %81 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1
  %87 = zext <16 x i8> %86 to <16 x i32>
  %88 = sub nsw <16 x i32> %84, %87
  %89 = mul nsw <16 x i32> %88, %88
  %90 = shufflevector <16 x i32> %89, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = add nsw <16 x i32> %89, %90
  %92 = shufflevector <16 x i32> %91, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = add nsw <16 x i32> %91, %92
  %94 = shufflevector <16 x i32> %93, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = add nsw <16 x i32> %93, %94
  %96 = shufflevector <16 x i32> %95, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %97 = add nsw <16 x i32> %95, %96
  %98 = extractelement <16 x i32> %97, i32 0
  %99 = add nsw i32 %98, %79
  %100 = getelementptr inbounds i8, i8* %0, i64 160
  %101 = getelementptr inbounds i8, i8* %1, i64 160
  %102 = bitcast i8* %100 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1
  %104 = zext <16 x i8> %103 to <16 x i32>
  %105 = bitcast i8* %101 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1
  %107 = zext <16 x i8> %106 to <16 x i32>
  %108 = sub nsw <16 x i32> %104, %107
  %109 = mul nsw <16 x i32> %108, %108
  %110 = shufflevector <16 x i32> %109, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %111 = add nsw <16 x i32> %109, %110
  %112 = shufflevector <16 x i32> %111, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = add nsw <16 x i32> %111, %112
  %114 = shufflevector <16 x i32> %113, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %115 = add nsw <16 x i32> %113, %114
  %116 = shufflevector <16 x i32> %115, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %117 = add nsw <16 x i32> %115, %116
  %118 = extractelement <16 x i32> %117, i32 0
  %119 = add nsw i32 %118, %99
  %120 = getelementptr inbounds i8, i8* %0, i64 192
  %121 = getelementptr inbounds i8, i8* %1, i64 192
  %122 = bitcast i8* %120 to <16 x i8>*
  %123 = load <16 x i8>, <16 x i8>* %122, align 1
  %124 = zext <16 x i8> %123 to <16 x i32>
  %125 = bitcast i8* %121 to <16 x i8>*
  %126 = load <16 x i8>, <16 x i8>* %125, align 1
  %127 = zext <16 x i8> %126 to <16 x i32>
  %128 = sub nsw <16 x i32> %124, %127
  %129 = mul nsw <16 x i32> %128, %128
  %130 = shufflevector <16 x i32> %129, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %131 = add nsw <16 x i32> %129, %130
  %132 = shufflevector <16 x i32> %131, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = add nsw <16 x i32> %131, %132
  %134 = shufflevector <16 x i32> %133, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = add nsw <16 x i32> %133, %134
  %136 = shufflevector <16 x i32> %135, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %137 = add nsw <16 x i32> %135, %136
  %138 = extractelement <16 x i32> %137, i32 0
  %139 = add nsw i32 %138, %119
  %140 = getelementptr inbounds i8, i8* %0, i64 224
  %141 = getelementptr inbounds i8, i8* %1, i64 224
  %142 = bitcast i8* %140 to <16 x i8>*
  %143 = load <16 x i8>, <16 x i8>* %142, align 1
  %144 = zext <16 x i8> %143 to <16 x i32>
  %145 = bitcast i8* %141 to <16 x i8>*
  %146 = load <16 x i8>, <16 x i8>* %145, align 1
  %147 = zext <16 x i8> %146 to <16 x i32>
  %148 = sub nsw <16 x i32> %144, %147
  %149 = mul nsw <16 x i32> %148, %148
  %150 = shufflevector <16 x i32> %149, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %151 = add nsw <16 x i32> %149, %150
  %152 = shufflevector <16 x i32> %151, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = add nsw <16 x i32> %151, %152
  %154 = shufflevector <16 x i32> %153, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = add nsw <16 x i32> %153, %154
  %156 = shufflevector <16 x i32> %155, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %157 = add nsw <16 x i32> %155, %156
  %158 = extractelement <16 x i32> %157, i32 0
  %159 = add nsw i32 %158, %139
  ret i32 %159
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @SSE8x8_C(i8* nocapture readonly, i8* nocapture readonly) #5 {
  %3 = bitcast i8* %0 to <8 x i8>*
  %4 = load <8 x i8>, <8 x i8>* %3, align 1
  %5 = zext <8 x i8> %4 to <8 x i32>
  %6 = bitcast i8* %1 to <8 x i8>*
  %7 = load <8 x i8>, <8 x i8>* %6, align 1
  %8 = zext <8 x i8> %7 to <8 x i32>
  %9 = sub nsw <8 x i32> %5, %8
  %10 = mul nsw <8 x i32> %9, %9
  %11 = shufflevector <8 x i32> %10, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = add nsw <8 x i32> %10, %11
  %13 = shufflevector <8 x i32> %12, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = add nsw <8 x i32> %12, %13
  %15 = shufflevector <8 x i32> %14, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = add nsw <8 x i32> %14, %15
  %17 = extractelement <8 x i32> %16, i32 0
  %18 = getelementptr inbounds i8, i8* %0, i64 32
  %19 = getelementptr inbounds i8, i8* %1, i64 32
  %20 = bitcast i8* %18 to <8 x i8>*
  %21 = load <8 x i8>, <8 x i8>* %20, align 1
  %22 = zext <8 x i8> %21 to <8 x i32>
  %23 = bitcast i8* %19 to <8 x i8>*
  %24 = load <8 x i8>, <8 x i8>* %23, align 1
  %25 = zext <8 x i8> %24 to <8 x i32>
  %26 = sub nsw <8 x i32> %22, %25
  %27 = mul nsw <8 x i32> %26, %26
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = add nsw <8 x i32> %27, %28
  %30 = shufflevector <8 x i32> %29, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = add nsw <8 x i32> %29, %30
  %32 = shufflevector <8 x i32> %31, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = add nsw <8 x i32> %31, %32
  %34 = extractelement <8 x i32> %33, i32 0
  %35 = add nsw i32 %34, %17
  %36 = getelementptr inbounds i8, i8* %0, i64 64
  %37 = getelementptr inbounds i8, i8* %1, i64 64
  %38 = bitcast i8* %36 to <8 x i8>*
  %39 = load <8 x i8>, <8 x i8>* %38, align 1
  %40 = zext <8 x i8> %39 to <8 x i32>
  %41 = bitcast i8* %37 to <8 x i8>*
  %42 = load <8 x i8>, <8 x i8>* %41, align 1
  %43 = zext <8 x i8> %42 to <8 x i32>
  %44 = sub nsw <8 x i32> %40, %43
  %45 = mul nsw <8 x i32> %44, %44
  %46 = shufflevector <8 x i32> %45, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = add nsw <8 x i32> %45, %46
  %48 = shufflevector <8 x i32> %47, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = add nsw <8 x i32> %47, %48
  %50 = shufflevector <8 x i32> %49, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %51 = add nsw <8 x i32> %49, %50
  %52 = extractelement <8 x i32> %51, i32 0
  %53 = add nsw i32 %52, %35
  %54 = getelementptr inbounds i8, i8* %0, i64 96
  %55 = getelementptr inbounds i8, i8* %1, i64 96
  %56 = bitcast i8* %54 to <8 x i8>*
  %57 = load <8 x i8>, <8 x i8>* %56, align 1
  %58 = zext <8 x i8> %57 to <8 x i32>
  %59 = bitcast i8* %55 to <8 x i8>*
  %60 = load <8 x i8>, <8 x i8>* %59, align 1
  %61 = zext <8 x i8> %60 to <8 x i32>
  %62 = sub nsw <8 x i32> %58, %61
  %63 = mul nsw <8 x i32> %62, %62
  %64 = shufflevector <8 x i32> %63, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %65 = add nsw <8 x i32> %63, %64
  %66 = shufflevector <8 x i32> %65, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = add nsw <8 x i32> %65, %66
  %68 = shufflevector <8 x i32> %67, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %69 = add nsw <8 x i32> %67, %68
  %70 = extractelement <8 x i32> %69, i32 0
  %71 = add nsw i32 %70, %53
  %72 = getelementptr inbounds i8, i8* %0, i64 128
  %73 = getelementptr inbounds i8, i8* %1, i64 128
  %74 = bitcast i8* %72 to <8 x i8>*
  %75 = load <8 x i8>, <8 x i8>* %74, align 1
  %76 = zext <8 x i8> %75 to <8 x i32>
  %77 = bitcast i8* %73 to <8 x i8>*
  %78 = load <8 x i8>, <8 x i8>* %77, align 1
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = sub nsw <8 x i32> %76, %79
  %81 = mul nsw <8 x i32> %80, %80
  %82 = shufflevector <8 x i32> %81, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %83 = add nsw <8 x i32> %81, %82
  %84 = shufflevector <8 x i32> %83, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %85 = add nsw <8 x i32> %83, %84
  %86 = shufflevector <8 x i32> %85, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %87 = add nsw <8 x i32> %85, %86
  %88 = extractelement <8 x i32> %87, i32 0
  %89 = add nsw i32 %88, %71
  %90 = getelementptr inbounds i8, i8* %0, i64 160
  %91 = getelementptr inbounds i8, i8* %1, i64 160
  %92 = bitcast i8* %90 to <8 x i8>*
  %93 = load <8 x i8>, <8 x i8>* %92, align 1
  %94 = zext <8 x i8> %93 to <8 x i32>
  %95 = bitcast i8* %91 to <8 x i8>*
  %96 = load <8 x i8>, <8 x i8>* %95, align 1
  %97 = zext <8 x i8> %96 to <8 x i32>
  %98 = sub nsw <8 x i32> %94, %97
  %99 = mul nsw <8 x i32> %98, %98
  %100 = shufflevector <8 x i32> %99, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = add nsw <8 x i32> %99, %100
  %102 = shufflevector <8 x i32> %101, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = add nsw <8 x i32> %101, %102
  %104 = shufflevector <8 x i32> %103, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %105 = add nsw <8 x i32> %103, %104
  %106 = extractelement <8 x i32> %105, i32 0
  %107 = add nsw i32 %106, %89
  %108 = getelementptr inbounds i8, i8* %0, i64 192
  %109 = getelementptr inbounds i8, i8* %1, i64 192
  %110 = bitcast i8* %108 to <8 x i8>*
  %111 = load <8 x i8>, <8 x i8>* %110, align 1
  %112 = zext <8 x i8> %111 to <8 x i32>
  %113 = bitcast i8* %109 to <8 x i8>*
  %114 = load <8 x i8>, <8 x i8>* %113, align 1
  %115 = zext <8 x i8> %114 to <8 x i32>
  %116 = sub nsw <8 x i32> %112, %115
  %117 = mul nsw <8 x i32> %116, %116
  %118 = shufflevector <8 x i32> %117, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %119 = add nsw <8 x i32> %117, %118
  %120 = shufflevector <8 x i32> %119, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %121 = add nsw <8 x i32> %119, %120
  %122 = shufflevector <8 x i32> %121, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %123 = add nsw <8 x i32> %121, %122
  %124 = extractelement <8 x i32> %123, i32 0
  %125 = add nsw i32 %124, %107
  %126 = getelementptr inbounds i8, i8* %0, i64 224
  %127 = getelementptr inbounds i8, i8* %1, i64 224
  %128 = bitcast i8* %126 to <8 x i8>*
  %129 = load <8 x i8>, <8 x i8>* %128, align 1
  %130 = zext <8 x i8> %129 to <8 x i32>
  %131 = bitcast i8* %127 to <8 x i8>*
  %132 = load <8 x i8>, <8 x i8>* %131, align 1
  %133 = zext <8 x i8> %132 to <8 x i32>
  %134 = sub nsw <8 x i32> %130, %133
  %135 = mul nsw <8 x i32> %134, %134
  %136 = shufflevector <8 x i32> %135, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %137 = add nsw <8 x i32> %135, %136
  %138 = shufflevector <8 x i32> %137, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %139 = add nsw <8 x i32> %137, %138
  %140 = shufflevector <8 x i32> %139, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = add nsw <8 x i32> %139, %140
  %142 = extractelement <8 x i32> %141, i32 0
  %143 = add nsw i32 %142, %125
  ret i32 %143
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @SSE4x4_C(i8* nocapture readonly, i8* nocapture readonly) #5 {
  %3 = load i8, i8* %0, align 1
  %4 = zext i8 %3 to i32
  %5 = load i8, i8* %1, align 1
  %6 = zext i8 %5 to i32
  %7 = sub nsw i32 %4, %6
  %8 = mul nsw i32 %7, %7
  %9 = getelementptr inbounds i8, i8* %0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds i8, i8* %1, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = sub nsw i32 %11, %14
  %16 = mul nsw i32 %15, %15
  %17 = add nuw nsw i32 %16, %8
  %18 = getelementptr inbounds i8, i8* %0, i64 2
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %1, i64 2
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = sub nsw i32 %20, %23
  %25 = mul nsw i32 %24, %24
  %26 = add nuw nsw i32 %25, %17
  %27 = getelementptr inbounds i8, i8* %0, i64 3
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8, i8* %1, i64 3
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = sub nsw i32 %29, %32
  %34 = mul nsw i32 %33, %33
  %35 = add nuw nsw i32 %34, %26
  %36 = getelementptr inbounds i8, i8* %0, i64 32
  %37 = getelementptr inbounds i8, i8* %1, i64 32
  %38 = load i8, i8* %36, align 1
  %39 = zext i8 %38 to i32
  %40 = load i8, i8* %37, align 1
  %41 = zext i8 %40 to i32
  %42 = sub nsw i32 %39, %41
  %43 = mul nsw i32 %42, %42
  %44 = add nuw nsw i32 %43, %35
  %45 = getelementptr inbounds i8, i8* %0, i64 33
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds i8, i8* %1, i64 33
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = sub nsw i32 %47, %50
  %52 = mul nsw i32 %51, %51
  %53 = add nuw nsw i32 %52, %44
  %54 = getelementptr inbounds i8, i8* %0, i64 34
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = getelementptr inbounds i8, i8* %1, i64 34
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = sub nsw i32 %56, %59
  %61 = mul nsw i32 %60, %60
  %62 = add nuw nsw i32 %61, %53
  %63 = getelementptr inbounds i8, i8* %0, i64 35
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds i8, i8* %1, i64 35
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = sub nsw i32 %65, %68
  %70 = mul nsw i32 %69, %69
  %71 = add nsw i32 %70, %62
  %72 = getelementptr inbounds i8, i8* %0, i64 64
  %73 = getelementptr inbounds i8, i8* %1, i64 64
  %74 = load i8, i8* %72, align 1
  %75 = zext i8 %74 to i32
  %76 = load i8, i8* %73, align 1
  %77 = zext i8 %76 to i32
  %78 = sub nsw i32 %75, %77
  %79 = mul nsw i32 %78, %78
  %80 = add nsw i32 %79, %71
  %81 = getelementptr inbounds i8, i8* %0, i64 65
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = getelementptr inbounds i8, i8* %1, i64 65
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = sub nsw i32 %83, %86
  %88 = mul nsw i32 %87, %87
  %89 = add nsw i32 %88, %80
  %90 = getelementptr inbounds i8, i8* %0, i64 66
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = getelementptr inbounds i8, i8* %1, i64 66
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = sub nsw i32 %92, %95
  %97 = mul nsw i32 %96, %96
  %98 = add nsw i32 %97, %89
  %99 = getelementptr inbounds i8, i8* %0, i64 67
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = getelementptr inbounds i8, i8* %1, i64 67
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = sub nsw i32 %101, %104
  %106 = mul nsw i32 %105, %105
  %107 = add nsw i32 %106, %98
  %108 = getelementptr inbounds i8, i8* %0, i64 96
  %109 = getelementptr inbounds i8, i8* %1, i64 96
  %110 = load i8, i8* %108, align 1
  %111 = zext i8 %110 to i32
  %112 = load i8, i8* %109, align 1
  %113 = zext i8 %112 to i32
  %114 = sub nsw i32 %111, %113
  %115 = mul nsw i32 %114, %114
  %116 = add nsw i32 %115, %107
  %117 = getelementptr inbounds i8, i8* %0, i64 97
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = getelementptr inbounds i8, i8* %1, i64 97
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = sub nsw i32 %119, %122
  %124 = mul nsw i32 %123, %123
  %125 = add nsw i32 %124, %116
  %126 = getelementptr inbounds i8, i8* %0, i64 98
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = getelementptr inbounds i8, i8* %1, i64 98
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = sub nsw i32 %128, %131
  %133 = mul nsw i32 %132, %132
  %134 = add nsw i32 %133, %125
  %135 = getelementptr inbounds i8, i8* %0, i64 99
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = getelementptr inbounds i8, i8* %1, i64 99
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = sub nsw i32 %137, %140
  %142 = mul nsw i32 %141, %141
  %143 = add nsw i32 %142, %134
  ret i32 %143
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @QuantizeBlock_C(i16* nocapture, i16* nocapture, %struct.VP8Matrix* nocapture readonly) #0 {
  br label %4

4:                                                ; preds = %46, %3
  %5 = phi i64 [ 0, %3 ], [ %48, %46 ]
  %6 = phi i32 [ -1, %3 ], [ %47, %46 ]
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* @kZigzag, i64 0, i64 %5
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  %10 = getelementptr inbounds i16, i16* %0, i64 %9
  %11 = load i16, i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = icmp slt i16 %11, 0
  %14 = sub nsw i32 0, %12
  %15 = select i1 %13, i32 %14, i32 %12
  %16 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 4, i64 %9
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = add nuw nsw i32 %15, %18
  %20 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 3, i64 %9
  %21 = load i32, i32* %20, align 4
  %22 = icmp ugt i32 %19, %21
  br i1 %22, label %23, label %44

23:                                               ; preds = %4
  %24 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 0, i64 %9
  %25 = load i16, i16* %24, align 2
  %26 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 1, i64 %9
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 %9
  %30 = load i32, i32* %29, align 4
  %31 = mul i32 %19, %28
  %32 = add i32 %31, %30
  %33 = lshr i32 %32, 17
  %34 = icmp ult i32 %33, 2047
  %35 = select i1 %34, i32 %33, i32 2047
  %36 = sub nsw i32 0, %35
  %37 = select i1 %13, i32 %36, i32 %35
  %38 = trunc i32 %37 to i16
  %39 = mul i16 %25, %38
  store i16 %39, i16* %10, align 2
  %40 = getelementptr inbounds i16, i16* %1, i64 %5
  store i16 %38, i16* %40, align 2
  %41 = icmp eq i32 %37, 0
  %42 = trunc i64 %5 to i32
  %43 = select i1 %41, i32 %6, i32 %42
  br label %46

44:                                               ; preds = %4
  %45 = getelementptr inbounds i16, i16* %1, i64 %5
  store i16 0, i16* %45, align 2
  store i16 0, i16* %10, align 2
  br label %46

46:                                               ; preds = %23, %44
  %47 = phi i32 [ %6, %44 ], [ %43, %23 ]
  %48 = add nuw nsw i64 %5, 1
  %49 = icmp eq i64 %48, 16
  br i1 %49, label %50, label %4

50:                                               ; preds = %46
  %51 = lshr i32 %47, 31
  %52 = xor i32 %51, 1
  ret i32 %52
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @Quantize2Blocks_C(i16*, i16*, %struct.VP8Matrix*) #2 {
  %4 = load i32 (i16*, i16*, %struct.VP8Matrix*)*, i32 (i16*, i16*, %struct.VP8Matrix*)** @VP8EncQuantizeBlock, align 8
  %5 = tail call i32 %4(i16* %0, i16* %1, %struct.VP8Matrix* %2) #7
  %6 = load i32 (i16*, i16*, %struct.VP8Matrix*)*, i32 (i16*, i16*, %struct.VP8Matrix*)** @VP8EncQuantizeBlock, align 8
  %7 = getelementptr inbounds i16, i16* %0, i64 16
  %8 = getelementptr inbounds i16, i16* %1, i64 16
  %9 = tail call i32 %6(i16* %7, i16* %8, %struct.VP8Matrix* %2) #7
  %10 = shl i32 %9, 1
  %11 = or i32 %10, %5
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define internal void @FTransform2_C(i8*, i8*, i16*) #2 {
  %4 = load void (i8*, i8*, i16*)*, void (i8*, i8*, i16*)** @VP8FTransform, align 8
  tail call void %4(i8* %0, i8* %1, i16* %2) #7
  %5 = load void (i8*, i8*, i16*)*, void (i8*, i8*, i16*)** @VP8FTransform, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 4
  %7 = getelementptr inbounds i8, i8* %1, i64 4
  %8 = getelementptr inbounds i16, i16* %2, i64 16
  tail call void %5(i8* %6, i8* %7, i16* %8) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Intra4Preds_C(i8* nocapture, i8* readonly) #2 {
  %3 = getelementptr inbounds i8, i8* %0, i64 1536
  %4 = load i8, i8* %1, align 1
  %5 = zext i8 %4 to i32
  %6 = getelementptr inbounds i8, i8* %1, i64 -5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = add nuw nsw i32 %5, 4
  %10 = add nuw nsw i32 %9, %8
  %11 = getelementptr inbounds i8, i8* %1, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds i8, i8* %1, i64 -4
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = add nuw nsw i32 %10, %13
  %18 = add nuw nsw i32 %17, %16
  %19 = getelementptr inbounds i8, i8* %1, i64 2
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds i8, i8* %1, i64 -3
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = add nuw nsw i32 %18, %21
  %26 = add nuw nsw i32 %25, %24
  %27 = getelementptr inbounds i8, i8* %1, i64 3
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8, i8* %1, i64 -2
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = add nuw nsw i32 %26, %29
  %34 = add nuw nsw i32 %33, %32
  %35 = lshr i32 %34, 3
  %36 = trunc i32 %35 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 %36, i64 4, i1 false) #7
  %37 = getelementptr inbounds i8, i8* %0, i64 1568
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %36, i64 4, i1 false) #7
  %38 = getelementptr inbounds i8, i8* %0, i64 1600
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %36, i64 4, i1 false) #7
  %39 = getelementptr inbounds i8, i8* %0, i64 1632
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %36, i64 4, i1 false) #7
  %40 = getelementptr inbounds i8, i8* %0, i64 1540
  %41 = getelementptr inbounds i8, i8* %1, i64 -1
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i64
  %44 = sub nsw i64 0, %43
  %45 = getelementptr inbounds i8, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 255), i64 %44
  %46 = load i8, i8* %30, align 1
  %47 = zext i8 %46 to i64
  %48 = getelementptr inbounds i8, i8* %45, i64 %47
  %49 = load i8, i8* %1, align 1
  %50 = zext i8 %49 to i64
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = load i8, i8* %51, align 1
  store i8 %52, i8* %40, align 1
  %53 = load i8, i8* %11, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds i8, i8* %48, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = getelementptr inbounds i8, i8* %0, i64 1541
  store i8 %56, i8* %57, align 1
  %58 = load i8, i8* %19, align 1
  %59 = zext i8 %58 to i64
  %60 = getelementptr inbounds i8, i8* %48, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = getelementptr inbounds i8, i8* %0, i64 1542
  store i8 %61, i8* %62, align 1
  %63 = load i8, i8* %27, align 1
  %64 = zext i8 %63 to i64
  %65 = getelementptr inbounds i8, i8* %48, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = getelementptr inbounds i8, i8* %0, i64 1543
  store i8 %66, i8* %67, align 1
  %68 = getelementptr inbounds i8, i8* %0, i64 1572
  %69 = load i8, i8* %22, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds i8, i8* %45, i64 %70
  %72 = load i8, i8* %1, align 1
  %73 = zext i8 %72 to i64
  %74 = getelementptr inbounds i8, i8* %71, i64 %73
  %75 = load i8, i8* %74, align 1
  store i8 %75, i8* %68, align 1
  %76 = load i8, i8* %11, align 1
  %77 = zext i8 %76 to i64
  %78 = getelementptr inbounds i8, i8* %71, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = getelementptr inbounds i8, i8* %0, i64 1573
  store i8 %79, i8* %80, align 1
  %81 = load i8, i8* %19, align 1
  %82 = zext i8 %81 to i64
  %83 = getelementptr inbounds i8, i8* %71, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = getelementptr inbounds i8, i8* %0, i64 1574
  store i8 %84, i8* %85, align 1
  %86 = load i8, i8* %27, align 1
  %87 = zext i8 %86 to i64
  %88 = getelementptr inbounds i8, i8* %71, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = getelementptr inbounds i8, i8* %0, i64 1575
  store i8 %89, i8* %90, align 1
  %91 = getelementptr inbounds i8, i8* %0, i64 1604
  %92 = load i8, i8* %14, align 1
  %93 = zext i8 %92 to i64
  %94 = getelementptr inbounds i8, i8* %45, i64 %93
  %95 = load i8, i8* %1, align 1
  %96 = zext i8 %95 to i64
  %97 = getelementptr inbounds i8, i8* %94, i64 %96
  %98 = load i8, i8* %97, align 1
  store i8 %98, i8* %91, align 1
  %99 = load i8, i8* %11, align 1
  %100 = zext i8 %99 to i64
  %101 = getelementptr inbounds i8, i8* %94, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = getelementptr inbounds i8, i8* %0, i64 1605
  store i8 %102, i8* %103, align 1
  %104 = load i8, i8* %19, align 1
  %105 = zext i8 %104 to i64
  %106 = getelementptr inbounds i8, i8* %94, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = getelementptr inbounds i8, i8* %0, i64 1606
  store i8 %107, i8* %108, align 1
  %109 = load i8, i8* %27, align 1
  %110 = zext i8 %109 to i64
  %111 = getelementptr inbounds i8, i8* %94, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds i8, i8* %0, i64 1607
  store i8 %112, i8* %113, align 1
  %114 = getelementptr inbounds i8, i8* %0, i64 1636
  %115 = load i8, i8* %6, align 1
  %116 = zext i8 %115 to i64
  %117 = getelementptr inbounds i8, i8* %45, i64 %116
  %118 = load i8, i8* %1, align 1
  %119 = zext i8 %118 to i64
  %120 = getelementptr inbounds i8, i8* %117, i64 %119
  %121 = load i8, i8* %120, align 1
  store i8 %121, i8* %114, align 1
  %122 = load i8, i8* %11, align 1
  %123 = zext i8 %122 to i64
  %124 = getelementptr inbounds i8, i8* %117, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = getelementptr inbounds i8, i8* %0, i64 1637
  store i8 %125, i8* %126, align 1
  %127 = load i8, i8* %19, align 1
  %128 = zext i8 %127 to i64
  %129 = getelementptr inbounds i8, i8* %117, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = getelementptr inbounds i8, i8* %0, i64 1638
  store i8 %130, i8* %131, align 1
  %132 = load i8, i8* %27, align 1
  %133 = zext i8 %132 to i64
  %134 = getelementptr inbounds i8, i8* %117, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds i8, i8* %0, i64 1639
  store i8 %135, i8* %136, align 1
  %137 = getelementptr inbounds i8, i8* %0, i64 1544
  %138 = load i8, i8* %41, align 1
  %139 = zext i8 %138 to i32
  %140 = load i8, i8* %1, align 1
  %141 = zext i8 %140 to i32
  %142 = shl nuw nsw i32 %141, 1
  %143 = load i8, i8* %11, align 1
  %144 = zext i8 %143 to i32
  %145 = add nuw nsw i32 %144, 2
  %146 = add nuw nsw i32 %142, %139
  %147 = add nuw nsw i32 %146, %145
  %148 = lshr i32 %147, 2
  %149 = trunc i32 %148 to i8
  %150 = shl nuw nsw i32 %144, 1
  %151 = load i8, i8* %19, align 1
  %152 = zext i8 %151 to i32
  %153 = add nuw nsw i32 %152, 2
  %154 = add nuw nsw i32 %150, %141
  %155 = add nuw nsw i32 %154, %153
  %156 = lshr i32 %155, 2
  %157 = trunc i32 %156 to i8
  %158 = shl nuw nsw i32 %152, 1
  %159 = load i8, i8* %27, align 1
  %160 = zext i8 %159 to i32
  %161 = add nuw nsw i32 %158, %145
  %162 = add nuw nsw i32 %161, %160
  %163 = lshr i32 %162, 2
  %164 = trunc i32 %163 to i8
  %165 = shl nuw nsw i32 %160, 1
  %166 = getelementptr inbounds i8, i8* %1, i64 4
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = add nuw nsw i32 %165, %153
  %170 = add nuw nsw i32 %169, %168
  %171 = lshr i32 %170, 2
  %172 = trunc i32 %171 to i8
  store i8 %149, i8* %137, align 1
  %173 = getelementptr inbounds i8, i8* %0, i64 1545
  store i8 %157, i8* %173, align 1
  %174 = getelementptr inbounds i8, i8* %0, i64 1546
  store i8 %164, i8* %174, align 1
  %175 = getelementptr inbounds i8, i8* %0, i64 1547
  store i8 %172, i8* %175, align 1
  %176 = getelementptr inbounds i8, i8* %0, i64 1576
  store i8 %149, i8* %176, align 1
  %177 = getelementptr inbounds i8, i8* %0, i64 1577
  store i8 %157, i8* %177, align 1
  %178 = getelementptr inbounds i8, i8* %0, i64 1578
  store i8 %164, i8* %178, align 1
  %179 = getelementptr inbounds i8, i8* %0, i64 1579
  store i8 %172, i8* %179, align 1
  %180 = getelementptr inbounds i8, i8* %0, i64 1608
  store i8 %149, i8* %180, align 1
  %181 = getelementptr inbounds i8, i8* %0, i64 1609
  store i8 %157, i8* %181, align 1
  %182 = getelementptr inbounds i8, i8* %0, i64 1610
  store i8 %164, i8* %182, align 1
  %183 = getelementptr inbounds i8, i8* %0, i64 1611
  store i8 %172, i8* %183, align 1
  %184 = getelementptr inbounds i8, i8* %0, i64 1640
  store i8 %149, i8* %184, align 1
  %185 = getelementptr inbounds i8, i8* %0, i64 1641
  store i8 %157, i8* %185, align 1
  %186 = getelementptr inbounds i8, i8* %0, i64 1642
  store i8 %164, i8* %186, align 1
  %187 = getelementptr inbounds i8, i8* %0, i64 1643
  store i8 %172, i8* %187, align 1
  %188 = getelementptr inbounds i8, i8* %0, i64 1548
  %189 = load i8, i8* %41, align 1
  %190 = zext i8 %189 to i32
  %191 = load i8, i8* %30, align 1
  %192 = zext i8 %191 to i32
  %193 = load i8, i8* %22, align 1
  %194 = zext i8 %193 to i32
  %195 = load i8, i8* %14, align 1
  %196 = zext i8 %195 to i32
  %197 = load i8, i8* %6, align 1
  %198 = zext i8 %197 to i32
  %199 = shl nuw nsw i32 %192, 1
  %200 = add nuw nsw i32 %194, 2
  %201 = add nuw nsw i32 %199, %190
  %202 = add nuw nsw i32 %201, %200
  %203 = lshr i32 %202, 2
  %204 = and i32 %203, 255
  %205 = mul nuw i32 %204, 16843009
  %206 = bitcast i8* %188 to i32*
  store i32 %205, i32* %206, align 1
  %207 = getelementptr inbounds i8, i8* %0, i64 1580
  %208 = shl nuw nsw i32 %194, 1
  %209 = add nuw nsw i32 %196, 2
  %210 = add nuw nsw i32 %208, %192
  %211 = add nuw nsw i32 %210, %209
  %212 = lshr i32 %211, 2
  %213 = and i32 %212, 255
  %214 = mul nuw i32 %213, 16843009
  %215 = bitcast i8* %207 to i32*
  store i32 %214, i32* %215, align 1
  %216 = getelementptr inbounds i8, i8* %0, i64 1612
  %217 = shl nuw nsw i32 %196, 1
  %218 = add nuw nsw i32 %217, %200
  %219 = add nuw nsw i32 %218, %198
  %220 = lshr i32 %219, 2
  %221 = and i32 %220, 255
  %222 = mul nuw i32 %221, 16843009
  %223 = bitcast i8* %216 to i32*
  store i32 %222, i32* %223, align 1
  %224 = getelementptr inbounds i8, i8* %0, i64 1644
  %225 = shl nuw nsw i32 %198, 1
  %226 = add nuw nsw i32 %209, %198
  %227 = add nuw nsw i32 %226, %225
  %228 = lshr i32 %227, 2
  %229 = and i32 %228, 255
  %230 = mul nuw i32 %229, 16843009
  %231 = bitcast i8* %224 to i32*
  store i32 %230, i32* %231, align 1
  %232 = getelementptr inbounds i8, i8* %0, i64 1552
  %233 = load i8, i8* %41, align 1
  %234 = zext i8 %233 to i32
  %235 = load i8, i8* %30, align 1
  %236 = zext i8 %235 to i32
  %237 = load i8, i8* %22, align 1
  %238 = zext i8 %237 to i32
  %239 = load i8, i8* %14, align 1
  %240 = zext i8 %239 to i32
  %241 = load i8, i8* %6, align 1
  %242 = zext i8 %241 to i32
  %243 = load i8, i8* %1, align 1
  %244 = zext i8 %243 to i32
  %245 = load i8, i8* %11, align 1
  %246 = zext i8 %245 to i32
  %247 = load i8, i8* %19, align 1
  %248 = zext i8 %247 to i32
  %249 = load i8, i8* %27, align 1
  %250 = zext i8 %249 to i32
  %251 = shl nuw nsw i32 %240, 1
  %252 = add nuw nsw i32 %238, 2
  %253 = add nuw nsw i32 %252, %251
  %254 = add nuw nsw i32 %253, %242
  %255 = lshr i32 %254, 2
  %256 = trunc i32 %255 to i8
  %257 = getelementptr inbounds i8, i8* %0, i64 1648
  store i8 %256, i8* %257, align 1
  %258 = shl nuw nsw i32 %238, 1
  %259 = add nuw nsw i32 %236, 2
  %260 = add nuw nsw i32 %258, %259
  %261 = add nuw nsw i32 %260, %240
  %262 = lshr i32 %261, 2
  %263 = trunc i32 %262 to i8
  %264 = getelementptr inbounds i8, i8* %0, i64 1649
  store i8 %263, i8* %264, align 1
  %265 = getelementptr inbounds i8, i8* %0, i64 1616
  store i8 %263, i8* %265, align 1
  %266 = shl nuw nsw i32 %236, 1
  %267 = add nuw nsw i32 %234, 2
  %268 = add nuw nsw i32 %266, %267
  %269 = add nuw nsw i32 %268, %238
  %270 = lshr i32 %269, 2
  %271 = trunc i32 %270 to i8
  %272 = getelementptr inbounds i8, i8* %0, i64 1650
  store i8 %271, i8* %272, align 1
  %273 = getelementptr inbounds i8, i8* %0, i64 1617
  store i8 %271, i8* %273, align 1
  %274 = getelementptr inbounds i8, i8* %0, i64 1584
  store i8 %271, i8* %274, align 1
  %275 = shl nuw nsw i32 %234, 1
  %276 = add nuw nsw i32 %259, %275
  %277 = add nuw nsw i32 %276, %244
  %278 = lshr i32 %277, 2
  %279 = trunc i32 %278 to i8
  %280 = getelementptr inbounds i8, i8* %0, i64 1651
  store i8 %279, i8* %280, align 1
  %281 = getelementptr inbounds i8, i8* %0, i64 1618
  store i8 %279, i8* %281, align 1
  %282 = getelementptr inbounds i8, i8* %0, i64 1585
  store i8 %279, i8* %282, align 1
  store i8 %279, i8* %232, align 1
  %283 = shl nuw nsw i32 %244, 1
  %284 = add nuw nsw i32 %267, %246
  %285 = add nuw nsw i32 %284, %283
  %286 = lshr i32 %285, 2
  %287 = trunc i32 %286 to i8
  %288 = getelementptr inbounds i8, i8* %0, i64 1619
  store i8 %287, i8* %288, align 1
  %289 = getelementptr inbounds i8, i8* %0, i64 1586
  store i8 %287, i8* %289, align 1
  %290 = getelementptr inbounds i8, i8* %0, i64 1553
  store i8 %287, i8* %290, align 1
  %291 = shl nuw nsw i32 %246, 1
  %292 = add nuw nsw i32 %244, 2
  %293 = add nuw nsw i32 %292, %248
  %294 = add nuw nsw i32 %293, %291
  %295 = lshr i32 %294, 2
  %296 = trunc i32 %295 to i8
  %297 = getelementptr inbounds i8, i8* %0, i64 1587
  store i8 %296, i8* %297, align 1
  %298 = getelementptr inbounds i8, i8* %0, i64 1554
  store i8 %296, i8* %298, align 1
  %299 = shl nuw nsw i32 %248, 1
  %300 = add nuw nsw i32 %246, 2
  %301 = add nuw nsw i32 %300, %250
  %302 = add nuw nsw i32 %301, %299
  %303 = lshr i32 %302, 2
  %304 = trunc i32 %303 to i8
  %305 = getelementptr inbounds i8, i8* %0, i64 1555
  store i8 %304, i8* %305, align 1
  %306 = getelementptr inbounds i8, i8* %0, i64 1556
  %307 = load i8, i8* %41, align 1
  %308 = zext i8 %307 to i32
  %309 = load i8, i8* %30, align 1
  %310 = zext i8 %309 to i32
  %311 = load i8, i8* %22, align 1
  %312 = zext i8 %311 to i32
  %313 = load i8, i8* %14, align 1
  %314 = zext i8 %313 to i32
  %315 = load i8, i8* %1, align 1
  %316 = zext i8 %315 to i32
  %317 = load i8, i8* %11, align 1
  %318 = zext i8 %317 to i32
  %319 = load i8, i8* %19, align 1
  %320 = zext i8 %319 to i32
  %321 = load i8, i8* %27, align 1
  %322 = zext i8 %321 to i32
  %323 = add nuw nsw i32 %316, 1
  %324 = add nuw nsw i32 %323, %308
  %325 = lshr i32 %324, 1
  %326 = trunc i32 %325 to i8
  %327 = getelementptr inbounds i8, i8* %0, i64 1621
  store i8 %326, i8* %327, align 1
  store i8 %326, i8* %306, align 1
  %328 = add nuw nsw i32 %323, %318
  %329 = lshr i32 %328, 1
  %330 = trunc i32 %329 to i8
  %331 = getelementptr inbounds i8, i8* %0, i64 1622
  store i8 %330, i8* %331, align 1
  %332 = getelementptr inbounds i8, i8* %0, i64 1557
  store i8 %330, i8* %332, align 1
  %333 = add nuw nsw i32 %320, 1
  %334 = add nuw nsw i32 %333, %318
  %335 = lshr i32 %334, 1
  %336 = trunc i32 %335 to i8
  %337 = getelementptr inbounds i8, i8* %0, i64 1623
  store i8 %336, i8* %337, align 1
  %338 = getelementptr inbounds i8, i8* %0, i64 1558
  store i8 %336, i8* %338, align 1
  %339 = add nuw nsw i32 %333, %322
  %340 = lshr i32 %339, 1
  %341 = trunc i32 %340 to i8
  %342 = getelementptr inbounds i8, i8* %0, i64 1559
  store i8 %341, i8* %342, align 1
  %343 = shl nuw nsw i32 %312, 1
  %344 = add nuw nsw i32 %310, 2
  %345 = add nuw nsw i32 %344, %314
  %346 = add nuw nsw i32 %345, %343
  %347 = lshr i32 %346, 2
  %348 = trunc i32 %347 to i8
  %349 = getelementptr inbounds i8, i8* %0, i64 1652
  store i8 %348, i8* %349, align 1
  %350 = shl nuw nsw i32 %310, 1
  %351 = add nuw nsw i32 %308, 2
  %352 = add nuw nsw i32 %351, %312
  %353 = add nuw nsw i32 %352, %350
  %354 = lshr i32 %353, 2
  %355 = trunc i32 %354 to i8
  %356 = getelementptr inbounds i8, i8* %0, i64 1620
  store i8 %355, i8* %356, align 1
  %357 = shl nuw nsw i32 %308, 1
  %358 = add nuw nsw i32 %344, %357
  %359 = add nuw nsw i32 %358, %316
  %360 = lshr i32 %359, 2
  %361 = trunc i32 %360 to i8
  %362 = getelementptr inbounds i8, i8* %0, i64 1653
  store i8 %361, i8* %362, align 1
  %363 = getelementptr inbounds i8, i8* %0, i64 1588
  store i8 %361, i8* %363, align 1
  %364 = shl nuw nsw i32 %316, 1
  %365 = add nuw nsw i32 %364, %351
  %366 = add nuw nsw i32 %365, %318
  %367 = lshr i32 %366, 2
  %368 = trunc i32 %367 to i8
  %369 = getelementptr inbounds i8, i8* %0, i64 1654
  store i8 %368, i8* %369, align 1
  %370 = getelementptr inbounds i8, i8* %0, i64 1589
  store i8 %368, i8* %370, align 1
  %371 = shl nuw nsw i32 %318, 1
  %372 = add nuw nsw i32 %316, 2
  %373 = add nuw nsw i32 %372, %371
  %374 = add nuw nsw i32 %373, %320
  %375 = lshr i32 %374, 2
  %376 = trunc i32 %375 to i8
  %377 = getelementptr inbounds i8, i8* %0, i64 1655
  store i8 %376, i8* %377, align 1
  %378 = getelementptr inbounds i8, i8* %0, i64 1590
  store i8 %376, i8* %378, align 1
  %379 = shl nuw nsw i32 %320, 1
  %380 = add nuw nsw i32 %318, 2
  %381 = add nuw nsw i32 %380, %379
  %382 = add nuw nsw i32 %381, %322
  %383 = lshr i32 %382, 2
  %384 = trunc i32 %383 to i8
  %385 = getelementptr inbounds i8, i8* %0, i64 1591
  store i8 %384, i8* %385, align 1
  %386 = getelementptr inbounds i8, i8* %0, i64 1560
  %387 = load i8, i8* %1, align 1
  %388 = zext i8 %387 to i32
  %389 = load i8, i8* %11, align 1
  %390 = zext i8 %389 to i32
  %391 = load i8, i8* %19, align 1
  %392 = zext i8 %391 to i32
  %393 = load i8, i8* %27, align 1
  %394 = zext i8 %393 to i32
  %395 = load i8, i8* %166, align 1
  %396 = zext i8 %395 to i32
  %397 = getelementptr inbounds i8, i8* %1, i64 5
  %398 = load i8, i8* %397, align 1
  %399 = zext i8 %398 to i32
  %400 = getelementptr inbounds i8, i8* %1, i64 6
  %401 = load i8, i8* %400, align 1
  %402 = zext i8 %401 to i32
  %403 = getelementptr inbounds i8, i8* %1, i64 7
  %404 = load i8, i8* %403, align 1
  %405 = zext i8 %404 to i32
  %406 = shl nuw nsw i32 %390, 1
  %407 = add nuw nsw i32 %392, 2
  %408 = add nuw nsw i32 %406, %388
  %409 = add nuw nsw i32 %408, %407
  %410 = lshr i32 %409, 2
  %411 = trunc i32 %410 to i8
  store i8 %411, i8* %386, align 1
  %412 = shl nuw nsw i32 %392, 1
  %413 = add nuw nsw i32 %394, 2
  %414 = add nuw nsw i32 %412, %390
  %415 = add nuw nsw i32 %414, %413
  %416 = lshr i32 %415, 2
  %417 = trunc i32 %416 to i8
  %418 = getelementptr inbounds i8, i8* %0, i64 1592
  store i8 %417, i8* %418, align 1
  %419 = getelementptr inbounds i8, i8* %0, i64 1561
  store i8 %417, i8* %419, align 1
  %420 = shl nuw nsw i32 %394, 1
  %421 = add nuw nsw i32 %420, %407
  %422 = add nuw nsw i32 %421, %396
  %423 = lshr i32 %422, 2
  %424 = trunc i32 %423 to i8
  %425 = getelementptr inbounds i8, i8* %0, i64 1624
  store i8 %424, i8* %425, align 1
  %426 = getelementptr inbounds i8, i8* %0, i64 1593
  store i8 %424, i8* %426, align 1
  %427 = getelementptr inbounds i8, i8* %0, i64 1562
  store i8 %424, i8* %427, align 1
  %428 = shl nuw nsw i32 %396, 1
  %429 = add nuw nsw i32 %428, %413
  %430 = add nuw nsw i32 %429, %399
  %431 = lshr i32 %430, 2
  %432 = trunc i32 %431 to i8
  %433 = getelementptr inbounds i8, i8* %0, i64 1656
  store i8 %432, i8* %433, align 1
  %434 = getelementptr inbounds i8, i8* %0, i64 1625
  store i8 %432, i8* %434, align 1
  %435 = getelementptr inbounds i8, i8* %0, i64 1594
  store i8 %432, i8* %435, align 1
  %436 = getelementptr inbounds i8, i8* %0, i64 1563
  store i8 %432, i8* %436, align 1
  %437 = shl nuw nsw i32 %399, 1
  %438 = add nuw nsw i32 %402, 2
  %439 = add nuw nsw i32 %438, %396
  %440 = add nuw nsw i32 %439, %437
  %441 = lshr i32 %440, 2
  %442 = trunc i32 %441 to i8
  %443 = getelementptr inbounds i8, i8* %0, i64 1657
  store i8 %442, i8* %443, align 1
  %444 = getelementptr inbounds i8, i8* %0, i64 1626
  store i8 %442, i8* %444, align 1
  %445 = getelementptr inbounds i8, i8* %0, i64 1595
  store i8 %442, i8* %445, align 1
  %446 = shl nuw nsw i32 %402, 1
  %447 = add nuw nsw i32 %405, 2
  %448 = add nuw nsw i32 %447, %399
  %449 = add nuw nsw i32 %448, %446
  %450 = lshr i32 %449, 2
  %451 = trunc i32 %450 to i8
  %452 = getelementptr inbounds i8, i8* %0, i64 1658
  store i8 %451, i8* %452, align 1
  %453 = getelementptr inbounds i8, i8* %0, i64 1627
  store i8 %451, i8* %453, align 1
  %454 = shl nuw nsw i32 %405, 1
  %455 = add nuw nsw i32 %438, %405
  %456 = add nuw nsw i32 %455, %454
  %457 = lshr i32 %456, 2
  %458 = trunc i32 %457 to i8
  %459 = getelementptr inbounds i8, i8* %0, i64 1659
  store i8 %458, i8* %459, align 1
  %460 = getelementptr inbounds i8, i8* %0, i64 1564
  %461 = load i8, i8* %1, align 1
  %462 = zext i8 %461 to i32
  %463 = load i8, i8* %11, align 1
  %464 = zext i8 %463 to i32
  %465 = load i8, i8* %19, align 1
  %466 = zext i8 %465 to i32
  %467 = load i8, i8* %27, align 1
  %468 = zext i8 %467 to i32
  %469 = load i8, i8* %166, align 1
  %470 = zext i8 %469 to i32
  %471 = load i8, i8* %397, align 1
  %472 = zext i8 %471 to i32
  %473 = load i8, i8* %400, align 1
  %474 = zext i8 %473 to i32
  %475 = load i8, i8* %403, align 1
  %476 = zext i8 %475 to i32
  %477 = add nuw nsw i32 %464, 1
  %478 = add nuw nsw i32 %477, %462
  %479 = lshr i32 %478, 1
  %480 = trunc i32 %479 to i8
  store i8 %480, i8* %460, align 1
  %481 = add nuw nsw i32 %477, %466
  %482 = lshr i32 %481, 1
  %483 = trunc i32 %482 to i8
  %484 = getelementptr inbounds i8, i8* %0, i64 1628
  store i8 %483, i8* %484, align 1
  %485 = getelementptr inbounds i8, i8* %0, i64 1565
  store i8 %483, i8* %485, align 1
  %486 = add nuw nsw i32 %468, 1
  %487 = add nuw nsw i32 %486, %466
  %488 = lshr i32 %487, 1
  %489 = trunc i32 %488 to i8
  %490 = getelementptr inbounds i8, i8* %0, i64 1629
  store i8 %489, i8* %490, align 1
  %491 = getelementptr inbounds i8, i8* %0, i64 1566
  store i8 %489, i8* %491, align 1
  %492 = add nuw nsw i32 %486, %470
  %493 = lshr i32 %492, 1
  %494 = trunc i32 %493 to i8
  %495 = getelementptr inbounds i8, i8* %0, i64 1630
  store i8 %494, i8* %495, align 1
  %496 = getelementptr inbounds i8, i8* %0, i64 1567
  store i8 %494, i8* %496, align 1
  %497 = shl nuw nsw i32 %464, 1
  %498 = add nuw nsw i32 %466, 2
  %499 = add nuw nsw i32 %497, %462
  %500 = add nuw nsw i32 %499, %498
  %501 = lshr i32 %500, 2
  %502 = trunc i32 %501 to i8
  %503 = getelementptr inbounds i8, i8* %0, i64 1596
  store i8 %502, i8* %503, align 1
  %504 = shl nuw nsw i32 %466, 1
  %505 = add nuw nsw i32 %468, 2
  %506 = add nuw nsw i32 %504, %464
  %507 = add nuw nsw i32 %506, %505
  %508 = lshr i32 %507, 2
  %509 = trunc i32 %508 to i8
  %510 = getelementptr inbounds i8, i8* %0, i64 1660
  store i8 %509, i8* %510, align 1
  %511 = getelementptr inbounds i8, i8* %0, i64 1597
  store i8 %509, i8* %511, align 1
  %512 = shl nuw nsw i32 %468, 1
  %513 = add nuw nsw i32 %512, %498
  %514 = add nuw nsw i32 %513, %470
  %515 = lshr i32 %514, 2
  %516 = trunc i32 %515 to i8
  %517 = getelementptr inbounds i8, i8* %0, i64 1661
  store i8 %516, i8* %517, align 1
  %518 = getelementptr inbounds i8, i8* %0, i64 1598
  store i8 %516, i8* %518, align 1
  %519 = shl nuw nsw i32 %470, 1
  %520 = add nuw nsw i32 %519, %505
  %521 = add nuw nsw i32 %520, %472
  %522 = lshr i32 %521, 2
  %523 = trunc i32 %522 to i8
  %524 = getelementptr inbounds i8, i8* %0, i64 1662
  store i8 %523, i8* %524, align 1
  %525 = getelementptr inbounds i8, i8* %0, i64 1599
  store i8 %523, i8* %525, align 1
  %526 = shl nuw nsw i32 %472, 1
  %527 = add nuw nsw i32 %470, 2
  %528 = add nuw nsw i32 %527, %526
  %529 = add nuw nsw i32 %528, %474
  %530 = lshr i32 %529, 2
  %531 = trunc i32 %530 to i8
  %532 = getelementptr inbounds i8, i8* %0, i64 1631
  store i8 %531, i8* %532, align 1
  %533 = shl nuw nsw i32 %474, 1
  %534 = add nuw nsw i32 %472, 2
  %535 = add nuw nsw i32 %534, %533
  %536 = add nuw nsw i32 %535, %476
  %537 = lshr i32 %536, 2
  %538 = trunc i32 %537 to i8
  %539 = getelementptr inbounds i8, i8* %0, i64 1663
  store i8 %538, i8* %539, align 1
  %540 = getelementptr inbounds i8, i8* %0, i64 1664
  %541 = load i8, i8* %41, align 1
  %542 = zext i8 %541 to i32
  %543 = load i8, i8* %30, align 1
  %544 = zext i8 %543 to i32
  %545 = load i8, i8* %22, align 1
  %546 = zext i8 %545 to i32
  %547 = load i8, i8* %14, align 1
  %548 = zext i8 %547 to i32
  %549 = load i8, i8* %6, align 1
  %550 = zext i8 %549 to i32
  %551 = load i8, i8* %1, align 1
  %552 = zext i8 %551 to i32
  %553 = load i8, i8* %11, align 1
  %554 = zext i8 %553 to i32
  %555 = load i8, i8* %19, align 1
  %556 = zext i8 %555 to i32
  %557 = add nuw nsw i32 %544, 1
  %558 = add nuw nsw i32 %557, %542
  %559 = lshr i32 %558, 1
  %560 = trunc i32 %559 to i8
  %561 = getelementptr inbounds i8, i8* %0, i64 1698
  store i8 %560, i8* %561, align 1
  store i8 %560, i8* %540, align 1
  %562 = add nuw nsw i32 %557, %546
  %563 = lshr i32 %562, 1
  %564 = trunc i32 %563 to i8
  %565 = getelementptr inbounds i8, i8* %0, i64 1730
  store i8 %564, i8* %565, align 1
  %566 = getelementptr inbounds i8, i8* %0, i64 1696
  store i8 %564, i8* %566, align 1
  %567 = add nuw nsw i32 %548, 1
  %568 = add nuw nsw i32 %567, %546
  %569 = lshr i32 %568, 1
  %570 = trunc i32 %569 to i8
  %571 = getelementptr inbounds i8, i8* %0, i64 1762
  store i8 %570, i8* %571, align 1
  %572 = getelementptr inbounds i8, i8* %0, i64 1728
  store i8 %570, i8* %572, align 1
  %573 = add nuw nsw i32 %567, %550
  %574 = lshr i32 %573, 1
  %575 = trunc i32 %574 to i8
  %576 = getelementptr inbounds i8, i8* %0, i64 1760
  store i8 %575, i8* %576, align 1
  %577 = shl nuw nsw i32 %554, 1
  %578 = add nuw nsw i32 %552, 2
  %579 = add nuw nsw i32 %578, %577
  %580 = add nuw nsw i32 %579, %556
  %581 = lshr i32 %580, 2
  %582 = trunc i32 %581 to i8
  %583 = getelementptr inbounds i8, i8* %0, i64 1667
  store i8 %582, i8* %583, align 1
  %584 = shl nuw nsw i32 %552, 1
  %585 = add nuw nsw i32 %542, 2
  %586 = add nuw nsw i32 %584, %585
  %587 = add nuw nsw i32 %586, %554
  %588 = lshr i32 %587, 2
  %589 = trunc i32 %588 to i8
  %590 = getelementptr inbounds i8, i8* %0, i64 1666
  store i8 %589, i8* %590, align 1
  %591 = shl nuw nsw i32 %542, 1
  %592 = add nuw nsw i32 %544, 2
  %593 = add nuw nsw i32 %592, %591
  %594 = add nuw nsw i32 %593, %552
  %595 = lshr i32 %594, 2
  %596 = trunc i32 %595 to i8
  %597 = getelementptr inbounds i8, i8* %0, i64 1699
  store i8 %596, i8* %597, align 1
  %598 = getelementptr inbounds i8, i8* %0, i64 1665
  store i8 %596, i8* %598, align 1
  %599 = shl nuw nsw i32 %544, 1
  %600 = add nuw nsw i32 %585, %546
  %601 = add nuw nsw i32 %600, %599
  %602 = lshr i32 %601, 2
  %603 = trunc i32 %602 to i8
  %604 = getelementptr inbounds i8, i8* %0, i64 1731
  store i8 %603, i8* %604, align 1
  %605 = getelementptr inbounds i8, i8* %0, i64 1697
  store i8 %603, i8* %605, align 1
  %606 = shl nuw nsw i32 %546, 1
  %607 = add nuw nsw i32 %592, %548
  %608 = add nuw nsw i32 %607, %606
  %609 = lshr i32 %608, 2
  %610 = trunc i32 %609 to i8
  %611 = getelementptr inbounds i8, i8* %0, i64 1763
  store i8 %610, i8* %611, align 1
  %612 = getelementptr inbounds i8, i8* %0, i64 1729
  store i8 %610, i8* %612, align 1
  %613 = shl nuw nsw i32 %548, 1
  %614 = add nuw nsw i32 %546, 2
  %615 = add nuw nsw i32 %614, %550
  %616 = add nuw nsw i32 %615, %613
  %617 = lshr i32 %616, 2
  %618 = trunc i32 %617 to i8
  %619 = getelementptr inbounds i8, i8* %0, i64 1761
  store i8 %618, i8* %619, align 1
  %620 = getelementptr inbounds i8, i8* %0, i64 1668
  %621 = load i8, i8* %30, align 1
  %622 = zext i8 %621 to i32
  %623 = load i8, i8* %22, align 1
  %624 = zext i8 %623 to i32
  %625 = load i8, i8* %14, align 1
  %626 = zext i8 %625 to i32
  %627 = load i8, i8* %6, align 1
  %628 = zext i8 %627 to i32
  %629 = add nuw nsw i32 %624, 1
  %630 = add nuw nsw i32 %629, %622
  %631 = lshr i32 %630, 1
  %632 = trunc i32 %631 to i8
  store i8 %632, i8* %620, align 1
  %633 = add nuw nsw i32 %629, %626
  %634 = lshr i32 %633, 1
  %635 = trunc i32 %634 to i8
  %636 = getelementptr inbounds i8, i8* %0, i64 1700
  store i8 %635, i8* %636, align 1
  %637 = getelementptr inbounds i8, i8* %0, i64 1670
  store i8 %635, i8* %637, align 1
  %638 = add nuw nsw i32 %626, 1
  %639 = add nuw nsw i32 %638, %628
  %640 = lshr i32 %639, 1
  %641 = trunc i32 %640 to i8
  %642 = getelementptr inbounds i8, i8* %0, i64 1732
  store i8 %641, i8* %642, align 1
  %643 = getelementptr inbounds i8, i8* %0, i64 1702
  store i8 %641, i8* %643, align 1
  %644 = shl nuw nsw i32 %624, 1
  %645 = add nuw nsw i32 %626, 2
  %646 = add nuw nsw i32 %644, %622
  %647 = add nuw nsw i32 %646, %645
  %648 = lshr i32 %647, 2
  %649 = trunc i32 %648 to i8
  %650 = getelementptr inbounds i8, i8* %0, i64 1669
  store i8 %649, i8* %650, align 1
  %651 = shl nuw nsw i32 %626, 1
  %652 = add nuw nsw i32 %624, 2
  %653 = add nuw nsw i32 %652, %628
  %654 = add nuw nsw i32 %653, %651
  %655 = lshr i32 %654, 2
  %656 = trunc i32 %655 to i8
  %657 = getelementptr inbounds i8, i8* %0, i64 1701
  store i8 %656, i8* %657, align 1
  %658 = getelementptr inbounds i8, i8* %0, i64 1671
  store i8 %656, i8* %658, align 1
  %659 = shl nuw nsw i32 %628, 1
  %660 = add nuw nsw i32 %645, %628
  %661 = add nuw nsw i32 %660, %659
  %662 = lshr i32 %661, 2
  %663 = trunc i32 %662 to i8
  %664 = getelementptr inbounds i8, i8* %0, i64 1733
  store i8 %663, i8* %664, align 1
  %665 = getelementptr inbounds i8, i8* %0, i64 1703
  store i8 %663, i8* %665, align 1
  %666 = getelementptr inbounds i8, i8* %0, i64 1764
  %667 = getelementptr inbounds i8, i8* %0, i64 1734
  store i8 %627, i8* %667, align 1
  %668 = getelementptr inbounds i8, i8* %0, i64 1735
  store i8 %627, i8* %668, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %666, i8 %627, i64 4, i1 false) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Intra16Preds_C(i8* nocapture, i8* readonly, i8* readonly) #2 {
  %4 = icmp eq i8* %2, null
  br i1 %4, label %139, label %5

5:                                                ; preds = %3
  %6 = load i8, i8* %2, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %7, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = add nuw nsw i32 %11, %14
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add nuw nsw i32 %15, %18
  %20 = getelementptr inbounds i8, i8* %2, i64 4
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = add nuw nsw i32 %19, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 5
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = add nuw nsw i32 %23, %26
  %28 = getelementptr inbounds i8, i8* %2, i64 6
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = add nuw nsw i32 %27, %30
  %32 = getelementptr inbounds i8, i8* %2, i64 7
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = add nuw nsw i32 %31, %34
  %36 = getelementptr inbounds i8, i8* %2, i64 8
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add nuw nsw i32 %35, %38
  %40 = getelementptr inbounds i8, i8* %2, i64 9
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = add nuw nsw i32 %39, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 10
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = add nuw nsw i32 %43, %46
  %48 = getelementptr inbounds i8, i8* %2, i64 11
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = add nuw nsw i32 %47, %50
  %52 = getelementptr inbounds i8, i8* %2, i64 12
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = add nuw nsw i32 %51, %54
  %56 = getelementptr inbounds i8, i8* %2, i64 13
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = add nuw nsw i32 %55, %58
  %60 = getelementptr inbounds i8, i8* %2, i64 14
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = add nuw nsw i32 %59, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 15
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = add nuw nsw i32 %63, %66
  %68 = icmp eq i8* %1, null
  br i1 %68, label %133, label %69

69:                                               ; preds = %5
  %70 = load i8, i8* %1, align 1
  %71 = zext i8 %70 to i32
  %72 = add nuw nsw i32 %67, %71
  %73 = getelementptr inbounds i8, i8* %1, i64 1
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = add nuw nsw i32 %72, %75
  %77 = getelementptr inbounds i8, i8* %1, i64 2
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = add nuw nsw i32 %76, %79
  %81 = getelementptr inbounds i8, i8* %1, i64 3
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = add nuw nsw i32 %80, %83
  %85 = getelementptr inbounds i8, i8* %1, i64 4
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = add nuw nsw i32 %84, %87
  %89 = getelementptr inbounds i8, i8* %1, i64 5
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = add nuw nsw i32 %88, %91
  %93 = getelementptr inbounds i8, i8* %1, i64 6
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = add nuw nsw i32 %92, %95
  %97 = getelementptr inbounds i8, i8* %1, i64 7
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = add nuw nsw i32 %96, %99
  %101 = getelementptr inbounds i8, i8* %1, i64 8
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = add nuw nsw i32 %100, %103
  %105 = getelementptr inbounds i8, i8* %1, i64 9
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = add nuw nsw i32 %104, %107
  %109 = getelementptr inbounds i8, i8* %1, i64 10
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = add nuw nsw i32 %108, %111
  %113 = getelementptr inbounds i8, i8* %1, i64 11
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = add nuw nsw i32 %112, %115
  %117 = getelementptr inbounds i8, i8* %1, i64 12
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = add nuw nsw i32 %116, %119
  %121 = getelementptr inbounds i8, i8* %1, i64 13
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = add nuw nsw i32 %120, %123
  %125 = getelementptr inbounds i8, i8* %1, i64 14
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = add nuw nsw i32 %124, %127
  %129 = getelementptr inbounds i8, i8* %1, i64 15
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = add nuw nsw i32 %128, %131
  br label %135

133:                                              ; preds = %5
  %134 = shl nuw nsw i32 %67, 1
  br label %135

135:                                              ; preds = %69, %133
  %136 = phi i32 [ %134, %133 ], [ %132, %69 ]
  %137 = add nuw nsw i32 %136, 16
  %138 = ashr i32 %137, 5
  br label %207

139:                                              ; preds = %3
  %140 = icmp eq i8* %1, null
  br i1 %140, label %207, label %141

141:                                              ; preds = %139
  %142 = load i8, i8* %1, align 1
  %143 = zext i8 %142 to i32
  %144 = getelementptr inbounds i8, i8* %1, i64 1
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = add nuw nsw i32 %143, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 2
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = add nuw nsw i32 %147, %150
  %152 = getelementptr inbounds i8, i8* %1, i64 3
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = add nuw nsw i32 %151, %154
  %156 = getelementptr inbounds i8, i8* %1, i64 4
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = add nuw nsw i32 %155, %158
  %160 = getelementptr inbounds i8, i8* %1, i64 5
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = add nuw nsw i32 %159, %162
  %164 = getelementptr inbounds i8, i8* %1, i64 6
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = add nuw nsw i32 %163, %166
  %168 = getelementptr inbounds i8, i8* %1, i64 7
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = add nuw nsw i32 %167, %170
  %172 = getelementptr inbounds i8, i8* %1, i64 8
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = add nuw nsw i32 %171, %174
  %176 = getelementptr inbounds i8, i8* %1, i64 9
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = add nuw nsw i32 %175, %178
  %180 = getelementptr inbounds i8, i8* %1, i64 10
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = add nuw nsw i32 %179, %182
  %184 = getelementptr inbounds i8, i8* %1, i64 11
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = add nuw nsw i32 %183, %186
  %188 = getelementptr inbounds i8, i8* %1, i64 12
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = add nuw nsw i32 %187, %190
  %192 = getelementptr inbounds i8, i8* %1, i64 13
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = add nuw nsw i32 %191, %194
  %196 = getelementptr inbounds i8, i8* %1, i64 14
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i32
  %199 = add nuw nsw i32 %195, %198
  %200 = getelementptr inbounds i8, i8* %1, i64 15
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i32
  %203 = add nuw nsw i32 %199, %202
  %204 = shl nuw i32 %203, 1
  %205 = add nuw nsw i32 %204, 16
  %206 = ashr i32 %205, 5
  br label %207

207:                                              ; preds = %141, %139, %135
  %208 = phi i32 [ %138, %135 ], [ %206, %141 ], [ 128, %139 ]
  %209 = trunc i32 %208 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %209, i64 16, i1 false) #7
  %210 = getelementptr inbounds i8, i8* %0, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %210, i8 %209, i64 16, i1 false) #7
  %211 = getelementptr inbounds i8, i8* %0, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %211, i8 %209, i64 16, i1 false) #7
  %212 = getelementptr inbounds i8, i8* %0, i64 96
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %212, i8 %209, i64 16, i1 false) #7
  %213 = getelementptr inbounds i8, i8* %0, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %213, i8 %209, i64 16, i1 false) #7
  %214 = getelementptr inbounds i8, i8* %0, i64 160
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %214, i8 %209, i64 16, i1 false) #7
  %215 = getelementptr inbounds i8, i8* %0, i64 192
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %215, i8 %209, i64 16, i1 false) #7
  %216 = getelementptr inbounds i8, i8* %0, i64 224
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %216, i8 %209, i64 16, i1 false) #7
  %217 = getelementptr inbounds i8, i8* %0, i64 256
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %217, i8 %209, i64 16, i1 false) #7
  %218 = getelementptr inbounds i8, i8* %0, i64 288
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %218, i8 %209, i64 16, i1 false) #7
  %219 = getelementptr inbounds i8, i8* %0, i64 320
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %219, i8 %209, i64 16, i1 false) #7
  %220 = getelementptr inbounds i8, i8* %0, i64 352
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %220, i8 %209, i64 16, i1 false) #7
  %221 = getelementptr inbounds i8, i8* %0, i64 384
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %221, i8 %209, i64 16, i1 false) #7
  %222 = getelementptr inbounds i8, i8* %0, i64 416
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %222, i8 %209, i64 16, i1 false) #7
  %223 = getelementptr inbounds i8, i8* %0, i64 448
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %223, i8 %209, i64 16, i1 false) #7
  %224 = getelementptr inbounds i8, i8* %0, i64 480
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %224, i8 %209, i64 16, i1 false) #7
  %225 = getelementptr inbounds i8, i8* %0, i64 512
  br i1 %4, label %242, label %226

226:                                              ; preds = %207
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %225, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %227 = getelementptr inbounds i8, i8* %0, i64 544
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %227, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %228 = getelementptr inbounds i8, i8* %0, i64 576
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %228, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %229 = getelementptr inbounds i8, i8* %0, i64 608
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %229, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %230 = getelementptr inbounds i8, i8* %0, i64 640
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %230, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %231 = getelementptr inbounds i8, i8* %0, i64 672
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %231, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %232 = getelementptr inbounds i8, i8* %0, i64 704
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %232, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %233 = getelementptr inbounds i8, i8* %0, i64 736
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %233, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %234 = getelementptr inbounds i8, i8* %0, i64 768
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %234, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %235 = getelementptr inbounds i8, i8* %0, i64 800
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %235, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %236 = getelementptr inbounds i8, i8* %0, i64 832
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %236, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %237 = getelementptr inbounds i8, i8* %0, i64 864
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %237, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %238 = getelementptr inbounds i8, i8* %0, i64 896
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %238, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %239 = getelementptr inbounds i8, i8* %0, i64 928
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %239, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %240 = getelementptr inbounds i8, i8* %0, i64 960
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %240, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %241 = getelementptr inbounds i8, i8* %0, i64 992
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %241, i8* nonnull align 1 %2, i64 16, i1 false) #7
  br label %258

242:                                              ; preds = %207
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %225, i8 127, i64 16, i1 false) #7
  %243 = getelementptr inbounds i8, i8* %0, i64 544
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %243, i8 127, i64 16, i1 false) #7
  %244 = getelementptr inbounds i8, i8* %0, i64 576
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %244, i8 127, i64 16, i1 false) #7
  %245 = getelementptr inbounds i8, i8* %0, i64 608
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %245, i8 127, i64 16, i1 false) #7
  %246 = getelementptr inbounds i8, i8* %0, i64 640
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %246, i8 127, i64 16, i1 false) #7
  %247 = getelementptr inbounds i8, i8* %0, i64 672
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %247, i8 127, i64 16, i1 false) #7
  %248 = getelementptr inbounds i8, i8* %0, i64 704
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %248, i8 127, i64 16, i1 false) #7
  %249 = getelementptr inbounds i8, i8* %0, i64 736
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %249, i8 127, i64 16, i1 false) #7
  %250 = getelementptr inbounds i8, i8* %0, i64 768
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %250, i8 127, i64 16, i1 false) #7
  %251 = getelementptr inbounds i8, i8* %0, i64 800
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %251, i8 127, i64 16, i1 false) #7
  %252 = getelementptr inbounds i8, i8* %0, i64 832
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %252, i8 127, i64 16, i1 false) #7
  %253 = getelementptr inbounds i8, i8* %0, i64 864
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %253, i8 127, i64 16, i1 false) #7
  %254 = getelementptr inbounds i8, i8* %0, i64 896
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %254, i8 127, i64 16, i1 false) #7
  %255 = getelementptr inbounds i8, i8* %0, i64 928
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %255, i8 127, i64 16, i1 false) #7
  %256 = getelementptr inbounds i8, i8* %0, i64 960
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %256, i8 127, i64 16, i1 false) #7
  %257 = getelementptr inbounds i8, i8* %0, i64 992
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %257, i8 127, i64 16, i1 false) #7
  br label %258

258:                                              ; preds = %226, %242
  %259 = getelementptr inbounds i8, i8* %0, i64 528
  %260 = icmp eq i8* %1, null
  br i1 %260, label %467, label %261

261:                                              ; preds = %258
  %262 = load i8, i8* %1, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %259, i8 %262, i64 16, i1 false) #7
  %263 = getelementptr inbounds i8, i8* %0, i64 560
  %264 = getelementptr inbounds i8, i8* %1, i64 1
  %265 = load i8, i8* %264, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %263, i8 %265, i64 16, i1 false) #7
  %266 = getelementptr inbounds i8, i8* %0, i64 592
  %267 = getelementptr inbounds i8, i8* %1, i64 2
  %268 = load i8, i8* %267, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %266, i8 %268, i64 16, i1 false) #7
  %269 = getelementptr inbounds i8, i8* %0, i64 624
  %270 = getelementptr inbounds i8, i8* %1, i64 3
  %271 = load i8, i8* %270, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %269, i8 %271, i64 16, i1 false) #7
  %272 = getelementptr inbounds i8, i8* %0, i64 656
  %273 = getelementptr inbounds i8, i8* %1, i64 4
  %274 = load i8, i8* %273, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %272, i8 %274, i64 16, i1 false) #7
  %275 = getelementptr inbounds i8, i8* %0, i64 688
  %276 = getelementptr inbounds i8, i8* %1, i64 5
  %277 = load i8, i8* %276, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %275, i8 %277, i64 16, i1 false) #7
  %278 = getelementptr inbounds i8, i8* %0, i64 720
  %279 = getelementptr inbounds i8, i8* %1, i64 6
  %280 = load i8, i8* %279, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %278, i8 %280, i64 16, i1 false) #7
  %281 = getelementptr inbounds i8, i8* %0, i64 752
  %282 = getelementptr inbounds i8, i8* %1, i64 7
  %283 = load i8, i8* %282, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %281, i8 %283, i64 16, i1 false) #7
  %284 = getelementptr inbounds i8, i8* %0, i64 784
  %285 = getelementptr inbounds i8, i8* %1, i64 8
  %286 = load i8, i8* %285, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %284, i8 %286, i64 16, i1 false) #7
  %287 = getelementptr inbounds i8, i8* %0, i64 816
  %288 = getelementptr inbounds i8, i8* %1, i64 9
  %289 = load i8, i8* %288, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %287, i8 %289, i64 16, i1 false) #7
  %290 = getelementptr inbounds i8, i8* %0, i64 848
  %291 = getelementptr inbounds i8, i8* %1, i64 10
  %292 = load i8, i8* %291, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %290, i8 %292, i64 16, i1 false) #7
  %293 = getelementptr inbounds i8, i8* %0, i64 880
  %294 = getelementptr inbounds i8, i8* %1, i64 11
  %295 = load i8, i8* %294, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %293, i8 %295, i64 16, i1 false) #7
  %296 = getelementptr inbounds i8, i8* %0, i64 912
  %297 = getelementptr inbounds i8, i8* %1, i64 12
  %298 = load i8, i8* %297, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %296, i8 %298, i64 16, i1 false) #7
  %299 = getelementptr inbounds i8, i8* %0, i64 944
  %300 = getelementptr inbounds i8, i8* %1, i64 13
  %301 = load i8, i8* %300, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %299, i8 %301, i64 16, i1 false) #7
  %302 = getelementptr inbounds i8, i8* %0, i64 976
  %303 = getelementptr inbounds i8, i8* %1, i64 14
  %304 = load i8, i8* %303, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %302, i8 %304, i64 16, i1 false) #7
  %305 = getelementptr inbounds i8, i8* %0, i64 1008
  %306 = getelementptr inbounds i8, i8* %1, i64 15
  %307 = load i8, i8* %306, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %305, i8 %307, i64 16, i1 false) #7
  %308 = getelementptr inbounds i8, i8* %0, i64 16
  %309 = icmp eq i8* %2, null
  br i1 %309, label %310, label %357

310:                                              ; preds = %261
  %311 = load i8, i8* %1, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %308, i8 %311, i64 16, i1 false) #7
  %312 = getelementptr inbounds i8, i8* %0, i64 48
  %313 = getelementptr inbounds i8, i8* %1, i64 1
  %314 = load i8, i8* %313, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %312, i8 %314, i64 16, i1 false) #7
  %315 = getelementptr inbounds i8, i8* %0, i64 80
  %316 = getelementptr inbounds i8, i8* %1, i64 2
  %317 = load i8, i8* %316, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %315, i8 %317, i64 16, i1 false) #7
  %318 = getelementptr inbounds i8, i8* %0, i64 112
  %319 = getelementptr inbounds i8, i8* %1, i64 3
  %320 = load i8, i8* %319, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %318, i8 %320, i64 16, i1 false) #7
  %321 = getelementptr inbounds i8, i8* %0, i64 144
  %322 = getelementptr inbounds i8, i8* %1, i64 4
  %323 = load i8, i8* %322, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %321, i8 %323, i64 16, i1 false) #7
  %324 = getelementptr inbounds i8, i8* %0, i64 176
  %325 = getelementptr inbounds i8, i8* %1, i64 5
  %326 = load i8, i8* %325, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %324, i8 %326, i64 16, i1 false) #7
  %327 = getelementptr inbounds i8, i8* %0, i64 208
  %328 = getelementptr inbounds i8, i8* %1, i64 6
  %329 = load i8, i8* %328, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %327, i8 %329, i64 16, i1 false) #7
  %330 = getelementptr inbounds i8, i8* %0, i64 240
  %331 = getelementptr inbounds i8, i8* %1, i64 7
  %332 = load i8, i8* %331, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %330, i8 %332, i64 16, i1 false) #7
  %333 = getelementptr inbounds i8, i8* %0, i64 272
  %334 = getelementptr inbounds i8, i8* %1, i64 8
  %335 = load i8, i8* %334, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %333, i8 %335, i64 16, i1 false) #7
  %336 = getelementptr inbounds i8, i8* %0, i64 304
  %337 = getelementptr inbounds i8, i8* %1, i64 9
  %338 = load i8, i8* %337, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %336, i8 %338, i64 16, i1 false) #7
  %339 = getelementptr inbounds i8, i8* %0, i64 336
  %340 = getelementptr inbounds i8, i8* %1, i64 10
  %341 = load i8, i8* %340, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %339, i8 %341, i64 16, i1 false) #7
  %342 = getelementptr inbounds i8, i8* %0, i64 368
  %343 = getelementptr inbounds i8, i8* %1, i64 11
  %344 = load i8, i8* %343, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %342, i8 %344, i64 16, i1 false) #7
  %345 = getelementptr inbounds i8, i8* %0, i64 400
  %346 = getelementptr inbounds i8, i8* %1, i64 12
  %347 = load i8, i8* %346, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %345, i8 %347, i64 16, i1 false) #7
  %348 = getelementptr inbounds i8, i8* %0, i64 432
  %349 = getelementptr inbounds i8, i8* %1, i64 13
  %350 = load i8, i8* %349, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %348, i8 %350, i64 16, i1 false) #7
  %351 = getelementptr inbounds i8, i8* %0, i64 464
  %352 = getelementptr inbounds i8, i8* %1, i64 14
  %353 = load i8, i8* %352, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %351, i8 %353, i64 16, i1 false) #7
  %354 = getelementptr inbounds i8, i8* %0, i64 496
  %355 = getelementptr inbounds i8, i8* %1, i64 15
  %356 = load i8, i8* %355, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %354, i8 %356, i64 16, i1 false) #7
  br label %517

357:                                              ; preds = %261
  %358 = getelementptr inbounds i8, i8* %1, i64 -1
  %359 = load i8, i8* %358, align 1
  %360 = zext i8 %359 to i64
  %361 = sub nsw i64 0, %360
  %362 = getelementptr inbounds i8, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 255), i64 %361
  %363 = getelementptr inbounds i8, i8* %2, i64 1
  %364 = getelementptr inbounds i8, i8* %2, i64 2
  %365 = getelementptr inbounds i8, i8* %2, i64 3
  %366 = getelementptr inbounds i8, i8* %2, i64 4
  %367 = getelementptr inbounds i8, i8* %2, i64 5
  %368 = getelementptr inbounds i8, i8* %2, i64 6
  %369 = getelementptr inbounds i8, i8* %2, i64 7
  %370 = getelementptr inbounds i8, i8* %2, i64 8
  %371 = getelementptr inbounds i8, i8* %2, i64 9
  %372 = getelementptr inbounds i8, i8* %2, i64 10
  %373 = getelementptr inbounds i8, i8* %2, i64 11
  %374 = getelementptr inbounds i8, i8* %2, i64 12
  %375 = getelementptr inbounds i8, i8* %2, i64 13
  %376 = getelementptr inbounds i8, i8* %2, i64 14
  %377 = getelementptr inbounds i8, i8* %2, i64 15
  br label %378

378:                                              ; preds = %378, %357
  %379 = phi i64 [ 0, %357 ], [ %465, %378 ]
  %380 = phi i8* [ %308, %357 ], [ %464, %378 ]
  %381 = getelementptr inbounds i8, i8* %1, i64 %379
  %382 = load i8, i8* %381, align 1
  %383 = zext i8 %382 to i64
  %384 = getelementptr inbounds i8, i8* %362, i64 %383
  %385 = load i8, i8* %2, align 1
  %386 = zext i8 %385 to i64
  %387 = getelementptr inbounds i8, i8* %384, i64 %386
  %388 = load i8, i8* %387, align 1
  store i8 %388, i8* %380, align 1
  %389 = load i8, i8* %363, align 1
  %390 = zext i8 %389 to i64
  %391 = getelementptr inbounds i8, i8* %384, i64 %390
  %392 = load i8, i8* %391, align 1
  %393 = getelementptr inbounds i8, i8* %380, i64 1
  store i8 %392, i8* %393, align 1
  %394 = load i8, i8* %364, align 1
  %395 = zext i8 %394 to i64
  %396 = getelementptr inbounds i8, i8* %384, i64 %395
  %397 = load i8, i8* %396, align 1
  %398 = getelementptr inbounds i8, i8* %380, i64 2
  store i8 %397, i8* %398, align 1
  %399 = load i8, i8* %365, align 1
  %400 = zext i8 %399 to i64
  %401 = getelementptr inbounds i8, i8* %384, i64 %400
  %402 = load i8, i8* %401, align 1
  %403 = getelementptr inbounds i8, i8* %380, i64 3
  store i8 %402, i8* %403, align 1
  %404 = load i8, i8* %366, align 1
  %405 = zext i8 %404 to i64
  %406 = getelementptr inbounds i8, i8* %384, i64 %405
  %407 = load i8, i8* %406, align 1
  %408 = getelementptr inbounds i8, i8* %380, i64 4
  store i8 %407, i8* %408, align 1
  %409 = load i8, i8* %367, align 1
  %410 = zext i8 %409 to i64
  %411 = getelementptr inbounds i8, i8* %384, i64 %410
  %412 = load i8, i8* %411, align 1
  %413 = getelementptr inbounds i8, i8* %380, i64 5
  store i8 %412, i8* %413, align 1
  %414 = load i8, i8* %368, align 1
  %415 = zext i8 %414 to i64
  %416 = getelementptr inbounds i8, i8* %384, i64 %415
  %417 = load i8, i8* %416, align 1
  %418 = getelementptr inbounds i8, i8* %380, i64 6
  store i8 %417, i8* %418, align 1
  %419 = load i8, i8* %369, align 1
  %420 = zext i8 %419 to i64
  %421 = getelementptr inbounds i8, i8* %384, i64 %420
  %422 = load i8, i8* %421, align 1
  %423 = getelementptr inbounds i8, i8* %380, i64 7
  store i8 %422, i8* %423, align 1
  %424 = load i8, i8* %370, align 1
  %425 = zext i8 %424 to i64
  %426 = getelementptr inbounds i8, i8* %384, i64 %425
  %427 = load i8, i8* %426, align 1
  %428 = getelementptr inbounds i8, i8* %380, i64 8
  store i8 %427, i8* %428, align 1
  %429 = load i8, i8* %371, align 1
  %430 = zext i8 %429 to i64
  %431 = getelementptr inbounds i8, i8* %384, i64 %430
  %432 = load i8, i8* %431, align 1
  %433 = getelementptr inbounds i8, i8* %380, i64 9
  store i8 %432, i8* %433, align 1
  %434 = load i8, i8* %372, align 1
  %435 = zext i8 %434 to i64
  %436 = getelementptr inbounds i8, i8* %384, i64 %435
  %437 = load i8, i8* %436, align 1
  %438 = getelementptr inbounds i8, i8* %380, i64 10
  store i8 %437, i8* %438, align 1
  %439 = load i8, i8* %373, align 1
  %440 = zext i8 %439 to i64
  %441 = getelementptr inbounds i8, i8* %384, i64 %440
  %442 = load i8, i8* %441, align 1
  %443 = getelementptr inbounds i8, i8* %380, i64 11
  store i8 %442, i8* %443, align 1
  %444 = load i8, i8* %374, align 1
  %445 = zext i8 %444 to i64
  %446 = getelementptr inbounds i8, i8* %384, i64 %445
  %447 = load i8, i8* %446, align 1
  %448 = getelementptr inbounds i8, i8* %380, i64 12
  store i8 %447, i8* %448, align 1
  %449 = load i8, i8* %375, align 1
  %450 = zext i8 %449 to i64
  %451 = getelementptr inbounds i8, i8* %384, i64 %450
  %452 = load i8, i8* %451, align 1
  %453 = getelementptr inbounds i8, i8* %380, i64 13
  store i8 %452, i8* %453, align 1
  %454 = load i8, i8* %376, align 1
  %455 = zext i8 %454 to i64
  %456 = getelementptr inbounds i8, i8* %384, i64 %455
  %457 = load i8, i8* %456, align 1
  %458 = getelementptr inbounds i8, i8* %380, i64 14
  store i8 %457, i8* %458, align 1
  %459 = load i8, i8* %377, align 1
  %460 = zext i8 %459 to i64
  %461 = getelementptr inbounds i8, i8* %384, i64 %460
  %462 = load i8, i8* %461, align 1
  %463 = getelementptr inbounds i8, i8* %380, i64 15
  store i8 %462, i8* %463, align 1
  %464 = getelementptr inbounds i8, i8* %380, i64 32
  %465 = add nuw nsw i64 %379, 1
  %466 = icmp eq i64 %465, 16
  br i1 %466, label %517, label %378

467:                                              ; preds = %258
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %259, i8 -127, i64 16, i1 false) #7
  %468 = getelementptr inbounds i8, i8* %0, i64 560
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %468, i8 -127, i64 16, i1 false) #7
  %469 = getelementptr inbounds i8, i8* %0, i64 592
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %469, i8 -127, i64 16, i1 false) #7
  %470 = getelementptr inbounds i8, i8* %0, i64 624
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %470, i8 -127, i64 16, i1 false) #7
  %471 = getelementptr inbounds i8, i8* %0, i64 656
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %471, i8 -127, i64 16, i1 false) #7
  %472 = getelementptr inbounds i8, i8* %0, i64 688
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %472, i8 -127, i64 16, i1 false) #7
  %473 = getelementptr inbounds i8, i8* %0, i64 720
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %473, i8 -127, i64 16, i1 false) #7
  %474 = getelementptr inbounds i8, i8* %0, i64 752
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %474, i8 -127, i64 16, i1 false) #7
  %475 = getelementptr inbounds i8, i8* %0, i64 784
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %475, i8 -127, i64 16, i1 false) #7
  %476 = getelementptr inbounds i8, i8* %0, i64 816
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %476, i8 -127, i64 16, i1 false) #7
  %477 = getelementptr inbounds i8, i8* %0, i64 848
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %477, i8 -127, i64 16, i1 false) #7
  %478 = getelementptr inbounds i8, i8* %0, i64 880
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %478, i8 -127, i64 16, i1 false) #7
  %479 = getelementptr inbounds i8, i8* %0, i64 912
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %479, i8 -127, i64 16, i1 false) #7
  %480 = getelementptr inbounds i8, i8* %0, i64 944
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %480, i8 -127, i64 16, i1 false) #7
  %481 = getelementptr inbounds i8, i8* %0, i64 976
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %481, i8 -127, i64 16, i1 false) #7
  %482 = getelementptr inbounds i8, i8* %0, i64 1008
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %482, i8 -127, i64 16, i1 false) #7
  %483 = getelementptr inbounds i8, i8* %0, i64 16
  %484 = icmp eq i8* %2, null
  br i1 %484, label %485, label %501

485:                                              ; preds = %467
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %483, i8 -127, i64 16, i1 false) #7
  %486 = getelementptr inbounds i8, i8* %0, i64 48
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %486, i8 -127, i64 16, i1 false) #7
  %487 = getelementptr inbounds i8, i8* %0, i64 80
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %487, i8 -127, i64 16, i1 false) #7
  %488 = getelementptr inbounds i8, i8* %0, i64 112
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %488, i8 -127, i64 16, i1 false) #7
  %489 = getelementptr inbounds i8, i8* %0, i64 144
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %489, i8 -127, i64 16, i1 false) #7
  %490 = getelementptr inbounds i8, i8* %0, i64 176
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %490, i8 -127, i64 16, i1 false) #7
  %491 = getelementptr inbounds i8, i8* %0, i64 208
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %491, i8 -127, i64 16, i1 false) #7
  %492 = getelementptr inbounds i8, i8* %0, i64 240
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %492, i8 -127, i64 16, i1 false) #7
  %493 = getelementptr inbounds i8, i8* %0, i64 272
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %493, i8 -127, i64 16, i1 false) #7
  %494 = getelementptr inbounds i8, i8* %0, i64 304
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %494, i8 -127, i64 16, i1 false) #7
  %495 = getelementptr inbounds i8, i8* %0, i64 336
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %495, i8 -127, i64 16, i1 false) #7
  %496 = getelementptr inbounds i8, i8* %0, i64 368
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %496, i8 -127, i64 16, i1 false) #7
  %497 = getelementptr inbounds i8, i8* %0, i64 400
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %497, i8 -127, i64 16, i1 false) #7
  %498 = getelementptr inbounds i8, i8* %0, i64 432
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %498, i8 -127, i64 16, i1 false) #7
  %499 = getelementptr inbounds i8, i8* %0, i64 464
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %499, i8 -127, i64 16, i1 false) #7
  %500 = getelementptr inbounds i8, i8* %0, i64 496
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %500, i8 -127, i64 16, i1 false) #7
  br label %517

501:                                              ; preds = %467
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %483, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %502 = getelementptr inbounds i8, i8* %0, i64 48
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %502, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %503 = getelementptr inbounds i8, i8* %0, i64 80
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %503, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %504 = getelementptr inbounds i8, i8* %0, i64 112
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %504, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %505 = getelementptr inbounds i8, i8* %0, i64 144
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %505, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %506 = getelementptr inbounds i8, i8* %0, i64 176
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %506, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %507 = getelementptr inbounds i8, i8* %0, i64 208
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %507, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %508 = getelementptr inbounds i8, i8* %0, i64 240
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %508, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %509 = getelementptr inbounds i8, i8* %0, i64 272
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %509, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %510 = getelementptr inbounds i8, i8* %0, i64 304
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %510, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %511 = getelementptr inbounds i8, i8* %0, i64 336
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %511, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %512 = getelementptr inbounds i8, i8* %0, i64 368
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %512, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %513 = getelementptr inbounds i8, i8* %0, i64 400
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %513, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %514 = getelementptr inbounds i8, i8* %0, i64 432
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %514, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %515 = getelementptr inbounds i8, i8* %0, i64 464
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %515, i8* nonnull align 1 %2, i64 16, i1 false) #7
  %516 = getelementptr inbounds i8, i8* %0, i64 496
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %516, i8* nonnull align 1 %2, i64 16, i1 false) #7
  br label %517

517:                                              ; preds = %378, %310, %485, %501
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @IntraChromaPreds_C(i8* nocapture, i8* readonly, i8* readonly) #2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 1024
  %5 = icmp eq i8* %2, null
  br i1 %5, label %76, label %6

6:                                                ; preds = %3
  %7 = load i8, i8* %2, align 1
  %8 = zext i8 %7 to i32
  %9 = getelementptr inbounds i8, i8* %2, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = add nuw nsw i32 %8, %11
  %13 = getelementptr inbounds i8, i8* %2, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = add nuw nsw i32 %12, %15
  %17 = getelementptr inbounds i8, i8* %2, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = add nuw nsw i32 %16, %19
  %21 = getelementptr inbounds i8, i8* %2, i64 4
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = add nuw nsw i32 %20, %23
  %25 = getelementptr inbounds i8, i8* %2, i64 5
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = add nuw nsw i32 %24, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 6
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nuw nsw i32 %28, %31
  %33 = getelementptr inbounds i8, i8* %2, i64 7
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = add nuw nsw i32 %32, %35
  %37 = icmp eq i8* %1, null
  br i1 %37, label %70, label %38

38:                                               ; preds = %6
  %39 = load i8, i8* %1, align 1
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i32 %36, %40
  %42 = getelementptr inbounds i8, i8* %1, i64 1
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = add nuw nsw i32 %41, %44
  %46 = getelementptr inbounds i8, i8* %1, i64 2
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = add nuw nsw i32 %45, %48
  %50 = getelementptr inbounds i8, i8* %1, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add nuw nsw i32 %49, %52
  %54 = getelementptr inbounds i8, i8* %1, i64 4
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = add nuw nsw i32 %53, %56
  %58 = getelementptr inbounds i8, i8* %1, i64 5
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = add nuw nsw i32 %57, %60
  %62 = getelementptr inbounds i8, i8* %1, i64 6
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = add nuw nsw i32 %61, %64
  %66 = getelementptr inbounds i8, i8* %1, i64 7
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = add nuw nsw i32 %65, %68
  br label %72

70:                                               ; preds = %6
  %71 = shl nuw nsw i32 %36, 1
  br label %72

72:                                               ; preds = %38, %70
  %73 = phi i32 [ %71, %70 ], [ %69, %38 ]
  %74 = add nuw nsw i32 %73, 8
  %75 = ashr i32 %74, 4
  br label %112

76:                                               ; preds = %3
  %77 = icmp eq i8* %1, null
  br i1 %77, label %112, label %78

78:                                               ; preds = %76
  %79 = load i8, i8* %1, align 1
  %80 = zext i8 %79 to i32
  %81 = getelementptr inbounds i8, i8* %1, i64 1
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = add nuw nsw i32 %80, %83
  %85 = getelementptr inbounds i8, i8* %1, i64 2
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = add nuw nsw i32 %84, %87
  %89 = getelementptr inbounds i8, i8* %1, i64 3
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = add nuw nsw i32 %88, %91
  %93 = getelementptr inbounds i8, i8* %1, i64 4
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = add nuw nsw i32 %92, %95
  %97 = getelementptr inbounds i8, i8* %1, i64 5
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = add nuw nsw i32 %96, %99
  %101 = getelementptr inbounds i8, i8* %1, i64 6
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = add nuw nsw i32 %100, %103
  %105 = getelementptr inbounds i8, i8* %1, i64 7
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = add nuw nsw i32 %104, %107
  %109 = shl nuw i32 %108, 1
  %110 = add nuw nsw i32 %109, 8
  %111 = ashr i32 %110, 4
  br label %112

112:                                              ; preds = %78, %76, %72
  %113 = phi i32 [ %75, %72 ], [ %111, %78 ], [ 128, %76 ]
  %114 = trunc i32 %113 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 %114, i64 8, i1 false) #7
  %115 = getelementptr inbounds i8, i8* %0, i64 1056
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %115, i8 %114, i64 8, i1 false) #7
  %116 = getelementptr inbounds i8, i8* %0, i64 1088
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %116, i8 %114, i64 8, i1 false) #7
  %117 = getelementptr inbounds i8, i8* %0, i64 1120
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %117, i8 %114, i64 8, i1 false) #7
  %118 = getelementptr inbounds i8, i8* %0, i64 1152
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %118, i8 %114, i64 8, i1 false) #7
  %119 = getelementptr inbounds i8, i8* %0, i64 1184
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %119, i8 %114, i64 8, i1 false) #7
  %120 = getelementptr inbounds i8, i8* %0, i64 1216
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %120, i8 %114, i64 8, i1 false) #7
  %121 = getelementptr inbounds i8, i8* %0, i64 1248
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %121, i8 %114, i64 8, i1 false) #7
  %122 = getelementptr inbounds i8, i8* %0, i64 1280
  br i1 %5, label %123, label %139

123:                                              ; preds = %112
  %124 = bitcast i8* %122 to i64*
  store i64 9187201950435737471, i64* %124, align 1
  %125 = getelementptr inbounds i8, i8* %0, i64 1312
  %126 = bitcast i8* %125 to i64*
  store i64 9187201950435737471, i64* %126, align 1
  %127 = getelementptr inbounds i8, i8* %0, i64 1344
  %128 = bitcast i8* %127 to i64*
  store i64 9187201950435737471, i64* %128, align 1
  %129 = getelementptr inbounds i8, i8* %0, i64 1376
  %130 = bitcast i8* %129 to i64*
  store i64 9187201950435737471, i64* %130, align 1
  %131 = getelementptr inbounds i8, i8* %0, i64 1408
  %132 = bitcast i8* %131 to i64*
  store i64 9187201950435737471, i64* %132, align 1
  %133 = getelementptr inbounds i8, i8* %0, i64 1440
  %134 = bitcast i8* %133 to i64*
  store i64 9187201950435737471, i64* %134, align 1
  %135 = getelementptr inbounds i8, i8* %0, i64 1472
  %136 = bitcast i8* %135 to i64*
  store i64 9187201950435737471, i64* %136, align 1
  %137 = getelementptr inbounds i8, i8* %0, i64 1504
  %138 = bitcast i8* %137 to i64*
  store i64 9187201950435737471, i64* %138, align 1
  br label %164

139:                                              ; preds = %112
  %140 = bitcast i8* %2 to i64*
  %141 = bitcast i8* %122 to i64*
  %142 = load i64, i64* %140, align 1
  store i64 %142, i64* %141, align 1
  %143 = getelementptr inbounds i8, i8* %0, i64 1312
  %144 = bitcast i8* %143 to i64*
  %145 = load i64, i64* %140, align 1
  store i64 %145, i64* %144, align 1
  %146 = getelementptr inbounds i8, i8* %0, i64 1344
  %147 = bitcast i8* %146 to i64*
  %148 = load i64, i64* %140, align 1
  store i64 %148, i64* %147, align 1
  %149 = getelementptr inbounds i8, i8* %0, i64 1376
  %150 = bitcast i8* %149 to i64*
  %151 = load i64, i64* %140, align 1
  store i64 %151, i64* %150, align 1
  %152 = getelementptr inbounds i8, i8* %0, i64 1408
  %153 = bitcast i8* %152 to i64*
  %154 = load i64, i64* %140, align 1
  store i64 %154, i64* %153, align 1
  %155 = getelementptr inbounds i8, i8* %0, i64 1440
  %156 = bitcast i8* %155 to i64*
  %157 = load i64, i64* %140, align 1
  store i64 %157, i64* %156, align 1
  %158 = getelementptr inbounds i8, i8* %0, i64 1472
  %159 = bitcast i8* %158 to i64*
  %160 = load i64, i64* %140, align 1
  store i64 %160, i64* %159, align 1
  %161 = getelementptr inbounds i8, i8* %0, i64 1504
  %162 = bitcast i8* %161 to i64*
  %163 = load i64, i64* %140, align 1
  store i64 %163, i64* %162, align 1
  br label %164

164:                                              ; preds = %139, %123
  %165 = getelementptr inbounds i8, i8* %0, i64 1296
  %166 = icmp eq i8* %1, null
  br i1 %166, label %277, label %167

167:                                              ; preds = %164
  %168 = load i8, i8* %1, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %165, i8 %168, i64 8, i1 false) #7
  %169 = getelementptr inbounds i8, i8* %0, i64 1328
  %170 = getelementptr inbounds i8, i8* %1, i64 1
  %171 = load i8, i8* %170, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %169, i8 %171, i64 8, i1 false) #7
  %172 = getelementptr inbounds i8, i8* %0, i64 1360
  %173 = getelementptr inbounds i8, i8* %1, i64 2
  %174 = load i8, i8* %173, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %172, i8 %174, i64 8, i1 false) #7
  %175 = getelementptr inbounds i8, i8* %0, i64 1392
  %176 = getelementptr inbounds i8, i8* %1, i64 3
  %177 = load i8, i8* %176, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %175, i8 %177, i64 8, i1 false) #7
  %178 = getelementptr inbounds i8, i8* %0, i64 1424
  %179 = getelementptr inbounds i8, i8* %1, i64 4
  %180 = load i8, i8* %179, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %178, i8 %180, i64 8, i1 false) #7
  %181 = getelementptr inbounds i8, i8* %0, i64 1456
  %182 = getelementptr inbounds i8, i8* %1, i64 5
  %183 = load i8, i8* %182, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %181, i8 %183, i64 8, i1 false) #7
  %184 = getelementptr inbounds i8, i8* %0, i64 1488
  %185 = getelementptr inbounds i8, i8* %1, i64 6
  %186 = load i8, i8* %185, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %184, i8 %186, i64 8, i1 false) #7
  %187 = getelementptr inbounds i8, i8* %0, i64 1520
  %188 = getelementptr inbounds i8, i8* %1, i64 7
  %189 = load i8, i8* %188, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %187, i8 %189, i64 8, i1 false) #7
  %190 = getelementptr inbounds i8, i8* %0, i64 1040
  %191 = icmp eq i8* %2, null
  br i1 %191, label %192, label %215

192:                                              ; preds = %167
  %193 = load i8, i8* %1, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %190, i8 %193, i64 8, i1 false) #7
  %194 = getelementptr inbounds i8, i8* %0, i64 1072
  %195 = getelementptr inbounds i8, i8* %1, i64 1
  %196 = load i8, i8* %195, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %194, i8 %196, i64 8, i1 false) #7
  %197 = getelementptr inbounds i8, i8* %0, i64 1104
  %198 = getelementptr inbounds i8, i8* %1, i64 2
  %199 = load i8, i8* %198, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %197, i8 %199, i64 8, i1 false) #7
  %200 = getelementptr inbounds i8, i8* %0, i64 1136
  %201 = getelementptr inbounds i8, i8* %1, i64 3
  %202 = load i8, i8* %201, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %200, i8 %202, i64 8, i1 false) #7
  %203 = getelementptr inbounds i8, i8* %0, i64 1168
  %204 = getelementptr inbounds i8, i8* %1, i64 4
  %205 = load i8, i8* %204, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %203, i8 %205, i64 8, i1 false) #7
  %206 = getelementptr inbounds i8, i8* %0, i64 1200
  %207 = getelementptr inbounds i8, i8* %1, i64 5
  %208 = load i8, i8* %207, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %206, i8 %208, i64 8, i1 false) #7
  %209 = getelementptr inbounds i8, i8* %0, i64 1232
  %210 = getelementptr inbounds i8, i8* %1, i64 6
  %211 = load i8, i8* %210, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %209, i8 %211, i64 8, i1 false) #7
  %212 = getelementptr inbounds i8, i8* %0, i64 1264
  %213 = getelementptr inbounds i8, i8* %1, i64 7
  %214 = load i8, i8* %213, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %212, i8 %214, i64 8, i1 false) #7
  br label %336

215:                                              ; preds = %167
  %216 = getelementptr inbounds i8, i8* %1, i64 -1
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i64
  %219 = sub nsw i64 0, %218
  %220 = getelementptr inbounds i8, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 255), i64 %219
  %221 = getelementptr inbounds i8, i8* %2, i64 1
  %222 = getelementptr inbounds i8, i8* %2, i64 2
  %223 = getelementptr inbounds i8, i8* %2, i64 3
  %224 = getelementptr inbounds i8, i8* %2, i64 4
  %225 = getelementptr inbounds i8, i8* %2, i64 5
  %226 = getelementptr inbounds i8, i8* %2, i64 6
  %227 = getelementptr inbounds i8, i8* %2, i64 7
  br label %228

228:                                              ; preds = %228, %215
  %229 = phi i64 [ 0, %215 ], [ %275, %228 ]
  %230 = phi i8* [ %190, %215 ], [ %274, %228 ]
  %231 = getelementptr inbounds i8, i8* %1, i64 %229
  %232 = load i8, i8* %231, align 1
  %233 = zext i8 %232 to i64
  %234 = getelementptr inbounds i8, i8* %220, i64 %233
  %235 = load i8, i8* %2, align 1
  %236 = zext i8 %235 to i64
  %237 = getelementptr inbounds i8, i8* %234, i64 %236
  %238 = load i8, i8* %237, align 1
  store i8 %238, i8* %230, align 1
  %239 = load i8, i8* %221, align 1
  %240 = zext i8 %239 to i64
  %241 = getelementptr inbounds i8, i8* %234, i64 %240
  %242 = load i8, i8* %241, align 1
  %243 = getelementptr inbounds i8, i8* %230, i64 1
  store i8 %242, i8* %243, align 1
  %244 = load i8, i8* %222, align 1
  %245 = zext i8 %244 to i64
  %246 = getelementptr inbounds i8, i8* %234, i64 %245
  %247 = load i8, i8* %246, align 1
  %248 = getelementptr inbounds i8, i8* %230, i64 2
  store i8 %247, i8* %248, align 1
  %249 = load i8, i8* %223, align 1
  %250 = zext i8 %249 to i64
  %251 = getelementptr inbounds i8, i8* %234, i64 %250
  %252 = load i8, i8* %251, align 1
  %253 = getelementptr inbounds i8, i8* %230, i64 3
  store i8 %252, i8* %253, align 1
  %254 = load i8, i8* %224, align 1
  %255 = zext i8 %254 to i64
  %256 = getelementptr inbounds i8, i8* %234, i64 %255
  %257 = load i8, i8* %256, align 1
  %258 = getelementptr inbounds i8, i8* %230, i64 4
  store i8 %257, i8* %258, align 1
  %259 = load i8, i8* %225, align 1
  %260 = zext i8 %259 to i64
  %261 = getelementptr inbounds i8, i8* %234, i64 %260
  %262 = load i8, i8* %261, align 1
  %263 = getelementptr inbounds i8, i8* %230, i64 5
  store i8 %262, i8* %263, align 1
  %264 = load i8, i8* %226, align 1
  %265 = zext i8 %264 to i64
  %266 = getelementptr inbounds i8, i8* %234, i64 %265
  %267 = load i8, i8* %266, align 1
  %268 = getelementptr inbounds i8, i8* %230, i64 6
  store i8 %267, i8* %268, align 1
  %269 = load i8, i8* %227, align 1
  %270 = zext i8 %269 to i64
  %271 = getelementptr inbounds i8, i8* %234, i64 %270
  %272 = load i8, i8* %271, align 1
  %273 = getelementptr inbounds i8, i8* %230, i64 7
  store i8 %272, i8* %273, align 1
  %274 = getelementptr inbounds i8, i8* %230, i64 32
  %275 = add nuw nsw i64 %229, 1
  %276 = icmp eq i64 %275, 8
  br i1 %276, label %336, label %228

277:                                              ; preds = %164
  %278 = bitcast i8* %165 to i64*
  store i64 -9114861777597660799, i64* %278, align 1
  %279 = getelementptr inbounds i8, i8* %0, i64 1328
  %280 = bitcast i8* %279 to i64*
  store i64 -9114861777597660799, i64* %280, align 1
  %281 = getelementptr inbounds i8, i8* %0, i64 1360
  %282 = bitcast i8* %281 to i64*
  store i64 -9114861777597660799, i64* %282, align 1
  %283 = getelementptr inbounds i8, i8* %0, i64 1392
  %284 = bitcast i8* %283 to i64*
  store i64 -9114861777597660799, i64* %284, align 1
  %285 = getelementptr inbounds i8, i8* %0, i64 1424
  %286 = bitcast i8* %285 to i64*
  store i64 -9114861777597660799, i64* %286, align 1
  %287 = getelementptr inbounds i8, i8* %0, i64 1456
  %288 = bitcast i8* %287 to i64*
  store i64 -9114861777597660799, i64* %288, align 1
  %289 = getelementptr inbounds i8, i8* %0, i64 1488
  %290 = bitcast i8* %289 to i64*
  store i64 -9114861777597660799, i64* %290, align 1
  %291 = getelementptr inbounds i8, i8* %0, i64 1520
  %292 = bitcast i8* %291 to i64*
  store i64 -9114861777597660799, i64* %292, align 1
  %293 = getelementptr inbounds i8, i8* %0, i64 1040
  %294 = icmp eq i8* %2, null
  br i1 %294, label %295, label %311

295:                                              ; preds = %277
  %296 = bitcast i8* %293 to i64*
  store i64 -9114861777597660799, i64* %296, align 1
  %297 = getelementptr inbounds i8, i8* %0, i64 1072
  %298 = bitcast i8* %297 to i64*
  store i64 -9114861777597660799, i64* %298, align 1
  %299 = getelementptr inbounds i8, i8* %0, i64 1104
  %300 = bitcast i8* %299 to i64*
  store i64 -9114861777597660799, i64* %300, align 1
  %301 = getelementptr inbounds i8, i8* %0, i64 1136
  %302 = bitcast i8* %301 to i64*
  store i64 -9114861777597660799, i64* %302, align 1
  %303 = getelementptr inbounds i8, i8* %0, i64 1168
  %304 = bitcast i8* %303 to i64*
  store i64 -9114861777597660799, i64* %304, align 1
  %305 = getelementptr inbounds i8, i8* %0, i64 1200
  %306 = bitcast i8* %305 to i64*
  store i64 -9114861777597660799, i64* %306, align 1
  %307 = getelementptr inbounds i8, i8* %0, i64 1232
  %308 = bitcast i8* %307 to i64*
  store i64 -9114861777597660799, i64* %308, align 1
  %309 = getelementptr inbounds i8, i8* %0, i64 1264
  %310 = bitcast i8* %309 to i64*
  store i64 -9114861777597660799, i64* %310, align 1
  br label %336

311:                                              ; preds = %277
  %312 = bitcast i8* %2 to i64*
  %313 = bitcast i8* %293 to i64*
  %314 = load i64, i64* %312, align 1
  store i64 %314, i64* %313, align 1
  %315 = getelementptr inbounds i8, i8* %0, i64 1072
  %316 = bitcast i8* %315 to i64*
  %317 = load i64, i64* %312, align 1
  store i64 %317, i64* %316, align 1
  %318 = getelementptr inbounds i8, i8* %0, i64 1104
  %319 = bitcast i8* %318 to i64*
  %320 = load i64, i64* %312, align 1
  store i64 %320, i64* %319, align 1
  %321 = getelementptr inbounds i8, i8* %0, i64 1136
  %322 = bitcast i8* %321 to i64*
  %323 = load i64, i64* %312, align 1
  store i64 %323, i64* %322, align 1
  %324 = getelementptr inbounds i8, i8* %0, i64 1168
  %325 = bitcast i8* %324 to i64*
  %326 = load i64, i64* %312, align 1
  store i64 %326, i64* %325, align 1
  %327 = getelementptr inbounds i8, i8* %0, i64 1200
  %328 = bitcast i8* %327 to i64*
  %329 = load i64, i64* %312, align 1
  store i64 %329, i64* %328, align 1
  %330 = getelementptr inbounds i8, i8* %0, i64 1232
  %331 = bitcast i8* %330 to i64*
  %332 = load i64, i64* %312, align 1
  store i64 %332, i64* %331, align 1
  %333 = getelementptr inbounds i8, i8* %0, i64 1264
  %334 = bitcast i8* %333 to i64*
  %335 = load i64, i64* %312, align 1
  store i64 %335, i64* %334, align 1
  br label %336

336:                                              ; preds = %228, %192, %295, %311
  %337 = getelementptr inbounds i8, i8* %2, i64 8
  %338 = select i1 %5, i8* null, i8* %337
  %339 = getelementptr inbounds i8, i8* %1, i64 16
  %340 = select i1 %166, i8* null, i8* %339
  %341 = getelementptr inbounds i8, i8* %0, i64 1032
  %342 = icmp eq i8* %338, null
  br i1 %342, label %413, label %343

343:                                              ; preds = %336
  %344 = load i8, i8* %338, align 1
  %345 = zext i8 %344 to i32
  %346 = getelementptr inbounds i8, i8* %338, i64 1
  %347 = load i8, i8* %346, align 1
  %348 = zext i8 %347 to i32
  %349 = add nuw nsw i32 %345, %348
  %350 = getelementptr inbounds i8, i8* %338, i64 2
  %351 = load i8, i8* %350, align 1
  %352 = zext i8 %351 to i32
  %353 = add nuw nsw i32 %349, %352
  %354 = getelementptr inbounds i8, i8* %338, i64 3
  %355 = load i8, i8* %354, align 1
  %356 = zext i8 %355 to i32
  %357 = add nuw nsw i32 %353, %356
  %358 = getelementptr inbounds i8, i8* %338, i64 4
  %359 = load i8, i8* %358, align 1
  %360 = zext i8 %359 to i32
  %361 = add nuw nsw i32 %357, %360
  %362 = getelementptr inbounds i8, i8* %338, i64 5
  %363 = load i8, i8* %362, align 1
  %364 = zext i8 %363 to i32
  %365 = add nuw nsw i32 %361, %364
  %366 = getelementptr inbounds i8, i8* %338, i64 6
  %367 = load i8, i8* %366, align 1
  %368 = zext i8 %367 to i32
  %369 = add nuw nsw i32 %365, %368
  %370 = getelementptr inbounds i8, i8* %338, i64 7
  %371 = load i8, i8* %370, align 1
  %372 = zext i8 %371 to i32
  %373 = add nuw nsw i32 %369, %372
  %374 = icmp eq i8* %340, null
  br i1 %374, label %407, label %375

375:                                              ; preds = %343
  %376 = load i8, i8* %340, align 1
  %377 = zext i8 %376 to i32
  %378 = add nuw nsw i32 %373, %377
  %379 = getelementptr inbounds i8, i8* %340, i64 1
  %380 = load i8, i8* %379, align 1
  %381 = zext i8 %380 to i32
  %382 = add nuw nsw i32 %378, %381
  %383 = getelementptr inbounds i8, i8* %340, i64 2
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i32
  %386 = add nuw nsw i32 %382, %385
  %387 = getelementptr inbounds i8, i8* %340, i64 3
  %388 = load i8, i8* %387, align 1
  %389 = zext i8 %388 to i32
  %390 = add nuw nsw i32 %386, %389
  %391 = getelementptr inbounds i8, i8* %340, i64 4
  %392 = load i8, i8* %391, align 1
  %393 = zext i8 %392 to i32
  %394 = add nuw nsw i32 %390, %393
  %395 = getelementptr inbounds i8, i8* %340, i64 5
  %396 = load i8, i8* %395, align 1
  %397 = zext i8 %396 to i32
  %398 = add nuw nsw i32 %394, %397
  %399 = getelementptr inbounds i8, i8* %340, i64 6
  %400 = load i8, i8* %399, align 1
  %401 = zext i8 %400 to i32
  %402 = add nuw nsw i32 %398, %401
  %403 = getelementptr inbounds i8, i8* %340, i64 7
  %404 = load i8, i8* %403, align 1
  %405 = zext i8 %404 to i32
  %406 = add nuw nsw i32 %402, %405
  br label %409

407:                                              ; preds = %343
  %408 = shl nuw nsw i32 %373, 1
  br label %409

409:                                              ; preds = %375, %407
  %410 = phi i32 [ %408, %407 ], [ %406, %375 ]
  %411 = add nuw nsw i32 %410, 8
  %412 = ashr i32 %411, 4
  br label %449

413:                                              ; preds = %336
  %414 = icmp eq i8* %340, null
  br i1 %414, label %449, label %415

415:                                              ; preds = %413
  %416 = load i8, i8* %340, align 1
  %417 = zext i8 %416 to i32
  %418 = getelementptr inbounds i8, i8* %340, i64 1
  %419 = load i8, i8* %418, align 1
  %420 = zext i8 %419 to i32
  %421 = add nuw nsw i32 %417, %420
  %422 = getelementptr inbounds i8, i8* %340, i64 2
  %423 = load i8, i8* %422, align 1
  %424 = zext i8 %423 to i32
  %425 = add nuw nsw i32 %421, %424
  %426 = getelementptr inbounds i8, i8* %340, i64 3
  %427 = load i8, i8* %426, align 1
  %428 = zext i8 %427 to i32
  %429 = add nuw nsw i32 %425, %428
  %430 = getelementptr inbounds i8, i8* %340, i64 4
  %431 = load i8, i8* %430, align 1
  %432 = zext i8 %431 to i32
  %433 = add nuw nsw i32 %429, %432
  %434 = getelementptr inbounds i8, i8* %340, i64 5
  %435 = load i8, i8* %434, align 1
  %436 = zext i8 %435 to i32
  %437 = add nuw nsw i32 %433, %436
  %438 = getelementptr inbounds i8, i8* %340, i64 6
  %439 = load i8, i8* %438, align 1
  %440 = zext i8 %439 to i32
  %441 = add nuw nsw i32 %437, %440
  %442 = getelementptr inbounds i8, i8* %340, i64 7
  %443 = load i8, i8* %442, align 1
  %444 = zext i8 %443 to i32
  %445 = add nuw nsw i32 %441, %444
  %446 = shl nuw i32 %445, 1
  %447 = add nuw nsw i32 %446, 8
  %448 = ashr i32 %447, 4
  br label %449

449:                                              ; preds = %415, %413, %409
  %450 = phi i32 [ %412, %409 ], [ %448, %415 ], [ 128, %413 ]
  %451 = trunc i32 %450 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %341, i8 %451, i64 8, i1 false) #7
  %452 = getelementptr inbounds i8, i8* %0, i64 1064
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %452, i8 %451, i64 8, i1 false) #7
  %453 = getelementptr inbounds i8, i8* %0, i64 1096
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %453, i8 %451, i64 8, i1 false) #7
  %454 = getelementptr inbounds i8, i8* %0, i64 1128
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %454, i8 %451, i64 8, i1 false) #7
  %455 = getelementptr inbounds i8, i8* %0, i64 1160
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %455, i8 %451, i64 8, i1 false) #7
  %456 = getelementptr inbounds i8, i8* %0, i64 1192
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %456, i8 %451, i64 8, i1 false) #7
  %457 = getelementptr inbounds i8, i8* %0, i64 1224
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %457, i8 %451, i64 8, i1 false) #7
  %458 = getelementptr inbounds i8, i8* %0, i64 1256
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %458, i8 %451, i64 8, i1 false) #7
  %459 = getelementptr inbounds i8, i8* %0, i64 1288
  br i1 %342, label %460, label %476

460:                                              ; preds = %449
  %461 = bitcast i8* %459 to i64*
  store i64 9187201950435737471, i64* %461, align 1
  %462 = getelementptr inbounds i8, i8* %0, i64 1320
  %463 = bitcast i8* %462 to i64*
  store i64 9187201950435737471, i64* %463, align 1
  %464 = getelementptr inbounds i8, i8* %0, i64 1352
  %465 = bitcast i8* %464 to i64*
  store i64 9187201950435737471, i64* %465, align 1
  %466 = getelementptr inbounds i8, i8* %0, i64 1384
  %467 = bitcast i8* %466 to i64*
  store i64 9187201950435737471, i64* %467, align 1
  %468 = getelementptr inbounds i8, i8* %0, i64 1416
  %469 = bitcast i8* %468 to i64*
  store i64 9187201950435737471, i64* %469, align 1
  %470 = getelementptr inbounds i8, i8* %0, i64 1448
  %471 = bitcast i8* %470 to i64*
  store i64 9187201950435737471, i64* %471, align 1
  %472 = getelementptr inbounds i8, i8* %0, i64 1480
  %473 = bitcast i8* %472 to i64*
  store i64 9187201950435737471, i64* %473, align 1
  %474 = getelementptr inbounds i8, i8* %0, i64 1512
  %475 = bitcast i8* %474 to i64*
  store i64 9187201950435737471, i64* %475, align 1
  br label %501

476:                                              ; preds = %449
  %477 = bitcast i8* %338 to i64*
  %478 = bitcast i8* %459 to i64*
  %479 = load i64, i64* %477, align 1
  store i64 %479, i64* %478, align 1
  %480 = getelementptr inbounds i8, i8* %0, i64 1320
  %481 = bitcast i8* %480 to i64*
  %482 = load i64, i64* %477, align 1
  store i64 %482, i64* %481, align 1
  %483 = getelementptr inbounds i8, i8* %0, i64 1352
  %484 = bitcast i8* %483 to i64*
  %485 = load i64, i64* %477, align 1
  store i64 %485, i64* %484, align 1
  %486 = getelementptr inbounds i8, i8* %0, i64 1384
  %487 = bitcast i8* %486 to i64*
  %488 = load i64, i64* %477, align 1
  store i64 %488, i64* %487, align 1
  %489 = getelementptr inbounds i8, i8* %0, i64 1416
  %490 = bitcast i8* %489 to i64*
  %491 = load i64, i64* %477, align 1
  store i64 %491, i64* %490, align 1
  %492 = getelementptr inbounds i8, i8* %0, i64 1448
  %493 = bitcast i8* %492 to i64*
  %494 = load i64, i64* %477, align 1
  store i64 %494, i64* %493, align 1
  %495 = getelementptr inbounds i8, i8* %0, i64 1480
  %496 = bitcast i8* %495 to i64*
  %497 = load i64, i64* %477, align 1
  store i64 %497, i64* %496, align 1
  %498 = getelementptr inbounds i8, i8* %0, i64 1512
  %499 = bitcast i8* %498 to i64*
  %500 = load i64, i64* %477, align 1
  store i64 %500, i64* %499, align 1
  br label %501

501:                                              ; preds = %476, %460
  %502 = getelementptr inbounds i8, i8* %0, i64 1304
  %503 = icmp eq i8* %340, null
  br i1 %503, label %614, label %504

504:                                              ; preds = %501
  %505 = load i8, i8* %340, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %502, i8 %505, i64 8, i1 false) #7
  %506 = getelementptr inbounds i8, i8* %0, i64 1336
  %507 = getelementptr inbounds i8, i8* %340, i64 1
  %508 = load i8, i8* %507, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %506, i8 %508, i64 8, i1 false) #7
  %509 = getelementptr inbounds i8, i8* %0, i64 1368
  %510 = getelementptr inbounds i8, i8* %340, i64 2
  %511 = load i8, i8* %510, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %509, i8 %511, i64 8, i1 false) #7
  %512 = getelementptr inbounds i8, i8* %0, i64 1400
  %513 = getelementptr inbounds i8, i8* %340, i64 3
  %514 = load i8, i8* %513, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %512, i8 %514, i64 8, i1 false) #7
  %515 = getelementptr inbounds i8, i8* %0, i64 1432
  %516 = getelementptr inbounds i8, i8* %340, i64 4
  %517 = load i8, i8* %516, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %515, i8 %517, i64 8, i1 false) #7
  %518 = getelementptr inbounds i8, i8* %0, i64 1464
  %519 = getelementptr inbounds i8, i8* %340, i64 5
  %520 = load i8, i8* %519, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %518, i8 %520, i64 8, i1 false) #7
  %521 = getelementptr inbounds i8, i8* %0, i64 1496
  %522 = getelementptr inbounds i8, i8* %340, i64 6
  %523 = load i8, i8* %522, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %521, i8 %523, i64 8, i1 false) #7
  %524 = getelementptr inbounds i8, i8* %0, i64 1528
  %525 = getelementptr inbounds i8, i8* %340, i64 7
  %526 = load i8, i8* %525, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %524, i8 %526, i64 8, i1 false) #7
  %527 = getelementptr inbounds i8, i8* %0, i64 1048
  %528 = icmp eq i8* %338, null
  br i1 %528, label %529, label %552

529:                                              ; preds = %504
  %530 = load i8, i8* %340, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %527, i8 %530, i64 8, i1 false) #7
  %531 = getelementptr inbounds i8, i8* %0, i64 1080
  %532 = getelementptr inbounds i8, i8* %340, i64 1
  %533 = load i8, i8* %532, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %531, i8 %533, i64 8, i1 false) #7
  %534 = getelementptr inbounds i8, i8* %0, i64 1112
  %535 = getelementptr inbounds i8, i8* %340, i64 2
  %536 = load i8, i8* %535, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %534, i8 %536, i64 8, i1 false) #7
  %537 = getelementptr inbounds i8, i8* %0, i64 1144
  %538 = getelementptr inbounds i8, i8* %340, i64 3
  %539 = load i8, i8* %538, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %537, i8 %539, i64 8, i1 false) #7
  %540 = getelementptr inbounds i8, i8* %0, i64 1176
  %541 = getelementptr inbounds i8, i8* %340, i64 4
  %542 = load i8, i8* %541, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %540, i8 %542, i64 8, i1 false) #7
  %543 = getelementptr inbounds i8, i8* %0, i64 1208
  %544 = getelementptr inbounds i8, i8* %340, i64 5
  %545 = load i8, i8* %544, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %543, i8 %545, i64 8, i1 false) #7
  %546 = getelementptr inbounds i8, i8* %0, i64 1240
  %547 = getelementptr inbounds i8, i8* %340, i64 6
  %548 = load i8, i8* %547, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %546, i8 %548, i64 8, i1 false) #7
  %549 = getelementptr inbounds i8, i8* %0, i64 1272
  %550 = getelementptr inbounds i8, i8* %340, i64 7
  %551 = load i8, i8* %550, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %549, i8 %551, i64 8, i1 false) #7
  br label %673

552:                                              ; preds = %504
  %553 = getelementptr inbounds i8, i8* %340, i64 -1
  %554 = load i8, i8* %553, align 1
  %555 = zext i8 %554 to i64
  %556 = sub nsw i64 0, %555
  %557 = getelementptr inbounds i8, i8* getelementptr inbounds ([766 x i8], [766 x i8]* @clip1, i64 0, i64 255), i64 %556
  %558 = getelementptr inbounds i8, i8* %338, i64 1
  %559 = getelementptr inbounds i8, i8* %338, i64 2
  %560 = getelementptr inbounds i8, i8* %338, i64 3
  %561 = getelementptr inbounds i8, i8* %338, i64 4
  %562 = getelementptr inbounds i8, i8* %338, i64 5
  %563 = getelementptr inbounds i8, i8* %338, i64 6
  %564 = getelementptr inbounds i8, i8* %338, i64 7
  br label %565

565:                                              ; preds = %565, %552
  %566 = phi i64 [ 0, %552 ], [ %612, %565 ]
  %567 = phi i8* [ %527, %552 ], [ %611, %565 ]
  %568 = getelementptr inbounds i8, i8* %340, i64 %566
  %569 = load i8, i8* %568, align 1
  %570 = zext i8 %569 to i64
  %571 = getelementptr inbounds i8, i8* %557, i64 %570
  %572 = load i8, i8* %338, align 1
  %573 = zext i8 %572 to i64
  %574 = getelementptr inbounds i8, i8* %571, i64 %573
  %575 = load i8, i8* %574, align 1
  store i8 %575, i8* %567, align 1
  %576 = load i8, i8* %558, align 1
  %577 = zext i8 %576 to i64
  %578 = getelementptr inbounds i8, i8* %571, i64 %577
  %579 = load i8, i8* %578, align 1
  %580 = getelementptr inbounds i8, i8* %567, i64 1
  store i8 %579, i8* %580, align 1
  %581 = load i8, i8* %559, align 1
  %582 = zext i8 %581 to i64
  %583 = getelementptr inbounds i8, i8* %571, i64 %582
  %584 = load i8, i8* %583, align 1
  %585 = getelementptr inbounds i8, i8* %567, i64 2
  store i8 %584, i8* %585, align 1
  %586 = load i8, i8* %560, align 1
  %587 = zext i8 %586 to i64
  %588 = getelementptr inbounds i8, i8* %571, i64 %587
  %589 = load i8, i8* %588, align 1
  %590 = getelementptr inbounds i8, i8* %567, i64 3
  store i8 %589, i8* %590, align 1
  %591 = load i8, i8* %561, align 1
  %592 = zext i8 %591 to i64
  %593 = getelementptr inbounds i8, i8* %571, i64 %592
  %594 = load i8, i8* %593, align 1
  %595 = getelementptr inbounds i8, i8* %567, i64 4
  store i8 %594, i8* %595, align 1
  %596 = load i8, i8* %562, align 1
  %597 = zext i8 %596 to i64
  %598 = getelementptr inbounds i8, i8* %571, i64 %597
  %599 = load i8, i8* %598, align 1
  %600 = getelementptr inbounds i8, i8* %567, i64 5
  store i8 %599, i8* %600, align 1
  %601 = load i8, i8* %563, align 1
  %602 = zext i8 %601 to i64
  %603 = getelementptr inbounds i8, i8* %571, i64 %602
  %604 = load i8, i8* %603, align 1
  %605 = getelementptr inbounds i8, i8* %567, i64 6
  store i8 %604, i8* %605, align 1
  %606 = load i8, i8* %564, align 1
  %607 = zext i8 %606 to i64
  %608 = getelementptr inbounds i8, i8* %571, i64 %607
  %609 = load i8, i8* %608, align 1
  %610 = getelementptr inbounds i8, i8* %567, i64 7
  store i8 %609, i8* %610, align 1
  %611 = getelementptr inbounds i8, i8* %567, i64 32
  %612 = add nuw nsw i64 %566, 1
  %613 = icmp eq i64 %612, 8
  br i1 %613, label %673, label %565

614:                                              ; preds = %501
  %615 = bitcast i8* %502 to i64*
  store i64 -9114861777597660799, i64* %615, align 1
  %616 = getelementptr inbounds i8, i8* %0, i64 1336
  %617 = bitcast i8* %616 to i64*
  store i64 -9114861777597660799, i64* %617, align 1
  %618 = getelementptr inbounds i8, i8* %0, i64 1368
  %619 = bitcast i8* %618 to i64*
  store i64 -9114861777597660799, i64* %619, align 1
  %620 = getelementptr inbounds i8, i8* %0, i64 1400
  %621 = bitcast i8* %620 to i64*
  store i64 -9114861777597660799, i64* %621, align 1
  %622 = getelementptr inbounds i8, i8* %0, i64 1432
  %623 = bitcast i8* %622 to i64*
  store i64 -9114861777597660799, i64* %623, align 1
  %624 = getelementptr inbounds i8, i8* %0, i64 1464
  %625 = bitcast i8* %624 to i64*
  store i64 -9114861777597660799, i64* %625, align 1
  %626 = getelementptr inbounds i8, i8* %0, i64 1496
  %627 = bitcast i8* %626 to i64*
  store i64 -9114861777597660799, i64* %627, align 1
  %628 = getelementptr inbounds i8, i8* %0, i64 1528
  %629 = bitcast i8* %628 to i64*
  store i64 -9114861777597660799, i64* %629, align 1
  %630 = getelementptr inbounds i8, i8* %0, i64 1048
  %631 = icmp eq i8* %338, null
  br i1 %631, label %632, label %648

632:                                              ; preds = %614
  %633 = bitcast i8* %630 to i64*
  store i64 -9114861777597660799, i64* %633, align 1
  %634 = getelementptr inbounds i8, i8* %0, i64 1080
  %635 = bitcast i8* %634 to i64*
  store i64 -9114861777597660799, i64* %635, align 1
  %636 = getelementptr inbounds i8, i8* %0, i64 1112
  %637 = bitcast i8* %636 to i64*
  store i64 -9114861777597660799, i64* %637, align 1
  %638 = getelementptr inbounds i8, i8* %0, i64 1144
  %639 = bitcast i8* %638 to i64*
  store i64 -9114861777597660799, i64* %639, align 1
  %640 = getelementptr inbounds i8, i8* %0, i64 1176
  %641 = bitcast i8* %640 to i64*
  store i64 -9114861777597660799, i64* %641, align 1
  %642 = getelementptr inbounds i8, i8* %0, i64 1208
  %643 = bitcast i8* %642 to i64*
  store i64 -9114861777597660799, i64* %643, align 1
  %644 = getelementptr inbounds i8, i8* %0, i64 1240
  %645 = bitcast i8* %644 to i64*
  store i64 -9114861777597660799, i64* %645, align 1
  %646 = getelementptr inbounds i8, i8* %0, i64 1272
  %647 = bitcast i8* %646 to i64*
  store i64 -9114861777597660799, i64* %647, align 1
  br label %673

648:                                              ; preds = %614
  %649 = bitcast i8* %338 to i64*
  %650 = bitcast i8* %630 to i64*
  %651 = load i64, i64* %649, align 1
  store i64 %651, i64* %650, align 1
  %652 = getelementptr inbounds i8, i8* %0, i64 1080
  %653 = bitcast i8* %652 to i64*
  %654 = load i64, i64* %649, align 1
  store i64 %654, i64* %653, align 1
  %655 = getelementptr inbounds i8, i8* %0, i64 1112
  %656 = bitcast i8* %655 to i64*
  %657 = load i64, i64* %649, align 1
  store i64 %657, i64* %656, align 1
  %658 = getelementptr inbounds i8, i8* %0, i64 1144
  %659 = bitcast i8* %658 to i64*
  %660 = load i64, i64* %649, align 1
  store i64 %660, i64* %659, align 1
  %661 = getelementptr inbounds i8, i8* %0, i64 1176
  %662 = bitcast i8* %661 to i64*
  %663 = load i64, i64* %649, align 1
  store i64 %663, i64* %662, align 1
  %664 = getelementptr inbounds i8, i8* %0, i64 1208
  %665 = bitcast i8* %664 to i64*
  %666 = load i64, i64* %649, align 1
  store i64 %666, i64* %665, align 1
  %667 = getelementptr inbounds i8, i8* %0, i64 1240
  %668 = bitcast i8* %667 to i64*
  %669 = load i64, i64* %649, align 1
  store i64 %669, i64* %668, align 1
  %670 = getelementptr inbounds i8, i8* %0, i64 1272
  %671 = bitcast i8* %670 to i64*
  %672 = load i64, i64* %649, align 1
  store i64 %672, i64* %671, align 1
  br label %673

673:                                              ; preds = %565, %529, %632, %648
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @Mean16x4_C(i8* nocapture readonly, i32* nocapture) #0 {
  %3 = load i8, i8* %0, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %4, %7
  %9 = getelementptr inbounds i8, i8* %0, i64 2
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = add nuw nsw i32 %8, %11
  %13 = getelementptr inbounds i8, i8* %0, i64 3
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = add nuw nsw i32 %12, %15
  %17 = getelementptr inbounds i8, i8* %0, i64 32
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = add nuw nsw i32 %16, %19
  %21 = getelementptr inbounds i8, i8* %0, i64 33
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = add nuw nsw i32 %20, %23
  %25 = getelementptr inbounds i8, i8* %0, i64 34
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = add nuw nsw i32 %24, %27
  %29 = getelementptr inbounds i8, i8* %0, i64 35
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nuw nsw i32 %28, %31
  %33 = getelementptr inbounds i8, i8* %0, i64 64
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = add nuw nsw i32 %32, %35
  %37 = getelementptr inbounds i8, i8* %0, i64 65
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = add nuw nsw i32 %36, %39
  %41 = getelementptr inbounds i8, i8* %0, i64 66
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = add nuw nsw i32 %40, %43
  %45 = getelementptr inbounds i8, i8* %0, i64 67
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = add nuw nsw i32 %44, %47
  %49 = getelementptr inbounds i8, i8* %0, i64 96
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = add nuw nsw i32 %48, %51
  %53 = getelementptr inbounds i8, i8* %0, i64 97
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = add nuw nsw i32 %52, %55
  %57 = getelementptr inbounds i8, i8* %0, i64 98
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = add nuw nsw i32 %56, %59
  %61 = getelementptr inbounds i8, i8* %0, i64 99
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = add nuw nsw i32 %60, %63
  store i32 %64, i32* %1, align 4
  %65 = getelementptr inbounds i8, i8* %0, i64 4
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, i8* %0, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %67, %70
  %72 = getelementptr inbounds i8, i8* %0, i64 6
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = add nuw nsw i32 %71, %74
  %76 = getelementptr inbounds i8, i8* %0, i64 7
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = add nuw nsw i32 %75, %78
  %80 = getelementptr inbounds i8, i8* %0, i64 36
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = add nuw nsw i32 %79, %82
  %84 = getelementptr inbounds i8, i8* %0, i64 37
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = add nuw nsw i32 %83, %86
  %88 = getelementptr inbounds i8, i8* %0, i64 38
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = add nuw nsw i32 %87, %90
  %92 = getelementptr inbounds i8, i8* %0, i64 39
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = add nuw nsw i32 %91, %94
  %96 = getelementptr inbounds i8, i8* %0, i64 68
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = add nuw nsw i32 %95, %98
  %100 = getelementptr inbounds i8, i8* %0, i64 69
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = add nuw nsw i32 %99, %102
  %104 = getelementptr inbounds i8, i8* %0, i64 70
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = add nuw nsw i32 %103, %106
  %108 = getelementptr inbounds i8, i8* %0, i64 71
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = add nuw nsw i32 %107, %110
  %112 = getelementptr inbounds i8, i8* %0, i64 100
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = add nuw nsw i32 %111, %114
  %116 = getelementptr inbounds i8, i8* %0, i64 101
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = add nuw nsw i32 %115, %118
  %120 = getelementptr inbounds i8, i8* %0, i64 102
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = add nuw nsw i32 %119, %122
  %124 = getelementptr inbounds i8, i8* %0, i64 103
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = add nuw nsw i32 %123, %126
  %128 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %127, i32* %128, align 4
  %129 = getelementptr inbounds i8, i8* %0, i64 8
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = getelementptr inbounds i8, i8* %0, i64 9
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = add nuw nsw i32 %131, %134
  %136 = getelementptr inbounds i8, i8* %0, i64 10
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = add nuw nsw i32 %135, %138
  %140 = getelementptr inbounds i8, i8* %0, i64 11
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = add nuw nsw i32 %139, %142
  %144 = getelementptr inbounds i8, i8* %0, i64 40
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = add nuw nsw i32 %143, %146
  %148 = getelementptr inbounds i8, i8* %0, i64 41
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = add nuw nsw i32 %147, %150
  %152 = getelementptr inbounds i8, i8* %0, i64 42
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = add nuw nsw i32 %151, %154
  %156 = getelementptr inbounds i8, i8* %0, i64 43
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = add nuw nsw i32 %155, %158
  %160 = getelementptr inbounds i8, i8* %0, i64 72
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = add nuw nsw i32 %159, %162
  %164 = getelementptr inbounds i8, i8* %0, i64 73
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = add nuw nsw i32 %163, %166
  %168 = getelementptr inbounds i8, i8* %0, i64 74
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = add nuw nsw i32 %167, %170
  %172 = getelementptr inbounds i8, i8* %0, i64 75
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = add nuw nsw i32 %171, %174
  %176 = getelementptr inbounds i8, i8* %0, i64 104
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = add nuw nsw i32 %175, %178
  %180 = getelementptr inbounds i8, i8* %0, i64 105
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = add nuw nsw i32 %179, %182
  %184 = getelementptr inbounds i8, i8* %0, i64 106
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = add nuw nsw i32 %183, %186
  %188 = getelementptr inbounds i8, i8* %0, i64 107
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = add nuw nsw i32 %187, %190
  %192 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %191, i32* %192, align 4
  %193 = getelementptr inbounds i8, i8* %0, i64 12
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = getelementptr inbounds i8, i8* %0, i64 13
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i32
  %199 = add nuw nsw i32 %195, %198
  %200 = getelementptr inbounds i8, i8* %0, i64 14
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i32
  %203 = add nuw nsw i32 %199, %202
  %204 = getelementptr inbounds i8, i8* %0, i64 15
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i32
  %207 = add nuw nsw i32 %203, %206
  %208 = getelementptr inbounds i8, i8* %0, i64 44
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i32
  %211 = add nuw nsw i32 %207, %210
  %212 = getelementptr inbounds i8, i8* %0, i64 45
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = add nuw nsw i32 %211, %214
  %216 = getelementptr inbounds i8, i8* %0, i64 46
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i32
  %219 = add nuw nsw i32 %215, %218
  %220 = getelementptr inbounds i8, i8* %0, i64 47
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i32
  %223 = add nuw nsw i32 %219, %222
  %224 = getelementptr inbounds i8, i8* %0, i64 76
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  %227 = add nuw nsw i32 %223, %226
  %228 = getelementptr inbounds i8, i8* %0, i64 77
  %229 = load i8, i8* %228, align 1
  %230 = zext i8 %229 to i32
  %231 = add nuw nsw i32 %227, %230
  %232 = getelementptr inbounds i8, i8* %0, i64 78
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i32
  %235 = add nuw nsw i32 %231, %234
  %236 = getelementptr inbounds i8, i8* %0, i64 79
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i32
  %239 = add nuw nsw i32 %235, %238
  %240 = getelementptr inbounds i8, i8* %0, i64 108
  %241 = load i8, i8* %240, align 1
  %242 = zext i8 %241 to i32
  %243 = add nuw nsw i32 %239, %242
  %244 = getelementptr inbounds i8, i8* %0, i64 109
  %245 = load i8, i8* %244, align 1
  %246 = zext i8 %245 to i32
  %247 = add nuw nsw i32 %243, %246
  %248 = getelementptr inbounds i8, i8* %0, i64 110
  %249 = load i8, i8* %248, align 1
  %250 = zext i8 %249 to i32
  %251 = add nuw nsw i32 %247, %250
  %252 = getelementptr inbounds i8, i8* %0, i64 111
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i32
  %255 = add nuw nsw i32 %251, %254
  %256 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %255, i32* %256, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Copy4x4_C(i8* nocapture readonly, i8* nocapture) #2 {
  %3 = bitcast i8* %0 to i32*
  %4 = bitcast i8* %1 to i32*
  %5 = load i32, i32* %3, align 1
  store i32 %5, i32* %4, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 32
  %7 = getelementptr inbounds i8, i8* %1, i64 32
  %8 = bitcast i8* %6 to i32*
  %9 = bitcast i8* %7 to i32*
  %10 = load i32, i32* %8, align 1
  store i32 %10, i32* %9, align 1
  %11 = getelementptr inbounds i8, i8* %0, i64 64
  %12 = getelementptr inbounds i8, i8* %1, i64 64
  %13 = bitcast i8* %11 to i32*
  %14 = bitcast i8* %12 to i32*
  %15 = load i32, i32* %13, align 1
  store i32 %15, i32* %14, align 1
  %16 = getelementptr inbounds i8, i8* %0, i64 96
  %17 = getelementptr inbounds i8, i8* %1, i64 96
  %18 = bitcast i8* %16 to i32*
  %19 = bitcast i8* %17 to i32*
  %20 = load i32, i32* %18, align 1
  store i32 %20, i32* %19, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Copy16x8_C(i8* nocapture readonly, i8* nocapture) #2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %0, i64 16, i1 false) #7
  %3 = getelementptr inbounds i8, i8* %0, i64 32
  %4 = getelementptr inbounds i8, i8* %1, i64 32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %3, i64 16, i1 false) #7
  %5 = getelementptr inbounds i8, i8* %0, i64 64
  %6 = getelementptr inbounds i8, i8* %1, i64 64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %5, i64 16, i1 false) #7
  %7 = getelementptr inbounds i8, i8* %0, i64 96
  %8 = getelementptr inbounds i8, i8* %1, i64 96
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %7, i64 16, i1 false) #7
  %9 = getelementptr inbounds i8, i8* %0, i64 128
  %10 = getelementptr inbounds i8, i8* %1, i64 128
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %9, i64 16, i1 false) #7
  %11 = getelementptr inbounds i8, i8* %0, i64 160
  %12 = getelementptr inbounds i8, i8* %1, i64 160
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %11, i64 16, i1 false) #7
  %13 = getelementptr inbounds i8, i8* %0, i64 192
  %14 = getelementptr inbounds i8, i8* %1, i64 192
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %13, i64 16, i1 false) #7
  %15 = getelementptr inbounds i8, i8* %0, i64 224
  %16 = getelementptr inbounds i8, i8* %1, i64 224
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %15, i64 16, i1 false) #7
  ret void
}

declare void @VP8EncDspInitSSE2() local_unnamed_addr #3

declare void @VP8EncDspInitSSE41() local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @ITransformOne(i8* nocapture readonly, i16* nocapture readonly, i8* nocapture) unnamed_addr #6 {
  %4 = alloca [16 x i32], align 16
  %5 = bitcast [16 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 64, i1 false)
  %6 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %7 = load i16, i16* %1, align 2
  %8 = sext i16 %7 to i32
  %9 = getelementptr inbounds i16, i16* %1, i64 8
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i32
  %12 = add nsw i32 %11, %8
  %13 = sub nsw i32 %8, %11
  %14 = getelementptr inbounds i16, i16* %1, i64 4
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = mul nsw i32 %16, 35468
  %18 = ashr i32 %17, 16
  %19 = getelementptr inbounds i16, i16* %1, i64 12
  %20 = load i16, i16* %19, align 2
  %21 = sext i16 %20 to i32
  %22 = mul nsw i32 %21, 85627
  %23 = ashr i32 %22, 16
  %24 = sub nsw i32 %18, %23
  %25 = mul nsw i32 %16, 85627
  %26 = ashr i32 %25, 16
  %27 = mul nsw i32 %21, 35468
  %28 = ashr i32 %27, 16
  %29 = add nsw i32 %28, %26
  %30 = add nsw i32 %29, %12
  store i32 %30, i32* %6, align 16
  %31 = add nsw i32 %24, %13
  %32 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  store i32 %31, i32* %32, align 4
  %33 = sub nsw i32 %13, %24
  %34 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  store i32 %33, i32* %34, align 8
  %35 = sub nsw i32 %12, %29
  %36 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  store i32 %35, i32* %36, align 4
  %37 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %38 = getelementptr inbounds i16, i16* %1, i64 1
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = getelementptr inbounds i16, i16* %1, i64 9
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = add nsw i32 %43, %40
  %45 = sub nsw i32 %40, %43
  %46 = getelementptr inbounds i16, i16* %1, i64 5
  %47 = load i16, i16* %46, align 2
  %48 = sext i16 %47 to i32
  %49 = mul nsw i32 %48, 35468
  %50 = ashr i32 %49, 16
  %51 = getelementptr inbounds i16, i16* %1, i64 13
  %52 = load i16, i16* %51, align 2
  %53 = sext i16 %52 to i32
  %54 = mul nsw i32 %53, 85627
  %55 = ashr i32 %54, 16
  %56 = sub nsw i32 %50, %55
  %57 = mul nsw i32 %48, 85627
  %58 = ashr i32 %57, 16
  %59 = mul nsw i32 %53, 35468
  %60 = ashr i32 %59, 16
  %61 = add nsw i32 %60, %58
  %62 = add nsw i32 %61, %44
  store i32 %62, i32* %37, align 16
  %63 = add nsw i32 %56, %45
  %64 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  store i32 %63, i32* %64, align 4
  %65 = sub nsw i32 %45, %56
  %66 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  store i32 %65, i32* %66, align 8
  %67 = sub nsw i32 %44, %61
  %68 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  store i32 %67, i32* %68, align 4
  %69 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %70 = getelementptr inbounds i16, i16* %1, i64 2
  %71 = load i16, i16* %70, align 2
  %72 = sext i16 %71 to i32
  %73 = getelementptr inbounds i16, i16* %1, i64 10
  %74 = load i16, i16* %73, align 2
  %75 = sext i16 %74 to i32
  %76 = add nsw i32 %75, %72
  %77 = sub nsw i32 %72, %75
  %78 = getelementptr inbounds i16, i16* %1, i64 6
  %79 = load i16, i16* %78, align 2
  %80 = sext i16 %79 to i32
  %81 = mul nsw i32 %80, 35468
  %82 = ashr i32 %81, 16
  %83 = getelementptr inbounds i16, i16* %1, i64 14
  %84 = load i16, i16* %83, align 2
  %85 = sext i16 %84 to i32
  %86 = mul nsw i32 %85, 85627
  %87 = ashr i32 %86, 16
  %88 = sub nsw i32 %82, %87
  %89 = mul nsw i32 %80, 85627
  %90 = ashr i32 %89, 16
  %91 = mul nsw i32 %85, 35468
  %92 = ashr i32 %91, 16
  %93 = add nsw i32 %92, %90
  %94 = add nsw i32 %93, %76
  store i32 %94, i32* %69, align 16
  %95 = add nsw i32 %88, %77
  %96 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  store i32 %95, i32* %96, align 4
  %97 = sub nsw i32 %77, %88
  %98 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  store i32 %97, i32* %98, align 8
  %99 = sub nsw i32 %76, %93
  %100 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  store i32 %99, i32* %100, align 4
  %101 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %102 = getelementptr inbounds i16, i16* %1, i64 3
  %103 = load i16, i16* %102, align 2
  %104 = sext i16 %103 to i32
  %105 = getelementptr inbounds i16, i16* %1, i64 11
  %106 = load i16, i16* %105, align 2
  %107 = sext i16 %106 to i32
  %108 = add nsw i32 %107, %104
  %109 = sub nsw i32 %104, %107
  %110 = getelementptr inbounds i16, i16* %1, i64 7
  %111 = load i16, i16* %110, align 2
  %112 = sext i16 %111 to i32
  %113 = mul nsw i32 %112, 35468
  %114 = ashr i32 %113, 16
  %115 = getelementptr inbounds i16, i16* %1, i64 15
  %116 = load i16, i16* %115, align 2
  %117 = sext i16 %116 to i32
  %118 = mul nsw i32 %117, 85627
  %119 = ashr i32 %118, 16
  %120 = sub nsw i32 %114, %119
  %121 = mul nsw i32 %112, 85627
  %122 = ashr i32 %121, 16
  %123 = mul nsw i32 %117, 35468
  %124 = ashr i32 %123, 16
  %125 = add nsw i32 %124, %122
  %126 = add nsw i32 %125, %108
  store i32 %126, i32* %101, align 16
  %127 = add nsw i32 %120, %109
  %128 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  store i32 %127, i32* %128, align 4
  %129 = sub nsw i32 %109, %120
  %130 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  store i32 %129, i32* %130, align 8
  %131 = sub nsw i32 %108, %125
  %132 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  store i32 %131, i32* %132, align 4
  br label %133

133:                                              ; preds = %209, %3
  %134 = phi i32 [ %62, %3 ], [ %212, %209 ]
  %135 = phi i64 [ 0, %3 ], [ %207, %209 ]
  %136 = phi i32* [ %6, %3 ], [ %210, %209 ]
  %137 = load i32, i32* %136, align 4
  %138 = add nsw i32 %137, 4
  %139 = getelementptr inbounds i32, i32* %136, i64 8
  %140 = load i32, i32* %139, align 4
  %141 = add nsw i32 %138, %140
  %142 = sub nsw i32 %138, %140
  %143 = mul nsw i32 %134, 35468
  %144 = ashr i32 %143, 16
  %145 = getelementptr inbounds i32, i32* %136, i64 12
  %146 = load i32, i32* %145, align 4
  %147 = mul nsw i32 %146, 85627
  %148 = ashr i32 %147, 16
  %149 = sub nsw i32 %144, %148
  %150 = mul nsw i32 %134, 85627
  %151 = ashr i32 %150, 16
  %152 = mul nsw i32 %146, 35468
  %153 = ashr i32 %152, 16
  %154 = add nsw i32 %153, %151
  %155 = shl nsw i64 %135, 5
  %156 = getelementptr inbounds i8, i8* %0, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = add nsw i32 %154, %141
  %160 = ashr i32 %159, 3
  %161 = add nsw i32 %160, %158
  %162 = icmp ugt i32 %161, 255
  %163 = icmp slt i32 %161, 0
  %164 = select i1 %163, i32 0, i32 255
  %165 = select i1 %162, i32 %164, i32 %161
  %166 = trunc i32 %165 to i8
  %167 = getelementptr inbounds i8, i8* %2, i64 %155
  store i8 %166, i8* %167, align 1
  %168 = or i64 %155, 1
  %169 = getelementptr inbounds i8, i8* %0, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = add nsw i32 %149, %142
  %173 = ashr i32 %172, 3
  %174 = add nsw i32 %173, %171
  %175 = icmp ugt i32 %174, 255
  %176 = icmp slt i32 %174, 0
  %177 = select i1 %176, i32 0, i32 255
  %178 = select i1 %175, i32 %177, i32 %174
  %179 = trunc i32 %178 to i8
  %180 = getelementptr inbounds i8, i8* %2, i64 %168
  store i8 %179, i8* %180, align 1
  %181 = or i64 %155, 2
  %182 = getelementptr inbounds i8, i8* %0, i64 %181
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = sub nsw i32 %142, %149
  %186 = ashr i32 %185, 3
  %187 = add nsw i32 %186, %184
  %188 = icmp ugt i32 %187, 255
  %189 = icmp slt i32 %187, 0
  %190 = select i1 %189, i32 0, i32 255
  %191 = select i1 %188, i32 %190, i32 %187
  %192 = trunc i32 %191 to i8
  %193 = getelementptr inbounds i8, i8* %2, i64 %181
  store i8 %192, i8* %193, align 1
  %194 = or i64 %155, 3
  %195 = getelementptr inbounds i8, i8* %0, i64 %194
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i32
  %198 = sub nsw i32 %141, %154
  %199 = ashr i32 %198, 3
  %200 = add nsw i32 %199, %197
  %201 = icmp ugt i32 %200, 255
  %202 = icmp slt i32 %200, 0
  %203 = select i1 %202, i32 0, i32 255
  %204 = select i1 %201, i32 %203, i32 %200
  %205 = trunc i32 %204 to i8
  %206 = getelementptr inbounds i8, i8* %2, i64 %194
  store i8 %205, i8* %206, align 1
  %207 = add nuw nsw i64 %135, 1
  %208 = icmp eq i64 %207, 4
  br i1 %208, label %213, label %209

209:                                              ; preds = %133
  %210 = getelementptr inbounds i32, i32* %136, i64 1
  %211 = getelementptr inbounds i32, i32* %136, i64 5
  %212 = load i32, i32* %211, align 4
  br label %133

213:                                              ; preds = %133
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc i32 @TTransform(i8* nocapture readonly, i16* nocapture readonly) unnamed_addr #4 {
  %3 = alloca [16 x i32], align 16
  %4 = bitcast [16 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #7
  %5 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12
  %6 = bitcast i32* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 16, i1 false)
  %7 = load i8, i8* %0, align 1
  %8 = zext i8 %7 to i32
  %9 = getelementptr inbounds i8, i8* %0, i64 2
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = add nuw nsw i32 %11, %8
  %13 = getelementptr inbounds i8, i8* %0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds i8, i8* %0, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add nuw nsw i32 %18, %15
  %20 = sub nsw i32 %15, %18
  %21 = sub nsw i32 %8, %11
  %22 = add nuw nsw i32 %19, %12
  %23 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0
  store i32 %22, i32* %23, align 16
  %24 = add nsw i32 %20, %21
  %25 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1
  store i32 %24, i32* %25, align 4
  %26 = sub nsw i32 %21, %20
  %27 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2
  store i32 %26, i32* %27, align 8
  %28 = sub nsw i32 %12, %19
  %29 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3
  store i32 %28, i32* %29, align 4
  %30 = getelementptr inbounds i8, i8* %0, i64 32
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = getelementptr inbounds i8, i8* %0, i64 34
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = add nuw nsw i32 %35, %32
  %37 = getelementptr inbounds i8, i8* %0, i64 33
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds i8, i8* %0, i64 35
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = add nuw nsw i32 %42, %39
  %44 = sub nsw i32 %39, %42
  %45 = sub nsw i32 %32, %35
  %46 = add nuw nsw i32 %43, %36
  %47 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4
  store i32 %46, i32* %47, align 16
  %48 = add nsw i32 %44, %45
  %49 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5
  store i32 %48, i32* %49, align 4
  %50 = sub nsw i32 %45, %44
  %51 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6
  store i32 %50, i32* %51, align 8
  %52 = sub nsw i32 %36, %43
  %53 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds i8, i8* %0, i64 64
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = getelementptr inbounds i8, i8* %0, i64 66
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = add nuw nsw i32 %59, %56
  %61 = getelementptr inbounds i8, i8* %0, i64 65
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = getelementptr inbounds i8, i8* %0, i64 67
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = add nuw nsw i32 %66, %63
  %68 = sub nsw i32 %63, %66
  %69 = sub nsw i32 %56, %59
  %70 = add nuw nsw i32 %67, %60
  %71 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8
  store i32 %70, i32* %71, align 16
  %72 = add nsw i32 %68, %69
  %73 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9
  store i32 %72, i32* %73, align 4
  %74 = sub nsw i32 %69, %68
  %75 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10
  store i32 %74, i32* %75, align 8
  %76 = sub nsw i32 %60, %67
  %77 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11
  store i32 %76, i32* %77, align 4
  %78 = getelementptr inbounds i8, i8* %0, i64 96
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = getelementptr inbounds i8, i8* %0, i64 98
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = add nuw nsw i32 %83, %80
  %85 = getelementptr inbounds i8, i8* %0, i64 97
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = getelementptr inbounds i8, i8* %0, i64 99
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = add nuw nsw i32 %90, %87
  %92 = sub nsw i32 %87, %90
  %93 = sub nsw i32 %80, %83
  %94 = add nuw nsw i32 %91, %84
  %95 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12
  store i32 %94, i32* %95, align 16
  %96 = add nsw i32 %92, %93
  %97 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13
  store i32 %96, i32* %97, align 4
  %98 = sub nsw i32 %93, %92
  %99 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14
  store i32 %98, i32* %99, align 8
  %100 = sub nsw i32 %84, %91
  %101 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15
  store i32 %100, i32* %101, align 4
  %102 = add nuw nsw i32 %70, %22
  %103 = add nuw nsw i32 %94, %46
  %104 = sub nsw i32 %46, %94
  %105 = sub nsw i32 %22, %70
  %106 = add nuw nsw i32 %103, %102
  %107 = add nsw i32 %104, %105
  %108 = sub nsw i32 %105, %104
  %109 = sub nsw i32 %102, %103
  %110 = load i16, i16* %1, align 2
  %111 = zext i16 %110 to i32
  %112 = mul nuw nsw i32 %106, %111
  %113 = getelementptr inbounds i16, i16* %1, i64 4
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = icmp slt i32 %107, 0
  %117 = sub nsw i32 0, %107
  %118 = select i1 %116, i32 %117, i32 %107
  %119 = mul nsw i32 %118, %115
  %120 = add nuw nsw i32 %112, %119
  %121 = getelementptr inbounds i16, i16* %1, i64 8
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = icmp slt i32 %108, 0
  %125 = sub nsw i32 0, %108
  %126 = select i1 %124, i32 %125, i32 %108
  %127 = mul nsw i32 %126, %123
  %128 = add nuw nsw i32 %120, %127
  %129 = getelementptr inbounds i16, i16* %1, i64 12
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = icmp slt i32 %109, 0
  %133 = sub nsw i32 0, %109
  %134 = select i1 %132, i32 %133, i32 %109
  %135 = mul nsw i32 %134, %131
  %136 = add nuw nsw i32 %128, %135
  %137 = getelementptr inbounds i16, i16* %1, i64 1
  %138 = load i32, i32* %25, align 4
  %139 = add nsw i32 %72, %138
  %140 = load i32, i32* %49, align 4
  %141 = add nsw i32 %96, %140
  %142 = sub nsw i32 %140, %96
  %143 = sub nsw i32 %138, %72
  %144 = add nsw i32 %141, %139
  %145 = add nsw i32 %142, %143
  %146 = sub nsw i32 %143, %142
  %147 = sub nsw i32 %139, %141
  %148 = load i16, i16* %137, align 2
  %149 = zext i16 %148 to i32
  %150 = icmp slt i32 %144, 0
  %151 = sub nsw i32 0, %144
  %152 = select i1 %150, i32 %151, i32 %144
  %153 = mul nsw i32 %152, %149
  %154 = add nsw i32 %153, %136
  %155 = getelementptr inbounds i16, i16* %1, i64 5
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = icmp slt i32 %145, 0
  %159 = sub nsw i32 0, %145
  %160 = select i1 %158, i32 %159, i32 %145
  %161 = mul nsw i32 %160, %157
  %162 = add nsw i32 %154, %161
  %163 = getelementptr inbounds i16, i16* %1, i64 9
  %164 = load i16, i16* %163, align 2
  %165 = zext i16 %164 to i32
  %166 = icmp slt i32 %146, 0
  %167 = sub nsw i32 0, %146
  %168 = select i1 %166, i32 %167, i32 %146
  %169 = mul nsw i32 %168, %165
  %170 = add nsw i32 %162, %169
  %171 = getelementptr inbounds i16, i16* %1, i64 13
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = icmp slt i32 %147, 0
  %175 = sub nsw i32 0, %147
  %176 = select i1 %174, i32 %175, i32 %147
  %177 = mul nsw i32 %176, %173
  %178 = add nsw i32 %170, %177
  %179 = getelementptr inbounds i16, i16* %1, i64 2
  %180 = load i32, i32* %27, align 8
  %181 = load i32, i32* %75, align 8
  %182 = add nsw i32 %181, %180
  %183 = load i32, i32* %51, align 8
  %184 = add nsw i32 %98, %183
  %185 = sub nsw i32 %183, %98
  %186 = sub nsw i32 %180, %181
  %187 = add nsw i32 %184, %182
  %188 = add nsw i32 %185, %186
  %189 = sub nsw i32 %186, %185
  %190 = sub nsw i32 %182, %184
  %191 = load i16, i16* %179, align 2
  %192 = zext i16 %191 to i32
  %193 = icmp slt i32 %187, 0
  %194 = sub nsw i32 0, %187
  %195 = select i1 %193, i32 %194, i32 %187
  %196 = mul nsw i32 %195, %192
  %197 = add nsw i32 %196, %178
  %198 = getelementptr inbounds i16, i16* %1, i64 6
  %199 = load i16, i16* %198, align 2
  %200 = zext i16 %199 to i32
  %201 = icmp slt i32 %188, 0
  %202 = sub nsw i32 0, %188
  %203 = select i1 %201, i32 %202, i32 %188
  %204 = mul nsw i32 %203, %200
  %205 = add nsw i32 %197, %204
  %206 = getelementptr inbounds i16, i16* %1, i64 10
  %207 = load i16, i16* %206, align 2
  %208 = zext i16 %207 to i32
  %209 = icmp slt i32 %189, 0
  %210 = sub nsw i32 0, %189
  %211 = select i1 %209, i32 %210, i32 %189
  %212 = mul nsw i32 %211, %208
  %213 = add nsw i32 %205, %212
  %214 = getelementptr inbounds i16, i16* %1, i64 14
  %215 = load i16, i16* %214, align 2
  %216 = zext i16 %215 to i32
  %217 = icmp slt i32 %190, 0
  %218 = sub nsw i32 0, %190
  %219 = select i1 %217, i32 %218, i32 %190
  %220 = mul nsw i32 %219, %216
  %221 = add nsw i32 %213, %220
  %222 = getelementptr inbounds i16, i16* %1, i64 3
  %223 = load i32, i32* %29, align 4
  %224 = load i32, i32* %77, align 4
  %225 = add nsw i32 %224, %223
  %226 = load i32, i32* %53, align 4
  %227 = load i32, i32* %101, align 4
  %228 = add nsw i32 %227, %226
  %229 = sub nsw i32 %226, %227
  %230 = sub nsw i32 %223, %224
  %231 = add nsw i32 %228, %225
  %232 = add nsw i32 %229, %230
  %233 = sub nsw i32 %230, %229
  %234 = sub nsw i32 %225, %228
  %235 = load i16, i16* %222, align 2
  %236 = zext i16 %235 to i32
  %237 = icmp slt i32 %231, 0
  %238 = sub nsw i32 0, %231
  %239 = select i1 %237, i32 %238, i32 %231
  %240 = mul nsw i32 %239, %236
  %241 = add nsw i32 %240, %221
  %242 = getelementptr inbounds i16, i16* %1, i64 7
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = icmp slt i32 %232, 0
  %246 = sub nsw i32 0, %232
  %247 = select i1 %245, i32 %246, i32 %232
  %248 = mul nsw i32 %247, %244
  %249 = add nsw i32 %241, %248
  %250 = getelementptr inbounds i16, i16* %1, i64 11
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i32
  %253 = icmp slt i32 %233, 0
  %254 = sub nsw i32 0, %233
  %255 = select i1 %253, i32 %254, i32 %233
  %256 = mul nsw i32 %255, %252
  %257 = add nsw i32 %249, %256
  %258 = getelementptr inbounds i16, i16* %1, i64 15
  %259 = load i16, i16* %258, align 2
  %260 = zext i16 %259 to i32
  %261 = icmp slt i32 %234, 0
  %262 = sub nsw i32 0, %234
  %263 = select i1 %261, i32 %262, i32 %234
  %264 = mul nsw i32 %263, %260
  %265 = add nsw i32 %257, %264
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #7
  ret i32 %265
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
