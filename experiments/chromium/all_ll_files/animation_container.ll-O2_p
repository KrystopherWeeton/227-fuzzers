; ModuleID = '../../ui/gfx/animation/animation_container.cc'
source_filename = "../../ui/gfx/animation/animation_container.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::AnimationContainer" = type { %"class.base::RefCounted", %"class.base::TimeTicks", %"class.base::internal::flat_tree", %"class.base::TimeDelta", i64, %"class.std::__1::unique_ptr", i8, %"class.gfx::AnimationContainerObserver"* }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"**, %"class.std::__1::__compressed_pair" }
%"class.gfx::AnimationContainerElement" = type { i32 (...)** }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gfx::AnimationContainerElement"** }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.gfx::AnimationRunner"* }
%"class.gfx::AnimationRunner" = type { i32 (...)**, %"class.base::RepeatingCallback" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.gfx::AnimationContainerObserver" = type { i32 (...)** }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::__split_buffer" = type { %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"**, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.std::__1::allocator"* }
%"class.std::__1::allocator" = type { i8 }

$_ZNSt3__16vectorIPN3gfx25AnimationContainerElementENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_ = comdat any

$_ZNSt3__114__split_bufferIPN3gfx25AnimationContainerElementERNS_9allocatorIS3_EEE12emplace_backIJRKS3_EEEvDpOT_ = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEFvS5_EE3RunEPNS0_13BindStateBaseEOS5_ = comdat any

$_ZN4base8internal9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE = comdat any

@_ZN3gfx18AnimationContainerC1Ev = hidden unnamed_addr alias void (%"class.gfx::AnimationContainer"*), void (%"class.gfx::AnimationContainer"*)* @_ZN3gfx18AnimationContainerC2Ev
@_ZN3gfx18AnimationContainerD1Ev = hidden unnamed_addr alias void (%"class.gfx::AnimationContainer"*), void (%"class.gfx::AnimationContainer"*)* @_ZN3gfx18AnimationContainerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx18AnimationContainerC2Ev(%"class.gfx::AnimationContainer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %2, align 4
  %3 = tail call i64 @_ZN4base9TimeTicks3NowEv() #8
  %4 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %3, i64* %4, align 8
  %5 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2
  %6 = bitcast %"class.base::internal::flat_tree"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 40, i1 false)
  %7 = tail call %"class.gfx::AnimationRunner"* @_ZN3gfx15AnimationRunner28CreateDefaultAnimationRunnerEv() #8
  %8 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  store %"class.gfx::AnimationRunner"* %7, %"class.gfx::AnimationRunner"** %8, align 8
  %9 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 6
  store i8 0, i8* %9, align 8
  %10 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 7
  store %"class.gfx::AnimationContainerObserver"* null, %"class.gfx::AnimationContainerObserver"** %10, align 8
  ret void
}

declare i64 @_ZN4base9TimeTicks3NowEv() local_unnamed_addr #1

declare %"class.gfx::AnimationRunner"* @_ZN3gfx15AnimationRunner28CreateDefaultAnimationRunnerEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx18AnimationContainerD2Ev(%"class.gfx::AnimationContainer"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 7
  %3 = load %"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainerObserver"** %2, align 8
  %4 = icmp eq %"class.gfx::AnimationContainerObserver"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.gfx::AnimationContainerObserver"* %3 to void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)***
  %7 = load void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)**, void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)*, void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)** %7, i64 2
  %9 = load void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)*, void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)** %8, align 8
  tail call void %9(%"class.gfx::AnimationContainerObserver"* nonnull %3, %"class.gfx::AnimationContainer"* %0) #8
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %12 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %11, align 8
  store %"class.gfx::AnimationRunner"* null, %"class.gfx::AnimationRunner"** %11, align 8
  %13 = icmp eq %"class.gfx::AnimationRunner"* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = bitcast %"class.gfx::AnimationRunner"* %12 to void (%"class.gfx::AnimationRunner"*)***
  %16 = load void (%"class.gfx::AnimationRunner"*)**, void (%"class.gfx::AnimationRunner"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %16, i64 1
  %18 = load void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %17, align 8
  tail call void %18(%"class.gfx::AnimationRunner"* nonnull %12) #8
  br label %19

19:                                               ; preds = %10, %14
  %20 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %21 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %20, align 8
  %22 = icmp eq %"class.gfx::AnimationContainerElement"** %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = ptrtoint %"class.gfx::AnimationContainerElement"** %21 to i64
  %25 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %26 = bitcast %"class.gfx::AnimationContainerElement"*** %25 to i64*
  store i64 %24, i64* %26, align 8
  %27 = bitcast %"class.gfx::AnimationContainerElement"** %21 to i8*
  tail call void @_ZdlPv(i8* %27) #9
  br label %28

28:                                               ; preds = %19, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx18AnimationContainer5StartEPNS_25AnimationContainerElementE(%"class.gfx::AnimationContainer"*, %"class.gfx::AnimationContainerElement"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::RepeatingCallback", align 8
  %4 = alloca %"class.base::RepeatingCallback", align 8
  %5 = alloca %"class.gfx::AnimationContainerElement"*, align 8
  store %"class.gfx::AnimationContainerElement"* %1, %"class.gfx::AnimationContainerElement"** %5, align 8
  %6 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %7 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %6, align 8
  %8 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %9 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %8, align 8
  %10 = icmp eq %"class.gfx::AnimationContainerElement"** %7, %9
  br i1 %10, label %11, label %38

11:                                               ; preds = %2
  %12 = tail call i64 @_ZN4base9TimeTicks3NowEv() #8
  %13 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %12, i64* %13, align 8
  %14 = bitcast %"class.gfx::AnimationContainerElement"* %1 to i64 (%"class.gfx::AnimationContainerElement"*)***
  %15 = load i64 (%"class.gfx::AnimationContainerElement"*)**, i64 (%"class.gfx::AnimationContainerElement"*)*** %14, align 8
  %16 = getelementptr inbounds i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %15, i64 2
  %17 = load i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %16, align 8
  %18 = tail call i64 %17(%"class.gfx::AnimationContainerElement"* %1) #8
  %19 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %20 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %19, align 8
  %21 = bitcast %"class.gfx::AnimationRunner"* %20 to void (%"class.gfx::AnimationRunner"*)***
  %22 = load void (%"class.gfx::AnimationRunner"*)**, void (%"class.gfx::AnimationRunner"*)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %22, i64 2
  %24 = load void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %23, align 8
  tail call void %24(%"class.gfx::AnimationRunner"* %20) #8
  %25 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 3, i32 0
  store i64 %18, i64* %25, align 8
  %26 = bitcast %"class.base::RepeatingCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #8
  %27 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %19, align 8
  %28 = ptrtoint %"class.gfx::AnimationContainer"* %0 to i64
  %29 = tail call i8* @_Znwm(i64 56) #9, !noalias !2
  %30 = bitcast i8* %29 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %30, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.base::TimeTicks"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEFvS5_EE3RunEPNS0_13BindStateBaseEOS5_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE) #8, !noalias !2
  %31 = getelementptr inbounds i8, i8* %29, i64 32
  %32 = bitcast i8* %31 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.gfx::AnimationContainer"*, i64)* @_ZN3gfx18AnimationContainer3RunEN4base9TimeTicksE to i64), i64 0>, <2 x i64>* %32, align 8, !noalias !2
  %33 = getelementptr inbounds i8, i8* %29, i64 48
  %34 = bitcast i8* %33 to i64*
  store i64 %28, i64* %34, align 8, !noalias !2
  %35 = bitcast %"class.base::RepeatingCallback"* %4 to i8**
  store i8* %29, i8** %35, align 8, !alias.scope !2
  call void @_ZN3gfx15AnimationRunner5StartEN4base9TimeDeltaES2_NS1_17RepeatingCallbackIFvNS1_9TimeTicksEEEE(%"class.gfx::AnimationRunner"* %27, i64 %18, i64 0, %"class.base::RepeatingCallback"* nonnull %4) #8
  %36 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %4, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %36) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #8
  %37 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 4
  store i64 1, i64* %37, align 8
  br label %77

38:                                               ; preds = %2
  %39 = bitcast %"class.gfx::AnimationContainerElement"* %1 to i64 (%"class.gfx::AnimationContainerElement"*)***
  %40 = load i64 (%"class.gfx::AnimationContainerElement"*)**, i64 (%"class.gfx::AnimationContainerElement"*)*** %39, align 8
  %41 = getelementptr inbounds i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %40, i64 2
  %42 = load i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %41, align 8
  %43 = tail call i64 %42(%"class.gfx::AnimationContainerElement"* %1) #8
  %44 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 3, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = icmp slt i64 %43, %45
  %47 = load i64 (%"class.gfx::AnimationContainerElement"*)**, i64 (%"class.gfx::AnimationContainerElement"*)*** %39, align 8
  %48 = getelementptr inbounds i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %47, i64 2
  %49 = load i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %48, align 8
  %50 = tail call i64 %49(%"class.gfx::AnimationContainerElement"* %1) #8
  br i1 %46, label %51, label %70

51:                                               ; preds = %38
  %52 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %53 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %52, align 8
  %54 = bitcast %"class.gfx::AnimationRunner"* %53 to void (%"class.gfx::AnimationRunner"*)***
  %55 = load void (%"class.gfx::AnimationRunner"*)**, void (%"class.gfx::AnimationRunner"*)*** %54, align 8
  %56 = getelementptr inbounds void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %55, i64 2
  %57 = load void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %56, align 8
  tail call void %57(%"class.gfx::AnimationRunner"* %53) #8
  store i64 %50, i64* %44, align 8
  %58 = bitcast %"class.base::RepeatingCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #8
  %59 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %52, align 8
  %60 = ptrtoint %"class.gfx::AnimationContainer"* %0 to i64
  %61 = tail call i8* @_Znwm(i64 56) #9, !noalias !7
  %62 = bitcast i8* %61 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %62, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.base::TimeTicks"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEFvS5_EE3RunEPNS0_13BindStateBaseEOS5_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE) #8, !noalias !7
  %63 = getelementptr inbounds i8, i8* %61, i64 32
  %64 = bitcast i8* %63 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.gfx::AnimationContainer"*, i64)* @_ZN3gfx18AnimationContainer3RunEN4base9TimeTicksE to i64), i64 0>, <2 x i64>* %64, align 8, !noalias !7
  %65 = getelementptr inbounds i8, i8* %61, i64 48
  %66 = bitcast i8* %65 to i64*
  store i64 %60, i64* %66, align 8, !noalias !7
  %67 = bitcast %"class.base::RepeatingCallback"* %3 to i8**
  store i8* %61, i8** %67, align 8, !alias.scope !7
  call void @_ZN3gfx15AnimationRunner5StartEN4base9TimeDeltaES2_NS1_17RepeatingCallbackIFvNS1_9TimeTicksEEEE(%"class.gfx::AnimationRunner"* %59, i64 %50, i64 0, %"class.base::RepeatingCallback"* nonnull %3) #8
  %68 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %3, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %68) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #8
  %69 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 4
  store i64 1, i64* %69, align 8
  br label %77

70:                                               ; preds = %38
  %71 = load i64, i64* %44, align 8
  %72 = icmp eq i64 %50, %71
  br i1 %72, label %73, label %77

73:                                               ; preds = %70
  %74 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 4
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* %74, align 8
  br label %77

77:                                               ; preds = %51, %73, %70, %11
  %78 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %5, align 8
  %79 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 1, i32 0, i32 0
  %80 = load i64, i64* %79, align 8
  %81 = bitcast %"class.gfx::AnimationContainerElement"* %78 to void (%"class.gfx::AnimationContainerElement"*, i64)***
  %82 = load void (%"class.gfx::AnimationContainerElement"*, i64)**, void (%"class.gfx::AnimationContainerElement"*, i64)*** %81, align 8
  %83 = load void (%"class.gfx::AnimationContainerElement"*, i64)*, void (%"class.gfx::AnimationContainerElement"*, i64)** %82, align 8
  call void %83(%"class.gfx::AnimationContainerElement"* %78, i64 %80) #8
  %84 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2
  %85 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %84, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %85, align 8
  %87 = bitcast %"class.gfx::AnimationContainerElement"*** %8 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = ptrtoint %"class.gfx::AnimationContainerElement"** %86 to i64
  %90 = sub i64 %88, %89
  %91 = icmp eq i64 %90, 0
  %92 = inttoptr i64 %88 to %"class.gfx::AnimationContainerElement"**
  br i1 %91, label %108, label %93

93:                                               ; preds = %77
  %94 = ashr exact i64 %90, 3
  br label %95

95:                                               ; preds = %95, %93
  %96 = phi %"class.gfx::AnimationContainerElement"** [ %86, %93 ], [ %106, %95 ]
  %97 = phi i64 [ %94, %93 ], [ %105, %95 ]
  %98 = lshr i64 %97, 1
  %99 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %96, i64 %98
  %100 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %99, align 8
  %101 = icmp ult %"class.gfx::AnimationContainerElement"* %100, %78
  %102 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %99, i64 1
  %103 = xor i64 %98, -1
  %104 = add i64 %97, %103
  %105 = select i1 %101, i64 %104, i64 %98
  %106 = select i1 %101, %"class.gfx::AnimationContainerElement"** %102, %"class.gfx::AnimationContainerElement"** %96
  %107 = icmp eq i64 %105, 0
  br i1 %107, label %108, label %95

108:                                              ; preds = %95, %77
  %109 = phi %"class.gfx::AnimationContainerElement"** [ %86, %77 ], [ %106, %95 ]
  %110 = icmp eq %"class.gfx::AnimationContainerElement"** %109, %92
  br i1 %110, label %114, label %111

111:                                              ; preds = %108
  %112 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %109, align 8
  %113 = icmp ult %"class.gfx::AnimationContainerElement"* %78, %112
  br i1 %113, label %114, label %117

114:                                              ; preds = %111, %108
  %115 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %84, i64 0, i32 0
  %116 = call %"class.gfx::AnimationContainerElement"** @_ZNSt3__16vectorIPN3gfx25AnimationContainerElementENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_(%"class.std::__1::vector"* %115, %"class.gfx::AnimationContainerElement"** %109, %"class.gfx::AnimationContainerElement"** nonnull dereferenceable(8) %5) #8
  br label %117

117:                                              ; preds = %111, %114
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx18AnimationContainer19SetMinTimerIntervalEN4base9TimeDeltaE(%"class.gfx::AnimationContainer"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::RepeatingCallback", align 8
  %4 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %5 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %4, align 8
  %6 = bitcast %"class.gfx::AnimationRunner"* %5 to void (%"class.gfx::AnimationRunner"*)***
  %7 = load void (%"class.gfx::AnimationRunner"*)**, void (%"class.gfx::AnimationRunner"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %7, i64 2
  %9 = load void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %8, align 8
  tail call void %9(%"class.gfx::AnimationRunner"* %5) #8
  %10 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 3, i32 0
  store i64 %1, i64* %10, align 8
  %11 = bitcast %"class.base::RepeatingCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %4, align 8
  %13 = ptrtoint %"class.gfx::AnimationContainer"* %0 to i64
  %14 = tail call i8* @_Znwm(i64 56) #9, !noalias !12
  %15 = bitcast i8* %14 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %15, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.base::TimeTicks"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEFvS5_EE3RunEPNS0_13BindStateBaseEOS5_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE) #8, !noalias !12
  %16 = getelementptr inbounds i8, i8* %14, i64 32
  %17 = bitcast i8* %16 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.gfx::AnimationContainer"*, i64)* @_ZN3gfx18AnimationContainer3RunEN4base9TimeTicksE to i64), i64 0>, <2 x i64>* %17, align 8, !noalias !12
  %18 = getelementptr inbounds i8, i8* %14, i64 48
  %19 = bitcast i8* %18 to i64*
  store i64 %13, i64* %19, align 8, !noalias !12
  %20 = bitcast %"class.base::RepeatingCallback"* %3 to i8**
  store i8* %14, i8** %20, align 8, !alias.scope !12
  call void @_ZN3gfx15AnimationRunner5StartEN4base9TimeDeltaES2_NS1_17RepeatingCallbackIFvNS1_9TimeTicksEEEE(%"class.gfx::AnimationRunner"* %12, i64 %1, i64 0, %"class.base::RepeatingCallback"* nonnull %3) #8
  %21 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %3, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %21) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx18AnimationContainer4StopEPNS_25AnimationContainerElementE(%"class.gfx::AnimationContainer"*, %"class.gfx::AnimationContainerElement"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::RepeatingCallback", align 8
  %4 = bitcast %"class.gfx::AnimationContainerElement"* %1 to i64 (%"class.gfx::AnimationContainerElement"*)***
  %5 = load i64 (%"class.gfx::AnimationContainerElement"*)**, i64 (%"class.gfx::AnimationContainerElement"*)*** %4, align 8
  %6 = getelementptr inbounds i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %5, i64 2
  %7 = load i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %6, align 8
  %8 = tail call i64 %7(%"class.gfx::AnimationContainerElement"* %1) #8
  %9 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %9, align 8
  %11 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %12 = bitcast %"class.gfx::AnimationContainerElement"*** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = ptrtoint %"class.gfx::AnimationContainerElement"** %10 to i64
  %15 = sub i64 %13, %14
  %16 = icmp eq i64 %15, 0
  %17 = inttoptr i64 %13 to %"class.gfx::AnimationContainerElement"**
  br i1 %16, label %35, label %18

18:                                               ; preds = %2
  %19 = ashr exact i64 %15, 3
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi %"class.gfx::AnimationContainerElement"** [ %10, %18 ], [ %31, %20 ]
  %22 = phi i64 [ %19, %18 ], [ %30, %20 ]
  %23 = lshr i64 %22, 1
  %24 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %21, i64 %23
  %25 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %24, align 8
  %26 = icmp ult %"class.gfx::AnimationContainerElement"* %25, %1
  %27 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %24, i64 1
  %28 = xor i64 %23, -1
  %29 = add i64 %22, %28
  %30 = select i1 %26, i64 %29, i64 %23
  %31 = select i1 %26, %"class.gfx::AnimationContainerElement"** %27, %"class.gfx::AnimationContainerElement"** %21
  %32 = icmp eq i64 %30, 0
  br i1 %32, label %33, label %20

33:                                               ; preds = %20
  %34 = ptrtoint %"class.gfx::AnimationContainerElement"** %31 to i64
  br label %35

35:                                               ; preds = %33, %2
  %36 = phi i64 [ %34, %33 ], [ %14, %2 ]
  %37 = phi %"class.gfx::AnimationContainerElement"** [ %31, %33 ], [ %10, %2 ]
  %38 = icmp eq %"class.gfx::AnimationContainerElement"** %37, %17
  br i1 %38, label %45, label %39

39:                                               ; preds = %35
  %40 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %37, align 8
  %41 = icmp ugt %"class.gfx::AnimationContainerElement"* %40, %1
  br i1 %41, label %45, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %37, i64 1
  %44 = ptrtoint %"class.gfx::AnimationContainerElement"** %43 to i64
  br label %45

45:                                               ; preds = %42, %39, %35
  %46 = phi i64 [ %44, %42 ], [ %36, %35 ], [ %36, %39 ]
  %47 = inttoptr i64 %46 to %"class.gfx::AnimationContainerElement"**
  %48 = icmp eq %"class.gfx::AnimationContainerElement"** %37, %47
  br i1 %48, label %60, label %49

49:                                               ; preds = %45
  %50 = sub i64 %13, %46
  %51 = ashr exact i64 %50, 3
  %52 = icmp eq i64 %50, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %49
  %54 = bitcast %"class.gfx::AnimationContainerElement"** %37 to i8*
  %55 = inttoptr i64 %46 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 %50, i1 false) #8
  %56 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %9, align 8
  br label %57

57:                                               ; preds = %53, %49
  %58 = phi %"class.gfx::AnimationContainerElement"** [ %56, %53 ], [ %10, %49 ]
  %59 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %37, i64 %51
  store %"class.gfx::AnimationContainerElement"** %59, %"class.gfx::AnimationContainerElement"*** %11, align 8
  br label %60

60:                                               ; preds = %45, %57
  %61 = phi %"class.gfx::AnimationContainerElement"** [ %17, %45 ], [ %59, %57 ]
  %62 = phi %"class.gfx::AnimationContainerElement"** [ %10, %45 ], [ %58, %57 ]
  %63 = icmp eq %"class.gfx::AnimationContainerElement"** %62, %61
  br i1 %63, label %64, label %80

64:                                               ; preds = %60
  %65 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %66 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %65, align 8
  %67 = bitcast %"class.gfx::AnimationRunner"* %66 to void (%"class.gfx::AnimationRunner"*)***
  %68 = load void (%"class.gfx::AnimationRunner"*)**, void (%"class.gfx::AnimationRunner"*)*** %67, align 8
  %69 = getelementptr inbounds void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %68, i64 2
  %70 = load void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %69, align 8
  tail call void %70(%"class.gfx::AnimationRunner"* %66) #8
  %71 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 4
  store i64 0, i64* %71, align 8
  %72 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 7
  %73 = load %"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainerObserver"** %72, align 8
  %74 = icmp eq %"class.gfx::AnimationContainerObserver"* %73, null
  br i1 %74, label %140, label %75

75:                                               ; preds = %64
  %76 = bitcast %"class.gfx::AnimationContainerObserver"* %73 to void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)***
  %77 = load void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)**, void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)*** %76, align 8
  %78 = getelementptr inbounds void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)*, void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)** %77, i64 1
  %79 = load void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)*, void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)** %78, align 8
  tail call void %79(%"class.gfx::AnimationContainerObserver"* nonnull %73, %"class.gfx::AnimationContainer"* %0) #8
  br label %140

80:                                               ; preds = %60
  %81 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 3, i32 0
  %82 = load i64, i64* %81, align 8
  %83 = icmp eq i64 %8, %82
  br i1 %83, label %84, label %140

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 4
  %86 = load i64, i64* %85, align 8
  %87 = add i64 %86, -1
  store i64 %87, i64* %85, align 8
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %140

89:                                               ; preds = %84
  %90 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %62, align 8
  %91 = bitcast %"class.gfx::AnimationContainerElement"* %90 to i64 (%"class.gfx::AnimationContainerElement"*)***
  %92 = load i64 (%"class.gfx::AnimationContainerElement"*)**, i64 (%"class.gfx::AnimationContainerElement"*)*** %91, align 8
  %93 = getelementptr inbounds i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %92, i64 2
  %94 = load i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %93, align 8
  %95 = tail call i64 %94(%"class.gfx::AnimationContainerElement"* %90) #8
  %96 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %62, i64 1
  %97 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %11, align 8
  %98 = icmp eq %"class.gfx::AnimationContainerElement"** %96, %97
  br i1 %98, label %120, label %99

99:                                               ; preds = %89, %114
  %100 = phi %"class.gfx::AnimationContainerElement"** [ %117, %114 ], [ %96, %89 ]
  %101 = phi i64 [ %116, %114 ], [ %95, %89 ]
  %102 = phi i64 [ %115, %114 ], [ 1, %89 ]
  %103 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %100, align 8
  %104 = bitcast %"class.gfx::AnimationContainerElement"* %103 to i64 (%"class.gfx::AnimationContainerElement"*)***
  %105 = load i64 (%"class.gfx::AnimationContainerElement"*)**, i64 (%"class.gfx::AnimationContainerElement"*)*** %104, align 8
  %106 = getelementptr inbounds i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %105, i64 2
  %107 = load i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %106, align 8
  %108 = tail call i64 %107(%"class.gfx::AnimationContainerElement"* %103) #8
  %109 = icmp slt i64 %108, %101
  br i1 %109, label %114, label %110

110:                                              ; preds = %99
  %111 = icmp eq i64 %108, %101
  %112 = zext i1 %111 to i64
  %113 = add i64 %102, %112
  br label %114

114:                                              ; preds = %110, %99
  %115 = phi i64 [ 1, %99 ], [ %113, %110 ]
  %116 = phi i64 [ %108, %99 ], [ %101, %110 ]
  %117 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %100, i64 1
  %118 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %11, align 8
  %119 = icmp eq %"class.gfx::AnimationContainerElement"** %117, %118
  br i1 %119, label %120, label %99

120:                                              ; preds = %114, %89
  %121 = phi i64 [ 1, %89 ], [ %115, %114 ]
  %122 = phi i64 [ %95, %89 ], [ %116, %114 ]
  %123 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %124 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %123, align 8
  %125 = bitcast %"class.gfx::AnimationRunner"* %124 to void (%"class.gfx::AnimationRunner"*)***
  %126 = load void (%"class.gfx::AnimationRunner"*)**, void (%"class.gfx::AnimationRunner"*)*** %125, align 8
  %127 = getelementptr inbounds void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %126, i64 2
  %128 = load void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %127, align 8
  tail call void %128(%"class.gfx::AnimationRunner"* %124) #8
  store i64 %122, i64* %81, align 8
  %129 = bitcast %"class.base::RepeatingCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %129) #8
  %130 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %123, align 8
  %131 = ptrtoint %"class.gfx::AnimationContainer"* %0 to i64
  %132 = tail call i8* @_Znwm(i64 56) #9, !noalias !17
  %133 = bitcast i8* %132 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %133, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.base::TimeTicks"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEFvS5_EE3RunEPNS0_13BindStateBaseEOS5_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE) #8, !noalias !17
  %134 = getelementptr inbounds i8, i8* %132, i64 32
  %135 = bitcast i8* %134 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.gfx::AnimationContainer"*, i64)* @_ZN3gfx18AnimationContainer3RunEN4base9TimeTicksE to i64), i64 0>, <2 x i64>* %135, align 8, !noalias !17
  %136 = getelementptr inbounds i8, i8* %132, i64 48
  %137 = bitcast i8* %136 to i64*
  store i64 %131, i64* %137, align 8, !noalias !17
  %138 = bitcast %"class.base::RepeatingCallback"* %3 to i8**
  store i8* %132, i8** %138, align 8, !alias.scope !17
  call void @_ZN3gfx15AnimationRunner5StartEN4base9TimeDeltaES2_NS1_17RepeatingCallbackIFvNS1_9TimeTicksEEEE(%"class.gfx::AnimationRunner"* %130, i64 %122, i64 0, %"class.base::RepeatingCallback"* nonnull %3) #8
  %139 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %3, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %139) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %129) #8
  store i64 %121, i64* %85, align 8
  br label %140

140:                                              ; preds = %64, %80, %120, %84, %75
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK3gfx18AnimationContainer22GetMinIntervalAndCountEv(%"class.gfx::AnimationContainer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %2, align 8
  %4 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %3, align 8
  %5 = bitcast %"class.gfx::AnimationContainerElement"* %4 to i64 (%"class.gfx::AnimationContainerElement"*)***
  %6 = load i64 (%"class.gfx::AnimationContainerElement"*)**, i64 (%"class.gfx::AnimationContainerElement"*)*** %5, align 8
  %7 = getelementptr inbounds i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %6, i64 2
  %8 = load i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %7, align 8
  %9 = tail call i64 %8(%"class.gfx::AnimationContainerElement"* %4) #8
  %10 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %3, i64 1
  %11 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %12 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %11, align 8
  %13 = icmp eq %"class.gfx::AnimationContainerElement"** %10, %12
  br i1 %13, label %35, label %14

14:                                               ; preds = %1, %29
  %15 = phi %"class.gfx::AnimationContainerElement"** [ %32, %29 ], [ %10, %1 ]
  %16 = phi i64 [ %31, %29 ], [ %9, %1 ]
  %17 = phi i64 [ %30, %29 ], [ 1, %1 ]
  %18 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %15, align 8
  %19 = bitcast %"class.gfx::AnimationContainerElement"* %18 to i64 (%"class.gfx::AnimationContainerElement"*)***
  %20 = load i64 (%"class.gfx::AnimationContainerElement"*)**, i64 (%"class.gfx::AnimationContainerElement"*)*** %19, align 8
  %21 = getelementptr inbounds i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %20, i64 2
  %22 = load i64 (%"class.gfx::AnimationContainerElement"*)*, i64 (%"class.gfx::AnimationContainerElement"*)** %21, align 8
  %23 = tail call i64 %22(%"class.gfx::AnimationContainerElement"* %18) #8
  %24 = icmp slt i64 %23, %16
  br i1 %24, label %29, label %25

25:                                               ; preds = %14
  %26 = icmp eq i64 %23, %16
  %27 = zext i1 %26 to i64
  %28 = add i64 %17, %27
  br label %29

29:                                               ; preds = %25, %14
  %30 = phi i64 [ 1, %14 ], [ %28, %25 ]
  %31 = phi i64 [ %23, %14 ], [ %16, %25 ]
  %32 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %15, i64 1
  %33 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %11, align 8
  %34 = icmp eq %"class.gfx::AnimationContainerElement"** %32, %33
  br i1 %34, label %35, label %14

35:                                               ; preds = %29, %1
  %36 = phi i64 [ 1, %1 ], [ %30, %29 ]
  %37 = phi i64 [ %9, %1 ], [ %31, %29 ]
  %38 = insertvalue { i64, i64 } undef, i64 %37, 0
  %39 = insertvalue { i64, i64 } %38, i64 %36, 1
  ret { i64, i64 } %39
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx18AnimationContainer18SetAnimationRunnerENSt3__110unique_ptrINS_15AnimationRunnerENS1_14default_deleteIS3_EEEE(%"class.gfx::AnimationContainer"*, %"class.gfx::AnimationRunner"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::RepeatingCallback", align 8
  %4 = icmp ne %"class.gfx::AnimationRunner"* %1, null
  %5 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 6
  %6 = zext i1 %4 to i8
  store i8 %6, i8* %5, align 8
  br i1 %4, label %9, label %7

7:                                                ; preds = %2
  %8 = tail call %"class.gfx::AnimationRunner"* @_ZN3gfx15AnimationRunner28CreateDefaultAnimationRunnerEv() #8
  br label %9

9:                                                ; preds = %2, %7
  %10 = phi %"class.gfx::AnimationRunner"* [ %8, %7 ], [ %1, %2 ]
  %11 = ptrtoint %"class.gfx::AnimationRunner"* %10 to i64
  %12 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 5
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %13, align 8
  %15 = bitcast %"class.std::__1::unique_ptr"* %12 to i64*
  store i64 %11, i64* %15, align 8
  %16 = icmp eq %"class.gfx::AnimationRunner"* %14, null
  br i1 %16, label %22, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.gfx::AnimationRunner"* %14 to void (%"class.gfx::AnimationRunner"*)***
  %19 = load void (%"class.gfx::AnimationRunner"*)**, void (%"class.gfx::AnimationRunner"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %19, i64 1
  %21 = load void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %20, align 8
  tail call void %21(%"class.gfx::AnimationRunner"* nonnull %14) #8
  br label %22

22:                                               ; preds = %17, %9
  %23 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %24 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %23, align 8
  %25 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %26 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %25, align 8
  %27 = icmp eq %"class.gfx::AnimationContainerElement"** %24, %26
  br i1 %27, label %47, label %28

28:                                               ; preds = %22
  %29 = tail call i64 @_ZN4base9TimeTicks3NowEv() #8
  %30 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 1, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = sub nsw i64 %29, %31
  %33 = bitcast %"class.base::RepeatingCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33)
  %34 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %35 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %34, align 8
  %36 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 3, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = ptrtoint %"class.gfx::AnimationContainer"* %0 to i64
  %39 = tail call i8* @_Znwm(i64 56) #9, !noalias !22
  %40 = bitcast i8* %39 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %40, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.base::TimeTicks"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEFvS5_EE3RunEPNS0_13BindStateBaseEOS5_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE) #8, !noalias !22
  %41 = getelementptr inbounds i8, i8* %39, i64 32
  %42 = bitcast i8* %41 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.gfx::AnimationContainer"*, i64)* @_ZN3gfx18AnimationContainer3RunEN4base9TimeTicksE to i64), i64 0>, <2 x i64>* %42, align 8, !noalias !22
  %43 = getelementptr inbounds i8, i8* %39, i64 48
  %44 = bitcast i8* %43 to i64*
  store i64 %38, i64* %44, align 8, !noalias !22
  %45 = bitcast %"class.base::RepeatingCallback"* %3 to i8**
  store i8* %39, i8** %45, align 8, !alias.scope !22
  call void @_ZN3gfx15AnimationRunner5StartEN4base9TimeDeltaES2_NS1_17RepeatingCallbackIFvNS1_9TimeTicksEEEE(%"class.gfx::AnimationRunner"* %35, i64 %37, i64 %32, %"class.base::RepeatingCallback"* nonnull %3) #8
  %46 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %3, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %46) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33)
  br label %47

47:                                               ; preds = %28, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx18AnimationContainer12RestartTimerEN4base9TimeDeltaE(%"class.gfx::AnimationContainer"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::RepeatingCallback", align 8
  %4 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %5 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %4, align 8
  %6 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 3, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint %"class.gfx::AnimationContainer"* %0 to i64
  %9 = tail call i8* @_Znwm(i64 56) #9, !noalias !27
  %10 = bitcast i8* %9 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %10, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.base::TimeTicks"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEFvS5_EE3RunEPNS0_13BindStateBaseEOS5_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE) #8, !noalias !27
  %11 = getelementptr inbounds i8, i8* %9, i64 32
  %12 = bitcast i8* %11 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.gfx::AnimationContainer"*, i64)* @_ZN3gfx18AnimationContainer3RunEN4base9TimeTicksE to i64), i64 0>, <2 x i64>* %12, align 8, !noalias !27
  %13 = getelementptr inbounds i8, i8* %9, i64 48
  %14 = bitcast i8* %13 to i64*
  store i64 %8, i64* %14, align 8, !noalias !27
  %15 = bitcast %"class.base::RepeatingCallback"* %3 to i8**
  store i8* %9, i8** %15, align 8, !alias.scope !27
  call void @_ZN3gfx15AnimationRunner5StartEN4base9TimeDeltaES2_NS1_17RepeatingCallbackIFvNS1_9TimeTicksEEEE(%"class.gfx::AnimationRunner"* %5, i64 %7, i64 %1, %"class.base::RepeatingCallback"* nonnull %3) #8
  %16 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %3, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %16) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx18AnimationContainer3RunEN4base9TimeTicksE(%"class.gfx::AnimationContainer"*, i64) #0 align 2 {
  %3 = alloca %"class.base::internal::flat_tree", align 8
  %4 = icmp eq %"class.gfx::AnimationContainer"* %0, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %6) #8
  br label %7

7:                                                ; preds = %2, %5
  %8 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %1, i64* %8, align 8
  %9 = bitcast %"class.base::internal::flat_tree"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %3, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %12 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 24, i1 false) #8
  %13 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %14 = bitcast %"class.gfx::AnimationContainerElement"*** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.base::internal::flat_tree"* %12 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = ashr exact i64 %18, 3
  %20 = icmp eq i64 %18, 0
  %21 = inttoptr i64 %17 to %"class.gfx::AnimationContainerElement"**
  br i1 %20, label %46, label %22

22:                                               ; preds = %7
  %23 = icmp ugt i64 %19, 2305843009213693951
  br i1 %23, label %24, label %26

24:                                               ; preds = %22
  %25 = bitcast %"class.base::internal::flat_tree"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %25) #10
  unreachable

26:                                               ; preds = %22
  %27 = tail call i8* @_Znwm(i64 %18) #9
  %28 = bitcast i8* %27 to %"class.gfx::AnimationContainerElement"**
  %29 = bitcast %"class.gfx::AnimationContainerElement"*** %10 to i8**
  store i8* %27, i8** %29, align 8
  %30 = bitcast %"class.base::internal::flat_tree"* %3 to i8**
  store i8* %27, i8** %30, align 8
  %31 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %28, i64 %19
  store %"class.gfx::AnimationContainerElement"** %31, %"class.gfx::AnimationContainerElement"*** %11, align 8
  %32 = bitcast %"class.gfx::AnimationContainerElement"*** %10 to i64*
  %33 = ptrtoint i8* %27 to i64
  %34 = icmp sgt i64 %18, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %26
  %36 = lshr exact i64 %18, 3
  %37 = inttoptr i64 %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %27, i8* align 8 %37, i64 %18, i1 false) #8
  %38 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %28, i64 %36
  %39 = ptrtoint %"class.gfx::AnimationContainerElement"** %38 to i64
  br label %40

40:                                               ; preds = %26, %35
  %41 = phi i64 [ %39, %35 ], [ %33, %26 ]
  store i64 %41, i64* %32, align 8
  %42 = inttoptr i64 %41 to %"class.gfx::AnimationContainerElement"**
  %43 = icmp eq %"class.gfx::AnimationContainerElement"** %28, %42
  br i1 %43, label %46, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %12, i64 0, i32 0, i32 0, i32 0
  br label %52

46:                                               ; preds = %102, %7, %40
  %47 = phi %"class.gfx::AnimationContainerElement"** [ %28, %40 ], [ null, %7 ], [ %28, %102 ]
  %48 = phi i8* [ %27, %40 ], [ null, %7 ], [ %27, %102 ]
  %49 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 7
  %50 = load %"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainerObserver"** %49, align 8
  %51 = icmp eq %"class.gfx::AnimationContainerObserver"* %50, null
  br i1 %51, label %112, label %108

52:                                               ; preds = %105, %44
  %53 = phi i64 [ %15, %44 ], [ %107, %105 ]
  %54 = phi %"class.gfx::AnimationContainerElement"** [ %21, %44 ], [ %106, %105 ]
  %55 = phi %"class.gfx::AnimationContainerElement"** [ %28, %44 ], [ %103, %105 ]
  %56 = inttoptr i64 %53 to %"class.gfx::AnimationContainerElement"**
  %57 = ptrtoint %"class.gfx::AnimationContainerElement"** %54 to i64
  %58 = sub i64 %53, %57
  %59 = icmp eq i64 %58, 0
  %60 = inttoptr i64 %53 to %"class.gfx::AnimationContainerElement"**
  br i1 %59, label %79, label %61

61:                                               ; preds = %52
  %62 = ashr exact i64 %58, 3
  %63 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %55, align 8
  br label %64

64:                                               ; preds = %64, %61
  %65 = phi %"class.gfx::AnimationContainerElement"** [ %54, %61 ], [ %75, %64 ]
  %66 = phi i64 [ %62, %61 ], [ %74, %64 ]
  %67 = lshr i64 %66, 1
  %68 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %65, i64 %67
  %69 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %68, align 8
  %70 = icmp ult %"class.gfx::AnimationContainerElement"* %69, %63
  %71 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %68, i64 1
  %72 = xor i64 %67, -1
  %73 = add i64 %66, %72
  %74 = select i1 %70, i64 %73, i64 %67
  %75 = select i1 %70, %"class.gfx::AnimationContainerElement"** %71, %"class.gfx::AnimationContainerElement"** %65
  %76 = icmp eq i64 %74, 0
  br i1 %76, label %77, label %64

77:                                               ; preds = %64
  %78 = ptrtoint %"class.gfx::AnimationContainerElement"** %75 to i64
  br label %79

79:                                               ; preds = %77, %52
  %80 = phi i64 [ %78, %77 ], [ %57, %52 ]
  %81 = phi %"class.gfx::AnimationContainerElement"** [ %75, %77 ], [ %54, %52 ]
  %82 = icmp eq %"class.gfx::AnimationContainerElement"** %81, %60
  br i1 %82, label %90, label %83

83:                                               ; preds = %79
  %84 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %55, align 8
  %85 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %81, align 8
  %86 = icmp ult %"class.gfx::AnimationContainerElement"* %84, %85
  br i1 %86, label %90, label %87

87:                                               ; preds = %83
  %88 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %81, i64 1
  %89 = ptrtoint %"class.gfx::AnimationContainerElement"** %88 to i64
  br label %90

90:                                               ; preds = %79, %83, %87
  %91 = phi i64 [ %89, %87 ], [ %80, %79 ], [ %80, %83 ]
  %92 = inttoptr i64 %91 to %"class.gfx::AnimationContainerElement"**
  %93 = icmp eq %"class.gfx::AnimationContainerElement"** %81, %92
  %94 = select i1 %93, %"class.gfx::AnimationContainerElement"** %60, %"class.gfx::AnimationContainerElement"** %81
  %95 = icmp eq %"class.gfx::AnimationContainerElement"** %94, %56
  br i1 %95, label %102, label %96

96:                                               ; preds = %90
  %97 = load %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %55, align 8
  %98 = bitcast %"class.gfx::AnimationContainerElement"* %97 to void (%"class.gfx::AnimationContainerElement"*, i64)***
  %99 = load void (%"class.gfx::AnimationContainerElement"*, i64)**, void (%"class.gfx::AnimationContainerElement"*, i64)*** %98, align 8
  %100 = getelementptr inbounds void (%"class.gfx::AnimationContainerElement"*, i64)*, void (%"class.gfx::AnimationContainerElement"*, i64)** %99, i64 1
  %101 = load void (%"class.gfx::AnimationContainerElement"*, i64)*, void (%"class.gfx::AnimationContainerElement"*, i64)** %100, align 8
  tail call void %101(%"class.gfx::AnimationContainerElement"* %97, i64 %1) #8
  br label %102

102:                                              ; preds = %90, %96
  %103 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %55, i64 1
  %104 = icmp eq %"class.gfx::AnimationContainerElement"** %103, %42
  br i1 %104, label %46, label %105

105:                                              ; preds = %102
  %106 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %45, align 8
  %107 = load i64, i64* %14, align 8
  br label %52

108:                                              ; preds = %46
  %109 = bitcast %"class.gfx::AnimationContainerObserver"* %50 to void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)***
  %110 = load void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)**, void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)*** %109, align 8
  %111 = load void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)*, void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)** %110, align 8
  tail call void %111(%"class.gfx::AnimationContainerObserver"* nonnull %50, %"class.gfx::AnimationContainer"* %0) #8
  br label %112

112:                                              ; preds = %46, %108
  %113 = icmp eq %"class.gfx::AnimationContainerElement"** %47, null
  br i1 %113, label %117, label %114

114:                                              ; preds = %112
  %115 = ptrtoint %"class.gfx::AnimationContainerElement"** %47 to i64
  %116 = bitcast %"class.gfx::AnimationContainerElement"*** %10 to i64*
  store i64 %115, i64* %116, align 8
  tail call void @_ZdlPv(i8* %48) #9
  br label %117

117:                                              ; preds = %112, %114
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #8
  br i1 %4, label %156, label %118

118:                                              ; preds = %117
  %119 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 0
  %120 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %120) #8
  %121 = getelementptr inbounds %"class.gfx::AnimationContainer", %"class.gfx::AnimationContainer"* %0, i64 0, i32 0, i32 0, i32 0
  %122 = load i32, i32* %121, align 4
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %156

124:                                              ; preds = %118
  %125 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %119, i64 18
  %126 = bitcast %"class.base::RefCounted"* %125 to %"class.gfx::AnimationContainerObserver"**
  %127 = load %"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainerObserver"** %126, align 8
  %128 = icmp eq %"class.gfx::AnimationContainerObserver"* %127, null
  br i1 %128, label %134, label %129

129:                                              ; preds = %124
  %130 = bitcast %"class.gfx::AnimationContainerObserver"* %127 to void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)***
  %131 = load void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)**, void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)*** %130, align 8
  %132 = getelementptr inbounds void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)*, void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)** %131, i64 2
  %133 = load void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)*, void (%"class.gfx::AnimationContainerObserver"*, %"class.gfx::AnimationContainer"*)** %132, align 8
  tail call void %133(%"class.gfx::AnimationContainerObserver"* nonnull %127, %"class.gfx::AnimationContainer"* nonnull %0) #8
  br label %134

134:                                              ; preds = %129, %124
  %135 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %119, i64 14
  %136 = bitcast %"class.base::RefCounted"* %135 to %"class.gfx::AnimationRunner"**
  %137 = load %"class.gfx::AnimationRunner"*, %"class.gfx::AnimationRunner"** %136, align 8
  store %"class.gfx::AnimationRunner"* null, %"class.gfx::AnimationRunner"** %136, align 8
  %138 = icmp eq %"class.gfx::AnimationRunner"* %137, null
  br i1 %138, label %144, label %139

139:                                              ; preds = %134
  %140 = bitcast %"class.gfx::AnimationRunner"* %137 to void (%"class.gfx::AnimationRunner"*)***
  %141 = load void (%"class.gfx::AnimationRunner"*)**, void (%"class.gfx::AnimationRunner"*)*** %140, align 8
  %142 = getelementptr inbounds void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %141, i64 1
  %143 = load void (%"class.gfx::AnimationRunner"*)*, void (%"class.gfx::AnimationRunner"*)** %142, align 8
  tail call void %143(%"class.gfx::AnimationRunner"* nonnull %137) #8
  br label %144

144:                                              ; preds = %139, %134
  %145 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %119, i64 4
  %146 = bitcast %"class.base::RefCounted"* %145 to %"class.gfx::AnimationContainerElement"***
  %147 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %146, align 8
  %148 = icmp eq %"class.gfx::AnimationContainerElement"** %147, null
  br i1 %148, label %154, label %149

149:                                              ; preds = %144
  %150 = ptrtoint %"class.gfx::AnimationContainerElement"** %147 to i64
  %151 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %119, i64 6
  %152 = bitcast %"class.base::RefCounted"* %151 to i64*
  store i64 %150, i64* %152, align 8
  %153 = bitcast %"class.gfx::AnimationContainerElement"** %147 to i8*
  tail call void @_ZdlPv(i8* %153) #9
  br label %154

154:                                              ; preds = %149, %144
  %155 = bitcast %"class.gfx::AnimationContainer"* %0 to i8*
  tail call void @_ZdlPv(i8* %155) #9
  br label %156

156:                                              ; preds = %117, %118, %154
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN3gfx15AnimationRunner5StartEN4base9TimeDeltaES2_NS1_17RepeatingCallbackIFvNS1_9TimeTicksEEEE(%"class.gfx::AnimationRunner"*, i64, i64, %"class.base::RepeatingCallback"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.gfx::AnimationContainerElement"** @_ZNSt3__16vectorIPN3gfx25AnimationContainerElementENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_(%"class.std::__1::vector"*, %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.gfx::AnimationContainerElement"** %1 to i64
  %5 = alloca %"struct.std::__1::__split_buffer", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %9, align 8
  %11 = icmp ult %"class.gfx::AnimationContainerElement"** %8, %10
  %12 = ptrtoint %"class.gfx::AnimationContainerElement"** %8 to i64
  %13 = ptrtoint %"class.gfx::AnimationContainerElement"** %10 to i64
  br i1 %11, label %14, label %163

14:                                               ; preds = %3
  %15 = icmp eq %"class.gfx::AnimationContainerElement"** %8, %1
  %16 = bitcast %"class.gfx::AnimationContainerElement"** %2 to i64*
  %17 = load i64, i64* %16, align 8
  br i1 %15, label %18, label %23

18:                                               ; preds = %14
  %19 = bitcast %"class.gfx::AnimationContainerElement"** %1 to i64*
  store i64 %17, i64* %19, align 8
  %20 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %1, i64 1
  %21 = ptrtoint %"class.gfx::AnimationContainerElement"** %20 to i64
  %22 = bitcast %"class.gfx::AnimationContainerElement"*** %7 to i64*
  store i64 %21, i64* %22, align 8
  br label %319

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %1, i64 1
  %25 = ptrtoint %"class.gfx::AnimationContainerElement"** %24 to i64
  %26 = sub i64 %12, %25
  %27 = ashr exact i64 %26, 3
  %28 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %1, i64 %27
  %29 = bitcast %"class.gfx::AnimationContainerElement"*** %7 to i64*
  %30 = icmp ult %"class.gfx::AnimationContainerElement"** %28, %8
  br i1 %30, label %31, label %144

31:                                               ; preds = %23
  %32 = sub nsw i64 0, %27
  %33 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %8, i64 %32
  %34 = bitcast %"class.gfx::AnimationContainerElement"** %33 to i8*
  %35 = xor i64 %4, -1
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = lshr i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 4
  br i1 %40, label %41, label %44

41:                                               ; preds = %139, %44, %31
  %42 = phi %"class.gfx::AnimationContainerElement"** [ %8, %44 ], [ %8, %31 ], [ %62, %139 ]
  %43 = phi %"class.gfx::AnimationContainerElement"** [ %28, %44 ], [ %28, %31 ], [ %63, %139 ]
  br label %152

44:                                               ; preds = %31
  %45 = sub nsw i64 0, %27
  %46 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %8, i64 %45
  %47 = bitcast %"class.gfx::AnimationContainerElement"** %46 to i8*
  %48 = xor i64 %4, -1
  %49 = getelementptr i8, i8* %47, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = lshr i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %8, i64 %52
  %54 = add nsw i64 %27, %51
  %55 = add nsw i64 %54, 1
  %56 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %1, i64 %55
  %57 = icmp ult %"class.gfx::AnimationContainerElement"** %8, %56
  %58 = icmp ult %"class.gfx::AnimationContainerElement"** %28, %53
  %59 = and i1 %57, %58
  br i1 %59, label %41, label %60

60:                                               ; preds = %44
  %61 = and i64 %39, 4611686018427387900
  %62 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %8, i64 %61
  %63 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %28, i64 %61
  %64 = add nsw i64 %61, -4
  %65 = lshr exact i64 %64, 2
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 12
  br i1 %68, label %120, label %69

69:                                               ; preds = %60
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %8, i64 %72
  %75 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %28, i64 %72
  %76 = bitcast %"class.gfx::AnimationContainerElement"** %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !alias.scope !32
  %78 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %75, i64 2
  %79 = bitcast %"class.gfx::AnimationContainerElement"** %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 8, !alias.scope !32
  %81 = bitcast %"class.gfx::AnimationContainerElement"** %74 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 8, !alias.scope !35, !noalias !32
  %82 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %74, i64 2
  %83 = bitcast %"class.gfx::AnimationContainerElement"** %82 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %83, align 8, !alias.scope !35, !noalias !32
  %84 = or i64 %72, 4
  %85 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %8, i64 %84
  %86 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %28, i64 %84
  %87 = bitcast %"class.gfx::AnimationContainerElement"** %86 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8, !alias.scope !32
  %89 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %86, i64 2
  %90 = bitcast %"class.gfx::AnimationContainerElement"** %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !32
  %92 = bitcast %"class.gfx::AnimationContainerElement"** %85 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 8, !alias.scope !35, !noalias !32
  %93 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %85, i64 2
  %94 = bitcast %"class.gfx::AnimationContainerElement"** %93 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 8, !alias.scope !35, !noalias !32
  %95 = or i64 %72, 8
  %96 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %8, i64 %95
  %97 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %28, i64 %95
  %98 = bitcast %"class.gfx::AnimationContainerElement"** %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 8, !alias.scope !32
  %100 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %97, i64 2
  %101 = bitcast %"class.gfx::AnimationContainerElement"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !32
  %103 = bitcast %"class.gfx::AnimationContainerElement"** %96 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %103, align 8, !alias.scope !35, !noalias !32
  %104 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %96, i64 2
  %105 = bitcast %"class.gfx::AnimationContainerElement"** %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 8, !alias.scope !35, !noalias !32
  %106 = or i64 %72, 12
  %107 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %8, i64 %106
  %108 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %28, i64 %106
  %109 = bitcast %"class.gfx::AnimationContainerElement"** %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !32
  %111 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %108, i64 2
  %112 = bitcast %"class.gfx::AnimationContainerElement"** %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8, !alias.scope !32
  %114 = bitcast %"class.gfx::AnimationContainerElement"** %107 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %114, align 8, !alias.scope !35, !noalias !32
  %115 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %107, i64 2
  %116 = bitcast %"class.gfx::AnimationContainerElement"** %115 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %116, align 8, !alias.scope !35, !noalias !32
  %117 = add i64 %72, 16
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !37

120:                                              ; preds = %71, %60
  %121 = phi i64 [ 0, %60 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %8, i64 %124
  %127 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %28, i64 %124
  %128 = bitcast %"class.gfx::AnimationContainerElement"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !32
  %130 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %127, i64 2
  %131 = bitcast %"class.gfx::AnimationContainerElement"** %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8, !alias.scope !32
  %133 = bitcast %"class.gfx::AnimationContainerElement"** %126 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %133, align 8, !alias.scope !35, !noalias !32
  %134 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %126, i64 2
  %135 = bitcast %"class.gfx::AnimationContainerElement"** %134 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %135, align 8, !alias.scope !35, !noalias !32
  %136 = add i64 %124, 4
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !39

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %39, %61
  br i1 %140, label %141, label %41

141:                                              ; preds = %152, %139
  %142 = phi %"class.gfx::AnimationContainerElement"** [ %62, %139 ], [ %159, %152 ]
  %143 = ptrtoint %"class.gfx::AnimationContainerElement"** %142 to i64
  br label %144

144:                                              ; preds = %141, %23
  %145 = phi i64 [ %143, %141 ], [ %12, %23 ]
  store i64 %145, i64* %29, align 8
  %146 = icmp eq i64 %26, 0
  br i1 %146, label %161, label %147

147:                                              ; preds = %144
  %148 = sub nsw i64 0, %27
  %149 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %8, i64 %148
  %150 = bitcast %"class.gfx::AnimationContainerElement"** %149 to i8*
  %151 = bitcast %"class.gfx::AnimationContainerElement"** %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 %26, i1 false) #8
  br label %161

152:                                              ; preds = %41, %152
  %153 = phi %"class.gfx::AnimationContainerElement"** [ %159, %152 ], [ %42, %41 ]
  %154 = phi %"class.gfx::AnimationContainerElement"** [ %158, %152 ], [ %43, %41 ]
  %155 = bitcast %"class.gfx::AnimationContainerElement"** %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = bitcast %"class.gfx::AnimationContainerElement"** %153 to i64*
  store i64 %156, i64* %157, align 8
  %158 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %154, i64 1
  %159 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %153, i64 1
  %160 = icmp ult %"class.gfx::AnimationContainerElement"** %158, %8
  br i1 %160, label %152, label %141, !llvm.loop !41

161:                                              ; preds = %144, %147
  %162 = bitcast %"class.gfx::AnimationContainerElement"** %1 to i64*
  store i64 %17, i64* %162, align 8
  br label %319

163:                                              ; preds = %3
  %164 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2
  %165 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %165) #8
  %166 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 0
  %167 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 1
  %168 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 2
  %169 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 0, i32 0
  %170 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 1, i32 0
  %171 = bitcast %"class.gfx::AnimationContainerElement"*** %7 to i64*
  %172 = bitcast %"class.std::__1::vector"* %0 to i64*
  %173 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %173, i8 -86, i64 40, i1 false)
  %174 = load i64, i64* %172, align 8
  %175 = sub i64 %12, %174
  %176 = ashr exact i64 %175, 3
  %177 = add nsw i64 %176, 1
  %178 = icmp ugt i64 %177, 2305843009213693951
  br i1 %178, label %179, label %181

179:                                              ; preds = %163
  %180 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %180) #10
  unreachable

181:                                              ; preds = %163
  %182 = bitcast %"class.gfx::AnimationContainerElement"*** %9 to i64*
  %183 = sub i64 %13, %174
  %184 = ashr exact i64 %183, 3
  %185 = icmp ult i64 %184, 1152921504606846975
  br i1 %185, label %190, label %186

186:                                              ; preds = %181
  %187 = sub i64 %4, %174
  %188 = ashr exact i64 %187, 3
  store %"class.gfx::AnimationContainerElement"** null, %"class.gfx::AnimationContainerElement"*** %169, align 8
  %189 = bitcast %"class.std::__1::allocator"** %170 to %"class.std::__1::__compressed_pair"**
  store %"class.std::__1::__compressed_pair"* %164, %"class.std::__1::__compressed_pair"** %189, align 8
  br label %201

190:                                              ; preds = %181
  %191 = ashr exact i64 %183, 2
  %192 = icmp ult i64 %191, %177
  %193 = select i1 %192, i64 %177, i64 %191
  %194 = sub i64 %4, %174
  %195 = ashr exact i64 %194, 3
  store %"class.gfx::AnimationContainerElement"** null, %"class.gfx::AnimationContainerElement"*** %169, align 8
  %196 = bitcast %"class.std::__1::allocator"** %170 to %"class.std::__1::__compressed_pair"**
  store %"class.std::__1::__compressed_pair"* %164, %"class.std::__1::__compressed_pair"** %196, align 8
  %197 = icmp eq i64 %193, 0
  br i1 %197, label %207, label %198

198:                                              ; preds = %190
  %199 = icmp ugt i64 %193, 2305843009213693951
  br i1 %199, label %200, label %201

200:                                              ; preds = %198
  tail call void @abort() #10
  unreachable

201:                                              ; preds = %186, %198
  %202 = phi i64 [ 2305843009213693951, %186 ], [ %193, %198 ]
  %203 = phi i64 [ %188, %186 ], [ %195, %198 ]
  %204 = shl i64 %202, 3
  %205 = tail call i8* @_Znwm(i64 %204) #9
  %206 = bitcast i8* %205 to %"class.gfx::AnimationContainerElement"**
  br label %207

207:                                              ; preds = %190, %201
  %208 = phi i64 [ %203, %201 ], [ %195, %190 ]
  %209 = phi i64 [ %202, %201 ], [ 0, %190 ]
  %210 = phi %"class.gfx::AnimationContainerElement"** [ %206, %201 ], [ null, %190 ]
  store %"class.gfx::AnimationContainerElement"** %210, %"class.gfx::AnimationContainerElement"*** %166, align 8
  %211 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %210, i64 %208
  store %"class.gfx::AnimationContainerElement"** %211, %"class.gfx::AnimationContainerElement"*** %168, align 8
  store %"class.gfx::AnimationContainerElement"** %211, %"class.gfx::AnimationContainerElement"*** %167, align 8
  %212 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %210, i64 %209
  store %"class.gfx::AnimationContainerElement"** %212, %"class.gfx::AnimationContainerElement"*** %169, align 8
  call void @_ZNSt3__114__split_bufferIPN3gfx25AnimationContainerElementERNS_9allocatorIS3_EEE12emplace_backIJRKS3_EEEvDpOT_(%"struct.std::__1::__split_buffer"* nonnull %5, %"class.gfx::AnimationContainerElement"** dereferenceable(8) %2)
  %213 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %167, align 8
  %214 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %6, align 8
  %215 = ptrtoint %"class.gfx::AnimationContainerElement"** %214 to i64
  %216 = sub i64 %4, %215
  %217 = ashr exact i64 %216, 3
  %218 = sub nsw i64 0, %217
  %219 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %213, i64 %218
  store %"class.gfx::AnimationContainerElement"** %219, %"class.gfx::AnimationContainerElement"*** %167, align 8
  %220 = icmp sgt i64 %216, 0
  br i1 %220, label %221, label %224

221:                                              ; preds = %207
  %222 = bitcast %"class.gfx::AnimationContainerElement"** %219 to i8*
  %223 = bitcast %"class.gfx::AnimationContainerElement"** %214 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %222, i8* align 8 %223, i64 %216, i1 false) #8
  br label %224

224:                                              ; preds = %221, %207
  %225 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %7, align 8
  %226 = icmp eq %"class.gfx::AnimationContainerElement"** %225, %1
  br i1 %226, label %227, label %231

227:                                              ; preds = %224
  %228 = ptrtoint %"class.gfx::AnimationContainerElement"** %225 to i64
  %229 = bitcast %"class.gfx::AnimationContainerElement"*** %168 to i64*
  %230 = load i64, i64* %229, align 8
  br label %293

231:                                              ; preds = %224
  %232 = bitcast %"class.gfx::AnimationContainerElement"*** %168 to i64**
  %233 = load i64*, i64** %232, align 8
  %234 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %225, i64 -1
  %235 = ptrtoint %"class.gfx::AnimationContainerElement"** %234 to i64
  %236 = sub i64 %235, %4
  %237 = lshr i64 %236, 3
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 3
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %255, label %241

241:                                              ; preds = %231, %241
  %242 = phi i64* [ %250, %241 ], [ %233, %231 ]
  %243 = phi %"class.gfx::AnimationContainerElement"** [ %247, %241 ], [ %1, %231 ]
  %244 = phi i64 [ %251, %241 ], [ %239, %231 ]
  %245 = bitcast %"class.gfx::AnimationContainerElement"** %243 to i64*
  %246 = load i64, i64* %245, align 8
  store i64 %246, i64* %242, align 8
  %247 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %243, i64 1
  %248 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %168, align 8
  %249 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %248, i64 1
  store %"class.gfx::AnimationContainerElement"** %249, %"class.gfx::AnimationContainerElement"*** %168, align 8
  %250 = bitcast %"class.gfx::AnimationContainerElement"** %249 to i64*
  %251 = add i64 %244, -1
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %253, label %241, !llvm.loop !42

253:                                              ; preds = %241
  %254 = bitcast %"class.gfx::AnimationContainerElement"** %249 to i64*
  br label %255

255:                                              ; preds = %231, %253
  %256 = phi %"class.gfx::AnimationContainerElement"** [ undef, %231 ], [ %249, %253 ]
  %257 = phi i64* [ %233, %231 ], [ %254, %253 ]
  %258 = phi %"class.gfx::AnimationContainerElement"** [ %1, %231 ], [ %247, %253 ]
  %259 = icmp ult i64 %236, 24
  br i1 %259, label %288, label %260

260:                                              ; preds = %255, %260
  %261 = phi i64* [ %287, %260 ], [ %257, %255 ]
  %262 = phi %"class.gfx::AnimationContainerElement"** [ %283, %260 ], [ %258, %255 ]
  %263 = bitcast %"class.gfx::AnimationContainerElement"** %262 to i64*
  %264 = load i64, i64* %263, align 8
  store i64 %264, i64* %261, align 8
  %265 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %262, i64 1
  %266 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %168, align 8
  %267 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %266, i64 1
  store %"class.gfx::AnimationContainerElement"** %267, %"class.gfx::AnimationContainerElement"*** %168, align 8
  %268 = bitcast %"class.gfx::AnimationContainerElement"** %267 to i64*
  %269 = bitcast %"class.gfx::AnimationContainerElement"** %265 to i64*
  %270 = load i64, i64* %269, align 8
  store i64 %270, i64* %268, align 8
  %271 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %262, i64 2
  %272 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %168, align 8
  %273 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %272, i64 1
  store %"class.gfx::AnimationContainerElement"** %273, %"class.gfx::AnimationContainerElement"*** %168, align 8
  %274 = bitcast %"class.gfx::AnimationContainerElement"** %273 to i64*
  %275 = bitcast %"class.gfx::AnimationContainerElement"** %271 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %274, align 8
  %277 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %262, i64 3
  %278 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %168, align 8
  %279 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %278, i64 1
  store %"class.gfx::AnimationContainerElement"** %279, %"class.gfx::AnimationContainerElement"*** %168, align 8
  %280 = bitcast %"class.gfx::AnimationContainerElement"** %279 to i64*
  %281 = bitcast %"class.gfx::AnimationContainerElement"** %277 to i64*
  %282 = load i64, i64* %281, align 8
  store i64 %282, i64* %280, align 8
  %283 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %262, i64 4
  %284 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %168, align 8
  %285 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %284, i64 1
  store %"class.gfx::AnimationContainerElement"** %285, %"class.gfx::AnimationContainerElement"*** %168, align 8
  %286 = icmp eq %"class.gfx::AnimationContainerElement"** %283, %225
  %287 = bitcast %"class.gfx::AnimationContainerElement"** %285 to i64*
  br i1 %286, label %288, label %260

288:                                              ; preds = %260, %255
  %289 = phi %"class.gfx::AnimationContainerElement"** [ %256, %255 ], [ %285, %260 ]
  %290 = ptrtoint %"class.gfx::AnimationContainerElement"** %289 to i64
  %291 = load i64, i64* %171, align 8
  %292 = bitcast %"class.gfx::AnimationContainerElement"*** %168 to i64*
  br label %293

293:                                              ; preds = %227, %288
  %294 = phi i64* [ %229, %227 ], [ %292, %288 ]
  %295 = phi i64 [ %230, %227 ], [ %290, %288 ]
  %296 = phi i64 [ %228, %227 ], [ %291, %288 ]
  %297 = load i64, i64* %172, align 8
  %298 = bitcast %"class.gfx::AnimationContainerElement"*** %167 to i64*
  %299 = load i64, i64* %298, align 8
  store i64 %299, i64* %172, align 8
  store i64 %297, i64* %298, align 8
  store i64 %295, i64* %171, align 8
  store i64 %296, i64* %294, align 8
  %300 = load i64, i64* %182, align 8
  %301 = bitcast %"class.gfx::AnimationContainerElement"*** %169 to i64*
  %302 = load i64, i64* %301, align 8
  store i64 %302, i64* %182, align 8
  store i64 %300, i64* %301, align 8
  %303 = bitcast %"struct.std::__1::__split_buffer"* %5 to i64*
  store i64 %297, i64* %303, align 8
  %304 = inttoptr i64 %297 to %"class.gfx::AnimationContainerElement"**
  %305 = inttoptr i64 %296 to %"class.gfx::AnimationContainerElement"**
  %306 = icmp eq %"class.gfx::AnimationContainerElement"** %305, %304
  br i1 %306, label %314, label %307

307:                                              ; preds = %293
  %308 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %305, i64 -1
  %309 = ptrtoint %"class.gfx::AnimationContainerElement"** %308 to i64
  %310 = sub i64 %309, %297
  %311 = lshr i64 %310, 3
  %312 = xor i64 %311, -1
  %313 = getelementptr %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %305, i64 %312
  store %"class.gfx::AnimationContainerElement"** %313, %"class.gfx::AnimationContainerElement"*** %168, align 8
  br label %314

314:                                              ; preds = %307, %293
  %315 = icmp eq i64 %297, 0
  br i1 %315, label %318, label %316

316:                                              ; preds = %314
  %317 = inttoptr i64 %297 to i8*
  call void @_ZdlPv(i8* %317) #9
  br label %318

318:                                              ; preds = %314, %316
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %165) #8
  br label %319

319:                                              ; preds = %18, %161, %318
  %320 = phi %"class.gfx::AnimationContainerElement"** [ %1, %18 ], [ %1, %161 ], [ %213, %318 ]
  ret %"class.gfx::AnimationContainerElement"** %320
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN3gfx25AnimationContainerElementERNS_9allocatorIS3_EEE12emplace_backIJRKS3_EEEvDpOT_(%"struct.std::__1::__split_buffer"*, %"class.gfx::AnimationContainerElement"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %5, align 8
  %7 = icmp eq %"class.gfx::AnimationContainerElement"** %4, %6
  %8 = ptrtoint %"class.gfx::AnimationContainerElement"** %6 to i64
  %9 = bitcast %"class.gfx::AnimationContainerElement"** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %13, align 8
  %15 = icmp ugt %"class.gfx::AnimationContainerElement"** %12, %14
  %16 = ptrtoint %"class.gfx::AnimationContainerElement"** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"class.gfx::AnimationContainerElement"** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %12, i64 %22
  %24 = ptrtoint %"class.gfx::AnimationContainerElement"** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"class.gfx::AnimationContainerElement"** %23 to i8*
  %30 = bitcast %"class.gfx::AnimationContainerElement"** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #8
  %31 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"class.gfx::AnimationContainerElement"** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %23, i64 %26
  store %"class.gfx::AnimationContainerElement"** %34, %"class.gfx::AnimationContainerElement"*** %3, align 8
  %35 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %33, i64 %22
  store %"class.gfx::AnimationContainerElement"** %35, %"class.gfx::AnimationContainerElement"*** %11, align 8
  %36 = bitcast %"class.gfx::AnimationContainerElement"** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"class.gfx::AnimationContainerElement"*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #10
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #9
  %50 = bitcast i8* %49 to %"class.gfx::AnimationContainerElement"**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %50, i64 %47
  %53 = ptrtoint %"class.gfx::AnimationContainerElement"** %52 to i64
  %54 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %50, i64 %43
  %55 = ptrtoint %"class.gfx::AnimationContainerElement"** %54 to i64
  %56 = ptrtoint %"class.gfx::AnimationContainerElement"** %12 to i64
  %57 = ptrtoint %"class.gfx::AnimationContainerElement"** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"class.gfx::AnimationContainerElement"** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"class.gfx::AnimationContainerElement"** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"class.gfx::AnimationContainerElement"** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %69, i64 1
  %77 = ptrtoint %"class.gfx::AnimationContainerElement"** %76 to i64
  %78 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !43

81:                                               ; preds = %68
  %82 = ptrtoint %"class.gfx::AnimationContainerElement"** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"class.gfx::AnimationContainerElement"** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"class.gfx::AnimationContainerElement"** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"class.gfx::AnimationContainerElement"** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"class.gfx::AnimationContainerElement"** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"class.gfx::AnimationContainerElement"** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %89, i64 1
  %96 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %91, i64 1
  %97 = bitcast %"class.gfx::AnimationContainerElement"** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"class.gfx::AnimationContainerElement"** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %89, i64 2
  %101 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %91, i64 2
  %102 = bitcast %"class.gfx::AnimationContainerElement"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"class.gfx::AnimationContainerElement"** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %89, i64 3
  %106 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %91, i64 3
  %107 = bitcast %"class.gfx::AnimationContainerElement"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.gfx::AnimationContainerElement"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %89, i64 4
  %111 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %91, i64 4
  %112 = bitcast %"class.gfx::AnimationContainerElement"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.gfx::AnimationContainerElement"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %89, i64 5
  %116 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %91, i64 5
  %117 = bitcast %"class.gfx::AnimationContainerElement"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.gfx::AnimationContainerElement"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %89, i64 6
  %121 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %91, i64 6
  %122 = bitcast %"class.gfx::AnimationContainerElement"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.gfx::AnimationContainerElement"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %89, i64 7
  %126 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %91, i64 7
  %127 = bitcast %"class.gfx::AnimationContainerElement"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.gfx::AnimationContainerElement"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %89, i64 8
  %131 = ptrtoint %"class.gfx::AnimationContainerElement"** %130 to i64
  %132 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %91, i64 8
  %133 = icmp eq %"class.gfx::AnimationContainerElement"** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"class.gfx::AnimationContainerElement"** %60 to i64
  %136 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"class.gfx::AnimationContainerElement"** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"class.gfx::AnimationContainerElement"*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"class.gfx::AnimationContainerElement"*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"class.gfx::AnimationContainerElement"** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %"class.gfx::AnimationContainerElement"** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #9
  %146 = bitcast %"class.gfx::AnimationContainerElement"*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"class.gfx::AnimationContainerElement"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %"class.gfx::AnimationContainerElement"**, %"class.gfx::AnimationContainerElement"*** %3, align 8
  %153 = getelementptr inbounds %"class.gfx::AnimationContainerElement"*, %"class.gfx::AnimationContainerElement"** %152, i64 1
  store %"class.gfx::AnimationContainerElement"** %153, %"class.gfx::AnimationContainerElement"*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEFvS5_EE3RunEPNS0_13BindStateBaseEOS5_(%"class.base::internal::BindStateBase"*, %"class.base::TimeTicks"* dereferenceable(8)) #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = bitcast %"class.base::internal::BindStateBase"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %10 = bitcast void ()** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds i8, i8* %6, i64 %11
  %13 = bitcast i8* %12 to %"class.gfx::AnimationContainer"*
  %14 = and i64 %8, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %2
  %17 = bitcast i8* %12 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = add i64 %8, -1
  %20 = getelementptr i8, i8* %18, i64 %19
  %21 = bitcast i8* %20 to void (%"class.gfx::AnimationContainer"*, i64)**
  %22 = load void (%"class.gfx::AnimationContainer"*, i64)*, void (%"class.gfx::AnimationContainer"*, i64)** %21, align 8
  br label %25

23:                                               ; preds = %2
  %24 = inttoptr i64 %8 to void (%"class.gfx::AnimationContainer"*, i64)*
  br label %25

25:                                               ; preds = %16, %23
  %26 = phi void (%"class.gfx::AnimationContainer"*, i64)* [ %22, %16 ], [ %24, %23 ]
  %27 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 0, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  tail call void %26(%"class.gfx::AnimationContainer"* %13, i64 %28) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS3_EEEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #9
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base13BindRepeatingIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!6 = distinct !{!6, !"_ZN4base13BindRepeatingIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
!7 = !{!8, !10}
!8 = distinct !{!8, !9, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_: argument 0"}
!9 = distinct !{!9, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_"}
!10 = distinct !{!10, !11, !"_ZN4base13BindRepeatingIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!11 = distinct !{!11, !"_ZN4base13BindRepeatingIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
!12 = !{!13, !15}
!13 = distinct !{!13, !14, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_: argument 0"}
!14 = distinct !{!14, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_"}
!15 = distinct !{!15, !16, !"_ZN4base13BindRepeatingIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!16 = distinct !{!16, !"_ZN4base13BindRepeatingIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
!17 = !{!18, !20}
!18 = distinct !{!18, !19, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_: argument 0"}
!19 = distinct !{!19, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_"}
!20 = distinct !{!20, !21, !"_ZN4base13BindRepeatingIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!21 = distinct !{!21, !"_ZN4base13BindRepeatingIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
!22 = !{!23, !25}
!23 = distinct !{!23, !24, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_: argument 0"}
!24 = distinct !{!24, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_"}
!25 = distinct !{!25, !26, !"_ZN4base13BindRepeatingIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!26 = distinct !{!26, !"_ZN4base13BindRepeatingIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
!27 = !{!28, !30}
!28 = distinct !{!28, !29, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_: argument 0"}
!29 = distinct !{!29, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS0_17UnretainedWrapperIS4_EEEEEDcOT0_DpOT1_"}
!30 = distinct !{!30, !31, !"_ZN4base13BindRepeatingIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!31 = distinct !{!31, !"_ZN4base13BindRepeatingIMN3gfx18AnimationContainerEFvNS_9TimeTicksEEJNS_8internal17UnretainedWrapperIS2_EEEEENS_17RepeatingCallbackINS6_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
!32 = !{!33}
!33 = distinct !{!33, !34}
!34 = distinct !{!34, !"LVerDomain"}
!35 = !{!36}
!36 = distinct !{!36, !34}
!37 = distinct !{!37, !38}
!38 = !{!"llvm.loop.isvectorized", i32 1}
!39 = distinct !{!39, !40}
!40 = !{!"llvm.loop.unroll.disable"}
!41 = distinct !{!41, !38}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !40}
