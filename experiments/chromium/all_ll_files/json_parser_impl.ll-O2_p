; ModuleID = '../../services/data_decoder/json_parser_impl.cc'
source_filename = "../../services/data_decoder/json_parser_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.data_decoder::JsonParserImpl" = type { %"class.data_decoder::mojom::JsonParser" }
%"class.data_decoder::mojom::JsonParser" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.base::JSONReader::ValueWithError" = type { %"class.absl::optional", %"class.std::__1::basic_string", i32, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.2 }
%union.anon.2 = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"union.absl::variant_internal::DestructibleUnionImpl.4" }
%"union.absl::variant_internal::DestructibleUnionImpl.4" = type { %"union.absl::variant_internal::DestructibleUnionImpl.5" }
%"union.absl::variant_internal::DestructibleUnionImpl.5" = type { %"union.absl::variant_internal::DestructibleUnionImpl.6" }
%"union.absl::variant_internal::DestructibleUnionImpl.6" = type { %"class.std::__1::basic_string" }
%"class.absl::optional.30" = type { %"class.absl::optional_internal::optional_data.31" }
%"class.absl::optional_internal::optional_data.31" = type { %"class.absl::optional_internal::optional_data_base.32" }
%"class.absl::optional_internal::optional_data_base.32" = type { %"class.absl::optional_internal::optional_data_dtor_base.33" }
%"class.absl::optional_internal::optional_data_dtor_base.33" = type { i8, %union.anon.34 }
%union.anon.34 = type { %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZTVN12data_decoder14JsonParserImplE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.data_decoder::JsonParserImpl"*)* @_ZN12data_decoder14JsonParserImplD2Ev to i8*), i8* bitcast (void (%"class.data_decoder::JsonParserImpl"*)* @_ZN12data_decoder14JsonParserImplD0Ev to i8*), i8* bitcast (void (%"class.data_decoder::JsonParserImpl"*, %"class.std::__1::basic_string"*, %"class.base::OnceCallback"*)* @_ZN12data_decoder14JsonParserImpl5ParseERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN4base12OnceCallbackIFvN4absl8optionalINSA_5ValueEEERKNSD_IS7_EEEEE to i8*)] }, align 8

@_ZN12data_decoder14JsonParserImplC1Ev = hidden unnamed_addr alias void (%"class.data_decoder::JsonParserImpl"*), void (%"class.data_decoder::JsonParserImpl"*)* @_ZN12data_decoder14JsonParserImplC2Ev
@_ZN12data_decoder14JsonParserImplD1Ev = hidden unnamed_addr alias void (%"class.data_decoder::JsonParserImpl"*), void (%"class.data_decoder::JsonParserImpl"*)* @_ZN12data_decoder14JsonParserImplD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN12data_decoder14JsonParserImplC2Ev(%"class.data_decoder::JsonParserImpl"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.data_decoder::JsonParserImpl", %"class.data_decoder::JsonParserImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN12data_decoder14JsonParserImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN12data_decoder14JsonParserImplD2Ev(%"class.data_decoder::JsonParserImpl"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12data_decoder14JsonParserImplD0Ev(%"class.data_decoder::JsonParserImpl"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.data_decoder::JsonParserImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12data_decoder14JsonParserImpl5ParseERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN4base12OnceCallbackIFvN4absl8optionalINSA_5ValueEEERKNSD_IS7_EEEEE(%"class.data_decoder::JsonParserImpl"* nocapture readnone, %"class.std::__1::basic_string"* dereferenceable(24), %"class.base::OnceCallback"* nocapture) unnamed_addr #2 align 2 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = alloca %"struct.base::JSONReader::ValueWithError", align 8
  %7 = alloca %"class.absl::optional", align 8
  %8 = alloca %"class.absl::optional.30", align 8
  %9 = alloca %"class.absl::optional", align 8
  %10 = alloca %"class.absl::optional.30", align 8
  %11 = getelementptr inbounds %"struct.base::JSONReader::ValueWithError", %"struct.base::JSONReader::ValueWithError"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %11) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 72, i1 false)
  %12 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %19 = select i1 %15, i8* %17, i8* %18
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = zext i8 %14 to i64
  %23 = select i1 %15, i64 %21, i64 %22
  call void @_ZN4base10JSONReader27ReadAndReturnValueWithErrorENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"struct.base::JSONReader::ValueWithError"* nonnull sret %6, i8* %19, i64 %23, i32 0) #8
  %24 = load i8, i8* %11, align 8, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %59, label %26

26:                                               ; preds = %3
  %27 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 40, i1 false) #8
  %28 = getelementptr inbounds %"struct.base::JSONReader::ValueWithError", %"struct.base::JSONReader::ValueWithError"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %29 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* %29, %"class.base::Value"* dereferenceable(32) %28) #8
  store i8 1, i8* %27, align 8
  %30 = getelementptr inbounds %"class.absl::optional.30", %"class.absl::optional.30"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30) #8
  store i8 0, i8* %30, align 8
  %31 = getelementptr inbounds %"class.absl::optional.30", %"class.absl::optional.30"* %8, i64 0, i32 0, i32 0, i32 0, i32 1
  %32 = bitcast %union.anon.34* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #8
  %33 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #8
  %34 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %35 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %36, i64* %37, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %34, align 8
  %38 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  %39 = inttoptr i64 %36 to %"class.base::internal::BindStateBase"*
  %40 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %39, i64 0, i32 1
  %41 = bitcast void ()** %40 to void (%"class.base::internal::BindStateBase"*, %"class.absl::optional"*, %"class.absl::optional.30"*)**
  %42 = load void (%"class.base::internal::BindStateBase"*, %"class.absl::optional"*, %"class.absl::optional.30"*)*, void (%"class.base::internal::BindStateBase"*, %"class.absl::optional"*, %"class.absl::optional.30"*)** %41, align 8
  call void %42(%"class.base::internal::BindStateBase"* %39, %"class.absl::optional"* nonnull dereferenceable(40) %7, %"class.absl::optional.30"* nonnull dereferenceable(32) %8) #8
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %38) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #8
  %43 = load i8, i8* %30, align 8, !range !2
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %55, label %45

45:                                               ; preds = %26
  %46 = getelementptr inbounds %"class.absl::optional.30", %"class.absl::optional.30"* %8, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %47 = bitcast %"class.std::__1::basic_string"* %46 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  %49 = load i8, i8* %48, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %45
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %46, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  call void @_ZdlPv(i8* %53) #7
  br label %54

54:                                               ; preds = %51, %45
  store i8 0, i8* %30, align 8
  br label %55

55:                                               ; preds = %26, %54
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #8
  %56 = load i8, i8* %27, align 8, !range !2
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %94, label %58

58:                                               ; preds = %55
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* %29) #8
  store i8 0, i8* %27, align 8
  br label %94

59:                                               ; preds = %3
  %60 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %60, align 8
  %61 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %9, i64 0, i32 0, i32 0, i32 0, i32 1
  %62 = bitcast %union.anon.2* %61 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 32, i1 false) #8
  %63 = getelementptr inbounds %"class.absl::optional.30", %"class.absl::optional.30"* %10, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %63) #8
  %64 = getelementptr inbounds %"struct.base::JSONReader::ValueWithError", %"struct.base::JSONReader::ValueWithError"* %6, i64 0, i32 1
  store i8 1, i8* %63, align 8, !alias.scope !3
  %65 = getelementptr inbounds %"class.absl::optional.30", %"class.absl::optional.30"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %66 = bitcast %"class.std::__1::basic_string"* %65 to i8*
  %67 = bitcast %"class.std::__1::basic_string"* %64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 24, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 24, i1 false) #8, !noalias !3
  %68 = bitcast %"class.base::OnceCallback"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #8
  %69 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %70 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %71, i64* %72, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %69, align 8
  %73 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  %74 = inttoptr i64 %71 to %"class.base::internal::BindStateBase"*
  %75 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %74, i64 0, i32 1
  %76 = bitcast void ()** %75 to void (%"class.base::internal::BindStateBase"*, %"class.absl::optional"*, %"class.absl::optional.30"*)**
  %77 = load void (%"class.base::internal::BindStateBase"*, %"class.absl::optional"*, %"class.absl::optional.30"*)*, void (%"class.base::internal::BindStateBase"*, %"class.absl::optional"*, %"class.absl::optional.30"*)** %76, align 8
  call void %77(%"class.base::internal::BindStateBase"* %74, %"class.absl::optional"* nonnull dereferenceable(40) %9, %"class.absl::optional.30"* nonnull dereferenceable(32) %10) #8
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %73) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #8
  %78 = load i8, i8* %63, align 8, !range !2
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %89, label %80

80:                                               ; preds = %59
  %81 = bitcast %"class.std::__1::basic_string"* %65 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %82 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %81, i64 0, i32 1, i32 0
  %83 = load i8, i8* %82, align 1
  %84 = icmp slt i8 %83, 0
  br i1 %84, label %85, label %88

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  call void @_ZdlPv(i8* %87) #7
  br label %88

88:                                               ; preds = %85, %80
  store i8 0, i8* %63, align 8
  br label %89

89:                                               ; preds = %59, %88
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %63) #8
  %90 = load i8, i8* %60, align 8, !range !2
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %94, label %92

92:                                               ; preds = %89
  %93 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %9, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* %93) #8
  store i8 0, i8* %60, align 8
  br label %94

94:                                               ; preds = %92, %89, %58, %55
  call void @_ZN4base10JSONReader14ValueWithErrorD1Ev(%"struct.base::JSONReader::ValueWithError"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %11) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN4base10JSONReader27ReadAndReturnValueWithErrorENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"struct.base::JSONReader::ValueWithError"* sret, i8*, i64, i32) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind
declare void @_ZN4base10JSONReader14ValueWithErrorD1Ev(%"struct.base::JSONReader::ValueWithError"*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN4base5ValueC1EOS0_(%"class.base::Value"*, %"class.base::Value"* dereferenceable(32)) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN4base5ValueD1Ev(%"class.base::Value"*) unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN4absl13make_optionalINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEENS_8optionalINS1_5decayIT_E4typeEEEOSA_: argument 0"}
!5 = distinct !{!5, !"_ZN4absl13make_optionalINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEENS_8optionalINS1_5decayIT_E4typeEEEOSA_"}
