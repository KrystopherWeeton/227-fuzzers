; ModuleID = '../../components/image_fetcher/core/reduced_mode_image_fetcher.cc'
source_filename = "../../components/image_fetcher/core/reduced_mode_image_fetcher.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.image_fetcher::ReducedModeImageFetcher" = type { %"class.image_fetcher::ImageFetcher", %"class.image_fetcher::ImageFetcher"* }
%"class.image_fetcher::ImageFetcher" = type { i32 (...)** }
%"class.image_fetcher::ImageDecoder" = type opaque
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %class.GURL* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::OnceCallback.5" = type { %"class.base::internal::CallbackBase" }
%"class.image_fetcher::ImageFetcherParams" = type <{ %"struct.net::NetworkTrafficAnnotationTag", [4 x i8], %"class.absl::optional", %"class.absl::optional.7", %"class.gfx::Size", %"class.std::__1::basic_string", i8, i8, i8, [5 x i8] }>
%"struct.net::NetworkTrafficAnnotationTag" = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.6 }
%union.anon.6 = type { i64 }
%"class.absl::optional.7" = type { %"class.absl::optional_internal::optional_data.8" }
%"class.absl::optional_internal::optional_data.8" = type { %"class.absl::optional_internal::optional_data_base.9" }
%"class.absl::optional_internal::optional_data_base.9" = type { %"class.absl::optional_internal::optional_data_dtor_base.10" }
%"class.absl::optional_internal::optional_data_dtor_base.10" = type { i8, %union.anon.11 }
%union.anon.11 = type { %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.gfx::Size" = type { i32, i32 }

@_ZTVN13image_fetcher23ReducedModeImageFetcherE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.image_fetcher::ReducedModeImageFetcher"*)* @_ZN13image_fetcher23ReducedModeImageFetcherD2Ev to i8*), i8* bitcast (void (%"class.image_fetcher::ReducedModeImageFetcher"*)* @_ZN13image_fetcher23ReducedModeImageFetcherD0Ev to i8*), i8* bitcast (void (%"class.image_fetcher::ReducedModeImageFetcher"*, %class.GURL*, %"class.base::OnceCallback"*, %"class.base::OnceCallback.5"*, %"class.image_fetcher::ImageFetcherParams"*)* @_ZN13image_fetcher23ReducedModeImageFetcher17FetchImageAndDataERK4GURLN4base12OnceCallbackIFvRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKNS_15RequestMetadataEEEENS5_IFvRKN3gfx5ImageESH_EEENS_18ImageFetcherParamsE to i8*), i8* bitcast (%"class.image_fetcher::ImageDecoder"* (%"class.image_fetcher::ReducedModeImageFetcher"*)* @_ZN13image_fetcher23ReducedModeImageFetcher15GetImageDecoderEv to i8*)] }, align 8

@_ZN13image_fetcher23ReducedModeImageFetcherC1EPNS_12ImageFetcherE = hidden unnamed_addr alias void (%"class.image_fetcher::ReducedModeImageFetcher"*, %"class.image_fetcher::ImageFetcher"*), void (%"class.image_fetcher::ReducedModeImageFetcher"*, %"class.image_fetcher::ImageFetcher"*)* @_ZN13image_fetcher23ReducedModeImageFetcherC2EPNS_12ImageFetcherE
@_ZN13image_fetcher23ReducedModeImageFetcherD1Ev = hidden unnamed_addr alias void (%"class.image_fetcher::ReducedModeImageFetcher"*), void (%"class.image_fetcher::ReducedModeImageFetcher"*)* @_ZN13image_fetcher23ReducedModeImageFetcherD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN13image_fetcher23ReducedModeImageFetcherC2EPNS_12ImageFetcherE(%"class.image_fetcher::ReducedModeImageFetcher"* nocapture, %"class.image_fetcher::ImageFetcher"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.image_fetcher::ReducedModeImageFetcher", %"class.image_fetcher::ReducedModeImageFetcher"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN13image_fetcher23ReducedModeImageFetcherE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.image_fetcher::ReducedModeImageFetcher", %"class.image_fetcher::ReducedModeImageFetcher"* %0, i64 0, i32 1
  store %"class.image_fetcher::ImageFetcher"* %1, %"class.image_fetcher::ImageFetcher"** %4, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN13image_fetcher23ReducedModeImageFetcherD2Ev(%"class.image_fetcher::ReducedModeImageFetcher"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13image_fetcher23ReducedModeImageFetcherD0Ev(%"class.image_fetcher::ReducedModeImageFetcher"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.image_fetcher::ReducedModeImageFetcher"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.image_fetcher::ImageDecoder"* @_ZN13image_fetcher23ReducedModeImageFetcher15GetImageDecoderEv(%"class.image_fetcher::ReducedModeImageFetcher"* nocapture readnone) unnamed_addr #1 align 2 {
  ret %"class.image_fetcher::ImageDecoder"* null
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13image_fetcher23ReducedModeImageFetcher17FetchImageAndDataERK4GURLN4base12OnceCallbackIFvRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKNS_15RequestMetadataEEEENS5_IFvRKN3gfx5ImageESH_EEENS_18ImageFetcherParamsE(%"class.image_fetcher::ReducedModeImageFetcher"* nocapture readonly, %class.GURL* dereferenceable(120), %"class.base::OnceCallback"* nocapture, %"class.base::OnceCallback.5"* nocapture readnone, %"class.image_fetcher::ImageFetcherParams"*) unnamed_addr #2 align 2 {
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = alloca %"class.base::OnceCallback.5", align 8
  %8 = alloca %"class.image_fetcher::ImageFetcherParams", align 8
  %9 = getelementptr inbounds %"class.image_fetcher::ImageFetcherParams", %"class.image_fetcher::ImageFetcherParams"* %4, i64 0, i32 6
  store i8 1, i8* %9, align 8
  %10 = getelementptr inbounds %"class.image_fetcher::ImageFetcherParams", %"class.image_fetcher::ImageFetcherParams"* %4, i64 0, i32 8
  store i8 1, i8* %10, align 2
  %11 = getelementptr inbounds %"class.image_fetcher::ReducedModeImageFetcher", %"class.image_fetcher::ReducedModeImageFetcher"* %0, i64 0, i32 1
  %12 = load %"class.image_fetcher::ImageFetcher"*, %"class.image_fetcher::ImageFetcher"** %11, align 8
  %13 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %14 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.base::OnceCallback"* %6 to i64*
  store i64 %15, i64* %16, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %13, align 8
  %17 = getelementptr inbounds %"class.base::OnceCallback.5", %"class.base::OnceCallback.5"* %7, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %17, align 8
  call void @_ZN13image_fetcher18ImageFetcherParamsC1ERKS0_(%"class.image_fetcher::ImageFetcherParams"* nonnull %8, %"class.image_fetcher::ImageFetcherParams"* dereferenceable(80) %4) #7
  %18 = bitcast %"class.image_fetcher::ImageFetcher"* %12 to void (%"class.image_fetcher::ImageFetcher"*, %class.GURL*, %"class.base::OnceCallback"*, %"class.base::OnceCallback.5"*, %"class.image_fetcher::ImageFetcherParams"*)***
  %19 = load void (%"class.image_fetcher::ImageFetcher"*, %class.GURL*, %"class.base::OnceCallback"*, %"class.base::OnceCallback.5"*, %"class.image_fetcher::ImageFetcherParams"*)**, void (%"class.image_fetcher::ImageFetcher"*, %class.GURL*, %"class.base::OnceCallback"*, %"class.base::OnceCallback.5"*, %"class.image_fetcher::ImageFetcherParams"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.image_fetcher::ImageFetcher"*, %class.GURL*, %"class.base::OnceCallback"*, %"class.base::OnceCallback.5"*, %"class.image_fetcher::ImageFetcherParams"*)*, void (%"class.image_fetcher::ImageFetcher"*, %class.GURL*, %"class.base::OnceCallback"*, %"class.base::OnceCallback.5"*, %"class.image_fetcher::ImageFetcherParams"*)** %19, i64 2
  %21 = load void (%"class.image_fetcher::ImageFetcher"*, %class.GURL*, %"class.base::OnceCallback"*, %"class.base::OnceCallback.5"*, %"class.image_fetcher::ImageFetcherParams"*)*, void (%"class.image_fetcher::ImageFetcher"*, %class.GURL*, %"class.base::OnceCallback"*, %"class.base::OnceCallback.5"*, %"class.image_fetcher::ImageFetcherParams"*)** %20, align 8
  call void %21(%"class.image_fetcher::ImageFetcher"* %12, %class.GURL* dereferenceable(120) %1, %"class.base::OnceCallback"* nonnull %6, %"class.base::OnceCallback.5"* nonnull %7, %"class.image_fetcher::ImageFetcherParams"* nonnull %8) #7
  call void @_ZN13image_fetcher18ImageFetcherParamsD1Ev(%"class.image_fetcher::ImageFetcherParams"* nonnull %8) #7
  %22 = getelementptr inbounds %"class.base::OnceCallback.5", %"class.base::OnceCallback.5"* %7, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %22) #7
  %23 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %23) #7
  ret void
}

declare void @_ZN13image_fetcher18ImageFetcherParamsC1ERKS0_(%"class.image_fetcher::ImageFetcherParams"*, %"class.image_fetcher::ImageFetcherParams"* dereferenceable(80)) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN13image_fetcher18ImageFetcherParamsD1Ev(%"class.image_fetcher::ImageFetcherParams"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
