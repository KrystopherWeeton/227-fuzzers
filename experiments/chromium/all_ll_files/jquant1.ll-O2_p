; ModuleID = '../../third_party/libjpeg_turbo/jquant1.c'
source_filename = "../../third_party/libjpeg_turbo/jquant1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, {}* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { {}*, {}*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, {}*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, {}*, {}*, {}*, i32, i32 }
%struct.jpeg_marker_reader = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { {}*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { {}*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, {}*, {}* }
%struct.my_cquantizer = type { %struct.jpeg_color_quantizer, i8**, i32, i8**, i32, [4 x i32], i32, [4 x [16 x i32]*], [4 x i16*], i32 }

@base_dither_matrix = internal unnamed_addr constant [16 x [16 x i8]] [[16 x i8] c"\00\C00\F0\0C\CC<\FC\03\C33\F3\0F\CF?\FF", [16 x i8] c"\80@\B0p\8CL\BC|\83C\B3s\8FO\BF\7F", [16 x i8] c" \E0\10\D0,\EC\1C\DC#\E3\13\D3/\EF\1F\DF", [16 x i8] c"\A0`\90P\ACl\9C\5C\A3c\93S\AFo\9F_", [16 x i8] c"\08\C88\F8\04\C44\F4\0B\CB;\FB\07\C77\F7", [16 x i8] c"\88H\B8x\84D\B4t\8BK\BB{\87G\B7w", [16 x i8] c"(\E8\18\D8$\E4\14\D4+\EB\1B\DB'\E7\17\D7", [16 x i8] c"\A8h\98X\A4d\94T\ABk\9B[\A7g\97W", [16 x i8] c"\02\C22\F2\0E\CE>\FE\01\C11\F1\0D\CD=\FD", [16 x i8] c"\82B\B2r\8EN\BE~\81A\B1q\8DM\BD}", [16 x i8] c"\22\E2\12\D2.\EE\1E\DE!\E1\11\D1-\ED\1D\DD", [16 x i8] c"\A2b\92R\AEn\9E^\A1a\91Q\ADm\9D]", [16 x i8] c"\0A\CA:\FA\06\C66\F6\09\C99\F9\05\C55\F5", [16 x i8] c"\8AJ\BAz\86F\B6v\89I\B9y\85E\B5u", [16 x i8] c"*\EA\1A\DA&\E6\16\D6)\E9\19\D9%\E5\15\D5", [16 x i8] c"\AAj\9AZ\A6f\96V\A9i\99Y\A5e\95U"], align 16
@rgb_green = internal unnamed_addr constant [17 x i32] [i32 -1, i32 -1, i32 1, i32 -1, i32 -1, i32 -1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 1, i32 1, i32 2, i32 2, i32 -1], align 16
@rgb_red = internal unnamed_addr constant [17 x i32] [i32 -1, i32 -1, i32 0, i32 -1, i32 -1, i32 -1, i32 0, i32 0, i32 2, i32 2, i32 3, i32 1, i32 0, i32 2, i32 3, i32 1, i32 -1], align 16
@rgb_blue = internal unnamed_addr constant [17 x i32] [i32 -1, i32 -1, i32 2, i32 -1, i32 -1, i32 -1, i32 2, i32 2, i32 0, i32 0, i32 1, i32 3, i32 2, i32 0, i32 1, i32 3, i32 -1], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_1pass_quantizer(%struct.jpeg_decompress_struct*) local_unnamed_addr #0 {
  %2 = alloca [3 x i32], align 4
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %4 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %4, i64 0, i32 0
  %6 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %5, align 8
  %7 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %8 = tail call i8* %6(%struct.jpeg_common_struct* %7, i32 1, i64 152) #5
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %10 = bitcast %struct.jpeg_color_quantizer** %9 to i8**
  store i8* %8, i8** %10, align 8
  %11 = bitcast i8* %8 to void (%struct.jpeg_decompress_struct*, i32)**
  store void (%struct.jpeg_decompress_struct*, i32)* @start_pass_1_quant, void (%struct.jpeg_decompress_struct*, i32)** %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 16
  %13 = bitcast i8* %12 to <2 x void (%struct.jpeg_decompress_struct*)*>*
  store <2 x void (%struct.jpeg_decompress_struct*)*> <void (%struct.jpeg_decompress_struct*)* @finish_pass_1_quant, void (%struct.jpeg_decompress_struct*)* @new_color_map_1_quant>, <2 x void (%struct.jpeg_decompress_struct*)*>* %13, align 8
  %14 = getelementptr inbounds i8, i8* %8, i64 112
  %15 = bitcast i8* %14 to i16**
  store i16* null, i16** %15, align 8
  %16 = getelementptr inbounds i8, i8* %8, i64 80
  %17 = bitcast i8* %16 to [16 x i32]**
  store [16 x i32]* null, [16 x i32]** %17, align 8
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %19 = load i32, i32* %18, align 8
  %20 = icmp sgt i32 %19, 4
  br i1 %20, label %21, label %30

21:                                               ; preds = %1
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %23 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %22, align 8
  %24 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %23, i64 0, i32 5
  store i32 55, i32* %24, align 8
  %25 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %22, align 8
  %26 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %25, i64 0, i32 6, i32 0, i64 0
  store i32 4, i32* %26, align 4
  %27 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %22, align 8
  %28 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %27, i64 0, i32 0
  %29 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %28, align 8
  tail call void %29(%struct.jpeg_common_struct* %7) #5
  br label %30

30:                                               ; preds = %21, %1
  %31 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 23
  %32 = load i32, i32* %31, align 8
  %33 = icmp sgt i32 %32, 256
  br i1 %33, label %34, label %44

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %36 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %35, align 8
  %37 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %36, i64 0, i32 5
  store i32 57, i32* %37, align 8
  %38 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %35, align 8
  %39 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %38, i64 0, i32 6, i32 0, i64 0
  store i32 256, i32* %39, align 4
  %40 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %35, align 8
  %41 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %40, i64 0, i32 0
  %42 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %41, align 8
  tail call void %42(%struct.jpeg_common_struct* %7) #5
  %43 = load i32, i32* %31, align 8
  br label %44

44:                                               ; preds = %34, %30
  %45 = phi i32 [ %43, %34 ], [ %32, %30 ]
  %46 = bitcast %struct.jpeg_color_quantizer** %9 to %struct.my_cquantizer**
  %47 = load %struct.my_cquantizer*, %struct.my_cquantizer** %46, align 8
  %48 = load i32, i32* %18, align 8
  %49 = bitcast [3 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %49) #5
  %50 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %51 = load i32, i32* %50, align 8
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_green, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 0
  store i32 %54, i32* %55, align 4
  %56 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_red, i64 0, i64 %52
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 1
  store i32 %57, i32* %58, align 4
  %59 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_blue, i64 0, i64 %52
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 %60, i32* %61, align 4
  %62 = sext i32 %45 to i64
  %63 = icmp sgt i32 %48, 1
  %64 = add i32 %48, -1
  %65 = add i32 %48, -2
  %66 = and i32 %64, 7
  %67 = icmp ult i32 %65, 7
  %68 = sub i32 %64, %66
  %69 = icmp eq i32 %66, 0
  br label %70

70:                                               ; preds = %96, %44
  %71 = phi i64 [ %72, %96 ], [ 1, %44 ]
  %72 = add nuw i64 %71, 1
  br i1 %63, label %73, label %96

73:                                               ; preds = %70
  br i1 %67, label %87, label %74

74:                                               ; preds = %73, %74
  %75 = phi i64 [ %84, %74 ], [ %72, %73 ]
  %76 = phi i32 [ %85, %74 ], [ %68, %73 ]
  %77 = mul nsw i64 %75, %72
  %78 = mul nsw i64 %77, %72
  %79 = mul nsw i64 %78, %72
  %80 = mul nsw i64 %79, %72
  %81 = mul nsw i64 %80, %72
  %82 = mul nsw i64 %81, %72
  %83 = mul nsw i64 %82, %72
  %84 = mul nsw i64 %83, %72
  %85 = add i32 %76, -8
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %74

87:                                               ; preds = %74, %73
  %88 = phi i64 [ undef, %73 ], [ %84, %74 ]
  %89 = phi i64 [ %72, %73 ], [ %84, %74 ]
  br i1 %69, label %96, label %90

90:                                               ; preds = %87, %90
  %91 = phi i64 [ %93, %90 ], [ %89, %87 ]
  %92 = phi i32 [ %94, %90 ], [ %66, %87 ]
  %93 = mul nsw i64 %91, %72
  %94 = add i32 %92, -1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %90, !llvm.loop !2

96:                                               ; preds = %87, %90, %70
  %97 = phi i64 [ %72, %70 ], [ %88, %87 ], [ %93, %90 ]
  %98 = icmp sgt i64 %97, %62
  br i1 %98, label %99, label %70

99:                                               ; preds = %96
  %100 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %47, i64 0, i32 5, i64 0
  %101 = trunc i64 %71 to i32
  %102 = icmp ult i32 %101, 2
  br i1 %102, label %103, label %113

103:                                              ; preds = %99
  %104 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %105 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %104, align 8
  %106 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %105, i64 0, i32 5
  store i32 56, i32* %106, align 8
  %107 = trunc i64 %97 to i32
  %108 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %104, align 8
  %109 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %108, i64 0, i32 6, i32 0, i64 0
  store i32 %107, i32* %109, align 4
  %110 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %104, align 8
  %111 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %110, i64 0, i32 0
  %112 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %111, align 8
  tail call void %112(%struct.jpeg_common_struct* %7) #5
  br label %113

113:                                              ; preds = %103, %99
  %114 = icmp sgt i32 %48, 0
  %115 = zext i32 %48 to i64
  br i1 %114, label %116, label %200

116:                                              ; preds = %113
  %117 = icmp ult i32 %48, 8
  br i1 %117, label %118, label %121

118:                                              ; preds = %190, %116
  %119 = phi i64 [ 0, %116 ], [ %122, %190 ]
  %120 = phi i32 [ 1, %116 ], [ %198, %190 ]
  br label %202

121:                                              ; preds = %116
  %122 = and i64 %115, 4294967288
  %123 = insertelement <4 x i32> undef, i32 %101, i32 0
  %124 = shufflevector <4 x i32> %123, <4 x i32> undef, <4 x i32> zeroinitializer
  %125 = insertelement <4 x i32> undef, i32 %101, i32 0
  %126 = shufflevector <4 x i32> %125, <4 x i32> undef, <4 x i32> zeroinitializer
  %127 = add nsw i64 %122, -8
  %128 = lshr exact i64 %127, 3
  %129 = add nuw nsw i64 %128, 1
  %130 = and i64 %129, 3
  %131 = icmp ult i64 %127, 24
  br i1 %131, label %169, label %132

132:                                              ; preds = %121
  %133 = sub nsw i64 %129, %130
  br label %134

134:                                              ; preds = %134, %132
  %135 = phi i64 [ 0, %132 ], [ %166, %134 ]
  %136 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %132 ], [ %164, %134 ]
  %137 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %132 ], [ %165, %134 ]
  %138 = phi i64 [ %133, %132 ], [ %167, %134 ]
  %139 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %47, i64 0, i32 5, i64 %135
  %140 = bitcast i32* %139 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %140, align 4
  %141 = getelementptr inbounds i32, i32* %139, i64 4
  %142 = bitcast i32* %141 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %142, align 4
  %143 = mul nsw <4 x i32> %136, %124
  %144 = mul nsw <4 x i32> %137, %126
  %145 = or i64 %135, 8
  %146 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %47, i64 0, i32 5, i64 %145
  %147 = bitcast i32* %146 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %147, align 4
  %148 = getelementptr inbounds i32, i32* %146, i64 4
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %149, align 4
  %150 = mul nsw <4 x i32> %143, %124
  %151 = mul nsw <4 x i32> %144, %126
  %152 = or i64 %135, 16
  %153 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %47, i64 0, i32 5, i64 %152
  %154 = bitcast i32* %153 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %154, align 4
  %155 = getelementptr inbounds i32, i32* %153, i64 4
  %156 = bitcast i32* %155 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %156, align 4
  %157 = mul nsw <4 x i32> %150, %124
  %158 = mul nsw <4 x i32> %151, %126
  %159 = or i64 %135, 24
  %160 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %47, i64 0, i32 5, i64 %159
  %161 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %161, align 4
  %162 = getelementptr inbounds i32, i32* %160, i64 4
  %163 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %163, align 4
  %164 = mul nsw <4 x i32> %157, %124
  %165 = mul nsw <4 x i32> %158, %126
  %166 = add i64 %135, 32
  %167 = add i64 %138, -4
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %134, !llvm.loop !4

169:                                              ; preds = %134, %121
  %170 = phi <4 x i32> [ undef, %121 ], [ %164, %134 ]
  %171 = phi <4 x i32> [ undef, %121 ], [ %165, %134 ]
  %172 = phi i64 [ 0, %121 ], [ %166, %134 ]
  %173 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %121 ], [ %164, %134 ]
  %174 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %121 ], [ %165, %134 ]
  %175 = icmp eq i64 %130, 0
  br i1 %175, label %190, label %176

176:                                              ; preds = %169, %176
  %177 = phi i64 [ %187, %176 ], [ %172, %169 ]
  %178 = phi <4 x i32> [ %185, %176 ], [ %173, %169 ]
  %179 = phi <4 x i32> [ %186, %176 ], [ %174, %169 ]
  %180 = phi i64 [ %188, %176 ], [ %130, %169 ]
  %181 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %47, i64 0, i32 5, i64 %177
  %182 = bitcast i32* %181 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %182, align 4
  %183 = getelementptr inbounds i32, i32* %181, i64 4
  %184 = bitcast i32* %183 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %184, align 4
  %185 = mul nsw <4 x i32> %178, %124
  %186 = mul nsw <4 x i32> %179, %126
  %187 = add i64 %177, 8
  %188 = add i64 %180, -1
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %190, label %176, !llvm.loop !6

190:                                              ; preds = %176, %169
  %191 = phi <4 x i32> [ %170, %169 ], [ %185, %176 ]
  %192 = phi <4 x i32> [ %171, %169 ], [ %186, %176 ]
  %193 = mul <4 x i32> %192, %191
  %194 = shufflevector <4 x i32> %193, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %195 = mul <4 x i32> %193, %194
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %197 = mul <4 x i32> %195, %196
  %198 = extractelement <4 x i32> %197, i32 0
  %199 = icmp eq i64 %122, %115
  br i1 %199, label %200, label %118

200:                                              ; preds = %202, %190, %113
  %201 = phi i32 [ 1, %113 ], [ %198, %190 ], [ %206, %202 ]
  br label %209

202:                                              ; preds = %118, %202
  %203 = phi i64 [ %207, %202 ], [ %119, %118 ]
  %204 = phi i32 [ %206, %202 ], [ %120, %118 ]
  %205 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %47, i64 0, i32 5, i64 %203
  store i32 %101, i32* %205, align 4
  %206 = mul nsw i32 %204, %101
  %207 = add nuw nsw i64 %203, 1
  %208 = icmp eq i64 %207, %115
  br i1 %208, label %200, label %202, !llvm.loop !7

209:                                              ; preds = %238, %200
  %210 = phi i32 [ %239, %238 ], [ %201, %200 ]
  br i1 %114, label %211, label %242

211:                                              ; preds = %209, %232
  %212 = phi i64 [ %234, %232 ], [ 0, %209 ]
  %213 = phi i32 [ 1, %232 ], [ 0, %209 ]
  %214 = phi i32 [ %233, %232 ], [ %210, %209 ]
  %215 = load i32, i32* %50, align 8
  %216 = icmp eq i32 %215, 2
  %217 = trunc i64 %212 to i32
  br i1 %216, label %218, label %221

218:                                              ; preds = %211
  %219 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 %212
  %220 = load i32, i32* %219, align 4
  br label %221

221:                                              ; preds = %218, %211
  %222 = phi i32 [ %220, %218 ], [ %217, %211 ]
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %47, i64 0, i32 5, i64 %223
  %225 = load i32, i32* %224, align 4
  %226 = sdiv i32 %214, %225
  %227 = sext i32 %226 to i64
  %228 = add nsw i32 %225, 1
  %229 = sext i32 %228 to i64
  %230 = mul nsw i64 %227, %229
  %231 = icmp sgt i64 %230, %62
  br i1 %231, label %238, label %232

232:                                              ; preds = %221
  store i32 %228, i32* %224, align 4
  %233 = trunc i64 %230 to i32
  %234 = add nuw nsw i64 %212, 1
  %235 = icmp eq i64 %234, %115
  br i1 %235, label %236, label %211

236:                                              ; preds = %232
  %237 = trunc i64 %230 to i32
  br label %238

238:                                              ; preds = %221, %236
  %239 = phi i32 [ %237, %236 ], [ %214, %221 ]
  %240 = phi i32 [ 1, %236 ], [ %213, %221 ]
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %242, label %209

242:                                              ; preds = %238, %209
  %243 = phi i32 [ %239, %238 ], [ %201, %209 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %49) #5
  %244 = load i32, i32* %18, align 8
  %245 = icmp eq i32 %244, 3
  %246 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %247 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %246, align 8
  br i1 %245, label %248, label %263

248:                                              ; preds = %242
  %249 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %247, i64 0, i32 6, i32 0, i64 0
  store i32 %243, i32* %249, align 4
  %250 = load i32, i32* %100, align 4
  %251 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %247, i64 0, i32 6, i32 0, i64 1
  store i32 %250, i32* %251, align 4
  %252 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %47, i64 0, i32 5, i64 1
  %253 = load i32, i32* %252, align 4
  %254 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %247, i64 0, i32 6, i32 0, i64 2
  store i32 %253, i32* %254, align 4
  %255 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %47, i64 0, i32 5, i64 2
  %256 = load i32, i32* %255, align 4
  %257 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %247, i64 0, i32 6, i32 0, i64 3
  store i32 %256, i32* %257, align 4
  %258 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %246, align 8
  %259 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %258, i64 0, i32 5
  store i32 94, i32* %259, align 8
  %260 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %246, align 8
  %261 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %260, i64 0, i32 1
  %262 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %261, align 8
  tail call void %262(%struct.jpeg_common_struct* %7, i32 1) #5
  br label %270

263:                                              ; preds = %242
  %264 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %247, i64 0, i32 5
  store i32 95, i32* %264, align 8
  %265 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %246, align 8
  %266 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %265, i64 0, i32 6, i32 0, i64 0
  store i32 %243, i32* %266, align 4
  %267 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %246, align 8
  %268 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %267, i64 0, i32 1
  %269 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %268, align 8
  tail call void %269(%struct.jpeg_common_struct* %7, i32 1) #5
  br label %270

270:                                              ; preds = %263, %248
  %271 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %272 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %271, i64 0, i32 2
  %273 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %272, align 8
  %274 = load i32, i32* %18, align 8
  %275 = tail call i8** %273(%struct.jpeg_common_struct* %7, i32 1, i32 %243, i32 %274) #5
  %276 = load i32, i32* %18, align 8
  %277 = icmp sgt i32 %276, 0
  br i1 %277, label %278, label %364

278:                                              ; preds = %270
  %279 = sext i32 %243 to i64
  br label %280

280:                                              ; preds = %359, %278
  %281 = phi i32 [ %276, %278 ], [ %360, %359 ]
  %282 = phi i64 [ 0, %278 ], [ %361, %359 ]
  %283 = phi i32 [ %243, %278 ], [ %286, %359 ]
  %284 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %47, i64 0, i32 5, i64 %282
  %285 = load i32, i32* %284, align 4
  %286 = sdiv i32 %283, %285
  %287 = icmp sgt i32 %285, 0
  br i1 %287, label %288, label %359

288:                                              ; preds = %280
  %289 = add nsw i32 %285, -1
  %290 = sdiv i32 %289, 2
  %291 = sext i32 %290 to i64
  %292 = sext i32 %289 to i64
  %293 = icmp sgt i32 %286, 0
  %294 = getelementptr inbounds i8*, i8** %275, i64 %282
  %295 = sext i32 %283 to i64
  %296 = zext i32 %285 to i64
  %297 = zext i32 %286 to i64
  %298 = add nsw i64 %297, -1
  %299 = and i64 %297, 3
  %300 = icmp ult i64 %298, 3
  %301 = sub nsw i64 %297, %299
  %302 = icmp eq i64 %299, 0
  br label %303

303:                                              ; preds = %353, %288
  %304 = phi i64 [ 0, %288 ], [ %354, %353 ]
  %305 = phi i32 [ 0, %288 ], [ %355, %353 ]
  %306 = trunc i64 %304 to i32
  %307 = mul nsw i32 %286, %306
  %308 = icmp slt i32 %307, %243
  br i1 %308, label %309, label %353

309:                                              ; preds = %303
  %310 = sext i32 %305 to i64
  %311 = mul nuw nsw i64 %304, 255
  %312 = add nsw i64 %311, %291
  %313 = sdiv i64 %312, %292
  %314 = trunc i64 %313 to i8
  br label %315

315:                                              ; preds = %350, %309
  %316 = phi i64 [ %310, %309 ], [ %351, %350 ]
  br i1 %293, label %317, label %350

317:                                              ; preds = %315
  br i1 %300, label %339, label %318

318:                                              ; preds = %317, %318
  %319 = phi i64 [ %336, %318 ], [ 0, %317 ]
  %320 = phi i64 [ %337, %318 ], [ %301, %317 ]
  %321 = load i8*, i8** %294, align 8
  %322 = add nsw i64 %319, %316
  %323 = getelementptr inbounds i8, i8* %321, i64 %322
  store i8 %314, i8* %323, align 1
  %324 = or i64 %319, 1
  %325 = load i8*, i8** %294, align 8
  %326 = add nsw i64 %324, %316
  %327 = getelementptr inbounds i8, i8* %325, i64 %326
  store i8 %314, i8* %327, align 1
  %328 = or i64 %319, 2
  %329 = load i8*, i8** %294, align 8
  %330 = add nsw i64 %328, %316
  %331 = getelementptr inbounds i8, i8* %329, i64 %330
  store i8 %314, i8* %331, align 1
  %332 = or i64 %319, 3
  %333 = load i8*, i8** %294, align 8
  %334 = add nsw i64 %332, %316
  %335 = getelementptr inbounds i8, i8* %333, i64 %334
  store i8 %314, i8* %335, align 1
  %336 = add nuw nsw i64 %319, 4
  %337 = add i64 %320, -4
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %339, label %318

339:                                              ; preds = %318, %317
  %340 = phi i64 [ 0, %317 ], [ %336, %318 ]
  br i1 %302, label %350, label %341

341:                                              ; preds = %339, %341
  %342 = phi i64 [ %347, %341 ], [ %340, %339 ]
  %343 = phi i64 [ %348, %341 ], [ %299, %339 ]
  %344 = load i8*, i8** %294, align 8
  %345 = add nsw i64 %342, %316
  %346 = getelementptr inbounds i8, i8* %344, i64 %345
  store i8 %314, i8* %346, align 1
  %347 = add nuw nsw i64 %342, 1
  %348 = add i64 %343, -1
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %350, label %341, !llvm.loop !9

350:                                              ; preds = %339, %341, %315
  %351 = add i64 %316, %295
  %352 = icmp slt i64 %351, %279
  br i1 %352, label %315, label %353

353:                                              ; preds = %350, %303
  %354 = add nuw nsw i64 %304, 1
  %355 = add i32 %305, %286
  %356 = icmp eq i64 %354, %296
  br i1 %356, label %357, label %303

357:                                              ; preds = %353
  %358 = load i32, i32* %18, align 8
  br label %359

359:                                              ; preds = %357, %280
  %360 = phi i32 [ %358, %357 ], [ %281, %280 ]
  %361 = add nuw nsw i64 %282, 1
  %362 = sext i32 %360 to i64
  %363 = icmp slt i64 %361, %362
  br i1 %363, label %280, label %364

364:                                              ; preds = %359, %270
  %365 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %47, i64 0, i32 1
  store i8** %275, i8*** %365, align 8
  %366 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %47, i64 0, i32 2
  store i32 %243, i32* %366, align 8
  tail call fastcc void @create_colorindex(%struct.jpeg_decompress_struct* %0)
  %367 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 21
  %368 = load i32, i32* %367, align 8
  %369 = icmp eq i32 %368, 2
  br i1 %369, label %370, label %391

370:                                              ; preds = %364
  %371 = load %struct.my_cquantizer*, %struct.my_cquantizer** %46, align 8
  %372 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %373 = load i32, i32* %372, align 8
  %374 = add i32 %373, 2
  %375 = zext i32 %374 to i64
  %376 = shl nuw nsw i64 %375, 1
  %377 = load i32, i32* %18, align 8
  %378 = icmp sgt i32 %377, 0
  br i1 %378, label %379, label %391

379:                                              ; preds = %370, %379
  %380 = phi i64 [ %387, %379 ], [ 0, %370 ]
  %381 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %382 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %381, i64 0, i32 1
  %383 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %382, align 8
  %384 = tail call i8* %383(%struct.jpeg_common_struct* %7, i32 1, i64 %376) #5
  %385 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %371, i64 0, i32 8, i64 %380
  %386 = bitcast i16** %385 to i8**
  store i8* %384, i8** %386, align 8
  %387 = add nuw nsw i64 %380, 1
  %388 = load i32, i32* %18, align 8
  %389 = sext i32 %388 to i64
  %390 = icmp slt i64 %387, %389
  br i1 %390, label %379, label %391

391:                                              ; preds = %379, %370, %364
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal void @start_pass_1_quant(%struct.jpeg_decompress_struct*, i32) #0 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %4 = bitcast %struct.jpeg_color_quantizer** %3 to %struct.my_cquantizer**
  %5 = load %struct.my_cquantizer*, %struct.my_cquantizer** %4, align 8
  %6 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 1
  %7 = bitcast i8*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 33
  %10 = bitcast i8*** %9 to i64*
  store i64 %8, i64* %10, align 8
  %11 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 32
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 21
  %15 = load i32, i32* %14, align 8
  switch i32 %15, label %150 [
    i32 0, label %16
    i32 1, label %23
    i32 2, label %98
  ]

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 3
  %20 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 0, i32 1
  br i1 %19, label %21, label %22

21:                                               ; preds = %16
  store void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* @color_quantize3, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)** %20, align 8
  br label %158

22:                                               ; preds = %16
  store void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* @color_quantize, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)** %20, align 8
  br label %158

23:                                               ; preds = %2
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 3
  %27 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 0, i32 1
  %28 = select i1 %26, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* @quantize3_ord_dither, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* @quantize_ord_dither
  store void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* %28, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)** %27, align 8
  %29 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 6
  store i32 0, i32* %29, align 4
  %30 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 4
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %23
  tail call fastcc void @create_colorindex(%struct.jpeg_decompress_struct* %0)
  br label %34

34:                                               ; preds = %23, %33
  %35 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 7, i64 0
  %36 = load [16 x i32]*, [16 x i32]** %35, align 8
  %37 = icmp eq [16 x i32]* %36, null
  br i1 %37, label %38, label %158

38:                                               ; preds = %34
  %39 = load %struct.my_cquantizer*, %struct.my_cquantizer** %4, align 8
  %40 = load i32, i32* %24, align 8
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %158

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %44 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  br label %45

45:                                               ; preds = %91, %42
  %46 = phi i64 [ 0, %42 ], [ %94, %91 ]
  %47 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %39, i64 0, i32 5, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i64 %46, 0
  br i1 %49, label %63, label %52

50:                                               ; preds = %52
  %51 = icmp eq i64 %57, %46
  br i1 %51, label %63, label %52

52:                                               ; preds = %45, %50
  %53 = phi i64 [ %57, %50 ], [ 0, %45 ]
  %54 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %39, i64 0, i32 5, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %48, %55
  %57 = add nuw nsw i64 %53, 1
  br i1 %56, label %58, label %50

58:                                               ; preds = %52
  %59 = and i64 %53, 4294967295
  %60 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %39, i64 0, i32 7, i64 %59
  %61 = load [16 x i32]*, [16 x i32]** %60, align 8
  %62 = icmp eq [16 x i32]* %61, null
  br i1 %62, label %63, label %91

63:                                               ; preds = %50, %58, %45
  %64 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %43, align 8
  %65 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %64, i64 0, i32 0
  %66 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %65, align 8
  %67 = tail call i8* %66(%struct.jpeg_common_struct* %44, i32 1, i64 1024) #5
  %68 = bitcast i8* %67 to [16 x i32]*
  %69 = add nsw i32 %48, -1
  %70 = sext i32 %69 to i64
  %71 = shl nsw i64 %70, 9
  br label %72

72:                                               ; preds = %88, %63
  %73 = phi i64 [ 0, %63 ], [ %89, %88 ]
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi i64 [ 0, %72 ], [ %86, %74 ]
  %76 = getelementptr inbounds [16 x [16 x i8]], [16 x [16 x i8]]* @base_dither_matrix, i64 0, i64 %73, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = shl nuw nsw i32 %78, 1
  %80 = sub nsw i32 255, %79
  %81 = mul nsw i32 %80, 255
  %82 = sext i32 %81 to i64
  %83 = sdiv i64 %82, %71
  %84 = trunc i64 %83 to i32
  %85 = getelementptr inbounds [16 x i32], [16 x i32]* %68, i64 %73, i64 %75
  store i32 %84, i32* %85, align 4
  %86 = add nuw nsw i64 %75, 1
  %87 = icmp eq i64 %86, 16
  br i1 %87, label %88, label %74

88:                                               ; preds = %74
  %89 = add nuw nsw i64 %73, 1
  %90 = icmp eq i64 %89, 16
  br i1 %90, label %91, label %72

91:                                               ; preds = %88, %58
  %92 = phi [16 x i32]* [ %61, %58 ], [ %68, %88 ]
  %93 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %39, i64 0, i32 7, i64 %46
  store [16 x i32]* %92, [16 x i32]** %93, align 8
  %94 = add nuw nsw i64 %46, 1
  %95 = load i32, i32* %24, align 8
  %96 = sext i32 %95 to i64
  %97 = icmp slt i64 %94, %96
  br i1 %97, label %45, label %158

98:                                               ; preds = %2
  %99 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 0, i32 1
  store void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* @quantize_fs_dither, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)** %99, align 8
  %100 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 9
  store i32 0, i32* %100, align 8
  %101 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 8, i64 0
  %102 = load i16*, i16** %101, align 8
  %103 = icmp eq i16* %102, null
  br i1 %103, label %107, label %104

104:                                              ; preds = %98
  %105 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %106 = load i32, i32* %105, align 8
  br label %132

107:                                              ; preds = %98
  %108 = load %struct.my_cquantizer*, %struct.my_cquantizer** %4, align 8
  %109 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %110 = load i32, i32* %109, align 8
  %111 = add i32 %110, 2
  %112 = zext i32 %111 to i64
  %113 = shl nuw nsw i64 %112, 1
  %114 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %115, 0
  br i1 %116, label %117, label %132

117:                                              ; preds = %107
  %118 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %119 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  br label %120

120:                                              ; preds = %120, %117
  %121 = phi i64 [ 0, %117 ], [ %128, %120 ]
  %122 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %118, align 8
  %123 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %122, i64 0, i32 1
  %124 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %123, align 8
  %125 = tail call i8* %124(%struct.jpeg_common_struct* %119, i32 1, i64 %113) #5
  %126 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %108, i64 0, i32 8, i64 %121
  %127 = bitcast i16** %126 to i8**
  store i8* %125, i8** %127, align 8
  %128 = add nuw nsw i64 %121, 1
  %129 = load i32, i32* %114, align 8
  %130 = sext i32 %129 to i64
  %131 = icmp slt i64 %128, %130
  br i1 %131, label %120, label %132

132:                                              ; preds = %120, %104, %107
  %133 = phi i32 [ %106, %104 ], [ %115, %107 ], [ %129, %120 ]
  %134 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %135 = load i32, i32* %134, align 8
  %136 = add i32 %135, 2
  %137 = zext i32 %136 to i64
  %138 = shl nuw nsw i64 %137, 1
  %139 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %140 = icmp sgt i32 %133, 0
  br i1 %140, label %141, label %158

141:                                              ; preds = %132, %141
  %142 = phi i64 [ %146, %141 ], [ 0, %132 ]
  %143 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 8, i64 %142
  %144 = bitcast i16** %143 to i8**
  %145 = load i8*, i8** %144, align 8
  tail call void @jzero_far(i8* %145, i64 %138) #5
  %146 = add nuw nsw i64 %142, 1
  %147 = load i32, i32* %139, align 8
  %148 = sext i32 %147 to i64
  %149 = icmp slt i64 %146, %148
  br i1 %149, label %141, label %158

150:                                              ; preds = %2
  %151 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %152 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %151, align 8
  %153 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %152, i64 0, i32 5
  store i32 48, i32* %153, align 8
  %154 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %151, align 8
  %155 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %154, i64 0, i32 0
  %156 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %155, align 8
  %157 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %156(%struct.jpeg_common_struct* %157) #5
  br label %158

158:                                              ; preds = %141, %91, %132, %38, %34, %21, %22, %150
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @finish_pass_1_quant(%struct.jpeg_decompress_struct* nocapture) #2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @new_color_map_1_quant(%struct.jpeg_decompress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %3 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %3, i64 0, i32 5
  store i32 46, i32* %4, align 8
  %5 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %2, align 8
  %6 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 0
  %7 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %6, align 8
  %8 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %7(%struct.jpeg_common_struct* %8) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @create_colorindex(%struct.jpeg_decompress_struct*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %3 = bitcast %struct.jpeg_color_quantizer** %2 to %struct.my_cquantizer**
  %4 = load %struct.my_cquantizer*, %struct.my_cquantizer** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 21
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 1
  %8 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %4, i64 0, i32 4
  %9 = zext i1 %7 to i32
  store i32 %9, i32* %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %11 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %10, align 8
  %12 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %11, i64 0, i32 2
  %13 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %12, align 8
  %14 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %15 = select i1 %7, i32 766, i32 256
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %17 = load i32, i32* %16, align 8
  %18 = tail call i8** %13(%struct.jpeg_common_struct* %14, i32 1, i32 %15, i32 %17) #5
  %19 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %4, i64 0, i32 3
  store i8** %18, i8*** %19, align 8
  %20 = load i32, i32* %16, align 8
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %96

22:                                               ; preds = %1
  %23 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %4, i64 0, i32 2
  %24 = load i32, i32* %23, align 8
  br label %25

25:                                               ; preds = %22, %91
  %26 = phi i64 [ 0, %22 ], [ %92, %91 ]
  %27 = phi i32 [ %24, %22 ], [ %30, %91 ]
  %28 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %4, i64 0, i32 5, i64 %26
  %29 = load i32, i32* %28, align 4
  %30 = sdiv i32 %27, %29
  br i1 %7, label %31, label %36

31:                                               ; preds = %25
  %32 = load i8**, i8*** %19, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 %26
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 255
  store i8* %35, i8** %33, align 8
  br label %36

36:                                               ; preds = %31, %25
  %37 = load i8**, i8*** %19, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 %26
  %39 = load i8*, i8** %38, align 8
  %40 = add nsw i32 %29, -1
  %41 = sext i32 %40 to i64
  %42 = add nsw i64 %41, 255
  %43 = shl nsw i32 %40, 1
  %44 = sext i32 %43 to i64
  %45 = sdiv i64 %42, %44
  %46 = trunc i64 %45 to i32
  br label %47

47:                                               ; preds = %71, %36
  %48 = phi i64 [ 0, %36 ], [ %77, %71 ]
  %49 = phi i32 [ 0, %36 ], [ %73, %71 ]
  %50 = phi i32 [ %46, %36 ], [ %72, %71 ]
  %51 = sext i32 %50 to i64
  %52 = icmp sgt i64 %48, %51
  br i1 %52, label %53, label %71

53:                                               ; preds = %47
  %54 = sext i32 %49 to i64
  br label %55

55:                                               ; preds = %53, %55
  %56 = phi i64 [ %54, %53 ], [ %57, %55 ]
  %57 = add i64 %56, 1
  %58 = trunc i64 %57 to i32
  %59 = shl nsw i32 %58, 1
  %60 = or i32 %59, 1
  %61 = sext i32 %60 to i64
  %62 = mul nsw i64 %61, 255
  %63 = add nsw i64 %62, %41
  %64 = sdiv i64 %63, %44
  %65 = shl i64 %64, 32
  %66 = ashr exact i64 %65, 32
  %67 = icmp sgt i64 %48, %66
  br i1 %67, label %55, label %68

68:                                               ; preds = %55
  %69 = trunc i64 %57 to i32
  %70 = trunc i64 %64 to i32
  br label %71

71:                                               ; preds = %68, %47
  %72 = phi i32 [ %70, %68 ], [ %50, %47 ]
  %73 = phi i32 [ %69, %68 ], [ %49, %47 ]
  %74 = mul nsw i32 %73, %30
  %75 = trunc i32 %74 to i8
  %76 = getelementptr inbounds i8, i8* %39, i64 %48
  store i8 %75, i8* %76, align 1
  %77 = add nuw nsw i64 %48, 1
  %78 = icmp eq i64 %77, 256
  br i1 %78, label %79, label %47

79:                                               ; preds = %71
  br i1 %7, label %80, label %91

80:                                               ; preds = %79
  %81 = getelementptr inbounds i8, i8* %39, i64 255
  br label %82

82:                                               ; preds = %97, %80
  %83 = phi i64 [ 1, %80 ], [ %104, %97 ]
  %84 = load i8, i8* %39, align 1
  %85 = sub nsw i64 0, %83
  %86 = getelementptr inbounds i8, i8* %39, i64 %85
  store i8 %84, i8* %86, align 1
  %87 = load i8, i8* %81, align 1
  %88 = add nuw nsw i64 %83, 255
  %89 = getelementptr inbounds i8, i8* %39, i64 %88
  store i8 %87, i8* %89, align 1
  %90 = icmp eq i64 %83, 255
  br i1 %90, label %91, label %97

91:                                               ; preds = %82, %79
  %92 = add nuw nsw i64 %26, 1
  %93 = load i32, i32* %16, align 8
  %94 = sext i32 %93 to i64
  %95 = icmp slt i64 %92, %94
  br i1 %95, label %25, label %96

96:                                               ; preds = %91, %1
  ret void

97:                                               ; preds = %82
  %98 = load i8, i8* %39, align 1
  %99 = xor i64 %83, -1
  %100 = getelementptr inbounds i8, i8* %39, i64 %99
  store i8 %98, i8* %100, align 1
  %101 = load i8, i8* %81, align 1
  %102 = add nuw nsw i64 %83, 256
  %103 = getelementptr inbounds i8, i8* %39, i64 %102
  store i8 %101, i8* %103, align 1
  %104 = add nuw nsw i64 %83, 2
  br label %82
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @color_quantize3(%struct.jpeg_decompress_struct* nocapture readonly, i8** nocapture readonly, i8** nocapture readonly, i32) #3 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %6 = bitcast %struct.jpeg_color_quantizer** %5 to %struct.my_cquantizer**
  %7 = load %struct.my_cquantizer*, %struct.my_cquantizer** %6, align 8
  %8 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 3
  %9 = load i8**, i8*** %8, align 8
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8*, i8** %9, i64 1
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8*, i8** %9, i64 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %16 = load i32, i32* %15, align 8
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %100

18:                                               ; preds = %4
  %19 = icmp eq i32 %16, 0
  %20 = zext i32 %3 to i64
  %21 = and i32 %16, 1
  %22 = icmp eq i32 %21, 0
  %23 = add i32 %16, -1
  %24 = icmp eq i32 %16, 1
  br label %25

25:                                               ; preds = %97, %18
  %26 = phi i64 [ 0, %18 ], [ %98, %97 ]
  br i1 %19, label %97, label %27

27:                                               ; preds = %25
  %28 = getelementptr inbounds i8*, i8** %2, i64 %26
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds i8*, i8** %1, i64 %26
  %31 = load i8*, i8** %30, align 8
  br i1 %22, label %51, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds i8, i8* %31, i64 1
  %34 = load i8, i8* %31, align 1
  %35 = zext i8 %34 to i64
  %36 = getelementptr inbounds i8, i8* %10, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds i8, i8* %31, i64 2
  %39 = load i8, i8* %33, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds i8, i8* %12, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = add i8 %42, %37
  %44 = getelementptr inbounds i8, i8* %31, i64 3
  %45 = load i8, i8* %38, align 1
  %46 = zext i8 %45 to i64
  %47 = getelementptr inbounds i8, i8* %14, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = add i8 %43, %48
  %50 = getelementptr inbounds i8, i8* %29, i64 1
  store i8 %49, i8* %29, align 1
  br label %51

51:                                               ; preds = %32, %27
  %52 = phi i32 [ %23, %32 ], [ %16, %27 ]
  %53 = phi i8* [ %50, %32 ], [ %29, %27 ]
  %54 = phi i8* [ %44, %32 ], [ %31, %27 ]
  br i1 %24, label %97, label %55

55:                                               ; preds = %51, %55
  %56 = phi i32 [ %95, %55 ], [ %52, %51 ]
  %57 = phi i8* [ %94, %55 ], [ %53, %51 ]
  %58 = phi i8* [ %88, %55 ], [ %54, %51 ]
  %59 = getelementptr inbounds i8, i8* %58, i64 1
  %60 = load i8, i8* %58, align 1
  %61 = zext i8 %60 to i64
  %62 = getelementptr inbounds i8, i8* %10, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds i8, i8* %58, i64 2
  %65 = load i8, i8* %59, align 1
  %66 = zext i8 %65 to i64
  %67 = getelementptr inbounds i8, i8* %12, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = add i8 %68, %63
  %70 = getelementptr inbounds i8, i8* %58, i64 3
  %71 = load i8, i8* %64, align 1
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds i8, i8* %14, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = add i8 %69, %74
  %76 = getelementptr inbounds i8, i8* %57, i64 1
  store i8 %75, i8* %57, align 1
  %77 = getelementptr inbounds i8, i8* %58, i64 4
  %78 = load i8, i8* %70, align 1
  %79 = zext i8 %78 to i64
  %80 = getelementptr inbounds i8, i8* %10, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds i8, i8* %58, i64 5
  %83 = load i8, i8* %77, align 1
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds i8, i8* %12, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = add i8 %86, %81
  %88 = getelementptr inbounds i8, i8* %58, i64 6
  %89 = load i8, i8* %82, align 1
  %90 = zext i8 %89 to i64
  %91 = getelementptr inbounds i8, i8* %14, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = add i8 %87, %92
  %94 = getelementptr inbounds i8, i8* %57, i64 2
  store i8 %93, i8* %76, align 1
  %95 = add i32 %56, -2
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %55

97:                                               ; preds = %51, %55, %25
  %98 = add nuw nsw i64 %26, 1
  %99 = icmp eq i64 %98, %20
  br i1 %99, label %100, label %25

100:                                              ; preds = %97, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @color_quantize(%struct.jpeg_decompress_struct* nocapture readonly, i8** nocapture readonly, i8** nocapture readonly, i32) #3 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %6 = bitcast %struct.jpeg_color_quantizer** %5 to %struct.my_cquantizer**
  %7 = load %struct.my_cquantizer*, %struct.my_cquantizer** %6, align 8
  %8 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 3
  %9 = load i8**, i8*** %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %13 = load i32, i32* %12, align 8
  %14 = icmp sgt i32 %3, 0
  br i1 %14, label %15, label %122

15:                                               ; preds = %4
  %16 = icmp eq i32 %11, 0
  %17 = icmp sgt i32 %13, 0
  %18 = add i32 %13, -1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = zext i32 %3 to i64
  %22 = zext i32 %13 to i64
  %23 = add nsw i64 %22, -1
  %24 = and i64 %22, 3
  %25 = icmp ult i64 %23, 3
  %26 = sub nsw i64 %22, %24
  %27 = icmp eq i64 %24, 0
  br label %28

28:                                               ; preds = %119, %15
  %29 = phi i64 [ 0, %15 ], [ %120, %119 ]
  br i1 %16, label %119, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds i8*, i8** %2, i64 %29
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds i8*, i8** %1, i64 %29
  %34 = load i8*, i8** %33, align 8
  br label %35

35:                                               ; preds = %30, %112
  %36 = phi i32 [ %117, %112 ], [ %11, %30 ]
  %37 = phi i8* [ %116, %112 ], [ %32, %30 ]
  %38 = phi i8* [ %114, %112 ], [ %34, %30 ]
  br i1 %17, label %39, label %112

39:                                               ; preds = %35
  br i1 %25, label %87, label %40

40:                                               ; preds = %39, %40
  %41 = phi i64 [ %84, %40 ], [ 0, %39 ]
  %42 = phi i8* [ %77, %40 ], [ %38, %39 ]
  %43 = phi i32 [ %83, %40 ], [ 0, %39 ]
  %44 = phi i64 [ %85, %40 ], [ %26, %39 ]
  %45 = getelementptr inbounds i8*, i8** %9, i64 %41
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds i8, i8* %42, i64 1
  %48 = load i8, i8* %42, align 1
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds i8, i8* %46, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add nuw nsw i32 %43, %52
  %54 = or i64 %41, 1
  %55 = getelementptr inbounds i8*, i8** %9, i64 %54
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %42, i64 2
  %58 = load i8, i8* %47, align 1
  %59 = zext i8 %58 to i64
  %60 = getelementptr inbounds i8, i8* %56, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = add nuw nsw i32 %53, %62
  %64 = or i64 %41, 2
  %65 = getelementptr inbounds i8*, i8** %9, i64 %64
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8, i8* %42, i64 3
  %68 = load i8, i8* %57, align 1
  %69 = zext i8 %68 to i64
  %70 = getelementptr inbounds i8, i8* %66, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = add nuw nsw i32 %63, %72
  %74 = or i64 %41, 3
  %75 = getelementptr inbounds i8*, i8** %9, i64 %74
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr inbounds i8, i8* %42, i64 4
  %78 = load i8, i8* %67, align 1
  %79 = zext i8 %78 to i64
  %80 = getelementptr inbounds i8, i8* %76, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = add nuw nsw i32 %73, %82
  %84 = add nuw nsw i64 %41, 4
  %85 = add i64 %44, -4
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %40

87:                                               ; preds = %40, %39
  %88 = phi i32 [ undef, %39 ], [ %83, %40 ]
  %89 = phi i64 [ 0, %39 ], [ %84, %40 ]
  %90 = phi i8* [ %38, %39 ], [ %77, %40 ]
  %91 = phi i32 [ 0, %39 ], [ %83, %40 ]
  br i1 %27, label %109, label %92

92:                                               ; preds = %87, %92
  %93 = phi i64 [ %106, %92 ], [ %89, %87 ]
  %94 = phi i8* [ %99, %92 ], [ %90, %87 ]
  %95 = phi i32 [ %105, %92 ], [ %91, %87 ]
  %96 = phi i64 [ %107, %92 ], [ %24, %87 ]
  %97 = getelementptr inbounds i8*, i8** %9, i64 %93
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds i8, i8* %94, i64 1
  %100 = load i8, i8* %94, align 1
  %101 = zext i8 %100 to i64
  %102 = getelementptr inbounds i8, i8* %98, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = add nuw nsw i32 %95, %104
  %106 = add nuw nsw i64 %93, 1
  %107 = add i64 %96, -1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %92, !llvm.loop !10

109:                                              ; preds = %92, %87
  %110 = phi i32 [ %88, %87 ], [ %105, %92 ]
  %111 = getelementptr i8, i8* %38, i64 %20
  br label %112

112:                                              ; preds = %109, %35
  %113 = phi i32 [ 0, %35 ], [ %110, %109 ]
  %114 = phi i8* [ %38, %35 ], [ %111, %109 ]
  %115 = trunc i32 %113 to i8
  %116 = getelementptr inbounds i8, i8* %37, i64 1
  store i8 %115, i8* %37, align 1
  %117 = add i32 %36, -1
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %35

119:                                              ; preds = %112, %28
  %120 = add nuw nsw i64 %29, 1
  %121 = icmp eq i64 %120, %21
  br i1 %121, label %122, label %28

122:                                              ; preds = %119, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @quantize3_ord_dither(%struct.jpeg_decompress_struct* nocapture readonly, i8** nocapture readonly, i8** nocapture readonly, i32) #3 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %6 = bitcast %struct.jpeg_color_quantizer** %5 to %struct.my_cquantizer**
  %7 = load %struct.my_cquantizer*, %struct.my_cquantizer** %6, align 8
  %8 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 3
  %9 = load i8**, i8*** %8, align 8
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8*, i8** %9, i64 1
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8*, i8** %9, i64 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %16 = load i32, i32* %15, align 8
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %83

18:                                               ; preds = %4
  %19 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 6
  %20 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 7, i64 0
  %21 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 7, i64 1
  %22 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 7, i64 2
  %23 = icmp eq i32 %16, 0
  %24 = zext i32 %3 to i64
  %25 = load i32, i32* %19, align 4
  br label %26

26:                                               ; preds = %78, %18
  %27 = phi i32 [ %25, %18 ], [ %80, %78 ]
  %28 = phi i64 [ 0, %18 ], [ %81, %78 ]
  %29 = load [16 x i32]*, [16 x i32]** %20, align 8
  %30 = sext i32 %27 to i64
  %31 = load [16 x i32]*, [16 x i32]** %21, align 8
  %32 = load [16 x i32]*, [16 x i32]** %22, align 8
  br i1 %23, label %78, label %33

33:                                               ; preds = %26
  %34 = getelementptr inbounds i8*, i8** %2, i64 %28
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds i8*, i8** %1, i64 %28
  %37 = load i8*, i8** %36, align 8
  br label %38

38:                                               ; preds = %33, %38
  %39 = phi i32 [ %76, %38 ], [ %16, %33 ]
  %40 = phi i32 [ %75, %38 ], [ 0, %33 ]
  %41 = phi i8* [ %73, %38 ], [ %35, %33 ]
  %42 = phi i8* [ %63, %38 ], [ %37, %33 ]
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  %44 = load i8, i8* %42, align 1
  %45 = zext i8 %44 to i32
  %46 = zext i32 %40 to i64
  %47 = getelementptr inbounds [16 x i32], [16 x i32]* %29, i64 %30, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = add nsw i32 %48, %45
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %10, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = getelementptr inbounds i8, i8* %42, i64 2
  %54 = load i8, i8* %43, align 1
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [16 x i32], [16 x i32]* %31, i64 %30, i64 %46
  %57 = load i32, i32* %56, align 4
  %58 = add nsw i32 %57, %55
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %12, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = add i8 %61, %52
  %63 = getelementptr inbounds i8, i8* %42, i64 3
  %64 = load i8, i8* %53, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds [16 x i32], [16 x i32]* %32, i64 %30, i64 %46
  %67 = load i32, i32* %66, align 4
  %68 = add nsw i32 %67, %65
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %14, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = add i8 %62, %71
  %73 = getelementptr inbounds i8, i8* %41, i64 1
  store i8 %72, i8* %41, align 1
  %74 = add nuw nsw i32 %40, 1
  %75 = and i32 %74, 15
  %76 = add i32 %39, -1
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %38

78:                                               ; preds = %38, %26
  %79 = add nsw i32 %27, 1
  %80 = and i32 %79, 15
  store i32 %80, i32* %19, align 4
  %81 = add nuw nsw i64 %28, 1
  %82 = icmp eq i64 %81, %24
  br i1 %82, label %83, label %26

83:                                               ; preds = %78, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @quantize_ord_dither(%struct.jpeg_decompress_struct* nocapture readonly, i8** nocapture readonly, i8** nocapture readonly, i32) #0 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %6 = bitcast %struct.jpeg_color_quantizer** %5 to %struct.my_cquantizer**
  %7 = load %struct.my_cquantizer*, %struct.my_cquantizer** %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %3, 0
  br i1 %12, label %13, label %106

13:                                               ; preds = %4
  %14 = zext i32 %11 to i64
  %15 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 6
  %16 = icmp sgt i32 %9, 0
  %17 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 3
  %18 = icmp eq i32 %11, 0
  %19 = sext i32 %9 to i64
  %20 = zext i32 %3 to i64
  %21 = zext i32 %9 to i64
  %22 = and i32 %11, 1
  %23 = icmp eq i32 %11, 1
  %24 = sub i32 %11, %22
  %25 = icmp eq i32 %22, 0
  br label %26

26:                                               ; preds = %101, %13
  %27 = phi i64 [ 0, %13 ], [ %104, %101 ]
  %28 = getelementptr inbounds i8*, i8** %2, i64 %27
  %29 = load i8*, i8** %28, align 8
  tail call void @jzero_far(i8* %29, i64 %14) #5
  %30 = load i32, i32* %15, align 4
  br i1 %16, label %31, label %101

31:                                               ; preds = %26
  %32 = getelementptr inbounds i8*, i8** %1, i64 %27
  %33 = sext i32 %30 to i64
  br label %34

34:                                               ; preds = %98, %31
  %35 = phi i64 [ 0, %31 ], [ %99, %98 ]
  %36 = load i8**, i8*** %17, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 %35
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 7, i64 %35
  %40 = load [16 x i32]*, [16 x i32]** %39, align 8
  br i1 %18, label %98, label %41

41:                                               ; preds = %34
  %42 = load i8*, i8** %28, align 8
  %43 = load i8*, i8** %32, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 %35
  br i1 %23, label %82, label %45

45:                                               ; preds = %41, %45
  %46 = phi i32 [ %79, %45 ], [ 0, %41 ]
  %47 = phi i8* [ %77, %45 ], [ %42, %41 ]
  %48 = phi i8* [ %76, %45 ], [ %44, %41 ]
  %49 = phi i32 [ %80, %45 ], [ %24, %41 ]
  %50 = load i8, i8* %48, align 1
  %51 = zext i8 %50 to i32
  %52 = zext i32 %46 to i64
  %53 = getelementptr inbounds [16 x i32], [16 x i32]* %40, i64 %33, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = add nsw i32 %54, %51
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %38, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = load i8, i8* %47, align 1
  %60 = add i8 %59, %58
  store i8 %60, i8* %47, align 1
  %61 = getelementptr inbounds i8, i8* %48, i64 %19
  %62 = getelementptr inbounds i8, i8* %47, i64 1
  %63 = add nuw nsw i32 %46, 1
  %64 = and i32 %63, 15
  %65 = load i8, i8* %61, align 1
  %66 = zext i8 %65 to i32
  %67 = zext i32 %64 to i64
  %68 = getelementptr inbounds [16 x i32], [16 x i32]* %40, i64 %33, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = add nsw i32 %69, %66
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %38, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = load i8, i8* %62, align 1
  %75 = add i8 %74, %73
  store i8 %75, i8* %62, align 1
  %76 = getelementptr inbounds i8, i8* %61, i64 %19
  %77 = getelementptr inbounds i8, i8* %47, i64 2
  %78 = add nuw nsw i32 %46, 2
  %79 = and i32 %78, 15
  %80 = add i32 %49, -2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %45

82:                                               ; preds = %45, %41
  %83 = phi i32 [ 0, %41 ], [ %79, %45 ]
  %84 = phi i8* [ %42, %41 ], [ %77, %45 ]
  %85 = phi i8* [ %44, %41 ], [ %76, %45 ]
  br i1 %25, label %98, label %86

86:                                               ; preds = %82
  %87 = load i8, i8* %85, align 1
  %88 = zext i8 %87 to i32
  %89 = zext i32 %83 to i64
  %90 = getelementptr inbounds [16 x i32], [16 x i32]* %40, i64 %33, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = add nsw i32 %91, %88
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %38, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = load i8, i8* %84, align 1
  %97 = add i8 %96, %95
  store i8 %97, i8* %84, align 1
  br label %98

98:                                               ; preds = %86, %82, %34
  %99 = add nuw nsw i64 %35, 1
  %100 = icmp eq i64 %99, %21
  br i1 %100, label %101, label %34

101:                                              ; preds = %98, %26
  %102 = add nsw i32 %30, 1
  %103 = and i32 %102, 15
  store i32 %103, i32* %15, align 4
  %104 = add nuw nsw i64 %27, 1
  %105 = icmp eq i64 %104, %20
  br i1 %105, label %106, label %26

106:                                              ; preds = %101, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @quantize_fs_dither(%struct.jpeg_decompress_struct* nocapture readonly, i8** nocapture readonly, i8** nocapture readonly, i32) #0 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %6 = bitcast %struct.jpeg_color_quantizer** %5 to %struct.my_cquantizer**
  %7 = load %struct.my_cquantizer*, %struct.my_cquantizer** %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %13 = load i8*, i8** %12, align 8
  %14 = icmp sgt i32 %3, 0
  br i1 %14, label %15, label %120

15:                                               ; preds = %4
  %16 = zext i32 %11 to i64
  %17 = icmp sgt i32 %9, 0
  %18 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 9
  %19 = add i32 %11, -1
  %20 = mul i32 %19, %9
  %21 = zext i32 %20 to i64
  %22 = zext i32 %19 to i64
  %23 = sub nsw i32 0, %9
  %24 = add i32 %11, 1
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 3
  %27 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i32 %3 to i64
  %30 = zext i32 %9 to i64
  br label %31

31:                                               ; preds = %114, %15
  %32 = phi i64 [ 0, %15 ], [ %118, %114 ]
  %33 = getelementptr inbounds i8*, i8** %2, i64 %32
  %34 = load i8*, i8** %33, align 8
  tail call void @jzero_far(i8* %34, i64 %16) #5
  br i1 %17, label %35, label %114

35:                                               ; preds = %31
  %36 = getelementptr inbounds i8*, i8** %1, i64 %32
  br label %37

37:                                               ; preds = %108, %35
  %38 = phi i64 [ 0, %35 ], [ %112, %108 ]
  %39 = load i8*, i8** %36, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %38
  %41 = load i8*, i8** %33, align 8
  %42 = load i32, i32* %18, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %50, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds i8, i8* %40, i64 %21
  %46 = getelementptr inbounds i8, i8* %41, i64 %22
  %47 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 8, i64 %38
  %48 = load i16*, i16** %47, align 8
  %49 = getelementptr inbounds i16, i16* %48, i64 %25
  br label %53

50:                                               ; preds = %37
  %51 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 8, i64 %38
  %52 = load i16*, i16** %51, align 8
  br label %53

53:                                               ; preds = %50, %44
  %54 = phi i16* [ %49, %44 ], [ %52, %50 ]
  %55 = phi i8* [ %45, %44 ], [ %40, %50 ]
  %56 = phi i8* [ %46, %44 ], [ %41, %50 ]
  %57 = phi i64 [ -1, %44 ], [ 1, %50 ]
  %58 = phi i32 [ %23, %44 ], [ %9, %50 ]
  %59 = load i8**, i8*** %26, align 8
  %60 = getelementptr inbounds i8*, i8** %59, i64 %38
  %61 = load i8*, i8** %60, align 8
  %62 = load i8**, i8*** %27, align 8
  %63 = getelementptr inbounds i8*, i8** %62, i64 %38
  %64 = load i8*, i8** %63, align 8
  br i1 %28, label %108, label %65

65:                                               ; preds = %53
  %66 = sext i32 %58 to i64
  br label %67

67:                                               ; preds = %65, %67
  %68 = phi i32 [ %11, %65 ], [ %106, %67 ]
  %69 = phi i8* [ %56, %65 ], [ %105, %67 ]
  %70 = phi i8* [ %55, %65 ], [ %104, %67 ]
  %71 = phi i16* [ %54, %65 ], [ %75, %67 ]
  %72 = phi i32 [ 0, %65 ], [ %102, %67 ]
  %73 = phi i32 [ 0, %65 ], [ %97, %67 ]
  %74 = phi i32 [ 0, %65 ], [ %103, %67 ]
  %75 = getelementptr inbounds i16, i16* %71, i64 %57
  %76 = load i16, i16* %75, align 2
  %77 = sext i16 %76 to i32
  %78 = add nsw i32 %74, 8
  %79 = add nsw i32 %78, %77
  %80 = ashr i32 %79, 4
  %81 = load i8, i8* %70, align 1
  %82 = zext i8 %81 to i32
  %83 = add nsw i32 %80, %82
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %13, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = zext i8 %86 to i64
  %89 = getelementptr inbounds i8, i8* %61, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = load i8, i8* %69, align 1
  %92 = add i8 %91, %90
  store i8 %92, i8* %69, align 1
  %93 = zext i8 %90 to i64
  %94 = getelementptr inbounds i8, i8* %64, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = sub nsw i32 %87, %96
  %98 = mul nsw i32 %97, 3
  %99 = add nsw i32 %98, %72
  %100 = trunc i32 %99 to i16
  store i16 %100, i16* %71, align 2
  %101 = mul nsw i32 %97, 5
  %102 = add nsw i32 %101, %73
  %103 = mul nsw i32 %97, 7
  %104 = getelementptr inbounds i8, i8* %70, i64 %66
  %105 = getelementptr inbounds i8, i8* %69, i64 %57
  %106 = add i32 %68, -1
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %67

108:                                              ; preds = %67, %53
  %109 = phi i32 [ 0, %53 ], [ %102, %67 ]
  %110 = phi i16* [ %54, %53 ], [ %75, %67 ]
  %111 = trunc i32 %109 to i16
  store i16 %111, i16* %110, align 2
  %112 = add nuw nsw i64 %38, 1
  %113 = icmp eq i64 %112, %30
  br i1 %113, label %114, label %37

114:                                              ; preds = %108, %31
  %115 = load i32, i32* %18, align 8
  %116 = icmp eq i32 %115, 0
  %117 = zext i1 %116 to i32
  store i32 %117, i32* %18, align 8
  %118 = add nuw nsw i64 %32, 1
  %119 = icmp eq i64 %118, %29
  br i1 %119, label %120, label %31

120:                                              ; preds = %114, %4
  ret void
}

declare void @jzero_far(i8*, i64) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !8, !5}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
