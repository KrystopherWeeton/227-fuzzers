; ModuleID = '../../third_party/opus/src/silk/x86/NSQ_del_dec_sse4_1.c'
source_filename = "../../third_party/opus/src/silk/x86/NSQ_del_dec_sse4_1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_encoder_state = type { [2 x i32], i32, i32, %struct.silk_LP_state, %struct.silk_VAD_state, %struct.silk_nsq_state, [16 x i16], i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.silk_NLSF_CB_struct*, [4 x i32], i32, i32, [3 x i8], i8, [3 x i32], %struct.SideInfoIndices, [320 x i8], i32, [322 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct._silk_resampler_state_struct, i32, i32, i32, i32, i32, i32, [3 x %struct.SideInfoIndices], [3 x [320 x i8]] }
%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }
%struct.silk_VAD_state = type { [2 x i32], [2 x i32], [2 x i32], [4 x i32], [4 x i32], i16, [4 x i32], [4 x i32], [4 x i32], i32 }
%struct.silk_nsq_state = type { [640 x i16], [640 x i32], [96 x i32], [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }
%struct.NSQ_del_dec_struct = type { [96 x i32], [40 x i32], [40 x i32], [40 x i32], [40 x i32], [40 x i32], [24 x i32], i32, i32, i32, i32 }
%struct.NSQ_sample_struct = type { i32, i32, i32, i32, i32, i32 }

@silk_Quantization_Offsets_Q10 = external local_unnamed_addr constant [2 x [2 x i16]], align 2
@.str = private unnamed_addr constant [32 x i8] c"assertion failed: start_idx > 0\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"../../third_party/opus/src/silk/x86/NSQ_del_dec_sse4_1.c\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"assertion failed: nStatesDelayedDecision > 0\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_NSQ_del_dec_sse4_1(%struct.silk_encoder_state* nocapture readonly, %struct.silk_nsq_state*, %struct.SideInfoIndices* nocapture, i32* nocapture readonly, i8* nocapture, i16*, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %16 = alloca i32, align 4
  %17 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #6
  store i32 -1431655766, i32* %16, align 4
  %18 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 6
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 32
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = mul nsw i64 %22, 1296
  %24 = alloca %struct.NSQ_del_dec_struct, i64 %22, align 16
  %25 = bitcast %struct.NSQ_del_dec_struct* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 %23, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 0, i64 %23, i1 false)
  %26 = icmp sgt i32 %21, 0
  br i1 %26, label %27, label %60

27:                                               ; preds = %15
  %28 = getelementptr inbounds %struct.SideInfoIndices, %struct.SideInfoIndices* %2, i64 0, i32 10
  %29 = load i8, i8* %28, align 2
  %30 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 4
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 23
  %33 = load i32, i32* %32, align 8
  %34 = add nsw i32 %33, -1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 1, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 0
  %39 = bitcast i32* %38 to i8*
  %40 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 0
  %41 = bitcast i32* %40 to i8*
  %42 = zext i8 %29 to i64
  %43 = zext i32 %21 to i64
  br label %44

44:                                               ; preds = %44, %27
  %45 = phi i64 [ 0, %27 ], [ %58, %44 ]
  %46 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %45
  %47 = add nuw nsw i64 %45, %42
  %48 = trunc i64 %47 to i32
  %49 = and i32 %48, 3
  %50 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %45, i32 8
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %45, i32 9
  store i32 %49, i32* %51, align 8
  %52 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %45, i32 10
  store i32 0, i32* %52, align 4
  %53 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %45, i32 7
  store i32 %31, i32* %53, align 16
  %54 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %45, i32 5, i64 0
  store i32 %37, i32* %54, align 16
  %55 = bitcast %struct.NSQ_del_dec_struct* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %55, i8* align 4 %39, i64 64, i1 false)
  %56 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %45, i32 6, i64 0
  %57 = bitcast i32* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %57, i8* align 4 %41, i64 96, i1 false)
  %58 = add nuw nsw i64 %45, 1
  %59 = icmp eq i64 %58, %43
  br i1 %59, label %60, label %44

60:                                               ; preds = %44, %15
  %61 = getelementptr inbounds %struct.SideInfoIndices, %struct.SideInfoIndices* %2, i64 0, i32 5
  %62 = load i8, i8* %61, align 1
  %63 = ashr i8 %62, 1
  %64 = sext i8 %63 to i64
  %65 = getelementptr inbounds %struct.SideInfoIndices, %struct.SideInfoIndices* %2, i64 0, i32 6
  %66 = load i8, i8* %65, align 2
  %67 = sext i8 %66 to i64
  %68 = getelementptr inbounds [2 x [2 x i16]], [2 x [2 x i16]]* @silk_Quantization_Offsets_Q10, i64 0, i64 %64, i64 %67
  %69 = load i16, i16* %68, align 2
  %70 = sext i16 %69 to i32
  store i32 0, i32* %16, align 4
  %71 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 22
  %72 = load i32, i32* %71, align 4
  %73 = icmp slt i32 %72, 40
  %74 = select i1 %73, i32 %72, i32 40
  %75 = icmp eq i8 %62, 2
  br i1 %75, label %76, label %173

76:                                               ; preds = %60
  %77 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 20
  %78 = load i32, i32* %77, align 4
  %79 = icmp sgt i32 %78, 0
  br i1 %79, label %80, label %179

80:                                               ; preds = %76
  %81 = sext i32 %78 to i64
  %82 = icmp ult i32 %78, 8
  br i1 %82, label %160, label %83

83:                                               ; preds = %80
  %84 = and i64 %81, -8
  %85 = insertelement <4 x i32> undef, i32 %74, i32 0
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> zeroinitializer
  %87 = add nsw i64 %84, -8
  %88 = lshr exact i64 %87, 3
  %89 = add nuw nsw i64 %88, 1
  %90 = and i64 %89, 1
  %91 = icmp eq i64 %87, 0
  br i1 %91, label %127, label %92

92:                                               ; preds = %83
  %93 = sub nuw nsw i64 %89, %90
  br label %94

94:                                               ; preds = %94, %92
  %95 = phi i64 [ 0, %92 ], [ %124, %94 ]
  %96 = phi <4 x i32> [ %86, %92 ], [ %122, %94 ]
  %97 = phi <4 x i32> [ %86, %92 ], [ %123, %94 ]
  %98 = phi i64 [ %93, %92 ], [ %125, %94 ]
  %99 = getelementptr inbounds i32, i32* %12, i64 %95
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4
  %102 = getelementptr inbounds i32, i32* %99, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4
  %105 = add nsw <4 x i32> %101, <i32 -3, i32 -3, i32 -3, i32 -3>
  %106 = add nsw <4 x i32> %104, <i32 -3, i32 -3, i32 -3, i32 -3>
  %107 = icmp slt <4 x i32> %96, %105
  %108 = icmp slt <4 x i32> %97, %106
  %109 = select <4 x i1> %107, <4 x i32> %96, <4 x i32> %105
  %110 = select <4 x i1> %108, <4 x i32> %97, <4 x i32> %106
  %111 = or i64 %95, 8
  %112 = getelementptr inbounds i32, i32* %12, i64 %111
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4
  %115 = getelementptr inbounds i32, i32* %112, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 4
  %118 = add nsw <4 x i32> %114, <i32 -3, i32 -3, i32 -3, i32 -3>
  %119 = add nsw <4 x i32> %117, <i32 -3, i32 -3, i32 -3, i32 -3>
  %120 = icmp slt <4 x i32> %109, %118
  %121 = icmp slt <4 x i32> %110, %119
  %122 = select <4 x i1> %120, <4 x i32> %109, <4 x i32> %118
  %123 = select <4 x i1> %121, <4 x i32> %110, <4 x i32> %119
  %124 = add i64 %95, 16
  %125 = add i64 %98, -2
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %127, label %94, !llvm.loop !2

127:                                              ; preds = %94, %83
  %128 = phi <4 x i32> [ undef, %83 ], [ %122, %94 ]
  %129 = phi <4 x i32> [ undef, %83 ], [ %123, %94 ]
  %130 = phi i64 [ 0, %83 ], [ %124, %94 ]
  %131 = phi <4 x i32> [ %86, %83 ], [ %122, %94 ]
  %132 = phi <4 x i32> [ %86, %83 ], [ %123, %94 ]
  %133 = icmp eq i64 %90, 0
  br i1 %133, label %147, label %134

134:                                              ; preds = %127
  %135 = getelementptr inbounds i32, i32* %12, i64 %130
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 4
  %138 = getelementptr inbounds i32, i32* %135, i64 4
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4
  %141 = add nsw <4 x i32> %137, <i32 -3, i32 -3, i32 -3, i32 -3>
  %142 = add nsw <4 x i32> %140, <i32 -3, i32 -3, i32 -3, i32 -3>
  %143 = icmp slt <4 x i32> %132, %142
  %144 = select <4 x i1> %143, <4 x i32> %132, <4 x i32> %142
  %145 = icmp slt <4 x i32> %131, %141
  %146 = select <4 x i1> %145, <4 x i32> %131, <4 x i32> %141
  br label %147

147:                                              ; preds = %127, %134
  %148 = phi <4 x i32> [ %128, %127 ], [ %146, %134 ]
  %149 = phi <4 x i32> [ %129, %127 ], [ %144, %134 ]
  %150 = icmp slt <4 x i32> %148, %149
  %151 = select <4 x i1> %150, <4 x i32> %148, <4 x i32> %149
  %152 = shufflevector <4 x i32> %151, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %153 = icmp slt <4 x i32> %151, %152
  %154 = select <4 x i1> %153, <4 x i32> %151, <4 x i32> %152
  %155 = shufflevector <4 x i32> %154, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %156 = icmp slt <4 x i32> %154, %155
  %157 = select <4 x i1> %156, <4 x i32> %154, <4 x i32> %155
  %158 = extractelement <4 x i32> %157, i32 0
  %159 = icmp eq i64 %84, %81
  br i1 %159, label %179, label %160

160:                                              ; preds = %147, %80
  %161 = phi i64 [ 0, %80 ], [ %84, %147 ]
  %162 = phi i32 [ %74, %80 ], [ %158, %147 ]
  br label %163

163:                                              ; preds = %160, %163
  %164 = phi i64 [ %171, %163 ], [ %161, %160 ]
  %165 = phi i32 [ %170, %163 ], [ %162, %160 ]
  %166 = getelementptr inbounds i32, i32* %12, i64 %164
  %167 = load i32, i32* %166, align 4
  %168 = add nsw i32 %167, -3
  %169 = icmp slt i32 %165, %168
  %170 = select i1 %169, i32 %165, i32 %168
  %171 = add nuw nsw i64 %164, 1
  %172 = icmp slt i64 %171, %81
  br i1 %172, label %163, label %179, !llvm.loop !4

173:                                              ; preds = %60
  %174 = icmp sgt i32 %19, 0
  br i1 %174, label %175, label %179

175:                                              ; preds = %173
  %176 = add nsw i32 %19, -3
  %177 = icmp slt i32 %74, %176
  %178 = select i1 %177, i32 %74, i32 %176
  br label %179

179:                                              ; preds = %163, %147, %76, %173, %175
  %180 = phi i32 [ %178, %175 ], [ %74, %173 ], [ %74, %76 ], [ %158, %147 ], [ %170, %163 ]
  %181 = getelementptr inbounds %struct.SideInfoIndices, %struct.SideInfoIndices* %2, i64 0, i32 7
  %182 = load i8, i8* %181, align 1
  %183 = icmp ne i8 %182, 4
  %184 = zext i1 %183 to i32
  %185 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 23
  %186 = load i32, i32* %185, align 8
  %187 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 21
  %188 = load i32, i32* %187, align 8
  %189 = add nsw i32 %188, %186
  %190 = sext i32 %189 to i64
  %191 = shl nsw i64 %190, 2
  %192 = alloca i32, i64 %190, align 16
  %193 = bitcast i32* %192 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %193, i8 -86, i64 %191, i1 false)
  %194 = shl nsw i64 %190, 1
  %195 = alloca i16, i64 %190, align 16
  %196 = bitcast i16* %195 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %196, i8 -86, i64 %194, i1 false)
  %197 = sext i32 %72 to i64
  %198 = shl nsw i64 %197, 2
  %199 = alloca i32, i64 %197, align 16
  %200 = bitcast i32* %199 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %200, i8 -86, i64 %198, i1 false)
  %201 = alloca [160 x i8], align 16
  %202 = getelementptr inbounds [160 x i8], [160 x i8]* %201, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %202, i8 -86, i64 160, i1 false)
  %203 = bitcast [160 x i8]* %201 to i32*
  %204 = sext i32 %186 to i64
  %205 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 0, i64 %204
  %206 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 8
  store i32 %186, i32* %206, align 4
  %207 = load i32, i32* %185, align 8
  %208 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 7
  store i32 %207, i32* %208, align 4
  %209 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 20
  %210 = load i32, i32* %209, align 4
  %211 = icmp sgt i32 %210, 0
  br i1 %211, label %212, label %955

212:                                              ; preds = %179
  %213 = xor i32 %184, 1
  %214 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 11
  %215 = shl nuw nsw i32 %184, 1
  %216 = xor i32 %215, 3
  %217 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 0, i32 10
  %218 = icmp sgt i32 %180, 0
  %219 = getelementptr inbounds i32, i32* %11, i64 1
  %220 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 35
  %221 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 57
  %222 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 10
  %223 = zext i32 %14 to i64
  %224 = shl i64 %223, 48
  %225 = ashr exact i64 %224, 48
  %226 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 34
  %227 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 43
  %228 = sext i32 %180 to i64
  %229 = zext i32 %180 to i64
  br label %230

230:                                              ; preds = %212, %932
  %231 = phi i64 [ 0, %212 ], [ %951, %932 ]
  %232 = phi i16* [ %205, %212 ], [ %950, %932 ]
  %233 = phi i32 [ 0, %212 ], [ %941, %932 ]
  %234 = phi i32 [ %19, %212 ], [ %435, %932 ]
  %235 = phi i32* [ %3, %212 ], [ %948, %932 ]
  %236 = phi i8* [ %4, %212 ], [ %949, %932 ]
  %237 = trunc i64 %231 to i32
  %238 = lshr i32 %237, 1
  %239 = or i32 %238, %213
  %240 = shl nsw i32 %239, 4
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds i16, i16* %5, i64 %241
  %243 = mul i64 %231, 5
  %244 = and i64 %243, 4294967295
  %245 = getelementptr inbounds i16, i16* %6, i64 %244
  %246 = mul i64 %231, 24
  %247 = and i64 %246, 4294967288
  %248 = getelementptr inbounds i16, i16* %7, i64 %247
  %249 = getelementptr inbounds i32, i32* %8, i64 %231
  %250 = load i32, i32* %249, align 4
  %251 = ashr i32 %250, 2
  %252 = lshr i32 %250, 1
  %253 = shl i32 %252, 16
  %254 = or i32 %253, %251
  store i32 0, i32* %214, align 4
  %255 = load i8, i8* %61, align 1
  %256 = icmp eq i8 %255, 2
  br i1 %256, label %257, label %432

257:                                              ; preds = %230
  %258 = getelementptr inbounds i32, i32* %12, i64 %231
  %259 = load i32, i32* %258, align 4
  %260 = and i32 %216, %237
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %262, label %432

262:                                              ; preds = %257
  %263 = icmp eq i64 %231, 2
  br i1 %263, label %264, label %411

264:                                              ; preds = %262
  %265 = load i32, i32* %20, align 4
  %266 = icmp sgt i32 %265, 1
  br i1 %266, label %267, label %296

267:                                              ; preds = %264
  %268 = load i32, i32* %217, align 4
  %269 = sext i32 %265 to i64
  %270 = add nsw i64 %269, -1
  %271 = add nsw i64 %269, -2
  %272 = and i64 %270, 3
  %273 = icmp ult i64 %271, 3
  br i1 %273, label %276, label %274

274:                                              ; preds = %267
  %275 = sub nsw i64 %270, %272
  br label %306

276:                                              ; preds = %306, %267
  %277 = phi i32 [ undef, %267 ], [ %336, %306 ]
  %278 = phi i64 [ 1, %267 ], [ %338, %306 ]
  %279 = phi i32 [ %268, %267 ], [ %337, %306 ]
  %280 = phi i32 [ 0, %267 ], [ %336, %306 ]
  %281 = icmp eq i64 %272, 0
  br i1 %281, label %296, label %282

282:                                              ; preds = %276, %282
  %283 = phi i64 [ %293, %282 ], [ %278, %276 ]
  %284 = phi i32 [ %292, %282 ], [ %279, %276 ]
  %285 = phi i32 [ %291, %282 ], [ %280, %276 ]
  %286 = phi i64 [ %294, %282 ], [ %272, %276 ]
  %287 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %283, i32 10
  %288 = load i32, i32* %287, align 4
  %289 = icmp slt i32 %288, %284
  %290 = trunc i64 %283 to i32
  %291 = select i1 %289, i32 %290, i32 %285
  %292 = select i1 %289, i32 %288, i32 %284
  %293 = add nuw nsw i64 %283, 1
  %294 = add i64 %286, -1
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %296, label %282, !llvm.loop !6

296:                                              ; preds = %276, %282, %264
  %297 = phi i32 [ 0, %264 ], [ %277, %276 ], [ %291, %282 ]
  %298 = icmp sgt i32 %265, 0
  br i1 %298, label %299, label %361

299:                                              ; preds = %296
  %300 = zext i32 %297 to i64
  %301 = zext i32 %265 to i64
  %302 = and i64 %301, 1
  %303 = icmp eq i32 %265, 1
  br i1 %303, label %352, label %304

304:                                              ; preds = %299
  %305 = sub nsw i64 %301, %302
  br label %341

306:                                              ; preds = %306, %274
  %307 = phi i64 [ 1, %274 ], [ %338, %306 ]
  %308 = phi i32 [ %268, %274 ], [ %337, %306 ]
  %309 = phi i32 [ 0, %274 ], [ %336, %306 ]
  %310 = phi i64 [ %275, %274 ], [ %339, %306 ]
  %311 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %307, i32 10
  %312 = load i32, i32* %311, align 4
  %313 = icmp slt i32 %312, %308
  %314 = trunc i64 %307 to i32
  %315 = select i1 %313, i32 %314, i32 %309
  %316 = select i1 %313, i32 %312, i32 %308
  %317 = add nuw nsw i64 %307, 1
  %318 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %317, i32 10
  %319 = load i32, i32* %318, align 4
  %320 = icmp slt i32 %319, %316
  %321 = trunc i64 %317 to i32
  %322 = select i1 %320, i32 %321, i32 %315
  %323 = select i1 %320, i32 %319, i32 %316
  %324 = add nuw nsw i64 %307, 2
  %325 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %324, i32 10
  %326 = load i32, i32* %325, align 4
  %327 = icmp slt i32 %326, %323
  %328 = trunc i64 %324 to i32
  %329 = select i1 %327, i32 %328, i32 %322
  %330 = select i1 %327, i32 %326, i32 %323
  %331 = add nuw nsw i64 %307, 3
  %332 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %331, i32 10
  %333 = load i32, i32* %332, align 4
  %334 = icmp slt i32 %333, %330
  %335 = trunc i64 %331 to i32
  %336 = select i1 %334, i32 %335, i32 %329
  %337 = select i1 %334, i32 %333, i32 %330
  %338 = add nuw nsw i64 %307, 4
  %339 = add i64 %310, -4
  %340 = icmp eq i64 %339, 0
  br i1 %340, label %276, label %306

341:                                              ; preds = %1130, %304
  %342 = phi i64 [ 0, %304 ], [ %1131, %1130 ]
  %343 = phi i64 [ %305, %304 ], [ %1132, %1130 ]
  %344 = icmp eq i64 %342, %300
  br i1 %344, label %349, label %345

345:                                              ; preds = %341
  %346 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %342, i32 10
  %347 = load i32, i32* %346, align 4
  %348 = add nsw i32 %347, 134217727
  store i32 %348, i32* %346, align 4
  br label %349

349:                                              ; preds = %341, %345
  %350 = or i64 %342, 1
  %351 = icmp eq i64 %350, %300
  br i1 %351, label %1130, label %1126

352:                                              ; preds = %1130, %299
  %353 = phi i64 [ 0, %299 ], [ %1131, %1130 ]
  %354 = icmp eq i64 %302, 0
  %355 = icmp eq i64 %353, %300
  %356 = or i1 %354, %355
  br i1 %356, label %361, label %357

357:                                              ; preds = %352
  %358 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %353, i32 10
  %359 = load i32, i32* %358, align 4
  %360 = add nsw i32 %359, 134217727
  store i32 %360, i32* %358, align 4
  br label %361

361:                                              ; preds = %352, %357, %296
  %362 = sext i32 %297 to i64
  br i1 %218, label %363, label %411

363:                                              ; preds = %361
  %364 = load i32, i32* %16, align 4
  %365 = add nsw i32 %364, %180
  br label %366

366:                                              ; preds = %366, %363
  %367 = phi i64 [ 0, %363 ], [ %408, %366 ]
  %368 = phi i32 [ %365, %363 ], [ %374, %366 ]
  %369 = phi i32 [ 0, %363 ], [ %409, %366 ]
  %370 = add nsw i32 %368, -1
  %371 = srem i32 %370, 40
  %372 = icmp slt i32 %371, 0
  %373 = add nsw i32 %371, 40
  %374 = select i1 %372, i32 %373, i32 %371
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %362, i32 2, i64 %375
  %377 = load i32, i32* %376, align 4
  %378 = lshr i32 %377, 9
  %379 = add nuw nsw i32 %378, 1
  %380 = lshr i32 %379, 1
  %381 = trunc i32 %380 to i8
  %382 = sub nsw i64 %367, %228
  %383 = getelementptr inbounds i8, i8* %236, i64 %382
  store i8 %381, i8* %383, align 1
  %384 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %362, i32 3, i64 %375
  %385 = load i32, i32* %384, align 4
  %386 = sext i32 %385 to i64
  %387 = load i32, i32* %219, align 4
  %388 = sext i32 %387 to i64
  %389 = mul nsw i64 %388, %386
  %390 = lshr i64 %389, 16
  %391 = trunc i64 %390 to i32
  %392 = ashr i32 %391, 13
  %393 = add nsw i32 %392, 1
  %394 = lshr i32 %393, 1
  %395 = icmp sgt i32 %391, 536862719
  %396 = icmp slt i32 %393, -65536
  %397 = select i1 %396, i32 32768, i32 %394
  %398 = select i1 %395, i32 32767, i32 %397
  %399 = trunc i32 %398 to i16
  %400 = getelementptr inbounds i16, i16* %232, i64 %382
  store i16 %399, i16* %400, align 2
  %401 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %362, i32 5, i64 %375
  %402 = load i32, i32* %401, align 4
  %403 = load i32, i32* %206, align 4
  %404 = sub i32 %369, %180
  %405 = add i32 %404, %403
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 1, i64 %406
  store i32 %402, i32* %407, align 4
  %408 = add nuw nsw i64 %367, 1
  %409 = add nuw nsw i32 %369, 1
  %410 = icmp eq i64 %408, %229
  br i1 %410, label %411, label %366

411:                                              ; preds = %366, %361, %262
  %412 = phi i32 [ %233, %262 ], [ 0, %361 ], [ 0, %366 ]
  %413 = load i32, i32* %185, align 8
  %414 = load i32, i32* %220, align 8
  %415 = sub i32 -2, %259
  %416 = add i32 %415, %413
  %417 = sub i32 %416, %414
  %418 = icmp sgt i32 %417, 0
  br i1 %418, label %420, label %419

419:                                              ; preds = %411
  call void @celt_fatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 250) #7
  unreachable

420:                                              ; preds = %411
  %421 = sext i32 %417 to i64
  %422 = getelementptr inbounds i16, i16* %195, i64 %421
  %423 = load i32, i32* %71, align 4
  %424 = mul nsw i32 %423, %237
  %425 = add nsw i32 %424, %417
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 0, i64 %426
  %428 = sub nsw i32 %413, %417
  %429 = load i32, i32* %221, align 4
  call void @silk_LPC_analysis_filter(i16* %422, i16* %427, i16* %242, i32 %428, i32 %414, i32 %429) #6
  %430 = load i32, i32* %185, align 8
  store i32 %430, i32* %208, align 4
  store i32 1, i32* %214, align 4
  %431 = load i8, i8* %61, align 1
  br label %432

432:                                              ; preds = %257, %420, %230
  %433 = phi i32 [ 1, %420 ], [ 0, %257 ], [ 0, %230 ]
  %434 = phi i8 [ %431, %420 ], [ 2, %257 ], [ %255, %230 ]
  %435 = phi i32 [ %259, %420 ], [ %259, %257 ], [ %234, %230 ]
  %436 = phi i32 [ %412, %420 ], [ %233, %257 ], [ %233, %230 ]
  %437 = load i32, i32* %20, align 4
  %438 = getelementptr inbounds i32, i32* %12, i64 %231
  %439 = load i32, i32* %438, align 4
  %440 = getelementptr inbounds i32, i32* %11, i64 %231
  %441 = load i32, i32* %440, align 4
  %442 = icmp sgt i32 %441, 1
  %443 = select i1 %442, i32 %441, i32 1
  %444 = call i32 @llvm.ctlz.i32(i32 %443, i1 false) #6, !range !8
  %445 = add nsw i32 %444, -1
  %446 = shl i32 %443, %445
  %447 = ashr i32 %446, 16
  %448 = sdiv i32 536870911, %447
  %449 = shl i32 %448, 16
  %450 = sext i32 %446 to i64
  %451 = zext i32 %448 to i64
  %452 = shl i64 %451, 48
  %453 = ashr exact i64 %452, 29
  %454 = mul i64 %453, %450
  %455 = and i64 %454, -34359738368
  %456 = sub i64 0, %455
  %457 = ashr exact i64 %456, 32
  %458 = sext i32 %448 to i64
  %459 = mul nsw i64 %457, %458
  %460 = lshr i64 %459, 16
  %461 = trunc i64 %460 to i32
  %462 = add i32 %449, %461
  %463 = icmp ult i32 %443, 131072
  br i1 %463, label %464, label %482

464:                                              ; preds = %432
  %465 = add nsw i32 %444, -15
  %466 = ashr i32 -2147483648, %465
  %467 = lshr i32 2147483647, %465
  %468 = icmp sgt i32 %466, %467
  br i1 %468, label %469, label %474

469:                                              ; preds = %464
  %470 = icmp sgt i32 %462, %466
  br i1 %470, label %479, label %471

471:                                              ; preds = %469
  %472 = icmp slt i32 %462, %467
  %473 = select i1 %472, i32 %467, i32 %462
  br label %479

474:                                              ; preds = %464
  %475 = icmp sgt i32 %462, %467
  br i1 %475, label %479, label %476

476:                                              ; preds = %474
  %477 = icmp slt i32 %462, %466
  %478 = select i1 %477, i32 %466, i32 %462
  br label %479

479:                                              ; preds = %476, %474, %471, %469
  %480 = phi i32 [ %466, %469 ], [ %473, %471 ], [ %467, %474 ], [ %478, %476 ]
  %481 = shl i32 %480, %465
  br label %485

482:                                              ; preds = %432
  %483 = sub nsw i32 15, %444
  %484 = ashr i32 %462, %483
  br label %485

485:                                              ; preds = %482, %479
  %486 = phi i32 [ %481, %479 ], [ %484, %482 ]
  %487 = load i32, i32* %222, align 4
  %488 = icmp eq i32 %441, %487
  br i1 %488, label %547, label %489

489:                                              ; preds = %485
  %490 = icmp slt i32 %487, 0
  %491 = sub nsw i32 0, %487
  %492 = select i1 %490, i32 %491, i32 %487
  %493 = call i32 @llvm.ctlz.i32(i32 %492, i1 false) #6, !range !8
  %494 = add nsw i32 %493, -1
  %495 = shl i32 %487, %494
  %496 = icmp slt i32 %441, 0
  %497 = sub nsw i32 0, %441
  %498 = select i1 %496, i32 %497, i32 %441
  %499 = call i32 @llvm.ctlz.i32(i32 %498, i1 false) #6, !range !8
  %500 = add nsw i32 %499, -1
  %501 = shl i32 %441, %500
  %502 = ashr i32 %501, 16
  %503 = sdiv i32 536870911, %502
  %504 = sext i32 %495 to i64
  %505 = zext i32 %503 to i64
  %506 = shl i64 %505, 48
  %507 = ashr exact i64 %506, 48
  %508 = mul nsw i64 %507, %504
  %509 = sext i32 %501 to i64
  %510 = ashr i64 %508, 16
  %511 = mul nsw i64 %510, %509
  %512 = lshr i64 %511, 29
  %513 = trunc i64 %512 to i32
  %514 = and i32 %513, -8
  %515 = sub i32 %495, %514
  %516 = sext i32 %515 to i64
  %517 = mul nsw i64 %507, %516
  %518 = lshr i64 %517, 16
  %519 = add nsw i64 %518, %510
  %520 = trunc i64 %519 to i32
  %521 = sub nsw i32 29, %499
  %522 = add nsw i32 %493, %521
  %523 = add nsw i32 %522, -16
  %524 = icmp slt i32 %523, 0
  br i1 %524, label %525, label %543

525:                                              ; preds = %489
  %526 = sub nsw i32 16, %522
  %527 = ashr i32 -2147483648, %526
  %528 = lshr i32 2147483647, %526
  %529 = icmp sgt i32 %527, %528
  br i1 %529, label %530, label %535

530:                                              ; preds = %525
  %531 = icmp slt i32 %527, %520
  br i1 %531, label %540, label %532

532:                                              ; preds = %530
  %533 = icmp sgt i32 %528, %520
  %534 = select i1 %533, i32 %528, i32 %520
  br label %540

535:                                              ; preds = %525
  %536 = icmp slt i32 %528, %520
  br i1 %536, label %540, label %537

537:                                              ; preds = %535
  %538 = icmp sgt i32 %527, %520
  %539 = select i1 %538, i32 %527, i32 %520
  br label %540

540:                                              ; preds = %537, %535, %532, %530
  %541 = phi i32 [ %527, %530 ], [ %534, %532 ], [ %528, %535 ], [ %539, %537 ]
  %542 = shl i32 %541, %526
  br label %547

543:                                              ; preds = %489
  %544 = icmp slt i32 %523, 32
  %545 = ashr i32 %520, %523
  %546 = select i1 %544, i32 %545, i32 0
  br label %547

547:                                              ; preds = %543, %540, %485
  %548 = phi i32 [ 65536, %485 ], [ %542, %540 ], [ %546, %543 ]
  %549 = ashr i32 %486, 7
  %550 = add nsw i32 %549, 1
  %551 = ashr i32 %550, 1
  %552 = load i32, i32* %71, align 4
  %553 = icmp sgt i32 %552, 3
  br i1 %553, label %554, label %564

554:                                              ; preds = %547
  %555 = insertelement <4 x i32> undef, i32 %551, i32 0
  %556 = shufflevector <4 x i32> %555, <4 x i32> undef, <4 x i32> zeroinitializer
  %557 = bitcast <4 x i32> %556 to <2 x i64>
  %558 = shl <2 x i64> %557, <i64 32, i64 32>
  %559 = ashr exact <2 x i64> %558, <i64 32, i64 32>
  %560 = add nsw i32 %552, -3
  %561 = sext i32 %560 to i64
  br label %571

562:                                              ; preds = %571
  %563 = trunc i64 %592 to i32
  br label %564

564:                                              ; preds = %562, %547
  %565 = phi i32 [ 0, %547 ], [ %563, %562 ]
  %566 = icmp slt i32 %565, %552
  br i1 %566, label %567, label %605

567:                                              ; preds = %564
  %568 = sext i32 %551 to i64
  %569 = zext i32 %565 to i64
  %570 = sext i32 %552 to i64
  br label %594

571:                                              ; preds = %571, %554
  %572 = phi i64 [ 0, %554 ], [ %592, %571 ]
  %573 = getelementptr inbounds i32, i32* %235, i64 %572
  %574 = bitcast i32* %573 to <2 x i64>*
  %575 = load <2 x i64>, <2 x i64>* %574, align 1
  %576 = bitcast <2 x i64> %575 to <4 x i32>
  %577 = shufflevector <4 x i32> %576, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %578 = bitcast <4 x i32> %577 to <2 x i64>
  %579 = shl <2 x i64> %575, <i64 32, i64 32>
  %580 = ashr exact <2 x i64> %579, <i64 32, i64 32>
  %581 = mul nsw <2 x i64> %580, %559
  %582 = shl <2 x i64> %578, <i64 32, i64 32>
  %583 = ashr exact <2 x i64> %582, <i64 32, i64 32>
  %584 = mul nsw <2 x i64> %583, %559
  %585 = lshr <2 x i64> %581, <i64 16, i64 16>
  %586 = shl <2 x i64> %584, <i64 16, i64 16>
  %587 = bitcast <2 x i64> %585 to <8 x i16>
  %588 = bitcast <2 x i64> %586 to <8 x i16>
  %589 = shufflevector <8 x i16> %587, <8 x i16> %588, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 4, i32 5, i32 14, i32 15>
  %590 = getelementptr inbounds i32, i32* %199, i64 %572
  %591 = bitcast i32* %590 to <8 x i16>*
  store <8 x i16> %589, <8 x i16>* %591, align 16
  %592 = add nuw nsw i64 %572, 4
  %593 = icmp slt i64 %592, %561
  br i1 %593, label %571, label %562

594:                                              ; preds = %594, %567
  %595 = phi i64 [ %569, %567 ], [ %603, %594 ]
  %596 = getelementptr inbounds i32, i32* %235, i64 %595
  %597 = load i32, i32* %596, align 4
  %598 = sext i32 %597 to i64
  %599 = mul nsw i64 %598, %568
  %600 = lshr i64 %599, 16
  %601 = trunc i64 %600 to i32
  %602 = getelementptr inbounds i32, i32* %199, i64 %595
  store i32 %601, i32* %602, align 4
  %603 = add nuw nsw i64 %595, 1
  %604 = icmp slt i64 %603, %570
  br i1 %604, label %594, label %605

605:                                              ; preds = %594, %564
  store i32 %441, i32* %222, align 4
  %606 = icmp eq i32 %433, 0
  br i1 %606, label %681, label %607

607:                                              ; preds = %605
  %608 = icmp eq i64 %231, 0
  br i1 %608, label %609, label %615

609:                                              ; preds = %607
  %610 = sext i32 %486 to i64
  %611 = mul nsw i64 %225, %610
  %612 = lshr i64 %611, 14
  %613 = trunc i64 %612 to i32
  %614 = and i32 %613, -4
  br label %615

615:                                              ; preds = %609, %607
  %616 = phi i32 [ %614, %609 ], [ %486, %607 ]
  %617 = load i32, i32* %208, align 4
  %618 = sub i32 -2, %439
  %619 = add i32 %617, %618
  %620 = icmp slt i32 %619, %617
  br i1 %620, label %621, label %681

621:                                              ; preds = %615
  %622 = sext i32 %616 to i64
  %623 = sext i32 %619 to i64
  %624 = sext i32 %617 to i64
  %625 = sub nsw i64 %624, %623
  %626 = xor i64 %623, -1
  %627 = add nsw i64 %626, %624
  %628 = and i64 %625, 3
  %629 = icmp eq i64 %628, 0
  br i1 %629, label %643, label %630

630:                                              ; preds = %621, %630
  %631 = phi i64 [ %640, %630 ], [ %623, %621 ]
  %632 = phi i64 [ %641, %630 ], [ %628, %621 ]
  %633 = getelementptr inbounds i16, i16* %195, i64 %631
  %634 = load i16, i16* %633, align 2
  %635 = sext i16 %634 to i64
  %636 = mul nsw i64 %635, %622
  %637 = lshr i64 %636, 16
  %638 = trunc i64 %637 to i32
  %639 = getelementptr inbounds i32, i32* %192, i64 %631
  store i32 %638, i32* %639, align 4
  %640 = add nsw i64 %631, 1
  %641 = add i64 %632, -1
  %642 = icmp eq i64 %641, 0
  br i1 %642, label %643, label %630, !llvm.loop !9

643:                                              ; preds = %630, %621
  %644 = phi i64 [ %623, %621 ], [ %640, %630 ]
  %645 = icmp ult i64 %627, 3
  br i1 %645, label %681, label %646

646:                                              ; preds = %643, %646
  %647 = phi i64 [ %679, %646 ], [ %644, %643 ]
  %648 = getelementptr inbounds i16, i16* %195, i64 %647
  %649 = load i16, i16* %648, align 2
  %650 = sext i16 %649 to i64
  %651 = mul nsw i64 %650, %622
  %652 = lshr i64 %651, 16
  %653 = trunc i64 %652 to i32
  %654 = getelementptr inbounds i32, i32* %192, i64 %647
  store i32 %653, i32* %654, align 4
  %655 = add nsw i64 %647, 1
  %656 = getelementptr inbounds i16, i16* %195, i64 %655
  %657 = load i16, i16* %656, align 2
  %658 = sext i16 %657 to i64
  %659 = mul nsw i64 %658, %622
  %660 = lshr i64 %659, 16
  %661 = trunc i64 %660 to i32
  %662 = getelementptr inbounds i32, i32* %192, i64 %655
  store i32 %661, i32* %662, align 4
  %663 = add nsw i64 %647, 2
  %664 = getelementptr inbounds i16, i16* %195, i64 %663
  %665 = load i16, i16* %664, align 2
  %666 = sext i16 %665 to i64
  %667 = mul nsw i64 %666, %622
  %668 = lshr i64 %667, 16
  %669 = trunc i64 %668 to i32
  %670 = getelementptr inbounds i32, i32* %192, i64 %663
  store i32 %669, i32* %670, align 4
  %671 = add nsw i64 %647, 3
  %672 = getelementptr inbounds i16, i16* %195, i64 %671
  %673 = load i16, i16* %672, align 2
  %674 = sext i16 %673 to i64
  %675 = mul nsw i64 %674, %622
  %676 = lshr i64 %675, 16
  %677 = trunc i64 %676 to i32
  %678 = getelementptr inbounds i32, i32* %192, i64 %671
  store i32 %677, i32* %678, align 4
  %679 = add nsw i64 %647, 4
  %680 = icmp eq i64 %679, %624
  br i1 %680, label %681, label %646

681:                                              ; preds = %643, %646, %615, %605
  %682 = icmp eq i32 %548, 65536
  br i1 %682, label %932, label %683

683:                                              ; preds = %681
  %684 = load i32, i32* %206, align 4
  %685 = load i32, i32* %185, align 8
  %686 = sub i32 %684, %685
  %687 = add nsw i32 %684, -3
  %688 = icmp slt i32 %686, %687
  br i1 %688, label %689, label %698

689:                                              ; preds = %683
  %690 = insertelement <4 x i32> undef, i32 %548, i32 0
  %691 = shufflevector <4 x i32> %690, <4 x i32> undef, <4 x i32> zeroinitializer
  %692 = bitcast <4 x i32> %691 to <2 x i64>
  %693 = shl <2 x i64> %692, <i64 32, i64 32>
  %694 = ashr exact <2 x i64> %693, <i64 32, i64 32>
  %695 = sext i32 %686 to i64
  br label %705

696:                                              ; preds = %705
  %697 = trunc i64 %725 to i32
  br label %698

698:                                              ; preds = %696, %683
  %699 = phi i32 [ %684, %683 ], [ %726, %696 ]
  %700 = phi i32 [ %686, %683 ], [ %697, %696 ]
  %701 = icmp slt i32 %700, %699
  br i1 %701, label %702, label %742

702:                                              ; preds = %698
  %703 = sext i32 %548 to i64
  %704 = sext i32 %700 to i64
  br label %730

705:                                              ; preds = %705, %689
  %706 = phi i64 [ %695, %689 ], [ %725, %705 ]
  %707 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 1, i64 %706
  %708 = bitcast i32* %707 to <2 x i64>*
  %709 = load <2 x i64>, <2 x i64>* %708, align 1
  %710 = bitcast <2 x i64> %709 to <4 x i32>
  %711 = shufflevector <4 x i32> %710, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %712 = bitcast <4 x i32> %711 to <2 x i64>
  %713 = shl <2 x i64> %709, <i64 32, i64 32>
  %714 = ashr exact <2 x i64> %713, <i64 32, i64 32>
  %715 = mul nsw <2 x i64> %714, %694
  %716 = shl <2 x i64> %712, <i64 32, i64 32>
  %717 = ashr exact <2 x i64> %716, <i64 32, i64 32>
  %718 = mul nsw <2 x i64> %717, %694
  %719 = lshr <2 x i64> %715, <i64 16, i64 16>
  %720 = shl <2 x i64> %718, <i64 16, i64 16>
  %721 = bitcast <2 x i64> %719 to <8 x i16>
  %722 = bitcast <2 x i64> %720 to <8 x i16>
  %723 = shufflevector <8 x i16> %721, <8 x i16> %722, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 4, i32 5, i32 14, i32 15>
  %724 = bitcast i32* %707 to <8 x i16>*
  store <8 x i16> %723, <8 x i16>* %724, align 1
  %725 = add nsw i64 %706, 4
  %726 = load i32, i32* %206, align 4
  %727 = add nsw i32 %726, -3
  %728 = sext i32 %727 to i64
  %729 = icmp slt i64 %725, %728
  br i1 %729, label %705, label %696

730:                                              ; preds = %730, %702
  %731 = phi i64 [ %704, %702 ], [ %738, %730 ]
  %732 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 1, i64 %731
  %733 = load i32, i32* %732, align 4
  %734 = sext i32 %733 to i64
  %735 = mul nsw i64 %734, %703
  %736 = lshr i64 %735, 16
  %737 = trunc i64 %736 to i32
  store i32 %737, i32* %732, align 4
  %738 = add nsw i64 %731, 1
  %739 = load i32, i32* %206, align 4
  %740 = sext i32 %739 to i64
  %741 = icmp slt i64 %738, %740
  br i1 %741, label %730, label %742

742:                                              ; preds = %730, %698
  %743 = icmp eq i8 %434, 2
  br i1 %743, label %744, label %767

744:                                              ; preds = %742
  %745 = load i32, i32* %214, align 4
  %746 = icmp eq i32 %745, 0
  br i1 %746, label %747, label %767

747:                                              ; preds = %744
  %748 = load i32, i32* %208, align 4
  %749 = sub i32 -2, %439
  %750 = add i32 %748, %749
  %751 = sub nsw i32 %748, %180
  %752 = icmp slt i32 %750, %751
  br i1 %752, label %753, label %767

753:                                              ; preds = %747
  %754 = sext i32 %548 to i64
  %755 = sext i32 %750 to i64
  %756 = sext i32 %751 to i64
  br label %757

757:                                              ; preds = %757, %753
  %758 = phi i64 [ %755, %753 ], [ %765, %757 ]
  %759 = getelementptr inbounds i32, i32* %192, i64 %758
  %760 = load i32, i32* %759, align 4
  %761 = sext i32 %760 to i64
  %762 = mul nsw i64 %761, %754
  %763 = lshr i64 %762, 16
  %764 = trunc i64 %763 to i32
  store i32 %764, i32* %759, align 4
  %765 = add nsw i64 %758, 1
  %766 = icmp slt i64 %765, %756
  br i1 %766, label %757, label %767

767:                                              ; preds = %757, %747, %744, %742
  %768 = icmp sgt i32 %437, 0
  br i1 %768, label %769, label %932

769:                                              ; preds = %767
  %770 = sext i32 %548 to i64
  %771 = zext i32 %437 to i64
  br label %772

772:                                              ; preds = %929, %769
  %773 = phi i64 [ 0, %769 ], [ %930, %929 ]
  %774 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 7
  %775 = load i32, i32* %774, align 16
  %776 = sext i32 %775 to i64
  %777 = mul nsw i64 %776, %770
  %778 = lshr i64 %777, 16
  %779 = trunc i64 %778 to i32
  store i32 %779, i32* %774, align 16
  %780 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 0
  %781 = load i32, i32* %780, align 16
  %782 = sext i32 %781 to i64
  %783 = mul nsw i64 %782, %770
  %784 = lshr i64 %783, 16
  %785 = trunc i64 %784 to i32
  store i32 %785, i32* %780, align 16
  %786 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 1
  %787 = load i32, i32* %786, align 4
  %788 = sext i32 %787 to i64
  %789 = mul nsw i64 %788, %770
  %790 = lshr i64 %789, 16
  %791 = trunc i64 %790 to i32
  store i32 %791, i32* %786, align 4
  %792 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 2
  %793 = load i32, i32* %792, align 8
  %794 = sext i32 %793 to i64
  %795 = mul nsw i64 %794, %770
  %796 = lshr i64 %795, 16
  %797 = trunc i64 %796 to i32
  store i32 %797, i32* %792, align 8
  %798 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 3
  %799 = load i32, i32* %798, align 4
  %800 = sext i32 %799 to i64
  %801 = mul nsw i64 %800, %770
  %802 = lshr i64 %801, 16
  %803 = trunc i64 %802 to i32
  store i32 %803, i32* %798, align 4
  %804 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 4
  %805 = load i32, i32* %804, align 16
  %806 = sext i32 %805 to i64
  %807 = mul nsw i64 %806, %770
  %808 = lshr i64 %807, 16
  %809 = trunc i64 %808 to i32
  store i32 %809, i32* %804, align 16
  %810 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 5
  %811 = load i32, i32* %810, align 4
  %812 = sext i32 %811 to i64
  %813 = mul nsw i64 %812, %770
  %814 = lshr i64 %813, 16
  %815 = trunc i64 %814 to i32
  store i32 %815, i32* %810, align 4
  %816 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 6
  %817 = load i32, i32* %816, align 8
  %818 = sext i32 %817 to i64
  %819 = mul nsw i64 %818, %770
  %820 = lshr i64 %819, 16
  %821 = trunc i64 %820 to i32
  store i32 %821, i32* %816, align 8
  %822 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 7
  %823 = load i32, i32* %822, align 4
  %824 = sext i32 %823 to i64
  %825 = mul nsw i64 %824, %770
  %826 = lshr i64 %825, 16
  %827 = trunc i64 %826 to i32
  store i32 %827, i32* %822, align 4
  %828 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 8
  %829 = load i32, i32* %828, align 16
  %830 = sext i32 %829 to i64
  %831 = mul nsw i64 %830, %770
  %832 = lshr i64 %831, 16
  %833 = trunc i64 %832 to i32
  store i32 %833, i32* %828, align 16
  %834 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 9
  %835 = load i32, i32* %834, align 4
  %836 = sext i32 %835 to i64
  %837 = mul nsw i64 %836, %770
  %838 = lshr i64 %837, 16
  %839 = trunc i64 %838 to i32
  store i32 %839, i32* %834, align 4
  %840 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 10
  %841 = load i32, i32* %840, align 8
  %842 = sext i32 %841 to i64
  %843 = mul nsw i64 %842, %770
  %844 = lshr i64 %843, 16
  %845 = trunc i64 %844 to i32
  store i32 %845, i32* %840, align 8
  %846 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 11
  %847 = load i32, i32* %846, align 4
  %848 = sext i32 %847 to i64
  %849 = mul nsw i64 %848, %770
  %850 = lshr i64 %849, 16
  %851 = trunc i64 %850 to i32
  store i32 %851, i32* %846, align 4
  %852 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 12
  %853 = load i32, i32* %852, align 16
  %854 = sext i32 %853 to i64
  %855 = mul nsw i64 %854, %770
  %856 = lshr i64 %855, 16
  %857 = trunc i64 %856 to i32
  store i32 %857, i32* %852, align 16
  %858 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 13
  %859 = load i32, i32* %858, align 4
  %860 = sext i32 %859 to i64
  %861 = mul nsw i64 %860, %770
  %862 = lshr i64 %861, 16
  %863 = trunc i64 %862 to i32
  store i32 %863, i32* %858, align 4
  %864 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 14
  %865 = load i32, i32* %864, align 8
  %866 = sext i32 %865 to i64
  %867 = mul nsw i64 %866, %770
  %868 = lshr i64 %867, 16
  %869 = trunc i64 %868 to i32
  store i32 %869, i32* %864, align 8
  %870 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 0, i64 15
  %871 = load i32, i32* %870, align 4
  %872 = sext i32 %871 to i64
  %873 = mul nsw i64 %872, %770
  %874 = lshr i64 %873, 16
  %875 = trunc i64 %874 to i32
  store i32 %875, i32* %870, align 4
  br label %876

876:                                              ; preds = %876, %772
  %877 = phi i64 [ 0, %772 ], [ %898, %876 ]
  %878 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 6, i64 %877
  %879 = load i32, i32* %878, align 4
  %880 = sext i32 %879 to i64
  %881 = mul nsw i64 %880, %770
  %882 = lshr i64 %881, 16
  %883 = trunc i64 %882 to i32
  store i32 %883, i32* %878, align 4
  %884 = add nuw nsw i64 %877, 1
  %885 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 6, i64 %884
  %886 = load i32, i32* %885, align 4
  %887 = sext i32 %886 to i64
  %888 = mul nsw i64 %887, %770
  %889 = lshr i64 %888, 16
  %890 = trunc i64 %889 to i32
  store i32 %890, i32* %885, align 4
  %891 = add nuw nsw i64 %877, 2
  %892 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 6, i64 %891
  %893 = load i32, i32* %892, align 4
  %894 = sext i32 %893 to i64
  %895 = mul nsw i64 %894, %770
  %896 = lshr i64 %895, 16
  %897 = trunc i64 %896 to i32
  store i32 %897, i32* %892, align 4
  %898 = add nuw nsw i64 %877, 3
  %899 = icmp eq i64 %898, 24
  br i1 %899, label %900, label %876

900:                                              ; preds = %876, %900
  %901 = phi i64 [ %927, %900 ], [ 0, %876 ]
  %902 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 4, i64 %901
  %903 = load i32, i32* %902, align 8
  %904 = sext i32 %903 to i64
  %905 = mul nsw i64 %904, %770
  %906 = lshr i64 %905, 16
  %907 = trunc i64 %906 to i32
  store i32 %907, i32* %902, align 8
  %908 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 5, i64 %901
  %909 = load i32, i32* %908, align 8
  %910 = sext i32 %909 to i64
  %911 = mul nsw i64 %910, %770
  %912 = lshr i64 %911, 16
  %913 = trunc i64 %912 to i32
  store i32 %913, i32* %908, align 8
  %914 = or i64 %901, 1
  %915 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 4, i64 %914
  %916 = load i32, i32* %915, align 4
  %917 = sext i32 %916 to i64
  %918 = mul nsw i64 %917, %770
  %919 = lshr i64 %918, 16
  %920 = trunc i64 %919 to i32
  store i32 %920, i32* %915, align 4
  %921 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %773, i32 5, i64 %914
  %922 = load i32, i32* %921, align 4
  %923 = sext i32 %922 to i64
  %924 = mul nsw i64 %923, %770
  %925 = lshr i64 %924, 16
  %926 = trunc i64 %925 to i32
  store i32 %926, i32* %921, align 4
  %927 = add nuw nsw i64 %901, 2
  %928 = icmp eq i64 %927, 40
  br i1 %928, label %929, label %900

929:                                              ; preds = %900
  %930 = add nuw nsw i64 %773, 1
  %931 = icmp eq i64 %930, %771
  br i1 %931, label %932, label %772

932:                                              ; preds = %929, %681, %767
  %933 = load i8, i8* %61, align 1
  %934 = sext i8 %933 to i32
  %935 = getelementptr inbounds i32, i32* %9, i64 %231
  %936 = load i32, i32* %935, align 4
  %937 = getelementptr inbounds i32, i32* %10, i64 %231
  %938 = load i32, i32* %937, align 4
  %939 = load i32, i32* %440, align 4
  %940 = load i32, i32* %71, align 4
  %941 = add nsw i32 %436, 1
  %942 = load i32, i32* %226, align 4
  %943 = load i32, i32* %220, align 8
  %944 = load i32, i32* %227, align 8
  %945 = load i32, i32* %20, align 4
  call fastcc void @silk_noise_shape_quantizer_del_dec_sse4_1(%struct.silk_nsq_state* %1, %struct.NSQ_del_dec_struct* nonnull %24, i32 %934, i32* nonnull %199, i8* %236, i16* %232, i32* nonnull %192, i32* nonnull %203, i16* %242, i16* %245, i16* %248, i32 %435, i32 %254, i32 %936, i32 %938, i32 %939, i32 %13, i32 %70, i32 %940, i32 %436, i32 %942, i32 %943, i32 %944, i32 %945, i32* nonnull %16, i32 %180)
  %946 = load i32, i32* %71, align 4
  %947 = sext i32 %946 to i64
  %948 = getelementptr inbounds i32, i32* %235, i64 %947
  %949 = getelementptr inbounds i8, i8* %236, i64 %947
  %950 = getelementptr inbounds i16, i16* %232, i64 %947
  %951 = add nuw nsw i64 %231, 1
  %952 = load i32, i32* %209, align 4
  %953 = sext i32 %952 to i64
  %954 = icmp slt i64 %951, %953
  br i1 %954, label %230, label %955

955:                                              ; preds = %932, %179
  %956 = phi i8* [ %4, %179 ], [ %949, %932 ]
  %957 = phi i16* [ %205, %179 ], [ %950, %932 ]
  %958 = load i32, i32* %20, align 4
  %959 = icmp sgt i32 %958, 1
  br i1 %959, label %960, label %1028

960:                                              ; preds = %955
  %961 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 0, i32 10
  %962 = load i32, i32* %961, align 4
  %963 = sext i32 %958 to i64
  %964 = add nsw i64 %963, -1
  %965 = add nsw i64 %963, -2
  %966 = and i64 %964, 3
  %967 = icmp ult i64 %965, 3
  br i1 %967, label %1005, label %968

968:                                              ; preds = %960
  %969 = sub nsw i64 %964, %966
  br label %970

970:                                              ; preds = %970, %968
  %971 = phi i64 [ 1, %968 ], [ %1002, %970 ]
  %972 = phi i32 [ %962, %968 ], [ %1001, %970 ]
  %973 = phi i32 [ 0, %968 ], [ %1000, %970 ]
  %974 = phi i64 [ %969, %968 ], [ %1003, %970 ]
  %975 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %971, i32 10
  %976 = load i32, i32* %975, align 4
  %977 = icmp slt i32 %976, %972
  %978 = trunc i64 %971 to i32
  %979 = select i1 %977, i32 %978, i32 %973
  %980 = select i1 %977, i32 %976, i32 %972
  %981 = add nuw nsw i64 %971, 1
  %982 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %981, i32 10
  %983 = load i32, i32* %982, align 4
  %984 = icmp slt i32 %983, %980
  %985 = trunc i64 %981 to i32
  %986 = select i1 %984, i32 %985, i32 %979
  %987 = select i1 %984, i32 %983, i32 %980
  %988 = add nuw nsw i64 %971, 2
  %989 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %988, i32 10
  %990 = load i32, i32* %989, align 4
  %991 = icmp slt i32 %990, %987
  %992 = trunc i64 %988 to i32
  %993 = select i1 %991, i32 %992, i32 %986
  %994 = select i1 %991, i32 %990, i32 %987
  %995 = add nuw nsw i64 %971, 3
  %996 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %995, i32 10
  %997 = load i32, i32* %996, align 4
  %998 = icmp slt i32 %997, %994
  %999 = trunc i64 %995 to i32
  %1000 = select i1 %998, i32 %999, i32 %993
  %1001 = select i1 %998, i32 %997, i32 %994
  %1002 = add nuw nsw i64 %971, 4
  %1003 = add i64 %974, -4
  %1004 = icmp eq i64 %1003, 0
  br i1 %1004, label %1005, label %970

1005:                                             ; preds = %970, %960
  %1006 = phi i32 [ undef, %960 ], [ %1000, %970 ]
  %1007 = phi i64 [ 1, %960 ], [ %1002, %970 ]
  %1008 = phi i32 [ %962, %960 ], [ %1001, %970 ]
  %1009 = phi i32 [ 0, %960 ], [ %1000, %970 ]
  %1010 = icmp eq i64 %966, 0
  br i1 %1010, label %1025, label %1011

1011:                                             ; preds = %1005, %1011
  %1012 = phi i64 [ %1022, %1011 ], [ %1007, %1005 ]
  %1013 = phi i32 [ %1021, %1011 ], [ %1008, %1005 ]
  %1014 = phi i32 [ %1020, %1011 ], [ %1009, %1005 ]
  %1015 = phi i64 [ %1023, %1011 ], [ %966, %1005 ]
  %1016 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %1012, i32 10
  %1017 = load i32, i32* %1016, align 4
  %1018 = icmp slt i32 %1017, %1013
  %1019 = trunc i64 %1012 to i32
  %1020 = select i1 %1018, i32 %1019, i32 %1014
  %1021 = select i1 %1018, i32 %1017, i32 %1013
  %1022 = add nuw nsw i64 %1012, 1
  %1023 = add i64 %1015, -1
  %1024 = icmp eq i64 %1023, 0
  br i1 %1024, label %1025, label %1011, !llvm.loop !10

1025:                                             ; preds = %1011, %1005
  %1026 = phi i32 [ %1006, %1005 ], [ %1020, %1011 ]
  %1027 = sext i32 %1026 to i64
  br label %1028

1028:                                             ; preds = %1025, %955
  %1029 = phi i64 [ 0, %955 ], [ %1027, %1025 ]
  %1030 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %1029, i32 9
  %1031 = load i32, i32* %1030, align 8
  %1032 = trunc i32 %1031 to i8
  %1033 = getelementptr inbounds %struct.SideInfoIndices, %struct.SideInfoIndices* %2, i64 0, i32 10
  store i8 %1032, i8* %1033, align 2
  %1034 = icmp sgt i32 %180, 0
  br i1 %1034, label %1035, label %1090

1035:                                             ; preds = %1028
  %1036 = load i32, i32* %209, align 4
  %1037 = add nsw i32 %1036, -1
  %1038 = sext i32 %1037 to i64
  %1039 = getelementptr inbounds i32, i32* %11, i64 %1038
  %1040 = load i32, i32* %1039, align 4
  %1041 = ashr i32 %1040, 6
  %1042 = load i32, i32* %16, align 4
  %1043 = add nsw i32 %1042, %180
  %1044 = sext i32 %1041 to i64
  %1045 = sext i32 %180 to i64
  %1046 = zext i32 %180 to i64
  br label %1047

1047:                                             ; preds = %1047, %1035
  %1048 = phi i64 [ 0, %1035 ], [ %1087, %1047 ]
  %1049 = phi i32 [ %1043, %1035 ], [ %1055, %1047 ]
  %1050 = phi i32 [ 0, %1035 ], [ %1088, %1047 ]
  %1051 = add nsw i32 %1049, -1
  %1052 = srem i32 %1051, 40
  %1053 = icmp slt i32 %1052, 0
  %1054 = add nsw i32 %1052, 40
  %1055 = select i1 %1053, i32 %1054, i32 %1052
  %1056 = sext i32 %1055 to i64
  %1057 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %1029, i32 2, i64 %1056
  %1058 = load i32, i32* %1057, align 4
  %1059 = lshr i32 %1058, 9
  %1060 = add nuw nsw i32 %1059, 1
  %1061 = lshr i32 %1060, 1
  %1062 = trunc i32 %1061 to i8
  %1063 = sub nsw i64 %1048, %1045
  %1064 = getelementptr inbounds i8, i8* %956, i64 %1063
  store i8 %1062, i8* %1064, align 1
  %1065 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %1029, i32 3, i64 %1056
  %1066 = load i32, i32* %1065, align 4
  %1067 = sext i32 %1066 to i64
  %1068 = mul nsw i64 %1067, %1044
  %1069 = lshr i64 %1068, 16
  %1070 = trunc i64 %1069 to i32
  %1071 = ashr i32 %1070, 7
  %1072 = add nsw i32 %1071, 1
  %1073 = lshr i32 %1072, 1
  %1074 = icmp sgt i32 %1070, 8388479
  %1075 = icmp slt i32 %1072, -65536
  %1076 = select i1 %1075, i32 32768, i32 %1073
  %1077 = select i1 %1074, i32 32767, i32 %1076
  %1078 = trunc i32 %1077 to i16
  %1079 = getelementptr inbounds i16, i16* %957, i64 %1063
  store i16 %1078, i16* %1079, align 2
  %1080 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %1029, i32 5, i64 %1056
  %1081 = load i32, i32* %1080, align 4
  %1082 = load i32, i32* %206, align 4
  %1083 = sub i32 %1050, %180
  %1084 = add i32 %1083, %1082
  %1085 = sext i32 %1084 to i64
  %1086 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 1, i64 %1085
  store i32 %1081, i32* %1086, align 4
  %1087 = add nuw nsw i64 %1048, 1
  %1088 = add nuw nsw i32 %1050, 1
  %1089 = icmp eq i64 %1087, %1046
  br i1 %1089, label %1090, label %1047

1090:                                             ; preds = %1047, %1028
  %1091 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 2, i64 0
  %1092 = bitcast i32* %1091 to i8*
  %1093 = load i32, i32* %71, align 4
  %1094 = sext i32 %1093 to i64
  %1095 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %1029, i32 0, i64 %1094
  %1096 = bitcast i32* %1095 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1092, i8* align 4 %1096, i64 64, i1 false)
  %1097 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 3, i64 0
  %1098 = bitcast i32* %1097 to i8*
  %1099 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %1029, i32 6, i64 0
  %1100 = bitcast i32* %1099 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1098, i8* align 16 %1100, i64 96, i1 false)
  %1101 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %1029, i32 7
  %1102 = load i32, i32* %1101, align 16
  %1103 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 4
  store i32 %1102, i32* %1103, align 4
  %1104 = load i32, i32* %209, align 4
  %1105 = add nsw i32 %1104, -1
  %1106 = sext i32 %1105 to i64
  %1107 = getelementptr inbounds i32, i32* %12, i64 %1106
  %1108 = load i32, i32* %1107, align 4
  store i32 %1108, i32* %18, align 4
  %1109 = bitcast %struct.silk_nsq_state* %1 to i8*
  %1110 = load i32, i32* %187, align 8
  %1111 = sext i32 %1110 to i64
  %1112 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 0, i64 %1111
  %1113 = bitcast i16* %1112 to i8*
  %1114 = load i32, i32* %185, align 8
  %1115 = sext i32 %1114 to i64
  %1116 = shl nsw i64 %1115, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1109, i8* align 2 %1113, i64 %1116, i1 false)
  %1117 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 1
  %1118 = bitcast [640 x i32]* %1117 to i8*
  %1119 = load i32, i32* %187, align 8
  %1120 = sext i32 %1119 to i64
  %1121 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %1, i64 0, i32 1, i64 %1120
  %1122 = bitcast i32* %1121 to i8*
  %1123 = load i32, i32* %185, align 8
  %1124 = sext i32 %1123 to i64
  %1125 = shl nsw i64 %1124, 2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1118, i8* align 4 %1122, i64 %1125, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #6
  ret void

1126:                                             ; preds = %349
  %1127 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %24, i64 %350, i32 10
  %1128 = load i32, i32* %1127, align 4
  %1129 = add nsw i32 %1128, 134217727
  store i32 %1129, i32* %1127, align 4
  br label %1130

1130:                                             ; preds = %1126, %349
  %1131 = add nuw nsw i64 %342, 2
  %1132 = add i64 %343, -2
  %1133 = icmp eq i64 %1132, 0
  br i1 %1133, label %352, label %341
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

declare void @silk_LPC_analysis_filter(i16*, i16*, i16*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @silk_noise_shape_quantizer_del_dec_sse4_1(%struct.silk_nsq_state* nocapture, %struct.NSQ_del_dec_struct*, i32, i32* nocapture readonly, i8* nocapture, i16* nocapture, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32* nocapture, i32) unnamed_addr #4 {
  %27 = icmp sgt i32 %23, 0
  br i1 %27, label %29, label %28

28:                                               ; preds = %26
  tail call void @celt_fatal(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 356) #7
  unreachable

29:                                               ; preds = %26
  %30 = sext i32 %23 to i64
  %31 = mul nsw i64 %30, 48
  %32 = alloca [2 x %struct.NSQ_sample_struct], i64 %30, align 16
  %33 = bitcast [2 x %struct.NSQ_sample_struct]* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %33, i8 -86, i64 %31, i1 false)
  %34 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 8
  %35 = load i32, i32* %34, align 4
  %36 = sub i32 1, %11
  %37 = add i32 %36, %35
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 1, i64 %38
  %40 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 7
  %41 = load i32, i32* %40, align 4
  %42 = sub i32 2, %11
  %43 = add i32 %42, %41
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i32, i32* %6, i64 %44
  %46 = ashr i32 %15, 6
  %47 = bitcast i16* %8 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = insertelement <2 x i64> undef, i64 %48, i32 0
  %50 = bitcast <2 x i64> %49 to <8 x i16>
  %51 = shufflevector <8 x i16> %50, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %52 = sext <4 x i16> %51 to <4 x i32>
  %53 = bitcast <4 x i32> %52 to <2 x i64>
  %54 = getelementptr inbounds i16, i16* %8, i64 4
  %55 = bitcast i16* %54 to i64*
  %56 = load i64, i64* %55, align 1
  %57 = insertelement <2 x i64> undef, i64 %56, i32 0
  %58 = bitcast <2 x i64> %57 to <8 x i16>
  %59 = shufflevector <8 x i16> %58, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %60 = sext <4 x i16> %59 to <4 x i32>
  %61 = bitcast <4 x i32> %60 to <2 x i64>
  %62 = icmp eq i32 %21, 16
  br i1 %62, label %63, label %84, !prof !11

63:                                               ; preds = %29
  %64 = getelementptr inbounds i16, i16* %8, i64 8
  %65 = bitcast i16* %64 to i64*
  %66 = load i64, i64* %65, align 1
  %67 = insertelement <2 x i64> undef, i64 %66, i32 0
  %68 = bitcast <2 x i64> %67 to <8 x i16>
  %69 = shufflevector <8 x i16> %68, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %70 = sext <4 x i16> %69 to <4 x i32>
  %71 = bitcast <4 x i32> %70 to <2 x i64>
  %72 = getelementptr inbounds i16, i16* %8, i64 12
  %73 = bitcast i16* %72 to i64*
  %74 = load i64, i64* %73, align 1
  %75 = insertelement <2 x i64> undef, i64 %74, i32 0
  %76 = bitcast <2 x i64> %75 to <8 x i16>
  %77 = shufflevector <8 x i16> %76, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %78 = sext <4 x i16> %77 to <4 x i32>
  %79 = bitcast <4 x i32> %78 to <2 x i64>
  %80 = shl <2 x i64> %71, <i64 32, i64 32>
  %81 = ashr exact <2 x i64> %80, <i64 32, i64 32>
  %82 = shl <2 x i64> %79, <i64 32, i64 32>
  %83 = ashr exact <2 x i64> %82, <i64 32, i64 32>
  br label %84

84:                                               ; preds = %63, %29
  %85 = phi <4 x i32> [ %70, %63 ], [ <i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766>, %29 ]
  %86 = phi <2 x i64> [ %81, %63 ], [ <i64 -1431655766, i64 -1431655766>, %29 ]
  %87 = phi <4 x i32> [ %78, %63 ], [ <i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766>, %29 ]
  %88 = phi <2 x i64> [ %83, %63 ], [ <i64 -1431655766, i64 -1431655766>, %29 ]
  %89 = icmp eq i32 %2, 2
  br i1 %89, label %90, label %104

90:                                               ; preds = %84
  %91 = bitcast i16* %9 to i64*
  %92 = load i64, i64* %91, align 1
  %93 = insertelement <2 x i64> undef, i64 %92, i32 0
  %94 = bitcast <2 x i64> %93 to <8 x i16>
  %95 = shufflevector <8 x i16> %94, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %96 = sext <4 x i16> %95 to <4 x i32>
  %97 = bitcast <4 x i32> %96 to <2 x i64>
  %98 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %99 = bitcast <4 x i32> %98 to <2 x i64>
  %100 = shl <2 x i64> %97, <i64 32, i64 32>
  %101 = ashr exact <2 x i64> %100, <i64 32, i64 32>
  %102 = shl <2 x i64> %99, <i64 32, i64 32>
  %103 = ashr exact <2 x i64> %102, <i64 32, i64 32>
  br label %104

104:                                              ; preds = %90, %84
  %105 = phi <2 x i64> [ %101, %90 ], [ <i64 -1431655766, i64 -1431655766>, %84 ]
  %106 = phi <2 x i64> [ %103, %90 ], [ <i64 -1431655766, i64 -1431655766>, %84 ]
  %107 = icmp sgt i32 %18, 0
  br i1 %107, label %108, label %189

108:                                              ; preds = %104
  %109 = getelementptr inbounds i16, i16* %9, i64 4
  %110 = icmp sgt i32 %11, 0
  %111 = zext i32 %12 to i64
  %112 = shl i64 %111, 48
  %113 = ashr exact i64 %112, 48
  %114 = ashr i32 %12, 16
  %115 = sext i32 %114 to i64
  %116 = ashr i32 %21, 1
  %117 = shl <2 x i64> %53, <i64 32, i64 32>
  %118 = ashr exact <2 x i64> %117, <i64 32, i64 32>
  %119 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %120 = bitcast <4 x i32> %119 to <2 x i64>
  %121 = shl <2 x i64> %120, <i64 32, i64 32>
  %122 = ashr exact <2 x i64> %121, <i64 32, i64 32>
  %123 = shl <2 x i64> %61, <i64 32, i64 32>
  %124 = ashr exact <2 x i64> %123, <i64 32, i64 32>
  %125 = shufflevector <4 x i32> %60, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %126 = bitcast <4 x i32> %125 to <2 x i64>
  %127 = shl <2 x i64> %126, <i64 32, i64 32>
  %128 = ashr exact <2 x i64> %127, <i64 32, i64 32>
  %129 = getelementptr inbounds i16, i16* %8, i64 8
  %130 = getelementptr inbounds i16, i16* %8, i64 9
  %131 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %132 = bitcast <4 x i32> %131 to <2 x i64>
  %133 = shl <2 x i64> %132, <i64 32, i64 32>
  %134 = ashr exact <2 x i64> %133, <i64 32, i64 32>
  %135 = shufflevector <4 x i32> %87, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %136 = bitcast <4 x i32> %135 to <2 x i64>
  %137 = shl <2 x i64> %136, <i64 32, i64 32>
  %138 = ashr exact <2 x i64> %137, <i64 32, i64 32>
  %139 = zext i32 %22 to i64
  %140 = shl i64 %139, 48
  %141 = ashr exact i64 %140, 48
  %142 = ashr i32 %20, 1
  %143 = icmp sgt i32 %20, 2
  %144 = add nsw i32 %20, -1
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i16, i16* %10, i64 %145
  %147 = zext i32 %13 to i64
  %148 = shl i64 %147, 48
  %149 = ashr exact i64 %148, 48
  %150 = zext i32 %14 to i64
  %151 = shl i64 %150, 48
  %152 = ashr exact i64 %151, 48
  %153 = ashr i32 %14, 16
  %154 = sext i32 %153 to i64
  %155 = add nsw i32 %17, -944
  %156 = shl i32 %17, 16
  %157 = sub i32 61865984, %156
  %158 = ashr exact i32 %157, 16
  %159 = shl i32 %16, 16
  %160 = ashr exact i32 %159, 16
  %161 = mul nsw i32 %158, %160
  %162 = ashr exact i32 %156, 16
  %163 = mul nsw i32 %162, %160
  %164 = add nsw i32 %17, 944
  %165 = shl i32 %164, 16
  %166 = ashr exact i32 %165, 16
  %167 = mul nsw i32 %166, %160
  %168 = add i32 %17, -80
  %169 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 0, i64 0, i32 1
  %170 = icmp sgt i32 %23, 1
  %171 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 0, i64 1, i32 1
  %172 = icmp slt i32 %19, 1
  %173 = sext i32 %20 to i64
  %174 = sext i32 %25 to i64
  %175 = zext i32 %18 to i64
  %176 = zext i32 %23 to i64
  %177 = zext i32 %23 to i64
  %178 = zext i32 %23 to i64
  %179 = add nsw i64 %176, -1
  %180 = add nsw i64 %176, -2
  %181 = and i64 %179, 3
  %182 = icmp ult i64 %180, 3
  %183 = sub nsw i64 %179, %181
  %184 = icmp eq i64 %181, 0
  %185 = and i64 %179, 1
  %186 = icmp eq i64 %180, 0
  %187 = sub nsw i64 %179, %185
  %188 = icmp eq i64 %185, 0
  br label %196

189:                                              ; preds = %823, %104
  %190 = sext i32 %18 to i64
  %191 = zext i32 %23 to i64
  %192 = and i64 %191, 1
  %193 = icmp eq i32 %23, 1
  br i1 %193, label %844, label %194

194:                                              ; preds = %189
  %195 = sub nsw i64 %191, %192
  br label %829

196:                                              ; preds = %823, %108
  %197 = phi i64 [ 0, %108 ], [ %827, %823 ]
  %198 = phi i32* [ %39, %108 ], [ %259, %823 ]
  %199 = phi i32* [ %45, %108 ], [ %238, %823 ]
  br i1 %89, label %200, label %236

200:                                              ; preds = %196
  %201 = getelementptr inbounds i32, i32* %199, i64 -3
  %202 = bitcast i32* %201 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 1
  %204 = shufflevector <4 x i32> %203, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %205 = bitcast <4 x i32> %204 to <2 x i64>
  %206 = shl <2 x i64> %205, <i64 32, i64 32>
  %207 = ashr exact <2 x i64> %206, <i64 32, i64 32>
  %208 = mul nsw <2 x i64> %207, %105
  %209 = bitcast <2 x i64> %208 to <16 x i8>
  %210 = shufflevector <16 x i8> %209, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %211 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %212 = bitcast <4 x i32> %211 to <2 x i64>
  %213 = shl <2 x i64> %212, <i64 32, i64 32>
  %214 = ashr exact <2 x i64> %213, <i64 32, i64 32>
  %215 = mul nsw <2 x i64> %214, %106
  %216 = bitcast <2 x i64> %215 to <16 x i8>
  %217 = shufflevector <16 x i8> %216, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %218 = bitcast <16 x i8> %217 to <4 x i32>
  %219 = bitcast <16 x i8> %210 to <4 x i32>
  %220 = add <4 x i32> %218, %219
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %222 = add <4 x i32> %221, %220
  %223 = extractelement <4 x i32> %222, i32 0
  %224 = getelementptr inbounds i32, i32* %199, i64 -4
  %225 = load i32, i32* %224, align 4
  %226 = sext i32 %225 to i64
  %227 = load i16, i16* %109, align 2
  %228 = sext i16 %227 to i64
  %229 = mul nsw i64 %228, %226
  %230 = lshr i64 %229, 16
  %231 = trunc i64 %230 to i32
  %232 = add i32 %231, 2
  %233 = add i32 %232, %223
  %234 = shl i32 %233, 1
  %235 = getelementptr inbounds i32, i32* %199, i64 1
  br label %236

236:                                              ; preds = %196, %200
  %237 = phi i32 [ %234, %200 ], [ 0, %196 ]
  %238 = phi i32* [ %235, %200 ], [ %199, %196 ]
  br i1 %110, label %239, label %257

239:                                              ; preds = %236
  %240 = load i32, i32* %198, align 4
  %241 = getelementptr inbounds i32, i32* %198, i64 -2
  %242 = load i32, i32* %241, align 4
  %243 = add nsw i32 %242, %240
  %244 = sext i32 %243 to i64
  %245 = mul nsw i64 %113, %244
  %246 = lshr i64 %245, 16
  %247 = getelementptr inbounds i32, i32* %198, i64 -1
  %248 = load i32, i32* %247, align 4
  %249 = sext i32 %248 to i64
  %250 = mul nsw i64 %249, %115
  %251 = lshr i64 %250, 16
  %252 = add nuw nsw i64 %246, %251
  %253 = trunc i64 %252 to i32
  %254 = shl i32 %253, 2
  %255 = sub nsw i32 %237, %254
  %256 = getelementptr inbounds i32, i32* %198, i64 1
  br label %257

257:                                              ; preds = %239, %236
  %258 = phi i32 [ %255, %239 ], [ 0, %236 ]
  %259 = phi i32* [ %256, %239 ], [ %198, %236 ]
  %260 = add nuw nsw i64 %197, 15
  %261 = getelementptr inbounds i32, i32* %3, i64 %197
  br label %262

262:                                              ; preds = %515, %257
  %263 = phi i64 [ 0, %257 ], [ %567, %515 ]
  %264 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %263, i32 8
  %265 = load i32, i32* %264, align 4
  %266 = mul i32 %265, 196314165
  %267 = add i32 %266, 907633515
  store i32 %267, i32* %264, align 4
  %268 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %263, i32 0, i64 %260
  %269 = getelementptr inbounds i32, i32* %268, i64 -3
  %270 = bitcast i32* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 1
  %272 = shufflevector <4 x i32> %271, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %273 = bitcast <4 x i32> %272 to <2 x i64>
  %274 = shl <2 x i64> %273, <i64 32, i64 32>
  %275 = ashr exact <2 x i64> %274, <i64 32, i64 32>
  %276 = mul nsw <2 x i64> %275, %118
  %277 = lshr <2 x i64> %276, <i64 16, i64 16>
  %278 = shufflevector <4 x i32> %272, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %279 = bitcast <4 x i32> %278 to <2 x i64>
  %280 = shl <2 x i64> %279, <i64 32, i64 32>
  %281 = ashr exact <2 x i64> %280, <i64 32, i64 32>
  %282 = mul nsw <2 x i64> %281, %122
  %283 = lshr <2 x i64> %282, <i64 16, i64 16>
  %284 = bitcast <2 x i64> %277 to <4 x i32>
  %285 = bitcast <2 x i64> %283 to <4 x i32>
  %286 = add <4 x i32> %285, %284
  %287 = getelementptr inbounds i32, i32* %268, i64 -7
  %288 = bitcast i32* %287 to <4 x i32>*
  %289 = load <4 x i32>, <4 x i32>* %288, align 1
  %290 = shufflevector <4 x i32> %289, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %291 = bitcast <4 x i32> %290 to <2 x i64>
  %292 = shl <2 x i64> %291, <i64 32, i64 32>
  %293 = ashr exact <2 x i64> %292, <i64 32, i64 32>
  %294 = mul nsw <2 x i64> %293, %124
  %295 = lshr <2 x i64> %294, <i64 16, i64 16>
  %296 = bitcast <2 x i64> %295 to <4 x i32>
  %297 = add <4 x i32> %286, %296
  %298 = shufflevector <4 x i32> %290, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %299 = bitcast <4 x i32> %298 to <2 x i64>
  %300 = shl <2 x i64> %299, <i64 32, i64 32>
  %301 = ashr exact <2 x i64> %300, <i64 32, i64 32>
  %302 = mul nsw <2 x i64> %301, %128
  %303 = lshr <2 x i64> %302, <i64 16, i64 16>
  %304 = bitcast <2 x i64> %303 to <4 x i32>
  %305 = add <4 x i32> %297, %304
  br i1 %62, label %306, label %349

306:                                              ; preds = %262
  %307 = getelementptr inbounds i32, i32* %268, i64 -11
  %308 = bitcast i32* %307 to <4 x i32>*
  %309 = load <4 x i32>, <4 x i32>* %308, align 1
  %310 = shufflevector <4 x i32> %309, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %311 = bitcast <4 x i32> %310 to <2 x i64>
  %312 = shl <2 x i64> %311, <i64 32, i64 32>
  %313 = ashr exact <2 x i64> %312, <i64 32, i64 32>
  %314 = mul nsw <2 x i64> %313, %86
  %315 = lshr <2 x i64> %314, <i64 16, i64 16>
  %316 = bitcast <2 x i64> %315 to <4 x i32>
  %317 = add <4 x i32> %305, %316
  %318 = shufflevector <4 x i32> %310, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %319 = bitcast <4 x i32> %318 to <2 x i64>
  %320 = shl <2 x i64> %319, <i64 32, i64 32>
  %321 = ashr exact <2 x i64> %320, <i64 32, i64 32>
  %322 = mul nsw <2 x i64> %321, %134
  %323 = lshr <2 x i64> %322, <i64 16, i64 16>
  %324 = bitcast <2 x i64> %323 to <4 x i32>
  %325 = add <4 x i32> %317, %324
  %326 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %263, i32 0, i64 %197
  %327 = bitcast i32* %326 to <4 x i32>*
  %328 = load <4 x i32>, <4 x i32>* %327, align 1
  %329 = shufflevector <4 x i32> %328, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %330 = bitcast <4 x i32> %329 to <2 x i64>
  %331 = shl <2 x i64> %330, <i64 32, i64 32>
  %332 = ashr exact <2 x i64> %331, <i64 32, i64 32>
  %333 = mul nsw <2 x i64> %332, %88
  %334 = lshr <2 x i64> %333, <i64 16, i64 16>
  %335 = bitcast <2 x i64> %334 to <4 x i32>
  %336 = add <4 x i32> %325, %335
  %337 = shufflevector <4 x i32> %329, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %338 = bitcast <4 x i32> %337 to <2 x i64>
  %339 = shl <2 x i64> %338, <i64 32, i64 32>
  %340 = ashr exact <2 x i64> %339, <i64 32, i64 32>
  %341 = mul nsw <2 x i64> %340, %138
  %342 = lshr <2 x i64> %341, <i64 16, i64 16>
  %343 = bitcast <2 x i64> %342 to <4 x i32>
  %344 = add <4 x i32> %336, %343
  %345 = shufflevector <4 x i32> %344, <4 x i32> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %346 = add <4 x i32> %345, %344
  %347 = extractelement <4 x i32> %346, i32 0
  %348 = add nsw i32 %347, %116
  br label %372

349:                                              ; preds = %262
  %350 = shufflevector <4 x i32> %305, <4 x i32> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %351 = add <4 x i32> %350, %305
  %352 = extractelement <4 x i32> %351, i32 0
  %353 = add nsw i32 %352, %116
  %354 = getelementptr inbounds i32, i32* %268, i64 -8
  %355 = load i32, i32* %354, align 4
  %356 = sext i32 %355 to i64
  %357 = load i16, i16* %129, align 2
  %358 = sext i16 %357 to i64
  %359 = mul nsw i64 %358, %356
  %360 = lshr i64 %359, 16
  %361 = trunc i64 %360 to i32
  %362 = add i32 %353, %361
  %363 = getelementptr inbounds i32, i32* %268, i64 -9
  %364 = load i32, i32* %363, align 4
  %365 = sext i32 %364 to i64
  %366 = load i16, i16* %130, align 2
  %367 = sext i16 %366 to i64
  %368 = mul nsw i64 %367, %365
  %369 = lshr i64 %368, 16
  %370 = trunc i64 %369 to i32
  %371 = add i32 %362, %370
  br label %372

372:                                              ; preds = %349, %306
  %373 = phi i32 [ %348, %306 ], [ %371, %349 ]
  %374 = shl i32 %373, 4
  %375 = load i32, i32* %268, align 4
  %376 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %263, i32 6, i64 0
  %377 = load i32, i32* %376, align 4
  %378 = sext i32 %377 to i64
  %379 = mul nsw i64 %141, %378
  %380 = lshr i64 %379, 16
  %381 = trunc i64 %380 to i32
  %382 = add i32 %375, %381
  %383 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %263, i32 6, i64 1
  %384 = load i32, i32* %383, align 4
  %385 = sub nsw i32 %384, %382
  %386 = sext i32 %385 to i64
  %387 = mul nsw i64 %141, %386
  %388 = lshr i64 %387, 16
  %389 = trunc i64 %388 to i32
  %390 = add i32 %377, %389
  store i32 %382, i32* %376, align 4
  %391 = sext i32 %382 to i64
  %392 = load i16, i16* %10, align 2
  %393 = sext i16 %392 to i64
  %394 = mul nsw i64 %391, %393
  %395 = lshr i64 %394, 16
  %396 = trunc i64 %395 to i32
  %397 = add i32 %142, %396
  br i1 %143, label %398, label %440

398:                                              ; preds = %372, %398
  %399 = phi i64 [ %438, %398 ], [ 2, %372 ]
  %400 = phi i32 [ %429, %398 ], [ %390, %372 ]
  %401 = phi i32 [ %437, %398 ], [ %397, %372 ]
  %402 = add nsw i64 %399, -1
  %403 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %263, i32 6, i64 %402
  %404 = load i32, i32* %403, align 4
  %405 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %263, i32 6, i64 %399
  %406 = load i32, i32* %405, align 4
  %407 = sub nsw i32 %406, %400
  %408 = sext i32 %407 to i64
  %409 = mul nsw i64 %141, %408
  %410 = lshr i64 %409, 16
  %411 = trunc i64 %410 to i32
  %412 = add i32 %404, %411
  store i32 %400, i32* %403, align 4
  %413 = sext i32 %400 to i64
  %414 = getelementptr inbounds i16, i16* %10, i64 %402
  %415 = load i16, i16* %414, align 2
  %416 = sext i16 %415 to i64
  %417 = mul nsw i64 %416, %413
  %418 = lshr i64 %417, 16
  %419 = trunc i64 %418 to i32
  %420 = add i32 %401, %419
  %421 = or i64 %399, 1
  %422 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %263, i32 6, i64 %421
  %423 = load i32, i32* %422, align 4
  %424 = sub nsw i32 %423, %412
  %425 = sext i32 %424 to i64
  %426 = mul nsw i64 %141, %425
  %427 = lshr i64 %426, 16
  %428 = trunc i64 %427 to i32
  %429 = add i32 %406, %428
  store i32 %412, i32* %405, align 4
  %430 = sext i32 %412 to i64
  %431 = getelementptr inbounds i16, i16* %10, i64 %399
  %432 = load i16, i16* %431, align 2
  %433 = sext i16 %432 to i64
  %434 = mul nsw i64 %430, %433
  %435 = lshr i64 %434, 16
  %436 = trunc i64 %435 to i32
  %437 = add i32 %420, %436
  %438 = add nuw nsw i64 %399, 2
  %439 = icmp slt i64 %438, %173
  br i1 %439, label %398, label %440

440:                                              ; preds = %398, %372
  %441 = phi i32 [ %397, %372 ], [ %437, %398 ]
  %442 = phi i32 [ %390, %372 ], [ %429, %398 ]
  %443 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %263, i32 6, i64 %145
  store i32 %442, i32* %443, align 4
  %444 = sext i32 %442 to i64
  %445 = load i16, i16* %146, align 2
  %446 = sext i16 %445 to i64
  %447 = mul nsw i64 %446, %444
  %448 = lshr i64 %447, 16
  %449 = trunc i64 %448 to i32
  %450 = add i32 %441, %449
  %451 = shl i32 %450, 1
  %452 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %263, i32 7
  %453 = load i32, i32* %452, align 4
  %454 = sext i32 %453 to i64
  %455 = mul nsw i64 %149, %454
  %456 = lshr i64 %455, 16
  %457 = trunc i64 %456 to i32
  %458 = add i32 %451, %457
  %459 = shl i32 %458, 2
  %460 = load i32, i32* %24, align 4
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %263, i32 5, i64 %461
  %463 = load i32, i32* %462, align 4
  %464 = sext i32 %463 to i64
  %465 = mul nsw i64 %152, %464
  %466 = lshr i64 %465, 16
  %467 = mul nsw i64 %454, %154
  %468 = lshr i64 %467, 16
  %469 = add nuw nsw i64 %466, %468
  %470 = trunc i64 %469 to i32
  %471 = shl i32 %470, 2
  %472 = add i32 %374, %258
  %473 = sub i32 %472, %459
  %474 = sub i32 %473, %471
  %475 = ashr i32 %474, 3
  %476 = add nsw i32 %475, 1
  %477 = ashr i32 %476, 1
  %478 = load i32, i32* %261, align 4
  %479 = sub nsw i32 %478, %477
  %480 = load i32, i32* %264, align 4
  %481 = icmp slt i32 %480, 0
  %482 = sub nsw i32 0, %479
  %483 = select i1 %481, i32 %482, i32 %479
  %484 = icmp sgt i32 %483, -31744
  %485 = select i1 %484, i32 %483, i32 -31744
  %486 = icmp slt i32 %485, 30720
  %487 = select i1 %486, i32 %485, i32 30720
  %488 = sub nsw i32 %487, %17
  %489 = icmp sgt i32 %488, 1023
  br i1 %489, label %490, label %500

490:                                              ; preds = %440
  %491 = and i32 %488, -1024
  %492 = add i32 %168, %491
  %493 = add nsw i32 %492, 1024
  %494 = shl i32 %492, 16
  %495 = ashr exact i32 %494, 16
  %496 = mul nsw i32 %495, %160
  %497 = shl i32 %493, 16
  %498 = ashr exact i32 %497, 16
  %499 = mul nsw i32 %498, %160
  br label %515

500:                                              ; preds = %440
  %501 = ashr i32 %488, 10
  switch i32 %501, label %503 [
    i32 0, label %515
    i32 -1, label %502
  ]

502:                                              ; preds = %500
  br label %515

503:                                              ; preds = %500
  %504 = and i32 %488, -1024
  %505 = or i32 %504, 80
  %506 = add nsw i32 %505, %17
  %507 = add nsw i32 %506, 1024
  %508 = shl i32 %506, 16
  %509 = sub i32 0, %508
  %510 = ashr exact i32 %509, 16
  %511 = mul nsw i32 %510, %160
  %512 = sub i32 -67108864, %508
  %513 = ashr exact i32 %512, 16
  %514 = mul nsw i32 %513, %160
  br label %515

515:                                              ; preds = %500, %503, %502, %490
  %516 = phi i32 [ %496, %490 ], [ %161, %502 ], [ %511, %503 ], [ %163, %500 ]
  %517 = phi i32 [ %499, %490 ], [ %163, %502 ], [ %514, %503 ], [ %167, %500 ]
  %518 = phi i32 [ %492, %490 ], [ %155, %502 ], [ %506, %503 ], [ %17, %500 ]
  %519 = phi i32 [ %493, %490 ], [ %17, %502 ], [ %507, %503 ], [ %164, %500 ]
  %520 = sub nsw i32 %487, %518
  %521 = shl i32 %520, 16
  %522 = ashr exact i32 %521, 16
  %523 = mul nsw i32 %522, %522
  %524 = add nsw i32 %523, %516
  %525 = ashr i32 %524, 10
  %526 = sub nsw i32 %487, %519
  %527 = shl i32 %526, 16
  %528 = ashr exact i32 %527, 16
  %529 = mul nsw i32 %528, %528
  %530 = add nsw i32 %529, %517
  %531 = ashr i32 %530, 10
  %532 = icmp slt i32 %525, %531
  %533 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %263, i32 10
  %534 = load i32, i32* %533, align 4
  %535 = select i1 %532, i32 %525, i32 %531
  %536 = select i1 %532, i32 %531, i32 %525
  %537 = select i1 %532, i32 %518, i32 %519
  %538 = select i1 %532, i32 %519, i32 %518
  %539 = add nsw i32 %536, %534
  %540 = add nsw i32 %535, %534
  %541 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %263, i64 0, i32 1
  store i32 %540, i32* %541, align 4
  %542 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %263, i64 1, i32 1
  store i32 %539, i32* %542, align 4
  %543 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %263, i64 0, i32 0
  store i32 %537, i32* %543, align 16
  %544 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %263, i64 1, i32 0
  store i32 %538, i32* %544, align 8
  %545 = shl i32 %537, 4
  %546 = sub nsw i32 0, %545
  %547 = select i1 %481, i32 %546, i32 %545
  %548 = add nsw i32 %547, %237
  %549 = add nsw i32 %548, %374
  %550 = sub nsw i32 %549, %459
  %551 = sub nsw i32 %550, %471
  %552 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %263, i64 0, i32 4
  store i32 %551, i32* %552, align 16
  %553 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %263, i64 0, i32 3
  store i32 %550, i32* %553, align 4
  %554 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %263, i64 0, i32 5
  store i32 %548, i32* %554, align 4
  %555 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %263, i64 0, i32 2
  store i32 %549, i32* %555, align 8
  %556 = shl i32 %538, 4
  %557 = sub nsw i32 0, %556
  %558 = select i1 %481, i32 %557, i32 %556
  %559 = add nsw i32 %558, %237
  %560 = add nsw i32 %559, %374
  %561 = sub nsw i32 %560, %459
  %562 = sub nsw i32 %561, %471
  %563 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %263, i64 1, i32 4
  store i32 %562, i32* %563, align 8
  %564 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %263, i64 1, i32 3
  store i32 %561, i32* %564, align 4
  %565 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %263, i64 1, i32 5
  store i32 %559, i32* %565, align 4
  %566 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %263, i64 1, i32 2
  store i32 %560, i32* %566, align 8
  %567 = add nuw nsw i64 %263, 1
  %568 = icmp eq i64 %567, %176
  br i1 %568, label %569, label %262

569:                                              ; preds = %515
  %570 = add nsw i32 %460, -1
  %571 = srem i32 %570, 40
  %572 = icmp slt i32 %571, 0
  %573 = add nsw i32 %571, 40
  %574 = select i1 %572, i32 %573, i32 %571
  store i32 %574, i32* %24, align 4
  %575 = add nsw i32 %574, %25
  %576 = srem i32 %575, 40
  br i1 %170, label %577, label %633

577:                                              ; preds = %569
  %578 = load i32, i32* %169, align 4
  br i1 %182, label %614, label %579

579:                                              ; preds = %577, %579
  %580 = phi i64 [ %611, %579 ], [ 1, %577 ]
  %581 = phi i32 [ %610, %579 ], [ %578, %577 ]
  %582 = phi i32 [ %609, %579 ], [ 0, %577 ]
  %583 = phi i64 [ %612, %579 ], [ %183, %577 ]
  %584 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %580, i64 0, i32 1
  %585 = load i32, i32* %584, align 4
  %586 = icmp slt i32 %585, %581
  %587 = trunc i64 %580 to i32
  %588 = select i1 %586, i32 %587, i32 %582
  %589 = select i1 %586, i32 %585, i32 %581
  %590 = add nuw nsw i64 %580, 1
  %591 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %590, i64 0, i32 1
  %592 = load i32, i32* %591, align 4
  %593 = icmp slt i32 %592, %589
  %594 = trunc i64 %590 to i32
  %595 = select i1 %593, i32 %594, i32 %588
  %596 = select i1 %593, i32 %592, i32 %589
  %597 = add nuw nsw i64 %580, 2
  %598 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %597, i64 0, i32 1
  %599 = load i32, i32* %598, align 4
  %600 = icmp slt i32 %599, %596
  %601 = trunc i64 %597 to i32
  %602 = select i1 %600, i32 %601, i32 %595
  %603 = select i1 %600, i32 %599, i32 %596
  %604 = add nuw nsw i64 %580, 3
  %605 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %604, i64 0, i32 1
  %606 = load i32, i32* %605, align 4
  %607 = icmp slt i32 %606, %603
  %608 = trunc i64 %604 to i32
  %609 = select i1 %607, i32 %608, i32 %602
  %610 = select i1 %607, i32 %606, i32 %603
  %611 = add nuw nsw i64 %580, 4
  %612 = add i64 %583, -4
  %613 = icmp eq i64 %612, 0
  br i1 %613, label %614, label %579

614:                                              ; preds = %579, %577
  %615 = phi i32 [ undef, %577 ], [ %609, %579 ]
  %616 = phi i64 [ 1, %577 ], [ %611, %579 ]
  %617 = phi i32 [ %578, %577 ], [ %610, %579 ]
  %618 = phi i32 [ 0, %577 ], [ %609, %579 ]
  br i1 %184, label %633, label %619

619:                                              ; preds = %614, %619
  %620 = phi i64 [ %630, %619 ], [ %616, %614 ]
  %621 = phi i32 [ %629, %619 ], [ %617, %614 ]
  %622 = phi i32 [ %628, %619 ], [ %618, %614 ]
  %623 = phi i64 [ %631, %619 ], [ %181, %614 ]
  %624 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %620, i64 0, i32 1
  %625 = load i32, i32* %624, align 4
  %626 = icmp slt i32 %625, %621
  %627 = trunc i64 %620 to i32
  %628 = select i1 %626, i32 %627, i32 %622
  %629 = select i1 %626, i32 %625, i32 %621
  %630 = add nuw nsw i64 %620, 1
  %631 = add i64 %623, -1
  %632 = icmp eq i64 %631, 0
  br i1 %632, label %633, label %619, !llvm.loop !12

633:                                              ; preds = %614, %619, %569
  %634 = phi i32 [ 0, %569 ], [ %615, %614 ], [ %628, %619 ]
  %635 = sext i32 %634 to i64
  %636 = sext i32 %576 to i64
  %637 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %635, i32 1, i64 %636
  %638 = load i32, i32* %637, align 4
  br label %639

639:                                              ; preds = %651, %633
  %640 = phi i64 [ 0, %633 ], [ %652, %651 ]
  %641 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %640, i32 1, i64 %636
  %642 = load i32, i32* %641, align 4
  %643 = icmp eq i32 %642, %638
  br i1 %643, label %651, label %644

644:                                              ; preds = %639
  %645 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %640, i64 0, i32 1
  %646 = load i32, i32* %645, align 4
  %647 = add nsw i32 %646, 134217727
  store i32 %647, i32* %645, align 4
  %648 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %640, i64 1, i32 1
  %649 = load i32, i32* %648, align 4
  %650 = add nsw i32 %649, 134217727
  store i32 %650, i32* %648, align 4
  br label %651

651:                                              ; preds = %639, %644
  %652 = add nuw nsw i64 %640, 1
  %653 = icmp eq i64 %652, %177
  br i1 %653, label %654, label %639

654:                                              ; preds = %651
  %655 = load i32, i32* %169, align 4
  %656 = load i32, i32* %171, align 4
  br i1 %170, label %657, label %713

657:                                              ; preds = %654
  br i1 %186, label %691, label %658

658:                                              ; preds = %657, %658
  %659 = phi i64 [ %688, %658 ], [ 1, %657 ]
  %660 = phi i32 [ %682, %658 ], [ %655, %657 ]
  %661 = phi i32 [ %687, %658 ], [ %656, %657 ]
  %662 = phi i32 [ %681, %658 ], [ 0, %657 ]
  %663 = phi i32 [ %686, %658 ], [ 0, %657 ]
  %664 = phi i64 [ %689, %658 ], [ %187, %657 ]
  %665 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %659, i64 0, i32 1
  %666 = load i32, i32* %665, align 4
  %667 = icmp sgt i32 %666, %660
  %668 = trunc i64 %659 to i32
  %669 = select i1 %667, i32 %668, i32 %662
  %670 = select i1 %667, i32 %666, i32 %660
  %671 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %659, i64 1, i32 1
  %672 = load i32, i32* %671, align 4
  %673 = icmp slt i32 %672, %661
  %674 = select i1 %673, i32 %668, i32 %663
  %675 = select i1 %673, i32 %672, i32 %661
  %676 = add nuw nsw i64 %659, 1
  %677 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %676, i64 0, i32 1
  %678 = load i32, i32* %677, align 4
  %679 = icmp sgt i32 %678, %670
  %680 = trunc i64 %676 to i32
  %681 = select i1 %679, i32 %680, i32 %669
  %682 = select i1 %679, i32 %678, i32 %670
  %683 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %676, i64 1, i32 1
  %684 = load i32, i32* %683, align 4
  %685 = icmp slt i32 %684, %675
  %686 = select i1 %685, i32 %680, i32 %674
  %687 = select i1 %685, i32 %684, i32 %675
  %688 = add nuw nsw i64 %659, 2
  %689 = add i64 %664, -2
  %690 = icmp eq i64 %689, 0
  br i1 %690, label %691, label %658

691:                                              ; preds = %658, %657
  %692 = phi i32 [ undef, %657 ], [ %681, %658 ]
  %693 = phi i32 [ undef, %657 ], [ %682, %658 ]
  %694 = phi i32 [ undef, %657 ], [ %686, %658 ]
  %695 = phi i32 [ undef, %657 ], [ %687, %658 ]
  %696 = phi i64 [ 1, %657 ], [ %688, %658 ]
  %697 = phi i32 [ %655, %657 ], [ %682, %658 ]
  %698 = phi i32 [ %656, %657 ], [ %687, %658 ]
  %699 = phi i32 [ 0, %657 ], [ %681, %658 ]
  %700 = phi i32 [ 0, %657 ], [ %686, %658 ]
  br i1 %188, label %713, label %701

701:                                              ; preds = %691
  %702 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %696, i64 0, i32 1
  %703 = load i32, i32* %702, align 4
  %704 = icmp sgt i32 %703, %697
  %705 = trunc i64 %696 to i32
  %706 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %696, i64 1, i32 1
  %707 = load i32, i32* %706, align 4
  %708 = icmp slt i32 %707, %698
  %709 = select i1 %708, i32 %707, i32 %698
  %710 = select i1 %708, i32 %705, i32 %700
  %711 = select i1 %704, i32 %703, i32 %697
  %712 = select i1 %704, i32 %705, i32 %699
  br label %713

713:                                              ; preds = %701, %691, %654
  %714 = phi i32 [ 0, %654 ], [ %694, %691 ], [ %710, %701 ]
  %715 = phi i32 [ 0, %654 ], [ %692, %691 ], [ %712, %701 ]
  %716 = phi i32 [ %656, %654 ], [ %695, %691 ], [ %709, %701 ]
  %717 = phi i32 [ %655, %654 ], [ %693, %691 ], [ %711, %701 ]
  %718 = icmp slt i32 %716, %717
  br i1 %718, label %719, label %732

719:                                              ; preds = %713
  %720 = sext i32 %715 to i64
  %721 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %720, i32 0, i64 %197
  %722 = bitcast i32* %721 to i8*
  %723 = sext i32 %714 to i64
  %724 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %723, i32 0, i64 %197
  %725 = bitcast i32* %724 to i8*
  %726 = shl nuw nsw i64 %197, 2
  %727 = sub nsw i64 1296, %726
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %722, i8* align 4 %725, i64 %727, i1 false)
  %728 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %720, i64 0
  %729 = bitcast %struct.NSQ_sample_struct* %728 to i8*
  %730 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %723, i64 1
  %731 = bitcast %struct.NSQ_sample_struct* %730 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %729, i8* align 8 %731, i64 24, i1 false)
  br label %732

732:                                              ; preds = %719, %713
  %733 = icmp slt i64 %197, %174
  %734 = and i1 %172, %733
  br i1 %734, label %776, label %735

735:                                              ; preds = %732
  %736 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %635, i32 2, i64 %636
  %737 = load i32, i32* %736, align 4
  %738 = lshr i32 %737, 9
  %739 = add nuw nsw i32 %738, 1
  %740 = lshr i32 %739, 1
  %741 = trunc i32 %740 to i8
  %742 = trunc i64 %197 to i32
  %743 = sub nsw i32 %742, %25
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds i8, i8* %4, i64 %744
  store i8 %741, i8* %745, align 1
  %746 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %635, i32 3, i64 %636
  %747 = load i32, i32* %746, align 4
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds i32, i32* %7, i64 %636
  %750 = load i32, i32* %749, align 4
  %751 = sext i32 %750 to i64
  %752 = mul nsw i64 %751, %748
  %753 = lshr i64 %752, 16
  %754 = trunc i64 %753 to i32
  %755 = ashr i32 %754, 7
  %756 = add nsw i32 %755, 1
  %757 = lshr i32 %756, 1
  %758 = icmp sgt i32 %754, 8388479
  %759 = icmp slt i32 %756, -65536
  %760 = select i1 %759, i32 32768, i32 %757
  %761 = select i1 %758, i32 32767, i32 %760
  %762 = trunc i32 %761 to i16
  %763 = getelementptr inbounds i16, i16* %5, i64 %744
  store i16 %762, i16* %763, align 2
  %764 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %635, i32 5, i64 %636
  %765 = load i32, i32* %764, align 4
  %766 = load i32, i32* %34, align 4
  %767 = sub nsw i32 %766, %25
  %768 = sext i32 %767 to i64
  %769 = getelementptr inbounds %struct.silk_nsq_state, %struct.silk_nsq_state* %0, i64 0, i32 1, i64 %768
  store i32 %765, i32* %769, align 4
  %770 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %635, i32 4, i64 %636
  %771 = load i32, i32* %770, align 4
  %772 = load i32, i32* %40, align 4
  %773 = sub nsw i32 %772, %25
  %774 = sext i32 %773 to i64
  %775 = getelementptr inbounds i32, i32* %6, i64 %774
  store i32 %771, i32* %775, align 4
  br label %776

776:                                              ; preds = %735, %732
  %777 = load i32, i32* %34, align 4
  %778 = add nsw i32 %777, 1
  store i32 %778, i32* %34, align 4
  %779 = load i32, i32* %40, align 4
  %780 = add nsw i32 %779, 1
  store i32 %780, i32* %40, align 4
  %781 = add nuw nsw i64 %197, 16
  br label %782

782:                                              ; preds = %782, %776
  %783 = phi i64 [ 0, %776 ], [ %821, %782 ]
  %784 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %783, i64 0, i32 3
  %785 = load i32, i32* %784, align 4
  %786 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %783, i32 7
  store i32 %785, i32* %786, align 4
  %787 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %783, i64 0, i32 2
  %788 = load i32, i32* %787, align 8
  %789 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %783, i32 0, i64 %781
  store i32 %788, i32* %789, align 4
  %790 = load i32, i32* %24, align 4
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %783, i32 3, i64 %791
  store i32 %788, i32* %792, align 4
  %793 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %783, i64 0, i32 0
  %794 = load i32, i32* %793, align 16
  %795 = load i32, i32* %24, align 4
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %783, i32 2, i64 %796
  store i32 %794, i32* %797, align 4
  %798 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %783, i64 0, i32 5
  %799 = load i32, i32* %798, align 4
  %800 = shl i32 %799, 1
  %801 = load i32, i32* %24, align 4
  %802 = sext i32 %801 to i64
  %803 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %783, i32 4, i64 %802
  store i32 %800, i32* %803, align 4
  %804 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %783, i64 0, i32 4
  %805 = load i32, i32* %804, align 16
  %806 = load i32, i32* %24, align 4
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %783, i32 5, i64 %807
  store i32 %805, i32* %808, align 4
  %809 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %783, i32 8
  %810 = load i32, i32* %809, align 4
  %811 = ashr i32 %794, 9
  %812 = add nsw i32 %811, 1
  %813 = ashr i32 %812, 1
  %814 = add i32 %810, %813
  store i32 %814, i32* %809, align 4
  %815 = load i32, i32* %24, align 4
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %783, i32 1, i64 %816
  store i32 %814, i32* %817, align 4
  %818 = getelementptr inbounds [2 x %struct.NSQ_sample_struct], [2 x %struct.NSQ_sample_struct]* %32, i64 %783, i64 0, i32 1
  %819 = load i32, i32* %818, align 4
  %820 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %783, i32 10
  store i32 %819, i32* %820, align 4
  %821 = add nuw nsw i64 %783, 1
  %822 = icmp eq i64 %821, %178
  br i1 %822, label %823, label %782

823:                                              ; preds = %782
  %824 = load i32, i32* %24, align 4
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds i32, i32* %7, i64 %825
  store i32 %46, i32* %826, align 4
  %827 = add nuw nsw i64 %197, 1
  %828 = icmp eq i64 %827, %175
  br i1 %828, label %189, label %196

829:                                              ; preds = %829, %194
  %830 = phi i64 [ 0, %194 ], [ %841, %829 ]
  %831 = phi i64 [ %195, %194 ], [ %842, %829 ]
  %832 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %830, i32 0
  %833 = bitcast [96 x i32]* %832 to i8*
  %834 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %830, i32 0, i64 %190
  %835 = bitcast i32* %834 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %833, i8* align 4 %835, i64 64, i1 false)
  %836 = or i64 %830, 1
  %837 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %836, i32 0
  %838 = bitcast [96 x i32]* %837 to i8*
  %839 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %836, i32 0, i64 %190
  %840 = bitcast i32* %839 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %838, i8* align 4 %840, i64 64, i1 false)
  %841 = add nuw nsw i64 %830, 2
  %842 = add i64 %831, -2
  %843 = icmp eq i64 %842, 0
  br i1 %843, label %844, label %829

844:                                              ; preds = %829, %189
  %845 = phi i64 [ 0, %189 ], [ %841, %829 ]
  %846 = icmp eq i64 %192, 0
  br i1 %846, label %852, label %847

847:                                              ; preds = %844
  %848 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %845, i32 0
  %849 = bitcast [96 x i32]* %848 to i8*
  %850 = getelementptr inbounds %struct.NSQ_del_dec_struct, %struct.NSQ_del_dec_struct* %1, i64 %845, i32 0, i64 %190
  %851 = bitcast i32* %850 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %849, i8* align 4 %851, i64 64, i1 false)
  br label %852

852:                                              ; preds = %844, %847
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = !{i32 0, i32 33}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
!11 = !{!"branch_weights", i32 2000, i32 1}
!12 = distinct !{!12, !7}
