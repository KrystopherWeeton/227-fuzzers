; ModuleID = '../../third_party/skia/src/core/SkFont.cpp'
source_filename = "../../third_party/skia/src/core/SkFont.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkStrikeSpec = type <{ %class.SkAutoDescriptor, %class.sk_sp.8, %class.sk_sp.6, %class.sk_sp, float, [4 x i8] }>
%class.SkAutoDescriptor = type { %class.SkDescriptor*, [120 x i8] }
%class.SkDescriptor = type { i32, i32, i32 }
%class.sk_sp.8 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.6 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%class.SkPaint = type <{ %class.sk_sp.6, %class.sk_sp.7, %class.sk_sp.8, %class.sk_sp.9, %class.sk_sp.10, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.7 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.9 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.10 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkConvertToUTF32 = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type { i32*, %union.anon.11 }
%union.anon.11 = type { [256 x i32] }
%class.SkAutoToGlyphs = type <{ %class.SkAutoSTArray, i16*, i32, [4 x i8] }>
%class.SkAutoSTArray = type { i32, i16*, [64 x i8] }
%class.SkBulkGlyphMetrics = type { %class.SkAutoSTArray.12, %class.sk_sp.21 }
%class.SkAutoSTArray.12 = type { i32, %class.SkGlyph**, [160 x i8] }
%class.SkGlyph = type { i16, i16, i16, i16, i8*, %"struct.SkGlyph::PathData"*, float, float, i8, i8, %struct.SkPackedGlyphID }
%"struct.SkGlyph::PathData" = type <{ %"struct.SkGlyph::Intercept"*, %class.SkPath, i8, [7 x i8] }>
%"struct.SkGlyph::Intercept" = type { %"struct.SkGlyph::Intercept"*, [2 x float], [2 x float] }
%class.SkPath = type <{ %class.sk_sp.13, i32, %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", i8, i8 }>
%class.sk_sp.13 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.14, %class.SkTDArray.15, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.14 = type { i8*, i32, i32 }
%class.SkTDArray.15 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.16 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.16 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.17", [3 x i8] }
%"struct.std::__1::atomic.17" = type { %"struct.std::__1::__atomic_base.18" }
%"struct.std::__1::__atomic_base.18" = type { %"struct.std::__1::__cxx_atomic_impl.19" }
%"struct.std::__1::__cxx_atomic_impl.19" = type { %"struct.std::__1::__cxx_atomic_base_impl.20" }
%"struct.std::__1::__cxx_atomic_base_impl.20" = type { i8 }
%struct.SkPackedGlyphID = type { i32 }
%class.sk_sp.21 = type { %"class.SkStrikeCache::Strike"* }
%"class.SkStrikeCache::Strike" = type <{ %class.SkRefCnt.base, [4 x i8], %class.SkStrikeForGPU, %class.SkStrikeCache*, %"class.SkStrikeCache::Strike"*, %"class.SkStrikeCache::Strike"*, %class.SkScalerCache, %"class.std::__1::unique_ptr.41", i64, i8, [7 x i8] }>
%class.SkStrikeForGPU = type { i32 (...)** }
%class.SkStrikeCache = type { %class.SkStrikeForGPUCacheInterface, %class.SkMutex, %"class.SkStrikeCache::Strike"*, %"class.SkStrikeCache::Strike"*, %class.SkTHashTable, i64, i64, i32, i32 }
%class.SkStrikeForGPUCacheInterface = type { i32 (...)** }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<sk_sp<SkStrikeCache::Strike>, SkDescriptor, SkStrikeCache::StrikeTraits>::Slot"* }
%"struct.SkTHashTable<sk_sp<SkStrikeCache::Strike>, SkDescriptor, SkStrikeCache::StrikeTraits>::Slot" = type opaque
%class.SkScalerCache = type { %class.SkAutoDescriptor, %"class.std::__1::unique_ptr.23", %struct.SkFontMetrics, %struct.SkGlyphPositionRoundingSpec, %class.SkMutex, %class.SkTHashMap, %"class.std::__1::vector", %class.SkArenaAlloc }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %class.SkScalerContext* }
%class.SkScalerContext = type { i32 (...)**, %struct.SkScalerContextRec, %class.sk_sp, %class.sk_sp.6, %class.sk_sp.8, i8, %class.SkTMaskPreBlend }
%struct.SkScalerContextRec = type { i32, float, float, float, [2 x [2 x float]], float, float, i32, i8, i8, i8, i8, i8, i8, i16 }
%class.SkTMaskPreBlend = type { %class.sk_sp.26, i8*, i8*, i8* }
%class.sk_sp.26 = type { %class.SkTMaskGamma* }
%class.SkTMaskGamma = type { %class.SkRefCnt.base, [8 x [256 x i8]], i8, [3 x i8] }
%struct.SkFontMetrics = type { i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }
%struct.SkGlyphPositionRoundingSpec = type { %struct.SkPoint, %struct.SkIPoint, %struct.SkIPoint }
%struct.SkIPoint = type { i32, i32 }
%class.SkTHashMap = type { %class.SkTHashTable.30 }
%class.SkTHashTable.30 = type { i32, i32, %class.SkAutoTArray.31 }
%class.SkAutoTArray.31 = type { %"class.std::__1::unique_ptr.32" }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.SkTHashTable<SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair, SkPackedGlyphID, SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair, SkPackedGlyphID, SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %struct.SkPackedGlyphID, %class.SkGlyphDigest }
%class.SkGlyphDigest = type { [3 x i8], i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.SkGlyph**, %class.SkGlyph**, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %class.SkGlyph** }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.41" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %class.SkStrikePinner* }
%class.SkStrikePinner = type { i32 (...)** }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkBulkGlyphMetricsAndPaths = type { %class.SkAutoSTArray.12, %class.sk_sp.21 }
%struct.Pair = type { %class.SkPath*, i8 }

$_ZN16SkConvertToUTF327convertEPKvm14SkTextEncoding = comdat any

$_ZN14SkAutoToGlyphsC2ERK6SkFontPKvm14SkTextEncoding = comdat any

@.str = private unnamed_addr constant [43 x i8] c"../../third_party/skia/src/core/SkFont.cpp\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"typeface %p\0A\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"size %g\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"skewx %g\0A\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"scalex %g\0A\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"flags 0x%X\0A\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"edging %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"hinting %d\0A\00", align 1
@__const._ZNK6SkFont10getMetricsEP13SkFontMetrics.strikeSpec = private unnamed_addr constant %class.SkStrikeSpec <{ %class.SkAutoDescriptor { %class.SkDescriptor* inttoptr (i64 -6148914691236517206 to %class.SkDescriptor*), [120 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" }, %class.sk_sp.8 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.6 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp { %class.SkTypeface* inttoptr (i64 -6148914691236517206 to %class.SkTypeface*) }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@.str.8 = private unnamed_addr constant [16 x i8] c"unexpected enum\00", align 1

@_ZN6SkFontC1E5sk_spI10SkTypefaceEfff = hidden unnamed_addr alias void (%class.SkFont*, %class.sk_sp*, float, float, float), void (%class.SkFont*, %class.sk_sp*, float, float, float)* @_ZN6SkFontC2E5sk_spI10SkTypefaceEfff
@_ZN6SkFontC1E5sk_spI10SkTypefaceEf = hidden unnamed_addr alias void (%class.SkFont*, %class.sk_sp*, float), void (%class.SkFont*, %class.sk_sp*, float)* @_ZN6SkFontC2E5sk_spI10SkTypefaceEf
@_ZN6SkFontC1E5sk_spI10SkTypefaceE = hidden unnamed_addr alias void (%class.SkFont*, %class.sk_sp*), void (%class.SkFont*, %class.sk_sp*)* @_ZN6SkFontC2E5sk_spI10SkTypefaceE
@_ZN6SkFontC1Ev = hidden unnamed_addr alias void (%class.SkFont*), void (%class.SkFont*)* @_ZN6SkFontC2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6SkFontC2E5sk_spI10SkTypefaceEfff(%class.SkFont* nocapture, %class.sk_sp* nocapture, float, float, float) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %7 = bitcast %class.sk_sp* %1 to i64*
  %8 = load i64, i64* %7, align 8
  store %class.SkTypeface* null, %class.SkTypeface** %6, align 8
  %9 = bitcast %class.SkFont* %0 to i64*
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  %11 = fcmp ogt float %2, 0.000000e+00
  %12 = select i1 %11, float %2, float 0.000000e+00
  store float %12, float* %10, align 8
  %13 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 2
  store float %3, float* %13, align 4
  %14 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 3
  store float %4, float* %14, align 8
  %15 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  store i8 32, i8* %15, align 4
  %16 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 5
  store i8 1, i8* %16, align 1
  %17 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 6
  store i8 2, i8* %17, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkFontC2E5sk_spI10SkTypefaceEf(%class.SkFont* nocapture, %class.sk_sp* nocapture, float) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %5 = bitcast %class.sk_sp* %1 to i64*
  %6 = load i64, i64* %5, align 8
  store %class.SkTypeface* null, %class.SkTypeface** %4, align 8
  %7 = bitcast %class.SkFont* %0 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  %9 = fcmp ogt float %2, 0.000000e+00
  %10 = select i1 %9, float %2, float 0.000000e+00
  store float %10, float* %8, align 8
  %11 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 2
  store float 1.000000e+00, float* %11, align 4
  %12 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 3
  store float 0.000000e+00, float* %12, align 8
  %13 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  store i8 32, i8* %13, align 4
  %14 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 5
  store i8 1, i8* %14, align 1
  %15 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 6
  store i8 2, i8* %15, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkFontC2E5sk_spI10SkTypefaceE(%class.SkFont* nocapture, %class.sk_sp* nocapture) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %4 = bitcast %class.sk_sp* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %class.SkTypeface* null, %class.SkTypeface** %3, align 8
  %6 = bitcast %class.SkFont* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  store float 1.200000e+01, float* %7, align 8
  %8 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 2
  store float 1.000000e+00, float* %8, align 4
  %9 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 3
  store float 0.000000e+00, float* %9, align 8
  %10 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  store i8 32, i8* %10, align 4
  %11 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 5
  store i8 1, i8* %11, align 1
  %12 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 6
  store i8 2, i8* %12, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkFontC2Ev(%class.SkFont* nocapture) unnamed_addr #1 align 2 {
  %2 = bitcast %class.SkFont* %0 to i64*
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  store float 1.200000e+01, float* %3, align 8
  %4 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 2
  store float 1.000000e+00, float* %4, align 4
  %5 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 3
  store float 0.000000e+00, float* %5, align 8
  %6 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  store i8 32, i8* %6, align 4
  %7 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 5
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 6
  store i8 2, i8* %8, align 2
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6SkFonteqERKS_(%class.SkFont* nocapture readonly, %class.SkFont* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 0, i32 0
  %4 = load %class.SkTypeface*, %class.SkTypeface** %3, align 8
  %5 = getelementptr inbounds %class.SkFont, %class.SkFont* %1, i64 0, i32 0, i32 0
  %6 = load %class.SkTypeface*, %class.SkTypeface** %5, align 8
  %7 = icmp eq %class.SkTypeface* %4, %6
  br i1 %7, label %8, label %44

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  %10 = load float, float* %9, align 8
  %11 = getelementptr inbounds %class.SkFont, %class.SkFont* %1, i64 0, i32 1
  %12 = load float, float* %11, align 8
  %13 = fcmp oeq float %10, %12
  br i1 %13, label %14, label %44

14:                                               ; preds = %8
  %15 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %class.SkFont, %class.SkFont* %1, i64 0, i32 2
  %18 = load float, float* %17, align 4
  %19 = fcmp oeq float %16, %18
  br i1 %19, label %20, label %44

20:                                               ; preds = %14
  %21 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 3
  %22 = load float, float* %21, align 8
  %23 = getelementptr inbounds %class.SkFont, %class.SkFont* %1, i64 0, i32 3
  %24 = load float, float* %23, align 8
  %25 = fcmp oeq float %22, %24
  br i1 %25, label %26, label %44

26:                                               ; preds = %20
  %27 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  %28 = load i8, i8* %27, align 4
  %29 = getelementptr inbounds %class.SkFont, %class.SkFont* %1, i64 0, i32 4
  %30 = load i8, i8* %29, align 4
  %31 = icmp eq i8 %28, %30
  br i1 %31, label %32, label %44

32:                                               ; preds = %26
  %33 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 5
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds %class.SkFont, %class.SkFont* %1, i64 0, i32 5
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %32
  %39 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 6
  %40 = load i8, i8* %39, align 2
  %41 = getelementptr inbounds %class.SkFont, %class.SkFont* %1, i64 0, i32 6
  %42 = load i8, i8* %41, align 2
  %43 = icmp eq i8 %40, %42
  br label %44

44:                                               ; preds = %38, %32, %26, %20, %14, %8, %2
  %45 = phi i1 [ false, %32 ], [ false, %26 ], [ false, %20 ], [ false, %14 ], [ false, %8 ], [ false, %2 ], [ %43, %38 ]
  ret i1 %45
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6SkFont4dumpEv(%class.SkFont* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 0, i32 0
  %3 = load %class.SkTypeface*, %class.SkTypeface** %2, align 8
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i32 60, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), %class.SkTypeface* %3) #13
  %4 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  %5 = load float, float* %4, align 8
  %6 = fpext float %5 to double
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i32 61, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), double %6) #13
  %7 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 3
  %8 = load float, float* %7, align 8
  %9 = fpext float %8 to double
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i32 62, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), double %9) #13
  %10 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 2
  %11 = load float, float* %10, align 4
  %12 = fpext float %11 to double
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), double %12) #13
  %13 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  %14 = load i8, i8* %13, align 4
  %15 = zext i8 %14 to i32
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i32 %15) #13
  %16 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 5
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i32 65, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 %18) #13
  %19 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 6
  %20 = load i8, i8* %19, align 2
  %21 = zext i8 %20 to i32
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i32 66, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0), i32 %21) #13
  ret void
}

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6SkFont19setForceAutoHintingEb(%class.SkFont* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 4
  %5 = or i8 %4, 1
  %6 = and i8 %4, -2
  %7 = select i1 %1, i8 %5, i8 %6
  store i8 %7, i8* %3, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6SkFont18setEmbeddedBitmapsEb(%class.SkFont* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 4
  %5 = or i8 %4, 2
  %6 = and i8 %4, -3
  %7 = select i1 %1, i8 %5, i8 %6
  store i8 %7, i8* %3, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6SkFont11setSubpixelEb(%class.SkFont* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 4
  %5 = or i8 %4, 4
  %6 = and i8 %4, -5
  %7 = select i1 %1, i8 %5, i8 %6
  store i8 %7, i8* %3, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6SkFont16setLinearMetricsEb(%class.SkFont* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 4
  %5 = or i8 %4, 8
  %6 = and i8 %4, -9
  %7 = select i1 %1, i8 %5, i8 %6
  store i8 %7, i8* %3, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6SkFont11setEmboldenEb(%class.SkFont* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 4
  %5 = or i8 %4, 16
  %6 = and i8 %4, -17
  %7 = select i1 %1, i8 %5, i8 %6
  store i8 %7, i8* %3, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6SkFont15setBaselineSnapEb(%class.SkFont* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 4
  %5 = or i8 %4, 32
  %6 = and i8 %4, -33
  %7 = select i1 %1, i8 %5, i8 %6
  store i8 %7, i8* %3, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6SkFont9setEdgingENS_6EdgingE(%class.SkFont* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = trunc i32 %1 to i8
  %4 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 5
  store i8 %3, i8* %4, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6SkFont10setHintingE13SkFontHinting(%class.SkFont* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = trunc i32 %1 to i8
  %4 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 6
  store i8 %3, i8* %4, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6SkFont7setSizeEf(%class.SkFont* nocapture, float) local_unnamed_addr #4 align 2 {
  %3 = fcmp ogt float %1, 0.000000e+00
  %4 = select i1 %3, float %1, float 0.000000e+00
  %5 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  store float %4, float* %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6SkFont9setScaleXEf(%class.SkFont* nocapture, float) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 2
  store float %1, float* %3, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6SkFont8setSkewXEf(%class.SkFont* nocapture, float) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 3
  store float %1, float* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6SkFont12makeWithSizeEf(%class.SkFont* noalias nocapture sret, %class.SkFont* nocapture readonly, float) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 0, i32 0
  store %class.SkTypeface* inttoptr (i64 -6148914691236517206 to %class.SkTypeface*), %class.SkTypeface** %4, align 8
  %5 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %5, align 8
  %6 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 2
  store float 0xFFFFFFFFE0000000, float* %6, align 4
  %7 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 3
  store float 0xFFFFFFFFE0000000, float* %7, align 8
  %8 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  %9 = getelementptr inbounds %class.SkFont, %class.SkFont* %1, i64 0, i32 0, i32 0
  %10 = bitcast i8* %8 to i32*
  store i32 -1431655766, i32* %10, align 4
  %11 = load %class.SkTypeface*, %class.SkTypeface** %9, align 8
  %12 = icmp eq %class.SkTypeface* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 1 monotonic
  br label %16

16:                                               ; preds = %3, %13
  store %class.SkTypeface* %11, %class.SkTypeface** %4, align 8
  %17 = getelementptr inbounds %class.SkFont, %class.SkFont* %1, i64 0, i32 1
  %18 = bitcast float* %5 to i8*
  %19 = bitcast float* %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 15, i1 false) #13
  %20 = fcmp ogt float %2, 0.000000e+00
  %21 = select i1 %20, float %2, float 0.000000e+00
  store float %21, float* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN6SkFont15setupForAsPathsEP7SkPaint(%class.SkFont* nocapture, %class.SkPaint*) local_unnamed_addr #1 align 2 {
  %3 = alloca %class.sk_sp.6, align 8
  %4 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  %5 = load i8, i8* %4, align 4
  %6 = and i8 %5, -8
  %7 = or i8 %6, 4
  store i8 %7, i8* %4, align 4
  %8 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 6
  store i8 0, i8* %8, align 2
  %9 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 5
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 2
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  store i8 1, i8* %9, align 1
  br label %13

13:                                               ; preds = %12, %2
  %14 = icmp eq %class.SkPaint* %1, null
  br i1 %14, label %29, label %15

15:                                               ; preds = %13
  tail call void @_ZN7SkPaint8setStyleENS_5StyleE(%class.SkPaint* nonnull %1, i8 zeroext 0) #13
  %16 = getelementptr inbounds %class.sk_sp.6, %class.sk_sp.6* %3, i64 0, i32 0
  store %class.SkPathEffect* null, %class.SkPathEffect** %16, align 8
  call void @_ZN7SkPaint13setPathEffectE5sk_spI12SkPathEffectE(%class.SkPaint* nonnull %1, %class.sk_sp.6* nonnull %3) #13
  %17 = load %class.SkPathEffect*, %class.SkPathEffect** %16, align 8
  %18 = icmp eq %class.SkPathEffect* %17, null
  br i1 %18, label %29, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %17, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = atomicrmw add i32* %20, i32 -1 acq_rel
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %29

23:                                               ; preds = %19
  %24 = bitcast %class.SkPathEffect* %17 to %class.SkRefCntBase*
  %25 = bitcast %class.SkPathEffect* %17 to void (%class.SkRefCntBase*)***
  %26 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %25, align 8
  %27 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %26, i64 2
  %28 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %27, align 8
  call void %28(%class.SkRefCntBase* nonnull %24) #13
  br label %29

29:                                               ; preds = %23, %19, %15, %13
  %30 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  %31 = load float, float* %30, align 8
  store float 6.400000e+01, float* %30, align 8
  %32 = fmul float %31, 1.562500e-02
  ret float %32
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare void @_ZN7SkPaint8setStyleENS_5StyleE(%class.SkPaint*, i8 zeroext) local_unnamed_addr #3

declare void @_ZN7SkPaint13setPathEffectE5sk_spI12SkPathEffectE(%class.SkPaint*, %class.sk_sp.6*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6SkFont19hasSomeAntiAliasingEv(%class.SkFont* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = add nsw i32 %4, -1
  %6 = icmp ult i32 %5, 2
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i16 @_ZNK6SkFont14unicharToGlyphEi(%class.SkFont* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 0, i32 0
  %4 = load %class.SkTypeface*, %class.SkTypeface** %3, align 8
  %5 = icmp eq %class.SkTypeface* %4, null
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = tail call %class.SkTypeface* @_ZN10SkTypeface18GetDefaultTypefaceENS_5StyleE(i32 0) #13
  br label %8

8:                                                ; preds = %2, %6
  %9 = phi %class.SkTypeface* [ %7, %6 ], [ %4, %2 ]
  %10 = tail call zeroext i16 @_ZNK10SkTypeface14unicharToGlyphEi(%class.SkTypeface* %9, i32 %1) #13
  ret i16 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkTypeface* @_ZNK6SkFont20getTypefaceOrDefaultEv(%class.SkFont* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 0, i32 0
  %3 = load %class.SkTypeface*, %class.SkTypeface** %2, align 8
  %4 = icmp eq %class.SkTypeface* %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = tail call %class.SkTypeface* @_ZN10SkTypeface18GetDefaultTypefaceENS_5StyleE(i32 0) #13
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi %class.SkTypeface* [ %6, %5 ], [ %3, %1 ]
  ret %class.SkTypeface* %8
}

declare zeroext i16 @_ZNK10SkTypeface14unicharToGlyphEi(%class.SkTypeface*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6SkFont16unicharsToGlyphsEPKiiPt(%class.SkFont* nocapture readonly, i32*, i32, i16*) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 0, i32 0
  %6 = load %class.SkTypeface*, %class.SkTypeface** %5, align 8
  %7 = icmp eq %class.SkTypeface* %6, null
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = tail call %class.SkTypeface* @_ZN10SkTypeface18GetDefaultTypefaceENS_5StyleE(i32 0) #13
  br label %10

10:                                               ; preds = %4, %8
  %11 = phi %class.SkTypeface* [ %9, %8 ], [ %6, %4 ]
  tail call void @_ZNK10SkTypeface16unicharsToGlyphsEPKiiPt(%class.SkTypeface* %11, i32* %1, i32 %2, i16* %3) #13
  ret void
}

declare void @_ZNK10SkTypeface16unicharsToGlyphsEPKiiPt(%class.SkTypeface*, i32*, i32, i16*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK6SkFont12textToGlyphsEPKvm14SkTextEncodingPti(%class.SkFont* nocapture readonly, i8*, i64, i32, i16*, i32) local_unnamed_addr #1 align 2 {
  %7 = alloca %class.SkConvertToUTF32, align 8
  %8 = icmp eq i64 %2, 0
  br i1 %8, label %51, label %9

9:                                                ; preds = %6
  switch i32 %3, label %21 [
    i32 0, label %10
    i32 1, label %12
    i32 2, label %15
    i32 3, label %18
  ]

10:                                               ; preds = %9
  %11 = tail call i32 @_ZN5SkUTF9CountUTF8EPKcm(i8* %1, i64 %2) #13
  br label %21

12:                                               ; preds = %9
  %13 = bitcast i8* %1 to i16*
  %14 = tail call i32 @_ZN5SkUTF10CountUTF16EPKtm(i16* %13, i64 %2) #13
  br label %21

15:                                               ; preds = %9
  %16 = lshr i64 %2, 2
  %17 = trunc i64 %16 to i32
  br label %21

18:                                               ; preds = %9
  %19 = lshr i64 %2, 1
  %20 = trunc i64 %19 to i32
  br label %21

21:                                               ; preds = %9, %10, %12, %15, %18
  %22 = phi i32 [ %20, %18 ], [ %17, %15 ], [ %14, %12 ], [ %11, %10 ], [ 0, %9 ]
  %23 = icmp eq i16* %4, null
  %24 = icmp sgt i32 %22, %5
  %25 = or i1 %23, %24
  br i1 %25, label %51, label %26

26:                                               ; preds = %21
  %27 = icmp eq i32 %3, 3
  br i1 %27, label %28, label %32

28:                                               ; preds = %26
  %29 = bitcast i16* %4 to i8*
  %30 = shl i32 %22, 1
  %31 = sext i32 %30 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %29, i8* align 1 %1, i64 %31, i1 false)
  br label %51

32:                                               ; preds = %26
  %33 = bitcast %class.SkConvertToUTF32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %33) #13
  %34 = getelementptr inbounds %class.SkConvertToUTF32, %class.SkConvertToUTF32* %7, i64 0, i32 0, i32 1
  %35 = bitcast %union.anon.11* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 1024, i1 false)
  %36 = getelementptr inbounds %class.SkConvertToUTF32, %class.SkConvertToUTF32* %7, i64 0, i32 0, i32 0
  %37 = getelementptr inbounds %class.SkConvertToUTF32, %class.SkConvertToUTF32* %7, i64 0, i32 0, i32 1, i32 0, i64 0
  store i32* %37, i32** %36, align 8
  %38 = call i32* @_ZN16SkConvertToUTF327convertEPKvm14SkTextEncoding(%class.SkConvertToUTF32* nonnull %7, i8* %1, i64 %2, i32 %3)
  %39 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 0, i32 0
  %40 = load %class.SkTypeface*, %class.SkTypeface** %39, align 8
  %41 = icmp eq %class.SkTypeface* %40, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %32
  %43 = call %class.SkTypeface* @_ZN10SkTypeface18GetDefaultTypefaceENS_5StyleE(i32 0) #13
  br label %44

44:                                               ; preds = %32, %42
  %45 = phi %class.SkTypeface* [ %43, %42 ], [ %40, %32 ]
  call void @_ZNK10SkTypeface16unicharsToGlyphsEPKiiPt(%class.SkTypeface* %45, i32* %38, i32 %22, i16* nonnull %4) #13
  %46 = load i32*, i32** %36, align 8
  %47 = icmp eq i32* %46, %37
  br i1 %47, label %50, label %48

48:                                               ; preds = %44
  %49 = bitcast i32* %46 to i8*
  call void @_Z7sk_freePv(i8* %49) #13
  br label %50

50:                                               ; preds = %44, %48
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %33) #13
  br label %51

51:                                               ; preds = %28, %50, %21, %6
  %52 = phi i32 [ 0, %6 ], [ %22, %21 ], [ %22, %50 ], [ %22, %28 ]
  ret i32 %52
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN10SkFontPriv17CountTextElementsEPKvm14SkTextEncoding(i8*, i64, i32) local_unnamed_addr #1 align 2 {
  switch i32 %2, label %15 [
    i32 0, label %4
    i32 1, label %6
    i32 2, label %9
    i32 3, label %12
  ]

4:                                                ; preds = %3
  %5 = tail call i32 @_ZN5SkUTF9CountUTF8EPKcm(i8* %0, i64 %1) #13
  br label %15

6:                                                ; preds = %3
  %7 = bitcast i8* %0 to i16*
  %8 = tail call i32 @_ZN5SkUTF10CountUTF16EPKtm(i16* %7, i64 %1) #13
  br label %15

9:                                                ; preds = %3
  %10 = lshr i64 %1, 2
  %11 = trunc i64 %10 to i32
  br label %15

12:                                               ; preds = %3
  %13 = lshr i64 %1, 1
  %14 = trunc i64 %13 to i32
  br label %15

15:                                               ; preds = %3, %12, %9, %6, %4
  %16 = phi i32 [ %14, %12 ], [ %11, %9 ], [ %8, %6 ], [ %5, %4 ], [ 0, %3 ]
  ret i32 %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZN16SkConvertToUTF327convertEPKvm14SkTextEncoding(%class.SkConvertToUTF32*, i8*, i64, i32) local_unnamed_addr #1 comdat align 2 {
  %5 = alloca i8*, align 8
  %6 = alloca i16*, align 8
  switch i32 %3, label %79 [
    i32 0, label %7
    i32 1, label %43
    i32 2, label %77
  ]

7:                                                ; preds = %4
  %8 = getelementptr inbounds %class.SkConvertToUTF32, %class.SkConvertToUTF32* %0, i64 0, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %class.SkConvertToUTF32, %class.SkConvertToUTF32* %0, i64 0, i32 0, i32 1, i32 0, i64 0
  %11 = icmp eq i32* %9, %10
  br i1 %11, label %14, label %12

12:                                               ; preds = %7
  %13 = bitcast i32* %9 to i8*
  tail call void @_Z7sk_freePv(i8* %13) #13
  br label %14

14:                                               ; preds = %12, %7
  %15 = icmp ugt i64 %2, 256
  br i1 %15, label %22, label %16

16:                                               ; preds = %14
  %17 = icmp eq i64 %2, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %16
  store i32* %10, i32** %8, align 8
  %19 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #13
  store i8* %1, i8** %5, align 8
  br label %28

20:                                               ; preds = %16
  store i32* null, i32** %8, align 8
  %21 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #13
  store i8* %1, i8** %5, align 8
  br label %32

22:                                               ; preds = %14
  %23 = tail call i8* @_Z15sk_malloc_throwmm(i64 %2, i64 4) #13
  %24 = bitcast %class.SkConvertToUTF32* %0 to i8**
  store i8* %23, i8** %24, align 8
  %25 = bitcast i8* %23 to i32*
  %26 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #13
  store i8* %1, i8** %5, align 8
  %27 = icmp sgt i64 %2, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %18, %22
  %29 = phi i8* [ %19, %18 ], [ %26, %22 ]
  %30 = phi i32* [ %10, %18 ], [ %25, %22 ]
  %31 = getelementptr inbounds i8, i8* %1, i64 %2
  br label %35

32:                                               ; preds = %35, %20, %22
  %33 = phi i8* [ %26, %22 ], [ %21, %20 ], [ %29, %35 ]
  %34 = phi i32* [ %25, %22 ], [ null, %20 ], [ %30, %35 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #13
  br label %80

35:                                               ; preds = %28, %35
  %36 = phi i64 [ 0, %28 ], [ %40, %35 ]
  %37 = call i32 @_ZN5SkUTF8NextUTF8EPPKcS1_(i8** nonnull %5, i8* %31) #13
  %38 = load i32*, i32** %8, align 8
  %39 = getelementptr inbounds i32, i32* %38, i64 %36
  store i32 %37, i32* %39, align 4
  %40 = add nuw i64 %36, 1
  %41 = load i8*, i8** %5, align 8
  %42 = icmp ult i8* %41, %31
  br i1 %42, label %35, label %32

43:                                               ; preds = %4
  %44 = getelementptr inbounds %class.SkConvertToUTF32, %class.SkConvertToUTF32* %0, i64 0, i32 0, i32 0
  %45 = load i32*, i32** %44, align 8
  %46 = getelementptr inbounds %class.SkConvertToUTF32, %class.SkConvertToUTF32* %0, i64 0, i32 0, i32 1, i32 0, i64 0
  %47 = icmp eq i32* %45, %46
  br i1 %47, label %50, label %48

48:                                               ; preds = %43
  %49 = bitcast i32* %45 to i8*
  tail call void @_Z7sk_freePv(i8* %49) #13
  br label %50

50:                                               ; preds = %48, %43
  %51 = icmp ugt i64 %2, 256
  br i1 %51, label %52, label %56

52:                                               ; preds = %50
  %53 = tail call i8* @_Z15sk_malloc_throwmm(i64 %2, i64 4) #13
  %54 = bitcast %class.SkConvertToUTF32* %0 to i8**
  store i8* %53, i8** %54, align 8
  %55 = bitcast i8* %53 to i32*
  br label %60

56:                                               ; preds = %50
  %57 = icmp eq i64 %2, 0
  br i1 %57, label %59, label %58

58:                                               ; preds = %56
  store i32* %46, i32** %44, align 8
  br label %60

59:                                               ; preds = %56
  store i32* null, i32** %44, align 8
  br label %60

60:                                               ; preds = %52, %58, %59
  %61 = phi i32* [ %46, %58 ], [ null, %59 ], [ %55, %52 ]
  %62 = bitcast i16** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62) #13
  %63 = bitcast i8* %1 to i16*
  %64 = bitcast i16** %6 to i8**
  store i8* %1, i8** %64, align 8
  %65 = lshr i64 %2, 1
  %66 = getelementptr inbounds i16, i16* %63, i64 %65
  %67 = icmp ugt i16* %66, %63
  br i1 %67, label %69, label %68

68:                                               ; preds = %69, %60
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62) #13
  br label %80

69:                                               ; preds = %60, %69
  %70 = phi i64 [ %74, %69 ], [ 0, %60 ]
  %71 = call i32 @_ZN5SkUTF9NextUTF16EPPKtS1_(i16** nonnull %6, i16* %66) #13
  %72 = load i32*, i32** %44, align 8
  %73 = getelementptr inbounds i32, i32* %72, i64 %70
  store i32 %71, i32* %73, align 4
  %74 = add nuw i64 %70, 1
  %75 = load i16*, i16** %6, align 8
  %76 = icmp ult i16* %75, %66
  br i1 %76, label %69, label %68

77:                                               ; preds = %4
  %78 = bitcast i8* %1 to i32*
  br label %80

79:                                               ; preds = %4
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0)) #14
  unreachable

80:                                               ; preds = %77, %68, %32
  %81 = phi i32* [ %78, %77 ], [ %61, %68 ], [ %34, %32 ]
  ret i32* %81
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK6SkFont11measureTextEPKvm14SkTextEncodingP6SkRectPK7SkPaint(%class.SkFont*, i8*, i64, i32, %struct.SkRect*, %class.SkPaint*) local_unnamed_addr #1 align 2 {
  %7 = alloca %class.SkAutoToGlyphs, align 8
  %8 = alloca %class.SkStrikeSpec, align 8
  %9 = alloca %class.SkBulkGlyphMetrics, align 8
  %10 = alloca { <2 x float>, <2 x float> }, align 8
  %11 = bitcast { <2 x float>, <2 x float> }* %10 to %struct.SkRect*
  %12 = bitcast %class.SkAutoToGlyphs* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %12) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 96, i1 false)
  call void @_ZN14SkAutoToGlyphsC2ERK6SkFontPKvm14SkTextEncoding(%class.SkAutoToGlyphs* nonnull %7, %class.SkFont* dereferenceable(24) %0, i8* %1, i64 %2, i32 %3)
  %13 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %7, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %6
  %17 = icmp eq %struct.SkRect* %4, null
  br i1 %17, label %254, label %18

18:                                               ; preds = %16
  %19 = bitcast %struct.SkRect* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %19, i8 0, i64 16, i1 false) #13
  br label %254

20:                                               ; preds = %6
  %21 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %7, i64 0, i32 1
  %22 = load i16*, i16** %21, align 8
  %23 = bitcast %class.SkStrikeSpec* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %23) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* align 8 bitcast (%class.SkStrikeSpec* @__const._ZNK6SkFont10getMetricsEP13SkFontMetrics.strikeSpec to i8*), i64 160, i1 false)
  call void @_ZN12SkStrikeSpec17MakeCanonicalizedERK6SkFontPK7SkPaint(%class.SkStrikeSpec* nonnull sret %8, %class.SkFont* dereferenceable(24) %0, %class.SkPaint* %5) #13
  %24 = bitcast %class.SkBulkGlyphMetrics* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %24) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 184, i1 false)
  call void @_ZN18SkBulkGlyphMetricsC1ERK12SkStrikeSpec(%class.SkBulkGlyphMetrics* nonnull %9, %class.SkStrikeSpec* nonnull dereferenceable(160) %8) #13
  %25 = sext i32 %14 to i64
  %26 = call { %class.SkGlyph**, i64 } @_ZN18SkBulkGlyphMetrics6glyphsE6SkSpanIKtE(%class.SkBulkGlyphMetrics* nonnull %9, i16* %22, i64 %25) #13
  %27 = extractvalue { %class.SkGlyph**, i64 } %26, 0
  %28 = icmp ne %struct.SkRect* %4, null
  br i1 %28, label %29, label %92

29:                                               ; preds = %20
  %30 = load %class.SkGlyph*, %class.SkGlyph** %27, align 8
  %31 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %30, i64 0, i32 3
  %32 = load i16, i16* %31, align 2
  %33 = sitofp i16 %32 to float
  %34 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %30, i64 0, i32 2
  %35 = load i16, i16* %34, align 4
  %36 = sitofp i16 %35 to float
  %37 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %30, i64 0, i32 0
  %38 = load i16, i16* %37, align 8
  %39 = uitofp i16 %38 to float
  %40 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %30, i64 0, i32 1
  %41 = load i16, i16* %40, align 2
  %42 = uitofp i16 %41 to float
  %43 = insertelement <2 x float> undef, float %33, i32 0
  %44 = insertelement <2 x float> %43, float %36, i32 1
  %45 = fadd float %33, %39
  %46 = insertelement <2 x float> undef, float %45, i32 0
  %47 = fadd float %36, %42
  %48 = insertelement <2 x float> %46, float %47, i32 1
  %49 = bitcast %struct.SkRect* %4 to <2 x float>*
  store <2 x float> %44, <2 x float>* %49, align 4
  %50 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %4, i64 0, i32 2
  %51 = bitcast float* %50 to <2 x float>*
  store <2 x float> %48, <2 x float>* %51, align 4
  %52 = load %class.SkGlyph*, %class.SkGlyph** %27, align 8
  %53 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %52, i64 0, i32 6
  %54 = load float, float* %53, align 8
  %55 = icmp sgt i32 %14, 1
  br i1 %55, label %56, label %163

56:                                               ; preds = %29
  %57 = bitcast { <2 x float>, <2 x float> }* %10 to i8*
  %58 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %10, i64 0, i32 0, i64 0
  %59 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %11, i64 0, i32 1
  %60 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %10, i64 0, i32 1, i64 0
  %61 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %11, i64 0, i32 3
  %62 = zext i32 %14 to i64
  %63 = bitcast { <2 x float>, <2 x float> }* %10 to i8*
  br label %64

64:                                               ; preds = %64, %56
  %65 = phi i64 [ 1, %56 ], [ %90, %64 ]
  %66 = phi float [ %54, %56 ], [ %89, %64 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %57) #13
  %67 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %27, i64 %65
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 -1, i64 16, i1 false)
  %68 = load %class.SkGlyph*, %class.SkGlyph** %67, align 8
  %69 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %68, i64 0, i32 3
  %70 = load i16, i16* %69, align 2
  %71 = sitofp i16 %70 to float
  %72 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %68, i64 0, i32 2
  %73 = load i16, i16* %72, align 4
  %74 = sitofp i16 %73 to float
  %75 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %68, i64 0, i32 0
  %76 = load i16, i16* %75, align 8
  %77 = uitofp i16 %76 to float
  %78 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %68, i64 0, i32 1
  %79 = load i16, i16* %78, align 2
  %80 = uitofp i16 %79 to float
  %81 = fadd float %71, %77
  %82 = fadd float %74, %80
  %83 = fadd float %66, %71
  store float %83, float* %58, align 8
  store float %74, float* %59, align 4
  %84 = fadd float %66, %81
  store float %84, float* %60, align 8
  %85 = fadd float %82, 0.000000e+00
  store float %85, float* %61, align 4
  call void @_ZN6SkRect4joinERKS_(%struct.SkRect* nonnull %4, %struct.SkRect* nonnull dereferenceable(16) %11) #13
  %86 = load %class.SkGlyph*, %class.SkGlyph** %67, align 8
  %87 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %86, i64 0, i32 6
  %88 = load float, float* %87, align 8
  %89 = fadd float %66, %88
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %57) #13
  %90 = add nuw nsw i64 %65, 1
  %91 = icmp eq i64 %90, %62
  br i1 %91, label %163, label %64

92:                                               ; preds = %20
  %93 = extractvalue { %class.SkGlyph**, i64 } %26, 1
  %94 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %27, i64 %93
  %95 = icmp eq i64 %93, 0
  br i1 %95, label %163, label %96

96:                                               ; preds = %92
  %97 = shl nsw i64 %93, 3
  %98 = add i64 %97, -8
  %99 = lshr exact i64 %98, 3
  %100 = add nuw nsw i64 %99, 1
  %101 = and i64 %100, 7
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %114, label %103

103:                                              ; preds = %96, %103
  %104 = phi %class.SkGlyph** [ %111, %103 ], [ %27, %96 ]
  %105 = phi float [ %110, %103 ], [ 0.000000e+00, %96 ]
  %106 = phi i64 [ %112, %103 ], [ %101, %96 ]
  %107 = load %class.SkGlyph*, %class.SkGlyph** %104, align 8
  %108 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %107, i64 0, i32 6
  %109 = load float, float* %108, align 8
  %110 = fadd float %105, %109
  %111 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %104, i64 1
  %112 = add i64 %106, -1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %103, !llvm.loop !2

114:                                              ; preds = %103, %96
  %115 = phi float [ undef, %96 ], [ %110, %103 ]
  %116 = phi %class.SkGlyph** [ %27, %96 ], [ %111, %103 ]
  %117 = phi float [ 0.000000e+00, %96 ], [ %110, %103 ]
  %118 = icmp ult i64 %98, 56
  br i1 %118, label %163, label %119

119:                                              ; preds = %114, %119
  %120 = phi %class.SkGlyph** [ %161, %119 ], [ %116, %114 ]
  %121 = phi float [ %160, %119 ], [ %117, %114 ]
  %122 = load %class.SkGlyph*, %class.SkGlyph** %120, align 8
  %123 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %122, i64 0, i32 6
  %124 = load float, float* %123, align 8
  %125 = fadd float %121, %124
  %126 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %120, i64 1
  %127 = load %class.SkGlyph*, %class.SkGlyph** %126, align 8
  %128 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %127, i64 0, i32 6
  %129 = load float, float* %128, align 8
  %130 = fadd float %125, %129
  %131 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %120, i64 2
  %132 = load %class.SkGlyph*, %class.SkGlyph** %131, align 8
  %133 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %132, i64 0, i32 6
  %134 = load float, float* %133, align 8
  %135 = fadd float %130, %134
  %136 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %120, i64 3
  %137 = load %class.SkGlyph*, %class.SkGlyph** %136, align 8
  %138 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %137, i64 0, i32 6
  %139 = load float, float* %138, align 8
  %140 = fadd float %135, %139
  %141 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %120, i64 4
  %142 = load %class.SkGlyph*, %class.SkGlyph** %141, align 8
  %143 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %142, i64 0, i32 6
  %144 = load float, float* %143, align 8
  %145 = fadd float %140, %144
  %146 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %120, i64 5
  %147 = load %class.SkGlyph*, %class.SkGlyph** %146, align 8
  %148 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %147, i64 0, i32 6
  %149 = load float, float* %148, align 8
  %150 = fadd float %145, %149
  %151 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %120, i64 6
  %152 = load %class.SkGlyph*, %class.SkGlyph** %151, align 8
  %153 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %152, i64 0, i32 6
  %154 = load float, float* %153, align 8
  %155 = fadd float %150, %154
  %156 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %120, i64 7
  %157 = load %class.SkGlyph*, %class.SkGlyph** %156, align 8
  %158 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %157, i64 0, i32 6
  %159 = load float, float* %158, align 8
  %160 = fadd float %155, %159
  %161 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %120, i64 8
  %162 = icmp eq %class.SkGlyph** %161, %94
  br i1 %162, label %163, label %119

163:                                              ; preds = %114, %119, %64, %92, %29
  %164 = phi float [ %54, %29 ], [ 0.000000e+00, %92 ], [ %89, %64 ], [ %115, %114 ], [ %160, %119 ]
  %165 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %8, i64 0, i32 4
  %166 = load float, float* %165, align 8
  %167 = fcmp une float %166, 1.000000e+00
  br i1 %167, label %168, label %177

168:                                              ; preds = %163
  %169 = fmul float %164, %166
  br i1 %28, label %170, label %177

170:                                              ; preds = %168
  %171 = bitcast %struct.SkRect* %4 to <4 x float>*
  %172 = load <4 x float>, <4 x float>* %171, align 4
  %173 = insertelement <4 x float> undef, float %166, i32 0
  %174 = shufflevector <4 x float> %173, <4 x float> undef, <4 x i32> zeroinitializer
  %175 = fmul <4 x float> %174, %172
  %176 = bitcast %struct.SkRect* %4 to <4 x float>*
  store <4 x float> %175, <4 x float>* %176, align 4
  br label %177

177:                                              ; preds = %168, %170, %163
  %178 = phi float [ %169, %170 ], [ %169, %168 ], [ %164, %163 ]
  %179 = getelementptr inbounds %class.SkBulkGlyphMetrics, %class.SkBulkGlyphMetrics* %9, i64 0, i32 1, i32 0
  %180 = load %"class.SkStrikeCache::Strike"*, %"class.SkStrikeCache::Strike"** %179, align 8
  %181 = icmp eq %"class.SkStrikeCache::Strike"* %180, null
  br i1 %181, label %192, label %182

182:                                              ; preds = %177
  %183 = getelementptr inbounds %"class.SkStrikeCache::Strike", %"class.SkStrikeCache::Strike"* %180, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %184 = atomicrmw add i32* %183, i32 -1 acq_rel
  %185 = icmp eq i32 %184, 1
  br i1 %185, label %186, label %192

186:                                              ; preds = %182
  %187 = bitcast %"class.SkStrikeCache::Strike"* %180 to %class.SkRefCntBase*
  %188 = bitcast %"class.SkStrikeCache::Strike"* %180 to void (%class.SkRefCntBase*)***
  %189 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %188, align 8
  %190 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %189, i64 2
  %191 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %190, align 8
  call void %191(%class.SkRefCntBase* nonnull %187) #13
  br label %192

192:                                              ; preds = %186, %182, %177
  %193 = getelementptr inbounds %class.SkBulkGlyphMetrics, %class.SkBulkGlyphMetrics* %9, i64 0, i32 0, i32 1
  %194 = load %class.SkGlyph**, %class.SkGlyph*** %193, align 8
  %195 = getelementptr inbounds %class.SkBulkGlyphMetrics, %class.SkBulkGlyphMetrics* %9, i64 0, i32 0, i32 0
  %196 = load i32, i32* %195, align 8
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %194, i64 %197
  br label %199

199:                                              ; preds = %199, %192
  %200 = phi %class.SkGlyph** [ %198, %192 ], [ %202, %199 ]
  %201 = icmp ugt %class.SkGlyph** %200, %194
  %202 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %200, i64 -1
  br i1 %201, label %199, label %203

203:                                              ; preds = %199
  %204 = bitcast %class.SkGlyph** %194 to i8*
  %205 = icmp eq i32 %196, 0
  br i1 %205, label %210, label %206

206:                                              ; preds = %203
  %207 = icmp sgt i32 %196, 20
  br i1 %207, label %208, label %209

208:                                              ; preds = %206
  call void @_Z7sk_freePv(i8* %204) #13
  br label %209

209:                                              ; preds = %208, %206
  store %class.SkGlyph** null, %class.SkGlyph*** %193, align 8
  store i32 0, i32* %195, align 8
  br label %210

210:                                              ; preds = %203, %209
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %24) #13
  %211 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %8, i64 0, i32 3, i32 0
  %212 = load %class.SkTypeface*, %class.SkTypeface** %211, align 8
  %213 = icmp eq %class.SkTypeface* %212, null
  br i1 %213, label %224, label %214

214:                                              ; preds = %210
  %215 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %212, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %216 = atomicrmw add i32* %215, i32 -1 acq_rel
  %217 = icmp eq i32 %216, 1
  br i1 %217, label %218, label %224

218:                                              ; preds = %214
  %219 = bitcast %class.SkTypeface* %212 to %class.SkRefCntBase*
  %220 = bitcast %class.SkTypeface* %212 to void (%class.SkRefCntBase*)***
  %221 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %220, align 8
  %222 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %221, i64 2
  %223 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %222, align 8
  call void %223(%class.SkRefCntBase* nonnull %219) #13
  br label %224

224:                                              ; preds = %218, %214, %210
  %225 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %8, i64 0, i32 2, i32 0
  %226 = load %class.SkPathEffect*, %class.SkPathEffect** %225, align 8
  %227 = icmp eq %class.SkPathEffect* %226, null
  br i1 %227, label %238, label %228

228:                                              ; preds = %224
  %229 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %226, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %230 = atomicrmw add i32* %229, i32 -1 acq_rel
  %231 = icmp eq i32 %230, 1
  br i1 %231, label %232, label %238

232:                                              ; preds = %228
  %233 = bitcast %class.SkPathEffect* %226 to %class.SkRefCntBase*
  %234 = bitcast %class.SkPathEffect* %226 to void (%class.SkRefCntBase*)***
  %235 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %234, align 8
  %236 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %235, i64 2
  %237 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %236, align 8
  call void %237(%class.SkRefCntBase* nonnull %233) #13
  br label %238

238:                                              ; preds = %232, %228, %224
  %239 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %8, i64 0, i32 1, i32 0
  %240 = load %class.SkMaskFilter*, %class.SkMaskFilter** %239, align 8
  %241 = icmp eq %class.SkMaskFilter* %240, null
  br i1 %241, label %252, label %242

242:                                              ; preds = %238
  %243 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %240, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %244 = atomicrmw add i32* %243, i32 -1 acq_rel
  %245 = icmp eq i32 %244, 1
  br i1 %245, label %246, label %252

246:                                              ; preds = %242
  %247 = bitcast %class.SkMaskFilter* %240 to %class.SkRefCntBase*
  %248 = bitcast %class.SkMaskFilter* %240 to void (%class.SkRefCntBase*)***
  %249 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %248, align 8
  %250 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %249, i64 2
  %251 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %250, align 8
  call void %251(%class.SkRefCntBase* nonnull %247) #13
  br label %252

252:                                              ; preds = %238, %242, %246
  %253 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %8, i64 0, i32 0
  call void @_ZN16SkAutoDescriptorD1Ev(%class.SkAutoDescriptor* nonnull %253) #13
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %23) #13
  br label %254

254:                                              ; preds = %18, %16, %252
  %255 = phi float [ %178, %252 ], [ 0.000000e+00, %16 ], [ 0.000000e+00, %18 ]
  %256 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %7, i64 0, i32 0, i32 1
  %257 = load i16*, i16** %256, align 8
  %258 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %7, i64 0, i32 0, i32 0
  %259 = load i32, i32* %258, align 8
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds i16, i16* %257, i64 %260
  br label %262

262:                                              ; preds = %262, %254
  %263 = phi i16* [ %261, %254 ], [ %265, %262 ]
  %264 = icmp ugt i16* %263, %257
  %265 = getelementptr inbounds i16, i16* %263, i64 -1
  br i1 %264, label %262, label %266

266:                                              ; preds = %262
  %267 = bitcast i16* %257 to i8*
  %268 = icmp eq i32 %259, 0
  br i1 %268, label %273, label %269

269:                                              ; preds = %266
  %270 = icmp sgt i32 %259, 32
  br i1 %270, label %271, label %272

271:                                              ; preds = %269
  call void @_Z7sk_freePv(i8* %267) #13
  br label %272

272:                                              ; preds = %271, %269
  store i16* null, i16** %256, align 8
  store i32 0, i32* %258, align 8
  br label %273

273:                                              ; preds = %266, %272
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %12) #13
  ret float %255
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN14SkAutoToGlyphsC2ERK6SkFontPKvm14SkTextEncoding(%class.SkAutoToGlyphs*, %class.SkFont* dereferenceable(24), i8*, i64, i32) unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %0, i64 0, i32 0, i32 1
  store i16* null, i16** %6, align 8
  %7 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %0, i64 0, i32 0, i32 0
  store i32 0, i32* %7, align 8
  %8 = icmp eq i32 %4, 3
  %9 = icmp eq i64 %3, 0
  %10 = or i1 %9, %8
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %0, i64 0, i32 1
  %13 = bitcast i16** %12 to i8**
  store i8* %2, i8** %13, align 8
  %14 = lshr i64 %3, 1
  %15 = trunc i64 %14 to i32
  %16 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %0, i64 0, i32 2
  store i32 %15, i32* %16, align 8
  br label %75

17:                                               ; preds = %5
  switch i32 %4, label %33 [
    i32 0, label %18
    i32 1, label %20
    i32 2, label %23
  ]

18:                                               ; preds = %17
  %19 = tail call i32 @_ZN5SkUTF9CountUTF8EPKcm(i8* %2, i64 %3) #13
  br label %26

20:                                               ; preds = %17
  %21 = bitcast i8* %2 to i16*
  %22 = tail call i32 @_ZN5SkUTF10CountUTF16EPKtm(i16* %21, i64 %3) #13
  br label %26

23:                                               ; preds = %17
  %24 = lshr i64 %3, 2
  %25 = trunc i64 %24 to i32
  br label %26

26:                                               ; preds = %18, %20, %23
  %27 = phi i32 [ %25, %23 ], [ %22, %20 ], [ %19, %18 ]
  %28 = icmp sgt i32 %27, 0
  %29 = select i1 %28, i32 %27, i32 0
  %30 = load i16*, i16** %6, align 8
  %31 = bitcast i16* %30 to i8*
  %32 = load i32, i32* %7, align 8
  br label %33

33:                                               ; preds = %17, %26
  %34 = phi i32 [ %32, %26 ], [ 0, %17 ]
  %35 = phi i8* [ %31, %26 ], [ null, %17 ]
  %36 = phi i16* [ %30, %26 ], [ null, %17 ]
  %37 = phi i32 [ %29, %26 ], [ 0, %17 ]
  %38 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %0, i64 0, i32 2
  store i32 %37, i32* %38, align 8
  %39 = sext i32 %34 to i64
  %40 = getelementptr inbounds i16, i16* %36, i64 %39
  br label %41

41:                                               ; preds = %41, %33
  %42 = phi i16* [ %40, %33 ], [ %44, %41 ]
  %43 = icmp ugt i16* %42, %36
  %44 = getelementptr inbounds i16, i16* %42, i64 -1
  br i1 %43, label %41, label %45

45:                                               ; preds = %41
  %46 = icmp eq i32 %34, %37
  br i1 %46, label %67, label %47

47:                                               ; preds = %45
  %48 = icmp sgt i32 %34, 32
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @_Z7sk_freePv(i8* %35) #13
  br label %50

50:                                               ; preds = %49, %47
  %51 = icmp ugt i32 %37, 32
  br i1 %51, label %52, label %57

52:                                               ; preds = %50
  %53 = zext i32 %37 to i64
  %54 = tail call i8* @_Z15sk_malloc_throwmm(i64 %53, i64 2) #13
  %55 = bitcast i16** %6 to i8**
  store i8* %54, i8** %55, align 8
  %56 = bitcast i8* %54 to i16*
  br label %64

57:                                               ; preds = %50
  %58 = icmp eq i32 %37, 0
  br i1 %58, label %63, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %0, i64 0, i32 0, i32 2, i64 0
  %61 = bitcast i16** %6 to i8**
  store i8* %60, i8** %61, align 8
  %62 = bitcast i8* %60 to i16*
  br label %64

63:                                               ; preds = %57
  store i16* null, i16** %6, align 8
  br label %64

64:                                               ; preds = %63, %59, %52
  %65 = phi i16* [ null, %63 ], [ %62, %59 ], [ %56, %52 ]
  store i32 %37, i32* %7, align 8
  %66 = load i32, i32* %38, align 8
  br label %67

67:                                               ; preds = %45, %64
  %68 = phi i32 [ %34, %45 ], [ %66, %64 ]
  %69 = phi i16* [ %36, %45 ], [ %65, %64 ]
  %70 = tail call i32 @_ZNK6SkFont12textToGlyphsEPKvm14SkTextEncodingPti(%class.SkFont* %1, i8* %2, i64 %3, i32 %4, i16* %69, i32 %68)
  %71 = bitcast i16** %6 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %0, i64 0, i32 1
  %74 = bitcast i16** %73 to i64*
  store i64 %72, i64* %74, align 8
  br label %75

75:                                               ; preds = %67, %11
  ret void
}

declare void @_ZN12SkStrikeSpec17MakeCanonicalizedERK6SkFontPK7SkPaint(%class.SkStrikeSpec* sret, %class.SkFont* dereferenceable(24), %class.SkPaint*) local_unnamed_addr #3

declare void @_ZN18SkBulkGlyphMetricsC1ERK12SkStrikeSpec(%class.SkBulkGlyphMetrics*, %class.SkStrikeSpec* dereferenceable(160)) unnamed_addr #3

declare { %class.SkGlyph**, i64 } @_ZN18SkBulkGlyphMetrics6glyphsE6SkSpanIKtE(%class.SkBulkGlyphMetrics*, i16*, i64) local_unnamed_addr #3

declare void @_ZN6SkRect4joinERKS_(%struct.SkRect*, %struct.SkRect* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6SkFont15getWidthsBoundsEPKtiPfP6SkRectPK7SkPaint(%class.SkFont*, i16*, i32, float*, %struct.SkRect*, %class.SkPaint*) local_unnamed_addr #1 align 2 {
  %7 = alloca %class.SkStrikeSpec, align 8
  %8 = alloca %class.SkBulkGlyphMetrics, align 8
  %9 = alloca %class.SkMatrix, align 16
  %10 = alloca { <2 x float>, <2 x float> }, align 8
  %11 = bitcast { <2 x float>, <2 x float> }* %10 to %struct.SkRect*
  %12 = bitcast %class.SkStrikeSpec* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %12) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 bitcast (%class.SkStrikeSpec* @__const._ZNK6SkFont10getMetricsEP13SkFontMetrics.strikeSpec to i8*), i64 160, i1 false)
  call void @_ZN12SkStrikeSpec17MakeCanonicalizedERK6SkFontPK7SkPaint(%class.SkStrikeSpec* nonnull sret %7, %class.SkFont* dereferenceable(24) %0, %class.SkPaint* %5) #13
  %13 = bitcast %class.SkBulkGlyphMetrics* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %13) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 184, i1 false)
  call void @_ZN18SkBulkGlyphMetricsC1ERK12SkStrikeSpec(%class.SkBulkGlyphMetrics* nonnull %8, %class.SkStrikeSpec* nonnull dereferenceable(160) %7) #13
  %14 = sext i32 %2 to i64
  %15 = call { %class.SkGlyph**, i64 } @_ZN18SkBulkGlyphMetrics6glyphsE6SkSpanIKtE(%class.SkBulkGlyphMetrics* nonnull %8, i16* %1, i64 %14) #13
  %16 = extractvalue { %class.SkGlyph**, i64 } %15, 0
  %17 = extractvalue { %class.SkGlyph**, i64 } %15, 1
  %18 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %7, i64 0, i32 4
  %19 = load float, float* %18, align 8
  %20 = icmp eq %struct.SkRect* %4, null
  br i1 %20, label %61, label %21

21:                                               ; preds = %6
  %22 = bitcast %class.SkMatrix* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %22) #13
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 1
  %24 = bitcast %class.SkMatrix* %9 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %24, align 16, !alias.scope !4
  %25 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 4
  %26 = bitcast float* %25 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %26, align 16, !alias.scope !4
  %27 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %27, align 16, !alias.scope !4
  store i32 16, i32* %23, align 4, !alias.scope !4
  %28 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix* nonnull %9, float %19, float %19) #13
  %29 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %16, i64 %17
  %30 = icmp eq i64 %17, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %21
  %32 = bitcast { <2 x float>, <2 x float> }* %10 to i8*
  %33 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %10, i64 0, i32 0
  %34 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %10, i64 0, i32 1
  br label %36

35:                                               ; preds = %36, %21
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %22) #13
  br label %61

36:                                               ; preds = %31, %36
  %37 = phi %struct.SkRect* [ %4, %31 ], [ %40, %36 ]
  %38 = phi %class.SkGlyph** [ %16, %31 ], [ %59, %36 ]
  %39 = load %class.SkGlyph*, %class.SkGlyph** %38, align 8
  %40 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %37, i64 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #13
  %41 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %39, i64 0, i32 3
  %42 = load i16, i16* %41, align 2
  %43 = sitofp i16 %42 to float
  %44 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %39, i64 0, i32 2
  %45 = load i16, i16* %44, align 4
  %46 = sitofp i16 %45 to float
  %47 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %39, i64 0, i32 0
  %48 = load i16, i16* %47, align 8
  %49 = uitofp i16 %48 to float
  %50 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %39, i64 0, i32 1
  %51 = load i16, i16* %50, align 2
  %52 = uitofp i16 %51 to float
  %53 = insertelement <2 x float> undef, float %43, i32 0
  %54 = insertelement <2 x float> %53, float %46, i32 1
  %55 = fadd float %43, %49
  %56 = insertelement <2 x float> undef, float %55, i32 0
  %57 = fadd float %46, %52
  %58 = insertelement <2 x float> %56, float %57, i32 1
  store <2 x float> %54, <2 x float>* %33, align 8
  store <2 x float> %58, <2 x float>* %34, align 8
  call void @_ZNK8SkMatrix21mapRectScaleTranslateEP6SkRectRKS0_(%class.SkMatrix* nonnull %9, %struct.SkRect* %37, %struct.SkRect* nonnull dereferenceable(16) %11) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #13
  %59 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %38, i64 1
  %60 = icmp eq %class.SkGlyph** %59, %29
  br i1 %60, label %35, label %36

61:                                               ; preds = %6, %35
  %62 = icmp eq float* %3, null
  br i1 %62, label %117, label %63

63:                                               ; preds = %61
  %64 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %16, i64 %17
  %65 = icmp eq i64 %17, 0
  br i1 %65, label %117, label %66

66:                                               ; preds = %63
  %67 = shl nsw i64 %17, 3
  %68 = add i64 %67, -8
  %69 = lshr exact i64 %68, 3
  %70 = add nuw nsw i64 %69, 1
  %71 = and i64 %70, 3
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %85, label %73

73:                                               ; preds = %66, %73
  %74 = phi %class.SkGlyph** [ %82, %73 ], [ %16, %66 ]
  %75 = phi float* [ %81, %73 ], [ %3, %66 ]
  %76 = phi i64 [ %83, %73 ], [ %71, %66 ]
  %77 = load %class.SkGlyph*, %class.SkGlyph** %74, align 8
  %78 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %77, i64 0, i32 6
  %79 = load float, float* %78, align 8
  %80 = fmul float %19, %79
  %81 = getelementptr inbounds float, float* %75, i64 1
  store float %80, float* %75, align 4
  %82 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %74, i64 1
  %83 = add i64 %76, -1
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %73, !llvm.loop !7

85:                                               ; preds = %73, %66
  %86 = phi %class.SkGlyph** [ %16, %66 ], [ %82, %73 ]
  %87 = phi float* [ %3, %66 ], [ %81, %73 ]
  %88 = icmp ult i64 %68, 24
  br i1 %88, label %117, label %89

89:                                               ; preds = %85, %89
  %90 = phi %class.SkGlyph** [ %115, %89 ], [ %86, %85 ]
  %91 = phi float* [ %114, %89 ], [ %87, %85 ]
  %92 = load %class.SkGlyph*, %class.SkGlyph** %90, align 8
  %93 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %92, i64 0, i32 6
  %94 = load float, float* %93, align 8
  %95 = fmul float %19, %94
  %96 = getelementptr inbounds float, float* %91, i64 1
  store float %95, float* %91, align 4
  %97 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %90, i64 1
  %98 = load %class.SkGlyph*, %class.SkGlyph** %97, align 8
  %99 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %98, i64 0, i32 6
  %100 = load float, float* %99, align 8
  %101 = fmul float %19, %100
  %102 = getelementptr inbounds float, float* %91, i64 2
  store float %101, float* %96, align 4
  %103 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %90, i64 2
  %104 = load %class.SkGlyph*, %class.SkGlyph** %103, align 8
  %105 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %104, i64 0, i32 6
  %106 = load float, float* %105, align 8
  %107 = fmul float %19, %106
  %108 = getelementptr inbounds float, float* %91, i64 3
  store float %107, float* %102, align 4
  %109 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %90, i64 3
  %110 = load %class.SkGlyph*, %class.SkGlyph** %109, align 8
  %111 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %110, i64 0, i32 6
  %112 = load float, float* %111, align 8
  %113 = fmul float %19, %112
  %114 = getelementptr inbounds float, float* %91, i64 4
  store float %113, float* %108, align 4
  %115 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %90, i64 4
  %116 = icmp eq %class.SkGlyph** %115, %64
  br i1 %116, label %117, label %89

117:                                              ; preds = %85, %89, %63, %61
  %118 = getelementptr inbounds %class.SkBulkGlyphMetrics, %class.SkBulkGlyphMetrics* %8, i64 0, i32 1, i32 0
  %119 = load %"class.SkStrikeCache::Strike"*, %"class.SkStrikeCache::Strike"** %118, align 8
  %120 = icmp eq %"class.SkStrikeCache::Strike"* %119, null
  br i1 %120, label %131, label %121

121:                                              ; preds = %117
  %122 = getelementptr inbounds %"class.SkStrikeCache::Strike", %"class.SkStrikeCache::Strike"* %119, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = atomicrmw add i32* %122, i32 -1 acq_rel
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %125, label %131

125:                                              ; preds = %121
  %126 = bitcast %"class.SkStrikeCache::Strike"* %119 to %class.SkRefCntBase*
  %127 = bitcast %"class.SkStrikeCache::Strike"* %119 to void (%class.SkRefCntBase*)***
  %128 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %127, align 8
  %129 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %128, i64 2
  %130 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %129, align 8
  call void %130(%class.SkRefCntBase* nonnull %126) #13
  br label %131

131:                                              ; preds = %125, %121, %117
  %132 = getelementptr inbounds %class.SkBulkGlyphMetrics, %class.SkBulkGlyphMetrics* %8, i64 0, i32 0, i32 1
  %133 = load %class.SkGlyph**, %class.SkGlyph*** %132, align 8
  %134 = getelementptr inbounds %class.SkBulkGlyphMetrics, %class.SkBulkGlyphMetrics* %8, i64 0, i32 0, i32 0
  %135 = load i32, i32* %134, align 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %133, i64 %136
  br label %138

138:                                              ; preds = %138, %131
  %139 = phi %class.SkGlyph** [ %137, %131 ], [ %141, %138 ]
  %140 = icmp ugt %class.SkGlyph** %139, %133
  %141 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %139, i64 -1
  br i1 %140, label %138, label %142

142:                                              ; preds = %138
  %143 = bitcast %class.SkGlyph** %133 to i8*
  %144 = icmp eq i32 %135, 0
  br i1 %144, label %149, label %145

145:                                              ; preds = %142
  %146 = icmp sgt i32 %135, 20
  br i1 %146, label %147, label %148

147:                                              ; preds = %145
  call void @_Z7sk_freePv(i8* %143) #13
  br label %148

148:                                              ; preds = %147, %145
  store %class.SkGlyph** null, %class.SkGlyph*** %132, align 8
  store i32 0, i32* %134, align 8
  br label %149

149:                                              ; preds = %142, %148
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %13) #13
  %150 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %7, i64 0, i32 3, i32 0
  %151 = load %class.SkTypeface*, %class.SkTypeface** %150, align 8
  %152 = icmp eq %class.SkTypeface* %151, null
  br i1 %152, label %163, label %153

153:                                              ; preds = %149
  %154 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %151, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %155 = atomicrmw add i32* %154, i32 -1 acq_rel
  %156 = icmp eq i32 %155, 1
  br i1 %156, label %157, label %163

157:                                              ; preds = %153
  %158 = bitcast %class.SkTypeface* %151 to %class.SkRefCntBase*
  %159 = bitcast %class.SkTypeface* %151 to void (%class.SkRefCntBase*)***
  %160 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %159, align 8
  %161 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %160, i64 2
  %162 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %161, align 8
  call void %162(%class.SkRefCntBase* nonnull %158) #13
  br label %163

163:                                              ; preds = %157, %153, %149
  %164 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %7, i64 0, i32 2, i32 0
  %165 = load %class.SkPathEffect*, %class.SkPathEffect** %164, align 8
  %166 = icmp eq %class.SkPathEffect* %165, null
  br i1 %166, label %177, label %167

167:                                              ; preds = %163
  %168 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %165, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %169 = atomicrmw add i32* %168, i32 -1 acq_rel
  %170 = icmp eq i32 %169, 1
  br i1 %170, label %171, label %177

171:                                              ; preds = %167
  %172 = bitcast %class.SkPathEffect* %165 to %class.SkRefCntBase*
  %173 = bitcast %class.SkPathEffect* %165 to void (%class.SkRefCntBase*)***
  %174 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %173, align 8
  %175 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %174, i64 2
  %176 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %175, align 8
  call void %176(%class.SkRefCntBase* nonnull %172) #13
  br label %177

177:                                              ; preds = %171, %167, %163
  %178 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %7, i64 0, i32 1, i32 0
  %179 = load %class.SkMaskFilter*, %class.SkMaskFilter** %178, align 8
  %180 = icmp eq %class.SkMaskFilter* %179, null
  br i1 %180, label %191, label %181

181:                                              ; preds = %177
  %182 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %179, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %183 = atomicrmw add i32* %182, i32 -1 acq_rel
  %184 = icmp eq i32 %183, 1
  br i1 %184, label %185, label %191

185:                                              ; preds = %181
  %186 = bitcast %class.SkMaskFilter* %179 to %class.SkRefCntBase*
  %187 = bitcast %class.SkMaskFilter* %179 to void (%class.SkRefCntBase*)***
  %188 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %187, align 8
  %189 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %188, i64 2
  %190 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %189, align 8
  call void %190(%class.SkRefCntBase* nonnull %186) #13
  br label %191

191:                                              ; preds = %177, %181, %185
  %192 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %7, i64 0, i32 0
  call void @_ZN16SkAutoDescriptorD1Ev(%class.SkAutoDescriptor* nonnull %192) #13
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %12) #13
  ret void
}

declare void @_ZNK8SkMatrix21mapRectScaleTranslateEP6SkRectRKS0_(%class.SkMatrix*, %struct.SkRect*, %struct.SkRect* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6SkFont6getPosEPKtiP7SkPointS2_(%class.SkFont*, i16*, i32, %struct.SkPoint* nocapture, <2 x float>) local_unnamed_addr #6 align 2 {
  %6 = alloca %class.SkStrikeSpec, align 8
  %7 = alloca %class.SkBulkGlyphMetrics, align 8
  %8 = bitcast %class.SkStrikeSpec* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %8) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* align 8 bitcast (%class.SkStrikeSpec* @__const._ZNK6SkFont10getMetricsEP13SkFontMetrics.strikeSpec to i8*), i64 160, i1 false)
  call void @_ZN12SkStrikeSpec17MakeCanonicalizedERK6SkFontPK7SkPaint(%class.SkStrikeSpec* nonnull sret %6, %class.SkFont* dereferenceable(24) %0, %class.SkPaint* null) #13
  %9 = bitcast %class.SkBulkGlyphMetrics* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %9) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 184, i1 false)
  call void @_ZN18SkBulkGlyphMetricsC1ERK12SkStrikeSpec(%class.SkBulkGlyphMetrics* nonnull %7, %class.SkStrikeSpec* nonnull dereferenceable(160) %6) #13
  %10 = sext i32 %2 to i64
  %11 = call { %class.SkGlyph**, i64 } @_ZN18SkBulkGlyphMetrics6glyphsE6SkSpanIKtE(%class.SkBulkGlyphMetrics* nonnull %7, i16* %1, i64 %10) #13
  %12 = extractvalue { %class.SkGlyph**, i64 } %11, 0
  %13 = extractvalue { %class.SkGlyph**, i64 } %11, 1
  %14 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %12, i64 %13
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %40, label %16

16:                                               ; preds = %5
  %17 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %6, i64 0, i32 4
  %18 = shl nsw i64 %13, 3
  %19 = add i64 %18, -8
  %20 = and i64 %19, 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %35

22:                                               ; preds = %16
  %23 = load %class.SkGlyph*, %class.SkGlyph** %12, align 8
  %24 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 1
  %25 = bitcast %struct.SkPoint* %3 to <2 x float>*
  store <2 x float> %4, <2 x float>* %25, align 4
  %26 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %23, i64 0, i32 6
  %27 = bitcast float* %26 to <2 x float>*
  %28 = load <2 x float>, <2 x float>* %27, align 8
  %29 = load float, float* %17, align 8
  %30 = insertelement <2 x float> undef, float %29, i32 0
  %31 = shufflevector <2 x float> %30, <2 x float> undef, <2 x i32> zeroinitializer
  %32 = fmul <2 x float> %28, %31
  %33 = fadd <2 x float> %32, %4
  %34 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %12, i64 1
  br label %35

35:                                               ; preds = %22, %16
  %36 = phi %struct.SkPoint* [ %3, %16 ], [ %24, %22 ]
  %37 = phi %class.SkGlyph** [ %12, %16 ], [ %34, %22 ]
  %38 = phi <2 x float> [ %4, %16 ], [ %33, %22 ]
  %39 = icmp eq i64 %19, 0
  br i1 %39, label %40, label %116

40:                                               ; preds = %35, %116, %5
  %41 = getelementptr inbounds %class.SkBulkGlyphMetrics, %class.SkBulkGlyphMetrics* %7, i64 0, i32 1, i32 0
  %42 = load %"class.SkStrikeCache::Strike"*, %"class.SkStrikeCache::Strike"** %41, align 8
  %43 = icmp eq %"class.SkStrikeCache::Strike"* %42, null
  br i1 %43, label %54, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.SkStrikeCache::Strike", %"class.SkStrikeCache::Strike"* %42, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = atomicrmw add i32* %45, i32 -1 acq_rel
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %54

48:                                               ; preds = %44
  %49 = bitcast %"class.SkStrikeCache::Strike"* %42 to %class.SkRefCntBase*
  %50 = bitcast %"class.SkStrikeCache::Strike"* %42 to void (%class.SkRefCntBase*)***
  %51 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %50, align 8
  %52 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %51, i64 2
  %53 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %52, align 8
  call void %53(%class.SkRefCntBase* nonnull %49) #13
  br label %54

54:                                               ; preds = %48, %44, %40
  %55 = getelementptr inbounds %class.SkBulkGlyphMetrics, %class.SkBulkGlyphMetrics* %7, i64 0, i32 0, i32 1
  %56 = load %class.SkGlyph**, %class.SkGlyph*** %55, align 8
  %57 = getelementptr inbounds %class.SkBulkGlyphMetrics, %class.SkBulkGlyphMetrics* %7, i64 0, i32 0, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %56, i64 %59
  br label %61

61:                                               ; preds = %61, %54
  %62 = phi %class.SkGlyph** [ %60, %54 ], [ %64, %61 ]
  %63 = icmp ugt %class.SkGlyph** %62, %56
  %64 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %62, i64 -1
  br i1 %63, label %61, label %65

65:                                               ; preds = %61
  %66 = bitcast %class.SkGlyph** %56 to i8*
  %67 = icmp eq i32 %58, 0
  br i1 %67, label %72, label %68

68:                                               ; preds = %65
  %69 = icmp sgt i32 %58, 20
  br i1 %69, label %70, label %71

70:                                               ; preds = %68
  call void @_Z7sk_freePv(i8* %66) #13
  br label %71

71:                                               ; preds = %70, %68
  store %class.SkGlyph** null, %class.SkGlyph*** %55, align 8
  store i32 0, i32* %57, align 8
  br label %72

72:                                               ; preds = %65, %71
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %9) #13
  %73 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %6, i64 0, i32 3, i32 0
  %74 = load %class.SkTypeface*, %class.SkTypeface** %73, align 8
  %75 = icmp eq %class.SkTypeface* %74, null
  br i1 %75, label %86, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %74, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = atomicrmw add i32* %77, i32 -1 acq_rel
  %79 = icmp eq i32 %78, 1
  br i1 %79, label %80, label %86

80:                                               ; preds = %76
  %81 = bitcast %class.SkTypeface* %74 to %class.SkRefCntBase*
  %82 = bitcast %class.SkTypeface* %74 to void (%class.SkRefCntBase*)***
  %83 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %82, align 8
  %84 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %83, i64 2
  %85 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %84, align 8
  call void %85(%class.SkRefCntBase* nonnull %81) #13
  br label %86

86:                                               ; preds = %80, %76, %72
  %87 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %6, i64 0, i32 2, i32 0
  %88 = load %class.SkPathEffect*, %class.SkPathEffect** %87, align 8
  %89 = icmp eq %class.SkPathEffect* %88, null
  br i1 %89, label %100, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %88, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = atomicrmw add i32* %91, i32 -1 acq_rel
  %93 = icmp eq i32 %92, 1
  br i1 %93, label %94, label %100

94:                                               ; preds = %90
  %95 = bitcast %class.SkPathEffect* %88 to %class.SkRefCntBase*
  %96 = bitcast %class.SkPathEffect* %88 to void (%class.SkRefCntBase*)***
  %97 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %96, align 8
  %98 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %97, i64 2
  %99 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %98, align 8
  call void %99(%class.SkRefCntBase* nonnull %95) #13
  br label %100

100:                                              ; preds = %94, %90, %86
  %101 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %6, i64 0, i32 1, i32 0
  %102 = load %class.SkMaskFilter*, %class.SkMaskFilter** %101, align 8
  %103 = icmp eq %class.SkMaskFilter* %102, null
  br i1 %103, label %114, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %102, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = atomicrmw add i32* %105, i32 -1 acq_rel
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %108, label %114

108:                                              ; preds = %104
  %109 = bitcast %class.SkMaskFilter* %102 to %class.SkRefCntBase*
  %110 = bitcast %class.SkMaskFilter* %102 to void (%class.SkRefCntBase*)***
  %111 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %110, align 8
  %112 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %111, i64 2
  %113 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %112, align 8
  call void %113(%class.SkRefCntBase* nonnull %109) #13
  br label %114

114:                                              ; preds = %100, %104, %108
  %115 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %6, i64 0, i32 0
  call void @_ZN16SkAutoDescriptorD1Ev(%class.SkAutoDescriptor* nonnull %115) #13
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %8) #13
  ret void

116:                                              ; preds = %35, %116
  %117 = phi %struct.SkPoint* [ %133, %116 ], [ %36, %35 ]
  %118 = phi %class.SkGlyph** [ %143, %116 ], [ %37, %35 ]
  %119 = phi <2 x float> [ %142, %116 ], [ %38, %35 ]
  %120 = load %class.SkGlyph*, %class.SkGlyph** %118, align 8
  %121 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %117, i64 1
  %122 = bitcast %struct.SkPoint* %117 to <2 x float>*
  store <2 x float> %119, <2 x float>* %122, align 4
  %123 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %120, i64 0, i32 6
  %124 = bitcast float* %123 to <2 x float>*
  %125 = load <2 x float>, <2 x float>* %124, align 8
  %126 = load float, float* %17, align 8
  %127 = insertelement <2 x float> undef, float %126, i32 0
  %128 = shufflevector <2 x float> %127, <2 x float> undef, <2 x i32> zeroinitializer
  %129 = fmul <2 x float> %125, %128
  %130 = fadd <2 x float> %119, %129
  %131 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %118, i64 1
  %132 = load %class.SkGlyph*, %class.SkGlyph** %131, align 8
  %133 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %117, i64 2
  %134 = bitcast %struct.SkPoint* %121 to <2 x float>*
  store <2 x float> %130, <2 x float>* %134, align 4
  %135 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %132, i64 0, i32 6
  %136 = bitcast float* %135 to <2 x float>*
  %137 = load <2 x float>, <2 x float>* %136, align 8
  %138 = load float, float* %17, align 8
  %139 = insertelement <2 x float> undef, float %138, i32 0
  %140 = shufflevector <2 x float> %139, <2 x float> undef, <2 x i32> zeroinitializer
  %141 = fmul <2 x float> %137, %140
  %142 = fadd <2 x float> %130, %141
  %143 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %118, i64 2
  %144 = icmp eq %class.SkGlyph** %143, %14
  br i1 %144, label %40, label %116
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6SkFont7getXPosEPKtiPff(%class.SkFont*, i16*, i32, float* nocapture, float) local_unnamed_addr #1 align 2 {
  %6 = alloca %class.SkStrikeSpec, align 8
  %7 = alloca %class.SkBulkGlyphMetrics, align 8
  %8 = bitcast %class.SkStrikeSpec* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %8) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* align 8 bitcast (%class.SkStrikeSpec* @__const._ZNK6SkFont10getMetricsEP13SkFontMetrics.strikeSpec to i8*), i64 160, i1 false)
  call void @_ZN12SkStrikeSpec17MakeCanonicalizedERK6SkFontPK7SkPaint(%class.SkStrikeSpec* nonnull sret %6, %class.SkFont* dereferenceable(24) %0, %class.SkPaint* null) #13
  %9 = bitcast %class.SkBulkGlyphMetrics* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %9) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 184, i1 false)
  call void @_ZN18SkBulkGlyphMetricsC1ERK12SkStrikeSpec(%class.SkBulkGlyphMetrics* nonnull %7, %class.SkStrikeSpec* nonnull dereferenceable(160) %6) #13
  %10 = sext i32 %2 to i64
  %11 = call { %class.SkGlyph**, i64 } @_ZN18SkBulkGlyphMetrics6glyphsE6SkSpanIKtE(%class.SkBulkGlyphMetrics* nonnull %7, i16* %1, i64 %10) #13
  %12 = extractvalue { %class.SkGlyph**, i64 } %11, 0
  %13 = extractvalue { %class.SkGlyph**, i64 } %11, 1
  %14 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %12, i64 %13
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %44, label %16

16:                                               ; preds = %5
  %17 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %6, i64 0, i32 4
  %18 = shl nsw i64 %13, 3
  %19 = add i64 %18, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %22 = and i64 %21, 3
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %39, label %24

24:                                               ; preds = %16, %24
  %25 = phi float [ %35, %24 ], [ %4, %16 ]
  %26 = phi %class.SkGlyph** [ %36, %24 ], [ %12, %16 ]
  %27 = phi float* [ %30, %24 ], [ %3, %16 ]
  %28 = phi i64 [ %37, %24 ], [ %22, %16 ]
  %29 = load %class.SkGlyph*, %class.SkGlyph** %26, align 8
  %30 = getelementptr inbounds float, float* %27, i64 1
  store float %25, float* %27, align 4
  %31 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %29, i64 0, i32 6
  %32 = load float, float* %31, align 8
  %33 = load float, float* %17, align 8
  %34 = fmul float %32, %33
  %35 = fadd float %25, %34
  %36 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %26, i64 1
  %37 = add i64 %28, -1
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %24, !llvm.loop !8

39:                                               ; preds = %24, %16
  %40 = phi float [ %4, %16 ], [ %35, %24 ]
  %41 = phi %class.SkGlyph** [ %12, %16 ], [ %36, %24 ]
  %42 = phi float* [ %3, %16 ], [ %30, %24 ]
  %43 = icmp ult i64 %19, 24
  br i1 %43, label %44, label %120

44:                                               ; preds = %39, %120, %5
  %45 = getelementptr inbounds %class.SkBulkGlyphMetrics, %class.SkBulkGlyphMetrics* %7, i64 0, i32 1, i32 0
  %46 = load %"class.SkStrikeCache::Strike"*, %"class.SkStrikeCache::Strike"** %45, align 8
  %47 = icmp eq %"class.SkStrikeCache::Strike"* %46, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.SkStrikeCache::Strike", %"class.SkStrikeCache::Strike"* %46, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = atomicrmw add i32* %49, i32 -1 acq_rel
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %58

52:                                               ; preds = %48
  %53 = bitcast %"class.SkStrikeCache::Strike"* %46 to %class.SkRefCntBase*
  %54 = bitcast %"class.SkStrikeCache::Strike"* %46 to void (%class.SkRefCntBase*)***
  %55 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %54, align 8
  %56 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %55, i64 2
  %57 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %56, align 8
  call void %57(%class.SkRefCntBase* nonnull %53) #13
  br label %58

58:                                               ; preds = %52, %48, %44
  %59 = getelementptr inbounds %class.SkBulkGlyphMetrics, %class.SkBulkGlyphMetrics* %7, i64 0, i32 0, i32 1
  %60 = load %class.SkGlyph**, %class.SkGlyph*** %59, align 8
  %61 = getelementptr inbounds %class.SkBulkGlyphMetrics, %class.SkBulkGlyphMetrics* %7, i64 0, i32 0, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %60, i64 %63
  br label %65

65:                                               ; preds = %65, %58
  %66 = phi %class.SkGlyph** [ %64, %58 ], [ %68, %65 ]
  %67 = icmp ugt %class.SkGlyph** %66, %60
  %68 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %66, i64 -1
  br i1 %67, label %65, label %69

69:                                               ; preds = %65
  %70 = bitcast %class.SkGlyph** %60 to i8*
  %71 = icmp eq i32 %62, 0
  br i1 %71, label %76, label %72

72:                                               ; preds = %69
  %73 = icmp sgt i32 %62, 20
  br i1 %73, label %74, label %75

74:                                               ; preds = %72
  call void @_Z7sk_freePv(i8* %70) #13
  br label %75

75:                                               ; preds = %74, %72
  store %class.SkGlyph** null, %class.SkGlyph*** %59, align 8
  store i32 0, i32* %61, align 8
  br label %76

76:                                               ; preds = %69, %75
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %9) #13
  %77 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %6, i64 0, i32 3, i32 0
  %78 = load %class.SkTypeface*, %class.SkTypeface** %77, align 8
  %79 = icmp eq %class.SkTypeface* %78, null
  br i1 %79, label %90, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %78, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = atomicrmw add i32* %81, i32 -1 acq_rel
  %83 = icmp eq i32 %82, 1
  br i1 %83, label %84, label %90

84:                                               ; preds = %80
  %85 = bitcast %class.SkTypeface* %78 to %class.SkRefCntBase*
  %86 = bitcast %class.SkTypeface* %78 to void (%class.SkRefCntBase*)***
  %87 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %86, align 8
  %88 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %87, i64 2
  %89 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %88, align 8
  call void %89(%class.SkRefCntBase* nonnull %85) #13
  br label %90

90:                                               ; preds = %84, %80, %76
  %91 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %6, i64 0, i32 2, i32 0
  %92 = load %class.SkPathEffect*, %class.SkPathEffect** %91, align 8
  %93 = icmp eq %class.SkPathEffect* %92, null
  br i1 %93, label %104, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %92, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = atomicrmw add i32* %95, i32 -1 acq_rel
  %97 = icmp eq i32 %96, 1
  br i1 %97, label %98, label %104

98:                                               ; preds = %94
  %99 = bitcast %class.SkPathEffect* %92 to %class.SkRefCntBase*
  %100 = bitcast %class.SkPathEffect* %92 to void (%class.SkRefCntBase*)***
  %101 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %100, align 8
  %102 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %101, i64 2
  %103 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %102, align 8
  call void %103(%class.SkRefCntBase* nonnull %99) #13
  br label %104

104:                                              ; preds = %98, %94, %90
  %105 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %6, i64 0, i32 1, i32 0
  %106 = load %class.SkMaskFilter*, %class.SkMaskFilter** %105, align 8
  %107 = icmp eq %class.SkMaskFilter* %106, null
  br i1 %107, label %118, label %108

108:                                              ; preds = %104
  %109 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %106, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = atomicrmw add i32* %109, i32 -1 acq_rel
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %112, label %118

112:                                              ; preds = %108
  %113 = bitcast %class.SkMaskFilter* %106 to %class.SkRefCntBase*
  %114 = bitcast %class.SkMaskFilter* %106 to void (%class.SkRefCntBase*)***
  %115 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %114, align 8
  %116 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %115, i64 2
  %117 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %116, align 8
  call void %117(%class.SkRefCntBase* nonnull %113) #13
  br label %118

118:                                              ; preds = %104, %108, %112
  %119 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %6, i64 0, i32 0
  call void @_ZN16SkAutoDescriptorD1Ev(%class.SkAutoDescriptor* nonnull %119) #13
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %8) #13
  ret void

120:                                              ; preds = %39, %120
  %121 = phi float [ %154, %120 ], [ %40, %39 ]
  %122 = phi %class.SkGlyph** [ %155, %120 ], [ %41, %39 ]
  %123 = phi float* [ %149, %120 ], [ %42, %39 ]
  %124 = load %class.SkGlyph*, %class.SkGlyph** %122, align 8
  %125 = getelementptr inbounds float, float* %123, i64 1
  store float %121, float* %123, align 4
  %126 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %124, i64 0, i32 6
  %127 = load float, float* %126, align 8
  %128 = load float, float* %17, align 8
  %129 = fmul float %127, %128
  %130 = fadd float %121, %129
  %131 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %122, i64 1
  %132 = load %class.SkGlyph*, %class.SkGlyph** %131, align 8
  %133 = getelementptr inbounds float, float* %123, i64 2
  store float %130, float* %125, align 4
  %134 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %132, i64 0, i32 6
  %135 = load float, float* %134, align 8
  %136 = load float, float* %17, align 8
  %137 = fmul float %135, %136
  %138 = fadd float %130, %137
  %139 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %122, i64 2
  %140 = load %class.SkGlyph*, %class.SkGlyph** %139, align 8
  %141 = getelementptr inbounds float, float* %123, i64 3
  store float %138, float* %133, align 4
  %142 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %140, i64 0, i32 6
  %143 = load float, float* %142, align 8
  %144 = load float, float* %17, align 8
  %145 = fmul float %143, %144
  %146 = fadd float %138, %145
  %147 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %122, i64 3
  %148 = load %class.SkGlyph*, %class.SkGlyph** %147, align 8
  %149 = getelementptr inbounds float, float* %123, i64 4
  store float %146, float* %141, align 4
  %150 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %148, i64 0, i32 6
  %151 = load float, float* %150, align 8
  %152 = load float, float* %17, align 8
  %153 = fmul float %151, %152
  %154 = fadd float %146, %153
  %155 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %122, i64 4
  %156 = icmp eq %class.SkGlyph** %155, %14
  br i1 %156, label %44, label %120
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6SkFont8getPathsEPKtiPFvPK6SkPathRK8SkMatrixPvES8_(%class.SkFont* nocapture readonly, i16*, i32, void (%class.SkPath*, %class.SkMatrix*, i8*)* nocapture, i8*) local_unnamed_addr #1 align 2 {
  %6 = alloca %class.SkFont, align 8
  %7 = alloca %class.SkMatrix, align 16
  %8 = alloca %class.SkStrikeSpec, align 8
  %9 = alloca %class.SkBulkGlyphMetricsAndPaths, align 8
  %10 = bitcast %class.SkFont* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #13
  %11 = getelementptr inbounds %class.SkFont, %class.SkFont* %6, i64 0, i32 0, i32 0
  store %class.SkTypeface* inttoptr (i64 -6148914691236517206 to %class.SkTypeface*), %class.SkTypeface** %11, align 8
  %12 = getelementptr inbounds %class.SkFont, %class.SkFont* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %12, align 8
  %13 = getelementptr inbounds %class.SkFont, %class.SkFont* %6, i64 0, i32 2
  store float 0xFFFFFFFFE0000000, float* %13, align 4
  %14 = getelementptr inbounds %class.SkFont, %class.SkFont* %6, i64 0, i32 3
  store float 0xFFFFFFFFE0000000, float* %14, align 8
  %15 = getelementptr inbounds %class.SkFont, %class.SkFont* %6, i64 0, i32 4
  %16 = getelementptr inbounds %class.SkFont, %class.SkFont* %6, i64 0, i32 5
  %17 = getelementptr inbounds %class.SkFont, %class.SkFont* %6, i64 0, i32 6
  %18 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 0, i32 0
  %19 = bitcast i8* %15 to i32*
  store i32 -1431655766, i32* %19, align 4
  %20 = load %class.SkTypeface*, %class.SkTypeface** %18, align 8
  %21 = icmp eq %class.SkTypeface* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %5
  %23 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %20, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw add i32* %23, i32 1 monotonic
  br label %25

25:                                               ; preds = %5, %22
  store %class.SkTypeface* %20, %class.SkTypeface** %11, align 8
  %26 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  %27 = bitcast float* %12 to i8*
  %28 = bitcast float* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 15, i1 false) #13
  %29 = load i8, i8* %15, align 4
  %30 = and i8 %29, -8
  %31 = or i8 %30, 4
  store i8 %31, i8* %15, align 4
  store i8 0, i8* %17, align 2
  %32 = load i8, i8* %16, align 1
  %33 = icmp eq i8 %32, 2
  br i1 %33, label %34, label %35

34:                                               ; preds = %25
  store i8 1, i8* %16, align 1
  br label %35

35:                                               ; preds = %25, %34
  %36 = load float, float* %12, align 8
  store float 6.400000e+01, float* %12, align 8
  %37 = fmul float %36, 1.562500e-02
  %38 = bitcast %class.SkMatrix* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %38) #13
  %39 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 1
  %40 = bitcast %class.SkMatrix* %7 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %40, align 16, !alias.scope !9
  %41 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 4
  %42 = bitcast float* %41 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %42, align 16, !alias.scope !9
  %43 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %43, align 16, !alias.scope !9
  store i32 16, i32* %39, align 4, !alias.scope !9
  %44 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix* nonnull %7, float %37, float %37) #13
  %45 = bitcast %class.SkStrikeSpec* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %45) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %45, i8* align 8 bitcast (%class.SkStrikeSpec* @__const._ZNK6SkFont10getMetricsEP13SkFontMetrics.strikeSpec to i8*), i64 160, i1 false)
  call void @_ZN12SkStrikeSpec16MakeWithNoDeviceERK6SkFontPK7SkPaint(%class.SkStrikeSpec* nonnull sret %8, %class.SkFont* nonnull dereferenceable(24) %6, %class.SkPaint* null) #13
  %46 = bitcast %class.SkBulkGlyphMetricsAndPaths* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %46) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 184, i1 false)
  call void @_ZN26SkBulkGlyphMetricsAndPathsC1ERK12SkStrikeSpec(%class.SkBulkGlyphMetricsAndPaths* nonnull %9, %class.SkStrikeSpec* nonnull dereferenceable(160) %8) #13
  %47 = sext i32 %2 to i64
  %48 = call { %class.SkGlyph**, i64 } @_ZN26SkBulkGlyphMetricsAndPaths6glyphsE6SkSpanIKtE(%class.SkBulkGlyphMetricsAndPaths* nonnull %9, i16* %1, i64 %47) #13
  %49 = extractvalue { %class.SkGlyph**, i64 } %48, 0
  %50 = extractvalue { %class.SkGlyph**, i64 } %48, 1
  %51 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %49, i64 %50
  %52 = icmp eq i64 %50, 0
  br i1 %52, label %53, label %142

53:                                               ; preds = %142, %35
  %54 = getelementptr inbounds %class.SkBulkGlyphMetricsAndPaths, %class.SkBulkGlyphMetricsAndPaths* %9, i64 0, i32 1, i32 0
  %55 = load %"class.SkStrikeCache::Strike"*, %"class.SkStrikeCache::Strike"** %54, align 8
  %56 = icmp eq %"class.SkStrikeCache::Strike"* %55, null
  br i1 %56, label %67, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %"class.SkStrikeCache::Strike", %"class.SkStrikeCache::Strike"* %55, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = atomicrmw add i32* %58, i32 -1 acq_rel
  %60 = icmp eq i32 %59, 1
  br i1 %60, label %61, label %67

61:                                               ; preds = %57
  %62 = bitcast %"class.SkStrikeCache::Strike"* %55 to %class.SkRefCntBase*
  %63 = bitcast %"class.SkStrikeCache::Strike"* %55 to void (%class.SkRefCntBase*)***
  %64 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %63, align 8
  %65 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %64, i64 2
  %66 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %65, align 8
  call void %66(%class.SkRefCntBase* nonnull %62) #13
  br label %67

67:                                               ; preds = %61, %57, %53
  %68 = getelementptr inbounds %class.SkBulkGlyphMetricsAndPaths, %class.SkBulkGlyphMetricsAndPaths* %9, i64 0, i32 0, i32 1
  %69 = load %class.SkGlyph**, %class.SkGlyph*** %68, align 8
  %70 = getelementptr inbounds %class.SkBulkGlyphMetricsAndPaths, %class.SkBulkGlyphMetricsAndPaths* %9, i64 0, i32 0, i32 0
  %71 = load i32, i32* %70, align 8
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %69, i64 %72
  br label %74

74:                                               ; preds = %74, %67
  %75 = phi %class.SkGlyph** [ %73, %67 ], [ %77, %74 ]
  %76 = icmp ugt %class.SkGlyph** %75, %69
  %77 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %75, i64 -1
  br i1 %76, label %74, label %78

78:                                               ; preds = %74
  %79 = bitcast %class.SkGlyph** %69 to i8*
  %80 = icmp eq i32 %71, 0
  br i1 %80, label %85, label %81

81:                                               ; preds = %78
  %82 = icmp sgt i32 %71, 20
  br i1 %82, label %83, label %84

83:                                               ; preds = %81
  call void @_Z7sk_freePv(i8* %79) #13
  br label %84

84:                                               ; preds = %83, %81
  store %class.SkGlyph** null, %class.SkGlyph*** %68, align 8
  store i32 0, i32* %70, align 8
  br label %85

85:                                               ; preds = %78, %84
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %46) #13
  %86 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %8, i64 0, i32 3, i32 0
  %87 = load %class.SkTypeface*, %class.SkTypeface** %86, align 8
  %88 = icmp eq %class.SkTypeface* %87, null
  br i1 %88, label %99, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %87, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = atomicrmw add i32* %90, i32 -1 acq_rel
  %92 = icmp eq i32 %91, 1
  br i1 %92, label %93, label %99

93:                                               ; preds = %89
  %94 = bitcast %class.SkTypeface* %87 to %class.SkRefCntBase*
  %95 = bitcast %class.SkTypeface* %87 to void (%class.SkRefCntBase*)***
  %96 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %95, align 8
  %97 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %96, i64 2
  %98 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %97, align 8
  call void %98(%class.SkRefCntBase* nonnull %94) #13
  br label %99

99:                                               ; preds = %93, %89, %85
  %100 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %8, i64 0, i32 2, i32 0
  %101 = load %class.SkPathEffect*, %class.SkPathEffect** %100, align 8
  %102 = icmp eq %class.SkPathEffect* %101, null
  br i1 %102, label %113, label %103

103:                                              ; preds = %99
  %104 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %101, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %105 = atomicrmw add i32* %104, i32 -1 acq_rel
  %106 = icmp eq i32 %105, 1
  br i1 %106, label %107, label %113

107:                                              ; preds = %103
  %108 = bitcast %class.SkPathEffect* %101 to %class.SkRefCntBase*
  %109 = bitcast %class.SkPathEffect* %101 to void (%class.SkRefCntBase*)***
  %110 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %109, align 8
  %111 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %110, i64 2
  %112 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %111, align 8
  call void %112(%class.SkRefCntBase* nonnull %108) #13
  br label %113

113:                                              ; preds = %107, %103, %99
  %114 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %8, i64 0, i32 1, i32 0
  %115 = load %class.SkMaskFilter*, %class.SkMaskFilter** %114, align 8
  %116 = icmp eq %class.SkMaskFilter* %115, null
  br i1 %116, label %127, label %117

117:                                              ; preds = %113
  %118 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %115, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = atomicrmw add i32* %118, i32 -1 acq_rel
  %120 = icmp eq i32 %119, 1
  br i1 %120, label %121, label %127

121:                                              ; preds = %117
  %122 = bitcast %class.SkMaskFilter* %115 to %class.SkRefCntBase*
  %123 = bitcast %class.SkMaskFilter* %115 to void (%class.SkRefCntBase*)***
  %124 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %123, align 8
  %125 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %124, i64 2
  %126 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %125, align 8
  call void %126(%class.SkRefCntBase* nonnull %122) #13
  br label %127

127:                                              ; preds = %113, %117, %121
  %128 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %8, i64 0, i32 0
  call void @_ZN16SkAutoDescriptorD1Ev(%class.SkAutoDescriptor* nonnull %128) #13
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %45) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %38) #13
  %129 = load %class.SkTypeface*, %class.SkTypeface** %11, align 8
  %130 = icmp eq %class.SkTypeface* %129, null
  br i1 %130, label %141, label %131

131:                                              ; preds = %127
  %132 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %129, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = atomicrmw add i32* %132, i32 -1 acq_rel
  %134 = icmp eq i32 %133, 1
  br i1 %134, label %135, label %141

135:                                              ; preds = %131
  %136 = bitcast %class.SkTypeface* %129 to %class.SkRefCntBase*
  %137 = bitcast %class.SkTypeface* %129 to void (%class.SkRefCntBase*)***
  %138 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %137, align 8
  %139 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %138, i64 2
  %140 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %139, align 8
  call void %140(%class.SkRefCntBase* nonnull %136) #13
  br label %141

141:                                              ; preds = %127, %131, %135
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #13
  ret void

142:                                              ; preds = %35, %142
  %143 = phi %class.SkGlyph** [ %146, %142 ], [ %49, %35 ]
  %144 = load %class.SkGlyph*, %class.SkGlyph** %143, align 8
  %145 = call %class.SkPath* @_ZNK7SkGlyph4pathEv(%class.SkGlyph* %144) #13
  call void %3(%class.SkPath* %145, %class.SkMatrix* nonnull dereferenceable(40) %7, i8* %4) #13
  %146 = getelementptr inbounds %class.SkGlyph*, %class.SkGlyph** %143, i64 1
  %147 = icmp eq %class.SkGlyph** %146, %51
  br i1 %147, label %53, label %142
}

declare void @_ZN12SkStrikeSpec16MakeWithNoDeviceERK6SkFontPK7SkPaint(%class.SkStrikeSpec* sret, %class.SkFont* dereferenceable(24), %class.SkPaint*) local_unnamed_addr #3

declare void @_ZN26SkBulkGlyphMetricsAndPathsC1ERK12SkStrikeSpec(%class.SkBulkGlyphMetricsAndPaths*, %class.SkStrikeSpec* dereferenceable(160)) unnamed_addr #3

declare { %class.SkGlyph**, i64 } @_ZN26SkBulkGlyphMetricsAndPaths6glyphsE6SkSpanIKtE(%class.SkBulkGlyphMetricsAndPaths*, i16*, i64) local_unnamed_addr #3

declare %class.SkPath* @_ZNK7SkGlyph4pathEv(%class.SkGlyph*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6SkFont7getPathEtP6SkPath(%class.SkFont* nocapture readonly, i16 zeroext, %class.SkPath*) local_unnamed_addr #1 align 2 {
  %4 = alloca i16, align 2
  %5 = alloca %struct.Pair, align 8
  store i16 %1, i16* %4, align 2
  %6 = bitcast %struct.Pair* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  %7 = getelementptr inbounds %struct.Pair, %struct.Pair* %5, i64 0, i32 0
  store %class.SkPath* %2, %class.SkPath** %7, align 8
  %8 = getelementptr inbounds %struct.Pair, %struct.Pair* %5, i64 0, i32 1
  store i8 0, i8* %8, align 8
  call void @_ZNK6SkFont8getPathsEPKtiPFvPK6SkPathRK8SkMatrixPvES8_(%class.SkFont* %0, i16* nonnull %4, i32 1, void (%class.SkPath*, %class.SkMatrix*, i8*)* nonnull @"_ZZNK6SkFont7getPathEtP6SkPathEN3$_08__invokeEPKS0_RK8SkMatrixPv", i8* nonnull %6)
  %9 = load i8, i8* %8, align 8, !range !12
  %10 = icmp ne i8 %9, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #13
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK6SkFont10getMetricsEP13SkFontMetrics(%class.SkFont*, %struct.SkFontMetrics*) local_unnamed_addr #1 align 2 {
  %3 = alloca %class.SkStrikeSpec, align 8
  %4 = alloca %struct.SkFontMetrics, align 4
  %5 = alloca %class.sk_sp.21, align 8
  %6 = bitcast %class.SkStrikeSpec* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 bitcast (%class.SkStrikeSpec* @__const._ZNK6SkFont10getMetricsEP13SkFontMetrics.strikeSpec to i8*), i64 160, i1 false)
  call void @_ZN12SkStrikeSpec17MakeCanonicalizedERK6SkFontPK7SkPaint(%class.SkStrikeSpec* nonnull sret %3, %class.SkFont* dereferenceable(24) %0, %class.SkPaint* null) #13
  %7 = bitcast %struct.SkFontMetrics* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %7) #13
  %8 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %4, i64 0, i32 0
  store i32 -1431655766, i32* %8, align 4
  %9 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %4, i64 0, i32 1
  %10 = icmp eq %struct.SkFontMetrics* %1, null
  %11 = select i1 %10, %struct.SkFontMetrics* %4, %struct.SkFontMetrics* %1
  %12 = bitcast %class.sk_sp.21* %5 to i8*
  %13 = bitcast float* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 -1, i64 60, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13
  %14 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %5, i64 0, i32 0
  store %"class.SkStrikeCache::Strike"* inttoptr (i64 -6148914691236517206 to %"class.SkStrikeCache::Strike"*), %"class.SkStrikeCache::Strike"** %14, align 8
  %15 = call %class.SkStrikeCache* @_ZN13SkStrikeCache17GlobalStrikeCacheEv() #13
  call void @_ZNK12SkStrikeSpec18findOrCreateStrikeEP13SkStrikeCache(%class.sk_sp.21* nonnull sret %5, %class.SkStrikeSpec* nonnull %3, %class.SkStrikeCache* %15) #13
  %16 = load %"class.SkStrikeCache::Strike"*, %"class.SkStrikeCache::Strike"** %14, align 8
  %17 = getelementptr inbounds %"class.SkStrikeCache::Strike", %"class.SkStrikeCache::Strike"* %16, i64 0, i32 6, i32 2
  %18 = bitcast %struct.SkFontMetrics* %11 to i8*
  %19 = bitcast %struct.SkFontMetrics* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* align 4 %19, i64 64, i1 false)
  %20 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %3, i64 0, i32 4
  %21 = load float, float* %20, align 8
  %22 = fcmp une float %21, 1.000000e+00
  br i1 %22, label %30, label %23

23:                                               ; preds = %2
  %24 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %11, i64 0, i32 3
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %11, i64 0, i32 2
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %11, i64 0, i32 5
  %29 = load float, float* %28, align 4
  br label %60

30:                                               ; preds = %2
  %31 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %11, i64 0, i32 1
  %32 = bitcast float* %31 to <4 x float>*
  %33 = load <4 x float>, <4 x float>* %32, align 4
  %34 = insertelement <4 x float> undef, float %21, i32 0
  %35 = shufflevector <4 x float> %34, <4 x float> undef, <4 x i32> zeroinitializer
  %36 = fmul <4 x float> %35, %33
  %37 = bitcast float* %31 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4
  %38 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %11, i64 0, i32 5
  %39 = bitcast float* %38 to <4 x float>*
  %40 = load <4 x float>, <4 x float>* %39, align 4
  %41 = fmul <4 x float> %35, %40
  %42 = bitcast float* %38 to <4 x float>*
  store <4 x float> %41, <4 x float>* %42, align 4
  %43 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %11, i64 0, i32 9
  %44 = bitcast float* %43 to <4 x float>*
  %45 = load <4 x float>, <4 x float>* %44, align 4
  %46 = fmul <4 x float> %35, %45
  %47 = bitcast float* %43 to <4 x float>*
  store <4 x float> %46, <4 x float>* %47, align 4
  %48 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %11, i64 0, i32 13
  %49 = load float, float* %48, align 4
  %50 = fmul float %21, %49
  store float %50, float* %48, align 4
  %51 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %11, i64 0, i32 14
  %52 = load float, float* %51, align 4
  %53 = fmul float %21, %52
  store float %53, float* %51, align 4
  %54 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %11, i64 0, i32 15
  %55 = load float, float* %54, align 4
  %56 = fmul float %21, %55
  store float %56, float* %54, align 4
  %57 = extractelement <4 x float> %36, i32 1
  %58 = extractelement <4 x float> %36, i32 2
  %59 = extractelement <4 x float> %41, i32 0
  br label %60

60:                                               ; preds = %23, %30
  %61 = phi float [ %29, %23 ], [ %59, %30 ]
  %62 = phi float [ %27, %23 ], [ %57, %30 ]
  %63 = phi float [ %25, %23 ], [ %58, %30 ]
  %64 = fsub float %63, %62
  %65 = fadd float %64, %61
  %66 = icmp eq %"class.SkStrikeCache::Strike"* %16, null
  br i1 %66, label %77, label %67

67:                                               ; preds = %60
  %68 = getelementptr inbounds %"class.SkStrikeCache::Strike", %"class.SkStrikeCache::Strike"* %16, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = atomicrmw add i32* %68, i32 -1 acq_rel
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %71, label %77

71:                                               ; preds = %67
  %72 = bitcast %"class.SkStrikeCache::Strike"* %16 to %class.SkRefCntBase*
  %73 = bitcast %"class.SkStrikeCache::Strike"* %16 to void (%class.SkRefCntBase*)***
  %74 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %73, align 8
  %75 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %74, i64 2
  %76 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %75, align 8
  call void %76(%class.SkRefCntBase* nonnull %72) #13
  br label %77

77:                                               ; preds = %60, %67, %71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %7) #13
  %78 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %3, i64 0, i32 3, i32 0
  %79 = load %class.SkTypeface*, %class.SkTypeface** %78, align 8
  %80 = icmp eq %class.SkTypeface* %79, null
  br i1 %80, label %91, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %79, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = atomicrmw add i32* %82, i32 -1 acq_rel
  %84 = icmp eq i32 %83, 1
  br i1 %84, label %85, label %91

85:                                               ; preds = %81
  %86 = bitcast %class.SkTypeface* %79 to %class.SkRefCntBase*
  %87 = bitcast %class.SkTypeface* %79 to void (%class.SkRefCntBase*)***
  %88 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %87, align 8
  %89 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %88, i64 2
  %90 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %89, align 8
  call void %90(%class.SkRefCntBase* nonnull %86) #13
  br label %91

91:                                               ; preds = %85, %81, %77
  %92 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %3, i64 0, i32 2, i32 0
  %93 = load %class.SkPathEffect*, %class.SkPathEffect** %92, align 8
  %94 = icmp eq %class.SkPathEffect* %93, null
  br i1 %94, label %105, label %95

95:                                               ; preds = %91
  %96 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %93, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = atomicrmw add i32* %96, i32 -1 acq_rel
  %98 = icmp eq i32 %97, 1
  br i1 %98, label %99, label %105

99:                                               ; preds = %95
  %100 = bitcast %class.SkPathEffect* %93 to %class.SkRefCntBase*
  %101 = bitcast %class.SkPathEffect* %93 to void (%class.SkRefCntBase*)***
  %102 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %101, align 8
  %103 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %102, i64 2
  %104 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %103, align 8
  call void %104(%class.SkRefCntBase* nonnull %100) #13
  br label %105

105:                                              ; preds = %99, %95, %91
  %106 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %3, i64 0, i32 1, i32 0
  %107 = load %class.SkMaskFilter*, %class.SkMaskFilter** %106, align 8
  %108 = icmp eq %class.SkMaskFilter* %107, null
  br i1 %108, label %119, label %109

109:                                              ; preds = %105
  %110 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %107, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = atomicrmw add i32* %110, i32 -1 acq_rel
  %112 = icmp eq i32 %111, 1
  br i1 %112, label %113, label %119

113:                                              ; preds = %109
  %114 = bitcast %class.SkMaskFilter* %107 to %class.SkRefCntBase*
  %115 = bitcast %class.SkMaskFilter* %107 to void (%class.SkRefCntBase*)***
  %116 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %115, align 8
  %117 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %116, i64 2
  %118 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %117, align 8
  call void %118(%class.SkRefCntBase* nonnull %114) #13
  br label %119

119:                                              ; preds = %105, %109, %113
  %120 = getelementptr inbounds %class.SkStrikeSpec, %class.SkStrikeSpec* %3, i64 0, i32 0
  call void @_ZN16SkAutoDescriptorD1Ev(%class.SkAutoDescriptor* nonnull %120) #13
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #13
  ret float %65
}

declare void @_ZNK12SkStrikeSpec18findOrCreateStrikeEP13SkStrikeCache(%class.sk_sp.21* sret, %class.SkStrikeSpec*, %class.SkStrikeCache*) local_unnamed_addr #3

declare %class.SkStrikeCache* @_ZN13SkStrikeCache17GlobalStrikeCacheEv() local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10SkFontPriv16ScaleFontMetricsEP13SkFontMetricsf(%struct.SkFontMetrics* nocapture, float) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %0, i64 0, i32 1
  %4 = bitcast float* %3 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 4
  %6 = insertelement <4 x float> undef, float %1, i32 0
  %7 = shufflevector <4 x float> %6, <4 x float> undef, <4 x i32> zeroinitializer
  %8 = fmul <4 x float> %5, %7
  %9 = bitcast float* %3 to <4 x float>*
  store <4 x float> %8, <4 x float>* %9, align 4
  %10 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %0, i64 0, i32 5
  %11 = bitcast float* %10 to <4 x float>*
  %12 = load <4 x float>, <4 x float>* %11, align 4
  %13 = fmul <4 x float> %12, %7
  %14 = bitcast float* %10 to <4 x float>*
  store <4 x float> %13, <4 x float>* %14, align 4
  %15 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %0, i64 0, i32 9
  %16 = bitcast float* %15 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 4
  %18 = fmul <4 x float> %17, %7
  %19 = bitcast float* %15 to <4 x float>*
  store <4 x float> %18, <4 x float>* %19, align 4
  %20 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %0, i64 0, i32 13
  %21 = load float, float* %20, align 4
  %22 = fmul float %21, %1
  store float %22, float* %20, align 4
  %23 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %0, i64 0, i32 14
  %24 = load float, float* %23, align 4
  %25 = fmul float %24, %1
  store float %25, float* %23, align 4
  %26 = getelementptr inbounds %struct.SkFontMetrics, %struct.SkFontMetrics* %0, i64 0, i32 15
  %27 = load float, float* %26, align 4
  %28 = fmul float %27, %1
  store float %28, float* %26, align 4
  ret void
}

declare %class.SkTypeface* @_ZN10SkTypeface18GetDefaultTypefaceENS_5StyleE(i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6SkFont20refTypefaceOrDefaultEv(%class.sk_sp* noalias sret, %class.SkFont* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.SkFont, %class.SkFont* %1, i64 0, i32 0, i32 0
  %4 = load %class.SkTypeface*, %class.SkTypeface** %3, align 8
  %5 = icmp eq %class.SkTypeface* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  %8 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  store %class.SkTypeface* %4, %class.SkTypeface** %7, align 8
  br label %11

10:                                               ; preds = %2
  tail call void @_ZN10SkTypeface11MakeDefaultEv(%class.sk_sp* sret %0) #13
  br label %11

11:                                               ; preds = %10, %6
  ret void
}

declare void @_ZN10SkTypeface11MakeDefaultEv(%class.sk_sp* sret) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN10SkFontPriv13GetFontBoundsERK6SkFont(%class.SkFont* nocapture readonly dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %2 = alloca { <2 x float>, <2 x float> }, align 8
  %3 = bitcast { <2 x float>, <2 x float> }* %2 to %struct.SkRect*
  %4 = alloca %class.SkMatrix, align 16
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = bitcast { <2 x float>, <2 x float> }* %5 to %struct.SkRect*
  %7 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #13
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %9 = bitcast %class.SkMatrix* %4 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %9, align 16
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 4
  %11 = bitcast float* %10 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %11, align 16
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %12, align 16
  store i32 16, i32* %8, align 4
  %13 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  %14 = load float, float* %13, align 8
  %15 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = fmul float %14, %16
  %18 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix* nonnull %4, float %17, float %14) #13
  %19 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 3
  %20 = load float, float* %19, align 8
  %21 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8postSkewEff(%class.SkMatrix* nonnull %4, float %20, float 0.000000e+00) #13
  %22 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 0, i32 0
  %23 = load %class.SkTypeface*, %class.SkTypeface** %22, align 8
  %24 = icmp eq %class.SkTypeface* %23, null
  br i1 %24, label %25, label %27

25:                                               ; preds = %1
  %26 = call %class.SkTypeface* @_ZN10SkTypeface18GetDefaultTypefaceENS_5StyleE(i32 0) #13
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %class.SkTypeface* [ %26, %25 ], [ %23, %1 ]
  %29 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  %30 = bitcast { <2 x float>, <2 x float> }* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29) #13
  %31 = call { <2 x float>, <2 x float> } @_ZNK10SkTypeface9getBoundsEv(%class.SkTypeface* %28) #13
  %32 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0
  %33 = extractvalue { <2 x float>, <2 x float> } %31, 0
  store <2 x float> %33, <2 x float>* %32, align 8
  %34 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  %35 = extractvalue { <2 x float>, <2 x float> } %31, 1
  store <2 x float> %35, <2 x float>* %34, align 8
  %36 = call zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix* nonnull %4, %struct.SkRect* nonnull %3, %struct.SkRect* nonnull dereferenceable(16) %6, i32 1) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #13
  %37 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %2, i64 0, i32 0
  %38 = load <2 x float>, <2 x float>* %37, align 8
  %39 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %38, 0
  %40 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %2, i64 0, i32 1
  %41 = load <2 x float>, <2 x float>* %40, align 8
  %42 = insertvalue { <2 x float>, <2 x float> } %39, <2 x float> %41, 1
  ret { <2 x float>, <2 x float> } %42
}

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix*, float, float) local_unnamed_addr #3

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8postSkewEff(%class.SkMatrix*, float, float) local_unnamed_addr #3

declare zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix*, %struct.SkRect*, %struct.SkRect* dereferenceable(16), i32) local_unnamed_addr #3

declare { <2 x float>, <2 x float> } @_ZNK10SkTypeface9getBoundsEv(%class.SkTypeface*) local_unnamed_addr #3

declare i32 @_ZN5SkUTF9CountUTF8EPKcm(i8*, i64) local_unnamed_addr #3

declare i32 @_ZN5SkUTF10CountUTF16EPKtm(i16*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkFontPriv16GlyphsToUnicharsERK6SkFontPKtiPi(%class.SkFont* nocapture readonly dereferenceable(24), i16* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #1 align 2 {
  %5 = icmp slt i32 %2, 1
  br i1 %5, label %73, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 0, i32 0
  %8 = load %class.SkTypeface*, %class.SkTypeface** %7, align 8
  %9 = icmp eq %class.SkTypeface* %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = tail call %class.SkTypeface* @_ZN10SkTypeface18GetDefaultTypefaceENS_5StyleE(i32 0) #13
  br label %12

12:                                               ; preds = %6, %10
  %13 = phi %class.SkTypeface* [ %11, %10 ], [ %8, %6 ]
  %14 = tail call i32 @_ZNK10SkTypeface11countGlyphsEv(%class.SkTypeface* %13) #13
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %24, label %16

16:                                               ; preds = %12
  %17 = sext i32 %14 to i64
  %18 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %17, i64 4) #13
  %19 = extractvalue { i64, i1 } %18, 1
  %20 = extractvalue { i64, i1 } %18, 0
  %21 = select i1 %19, i64 -1, i64 %20
  %22 = tail call i8* @_Znam(i64 %21) #15
  %23 = bitcast i8* %22 to i32*
  br label %24

24:                                               ; preds = %16, %12
  %25 = phi i8* [ null, %12 ], [ %22, %16 ]
  %26 = phi i32* [ null, %12 ], [ %23, %16 ]
  %27 = bitcast %class.SkTypeface* %13 to void (%class.SkTypeface*, i32*)***
  %28 = load void (%class.SkTypeface*, i32*)**, void (%class.SkTypeface*, i32*)*** %27, align 8
  %29 = getelementptr inbounds void (%class.SkTypeface*, i32*)*, void (%class.SkTypeface*, i32*)** %28, i64 9
  %30 = load void (%class.SkTypeface*, i32*)*, void (%class.SkTypeface*, i32*)** %29, align 8
  tail call void %30(%class.SkTypeface* %13, i32* %26) #13
  %31 = zext i32 %2 to i64
  %32 = and i64 %31, 1
  %33 = icmp eq i32 %2, 1
  br i1 %33, label %36, label %34

34:                                               ; preds = %24
  %35 = sub nsw i64 %31, %32
  br label %54

36:                                               ; preds = %78, %24
  %37 = phi i64 [ 0, %24 ], [ %81, %78 ]
  %38 = icmp eq i64 %32, 0
  br i1 %38, label %51, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds i16, i16* %1, i64 %37
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = icmp ugt i32 %14, %42
  br i1 %43, label %44, label %48

44:                                               ; preds = %39
  %45 = zext i16 %41 to i64
  %46 = getelementptr inbounds i32, i32* %26, i64 %45
  %47 = load i32, i32* %46, align 4
  br label %48

48:                                               ; preds = %44, %39
  %49 = phi i32 [ %47, %44 ], [ 65533, %39 ]
  %50 = getelementptr inbounds i32, i32* %3, i64 %37
  store i32 %49, i32* %50, align 4
  br label %51

51:                                               ; preds = %36, %48
  %52 = icmp eq i32* %26, null
  br i1 %52, label %73, label %53

53:                                               ; preds = %51
  tail call void @_ZdaPv(i8* %25) #15
  br label %73

54:                                               ; preds = %78, %34
  %55 = phi i64 [ 0, %34 ], [ %81, %78 ]
  %56 = phi i64 [ %35, %34 ], [ %82, %78 ]
  %57 = getelementptr inbounds i16, i16* %1, i64 %55
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = icmp ugt i32 %14, %59
  br i1 %60, label %61, label %65

61:                                               ; preds = %54
  %62 = zext i16 %58 to i64
  %63 = getelementptr inbounds i32, i32* %26, i64 %62
  %64 = load i32, i32* %63, align 4
  br label %65

65:                                               ; preds = %54, %61
  %66 = phi i32 [ %64, %61 ], [ 65533, %54 ]
  %67 = getelementptr inbounds i32, i32* %3, i64 %55
  store i32 %66, i32* %67, align 4
  %68 = or i64 %55, 1
  %69 = getelementptr inbounds i16, i16* %1, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = icmp ugt i32 %14, %71
  br i1 %72, label %74, label %78

73:                                               ; preds = %53, %51, %4
  ret void

74:                                               ; preds = %65
  %75 = zext i16 %70 to i64
  %76 = getelementptr inbounds i32, i32* %26, i64 %75
  %77 = load i32, i32* %76, align 4
  br label %78

78:                                               ; preds = %74, %65
  %79 = phi i32 [ %77, %74 ], [ 65533, %65 ]
  %80 = getelementptr inbounds i32, i32* %3, i64 %68
  store i32 %79, i32* %80, align 4
  %81 = add nuw nsw i64 %55, 2
  %82 = add i64 %56, -2
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %36, label %54
}

declare i32 @_ZNK10SkTypeface11countGlyphsEv(%class.SkTypeface*) local_unnamed_addr #3

declare i32 @_ZN5SkUTF8NextUTF8EPPKcS1_(i8**, i8*) local_unnamed_addr #3

declare i32 @_ZN5SkUTF9NextUTF16EPPKtS1_(i16**, i16*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #7

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #3

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN16SkAutoDescriptorD1Ev(%class.SkAutoDescriptor*) unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @"_ZZNK6SkFont7getPathEtP6SkPathEN3$_08__invokeEPKS0_RK8SkMatrixPv"(%class.SkPath*, %class.SkMatrix* dereferenceable(40), i8* nocapture) #9 align 2 {
  %4 = icmp eq %class.SkPath* %0, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %3
  %6 = bitcast i8* %2 to %class.SkPath**
  %7 = load %class.SkPath*, %class.SkPath** %6, align 8
  tail call void @_ZNK6SkPath9transformERK8SkMatrixPS_22SkApplyPerspectiveClip(%class.SkPath* nonnull %0, %class.SkMatrix* dereferenceable(40) %1, %class.SkPath* %7, i32 1) #13
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 1, i8* %8, align 8
  br label %9

9:                                                ; preds = %3, %5
  ret void
}

declare void @_ZNK6SkPath9transformERK8SkMatrixPS_22SkApplyPerspectiveClip(%class.SkPath*, %class.SkMatrix* dereferenceable(40), %class.SkPath*, i32) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #10

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #11

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #12

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN8SkMatrix5ScaleEff: argument 0"}
!6 = distinct !{!6, !"_ZN8SkMatrix5ScaleEff"}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN8SkMatrix5ScaleEff: argument 0"}
!11 = distinct !{!11, !"_ZN8SkMatrix5ScaleEff"}
!12 = !{i8 0, i8 2}
