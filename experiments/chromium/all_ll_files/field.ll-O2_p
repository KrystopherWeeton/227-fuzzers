; ModuleID = '../../third_party/perfetto/src/protozero/field.cc'
source_filename = "../../third_party/perfetto/src/protozero/field.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.protozero::Field" = type <{ i64, i32, i16, i8, i8 }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNK9protozero5Field28SerializeAndAppendToInternalINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPT_ = comdat any

$_ZNK9protozero5Field28SerializeAndAppendToInternalINSt3__16vectorIhNS2_9allocatorIhEEEEEEvPT_ = comdat any

$_ZN8perfetto4base8BasenameEPKc = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@.str = private unnamed_addr constant [50 x i8] c"../../third_party/perfetto/src/protozero/field.cc\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"Unknown field type %u (errno: %d, %s)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9protozero5Field20SerializeAndAppendToEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.protozero::Field"*, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZNK9protozero5Field28SerializeAndAppendToInternalINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPT_(%"class.protozero::Field"* %0, %"class.std::__1::basic_string"* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK9protozero5Field28SerializeAndAppendToInternalINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPT_(%"class.protozero::Field"*, %"class.std::__1::basic_string"*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  br label %12

10:                                               ; preds = %2
  %11 = zext i8 %5 to i64
  br label %12

12:                                               ; preds = %7, %10
  %13 = phi i64 [ %9, %7 ], [ %11, %10 ]
  %14 = add i64 %13, 15
  %15 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = add i64 %14, %17
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %1, i64 %18, i8 signext 0) #9
  %19 = load i8, i8* %4, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  br label %26

24:                                               ; preds = %12
  %25 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %26

26:                                               ; preds = %21, %24
  %27 = phi i8* [ %23, %21 ], [ %25, %24 ]
  %28 = getelementptr inbounds i8, i8* %27, i64 %13
  %29 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 3
  %30 = load i8, i8* %29, align 2
  switch i8 %30, label %172 [
    i8 0, label %31
    i8 5, label %72
    i8 1, label %100
    i8 2, label %127
  ]

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 2
  %33 = load i16, i16* %32, align 4
  %34 = zext i16 %33 to i32
  %35 = shl nuw nsw i32 %34, 3
  %36 = icmp ugt i16 %33, 15
  %37 = trunc i32 %35 to i8
  br i1 %36, label %38, label %49

38:                                               ; preds = %31, %38
  %39 = phi i8 [ %46, %38 ], [ %37, %31 ]
  %40 = phi i32 [ %44, %38 ], [ %35, %31 ]
  %41 = phi i8* [ %43, %38 ], [ %28, %31 ]
  %42 = or i8 %39, -128
  %43 = getelementptr inbounds i8, i8* %41, i64 1
  store i8 %42, i8* %41, align 1
  %44 = lshr i32 %40, 7
  %45 = icmp ugt i32 %40, 16383
  %46 = trunc i32 %44 to i8
  br i1 %45, label %38, label %47

47:                                               ; preds = %38
  %48 = trunc i32 %44 to i8
  br label %49

49:                                               ; preds = %47, %31
  %50 = phi i8* [ %28, %31 ], [ %43, %47 ]
  %51 = phi i8 [ %37, %31 ], [ %48, %47 ]
  store i8 %51, i8* %50, align 1
  %52 = getelementptr inbounds i8, i8* %50, i64 1
  %53 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = icmp ugt i64 %54, 127
  %56 = trunc i64 %54 to i8
  br i1 %55, label %57, label %68

57:                                               ; preds = %49, %57
  %58 = phi i8 [ %65, %57 ], [ %56, %49 ]
  %59 = phi i64 [ %63, %57 ], [ %54, %49 ]
  %60 = phi i8* [ %62, %57 ], [ %52, %49 ]
  %61 = or i8 %58, -128
  %62 = getelementptr inbounds i8, i8* %60, i64 1
  store i8 %61, i8* %60, align 1
  %63 = lshr i64 %59, 7
  %64 = icmp ugt i64 %59, 16383
  %65 = trunc i64 %63 to i8
  br i1 %64, label %57, label %66

66:                                               ; preds = %57
  %67 = trunc i64 %63 to i8
  br label %68

68:                                               ; preds = %66, %49
  %69 = phi i8* [ %52, %49 ], [ %62, %66 ]
  %70 = phi i8 [ %56, %49 ], [ %67, %66 ]
  store i8 %70, i8* %69, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 1
  br label %179

72:                                               ; preds = %26
  %73 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 2
  %74 = load i16, i16* %73, align 4
  %75 = zext i16 %74 to i32
  %76 = shl nuw nsw i32 %75, 3
  %77 = or i32 %76, 5
  %78 = icmp ugt i32 %77, 127
  %79 = trunc i32 %77 to i8
  br i1 %78, label %80, label %91

80:                                               ; preds = %72, %80
  %81 = phi i8 [ %88, %80 ], [ %79, %72 ]
  %82 = phi i32 [ %86, %80 ], [ %77, %72 ]
  %83 = phi i8* [ %85, %80 ], [ %28, %72 ]
  %84 = or i8 %81, -128
  %85 = getelementptr inbounds i8, i8* %83, i64 1
  store i8 %84, i8* %83, align 1
  %86 = lshr i32 %82, 7
  %87 = icmp ugt i32 %82, 16383
  %88 = trunc i32 %86 to i8
  br i1 %87, label %80, label %89

89:                                               ; preds = %80
  %90 = trunc i32 %86 to i8
  br label %91

91:                                               ; preds = %89, %72
  %92 = phi i8* [ %28, %72 ], [ %85, %89 ]
  %93 = phi i8 [ %79, %72 ], [ %90, %89 ]
  store i8 %93, i8* %92, align 1
  %94 = getelementptr inbounds i8, i8* %92, i64 1
  %95 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = trunc i64 %96 to i32
  %98 = bitcast i8* %94 to i32*
  store i32 %97, i32* %98, align 1
  %99 = getelementptr inbounds i8, i8* %92, i64 5
  br label %179

100:                                              ; preds = %26
  %101 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 2
  %102 = load i16, i16* %101, align 4
  %103 = zext i16 %102 to i32
  %104 = shl nuw nsw i32 %103, 3
  %105 = or i32 %104, 1
  %106 = icmp ugt i32 %105, 127
  %107 = trunc i32 %105 to i8
  br i1 %106, label %108, label %119

108:                                              ; preds = %100, %108
  %109 = phi i8 [ %116, %108 ], [ %107, %100 ]
  %110 = phi i32 [ %114, %108 ], [ %105, %100 ]
  %111 = phi i8* [ %113, %108 ], [ %28, %100 ]
  %112 = or i8 %109, -128
  %113 = getelementptr inbounds i8, i8* %111, i64 1
  store i8 %112, i8* %111, align 1
  %114 = lshr i32 %110, 7
  %115 = icmp ugt i32 %110, 16383
  %116 = trunc i32 %114 to i8
  br i1 %115, label %108, label %117

117:                                              ; preds = %108
  %118 = trunc i32 %114 to i8
  br label %119

119:                                              ; preds = %117, %100
  %120 = phi i8* [ %28, %100 ], [ %113, %117 ]
  %121 = phi i8 [ %107, %100 ], [ %118, %117 ]
  store i8 %121, i8* %120, align 1
  %122 = getelementptr inbounds i8, i8* %120, i64 1
  %123 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 0
  %124 = bitcast i8* %122 to i64*
  %125 = load i64, i64* %123, align 8
  store i64 %125, i64* %124, align 1
  %126 = getelementptr inbounds i8, i8* %120, i64 9
  br label %179

127:                                              ; preds = %26
  %128 = bitcast %"class.protozero::Field"* %0 to i8**
  %129 = load i8*, i8** %128, align 8
  %130 = load i32, i32* %15, align 8
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 2
  %133 = load i16, i16* %132, align 4
  %134 = zext i16 %133 to i32
  %135 = shl nuw nsw i32 %134, 3
  %136 = or i32 %135, 2
  %137 = icmp ugt i32 %136, 127
  %138 = trunc i32 %136 to i8
  br i1 %137, label %139, label %150

139:                                              ; preds = %127, %139
  %140 = phi i8 [ %147, %139 ], [ %138, %127 ]
  %141 = phi i32 [ %145, %139 ], [ %136, %127 ]
  %142 = phi i8* [ %144, %139 ], [ %28, %127 ]
  %143 = or i8 %140, -128
  %144 = getelementptr inbounds i8, i8* %142, i64 1
  store i8 %143, i8* %142, align 1
  %145 = lshr i32 %141, 7
  %146 = icmp ugt i32 %141, 16383
  %147 = trunc i32 %145 to i8
  br i1 %146, label %139, label %148

148:                                              ; preds = %139
  %149 = trunc i32 %145 to i8
  br label %150

150:                                              ; preds = %148, %127
  %151 = phi i8* [ %28, %127 ], [ %144, %148 ]
  %152 = phi i8 [ %138, %127 ], [ %149, %148 ]
  store i8 %152, i8* %151, align 1
  %153 = getelementptr inbounds i8, i8* %151, i64 1
  %154 = icmp ugt i32 %130, 127
  %155 = trunc i32 %130 to i8
  br i1 %154, label %156, label %167

156:                                              ; preds = %150, %156
  %157 = phi i8 [ %164, %156 ], [ %155, %150 ]
  %158 = phi i64 [ %162, %156 ], [ %131, %150 ]
  %159 = phi i8* [ %161, %156 ], [ %153, %150 ]
  %160 = or i8 %157, -128
  %161 = getelementptr inbounds i8, i8* %159, i64 1
  store i8 %160, i8* %159, align 1
  %162 = lshr i64 %158, 7
  %163 = icmp ugt i64 %158, 16383
  %164 = trunc i64 %162 to i8
  br i1 %163, label %156, label %165

165:                                              ; preds = %156
  %166 = trunc i64 %162 to i8
  br label %167

167:                                              ; preds = %165, %150
  %168 = phi i8* [ %153, %150 ], [ %161, %165 ]
  %169 = phi i8 [ %155, %150 ], [ %166, %165 ]
  store i8 %169, i8* %168, align 1
  %170 = getelementptr inbounds i8, i8* %168, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %170, i8* align 1 %129, i64 %131, i1 false)
  %171 = getelementptr inbounds i8, i8* %170, i64 %131
  br label %179

172:                                              ; preds = %26
  %173 = tail call i8* @_ZN8perfetto4base8BasenameEPKc(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0))
  %174 = load i8, i8* %29, align 2
  %175 = zext i8 %174 to i32
  %176 = tail call i32* @__errno_location() #10
  %177 = load i32, i32* %176, align 4
  %178 = tail call i8* @strerror(i32 %177) #9
  tail call void (i32, i8*, i32, i8*, ...) @_ZN8perfetto4base10LogMessageENS0_6LogLevEPKciS3_z(i32 3, i8* %173, i32 65, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 %175, i32 %177, i8* %178) #9
  tail call void @llvm.trap()
  unreachable

179:                                              ; preds = %167, %119, %91, %68
  %180 = phi i8* [ %171, %167 ], [ %126, %119 ], [ %99, %91 ], [ %71, %68 ]
  %181 = ptrtoint i8* %180 to i64
  %182 = ptrtoint i8* %28 to i64
  %183 = sub i64 %13, %182
  %184 = add i64 %183, %181
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %1, i64 %184, i8 signext 0) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9protozero5Field20SerializeAndAppendToEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.protozero::Field"*, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZNK9protozero5Field28SerializeAndAppendToInternalINSt3__16vectorIhNS2_9allocatorIhEEEEEEvPT_(%"class.protozero::Field"* %0, %"class.std::__1::vector"* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK9protozero5Field28SerializeAndAppendToInternalINSt3__16vectorIhNS2_9allocatorIhEEEEEEvPT_(%"class.protozero::Field"*, %"class.std::__1::vector"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = add i64 %8, 15
  %10 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  %13 = add i64 %9, %12
  %14 = icmp ugt i64 %13, %8
  %15 = inttoptr i64 %7 to i8*
  br i1 %14, label %16, label %20

16:                                               ; preds = %2
  %17 = sub i64 %13, %8
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %1, i64 %17) #9
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  br label %24

20:                                               ; preds = %2
  %21 = icmp ult i64 %13, %8
  br i1 %21, label %22, label %24

22:                                               ; preds = %20
  %23 = getelementptr inbounds i8, i8* %15, i64 %13
  store i8* %23, i8** %3, align 8
  br label %24

24:                                               ; preds = %16, %20, %22
  %25 = phi i8* [ %19, %16 ], [ %15, %20 ], [ %15, %22 ]
  %26 = getelementptr inbounds i8, i8* %25, i64 %8
  %27 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 3
  %28 = load i8, i8* %27, align 2
  switch i8 %28, label %170 [
    i8 0, label %29
    i8 5, label %70
    i8 1, label %98
    i8 2, label %125
  ]

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 2
  %31 = load i16, i16* %30, align 4
  %32 = zext i16 %31 to i32
  %33 = shl nuw nsw i32 %32, 3
  %34 = icmp ugt i16 %31, 15
  %35 = trunc i32 %33 to i8
  br i1 %34, label %36, label %47

36:                                               ; preds = %29, %36
  %37 = phi i8 [ %44, %36 ], [ %35, %29 ]
  %38 = phi i32 [ %42, %36 ], [ %33, %29 ]
  %39 = phi i8* [ %41, %36 ], [ %26, %29 ]
  %40 = or i8 %37, -128
  %41 = getelementptr inbounds i8, i8* %39, i64 1
  store i8 %40, i8* %39, align 1
  %42 = lshr i32 %38, 7
  %43 = icmp ugt i32 %38, 16383
  %44 = trunc i32 %42 to i8
  br i1 %43, label %36, label %45

45:                                               ; preds = %36
  %46 = trunc i32 %42 to i8
  br label %47

47:                                               ; preds = %45, %29
  %48 = phi i8* [ %26, %29 ], [ %41, %45 ]
  %49 = phi i8 [ %35, %29 ], [ %46, %45 ]
  store i8 %49, i8* %48, align 1
  %50 = getelementptr inbounds i8, i8* %48, i64 1
  %51 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = icmp ugt i64 %52, 127
  %54 = trunc i64 %52 to i8
  br i1 %53, label %55, label %66

55:                                               ; preds = %47, %55
  %56 = phi i8 [ %63, %55 ], [ %54, %47 ]
  %57 = phi i64 [ %61, %55 ], [ %52, %47 ]
  %58 = phi i8* [ %60, %55 ], [ %50, %47 ]
  %59 = or i8 %56, -128
  %60 = getelementptr inbounds i8, i8* %58, i64 1
  store i8 %59, i8* %58, align 1
  %61 = lshr i64 %57, 7
  %62 = icmp ugt i64 %57, 16383
  %63 = trunc i64 %61 to i8
  br i1 %62, label %55, label %64

64:                                               ; preds = %55
  %65 = trunc i64 %61 to i8
  br label %66

66:                                               ; preds = %64, %47
  %67 = phi i8* [ %50, %47 ], [ %60, %64 ]
  %68 = phi i8 [ %54, %47 ], [ %65, %64 ]
  store i8 %68, i8* %67, align 1
  %69 = getelementptr inbounds i8, i8* %67, i64 1
  br label %177

70:                                               ; preds = %24
  %71 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 2
  %72 = load i16, i16* %71, align 4
  %73 = zext i16 %72 to i32
  %74 = shl nuw nsw i32 %73, 3
  %75 = or i32 %74, 5
  %76 = icmp ugt i32 %75, 127
  %77 = trunc i32 %75 to i8
  br i1 %76, label %78, label %89

78:                                               ; preds = %70, %78
  %79 = phi i8 [ %86, %78 ], [ %77, %70 ]
  %80 = phi i32 [ %84, %78 ], [ %75, %70 ]
  %81 = phi i8* [ %83, %78 ], [ %26, %70 ]
  %82 = or i8 %79, -128
  %83 = getelementptr inbounds i8, i8* %81, i64 1
  store i8 %82, i8* %81, align 1
  %84 = lshr i32 %80, 7
  %85 = icmp ugt i32 %80, 16383
  %86 = trunc i32 %84 to i8
  br i1 %85, label %78, label %87

87:                                               ; preds = %78
  %88 = trunc i32 %84 to i8
  br label %89

89:                                               ; preds = %87, %70
  %90 = phi i8* [ %26, %70 ], [ %83, %87 ]
  %91 = phi i8 [ %77, %70 ], [ %88, %87 ]
  store i8 %91, i8* %90, align 1
  %92 = getelementptr inbounds i8, i8* %90, i64 1
  %93 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 0
  %94 = load i64, i64* %93, align 8
  %95 = trunc i64 %94 to i32
  %96 = bitcast i8* %92 to i32*
  store i32 %95, i32* %96, align 1
  %97 = getelementptr inbounds i8, i8* %90, i64 5
  br label %177

98:                                               ; preds = %24
  %99 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 2
  %100 = load i16, i16* %99, align 4
  %101 = zext i16 %100 to i32
  %102 = shl nuw nsw i32 %101, 3
  %103 = or i32 %102, 1
  %104 = icmp ugt i32 %103, 127
  %105 = trunc i32 %103 to i8
  br i1 %104, label %106, label %117

106:                                              ; preds = %98, %106
  %107 = phi i8 [ %114, %106 ], [ %105, %98 ]
  %108 = phi i32 [ %112, %106 ], [ %103, %98 ]
  %109 = phi i8* [ %111, %106 ], [ %26, %98 ]
  %110 = or i8 %107, -128
  %111 = getelementptr inbounds i8, i8* %109, i64 1
  store i8 %110, i8* %109, align 1
  %112 = lshr i32 %108, 7
  %113 = icmp ugt i32 %108, 16383
  %114 = trunc i32 %112 to i8
  br i1 %113, label %106, label %115

115:                                              ; preds = %106
  %116 = trunc i32 %112 to i8
  br label %117

117:                                              ; preds = %115, %98
  %118 = phi i8* [ %26, %98 ], [ %111, %115 ]
  %119 = phi i8 [ %105, %98 ], [ %116, %115 ]
  store i8 %119, i8* %118, align 1
  %120 = getelementptr inbounds i8, i8* %118, i64 1
  %121 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 0
  %122 = bitcast i8* %120 to i64*
  %123 = load i64, i64* %121, align 8
  store i64 %123, i64* %122, align 1
  %124 = getelementptr inbounds i8, i8* %118, i64 9
  br label %177

125:                                              ; preds = %24
  %126 = bitcast %"class.protozero::Field"* %0 to i8**
  %127 = load i8*, i8** %126, align 8
  %128 = load i32, i32* %10, align 8
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds %"class.protozero::Field", %"class.protozero::Field"* %0, i64 0, i32 2
  %131 = load i16, i16* %130, align 4
  %132 = zext i16 %131 to i32
  %133 = shl nuw nsw i32 %132, 3
  %134 = or i32 %133, 2
  %135 = icmp ugt i32 %134, 127
  %136 = trunc i32 %134 to i8
  br i1 %135, label %137, label %148

137:                                              ; preds = %125, %137
  %138 = phi i8 [ %145, %137 ], [ %136, %125 ]
  %139 = phi i32 [ %143, %137 ], [ %134, %125 ]
  %140 = phi i8* [ %142, %137 ], [ %26, %125 ]
  %141 = or i8 %138, -128
  %142 = getelementptr inbounds i8, i8* %140, i64 1
  store i8 %141, i8* %140, align 1
  %143 = lshr i32 %139, 7
  %144 = icmp ugt i32 %139, 16383
  %145 = trunc i32 %143 to i8
  br i1 %144, label %137, label %146

146:                                              ; preds = %137
  %147 = trunc i32 %143 to i8
  br label %148

148:                                              ; preds = %146, %125
  %149 = phi i8* [ %26, %125 ], [ %142, %146 ]
  %150 = phi i8 [ %136, %125 ], [ %147, %146 ]
  store i8 %150, i8* %149, align 1
  %151 = getelementptr inbounds i8, i8* %149, i64 1
  %152 = icmp ugt i32 %128, 127
  %153 = trunc i32 %128 to i8
  br i1 %152, label %154, label %165

154:                                              ; preds = %148, %154
  %155 = phi i8 [ %162, %154 ], [ %153, %148 ]
  %156 = phi i64 [ %160, %154 ], [ %129, %148 ]
  %157 = phi i8* [ %159, %154 ], [ %151, %148 ]
  %158 = or i8 %155, -128
  %159 = getelementptr inbounds i8, i8* %157, i64 1
  store i8 %158, i8* %157, align 1
  %160 = lshr i64 %156, 7
  %161 = icmp ugt i64 %156, 16383
  %162 = trunc i64 %160 to i8
  br i1 %161, label %154, label %163

163:                                              ; preds = %154
  %164 = trunc i64 %160 to i8
  br label %165

165:                                              ; preds = %163, %148
  %166 = phi i8* [ %151, %148 ], [ %159, %163 ]
  %167 = phi i8 [ %153, %148 ], [ %164, %163 ]
  store i8 %167, i8* %166, align 1
  %168 = getelementptr inbounds i8, i8* %166, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %168, i8* align 1 %127, i64 %129, i1 false)
  %169 = getelementptr inbounds i8, i8* %168, i64 %129
  br label %177

170:                                              ; preds = %24
  %171 = tail call i8* @_ZN8perfetto4base8BasenameEPKc(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0))
  %172 = load i8, i8* %27, align 2
  %173 = zext i8 %172 to i32
  %174 = tail call i32* @__errno_location() #10
  %175 = load i32, i32* %174, align 4
  %176 = tail call i8* @strerror(i32 %175) #9
  tail call void (i32, i8*, i32, i8*, ...) @_ZN8perfetto4base10LogMessageENS0_6LogLevEPKciS3_z(i32 3, i8* %171, i32 65, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 %173, i32 %175, i8* %176) #9
  tail call void @llvm.trap()
  unreachable

177:                                              ; preds = %165, %117, %89, %66
  %178 = phi i8* [ %169, %165 ], [ %124, %117 ], [ %97, %89 ], [ %69, %66 ]
  %179 = ptrtoint i8* %178 to i64
  %180 = ptrtoint i8* %26 to i64
  %181 = sub i64 %179, %180
  %182 = add i64 %181, %8
  %183 = load i64, i64* %4, align 8
  %184 = load i64, i64* %6, align 8
  %185 = sub i64 %183, %184
  %186 = icmp ugt i64 %182, %185
  %187 = inttoptr i64 %184 to i8*
  br i1 %186, label %188, label %190

188:                                              ; preds = %177
  %189 = sub i64 %182, %185
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %1, i64 %189) #9
  br label %194

190:                                              ; preds = %177
  %191 = icmp ult i64 %182, %185
  br i1 %191, label %192, label %194

192:                                              ; preds = %190
  %193 = getelementptr inbounds i8, i8* %187, i64 %182
  store i8* %193, i8** %3, align 8
  br label %194

194:                                              ; preds = %188, %190, %192
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN8perfetto4base10LogMessageENS0_6LogLevEPKciS3_z(i32, i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN8perfetto4base8BasenameEPKc(i8*) local_unnamed_addr #0 comdat {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi i8* [ %0, %1 ], [ %6, %2 ]
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  %6 = getelementptr inbounds i8, i8* %3, i64 1
  br i1 %5, label %7, label %2

7:                                                ; preds = %2, %7
  %8 = phi i8* [ %11, %7 ], [ %0, %2 ]
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = getelementptr inbounds i8, i8* %8, i64 1
  br i1 %10, label %12, label %7

12:                                               ; preds = %7, %15
  %13 = phi i8* [ %16, %15 ], [ %3, %7 ]
  %14 = icmp ugt i8* %13, %0
  br i1 %14, label %15, label %21

15:                                               ; preds = %12
  %16 = getelementptr inbounds i8, i8* %13, i64 -1
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 47
  %19 = icmp ult i8* %16, %8
  %20 = and i1 %19, %18
  br i1 %20, label %21, label %12

21:                                               ; preds = %12, %15
  ret i8* %13
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #3

; Function Attrs: nounwind
declare i8* @strerror(i32) local_unnamed_addr #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #9
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #11
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #12
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #9
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #9
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #12
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readnone }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
