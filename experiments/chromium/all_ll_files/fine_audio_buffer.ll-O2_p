; ModuleID = '../../third_party/webrtc/modules/audio_device/fine_audio_buffer.cc'
source_filename = "../../third_party/webrtc/modules/audio_device/fine_audio_buffer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::FineAudioBuffer" = type <{ %"class.webrtc::AudioDeviceBuffer"*, i64, i64, i64, i64, %"class.rtc::BufferT", %"class.rtc::BufferT", i32, [4 x i8] }>
%"class.rtc::BufferT" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i16* }
%"class.webrtc::AudioDeviceBuffer" = type <{ i32 (...)**, %"class.webrtc::SequenceChecker", [7 x i8], %"class.webrtc::Mutex", %"class.rtc::TaskQueue", %"class.webrtc::AudioTransport"*, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", i8, i8, [6 x i8], %"class.rtc::BufferT", %"class.rtc::BufferT", i8, [3 x i8], i32, i32, [4 x i8], i64, i64, i16, i16, [4 x i8], i64, i64, %"struct.webrtc::AudioDeviceBuffer::Stats", %"struct.webrtc::AudioDeviceBuffer::Stats", i8, i8, [6 x i8] }>
%"class.webrtc::SequenceChecker" = type { i8 }
%"class.webrtc::Mutex" = type { %"class.webrtc::MutexImpl" }
%"class.webrtc::MutexImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.rtc::TaskQueue" = type { %"class.webrtc::TaskQueueBase"* }
%"class.webrtc::TaskQueueBase" = type { i32 (...)** }
%"class.webrtc::AudioTransport" = type { i32 (...)** }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i64 }
%"struct.webrtc::AudioDeviceBuffer::Stats" = type <{ i64, i64, i64, i64, i16, i16, [4 x i8] }>

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE5EmEES6_EEEvPKciS8_DpRKT_E1t = comdat any

@.str = private unnamed_addr constant [43 x i8] c"../../third_party/webrtc/rtc_base/buffer.h\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"written_elements <= max_elements\00", align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE5EmEES6_EEEvPKciS8_DpRKT_E1t = linkonce_odr hidden constant [4 x i8] c"\0D\05\05\00", comdat, align 1

@_ZN6webrtc15FineAudioBufferC1EPNS_17AudioDeviceBufferE = hidden unnamed_addr alias void (%"class.webrtc::FineAudioBuffer"*, %"class.webrtc::AudioDeviceBuffer"*), void (%"class.webrtc::FineAudioBuffer"*, %"class.webrtc::AudioDeviceBuffer"*)* @_ZN6webrtc15FineAudioBufferC2EPNS_17AudioDeviceBufferE
@_ZN6webrtc15FineAudioBufferD1Ev = hidden unnamed_addr alias void (%"class.webrtc::FineAudioBuffer"*), void (%"class.webrtc::FineAudioBuffer"*)* @_ZN6webrtc15FineAudioBufferD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15FineAudioBufferC2EPNS_17AudioDeviceBufferE(%"class.webrtc::FineAudioBuffer"* nocapture, %"class.webrtc::AudioDeviceBuffer"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 0
  store %"class.webrtc::AudioDeviceBuffer"* %1, %"class.webrtc::AudioDeviceBuffer"** %3, align 8
  %4 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 1
  %5 = tail call i32 @_ZNK6webrtc17AudioDeviceBuffer17PlayoutSampleRateEv(%"class.webrtc::AudioDeviceBuffer"* %1) #9
  %6 = mul i32 %5, 10
  %7 = udiv i32 %6, 1000
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %4, align 8
  %9 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 2
  %10 = tail call i32 @_ZNK6webrtc17AudioDeviceBuffer19RecordingSampleRateEv(%"class.webrtc::AudioDeviceBuffer"* %1) #9
  %11 = mul i32 %10, 10
  %12 = udiv i32 %11, 1000
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %9, align 8
  %14 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 3
  %15 = tail call i64 @_ZNK6webrtc17AudioDeviceBuffer15PlayoutChannelsEv(%"class.webrtc::AudioDeviceBuffer"* %1) #9
  store i64 %15, i64* %14, align 8
  %16 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 4
  %17 = tail call i64 @_ZNK6webrtc17AudioDeviceBuffer17RecordingChannelsEv(%"class.webrtc::AudioDeviceBuffer"* %1) #9
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 5
  %19 = bitcast %"class.rtc::BufferT"* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 52, i1 false)
  ret void
}

declare i32 @_ZNK6webrtc17AudioDeviceBuffer17PlayoutSampleRateEv(%"class.webrtc::AudioDeviceBuffer"*) local_unnamed_addr #1

declare i32 @_ZNK6webrtc17AudioDeviceBuffer19RecordingSampleRateEv(%"class.webrtc::AudioDeviceBuffer"*) local_unnamed_addr #1

declare i64 @_ZNK6webrtc17AudioDeviceBuffer15PlayoutChannelsEv(%"class.webrtc::AudioDeviceBuffer"*) local_unnamed_addr #1

declare i64 @_ZNK6webrtc17AudioDeviceBuffer17RecordingChannelsEv(%"class.webrtc::AudioDeviceBuffer"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6webrtc15FineAudioBuffer17IsReadyForPlayoutEv(%"class.webrtc::FineAudioBuffer"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = icmp ne i64 %7, 0
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6webrtc15FineAudioBuffer16IsReadyForRecordEv(%"class.webrtc::FineAudioBuffer"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = icmp ne i64 %7, 0
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15FineAudioBufferD2Ev(%"class.webrtc::FineAudioBuffer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 6, i32 2, i32 0, i32 0, i32 0
  %3 = load i16*, i16** %2, align 8
  store i16* null, i16** %2, align 8
  %4 = icmp eq i16* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast i16* %3 to i8*
  tail call void @_ZdaPv(i8* %6) #10
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 5, i32 2, i32 0, i32 0, i32 0
  %9 = load i16*, i16** %8, align 8
  store i16* null, i16** %8, align 8
  %10 = icmp eq i16* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = bitcast i16* %9 to i8*
  tail call void @_ZdaPv(i8* %12) #10
  br label %13

13:                                               ; preds = %7, %11
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc15FineAudioBuffer12ResetPlayoutEv(%"class.webrtc::FineAudioBuffer"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 5, i32 0
  store i64 0, i64* %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc15FineAudioBuffer11ResetRecordEv(%"class.webrtc::FineAudioBuffer"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 6, i32 0
  store i64 0, i64* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15FineAudioBuffer14GetPlayoutDataEN3rtc9ArrayViewIsLln4711EEEi(%"class.webrtc::FineAudioBuffer"*, i16*, i64, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 5, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %6, %2
  br i1 %7, label %8, label %76

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 0
  %10 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 3
  %12 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 5, i32 1
  %13 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 5, i32 2
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %16 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 5, i32 2, i32 0, i32 0, i32 0
  br label %17

17:                                               ; preds = %8, %70
  %18 = load %"class.webrtc::AudioDeviceBuffer"*, %"class.webrtc::AudioDeviceBuffer"** %9, align 8
  %19 = load i64, i64* %10, align 8
  %20 = bitcast %"class.webrtc::AudioDeviceBuffer"* %18 to i32 (%"class.webrtc::AudioDeviceBuffer"*, i64)***
  %21 = load i32 (%"class.webrtc::AudioDeviceBuffer"*, i64)**, i32 (%"class.webrtc::AudioDeviceBuffer"*, i64)*** %20, align 8
  %22 = getelementptr inbounds i32 (%"class.webrtc::AudioDeviceBuffer"*, i64)*, i32 (%"class.webrtc::AudioDeviceBuffer"*, i64)** %21, i64 5
  %23 = load i32 (%"class.webrtc::AudioDeviceBuffer"*, i64)*, i32 (%"class.webrtc::AudioDeviceBuffer"*, i64)** %22, align 8
  %24 = tail call i32 %23(%"class.webrtc::AudioDeviceBuffer"* %18, i64 %19) #9
  %25 = load i64, i64* %10, align 8
  %26 = trunc i64 %25 to i32
  %27 = icmp eq i32 %24, %26
  br i1 %27, label %28, label %73

28:                                               ; preds = %17
  %29 = load i64, i64* %11, align 8
  %30 = mul i64 %29, %25
  %31 = load i64, i64* %5, align 8
  %32 = add i64 %31, %30
  %33 = load i64, i64* %12, align 8
  %34 = icmp ult i64 %33, %32
  br i1 %34, label %35, label %53

35:                                               ; preds = %28
  %36 = lshr i64 %33, 1
  %37 = add i64 %36, %33
  %38 = icmp ugt i64 %37, %32
  %39 = select i1 %38, i64 %37, i64 %32
  %40 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %39, i64 2) #9
  %41 = extractvalue { i64, i1 } %40, 1
  %42 = extractvalue { i64, i1 } %40, 0
  %43 = select i1 %41, i64 -1, i64 %42
  %44 = tail call i8* @_Znam(i64 %43) #10
  %45 = ptrtoint i8* %44 to i64
  %46 = load i16*, i16** %14, align 8
  %47 = icmp eq i16* %46, null
  br i1 %47, label %48, label %49

48:                                               ; preds = %35
  store i64 %45, i64* %15, align 8
  br label %52

49:                                               ; preds = %35
  %50 = bitcast i16* %46 to i8*
  %51 = shl i64 %31, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %44, i8* nonnull align 2 %50, i64 %51, i1 false) #9
  store i64 %45, i64* %15, align 8
  tail call void @_ZdaPv(i8* %50) #10
  br label %52

52:                                               ; preds = %49, %48
  store i64 %39, i64* %12, align 8
  br label %53

53:                                               ; preds = %52, %28
  store i64 %32, i64* %5, align 8
  %54 = load i16*, i16** %16, align 8
  %55 = getelementptr inbounds i16, i16* %54, i64 %31
  %56 = icmp eq i64 %30, 0
  %57 = load %"class.webrtc::AudioDeviceBuffer"*, %"class.webrtc::AudioDeviceBuffer"** %9, align 8
  %58 = bitcast i16* %55 to i8*
  %59 = select i1 %56, i8* null, i8* %58
  %60 = bitcast %"class.webrtc::AudioDeviceBuffer"* %57 to i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*)***
  %61 = load i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*)**, i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*)*** %60, align 8
  %62 = getelementptr inbounds i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*)*, i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*)** %61, i64 6
  %63 = load i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*)*, i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*)** %62, align 8
  %64 = tail call i32 %63(%"class.webrtc::AudioDeviceBuffer"* %57, i8* %59) #9
  %65 = sext i32 %64 to i64
  %66 = load i64, i64* %11, align 8
  %67 = mul i64 %66, %65
  %68 = icmp ugt i64 %67, %30
  br i1 %68, label %69, label %70

69:                                               ; preds = %53
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i32 313, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE5EmEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i64 %67, i64 %30) #11
  unreachable

70:                                               ; preds = %53
  %71 = add i64 %67, %31
  store i64 %71, i64* %5, align 8
  %72 = icmp ult i64 %71, %2
  br i1 %72, label %17, label %76

73:                                               ; preds = %17
  %74 = shl i64 %2, 1
  %75 = bitcast i16* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %75, i8 0, i64 %74, i1 false)
  br label %118

76:                                               ; preds = %70, %4
  %77 = shl i64 %2, 1
  %78 = bitcast i16* %1 to i8*
  %79 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 5, i32 2, i32 0, i32 0, i32 0
  %80 = bitcast i16** %79 to i8**
  %81 = load i8*, i8** %80, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %78, i8* align 2 %81, i64 %77, i1 false)
  %82 = load i16*, i16** %79, align 8
  %83 = bitcast i16* %82 to i8*
  %84 = getelementptr inbounds i16, i16* %82, i64 %2
  %85 = bitcast i16* %84 to i8*
  %86 = load i64, i64* %5, align 8
  %87 = sub i64 %86, %2
  %88 = shl i64 %87, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %83, i8* align 2 %85, i64 %88, i1 false)
  %89 = load i64, i64* %5, align 8
  %90 = sub i64 %89, %2
  %91 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 5, i32 1
  %92 = load i64, i64* %91, align 8
  %93 = icmp ult i64 %92, %90
  br i1 %93, label %94, label %116

94:                                               ; preds = %76
  %95 = lshr i64 %92, 1
  %96 = add i64 %95, %92
  %97 = icmp ugt i64 %96, %90
  %98 = select i1 %97, i64 %96, i64 %90
  %99 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %98, i64 2) #9
  %100 = extractvalue { i64, i1 } %99, 1
  %101 = extractvalue { i64, i1 } %99, 0
  %102 = select i1 %100, i64 -1, i64 %101
  %103 = tail call i8* @_Znam(i64 %102) #10
  %104 = ptrtoint i8* %103 to i64
  %105 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 5, i32 2
  %106 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %105, i64 0, i32 0, i32 0, i32 0
  %107 = load i16*, i16** %106, align 8
  %108 = icmp eq i16* %107, null
  br i1 %108, label %109, label %111

109:                                              ; preds = %94
  %110 = bitcast %"class.std::__1::unique_ptr"* %105 to i64*
  store i64 %104, i64* %110, align 8
  br label %115

111:                                              ; preds = %94
  %112 = bitcast i16* %107 to i8*
  %113 = shl i64 %89, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %103, i8* nonnull align 2 %112, i64 %113, i1 false) #9
  %114 = bitcast %"class.std::__1::unique_ptr"* %105 to i64*
  store i64 %104, i64* %114, align 8
  tail call void @_ZdaPv(i8* %112) #10
  br label %115

115:                                              ; preds = %111, %109
  store i64 %98, i64* %91, align 8
  br label %116

116:                                              ; preds = %76, %115
  store i64 %90, i64* %5, align 8
  %117 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 7
  store i32 %3, i32* %117, align 8
  br label %118

118:                                              ; preds = %116, %73
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15FineAudioBuffer19DeliverRecordedDataEN3rtc9ArrayViewIKsLln4711EEEi(%"class.webrtc::FineAudioBuffer"* nocapture, i16*, i64, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 6, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %2
  %8 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 6, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 %9, %7
  br i1 %10, label %11, label %35

11:                                               ; preds = %4
  %12 = lshr i64 %9, 1
  %13 = add i64 %12, %9
  %14 = icmp ugt i64 %13, %7
  %15 = select i1 %14, i64 %13, i64 %7
  %16 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %15, i64 2) #9
  %17 = extractvalue { i64, i1 } %16, 1
  %18 = extractvalue { i64, i1 } %16, 0
  %19 = select i1 %17, i64 -1, i64 %18
  %20 = tail call i8* @_Znam(i64 %19) #10
  %21 = ptrtoint i8* %20 to i64
  %22 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 6, i32 2
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %22, i64 0, i32 0, i32 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = icmp eq i16* %24, null
  br i1 %25, label %26, label %28

26:                                               ; preds = %11
  %27 = bitcast %"class.std::__1::unique_ptr"* %22 to i64*
  store i64 %21, i64* %27, align 8
  br label %33

28:                                               ; preds = %11
  %29 = bitcast i16* %24 to i8*
  %30 = shl i64 %6, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %20, i8* nonnull align 2 %29, i64 %30, i1 false) #9
  %31 = bitcast %"class.std::__1::unique_ptr"* %22 to i64*
  store i64 %21, i64* %31, align 8
  tail call void @_ZdaPv(i8* %29) #10
  %32 = load i64, i64* %5, align 8
  br label %33

33:                                               ; preds = %28, %26
  %34 = phi i64 [ %32, %28 ], [ %6, %26 ]
  store i64 %15, i64* %8, align 8
  br label %35

35:                                               ; preds = %4, %33
  %36 = phi i64 [ %6, %4 ], [ %34, %33 ]
  %37 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 6, i32 2, i32 0, i32 0, i32 0
  %38 = load i16*, i16** %37, align 8
  %39 = getelementptr inbounds i16, i16* %38, i64 %36
  %40 = bitcast i16* %39 to i8*
  %41 = bitcast i16* %1 to i8*
  %42 = shl i64 %2, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %40, i8* align 2 %41, i64 %42, i1 false) #9
  store i64 %7, i64* %5, align 8
  %43 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 4
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 2
  %46 = load i64, i64* %45, align 8
  %47 = mul i64 %46, %44
  %48 = icmp ult i64 %7, %47
  br i1 %48, label %110, label %49

49:                                               ; preds = %35
  %50 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 0
  %51 = bitcast i16** %37 to i8**
  %52 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 7
  %53 = getelementptr inbounds %"class.webrtc::FineAudioBuffer", %"class.webrtc::FineAudioBuffer"* %0, i64 0, i32 6, i32 2
  %54 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %53, i64 0, i32 0, i32 0, i32 0
  %55 = bitcast %"class.std::__1::unique_ptr"* %53 to i64*
  br label %56

56:                                               ; preds = %108, %49
  %57 = phi i64 [ %109, %108 ], [ %46, %49 ]
  %58 = load %"class.webrtc::AudioDeviceBuffer"*, %"class.webrtc::AudioDeviceBuffer"** %50, align 8
  %59 = load i8*, i8** %51, align 8
  %60 = bitcast %"class.webrtc::AudioDeviceBuffer"* %58 to i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*, i64)***
  %61 = load i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*, i64)**, i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*, i64)*** %60, align 8
  %62 = getelementptr inbounds i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*, i64)*, i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*, i64)** %61, i64 2
  %63 = load i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*, i64)*, i32 (%"class.webrtc::AudioDeviceBuffer"*, i8*, i64)** %62, align 8
  %64 = tail call i32 %63(%"class.webrtc::AudioDeviceBuffer"* %58, i8* %59, i64 %57) #9
  %65 = load %"class.webrtc::AudioDeviceBuffer"*, %"class.webrtc::AudioDeviceBuffer"** %50, align 8
  %66 = load i32, i32* %52, align 8
  %67 = bitcast %"class.webrtc::AudioDeviceBuffer"* %65 to void (%"class.webrtc::AudioDeviceBuffer"*, i32, i32)***
  %68 = load void (%"class.webrtc::AudioDeviceBuffer"*, i32, i32)**, void (%"class.webrtc::AudioDeviceBuffer"*, i32, i32)*** %67, align 8
  %69 = getelementptr inbounds void (%"class.webrtc::AudioDeviceBuffer"*, i32, i32)*, void (%"class.webrtc::AudioDeviceBuffer"*, i32, i32)** %68, i64 3
  %70 = load void (%"class.webrtc::AudioDeviceBuffer"*, i32, i32)*, void (%"class.webrtc::AudioDeviceBuffer"*, i32, i32)** %69, align 8
  tail call void %70(%"class.webrtc::AudioDeviceBuffer"* %65, i32 %66, i32 %3) #9
  %71 = load %"class.webrtc::AudioDeviceBuffer"*, %"class.webrtc::AudioDeviceBuffer"** %50, align 8
  %72 = bitcast %"class.webrtc::AudioDeviceBuffer"* %71 to i32 (%"class.webrtc::AudioDeviceBuffer"*)***
  %73 = load i32 (%"class.webrtc::AudioDeviceBuffer"*)**, i32 (%"class.webrtc::AudioDeviceBuffer"*)*** %72, align 8
  %74 = getelementptr inbounds i32 (%"class.webrtc::AudioDeviceBuffer"*)*, i32 (%"class.webrtc::AudioDeviceBuffer"*)** %73, i64 4
  %75 = load i32 (%"class.webrtc::AudioDeviceBuffer"*)*, i32 (%"class.webrtc::AudioDeviceBuffer"*)** %74, align 8
  %76 = tail call i32 %75(%"class.webrtc::AudioDeviceBuffer"* %71) #9
  %77 = load i16*, i16** %37, align 8
  %78 = bitcast i16* %77 to i8*
  %79 = getelementptr inbounds i16, i16* %77, i64 %47
  %80 = bitcast i16* %79 to i8*
  %81 = load i64, i64* %5, align 8
  %82 = sub i64 %81, %47
  %83 = shl i64 %82, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %78, i8* align 2 %80, i64 %83, i1 false)
  %84 = load i64, i64* %5, align 8
  %85 = sub i64 %84, %47
  %86 = load i64, i64* %8, align 8
  %87 = icmp ult i64 %86, %85
  br i1 %87, label %88, label %106

88:                                               ; preds = %56
  %89 = lshr i64 %86, 1
  %90 = add i64 %89, %86
  %91 = icmp ugt i64 %90, %85
  %92 = select i1 %91, i64 %90, i64 %85
  %93 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %92, i64 2) #9
  %94 = extractvalue { i64, i1 } %93, 1
  %95 = extractvalue { i64, i1 } %93, 0
  %96 = select i1 %94, i64 -1, i64 %95
  %97 = tail call i8* @_Znam(i64 %96) #10
  %98 = ptrtoint i8* %97 to i64
  %99 = load i16*, i16** %54, align 8
  %100 = icmp eq i16* %99, null
  br i1 %100, label %101, label %102

101:                                              ; preds = %88
  store i64 %98, i64* %55, align 8
  br label %105

102:                                              ; preds = %88
  %103 = bitcast i16* %99 to i8*
  %104 = shl i64 %84, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %97, i8* nonnull align 2 %103, i64 %104, i1 false) #9
  store i64 %98, i64* %55, align 8
  tail call void @_ZdaPv(i8* %103) #10
  br label %105

105:                                              ; preds = %102, %101
  store i64 %92, i64* %8, align 8
  br label %106

106:                                              ; preds = %56, %105
  store i64 %85, i64* %5, align 8
  %107 = icmp ult i64 %85, %47
  br i1 %107, label %110, label %108

108:                                              ; preds = %106
  %109 = load i64, i64* %45, align 8
  br label %56

110:                                              ; preds = %106, %35
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
