; ModuleID = '../../ui/gfx/paint_throbber.cc'
source_filename = "../../ui/gfx/paint_throbber.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::TimeDelta" = type { i64 }
%"class.cc::PaintFlags" = type <{ %class.sk_sp.37, %class.sk_sp.38, %class.sk_sp.72, %class.sk_sp.73, %class.sk_sp.74, %class.sk_sp.75, i32, float, float, i32, %union.anon.76, [4 x i8] }>
%class.sk_sp.37 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.38 = type { %"class.cc::PaintShader"* }
%"class.cc::PaintShader" = type <{ %class.SkRefCnt.base, i8, [3 x i8], i32, float, float, i32, i32, i32, i8, [3 x i8], %"class.absl::optional.39", %struct.SkPoint, %struct.SkRect, %struct.SkPoint, %struct.SkPoint, float, float, %"class.cc::PaintImage", %class.sk_sp.45, i32, %"class.absl::optional.52", %"class.std::__1::vector", %"class.std::__1::vector.60", %class.sk_sp.67, %class.sk_sp.44, i32, [4 x i8] }>
%"class.absl::optional.39" = type { %"class.absl::optional_internal::optional_data.40" }
%"class.absl::optional_internal::optional_data.40" = type { %"class.absl::optional_internal::optional_data_base.41" }
%"class.absl::optional_internal::optional_data_base.41" = type { %"class.absl::optional_internal::optional_data_dtor_base.42" }
%"class.absl::optional_internal::optional_data_dtor_base.42" = type { i8, %union.anon.43 }
%union.anon.43 = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.cc::PaintImage" = type { %class.sk_sp.44, %class.sk_sp.45, %"class.gfx::Rect", i32, %class.sk_sp.50, %class.sk_sp.51, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.44, %class.scoped_refptr }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp.50 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type opaque
%class.sk_sp.51 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type opaque
%class.scoped_refptr = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type opaque
%class.sk_sp.45 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.46", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { i8* }
%"class.absl::optional.52" = type { %"class.absl::optional_internal::optional_data.53" }
%"class.absl::optional_internal::optional_data.53" = type { %"class.absl::optional_internal::optional_data_base.54" }
%"class.absl::optional_internal::optional_data_base.54" = type { %"class.absl::optional_internal::optional_data_dtor_base.55" }
%"class.absl::optional_internal::optional_data_dtor_base.55" = type { i8, %union.anon.56 }
%union.anon.56 = type { %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { i32* }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { float*, float*, %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { float* }
%class.sk_sp.67 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.68", [7 x i8] }>
%"struct.std::__1::atomic.68" = type { %"struct.std::__1::__atomic_base.69" }
%"struct.std::__1::__atomic_base.69" = type { %"struct.std::__1::__cxx_atomic_impl.70" }
%"struct.std::__1::__cxx_atomic_impl.70" = type { %"struct.std::__1::__cxx_atomic_base_impl.71" }
%"struct.std::__1::__cxx_atomic_base_impl.71" = type { i8 }
%class.sk_sp.44 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.0, i32, i32 }
%class.sk_sp.0 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.72 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.73 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.74 = type { %class.SkDrawLooper* }
%class.SkDrawLooper = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.75 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type opaque
%union.anon.76 = type { i32 }
%"class.gfx::Canvas" = type { i32 (...)**, float, %"class.absl::optional", %"class.absl::optional.8", %"class.cc::PaintCanvas"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %class.SkBitmap }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.7 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.sk_sp.7 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.absl::optional.8" = type { %"class.absl::optional_internal::optional_data.9" }
%"class.absl::optional_internal::optional_data.9" = type { %"class.absl::optional_internal::optional_data_base.10" }
%"class.absl::optional_internal::optional_data_base.10" = type { %"class.absl::optional_internal::optional_data_dtor_base.11" }
%"class.absl::optional_internal::optional_data_dtor_base.11" = type { i8, [7 x i8], %union.anon.12 }
%union.anon.12 = type { %"class.cc::SkiaPaintCanvas" }
%"class.cc::SkiaPaintCanvas" = type <{ %"class.cc::PaintCanvas", %class.SkCanvas*, %class.SkBitmap, %"class.std::__1::unique_ptr.22", %"class.cc::ImageProvider"*, %"struct.cc::SkiaPaintCanvas::ContextFlushes", i32, [4 x i8] }>
%"class.cc::PaintCanvas" = type { i32 (...)**, %"class.printing::MetafileSkia"*, %"class.paint_preview::PaintPreviewTracker"* }
%"class.printing::MetafileSkia" = type opaque
%"class.paint_preview::PaintPreviewTracker" = type opaque
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.13, [384 x i64], %class.sk_sp.14, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.16" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.13 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.14 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %class.SkCanvas* }
%"class.cc::ImageProvider" = type opaque
%"struct.cc::SkiaPaintCanvas::ContextFlushes" = type { i8, i32 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%class.SkPath = type <{ %class.sk_sp.77, i32, %"struct.std::__1::atomic.2", %"struct.std::__1::atomic.2", i8, i8 }>
%class.sk_sp.77 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt.78, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.79, %class.SkTDArray.80, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt.78 = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.79 = type { i8*, i32, i32 }
%class.SkTDArray.80 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.81 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.81 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.68", [3 x i8] }
%"struct.gfx::ThrobberWaitingState" = type { %"class.base::TimeDelta", i32, %"class.base::TimeDelta" }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }

$_ZNK4base9TimeDeltadvES0_ = comdat any

@_ZN3gfx12_GLOBAL__N_18kArcTimeE = internal constant %"class.base::TimeDelta" { i64 666666 }, align 8
@.str = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"!is_zero() || !a.is_zero()\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"!is_inf() || !a.is_inf()\00", align 1
@__const._ZN3gfx12_GLOBAL__N_18PaintArcEPNS_6CanvasERKNS_4RectEjffN4absl8optionalIfEE.flags = private unnamed_addr constant %"class.cc::PaintFlags" <{ %class.sk_sp.37 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.38 { %"class.cc::PaintShader"* inttoptr (i64 -6148914691236517206 to %"class.cc::PaintShader"*) }, %class.sk_sp.72 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.73 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.74 { %class.SkDrawLooper* inttoptr (i64 -6148914691236517206 to %class.SkDrawLooper*) }, %class.sk_sp.75 { %"class.cc::PaintFilter"* inttoptr (i64 -6148914691236517206 to %"class.cc::PaintFilter"*) }, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, %union.anon.76 { i32 -1431655766 }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@.str.3 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx21PaintThrobberSpinningEPNS_6CanvasERKNS_4RectEjRKN4base9TimeDeltaEN4absl8optionalIfEE(%"class.gfx::Canvas"*, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), i32, %"class.base::TimeDelta"* dereferenceable(8), i64) local_unnamed_addr #0 {
  %6 = tail call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* %3, i64 1568000)
  %7 = fmul double %6, 3.600000e+02
  %8 = fcmp oge double %7, 0.000000e+00
  %9 = fadd double %7, 5.000000e-01
  %10 = tail call double @llvm.floor.f64(double %9) #5
  %11 = fadd double %7, -5.000000e-01
  %12 = tail call double @llvm.ceil.f64(double %11) #5
  %13 = select i1 %8, double %10, double %12
  %14 = fcmp ult double %13, 0xC3E0000000000000
  %15 = fcmp ugt double %13, 0x43DFFFFFFFFFFFFF
  %16 = fcmp ogt double %13, 0xC3E0000000000000
  %17 = select i1 %16, double %13, double 0xC3E0000000000000
  %18 = fptosi double %17 to i64
  %19 = select i1 %14, i64 0, i64 9223372036854775807
  %20 = select i1 %15, i64 %19, i64 %18
  %21 = add nsw i64 %20, 270
  tail call fastcc void @_ZN3gfx12_GLOBAL__N_135PaintThrobberSpinningWithStartAngleEPNS_6CanvasERKNS_4RectEjRKN4base9TimeDeltaElN4absl8optionalIfEE(%"class.gfx::Canvas"* %0, %"class.gfx::Rect"* dereferenceable(16) %1, i32 %2, %"class.base::TimeDelta"* dereferenceable(8) %3, i64 %21, i64 %4)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, %1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 302, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #5
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #5
  %12 = load i64, i64* %5, align 8
  br label %13

13:                                               ; preds = %2, %9
  %14 = phi i64 [ %6, %2 ], [ %12, %9 ]
  %15 = add i64 %14, -9223372036854775807
  %16 = add i64 %1, -9223372036854775807
  %17 = or i64 %15, %16
  %18 = icmp ult i64 %17, 2
  br i1 %18, label %19, label %24

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 303, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)) #5
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #5
  %22 = load i64, i64* %5, align 8
  %23 = add i64 %22, -9223372036854775807
  br label %24

24:                                               ; preds = %13, %19
  %25 = phi i64 [ %15, %13 ], [ %23, %19 ]
  %26 = phi i64 [ %14, %13 ], [ %22, %19 ]
  %27 = icmp ult i64 %25, 2
  %28 = icmp slt i64 %26, 0
  %29 = select i1 %28, double 0xFFF0000000000000, double 0x7FF0000000000000
  %30 = sitofp i64 %26 to double
  %31 = select i1 %27, double %29, double %30
  %32 = icmp ult i64 %16, 2
  %33 = icmp slt i64 %1, 0
  %34 = select i1 %33, double 0xFFF0000000000000, double 0x7FF0000000000000
  %35 = sitofp i64 %1 to double
  %36 = select i1 %32, double %34, double %35
  %37 = fdiv double %31, %36
  ret double %37
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3gfx12_GLOBAL__N_135PaintThrobberSpinningWithStartAngleEPNS_6CanvasERKNS_4RectEjRKN4base9TimeDeltaElN4absl8optionalIfEE(%"class.gfx::Canvas"*, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), i32, %"class.base::TimeDelta"* dereferenceable(8), i64, i64) unnamed_addr #0 {
  %7 = tail call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* %3, i64 666666)
  %8 = tail call double @llvm.floor.f64(double %7) #5
  %9 = fcmp ult double %8, 0xC3E0000000000000
  %10 = fcmp ugt double %8, 0x43DFFFFFFFFFFFFF
  %11 = fcmp ogt double %8, 0xC3E0000000000000
  %12 = select i1 %11, double %8, double 0xC3E0000000000000
  %13 = fptosi double %12 to i64
  %14 = select i1 %9, i64 0, i64 9223372036854775807
  %15 = select i1 %10, i64 %14, i64 %13
  %16 = sitofp i64 %15 to double
  %17 = fsub double %7, %16
  %18 = tail call double @_ZN3gfx5Tween14CalculateValueENS0_4TypeEd(i32 10, double %17) #5
  %19 = fmul double %18, 2.700000e+02
  %20 = and i64 %15, 1
  %21 = icmp eq i64 %20, 0
  %22 = fadd double %19, -2.700000e+02
  %23 = select i1 %21, double %22, double %19
  %24 = fcmp oge double %23, 0.000000e+00
  %25 = fcmp olt double %23, 5.000000e+00
  %26 = and i1 %24, %25
  br i1 %26, label %27, label %32

27:                                               ; preds = %6
  %28 = sitofp i64 %4 to double
  %29 = fadd double %23, -5.000000e+00
  %30 = fadd double %29, %28
  %31 = fptosi double %30 to i64
  br label %41

32:                                               ; preds = %6
  %33 = fcmp ole double %23, 0.000000e+00
  %34 = fcmp ogt double %23, -5.000000e+00
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %41

36:                                               ; preds = %32
  %37 = fsub double -5.000000e+00, %23
  %38 = sitofp i64 %4 to double
  %39 = fadd double %37, %38
  %40 = fptosi double %39 to i64
  br label %41

41:                                               ; preds = %32, %36, %27
  %42 = phi double [ 5.000000e+00, %27 ], [ -5.000000e+00, %36 ], [ %23, %32 ]
  %43 = phi i64 [ %31, %27 ], [ %40, %36 ], [ %4, %32 ]
  %44 = sdiv i64 %15, 2
  %45 = srem i64 %44, 4
  %46 = mul nsw i64 %45, 270
  %47 = add nsw i64 %43, %46
  %48 = sitofp i64 %47 to float
  %49 = fptrunc double %42 to float
  tail call fastcc void @_ZN3gfx12_GLOBAL__N_18PaintArcEPNS_6CanvasERKNS_4RectEjffN4absl8optionalIfEE(%"class.gfx::Canvas"* %0, %"class.gfx::Rect"* dereferenceable(16) %1, i32 %2, float %48, float %49, i64 %5)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx20PaintThrobberWaitingEPNS_6CanvasERKNS_4RectEjRKN4base9TimeDeltaEN4absl8optionalIfEE(%"class.gfx::Canvas"*, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), i32, %"class.base::TimeDelta"* dereferenceable(8), i64) local_unnamed_addr #0 {
  %6 = tail call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* %3, i64 1320000) #5
  %7 = fmul double %6, 3.600000e+02
  %8 = fcmp oge double %7, 0.000000e+00
  %9 = fadd double %7, 5.000000e-01
  %10 = tail call double @llvm.floor.f64(double %9) #5
  %11 = fadd double %7, -5.000000e-01
  %12 = tail call double @llvm.ceil.f64(double %11) #5
  %13 = select i1 %8, double %10, double %12
  %14 = fcmp ult double %13, 0xC3E0000000000000
  %15 = fcmp ugt double %13, 0x43DFFFFFFFFFFFFF
  %16 = fcmp ogt double %13, 0xC3E0000000000000
  %17 = select i1 %16, double %13, double 0xC3E0000000000000
  %18 = fptosi double %17 to i64
  %19 = select i1 %14, i64 0, i64 9223372036854775807
  %20 = select i1 %15, i64 %19, i64 %18
  %21 = icmp sgt i64 %20, 180
  %22 = select i1 %21, i64 %20, i64 180
  %23 = sub i64 -90, %20
  %24 = add i64 %20, 180
  %25 = sub i64 %24, %22
  %26 = sitofp i64 %23 to float
  %27 = sitofp i64 %25 to float
  tail call fastcc void @_ZN3gfx12_GLOBAL__N_18PaintArcEPNS_6CanvasERKNS_4RectEjffN4absl8optionalIfEE(%"class.gfx::Canvas"* %0, %"class.gfx::Rect"* dereferenceable(16) %1, i32 %2, float %26, float %27, i64 %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3gfx12_GLOBAL__N_18PaintArcEPNS_6CanvasERKNS_4RectEjffN4absl8optionalIfEE(%"class.gfx::Canvas"*, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), i32, float, float, i64) unnamed_addr #0 {
  %7 = alloca %"class.gfx::Rect", align 4
  %8 = alloca %class.SkPath, align 8
  %9 = alloca { <2 x float>, <2 x float> }, align 8
  %10 = bitcast { <2 x float>, <2 x float> }* %9 to %struct.SkRect*
  %11 = alloca %"class.cc::PaintFlags", align 8
  %12 = trunc i64 %5 to i8
  %13 = lshr i64 %5, 32
  %14 = trunc i64 %13 to i32
  %15 = bitcast i32 %14 to float
  %16 = icmp eq i8 %12, 0
  br i1 %16, label %17, label %35

17:                                               ; preds = %6
  %18 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp slt i32 %19, 28
  br i1 %20, label %21, label %27

21:                                               ; preds = %17
  %22 = sub nsw i32 28, %19
  %23 = sitofp i32 %22 to float
  %24 = fpext float %23 to double
  %25 = fmul double %24, 6.250000e-02
  %26 = fsub double 3.000000e+00, %25
  br label %32

27:                                               ; preds = %17
  %28 = add nuw nsw i32 %19, 8
  %29 = sitofp i32 %28 to float
  %30 = fpext float %29 to double
  %31 = fdiv double %30, 1.200000e+01
  br label %32

32:                                               ; preds = %27, %21
  %33 = phi double [ %26, %21 ], [ %31, %27 ]
  %34 = fptrunc double %33 to float
  br label %35

35:                                               ; preds = %6, %32
  %36 = phi float [ %15, %6 ], [ %34, %32 ]
  %37 = bitcast %"class.gfx::Rect"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #5
  %38 = bitcast %"class.gfx::Rect"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %37, i8* align 4 %38, i64 16, i1 false)
  %39 = fmul float %36, 5.000000e-01
  %40 = tail call float @llvm.ceil.f32(float %39)
  %41 = fcmp olt float %40, 0x41DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0x41DFFFFFE0000000
  %43 = fcmp ogt float %42, 0xC1DFFFFFE0000000
  %44 = select i1 %43, float %42, float 0xC1DFFFFFE0000000
  %45 = fptosi float %44 to i32
  call void @_ZN3gfx4Rect5InsetEiiii(%"class.gfx::Rect"* nonnull %7, i32 %45, i32 %45, i32 %45, i32 %45) #5
  %46 = bitcast %class.SkPath* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #5
  %47 = bitcast %class.SkPath* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %8) #5
  %48 = bitcast { <2 x float>, <2 x float> }* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %48) #5
  %49 = call { <2 x float>, <2 x float> } @_ZN3gfx12RectToSkRectERKNS_4RectE(%"class.gfx::Rect"* nonnull dereferenceable(16) %7) #5
  %50 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %9, i64 0, i32 0
  %51 = extractvalue { <2 x float>, <2 x float> } %49, 0
  store <2 x float> %51, <2 x float>* %50, align 8
  %52 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %9, i64 0, i32 1
  %53 = extractvalue { <2 x float>, <2 x float> } %49, 1
  store <2 x float> %53, <2 x float>* %52, align 8
  %54 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5arcToERK6SkRectffb(%class.SkPath* nonnull %8, %struct.SkRect* nonnull dereferenceable(16) %10, float %3, float %4, i1 zeroext true) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %48) #5
  %55 = bitcast %"class.cc::PaintFlags"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %55) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %55, i8* align 8 bitcast (%"class.cc::PaintFlags"* @__const._ZN3gfx12_GLOBAL__N_18PaintArcEPNS_6CanvasERKNS_4RectEjffN4absl8optionalIfEE.flags to i8*), i64 72, i1 false)
  call void @_ZN2cc10PaintFlagsC1Ev(%"class.cc::PaintFlags"* nonnull %11) #5
  %56 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %11, i64 0, i32 6
  store i32 %2, i32* %56, align 8
  %57 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %11, i64 0, i32 10
  %58 = bitcast %union.anon.76* %57 to i16*
  %59 = load i16, i16* %58, align 8
  %60 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %11, i64 0, i32 7
  store float %36, float* %60, align 4
  %61 = and i16 %59, -206
  %62 = or i16 %61, 69
  store i16 %62, i16* %58, align 8
  call void @_ZN3gfx6Canvas8DrawPathERK6SkPathRKN2cc10PaintFlagsE(%"class.gfx::Canvas"* %0, %class.SkPath* nonnull dereferenceable(16) %8, %"class.cc::PaintFlags"* nonnull dereferenceable(72) %11) #5
  call void @_ZN2cc10PaintFlagsD1Ev(%"class.cc::PaintFlags"* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %55) #5
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx33PaintThrobberSpinningAfterWaitingEPNS_6CanvasERKNS_4RectEjRKN4base9TimeDeltaEPNS_20ThrobberWaitingStateEN4absl8optionalIfEE(%"class.gfx::Canvas"*, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), i32, %"class.base::TimeDelta"* dereferenceable(8), %"struct.gfx::ThrobberWaitingState"*, i64) local_unnamed_addr #0 {
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = alloca %"class.base::TimeDelta", align 8
  %9 = alloca i64, align 8
  %10 = alloca %"class.base::TimeDelta", align 8
  %11 = getelementptr inbounds %"struct.gfx::ThrobberWaitingState", %"struct.gfx::ThrobberWaitingState"* %4, i64 0, i32 0
  %12 = tail call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* %11, i64 1320000) #5
  %13 = fmul double %12, 3.600000e+02
  %14 = fcmp oge double %13, 0.000000e+00
  %15 = fadd double %13, 5.000000e-01
  %16 = tail call double @llvm.floor.f64(double %15) #5
  %17 = fadd double %13, -5.000000e-01
  %18 = tail call double @llvm.ceil.f64(double %17) #5
  %19 = select i1 %14, double %16, double %18
  %20 = fcmp ult double %19, 0xC3E0000000000000
  %21 = fcmp ugt double %19, 0x43DFFFFFFFFFFFFF
  %22 = fcmp ogt double %19, 0xC3E0000000000000
  %23 = select i1 %22, double %19, double 0xC3E0000000000000
  %24 = fptosi double %23 to i64
  %25 = select i1 %20, i64 0, i64 9223372036854775807
  %26 = select i1 %21, i64 %25, i64 %24
  %27 = icmp sgt i64 %26, 180
  %28 = select i1 %27, i64 %26, i64 180
  %29 = sub i64 -90, %26
  %30 = add i64 %26, 180
  %31 = sub i64 %30, %28
  %32 = getelementptr inbounds %"struct.gfx::ThrobberWaitingState", %"struct.gfx::ThrobberWaitingState"* %4, i64 0, i32 2, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %75

35:                                               ; preds = %6
  %36 = call i64 @_ZNK4base9TimeDelta23InMillisecondsRoundedUpEv(%"class.base::TimeDelta"* nonnull @_ZN3gfx12_GLOBAL__N_18kArcTimeE) #5
  %37 = icmp slt i64 %36, 0
  br i1 %37, label %75, label %38

38:                                               ; preds = %35
  %39 = bitcast %"class.base::TimeDelta"* %8 to i8*
  %40 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %8, i64 0, i32 0
  %41 = bitcast i64* %9 to i8*
  %42 = bitcast i64* %9 to %"class.base::TimeDelta"*
  %43 = sitofp i64 %31 to double
  br label %44

44:                                               ; preds = %71, %38
  %45 = phi i64 [ 0, %38 ], [ %72, %71 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %46 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %45, i64 1000) #5
  %47 = extractvalue { i64, i1 } %46, 1
  %48 = extractvalue { i64, i1 } %46, 0
  %49 = select i1 %47, i64 9223372036854775807, i64 %48, !prof !2
  store i64 %49, i64* %9, align 8
  %50 = icmp sgt i64 %49, 666666
  %51 = select i1 %50, %"class.base::TimeDelta"* @_ZN3gfx12_GLOBAL__N_18kArcTimeE, %"class.base::TimeDelta"* %42
  %52 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %51, i64 0, i32 0
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %40, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  %54 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %8, i64 666666)
  %55 = call double @_ZN3gfx5Tween14CalculateValueENS0_4TypeEd(i32 10, double %54) #5
  %56 = fmul double %55, 2.700000e+02
  %57 = fcmp ult double %56, %43
  br i1 %57, label %71, label %58

58:                                               ; preds = %44
  %59 = load i64, i64* %40, align 8
  %60 = add i64 %59, -9223372036854775807
  %61 = icmp ult i64 %60, 2
  br i1 %61, label %69, label %62

62:                                               ; preds = %58
  %63 = icmp slt i64 %59, 0
  %64 = select i1 %63, i64 -9223372036854775808, i64 9223372036854775807
  %65 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %59, i64 666666) #5
  %66 = extractvalue { i64, i1 } %65, 1
  %67 = extractvalue { i64, i1 } %65, 0
  %68 = select i1 %66, i64 %64, i64 %67, !prof !2
  br label %69

69:                                               ; preds = %58, %62
  %70 = phi i64 [ %68, %62 ], [ %59, %58 ]
  store i64 %70, i64* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #5
  br label %75

71:                                               ; preds = %44
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #5
  %72 = add nuw nsw i64 %45, 1
  %73 = call i64 @_ZNK4base9TimeDelta23InMillisecondsRoundedUpEv(%"class.base::TimeDelta"* nonnull @_ZN3gfx12_GLOBAL__N_18kArcTimeE) #5
  %74 = icmp slt i64 %45, %73
  br i1 %74, label %44, label %75

75:                                               ; preds = %71, %35, %69, %6
  %76 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* %3, i64 900000)
  %77 = fcmp ogt double %76, 1.000000e+00
  %78 = select i1 %77, double 1.000000e+00, double %76
  %79 = call double @_ZN3gfx5Tween14CalculateValueENS0_4TypeEd(i32 13, double %78) #5
  %80 = fptrunc double %79 to float
  %81 = getelementptr inbounds %"struct.gfx::ThrobberWaitingState", %"struct.gfx::ThrobberWaitingState"* %4, i64 0, i32 1
  %82 = load i32, i32* %81, align 8
  %83 = call i32 @_ZN11color_utils10AlphaBlendEjjf(i32 %2, i32 %82, float %80) #5
  %84 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* %3, i64 1568000)
  %85 = fmul double %84, 3.600000e+02
  %86 = fcmp oge double %85, 0.000000e+00
  %87 = fadd double %85, 5.000000e-01
  %88 = call double @llvm.floor.f64(double %87) #5
  %89 = fadd double %85, -5.000000e-01
  %90 = call double @llvm.ceil.f64(double %89) #5
  %91 = select i1 %86, double %88, double %90
  %92 = fcmp ult double %91, 0xC3E0000000000000
  %93 = fcmp ugt double %91, 0x43DFFFFFFFFFFFFF
  %94 = fcmp ogt double %91, 0xC3E0000000000000
  %95 = select i1 %94, double %91, double 0xC3E0000000000000
  %96 = fptosi double %95 to i64
  %97 = select i1 %92, i64 0, i64 9223372036854775807
  %98 = select i1 %93, i64 %97, i64 %96
  %99 = add nsw i64 %29, %98
  %100 = bitcast %"class.base::TimeDelta"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %100) #5
  %101 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %10, i64 0, i32 0
  store i64 -6148914691236517206, i64* %101, align 8
  %102 = load i64, i64* %32, align 8
  %103 = add i64 %102, -9223372036854775807
  %104 = icmp ult i64 %103, 2
  %105 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 0, i32 0
  %106 = load i64, i64* %105, align 8
  br i1 %104, label %114, label %107

107:                                              ; preds = %75
  %108 = icmp slt i64 %102, 0
  %109 = select i1 %108, i64 -9223372036854775808, i64 9223372036854775807
  %110 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %106, i64 %102) #5
  %111 = extractvalue { i64, i1 } %110, 1
  %112 = extractvalue { i64, i1 } %110, 0
  %113 = select i1 %111, i64 %109, i64 %112, !prof !2
  br label %122

114:                                              ; preds = %75
  %115 = add i64 %106, -9223372036854775807
  %116 = icmp ugt i64 %115, 1
  %117 = icmp eq i64 %106, %102
  %118 = or i1 %117, %116
  br i1 %118, label %122, label %119

119:                                              ; preds = %114
  %120 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %120) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0)) #5
  %121 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %120) #5
  br label %122

122:                                              ; preds = %107, %114, %119
  %123 = phi i64 [ %113, %107 ], [ %102, %114 ], [ %102, %119 ]
  store i64 %123, i64* %101, align 8
  call fastcc void @_ZN3gfx12_GLOBAL__N_135PaintThrobberSpinningWithStartAngleEPNS_6CanvasERKNS_4RectEjRKN4base9TimeDeltaElN4absl8optionalIfEE(%"class.gfx::Canvas"* %0, %"class.gfx::Rect"* dereferenceable(16) %1, i32 %83, %"class.base::TimeDelta"* nonnull dereferenceable(8) %10, i64 %99, i64 %5)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %100) #5
  ret void
}

declare i64 @_ZNK4base9TimeDelta23InMillisecondsRoundedUpEv(%"class.base::TimeDelta"*) local_unnamed_addr #2

declare double @_ZN3gfx5Tween14CalculateValueENS0_4TypeEd(i32, double) local_unnamed_addr #2

declare i32 @_ZN11color_utils10AlphaBlendEjjf(i32, i32, float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx23PaintNewThrobberWaitingEPNS_6CanvasERKNS_5RectFEjRKN4base9TimeDeltaE(%"class.gfx::Canvas"*, %"class.gfx::RectF"* dereferenceable(16), i32, %"class.base::TimeDelta"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %5 = alloca %"class.base::TimeDelta", align 8
  %6 = alloca %"class.gfx::RectF", align 4
  %7 = alloca %"class.cc::PaintFlags", align 8
  %8 = bitcast %"class.base::TimeDelta"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #5
  %9 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, -9223372036854775807
  %12 = icmp ult i64 %11, 2
  %13 = srem i64 %10, 1000000
  %14 = select i1 %12, i64 %10, i64 %13
  %15 = sitofp i64 %14 to float
  %16 = fmul float %15, 2.000000e+00
  %17 = fcmp oge float %16, 0xC3E0000000000000
  %18 = fcmp ole float %16, 0x43DFFFFFE0000000
  %19 = and i1 %18, %17
  %20 = fptosi float %16 to i64
  %21 = icmp sgt i64 %14, -1
  %22 = select i1 %21, i64 9223372036854775807, i64 -9223372036854775808
  %23 = select i1 %19, i64 %20, i64 %22
  %24 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %5, i64 0, i32 0
  store i64 %23, i64* %24, align 8
  %25 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %5, i64 1000000)
  %26 = fptrunc double %25 to float
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #5
  %27 = fcmp ogt float %26, 1.000000e+00
  %28 = fsub float 2.000000e+00, %26
  %29 = select i1 %27, float %28, float %26
  %30 = fpext float %29 to double
  %31 = call double @_ZN3gfx5Tween14CalculateValueENS0_4TypeEd(i32 7, double %30) #5
  %32 = fptrunc double %31 to float
  %33 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 1
  %34 = load float, float* %33, align 4
  %35 = select i1 %27, float 7.500000e-01, float 1.000000e+00
  %36 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 0
  %37 = load float, float* %36, align 4
  %38 = fmul float %35, %37
  %39 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 0
  %40 = load float, float* %39, align 4
  %41 = fsub float %40, %38
  %42 = fadd float %34, %41
  %43 = fadd float %37, %40
  %44 = fsub float %43, %34
  %45 = bitcast %"class.gfx::RectF"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #5
  %46 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %6, i64 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %6, i64 0, i32 1, i32 0
  %48 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %6, i64 0, i32 1, i32 1
  %49 = bitcast %"class.gfx::RectF"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %45, i8* align 4 %49, i64 16, i1 false)
  %50 = fsub float %44, %42
  %51 = fmul float %50, %32
  %52 = fadd float %42, %51
  store float %52, float* %46, align 4
  %53 = fcmp ogt float %38, 0x3EB0000000000000
  %54 = select i1 %53, float %38, float 0.000000e+00
  store float %54, float* %47, align 4
  call void @_ZN3gfx5RectF9IntersectERKS0_(%"class.gfx::RectF"* nonnull %6, %"class.gfx::RectF"* dereferenceable(16) %1) #5
  %55 = bitcast %"class.cc::PaintFlags"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %55) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %55, i8* align 8 bitcast (%"class.cc::PaintFlags"* @__const._ZN3gfx12_GLOBAL__N_18PaintArcEPNS_6CanvasERKNS_4RectEjffN4absl8optionalIfEE.flags to i8*), i64 72, i1 false)
  call void @_ZN2cc10PaintFlagsC1Ev(%"class.cc::PaintFlags"* nonnull %7) #5
  %56 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %7, i64 0, i32 6
  store i32 %2, i32* %56, align 8
  %57 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %7, i64 0, i32 10
  %58 = bitcast %union.anon.76* %57 to i16*
  %59 = load i16, i16* %58, align 8
  %60 = and i16 %59, -193
  store i16 %60, i16* %58, align 8
  %61 = load float, float* %48, align 4
  %62 = fmul float %61, 5.000000e-01
  call void @_ZN3gfx6Canvas13DrawRoundRectERKNS_5RectFEfRKN2cc10PaintFlagsE(%"class.gfx::Canvas"* %0, %"class.gfx::RectF"* nonnull dereferenceable(16) %6, float %62, %"class.cc::PaintFlags"* nonnull dereferenceable(72) %7) #5
  call void @_ZN2cc10PaintFlagsD1Ev(%"class.cc::PaintFlags"* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %55) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #5
  ret void
}

declare void @_ZN3gfx5RectF9IntersectERKS0_(%"class.gfx::RectF"*, %"class.gfx::RectF"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN2cc10PaintFlagsC1Ev(%"class.cc::PaintFlags"*) unnamed_addr #2

declare void @_ZN3gfx6Canvas13DrawRoundRectERKNS_5RectFEfRKN2cc10PaintFlagsE(%"class.gfx::Canvas"*, %"class.gfx::RectF"* dereferenceable(16), float, %"class.cc::PaintFlags"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2cc10PaintFlagsD1Ev(%"class.cc::PaintFlags"*) unnamed_addr #3

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #4

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath5arcToERK6SkRectffb(%class.SkPath*, %struct.SkRect* dereferenceable(16), float, float, i1 zeroext) local_unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZN3gfx12RectToSkRectERKNS_4RectE(%"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN3gfx6Canvas8DrawPathERK6SkPathRKN2cc10PaintFlagsE(%"class.gfx::Canvas"*, %class.SkPath* dereferenceable(16), %"class.cc::PaintFlags"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #3

declare void @_ZN3gfx4Rect5InsetEiiii(%"class.gfx::Rect"*, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #4

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
