; ModuleID = '../../third_party/webrtc/modules/audio_processing/aec3/frame_blocker.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/aec3/frame_blocker.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::FrameBlocker" = type { i64, i64, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::vector.2"* }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::vector.0"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"*, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { %"class.rtc::ArrayView"*, %"class.rtc::ArrayView"*, %"class.std::__1::__compressed_pair.20" }
%"class.rtc::ArrayView" = type { %"class.rtc::impl::ArrayViewBase" }
%"class.rtc::impl::ArrayViewBase" = type { float*, i64 }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.rtc::ArrayView"* }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::vector.18"* }

$_ZNSt3__16vectorIfNS_9allocatorIfEEE6insertINS_11__wrap_iterIPfEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKfEES9_S9_ = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE6insertIPfEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKfEES7_S7_ = comdat any

$_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEEC2ERKS5_ = comdat any

@_ZN6webrtc12FrameBlockerC1Emm = hidden unnamed_addr alias void (%"class.webrtc::FrameBlocker"*, i64, i64), void (%"class.webrtc::FrameBlocker"*, i64, i64)* @_ZN6webrtc12FrameBlockerC2Emm
@_ZN6webrtc12FrameBlockerD1Ev = hidden unnamed_addr alias void (%"class.webrtc::FrameBlocker"*), void (%"class.webrtc::FrameBlocker"*)* @_ZN6webrtc12FrameBlockerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc12FrameBlockerC2Emm(%"class.webrtc::FrameBlocker"*, i64, i64) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector.0", align 8
  %5 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 0
  store i64 %1, i64* %5, align 8
  %6 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 1
  store i64 %2, i64* %6, align 8
  %7 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 2
  %8 = bitcast %"class.std::__1::vector.0"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #7
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %32, label %10

10:                                               ; preds = %3
  %11 = icmp ugt i64 %2, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %10
  %13 = bitcast %"class.std::__1::vector.0"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %13) #8
  unreachable

14:                                               ; preds = %10
  %15 = mul i64 %2, 24
  %16 = tail call i8* @_Znwm(i64 %15) #9
  %17 = bitcast i8* %16 to %"class.std::__1::vector.2"*
  %18 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %4, i64 0, i32 0, i32 1
  %19 = bitcast %"class.std::__1::vector.0"* %4 to i8**
  store i8* %16, i8** %19, align 8
  %20 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %17, i64 %2
  %21 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::vector.2"* %20, %"class.std::__1::vector.2"** %21, align 8
  %22 = bitcast %"class.std::__1::vector.2"** %18 to i64*
  %23 = ptrtoint i8* %16 to i64
  %24 = add nsw i64 %2, -1
  %25 = getelementptr %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %17, i64 %24, i32 0, i32 0
  %26 = ptrtoint float** %25 to i64
  %27 = sub i64 %26, %23
  %28 = urem i64 %27, 24
  %29 = add i64 %27, 24
  %30 = sub i64 %29, %28
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 %30, i1 false) #7
  %31 = ptrtoint %"class.std::__1::vector.2"* %20 to i64
  store i64 %31, i64* %22, align 8
  br label %32

32:                                               ; preds = %3, %14
  %33 = phi i8* [ null, %3 ], [ %16, %14 ]
  %34 = phi %"class.std::__1::vector.2"* [ null, %3 ], [ %17, %14 ]
  %35 = bitcast %"class.std::__1::vector"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #7
  %36 = icmp eq i64 %1, 0
  br i1 %36, label %60, label %37

37:                                               ; preds = %32
  %38 = icmp ugt i64 %1, 768614336404564650
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %40) #8
  unreachable

41:                                               ; preds = %37
  %42 = mul i64 %1, 24
  %43 = tail call i8* @_Znwm(i64 %42) #9
  %44 = bitcast i8* %43 to %"class.std::__1::vector.0"*
  %45 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 2, i32 0, i32 1
  %46 = bitcast %"class.std::__1::vector.0"** %45 to i8**
  store i8* %43, i8** %46, align 8
  %47 = bitcast %"class.std::__1::vector"* %7 to i8**
  store i8* %43, i8** %47, align 8
  %48 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %44, i64 %1
  %49 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::vector.0"* %48, %"class.std::__1::vector.0"** %49, align 8
  br label %50

50:                                               ; preds = %50, %41
  %51 = phi %"class.std::__1::vector.0"* [ %52, %50 ], [ %44, %41 ]
  call void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector.0"* %51, %"class.std::__1::vector.0"* nonnull dereferenceable(24) %4) #7
  %52 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %51, i64 1
  %53 = icmp eq %"class.std::__1::vector.0"* %52, %48
  br i1 %53, label %54, label %50

54:                                               ; preds = %50
  %55 = bitcast %"class.std::__1::vector.0"** %45 to i64*
  %56 = ptrtoint %"class.std::__1::vector.0"* %48 to i64
  store i64 %56, i64* %55, align 8
  %57 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %4, i64 0, i32 0, i32 0
  %58 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %57, align 8
  %59 = bitcast %"class.std::__1::vector.2"* %58 to i8*
  br label %60

60:                                               ; preds = %32, %54
  %61 = phi %"class.std::__1::vector.0"* [ null, %32 ], [ %48, %54 ]
  %62 = phi i8* [ %33, %32 ], [ %59, %54 ]
  %63 = phi %"class.std::__1::vector.2"* [ %34, %32 ], [ %58, %54 ]
  %64 = icmp eq %"class.std::__1::vector.2"* %63, null
  br i1 %64, label %90, label %65

65:                                               ; preds = %60
  %66 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %4, i64 0, i32 0, i32 1
  %67 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %66, align 8
  %68 = icmp eq %"class.std::__1::vector.2"* %67, %63
  br i1 %68, label %85, label %69

69:                                               ; preds = %65, %80
  %70 = phi %"class.std::__1::vector.2"* [ %71, %80 ], [ %67, %65 ]
  %71 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %70, i64 -1
  %72 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %71, i64 0, i32 0, i32 0
  %73 = load float*, float** %72, align 8
  %74 = icmp eq float* %73, null
  br i1 %74, label %80, label %75

75:                                               ; preds = %69
  %76 = ptrtoint float* %73 to i64
  %77 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %70, i64 -1, i32 0, i32 1
  %78 = bitcast float** %77 to i64*
  store i64 %76, i64* %78, align 8
  %79 = bitcast float* %73 to i8*
  call void @_ZdlPv(i8* %79) #9
  br label %80

80:                                               ; preds = %75, %69
  %81 = icmp eq %"class.std::__1::vector.2"* %71, %63
  br i1 %81, label %82, label %69

82:                                               ; preds = %80
  %83 = bitcast %"class.std::__1::vector.0"* %4 to i8**
  %84 = load i8*, i8** %83, align 8
  br label %85

85:                                               ; preds = %82, %65
  %86 = phi i8* [ %84, %82 ], [ %62, %65 ]
  %87 = bitcast %"class.std::__1::vector.2"** %66 to i8**
  store i8* %62, i8** %87, align 8
  call void @_ZdlPv(i8* %86) #9
  %88 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 2, i32 0, i32 1
  %89 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %88, align 8
  br label %90

90:                                               ; preds = %60, %85
  %91 = phi %"class.std::__1::vector.0"* [ %61, %60 ], [ %89, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #7
  %92 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %93 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %92, align 8
  %94 = icmp eq %"class.std::__1::vector.0"* %93, %91
  br i1 %94, label %95, label %96

95:                                               ; preds = %103, %90
  ret void

96:                                               ; preds = %90, %103
  %97 = phi %"class.std::__1::vector.0"* [ %104, %103 ], [ %93, %90 ]
  %98 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %97, i64 0, i32 0, i32 0
  %99 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %98, align 8
  %100 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %97, i64 0, i32 0, i32 1
  %101 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %100, align 8
  %102 = icmp eq %"class.std::__1::vector.2"* %99, %101
  br i1 %102, label %103, label %106

103:                                              ; preds = %136, %96
  %104 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %97, i64 1
  %105 = icmp eq %"class.std::__1::vector.0"* %104, %91
  br i1 %105, label %95, label %96

106:                                              ; preds = %96, %136
  %107 = phi %"class.std::__1::vector.2"* [ %137, %136 ], [ %99, %96 ]
  %108 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %107, i64 0, i32 0, i32 2, i32 0, i32 0
  %109 = bitcast float** %108 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = bitcast %"class.std::__1::vector.2"* %107 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = sub i64 %110, %112
  %114 = ashr exact i64 %113, 2
  %115 = icmp ult i64 %114, 64
  br i1 %115, label %116, label %136

116:                                              ; preds = %106
  %117 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %107, i64 0, i32 0, i32 1
  %118 = bitcast float** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = sub i64 %119, %112
  %121 = ashr exact i64 %120, 2
  %122 = call i8* @_Znwm(i64 256) #9
  %123 = bitcast i8* %122 to float*
  %124 = getelementptr inbounds float, float* %123, i64 %121
  %125 = ptrtoint float* %124 to i64
  %126 = getelementptr inbounds i8, i8* %122, i64 256
  %127 = ptrtoint i8* %126 to i64
  %128 = ptrtoint i8* %122 to i64
  %129 = icmp sgt i64 %120, 0
  br i1 %129, label %130, label %132

130:                                              ; preds = %116
  %131 = inttoptr i64 %112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %122, i8* align 4 %131, i64 %120, i1 false) #7
  br label %132

132:                                              ; preds = %130, %116
  store i64 %128, i64* %111, align 8
  store i64 %125, i64* %118, align 8
  store i64 %127, i64* %109, align 8
  %133 = icmp eq i64 %112, 0
  br i1 %133, label %136, label %134

134:                                              ; preds = %132
  %135 = inttoptr i64 %112 to i8*
  call void @_ZdlPv(i8* %135) #9
  br label %136

136:                                              ; preds = %106, %132, %134
  %137 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %107, i64 1
  %138 = icmp eq %"class.std::__1::vector.2"* %137, %101
  br i1 %138, label %103, label %106
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc12FrameBlockerD2Ev(%"class.webrtc::FrameBlocker"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %3, align 8
  %5 = icmp eq %"class.std::__1::vector.0"* %4, null
  br i1 %5, label %47, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.std::__1::vector.0"* %4 to i8*
  %8 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %8, align 8
  %10 = icmp eq %"class.std::__1::vector.0"* %9, %4
  br i1 %10, label %45, label %11

11:                                               ; preds = %6, %40
  %12 = phi %"class.std::__1::vector.0"* [ %13, %40 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %12, i64 -1
  %14 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %13, i64 0, i32 0, i32 0
  %15 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %14, align 8
  %16 = icmp eq %"class.std::__1::vector.2"* %15, null
  br i1 %16, label %40, label %17

17:                                               ; preds = %11
  %18 = bitcast %"class.std::__1::vector.2"* %15 to i8*
  %19 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %12, i64 -1, i32 0, i32 1
  %20 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %19, align 8
  %21 = icmp eq %"class.std::__1::vector.2"* %20, %15
  br i1 %21, label %38, label %22

22:                                               ; preds = %17, %33
  %23 = phi %"class.std::__1::vector.2"* [ %24, %33 ], [ %20, %17 ]
  %24 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %23, i64 -1
  %25 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %24, i64 0, i32 0, i32 0
  %26 = load float*, float** %25, align 8
  %27 = icmp eq float* %26, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %22
  %29 = ptrtoint float* %26 to i64
  %30 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %23, i64 -1, i32 0, i32 1
  %31 = bitcast float** %30 to i64*
  store i64 %29, i64* %31, align 8
  %32 = bitcast float* %26 to i8*
  tail call void @_ZdlPv(i8* %32) #9
  br label %33

33:                                               ; preds = %28, %22
  %34 = icmp eq %"class.std::__1::vector.2"* %24, %15
  br i1 %34, label %35, label %22

35:                                               ; preds = %33
  %36 = bitcast %"class.std::__1::vector.0"* %13 to i8**
  %37 = load i8*, i8** %36, align 8
  br label %38

38:                                               ; preds = %35, %17
  %39 = phi i8* [ %37, %35 ], [ %18, %17 ]
  store %"class.std::__1::vector.2"* %15, %"class.std::__1::vector.2"** %19, align 8
  tail call void @_ZdlPv(i8* %39) #9
  br label %40

40:                                               ; preds = %38, %11
  %41 = icmp eq %"class.std::__1::vector.0"* %13, %4
  br i1 %41, label %42, label %11

42:                                               ; preds = %40
  %43 = bitcast %"class.std::__1::vector"* %2 to i8**
  %44 = load i8*, i8** %43, align 8
  br label %45

45:                                               ; preds = %42, %6
  %46 = phi i8* [ %44, %42 ], [ %7, %6 ]
  store %"class.std::__1::vector.0"* %4, %"class.std::__1::vector.0"** %8, align 8
  tail call void @_ZdlPv(i8* %46) #9
  br label %47

47:                                               ; preds = %1, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc12FrameBlocker29InsertSubFrameAndExtractBlockERKNSt3__16vectorINS2_IN3rtc9ArrayViewIfLln4711EEENS1_9allocatorIS5_EEEENS6_IS8_EEEEPNS2_INS2_INS2_IfNS6_IfEEEENS6_ISE_EEEENS6_ISG_EEEE(%"class.webrtc::FrameBlocker"* nocapture readonly, %"class.std::__1::vector.16"* nocapture readonly dereferenceable(24), %"class.std::__1::vector"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 2, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %1, i64 0, i32 0, i32 0
  %12 = load i64, i64* %8, align 8
  br label %13

13:                                               ; preds = %7, %21
  %14 = phi i64 [ %5, %7 ], [ %22, %21 ]
  %15 = phi i64 [ %12, %7 ], [ %23, %21 ]
  %16 = phi i64 [ 0, %7 ], [ %24, %21 ]
  %17 = icmp eq i64 %15, 0
  br i1 %17, label %21, label %26

18:                                               ; preds = %21, %3
  ret void

19:                                               ; preds = %26
  %20 = load i64, i64* %4, align 8
  br label %21

21:                                               ; preds = %19, %13
  %22 = phi i64 [ %20, %19 ], [ %14, %13 ]
  %23 = phi i64 [ %113, %19 ], [ 0, %13 ]
  %24 = add nuw i64 %16, 1
  %25 = icmp ult i64 %24, %22
  br i1 %25, label %13, label %18

26:                                               ; preds = %13, %26
  %27 = phi i64 [ %112, %26 ], [ 0, %13 ]
  %28 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %9, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %28, i64 %16, i32 0, i32 0
  %30 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %29, align 8
  %31 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %30, i64 %27
  %32 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %30, i64 %27, i32 0, i32 1
  %33 = bitcast float** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.std::__1::vector.2"* %31 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %34, %36
  %38 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %10, align 8
  %39 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %38, i64 %16, i32 0, i32 0
  %40 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %39, align 8
  %41 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %40, i64 %27
  %42 = bitcast %"class.std::__1::vector.2"* %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %40, i64 %27, i32 0, i32 1
  %45 = bitcast float** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %10, align 8
  %47 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %46, i64 %16, i32 0, i32 0
  %48 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %47, align 8
  %49 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %48, i64 %27
  %50 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %49, i64 0, i32 0, i32 0
  %51 = load float*, float** %50, align 8
  %52 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %9, align 8
  %53 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %52, i64 %16, i32 0, i32 0
  %54 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %53, align 8
  %55 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %54, i64 %27, i32 0, i32 0
  %56 = load float*, float** %55, align 8
  %57 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %54, i64 %27, i32 0, i32 1
  %58 = load float*, float** %57, align 8
  %59 = tail call float* @_ZNSt3__16vectorIfNS_9allocatorIfEEE6insertINS_11__wrap_iterIPfEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKfEES9_S9_(%"class.std::__1::vector.2"* %49, float* %51, float* %56, float* %58)
  %60 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %10, align 8
  %61 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %60, i64 %16, i32 0, i32 0
  %62 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %61, align 8
  %63 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %62, i64 %27
  %64 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %63, i64 0, i32 0, i32 0
  %65 = load float*, float** %64, align 8
  %66 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %9, align 8
  %67 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %66, i64 %16, i32 0, i32 0
  %68 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %67, align 8
  %69 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %68, i64 %27
  %70 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %68, i64 %27, i32 0, i32 1
  %71 = bitcast float** %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = bitcast %"class.std::__1::vector.2"* %69 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = sub i64 %72, %74
  %76 = ashr exact i64 %75, 2
  %77 = getelementptr inbounds float, float* %65, i64 %76
  %78 = load %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"** %11, align 8
  %79 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %78, i64 %16, i32 0, i32 0
  %80 = load %"class.rtc::ArrayView"*, %"class.rtc::ArrayView"** %79, align 8
  %81 = getelementptr inbounds %"class.rtc::ArrayView", %"class.rtc::ArrayView"* %80, i64 %27, i32 0, i32 0
  %82 = load float*, float** %81, align 8
  %83 = shl i64 %37, 30
  %84 = sub i64 274877906944, %83
  %85 = ashr exact i64 %84, 32
  %86 = getelementptr inbounds float, float* %82, i64 %85
  %87 = tail call float* @_ZNSt3__16vectorIfNS_9allocatorIfEEE6insertIPfEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKfEES7_S7_(%"class.std::__1::vector.2"* %63, float* %77, float* %82, float* %86)
  %88 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %9, align 8
  %89 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %88, i64 %16, i32 0, i32 0
  %90 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %89, align 8
  %91 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %90, i64 %27
  %92 = bitcast %"class.std::__1::vector.2"* %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %90, i64 %27, i32 0, i32 1
  %95 = bitcast float** %94 to i64*
  store i64 %93, i64* %95, align 8
  %96 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %9, align 8
  %97 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %96, i64 %16, i32 0, i32 0
  %98 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %97, align 8
  %99 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %98, i64 %27
  %100 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %99, i64 0, i32 0, i32 0
  %101 = load float*, float** %100, align 8
  %102 = load %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"** %11, align 8
  %103 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %102, i64 %16, i32 0, i32 0
  %104 = load %"class.rtc::ArrayView"*, %"class.rtc::ArrayView"** %103, align 8
  %105 = getelementptr inbounds %"class.rtc::ArrayView", %"class.rtc::ArrayView"* %104, i64 %27, i32 0, i32 0
  %106 = load float*, float** %105, align 8
  %107 = getelementptr inbounds float, float* %106, i64 %85
  %108 = getelementptr inbounds %"class.rtc::ArrayView", %"class.rtc::ArrayView"* %104, i64 %27, i32 0, i32 1
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds float, float* %106, i64 %109
  %111 = tail call float* @_ZNSt3__16vectorIfNS_9allocatorIfEEE6insertIPfEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKfEES7_S7_(%"class.std::__1::vector.2"* %99, float* %101, float* %107, float* %110)
  %112 = add nuw i64 %27, 1
  %113 = load i64, i64* %8, align 8
  %114 = icmp ult i64 %112, %113
  br i1 %114, label %26, label %19
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float* @_ZNSt3__16vectorIfNS_9allocatorIfEEE6insertINS_11__wrap_iterIPfEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKfEES9_S9_(%"class.std::__1::vector.2"*, float*, float*, float*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast float* %2 to i8*
  %6 = bitcast float* %1 to i8*
  %7 = ptrtoint float* %1 to i64
  %8 = ptrtoint float* %2 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 0
  %10 = ptrtoint float* %3 to i64
  %11 = sub i64 %10, %8
  %12 = ashr exact i64 %11, 2
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %772

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast float** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 1
  %19 = load float*, float** %18, align 8
  %20 = ptrtoint float* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast float** %18 to i64*
  br i1 %23, label %359, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 2
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %214

29:                                               ; preds = %25
  %30 = getelementptr inbounds float, float* %2, i64 %27
  %31 = icmp eq float* %30, %3
  br i1 %31, label %209, label %32

32:                                               ; preds = %29
  %33 = xor i64 %27, -1
  %34 = getelementptr float, float* %3, i64 %33
  %35 = ptrtoint float* %34 to i64
  %36 = sub i64 %35, %8
  %37 = lshr i64 %36, 2
  %38 = add nuw nsw i64 %37, 1
  %39 = icmp ult i64 %38, 8
  br i1 %39, label %135, label %40

40:                                               ; preds = %32
  %41 = xor i64 %27, -1
  %42 = getelementptr float, float* %3, i64 %41
  %43 = ptrtoint float* %42 to i64
  %44 = sub i64 %43, %8
  %45 = lshr i64 %44, 2
  %46 = add nuw nsw i64 %45, 1
  %47 = getelementptr float, float* %19, i64 %46
  %48 = add nsw i64 %27, %45
  %49 = add i64 %48, 1
  %50 = getelementptr float, float* %2, i64 %49
  %51 = icmp ult float* %19, %50
  %52 = icmp ult float* %30, %47
  %53 = and i1 %51, %52
  br i1 %53, label %135, label %54

54:                                               ; preds = %40
  %55 = and i64 %38, 9223372036854775800
  %56 = getelementptr float, float* %19, i64 %55
  %57 = getelementptr float, float* %30, i64 %55
  %58 = add nsw i64 %55, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 24
  br i1 %62, label %114, label %63

63:                                               ; preds = %54
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr float, float* %19, i64 %66
  %69 = getelementptr float, float* %30, i64 %66
  %70 = bitcast float* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4, !alias.scope !2
  %72 = getelementptr float, float* %69, i64 4
  %73 = bitcast float* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !alias.scope !2
  %75 = bitcast float* %68 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %75, align 4, !alias.scope !5, !noalias !2
  %76 = getelementptr float, float* %68, i64 4
  %77 = bitcast float* %76 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %77, align 4, !alias.scope !5, !noalias !2
  %78 = or i64 %66, 8
  %79 = getelementptr float, float* %19, i64 %78
  %80 = getelementptr float, float* %30, i64 %78
  %81 = bitcast float* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !2
  %83 = getelementptr float, float* %80, i64 4
  %84 = bitcast float* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 4, !alias.scope !2
  %86 = bitcast float* %79 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %86, align 4, !alias.scope !5, !noalias !2
  %87 = getelementptr float, float* %79, i64 4
  %88 = bitcast float* %87 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %88, align 4, !alias.scope !5, !noalias !2
  %89 = or i64 %66, 16
  %90 = getelementptr float, float* %19, i64 %89
  %91 = getelementptr float, float* %30, i64 %89
  %92 = bitcast float* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !2
  %94 = getelementptr float, float* %91, i64 4
  %95 = bitcast float* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !alias.scope !2
  %97 = bitcast float* %90 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %97, align 4, !alias.scope !5, !noalias !2
  %98 = getelementptr float, float* %90, i64 4
  %99 = bitcast float* %98 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %99, align 4, !alias.scope !5, !noalias !2
  %100 = or i64 %66, 24
  %101 = getelementptr float, float* %19, i64 %100
  %102 = getelementptr float, float* %30, i64 %100
  %103 = bitcast float* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !2
  %105 = getelementptr float, float* %102, i64 4
  %106 = bitcast float* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4, !alias.scope !2
  %108 = bitcast float* %101 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %108, align 4, !alias.scope !5, !noalias !2
  %109 = getelementptr float, float* %101, i64 4
  %110 = bitcast float* %109 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %110, align 4, !alias.scope !5, !noalias !2
  %111 = add i64 %66, 32
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !7

114:                                              ; preds = %65, %54
  %115 = phi i64 [ 0, %54 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr float, float* %19, i64 %118
  %121 = getelementptr float, float* %30, i64 %118
  %122 = bitcast float* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4, !alias.scope !2
  %124 = getelementptr float, float* %121, i64 4
  %125 = bitcast float* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !2
  %127 = bitcast float* %120 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %127, align 4, !alias.scope !5, !noalias !2
  %128 = getelementptr float, float* %120, i64 4
  %129 = bitcast float* %128 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 4, !alias.scope !5, !noalias !2
  %130 = add i64 %118, 8
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !9

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %38, %55
  br i1 %134, label %206, label %135

135:                                              ; preds = %133, %40, %32
  %136 = phi float* [ %19, %40 ], [ %19, %32 ], [ %56, %133 ]
  %137 = phi float* [ %30, %40 ], [ %30, %32 ], [ %57, %133 ]
  %138 = ptrtoint float* %137 to i64
  %139 = getelementptr float, float* %3, i64 -1
  %140 = ptrtoint float* %139 to i64
  %141 = sub i64 %140, %138
  %142 = lshr i64 %141, 2
  %143 = add nuw nsw i64 %142, 1
  %144 = and i64 %143, 7
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %157, label %146

146:                                              ; preds = %135, %146
  %147 = phi float* [ %154, %146 ], [ %136, %135 ]
  %148 = phi float* [ %153, %146 ], [ %137, %135 ]
  %149 = phi i64 [ %155, %146 ], [ %144, %135 ]
  %150 = bitcast float* %147 to i32*
  %151 = bitcast float* %148 to i32*
  %152 = load i32, i32* %151, align 4
  store i32 %152, i32* %150, align 4
  %153 = getelementptr inbounds float, float* %148, i64 1
  %154 = getelementptr inbounds float, float* %147, i64 1
  %155 = add i64 %149, -1
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %146, !llvm.loop !11

157:                                              ; preds = %146, %135
  %158 = phi float* [ undef, %135 ], [ %154, %146 ]
  %159 = phi float* [ %136, %135 ], [ %154, %146 ]
  %160 = phi float* [ %137, %135 ], [ %153, %146 ]
  %161 = icmp ult i64 %141, 28
  br i1 %161, label %206, label %162

162:                                              ; preds = %157, %162
  %163 = phi float* [ %204, %162 ], [ %159, %157 ]
  %164 = phi float* [ %203, %162 ], [ %160, %157 ]
  %165 = bitcast float* %163 to i32*
  %166 = bitcast float* %164 to i32*
  %167 = load i32, i32* %166, align 4
  store i32 %167, i32* %165, align 4
  %168 = getelementptr inbounds float, float* %164, i64 1
  %169 = getelementptr inbounds float, float* %163, i64 1
  %170 = bitcast float* %169 to i32*
  %171 = bitcast float* %168 to i32*
  %172 = load i32, i32* %171, align 4
  store i32 %172, i32* %170, align 4
  %173 = getelementptr inbounds float, float* %164, i64 2
  %174 = getelementptr inbounds float, float* %163, i64 2
  %175 = bitcast float* %174 to i32*
  %176 = bitcast float* %173 to i32*
  %177 = load i32, i32* %176, align 4
  store i32 %177, i32* %175, align 4
  %178 = getelementptr inbounds float, float* %164, i64 3
  %179 = getelementptr inbounds float, float* %163, i64 3
  %180 = bitcast float* %179 to i32*
  %181 = bitcast float* %178 to i32*
  %182 = load i32, i32* %181, align 4
  store i32 %182, i32* %180, align 4
  %183 = getelementptr inbounds float, float* %164, i64 4
  %184 = getelementptr inbounds float, float* %163, i64 4
  %185 = bitcast float* %184 to i32*
  %186 = bitcast float* %183 to i32*
  %187 = load i32, i32* %186, align 4
  store i32 %187, i32* %185, align 4
  %188 = getelementptr inbounds float, float* %164, i64 5
  %189 = getelementptr inbounds float, float* %163, i64 5
  %190 = bitcast float* %189 to i32*
  %191 = bitcast float* %188 to i32*
  %192 = load i32, i32* %191, align 4
  store i32 %192, i32* %190, align 4
  %193 = getelementptr inbounds float, float* %164, i64 6
  %194 = getelementptr inbounds float, float* %163, i64 6
  %195 = bitcast float* %194 to i32*
  %196 = bitcast float* %193 to i32*
  %197 = load i32, i32* %196, align 4
  store i32 %197, i32* %195, align 4
  %198 = getelementptr inbounds float, float* %164, i64 7
  %199 = getelementptr inbounds float, float* %163, i64 7
  %200 = bitcast float* %199 to i32*
  %201 = bitcast float* %198 to i32*
  %202 = load i32, i32* %201, align 4
  store i32 %202, i32* %200, align 4
  %203 = getelementptr inbounds float, float* %164, i64 8
  %204 = getelementptr inbounds float, float* %163, i64 8
  %205 = icmp eq float* %203, %3
  br i1 %205, label %206, label %162, !llvm.loop !12

206:                                              ; preds = %157, %162, %133
  %207 = phi float* [ %56, %133 ], [ %158, %157 ], [ %204, %162 ]
  %208 = ptrtoint float* %207 to i64
  br label %209

209:                                              ; preds = %206, %29
  %210 = phi i64 [ %20, %29 ], [ %208, %206 ]
  store i64 %210, i64* %24, align 8
  %211 = icmp sgt i64 %26, 0
  br i1 %211, label %212, label %772

212:                                              ; preds = %209
  %213 = inttoptr i64 %210 to float*
  br label %214

214:                                              ; preds = %212, %25
  %215 = phi i64 [ %210, %212 ], [ %20, %25 ]
  %216 = phi float* [ %213, %212 ], [ %19, %25 ]
  %217 = phi float* [ %30, %212 ], [ %3, %25 ]
  %218 = getelementptr inbounds float, float* %1, i64 %12
  %219 = ptrtoint float* %218 to i64
  %220 = sub i64 %215, %219
  %221 = ashr exact i64 %220, 2
  %222 = getelementptr inbounds float, float* %1, i64 %221
  %223 = icmp ult float* %222, %19
  br i1 %223, label %224, label %337

224:                                              ; preds = %214
  %225 = sub nsw i64 0, %221
  %226 = getelementptr float, float* %19, i64 %225
  %227 = bitcast float* %226 to i8*
  %228 = xor i64 %7, -1
  %229 = getelementptr i8, i8* %227, i64 %228
  %230 = ptrtoint i8* %229 to i64
  %231 = lshr i64 %230, 2
  %232 = add nuw nsw i64 %231, 1
  %233 = icmp ult i64 %232, 8
  br i1 %233, label %234, label %237

234:                                              ; preds = %332, %237, %224
  %235 = phi float* [ %216, %237 ], [ %216, %224 ], [ %255, %332 ]
  %236 = phi float* [ %222, %237 ], [ %222, %224 ], [ %256, %332 ]
  br label %345

237:                                              ; preds = %224
  %238 = sub nsw i64 0, %221
  %239 = getelementptr float, float* %19, i64 %238
  %240 = bitcast float* %239 to i8*
  %241 = xor i64 %7, -1
  %242 = getelementptr i8, i8* %240, i64 %241
  %243 = ptrtoint i8* %242 to i64
  %244 = lshr i64 %243, 2
  %245 = add nuw nsw i64 %244, 1
  %246 = getelementptr float, float* %216, i64 %245
  %247 = add nsw i64 %221, %244
  %248 = add i64 %247, 1
  %249 = getelementptr float, float* %1, i64 %248
  %250 = icmp ult float* %216, %249
  %251 = icmp ult float* %222, %246
  %252 = and i1 %250, %251
  br i1 %252, label %234, label %253

253:                                              ; preds = %237
  %254 = and i64 %232, 9223372036854775800
  %255 = getelementptr float, float* %216, i64 %254
  %256 = getelementptr float, float* %222, i64 %254
  %257 = add nsw i64 %254, -8
  %258 = lshr exact i64 %257, 3
  %259 = add nuw nsw i64 %258, 1
  %260 = and i64 %259, 3
  %261 = icmp ult i64 %257, 24
  br i1 %261, label %313, label %262

262:                                              ; preds = %253
  %263 = sub nsw i64 %259, %260
  br label %264

264:                                              ; preds = %264, %262
  %265 = phi i64 [ 0, %262 ], [ %310, %264 ]
  %266 = phi i64 [ %263, %262 ], [ %311, %264 ]
  %267 = getelementptr float, float* %216, i64 %265
  %268 = getelementptr float, float* %222, i64 %265
  %269 = bitcast float* %268 to <4 x i32>*
  %270 = load <4 x i32>, <4 x i32>* %269, align 4, !alias.scope !13
  %271 = getelementptr float, float* %268, i64 4
  %272 = bitcast float* %271 to <4 x i32>*
  %273 = load <4 x i32>, <4 x i32>* %272, align 4, !alias.scope !13
  %274 = bitcast float* %267 to <4 x i32>*
  store <4 x i32> %270, <4 x i32>* %274, align 4, !alias.scope !16, !noalias !13
  %275 = getelementptr float, float* %267, i64 4
  %276 = bitcast float* %275 to <4 x i32>*
  store <4 x i32> %273, <4 x i32>* %276, align 4, !alias.scope !16, !noalias !13
  %277 = or i64 %265, 8
  %278 = getelementptr float, float* %216, i64 %277
  %279 = getelementptr float, float* %222, i64 %277
  %280 = bitcast float* %279 to <4 x i32>*
  %281 = load <4 x i32>, <4 x i32>* %280, align 4, !alias.scope !13
  %282 = getelementptr float, float* %279, i64 4
  %283 = bitcast float* %282 to <4 x i32>*
  %284 = load <4 x i32>, <4 x i32>* %283, align 4, !alias.scope !13
  %285 = bitcast float* %278 to <4 x i32>*
  store <4 x i32> %281, <4 x i32>* %285, align 4, !alias.scope !16, !noalias !13
  %286 = getelementptr float, float* %278, i64 4
  %287 = bitcast float* %286 to <4 x i32>*
  store <4 x i32> %284, <4 x i32>* %287, align 4, !alias.scope !16, !noalias !13
  %288 = or i64 %265, 16
  %289 = getelementptr float, float* %216, i64 %288
  %290 = getelementptr float, float* %222, i64 %288
  %291 = bitcast float* %290 to <4 x i32>*
  %292 = load <4 x i32>, <4 x i32>* %291, align 4, !alias.scope !13
  %293 = getelementptr float, float* %290, i64 4
  %294 = bitcast float* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 4, !alias.scope !13
  %296 = bitcast float* %289 to <4 x i32>*
  store <4 x i32> %292, <4 x i32>* %296, align 4, !alias.scope !16, !noalias !13
  %297 = getelementptr float, float* %289, i64 4
  %298 = bitcast float* %297 to <4 x i32>*
  store <4 x i32> %295, <4 x i32>* %298, align 4, !alias.scope !16, !noalias !13
  %299 = or i64 %265, 24
  %300 = getelementptr float, float* %216, i64 %299
  %301 = getelementptr float, float* %222, i64 %299
  %302 = bitcast float* %301 to <4 x i32>*
  %303 = load <4 x i32>, <4 x i32>* %302, align 4, !alias.scope !13
  %304 = getelementptr float, float* %301, i64 4
  %305 = bitcast float* %304 to <4 x i32>*
  %306 = load <4 x i32>, <4 x i32>* %305, align 4, !alias.scope !13
  %307 = bitcast float* %300 to <4 x i32>*
  store <4 x i32> %303, <4 x i32>* %307, align 4, !alias.scope !16, !noalias !13
  %308 = getelementptr float, float* %300, i64 4
  %309 = bitcast float* %308 to <4 x i32>*
  store <4 x i32> %306, <4 x i32>* %309, align 4, !alias.scope !16, !noalias !13
  %310 = add i64 %265, 32
  %311 = add i64 %266, -4
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %313, label %264, !llvm.loop !18

313:                                              ; preds = %264, %253
  %314 = phi i64 [ 0, %253 ], [ %310, %264 ]
  %315 = icmp eq i64 %260, 0
  br i1 %315, label %332, label %316

316:                                              ; preds = %313, %316
  %317 = phi i64 [ %329, %316 ], [ %314, %313 ]
  %318 = phi i64 [ %330, %316 ], [ %260, %313 ]
  %319 = getelementptr float, float* %216, i64 %317
  %320 = getelementptr float, float* %222, i64 %317
  %321 = bitcast float* %320 to <4 x i32>*
  %322 = load <4 x i32>, <4 x i32>* %321, align 4, !alias.scope !13
  %323 = getelementptr float, float* %320, i64 4
  %324 = bitcast float* %323 to <4 x i32>*
  %325 = load <4 x i32>, <4 x i32>* %324, align 4, !alias.scope !13
  %326 = bitcast float* %319 to <4 x i32>*
  store <4 x i32> %322, <4 x i32>* %326, align 4, !alias.scope !16, !noalias !13
  %327 = getelementptr float, float* %319, i64 4
  %328 = bitcast float* %327 to <4 x i32>*
  store <4 x i32> %325, <4 x i32>* %328, align 4, !alias.scope !16, !noalias !13
  %329 = add i64 %317, 8
  %330 = add i64 %318, -1
  %331 = icmp eq i64 %330, 0
  br i1 %331, label %332, label %316, !llvm.loop !19

332:                                              ; preds = %316, %313
  %333 = icmp eq i64 %232, %254
  br i1 %333, label %334, label %234

334:                                              ; preds = %345, %332
  %335 = phi float* [ %255, %332 ], [ %352, %345 ]
  %336 = ptrtoint float* %335 to i64
  br label %337

337:                                              ; preds = %334, %214
  %338 = phi i64 [ %336, %334 ], [ %215, %214 ]
  store i64 %338, i64* %24, align 8
  %339 = icmp eq i64 %220, 0
  br i1 %339, label %354, label %340

340:                                              ; preds = %337
  %341 = sub nsw i64 0, %221
  %342 = getelementptr inbounds float, float* %216, i64 %341
  %343 = bitcast float* %342 to i8*
  %344 = bitcast float* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %343, i8* align 4 %344, i64 %220, i1 false) #7
  br label %354

345:                                              ; preds = %234, %345
  %346 = phi float* [ %352, %345 ], [ %235, %234 ]
  %347 = phi float* [ %351, %345 ], [ %236, %234 ]
  %348 = bitcast float* %347 to i32*
  %349 = load i32, i32* %348, align 4
  %350 = bitcast float* %346 to i32*
  store i32 %349, i32* %350, align 4
  %351 = getelementptr inbounds float, float* %347, i64 1
  %352 = getelementptr inbounds float, float* %346, i64 1
  %353 = icmp ult float* %351, %19
  br i1 %353, label %345, label %334, !llvm.loop !20

354:                                              ; preds = %337, %340
  %355 = ptrtoint float* %217 to i64
  %356 = sub i64 %355, %8
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %772, label %358

358:                                              ; preds = %354
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %5, i64 %356, i1 false) #7
  br label %772

359:                                              ; preds = %14
  %360 = bitcast %"class.std::__1::vector.2"* %0 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = sub i64 %20, %361
  %363 = ashr exact i64 %362, 2
  %364 = add nsw i64 %363, %12
  %365 = icmp ugt i64 %364, 4611686018427387903
  br i1 %365, label %366, label %368

366:                                              ; preds = %359
  %367 = bitcast %"class.std::__1::vector.2"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %367) #8
  unreachable

368:                                              ; preds = %359
  %369 = sub i64 %17, %361
  %370 = ashr exact i64 %369, 2
  %371 = icmp ult i64 %370, 2305843009213693951
  br i1 %371, label %375, label %372

372:                                              ; preds = %368
  %373 = sub i64 %7, %361
  %374 = ashr exact i64 %373, 2
  br label %385

375:                                              ; preds = %368
  %376 = ashr exact i64 %369, 1
  %377 = icmp ult i64 %376, %364
  %378 = select i1 %377, i64 %364, i64 %376
  %379 = sub i64 %7, %361
  %380 = ashr exact i64 %379, 2
  %381 = icmp eq i64 %378, 0
  br i1 %381, label %391, label %382

382:                                              ; preds = %375
  %383 = icmp ugt i64 %378, 4611686018427387903
  br i1 %383, label %384, label %385

384:                                              ; preds = %382
  tail call void @abort() #8
  unreachable

385:                                              ; preds = %372, %382
  %386 = phi i64 [ 4611686018427387903, %372 ], [ %378, %382 ]
  %387 = phi i64 [ %374, %372 ], [ %380, %382 ]
  %388 = shl i64 %386, 2
  %389 = tail call i8* @_Znwm(i64 %388) #9
  %390 = bitcast i8* %389 to float*
  br label %391

391:                                              ; preds = %385, %375
  %392 = phi i64 [ %387, %385 ], [ %380, %375 ]
  %393 = phi i64 [ %386, %385 ], [ 0, %375 ]
  %394 = phi float* [ %390, %385 ], [ null, %375 ]
  %395 = getelementptr inbounds float, float* %394, i64 %392
  %396 = getelementptr inbounds float, float* %394, i64 %393
  %397 = ptrtoint float* %396 to i64
  %398 = getelementptr inbounds float, float* %395, i64 %12
  %399 = add i64 %11, -4
  %400 = lshr i64 %399, 2
  %401 = add nuw nsw i64 %400, 1
  %402 = icmp ult i64 %401, 8
  br i1 %402, label %496, label %403

403:                                              ; preds = %391
  %404 = add i64 %11, -4
  %405 = lshr i64 %404, 2
  %406 = add nsw i64 %392, %405
  %407 = add i64 %406, 1
  %408 = getelementptr float, float* %394, i64 %407
  %409 = add nuw nsw i64 %405, 1
  %410 = getelementptr float, float* %2, i64 %409
  %411 = icmp ult float* %395, %410
  %412 = icmp ugt float* %408, %2
  %413 = and i1 %411, %412
  br i1 %413, label %496, label %414

414:                                              ; preds = %403
  %415 = and i64 %401, 9223372036854775800
  %416 = getelementptr float, float* %395, i64 %415
  %417 = getelementptr float, float* %395, i64 %415
  %418 = getelementptr float, float* %2, i64 %415
  %419 = add nsw i64 %415, -8
  %420 = lshr exact i64 %419, 3
  %421 = add nuw nsw i64 %420, 1
  %422 = and i64 %421, 3
  %423 = icmp ult i64 %419, 24
  br i1 %423, label %475, label %424

424:                                              ; preds = %414
  %425 = sub nsw i64 %421, %422
  br label %426

426:                                              ; preds = %426, %424
  %427 = phi i64 [ 0, %424 ], [ %472, %426 ]
  %428 = phi i64 [ %425, %424 ], [ %473, %426 ]
  %429 = getelementptr float, float* %395, i64 %427
  %430 = getelementptr float, float* %2, i64 %427
  %431 = bitcast float* %430 to <4 x i32>*
  %432 = load <4 x i32>, <4 x i32>* %431, align 4, !alias.scope !21
  %433 = getelementptr float, float* %430, i64 4
  %434 = bitcast float* %433 to <4 x i32>*
  %435 = load <4 x i32>, <4 x i32>* %434, align 4, !alias.scope !21
  %436 = bitcast float* %429 to <4 x i32>*
  store <4 x i32> %432, <4 x i32>* %436, align 4, !alias.scope !24, !noalias !21
  %437 = getelementptr float, float* %429, i64 4
  %438 = bitcast float* %437 to <4 x i32>*
  store <4 x i32> %435, <4 x i32>* %438, align 4, !alias.scope !24, !noalias !21
  %439 = or i64 %427, 8
  %440 = getelementptr float, float* %395, i64 %439
  %441 = getelementptr float, float* %2, i64 %439
  %442 = bitcast float* %441 to <4 x i32>*
  %443 = load <4 x i32>, <4 x i32>* %442, align 4, !alias.scope !21
  %444 = getelementptr float, float* %441, i64 4
  %445 = bitcast float* %444 to <4 x i32>*
  %446 = load <4 x i32>, <4 x i32>* %445, align 4, !alias.scope !21
  %447 = bitcast float* %440 to <4 x i32>*
  store <4 x i32> %443, <4 x i32>* %447, align 4, !alias.scope !24, !noalias !21
  %448 = getelementptr float, float* %440, i64 4
  %449 = bitcast float* %448 to <4 x i32>*
  store <4 x i32> %446, <4 x i32>* %449, align 4, !alias.scope !24, !noalias !21
  %450 = or i64 %427, 16
  %451 = getelementptr float, float* %395, i64 %450
  %452 = getelementptr float, float* %2, i64 %450
  %453 = bitcast float* %452 to <4 x i32>*
  %454 = load <4 x i32>, <4 x i32>* %453, align 4, !alias.scope !21
  %455 = getelementptr float, float* %452, i64 4
  %456 = bitcast float* %455 to <4 x i32>*
  %457 = load <4 x i32>, <4 x i32>* %456, align 4, !alias.scope !21
  %458 = bitcast float* %451 to <4 x i32>*
  store <4 x i32> %454, <4 x i32>* %458, align 4, !alias.scope !24, !noalias !21
  %459 = getelementptr float, float* %451, i64 4
  %460 = bitcast float* %459 to <4 x i32>*
  store <4 x i32> %457, <4 x i32>* %460, align 4, !alias.scope !24, !noalias !21
  %461 = or i64 %427, 24
  %462 = getelementptr float, float* %395, i64 %461
  %463 = getelementptr float, float* %2, i64 %461
  %464 = bitcast float* %463 to <4 x i32>*
  %465 = load <4 x i32>, <4 x i32>* %464, align 4, !alias.scope !21
  %466 = getelementptr float, float* %463, i64 4
  %467 = bitcast float* %466 to <4 x i32>*
  %468 = load <4 x i32>, <4 x i32>* %467, align 4, !alias.scope !21
  %469 = bitcast float* %462 to <4 x i32>*
  store <4 x i32> %465, <4 x i32>* %469, align 4, !alias.scope !24, !noalias !21
  %470 = getelementptr float, float* %462, i64 4
  %471 = bitcast float* %470 to <4 x i32>*
  store <4 x i32> %468, <4 x i32>* %471, align 4, !alias.scope !24, !noalias !21
  %472 = add i64 %427, 32
  %473 = add i64 %428, -4
  %474 = icmp eq i64 %473, 0
  br i1 %474, label %475, label %426, !llvm.loop !26

475:                                              ; preds = %426, %414
  %476 = phi i64 [ 0, %414 ], [ %472, %426 ]
  %477 = icmp eq i64 %422, 0
  br i1 %477, label %494, label %478

478:                                              ; preds = %475, %478
  %479 = phi i64 [ %491, %478 ], [ %476, %475 ]
  %480 = phi i64 [ %492, %478 ], [ %422, %475 ]
  %481 = getelementptr float, float* %395, i64 %479
  %482 = getelementptr float, float* %2, i64 %479
  %483 = bitcast float* %482 to <4 x i32>*
  %484 = load <4 x i32>, <4 x i32>* %483, align 4, !alias.scope !21
  %485 = getelementptr float, float* %482, i64 4
  %486 = bitcast float* %485 to <4 x i32>*
  %487 = load <4 x i32>, <4 x i32>* %486, align 4, !alias.scope !21
  %488 = bitcast float* %481 to <4 x i32>*
  store <4 x i32> %484, <4 x i32>* %488, align 4, !alias.scope !24, !noalias !21
  %489 = getelementptr float, float* %481, i64 4
  %490 = bitcast float* %489 to <4 x i32>*
  store <4 x i32> %487, <4 x i32>* %490, align 4, !alias.scope !24, !noalias !21
  %491 = add i64 %479, 8
  %492 = add i64 %480, -1
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %494, label %478, !llvm.loop !27

494:                                              ; preds = %478, %475
  %495 = icmp eq i64 %401, %415
  br i1 %495, label %572, label %496

496:                                              ; preds = %494, %403, %391
  %497 = phi float* [ %395, %403 ], [ %395, %391 ], [ %416, %494 ]
  %498 = phi float* [ %395, %403 ], [ %395, %391 ], [ %417, %494 ]
  %499 = phi float* [ %2, %403 ], [ %2, %391 ], [ %418, %494 ]
  %500 = ptrtoint float* %497 to i64
  %501 = add nsw i64 %392, %12
  %502 = add nsw i64 %501, -1
  %503 = getelementptr float, float* %394, i64 %502
  %504 = ptrtoint float* %503 to i64
  %505 = sub i64 %504, %500
  %506 = lshr i64 %505, 2
  %507 = add nuw nsw i64 %506, 1
  %508 = and i64 %507, 7
  %509 = icmp eq i64 %508, 0
  br i1 %509, label %522, label %510

510:                                              ; preds = %496, %510
  %511 = phi float* [ %518, %510 ], [ %497, %496 ]
  %512 = phi float* [ %518, %510 ], [ %498, %496 ]
  %513 = phi float* [ %519, %510 ], [ %499, %496 ]
  %514 = phi i64 [ %520, %510 ], [ %508, %496 ]
  %515 = bitcast float* %513 to i32*
  %516 = load i32, i32* %515, align 4
  %517 = bitcast float* %512 to i32*
  store i32 %516, i32* %517, align 4
  %518 = getelementptr inbounds float, float* %511, i64 1
  %519 = getelementptr inbounds float, float* %513, i64 1
  %520 = add i64 %514, -1
  %521 = icmp eq i64 %520, 0
  br i1 %521, label %522, label %510, !llvm.loop !28

522:                                              ; preds = %510, %496
  %523 = phi float* [ %497, %496 ], [ %518, %510 ]
  %524 = phi float* [ %498, %496 ], [ %518, %510 ]
  %525 = phi float* [ %499, %496 ], [ %519, %510 ]
  %526 = icmp ult i64 %505, 28
  br i1 %526, label %572, label %527

527:                                              ; preds = %522, %527
  %528 = phi float* [ %569, %527 ], [ %523, %522 ]
  %529 = phi float* [ %569, %527 ], [ %524, %522 ]
  %530 = phi float* [ %570, %527 ], [ %525, %522 ]
  %531 = bitcast float* %530 to i32*
  %532 = load i32, i32* %531, align 4
  %533 = bitcast float* %529 to i32*
  store i32 %532, i32* %533, align 4
  %534 = getelementptr inbounds float, float* %528, i64 1
  %535 = getelementptr inbounds float, float* %530, i64 1
  %536 = bitcast float* %535 to i32*
  %537 = load i32, i32* %536, align 4
  %538 = bitcast float* %534 to i32*
  store i32 %537, i32* %538, align 4
  %539 = getelementptr inbounds float, float* %528, i64 2
  %540 = getelementptr inbounds float, float* %530, i64 2
  %541 = bitcast float* %540 to i32*
  %542 = load i32, i32* %541, align 4
  %543 = bitcast float* %539 to i32*
  store i32 %542, i32* %543, align 4
  %544 = getelementptr inbounds float, float* %528, i64 3
  %545 = getelementptr inbounds float, float* %530, i64 3
  %546 = bitcast float* %545 to i32*
  %547 = load i32, i32* %546, align 4
  %548 = bitcast float* %544 to i32*
  store i32 %547, i32* %548, align 4
  %549 = getelementptr inbounds float, float* %528, i64 4
  %550 = getelementptr inbounds float, float* %530, i64 4
  %551 = bitcast float* %550 to i32*
  %552 = load i32, i32* %551, align 4
  %553 = bitcast float* %549 to i32*
  store i32 %552, i32* %553, align 4
  %554 = getelementptr inbounds float, float* %528, i64 5
  %555 = getelementptr inbounds float, float* %530, i64 5
  %556 = bitcast float* %555 to i32*
  %557 = load i32, i32* %556, align 4
  %558 = bitcast float* %554 to i32*
  store i32 %557, i32* %558, align 4
  %559 = getelementptr inbounds float, float* %528, i64 6
  %560 = getelementptr inbounds float, float* %530, i64 6
  %561 = bitcast float* %560 to i32*
  %562 = load i32, i32* %561, align 4
  %563 = bitcast float* %559 to i32*
  store i32 %562, i32* %563, align 4
  %564 = getelementptr inbounds float, float* %528, i64 7
  %565 = getelementptr inbounds float, float* %530, i64 7
  %566 = bitcast float* %565 to i32*
  %567 = load i32, i32* %566, align 4
  %568 = bitcast float* %564 to i32*
  store i32 %567, i32* %568, align 4
  %569 = getelementptr inbounds float, float* %528, i64 8
  %570 = getelementptr inbounds float, float* %530, i64 8
  %571 = icmp eq float* %398, %569
  br i1 %571, label %572, label %527, !llvm.loop !29

572:                                              ; preds = %522, %527, %494
  %573 = load float*, float** %9, align 8
  %574 = ptrtoint float* %573 to i64
  %575 = sub i64 %7, %574
  %576 = ashr exact i64 %575, 2
  %577 = sub nsw i64 0, %576
  %578 = getelementptr inbounds float, float* %395, i64 %577
  %579 = ptrtoint float* %578 to i64
  %580 = icmp sgt i64 %575, 0
  br i1 %580, label %581, label %584

581:                                              ; preds = %572
  %582 = bitcast float* %578 to i8*
  %583 = bitcast float* %573 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %582, i8* align 4 %583, i64 %575, i1 false) #7
  br label %584

584:                                              ; preds = %581, %572
  %585 = load float*, float** %18, align 8
  %586 = icmp eq float* %585, %1
  br i1 %586, label %765, label %587

587:                                              ; preds = %584
  %588 = getelementptr float, float* %585, i64 -1
  %589 = ptrtoint float* %588 to i64
  %590 = sub i64 %589, %7
  %591 = lshr i64 %590, 2
  %592 = add nuw nsw i64 %591, 1
  %593 = icmp ult i64 %592, 8
  br i1 %593, label %690, label %594

594:                                              ; preds = %587
  %595 = add nsw i64 %392, %12
  %596 = getelementptr float, float* %585, i64 -1
  %597 = ptrtoint float* %596 to i64
  %598 = sub i64 %597, %7
  %599 = lshr i64 %598, 2
  %600 = add nsw i64 %595, %599
  %601 = add i64 %600, 1
  %602 = getelementptr float, float* %394, i64 %601
  %603 = add nuw nsw i64 %599, 1
  %604 = getelementptr float, float* %1, i64 %603
  %605 = icmp ult float* %398, %604
  %606 = icmp ugt float* %602, %1
  %607 = and i1 %605, %606
  br i1 %607, label %690, label %608

608:                                              ; preds = %594
  %609 = and i64 %592, 9223372036854775800
  %610 = getelementptr float, float* %398, i64 %609
  %611 = getelementptr float, float* %398, i64 %609
  %612 = getelementptr float, float* %1, i64 %609
  %613 = add nsw i64 %609, -8
  %614 = lshr exact i64 %613, 3
  %615 = add nuw nsw i64 %614, 1
  %616 = and i64 %615, 3
  %617 = icmp ult i64 %613, 24
  br i1 %617, label %669, label %618

618:                                              ; preds = %608
  %619 = sub nsw i64 %615, %616
  br label %620

620:                                              ; preds = %620, %618
  %621 = phi i64 [ 0, %618 ], [ %666, %620 ]
  %622 = phi i64 [ %619, %618 ], [ %667, %620 ]
  %623 = getelementptr float, float* %398, i64 %621
  %624 = getelementptr float, float* %1, i64 %621
  %625 = bitcast float* %624 to <4 x i32>*
  %626 = load <4 x i32>, <4 x i32>* %625, align 4, !alias.scope !30
  %627 = getelementptr float, float* %624, i64 4
  %628 = bitcast float* %627 to <4 x i32>*
  %629 = load <4 x i32>, <4 x i32>* %628, align 4, !alias.scope !30
  %630 = bitcast float* %623 to <4 x i32>*
  store <4 x i32> %626, <4 x i32>* %630, align 4, !alias.scope !33, !noalias !30
  %631 = getelementptr float, float* %623, i64 4
  %632 = bitcast float* %631 to <4 x i32>*
  store <4 x i32> %629, <4 x i32>* %632, align 4, !alias.scope !33, !noalias !30
  %633 = or i64 %621, 8
  %634 = getelementptr float, float* %398, i64 %633
  %635 = getelementptr float, float* %1, i64 %633
  %636 = bitcast float* %635 to <4 x i32>*
  %637 = load <4 x i32>, <4 x i32>* %636, align 4, !alias.scope !30
  %638 = getelementptr float, float* %635, i64 4
  %639 = bitcast float* %638 to <4 x i32>*
  %640 = load <4 x i32>, <4 x i32>* %639, align 4, !alias.scope !30
  %641 = bitcast float* %634 to <4 x i32>*
  store <4 x i32> %637, <4 x i32>* %641, align 4, !alias.scope !33, !noalias !30
  %642 = getelementptr float, float* %634, i64 4
  %643 = bitcast float* %642 to <4 x i32>*
  store <4 x i32> %640, <4 x i32>* %643, align 4, !alias.scope !33, !noalias !30
  %644 = or i64 %621, 16
  %645 = getelementptr float, float* %398, i64 %644
  %646 = getelementptr float, float* %1, i64 %644
  %647 = bitcast float* %646 to <4 x i32>*
  %648 = load <4 x i32>, <4 x i32>* %647, align 4, !alias.scope !30
  %649 = getelementptr float, float* %646, i64 4
  %650 = bitcast float* %649 to <4 x i32>*
  %651 = load <4 x i32>, <4 x i32>* %650, align 4, !alias.scope !30
  %652 = bitcast float* %645 to <4 x i32>*
  store <4 x i32> %648, <4 x i32>* %652, align 4, !alias.scope !33, !noalias !30
  %653 = getelementptr float, float* %645, i64 4
  %654 = bitcast float* %653 to <4 x i32>*
  store <4 x i32> %651, <4 x i32>* %654, align 4, !alias.scope !33, !noalias !30
  %655 = or i64 %621, 24
  %656 = getelementptr float, float* %398, i64 %655
  %657 = getelementptr float, float* %1, i64 %655
  %658 = bitcast float* %657 to <4 x i32>*
  %659 = load <4 x i32>, <4 x i32>* %658, align 4, !alias.scope !30
  %660 = getelementptr float, float* %657, i64 4
  %661 = bitcast float* %660 to <4 x i32>*
  %662 = load <4 x i32>, <4 x i32>* %661, align 4, !alias.scope !30
  %663 = bitcast float* %656 to <4 x i32>*
  store <4 x i32> %659, <4 x i32>* %663, align 4, !alias.scope !33, !noalias !30
  %664 = getelementptr float, float* %656, i64 4
  %665 = bitcast float* %664 to <4 x i32>*
  store <4 x i32> %662, <4 x i32>* %665, align 4, !alias.scope !33, !noalias !30
  %666 = add i64 %621, 32
  %667 = add i64 %622, -4
  %668 = icmp eq i64 %667, 0
  br i1 %668, label %669, label %620, !llvm.loop !35

669:                                              ; preds = %620, %608
  %670 = phi i64 [ 0, %608 ], [ %666, %620 ]
  %671 = icmp eq i64 %616, 0
  br i1 %671, label %688, label %672

672:                                              ; preds = %669, %672
  %673 = phi i64 [ %685, %672 ], [ %670, %669 ]
  %674 = phi i64 [ %686, %672 ], [ %616, %669 ]
  %675 = getelementptr float, float* %398, i64 %673
  %676 = getelementptr float, float* %1, i64 %673
  %677 = bitcast float* %676 to <4 x i32>*
  %678 = load <4 x i32>, <4 x i32>* %677, align 4, !alias.scope !30
  %679 = getelementptr float, float* %676, i64 4
  %680 = bitcast float* %679 to <4 x i32>*
  %681 = load <4 x i32>, <4 x i32>* %680, align 4, !alias.scope !30
  %682 = bitcast float* %675 to <4 x i32>*
  store <4 x i32> %678, <4 x i32>* %682, align 4, !alias.scope !33, !noalias !30
  %683 = getelementptr float, float* %675, i64 4
  %684 = bitcast float* %683 to <4 x i32>*
  store <4 x i32> %681, <4 x i32>* %684, align 4, !alias.scope !33, !noalias !30
  %685 = add i64 %673, 8
  %686 = add i64 %674, -1
  %687 = icmp eq i64 %686, 0
  br i1 %687, label %688, label %672, !llvm.loop !36

688:                                              ; preds = %672, %669
  %689 = icmp eq i64 %592, %609
  br i1 %689, label %765, label %690

690:                                              ; preds = %688, %594, %587
  %691 = phi float* [ %398, %594 ], [ %398, %587 ], [ %610, %688 ]
  %692 = phi float* [ %398, %594 ], [ %398, %587 ], [ %611, %688 ]
  %693 = phi float* [ %1, %594 ], [ %1, %587 ], [ %612, %688 ]
  %694 = ptrtoint float* %693 to i64
  %695 = getelementptr float, float* %585, i64 -1
  %696 = ptrtoint float* %695 to i64
  %697 = sub i64 %696, %694
  %698 = lshr i64 %697, 2
  %699 = add nuw nsw i64 %698, 1
  %700 = and i64 %699, 7
  %701 = icmp eq i64 %700, 0
  br i1 %701, label %714, label %702

702:                                              ; preds = %690, %702
  %703 = phi float* [ %711, %702 ], [ %691, %690 ]
  %704 = phi float* [ %711, %702 ], [ %692, %690 ]
  %705 = phi float* [ %710, %702 ], [ %693, %690 ]
  %706 = phi i64 [ %712, %702 ], [ %700, %690 ]
  %707 = bitcast float* %704 to i32*
  %708 = bitcast float* %705 to i32*
  %709 = load i32, i32* %708, align 4
  store i32 %709, i32* %707, align 4
  %710 = getelementptr inbounds float, float* %705, i64 1
  %711 = getelementptr inbounds float, float* %703, i64 1
  %712 = add i64 %706, -1
  %713 = icmp eq i64 %712, 0
  br i1 %713, label %714, label %702, !llvm.loop !37

714:                                              ; preds = %702, %690
  %715 = phi float* [ undef, %690 ], [ %711, %702 ]
  %716 = phi float* [ %691, %690 ], [ %711, %702 ]
  %717 = phi float* [ %692, %690 ], [ %711, %702 ]
  %718 = phi float* [ %693, %690 ], [ %710, %702 ]
  %719 = icmp ult i64 %697, 28
  br i1 %719, label %765, label %720

720:                                              ; preds = %714, %720
  %721 = phi float* [ %763, %720 ], [ %716, %714 ]
  %722 = phi float* [ %763, %720 ], [ %717, %714 ]
  %723 = phi float* [ %762, %720 ], [ %718, %714 ]
  %724 = bitcast float* %722 to i32*
  %725 = bitcast float* %723 to i32*
  %726 = load i32, i32* %725, align 4
  store i32 %726, i32* %724, align 4
  %727 = getelementptr inbounds float, float* %723, i64 1
  %728 = getelementptr inbounds float, float* %721, i64 1
  %729 = bitcast float* %728 to i32*
  %730 = bitcast float* %727 to i32*
  %731 = load i32, i32* %730, align 4
  store i32 %731, i32* %729, align 4
  %732 = getelementptr inbounds float, float* %723, i64 2
  %733 = getelementptr inbounds float, float* %721, i64 2
  %734 = bitcast float* %733 to i32*
  %735 = bitcast float* %732 to i32*
  %736 = load i32, i32* %735, align 4
  store i32 %736, i32* %734, align 4
  %737 = getelementptr inbounds float, float* %723, i64 3
  %738 = getelementptr inbounds float, float* %721, i64 3
  %739 = bitcast float* %738 to i32*
  %740 = bitcast float* %737 to i32*
  %741 = load i32, i32* %740, align 4
  store i32 %741, i32* %739, align 4
  %742 = getelementptr inbounds float, float* %723, i64 4
  %743 = getelementptr inbounds float, float* %721, i64 4
  %744 = bitcast float* %743 to i32*
  %745 = bitcast float* %742 to i32*
  %746 = load i32, i32* %745, align 4
  store i32 %746, i32* %744, align 4
  %747 = getelementptr inbounds float, float* %723, i64 5
  %748 = getelementptr inbounds float, float* %721, i64 5
  %749 = bitcast float* %748 to i32*
  %750 = bitcast float* %747 to i32*
  %751 = load i32, i32* %750, align 4
  store i32 %751, i32* %749, align 4
  %752 = getelementptr inbounds float, float* %723, i64 6
  %753 = getelementptr inbounds float, float* %721, i64 6
  %754 = bitcast float* %753 to i32*
  %755 = bitcast float* %752 to i32*
  %756 = load i32, i32* %755, align 4
  store i32 %756, i32* %754, align 4
  %757 = getelementptr inbounds float, float* %723, i64 7
  %758 = getelementptr inbounds float, float* %721, i64 7
  %759 = bitcast float* %758 to i32*
  %760 = bitcast float* %757 to i32*
  %761 = load i32, i32* %760, align 4
  store i32 %761, i32* %759, align 4
  %762 = getelementptr inbounds float, float* %723, i64 8
  %763 = getelementptr inbounds float, float* %721, i64 8
  %764 = icmp eq float* %762, %585
  br i1 %764, label %765, label %720, !llvm.loop !38

765:                                              ; preds = %714, %720, %688, %584
  %766 = phi float* [ %398, %584 ], [ %610, %688 ], [ %715, %714 ], [ %763, %720 ]
  %767 = ptrtoint float* %766 to i64
  %768 = load float*, float** %9, align 8
  store i64 %579, i64* %360, align 8
  store i64 %767, i64* %24, align 8
  store i64 %397, i64* %16, align 8
  %769 = icmp eq float* %768, null
  br i1 %769, label %772, label %770

770:                                              ; preds = %765
  %771 = bitcast float* %768 to i8*
  tail call void @_ZdlPv(i8* %771) #9
  br label %772

772:                                              ; preds = %770, %765, %209, %354, %358, %4
  %773 = phi float* [ %1, %4 ], [ %1, %358 ], [ %1, %354 ], [ %1, %209 ], [ %395, %765 ], [ %395, %770 ]
  ret float* %773
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float* @_ZNSt3__16vectorIfNS_9allocatorIfEEE6insertIPfEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKfEES7_S7_(%"class.std::__1::vector.2"*, float*, float*, float*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast float* %2 to i8*
  %6 = bitcast float* %1 to i8*
  %7 = ptrtoint float* %1 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 0
  %9 = ptrtoint float* %3 to i64
  %10 = ptrtoint float* %2 to i64
  %11 = sub i64 %9, %10
  %12 = ashr exact i64 %11, 2
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %603

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast float** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 1
  %19 = load float*, float** %18, align 8
  %20 = ptrtoint float* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast float** %18 to i64*
  br i1 %23, label %190, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 2
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %45

29:                                               ; preds = %25
  %30 = getelementptr inbounds float, float* %2, i64 %27
  %31 = ptrtoint float* %30 to i64
  %32 = sub i64 %9, %31
  %33 = icmp sgt i64 %32, 0
  br i1 %33, label %34, label %40

34:                                               ; preds = %29
  %35 = lshr exact i64 %32, 2
  %36 = bitcast float* %19 to i8*
  %37 = bitcast float* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 %32, i1 false) #7
  %38 = getelementptr inbounds float, float* %19, i64 %35
  %39 = ptrtoint float* %38 to i64
  br label %40

40:                                               ; preds = %34, %29
  %41 = phi i64 [ %39, %34 ], [ %20, %29 ]
  store i64 %41, i64* %24, align 8
  %42 = icmp sgt i64 %26, 0
  br i1 %42, label %43, label %603

43:                                               ; preds = %40
  %44 = inttoptr i64 %41 to float*
  br label %45

45:                                               ; preds = %43, %25
  %46 = phi i64 [ %41, %43 ], [ %20, %25 ]
  %47 = phi float* [ %44, %43 ], [ %19, %25 ]
  %48 = phi float* [ %30, %43 ], [ %3, %25 ]
  %49 = getelementptr inbounds float, float* %1, i64 %12
  %50 = ptrtoint float* %49 to i64
  %51 = sub i64 %46, %50
  %52 = ashr exact i64 %51, 2
  %53 = getelementptr inbounds float, float* %1, i64 %52
  %54 = icmp ult float* %53, %19
  br i1 %54, label %55, label %168

55:                                               ; preds = %45
  %56 = sub nsw i64 0, %52
  %57 = getelementptr float, float* %19, i64 %56
  %58 = bitcast float* %57 to i8*
  %59 = xor i64 %7, -1
  %60 = getelementptr i8, i8* %58, i64 %59
  %61 = ptrtoint i8* %60 to i64
  %62 = lshr i64 %61, 2
  %63 = add nuw nsw i64 %62, 1
  %64 = icmp ult i64 %63, 8
  br i1 %64, label %65, label %68

65:                                               ; preds = %163, %68, %55
  %66 = phi float* [ %47, %68 ], [ %47, %55 ], [ %86, %163 ]
  %67 = phi float* [ %53, %68 ], [ %53, %55 ], [ %87, %163 ]
  br label %176

68:                                               ; preds = %55
  %69 = sub nsw i64 0, %52
  %70 = getelementptr float, float* %19, i64 %69
  %71 = bitcast float* %70 to i8*
  %72 = xor i64 %7, -1
  %73 = getelementptr i8, i8* %71, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = lshr i64 %74, 2
  %76 = add nuw nsw i64 %75, 1
  %77 = getelementptr float, float* %47, i64 %76
  %78 = add nsw i64 %52, %75
  %79 = add i64 %78, 1
  %80 = getelementptr float, float* %1, i64 %79
  %81 = icmp ult float* %47, %80
  %82 = icmp ult float* %53, %77
  %83 = and i1 %81, %82
  br i1 %83, label %65, label %84

84:                                               ; preds = %68
  %85 = and i64 %63, 9223372036854775800
  %86 = getelementptr float, float* %47, i64 %85
  %87 = getelementptr float, float* %53, i64 %85
  %88 = add nsw i64 %85, -8
  %89 = lshr exact i64 %88, 3
  %90 = add nuw nsw i64 %89, 1
  %91 = and i64 %90, 3
  %92 = icmp ult i64 %88, 24
  br i1 %92, label %144, label %93

93:                                               ; preds = %84
  %94 = sub nsw i64 %90, %91
  br label %95

95:                                               ; preds = %95, %93
  %96 = phi i64 [ 0, %93 ], [ %141, %95 ]
  %97 = phi i64 [ %94, %93 ], [ %142, %95 ]
  %98 = getelementptr float, float* %47, i64 %96
  %99 = getelementptr float, float* %53, i64 %96
  %100 = bitcast float* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4, !alias.scope !39
  %102 = getelementptr float, float* %99, i64 4
  %103 = bitcast float* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !39
  %105 = bitcast float* %98 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %105, align 4, !alias.scope !42, !noalias !39
  %106 = getelementptr float, float* %98, i64 4
  %107 = bitcast float* %106 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %107, align 4, !alias.scope !42, !noalias !39
  %108 = or i64 %96, 8
  %109 = getelementptr float, float* %47, i64 %108
  %110 = getelementptr float, float* %53, i64 %108
  %111 = bitcast float* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4, !alias.scope !39
  %113 = getelementptr float, float* %110, i64 4
  %114 = bitcast float* %113 to <4 x i32>*
  %115 = load <4 x i32>, <4 x i32>* %114, align 4, !alias.scope !39
  %116 = bitcast float* %109 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %116, align 4, !alias.scope !42, !noalias !39
  %117 = getelementptr float, float* %109, i64 4
  %118 = bitcast float* %117 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %118, align 4, !alias.scope !42, !noalias !39
  %119 = or i64 %96, 16
  %120 = getelementptr float, float* %47, i64 %119
  %121 = getelementptr float, float* %53, i64 %119
  %122 = bitcast float* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4, !alias.scope !39
  %124 = getelementptr float, float* %121, i64 4
  %125 = bitcast float* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !39
  %127 = bitcast float* %120 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %127, align 4, !alias.scope !42, !noalias !39
  %128 = getelementptr float, float* %120, i64 4
  %129 = bitcast float* %128 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 4, !alias.scope !42, !noalias !39
  %130 = or i64 %96, 24
  %131 = getelementptr float, float* %47, i64 %130
  %132 = getelementptr float, float* %53, i64 %130
  %133 = bitcast float* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4, !alias.scope !39
  %135 = getelementptr float, float* %132, i64 4
  %136 = bitcast float* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 4, !alias.scope !39
  %138 = bitcast float* %131 to <4 x i32>*
  store <4 x i32> %134, <4 x i32>* %138, align 4, !alias.scope !42, !noalias !39
  %139 = getelementptr float, float* %131, i64 4
  %140 = bitcast float* %139 to <4 x i32>*
  store <4 x i32> %137, <4 x i32>* %140, align 4, !alias.scope !42, !noalias !39
  %141 = add i64 %96, 32
  %142 = add i64 %97, -4
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %95, !llvm.loop !44

144:                                              ; preds = %95, %84
  %145 = phi i64 [ 0, %84 ], [ %141, %95 ]
  %146 = icmp eq i64 %91, 0
  br i1 %146, label %163, label %147

147:                                              ; preds = %144, %147
  %148 = phi i64 [ %160, %147 ], [ %145, %144 ]
  %149 = phi i64 [ %161, %147 ], [ %91, %144 ]
  %150 = getelementptr float, float* %47, i64 %148
  %151 = getelementptr float, float* %53, i64 %148
  %152 = bitcast float* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4, !alias.scope !39
  %154 = getelementptr float, float* %151, i64 4
  %155 = bitcast float* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4, !alias.scope !39
  %157 = bitcast float* %150 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %157, align 4, !alias.scope !42, !noalias !39
  %158 = getelementptr float, float* %150, i64 4
  %159 = bitcast float* %158 to <4 x i32>*
  store <4 x i32> %156, <4 x i32>* %159, align 4, !alias.scope !42, !noalias !39
  %160 = add i64 %148, 8
  %161 = add i64 %149, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %147, !llvm.loop !45

163:                                              ; preds = %147, %144
  %164 = icmp eq i64 %63, %85
  br i1 %164, label %165, label %65

165:                                              ; preds = %176, %163
  %166 = phi float* [ %86, %163 ], [ %183, %176 ]
  %167 = ptrtoint float* %166 to i64
  br label %168

168:                                              ; preds = %165, %45
  %169 = phi i64 [ %167, %165 ], [ %46, %45 ]
  store i64 %169, i64* %24, align 8
  %170 = icmp eq i64 %51, 0
  br i1 %170, label %185, label %171

171:                                              ; preds = %168
  %172 = sub nsw i64 0, %52
  %173 = getelementptr inbounds float, float* %47, i64 %172
  %174 = bitcast float* %173 to i8*
  %175 = bitcast float* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %174, i8* align 4 %175, i64 %51, i1 false) #7
  br label %185

176:                                              ; preds = %65, %176
  %177 = phi float* [ %183, %176 ], [ %66, %65 ]
  %178 = phi float* [ %182, %176 ], [ %67, %65 ]
  %179 = bitcast float* %178 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = bitcast float* %177 to i32*
  store i32 %180, i32* %181, align 4
  %182 = getelementptr inbounds float, float* %178, i64 1
  %183 = getelementptr inbounds float, float* %177, i64 1
  %184 = icmp ult float* %182, %19
  br i1 %184, label %176, label %165, !llvm.loop !46

185:                                              ; preds = %168, %171
  %186 = ptrtoint float* %48 to i64
  %187 = sub i64 %186, %10
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %603, label %189

189:                                              ; preds = %185
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %5, i64 %187, i1 false) #7
  br label %603

190:                                              ; preds = %14
  %191 = bitcast %"class.std::__1::vector.2"* %0 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = sub i64 %20, %192
  %194 = ashr exact i64 %193, 2
  %195 = add nsw i64 %194, %12
  %196 = icmp ugt i64 %195, 4611686018427387903
  br i1 %196, label %197, label %199

197:                                              ; preds = %190
  %198 = bitcast %"class.std::__1::vector.2"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %198) #8
  unreachable

199:                                              ; preds = %190
  %200 = sub i64 %17, %192
  %201 = ashr exact i64 %200, 2
  %202 = icmp ult i64 %201, 2305843009213693951
  br i1 %202, label %206, label %203

203:                                              ; preds = %199
  %204 = sub i64 %7, %192
  %205 = ashr exact i64 %204, 2
  br label %216

206:                                              ; preds = %199
  %207 = ashr exact i64 %200, 1
  %208 = icmp ult i64 %207, %195
  %209 = select i1 %208, i64 %195, i64 %207
  %210 = sub i64 %7, %192
  %211 = ashr exact i64 %210, 2
  %212 = icmp eq i64 %209, 0
  br i1 %212, label %222, label %213

213:                                              ; preds = %206
  %214 = icmp ugt i64 %209, 4611686018427387903
  br i1 %214, label %215, label %216

215:                                              ; preds = %213
  tail call void @abort() #8
  unreachable

216:                                              ; preds = %203, %213
  %217 = phi i64 [ 4611686018427387903, %203 ], [ %209, %213 ]
  %218 = phi i64 [ %205, %203 ], [ %211, %213 ]
  %219 = shl i64 %217, 2
  %220 = tail call i8* @_Znwm(i64 %219) #9
  %221 = bitcast i8* %220 to float*
  br label %222

222:                                              ; preds = %216, %206
  %223 = phi i64 [ %218, %216 ], [ %211, %206 ]
  %224 = phi i64 [ %217, %216 ], [ 0, %206 ]
  %225 = phi float* [ %221, %216 ], [ null, %206 ]
  %226 = getelementptr inbounds float, float* %225, i64 %223
  %227 = getelementptr inbounds float, float* %225, i64 %224
  %228 = ptrtoint float* %227 to i64
  %229 = getelementptr inbounds float, float* %226, i64 %12
  %230 = add i64 %11, -4
  %231 = lshr i64 %230, 2
  %232 = add nuw nsw i64 %231, 1
  %233 = icmp ult i64 %232, 8
  br i1 %233, label %327, label %234

234:                                              ; preds = %222
  %235 = add i64 %11, -4
  %236 = lshr i64 %235, 2
  %237 = add nsw i64 %223, %236
  %238 = add i64 %237, 1
  %239 = getelementptr float, float* %225, i64 %238
  %240 = add nuw nsw i64 %236, 1
  %241 = getelementptr float, float* %2, i64 %240
  %242 = icmp ult float* %226, %241
  %243 = icmp ugt float* %239, %2
  %244 = and i1 %242, %243
  br i1 %244, label %327, label %245

245:                                              ; preds = %234
  %246 = and i64 %232, 9223372036854775800
  %247 = getelementptr float, float* %226, i64 %246
  %248 = getelementptr float, float* %2, i64 %246
  %249 = getelementptr float, float* %226, i64 %246
  %250 = add nsw i64 %246, -8
  %251 = lshr exact i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 3
  %254 = icmp ult i64 %250, 24
  br i1 %254, label %306, label %255

255:                                              ; preds = %245
  %256 = sub nsw i64 %252, %253
  br label %257

257:                                              ; preds = %257, %255
  %258 = phi i64 [ 0, %255 ], [ %303, %257 ]
  %259 = phi i64 [ %256, %255 ], [ %304, %257 ]
  %260 = getelementptr float, float* %2, i64 %258
  %261 = getelementptr float, float* %226, i64 %258
  %262 = bitcast float* %260 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 4, !alias.scope !47
  %264 = getelementptr float, float* %260, i64 4
  %265 = bitcast float* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4, !alias.scope !47
  %267 = bitcast float* %261 to <4 x i32>*
  store <4 x i32> %263, <4 x i32>* %267, align 4, !alias.scope !50, !noalias !47
  %268 = getelementptr float, float* %261, i64 4
  %269 = bitcast float* %268 to <4 x i32>*
  store <4 x i32> %266, <4 x i32>* %269, align 4, !alias.scope !50, !noalias !47
  %270 = or i64 %258, 8
  %271 = getelementptr float, float* %2, i64 %270
  %272 = getelementptr float, float* %226, i64 %270
  %273 = bitcast float* %271 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4, !alias.scope !47
  %275 = getelementptr float, float* %271, i64 4
  %276 = bitcast float* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 4, !alias.scope !47
  %278 = bitcast float* %272 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %278, align 4, !alias.scope !50, !noalias !47
  %279 = getelementptr float, float* %272, i64 4
  %280 = bitcast float* %279 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %280, align 4, !alias.scope !50, !noalias !47
  %281 = or i64 %258, 16
  %282 = getelementptr float, float* %2, i64 %281
  %283 = getelementptr float, float* %226, i64 %281
  %284 = bitcast float* %282 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4, !alias.scope !47
  %286 = getelementptr float, float* %282, i64 4
  %287 = bitcast float* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 4, !alias.scope !47
  %289 = bitcast float* %283 to <4 x i32>*
  store <4 x i32> %285, <4 x i32>* %289, align 4, !alias.scope !50, !noalias !47
  %290 = getelementptr float, float* %283, i64 4
  %291 = bitcast float* %290 to <4 x i32>*
  store <4 x i32> %288, <4 x i32>* %291, align 4, !alias.scope !50, !noalias !47
  %292 = or i64 %258, 24
  %293 = getelementptr float, float* %2, i64 %292
  %294 = getelementptr float, float* %226, i64 %292
  %295 = bitcast float* %293 to <4 x i32>*
  %296 = load <4 x i32>, <4 x i32>* %295, align 4, !alias.scope !47
  %297 = getelementptr float, float* %293, i64 4
  %298 = bitcast float* %297 to <4 x i32>*
  %299 = load <4 x i32>, <4 x i32>* %298, align 4, !alias.scope !47
  %300 = bitcast float* %294 to <4 x i32>*
  store <4 x i32> %296, <4 x i32>* %300, align 4, !alias.scope !50, !noalias !47
  %301 = getelementptr float, float* %294, i64 4
  %302 = bitcast float* %301 to <4 x i32>*
  store <4 x i32> %299, <4 x i32>* %302, align 4, !alias.scope !50, !noalias !47
  %303 = add i64 %258, 32
  %304 = add i64 %259, -4
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %306, label %257, !llvm.loop !52

306:                                              ; preds = %257, %245
  %307 = phi i64 [ 0, %245 ], [ %303, %257 ]
  %308 = icmp eq i64 %253, 0
  br i1 %308, label %325, label %309

309:                                              ; preds = %306, %309
  %310 = phi i64 [ %322, %309 ], [ %307, %306 ]
  %311 = phi i64 [ %323, %309 ], [ %253, %306 ]
  %312 = getelementptr float, float* %2, i64 %310
  %313 = getelementptr float, float* %226, i64 %310
  %314 = bitcast float* %312 to <4 x i32>*
  %315 = load <4 x i32>, <4 x i32>* %314, align 4, !alias.scope !47
  %316 = getelementptr float, float* %312, i64 4
  %317 = bitcast float* %316 to <4 x i32>*
  %318 = load <4 x i32>, <4 x i32>* %317, align 4, !alias.scope !47
  %319 = bitcast float* %313 to <4 x i32>*
  store <4 x i32> %315, <4 x i32>* %319, align 4, !alias.scope !50, !noalias !47
  %320 = getelementptr float, float* %313, i64 4
  %321 = bitcast float* %320 to <4 x i32>*
  store <4 x i32> %318, <4 x i32>* %321, align 4, !alias.scope !50, !noalias !47
  %322 = add i64 %310, 8
  %323 = add i64 %311, -1
  %324 = icmp eq i64 %323, 0
  br i1 %324, label %325, label %309, !llvm.loop !53

325:                                              ; preds = %309, %306
  %326 = icmp eq i64 %232, %246
  br i1 %326, label %403, label %327

327:                                              ; preds = %325, %234, %222
  %328 = phi float* [ %226, %234 ], [ %226, %222 ], [ %247, %325 ]
  %329 = phi float* [ %2, %234 ], [ %2, %222 ], [ %248, %325 ]
  %330 = phi float* [ %226, %234 ], [ %226, %222 ], [ %249, %325 ]
  %331 = ptrtoint float* %328 to i64
  %332 = add nsw i64 %223, %12
  %333 = add nsw i64 %332, -1
  %334 = getelementptr float, float* %225, i64 %333
  %335 = ptrtoint float* %334 to i64
  %336 = sub i64 %335, %331
  %337 = lshr i64 %336, 2
  %338 = add nuw nsw i64 %337, 1
  %339 = and i64 %338, 7
  %340 = icmp eq i64 %339, 0
  br i1 %340, label %353, label %341

341:                                              ; preds = %327, %341
  %342 = phi float* [ %349, %341 ], [ %328, %327 ]
  %343 = phi float* [ %350, %341 ], [ %329, %327 ]
  %344 = phi float* [ %349, %341 ], [ %330, %327 ]
  %345 = phi i64 [ %351, %341 ], [ %339, %327 ]
  %346 = bitcast float* %343 to i32*
  %347 = load i32, i32* %346, align 4
  %348 = bitcast float* %344 to i32*
  store i32 %347, i32* %348, align 4
  %349 = getelementptr inbounds float, float* %342, i64 1
  %350 = getelementptr inbounds float, float* %343, i64 1
  %351 = add i64 %345, -1
  %352 = icmp eq i64 %351, 0
  br i1 %352, label %353, label %341, !llvm.loop !54

353:                                              ; preds = %341, %327
  %354 = phi float* [ %328, %327 ], [ %349, %341 ]
  %355 = phi float* [ %329, %327 ], [ %350, %341 ]
  %356 = phi float* [ %330, %327 ], [ %349, %341 ]
  %357 = icmp ult i64 %336, 28
  br i1 %357, label %403, label %358

358:                                              ; preds = %353, %358
  %359 = phi float* [ %400, %358 ], [ %354, %353 ]
  %360 = phi float* [ %401, %358 ], [ %355, %353 ]
  %361 = phi float* [ %400, %358 ], [ %356, %353 ]
  %362 = bitcast float* %360 to i32*
  %363 = load i32, i32* %362, align 4
  %364 = bitcast float* %361 to i32*
  store i32 %363, i32* %364, align 4
  %365 = getelementptr inbounds float, float* %359, i64 1
  %366 = getelementptr inbounds float, float* %360, i64 1
  %367 = bitcast float* %366 to i32*
  %368 = load i32, i32* %367, align 4
  %369 = bitcast float* %365 to i32*
  store i32 %368, i32* %369, align 4
  %370 = getelementptr inbounds float, float* %359, i64 2
  %371 = getelementptr inbounds float, float* %360, i64 2
  %372 = bitcast float* %371 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = bitcast float* %370 to i32*
  store i32 %373, i32* %374, align 4
  %375 = getelementptr inbounds float, float* %359, i64 3
  %376 = getelementptr inbounds float, float* %360, i64 3
  %377 = bitcast float* %376 to i32*
  %378 = load i32, i32* %377, align 4
  %379 = bitcast float* %375 to i32*
  store i32 %378, i32* %379, align 4
  %380 = getelementptr inbounds float, float* %359, i64 4
  %381 = getelementptr inbounds float, float* %360, i64 4
  %382 = bitcast float* %381 to i32*
  %383 = load i32, i32* %382, align 4
  %384 = bitcast float* %380 to i32*
  store i32 %383, i32* %384, align 4
  %385 = getelementptr inbounds float, float* %359, i64 5
  %386 = getelementptr inbounds float, float* %360, i64 5
  %387 = bitcast float* %386 to i32*
  %388 = load i32, i32* %387, align 4
  %389 = bitcast float* %385 to i32*
  store i32 %388, i32* %389, align 4
  %390 = getelementptr inbounds float, float* %359, i64 6
  %391 = getelementptr inbounds float, float* %360, i64 6
  %392 = bitcast float* %391 to i32*
  %393 = load i32, i32* %392, align 4
  %394 = bitcast float* %390 to i32*
  store i32 %393, i32* %394, align 4
  %395 = getelementptr inbounds float, float* %359, i64 7
  %396 = getelementptr inbounds float, float* %360, i64 7
  %397 = bitcast float* %396 to i32*
  %398 = load i32, i32* %397, align 4
  %399 = bitcast float* %395 to i32*
  store i32 %398, i32* %399, align 4
  %400 = getelementptr inbounds float, float* %359, i64 8
  %401 = getelementptr inbounds float, float* %360, i64 8
  %402 = icmp eq float* %229, %400
  br i1 %402, label %403, label %358, !llvm.loop !55

403:                                              ; preds = %353, %358, %325
  %404 = load float*, float** %8, align 8
  %405 = ptrtoint float* %404 to i64
  %406 = sub i64 %7, %405
  %407 = ashr exact i64 %406, 2
  %408 = sub nsw i64 0, %407
  %409 = getelementptr inbounds float, float* %226, i64 %408
  %410 = ptrtoint float* %409 to i64
  %411 = icmp sgt i64 %406, 0
  br i1 %411, label %412, label %415

412:                                              ; preds = %403
  %413 = bitcast float* %409 to i8*
  %414 = bitcast float* %404 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %413, i8* align 4 %414, i64 %406, i1 false) #7
  br label %415

415:                                              ; preds = %412, %403
  %416 = load float*, float** %18, align 8
  %417 = icmp eq float* %416, %1
  br i1 %417, label %596, label %418

418:                                              ; preds = %415
  %419 = getelementptr float, float* %416, i64 -1
  %420 = ptrtoint float* %419 to i64
  %421 = sub i64 %420, %7
  %422 = lshr i64 %421, 2
  %423 = add nuw nsw i64 %422, 1
  %424 = icmp ult i64 %423, 8
  br i1 %424, label %521, label %425

425:                                              ; preds = %418
  %426 = add nsw i64 %223, %12
  %427 = getelementptr float, float* %416, i64 -1
  %428 = ptrtoint float* %427 to i64
  %429 = sub i64 %428, %7
  %430 = lshr i64 %429, 2
  %431 = add nsw i64 %426, %430
  %432 = add i64 %431, 1
  %433 = getelementptr float, float* %225, i64 %432
  %434 = add nuw nsw i64 %430, 1
  %435 = getelementptr float, float* %1, i64 %434
  %436 = icmp ult float* %229, %435
  %437 = icmp ugt float* %433, %1
  %438 = and i1 %436, %437
  br i1 %438, label %521, label %439

439:                                              ; preds = %425
  %440 = and i64 %423, 9223372036854775800
  %441 = getelementptr float, float* %229, i64 %440
  %442 = getelementptr float, float* %229, i64 %440
  %443 = getelementptr float, float* %1, i64 %440
  %444 = add nsw i64 %440, -8
  %445 = lshr exact i64 %444, 3
  %446 = add nuw nsw i64 %445, 1
  %447 = and i64 %446, 3
  %448 = icmp ult i64 %444, 24
  br i1 %448, label %500, label %449

449:                                              ; preds = %439
  %450 = sub nsw i64 %446, %447
  br label %451

451:                                              ; preds = %451, %449
  %452 = phi i64 [ 0, %449 ], [ %497, %451 ]
  %453 = phi i64 [ %450, %449 ], [ %498, %451 ]
  %454 = getelementptr float, float* %229, i64 %452
  %455 = getelementptr float, float* %1, i64 %452
  %456 = bitcast float* %455 to <4 x i32>*
  %457 = load <4 x i32>, <4 x i32>* %456, align 4, !alias.scope !56
  %458 = getelementptr float, float* %455, i64 4
  %459 = bitcast float* %458 to <4 x i32>*
  %460 = load <4 x i32>, <4 x i32>* %459, align 4, !alias.scope !56
  %461 = bitcast float* %454 to <4 x i32>*
  store <4 x i32> %457, <4 x i32>* %461, align 4, !alias.scope !59, !noalias !56
  %462 = getelementptr float, float* %454, i64 4
  %463 = bitcast float* %462 to <4 x i32>*
  store <4 x i32> %460, <4 x i32>* %463, align 4, !alias.scope !59, !noalias !56
  %464 = or i64 %452, 8
  %465 = getelementptr float, float* %229, i64 %464
  %466 = getelementptr float, float* %1, i64 %464
  %467 = bitcast float* %466 to <4 x i32>*
  %468 = load <4 x i32>, <4 x i32>* %467, align 4, !alias.scope !56
  %469 = getelementptr float, float* %466, i64 4
  %470 = bitcast float* %469 to <4 x i32>*
  %471 = load <4 x i32>, <4 x i32>* %470, align 4, !alias.scope !56
  %472 = bitcast float* %465 to <4 x i32>*
  store <4 x i32> %468, <4 x i32>* %472, align 4, !alias.scope !59, !noalias !56
  %473 = getelementptr float, float* %465, i64 4
  %474 = bitcast float* %473 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %474, align 4, !alias.scope !59, !noalias !56
  %475 = or i64 %452, 16
  %476 = getelementptr float, float* %229, i64 %475
  %477 = getelementptr float, float* %1, i64 %475
  %478 = bitcast float* %477 to <4 x i32>*
  %479 = load <4 x i32>, <4 x i32>* %478, align 4, !alias.scope !56
  %480 = getelementptr float, float* %477, i64 4
  %481 = bitcast float* %480 to <4 x i32>*
  %482 = load <4 x i32>, <4 x i32>* %481, align 4, !alias.scope !56
  %483 = bitcast float* %476 to <4 x i32>*
  store <4 x i32> %479, <4 x i32>* %483, align 4, !alias.scope !59, !noalias !56
  %484 = getelementptr float, float* %476, i64 4
  %485 = bitcast float* %484 to <4 x i32>*
  store <4 x i32> %482, <4 x i32>* %485, align 4, !alias.scope !59, !noalias !56
  %486 = or i64 %452, 24
  %487 = getelementptr float, float* %229, i64 %486
  %488 = getelementptr float, float* %1, i64 %486
  %489 = bitcast float* %488 to <4 x i32>*
  %490 = load <4 x i32>, <4 x i32>* %489, align 4, !alias.scope !56
  %491 = getelementptr float, float* %488, i64 4
  %492 = bitcast float* %491 to <4 x i32>*
  %493 = load <4 x i32>, <4 x i32>* %492, align 4, !alias.scope !56
  %494 = bitcast float* %487 to <4 x i32>*
  store <4 x i32> %490, <4 x i32>* %494, align 4, !alias.scope !59, !noalias !56
  %495 = getelementptr float, float* %487, i64 4
  %496 = bitcast float* %495 to <4 x i32>*
  store <4 x i32> %493, <4 x i32>* %496, align 4, !alias.scope !59, !noalias !56
  %497 = add i64 %452, 32
  %498 = add i64 %453, -4
  %499 = icmp eq i64 %498, 0
  br i1 %499, label %500, label %451, !llvm.loop !61

500:                                              ; preds = %451, %439
  %501 = phi i64 [ 0, %439 ], [ %497, %451 ]
  %502 = icmp eq i64 %447, 0
  br i1 %502, label %519, label %503

503:                                              ; preds = %500, %503
  %504 = phi i64 [ %516, %503 ], [ %501, %500 ]
  %505 = phi i64 [ %517, %503 ], [ %447, %500 ]
  %506 = getelementptr float, float* %229, i64 %504
  %507 = getelementptr float, float* %1, i64 %504
  %508 = bitcast float* %507 to <4 x i32>*
  %509 = load <4 x i32>, <4 x i32>* %508, align 4, !alias.scope !56
  %510 = getelementptr float, float* %507, i64 4
  %511 = bitcast float* %510 to <4 x i32>*
  %512 = load <4 x i32>, <4 x i32>* %511, align 4, !alias.scope !56
  %513 = bitcast float* %506 to <4 x i32>*
  store <4 x i32> %509, <4 x i32>* %513, align 4, !alias.scope !59, !noalias !56
  %514 = getelementptr float, float* %506, i64 4
  %515 = bitcast float* %514 to <4 x i32>*
  store <4 x i32> %512, <4 x i32>* %515, align 4, !alias.scope !59, !noalias !56
  %516 = add i64 %504, 8
  %517 = add i64 %505, -1
  %518 = icmp eq i64 %517, 0
  br i1 %518, label %519, label %503, !llvm.loop !62

519:                                              ; preds = %503, %500
  %520 = icmp eq i64 %423, %440
  br i1 %520, label %596, label %521

521:                                              ; preds = %519, %425, %418
  %522 = phi float* [ %229, %425 ], [ %229, %418 ], [ %441, %519 ]
  %523 = phi float* [ %229, %425 ], [ %229, %418 ], [ %442, %519 ]
  %524 = phi float* [ %1, %425 ], [ %1, %418 ], [ %443, %519 ]
  %525 = ptrtoint float* %524 to i64
  %526 = getelementptr float, float* %416, i64 -1
  %527 = ptrtoint float* %526 to i64
  %528 = sub i64 %527, %525
  %529 = lshr i64 %528, 2
  %530 = add nuw nsw i64 %529, 1
  %531 = and i64 %530, 7
  %532 = icmp eq i64 %531, 0
  br i1 %532, label %545, label %533

533:                                              ; preds = %521, %533
  %534 = phi float* [ %542, %533 ], [ %522, %521 ]
  %535 = phi float* [ %542, %533 ], [ %523, %521 ]
  %536 = phi float* [ %541, %533 ], [ %524, %521 ]
  %537 = phi i64 [ %543, %533 ], [ %531, %521 ]
  %538 = bitcast float* %535 to i32*
  %539 = bitcast float* %536 to i32*
  %540 = load i32, i32* %539, align 4
  store i32 %540, i32* %538, align 4
  %541 = getelementptr inbounds float, float* %536, i64 1
  %542 = getelementptr inbounds float, float* %534, i64 1
  %543 = add i64 %537, -1
  %544 = icmp eq i64 %543, 0
  br i1 %544, label %545, label %533, !llvm.loop !63

545:                                              ; preds = %533, %521
  %546 = phi float* [ undef, %521 ], [ %542, %533 ]
  %547 = phi float* [ %522, %521 ], [ %542, %533 ]
  %548 = phi float* [ %523, %521 ], [ %542, %533 ]
  %549 = phi float* [ %524, %521 ], [ %541, %533 ]
  %550 = icmp ult i64 %528, 28
  br i1 %550, label %596, label %551

551:                                              ; preds = %545, %551
  %552 = phi float* [ %594, %551 ], [ %547, %545 ]
  %553 = phi float* [ %594, %551 ], [ %548, %545 ]
  %554 = phi float* [ %593, %551 ], [ %549, %545 ]
  %555 = bitcast float* %553 to i32*
  %556 = bitcast float* %554 to i32*
  %557 = load i32, i32* %556, align 4
  store i32 %557, i32* %555, align 4
  %558 = getelementptr inbounds float, float* %554, i64 1
  %559 = getelementptr inbounds float, float* %552, i64 1
  %560 = bitcast float* %559 to i32*
  %561 = bitcast float* %558 to i32*
  %562 = load i32, i32* %561, align 4
  store i32 %562, i32* %560, align 4
  %563 = getelementptr inbounds float, float* %554, i64 2
  %564 = getelementptr inbounds float, float* %552, i64 2
  %565 = bitcast float* %564 to i32*
  %566 = bitcast float* %563 to i32*
  %567 = load i32, i32* %566, align 4
  store i32 %567, i32* %565, align 4
  %568 = getelementptr inbounds float, float* %554, i64 3
  %569 = getelementptr inbounds float, float* %552, i64 3
  %570 = bitcast float* %569 to i32*
  %571 = bitcast float* %568 to i32*
  %572 = load i32, i32* %571, align 4
  store i32 %572, i32* %570, align 4
  %573 = getelementptr inbounds float, float* %554, i64 4
  %574 = getelementptr inbounds float, float* %552, i64 4
  %575 = bitcast float* %574 to i32*
  %576 = bitcast float* %573 to i32*
  %577 = load i32, i32* %576, align 4
  store i32 %577, i32* %575, align 4
  %578 = getelementptr inbounds float, float* %554, i64 5
  %579 = getelementptr inbounds float, float* %552, i64 5
  %580 = bitcast float* %579 to i32*
  %581 = bitcast float* %578 to i32*
  %582 = load i32, i32* %581, align 4
  store i32 %582, i32* %580, align 4
  %583 = getelementptr inbounds float, float* %554, i64 6
  %584 = getelementptr inbounds float, float* %552, i64 6
  %585 = bitcast float* %584 to i32*
  %586 = bitcast float* %583 to i32*
  %587 = load i32, i32* %586, align 4
  store i32 %587, i32* %585, align 4
  %588 = getelementptr inbounds float, float* %554, i64 7
  %589 = getelementptr inbounds float, float* %552, i64 7
  %590 = bitcast float* %589 to i32*
  %591 = bitcast float* %588 to i32*
  %592 = load i32, i32* %591, align 4
  store i32 %592, i32* %590, align 4
  %593 = getelementptr inbounds float, float* %554, i64 8
  %594 = getelementptr inbounds float, float* %552, i64 8
  %595 = icmp eq float* %593, %416
  br i1 %595, label %596, label %551, !llvm.loop !64

596:                                              ; preds = %545, %551, %519, %415
  %597 = phi float* [ %229, %415 ], [ %441, %519 ], [ %546, %545 ], [ %594, %551 ]
  %598 = ptrtoint float* %597 to i64
  %599 = load float*, float** %8, align 8
  store i64 %410, i64* %191, align 8
  store i64 %598, i64* %24, align 8
  store i64 %228, i64* %16, align 8
  %600 = icmp eq float* %599, null
  br i1 %600, label %603, label %601

601:                                              ; preds = %596
  %602 = bitcast float* %599 to i8*
  tail call void @_ZdlPv(i8* %602) #9
  br label %603

603:                                              ; preds = %601, %596, %40, %185, %189, %4
  %604 = phi float* [ %1, %4 ], [ %1, %189 ], [ %1, %185 ], [ %1, %40 ], [ %226, %596 ], [ %226, %601 ]
  ret float* %604
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6webrtc12FrameBlocker16IsBlockAvailableEv(%"class.webrtc::FrameBlocker"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %5, i64 0, i32 0, i32 1
  %7 = bitcast float** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector.2"* %5 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = icmp eq i64 %11, 256
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc12FrameBlocker12ExtractBlockEPNSt3__16vectorINS2_INS2_IfNS1_9allocatorIfEEEENS3_IS5_EEEENS3_IS7_EEEE(%"class.webrtc::FrameBlocker"* nocapture readonly, %"class.std::__1::vector"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.webrtc::FrameBlocker", %"class.webrtc::FrameBlocker"* %0, i64 0, i32 2, i32 0, i32 0
  %10 = load i64, i64* %7, align 8
  br label %11

11:                                               ; preds = %6, %19
  %12 = phi i64 [ %4, %6 ], [ %20, %19 ]
  %13 = phi i64 [ %10, %6 ], [ %21, %19 ]
  %14 = phi i64 [ 0, %6 ], [ %22, %19 ]
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %19, label %24

16:                                               ; preds = %19, %2
  ret void

17:                                               ; preds = %24
  %18 = load i64, i64* %3, align 8
  br label %19

19:                                               ; preds = %17, %11
  %20 = phi i64 [ %18, %17 ], [ %12, %11 ]
  %21 = phi i64 [ %57, %17 ], [ 0, %11 ]
  %22 = add nuw i64 %14, 1
  %23 = icmp ult i64 %22, %20
  br i1 %23, label %11, label %16

24:                                               ; preds = %11, %24
  %25 = phi i64 [ %56, %24 ], [ 0, %11 ]
  %26 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %8, align 8
  %27 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %26, i64 %14, i32 0, i32 0
  %28 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %27, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %28, i64 %25
  %30 = bitcast %"class.std::__1::vector.2"* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %28, i64 %25, i32 0, i32 1
  %33 = bitcast float** %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %8, align 8
  %35 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %34, i64 %14, i32 0, i32 0
  %36 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %35, align 8
  %37 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %36, i64 %25
  %38 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %37, i64 0, i32 0, i32 0
  %39 = load float*, float** %38, align 8
  %40 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %9, align 8
  %41 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %40, i64 %14, i32 0, i32 0
  %42 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %41, align 8
  %43 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %42, i64 %25, i32 0, i32 0
  %44 = load float*, float** %43, align 8
  %45 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %42, i64 %25, i32 0, i32 1
  %46 = load float*, float** %45, align 8
  %47 = tail call float* @_ZNSt3__16vectorIfNS_9allocatorIfEEE6insertINS_11__wrap_iterIPfEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKfEES9_S9_(%"class.std::__1::vector.2"* %37, float* %39, float* %44, float* %46)
  %48 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %9, align 8
  %49 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %48, i64 %14, i32 0, i32 0
  %50 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %49, align 8
  %51 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %50, i64 %25
  %52 = bitcast %"class.std::__1::vector.2"* %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %50, i64 %25, i32 0, i32 1
  %55 = bitcast float** %54 to i64*
  store i64 %53, i64* %55, align 8
  %56 = add nuw i64 %25, 1
  %57 = load i64, i64* %7, align 8
  %58 = icmp ult i64 %56, %57
  br i1 %58, label %24, label %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector.0"*, %"class.std::__1::vector.0"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector.0"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #7
  %4 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"class.std::__1::vector.2"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.0"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %79, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 768614336404564650
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.0"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #8
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #9
  %18 = bitcast i8* %17 to %"class.std::__1::vector.2"*
  %19 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"class.std::__1::vector.2"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector.0"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::vector.2"* %22, %"class.std::__1::vector.2"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1, i64 0, i32 0, i32 0
  %25 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %24, align 8
  %26 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %4, align 8
  %27 = bitcast %"class.std::__1::vector.2"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"class.std::__1::vector.2"* %25, %26
  br i1 %29, label %77, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"class.std::__1::vector.2"*
  br label %32

32:                                               ; preds = %71, %30
  %33 = phi %"class.std::__1::vector.2"* [ %73, %71 ], [ %31, %30 ]
  %34 = phi %"class.std::__1::vector.2"* [ %72, %71 ], [ %25, %30 ]
  %35 = bitcast %"class.std::__1::vector.2"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #7
  %36 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %34, i64 0, i32 0, i32 1
  %37 = bitcast float** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector.2"* %34 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = ashr exact i64 %41, 2
  %43 = icmp eq i64 %41, 0
  br i1 %43, label %71, label %44

44:                                               ; preds = %32
  %45 = icmp ugt i64 %42, 4611686018427387903
  br i1 %45, label %46, label %48

46:                                               ; preds = %44
  %47 = bitcast %"class.std::__1::vector.2"* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %47) #8
  unreachable

48:                                               ; preds = %44
  %49 = tail call i8* @_Znwm(i64 %41) #9
  %50 = bitcast i8* %49 to float*
  %51 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %33, i64 0, i32 0, i32 1
  %52 = bitcast float** %51 to i8**
  store i8* %49, i8** %52, align 8
  %53 = bitcast %"class.std::__1::vector.2"* %33 to i8**
  store i8* %49, i8** %53, align 8
  %54 = getelementptr inbounds float, float* %50, i64 %42
  %55 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %33, i64 0, i32 0, i32 2, i32 0, i32 0
  store float* %54, float** %55, align 8
  %56 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %34, i64 0, i32 0, i32 0
  %57 = load float*, float** %56, align 8
  %58 = load i64, i64* %37, align 8
  %59 = bitcast float** %51 to i64*
  %60 = ptrtoint i8* %49 to i64
  %61 = ptrtoint float* %57 to i64
  %62 = sub i64 %58, %61
  %63 = icmp sgt i64 %62, 0
  br i1 %63, label %64, label %69

64:                                               ; preds = %48
  %65 = lshr exact i64 %62, 2
  %66 = bitcast float* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %49, i8* align 4 %66, i64 %62, i1 false) #7
  %67 = getelementptr inbounds float, float* %50, i64 %65
  %68 = ptrtoint float* %67 to i64
  br label %69

69:                                               ; preds = %64, %48
  %70 = phi i64 [ %68, %64 ], [ %60, %48 ]
  store i64 %70, i64* %59, align 8
  br label %71

71:                                               ; preds = %69, %32
  %72 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %34, i64 1
  %73 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %33, i64 1
  %74 = icmp eq %"class.std::__1::vector.2"* %72, %26
  br i1 %74, label %75, label %32

75:                                               ; preds = %71
  %76 = ptrtoint %"class.std::__1::vector.2"* %73 to i64
  br label %77

77:                                               ; preds = %16, %75
  %78 = phi i64 [ %28, %16 ], [ %76, %75 ]
  store i64 %78, i64* %27, align 8
  br label %79

79:                                               ; preds = %2, %77
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !8}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !8}
!36 = distinct !{!36, !10}
!37 = distinct !{!37, !10}
!38 = distinct !{!38, !8}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !8}
!45 = distinct !{!45, !10}
!46 = distinct !{!46, !8}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !8}
!53 = distinct !{!53, !10}
!54 = distinct !{!54, !10}
!55 = distinct !{!55, !8}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !8}
!62 = distinct !{!62, !10}
!63 = distinct !{!63, !10}
!64 = distinct !{!64, !8}
