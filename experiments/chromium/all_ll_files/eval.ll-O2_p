; ModuleID = '../../third_party/ffmpeg/libavutil/eval.c'
source_filename = "../../third_party/ffmpeg/libavutil/eval.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.anon = type { double, double, i8 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.anon.0 = type { i8*, double }
%struct.AVExpr = type { i32, double, i32, %union.anon, [3 x %struct.AVExpr*], double* }
%union.anon = type { double (double)* }
%struct.Parser = type { %struct.AVClass*, i32, i8*, double*, i8**, double (i8*, double)**, i8**, double (i8*, double, double)**, i8**, i8*, i32, i8*, double* }

@si_prefixes = internal unnamed_addr constant [54 x %struct.anon] [%struct.anon { double 0x43B0000000000000, double 1.000000e+18, i8 18 }, %struct.anon zeroinitializer, %struct.anon { double 0x41D0000000000000, double 1.000000e+09, i8 9 }, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon { double 1.024000e+03, double 1.000000e+03, i8 3 }, %struct.anon zeroinitializer, %struct.anon { double 0x4130000000000000, double 1.000000e+06, i8 6 }, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon { double 0x4310000000000000, double 1.000000e+15, i8 15 }, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon { double 0x4270000000000000, double 1.000000e+12, i8 12 }, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon { double 0x44F0000000000000, double 0x44EA784379D99DB4, i8 24 }, %struct.anon { double 0x4450000000000000, double 1.000000e+21, i8 21 }, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon { double 0x3C30000000000000, double 1.000000e-18, i8 -18 }, %struct.anon zeroinitializer, %struct.anon { double 0x3F8428A2F98D728A, double 1.000000e-02, i8 -2 }, %struct.anon { double 0x3FB965FEA53D6E3C, double 1.000000e-01, i8 -1 }, %struct.anon zeroinitializer, %struct.anon { double 0x3CD0000000000000, double 1.000000e-15, i8 -15 }, %struct.anon zeroinitializer, %struct.anon { double 0x405965FEA53D6E3E, double 1.000000e+02, i8 2 }, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon { double 1.024000e+03, double 1.000000e+03, i8 3 }, %struct.anon zeroinitializer, %struct.anon { double 0x3F50000000000000, double 1.000000e-03, i8 -3 }, %struct.anon { double 0x3E10000000000000, double 1.000000e-09, i8 -9 }, %struct.anon zeroinitializer, %struct.anon { double 0x3D70000000000000, double 0x3D719799812DEA11, i8 -12 }, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon { double 0x3EB0000000000000, double 0x3EB0C6F7A0B5ED8D, i8 -6 }, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon zeroinitializer, %struct.anon { double 0x3AF0000000000000, double 0x3AF357C299A88EA7, i8 -24 }, %struct.anon { double 0x3B90000000000000, double 0x3B92E3B40A0E9B4F, i8 -21 }], align 16
@eval_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* null, i32 3687524, i32 80, i32 88, i8* (i8*, i8*)* null, %struct.AVClass* (%struct.AVClass*)* null, i32 0, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null, %struct.AVClass* (i8**)* null }, align 8
@.str = private unnamed_addr constant [50 x i8] c"Invalid chars '%s' at the end of expression '%s'\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"Eval\00", align 1
@constants = internal unnamed_addr constant [4 x %struct.anon.0] [%struct.anon.0 { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i32 0, i32 0), double 0x4005BF0A8B145769 }, %struct.anon.0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), double 0x400921FB54442D18 }, %struct.anon.0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.58, i32 0, i32 0), double 0x3FF9E3779B97F4A8 }, %struct.anon.0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.59, i32 0, i32 0), double 1.180000e+02 }], align 16
@.str.2 = private unnamed_addr constant [43 x i8] c"Undefined constant or missing '(' in '%s'\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Missing ')' in '%s'\0A\00", align 1
@.str.4 = private unnamed_addr constant [38 x i8] c"Missing ')' or too many args in '%s'\0A\00", align 1
@.str.55 = private unnamed_addr constant [26 x i8] c"Unknown function in '%s'\0A\00", align 1
@.str.56 = private unnamed_addr constant [2 x i8] c"E\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"PI\00", align 1
@.str.58 = private unnamed_addr constant [4 x i8] c"PHI\00", align 1
@.str.59 = private unnamed_addr constant [10 x i8] c"QP2LAMBDA\00", align 1
@.str.60 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@ff_reverse = external local_unnamed_addr constant [256 x i8], align 16

; Function Attrs: nounwind ssp uwtable
define hidden double @av_strtod(i8*, i8**) local_unnamed_addr #0 {
  %3 = alloca i8*, align 8
  %4 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #11
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %5 = load i8, i8* %0, align 1
  %6 = icmp eq i8 %5, 48
  br i1 %6, label %7, label %15

7:                                                ; preds = %2
  %8 = getelementptr inbounds i8, i8* %0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = or i8 %9, 32
  %11 = icmp eq i8 %10, 120
  br i1 %11, label %12, label %15

12:                                               ; preds = %7
  %13 = call i64 @strtoul(i8* %0, i8** nonnull %3, i32 16) #11
  %14 = uitofp i64 %13 to double
  br label %17

15:                                               ; preds = %7, %2
  %16 = call nsz double @strtod(i8* %0, i8** nonnull %3) #11
  br label %17

17:                                               ; preds = %15, %12
  %18 = phi double [ %14, %12 ], [ %16, %15 ]
  %19 = load i8*, i8** %3, align 8
  %20 = icmp eq i8* %19, %0
  %21 = ptrtoint i8* %19 to i64
  br i1 %20, label %74, label %22

22:                                               ; preds = %17
  %23 = load i8, i8* %19, align 1
  %24 = icmp eq i8 %23, 100
  br i1 %24, label %25, label %35

25:                                               ; preds = %22
  %26 = getelementptr inbounds i8, i8* %19, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 66
  br i1 %28, label %29, label %38

29:                                               ; preds = %25
  %30 = fdiv nsz double %18, 2.000000e+01
  %31 = fmul nsz double %30, 0x400A934F0979A371
  %32 = tail call nsz double @llvm.exp2.f64(double %31) #11
  %33 = getelementptr inbounds i8, i8* %19, i64 2
  store i8* %33, i8** %3, align 8
  %34 = ptrtoint i8* %33 to i64
  br label %59

35:                                               ; preds = %22
  %36 = add i8 %23, -69
  %37 = icmp ult i8 %36, 54
  br i1 %37, label %38, label %64

38:                                               ; preds = %25, %35
  %39 = sext i8 %23 to i64
  %40 = add nsw i64 %39, -69
  %41 = lshr i64 13804689807149381, %40
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %59, label %44

44:                                               ; preds = %38
  %45 = getelementptr inbounds i8, i8* %19, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 105
  br i1 %47, label %48, label %54

48:                                               ; preds = %44
  %49 = getelementptr inbounds [54 x %struct.anon], [54 x %struct.anon]* @si_prefixes, i64 0, i64 %40, i32 0
  %50 = load double, double* %49, align 8
  %51 = fmul nsz double %18, %50
  %52 = getelementptr inbounds i8, i8* %19, i64 2
  store i8* %52, i8** %3, align 8
  %53 = ptrtoint i8* %52 to i64
  br label %59

54:                                               ; preds = %44
  %55 = getelementptr inbounds [54 x %struct.anon], [54 x %struct.anon]* @si_prefixes, i64 0, i64 %40, i32 1
  %56 = load double, double* %55, align 8
  %57 = fmul nsz double %18, %56
  store i8* %45, i8** %3, align 8
  %58 = ptrtoint i8* %45 to i64
  br label %59

59:                                               ; preds = %29, %38, %48, %54
  %60 = phi i64 [ %21, %38 ], [ %58, %54 ], [ %53, %48 ], [ %34, %29 ]
  %61 = phi i8* [ %19, %38 ], [ %45, %54 ], [ %52, %48 ], [ %33, %29 ]
  %62 = phi double [ %18, %38 ], [ %57, %54 ], [ %51, %48 ], [ %32, %29 ]
  %63 = load i8, i8* %61, align 1
  br label %64

64:                                               ; preds = %59, %35
  %65 = phi i8 [ %63, %59 ], [ %23, %35 ]
  %66 = phi i64 [ %60, %59 ], [ %21, %35 ]
  %67 = phi i8* [ %61, %59 ], [ %19, %35 ]
  %68 = phi double [ %62, %59 ], [ %18, %35 ]
  %69 = icmp eq i8 %65, 66
  br i1 %69, label %70, label %74

70:                                               ; preds = %64
  %71 = fmul nsz double %68, 8.000000e+00
  %72 = getelementptr inbounds i8, i8* %67, i64 1
  store i8* %72, i8** %3, align 8
  %73 = ptrtoint i8* %72 to i64
  br label %74

74:                                               ; preds = %17, %64, %70
  %75 = phi i64 [ %73, %70 ], [ %66, %64 ], [ %21, %17 ]
  %76 = phi double [ %71, %70 ], [ %68, %64 ], [ %18, %17 ]
  %77 = icmp eq i8** %1, null
  br i1 %77, label %80, label %78

78:                                               ; preds = %74
  %79 = bitcast i8** %1 to i64*
  store i64 %75, i64* %79, align 8
  br label %80

80:                                               ; preds = %74, %78
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #11
  ret double %76
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare i64 @strtoul(i8* readonly, i8** nocapture, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @strtod(i8* readonly, i8** nocapture) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av_expr_free(%struct.AVExpr*) local_unnamed_addr #0 {
  %2 = alloca %struct.AVExpr*, align 8
  store %struct.AVExpr* %0, %struct.AVExpr** %2, align 8
  %3 = icmp eq %struct.AVExpr* %0, null
  br i1 %3, label %14, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 0
  %6 = load %struct.AVExpr*, %struct.AVExpr** %5, align 8
  tail call void @av_expr_free(%struct.AVExpr* %6)
  %7 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 1
  %8 = load %struct.AVExpr*, %struct.AVExpr** %7, align 8
  tail call void @av_expr_free(%struct.AVExpr* %8)
  %9 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 2
  %10 = load %struct.AVExpr*, %struct.AVExpr** %9, align 8
  tail call void @av_expr_free(%struct.AVExpr* %10)
  %11 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 5
  %12 = bitcast double** %11 to i8*
  tail call void @av_freep(i8* %12) #11
  %13 = bitcast %struct.AVExpr** %2 to i8*
  call void @av_freep(i8* nonnull %13) #11
  br label %14

14:                                               ; preds = %1, %4
  ret void
}

declare void @av_freep(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_expr_parse(%struct.AVExpr** nocapture, i8*, i8**, i8**, double (i8*, double)**, i8**, double (i8*, double, double)**, i32, i8*) local_unnamed_addr #0 {
  %10 = alloca %struct.Parser, align 8
  %11 = alloca %struct.AVExpr*, align 8
  %12 = bitcast %struct.Parser* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %12) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 104, i1 false)
  %13 = bitcast %struct.AVExpr** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #11
  store %struct.AVExpr* null, %struct.AVExpr** %11, align 8
  %14 = tail call i64 @strlen(i8* %1) #12
  %15 = add i64 %14, 1
  %16 = tail call noalias i8* @av_malloc(i64 %15) #11
  %17 = icmp eq i8* %16, null
  br i1 %17, label %67, label %18

18:                                               ; preds = %9
  %19 = load i8, i8* %1, align 1
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %35, label %21

21:                                               ; preds = %18, %31
  %22 = phi i8 [ %33, %31 ], [ %19, %18 ]
  %23 = phi i8* [ %32, %31 ], [ %16, %18 ]
  %24 = phi i8* [ %25, %31 ], [ %1, %18 ]
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  %26 = sext i8 %22 to i32
  switch i32 %26, label %27 [
    i32 32, label %31
    i32 13, label %31
    i32 12, label %31
    i32 10, label %31
    i32 9, label %31
  ]

27:                                               ; preds = %21
  %28 = icmp eq i8 %22, 11
  br i1 %28, label %31, label %29

29:                                               ; preds = %27
  %30 = getelementptr inbounds i8, i8* %23, i64 1
  store i8 %22, i8* %23, align 1
  br label %31

31:                                               ; preds = %27, %21, %21, %21, %21, %21, %29
  %32 = phi i8* [ %23, %27 ], [ %30, %29 ], [ %23, %21 ], [ %23, %21 ], [ %23, %21 ], [ %23, %21 ], [ %23, %21 ]
  %33 = load i8, i8* %25, align 1
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %21

35:                                               ; preds = %31, %18
  %36 = phi i8* [ %16, %18 ], [ %32, %31 ]
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.Parser, %struct.Parser* %10, i64 0, i32 0
  store %struct.AVClass* @eval_class, %struct.AVClass** %37, align 8
  %38 = getelementptr inbounds %struct.Parser, %struct.Parser* %10, i64 0, i32 1
  store i32 100, i32* %38, align 8
  %39 = getelementptr inbounds %struct.Parser, %struct.Parser* %10, i64 0, i32 2
  store i8* %16, i8** %39, align 8
  %40 = getelementptr inbounds %struct.Parser, %struct.Parser* %10, i64 0, i32 4
  store i8** %2, i8*** %40, align 8
  %41 = getelementptr inbounds %struct.Parser, %struct.Parser* %10, i64 0, i32 5
  store double (i8*, double)** %4, double (i8*, double)*** %41, align 8
  %42 = getelementptr inbounds %struct.Parser, %struct.Parser* %10, i64 0, i32 6
  store i8** %3, i8*** %42, align 8
  %43 = getelementptr inbounds %struct.Parser, %struct.Parser* %10, i64 0, i32 7
  store double (i8*, double, double)** %6, double (i8*, double, double)*** %43, align 8
  %44 = getelementptr inbounds %struct.Parser, %struct.Parser* %10, i64 0, i32 8
  store i8** %5, i8*** %44, align 8
  %45 = getelementptr inbounds %struct.Parser, %struct.Parser* %10, i64 0, i32 10
  store i32 %7, i32* %45, align 8
  %46 = getelementptr inbounds %struct.Parser, %struct.Parser* %10, i64 0, i32 11
  store i8* %8, i8** %46, align 8
  %47 = call fastcc i32 @parse_expr(%struct.AVExpr** nonnull %11, %struct.Parser* nonnull %10)
  %48 = icmp slt i32 %47, 0
  br i1 %48, label %64, label %49

49:                                               ; preds = %35
  %50 = load i8*, i8** %39, align 8
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %54, label %53

53:                                               ; preds = %49
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %12, i32 16, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i8* %50, i8* %1) #11
  br label %64

54:                                               ; preds = %49
  %55 = load %struct.AVExpr*, %struct.AVExpr** %11, align 8
  %56 = call fastcc i32 @verify_expr(%struct.AVExpr* %55)
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %64, label %58

58:                                               ; preds = %54
  %59 = call noalias i8* @av_mallocz(i64 80) #11
  %60 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %55, i64 0, i32 5
  %61 = bitcast double** %60 to i8**
  store i8* %59, i8** %61, align 8
  %62 = icmp eq i8* %59, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %58
  store %struct.AVExpr* %55, %struct.AVExpr** %0, align 8
  store %struct.AVExpr* null, %struct.AVExpr** %11, align 8
  br label %64

64:                                               ; preds = %58, %54, %35, %63, %53
  %65 = phi i32 [ %47, %35 ], [ -22, %53 ], [ %47, %63 ], [ -22, %54 ], [ -12, %58 ]
  %66 = load %struct.AVExpr*, %struct.AVExpr** %11, align 8
  call void @av_expr_free(%struct.AVExpr* %66)
  call void @av_free(i8* nonnull %16) #11
  br label %67

67:                                               ; preds = %9, %64
  %68 = phi i32 [ %65, %64 ], [ -12, %9 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #11
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %12) #11
  ret i32 %68
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare noalias i8* @av_malloc(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @parse_expr(%struct.AVExpr** nocapture, %struct.Parser*) unnamed_addr #0 {
  %3 = alloca %struct.AVExpr*, align 8
  %4 = alloca %struct.AVExpr*, align 8
  %5 = bitcast %struct.AVExpr** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  store %struct.AVExpr* inttoptr (i64 -6148914691236517206 to %struct.AVExpr*), %struct.AVExpr** %3, align 8
  %6 = bitcast %struct.AVExpr** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #11
  store %struct.AVExpr* inttoptr (i64 -6148914691236517206 to %struct.AVExpr*), %struct.AVExpr** %4, align 8
  %7 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %58, label %10

10:                                               ; preds = %2
  %11 = add nsw i32 %8, -1
  store i32 %11, i32* %7, align 8
  %12 = call fastcc i32 @parse_subexpr(%struct.AVExpr** nonnull %3, %struct.Parser* %1)
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %58, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 59
  br i1 %18, label %22, label %19

19:                                               ; preds = %14
  %20 = bitcast %struct.AVExpr** %3 to i64*
  %21 = load i64, i64* %20, align 8
  br label %53

22:                                               ; preds = %14
  %23 = bitcast %struct.AVExpr** %3 to i8**
  %24 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %25 = bitcast %struct.AVExpr* %24 to i8*
  br label %26

26:                                               ; preds = %22, %39
  %27 = phi i8* [ %25, %22 ], [ %36, %39 ]
  %28 = phi %struct.AVExpr* [ %24, %22 ], [ %50, %39 ]
  %29 = phi i8* [ %16, %22 ], [ %47, %39 ]
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %30, i8** %15, align 8
  %31 = call fastcc i32 @parse_subexpr(%struct.AVExpr** nonnull %4, %struct.Parser* %1)
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %26
  store i8* %27, i8** %23, align 8
  tail call void @av_expr_free(%struct.AVExpr* %28)
  br label %58

34:                                               ; preds = %26
  %35 = load %struct.AVExpr*, %struct.AVExpr** %4, align 8
  %36 = tail call noalias i8* @av_mallocz(i64 64) #11
  %37 = icmp eq i8* %36, null
  br i1 %37, label %38, label %39

38:                                               ; preds = %34
  store i8* %27, i8** %23, align 8
  store %struct.AVExpr* null, %struct.AVExpr** %3, align 8
  tail call void @av_expr_free(%struct.AVExpr* %28)
  tail call void @av_expr_free(%struct.AVExpr* %35)
  br label %58

39:                                               ; preds = %34
  %40 = bitcast i8* %36 to i32*
  store i32 22, i32* %40, align 8
  %41 = getelementptr inbounds i8, i8* %36, i64 8
  %42 = bitcast i8* %41 to double*
  store double 1.000000e+00, double* %42, align 8
  %43 = getelementptr inbounds i8, i8* %36, i64 32
  %44 = bitcast i8* %43 to %struct.AVExpr**
  store %struct.AVExpr* %28, %struct.AVExpr** %44, align 8
  %45 = getelementptr inbounds i8, i8* %36, i64 40
  %46 = bitcast i8* %45 to %struct.AVExpr**
  store %struct.AVExpr* %35, %struct.AVExpr** %46, align 8
  %47 = load i8*, i8** %15, align 8
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 59
  %50 = bitcast i8* %36 to %struct.AVExpr*
  br i1 %49, label %26, label %51

51:                                               ; preds = %39
  store i8* %36, i8** %23, align 8
  %52 = ptrtoint i8* %36 to i64
  br label %53

53:                                               ; preds = %19, %51
  %54 = phi i64 [ %21, %19 ], [ %52, %51 ]
  %55 = load i32, i32* %7, align 8
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %7, align 8
  %57 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %54, i64* %57, align 8
  br label %58

58:                                               ; preds = %10, %2, %53, %38, %33
  %59 = phi i32 [ %31, %33 ], [ -12, %38 ], [ 0, %53 ], [ -22, %2 ], [ %12, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  ret i32 %59
}

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc i32 @verify_expr(%struct.AVExpr* readonly) unnamed_addr #5 {
  %2 = icmp eq %struct.AVExpr* %0, null
  br i1 %2, label %73, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %59 [
    i32 0, label %73
    i32 1, label %73
    i32 2, label %6
    i32 3, label %6
    i32 5, label %6
    i32 7, label %6
    i32 6, label %6
    i32 8, label %6
    i32 9, label %6
    i32 27, label %6
    i32 28, label %6
    i32 29, label %6
    i32 30, label %6
    i32 31, label %6
    i32 32, label %6
    i32 33, label %6
    i32 45, label %6
    i32 38, label %15
    i32 36, label %27
    i32 37, label %27
    i32 25, label %27
    i32 41, label %44
    i32 42, label %44
    i32 44, label %44
  ]

6:                                                ; preds = %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3
  %7 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 0
  %8 = load %struct.AVExpr*, %struct.AVExpr** %7, align 8
  %9 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %8)
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %73, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 1
  %13 = load %struct.AVExpr*, %struct.AVExpr** %12, align 8
  %14 = icmp eq %struct.AVExpr* %13, null
  br label %73

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 0
  %17 = load %struct.AVExpr*, %struct.AVExpr** %16, align 8
  %18 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %17)
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %73, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 1
  %22 = load %struct.AVExpr*, %struct.AVExpr** %21, align 8
  %23 = icmp eq %struct.AVExpr* %22, null
  br i1 %23, label %73, label %24

24:                                               ; preds = %20
  %25 = tail call fastcc i32 @verify_expr(%struct.AVExpr* nonnull %22)
  %26 = icmp ne i32 %25, 0
  br label %73

27:                                               ; preds = %3, %3, %3
  %28 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 0
  %29 = load %struct.AVExpr*, %struct.AVExpr** %28, align 8
  %30 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %29)
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %73, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 1
  %34 = load %struct.AVExpr*, %struct.AVExpr** %33, align 8
  %35 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %34)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %73, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 2
  %39 = load %struct.AVExpr*, %struct.AVExpr** %38, align 8
  %40 = icmp eq %struct.AVExpr* %39, null
  br i1 %40, label %73, label %41

41:                                               ; preds = %37
  %42 = tail call fastcc i32 @verify_expr(%struct.AVExpr* nonnull %39)
  %43 = icmp ne i32 %42, 0
  br label %73

44:                                               ; preds = %3, %3, %3
  %45 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 0
  %46 = load %struct.AVExpr*, %struct.AVExpr** %45, align 8
  %47 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %46)
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %73, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 1
  %51 = load %struct.AVExpr*, %struct.AVExpr** %50, align 8
  %52 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %51)
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %73, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 2
  %56 = load %struct.AVExpr*, %struct.AVExpr** %55, align 8
  %57 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %56)
  %58 = icmp ne i32 %57, 0
  br label %73

59:                                               ; preds = %3
  %60 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 0
  %61 = load %struct.AVExpr*, %struct.AVExpr** %60, align 8
  %62 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %61)
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %73, label %64

64:                                               ; preds = %59
  %65 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 1
  %66 = load %struct.AVExpr*, %struct.AVExpr** %65, align 8
  %67 = tail call fastcc i32 @verify_expr(%struct.AVExpr* %66)
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %73, label %69

69:                                               ; preds = %64
  %70 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 2
  %71 = load %struct.AVExpr*, %struct.AVExpr** %70, align 8
  %72 = icmp eq %struct.AVExpr* %71, null
  br label %73

73:                                               ; preds = %69, %59, %64, %54, %44, %49, %41, %27, %32, %37, %24, %15, %20, %11, %6, %3, %3, %1
  %74 = phi i1 [ false, %1 ], [ true, %3 ], [ true, %3 ], [ false, %6 ], [ %14, %11 ], [ false, %15 ], [ true, %20 ], [ %26, %24 ], [ false, %32 ], [ false, %27 ], [ true, %37 ], [ %43, %41 ], [ false, %49 ], [ false, %44 ], [ %58, %54 ], [ false, %64 ], [ false, %59 ], [ %72, %69 ]
  %75 = zext i1 %74 to i32
  ret i32 %75
}

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #3

declare void @av_free(i8*) local_unnamed_addr #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @av_expr_count_vars(%struct.AVExpr* readonly, i32*, i32) local_unnamed_addr #6 {
  %4 = tail call fastcc i32 @expr_count(%struct.AVExpr* %0, i32* %1, i32 %2, i32 1)
  ret i32 %4
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc i32 @expr_count(%struct.AVExpr* readonly, i32*, i32, i32) unnamed_addr #6 {
  %5 = icmp ne %struct.AVExpr* %0, null
  %6 = icmp ne i32* %1, null
  %7 = and i1 %5, %6
  %8 = icmp ne i32 %2, 0
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %43

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, %3
  br i1 %13, label %34, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 0
  %16 = load %struct.AVExpr*, %struct.AVExpr** %15, align 8
  %17 = icmp eq %struct.AVExpr* %16, null
  br i1 %17, label %31, label %22

18:                                               ; preds = %22
  %19 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 4, i64 %26
  %20 = load %struct.AVExpr*, %struct.AVExpr** %19, align 8
  %21 = icmp eq %struct.AVExpr* %20, null
  br i1 %21, label %31, label %22

22:                                               ; preds = %14, %18
  %23 = phi %struct.AVExpr* [ %20, %18 ], [ %16, %14 ]
  %24 = phi i64 [ %26, %18 ], [ 0, %14 ]
  %25 = tail call fastcc i32 @expr_count(%struct.AVExpr* nonnull %23, i32* nonnull %1, i32 %2, i32 %3)
  %26 = add nuw nsw i64 %24, 1
  %27 = load i32, i32* %11, align 8
  %28 = icmp ne i32 %27, %3
  %29 = icmp ult i64 %26, 3
  %30 = and i1 %29, %28
  br i1 %30, label %18, label %31

31:                                               ; preds = %18, %22, %14
  %32 = phi i32 [ %12, %14 ], [ %27, %22 ], [ %27, %18 ]
  %33 = icmp eq i32 %32, %3
  br i1 %33, label %34, label %43

34:                                               ; preds = %10, %31
  %35 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 2
  %36 = load i32, i32* %35, align 8
  %37 = icmp slt i32 %36, %2
  br i1 %37, label %38, label %43

38:                                               ; preds = %34
  %39 = sext i32 %36 to i64
  %40 = getelementptr inbounds i32, i32* %1, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = add i32 %41, 1
  store i32 %42, i32* %40, align 4
  br label %43

43:                                               ; preds = %31, %34, %38, %4
  %44 = phi i32 [ -22, %4 ], [ 0, %38 ], [ 0, %34 ], [ 0, %31 ]
  ret i32 %44
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @av_expr_count_func(%struct.AVExpr* readonly, i32*, i32, i32) local_unnamed_addr #6 {
  %5 = alloca [3 x i32], align 4
  %6 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 0
  store i32 1, i32* %6, align 4
  %7 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 1
  store i32 3, i32* %7, align 4
  %8 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 2
  store i32 4, i32* %8, align 4
  %9 = sext i32 %3 to i64
  %10 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 %9
  %11 = load i32, i32* %10, align 4
  %12 = tail call fastcc i32 @expr_count(%struct.AVExpr* %0, i32* %1, i32 %2, i32 %11)
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden double @av_expr_eval(%struct.AVExpr* readonly, double*, i8*) local_unnamed_addr #0 {
  %4 = alloca %struct.Parser, align 8
  %5 = bitcast %struct.Parser* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %5) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 96, i1 false)
  %6 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %0, i64 0, i32 5
  %7 = bitcast double** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.Parser, %struct.Parser* %4, i64 0, i32 12
  %10 = bitcast double** %9 to i64*
  store i64 %8, i64* %10, align 8
  %11 = getelementptr inbounds %struct.Parser, %struct.Parser* %4, i64 0, i32 3
  store double* %1, double** %11, align 8
  %12 = getelementptr inbounds %struct.Parser, %struct.Parser* %4, i64 0, i32 9
  store i8* %2, i8** %12, align 8
  %13 = call nsz fastcc double @eval_expr(%struct.Parser* nonnull %4, %struct.AVExpr* %0)
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %5) #11
  ret double %13
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc double @eval_expr(%struct.Parser*, %struct.AVExpr* readonly) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %482 [
    i32 0, label %12
    i32 1, label %15
    i32 2, label %26
    i32 3, label %36
    i32 4, label %49
    i32 5, label %65
    i32 6, label %73
    i32 7, label %81
    i32 8, label %98
    i32 9, label %107
    i32 27, label %117
    i32 28, label %125
    i32 29, label %133
    i32 30, label %141
    i32 45, label %149
    i32 31, label %164
    i32 32, label %172
    i32 36, label %181
    i32 37, label %201
    i32 42, label %221
    i32 41, label %243
    i32 44, label %262
    i32 38, label %275
    i32 33, label %288
    i32 24, label %5
    i32 25, label %320
    i32 26, label %371
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %7 = load %struct.AVExpr*, %struct.AVExpr** %6, align 8
  %8 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %7)
  %9 = fcmp nsz une double %8, 0.000000e+00
  br i1 %9, label %10, label %621

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 1
  br label %314

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %14 = load double, double* %13, align 8
  br label %621

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 3
  %19 = load double*, double** %18, align 8
  %20 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds double, double* %19, i64 %22
  %24 = load double, double* %23, align 8
  %25 = fmul nsz double %17, %24
  br label %621

26:                                               ; preds = %2
  %27 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %28 = load double, double* %27, align 8
  %29 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3, i32 0
  %30 = load double (double)*, double (double)** %29, align 8
  %31 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %32 = load %struct.AVExpr*, %struct.AVExpr** %31, align 8
  %33 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %32)
  %34 = tail call nsz double %30(double %33) #11
  %35 = fmul nsz double %28, %34
  ret double %35

36:                                               ; preds = %2
  %37 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %38 = load double, double* %37, align 8
  %39 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3
  %40 = bitcast %union.anon* %39 to double (i8*, double)**
  %41 = load double (i8*, double)*, double (i8*, double)** %40, align 8
  %42 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 9
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %45 = load %struct.AVExpr*, %struct.AVExpr** %44, align 8
  %46 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %45)
  %47 = tail call nsz double %41(i8* %43, double %46) #11
  %48 = fmul nsz double %38, %47
  ret double %48

49:                                               ; preds = %2
  %50 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %51 = load double, double* %50, align 8
  %52 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 3
  %53 = bitcast %union.anon* %52 to double (i8*, double, double)**
  %54 = load double (i8*, double, double)*, double (i8*, double, double)** %53, align 8
  %55 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 9
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %58 = load %struct.AVExpr*, %struct.AVExpr** %57, align 8
  %59 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %58)
  %60 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 1
  %61 = load %struct.AVExpr*, %struct.AVExpr** %60, align 8
  %62 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %61)
  %63 = tail call nsz double %54(i8* %56, double %59, double %62) #11
  %64 = fmul nsz double %51, %63
  ret double %64

65:                                               ; preds = %2
  %66 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %67 = load %struct.AVExpr*, %struct.AVExpr** %66, align 8
  %68 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %67)
  %69 = fmul nsz double %68, 4.000000e+00
  %70 = tail call nsz double @llvm.exp.f64(double %69)
  %71 = fadd nsz double %70, 1.000000e+00
  %72 = fdiv nsz double 1.000000e+00, %71
  ret double %72

73:                                               ; preds = %2
  %74 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %75 = load %struct.AVExpr*, %struct.AVExpr** %74, align 8
  %76 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %75)
  %77 = fmul nsz double %76, %76
  %78 = fmul nsz double %77, -5.000000e-01
  %79 = tail call nsz double @llvm.exp.f64(double %78)
  %80 = fdiv nsz double %79, 0x40040D931FF62705
  ret double %80

81:                                               ; preds = %2
  %82 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %83 = load double, double* %82, align 8
  %84 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 12
  %85 = load double*, double** %84, align 8
  %86 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %87 = load %struct.AVExpr*, %struct.AVExpr** %86, align 8
  %88 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %87)
  %89 = fptosi double %88 to i32
  %90 = icmp slt i32 %89, 9
  %91 = select i1 %90, i32 %89, i32 9
  %92 = icmp sgt i32 %91, 0
  %93 = select i1 %92, i32 %91, i32 0
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds double, double* %85, i64 %94
  %96 = load double, double* %95, align 8
  %97 = fmul nsz double %83, %96
  ret double %97

98:                                               ; preds = %2
  %99 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %100 = load double, double* %99, align 8
  %101 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %102 = load %struct.AVExpr*, %struct.AVExpr** %101, align 8
  %103 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %102)
  %104 = fcmp nsz uno double %103, 0.000000e+00
  %105 = uitofp i1 %104 to double
  %106 = fmul nsz double %100, %105
  ret double %106

107:                                              ; preds = %2
  %108 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %109 = load double, double* %108, align 8
  %110 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %111 = load %struct.AVExpr*, %struct.AVExpr** %110, align 8
  %112 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %111)
  %113 = tail call nsz double @llvm.fabs.f64(double %112) #13
  %114 = fcmp nsz oeq double %113, 0x7FF0000000000000
  %115 = uitofp i1 %114 to double
  %116 = fmul nsz double %109, %115
  ret double %116

117:                                              ; preds = %2
  %118 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %119 = load double, double* %118, align 8
  %120 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %121 = load %struct.AVExpr*, %struct.AVExpr** %120, align 8
  %122 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %121)
  %123 = tail call nsz double @llvm.floor.f64(double %122)
  %124 = fmul nsz double %119, %123
  ret double %124

125:                                              ; preds = %2
  %126 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %127 = load double, double* %126, align 8
  %128 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %129 = load %struct.AVExpr*, %struct.AVExpr** %128, align 8
  %130 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %129)
  %131 = tail call nsz double @llvm.ceil.f64(double %130)
  %132 = fmul nsz double %127, %131
  ret double %132

133:                                              ; preds = %2
  %134 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %135 = load double, double* %134, align 8
  %136 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %137 = load %struct.AVExpr*, %struct.AVExpr** %136, align 8
  %138 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %137)
  %139 = tail call nsz double @llvm.trunc.f64(double %138)
  %140 = fmul nsz double %135, %139
  ret double %140

141:                                              ; preds = %2
  %142 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %143 = load double, double* %142, align 8
  %144 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %145 = load %struct.AVExpr*, %struct.AVExpr** %144, align 8
  %146 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %145)
  %147 = tail call nsz double @llvm.round.f64(double %146)
  %148 = fmul nsz double %143, %147
  ret double %148

149:                                              ; preds = %2
  %150 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %151 = load double, double* %150, align 8
  %152 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %153 = load %struct.AVExpr*, %struct.AVExpr** %152, align 8
  %154 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %153)
  %155 = fcmp nsz ogt double %154, 0.000000e+00
  %156 = zext i1 %155 to i32
  %157 = load %struct.AVExpr*, %struct.AVExpr** %152, align 8
  %158 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %157)
  %159 = fcmp nsz olt double %158, 0.000000e+00
  %160 = zext i1 %159 to i32
  %161 = sub nsw i32 %156, %160
  %162 = sitofp i32 %161 to double
  %163 = fmul nsz double %151, %162
  ret double %163

164:                                              ; preds = %2
  %165 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %166 = load double, double* %165, align 8
  %167 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %168 = load %struct.AVExpr*, %struct.AVExpr** %167, align 8
  %169 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %168)
  %170 = tail call nsz double @llvm.sqrt.f64(double %169)
  %171 = fmul nsz double %166, %170
  ret double %171

172:                                              ; preds = %2
  %173 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %174 = load double, double* %173, align 8
  %175 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %176 = load %struct.AVExpr*, %struct.AVExpr** %175, align 8
  %177 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %176)
  %178 = fcmp nsz oeq double %177, 0.000000e+00
  %179 = uitofp i1 %178 to double
  %180 = fmul nsz double %174, %179
  ret double %180

181:                                              ; preds = %2
  %182 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %183 = load double, double* %182, align 8
  %184 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %185 = load %struct.AVExpr*, %struct.AVExpr** %184, align 8
  %186 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %185)
  %187 = fcmp nsz une double %186, 0.000000e+00
  br i1 %187, label %188, label %192

188:                                              ; preds = %181
  %189 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 1
  %190 = load %struct.AVExpr*, %struct.AVExpr** %189, align 8
  %191 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %190)
  br label %198

192:                                              ; preds = %181
  %193 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 2
  %194 = load %struct.AVExpr*, %struct.AVExpr** %193, align 8
  %195 = icmp eq %struct.AVExpr* %194, null
  br i1 %195, label %198, label %196

196:                                              ; preds = %192
  %197 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* nonnull %194)
  br label %198

198:                                              ; preds = %192, %196, %188
  %199 = phi double [ %191, %188 ], [ %197, %196 ], [ 0.000000e+00, %192 ]
  %200 = fmul nsz double %183, %199
  br label %621

201:                                              ; preds = %2
  %202 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %203 = load double, double* %202, align 8
  %204 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %205 = load %struct.AVExpr*, %struct.AVExpr** %204, align 8
  %206 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %205)
  %207 = fcmp nsz une double %206, 0.000000e+00
  br i1 %207, label %212, label %208

208:                                              ; preds = %201
  %209 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 1
  %210 = load %struct.AVExpr*, %struct.AVExpr** %209, align 8
  %211 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %210)
  br label %218

212:                                              ; preds = %201
  %213 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 2
  %214 = load %struct.AVExpr*, %struct.AVExpr** %213, align 8
  %215 = icmp eq %struct.AVExpr* %214, null
  br i1 %215, label %218, label %216

216:                                              ; preds = %212
  %217 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* nonnull %214)
  br label %218

218:                                              ; preds = %212, %216, %208
  %219 = phi double [ %211, %208 ], [ %217, %216 ], [ 0.000000e+00, %212 ]
  %220 = fmul nsz double %203, %219
  br label %621

221:                                              ; preds = %2
  %222 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %223 = load %struct.AVExpr*, %struct.AVExpr** %222, align 8
  %224 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %223)
  %225 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 1
  %226 = load %struct.AVExpr*, %struct.AVExpr** %225, align 8
  %227 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %226)
  %228 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 2
  %229 = load %struct.AVExpr*, %struct.AVExpr** %228, align 8
  %230 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %229)
  %231 = fcmp uno double %227, %230
  %232 = fcmp nsz uno double %224, 0.000000e+00
  %233 = or i1 %232, %231
  %234 = fcmp nsz ogt double %227, %230
  %235 = or i1 %234, %233
  br i1 %235, label %621, label %236

236:                                              ; preds = %221
  %237 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %238 = load double, double* %237, align 8
  %239 = load %struct.AVExpr*, %struct.AVExpr** %222, align 8
  %240 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %239)
  %241 = tail call nsz double asm "minsd $2, $0 \0A\09maxsd $1, $0 \0A\09", "=&x,xm,xm,0,~{dirflag},~{fpsr},~{flags}"(double %227, double %230, double %240) #12, !srcloc !2
  %242 = fmul nsz double %238, %241
  ret double %242

243:                                              ; preds = %2
  %244 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %245 = load %struct.AVExpr*, %struct.AVExpr** %244, align 8
  %246 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %245)
  %247 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %248 = load double, double* %247, align 8
  %249 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 1
  %250 = load %struct.AVExpr*, %struct.AVExpr** %249, align 8
  %251 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %250)
  %252 = fcmp nsz ult double %246, %251
  br i1 %252, label %259, label %253

253:                                              ; preds = %243
  %254 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 2
  %255 = load %struct.AVExpr*, %struct.AVExpr** %254, align 8
  %256 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %255)
  %257 = fcmp nsz ole double %246, %256
  %258 = uitofp i1 %257 to double
  br label %259

259:                                              ; preds = %243, %253
  %260 = phi double [ 0.000000e+00, %243 ], [ %258, %253 ]
  %261 = fmul nsz double %248, %260
  br label %621

262:                                              ; preds = %2
  %263 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %264 = load %struct.AVExpr*, %struct.AVExpr** %263, align 8
  %265 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %264)
  %266 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 1
  %267 = load %struct.AVExpr*, %struct.AVExpr** %266, align 8
  %268 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %267)
  %269 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 2
  %270 = load %struct.AVExpr*, %struct.AVExpr** %269, align 8
  %271 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %270)
  %272 = fsub nsz double %268, %265
  %273 = fmul nsz double %272, %271
  %274 = fadd nsz double %265, %273
  ret double %274

275:                                              ; preds = %2
  %276 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %277 = load %struct.AVExpr*, %struct.AVExpr** %276, align 8
  %278 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %277)
  %279 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 1
  %280 = load %struct.AVExpr*, %struct.AVExpr** %279, align 8
  %281 = icmp eq %struct.AVExpr* %280, null
  br i1 %281, label %285, label %282

282:                                              ; preds = %275
  %283 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* nonnull %280)
  %284 = fptosi double %283 to i32
  br label %285

285:                                              ; preds = %275, %282
  %286 = phi i32 [ %284, %282 ], [ 32, %275 ]
  %287 = bitcast %struct.Parser* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %287, i32 %286, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.60, i64 0, i64 0), double %278) #11
  br label %621

288:                                              ; preds = %2
  %289 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %290 = load %struct.AVExpr*, %struct.AVExpr** %289, align 8
  %291 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %290)
  %292 = fptosi double %291 to i32
  %293 = icmp slt i32 %292, 9
  %294 = select i1 %293, i32 %292, i32 9
  %295 = icmp sgt i32 %294, 0
  %296 = select i1 %295, i32 %294, i32 0
  %297 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 12
  %298 = load double*, double** %297, align 8
  %299 = zext i32 %296 to i64
  %300 = getelementptr inbounds double, double* %298, i64 %299
  %301 = load double, double* %300, align 8
  %302 = fcmp nsz uno double %301, 0.000000e+00
  br i1 %302, label %308, label %303

303:                                              ; preds = %288
  %304 = fptoui double %301 to i64
  %305 = mul i64 %304, 1664525
  %306 = add i64 %305, 1013904223
  %307 = uitofp i64 %306 to double
  br label %308

308:                                              ; preds = %288, %303
  %309 = phi double [ %307, %303 ], [ 0x41CE3779AF800000, %288 ]
  store double %309, double* %300, align 8
  %310 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %311 = load double, double* %310, align 8
  %312 = fmul nsz double %309, 0x3BF0000000000000
  %313 = fmul nsz double %312, %311
  br label %621

314:                                              ; preds = %10, %314
  %315 = load %struct.AVExpr*, %struct.AVExpr** %11, align 8
  %316 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %315)
  %317 = load %struct.AVExpr*, %struct.AVExpr** %6, align 8
  %318 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %317)
  %319 = fcmp nsz une double %318, 0.000000e+00
  br i1 %319, label %314, label %621

320:                                              ; preds = %2
  %321 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 1
  %322 = load %struct.AVExpr*, %struct.AVExpr** %321, align 8
  %323 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %322)
  %324 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 2
  %325 = load %struct.AVExpr*, %struct.AVExpr** %324, align 8
  %326 = icmp eq %struct.AVExpr* %325, null
  br i1 %326, label %335, label %327

327:                                              ; preds = %320
  %328 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* nonnull %325)
  %329 = fptosi double %328 to i32
  %330 = icmp slt i32 %329, 9
  %331 = select i1 %330, i32 %329, i32 9
  %332 = icmp sgt i32 %331, 0
  %333 = select i1 %332, i32 %331, i32 0
  %334 = zext i32 %333 to i64
  br label %335

335:                                              ; preds = %320, %327
  %336 = phi i64 [ %334, %327 ], [ 0, %320 ]
  %337 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 12
  %338 = load double*, double** %337, align 8
  %339 = getelementptr inbounds double, double* %338, i64 %336
  %340 = bitcast double* %339 to i64*
  %341 = load i64, i64* %340, align 8
  %342 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %343 = getelementptr inbounds double, double* %338, i64 %336
  store double 0.000000e+00, double* %343, align 8
  %344 = load %struct.AVExpr*, %struct.AVExpr** %342, align 8
  %345 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %344)
  br label %346

346:                                              ; preds = %335, %352
  %347 = phi double [ %345, %335 ], [ %362, %352 ]
  %348 = phi double [ 1.000000e+00, %335 ], [ %355, %352 ]
  %349 = phi i32 [ 0, %335 ], [ %350, %352 ]
  %350 = add nuw nsw i32 %349, 1
  %351 = icmp eq i32 %350, 1000
  br i1 %351, label %366, label %352

352:                                              ; preds = %346
  %353 = sitofp i32 %350 to double
  %354 = fdiv nsz double %323, %353
  %355 = fmul nsz double %348, %354
  %356 = load double*, double** %337, align 8
  %357 = sitofp i32 %350 to double
  %358 = getelementptr inbounds double, double* %356, i64 %336
  store double %357, double* %358, align 8
  %359 = load %struct.AVExpr*, %struct.AVExpr** %342, align 8
  %360 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %359)
  %361 = fmul nsz double %355, %360
  %362 = fadd nsz double %347, %361
  %363 = fcmp nsz oeq double %347, %362
  %364 = fcmp nsz une double %360, 0.000000e+00
  %365 = and i1 %364, %363
  br i1 %365, label %366, label %346

366:                                              ; preds = %352, %346
  %367 = phi double [ %347, %346 ], [ %362, %352 ]
  %368 = load double*, double** %337, align 8
  %369 = getelementptr inbounds double, double* %368, i64 %336
  %370 = bitcast double* %369 to i64*
  store i64 %341, i64* %370, align 8
  br label %621

371:                                              ; preds = %2
  %372 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 12
  %373 = bitcast double** %372 to i64**
  %374 = load i64*, i64** %373, align 8
  %375 = load i64, i64* %374, align 8
  %376 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 1
  %377 = load %struct.AVExpr*, %struct.AVExpr** %376, align 8
  %378 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %377)
  %379 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  br label %382

380:                                              ; preds = %437
  %381 = icmp eq i32 %443, 1024
  br i1 %381, label %475, label %382

382:                                              ; preds = %380, %371
  %383 = phi double [ 0x7FEFFFFFFFFFFFFF, %371 ], [ %439, %380 ]
  %384 = phi double [ 0xFFEFFFFFFFFFFFFF, %371 ], [ %430, %380 ]
  %385 = phi double [ -1.000000e+00, %371 ], [ %438, %380 ]
  %386 = phi double [ -1.000000e+00, %371 ], [ %429, %380 ]
  %387 = phi i32 [ -1, %371 ], [ %443, %380 ]
  %388 = icmp slt i32 %387, 255
  br i1 %388, label %389, label %398

389:                                              ; preds = %382
  %390 = and i32 %387, 255
  %391 = zext i32 %390 to i64
  %392 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %391
  %393 = load i8, i8* %392, align 1
  %394 = uitofp i8 %393 to double
  %395 = fmul nsz double %378, %394
  %396 = fdiv nsz double %395, 2.550000e+02
  %397 = load double*, double** %372, align 8
  store double %396, double* %397, align 8
  br label %419

398:                                              ; preds = %382
  %399 = add nsw i32 %387, -255
  %400 = sitofp i32 %399 to double
  %401 = tail call nsz double @llvm.pow.f64(double 9.000000e-01, double %400)
  %402 = fmul nsz double %378, %401
  %403 = load double*, double** %372, align 8
  store double %402, double* %403, align 8
  %404 = and i32 %387, 1
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %410, label %406

406:                                              ; preds = %398
  %407 = load double*, double** %372, align 8
  %408 = load double, double* %407, align 8
  %409 = fsub nsz double -0.000000e+00, %408
  store double %409, double* %407, align 8
  br label %410

410:                                              ; preds = %398, %406
  %411 = and i32 %387, 2
  %412 = icmp eq i32 %411, 0
  %413 = load double*, double** %372, align 8
  %414 = load double, double* %413, align 8
  br i1 %412, label %417, label %415

415:                                              ; preds = %410
  %416 = fadd nsz double %386, %414
  store double %416, double* %413, align 8
  br label %419

417:                                              ; preds = %410
  %418 = fadd nsz double %385, %414
  store double %418, double* %413, align 8
  br label %419

419:                                              ; preds = %415, %417, %389
  %420 = load %struct.AVExpr*, %struct.AVExpr** %379, align 8
  %421 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %420)
  %422 = fcmp nsz ole double %421, 0.000000e+00
  %423 = fcmp nsz ogt double %421, %384
  %424 = and i1 %422, %423
  br i1 %424, label %425, label %428

425:                                              ; preds = %419
  %426 = load double*, double** %372, align 8
  %427 = load double, double* %426, align 8
  br label %428

428:                                              ; preds = %419, %425
  %429 = phi double [ %427, %425 ], [ %386, %419 ]
  %430 = phi double [ %421, %425 ], [ %384, %419 ]
  %431 = fcmp nsz oge double %421, 0.000000e+00
  %432 = fcmp nsz olt double %421, %383
  %433 = and i1 %431, %432
  br i1 %433, label %434, label %437

434:                                              ; preds = %428
  %435 = load double*, double** %372, align 8
  %436 = load double, double* %435, align 8
  br label %437

437:                                              ; preds = %428, %434
  %438 = phi double [ %436, %434 ], [ %385, %428 ]
  %439 = phi double [ %421, %434 ], [ %383, %428 ]
  %440 = fcmp nsz oge double %429, 0.000000e+00
  %441 = fcmp nsz oge double %438, 0.000000e+00
  %442 = and i1 %440, %441
  %443 = add nsw i32 %387, 1
  br i1 %442, label %446, label %380

444:                                              ; preds = %471
  %445 = icmp eq i32 %474, 1000
  br i1 %445, label %475, label %446

446:                                              ; preds = %437, %444
  %447 = phi double [ %472, %444 ], [ %438, %437 ]
  %448 = phi double [ %466, %444 ], [ %429, %437 ]
  %449 = phi i32 [ %474, %444 ], [ 0, %437 ]
  %450 = fadd nsz double %448, %447
  %451 = fmul nsz double %450, 5.000000e-01
  %452 = load double*, double** %372, align 8
  store double %451, double* %452, align 8
  %453 = load double*, double** %372, align 8
  %454 = load double, double* %453, align 8
  %455 = fcmp nsz oeq double %448, %454
  %456 = fcmp nsz oeq double %447, %454
  %457 = or i1 %455, %456
  br i1 %457, label %475, label %458

458:                                              ; preds = %446
  %459 = load %struct.AVExpr*, %struct.AVExpr** %379, align 8
  %460 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %459)
  %461 = fcmp nsz ugt double %460, 0.000000e+00
  br i1 %461, label %465, label %462

462:                                              ; preds = %458
  %463 = load double*, double** %372, align 8
  %464 = load double, double* %463, align 8
  br label %465

465:                                              ; preds = %458, %462
  %466 = phi double [ %464, %462 ], [ %448, %458 ]
  %467 = fcmp nsz ult double %460, 0.000000e+00
  br i1 %467, label %471, label %468

468:                                              ; preds = %465
  %469 = load double*, double** %372, align 8
  %470 = load double, double* %469, align 8
  br label %471

471:                                              ; preds = %465, %468
  %472 = phi double [ %470, %468 ], [ %447, %465 ]
  %473 = fcmp nsz uno double %460, 0.000000e+00
  %474 = add nuw nsw i32 %449, 1
  br i1 %473, label %475, label %444

475:                                              ; preds = %380, %471, %446, %444
  %476 = phi double [ %466, %444 ], [ %448, %446 ], [ %460, %471 ], [ %429, %380 ]
  %477 = phi double [ %472, %444 ], [ %447, %446 ], [ %460, %471 ], [ %438, %380 ]
  %478 = load i64*, i64** %373, align 8
  store i64 %375, i64* %478, align 8
  %479 = fsub nsz double -0.000000e+00, %430
  %480 = fcmp nsz ogt double %439, %479
  %481 = select i1 %480, double %476, double %477
  br label %621

482:                                              ; preds = %2
  %483 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 0
  %484 = load %struct.AVExpr*, %struct.AVExpr** %483, align 8
  %485 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %484)
  %486 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 4, i64 1
  %487 = load %struct.AVExpr*, %struct.AVExpr** %486, align 8
  %488 = tail call nsz fastcc double @eval_expr(%struct.Parser* %0, %struct.AVExpr* %487)
  %489 = load i32, i32* %3, align 8
  switch i32 %489, label %621 [
    i32 10, label %490
    i32 35, label %501
    i32 11, label %509
    i32 12, label %515
    i32 13, label %521
    i32 14, label %527
    i32 15, label %533
    i32 17, label %539
    i32 16, label %545
    i32 18, label %551
    i32 19, label %556
    i32 20, label %561
    i32 21, label %569
    i32 22, label %574
    i32 23, label %578
    i32 34, label %591
    i32 43, label %596
    i32 39, label %601
    i32 40, label %611
  ]

490:                                              ; preds = %482
  %491 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %492 = load double, double* %491, align 8
  %493 = fcmp nsz une double %488, 0.000000e+00
  %494 = fdiv nsz double %485, %488
  %495 = fmul nsz double %485, 0x7FF0000000000000
  %496 = select i1 %493, double %494, double %495
  %497 = tail call nsz double @llvm.floor.f64(double %496)
  %498 = fmul nsz double %488, %497
  %499 = fsub nsz double %485, %498
  %500 = fmul nsz double %499, %492
  br label %621

501:                                              ; preds = %482
  %502 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %503 = load double, double* %502, align 8
  %504 = fptosi double %485 to i64
  %505 = fptosi double %488 to i64
  %506 = tail call i64 @av_gcd(i64 %504, i64 %505) #14
  %507 = sitofp i64 %506 to double
  %508 = fmul nsz double %503, %507
  br label %621

509:                                              ; preds = %482
  %510 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %511 = load double, double* %510, align 8
  %512 = fcmp nsz ogt double %485, %488
  %513 = select i1 %512, double %485, double %488
  %514 = fmul nsz double %513, %511
  br label %621

515:                                              ; preds = %482
  %516 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %517 = load double, double* %516, align 8
  %518 = fcmp nsz olt double %485, %488
  %519 = select i1 %518, double %485, double %488
  %520 = fmul nsz double %519, %517
  br label %621

521:                                              ; preds = %482
  %522 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %523 = load double, double* %522, align 8
  %524 = fcmp nsz oeq double %485, %488
  %525 = select nsz i1 %524, double 1.000000e+00, double 0.000000e+00
  %526 = fmul nsz double %525, %523
  br label %621

527:                                              ; preds = %482
  %528 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %529 = load double, double* %528, align 8
  %530 = fcmp nsz ogt double %485, %488
  %531 = select nsz i1 %530, double 1.000000e+00, double 0.000000e+00
  %532 = fmul nsz double %531, %529
  br label %621

533:                                              ; preds = %482
  %534 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %535 = load double, double* %534, align 8
  %536 = fcmp nsz oge double %485, %488
  %537 = select nsz i1 %536, double 1.000000e+00, double 0.000000e+00
  %538 = fmul nsz double %537, %535
  br label %621

539:                                              ; preds = %482
  %540 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %541 = load double, double* %540, align 8
  %542 = fcmp nsz olt double %485, %488
  %543 = select nsz i1 %542, double 1.000000e+00, double 0.000000e+00
  %544 = fmul nsz double %543, %541
  br label %621

545:                                              ; preds = %482
  %546 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %547 = load double, double* %546, align 8
  %548 = fcmp nsz ole double %485, %488
  %549 = select nsz i1 %548, double 1.000000e+00, double 0.000000e+00
  %550 = fmul nsz double %549, %547
  br label %621

551:                                              ; preds = %482
  %552 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %553 = load double, double* %552, align 8
  %554 = tail call nsz double @llvm.pow.f64(double %485, double %488)
  %555 = fmul nsz double %554, %553
  br label %621

556:                                              ; preds = %482
  %557 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %558 = load double, double* %557, align 8
  %559 = fmul nsz double %485, %488
  %560 = fmul nsz double %559, %558
  br label %621

561:                                              ; preds = %482
  %562 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %563 = load double, double* %562, align 8
  %564 = fcmp nsz une double %488, 0.000000e+00
  %565 = fdiv nsz double %485, %488
  %566 = fmul nsz double %485, 0x7FF0000000000000
  %567 = select i1 %564, double %565, double %566
  %568 = fmul nsz double %567, %563
  br label %621

569:                                              ; preds = %482
  %570 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %571 = load double, double* %570, align 8
  %572 = fadd nsz double %485, %488
  %573 = fmul nsz double %572, %571
  br label %621

574:                                              ; preds = %482
  %575 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %576 = load double, double* %575, align 8
  %577 = fmul nsz double %488, %576
  br label %621

578:                                              ; preds = %482
  %579 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %580 = load double, double* %579, align 8
  %581 = getelementptr inbounds %struct.Parser, %struct.Parser* %0, i64 0, i32 12
  %582 = load double*, double** %581, align 8
  %583 = fptosi double %485 to i32
  %584 = icmp slt i32 %583, 9
  %585 = select i1 %584, i32 %583, i32 9
  %586 = icmp sgt i32 %585, 0
  %587 = select i1 %586, i32 %585, i32 0
  %588 = zext i32 %587 to i64
  %589 = getelementptr inbounds double, double* %582, i64 %588
  store double %488, double* %589, align 8
  %590 = fmul nsz double %488, %580
  br label %621

591:                                              ; preds = %482
  %592 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %593 = load double, double* %592, align 8
  %594 = tail call nsz double @hypot(double %485, double %488) #14
  %595 = fmul nsz double %593, %594
  br label %621

596:                                              ; preds = %482
  %597 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %598 = load double, double* %597, align 8
  %599 = tail call nsz double @atan2(double %485, double %488) #14
  %600 = fmul nsz double %598, %599
  br label %621

601:                                              ; preds = %482
  %602 = fcmp uno double %485, %488
  br i1 %602, label %621, label %603

603:                                              ; preds = %601
  %604 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %605 = load double, double* %604, align 8
  %606 = fptosi double %485 to i64
  %607 = fptosi double %488 to i64
  %608 = and i64 %607, %606
  %609 = sitofp i64 %608 to double
  %610 = fmul nsz double %605, %609
  br label %621

611:                                              ; preds = %482
  %612 = fcmp uno double %485, %488
  br i1 %612, label %621, label %613

613:                                              ; preds = %611
  %614 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %1, i64 0, i32 1
  %615 = load double, double* %614, align 8
  %616 = fptosi double %485 to i64
  %617 = fptosi double %488 to i64
  %618 = or i64 %617, %616
  %619 = sitofp i64 %618 to double
  %620 = fmul nsz double %615, %619
  br label %621

621:                                              ; preds = %314, %5, %12, %15, %198, %218, %259, %285, %308, %366, %475, %221, %613, %611, %603, %601, %490, %501, %509, %515, %521, %527, %533, %539, %545, %551, %556, %561, %569, %574, %578, %591, %596, %482
  %622 = phi double [ 0x7FF8000000000000, %482 ], [ 0x7FF8000000000000, %611 ], [ %620, %613 ], [ 0x7FF8000000000000, %601 ], [ %610, %603 ], [ %500, %490 ], [ %508, %501 ], [ %514, %509 ], [ %520, %515 ], [ %526, %521 ], [ %532, %527 ], [ %538, %533 ], [ %544, %539 ], [ %550, %545 ], [ %555, %551 ], [ %560, %556 ], [ %568, %561 ], [ %573, %569 ], [ %577, %574 ], [ %590, %578 ], [ %595, %591 ], [ %600, %596 ], [ %481, %475 ], [ %367, %366 ], [ %313, %308 ], [ %278, %285 ], [ %261, %259 ], [ %220, %218 ], [ %200, %198 ], [ %25, %15 ], [ %14, %12 ], [ 0x7FF8000000000000, %221 ], [ 0x7FF8000000000000, %5 ], [ %316, %314 ]
  ret double %622
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_expr_parse_and_eval(double* nocapture, i8*, i8**, double*, i8**, double (i8*, double)**, i8**, double (i8*, double, double)**, i8*, i32, i8*) local_unnamed_addr #0 {
  %12 = alloca %struct.Parser, align 8
  %13 = alloca %struct.AVExpr*, align 8
  %14 = bitcast %struct.AVExpr** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #11
  store %struct.AVExpr* null, %struct.AVExpr** %13, align 8
  %15 = call i32 @av_expr_parse(%struct.AVExpr** nonnull %13, i8* %1, i8** %2, i8** %4, double (i8*, double)** %5, i8** %6, double (i8*, double, double)** %7, i32 %9, i8* %10)
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %11
  store double 0x7FF8000000000000, double* %0, align 8
  br label %32

18:                                               ; preds = %11
  %19 = load %struct.AVExpr*, %struct.AVExpr** %13, align 8
  %20 = bitcast %struct.Parser* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %20) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 96, i1 false) #11
  %21 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %19, i64 0, i32 5
  %22 = bitcast double** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %struct.Parser, %struct.Parser* %12, i64 0, i32 12
  %25 = bitcast double** %24 to i64*
  store i64 %23, i64* %25, align 8
  %26 = getelementptr inbounds %struct.Parser, %struct.Parser* %12, i64 0, i32 3
  store double* %3, double** %26, align 8
  %27 = getelementptr inbounds %struct.Parser, %struct.Parser* %12, i64 0, i32 9
  store i8* %8, i8** %27, align 8
  %28 = call nsz fastcc double @eval_expr(%struct.Parser* nonnull %12, %struct.AVExpr* %19) #11
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %20) #11
  store double %28, double* %0, align 8
  call void @av_expr_free(%struct.AVExpr* %19)
  %29 = load double, double* %0, align 8
  %30 = fcmp nsz uno double %29, 0.000000e+00
  %31 = select i1 %30, i32 -22, i32 0
  br label %32

32:                                               ; preds = %18, %17
  %33 = phi i32 [ %15, %17 ], [ %31, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #11
  ret i32 %33
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.exp2.f64(double) #7

declare i8* @av_default_item_name(i8*) #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @parse_subexpr(%struct.AVExpr** nocapture, %struct.Parser*) unnamed_addr #0 {
  %3 = alloca %struct.AVExpr*, align 8
  %4 = alloca %struct.AVExpr*, align 8
  %5 = bitcast %struct.AVExpr** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  store %struct.AVExpr* inttoptr (i64 -6148914691236517206 to %struct.AVExpr*), %struct.AVExpr** %3, align 8
  %6 = bitcast %struct.AVExpr** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #11
  store %struct.AVExpr* inttoptr (i64 -6148914691236517206 to %struct.AVExpr*), %struct.AVExpr** %4, align 8
  %7 = call fastcc i32 @parse_term(%struct.AVExpr** nonnull %3, %struct.Parser* %1)
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %38, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 2
  %11 = bitcast %struct.AVExpr** %3 to i8**
  %12 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %13 = bitcast %struct.AVExpr* %12 to i8*
  br label %14

14:                                               ; preds = %9, %28
  %15 = phi i8* [ %13, %9 ], [ %25, %28 ]
  %16 = phi %struct.AVExpr* [ %12, %9 ], [ %36, %28 ]
  %17 = load i8*, i8** %10, align 8
  %18 = load i8, i8* %17, align 1
  switch i8 %18, label %37 [
    i8 45, label %19
    i8 43, label %19
  ]

19:                                               ; preds = %14, %14
  %20 = call fastcc i32 @parse_term(%struct.AVExpr** nonnull %4, %struct.Parser* %1)
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  store i8* %15, i8** %11, align 8
  tail call void @av_expr_free(%struct.AVExpr* %16)
  br label %38

23:                                               ; preds = %19
  %24 = load %struct.AVExpr*, %struct.AVExpr** %4, align 8
  %25 = tail call noalias i8* @av_mallocz(i64 64) #11
  %26 = icmp eq i8* %25, null
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  store i8* %15, i8** %11, align 8
  store %struct.AVExpr* null, %struct.AVExpr** %3, align 8
  tail call void @av_expr_free(%struct.AVExpr* %16)
  tail call void @av_expr_free(%struct.AVExpr* %24)
  br label %38

28:                                               ; preds = %23
  %29 = bitcast i8* %25 to i32*
  store i32 21, i32* %29, align 8
  %30 = getelementptr inbounds i8, i8* %25, i64 8
  %31 = bitcast i8* %30 to double*
  store double 1.000000e+00, double* %31, align 8
  %32 = getelementptr inbounds i8, i8* %25, i64 32
  %33 = bitcast i8* %32 to %struct.AVExpr**
  store %struct.AVExpr* %16, %struct.AVExpr** %33, align 8
  %34 = getelementptr inbounds i8, i8* %25, i64 40
  %35 = bitcast i8* %34 to %struct.AVExpr**
  store %struct.AVExpr* %24, %struct.AVExpr** %35, align 8
  %36 = bitcast i8* %25 to %struct.AVExpr*
  br label %14

37:                                               ; preds = %14
  store i8* %15, i8** %11, align 8
  store %struct.AVExpr* %16, %struct.AVExpr** %0, align 8
  br label %38

38:                                               ; preds = %2, %37, %27, %22
  %39 = phi i32 [ %20, %22 ], [ -12, %27 ], [ 0, %37 ], [ %7, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  ret i32 %39
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @parse_term(%struct.AVExpr** nocapture, %struct.Parser*) unnamed_addr #0 {
  %3 = alloca %struct.AVExpr*, align 8
  %4 = alloca %struct.AVExpr*, align 8
  %5 = bitcast %struct.AVExpr** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  store %struct.AVExpr* inttoptr (i64 -6148914691236517206 to %struct.AVExpr*), %struct.AVExpr** %3, align 8
  %6 = bitcast %struct.AVExpr** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #11
  store %struct.AVExpr* inttoptr (i64 -6148914691236517206 to %struct.AVExpr*), %struct.AVExpr** %4, align 8
  %7 = call fastcc i32 @parse_factor(%struct.AVExpr** nonnull %3, %struct.Parser* %1)
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %41, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 2
  %11 = bitcast %struct.AVExpr** %3 to i8**
  br label %12

12:                                               ; preds = %9, %27
  %13 = load i8*, i8** %10, align 8
  %14 = load i8, i8* %13, align 1
  switch i8 %14, label %37 [
    i8 42, label %15
    i8 47, label %15
  ]

15:                                               ; preds = %12, %12
  %16 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %16, i8** %10, align 8
  %17 = load i8, i8* %13, align 1
  %18 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %19 = call fastcc i32 @parse_factor(%struct.AVExpr** nonnull %4, %struct.Parser* %1)
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %15
  tail call void @av_expr_free(%struct.AVExpr* %18)
  br label %41

22:                                               ; preds = %15
  %23 = load %struct.AVExpr*, %struct.AVExpr** %4, align 8
  %24 = tail call noalias i8* @av_mallocz(i64 64) #11
  %25 = icmp eq i8* %24, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  store %struct.AVExpr* null, %struct.AVExpr** %3, align 8
  tail call void @av_expr_free(%struct.AVExpr* %18)
  tail call void @av_expr_free(%struct.AVExpr* %23)
  br label %41

27:                                               ; preds = %22
  %28 = icmp eq i8 %17, 42
  %29 = select i1 %28, i32 19, i32 20
  %30 = bitcast i8* %24 to i32*
  store i32 %29, i32* %30, align 8
  %31 = getelementptr inbounds i8, i8* %24, i64 8
  %32 = bitcast i8* %31 to double*
  store double 1.000000e+00, double* %32, align 8
  %33 = getelementptr inbounds i8, i8* %24, i64 32
  %34 = bitcast i8* %33 to %struct.AVExpr**
  store %struct.AVExpr* %18, %struct.AVExpr** %34, align 8
  %35 = getelementptr inbounds i8, i8* %24, i64 40
  %36 = bitcast i8* %35 to %struct.AVExpr**
  store %struct.AVExpr* %23, %struct.AVExpr** %36, align 8
  store i8* %24, i8** %11, align 8
  br label %12

37:                                               ; preds = %12
  %38 = bitcast %struct.AVExpr** %3 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %39, i64* %40, align 8
  br label %41

41:                                               ; preds = %26, %21, %2, %37
  %42 = phi i32 [ 0, %37 ], [ %7, %2 ], [ -12, %26 ], [ %19, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  ret i32 %42
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @parse_factor(%struct.AVExpr** nocapture, %struct.Parser*) unnamed_addr #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.AVExpr*, align 8
  %6 = alloca %struct.AVExpr*, align 8
  %7 = bitcast %struct.AVExpr** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #11
  store %struct.AVExpr* inttoptr (i64 -6148914691236517206 to %struct.AVExpr*), %struct.AVExpr** %5, align 8
  %8 = bitcast %struct.AVExpr** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #11
  store %struct.AVExpr* inttoptr (i64 -6148914691236517206 to %struct.AVExpr*), %struct.AVExpr** %6, align 8
  %9 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 45
  br i1 %12, label %13, label %30

13:                                               ; preds = %2
  %14 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #11
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %15 = call nsz double @strtod(i8* %10, i8** nonnull %3) #11
  %16 = load i8*, i8** %3, align 8
  %17 = load i8*, i8** %9, align 8
  %18 = icmp eq i8* %16, %17
  br i1 %18, label %26, label %19

19:                                               ; preds = %13
  %20 = load i8, i8* %16, align 1
  %21 = icmp eq i8 %20, 100
  br i1 %21, label %22, label %26

22:                                               ; preds = %19
  %23 = getelementptr inbounds i8, i8* %16, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 66
  br i1 %25, label %28, label %26

26:                                               ; preds = %13, %22, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #11
  %27 = load i8, i8* %17, align 1
  br label %30

28:                                               ; preds = %22
  %29 = call fastcc i32 @parse_primary(%struct.AVExpr** nonnull %5, %struct.Parser* %1) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #11
  br label %44

30:                                               ; preds = %26, %2
  %31 = phi i8 [ %27, %26 ], [ %11, %2 ]
  %32 = phi i8* [ %17, %26 ], [ %10, %2 ]
  %33 = icmp eq i8 %31, 43
  %34 = zext i1 %33 to i32
  %35 = icmp eq i8 %31, 45
  %36 = zext i1 %35 to i32
  %37 = sub nsw i32 %34, %36
  %38 = and i32 %37, 1
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %32, i64 %39
  store i8* %40, i8** %9, align 8
  %41 = call fastcc i32 @parse_primary(%struct.AVExpr** nonnull %5, %struct.Parser* %1) #11
  %42 = or i32 %37, 1
  %43 = sitofp i32 %42 to double
  br label %44

44:                                               ; preds = %28, %30
  %45 = phi double [ %43, %30 ], [ 1.000000e+00, %28 ]
  %46 = phi i32 [ %41, %30 ], [ %29, %28 ]
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %136, label %48

48:                                               ; preds = %44
  %49 = load i8*, i8** %9, align 8
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %50, 94
  %52 = load %struct.AVExpr*, %struct.AVExpr** %5, align 8
  %53 = ptrtoint %struct.AVExpr* %52 to i64
  br i1 %51, label %54, label %126

54:                                               ; preds = %48
  %55 = bitcast i8** %4 to i8*
  %56 = bitcast %struct.AVExpr** %5 to i8**
  %57 = load i8*, i8** %56, align 8
  br label %58

58:                                               ; preds = %54, %119
  %59 = phi i8* [ %57, %54 ], [ %100, %119 ]
  %60 = phi %struct.AVExpr* [ %52, %54 ], [ %112, %119 ]
  %61 = phi i8* [ %49, %54 ], [ %120, %119 ]
  %62 = getelementptr inbounds i8, i8* %61, i64 1
  store i8* %62, i8** %9, align 8
  %63 = load i8, i8* %62, align 1
  %64 = icmp eq i8 %63, 45
  br i1 %64, label %65, label %81

65:                                               ; preds = %58
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #11
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %66 = call nsz double @strtod(i8* %62, i8** nonnull %4) #11
  %67 = load i8*, i8** %4, align 8
  %68 = load i8*, i8** %9, align 8
  %69 = icmp eq i8* %67, %68
  br i1 %69, label %77, label %70

70:                                               ; preds = %65
  %71 = load i8, i8* %67, align 1
  %72 = icmp eq i8 %71, 100
  br i1 %72, label %73, label %77

73:                                               ; preds = %70
  %74 = getelementptr inbounds i8, i8* %67, i64 1
  %75 = load i8, i8* %74, align 1
  %76 = icmp eq i8 %75, 66
  br i1 %76, label %79, label %77

77:                                               ; preds = %65, %73, %70
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #11
  %78 = load i8, i8* %68, align 1
  br label %81

79:                                               ; preds = %73
  %80 = call fastcc i32 @parse_primary(%struct.AVExpr** nonnull %6, %struct.Parser* %1) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #11
  br label %93

81:                                               ; preds = %77, %58
  %82 = phi i8 [ %78, %77 ], [ %63, %58 ]
  %83 = phi i8* [ %68, %77 ], [ %62, %58 ]
  %84 = icmp eq i8 %82, 43
  %85 = zext i1 %84 to i32
  %86 = icmp eq i8 %82, 45
  %87 = zext i1 %86 to i32
  %88 = sub nsw i32 %85, %87
  %89 = and i32 %88, 1
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %83, i64 %90
  store i8* %91, i8** %9, align 8
  %92 = call fastcc i32 @parse_primary(%struct.AVExpr** nonnull %6, %struct.Parser* %1) #11
  br label %93

93:                                               ; preds = %79, %81
  %94 = phi i32 [ %88, %81 ], [ 0, %79 ]
  %95 = phi i32 [ %92, %81 ], [ %80, %79 ]
  %96 = icmp slt i32 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %93
  store i8* %59, i8** %56, align 8
  tail call void @av_expr_free(%struct.AVExpr* %60)
  br label %136

98:                                               ; preds = %93
  %99 = load %struct.AVExpr*, %struct.AVExpr** %6, align 8
  %100 = tail call noalias i8* @av_mallocz(i64 64) #11
  %101 = icmp eq i8* %100, null
  br i1 %101, label %102, label %103

102:                                              ; preds = %98
  store i8* %59, i8** %56, align 8
  store %struct.AVExpr* null, %struct.AVExpr** %5, align 8
  tail call void @av_expr_free(%struct.AVExpr* %60)
  tail call void @av_expr_free(%struct.AVExpr* %99)
  br label %136

103:                                              ; preds = %98
  %104 = bitcast i8* %100 to i32*
  store i32 18, i32* %104, align 8
  %105 = getelementptr inbounds i8, i8* %100, i64 8
  %106 = bitcast i8* %105 to double*
  store double 1.000000e+00, double* %106, align 8
  %107 = getelementptr inbounds i8, i8* %100, i64 32
  %108 = bitcast i8* %107 to %struct.AVExpr**
  store %struct.AVExpr* %60, %struct.AVExpr** %108, align 8
  %109 = getelementptr inbounds i8, i8* %100, i64 40
  %110 = bitcast i8* %109 to %struct.AVExpr**
  store %struct.AVExpr* %99, %struct.AVExpr** %110, align 8
  %111 = icmp eq %struct.AVExpr* %99, null
  %112 = bitcast i8* %100 to %struct.AVExpr*
  br i1 %111, label %119, label %113

113:                                              ; preds = %103
  %114 = or i32 %94, 1
  %115 = sitofp i32 %114 to double
  %116 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %99, i64 0, i32 1
  %117 = load double, double* %116, align 8
  %118 = fmul nsz double %117, %115
  store double %118, double* %116, align 8
  br label %119

119:                                              ; preds = %103, %113
  %120 = load i8*, i8** %9, align 8
  %121 = load i8, i8* %120, align 1
  %122 = icmp eq i8 %121, 94
  br i1 %122, label %58, label %123

123:                                              ; preds = %119
  store i8* %100, i8** %56, align 8
  %124 = bitcast i8* %100 to %struct.AVExpr*
  %125 = ptrtoint i8* %100 to i64
  br label %126

126:                                              ; preds = %123, %48
  %127 = phi i64 [ %53, %48 ], [ %125, %123 ]
  %128 = phi %struct.AVExpr* [ %52, %48 ], [ %124, %123 ]
  %129 = icmp eq %struct.AVExpr* %128, null
  br i1 %129, label %134, label %130

130:                                              ; preds = %126
  %131 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %128, i64 0, i32 1
  %132 = load double, double* %131, align 8
  %133 = fmul nsz double %45, %132
  store double %133, double* %131, align 8
  br label %134

134:                                              ; preds = %126, %130
  %135 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %127, i64* %135, align 8
  br label %136

136:                                              ; preds = %44, %134, %102, %97
  %137 = phi i32 [ %95, %97 ], [ -12, %102 ], [ 0, %134 ], [ %46, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #11
  ret i32 %137
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @parse_primary(%struct.AVExpr** nocapture, %struct.Parser*) unnamed_addr #0 {
  %3 = alloca %struct.AVExpr*, align 8
  %4 = alloca i8*, align 8
  %5 = bitcast %struct.AVExpr** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  %6 = tail call noalias i8* @av_mallocz(i64 64) #11
  %7 = bitcast %struct.AVExpr** %3 to i8**
  store i8* %6, i8** %7, align 8
  %8 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #11
  %9 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 2
  %10 = bitcast i8** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast i8** %4 to i64*
  store i64 %11, i64* %12, align 8
  %13 = inttoptr i64 %11 to i8*
  %14 = icmp eq i8* %6, null
  br i1 %14, label %710, label %15

15:                                               ; preds = %2
  %16 = call nsz double @av_strtod(i8* %13, i8** nonnull %4)
  %17 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %18 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %17, i64 0, i32 1
  store double %16, double* %18, align 8
  %19 = load i8*, i8** %4, align 8
  %20 = load i8*, i8** %9, align 8
  %21 = icmp eq i8* %19, %20
  br i1 %21, label %28, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %17, i64 0, i32 0
  store i32 0, i32* %23, align 8
  %24 = load i64, i64* %12, align 8
  store i64 %24, i64* %10, align 8
  %25 = bitcast %struct.AVExpr** %3 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %26, i64* %27, align 8
  br label %710

28:                                               ; preds = %15
  store double 1.000000e+00, double* %18, align 8
  %29 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 4
  %30 = load i8**, i8*** %29, align 8
  %31 = icmp eq i8** %30, null
  br i1 %31, label %80, label %32

32:                                               ; preds = %28
  %33 = load i8*, i8** %30, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %80, label %35

35:                                               ; preds = %32
  %36 = load i8*, i8** %9, align 8
  %37 = load i8, i8* %36, align 1
  br label %38

38:                                               ; preds = %35, %75
  %39 = phi i8* [ %78, %75 ], [ %33, %35 ]
  %40 = phi i64 [ %76, %75 ], [ 0, %35 ]
  %41 = load i8, i8* %39, align 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %55, label %49

43:                                               ; preds = %49
  %44 = getelementptr inbounds i8, i8* %39, i64 %54
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 0
  %47 = getelementptr inbounds i8, i8* %36, i64 %54
  %48 = load i8, i8* %47, align 1
  br i1 %46, label %55, label %49

49:                                               ; preds = %38, %43
  %50 = phi i64 [ %54, %43 ], [ 0, %38 ]
  %51 = phi i8 [ %48, %43 ], [ %37, %38 ]
  %52 = phi i8 [ %45, %43 ], [ %41, %38 ]
  %53 = icmp eq i8 %52, %51
  %54 = add nuw i64 %50, 1
  br i1 %53, label %43, label %75

55:                                               ; preds = %43, %38
  %56 = phi i8 [ %37, %38 ], [ %48, %43 ]
  %57 = sext i8 %56 to i32
  %58 = add nsw i32 %57, -48
  %59 = icmp ugt i32 %58, 9
  %60 = and i32 %57, -33
  %61 = add nsw i32 %60, -65
  %62 = icmp ugt i32 %61, 25
  %63 = icmp ne i8 %56, 95
  %64 = and i1 %59, %62
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %75

66:                                               ; preds = %55
  %67 = trunc i64 %40 to i32
  %68 = call i64 @strlen(i8* nonnull %39) #12
  %69 = getelementptr inbounds i8, i8* %36, i64 %68
  store i8* %69, i8** %9, align 8
  %70 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %17, i64 0, i32 0
  store i32 1, i32* %70, align 8
  %71 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %72 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %71, i64 0, i32 2
  store i32 %67, i32* %72, align 8
  %73 = ptrtoint %struct.AVExpr* %71 to i64
  %74 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %73, i64* %74, align 8
  br label %710

75:                                               ; preds = %49, %55
  %76 = add nuw i64 %40, 1
  %77 = getelementptr inbounds i8*, i8** %30, i64 %76
  %78 = load i8*, i8** %77, align 8
  %79 = icmp eq i8* %78, null
  br i1 %79, label %80, label %38

80:                                               ; preds = %75, %32, %28
  %81 = load i8*, i8** %9, align 8
  %82 = load i8, i8* %81, align 1
  switch i8 %82, label %1712 [
    i8 69, label %83
    i8 80, label %1697
    i8 81, label %1708
  ]

83:                                               ; preds = %80
  %84 = getelementptr inbounds i8, i8* %81, i64 1
  %85 = load i8, i8* %84, align 1
  %86 = sext i8 %85 to i32
  %87 = add nsw i32 %86, -48
  %88 = icmp ugt i32 %87, 9
  %89 = and i32 %86, -33
  %90 = add nsw i32 %89, -65
  %91 = icmp ugt i32 %90, 25
  %92 = icmp ne i8 %85, 95
  %93 = and i1 %88, %91
  %94 = and i1 %92, %93
  br i1 %94, label %95, label %1696

95:                                               ; preds = %1743, %1759, %1771, %83
  %96 = phi i64 [ 0, %83 ], [ 1, %1771 ], [ 2, %1759 ], [ 3, %1743 ]
  %97 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i64 0, i64 0), %83 ], [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i64 0, i64 0), %1771 ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str.58, i64 0, i64 0), %1759 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.59, i64 0, i64 0), %1743 ]
  %98 = call i64 @strlen(i8* nonnull %97) #12
  %99 = getelementptr inbounds i8, i8* %81, i64 %98
  store i8* %99, i8** %9, align 8
  %100 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %17, i64 0, i32 0
  store i32 0, i32* %100, align 8
  %101 = getelementptr inbounds [4 x %struct.anon.0], [4 x %struct.anon.0]* @constants, i64 0, i64 %96, i32 1
  %102 = bitcast double* %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %105 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %104, i64 0, i32 1
  %106 = bitcast double* %105 to i64*
  store i64 %103, i64* %106, align 8
  %107 = ptrtoint %struct.AVExpr* %104 to i64
  %108 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %107, i64* %108, align 8
  br label %710

109:                                              ; preds = %1712
  %110 = bitcast %struct.Parser* %1 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %110, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0), i8* %13) #11
  %111 = load i64, i64* %12, align 8
  store i64 %111, i64* %10, align 8
  %112 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  call void @av_expr_free(%struct.AVExpr* %112)
  br label %710

113:                                              ; preds = %1712
  %114 = getelementptr inbounds i8, i8* %1713, i64 1
  store i8* %114, i8** %9, align 8
  %115 = load i8, i8* %19, align 1
  %116 = icmp eq i8 %115, 40
  br i1 %116, label %117, label %132

117:                                              ; preds = %113
  call void @av_freep(i8* nonnull %5) #11
  %118 = call fastcc i32 @parse_expr(%struct.AVExpr** nonnull %3, %struct.Parser* %1)
  %119 = icmp slt i32 %118, 0
  br i1 %119, label %710, label %120

120:                                              ; preds = %117
  %121 = load i8*, i8** %9, align 8
  %122 = load i8, i8* %121, align 1
  %123 = icmp eq i8 %122, 41
  br i1 %123, label %127, label %124

124:                                              ; preds = %120
  %125 = bitcast %struct.Parser* %1 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %125, i32 16, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i8* %13) #11
  %126 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  call void @av_expr_free(%struct.AVExpr* %126)
  br label %710

127:                                              ; preds = %120
  %128 = getelementptr inbounds i8, i8* %121, i64 1
  store i8* %128, i8** %9, align 8
  %129 = bitcast %struct.AVExpr** %3 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %130, i64* %131, align 8
  br label %710

132:                                              ; preds = %113
  %133 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %17, i64 0, i32 4, i64 0
  %134 = call fastcc i32 @parse_expr(%struct.AVExpr** %133, %struct.Parser* %1)
  %135 = icmp slt i32 %134, 0
  br i1 %135, label %136, label %138

136:                                              ; preds = %132
  %137 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  call void @av_expr_free(%struct.AVExpr* %137)
  br label %710

138:                                              ; preds = %132
  %139 = load i8*, i8** %9, align 8
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 44
  br i1 %141, label %142, label %157

142:                                              ; preds = %138
  %143 = getelementptr inbounds i8, i8* %139, i64 1
  store i8* %143, i8** %9, align 8
  %144 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %145 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %144, i64 0, i32 4, i64 1
  %146 = call fastcc i32 @parse_expr(%struct.AVExpr** %145, %struct.Parser* %1)
  %147 = load i8*, i8** %9, align 8
  %148 = load i8, i8* %147, align 1
  %149 = icmp eq i8 %148, 44
  br i1 %149, label %150, label %157

150:                                              ; preds = %142
  %151 = getelementptr inbounds i8, i8* %147, i64 1
  store i8* %151, i8** %9, align 8
  %152 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %153 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %152, i64 0, i32 4, i64 2
  %154 = call fastcc i32 @parse_expr(%struct.AVExpr** %153, %struct.Parser* %1)
  %155 = load i8*, i8** %9, align 8
  %156 = load i8, i8* %155, align 1
  br label %157

157:                                              ; preds = %138, %150, %142
  %158 = phi i8 [ %156, %150 ], [ %148, %142 ], [ %140, %138 ]
  %159 = phi i8* [ %155, %150 ], [ %147, %142 ], [ %139, %138 ]
  %160 = icmp eq i8 %158, 41
  br i1 %160, label %164, label %161

161:                                              ; preds = %157
  %162 = bitcast %struct.Parser* %1 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %162, i32 16, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0), i8* %13) #11
  %163 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  call void @av_expr_free(%struct.AVExpr* %163)
  br label %710

164:                                              ; preds = %157
  %165 = getelementptr inbounds i8, i8* %159, i64 1
  store i8* %165, i8** %9, align 8
  %166 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %167 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %166, i64 0, i32 0
  store i32 2, i32* %167, align 8
  %168 = load i8*, i8** %4, align 8
  %169 = load i8, i8* %168, align 1
  %170 = icmp eq i8 %169, 115
  br i1 %170, label %171, label %178

171:                                              ; preds = %164
  %172 = getelementptr inbounds i8, i8* %168, i64 1
  %173 = load i8, i8* %172, align 1
  %174 = icmp eq i8 %173, 105
  br i1 %174, label %1676, label %193

175:                                              ; preds = %1684
  %176 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %177 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %176, i64 0, i32 3, i32 0
  store double (double)* @sinh, double (double)** %177, align 8
  br label %706

178:                                              ; preds = %164
  switch i8 %169, label %235 [
    i8 99, label %179
    i8 116, label %186
    i8 97, label %214
  ]

179:                                              ; preds = %178
  %180 = getelementptr inbounds i8, i8* %168, i64 1
  %181 = load i8, i8* %180, align 1
  %182 = icmp eq i8 %181, 111
  br i1 %182, label %1656, label %200

183:                                              ; preds = %1664
  %184 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %185 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %184, i64 0, i32 3, i32 0
  store double (double)* @cosh, double (double)** %185, align 8
  br label %706

186:                                              ; preds = %178
  %187 = getelementptr inbounds i8, i8* %168, i64 1
  %188 = load i8, i8* %187, align 1
  %189 = icmp eq i8 %188, 97
  br i1 %189, label %1636, label %207

190:                                              ; preds = %1644
  %191 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %192 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %191, i64 0, i32 3, i32 0
  store double (double)* @tanh, double (double)** %192, align 8
  br label %706

193:                                              ; preds = %1684, %1680, %1676, %171
  %194 = getelementptr inbounds i8, i8* %168, i64 1
  %195 = load i8, i8* %194, align 1
  %196 = icmp eq i8 %195, 105
  br i1 %196, label %1620, label %235

197:                                              ; preds = %1624
  %198 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %199 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %198, i64 0, i32 3, i32 0
  store double (double)* @sin, double (double)** %199, align 8
  br label %706

200:                                              ; preds = %179, %1656, %1660, %1664
  %201 = getelementptr inbounds i8, i8* %168, i64 1
  %202 = load i8, i8* %201, align 1
  %203 = icmp eq i8 %202, 111
  br i1 %203, label %1604, label %235

204:                                              ; preds = %1608
  %205 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %206 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %205, i64 0, i32 3, i32 0
  store double (double)* @cos, double (double)** %206, align 8
  br label %706

207:                                              ; preds = %186, %1636, %1640, %1644
  %208 = getelementptr inbounds i8, i8* %168, i64 1
  %209 = load i8, i8* %208, align 1
  %210 = icmp eq i8 %209, 97
  br i1 %210, label %1588, label %235

211:                                              ; preds = %1592
  %212 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %213 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %212, i64 0, i32 3, i32 0
  store double (double)* @tan, double (double)** %213, align 8
  br label %706

214:                                              ; preds = %178
  %215 = getelementptr inbounds i8, i8* %168, i64 1
  %216 = load i8, i8* %215, align 1
  %217 = icmp eq i8 %216, 116
  br i1 %217, label %1568, label %221

218:                                              ; preds = %1576
  %219 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %220 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %219, i64 0, i32 3, i32 0
  store double (double)* @atan, double (double)** %220, align 8
  br label %706

221:                                              ; preds = %1576, %1572, %1568, %214
  %222 = getelementptr inbounds i8, i8* %168, i64 1
  %223 = load i8, i8* %222, align 1
  %224 = icmp eq i8 %223, 115
  br i1 %224, label %1548, label %228

225:                                              ; preds = %1556
  %226 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %227 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %226, i64 0, i32 3, i32 0
  store double (double)* @asin, double (double)** %227, align 8
  br label %706

228:                                              ; preds = %1556, %1552, %1548, %221
  %229 = getelementptr inbounds i8, i8* %168, i64 1
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 99
  br i1 %231, label %1528, label %256

232:                                              ; preds = %1536
  %233 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %234 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %233, i64 0, i32 3, i32 0
  store double (double)* @acos, double (double)** %234, align 8
  br label %706

235:                                              ; preds = %1608, %1604, %200, %193, %1620, %1624, %178, %207, %1588, %1592
  %236 = phi i1 [ false, %1592 ], [ false, %1588 ], [ false, %207 ], [ false, %178 ], [ true, %1608 ], [ true, %1604 ], [ true, %200 ], [ false, %193 ], [ false, %1620 ], [ false, %1624 ]
  %237 = phi i1 [ true, %1592 ], [ true, %1588 ], [ true, %207 ], [ false, %178 ], [ false, %1608 ], [ false, %1604 ], [ false, %200 ], [ false, %193 ], [ false, %1620 ], [ false, %1624 ]
  %238 = icmp eq i8 %169, 101
  br i1 %238, label %239, label %246

239:                                              ; preds = %235
  %240 = getelementptr inbounds i8, i8* %168, i64 1
  %241 = load i8, i8* %240, align 1
  %242 = icmp eq i8 %241, 120
  br i1 %242, label %1512, label %263

243:                                              ; preds = %1516
  %244 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %245 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %244, i64 0, i32 3, i32 0
  store double (double)* @exp, double (double)** %245, align 8
  br label %706

246:                                              ; preds = %235
  %247 = icmp eq i8 %169, 108
  br i1 %247, label %248, label %255

248:                                              ; preds = %246
  %249 = getelementptr inbounds i8, i8* %168, i64 1
  %250 = load i8, i8* %249, align 1
  %251 = icmp eq i8 %250, 111
  br i1 %251, label %1496, label %255

252:                                              ; preds = %1500
  %253 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %254 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %253, i64 0, i32 3, i32 0
  store double (double)* @log, double (double)** %254, align 8
  br label %706

255:                                              ; preds = %1500, %1496, %248, %246
  br i1 %237, label %264, label %273

256:                                              ; preds = %1536, %1532, %1528, %228
  %257 = getelementptr inbounds i8, i8* %168, i64 1
  %258 = load i8, i8* %257, align 1
  %259 = icmp eq i8 %258, 98
  br i1 %259, label %1480, label %293

260:                                              ; preds = %1484
  %261 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %262 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %261, i64 0, i32 3, i32 0
  store double (double)* @fabs, double (double)** %262, align 8
  br label %706

263:                                              ; preds = %239, %1512, %1516
  br i1 %237, label %264, label %273

264:                                              ; preds = %255, %263
  %265 = phi i1 [ %247, %255 ], [ false, %263 ]
  %266 = phi i1 [ false, %255 ], [ true, %263 ]
  %267 = getelementptr inbounds i8, i8* %168, i64 1
  %268 = load i8, i8* %267, align 1
  %269 = icmp eq i8 %268, 105
  br i1 %269, label %1460, label %273

270:                                              ; preds = %1468
  %271 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %272 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %271, i64 0, i32 3, i32 0
  store double (double)* @etime, double (double)** %272, align 8
  br label %706

273:                                              ; preds = %263, %264, %1460, %1464, %255, %1468
  %274 = phi i1 [ %265, %1468 ], [ %265, %1464 ], [ %265, %1460 ], [ %265, %264 ], [ false, %263 ], [ %247, %255 ]
  %275 = phi i1 [ true, %1468 ], [ true, %1464 ], [ true, %1460 ], [ true, %264 ], [ false, %263 ], [ false, %255 ]
  %276 = phi i1 [ %266, %1468 ], [ %266, %1464 ], [ %266, %1460 ], [ %266, %264 ], [ true, %263 ], [ false, %255 ]
  br i1 %170, label %277, label %284

277:                                              ; preds = %273
  %278 = getelementptr inbounds i8, i8* %168, i64 1
  %279 = load i8, i8* %278, align 1
  %280 = icmp eq i8 %279, 113
  br i1 %280, label %1432, label %293

281:                                              ; preds = %1448
  %282 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %283 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %282, i64 0, i32 0
  store i32 5, i32* %283, align 8
  br label %706

284:                                              ; preds = %273
  %285 = icmp eq i8 %169, 103
  br i1 %285, label %286, label %293

286:                                              ; preds = %284
  %287 = getelementptr inbounds i8, i8* %168, i64 1
  %288 = load i8, i8* %287, align 1
  %289 = icmp eq i8 %288, 97
  br i1 %289, label %1408, label %314

290:                                              ; preds = %1420
  %291 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %292 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %291, i64 0, i32 0
  store i32 6, i32* %292, align 8
  br label %706

293:                                              ; preds = %1484, %1480, %256, %1448, %1444, %1440, %1436, %1432, %277, %284
  %294 = phi i1 [ %274, %284 ], [ %274, %277 ], [ %274, %1432 ], [ %274, %1436 ], [ %274, %1440 ], [ %274, %1444 ], [ %274, %1448 ], [ false, %256 ], [ false, %1480 ], [ false, %1484 ]
  %295 = phi i1 [ false, %284 ], [ false, %277 ], [ false, %1432 ], [ false, %1436 ], [ false, %1440 ], [ false, %1444 ], [ false, %1448 ], [ true, %256 ], [ true, %1480 ], [ true, %1484 ]
  %296 = phi i1 [ %275, %284 ], [ %275, %277 ], [ %275, %1432 ], [ %275, %1436 ], [ %275, %1440 ], [ %275, %1444 ], [ %275, %1448 ], [ false, %256 ], [ false, %1480 ], [ false, %1484 ]
  %297 = phi i1 [ %236, %284 ], [ %236, %277 ], [ %236, %1432 ], [ %236, %1436 ], [ %236, %1440 ], [ %236, %1444 ], [ %236, %1448 ], [ false, %256 ], [ false, %1480 ], [ false, %1484 ]
  %298 = phi i1 [ %276, %284 ], [ %276, %277 ], [ %276, %1432 ], [ %276, %1436 ], [ %276, %1440 ], [ %276, %1444 ], [ %276, %1448 ], [ false, %256 ], [ false, %1480 ], [ false, %1484 ]
  %299 = icmp eq i8 %169, 109
  br i1 %299, label %300, label %314

300:                                              ; preds = %293
  %301 = getelementptr inbounds i8, i8* %168, i64 1
  %302 = load i8, i8* %301, align 1
  %303 = icmp eq i8 %302, 111
  br i1 %303, label %1392, label %307

304:                                              ; preds = %1396
  %305 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %306 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %305, i64 0, i32 0
  store i32 10, i32* %306, align 8
  br label %706

307:                                              ; preds = %1396, %1392, %300
  %308 = getelementptr inbounds i8, i8* %168, i64 1
  %309 = load i8, i8* %308, align 1
  %310 = icmp eq i8 %309, 97
  br i1 %310, label %1376, label %321

311:                                              ; preds = %1380
  %312 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %313 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %312, i64 0, i32 0
  store i32 11, i32* %313, align 8
  br label %706

314:                                              ; preds = %286, %1408, %1412, %1416, %1420, %293
  %315 = phi i1 [ true, %1420 ], [ true, %1416 ], [ true, %1412 ], [ true, %1408 ], [ true, %286 ], [ false, %293 ]
  %316 = phi i1 [ %274, %1420 ], [ %274, %1416 ], [ %274, %1412 ], [ %274, %1408 ], [ %274, %286 ], [ %294, %293 ]
  %317 = phi i1 [ false, %1420 ], [ false, %1416 ], [ false, %1412 ], [ false, %1408 ], [ false, %286 ], [ %295, %293 ]
  %318 = phi i1 [ %275, %1420 ], [ %275, %1416 ], [ %275, %1412 ], [ %275, %1408 ], [ %275, %286 ], [ %296, %293 ]
  %319 = phi i1 [ %236, %1420 ], [ %236, %1416 ], [ %236, %1412 ], [ %236, %1408 ], [ %236, %286 ], [ %297, %293 ]
  %320 = phi i1 [ %276, %1420 ], [ %276, %1416 ], [ %276, %1412 ], [ %276, %1408 ], [ %276, %286 ], [ %298, %293 ]
  br i1 %320, label %329, label %341

321:                                              ; preds = %1380, %1376, %307
  %322 = getelementptr inbounds i8, i8* %168, i64 1
  %323 = load i8, i8* %322, align 1
  %324 = icmp eq i8 %323, 105
  br i1 %324, label %1360, label %328

325:                                              ; preds = %1364
  %326 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %327 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %326, i64 0, i32 0
  store i32 12, i32* %327, align 8
  br label %706

328:                                              ; preds = %321, %1360, %1364
  br i1 %298, label %329, label %341

329:                                              ; preds = %314, %328
  %330 = phi i1 [ %315, %314 ], [ false, %328 ]
  %331 = phi i1 [ %316, %314 ], [ %294, %328 ]
  %332 = phi i1 [ %317, %314 ], [ %295, %328 ]
  %333 = phi i1 [ %318, %314 ], [ %296, %328 ]
  %334 = phi i1 [ %319, %314 ], [ %297, %328 ]
  %335 = getelementptr inbounds i8, i8* %168, i64 1
  %336 = load i8, i8* %335, align 1
  %337 = icmp eq i8 %336, 113
  br i1 %337, label %1348, label %341

338:                                              ; preds = %1348
  %339 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %340 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %339, i64 0, i32 0
  store i32 13, i32* %340, align 8
  br label %706

341:                                              ; preds = %328, %329, %314, %1348
  %342 = phi i1 [ %330, %1348 ], [ %315, %314 ], [ %330, %329 ], [ false, %328 ]
  %343 = phi i1 [ %331, %1348 ], [ %316, %314 ], [ %331, %329 ], [ %294, %328 ]
  %344 = phi i1 [ %332, %1348 ], [ %317, %314 ], [ %332, %329 ], [ %295, %328 ]
  %345 = phi i1 [ %333, %1348 ], [ %318, %314 ], [ %333, %329 ], [ %296, %328 ]
  %346 = phi i1 [ %334, %1348 ], [ %319, %314 ], [ %334, %329 ], [ %297, %328 ]
  br i1 %342, label %347, label %361

347:                                              ; preds = %341
  %348 = getelementptr inbounds i8, i8* %168, i64 1
  %349 = load i8, i8* %348, align 1
  %350 = icmp eq i8 %349, 116
  br i1 %350, label %1332, label %354

351:                                              ; preds = %1336
  %352 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %353 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %352, i64 0, i32 0
  store i32 15, i32* %353, align 8
  br label %706

354:                                              ; preds = %347, %1332, %1336
  %355 = getelementptr inbounds i8, i8* %168, i64 1
  %356 = load i8, i8* %355, align 1
  %357 = icmp eq i8 %356, 116
  br i1 %357, label %1320, label %361

358:                                              ; preds = %1320
  %359 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %360 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %359, i64 0, i32 0
  store i32 14, i32* %360, align 8
  br label %706

361:                                              ; preds = %354, %341, %1320
  br i1 %343, label %362, label %383

362:                                              ; preds = %361
  %363 = getelementptr inbounds i8, i8* %168, i64 1
  %364 = load i8, i8* %363, align 1
  %365 = icmp eq i8 %364, 116
  br i1 %365, label %1304, label %369

366:                                              ; preds = %1308
  %367 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %368 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %367, i64 0, i32 0
  store i32 16, i32* %368, align 8
  br label %706

369:                                              ; preds = %362, %1304, %1308
  %370 = getelementptr inbounds i8, i8* %168, i64 1
  %371 = load i8, i8* %370, align 1
  %372 = icmp eq i8 %371, 116
  br i1 %372, label %1292, label %376

373:                                              ; preds = %1292
  %374 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %375 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %374, i64 0, i32 0
  store i32 17, i32* %375, align 8
  br label %706

376:                                              ; preds = %369, %1292
  %377 = getelementptr inbounds i8, i8* %168, i64 1
  %378 = load i8, i8* %377, align 1
  %379 = icmp eq i8 %378, 100
  br i1 %379, label %1280, label %383

380:                                              ; preds = %1280
  %381 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %382 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %381, i64 0, i32 0
  store i32 7, i32* %382, align 8
  br label %706

383:                                              ; preds = %376, %361, %1280
  %384 = icmp eq i8 %169, 105
  br i1 %384, label %385, label %399

385:                                              ; preds = %383
  %386 = getelementptr inbounds i8, i8* %168, i64 1
  %387 = load i8, i8* %386, align 1
  %388 = icmp eq i8 %387, 115
  br i1 %388, label %1256, label %392

389:                                              ; preds = %1268
  %390 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %391 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %390, i64 0, i32 0
  store i32 8, i32* %391, align 8
  br label %706

392:                                              ; preds = %385, %1256, %1260, %1264, %1268
  %393 = getelementptr inbounds i8, i8* %168, i64 1
  %394 = load i8, i8* %393, align 1
  %395 = icmp eq i8 %394, 115
  br i1 %395, label %1232, label %399

396:                                              ; preds = %1244
  %397 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %398 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %397, i64 0, i32 0
  store i32 9, i32* %398, align 8
  br label %706

399:                                              ; preds = %392, %1232, %1236, %1240, %383, %1244
  br i1 %170, label %400, label %407

400:                                              ; preds = %399
  %401 = getelementptr inbounds i8, i8* %168, i64 1
  %402 = load i8, i8* %401, align 1
  %403 = icmp eq i8 %402, 116
  br i1 %403, label %1220, label %416

404:                                              ; preds = %1220
  %405 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %406 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %405, i64 0, i32 0
  store i32 23, i32* %406, align 8
  br label %706

407:                                              ; preds = %399
  %408 = icmp eq i8 %169, 119
  br i1 %408, label %409, label %416

409:                                              ; preds = %407
  %410 = getelementptr inbounds i8, i8* %168, i64 1
  %411 = load i8, i8* %410, align 1
  %412 = icmp eq i8 %411, 104
  br i1 %412, label %1196, label %416

413:                                              ; preds = %1208
  %414 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %415 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %414, i64 0, i32 0
  store i32 24, i32* %415, align 8
  br label %706

416:                                              ; preds = %1220, %400, %407, %409, %1196, %1200, %1204, %1208
  br i1 %345, label %417, label %424

417:                                              ; preds = %416
  %418 = getelementptr inbounds i8, i8* %168, i64 1
  %419 = load i8, i8* %418, align 1
  %420 = icmp eq i8 %419, 97
  br i1 %420, label %1168, label %424

421:                                              ; preds = %1184
  %422 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %423 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %422, i64 0, i32 0
  store i32 25, i32* %423, align 8
  br label %706

424:                                              ; preds = %416, %417, %1168, %1172, %1176, %1180, %1184
  %425 = icmp eq i8 %169, 114
  br i1 %425, label %426, label %433

426:                                              ; preds = %424
  %427 = getelementptr inbounds i8, i8* %168, i64 1
  %428 = load i8, i8* %427, align 1
  %429 = icmp eq i8 %428, 111
  br i1 %429, label %1148, label %442

430:                                              ; preds = %1156
  %431 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %432 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %431, i64 0, i32 0
  store i32 26, i32* %432, align 8
  br label %706

433:                                              ; preds = %424
  %434 = icmp eq i8 %169, 102
  br i1 %434, label %435, label %442

435:                                              ; preds = %433
  %436 = getelementptr inbounds i8, i8* %168, i64 1
  %437 = load i8, i8* %436, align 1
  %438 = icmp eq i8 %437, 108
  br i1 %438, label %1124, label %442

439:                                              ; preds = %1136
  %440 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %441 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %440, i64 0, i32 0
  store i32 27, i32* %441, align 8
  br label %706

442:                                              ; preds = %1156, %1152, %1148, %426, %433, %435, %1124, %1128, %1132, %1136
  br i1 %346, label %443, label %450

443:                                              ; preds = %442
  %444 = getelementptr inbounds i8, i8* %168, i64 1
  %445 = load i8, i8* %444, align 1
  %446 = icmp eq i8 %445, 101
  br i1 %446, label %1104, label %450

447:                                              ; preds = %1112
  %448 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %449 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %448, i64 0, i32 0
  store i32 28, i32* %449, align 8
  br label %706

450:                                              ; preds = %442, %443, %1104, %1108, %1112
  br i1 %345, label %451, label %458

451:                                              ; preds = %450
  %452 = getelementptr inbounds i8, i8* %168, i64 1
  %453 = load i8, i8* %452, align 1
  %454 = icmp eq i8 %453, 114
  br i1 %454, label %1080, label %458

455:                                              ; preds = %1092
  %456 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %457 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %456, i64 0, i32 0
  store i32 29, i32* %457, align 8
  br label %706

458:                                              ; preds = %450, %451, %1080, %1084, %1088, %1092
  br i1 %425, label %459, label %466

459:                                              ; preds = %458
  %460 = getelementptr inbounds i8, i8* %168, i64 1
  %461 = load i8, i8* %460, align 1
  %462 = icmp eq i8 %461, 111
  br i1 %462, label %1056, label %466

463:                                              ; preds = %1068
  %464 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %465 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %464, i64 0, i32 0
  store i32 30, i32* %465, align 8
  br label %706

466:                                              ; preds = %458, %459, %1056, %1060, %1064, %1068
  br i1 %170, label %467, label %474

467:                                              ; preds = %466
  %468 = getelementptr inbounds i8, i8* %168, i64 1
  %469 = load i8, i8* %468, align 1
  %470 = icmp eq i8 %469, 113
  br i1 %470, label %1036, label %496

471:                                              ; preds = %1044
  %472 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %473 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %472, i64 0, i32 0
  store i32 31, i32* %473, align 8
  br label %706

474:                                              ; preds = %466
  switch i8 %169, label %496 [
    i8 110, label %475
    i8 112, label %482
  ]

475:                                              ; preds = %474
  %476 = getelementptr inbounds i8, i8* %168, i64 1
  %477 = load i8, i8* %476, align 1
  %478 = icmp eq i8 %477, 111
  br i1 %478, label %1020, label %496

479:                                              ; preds = %1024
  %480 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %481 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %480, i64 0, i32 0
  store i32 32, i32* %481, align 8
  br label %706

482:                                              ; preds = %474
  %483 = getelementptr inbounds i8, i8* %168, i64 1
  %484 = load i8, i8* %483, align 1
  %485 = icmp eq i8 %484, 111
  br i1 %485, label %1004, label %489

486:                                              ; preds = %1008
  %487 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %488 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %487, i64 0, i32 0
  store i32 18, i32* %488, align 8
  br label %706

489:                                              ; preds = %1008, %1004, %482
  %490 = getelementptr inbounds i8, i8* %168, i64 1
  %491 = load i8, i8* %490, align 1
  %492 = icmp eq i8 %491, 114
  br i1 %492, label %980, label %496

493:                                              ; preds = %992
  %494 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %495 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %494, i64 0, i32 0
  store i32 38, i32* %495, align 8
  br label %706

496:                                              ; preds = %474, %1044, %1040, %1036, %467, %489, %980, %984, %988, %475, %1020, %1024, %992
  br i1 %425, label %497, label %504

497:                                              ; preds = %496
  %498 = getelementptr inbounds i8, i8* %168, i64 1
  %499 = load i8, i8* %498, align 1
  %500 = icmp eq i8 %499, 97
  br i1 %500, label %952, label %513

501:                                              ; preds = %968
  %502 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %503 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %502, i64 0, i32 0
  store i32 33, i32* %503, align 8
  br label %706

504:                                              ; preds = %496
  %505 = icmp eq i8 %169, 104
  br i1 %505, label %506, label %513

506:                                              ; preds = %504
  %507 = getelementptr inbounds i8, i8* %168, i64 1
  %508 = load i8, i8* %507, align 1
  %509 = icmp eq i8 %508, 121
  br i1 %509, label %928, label %513

510:                                              ; preds = %940
  %511 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %512 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %511, i64 0, i32 0
  store i32 34, i32* %512, align 8
  br label %706

513:                                              ; preds = %968, %964, %960, %956, %952, %497, %504, %506, %928, %932, %936, %940
  br i1 %342, label %514, label %521

514:                                              ; preds = %513
  %515 = getelementptr inbounds i8, i8* %168, i64 1
  %516 = load i8, i8* %515, align 1
  %517 = icmp eq i8 %516, 99
  br i1 %517, label %912, label %521

518:                                              ; preds = %916
  %519 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %520 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %519, i64 0, i32 0
  store i32 35, i32* %520, align 8
  br label %706

521:                                              ; preds = %513, %514, %912, %916
  br i1 %384, label %522, label %536

522:                                              ; preds = %521
  %523 = getelementptr inbounds i8, i8* %168, i64 1
  %524 = load i8, i8* %523, align 1
  %525 = icmp eq i8 %524, 102
  br i1 %525, label %900, label %529

526:                                              ; preds = %900
  %527 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %528 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %527, i64 0, i32 0
  store i32 36, i32* %528, align 8
  br label %706

529:                                              ; preds = %522, %900
  %530 = getelementptr inbounds i8, i8* %168, i64 1
  %531 = load i8, i8* %530, align 1
  %532 = icmp eq i8 %531, 102
  br i1 %532, label %876, label %559

533:                                              ; preds = %888
  %534 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %535 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %534, i64 0, i32 0
  store i32 37, i32* %535, align 8
  br label %706

536:                                              ; preds = %521
  %537 = icmp eq i8 %169, 98
  br i1 %537, label %538, label %559

538:                                              ; preds = %536
  %539 = getelementptr inbounds i8, i8* %168, i64 1
  %540 = load i8, i8* %539, align 1
  %541 = icmp eq i8 %540, 105
  br i1 %541, label %848, label %545

542:                                              ; preds = %864
  %543 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %544 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %543, i64 0, i32 0
  store i32 39, i32* %544, align 8
  br label %706

545:                                              ; preds = %864, %860, %856, %852, %848, %538
  %546 = getelementptr inbounds i8, i8* %168, i64 1
  %547 = load i8, i8* %546, align 1
  %548 = icmp eq i8 %547, 105
  br i1 %548, label %824, label %552

549:                                              ; preds = %836
  %550 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %551 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %550, i64 0, i32 0
  store i32 40, i32* %551, align 8
  br label %706

552:                                              ; preds = %836, %832, %828, %824, %545
  %553 = getelementptr inbounds i8, i8* %168, i64 1
  %554 = load i8, i8* %553, align 1
  %555 = icmp eq i8 %554, 101
  br i1 %555, label %792, label %559

556:                                              ; preds = %812
  %557 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %558 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %557, i64 0, i32 0
  store i32 41, i32* %558, align 8
  br label %706

559:                                              ; preds = %536, %888, %884, %880, %876, %529, %552, %792, %796, %800, %804, %808, %812
  br i1 %346, label %560, label %567

560:                                              ; preds = %559
  %561 = getelementptr inbounds i8, i8* %168, i64 1
  %562 = load i8, i8* %561, align 1
  %563 = icmp eq i8 %562, 108
  br i1 %563, label %772, label %567

564:                                              ; preds = %780
  %565 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %566 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %565, i64 0, i32 0
  store i32 42, i32* %566, align 8
  br label %706

567:                                              ; preds = %559, %560, %772, %776, %780
  br i1 %344, label %568, label %575

568:                                              ; preds = %567
  %569 = getelementptr inbounds i8, i8* %168, i64 1
  %570 = load i8, i8* %569, align 1
  %571 = icmp eq i8 %570, 116
  br i1 %571, label %748, label %575

572:                                              ; preds = %760
  %573 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %574 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %573, i64 0, i32 0
  store i32 43, i32* %574, align 8
  br label %706

575:                                              ; preds = %567, %568, %748, %752, %756, %760
  br i1 %343, label %576, label %583

576:                                              ; preds = %575
  %577 = getelementptr inbounds i8, i8* %168, i64 1
  %578 = load i8, i8* %577, align 1
  %579 = icmp eq i8 %578, 101
  br i1 %579, label %728, label %583

580:                                              ; preds = %736
  %581 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %582 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %581, i64 0, i32 0
  store i32 44, i32* %582, align 8
  br label %706

583:                                              ; preds = %575, %576, %728, %732, %736
  br i1 %170, label %584, label %588

584:                                              ; preds = %583
  %585 = getelementptr inbounds i8, i8* %168, i64 1
  %586 = load i8, i8* %585, align 1
  %587 = icmp eq i8 %586, 103
  br i1 %587, label %712, label %588

588:                                              ; preds = %583, %584, %712, %716
  %589 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 6
  %590 = load i8**, i8*** %589, align 8
  %591 = icmp eq i8** %590, null
  br i1 %591, label %647, label %592

592:                                              ; preds = %588
  %593 = load i8*, i8** %590, align 8
  %594 = icmp eq i8* %593, null
  br i1 %594, label %647, label %598

595:                                              ; preds = %716
  %596 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %597 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %596, i64 0, i32 0
  store i32 45, i32* %597, align 8
  br label %706

598:                                              ; preds = %592, %642
  %599 = phi i8* [ %645, %642 ], [ %593, %592 ]
  %600 = phi i64 [ %643, %642 ], [ 0, %592 ]
  %601 = load i8, i8* %599, align 1
  %602 = icmp eq i8 %601, 0
  br i1 %602, label %615, label %609

603:                                              ; preds = %609
  %604 = getelementptr inbounds i8, i8* %599, i64 %614
  %605 = load i8, i8* %604, align 1
  %606 = icmp eq i8 %605, 0
  %607 = getelementptr inbounds i8, i8* %168, i64 %614
  %608 = load i8, i8* %607, align 1
  br i1 %606, label %615, label %609

609:                                              ; preds = %598, %603
  %610 = phi i64 [ %614, %603 ], [ 0, %598 ]
  %611 = phi i8 [ %608, %603 ], [ %169, %598 ]
  %612 = phi i8 [ %605, %603 ], [ %601, %598 ]
  %613 = icmp eq i8 %612, %611
  %614 = add nuw i64 %610, 1
  br i1 %613, label %603, label %642

615:                                              ; preds = %603, %598
  %616 = phi i8 [ %169, %598 ], [ %608, %603 ]
  %617 = sext i8 %616 to i32
  %618 = add nsw i32 %617, -48
  %619 = icmp ugt i32 %618, 9
  %620 = and i32 %617, -33
  %621 = add nsw i32 %620, -65
  %622 = icmp ugt i32 %621, 25
  %623 = icmp ne i8 %616, 95
  %624 = and i1 %619, %622
  %625 = and i1 %623, %624
  br i1 %625, label %626, label %642

626:                                              ; preds = %615
  %627 = trunc i64 %600 to i32
  %628 = and i64 %600, 4294967295
  %629 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 5
  %630 = load double (i8*, double)**, double (i8*, double)*** %629, align 8
  %631 = getelementptr inbounds double (i8*, double)*, double (i8*, double)** %630, i64 %628
  %632 = bitcast double (i8*, double)** %631 to i64*
  %633 = load i64, i64* %632, align 8
  %634 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %635 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %634, i64 0, i32 3
  %636 = bitcast %union.anon* %635 to i64*
  store i64 %633, i64* %636, align 8
  %637 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %634, i64 0, i32 0
  store i32 3, i32* %637, align 8
  %638 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %639 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %638, i64 0, i32 2
  store i32 %627, i32* %639, align 8
  %640 = ptrtoint %struct.AVExpr* %638 to i64
  %641 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %640, i64* %641, align 8
  br label %710

642:                                              ; preds = %609, %615
  %643 = add nuw i64 %600, 1
  %644 = getelementptr inbounds i8*, i8** %590, i64 %643
  %645 = load i8*, i8** %644, align 8
  %646 = icmp eq i8* %645, null
  br i1 %646, label %647, label %598

647:                                              ; preds = %642, %592, %588
  %648 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 8
  %649 = load i8**, i8*** %648, align 8
  %650 = icmp eq i8** %649, null
  br i1 %650, label %703, label %651

651:                                              ; preds = %647
  %652 = load i8*, i8** %649, align 8
  %653 = icmp eq i8* %652, null
  br i1 %653, label %703, label %654

654:                                              ; preds = %651, %698
  %655 = phi i8* [ %701, %698 ], [ %652, %651 ]
  %656 = phi i64 [ %699, %698 ], [ 0, %651 ]
  %657 = load i8, i8* %655, align 1
  %658 = icmp eq i8 %657, 0
  br i1 %658, label %671, label %665

659:                                              ; preds = %665
  %660 = getelementptr inbounds i8, i8* %655, i64 %670
  %661 = load i8, i8* %660, align 1
  %662 = icmp eq i8 %661, 0
  %663 = getelementptr inbounds i8, i8* %168, i64 %670
  %664 = load i8, i8* %663, align 1
  br i1 %662, label %671, label %665

665:                                              ; preds = %654, %659
  %666 = phi i64 [ %670, %659 ], [ 0, %654 ]
  %667 = phi i8 [ %664, %659 ], [ %169, %654 ]
  %668 = phi i8 [ %661, %659 ], [ %657, %654 ]
  %669 = icmp eq i8 %668, %667
  %670 = add nuw i64 %666, 1
  br i1 %669, label %659, label %698

671:                                              ; preds = %659, %654
  %672 = phi i8 [ %169, %654 ], [ %664, %659 ]
  %673 = sext i8 %672 to i32
  %674 = add nsw i32 %673, -48
  %675 = icmp ugt i32 %674, 9
  %676 = and i32 %673, -33
  %677 = add nsw i32 %676, -65
  %678 = icmp ugt i32 %677, 25
  %679 = icmp ne i8 %672, 95
  %680 = and i1 %675, %678
  %681 = and i1 %679, %680
  br i1 %681, label %682, label %698

682:                                              ; preds = %671
  %683 = trunc i64 %656 to i32
  %684 = and i64 %656, 4294967295
  %685 = getelementptr inbounds %struct.Parser, %struct.Parser* %1, i64 0, i32 7
  %686 = load double (i8*, double, double)**, double (i8*, double, double)*** %685, align 8
  %687 = getelementptr inbounds double (i8*, double, double)*, double (i8*, double, double)** %686, i64 %684
  %688 = bitcast double (i8*, double, double)** %687 to i64*
  %689 = load i64, i64* %688, align 8
  %690 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %691 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %690, i64 0, i32 3
  %692 = bitcast %union.anon* %691 to i64*
  store i64 %689, i64* %692, align 8
  %693 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %690, i64 0, i32 0
  store i32 4, i32* %693, align 8
  %694 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  %695 = getelementptr inbounds %struct.AVExpr, %struct.AVExpr* %694, i64 0, i32 2
  store i32 %683, i32* %695, align 8
  %696 = ptrtoint %struct.AVExpr* %694 to i64
  %697 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %696, i64* %697, align 8
  br label %710

698:                                              ; preds = %665, %671
  %699 = add nuw i64 %656, 1
  %700 = getelementptr inbounds i8*, i8** %649, i64 %699
  %701 = load i8*, i8** %700, align 8
  %702 = icmp eq i8* %701, null
  br i1 %702, label %703, label %654

703:                                              ; preds = %698, %651, %647
  %704 = bitcast %struct.Parser* %1 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %704, i32 16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.55, i64 0, i64 0), i8* %13) #11
  %705 = load %struct.AVExpr*, %struct.AVExpr** %3, align 8
  call void @av_expr_free(%struct.AVExpr* %705)
  br label %710

706:                                              ; preds = %183, %197, %211, %225, %243, %260, %281, %304, %325, %351, %366, %380, %396, %413, %430, %447, %463, %479, %493, %510, %526, %542, %556, %572, %595, %580, %564, %549, %533, %518, %501, %486, %471, %455, %439, %421, %404, %389, %373, %358, %338, %311, %290, %270, %252, %232, %218, %204, %190, %175
  %707 = bitcast %struct.AVExpr** %3 to i64*
  %708 = load i64, i64* %707, align 8
  %709 = bitcast %struct.AVExpr** %0 to i64*
  store i64 %708, i64* %709, align 8
  br label %710

710:                                              ; preds = %117, %2, %706, %703, %682, %626, %161, %136, %127, %124, %109, %95, %66, %22
  %711 = phi i32 [ 0, %22 ], [ 0, %66 ], [ 0, %95 ], [ -22, %124 ], [ 0, %127 ], [ %134, %136 ], [ -22, %161 ], [ 0, %706 ], [ 0, %626 ], [ 0, %682 ], [ -22, %703 ], [ -22, %109 ], [ -12, %2 ], [ %118, %117 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  ret i32 %711

712:                                              ; preds = %584
  %713 = getelementptr inbounds i8, i8* %168, i64 2
  %714 = load i8, i8* %713, align 1
  %715 = icmp eq i8 %714, 110
  br i1 %715, label %716, label %588

716:                                              ; preds = %712
  %717 = getelementptr inbounds i8, i8* %168, i64 3
  %718 = load i8, i8* %717, align 1
  %719 = sext i8 %718 to i32
  %720 = add nsw i32 %719, -48
  %721 = icmp ugt i32 %720, 9
  %722 = and i32 %719, -33
  %723 = add nsw i32 %722, -65
  %724 = icmp ugt i32 %723, 25
  %725 = icmp ne i8 %718, 95
  %726 = and i1 %721, %724
  %727 = and i1 %725, %726
  br i1 %727, label %595, label %588

728:                                              ; preds = %576
  %729 = getelementptr inbounds i8, i8* %168, i64 2
  %730 = load i8, i8* %729, align 1
  %731 = icmp eq i8 %730, 114
  br i1 %731, label %732, label %583

732:                                              ; preds = %728
  %733 = getelementptr inbounds i8, i8* %168, i64 3
  %734 = load i8, i8* %733, align 1
  %735 = icmp eq i8 %734, 112
  br i1 %735, label %736, label %583

736:                                              ; preds = %732
  %737 = getelementptr inbounds i8, i8* %168, i64 4
  %738 = load i8, i8* %737, align 1
  %739 = sext i8 %738 to i32
  %740 = add nsw i32 %739, -48
  %741 = icmp ugt i32 %740, 9
  %742 = and i32 %739, -33
  %743 = add nsw i32 %742, -65
  %744 = icmp ugt i32 %743, 25
  %745 = icmp ne i8 %738, 95
  %746 = and i1 %741, %744
  %747 = and i1 %745, %746
  br i1 %747, label %580, label %583

748:                                              ; preds = %568
  %749 = getelementptr inbounds i8, i8* %168, i64 2
  %750 = load i8, i8* %749, align 1
  %751 = icmp eq i8 %750, 97
  br i1 %751, label %752, label %575

752:                                              ; preds = %748
  %753 = getelementptr inbounds i8, i8* %168, i64 3
  %754 = load i8, i8* %753, align 1
  %755 = icmp eq i8 %754, 110
  br i1 %755, label %756, label %575

756:                                              ; preds = %752
  %757 = getelementptr inbounds i8, i8* %168, i64 4
  %758 = load i8, i8* %757, align 1
  %759 = icmp eq i8 %758, 50
  br i1 %759, label %760, label %575

760:                                              ; preds = %756
  %761 = getelementptr inbounds i8, i8* %168, i64 5
  %762 = load i8, i8* %761, align 1
  %763 = sext i8 %762 to i32
  %764 = add nsw i32 %763, -48
  %765 = icmp ugt i32 %764, 9
  %766 = and i32 %763, -33
  %767 = add nsw i32 %766, -65
  %768 = icmp ugt i32 %767, 25
  %769 = icmp ne i8 %762, 95
  %770 = and i1 %765, %768
  %771 = and i1 %769, %770
  br i1 %771, label %572, label %575

772:                                              ; preds = %560
  %773 = getelementptr inbounds i8, i8* %168, i64 2
  %774 = load i8, i8* %773, align 1
  %775 = icmp eq i8 %774, 105
  br i1 %775, label %776, label %567

776:                                              ; preds = %772
  %777 = getelementptr inbounds i8, i8* %168, i64 3
  %778 = load i8, i8* %777, align 1
  %779 = icmp eq i8 %778, 112
  br i1 %779, label %780, label %567

780:                                              ; preds = %776
  %781 = getelementptr inbounds i8, i8* %168, i64 4
  %782 = load i8, i8* %781, align 1
  %783 = sext i8 %782 to i32
  %784 = add nsw i32 %783, -48
  %785 = icmp ugt i32 %784, 9
  %786 = and i32 %783, -33
  %787 = add nsw i32 %786, -65
  %788 = icmp ugt i32 %787, 25
  %789 = icmp ne i8 %782, 95
  %790 = and i1 %785, %788
  %791 = and i1 %789, %790
  br i1 %791, label %564, label %567

792:                                              ; preds = %552
  %793 = getelementptr inbounds i8, i8* %168, i64 2
  %794 = load i8, i8* %793, align 1
  %795 = icmp eq i8 %794, 116
  br i1 %795, label %796, label %559

796:                                              ; preds = %792
  %797 = getelementptr inbounds i8, i8* %168, i64 3
  %798 = load i8, i8* %797, align 1
  %799 = icmp eq i8 %798, 119
  br i1 %799, label %800, label %559

800:                                              ; preds = %796
  %801 = getelementptr inbounds i8, i8* %168, i64 4
  %802 = load i8, i8* %801, align 1
  %803 = icmp eq i8 %802, 101
  br i1 %803, label %804, label %559

804:                                              ; preds = %800
  %805 = getelementptr inbounds i8, i8* %168, i64 5
  %806 = load i8, i8* %805, align 1
  %807 = icmp eq i8 %806, 101
  br i1 %807, label %808, label %559

808:                                              ; preds = %804
  %809 = getelementptr inbounds i8, i8* %168, i64 6
  %810 = load i8, i8* %809, align 1
  %811 = icmp eq i8 %810, 110
  br i1 %811, label %812, label %559

812:                                              ; preds = %808
  %813 = getelementptr inbounds i8, i8* %168, i64 7
  %814 = load i8, i8* %813, align 1
  %815 = sext i8 %814 to i32
  %816 = add nsw i32 %815, -48
  %817 = icmp ugt i32 %816, 9
  %818 = and i32 %815, -33
  %819 = add nsw i32 %818, -65
  %820 = icmp ugt i32 %819, 25
  %821 = icmp ne i8 %814, 95
  %822 = and i1 %817, %820
  %823 = and i1 %821, %822
  br i1 %823, label %556, label %559

824:                                              ; preds = %545
  %825 = getelementptr inbounds i8, i8* %168, i64 2
  %826 = load i8, i8* %825, align 1
  %827 = icmp eq i8 %826, 116
  br i1 %827, label %828, label %552

828:                                              ; preds = %824
  %829 = getelementptr inbounds i8, i8* %168, i64 3
  %830 = load i8, i8* %829, align 1
  %831 = icmp eq i8 %830, 111
  br i1 %831, label %832, label %552

832:                                              ; preds = %828
  %833 = getelementptr inbounds i8, i8* %168, i64 4
  %834 = load i8, i8* %833, align 1
  %835 = icmp eq i8 %834, 114
  br i1 %835, label %836, label %552

836:                                              ; preds = %832
  %837 = getelementptr inbounds i8, i8* %168, i64 5
  %838 = load i8, i8* %837, align 1
  %839 = sext i8 %838 to i32
  %840 = add nsw i32 %839, -48
  %841 = icmp ugt i32 %840, 9
  %842 = and i32 %839, -33
  %843 = add nsw i32 %842, -65
  %844 = icmp ugt i32 %843, 25
  %845 = icmp ne i8 %838, 95
  %846 = and i1 %841, %844
  %847 = and i1 %845, %846
  br i1 %847, label %549, label %552

848:                                              ; preds = %538
  %849 = getelementptr inbounds i8, i8* %168, i64 2
  %850 = load i8, i8* %849, align 1
  %851 = icmp eq i8 %850, 116
  br i1 %851, label %852, label %545

852:                                              ; preds = %848
  %853 = getelementptr inbounds i8, i8* %168, i64 3
  %854 = load i8, i8* %853, align 1
  %855 = icmp eq i8 %854, 97
  br i1 %855, label %856, label %545

856:                                              ; preds = %852
  %857 = getelementptr inbounds i8, i8* %168, i64 4
  %858 = load i8, i8* %857, align 1
  %859 = icmp eq i8 %858, 110
  br i1 %859, label %860, label %545

860:                                              ; preds = %856
  %861 = getelementptr inbounds i8, i8* %168, i64 5
  %862 = load i8, i8* %861, align 1
  %863 = icmp eq i8 %862, 100
  br i1 %863, label %864, label %545

864:                                              ; preds = %860
  %865 = getelementptr inbounds i8, i8* %168, i64 6
  %866 = load i8, i8* %865, align 1
  %867 = sext i8 %866 to i32
  %868 = add nsw i32 %867, -48
  %869 = icmp ugt i32 %868, 9
  %870 = and i32 %867, -33
  %871 = add nsw i32 %870, -65
  %872 = icmp ugt i32 %871, 25
  %873 = icmp ne i8 %866, 95
  %874 = and i1 %869, %872
  %875 = and i1 %873, %874
  br i1 %875, label %542, label %545

876:                                              ; preds = %529
  %877 = getelementptr inbounds i8, i8* %168, i64 2
  %878 = load i8, i8* %877, align 1
  %879 = icmp eq i8 %878, 110
  br i1 %879, label %880, label %559

880:                                              ; preds = %876
  %881 = getelementptr inbounds i8, i8* %168, i64 3
  %882 = load i8, i8* %881, align 1
  %883 = icmp eq i8 %882, 111
  br i1 %883, label %884, label %559

884:                                              ; preds = %880
  %885 = getelementptr inbounds i8, i8* %168, i64 4
  %886 = load i8, i8* %885, align 1
  %887 = icmp eq i8 %886, 116
  br i1 %887, label %888, label %559

888:                                              ; preds = %884
  %889 = getelementptr inbounds i8, i8* %168, i64 5
  %890 = load i8, i8* %889, align 1
  %891 = sext i8 %890 to i32
  %892 = add nsw i32 %891, -48
  %893 = icmp ugt i32 %892, 9
  %894 = and i32 %891, -33
  %895 = add nsw i32 %894, -65
  %896 = icmp ugt i32 %895, 25
  %897 = icmp ne i8 %890, 95
  %898 = and i1 %893, %896
  %899 = and i1 %897, %898
  br i1 %899, label %533, label %559

900:                                              ; preds = %522
  %901 = getelementptr inbounds i8, i8* %168, i64 2
  %902 = load i8, i8* %901, align 1
  %903 = sext i8 %902 to i32
  %904 = add nsw i32 %903, -48
  %905 = icmp ugt i32 %904, 9
  %906 = and i32 %903, -33
  %907 = add nsw i32 %906, -65
  %908 = icmp ugt i32 %907, 25
  %909 = icmp ne i8 %902, 95
  %910 = and i1 %905, %908
  %911 = and i1 %909, %910
  br i1 %911, label %526, label %529

912:                                              ; preds = %514
  %913 = getelementptr inbounds i8, i8* %168, i64 2
  %914 = load i8, i8* %913, align 1
  %915 = icmp eq i8 %914, 100
  br i1 %915, label %916, label %521

916:                                              ; preds = %912
  %917 = getelementptr inbounds i8, i8* %168, i64 3
  %918 = load i8, i8* %917, align 1
  %919 = sext i8 %918 to i32
  %920 = add nsw i32 %919, -48
  %921 = icmp ugt i32 %920, 9
  %922 = and i32 %919, -33
  %923 = add nsw i32 %922, -65
  %924 = icmp ugt i32 %923, 25
  %925 = icmp ne i8 %918, 95
  %926 = and i1 %921, %924
  %927 = and i1 %925, %926
  br i1 %927, label %518, label %521

928:                                              ; preds = %506
  %929 = getelementptr inbounds i8, i8* %168, i64 2
  %930 = load i8, i8* %929, align 1
  %931 = icmp eq i8 %930, 112
  br i1 %931, label %932, label %513

932:                                              ; preds = %928
  %933 = getelementptr inbounds i8, i8* %168, i64 3
  %934 = load i8, i8* %933, align 1
  %935 = icmp eq i8 %934, 111
  br i1 %935, label %936, label %513

936:                                              ; preds = %932
  %937 = getelementptr inbounds i8, i8* %168, i64 4
  %938 = load i8, i8* %937, align 1
  %939 = icmp eq i8 %938, 116
  br i1 %939, label %940, label %513

940:                                              ; preds = %936
  %941 = getelementptr inbounds i8, i8* %168, i64 5
  %942 = load i8, i8* %941, align 1
  %943 = sext i8 %942 to i32
  %944 = add nsw i32 %943, -48
  %945 = icmp ugt i32 %944, 9
  %946 = and i32 %943, -33
  %947 = add nsw i32 %946, -65
  %948 = icmp ugt i32 %947, 25
  %949 = icmp ne i8 %942, 95
  %950 = and i1 %945, %948
  %951 = and i1 %949, %950
  br i1 %951, label %510, label %513

952:                                              ; preds = %497
  %953 = getelementptr inbounds i8, i8* %168, i64 2
  %954 = load i8, i8* %953, align 1
  %955 = icmp eq i8 %954, 110
  br i1 %955, label %956, label %513

956:                                              ; preds = %952
  %957 = getelementptr inbounds i8, i8* %168, i64 3
  %958 = load i8, i8* %957, align 1
  %959 = icmp eq i8 %958, 100
  br i1 %959, label %960, label %513

960:                                              ; preds = %956
  %961 = getelementptr inbounds i8, i8* %168, i64 4
  %962 = load i8, i8* %961, align 1
  %963 = icmp eq i8 %962, 111
  br i1 %963, label %964, label %513

964:                                              ; preds = %960
  %965 = getelementptr inbounds i8, i8* %168, i64 5
  %966 = load i8, i8* %965, align 1
  %967 = icmp eq i8 %966, 109
  br i1 %967, label %968, label %513

968:                                              ; preds = %964
  %969 = getelementptr inbounds i8, i8* %168, i64 6
  %970 = load i8, i8* %969, align 1
  %971 = sext i8 %970 to i32
  %972 = add nsw i32 %971, -48
  %973 = icmp ugt i32 %972, 9
  %974 = and i32 %971, -33
  %975 = add nsw i32 %974, -65
  %976 = icmp ugt i32 %975, 25
  %977 = icmp ne i8 %970, 95
  %978 = and i1 %973, %976
  %979 = and i1 %977, %978
  br i1 %979, label %501, label %513

980:                                              ; preds = %489
  %981 = getelementptr inbounds i8, i8* %168, i64 2
  %982 = load i8, i8* %981, align 1
  %983 = icmp eq i8 %982, 105
  br i1 %983, label %984, label %496

984:                                              ; preds = %980
  %985 = getelementptr inbounds i8, i8* %168, i64 3
  %986 = load i8, i8* %985, align 1
  %987 = icmp eq i8 %986, 110
  br i1 %987, label %988, label %496

988:                                              ; preds = %984
  %989 = getelementptr inbounds i8, i8* %168, i64 4
  %990 = load i8, i8* %989, align 1
  %991 = icmp eq i8 %990, 116
  br i1 %991, label %992, label %496

992:                                              ; preds = %988
  %993 = getelementptr inbounds i8, i8* %168, i64 5
  %994 = load i8, i8* %993, align 1
  %995 = sext i8 %994 to i32
  %996 = add nsw i32 %995, -48
  %997 = icmp ugt i32 %996, 9
  %998 = and i32 %995, -33
  %999 = add nsw i32 %998, -65
  %1000 = icmp ugt i32 %999, 25
  %1001 = icmp ne i8 %994, 95
  %1002 = and i1 %997, %1000
  %1003 = and i1 %1001, %1002
  br i1 %1003, label %493, label %496

1004:                                             ; preds = %482
  %1005 = getelementptr inbounds i8, i8* %168, i64 2
  %1006 = load i8, i8* %1005, align 1
  %1007 = icmp eq i8 %1006, 119
  br i1 %1007, label %1008, label %489

1008:                                             ; preds = %1004
  %1009 = getelementptr inbounds i8, i8* %168, i64 3
  %1010 = load i8, i8* %1009, align 1
  %1011 = sext i8 %1010 to i32
  %1012 = add nsw i32 %1011, -48
  %1013 = icmp ugt i32 %1012, 9
  %1014 = and i32 %1011, -33
  %1015 = add nsw i32 %1014, -65
  %1016 = icmp ugt i32 %1015, 25
  %1017 = icmp ne i8 %1010, 95
  %1018 = and i1 %1013, %1016
  %1019 = and i1 %1017, %1018
  br i1 %1019, label %486, label %489

1020:                                             ; preds = %475
  %1021 = getelementptr inbounds i8, i8* %168, i64 2
  %1022 = load i8, i8* %1021, align 1
  %1023 = icmp eq i8 %1022, 116
  br i1 %1023, label %1024, label %496

1024:                                             ; preds = %1020
  %1025 = getelementptr inbounds i8, i8* %168, i64 3
  %1026 = load i8, i8* %1025, align 1
  %1027 = sext i8 %1026 to i32
  %1028 = add nsw i32 %1027, -48
  %1029 = icmp ugt i32 %1028, 9
  %1030 = and i32 %1027, -33
  %1031 = add nsw i32 %1030, -65
  %1032 = icmp ugt i32 %1031, 25
  %1033 = icmp ne i8 %1026, 95
  %1034 = and i1 %1029, %1032
  %1035 = and i1 %1033, %1034
  br i1 %1035, label %479, label %496

1036:                                             ; preds = %467
  %1037 = getelementptr inbounds i8, i8* %168, i64 2
  %1038 = load i8, i8* %1037, align 1
  %1039 = icmp eq i8 %1038, 114
  br i1 %1039, label %1040, label %496

1040:                                             ; preds = %1036
  %1041 = getelementptr inbounds i8, i8* %168, i64 3
  %1042 = load i8, i8* %1041, align 1
  %1043 = icmp eq i8 %1042, 116
  br i1 %1043, label %1044, label %496

1044:                                             ; preds = %1040
  %1045 = getelementptr inbounds i8, i8* %168, i64 4
  %1046 = load i8, i8* %1045, align 1
  %1047 = sext i8 %1046 to i32
  %1048 = add nsw i32 %1047, -48
  %1049 = icmp ugt i32 %1048, 9
  %1050 = and i32 %1047, -33
  %1051 = add nsw i32 %1050, -65
  %1052 = icmp ugt i32 %1051, 25
  %1053 = icmp ne i8 %1046, 95
  %1054 = and i1 %1049, %1052
  %1055 = and i1 %1053, %1054
  br i1 %1055, label %471, label %496

1056:                                             ; preds = %459
  %1057 = getelementptr inbounds i8, i8* %168, i64 2
  %1058 = load i8, i8* %1057, align 1
  %1059 = icmp eq i8 %1058, 117
  br i1 %1059, label %1060, label %466

1060:                                             ; preds = %1056
  %1061 = getelementptr inbounds i8, i8* %168, i64 3
  %1062 = load i8, i8* %1061, align 1
  %1063 = icmp eq i8 %1062, 110
  br i1 %1063, label %1064, label %466

1064:                                             ; preds = %1060
  %1065 = getelementptr inbounds i8, i8* %168, i64 4
  %1066 = load i8, i8* %1065, align 1
  %1067 = icmp eq i8 %1066, 100
  br i1 %1067, label %1068, label %466

1068:                                             ; preds = %1064
  %1069 = getelementptr inbounds i8, i8* %168, i64 5
  %1070 = load i8, i8* %1069, align 1
  %1071 = sext i8 %1070 to i32
  %1072 = add nsw i32 %1071, -48
  %1073 = icmp ugt i32 %1072, 9
  %1074 = and i32 %1071, -33
  %1075 = add nsw i32 %1074, -65
  %1076 = icmp ugt i32 %1075, 25
  %1077 = icmp ne i8 %1070, 95
  %1078 = and i1 %1073, %1076
  %1079 = and i1 %1077, %1078
  br i1 %1079, label %463, label %466

1080:                                             ; preds = %451
  %1081 = getelementptr inbounds i8, i8* %168, i64 2
  %1082 = load i8, i8* %1081, align 1
  %1083 = icmp eq i8 %1082, 117
  br i1 %1083, label %1084, label %458

1084:                                             ; preds = %1080
  %1085 = getelementptr inbounds i8, i8* %168, i64 3
  %1086 = load i8, i8* %1085, align 1
  %1087 = icmp eq i8 %1086, 110
  br i1 %1087, label %1088, label %458

1088:                                             ; preds = %1084
  %1089 = getelementptr inbounds i8, i8* %168, i64 4
  %1090 = load i8, i8* %1089, align 1
  %1091 = icmp eq i8 %1090, 99
  br i1 %1091, label %1092, label %458

1092:                                             ; preds = %1088
  %1093 = getelementptr inbounds i8, i8* %168, i64 5
  %1094 = load i8, i8* %1093, align 1
  %1095 = sext i8 %1094 to i32
  %1096 = add nsw i32 %1095, -48
  %1097 = icmp ugt i32 %1096, 9
  %1098 = and i32 %1095, -33
  %1099 = add nsw i32 %1098, -65
  %1100 = icmp ugt i32 %1099, 25
  %1101 = icmp ne i8 %1094, 95
  %1102 = and i1 %1097, %1100
  %1103 = and i1 %1101, %1102
  br i1 %1103, label %455, label %458

1104:                                             ; preds = %443
  %1105 = getelementptr inbounds i8, i8* %168, i64 2
  %1106 = load i8, i8* %1105, align 1
  %1107 = icmp eq i8 %1106, 105
  br i1 %1107, label %1108, label %450

1108:                                             ; preds = %1104
  %1109 = getelementptr inbounds i8, i8* %168, i64 3
  %1110 = load i8, i8* %1109, align 1
  %1111 = icmp eq i8 %1110, 108
  br i1 %1111, label %1112, label %450

1112:                                             ; preds = %1108
  %1113 = getelementptr inbounds i8, i8* %168, i64 4
  %1114 = load i8, i8* %1113, align 1
  %1115 = sext i8 %1114 to i32
  %1116 = add nsw i32 %1115, -48
  %1117 = icmp ugt i32 %1116, 9
  %1118 = and i32 %1115, -33
  %1119 = add nsw i32 %1118, -65
  %1120 = icmp ugt i32 %1119, 25
  %1121 = icmp ne i8 %1114, 95
  %1122 = and i1 %1117, %1120
  %1123 = and i1 %1121, %1122
  br i1 %1123, label %447, label %450

1124:                                             ; preds = %435
  %1125 = getelementptr inbounds i8, i8* %168, i64 2
  %1126 = load i8, i8* %1125, align 1
  %1127 = icmp eq i8 %1126, 111
  br i1 %1127, label %1128, label %442

1128:                                             ; preds = %1124
  %1129 = getelementptr inbounds i8, i8* %168, i64 3
  %1130 = load i8, i8* %1129, align 1
  %1131 = icmp eq i8 %1130, 111
  br i1 %1131, label %1132, label %442

1132:                                             ; preds = %1128
  %1133 = getelementptr inbounds i8, i8* %168, i64 4
  %1134 = load i8, i8* %1133, align 1
  %1135 = icmp eq i8 %1134, 114
  br i1 %1135, label %1136, label %442

1136:                                             ; preds = %1132
  %1137 = getelementptr inbounds i8, i8* %168, i64 5
  %1138 = load i8, i8* %1137, align 1
  %1139 = sext i8 %1138 to i32
  %1140 = add nsw i32 %1139, -48
  %1141 = icmp ugt i32 %1140, 9
  %1142 = and i32 %1139, -33
  %1143 = add nsw i32 %1142, -65
  %1144 = icmp ugt i32 %1143, 25
  %1145 = icmp ne i8 %1138, 95
  %1146 = and i1 %1141, %1144
  %1147 = and i1 %1145, %1146
  br i1 %1147, label %439, label %442

1148:                                             ; preds = %426
  %1149 = getelementptr inbounds i8, i8* %168, i64 2
  %1150 = load i8, i8* %1149, align 1
  %1151 = icmp eq i8 %1150, 111
  br i1 %1151, label %1152, label %442

1152:                                             ; preds = %1148
  %1153 = getelementptr inbounds i8, i8* %168, i64 3
  %1154 = load i8, i8* %1153, align 1
  %1155 = icmp eq i8 %1154, 116
  br i1 %1155, label %1156, label %442

1156:                                             ; preds = %1152
  %1157 = getelementptr inbounds i8, i8* %168, i64 4
  %1158 = load i8, i8* %1157, align 1
  %1159 = sext i8 %1158 to i32
  %1160 = add nsw i32 %1159, -48
  %1161 = icmp ugt i32 %1160, 9
  %1162 = and i32 %1159, -33
  %1163 = add nsw i32 %1162, -65
  %1164 = icmp ugt i32 %1163, 25
  %1165 = icmp ne i8 %1158, 95
  %1166 = and i1 %1161, %1164
  %1167 = and i1 %1165, %1166
  br i1 %1167, label %430, label %442

1168:                                             ; preds = %417
  %1169 = getelementptr inbounds i8, i8* %168, i64 2
  %1170 = load i8, i8* %1169, align 1
  %1171 = icmp eq i8 %1170, 121
  br i1 %1171, label %1172, label %424

1172:                                             ; preds = %1168
  %1173 = getelementptr inbounds i8, i8* %168, i64 3
  %1174 = load i8, i8* %1173, align 1
  %1175 = icmp eq i8 %1174, 108
  br i1 %1175, label %1176, label %424

1176:                                             ; preds = %1172
  %1177 = getelementptr inbounds i8, i8* %168, i64 4
  %1178 = load i8, i8* %1177, align 1
  %1179 = icmp eq i8 %1178, 111
  br i1 %1179, label %1180, label %424

1180:                                             ; preds = %1176
  %1181 = getelementptr inbounds i8, i8* %168, i64 5
  %1182 = load i8, i8* %1181, align 1
  %1183 = icmp eq i8 %1182, 114
  br i1 %1183, label %1184, label %424

1184:                                             ; preds = %1180
  %1185 = getelementptr inbounds i8, i8* %168, i64 6
  %1186 = load i8, i8* %1185, align 1
  %1187 = sext i8 %1186 to i32
  %1188 = add nsw i32 %1187, -48
  %1189 = icmp ugt i32 %1188, 9
  %1190 = and i32 %1187, -33
  %1191 = add nsw i32 %1190, -65
  %1192 = icmp ugt i32 %1191, 25
  %1193 = icmp ne i8 %1186, 95
  %1194 = and i1 %1189, %1192
  %1195 = and i1 %1193, %1194
  br i1 %1195, label %421, label %424

1196:                                             ; preds = %409
  %1197 = getelementptr inbounds i8, i8* %168, i64 2
  %1198 = load i8, i8* %1197, align 1
  %1199 = icmp eq i8 %1198, 105
  br i1 %1199, label %1200, label %416

1200:                                             ; preds = %1196
  %1201 = getelementptr inbounds i8, i8* %168, i64 3
  %1202 = load i8, i8* %1201, align 1
  %1203 = icmp eq i8 %1202, 108
  br i1 %1203, label %1204, label %416

1204:                                             ; preds = %1200
  %1205 = getelementptr inbounds i8, i8* %168, i64 4
  %1206 = load i8, i8* %1205, align 1
  %1207 = icmp eq i8 %1206, 101
  br i1 %1207, label %1208, label %416

1208:                                             ; preds = %1204
  %1209 = getelementptr inbounds i8, i8* %168, i64 5
  %1210 = load i8, i8* %1209, align 1
  %1211 = sext i8 %1210 to i32
  %1212 = add nsw i32 %1211, -48
  %1213 = icmp ugt i32 %1212, 9
  %1214 = and i32 %1211, -33
  %1215 = add nsw i32 %1214, -65
  %1216 = icmp ugt i32 %1215, 25
  %1217 = icmp ne i8 %1210, 95
  %1218 = and i1 %1213, %1216
  %1219 = and i1 %1217, %1218
  br i1 %1219, label %413, label %416

1220:                                             ; preds = %400
  %1221 = getelementptr inbounds i8, i8* %168, i64 2
  %1222 = load i8, i8* %1221, align 1
  %1223 = sext i8 %1222 to i32
  %1224 = add nsw i32 %1223, -48
  %1225 = icmp ugt i32 %1224, 9
  %1226 = and i32 %1223, -33
  %1227 = add nsw i32 %1226, -65
  %1228 = icmp ugt i32 %1227, 25
  %1229 = icmp ne i8 %1222, 95
  %1230 = and i1 %1225, %1228
  %1231 = and i1 %1229, %1230
  br i1 %1231, label %404, label %416

1232:                                             ; preds = %392
  %1233 = getelementptr inbounds i8, i8* %168, i64 2
  %1234 = load i8, i8* %1233, align 1
  %1235 = icmp eq i8 %1234, 105
  br i1 %1235, label %1236, label %399

1236:                                             ; preds = %1232
  %1237 = getelementptr inbounds i8, i8* %168, i64 3
  %1238 = load i8, i8* %1237, align 1
  %1239 = icmp eq i8 %1238, 110
  br i1 %1239, label %1240, label %399

1240:                                             ; preds = %1236
  %1241 = getelementptr inbounds i8, i8* %168, i64 4
  %1242 = load i8, i8* %1241, align 1
  %1243 = icmp eq i8 %1242, 102
  br i1 %1243, label %1244, label %399

1244:                                             ; preds = %1240
  %1245 = getelementptr inbounds i8, i8* %168, i64 5
  %1246 = load i8, i8* %1245, align 1
  %1247 = sext i8 %1246 to i32
  %1248 = add nsw i32 %1247, -48
  %1249 = icmp ugt i32 %1248, 9
  %1250 = and i32 %1247, -33
  %1251 = add nsw i32 %1250, -65
  %1252 = icmp ugt i32 %1251, 25
  %1253 = icmp ne i8 %1246, 95
  %1254 = and i1 %1249, %1252
  %1255 = and i1 %1253, %1254
  br i1 %1255, label %396, label %399

1256:                                             ; preds = %385
  %1257 = getelementptr inbounds i8, i8* %168, i64 2
  %1258 = load i8, i8* %1257, align 1
  %1259 = icmp eq i8 %1258, 110
  br i1 %1259, label %1260, label %392

1260:                                             ; preds = %1256
  %1261 = getelementptr inbounds i8, i8* %168, i64 3
  %1262 = load i8, i8* %1261, align 1
  %1263 = icmp eq i8 %1262, 97
  br i1 %1263, label %1264, label %392

1264:                                             ; preds = %1260
  %1265 = getelementptr inbounds i8, i8* %168, i64 4
  %1266 = load i8, i8* %1265, align 1
  %1267 = icmp eq i8 %1266, 110
  br i1 %1267, label %1268, label %392

1268:                                             ; preds = %1264
  %1269 = getelementptr inbounds i8, i8* %168, i64 5
  %1270 = load i8, i8* %1269, align 1
  %1271 = sext i8 %1270 to i32
  %1272 = add nsw i32 %1271, -48
  %1273 = icmp ugt i32 %1272, 9
  %1274 = and i32 %1271, -33
  %1275 = add nsw i32 %1274, -65
  %1276 = icmp ugt i32 %1275, 25
  %1277 = icmp ne i8 %1270, 95
  %1278 = and i1 %1273, %1276
  %1279 = and i1 %1277, %1278
  br i1 %1279, label %389, label %392

1280:                                             ; preds = %376
  %1281 = getelementptr inbounds i8, i8* %168, i64 2
  %1282 = load i8, i8* %1281, align 1
  %1283 = sext i8 %1282 to i32
  %1284 = add nsw i32 %1283, -48
  %1285 = icmp ugt i32 %1284, 9
  %1286 = and i32 %1283, -33
  %1287 = add nsw i32 %1286, -65
  %1288 = icmp ugt i32 %1287, 25
  %1289 = icmp ne i8 %1282, 95
  %1290 = and i1 %1285, %1288
  %1291 = and i1 %1289, %1290
  br i1 %1291, label %380, label %383

1292:                                             ; preds = %369
  %1293 = getelementptr inbounds i8, i8* %168, i64 2
  %1294 = load i8, i8* %1293, align 1
  %1295 = sext i8 %1294 to i32
  %1296 = add nsw i32 %1295, -48
  %1297 = icmp ugt i32 %1296, 9
  %1298 = and i32 %1295, -33
  %1299 = add nsw i32 %1298, -65
  %1300 = icmp ugt i32 %1299, 25
  %1301 = icmp ne i8 %1294, 95
  %1302 = and i1 %1297, %1300
  %1303 = and i1 %1301, %1302
  br i1 %1303, label %373, label %376

1304:                                             ; preds = %362
  %1305 = getelementptr inbounds i8, i8* %168, i64 2
  %1306 = load i8, i8* %1305, align 1
  %1307 = icmp eq i8 %1306, 101
  br i1 %1307, label %1308, label %369

1308:                                             ; preds = %1304
  %1309 = getelementptr inbounds i8, i8* %168, i64 3
  %1310 = load i8, i8* %1309, align 1
  %1311 = sext i8 %1310 to i32
  %1312 = add nsw i32 %1311, -48
  %1313 = icmp ugt i32 %1312, 9
  %1314 = and i32 %1311, -33
  %1315 = add nsw i32 %1314, -65
  %1316 = icmp ugt i32 %1315, 25
  %1317 = icmp ne i8 %1310, 95
  %1318 = and i1 %1313, %1316
  %1319 = and i1 %1317, %1318
  br i1 %1319, label %366, label %369

1320:                                             ; preds = %354
  %1321 = getelementptr inbounds i8, i8* %168, i64 2
  %1322 = load i8, i8* %1321, align 1
  %1323 = sext i8 %1322 to i32
  %1324 = add nsw i32 %1323, -48
  %1325 = icmp ugt i32 %1324, 9
  %1326 = and i32 %1323, -33
  %1327 = add nsw i32 %1326, -65
  %1328 = icmp ugt i32 %1327, 25
  %1329 = icmp ne i8 %1322, 95
  %1330 = and i1 %1325, %1328
  %1331 = and i1 %1329, %1330
  br i1 %1331, label %358, label %361

1332:                                             ; preds = %347
  %1333 = getelementptr inbounds i8, i8* %168, i64 2
  %1334 = load i8, i8* %1333, align 1
  %1335 = icmp eq i8 %1334, 101
  br i1 %1335, label %1336, label %354

1336:                                             ; preds = %1332
  %1337 = getelementptr inbounds i8, i8* %168, i64 3
  %1338 = load i8, i8* %1337, align 1
  %1339 = sext i8 %1338 to i32
  %1340 = add nsw i32 %1339, -48
  %1341 = icmp ugt i32 %1340, 9
  %1342 = and i32 %1339, -33
  %1343 = add nsw i32 %1342, -65
  %1344 = icmp ugt i32 %1343, 25
  %1345 = icmp ne i8 %1338, 95
  %1346 = and i1 %1341, %1344
  %1347 = and i1 %1345, %1346
  br i1 %1347, label %351, label %354

1348:                                             ; preds = %329
  %1349 = getelementptr inbounds i8, i8* %168, i64 2
  %1350 = load i8, i8* %1349, align 1
  %1351 = sext i8 %1350 to i32
  %1352 = add nsw i32 %1351, -48
  %1353 = icmp ugt i32 %1352, 9
  %1354 = and i32 %1351, -33
  %1355 = add nsw i32 %1354, -65
  %1356 = icmp ugt i32 %1355, 25
  %1357 = icmp ne i8 %1350, 95
  %1358 = and i1 %1353, %1356
  %1359 = and i1 %1357, %1358
  br i1 %1359, label %338, label %341

1360:                                             ; preds = %321
  %1361 = getelementptr inbounds i8, i8* %168, i64 2
  %1362 = load i8, i8* %1361, align 1
  %1363 = icmp eq i8 %1362, 110
  br i1 %1363, label %1364, label %328

1364:                                             ; preds = %1360
  %1365 = getelementptr inbounds i8, i8* %168, i64 3
  %1366 = load i8, i8* %1365, align 1
  %1367 = sext i8 %1366 to i32
  %1368 = add nsw i32 %1367, -48
  %1369 = icmp ugt i32 %1368, 9
  %1370 = and i32 %1367, -33
  %1371 = add nsw i32 %1370, -65
  %1372 = icmp ugt i32 %1371, 25
  %1373 = icmp ne i8 %1366, 95
  %1374 = and i1 %1369, %1372
  %1375 = and i1 %1373, %1374
  br i1 %1375, label %325, label %328

1376:                                             ; preds = %307
  %1377 = getelementptr inbounds i8, i8* %168, i64 2
  %1378 = load i8, i8* %1377, align 1
  %1379 = icmp eq i8 %1378, 120
  br i1 %1379, label %1380, label %321

1380:                                             ; preds = %1376
  %1381 = getelementptr inbounds i8, i8* %168, i64 3
  %1382 = load i8, i8* %1381, align 1
  %1383 = sext i8 %1382 to i32
  %1384 = add nsw i32 %1383, -48
  %1385 = icmp ugt i32 %1384, 9
  %1386 = and i32 %1383, -33
  %1387 = add nsw i32 %1386, -65
  %1388 = icmp ugt i32 %1387, 25
  %1389 = icmp ne i8 %1382, 95
  %1390 = and i1 %1385, %1388
  %1391 = and i1 %1389, %1390
  br i1 %1391, label %311, label %321

1392:                                             ; preds = %300
  %1393 = getelementptr inbounds i8, i8* %168, i64 2
  %1394 = load i8, i8* %1393, align 1
  %1395 = icmp eq i8 %1394, 100
  br i1 %1395, label %1396, label %307

1396:                                             ; preds = %1392
  %1397 = getelementptr inbounds i8, i8* %168, i64 3
  %1398 = load i8, i8* %1397, align 1
  %1399 = sext i8 %1398 to i32
  %1400 = add nsw i32 %1399, -48
  %1401 = icmp ugt i32 %1400, 9
  %1402 = and i32 %1399, -33
  %1403 = add nsw i32 %1402, -65
  %1404 = icmp ugt i32 %1403, 25
  %1405 = icmp ne i8 %1398, 95
  %1406 = and i1 %1401, %1404
  %1407 = and i1 %1405, %1406
  br i1 %1407, label %304, label %307

1408:                                             ; preds = %286
  %1409 = getelementptr inbounds i8, i8* %168, i64 2
  %1410 = load i8, i8* %1409, align 1
  %1411 = icmp eq i8 %1410, 117
  br i1 %1411, label %1412, label %314

1412:                                             ; preds = %1408
  %1413 = getelementptr inbounds i8, i8* %168, i64 3
  %1414 = load i8, i8* %1413, align 1
  %1415 = icmp eq i8 %1414, 115
  br i1 %1415, label %1416, label %314

1416:                                             ; preds = %1412
  %1417 = getelementptr inbounds i8, i8* %168, i64 4
  %1418 = load i8, i8* %1417, align 1
  %1419 = icmp eq i8 %1418, 115
  br i1 %1419, label %1420, label %314

1420:                                             ; preds = %1416
  %1421 = getelementptr inbounds i8, i8* %168, i64 5
  %1422 = load i8, i8* %1421, align 1
  %1423 = sext i8 %1422 to i32
  %1424 = add nsw i32 %1423, -48
  %1425 = icmp ugt i32 %1424, 9
  %1426 = and i32 %1423, -33
  %1427 = add nsw i32 %1426, -65
  %1428 = icmp ugt i32 %1427, 25
  %1429 = icmp ne i8 %1422, 95
  %1430 = and i1 %1425, %1428
  %1431 = and i1 %1429, %1430
  br i1 %1431, label %290, label %314

1432:                                             ; preds = %277
  %1433 = getelementptr inbounds i8, i8* %168, i64 2
  %1434 = load i8, i8* %1433, align 1
  %1435 = icmp eq i8 %1434, 117
  br i1 %1435, label %1436, label %293

1436:                                             ; preds = %1432
  %1437 = getelementptr inbounds i8, i8* %168, i64 3
  %1438 = load i8, i8* %1437, align 1
  %1439 = icmp eq i8 %1438, 105
  br i1 %1439, label %1440, label %293

1440:                                             ; preds = %1436
  %1441 = getelementptr inbounds i8, i8* %168, i64 4
  %1442 = load i8, i8* %1441, align 1
  %1443 = icmp eq i8 %1442, 115
  br i1 %1443, label %1444, label %293

1444:                                             ; preds = %1440
  %1445 = getelementptr inbounds i8, i8* %168, i64 5
  %1446 = load i8, i8* %1445, align 1
  %1447 = icmp eq i8 %1446, 104
  br i1 %1447, label %1448, label %293

1448:                                             ; preds = %1444
  %1449 = getelementptr inbounds i8, i8* %168, i64 6
  %1450 = load i8, i8* %1449, align 1
  %1451 = sext i8 %1450 to i32
  %1452 = add nsw i32 %1451, -48
  %1453 = icmp ugt i32 %1452, 9
  %1454 = and i32 %1451, -33
  %1455 = add nsw i32 %1454, -65
  %1456 = icmp ugt i32 %1455, 25
  %1457 = icmp ne i8 %1450, 95
  %1458 = and i1 %1453, %1456
  %1459 = and i1 %1457, %1458
  br i1 %1459, label %281, label %293

1460:                                             ; preds = %264
  %1461 = getelementptr inbounds i8, i8* %168, i64 2
  %1462 = load i8, i8* %1461, align 1
  %1463 = icmp eq i8 %1462, 109
  br i1 %1463, label %1464, label %273

1464:                                             ; preds = %1460
  %1465 = getelementptr inbounds i8, i8* %168, i64 3
  %1466 = load i8, i8* %1465, align 1
  %1467 = icmp eq i8 %1466, 101
  br i1 %1467, label %1468, label %273

1468:                                             ; preds = %1464
  %1469 = getelementptr inbounds i8, i8* %168, i64 4
  %1470 = load i8, i8* %1469, align 1
  %1471 = sext i8 %1470 to i32
  %1472 = add nsw i32 %1471, -48
  %1473 = icmp ugt i32 %1472, 9
  %1474 = and i32 %1471, -33
  %1475 = add nsw i32 %1474, -65
  %1476 = icmp ugt i32 %1475, 25
  %1477 = icmp ne i8 %1470, 95
  %1478 = and i1 %1473, %1476
  %1479 = and i1 %1477, %1478
  br i1 %1479, label %270, label %273

1480:                                             ; preds = %256
  %1481 = getelementptr inbounds i8, i8* %168, i64 2
  %1482 = load i8, i8* %1481, align 1
  %1483 = icmp eq i8 %1482, 115
  br i1 %1483, label %1484, label %293

1484:                                             ; preds = %1480
  %1485 = getelementptr inbounds i8, i8* %168, i64 3
  %1486 = load i8, i8* %1485, align 1
  %1487 = sext i8 %1486 to i32
  %1488 = add nsw i32 %1487, -48
  %1489 = icmp ugt i32 %1488, 9
  %1490 = and i32 %1487, -33
  %1491 = add nsw i32 %1490, -65
  %1492 = icmp ugt i32 %1491, 25
  %1493 = icmp ne i8 %1486, 95
  %1494 = and i1 %1489, %1492
  %1495 = and i1 %1493, %1494
  br i1 %1495, label %260, label %293

1496:                                             ; preds = %248
  %1497 = getelementptr inbounds i8, i8* %168, i64 2
  %1498 = load i8, i8* %1497, align 1
  %1499 = icmp eq i8 %1498, 103
  br i1 %1499, label %1500, label %255

1500:                                             ; preds = %1496
  %1501 = getelementptr inbounds i8, i8* %168, i64 3
  %1502 = load i8, i8* %1501, align 1
  %1503 = sext i8 %1502 to i32
  %1504 = add nsw i32 %1503, -48
  %1505 = icmp ugt i32 %1504, 9
  %1506 = and i32 %1503, -33
  %1507 = add nsw i32 %1506, -65
  %1508 = icmp ugt i32 %1507, 25
  %1509 = icmp ne i8 %1502, 95
  %1510 = and i1 %1505, %1508
  %1511 = and i1 %1509, %1510
  br i1 %1511, label %252, label %255

1512:                                             ; preds = %239
  %1513 = getelementptr inbounds i8, i8* %168, i64 2
  %1514 = load i8, i8* %1513, align 1
  %1515 = icmp eq i8 %1514, 112
  br i1 %1515, label %1516, label %263

1516:                                             ; preds = %1512
  %1517 = getelementptr inbounds i8, i8* %168, i64 3
  %1518 = load i8, i8* %1517, align 1
  %1519 = sext i8 %1518 to i32
  %1520 = add nsw i32 %1519, -48
  %1521 = icmp ugt i32 %1520, 9
  %1522 = and i32 %1519, -33
  %1523 = add nsw i32 %1522, -65
  %1524 = icmp ugt i32 %1523, 25
  %1525 = icmp ne i8 %1518, 95
  %1526 = and i1 %1521, %1524
  %1527 = and i1 %1525, %1526
  br i1 %1527, label %243, label %263

1528:                                             ; preds = %228
  %1529 = getelementptr inbounds i8, i8* %168, i64 2
  %1530 = load i8, i8* %1529, align 1
  %1531 = icmp eq i8 %1530, 111
  br i1 %1531, label %1532, label %256

1532:                                             ; preds = %1528
  %1533 = getelementptr inbounds i8, i8* %168, i64 3
  %1534 = load i8, i8* %1533, align 1
  %1535 = icmp eq i8 %1534, 115
  br i1 %1535, label %1536, label %256

1536:                                             ; preds = %1532
  %1537 = getelementptr inbounds i8, i8* %168, i64 4
  %1538 = load i8, i8* %1537, align 1
  %1539 = sext i8 %1538 to i32
  %1540 = add nsw i32 %1539, -48
  %1541 = icmp ugt i32 %1540, 9
  %1542 = and i32 %1539, -33
  %1543 = add nsw i32 %1542, -65
  %1544 = icmp ugt i32 %1543, 25
  %1545 = icmp ne i8 %1538, 95
  %1546 = and i1 %1541, %1544
  %1547 = and i1 %1545, %1546
  br i1 %1547, label %232, label %256

1548:                                             ; preds = %221
  %1549 = getelementptr inbounds i8, i8* %168, i64 2
  %1550 = load i8, i8* %1549, align 1
  %1551 = icmp eq i8 %1550, 105
  br i1 %1551, label %1552, label %228

1552:                                             ; preds = %1548
  %1553 = getelementptr inbounds i8, i8* %168, i64 3
  %1554 = load i8, i8* %1553, align 1
  %1555 = icmp eq i8 %1554, 110
  br i1 %1555, label %1556, label %228

1556:                                             ; preds = %1552
  %1557 = getelementptr inbounds i8, i8* %168, i64 4
  %1558 = load i8, i8* %1557, align 1
  %1559 = sext i8 %1558 to i32
  %1560 = add nsw i32 %1559, -48
  %1561 = icmp ugt i32 %1560, 9
  %1562 = and i32 %1559, -33
  %1563 = add nsw i32 %1562, -65
  %1564 = icmp ugt i32 %1563, 25
  %1565 = icmp ne i8 %1558, 95
  %1566 = and i1 %1561, %1564
  %1567 = and i1 %1565, %1566
  br i1 %1567, label %225, label %228

1568:                                             ; preds = %214
  %1569 = getelementptr inbounds i8, i8* %168, i64 2
  %1570 = load i8, i8* %1569, align 1
  %1571 = icmp eq i8 %1570, 97
  br i1 %1571, label %1572, label %221

1572:                                             ; preds = %1568
  %1573 = getelementptr inbounds i8, i8* %168, i64 3
  %1574 = load i8, i8* %1573, align 1
  %1575 = icmp eq i8 %1574, 110
  br i1 %1575, label %1576, label %221

1576:                                             ; preds = %1572
  %1577 = getelementptr inbounds i8, i8* %168, i64 4
  %1578 = load i8, i8* %1577, align 1
  %1579 = sext i8 %1578 to i32
  %1580 = add nsw i32 %1579, -48
  %1581 = icmp ugt i32 %1580, 9
  %1582 = and i32 %1579, -33
  %1583 = add nsw i32 %1582, -65
  %1584 = icmp ugt i32 %1583, 25
  %1585 = icmp ne i8 %1578, 95
  %1586 = and i1 %1581, %1584
  %1587 = and i1 %1585, %1586
  br i1 %1587, label %218, label %221

1588:                                             ; preds = %207
  %1589 = getelementptr inbounds i8, i8* %168, i64 2
  %1590 = load i8, i8* %1589, align 1
  %1591 = icmp eq i8 %1590, 110
  br i1 %1591, label %1592, label %235

1592:                                             ; preds = %1588
  %1593 = getelementptr inbounds i8, i8* %168, i64 3
  %1594 = load i8, i8* %1593, align 1
  %1595 = sext i8 %1594 to i32
  %1596 = add nsw i32 %1595, -48
  %1597 = icmp ugt i32 %1596, 9
  %1598 = and i32 %1595, -33
  %1599 = add nsw i32 %1598, -65
  %1600 = icmp ugt i32 %1599, 25
  %1601 = icmp ne i8 %1594, 95
  %1602 = and i1 %1597, %1600
  %1603 = and i1 %1601, %1602
  br i1 %1603, label %211, label %235

1604:                                             ; preds = %200
  %1605 = getelementptr inbounds i8, i8* %168, i64 2
  %1606 = load i8, i8* %1605, align 1
  %1607 = icmp eq i8 %1606, 115
  br i1 %1607, label %1608, label %235

1608:                                             ; preds = %1604
  %1609 = getelementptr inbounds i8, i8* %168, i64 3
  %1610 = load i8, i8* %1609, align 1
  %1611 = sext i8 %1610 to i32
  %1612 = add nsw i32 %1611, -48
  %1613 = icmp ugt i32 %1612, 9
  %1614 = and i32 %1611, -33
  %1615 = add nsw i32 %1614, -65
  %1616 = icmp ugt i32 %1615, 25
  %1617 = icmp ne i8 %1610, 95
  %1618 = and i1 %1613, %1616
  %1619 = and i1 %1617, %1618
  br i1 %1619, label %204, label %235

1620:                                             ; preds = %193
  %1621 = getelementptr inbounds i8, i8* %168, i64 2
  %1622 = load i8, i8* %1621, align 1
  %1623 = icmp eq i8 %1622, 110
  br i1 %1623, label %1624, label %235

1624:                                             ; preds = %1620
  %1625 = getelementptr inbounds i8, i8* %168, i64 3
  %1626 = load i8, i8* %1625, align 1
  %1627 = sext i8 %1626 to i32
  %1628 = add nsw i32 %1627, -48
  %1629 = icmp ugt i32 %1628, 9
  %1630 = and i32 %1627, -33
  %1631 = add nsw i32 %1630, -65
  %1632 = icmp ugt i32 %1631, 25
  %1633 = icmp ne i8 %1626, 95
  %1634 = and i1 %1629, %1632
  %1635 = and i1 %1633, %1634
  br i1 %1635, label %197, label %235

1636:                                             ; preds = %186
  %1637 = getelementptr inbounds i8, i8* %168, i64 2
  %1638 = load i8, i8* %1637, align 1
  %1639 = icmp eq i8 %1638, 110
  br i1 %1639, label %1640, label %207

1640:                                             ; preds = %1636
  %1641 = getelementptr inbounds i8, i8* %168, i64 3
  %1642 = load i8, i8* %1641, align 1
  %1643 = icmp eq i8 %1642, 104
  br i1 %1643, label %1644, label %207

1644:                                             ; preds = %1640
  %1645 = getelementptr inbounds i8, i8* %168, i64 4
  %1646 = load i8, i8* %1645, align 1
  %1647 = sext i8 %1646 to i32
  %1648 = add nsw i32 %1647, -48
  %1649 = icmp ugt i32 %1648, 9
  %1650 = and i32 %1647, -33
  %1651 = add nsw i32 %1650, -65
  %1652 = icmp ugt i32 %1651, 25
  %1653 = icmp ne i8 %1646, 95
  %1654 = and i1 %1649, %1652
  %1655 = and i1 %1653, %1654
  br i1 %1655, label %190, label %207

1656:                                             ; preds = %179
  %1657 = getelementptr inbounds i8, i8* %168, i64 2
  %1658 = load i8, i8* %1657, align 1
  %1659 = icmp eq i8 %1658, 115
  br i1 %1659, label %1660, label %200

1660:                                             ; preds = %1656
  %1661 = getelementptr inbounds i8, i8* %168, i64 3
  %1662 = load i8, i8* %1661, align 1
  %1663 = icmp eq i8 %1662, 104
  br i1 %1663, label %1664, label %200

1664:                                             ; preds = %1660
  %1665 = getelementptr inbounds i8, i8* %168, i64 4
  %1666 = load i8, i8* %1665, align 1
  %1667 = sext i8 %1666 to i32
  %1668 = add nsw i32 %1667, -48
  %1669 = icmp ugt i32 %1668, 9
  %1670 = and i32 %1667, -33
  %1671 = add nsw i32 %1670, -65
  %1672 = icmp ugt i32 %1671, 25
  %1673 = icmp ne i8 %1666, 95
  %1674 = and i1 %1669, %1672
  %1675 = and i1 %1673, %1674
  br i1 %1675, label %183, label %200

1676:                                             ; preds = %171
  %1677 = getelementptr inbounds i8, i8* %168, i64 2
  %1678 = load i8, i8* %1677, align 1
  %1679 = icmp eq i8 %1678, 110
  br i1 %1679, label %1680, label %193

1680:                                             ; preds = %1676
  %1681 = getelementptr inbounds i8, i8* %168, i64 3
  %1682 = load i8, i8* %1681, align 1
  %1683 = icmp eq i8 %1682, 104
  br i1 %1683, label %1684, label %193

1684:                                             ; preds = %1680
  %1685 = getelementptr inbounds i8, i8* %168, i64 4
  %1686 = load i8, i8* %1685, align 1
  %1687 = sext i8 %1686 to i32
  %1688 = add nsw i32 %1687, -48
  %1689 = icmp ugt i32 %1688, 9
  %1690 = and i32 %1687, -33
  %1691 = add nsw i32 %1690, -65
  %1692 = icmp ugt i32 %1691, 25
  %1693 = icmp ne i8 %1686, 95
  %1694 = and i1 %1689, %1692
  %1695 = and i1 %1693, %1694
  br i1 %1695, label %175, label %193

1696:                                             ; preds = %83
  switch i8 %82, label %1712 [
    i8 80, label %1697
    i8 81, label %1708
  ]

1697:                                             ; preds = %80, %1696
  %1698 = getelementptr inbounds i8, i8* %81, i64 1
  %1699 = load i8, i8* %1698, align 1
  %1700 = icmp eq i8 %1699, 73
  br i1 %1700, label %1771, label %1701

1701:                                             ; preds = %1771, %1697
  switch i8 %82, label %1712 [
    i8 80, label %1702
    i8 81, label %1708
  ]

1702:                                             ; preds = %1701
  %1703 = getelementptr inbounds i8, i8* %81, i64 1
  %1704 = load i8, i8* %1703, align 1
  %1705 = icmp eq i8 %1704, 72
  br i1 %1705, label %1755, label %1706

1706:                                             ; preds = %1759, %1755, %1702
  %1707 = icmp eq i8 %82, 81
  br i1 %1707, label %1708, label %1712

1708:                                             ; preds = %80, %1696, %1701, %1706
  %1709 = getelementptr inbounds i8, i8* %81, i64 1
  %1710 = load i8, i8* %1709, align 1
  %1711 = icmp eq i8 %1710, 80
  br i1 %1711, label %1715, label %1712

1712:                                             ; preds = %1706, %1708, %1715, %1719, %1723, %1727, %1731, %1735, %1739, %1701, %1696, %80, %1743
  %1713 = call i8* @strchr(i8* %81, i32 40) #12
  store i8* %1713, i8** %9, align 8
  %1714 = icmp eq i8* %1713, null
  br i1 %1714, label %109, label %113

1715:                                             ; preds = %1708
  %1716 = getelementptr inbounds i8, i8* %81, i64 2
  %1717 = load i8, i8* %1716, align 1
  %1718 = icmp eq i8 %1717, 50
  br i1 %1718, label %1719, label %1712

1719:                                             ; preds = %1715
  %1720 = getelementptr inbounds i8, i8* %81, i64 3
  %1721 = load i8, i8* %1720, align 1
  %1722 = icmp eq i8 %1721, 76
  br i1 %1722, label %1723, label %1712

1723:                                             ; preds = %1719
  %1724 = getelementptr inbounds i8, i8* %81, i64 4
  %1725 = load i8, i8* %1724, align 1
  %1726 = icmp eq i8 %1725, 65
  br i1 %1726, label %1727, label %1712

1727:                                             ; preds = %1723
  %1728 = getelementptr inbounds i8, i8* %81, i64 5
  %1729 = load i8, i8* %1728, align 1
  %1730 = icmp eq i8 %1729, 77
  br i1 %1730, label %1731, label %1712

1731:                                             ; preds = %1727
  %1732 = getelementptr inbounds i8, i8* %81, i64 6
  %1733 = load i8, i8* %1732, align 1
  %1734 = icmp eq i8 %1733, 66
  br i1 %1734, label %1735, label %1712

1735:                                             ; preds = %1731
  %1736 = getelementptr inbounds i8, i8* %81, i64 7
  %1737 = load i8, i8* %1736, align 1
  %1738 = icmp eq i8 %1737, 68
  br i1 %1738, label %1739, label %1712

1739:                                             ; preds = %1735
  %1740 = getelementptr inbounds i8, i8* %81, i64 8
  %1741 = load i8, i8* %1740, align 1
  %1742 = icmp eq i8 %1741, 65
  br i1 %1742, label %1743, label %1712

1743:                                             ; preds = %1739
  %1744 = getelementptr inbounds i8, i8* %81, i64 9
  %1745 = load i8, i8* %1744, align 1
  %1746 = sext i8 %1745 to i32
  %1747 = add nsw i32 %1746, -48
  %1748 = icmp ugt i32 %1747, 9
  %1749 = and i32 %1746, -33
  %1750 = add nsw i32 %1749, -65
  %1751 = icmp ugt i32 %1750, 25
  %1752 = icmp ne i8 %1745, 95
  %1753 = and i1 %1748, %1751
  %1754 = and i1 %1752, %1753
  br i1 %1754, label %95, label %1712

1755:                                             ; preds = %1702
  %1756 = getelementptr inbounds i8, i8* %81, i64 2
  %1757 = load i8, i8* %1756, align 1
  %1758 = icmp eq i8 %1757, 73
  br i1 %1758, label %1759, label %1706

1759:                                             ; preds = %1755
  %1760 = getelementptr inbounds i8, i8* %81, i64 3
  %1761 = load i8, i8* %1760, align 1
  %1762 = sext i8 %1761 to i32
  %1763 = add nsw i32 %1762, -48
  %1764 = icmp ugt i32 %1763, 9
  %1765 = and i32 %1762, -33
  %1766 = add nsw i32 %1765, -65
  %1767 = icmp ugt i32 %1766, 25
  %1768 = icmp ne i8 %1761, 95
  %1769 = and i1 %1764, %1767
  %1770 = and i1 %1768, %1769
  br i1 %1770, label %95, label %1706

1771:                                             ; preds = %1697
  %1772 = getelementptr inbounds i8, i8* %81, i64 2
  %1773 = load i8, i8* %1772, align 1
  %1774 = sext i8 %1773 to i32
  %1775 = add nsw i32 %1774, -48
  %1776 = icmp ugt i32 %1775, 9
  %1777 = and i32 %1774, -33
  %1778 = add nsw i32 %1777, -65
  %1779 = icmp ugt i32 %1778, 25
  %1780 = icmp ne i8 %1773, 95
  %1781 = and i1 %1776, %1779
  %1782 = and i1 %1780, %1781
  br i1 %1782, label %95, label %1701
}

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #8

; Function Attrs: nofree nounwind readnone
declare double @sinh(double) #9

; Function Attrs: nofree nounwind readnone
declare double @cosh(double) #9

; Function Attrs: nofree nounwind readnone
declare double @tanh(double) #9

; Function Attrs: nofree nounwind readnone
declare double @sin(double) #9

; Function Attrs: nofree nounwind readnone
declare double @cos(double) #9

; Function Attrs: nofree nounwind readnone
declare double @tan(double) #9

; Function Attrs: nofree nounwind readnone
declare double @atan(double) #9

; Function Attrs: nofree nounwind readnone
declare double @asin(double) #9

; Function Attrs: nofree nounwind readnone
declare double @acos(double) #9

; Function Attrs: nofree nounwind readnone
declare double @exp(double) #9

; Function Attrs: nofree nounwind readnone
declare double @log(double) #9

; Function Attrs: nofree nounwind readnone
declare double @fabs(double) #9

; Function Attrs: nounwind ssp uwtable
define internal double @etime(double) #0 {
  %2 = tail call i64 @av_gettime() #11
  %3 = sitofp i64 %2 to double
  %4 = fmul nsz double %3, 0x3EB0C6F7A0B5ED8D
  ret double %4
}

declare i64 @av_gettime() local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.exp.f64(double) #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sqrt.f64(double) #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.trunc.f64(double) #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.pow.f64(double, double) #7

; Function Attrs: nounwind readnone
declare i64 @av_gcd(i64, i64) local_unnamed_addr #10

; Function Attrs: nounwind readnone
declare double @hypot(double, double) local_unnamed_addr #10

; Function Attrs: nofree nounwind readnone
declare double @atan2(double, double) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { nounwind readonly }
attributes #13 = { readnone }
attributes #14 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1134804, i32 1134820, i32 1134853}
