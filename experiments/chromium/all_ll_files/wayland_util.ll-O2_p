; ModuleID = '../../ui/ozone/platform/wayland/common/wayland_util.cc'
source_filename = "../../ui/ozone/platform/wayland/common/wayland_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.ui::WaylandConnection" = type { i32, %"class.wl::Object", %"class.wl::Object.1", %"class.wl::Object.5", %"class.wl::Object.9", %"class.wl::Object.13", %"class.wl::Object.17", %"class.wl::Object.21", %"class.wl::Object.25", %"class.wl::Object.29", %"class.wl::Object.33", %"class.wl::Object.37", %"class.wl::Object.41", %"class.wl::Object.45", %"class.wl::Object.49", %"class.wl::Object.53", %"class.wl::Object.57", %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.71", %"class.std::__1::unique_ptr.77", %"class.std::__1::unique_ptr.83", %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.95", %"class.std::__1::unique_ptr.101", %"class.std::__1::unique_ptr.107", %"class.std::__1::unique_ptr.113", %"class.std::__1::unique_ptr.119", %"class.std::__1::unique_ptr.125", %"class.std::__1::unique_ptr.131", %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.143", %"class.std::__1::unique_ptr.149", %"class.std::__1::unique_ptr.155", %"class.std::__1::unique_ptr.161", %"class.std::__1::unique_ptr.167", %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.185", %"class.std::__1::unique_ptr.343", i32, %"class.std::__1::unique_ptr.349", %"class.ui::WaylandWindowManager", %"class.ui::WaylandCursorBufferListener"*, i8, %"struct.ui::WaylandConnection::EventSerial", i32 }
%"class.wl::Object" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.wl_display* }
%struct.wl_display = type opaque
%"class.wl::Object.1" = type { %"class.std::__1::unique_ptr.2" }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %struct.wl_proxy* }
%struct.wl_proxy = type opaque
%"class.wl::Object.5" = type { %"class.std::__1::unique_ptr.6" }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %struct.wl_event_queue* }
%struct.wl_event_queue = type opaque
%"class.wl::Object.9" = type { %"class.std::__1::unique_ptr.10" }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %struct.wl_registry* }
%struct.wl_registry = type opaque
%"class.wl::Object.13" = type { %"class.std::__1::unique_ptr.14" }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %struct.wl_compositor* }
%struct.wl_compositor = type opaque
%"class.wl::Object.17" = type { %"class.std::__1::unique_ptr.18" }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %struct.wl_subcompositor* }
%struct.wl_subcompositor = type opaque
%"class.wl::Object.21" = type { %"class.std::__1::unique_ptr.22" }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %struct.wl_seat* }
%struct.wl_seat = type opaque
%"class.wl::Object.25" = type { %"class.std::__1::unique_ptr.26" }
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %struct.xdg_wm_base* }
%struct.xdg_wm_base = type opaque
%"class.wl::Object.29" = type { %"class.std::__1::unique_ptr.30" }
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %struct.zxdg_shell_v6* }
%struct.zxdg_shell_v6 = type opaque
%"class.wl::Object.33" = type { %"class.std::__1::unique_ptr.34" }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %struct.wp_presentation* }
%struct.wp_presentation = type opaque
%"class.wl::Object.37" = type { %"class.std::__1::unique_ptr.38" }
%"class.std::__1::unique_ptr.38" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %struct.wp_viewporter* }
%struct.wp_viewporter = type opaque
%"class.wl::Object.41" = type { %"class.std::__1::unique_ptr.42" }
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %struct.zcr_keyboard_extension_v1* }
%struct.zcr_keyboard_extension_v1 = type opaque
%"class.wl::Object.45" = type { %"class.std::__1::unique_ptr.46" }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %struct.zwp_text_input_manager_v1* }
%struct.zwp_text_input_manager_v1 = type opaque
%"class.wl::Object.49" = type { %"class.std::__1::unique_ptr.50" }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %struct.zwp_linux_explicit_synchronization_v1* }
%struct.zwp_linux_explicit_synchronization_v1 = type opaque
%"class.wl::Object.53" = type { %"class.std::__1::unique_ptr.54" }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %struct.zxdg_decoration_manager_v1* }
%struct.zxdg_decoration_manager_v1 = type opaque
%"class.wl::Object.57" = type { %"class.std::__1::unique_ptr.58" }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %struct.zcr_extended_drag_v1* }
%struct.zcr_extended_drag_v1 = type opaque
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.ui::WaylandEventSource"* }
%"class.ui::WaylandEventSource" = type opaque
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.ui::WaylandKeyboard"* }
%"class.ui::WaylandKeyboard" = type opaque
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"class.ui::WaylandPointer"* }
%"class.ui::WaylandPointer" = type opaque
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.ui::WaylandTouch"* }
%"class.ui::WaylandTouch" = type opaque
%"class.std::__1::unique_ptr.83" = type { %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"class.ui::WaylandCursor"* }
%"class.ui::WaylandCursor" = type opaque
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.ui::WaylandDataDeviceManager"* }
%"class.ui::WaylandDataDeviceManager" = type opaque
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.ui::WaylandOutputManager"* }
%"class.ui::WaylandOutputManager" = type opaque
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.ui::WaylandCursorPosition"* }
%"class.ui::WaylandCursorPosition" = type opaque
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.ui::WaylandZAuraShell"* }
%"class.ui::WaylandZAuraShell" = type opaque
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"class.ui::WaylandZcrCursorShapes"* }
%"class.ui::WaylandZcrCursorShapes" = type opaque
%"class.std::__1::unique_ptr.119" = type { %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { %"class.ui::WaylandZwpPointerGestures"* }
%"class.ui::WaylandZwpPointerGestures" = type opaque
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.ui::WaylandZwpLinuxDmabuf"* }
%"class.ui::WaylandZwpLinuxDmabuf" = type opaque
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.ui::WaylandDrm"* }
%"class.ui::WaylandDrm" = type opaque
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.ui::WaylandShm"* }
%"class.ui::WaylandShm" = type opaque
%"class.std::__1::unique_ptr.143" = type { %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"class.ui::WaylandBufferManagerHost"* }
%"class.ui::WaylandBufferManagerHost" = type opaque
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.ui::XdgForeignWrapper"* }
%"class.ui::XdgForeignWrapper" = type opaque
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.ui::GtkPrimarySelectionDeviceManager"* }
%"class.ui::GtkPrimarySelectionDeviceManager" = type opaque
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.ui::ZwpPrimarySelectionDeviceManager"* }
%"class.ui::ZwpPrimarySelectionDeviceManager" = type opaque
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"class.ui::WaylandClipboard"* }
%"class.ui::WaylandClipboard" = type { %"class.ui::PlatformClipboard", %"class.ui::WaylandConnection"*, %"class.std::__1::unique_ptr.170", %"class.std::__1::unique_ptr.170" }
%"class.ui::PlatformClipboard" = type { i32 (...)** }
%"class.std::__1::unique_ptr.170" = type { %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.wl::Clipboard"* }
%"class.wl::Clipboard" = type opaque
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"class.ui::GtkShell1"* }
%"class.ui::GtkShell1" = type opaque
%"class.std::__1::unique_ptr.185" = type { %"class.std::__1::__compressed_pair.186" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"class.ui::WaylandDataDragController"* }
%"class.ui::WaylandDataDragController" = type { %"class.ui::WaylandDataDevice::DragDelegate", %"class.wl::DataSource<wl_data_source>::Delegate", %"class.ui::WaylandWindowObserver", %"class.ui::WaylandConnection"*, %"class.ui::WaylandDataDeviceManager"*, %"class.ui::WaylandDataDevice"*, %"class.ui::WaylandWindowManager"*, i32, %"class.std::__1::unique_ptr.304", %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.218", %"class.std::__1::list.320", %"class.ui::WaylandWindow"*, %"class.ui::WaylandWindow"*, %"class.gfx::PointF", %"class.std::__1::unique_ptr.314", i8, %"class.std::__1::unique_ptr.247", %"class.std::__1::unique_ptr.327", %class.SkBitmap*, %"class.base::WeakPtrFactory.339" }
%"class.ui::WaylandDataDevice::DragDelegate" = type { i32 (...)** }
%"class.wl::DataSource<wl_data_source>::Delegate" = type { i32 (...)** }
%"class.ui::WaylandWindowObserver" = type { %"class.base::CheckedObserver" }
%"class.base::CheckedObserver" = type { i32 (...)**, %"class.base::WeakPtrFactory" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.188" }
%"struct.std::__1::__atomic_base.188" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.189" }
%"struct.std::__1::atomic.189" = type { %"struct.std::__1::__atomic_base.190" }
%"struct.std::__1::__atomic_base.190" = type { %"struct.std::__1::__atomic_base.191" }
%"struct.std::__1::__atomic_base.191" = type { %"struct.std::__1::__cxx_atomic_impl.192" }
%"struct.std::__1::__cxx_atomic_impl.192" = type { %"struct.std::__1::__cxx_atomic_base_impl.193" }
%"struct.std::__1::__cxx_atomic_base_impl.193" = type { i8 }
%"class.ui::WaylandDataDevice" = type { %"class.ui::WaylandDataDeviceBase", %"class.wl::Object.214", %"class.ui::WaylandDataDevice::DragDelegate"*, %"class.std::__1::unique_ptr.218" }
%"class.ui::WaylandDataDeviceBase" = type { i32 (...)**, %"class.ui::WaylandDataDeviceBase::SelectionDelegate"*, %"class.ui::WaylandConnection"*, %"class.std::__1::unique_ptr.194", %"class.base::OnceCallback", %"class.wl::Object.210" }
%"class.ui::WaylandDataDeviceBase::SelectionDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.194" = type { %"class.std::__1::__compressed_pair.195" }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"class.ui::WaylandDataOfferBase"* }
%"class.ui::WaylandDataOfferBase" = type <{ i32 (...)**, %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.200" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.197" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"class.std::__1::basic_string"* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.208 }
%class.scoped_refptr.208 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.209", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.209" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.wl::Object.210" = type { %"class.std::__1::unique_ptr.211" }
%"class.std::__1::unique_ptr.211" = type { %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %struct.wl_callback* }
%struct.wl_callback = type opaque
%"class.wl::Object.214" = type { %"class.std::__1::unique_ptr.215" }
%"class.std::__1::unique_ptr.215" = type { %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %struct.wl_data_device* }
%struct.wl_data_device = type opaque
%"class.std::__1::unique_ptr.304" = type { %"class.std::__1::__compressed_pair.305" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.306" }
%"struct.std::__1::__compressed_pair_elem.306" = type { %"class.wl::DataSource"* }
%"class.wl::DataSource" = type <{ %"class.wl::Object.307", %"class.ui::WaylandConnection"*, %"class.wl::DataSource<wl_data_source>::Delegate"*, i32, [4 x i8] }>
%"class.wl::Object.307" = type { %"class.std::__1::unique_ptr.308" }
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %struct.wl_data_source* }
%struct.wl_data_source = type opaque
%"class.std::__1::unique_ptr.218" = type { %"class.std::__1::__compressed_pair.219" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"class.ui::WaylandDataOffer"* }
%"class.ui::WaylandDataOffer" = type opaque
%"class.std::__1::list.320" = type { %"class.std::__1::__list_imp.321" }
%"class.std::__1::__list_imp.321" = type { %"struct.std::__1::__list_node_base.322", %"class.std::__1::__compressed_pair.323" }
%"struct.std::__1::__list_node_base.322" = type { %"struct.std::__1::__list_node_base.322"*, %"struct.std::__1::__list_node_base.322"* }
%"class.std::__1::__compressed_pair.323" = type { %"struct.std::__1::__compressed_pair_elem.245" }
%"struct.std::__1::__compressed_pair_elem.245" = type { i64 }
%"class.ui::WaylandWindow" = type { %"class.ui::PlatformWindow", %"class.ui::PlatformEventDispatcher", %"class.ui::WmDragHandler", %"class.ui::PlatformWindowDelegate"*, %"class.ui::WaylandConnection"*, %"class.ui::WaylandWindow"*, %"class.ui::WaylandWindow"*, i8, i32, %"class.std::__1::unique_ptr.247", %"class.std::__1::unique_ptr.282", %"class.base::internal::flat_tree.288", i8, %"class.std::__1::list", %"class.std::__1::list", %class.scoped_refptr.300, %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Size", i8, i8, i8, float, i32, i32, i8, i8, i32, %"class.ui::WmDragHandler::Delegate"*, %"class.base::OnceCallback", %class.scoped_refptr.301, %"class.base::WeakPtrFactory.303" }
%"class.ui::PlatformWindow" = type { %"class.ui::PropertyHandler" }
%"class.ui::PropertyHandler" = type { i32 (...)**, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.239", %"class.std::__1::__compressed_pair.244" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.240" }
%"struct.std::__1::__compressed_pair_elem.240" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.244" = type { %"struct.std::__1::__compressed_pair_elem.245" }
%"class.ui::PlatformEventDispatcher" = type { i32 (...)** }
%"class.ui::WmDragHandler" = type { i32 (...)** }
%"class.ui::PlatformWindowDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.282" = type { %"class.std::__1::__compressed_pair.283" }
%"class.std::__1::__compressed_pair.283" = type { %"struct.std::__1::__compressed_pair_elem.284" }
%"struct.std::__1::__compressed_pair_elem.284" = type { %"class.ui::WaylandSubsurface"* }
%"class.ui::WaylandSubsurface" = type opaque
%"class.base::internal::flat_tree.288" = type { %"class.std::__1::vector.289" }
%"class.std::__1::vector.289" = type { %"class.std::__1::__vector_base.290" }
%"class.std::__1::__vector_base.290" = type { %"class.std::__1::unique_ptr.282"*, %"class.std::__1::unique_ptr.282"*, %"class.std::__1::__compressed_pair.291" }
%"class.std::__1::__compressed_pair.291" = type { %"struct.std::__1::__compressed_pair_elem.292" }
%"struct.std::__1::__compressed_pair_elem.292" = type { %"class.std::__1::unique_ptr.282"* }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.296" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.245" }
%class.scoped_refptr.300 = type { %"class.ui::BitmapCursorOzone"* }
%"class.ui::BitmapCursorOzone" = type opaque
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.ui::WmDragHandler::Delegate" = type { i32 (...)** }
%class.scoped_refptr.301 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.302" }>
%"class.base::RefCountedThreadSafe.302" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory.303" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.gfx::PointF" = type { float, float }
%"class.std::__1::unique_ptr.314" = type { %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.ui::OSExchangeData"* }
%"class.ui::OSExchangeData" = type opaque
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"class.ui::WaylandSurface"* }
%"class.ui::WaylandSurface" = type { %"class.ui::WaylandConnection"*, %"class.ui::WaylandWindow"*, %"class.wl::Object.250", %"class.wl::Object.254", %"class.wl::Object.258", %"class.base::flat_map.262", %"class.base::RepeatingCallback", %struct.wl_buffer*, %"class.std::__1::vector.272", i32, i32, %"class.gfx::RectF", %"class.gfx::Size" }
%"class.wl::Object.250" = type { %"class.std::__1::unique_ptr.251" }
%"class.std::__1::unique_ptr.251" = type { %"class.std::__1::__compressed_pair.252" }
%"class.std::__1::__compressed_pair.252" = type { %"struct.std::__1::__compressed_pair_elem.253" }
%"struct.std::__1::__compressed_pair_elem.253" = type { %struct.wl_surface* }
%struct.wl_surface = type opaque
%"class.wl::Object.254" = type { %"class.std::__1::unique_ptr.255" }
%"class.std::__1::unique_ptr.255" = type { %"class.std::__1::__compressed_pair.256" }
%"class.std::__1::__compressed_pair.256" = type { %"struct.std::__1::__compressed_pair_elem.257" }
%"struct.std::__1::__compressed_pair_elem.257" = type { %struct.wp_viewport* }
%struct.wp_viewport = type opaque
%"class.wl::Object.258" = type { %"class.std::__1::unique_ptr.259" }
%"class.std::__1::unique_ptr.259" = type { %"class.std::__1::__compressed_pair.260" }
%"class.std::__1::__compressed_pair.260" = type { %"struct.std::__1::__compressed_pair_elem.261" }
%"struct.std::__1::__compressed_pair_elem.261" = type { %struct.zwp_linux_surface_synchronization_v1* }
%struct.zwp_linux_surface_synchronization_v1 = type opaque
%"class.base::flat_map.262" = type { %"class.base::internal::flat_tree.263" }
%"class.base::internal::flat_tree.263" = type { %"class.std::__1::vector.264" }
%"class.std::__1::vector.264" = type { %"class.std::__1::__vector_base.265" }
%"class.std::__1::__vector_base.265" = type { %"struct.std::__1::pair.266"*, %"struct.std::__1::pair.266"*, %"class.std::__1::__compressed_pair.267" }
%"struct.std::__1::pair.266" = type opaque
%"class.std::__1::__compressed_pair.267" = type { %"struct.std::__1::__compressed_pair_elem.268" }
%"struct.std::__1::__compressed_pair_elem.268" = type { %"struct.std::__1::pair.266"* }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%struct.wl_buffer = type opaque
%"class.std::__1::vector.272" = type { %"class.std::__1::__vector_base.273" }
%"class.std::__1::__vector_base.273" = type { %"class.ui::WaylandOutput"**, %"class.ui::WaylandOutput"**, %"class.std::__1::__compressed_pair.274" }
%"class.ui::WaylandOutput" = type opaque
%"class.std::__1::__compressed_pair.274" = type { %"struct.std::__1::__compressed_pair_elem.275" }
%"struct.std::__1::__compressed_pair_elem.275" = type { %"class.ui::WaylandOutput"** }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::unique_ptr.327" = type { %"class.std::__1::__compressed_pair.328" }
%"class.std::__1::__compressed_pair.328" = type { %"struct.std::__1::__compressed_pair_elem.329" }
%"struct.std::__1::__compressed_pair_elem.329" = type { %"class.ui::WaylandShmBuffer"* }
%"class.ui::WaylandShmBuffer" = type { %"class.gfx::Size", i32, %"class.wl::Object.330", %"class.base::WritableSharedMemoryMapping" }
%"class.wl::Object.330" = type { %"class.std::__1::unique_ptr.331" }
%"class.std::__1::unique_ptr.331" = type { %"class.std::__1::__compressed_pair.332" }
%"class.std::__1::__compressed_pair.332" = type { %"struct.std::__1::__compressed_pair_elem.333" }
%"struct.std::__1::__compressed_pair_elem.333" = type { %struct.wl_buffer* }
%"class.base::WritableSharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.base::SharedMemoryMapping" = type { i32 (...)**, i8*, i64, i64, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.338 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.337, i32, i32 }
%class.sk_sp.337 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.189" }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.338 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.base::WeakPtrFactory.339" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::unique_ptr.343" = type { %"class.std::__1::__compressed_pair.344" }
%"class.std::__1::__compressed_pair.344" = type { %"struct.std::__1::__compressed_pair_elem.345" }
%"struct.std::__1::__compressed_pair_elem.345" = type { %"class.ui::WaylandWindowDragController"* }
%"class.ui::WaylandWindowDragController" = type opaque
%"class.std::__1::unique_ptr.349" = type { %"class.std::__1::__compressed_pair.350" }
%"class.std::__1::__compressed_pair.350" = type { %"struct.std::__1::__compressed_pair_elem.351" }
%"struct.std::__1::__compressed_pair_elem.351" = type { %"class.wl::WaylandProxy"* }
%"class.wl::WaylandProxy" = type opaque
%"class.ui::WaylandWindowManager" = type <{ %"class.base::ObserverList", %"class.base::flat_map", %"class.ui::WaylandWindow"*, i32, [4 x i8] }>
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.224", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.224" = type { %"class.std::__1::__vector_base.225" }
%"class.std::__1::__vector_base.225" = type { %"class.base::internal::CheckedObserverAdapter"*, %"class.base::internal::CheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.227" }
%"class.base::internal::CheckedObserverAdapter" = type { %"class.base::WeakPtr" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.226 }
%class.scoped_refptr.226 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.base::internal::CheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.232" }
%"class.std::__1::vector.232" = type { %"class.std::__1::__vector_base.233" }
%"class.std::__1::__vector_base.233" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.234" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.234" = type { %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"struct.std::__1::pair"* }
%"class.ui::WaylandCursorBufferListener" = type opaque
%"struct.ui::WaylandConnection::EventSerial" = type { i32, i32 }
%class.sk_sp.355 = type { %class.SkSurface* }
%class.SkSurface = type { %class.SkRefCnt.base, %class.SkSurfaceProps, i32, i32, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.SkSurfaceProps = type { i32, i32 }
%struct.SkRect = type { float, float, float, float }
%class.sk_sp.370 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.356, [384 x i64], %class.sk_sp.357, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr.358", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.364" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.356 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.357 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%"class.std::__1::unique_ptr.358" = type { %"class.std::__1::__compressed_pair.359" }
%"class.std::__1::__compressed_pair.359" = type { %"struct.std::__1::__compressed_pair_elem.360" }
%"struct.std::__1::__compressed_pair_elem.360" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.364" = type { %"class.std::__1::__compressed_pair.365" }
%"class.std::__1::__compressed_pair.365" = type { %"struct.std::__1::__compressed_pair_elem.366" }
%"struct.std::__1::__compressed_pair_elem.366" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%class.SkPaint = type <{ %class.sk_sp.371, %class.sk_sp.372, %class.sk_sp.373, %class.sk_sp.374, %class.sk_sp.375, %struct.SkRGBA4f, float, float, %union.anon.376, [4 x i8] }>
%class.sk_sp.371 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.372 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.sk_sp.373 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.374 = type { %class.SkColorFilter* }
%class.SkColorFilter = type opaque
%class.sk_sp.375 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%union.anon.376 = type { %struct.anon.377 }
%struct.anon.377 = type { i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.std::__1::vector.378" = type { %"class.std::__1::__vector_base.379" }
%"class.std::__1::__vector_base.379" = type { i8*, i8*, %"class.std::__1::__compressed_pair.380" }
%"class.std::__1::__compressed_pair.380" = type { %"struct.std::__1::__compressed_pair_elem.381" }
%"struct.std::__1::__compressed_pair_elem.381" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.395" = type { %"class.std::__1::__vector_base.396" }
%"class.std::__1::__vector_base.396" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.397" }
%"class.std::__1::__compressed_pair.397" = type { %"struct.std::__1::__compressed_pair_elem.398" }
%"struct.std::__1::__compressed_pair_elem.398" = type { %"class.gfx::Rect"* }
%class.SkPath = type <{ %class.sk_sp.386, i32, %"struct.std::__1::atomic.189", %"struct.std::__1::atomic.189", i8, i8 }>
%class.sk_sp.386 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt.387, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.388, %class.SkTDArray.389, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt.387 = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.388 = type { i8*, i32, i32 }
%class.SkTDArray.389 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.390 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.390 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.391", [3 x i8] }
%"struct.std::__1::atomic.391" = type { %"struct.std::__1::__atomic_base.392" }
%"struct.std::__1::__atomic_base.392" = type { %"struct.std::__1::__cxx_atomic_impl.393" }
%"struct.std::__1::__cxx_atomic_impl.393" = type { %"struct.std::__1::__cxx_atomic_base_impl.394" }
%"struct.std::__1::__cxx_atomic_base_impl.394" = type { i8 }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%"struct.SkRegion::RunHead" = type opaque
%"class.SkRegion::Iterator" = type <{ %class.SkRegion*, i32*, %struct.SkIRect, i8, [7 x i8] }>
%class.SkMatrix = type { [9 x float], i32 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKhEES7_S7_ = comdat any

@__const._ZN2wl16ConvertPathToDIPERK6SkPathi.transform = private unnamed_addr constant %"class.gfx::Transform" { %class.SkMatrix44 <{ [4 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], i8 -86, [3 x i8] c"\AA\AA\AA" }> }, align 4
@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4
@switch.table._ZN2wl18ToWaylandTransformEN3gfx16OverlayTransformE = private unnamed_addr constant [5 x i32] [i32 4, i32 6, i32 1, i32 2, i32 3], align 4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN2wl17IdentifyDirectionERKN2ui17WaylandConnectionEi(%"class.ui::WaylandConnection"* nocapture readonly dereferenceable(448), i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.ui::WaylandConnection", %"class.ui::WaylandConnection"* %0, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0
  %4 = load %struct.xdg_wm_base*, %struct.xdg_wm_base** %3, align 8
  %5 = icmp eq %struct.xdg_wm_base* %4, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %2
  switch i32 %1, label %14 [
    i32 2, label %24
    i32 3, label %7
    i32 4, label %8
    i32 12, label %9
    i32 17, label %10
    i32 20, label %11
    i32 21, label %12
    i32 22, label %13
  ]

7:                                                ; preds = %6
  br label %24

8:                                                ; preds = %6
  br label %24

9:                                                ; preds = %6
  br label %24

10:                                               ; preds = %6
  br label %24

11:                                               ; preds = %6
  br label %24

12:                                               ; preds = %6
  br label %24

13:                                               ; preds = %6
  br label %24

14:                                               ; preds = %6
  br label %24

15:                                               ; preds = %2
  switch i32 %1, label %23 [
    i32 2, label %24
    i32 3, label %16
    i32 4, label %17
    i32 12, label %18
    i32 17, label %19
    i32 20, label %20
    i32 21, label %21
    i32 22, label %22
  ]

16:                                               ; preds = %15
  br label %24

17:                                               ; preds = %15
  br label %24

18:                                               ; preds = %15
  br label %24

19:                                               ; preds = %15
  br label %24

20:                                               ; preds = %15
  br label %24

21:                                               ; preds = %15
  br label %24

22:                                               ; preds = %15
  br label %24

23:                                               ; preds = %15
  br label %24

24:                                               ; preds = %23, %22, %21, %20, %19, %18, %17, %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6
  %25 = phi i32 [ 0, %14 ], [ 9, %13 ], [ 5, %12 ], [ 1, %11 ], [ 8, %10 ], [ 4, %9 ], [ 10, %8 ], [ 6, %7 ], [ %1, %6 ], [ 0, %23 ], [ 9, %22 ], [ 5, %21 ], [ 1, %20 ], [ 8, %19 ], [ 4, %18 ], [ 10, %17 ], [ 6, %16 ], [ %1, %15 ]
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2wl10DrawBitmapERK8SkBitmapPN2ui16WaylandShmBufferE(%class.SkBitmap* dereferenceable(56), %"class.ui::WaylandShmBuffer"*) local_unnamed_addr #1 {
  %3 = alloca { <2 x float>, <2 x float> }, align 8
  %4 = alloca %class.sk_sp.355, align 8
  %5 = alloca %struct.SkImageInfo, align 16
  %6 = alloca %struct.SkRect, align 4
  %7 = alloca %class.sk_sp.370, align 8
  %8 = alloca %struct.SkSamplingOptions, align 4
  %9 = tail call i8* @_ZNK2ui16WaylandShmBuffer9GetMemoryEv(%"class.ui::WaylandShmBuffer"* %1) #13
  %10 = bitcast %"class.ui::WaylandShmBuffer"* %1 to i64*
  %11 = load i64, i64* %10, align 4
  %12 = bitcast %class.sk_sp.355* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13
  %13 = getelementptr inbounds %class.sk_sp.355, %class.sk_sp.355* %4, i64 0, i32 0
  store %class.SkSurface* inttoptr (i64 -6148914691236517206 to %class.SkSurface*), %class.SkSurface** %13, align 8
  %14 = bitcast %struct.SkImageInfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #13
  %15 = bitcast %struct.SkImageInfo* %5 to <2 x i64>*
  store <2 x i64> <i64 0, i64 4294967302>, <2 x i64>* %15, align 16, !alias.scope !2
  %16 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %5, i64 0, i32 1
  %17 = bitcast %struct.SkISize* %16 to i64*
  store i64 %11, i64* %17, align 16, !alias.scope !2
  %18 = getelementptr inbounds %"class.ui::WaylandShmBuffer", %"class.ui::WaylandShmBuffer"* %1, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = sext i32 %19 to i64
  call void @_ZN9SkSurface16MakeRasterDirectERK11SkImageInfoPvmPK14SkSurfaceProps(%class.sk_sp.355* nonnull sret %4, %struct.SkImageInfo* nonnull dereferenceable(24) %5, i8* %9, i64 %20, %class.SkSurfaceProps* null) #13
  %21 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %5, i64 0, i32 0, i32 0, i32 0
  %22 = load %class.SkColorSpace*, %class.SkColorSpace** %21, align 16
  %23 = icmp eq %class.SkColorSpace* %22, null
  br i1 %23, label %30, label %24

24:                                               ; preds = %2
  %25 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = atomicrmw add i32* %25, i32 -1 acq_rel
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %28, label %30

28:                                               ; preds = %24
  %29 = bitcast %class.SkColorSpace* %22 to i8*
  call void @_ZdlPv(i8* %29) #14
  br label %30

30:                                               ; preds = %28, %24, %2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #13
  %31 = load %class.SkSurface*, %class.SkSurface** %13, align 8
  %32 = icmp eq %class.SkSurface* %31, null
  br i1 %32, label %74, label %33

33:                                               ; preds = %30
  %34 = bitcast %struct.SkRect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #13
  %35 = bitcast %struct.SkRect* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %35, i8 -1, i64 16, i1 false)
  call void @_ZNK8SkBitmap9getBoundsEP6SkRect(%class.SkBitmap* %0, %struct.SkRect* nonnull %6) #13
  %36 = load %class.SkSurface*, %class.SkSurface** %13, align 8
  %37 = call %class.SkCanvas* @_ZN9SkSurface9getCanvasEv(%class.SkSurface* %36) #13
  %38 = bitcast { <2 x float>, <2 x float> }* %3 to %struct.SkRGBA4f*
  %39 = bitcast { <2 x float>, <2 x float> }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #13
  %40 = call { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32 0) #13
  %41 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 0
  %42 = extractvalue { <2 x float>, <2 x float> } %40, 0
  store <2 x float> %42, <2 x float>* %41, align 8
  %43 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 1
  %44 = extractvalue { <2 x float>, <2 x float> } %40, 1
  store <2 x float> %44, <2 x float>* %43, align 8
  call void @_ZN8SkCanvas9drawColorERK8SkRGBA4fIL11SkAlphaType3EE11SkBlendMode(%class.SkCanvas* %37, %struct.SkRGBA4f* nonnull dereferenceable(16) %38, i32 1) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #13
  %45 = bitcast %class.sk_sp.370* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #13
  call void @_ZNK8SkBitmap7asImageEv(%class.sk_sp.370* nonnull sret %7, %class.SkBitmap* %0) #13
  %46 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %46) #13
  %47 = getelementptr inbounds %class.sk_sp.370, %class.sk_sp.370* %7, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %46, i8 0, i64 20, i1 false)
  %48 = load %class.SkImage*, %class.SkImage** %47, align 8
  call void @_ZN8SkCanvas13drawImageRectEPK7SkImageRK6SkRectRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas* %37, %class.SkImage* %48, %struct.SkRect* nonnull dereferenceable(16) %6, %struct.SkSamplingOptions* nonnull dereferenceable(20) %8, %class.SkPaint* null) #13
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %46) #13
  %49 = load %class.SkImage*, %class.SkImage** %47, align 8
  %50 = icmp eq %class.SkImage* %49, null
  br i1 %50, label %61, label %51

51:                                               ; preds = %33
  %52 = getelementptr inbounds %class.SkImage, %class.SkImage* %49, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = atomicrmw add i32* %52, i32 -1 acq_rel
  %54 = icmp eq i32 %53, 1
  br i1 %54, label %55, label %61

55:                                               ; preds = %51
  %56 = bitcast %class.SkImage* %49 to %class.SkRefCntBase*
  %57 = bitcast %class.SkImage* %49 to void (%class.SkRefCntBase*)***
  %58 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %57, align 8
  %59 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %58, i64 2
  %60 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %59, align 8
  call void %60(%class.SkRefCntBase* nonnull %56) #13
  br label %61

61:                                               ; preds = %55, %51, %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #13
  %62 = load %class.SkSurface*, %class.SkSurface** %13, align 8
  %63 = icmp eq %class.SkSurface* %62, null
  br i1 %63, label %74, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds %class.SkSurface, %class.SkSurface* %62, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = atomicrmw add i32* %65, i32 -1 acq_rel
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %68, label %74

68:                                               ; preds = %64
  %69 = bitcast %class.SkSurface* %62 to %class.SkRefCntBase*
  %70 = bitcast %class.SkSurface* %62 to void (%class.SkRefCntBase*)***
  %71 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %70, align 8
  %72 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %71, i64 2
  %73 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %72, align 8
  call void %73(%class.SkRefCntBase* nonnull %69) #13
  br label %74

74:                                               ; preds = %30, %61, %64, %68
  %75 = phi i1 [ true, %61 ], [ true, %64 ], [ true, %68 ], [ false, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13
  ret i1 %75
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i8* @_ZNK2ui16WaylandShmBuffer9GetMemoryEv(%"class.ui::WaylandShmBuffer"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN9SkSurface16MakeRasterDirectERK11SkImageInfoPvmPK14SkSurfaceProps(%class.sk_sp.355* sret, %struct.SkImageInfo* dereferenceable(24), i8*, i64, %class.SkSurfaceProps*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZNK8SkBitmap9getBoundsEP6SkRect(%class.SkBitmap*, %struct.SkRect*) local_unnamed_addr #3

declare %class.SkCanvas* @_ZN9SkSurface9getCanvasEv(%class.SkSurface*) local_unnamed_addr #3

declare void @_ZNK8SkBitmap7asImageEv(%class.sk_sp.370* sret, %class.SkBitmap*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2wl14ReadDataFromFDEN4base13ScopedGenericIiNS0_8internal19ScopedFDCloseTraitsEEEPNSt3__16vectorIhNS5_9allocatorIhEEEE(%"class.base::ScopedGeneric"* nocapture readonly, %"class.std::__1::vector.378"*) local_unnamed_addr #1 {
  %3 = alloca [1024 x i8], align 16
  %4 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %4) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 1024, i1 false)
  %5 = getelementptr inbounds %"class.base::ScopedGeneric", %"class.base::ScopedGeneric"* %0, i64 0, i32 1, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = call i64 @read(i32 %6, i8* nonnull %4, i64 1024) #13
  %8 = icmp sgt i64 %7, 0
  br i1 %8, label %9, label %19

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.std::__1::vector.378", %"class.std::__1::vector.378"* %1, i64 0, i32 0, i32 1
  br label %11

11:                                               ; preds = %9, %11
  %12 = phi i64 [ %7, %9 ], [ %17, %11 ]
  %13 = load i8*, i8** %10, align 8
  %14 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 %12
  %15 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKhEES7_S7_(%"class.std::__1::vector.378"* %1, i8* %13, i8* nonnull %4, i8* %14)
  %16 = load i32, i32* %5, align 4
  %17 = call i64 @read(i32 %16, i8* nonnull %4, i64 1024) #13
  %18 = icmp sgt i64 %17, 0
  br i1 %18, label %11, label %19

19:                                               ; preds = %11, %2
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %4) #13
  ret void
}

; Function Attrs: nofree
declare i64 @read(i32, i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKhEES7_S7_(%"class.std::__1::vector.378"*, i8*, i8*, i8*) local_unnamed_addr #1 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = getelementptr inbounds %"class.std::__1::vector.378", %"class.std::__1::vector.378"* %0, i64 0, i32 0, i32 0
  %7 = ptrtoint i8* %3 to i64
  %8 = ptrtoint i8* %2 to i64
  %9 = sub i64 %7, %8
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %414

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector.378", %"class.std::__1::vector.378"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector.378", %"class.std::__1::vector.378"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %164, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %37

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = ptrtoint i8* %25 to i64
  %27 = sub i64 %7, %26
  %28 = icmp sgt i64 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %25, i64 %27, i1 false) #13
  %30 = getelementptr inbounds i8, i8* %16, i64 %27
  %31 = ptrtoint i8* %30 to i64
  br label %32

32:                                               ; preds = %29, %24
  %33 = phi i64 [ %31, %29 ], [ %17, %24 ]
  store i64 %33, i64* %20, align 8
  %34 = icmp sgt i64 %22, 0
  br i1 %34, label %35, label %414

35:                                               ; preds = %32
  %36 = inttoptr i64 %33 to i8*
  br label %37

37:                                               ; preds = %35, %21
  %38 = phi i64 [ %33, %35 ], [ %17, %21 ]
  %39 = phi i8* [ %36, %35 ], [ %16, %21 ]
  %40 = phi i8* [ %25, %35 ], [ %3, %21 ]
  %41 = getelementptr inbounds i8, i8* %1, i64 %9
  %42 = ptrtoint i8* %41 to i64
  %43 = sub i64 %38, %42
  %44 = getelementptr inbounds i8, i8* %1, i64 %43
  %45 = icmp ult i8* %44, %16
  br i1 %45, label %46, label %146

46:                                               ; preds = %37
  %47 = sub i64 %9, %38
  %48 = getelementptr i8, i8* %16, i64 %47
  %49 = ptrtoint i8* %48 to i64
  %50 = icmp ult i8* %48, inttoptr (i64 32 to i8*)
  br i1 %50, label %51, label %54

51:                                               ; preds = %141, %54, %46
  %52 = phi i8* [ %44, %54 ], [ %44, %46 ], [ %64, %141 ]
  %53 = phi i8* [ %39, %54 ], [ %39, %46 ], [ %65, %141 ]
  br label %152

54:                                               ; preds = %46
  %55 = sub i64 %9, %38
  %56 = getelementptr i8, i8* %16, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = getelementptr i8, i8* %39, i64 %57
  %59 = icmp ult i8* %39, %16
  %60 = icmp ult i8* %44, %58
  %61 = and i1 %59, %60
  br i1 %61, label %51, label %62

62:                                               ; preds = %54
  %63 = and i64 %49, -32
  %64 = getelementptr i8, i8* %44, i64 %63
  %65 = getelementptr i8, i8* %39, i64 %63
  %66 = add i64 %63, -32
  %67 = lshr exact i64 %66, 5
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 3
  %70 = icmp ult i64 %66, 96
  br i1 %70, label %122, label %71

71:                                               ; preds = %62
  %72 = sub nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %119, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %120, %73 ]
  %76 = getelementptr i8, i8* %44, i64 %74
  %77 = getelementptr i8, i8* %39, i64 %74
  %78 = bitcast i8* %76 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1, !alias.scope !5
  %80 = getelementptr i8, i8* %76, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1, !alias.scope !5
  %83 = bitcast i8* %77 to <16 x i8>*
  store <16 x i8> %79, <16 x i8>* %83, align 1, !alias.scope !8, !noalias !5
  %84 = getelementptr i8, i8* %77, i64 16
  %85 = bitcast i8* %84 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %85, align 1, !alias.scope !8, !noalias !5
  %86 = or i64 %74, 32
  %87 = getelementptr i8, i8* %44, i64 %86
  %88 = getelementptr i8, i8* %39, i64 %86
  %89 = bitcast i8* %87 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1, !alias.scope !5
  %91 = getelementptr i8, i8* %87, i64 16
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1, !alias.scope !5
  %94 = bitcast i8* %88 to <16 x i8>*
  store <16 x i8> %90, <16 x i8>* %94, align 1, !alias.scope !8, !noalias !5
  %95 = getelementptr i8, i8* %88, i64 16
  %96 = bitcast i8* %95 to <16 x i8>*
  store <16 x i8> %93, <16 x i8>* %96, align 1, !alias.scope !8, !noalias !5
  %97 = or i64 %74, 64
  %98 = getelementptr i8, i8* %44, i64 %97
  %99 = getelementptr i8, i8* %39, i64 %97
  %100 = bitcast i8* %98 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1, !alias.scope !5
  %102 = getelementptr i8, i8* %98, i64 16
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1, !alias.scope !5
  %105 = bitcast i8* %99 to <16 x i8>*
  store <16 x i8> %101, <16 x i8>* %105, align 1, !alias.scope !8, !noalias !5
  %106 = getelementptr i8, i8* %99, i64 16
  %107 = bitcast i8* %106 to <16 x i8>*
  store <16 x i8> %104, <16 x i8>* %107, align 1, !alias.scope !8, !noalias !5
  %108 = or i64 %74, 96
  %109 = getelementptr i8, i8* %44, i64 %108
  %110 = getelementptr i8, i8* %39, i64 %108
  %111 = bitcast i8* %109 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 1, !alias.scope !5
  %113 = getelementptr i8, i8* %109, i64 16
  %114 = bitcast i8* %113 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1, !alias.scope !5
  %116 = bitcast i8* %110 to <16 x i8>*
  store <16 x i8> %112, <16 x i8>* %116, align 1, !alias.scope !8, !noalias !5
  %117 = getelementptr i8, i8* %110, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  store <16 x i8> %115, <16 x i8>* %118, align 1, !alias.scope !8, !noalias !5
  %119 = add i64 %74, 128
  %120 = add i64 %75, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %73, !llvm.loop !10

122:                                              ; preds = %73, %62
  %123 = phi i64 [ 0, %62 ], [ %119, %73 ]
  %124 = icmp eq i64 %69, 0
  br i1 %124, label %141, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %138, %125 ], [ %123, %122 ]
  %127 = phi i64 [ %139, %125 ], [ %69, %122 ]
  %128 = getelementptr i8, i8* %44, i64 %126
  %129 = getelementptr i8, i8* %39, i64 %126
  %130 = bitcast i8* %128 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1, !alias.scope !5
  %132 = getelementptr i8, i8* %128, i64 16
  %133 = bitcast i8* %132 to <16 x i8>*
  %134 = load <16 x i8>, <16 x i8>* %133, align 1, !alias.scope !5
  %135 = bitcast i8* %129 to <16 x i8>*
  store <16 x i8> %131, <16 x i8>* %135, align 1, !alias.scope !8, !noalias !5
  %136 = getelementptr i8, i8* %129, i64 16
  %137 = bitcast i8* %136 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %137, align 1, !alias.scope !8, !noalias !5
  %138 = add i64 %126, 32
  %139 = add i64 %127, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %125, !llvm.loop !12

141:                                              ; preds = %125, %122
  %142 = icmp eq i64 %63, %49
  br i1 %142, label %143, label %51

143:                                              ; preds = %152, %141
  %144 = phi i8* [ %65, %141 ], [ %157, %152 ]
  %145 = ptrtoint i8* %144 to i64
  br label %146

146:                                              ; preds = %143, %37
  %147 = phi i64 [ %145, %143 ], [ %38, %37 ]
  store i64 %147, i64* %20, align 8
  %148 = icmp eq i64 %43, 0
  br i1 %148, label %159, label %149

149:                                              ; preds = %146
  %150 = sub i64 0, %43
  %151 = getelementptr inbounds i8, i8* %39, i64 %150
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %151, i8* align 1 %1, i64 %43, i1 false) #13
  br label %159

152:                                              ; preds = %51, %152
  %153 = phi i8* [ %156, %152 ], [ %52, %51 ]
  %154 = phi i8* [ %157, %152 ], [ %53, %51 ]
  %155 = load i8, i8* %153, align 1
  store i8 %155, i8* %154, align 1
  %156 = getelementptr inbounds i8, i8* %153, i64 1
  %157 = getelementptr inbounds i8, i8* %154, i64 1
  %158 = icmp eq i8* %156, %16
  br i1 %158, label %143, label %152, !llvm.loop !14

159:                                              ; preds = %146, %149
  %160 = ptrtoint i8* %40 to i64
  %161 = sub i64 %160, %8
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %414, label %163

163:                                              ; preds = %159
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %161, i1 false) #13
  br label %414

164:                                              ; preds = %11
  %165 = bitcast %"class.std::__1::vector.378"* %0 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = sub i64 %17, %166
  %168 = add i64 %167, %9
  %169 = icmp slt i64 %168, 0
  br i1 %169, label %170, label %172

170:                                              ; preds = %164
  %171 = bitcast %"class.std::__1::vector.378"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %171) #15
  unreachable

172:                                              ; preds = %164
  %173 = sub i64 %14, %166
  %174 = icmp ult i64 %173, 4611686018427387903
  br i1 %174, label %177, label %175

175:                                              ; preds = %172
  %176 = sub i64 %5, %166
  br label %183

177:                                              ; preds = %172
  %178 = shl i64 %173, 1
  %179 = icmp ult i64 %178, %168
  %180 = select i1 %179, i64 %168, i64 %178
  %181 = sub i64 %5, %166
  %182 = icmp eq i64 %180, 0
  br i1 %182, label %187, label %183

183:                                              ; preds = %175, %177
  %184 = phi i64 [ %176, %175 ], [ %181, %177 ]
  %185 = phi i64 [ 9223372036854775807, %175 ], [ %180, %177 ]
  %186 = tail call i8* @_Znwm(i64 %185) #14
  br label %187

187:                                              ; preds = %177, %183
  %188 = phi i64 [ %184, %183 ], [ %181, %177 ]
  %189 = phi i64 [ %185, %183 ], [ 0, %177 ]
  %190 = phi i8* [ %186, %183 ], [ null, %177 ]
  %191 = getelementptr inbounds i8, i8* %190, i64 %188
  %192 = getelementptr inbounds i8, i8* %190, i64 %189
  %193 = getelementptr inbounds i8, i8* %191, i64 %9
  %194 = icmp ult i64 %9, 32
  br i1 %194, label %280, label %195

195:                                              ; preds = %187
  %196 = icmp ult i8* %191, %3
  %197 = icmp ugt i8* %193, %2
  %198 = and i1 %196, %197
  br i1 %198, label %280, label %199

199:                                              ; preds = %195
  %200 = and i64 %9, -32
  %201 = getelementptr i8, i8* %191, i64 %200
  %202 = getelementptr i8, i8* %2, i64 %200
  %203 = add i64 %200, -32
  %204 = lshr exact i64 %203, 5
  %205 = add nuw nsw i64 %204, 1
  %206 = and i64 %205, 3
  %207 = icmp ult i64 %203, 96
  br i1 %207, label %259, label %208

208:                                              ; preds = %199
  %209 = sub nsw i64 %205, %206
  br label %210

210:                                              ; preds = %210, %208
  %211 = phi i64 [ 0, %208 ], [ %256, %210 ]
  %212 = phi i64 [ %209, %208 ], [ %257, %210 ]
  %213 = getelementptr i8, i8* %191, i64 %211
  %214 = getelementptr i8, i8* %2, i64 %211
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !15
  %217 = getelementptr i8, i8* %214, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !15
  %220 = bitcast i8* %213 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !18, !noalias !15
  %221 = getelementptr i8, i8* %213, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !18, !noalias !15
  %223 = or i64 %211, 32
  %224 = getelementptr i8, i8* %191, i64 %223
  %225 = getelementptr i8, i8* %2, i64 %223
  %226 = bitcast i8* %225 to <16 x i8>*
  %227 = load <16 x i8>, <16 x i8>* %226, align 1, !alias.scope !15
  %228 = getelementptr i8, i8* %225, i64 16
  %229 = bitcast i8* %228 to <16 x i8>*
  %230 = load <16 x i8>, <16 x i8>* %229, align 1, !alias.scope !15
  %231 = bitcast i8* %224 to <16 x i8>*
  store <16 x i8> %227, <16 x i8>* %231, align 1, !alias.scope !18, !noalias !15
  %232 = getelementptr i8, i8* %224, i64 16
  %233 = bitcast i8* %232 to <16 x i8>*
  store <16 x i8> %230, <16 x i8>* %233, align 1, !alias.scope !18, !noalias !15
  %234 = or i64 %211, 64
  %235 = getelementptr i8, i8* %191, i64 %234
  %236 = getelementptr i8, i8* %2, i64 %234
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !15
  %239 = getelementptr i8, i8* %236, i64 16
  %240 = bitcast i8* %239 to <16 x i8>*
  %241 = load <16 x i8>, <16 x i8>* %240, align 1, !alias.scope !15
  %242 = bitcast i8* %235 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %242, align 1, !alias.scope !18, !noalias !15
  %243 = getelementptr i8, i8* %235, i64 16
  %244 = bitcast i8* %243 to <16 x i8>*
  store <16 x i8> %241, <16 x i8>* %244, align 1, !alias.scope !18, !noalias !15
  %245 = or i64 %211, 96
  %246 = getelementptr i8, i8* %191, i64 %245
  %247 = getelementptr i8, i8* %2, i64 %245
  %248 = bitcast i8* %247 to <16 x i8>*
  %249 = load <16 x i8>, <16 x i8>* %248, align 1, !alias.scope !15
  %250 = getelementptr i8, i8* %247, i64 16
  %251 = bitcast i8* %250 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1, !alias.scope !15
  %253 = bitcast i8* %246 to <16 x i8>*
  store <16 x i8> %249, <16 x i8>* %253, align 1, !alias.scope !18, !noalias !15
  %254 = getelementptr i8, i8* %246, i64 16
  %255 = bitcast i8* %254 to <16 x i8>*
  store <16 x i8> %252, <16 x i8>* %255, align 1, !alias.scope !18, !noalias !15
  %256 = add i64 %211, 128
  %257 = add i64 %212, -4
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %210, !llvm.loop !20

259:                                              ; preds = %210, %199
  %260 = phi i64 [ 0, %199 ], [ %256, %210 ]
  %261 = icmp eq i64 %206, 0
  br i1 %261, label %278, label %262

262:                                              ; preds = %259, %262
  %263 = phi i64 [ %275, %262 ], [ %260, %259 ]
  %264 = phi i64 [ %276, %262 ], [ %206, %259 ]
  %265 = getelementptr i8, i8* %191, i64 %263
  %266 = getelementptr i8, i8* %2, i64 %263
  %267 = bitcast i8* %266 to <16 x i8>*
  %268 = load <16 x i8>, <16 x i8>* %267, align 1, !alias.scope !15
  %269 = getelementptr i8, i8* %266, i64 16
  %270 = bitcast i8* %269 to <16 x i8>*
  %271 = load <16 x i8>, <16 x i8>* %270, align 1, !alias.scope !15
  %272 = bitcast i8* %265 to <16 x i8>*
  store <16 x i8> %268, <16 x i8>* %272, align 1, !alias.scope !18, !noalias !15
  %273 = getelementptr i8, i8* %265, i64 16
  %274 = bitcast i8* %273 to <16 x i8>*
  store <16 x i8> %271, <16 x i8>* %274, align 1, !alias.scope !18, !noalias !15
  %275 = add i64 %263, 32
  %276 = add i64 %264, -1
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %262, !llvm.loop !21

278:                                              ; preds = %262, %259
  %279 = icmp eq i64 %9, %200
  br i1 %279, label %290, label %280

280:                                              ; preds = %278, %195, %187
  %281 = phi i8* [ %191, %195 ], [ %191, %187 ], [ %201, %278 ]
  %282 = phi i8* [ %2, %195 ], [ %2, %187 ], [ %202, %278 ]
  br label %283

283:                                              ; preds = %280, %283
  %284 = phi i8* [ %287, %283 ], [ %281, %280 ]
  %285 = phi i8* [ %288, %283 ], [ %282, %280 ]
  %286 = load i8, i8* %285, align 1
  store i8 %286, i8* %284, align 1
  %287 = getelementptr inbounds i8, i8* %284, i64 1
  %288 = getelementptr inbounds i8, i8* %285, i64 1
  %289 = icmp eq i8* %193, %287
  br i1 %289, label %290, label %283, !llvm.loop !22

290:                                              ; preds = %283, %278
  %291 = ptrtoint i8* %192 to i64
  %292 = load i8*, i8** %6, align 8
  %293 = ptrtoint i8* %292 to i64
  %294 = sub i64 %5, %293
  %295 = sub i64 0, %294
  %296 = getelementptr inbounds i8, i8* %191, i64 %295
  %297 = ptrtoint i8* %296 to i64
  %298 = icmp sgt i64 %294, 0
  br i1 %298, label %299, label %300

299:                                              ; preds = %290
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %296, i8* align 1 %292, i64 %294, i1 false) #13
  br label %300

300:                                              ; preds = %299, %290
  %301 = load i8*, i8** %15, align 8
  %302 = icmp eq i8* %301, %1
  br i1 %302, label %408, label %303

303:                                              ; preds = %300
  %304 = ptrtoint i8* %301 to i64
  %305 = sub i64 %304, %5
  %306 = icmp ult i64 %305, 32
  br i1 %306, label %398, label %307

307:                                              ; preds = %303
  %308 = add i64 %188, %7
  %309 = sub i64 %308, %5
  %310 = sub i64 %309, %8
  %311 = getelementptr i8, i8* %301, i64 %310
  %312 = ptrtoint i8* %311 to i64
  %313 = getelementptr i8, i8* %190, i64 %312
  %314 = icmp ult i8* %193, %301
  %315 = icmp ugt i8* %313, %1
  %316 = and i1 %314, %315
  br i1 %316, label %398, label %317

317:                                              ; preds = %307
  %318 = and i64 %305, -32
  %319 = getelementptr i8, i8* %193, i64 %318
  %320 = getelementptr i8, i8* %1, i64 %318
  %321 = add i64 %318, -32
  %322 = lshr exact i64 %321, 5
  %323 = add nuw nsw i64 %322, 1
  %324 = and i64 %323, 3
  %325 = icmp ult i64 %321, 96
  br i1 %325, label %377, label %326

326:                                              ; preds = %317
  %327 = sub nsw i64 %323, %324
  br label %328

328:                                              ; preds = %328, %326
  %329 = phi i64 [ 0, %326 ], [ %374, %328 ]
  %330 = phi i64 [ %327, %326 ], [ %375, %328 ]
  %331 = getelementptr i8, i8* %193, i64 %329
  %332 = getelementptr i8, i8* %1, i64 %329
  %333 = bitcast i8* %332 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1, !alias.scope !23
  %335 = getelementptr i8, i8* %332, i64 16
  %336 = bitcast i8* %335 to <16 x i8>*
  %337 = load <16 x i8>, <16 x i8>* %336, align 1, !alias.scope !23
  %338 = bitcast i8* %331 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %338, align 1, !alias.scope !26, !noalias !23
  %339 = getelementptr i8, i8* %331, i64 16
  %340 = bitcast i8* %339 to <16 x i8>*
  store <16 x i8> %337, <16 x i8>* %340, align 1, !alias.scope !26, !noalias !23
  %341 = or i64 %329, 32
  %342 = getelementptr i8, i8* %193, i64 %341
  %343 = getelementptr i8, i8* %1, i64 %341
  %344 = bitcast i8* %343 to <16 x i8>*
  %345 = load <16 x i8>, <16 x i8>* %344, align 1, !alias.scope !23
  %346 = getelementptr i8, i8* %343, i64 16
  %347 = bitcast i8* %346 to <16 x i8>*
  %348 = load <16 x i8>, <16 x i8>* %347, align 1, !alias.scope !23
  %349 = bitcast i8* %342 to <16 x i8>*
  store <16 x i8> %345, <16 x i8>* %349, align 1, !alias.scope !26, !noalias !23
  %350 = getelementptr i8, i8* %342, i64 16
  %351 = bitcast i8* %350 to <16 x i8>*
  store <16 x i8> %348, <16 x i8>* %351, align 1, !alias.scope !26, !noalias !23
  %352 = or i64 %329, 64
  %353 = getelementptr i8, i8* %193, i64 %352
  %354 = getelementptr i8, i8* %1, i64 %352
  %355 = bitcast i8* %354 to <16 x i8>*
  %356 = load <16 x i8>, <16 x i8>* %355, align 1, !alias.scope !23
  %357 = getelementptr i8, i8* %354, i64 16
  %358 = bitcast i8* %357 to <16 x i8>*
  %359 = load <16 x i8>, <16 x i8>* %358, align 1, !alias.scope !23
  %360 = bitcast i8* %353 to <16 x i8>*
  store <16 x i8> %356, <16 x i8>* %360, align 1, !alias.scope !26, !noalias !23
  %361 = getelementptr i8, i8* %353, i64 16
  %362 = bitcast i8* %361 to <16 x i8>*
  store <16 x i8> %359, <16 x i8>* %362, align 1, !alias.scope !26, !noalias !23
  %363 = or i64 %329, 96
  %364 = getelementptr i8, i8* %193, i64 %363
  %365 = getelementptr i8, i8* %1, i64 %363
  %366 = bitcast i8* %365 to <16 x i8>*
  %367 = load <16 x i8>, <16 x i8>* %366, align 1, !alias.scope !23
  %368 = getelementptr i8, i8* %365, i64 16
  %369 = bitcast i8* %368 to <16 x i8>*
  %370 = load <16 x i8>, <16 x i8>* %369, align 1, !alias.scope !23
  %371 = bitcast i8* %364 to <16 x i8>*
  store <16 x i8> %367, <16 x i8>* %371, align 1, !alias.scope !26, !noalias !23
  %372 = getelementptr i8, i8* %364, i64 16
  %373 = bitcast i8* %372 to <16 x i8>*
  store <16 x i8> %370, <16 x i8>* %373, align 1, !alias.scope !26, !noalias !23
  %374 = add i64 %329, 128
  %375 = add i64 %330, -4
  %376 = icmp eq i64 %375, 0
  br i1 %376, label %377, label %328, !llvm.loop !28

377:                                              ; preds = %328, %317
  %378 = phi i64 [ 0, %317 ], [ %374, %328 ]
  %379 = icmp eq i64 %324, 0
  br i1 %379, label %396, label %380

380:                                              ; preds = %377, %380
  %381 = phi i64 [ %393, %380 ], [ %378, %377 ]
  %382 = phi i64 [ %394, %380 ], [ %324, %377 ]
  %383 = getelementptr i8, i8* %193, i64 %381
  %384 = getelementptr i8, i8* %1, i64 %381
  %385 = bitcast i8* %384 to <16 x i8>*
  %386 = load <16 x i8>, <16 x i8>* %385, align 1, !alias.scope !23
  %387 = getelementptr i8, i8* %384, i64 16
  %388 = bitcast i8* %387 to <16 x i8>*
  %389 = load <16 x i8>, <16 x i8>* %388, align 1, !alias.scope !23
  %390 = bitcast i8* %383 to <16 x i8>*
  store <16 x i8> %386, <16 x i8>* %390, align 1, !alias.scope !26, !noalias !23
  %391 = getelementptr i8, i8* %383, i64 16
  %392 = bitcast i8* %391 to <16 x i8>*
  store <16 x i8> %389, <16 x i8>* %392, align 1, !alias.scope !26, !noalias !23
  %393 = add i64 %381, 32
  %394 = add i64 %382, -1
  %395 = icmp eq i64 %394, 0
  br i1 %395, label %396, label %380, !llvm.loop !29

396:                                              ; preds = %380, %377
  %397 = icmp eq i64 %305, %318
  br i1 %397, label %408, label %398

398:                                              ; preds = %396, %307, %303
  %399 = phi i8* [ %193, %307 ], [ %193, %303 ], [ %319, %396 ]
  %400 = phi i8* [ %1, %307 ], [ %1, %303 ], [ %320, %396 ]
  br label %401

401:                                              ; preds = %398, %401
  %402 = phi i8* [ %406, %401 ], [ %399, %398 ]
  %403 = phi i8* [ %405, %401 ], [ %400, %398 ]
  %404 = load i8, i8* %403, align 1
  store i8 %404, i8* %402, align 1
  %405 = getelementptr inbounds i8, i8* %403, i64 1
  %406 = getelementptr inbounds i8, i8* %402, i64 1
  %407 = icmp eq i8* %405, %301
  br i1 %407, label %408, label %401, !llvm.loop !30

408:                                              ; preds = %401, %396, %300
  %409 = phi i8* [ %193, %300 ], [ %319, %396 ], [ %406, %401 ]
  %410 = ptrtoint i8* %409 to i64
  %411 = load i8*, i8** %6, align 8
  store i64 %297, i64* %165, align 8
  store i64 %410, i64* %20, align 8
  store i64 %291, i64* %13, align 8
  %412 = icmp eq i8* %411, null
  br i1 %412, label %414, label %413

413:                                              ; preds = %408
  tail call void @_ZdlPv(i8* nonnull %411) #14
  br label %414

414:                                              ; preds = %413, %408, %32, %159, %163, %4
  %415 = phi i8* [ %1, %4 ], [ %1, %163 ], [ %1, %159 ], [ %1, %32 ], [ %191, %408 ], [ %191, %413 ]
  ret i8* %415
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN2wl34TranslateBoundsToParentCoordinatesERKN3gfx4RectES3_(%"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = bitcast %"class.gfx::Rect"* %0 to i64*
  %8 = load i64, i64* %7, align 4
  %9 = trunc i64 %8 to i32
  %10 = lshr i64 %8, 32
  %11 = trunc i64 %10 to i32
  %12 = icmp sgt i32 %4, -1
  %13 = select i1 %12, i32 -2147483648, i32 2147483647
  %14 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %9, i32 %4) #13
  %15 = extractvalue { i32, i1 } %14, 1
  %16 = extractvalue { i32, i1 } %14, 0
  %17 = select i1 %15, i32 %13, i32 %16, !prof !31
  %18 = icmp sgt i32 %6, -1
  %19 = select i1 %18, i32 -2147483648, i32 2147483647
  %20 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %11, i32 %6) #13
  %21 = extractvalue { i32, i1 } %20, 1
  %22 = extractvalue { i32, i1 } %20, 0
  %23 = select i1 %21, i32 %19, i32 %22, !prof !31
  %24 = zext i32 %23 to i64
  %25 = shl nuw i64 %24, 32
  %26 = zext i32 %17 to i64
  %27 = or i64 %25, %26
  %28 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %17, 0
  %31 = icmp sgt i32 %29, 0
  %32 = and i1 %31, %30
  %33 = sub nuw nsw i32 2147483647, %17
  %34 = icmp ult i32 %33, %29
  %35 = and i1 %34, %32
  %36 = select i1 %35, i32 %33, i32 %29
  %37 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %23, 0
  %40 = icmp sgt i32 %38, 0
  %41 = and i1 %40, %39
  %42 = sub nuw nsw i32 2147483647, %23
  %43 = icmp ult i32 %42, %38
  %44 = and i1 %43, %41
  %45 = select i1 %44, i32 %42, i32 %38
  %46 = icmp sgt i32 %36, 0
  %47 = select i1 %46, i32 %36, i32 0
  %48 = icmp sgt i32 %45, 0
  %49 = select i1 %48, i32 %45, i32 0
  %50 = insertvalue { i64, i64 } undef, i64 %27, 0
  %51 = zext i32 %49 to i64
  %52 = shl nuw nsw i64 %51, 32
  %53 = zext i32 %47 to i64
  %54 = or i64 %52, %53
  %55 = insertvalue { i64, i64 } %50, i64 %54, 1
  ret { i64, i64 } %55
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN2wl36TranslateBoundsToTopLevelCoordinatesERKN3gfx4RectES3_(%"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = bitcast %"class.gfx::Rect"* %0 to i64*
  %8 = load i64, i64* %7, align 4
  %9 = trunc i64 %8 to i32
  %10 = lshr i64 %8, 32
  %11 = trunc i64 %10 to i32
  %12 = icmp slt i32 %4, 0
  %13 = select i1 %12, i32 -2147483648, i32 2147483647
  %14 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %9, i32 %4) #13
  %15 = extractvalue { i32, i1 } %14, 1
  %16 = extractvalue { i32, i1 } %14, 0
  %17 = select i1 %15, i32 %13, i32 %16, !prof !31
  %18 = icmp slt i32 %6, 0
  %19 = select i1 %18, i32 -2147483648, i32 2147483647
  %20 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %11, i32 %6) #13
  %21 = extractvalue { i32, i1 } %20, 1
  %22 = extractvalue { i32, i1 } %20, 0
  %23 = select i1 %21, i32 %19, i32 %22, !prof !31
  %24 = zext i32 %23 to i64
  %25 = shl nuw i64 %24, 32
  %26 = zext i32 %17 to i64
  %27 = or i64 %25, %26
  %28 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %17, 0
  %31 = icmp sgt i32 %29, 0
  %32 = and i1 %31, %30
  %33 = sub nuw nsw i32 2147483647, %17
  %34 = icmp ult i32 %33, %29
  %35 = and i1 %34, %32
  %36 = select i1 %35, i32 %33, i32 %29
  %37 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %23, 0
  %40 = icmp sgt i32 %38, 0
  %41 = and i1 %40, %39
  %42 = sub nuw nsw i32 2147483647, %23
  %43 = icmp ult i32 %42, %38
  %44 = and i1 %43, %41
  %45 = select i1 %44, i32 %42, i32 %38
  %46 = icmp sgt i32 %36, 0
  %47 = select i1 %46, i32 %36, i32 0
  %48 = icmp sgt i32 %45, 0
  %49 = select i1 %48, i32 %45, i32 0
  %50 = insertvalue { i64, i64 } undef, i64 %27, 0
  %51 = zext i32 %49 to i64
  %52 = shl nuw nsw i64 %51, 32
  %53 = zext i32 %47 to i64
  %54 = or i64 %52, %53
  %55 = insertvalue { i64, i64 } %50, i64 %54, 1
  ret { i64, i64 } %55
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN2wl18ToWaylandTransformEN3gfx16OverlayTransformE(i32) local_unnamed_addr #6 {
  %2 = add i32 %0, -2
  %3 = icmp ult i32 %2, 5
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [5 x i32], [5 x i32]* @switch.table._ZN2wl18ToWaylandTransformEN3gfx16OverlayTransformE, i64 0, i64 %5
  %7 = load i32, i32* %6, align 4
  ret i32 %7

8:                                                ; preds = %1
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN2wl21ApplyWaylandTransformERKN3gfx4RectERKNS0_4SizeE19wl_output_transform(%"class.gfx::Rect"* readonly dereferenceable(16), %"class.gfx::Size"* nocapture readonly dereferenceable(8), i32) local_unnamed_addr #1 {
  %4 = bitcast %"class.gfx::Rect"* %0 to i64*
  %5 = load i64, i64* %4, align 4
  %6 = trunc i64 %5 to i32
  %7 = lshr i64 %5, 32
  %8 = trunc i64 %7 to i32
  %9 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1
  %10 = bitcast %"class.gfx::Size"* %9 to i64*
  %11 = load i64, i64* %10, align 4
  %12 = trunc i64 %11 to i32
  switch i32 %2, label %215 [
    i32 3, label %184
    i32 4, label %13
    i32 5, label %30
    i32 6, label %57
    i32 7, label %81
    i32 1, label %116
    i32 2, label %147
  ]

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = sub nsw i32 %15, %6
  %17 = sub i32 %16, %12
  %18 = icmp sgt i32 %17, 0
  %19 = icmp sgt i32 %12, 0
  %20 = and i1 %19, %18
  %21 = sub nuw nsw i32 2147483647, %17
  %22 = icmp ult i32 %21, %12
  %23 = and i1 %22, %20
  %24 = select i1 %23, i32 %21, i32 %12
  %25 = icmp sgt i32 %24, 0
  %26 = select i1 %25, i32 %24, i32 0
  %27 = zext i32 %26 to i64
  %28 = and i64 %11, -4294967296
  %29 = or i64 %28, %27
  br label %215

30:                                               ; preds = %3
  %31 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp sgt i32 %32, 0
  %34 = sub nuw nsw i32 2147483647, %32
  %35 = icmp sgt i32 %6, 0
  %36 = sub nuw nsw i32 2147483647, %6
  %37 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %38, 0
  %40 = and i1 %33, %39
  %41 = icmp ult i32 %34, %38
  %42 = and i1 %41, %40
  %43 = select i1 %42, i32 %34, i32 %38
  %44 = icmp sgt i32 %43, 0
  %45 = select i1 %44, i32 %43, i32 0
  %46 = zext i32 %45 to i64
  %47 = icmp sgt i32 %12, 0
  %48 = and i1 %35, %47
  %49 = icmp ult i32 %36, %12
  %50 = and i1 %49, %48
  %51 = select i1 %50, i32 %36, i32 %12
  %52 = icmp sgt i32 %51, 0
  %53 = select i1 %52, i32 %51, i32 0
  %54 = zext i32 %53 to i64
  %55 = shl nuw nsw i64 %54, 32
  %56 = or i64 %55, %46
  br label %215

57:                                               ; preds = %3
  %58 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = sub nsw i32 %59, %61
  %63 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = sub i32 %62, %64
  %66 = lshr i64 %11, 32
  %67 = trunc i64 %66 to i32
  %68 = icmp sgt i32 %65, 0
  %69 = icmp sgt i32 %67, 0
  %70 = and i1 %69, %68
  %71 = sub nuw nsw i32 2147483647, %65
  %72 = icmp ult i32 %71, %67
  %73 = and i1 %72, %70
  %74 = select i1 %73, i32 %71, i32 %67
  %75 = icmp sgt i32 %74, 0
  %76 = select i1 %75, i32 %74, i32 0
  %77 = zext i32 %76 to i64
  %78 = shl nuw nsw i64 %77, 32
  %79 = and i64 %11, 4294967295
  %80 = or i64 %78, %79
  br label %215

81:                                               ; preds = %3
  %82 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = sub nsw i32 %83, %85
  %87 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = sub i32 %86, %88
  %90 = icmp sgt i32 %89, 0
  %91 = sub nuw nsw i32 2147483647, %89
  %92 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 0
  %93 = load i32, i32* %92, align 4
  %94 = sub nsw i32 %93, %6
  %95 = sub i32 %94, %12
  %96 = icmp sgt i32 %95, 0
  %97 = sub nuw nsw i32 2147483647, %95
  %98 = icmp sgt i32 %88, 0
  %99 = and i1 %98, %90
  %100 = icmp ult i32 %91, %88
  %101 = and i1 %100, %99
  %102 = select i1 %101, i32 %91, i32 %88
  %103 = icmp sgt i32 %102, 0
  %104 = select i1 %103, i32 %102, i32 0
  %105 = zext i32 %104 to i64
  %106 = icmp sgt i32 %12, 0
  %107 = and i1 %106, %96
  %108 = icmp ult i32 %97, %12
  %109 = and i1 %108, %107
  %110 = select i1 %109, i32 %97, i32 %12
  %111 = icmp sgt i32 %110, 0
  %112 = select i1 %111, i32 %110, i32 0
  %113 = zext i32 %112 to i64
  %114 = shl nuw nsw i64 %113, 32
  %115 = or i64 %114, %105
  br label %215

116:                                              ; preds = %3
  %117 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %118 = load i32, i32* %117, align 4
  %119 = icmp sgt i32 %118, 0
  %120 = sub nuw nsw i32 2147483647, %118
  %121 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 0
  %122 = load i32, i32* %121, align 4
  %123 = sub nsw i32 %122, %6
  %124 = sub i32 %123, %12
  %125 = icmp sgt i32 %124, 0
  %126 = sub nuw nsw i32 2147483647, %124
  %127 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = icmp sgt i32 %128, 0
  %130 = and i1 %119, %129
  %131 = icmp ult i32 %120, %128
  %132 = and i1 %131, %130
  %133 = select i1 %132, i32 %120, i32 %128
  %134 = icmp sgt i32 %133, 0
  %135 = select i1 %134, i32 %133, i32 0
  %136 = zext i32 %135 to i64
  %137 = icmp sgt i32 %12, 0
  %138 = and i1 %137, %125
  %139 = icmp ult i32 %126, %12
  %140 = and i1 %139, %138
  %141 = select i1 %140, i32 %126, i32 %12
  %142 = icmp sgt i32 %141, 0
  %143 = select i1 %142, i32 %141, i32 0
  %144 = zext i32 %143 to i64
  %145 = shl nuw nsw i64 %144, 32
  %146 = or i64 %145, %136
  br label %215

147:                                              ; preds = %3
  %148 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 0
  %149 = load i32, i32* %148, align 4
  %150 = sub nsw i32 %149, %6
  %151 = sub i32 %150, %12
  %152 = icmp sgt i32 %151, 0
  %153 = icmp sgt i32 %12, 0
  %154 = and i1 %153, %152
  %155 = sub nuw nsw i32 2147483647, %151
  %156 = icmp ult i32 %155, %12
  %157 = and i1 %156, %154
  %158 = select i1 %157, i32 %155, i32 %12
  %159 = icmp sgt i32 %158, 0
  %160 = select i1 %159, i32 %158, i32 0
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %163 = load i32, i32* %162, align 4
  %164 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %165 = load i32, i32* %164, align 4
  %166 = sub nsw i32 %163, %165
  %167 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %168 = load i32, i32* %167, align 4
  %169 = sub i32 %166, %168
  %170 = lshr i64 %11, 32
  %171 = trunc i64 %170 to i32
  %172 = icmp sgt i32 %169, 0
  %173 = icmp sgt i32 %171, 0
  %174 = and i1 %173, %172
  %175 = sub nuw nsw i32 2147483647, %169
  %176 = icmp ult i32 %175, %171
  %177 = and i1 %176, %174
  %178 = select i1 %177, i32 %175, i32 %171
  %179 = icmp sgt i32 %178, 0
  %180 = select i1 %179, i32 %178, i32 0
  %181 = zext i32 %180 to i64
  %182 = shl nuw nsw i64 %181, 32
  %183 = or i64 %182, %161
  br label %215

184:                                              ; preds = %3
  %185 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %186 = load i32, i32* %185, align 4
  %187 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %188 = load i32, i32* %187, align 4
  %189 = sub nsw i32 %186, %188
  %190 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %191 = load i32, i32* %190, align 4
  %192 = sub i32 %189, %191
  %193 = icmp sgt i32 %192, 0
  %194 = sub nuw nsw i32 2147483647, %192
  %195 = icmp sgt i32 %6, 0
  %196 = sub nuw nsw i32 2147483647, %6
  %197 = icmp sgt i32 %191, 0
  %198 = and i1 %197, %193
  %199 = icmp ult i32 %194, %191
  %200 = and i1 %199, %198
  %201 = select i1 %200, i32 %194, i32 %191
  %202 = icmp sgt i32 %201, 0
  %203 = select i1 %202, i32 %201, i32 0
  %204 = zext i32 %203 to i64
  %205 = icmp sgt i32 %12, 0
  %206 = and i1 %195, %205
  %207 = icmp ult i32 %196, %12
  %208 = and i1 %207, %206
  %209 = select i1 %208, i32 %196, i32 %12
  %210 = icmp sgt i32 %209, 0
  %211 = select i1 %210, i32 %209, i32 0
  %212 = zext i32 %211 to i64
  %213 = shl nuw nsw i64 %212, 32
  %214 = or i64 %213, %204
  br label %215

215:                                              ; preds = %3, %184, %147, %116, %81, %57, %30, %13
  %216 = phi i32 [ %8, %3 ], [ %169, %147 ], [ %124, %116 ], [ %95, %81 ], [ %65, %57 ], [ %6, %30 ], [ %8, %13 ], [ %6, %184 ]
  %217 = phi i32 [ %6, %3 ], [ %151, %147 ], [ %118, %116 ], [ %89, %81 ], [ %6, %57 ], [ %32, %30 ], [ %17, %13 ], [ %192, %184 ]
  %218 = phi i64 [ %11, %3 ], [ %183, %147 ], [ %146, %116 ], [ %115, %81 ], [ %80, %57 ], [ %56, %30 ], [ %29, %13 ], [ %214, %184 ]
  %219 = zext i32 %216 to i64
  %220 = shl nuw i64 %219, 32
  %221 = zext i32 %217 to i64
  %222 = or i64 %220, %221
  %223 = insertvalue { i64, i64 } undef, i64 %222, 0
  %224 = insertvalue { i64, i64 } %223, i64 %218, 1
  ret { i64, i64 } %224
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN2wl21ApplyWaylandTransformERKN3gfx4SizeE19wl_output_transform(%"class.gfx::Size"* nocapture readonly dereferenceable(8), i32) local_unnamed_addr #0 {
  %3 = bitcast %"class.gfx::Size"* %0 to i64*
  %4 = load i64, i64* %3, align 4
  %5 = trunc i64 %4 to i32
  %6 = lshr i64 %4, 32
  switch i32 %1, label %14 [
    i32 3, label %7
    i32 1, label %7
    i32 7, label %7
    i32 5, label %7
  ]

7:                                                ; preds = %2, %2, %2, %2
  %8 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  %11 = select i1 %10, i32 %9, i32 0
  %12 = icmp sgt i32 %5, 0
  %13 = select i1 %12, i64 %4, i64 0
  br label %14

14:                                               ; preds = %2, %7
  %15 = phi i64 [ %6, %2 ], [ %13, %7 ]
  %16 = phi i32 [ %5, %2 ], [ %11, %7 ]
  %17 = shl i64 %15, 32
  %18 = zext i32 %16 to i64
  %19 = or i64 %17, %18
  ret i64 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.ui::WaylandWindow"* @_ZN2wl23RootWindowFromWlSurfaceEP10wl_surface(%struct.wl_surface*) local_unnamed_addr #1 {
  %2 = icmp eq %struct.wl_surface* %0, null
  br i1 %2, label %11, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.wl_surface* %0 to %struct.wl_proxy*
  %5 = tail call i8* @wl_proxy_get_user_data(%struct.wl_proxy* nonnull %4) #13
  %6 = icmp eq i8* %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds i8, i8* %5, i64 8
  %9 = bitcast i8* %8 to %"class.ui::WaylandWindow"**
  %10 = load %"class.ui::WaylandWindow"*, %"class.ui::WaylandWindow"** %9, align 8
  br label %11

11:                                               ; preds = %7, %3, %1
  %12 = phi %"class.ui::WaylandWindow"* [ null, %1 ], [ %10, %7 ], [ null, %3 ]
  ret %"class.ui::WaylandWindow"* %12
}

declare i8* @wl_proxy_get_user_data(%struct.wl_proxy*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN2wl32TranslateWindowBoundsToParentDIPEPN2ui13WaylandWindowES2_(%"class.ui::WaylandWindow"*, %"class.ui::WaylandWindow"*) local_unnamed_addr #1 {
  %3 = bitcast %"class.ui::WaylandWindow"* %0 to { i64, i64 } (%"class.ui::WaylandWindow"*)***
  %4 = load { i64, i64 } (%"class.ui::WaylandWindow"*)**, { i64, i64 } (%"class.ui::WaylandWindow"*)*** %3, align 8
  %5 = getelementptr inbounds { i64, i64 } (%"class.ui::WaylandWindow"*)*, { i64, i64 } (%"class.ui::WaylandWindow"*)** %4, i64 9
  %6 = load { i64, i64 } (%"class.ui::WaylandWindow"*)*, { i64, i64 } (%"class.ui::WaylandWindow"*)** %5, align 8
  %7 = tail call { i64, i64 } %6(%"class.ui::WaylandWindow"* %0) #13
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = bitcast %"class.ui::WaylandWindow"* %1 to { i64, i64 } (%"class.ui::WaylandWindow"*)***
  %11 = load { i64, i64 } (%"class.ui::WaylandWindow"*)**, { i64, i64 } (%"class.ui::WaylandWindow"*)*** %10, align 8
  %12 = getelementptr inbounds { i64, i64 } (%"class.ui::WaylandWindow"*)*, { i64, i64 } (%"class.ui::WaylandWindow"*)** %11, i64 9
  %13 = load { i64, i64 } (%"class.ui::WaylandWindow"*)*, { i64, i64 } (%"class.ui::WaylandWindow"*)** %12, align 8
  %14 = tail call { i64, i64 } %13(%"class.ui::WaylandWindow"* %1) #13
  %15 = extractvalue { i64, i64 } %14, 0
  %16 = trunc i64 %15 to i32
  %17 = lshr i64 %15, 32
  %18 = trunc i64 %17 to i32
  %19 = trunc i64 %8 to i32
  %20 = lshr i64 %8, 32
  %21 = trunc i64 %20 to i32
  %22 = icmp sgt i32 %16, -1
  %23 = select i1 %22, i32 -2147483648, i32 2147483647
  %24 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %19, i32 %16) #13
  %25 = extractvalue { i32, i1 } %24, 1
  %26 = extractvalue { i32, i1 } %24, 0
  %27 = select i1 %25, i32 %23, i32 %26, !prof !31
  %28 = icmp sgt i32 %18, -1
  %29 = select i1 %28, i32 -2147483648, i32 2147483647
  %30 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 %18) #13
  %31 = extractvalue { i32, i1 } %30, 1
  %32 = extractvalue { i32, i1 } %30, 0
  %33 = select i1 %31, i32 %29, i32 %32, !prof !31
  %34 = trunc i64 %9 to i32
  %35 = icmp sgt i32 %27, 0
  %36 = icmp sgt i32 %34, 0
  %37 = and i1 %36, %35
  %38 = sub nuw nsw i32 2147483647, %27
  %39 = icmp ult i32 %38, %34
  %40 = and i1 %39, %37
  %41 = select i1 %40, i32 %38, i32 %34
  %42 = lshr i64 %9, 32
  %43 = trunc i64 %42 to i32
  %44 = icmp sgt i32 %33, 0
  %45 = icmp sgt i32 %43, 0
  %46 = and i1 %45, %44
  %47 = sub nuw nsw i32 2147483647, %33
  %48 = icmp ult i32 %47, %43
  %49 = and i1 %48, %46
  %50 = select i1 %49, i32 %47, i32 %43
  %51 = icmp sgt i32 %41, 0
  %52 = select i1 %51, i32 %41, i32 0
  %53 = icmp sgt i32 %50, 0
  %54 = select i1 %53, i32 %50, i32 0
  %55 = getelementptr inbounds %"class.ui::WaylandWindow", %"class.ui::WaylandWindow"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %56 = load %"class.ui::WaylandSurface"*, %"class.ui::WaylandSurface"** %55, align 8
  %57 = getelementptr inbounds %"class.ui::WaylandSurface", %"class.ui::WaylandSurface"* %56, i64 0, i32 10
  %58 = load i32, i32* %57, align 4
  %59 = sitofp i32 %58 to double
  %60 = fdiv double 1.000000e+00, %59
  %61 = fptrunc double %60 to float
  %62 = fcmp oeq float %61, 1.000000e+00
  br i1 %62, label %63, label %68

63:                                               ; preds = %2
  %64 = zext i32 %54 to i64
  %65 = shl nuw nsw i64 %64, 32
  %66 = zext i32 %52 to i64
  %67 = or i64 %65, %66
  br label %119

68:                                               ; preds = %2
  %69 = sitofp i32 %27 to float
  %70 = fmul float %61, %69
  %71 = tail call float @llvm.round.f32(float %70) #13
  %72 = fptosi float %71 to i32
  %73 = sitofp i32 %33 to float
  %74 = fmul float %61, %73
  %75 = tail call float @llvm.round.f32(float %74) #13
  %76 = fptosi float %75 to i32
  %77 = icmp slt i32 %41, 1
  br i1 %77, label %84, label %78

78:                                               ; preds = %68
  %79 = add nsw i32 %52, %27
  %80 = sitofp i32 %79 to float
  %81 = fmul float %61, %80
  %82 = tail call float @llvm.round.f32(float %81) #13
  %83 = fptosi float %82 to i32
  br label %84

84:                                               ; preds = %78, %68
  %85 = phi i32 [ %83, %78 ], [ %72, %68 ]
  %86 = icmp slt i32 %50, 1
  br i1 %86, label %93, label %87

87:                                               ; preds = %84
  %88 = add nsw i32 %54, %33
  %89 = sitofp i32 %88 to float
  %90 = fmul float %61, %89
  %91 = tail call float @llvm.round.f32(float %90) #13
  %92 = fptosi float %91 to i32
  br label %93

93:                                               ; preds = %87, %84
  %94 = phi i32 [ %92, %87 ], [ %76, %84 ]
  %95 = sub nsw i32 %85, %72
  %96 = sub nsw i32 %94, %76
  %97 = icmp sgt i32 %72, 0
  %98 = icmp sgt i32 %95, 0
  %99 = and i1 %97, %98
  %100 = sub nuw nsw i32 2147483647, %72
  %101 = icmp ult i32 %100, %95
  %102 = and i1 %101, %99
  %103 = select i1 %102, i32 %100, i32 %95
  %104 = icmp sgt i32 %76, 0
  %105 = icmp sgt i32 %96, 0
  %106 = and i1 %104, %105
  %107 = sub nuw nsw i32 2147483647, %76
  %108 = icmp ult i32 %107, %96
  %109 = and i1 %108, %106
  %110 = select i1 %109, i32 %107, i32 %96
  %111 = icmp sgt i32 %103, 0
  %112 = select i1 %111, i32 %103, i32 0
  %113 = zext i32 %112 to i64
  %114 = icmp sgt i32 %110, 0
  %115 = select i1 %114, i32 %110, i32 0
  %116 = zext i32 %115 to i64
  %117 = shl nuw nsw i64 %116, 32
  %118 = or i64 %117, %113
  br label %119

119:                                              ; preds = %63, %93
  %120 = phi i32 [ %33, %63 ], [ %76, %93 ]
  %121 = phi i32 [ %27, %63 ], [ %72, %93 ]
  %122 = phi i64 [ %67, %63 ], [ %118, %93 ]
  %123 = zext i32 %120 to i64
  %124 = shl nuw i64 %123, 32
  %125 = zext i32 %121 to i64
  %126 = or i64 %124, %125
  %127 = insertvalue { i64, i64 } undef, i64 %126, 0
  %128 = insertvalue { i64, i64 } %127, i64 %122, 1
  ret { i64, i64 } %128
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2wl21CreateRectsFromSkPathERK6SkPath(%"class.std::__1::vector.395"* noalias sret, %class.SkPath* dereferenceable(16)) local_unnamed_addr #1 {
  %3 = alloca %class.SkRegion, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = bitcast { i64, i64 }* %4 to %struct.SkIRect*
  %6 = alloca %class.SkRegion, align 8
  %7 = alloca %"class.SkRegion::Iterator", align 8
  %8 = bitcast %class.SkRegion* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #13
  %9 = bitcast %class.SkRegion* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  call void @_ZN8SkRegionC1Ev(%class.SkRegion* nonnull %3) #13
  %10 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #13
  %11 = getelementptr inbounds %class.SkPath, %class.SkPath* %1, i64 0, i32 0, i32 0
  %12 = load %class.SkPathRef*, %class.SkPathRef** %11, align 8
  %13 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %12, i64 0, i32 9
  %14 = load i8, i8* %13, align 8
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %25, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %12, i64 0, i32 1
  %18 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %12, i64 0, i32 3, i32 0
  %19 = load %struct.SkPoint*, %struct.SkPoint** %18, align 8
  %20 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %12, i64 0, i32 3, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %17, %struct.SkPoint* %19, i32 %21) #13
  %23 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %12, i64 0, i32 10
  %24 = zext i1 %22 to i8
  store i8 %24, i8* %23, align 1
  store i8 0, i8* %13, align 8
  br label %25

25:                                               ; preds = %2, %16
  %26 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %12, i64 0, i32 1, i32 0
  %27 = load float, float* %26, align 4
  %28 = fadd float %27, 5.000000e-01
  %29 = call float @llvm.floor.f32(float %28) #13
  %30 = fcmp olt float %29, 0x41DFFFFFE0000000
  %31 = select i1 %30, float %29, float 0x41DFFFFFE0000000
  %32 = fcmp ogt float %31, 0xC1DFFFFFE0000000
  %33 = select i1 %32, float %31, float 0xC1DFFFFFE0000000
  %34 = fptosi float %33 to i32
  %35 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %12, i64 0, i32 1, i32 1
  %36 = load float, float* %35, align 4
  %37 = fadd float %36, 5.000000e-01
  %38 = call float @llvm.floor.f32(float %37) #13
  %39 = fcmp olt float %38, 0x41DFFFFFE0000000
  %40 = select i1 %39, float %38, float 0x41DFFFFFE0000000
  %41 = fcmp ogt float %40, 0xC1DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0xC1DFFFFFE0000000
  %43 = fptosi float %42 to i32
  %44 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %12, i64 0, i32 1, i32 2
  %45 = load float, float* %44, align 4
  %46 = fadd float %45, 5.000000e-01
  %47 = call float @llvm.floor.f32(float %46) #13
  %48 = fcmp olt float %47, 0x41DFFFFFE0000000
  %49 = select i1 %48, float %47, float 0x41DFFFFFE0000000
  %50 = fcmp ogt float %49, 0xC1DFFFFFE0000000
  %51 = select i1 %50, float %49, float 0xC1DFFFFFE0000000
  %52 = fptosi float %51 to i32
  %53 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %12, i64 0, i32 1, i32 3
  %54 = load float, float* %53, align 4
  %55 = fadd float %54, 5.000000e-01
  %56 = call float @llvm.floor.f32(float %55) #13
  %57 = fcmp olt float %56, 0x41DFFFFFE0000000
  %58 = select i1 %57, float %56, float 0x41DFFFFFE0000000
  %59 = fcmp ogt float %58, 0xC1DFFFFFE0000000
  %60 = select i1 %59, float %58, float 0xC1DFFFFFE0000000
  %61 = fptosi float %60 to i32
  %62 = zext i32 %43 to i64
  %63 = shl nuw i64 %62, 32
  %64 = zext i32 %34 to i64
  %65 = or i64 %63, %64
  %66 = zext i32 %61 to i64
  %67 = shl nuw i64 %66, 32
  %68 = zext i32 %52 to i64
  %69 = or i64 %67, %68
  %70 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 0
  store i64 %65, i64* %70, align 8
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  store i64 %69, i64* %71, align 8
  %72 = call zeroext i1 @_ZN8SkRegion7setRectERK7SkIRect(%class.SkRegion* nonnull %3, %struct.SkIRect* nonnull dereferenceable(16) %5) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #13
  %73 = bitcast %class.SkRegion* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %73) #13
  %74 = bitcast %class.SkRegion* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %74, i8 -86, i64 24, i1 false)
  call void @_ZN8SkRegionC1Ev(%class.SkRegion* nonnull %6) #13
  %75 = call zeroext i1 @_ZN8SkRegion7setPathERK6SkPathRKS_(%class.SkRegion* nonnull %6, %class.SkPath* dereferenceable(16) %1, %class.SkRegion* nonnull dereferenceable(24) %3) #13
  %76 = getelementptr inbounds %"class.std::__1::vector.395", %"class.std::__1::vector.395"* %0, i64 0, i32 0, i32 1
  %77 = getelementptr inbounds %"class.std::__1::vector.395", %"class.std::__1::vector.395"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %78 = bitcast %"class.std::__1::vector.395"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 24, i1 false) #13
  %79 = bitcast %"class.SkRegion::Iterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %79) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %79, i8 -86, i64 40, i1 false)
  call void @_ZN8SkRegion8IteratorC1ERKS_(%"class.SkRegion::Iterator"* nonnull %7, %class.SkRegion* nonnull dereferenceable(24) %6) #13
  %80 = getelementptr inbounds %"class.SkRegion::Iterator", %"class.SkRegion::Iterator"* %7, i64 0, i32 3
  %81 = load i8, i8* %80, align 8, !range !32
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %25
  %84 = getelementptr inbounds %"class.SkRegion::Iterator", %"class.SkRegion::Iterator"* %7, i64 0, i32 2
  %85 = bitcast %"class.gfx::Rect"** %76 to i64*
  %86 = bitcast %"class.std::__1::vector.395"* %0 to i64*
  %87 = bitcast %"class.gfx::Rect"** %77 to i64*
  br label %89

88:                                               ; preds = %154, %25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %79) #13
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %73) #13
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %3) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #13
  ret void

89:                                               ; preds = %157, %83
  %90 = phi i64 [ %160, %157 ], [ 0, %83 ]
  %91 = phi %"class.gfx::Rect"* [ %159, %157 ], [ null, %83 ]
  %92 = phi %"class.gfx::Rect"* [ %158, %157 ], [ null, %83 ]
  %93 = call { i64, i64 } @_ZN3gfx13SkIRectToRectERK7SkIRect(%struct.SkIRect* dereferenceable(16) %84) #13
  %94 = extractvalue { i64, i64 } %93, 0
  %95 = extractvalue { i64, i64 } %93, 1
  %96 = icmp ult %"class.gfx::Rect"* %92, %91
  %97 = ptrtoint %"class.gfx::Rect"* %91 to i64
  br i1 %96, label %98, label %104

98:                                               ; preds = %89
  %99 = bitcast %"class.gfx::Rect"* %92 to i64*
  store i64 %94, i64* %99, align 4
  %100 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %92, i64 0, i32 1
  %101 = bitcast %"class.gfx::Size"* %100 to i64*
  store i64 %95, i64* %101, align 4
  %102 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %92, i64 1
  %103 = ptrtoint %"class.gfx::Rect"* %102 to i64
  store i64 %103, i64* %85, align 8
  br label %154

104:                                              ; preds = %89
  %105 = ptrtoint %"class.gfx::Rect"* %92 to i64
  %106 = load i64, i64* %86, align 8
  %107 = sub i64 %105, %106
  %108 = ashr exact i64 %107, 4
  %109 = add nsw i64 %108, 1
  %110 = icmp ugt i64 %109, 1152921504606846975
  br i1 %110, label %111, label %113

111:                                              ; preds = %104
  %112 = bitcast %"class.std::__1::vector.395"* %0 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %112) #15
  unreachable

113:                                              ; preds = %104
  %114 = sub i64 %97, %106
  %115 = ashr exact i64 %114, 4
  %116 = icmp ult i64 %115, 576460752303423487
  br i1 %116, label %117, label %125

117:                                              ; preds = %113
  %118 = ashr exact i64 %114, 3
  %119 = icmp ult i64 %118, %109
  %120 = select i1 %119, i64 %109, i64 %118
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %130, label %122

122:                                              ; preds = %117
  %123 = icmp ugt i64 %120, 1152921504606846975
  br i1 %123, label %124, label %125

124:                                              ; preds = %122
  call void @abort() #15
  unreachable

125:                                              ; preds = %122, %113
  %126 = phi i64 [ %120, %122 ], [ 1152921504606846975, %113 ]
  %127 = shl i64 %126, 4
  %128 = call i8* @_Znwm(i64 %127) #14
  %129 = bitcast i8* %128 to %"class.gfx::Rect"*
  br label %130

130:                                              ; preds = %125, %117
  %131 = phi i64 [ %126, %125 ], [ 0, %117 ]
  %132 = phi %"class.gfx::Rect"* [ %129, %125 ], [ null, %117 ]
  %133 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %132, i64 %108
  %134 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %132, i64 %131
  %135 = ptrtoint %"class.gfx::Rect"* %134 to i64
  %136 = bitcast %"class.gfx::Rect"* %133 to i64*
  store i64 %94, i64* %136, align 4
  %137 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %132, i64 %108, i32 1
  %138 = bitcast %"class.gfx::Size"* %137 to i64*
  store i64 %95, i64* %138, align 4
  %139 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %133, i64 1
  %140 = ptrtoint %"class.gfx::Rect"* %139 to i64
  %141 = sub i64 %90, %106
  %142 = ashr exact i64 %141, 4
  %143 = sub nsw i64 0, %142
  %144 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %133, i64 %143
  %145 = ptrtoint %"class.gfx::Rect"* %144 to i64
  %146 = icmp sgt i64 %141, 0
  br i1 %146, label %147, label %150

147:                                              ; preds = %130
  %148 = bitcast %"class.gfx::Rect"* %144 to i8*
  %149 = inttoptr i64 %106 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %148, i8* align 4 %149, i64 %141, i1 false) #13
  br label %150

150:                                              ; preds = %147, %130
  store i64 %145, i64* %86, align 8
  store i64 %140, i64* %85, align 8
  store i64 %135, i64* %87, align 8
  %151 = icmp eq i64 %106, 0
  br i1 %151, label %154, label %152

152:                                              ; preds = %150
  %153 = inttoptr i64 %106 to i8*
  call void @_ZdlPv(i8* %153) #14
  br label %154

154:                                              ; preds = %98, %150, %152
  call void @_ZN8SkRegion8Iterator4nextEv(%"class.SkRegion::Iterator"* nonnull %7) #13
  %155 = load i8, i8* %80, align 8, !range !32
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %157, label %88

157:                                              ; preds = %154
  %158 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %76, align 8
  %159 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %77, align 8
  %160 = ptrtoint %"class.gfx::Rect"* %158 to i64
  br label %89
}

declare void @_ZN8SkRegionC1Ev(%class.SkRegion*) unnamed_addr #3

declare zeroext i1 @_ZN8SkRegion7setRectERK7SkIRect(%class.SkRegion*, %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #3

declare zeroext i1 @_ZN8SkRegion7setPathERK6SkPathRKS_(%class.SkRegion*, %class.SkPath* dereferenceable(16), %class.SkRegion* dereferenceable(24)) local_unnamed_addr #3

declare void @_ZN8SkRegion8IteratorC1ERKS_(%"class.SkRegion::Iterator"*, %class.SkRegion* dereferenceable(24)) unnamed_addr #3

declare { i64, i64 } @_ZN3gfx13SkIRectToRectERK7SkIRect(%struct.SkIRect* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZN8SkRegion8Iterator4nextEv(%"class.SkRegion::Iterator"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN8SkRegionD1Ev(%class.SkRegion*) unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2wl16ConvertPathToDIPERK6SkPathi(%class.SkPath* noalias sret, %class.SkPath* dereferenceable(16), i32) local_unnamed_addr #1 {
  %4 = alloca %"class.gfx::Transform", align 4
  %5 = alloca %class.SkMatrix, align 4
  %6 = sitofp i32 %2 to float
  %7 = fdiv float 1.000000e+00, %6
  %8 = bitcast %"class.gfx::Transform"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %8) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %8, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN2wl16ConvertPathToDIPERK6SkPathi.transform to i8*), i64 68, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %8, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #13
  %9 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %4, i64 0, i32 0, i32 1
  store i8 0, i8* %9, align 4
  call void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"* nonnull %4, float %7, float %7) #13
  %10 = bitcast %class.SkPath* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* %0) #13
  %11 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %11) #13
  %12 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %4, i64 0, i32 0
  call void @_ZNK10SkMatrix44cv8SkMatrixEv(%class.SkMatrix* nonnull sret %5, %class.SkMatrix44* nonnull %12) #13
  call void @_ZNK6SkPath9transformERK8SkMatrixPS_22SkApplyPerspectiveClip(%class.SkPath* %1, %class.SkMatrix* nonnull dereferenceable(40) %5, %class.SkPath* %0, i32 1) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %11) #13
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %8) #13
  ret void
}

declare void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"*, float, float) local_unnamed_addr #3

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #3

declare void @_ZNK6SkPath9transformERK8SkMatrixPS_22SkApplyPerspectiveClip(%class.SkPath*, %class.SkMatrix* dereferenceable(40), %class.SkPath*, i32) local_unnamed_addr #3

declare void @_ZNK10SkMatrix44cv8SkMatrixEv(%class.SkMatrix* sret, %class.SkMatrix44*) local_unnamed_addr #3

declare { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32) local_unnamed_addr #3

declare void @_ZN8SkCanvas9drawColorERK8SkRGBA4fIL11SkAlphaType3EE11SkBlendMode(%class.SkCanvas*, %struct.SkRGBA4f* dereferenceable(16), i32) local_unnamed_addr #3

declare void @_ZN8SkCanvas13drawImageRectEPK7SkImageRK6SkRectRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas*, %class.SkImage*, %struct.SkRect* dereferenceable(16), %struct.SkSamplingOptions* dereferenceable(20), %class.SkPaint*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #8

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #8

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #8

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #11

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #12

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { builtin nounwind }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!4 = distinct !{!4, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !11}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !13}
!22 = distinct !{!22, !11}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !11}
!29 = distinct !{!29, !13}
!30 = distinct !{!30, !11}
!31 = !{!"branch_weights", i32 1, i32 2000}
!32 = !{i8 0, i8 2}
