; ModuleID = '../../third_party/blink/renderer/platform/graphics/compositor_filter_operations.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/compositor_filter_operations.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.10" }
%"struct.std::__1::atomic.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i32 }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.5" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp, [20 x float], i32, [4 x i8], %"class.std::__1::vector.2", i32, [4 x i8] }>
%"class.gfx::Point" = type { i32, i32 }
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.1, i32, %"class.absl::optional", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.1 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.cc::FilterOperation"* }
%"class.blink::CompositorFilterOperations" = type { %"class.cc::FilterOperations", %"class.blink::FloatRect" }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { float*, i32, i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkMatrix = type { [9 x float], i32 }
%"class.WTF::StringAppend" = type { %"class.WTF::StringAppend.15", %"class.WTF::String" }
%"class.WTF::StringAppend.15" = type { %"class.WTF::String", i8* }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.18 }
%union.anon.18 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.WTF::StringTypeAdapter.24" = type <{ i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::StringTypeAdapter.22" = type { %"class.WTF::StringTypeAdapter.23" }
%"class.WTF::StringTypeAdapter.23" = type { %"class.WTF::StringView" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

$_ZN3WTFplINS_6StringEPKcS1_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_ = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_EcvS1_Ev = comdat any

$_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_ = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv = comdat any

@.str = private unnamed_addr constant [5 x i8] c" at \00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.2 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.3 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.4 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(24) %"class.cc::FilterOperations"* @_ZNK5blink26CompositorFilterOperations20AsCcFilterOperationsEv(%"class.blink::CompositorFilterOperations"* readnone) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  ret %"class.cc::FilterOperations"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations25ReleaseCcFilterOperationsEv(%"class.cc::FilterOperations"* noalias sret, %"class.blink::CompositorFilterOperations"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %1, i64 0, i32 0
  tail call void @_ZN2cc16FilterOperationsC1ERKS0_(%"class.cc::FilterOperations"* %0, %"class.cc::FilterOperations"* dereferenceable(24) %3) #10
  ret void
}

declare void @_ZN2cc16FilterOperationsC1ERKS0_(%"class.cc::FilterOperations"*, %"class.cc::FilterOperations"* dereferenceable(24)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations21AppendGrayscaleFilterEf(%"class.blink::CompositorFilterOperations"*, float) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.cc::FilterOperation", align 8
  %4 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %5 = bitcast %"class.cc::FilterOperation"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %5) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEf(%"class.cc::FilterOperation"* nonnull %3, i32 0, float %1) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %4, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %3) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %5) #10
  ret void
}

declare void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"*, %"class.cc::FilterOperation"* dereferenceable(152)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind
declare void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations17AppendSepiaFilterEf(%"class.blink::CompositorFilterOperations"*, float) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.cc::FilterOperation", align 8
  %4 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %5 = bitcast %"class.cc::FilterOperation"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %5) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEf(%"class.cc::FilterOperation"* nonnull %3, i32 1, float %1) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %4, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %3) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations20AppendSaturateFilterEf(%"class.blink::CompositorFilterOperations"*, float) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.cc::FilterOperation", align 8
  %4 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %5 = bitcast %"class.cc::FilterOperation"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %5) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEf(%"class.cc::FilterOperation"* nonnull %3, i32 2, float %1) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %4, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %3) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations21AppendHueRotateFilterEf(%"class.blink::CompositorFilterOperations"*, float) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.cc::FilterOperation", align 8
  %4 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %5 = bitcast %"class.cc::FilterOperation"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %5) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEf(%"class.cc::FilterOperation"* nonnull %3, i32 3, float %1) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %4, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %3) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations23AppendColorMatrixFilterEN3WTF6VectorIfLj0ENS1_18PartitionAllocatorEEE(%"class.blink::CompositorFilterOperations"*, %"class.WTF::Vector"*) local_unnamed_addr #1 align 2 {
  %3 = alloca [20 x float], align 16
  %4 = alloca %"class.cc::FilterOperation", align 8
  %5 = bitcast [20 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %5) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 0, i64 80, i1 false)
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %12, %2
  %10 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %11 = bitcast %"class.cc::FilterOperation"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %11) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeERA20_Kf(%"class.cc::FilterOperation"* nonnull %4, i32 10, [20 x float]* nonnull dereferenceable(80) %3) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %10, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %4) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %11) #10
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %5) #10
  ret void

12:                                               ; preds = %2, %12
  %13 = phi i64 [ %20, %12 ], [ 0, %2 ]
  %14 = trunc i64 %13 to i32
  %15 = tail call dereferenceable(4) float* @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %1, i32 %14) #10
  %16 = bitcast float* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 %13
  %19 = bitcast float* %18 to i32*
  store i32 %17, i32* %19, align 4
  %20 = add nuw nsw i64 %13, 1
  %21 = load i32, i32* %6, align 4
  %22 = zext i32 %21 to i64
  %23 = icmp ult i64 %20, %22
  br i1 %23, label %12, label %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations18AppendInvertFilterEf(%"class.blink::CompositorFilterOperations"*, float) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.cc::FilterOperation", align 8
  %4 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %5 = bitcast %"class.cc::FilterOperation"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %5) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEf(%"class.cc::FilterOperation"* nonnull %3, i32 4, float %1) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %4, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %3) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations22AppendBrightnessFilterEf(%"class.blink::CompositorFilterOperations"*, float) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.cc::FilterOperation", align 8
  %4 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %5 = bitcast %"class.cc::FilterOperation"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %5) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEf(%"class.cc::FilterOperation"* nonnull %3, i32 5, float %1) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %4, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %3) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations20AppendContrastFilterEf(%"class.blink::CompositorFilterOperations"*, float) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.cc::FilterOperation", align 8
  %4 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %5 = bitcast %"class.cc::FilterOperation"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %5) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEf(%"class.cc::FilterOperation"* nonnull %3, i32 6, float %1) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %4, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %3) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations19AppendOpacityFilterEf(%"class.blink::CompositorFilterOperations"*, float) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.cc::FilterOperation", align 8
  %4 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %5 = bitcast %"class.cc::FilterOperation"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %5) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEf(%"class.cc::FilterOperation"* nonnull %3, i32 7, float %1) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %4, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %3) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations16AppendBlurFilterEf10SkTileMode(%"class.blink::CompositorFilterOperations"*, float, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.cc::FilterOperation", align 8
  %5 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %6 = bitcast %"class.cc::FilterOperation"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %6) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEf10SkTileMode(%"class.cc::FilterOperation"* nonnull %4, i32 8, float %1, i32 %2) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %5, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %4) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations22AppendDropShadowFilterENS_8IntPointEfNS_5ColorE(%"class.blink::CompositorFilterOperations"*, i64, float, i32) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.gfx::Point", align 4
  %6 = alloca %"class.cc::FilterOperation", align 8
  %7 = trunc i64 %1 to i32
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  %10 = bitcast %"class.gfx::Point"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %5, i64 0, i32 0
  %12 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %5, i64 0, i32 1
  store i32 %7, i32* %11, align 4
  store i32 %9, i32* %12, align 4
  %13 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %14 = bitcast %"class.cc::FilterOperation"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %14) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeERKN3gfx5PointEfj(%"class.cc::FilterOperation"* nonnull %6, i32 9, %"class.gfx::Point"* nonnull dereferenceable(8) %5, float %2, i32 %3) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %13, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %6) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %14) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations23AppendColorMatrixFilterERA20_Kf(%"class.blink::CompositorFilterOperations"*, [20 x float]* dereferenceable(80)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.cc::FilterOperation", align 8
  %4 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %5 = bitcast %"class.cc::FilterOperation"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %5) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeERA20_Kf(%"class.cc::FilterOperation"* nonnull %3, i32 10, [20 x float]* dereferenceable(80) %1) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %4, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %3) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations16AppendZoomFilterEfi(%"class.blink::CompositorFilterOperations"*, float, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.cc::FilterOperation", align 8
  %5 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %6 = bitcast %"class.cc::FilterOperation"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %6) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEfi(%"class.cc::FilterOperation"* nonnull %4, i32 11, float %1, i32 %2) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %5, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %4) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations32AppendSaturatingBrightnessFilterEf(%"class.blink::CompositorFilterOperations"*, float) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.cc::FilterOperation", align 8
  %4 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %5 = bitcast %"class.cc::FilterOperation"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %5) #10
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEf(%"class.cc::FilterOperation"* nonnull %3, i32 13, float %1) #10
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %4, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %3) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations21AppendReferenceFilterE5sk_spIN2cc11PaintFilterEE(%"class.blink::CompositorFilterOperations"*, %class.sk_sp* nocapture) local_unnamed_addr #1 align 2 {
  %3 = alloca %class.sk_sp, align 8
  %4 = alloca %"class.cc::FilterOperation", align 8
  %5 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %6 = bitcast %"class.cc::FilterOperation"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %6) #10
  %7 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %8 = bitcast %class.sk_sp* %1 to i64*
  %9 = load i64, i64* %8, align 8
  store %"class.cc::PaintFilter"* null, %"class.cc::PaintFilter"** %7, align 8
  %10 = bitcast %class.sk_sp* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = bitcast %class.sk_sp* %3 to i64*
  store i64 %9, i64* %11, align 8, !noalias !2
  call void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeE5sk_spINS_11PaintFilterEE(%"class.cc::FilterOperation"* nonnull %4, i32 12, %class.sk_sp* nonnull %3) #10
  %12 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  %13 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %12, align 8, !noalias !2
  %14 = icmp eq %"class.cc::PaintFilter"* %13, null
  br i1 %14, label %25, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %13, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 -1 acq_rel
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %25

19:                                               ; preds = %15
  %20 = bitcast %"class.cc::PaintFilter"* %13 to %class.SkRefCntBase*
  %21 = bitcast %"class.cc::PaintFilter"* %13 to void (%class.SkRefCntBase*)***
  %22 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %21, align 8
  %23 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %22, i64 2
  %24 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %23, align 8
  call void %24(%class.SkRefCntBase* nonnull %20) #10
  br label %25

25:                                               ; preds = %19, %15, %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  call void @_ZN2cc16FilterOperations6AppendERKNS_15FilterOperationE(%"class.cc::FilterOperations"* %5, %"class.cc::FilterOperation"* nonnull dereferenceable(152) %4) #10
  call void @_ZN2cc15FilterOperationD1Ev(%"class.cc::FilterOperation"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26CompositorFilterOperations5ClearEv(%"class.blink::CompositorFilterOperations"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  tail call void @_ZN2cc16FilterOperations5ClearEv(%"class.cc::FilterOperations"* %2) #10
  ret void
}

declare void @_ZN2cc16FilterOperations5ClearEv(%"class.cc::FilterOperations"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink26CompositorFilterOperations7IsEmptyEv(%"class.blink::CompositorFilterOperations"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %3 = tail call zeroext i1 @_ZNK2cc16FilterOperations7IsEmptyEv(%"class.cc::FilterOperations"* %2) #10
  ret i1 %3
}

declare zeroext i1 @_ZNK2cc16FilterOperations7IsEmptyEv(%"class.cc::FilterOperations"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK5blink26CompositorFilterOperations7MapRectERKNS_9FloatRectE(%"class.blink::CompositorFilterOperations"*, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #5 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %"class.gfx::Rect"*
  %5 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %6 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = bitcast %"class.blink::FloatRect"* %1 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = extractelement <2 x float> %8, i32 0
  %10 = tail call float @llvm.floor.f32(float %9) #10
  %11 = fpext float %10 to double
  %12 = fcmp ult double %11, 0x41DFFFFFFFC00000
  br i1 %12, label %13, label %18

13:                                               ; preds = %2
  %14 = fcmp ugt float %10, 0xC1E0000000000000
  br i1 %14, label %15, label %18

15:                                               ; preds = %13
  %16 = fptosi float %10 to i32
  %17 = zext i32 %16 to i64
  br label %18

18:                                               ; preds = %15, %13, %2
  %19 = phi i64 [ %17, %15 ], [ 2147483647, %2 ], [ 2147483648, %13 ]
  %20 = extractelement <2 x float> %8, i32 1
  %21 = tail call float @llvm.floor.f32(float %20) #10
  %22 = fpext float %21 to double
  %23 = fcmp ult double %22, 0x41DFFFFFFFC00000
  br i1 %23, label %24, label %30

24:                                               ; preds = %18
  %25 = fcmp ugt float %21, 0xC1E0000000000000
  br i1 %25, label %26, label %30

26:                                               ; preds = %24
  %27 = fptosi float %21 to i32
  %28 = zext i32 %27 to i64
  %29 = shl nuw i64 %28, 32
  br label %30

30:                                               ; preds = %26, %24, %18
  %31 = phi i64 [ %29, %26 ], [ 9223372032559808512, %18 ], [ -9223372036854775808, %24 ]
  %32 = trunc i64 %19 to i32
  %33 = lshr exact i64 %31, 32
  %34 = trunc i64 %33 to i32
  %35 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %36 = load float, float* %35, align 4
  %37 = fadd float %9, %36
  %38 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %39 = load float, float* %38, align 4
  %40 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %41 = load float, float* %40, align 4
  %42 = fadd float %39, %41
  %43 = tail call float @llvm.ceil.f32(float %37) #10
  %44 = fpext float %43 to double
  %45 = fcmp ult double %44, 0x41DFFFFFFFC00000
  br i1 %45, label %46, label %50

46:                                               ; preds = %30
  %47 = fcmp ugt float %43, 0xC1E0000000000000
  br i1 %47, label %48, label %50

48:                                               ; preds = %46
  %49 = fptosi float %43 to i32
  br label %50

50:                                               ; preds = %48, %46, %30
  %51 = phi i32 [ %49, %48 ], [ 2147483647, %30 ], [ -2147483648, %46 ]
  %52 = tail call float @llvm.ceil.f32(float %42) #10
  %53 = fpext float %52 to double
  %54 = fcmp ult double %53, 0x41DFFFFFFFC00000
  br i1 %54, label %55, label %59

55:                                               ; preds = %50
  %56 = fcmp ugt float %52, 0xC1E0000000000000
  br i1 %56, label %57, label %59

57:                                               ; preds = %55
  %58 = fptosi float %52 to i32
  br label %59

59:                                               ; preds = %50, %55, %57
  %60 = phi i32 [ %58, %57 ], [ 2147483647, %50 ], [ -2147483648, %55 ]
  %61 = icmp sgt i32 %32, -1
  %62 = select i1 %61, i32 -2147483648, i32 2147483647
  %63 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %51, i32 %32) #10
  %64 = extractvalue { i32, i1 } %63, 1
  %65 = extractvalue { i32, i1 } %63, 0
  %66 = select i1 %64, i32 %62, i32 %65, !prof !5
  %67 = icmp sgt i32 %34, -1
  %68 = select i1 %67, i32 -2147483648, i32 2147483647
  %69 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %60, i32 %34) #10
  %70 = extractvalue { i32, i1 } %69, 1
  %71 = extractvalue { i32, i1 } %69, 0
  %72 = select i1 %70, i32 %68, i32 %71, !prof !5
  %73 = icmp sgt i32 %32, 0
  %74 = icmp sgt i32 %66, 0
  %75 = and i1 %73, %74
  %76 = sub nuw nsw i32 2147483647, %32
  %77 = icmp ult i32 %76, %66
  %78 = and i1 %77, %75
  %79 = select i1 %78, i32 %76, i32 %66
  %80 = icmp sgt i32 %34, 0
  %81 = icmp sgt i32 %72, 0
  %82 = and i1 %80, %81
  %83 = sub nuw nsw i32 2147483647, %34
  %84 = icmp ult i32 %83, %72
  %85 = and i1 %84, %82
  %86 = select i1 %85, i32 %83, i32 %72
  %87 = icmp sgt i32 %79, 0
  %88 = select i1 %87, i32 %79, i32 0
  %89 = icmp sgt i32 %86, 0
  %90 = select i1 %89, i32 %86, i32 0
  %91 = or i64 %31, %19
  %92 = zext i32 %90 to i64
  %93 = shl nuw nsw i64 %92, 32
  %94 = zext i32 %88 to i64
  %95 = or i64 %93, %94
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  store i64 %91, i64* %96, align 8
  %97 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  store i64 %95, i64* %97, align 8
  %98 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix1IEv() #10
  %99 = call { i64, i64 } @_ZNK2cc16FilterOperations7MapRectERKN3gfx4RectERK8SkMatrix(%"class.cc::FilterOperations"* %5, %"class.gfx::Rect"* nonnull dereferenceable(16) %4, %class.SkMatrix* dereferenceable(40) %98) #10
  %100 = extractvalue { i64, i64 } %99, 0
  %101 = trunc i64 %100 to i32
  %102 = lshr i64 %100, 32
  %103 = trunc i64 %102 to i32
  %104 = extractvalue { i64, i64 } %99, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  %105 = sitofp i32 %101 to float
  %106 = sitofp i32 %103 to float
  %107 = trunc i64 %104 to i32
  %108 = sitofp i32 %107 to float
  %109 = lshr i64 %104, 32
  %110 = trunc i64 %109 to i32
  %111 = sitofp i32 %110 to float
  %112 = insertelement <2 x float> undef, float %105, i32 0
  %113 = insertelement <2 x float> %112, float %106, i32 1
  %114 = insertelement <2 x float> undef, float %108, i32 0
  %115 = insertelement <2 x float> %114, float %111, i32 1
  %116 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %113, 0
  %117 = insertvalue { <2 x float>, <2 x float> } %116, <2 x float> %115, 1
  ret { <2 x float>, <2 x float> } %117
}

declare { i64, i64 } @_ZNK2cc16FilterOperations7MapRectERKN3gfx4RectERK8SkMatrix(%"class.cc::FilterOperations"*, %"class.gfx::Rect"* dereferenceable(16), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #2

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix1IEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink26CompositorFilterOperations24HasFilterThatMovesPixelsEv(%"class.blink::CompositorFilterOperations"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %3 = tail call zeroext i1 @_ZNK2cc16FilterOperations24HasFilterThatMovesPixelsEv(%"class.cc::FilterOperations"* %2) #10
  ret i1 %3
}

declare zeroext i1 @_ZNK2cc16FilterOperations24HasFilterThatMovesPixelsEv(%"class.cc::FilterOperations"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink26CompositorFilterOperations18HasReferenceFilterEv(%"class.blink::CompositorFilterOperations"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %3 = tail call zeroext i1 @_ZNK2cc16FilterOperations18HasReferenceFilterEv(%"class.cc::FilterOperations"* %2) #10
  ret i1 %3
}

declare zeroext i1 @_ZNK2cc16FilterOperations18HasReferenceFilterEv(%"class.cc::FilterOperations"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink26CompositorFilterOperationseqERKS0_(%"class.blink::CompositorFilterOperations"*, %"class.blink::CompositorFilterOperations"* dereferenceable(40)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %1, i64 0, i32 1
  %5 = bitcast %"class.blink::FloatRect"* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = bitcast %"class.blink::FloatRect"* %4 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = extractelement <2 x float> %6, i32 0
  %10 = extractelement <2 x float> %8, i32 0
  %11 = fcmp oeq float %9, %10
  br i1 %11, label %12, label %34

12:                                               ; preds = %2
  %13 = extractelement <2 x float> %6, i32 1
  %14 = extractelement <2 x float> %8, i32 1
  %15 = fcmp oeq float %13, %14
  br i1 %15, label %16, label %34

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 1, i32 1
  %18 = bitcast %"class.blink::FloatSize"* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %1, i64 0, i32 1, i32 1
  %21 = bitcast %"class.blink::FloatSize"* %20 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = extractelement <2 x float> %19, i32 0
  %24 = extractelement <2 x float> %22, i32 0
  %25 = fcmp oeq float %23, %24
  br i1 %25, label %26, label %34

26:                                               ; preds = %16
  %27 = extractelement <2 x float> %19, i32 1
  %28 = extractelement <2 x float> %22, i32 1
  %29 = fcmp oeq float %27, %28
  br i1 %29, label %30, label %34

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  %32 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %1, i64 0, i32 0
  %33 = tail call zeroext i1 @_ZNK2cc16FilterOperationseqERKS0_(%"class.cc::FilterOperations"* %31, %"class.cc::FilterOperations"* dereferenceable(24) %32) #10
  br label %34

34:                                               ; preds = %2, %16, %12, %30, %26
  %35 = phi i1 [ false, %26 ], [ %33, %30 ], [ false, %12 ], [ false, %16 ], [ false, %2 ]
  ret i1 %35
}

declare zeroext i1 @_ZNK2cc16FilterOperationseqERKS0_(%"class.cc::FilterOperations"*, %"class.cc::FilterOperations"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink26CompositorFilterOperations8ToStringEv(%"class.blink::CompositorFilterOperations"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.WTF::StringAppend", align 8
  %3 = alloca %"class.WTF::StringAppend.15", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = bitcast %"class.WTF::StringAppend"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #10
  %7 = bitcast %"class.WTF::StringAppend.15"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #10
  %8 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #10
  %9 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 0
  call void @_ZNK2cc16FilterOperations8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %5, %"class.cc::FilterOperations"* %10) #10
  %11 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %1, %15
  %20 = phi i8* [ %17, %15 ], [ %9, %1 ]
  %21 = call i64 @strlen(i8* nonnull %20) #11
  br label %22

22:                                               ; preds = %15, %19
  %23 = phi i8* [ %20, %19 ], [ null, %15 ]
  %24 = phi i64 [ %21, %19 ], [ 0, %15 ]
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %4, i8* %23, i64 %24) #10
  %25 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %72, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  br i1 %32, label %35, label %45

35:                                               ; preds = %28
  %36 = zext i32 %34 to i33
  %37 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %36, i33 1) #10
  %38 = extractvalue { i33, i1 } %37, 1
  %39 = extractvalue { i33, i1 } %37, 0
  %40 = icmp slt i33 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %42, label %43, !prof !5

42:                                               ; preds = %35
  call void @llvm.trap() #10
  unreachable

43:                                               ; preds = %35
  %44 = trunc i33 %39 to i32
  store i32 %44, i32* %33, align 4
  br label %45

45:                                               ; preds = %28, %43
  %46 = phi i32 [ %44, %43 ], [ %34, %28 ]
  %47 = load atomic i32, i32* %29 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  br i1 %49, label %51, label %61

51:                                               ; preds = %45
  %52 = zext i32 %46 to i33
  %53 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #10
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !5

58:                                               ; preds = %51
  call void @llvm.trap() #10
  unreachable

59:                                               ; preds = %51
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %45
  %62 = phi i32 [ %60, %59 ], [ %46, %45 ]
  %63 = load atomic i32, i32* %29 monotonic, align 4
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %61
  %67 = add i32 %62, -1
  store i32 %67, i32* %50, align 4
  br label %68

68:                                               ; preds = %66, %61
  %69 = phi i32 [ %67, %66 ], [ %62, %61 ]
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %68
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #10
  br label %72

72:                                               ; preds = %22, %68, %71
  %73 = getelementptr inbounds %"class.WTF::StringAppend.15", %"class.WTF::StringAppend.15"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %26, %"class.WTF::StringImpl"** %73, align 8
  %74 = getelementptr inbounds %"class.WTF::StringAppend.15", %"class.WTF::StringAppend.15"* %3, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %74, align 8
  %75 = getelementptr inbounds %"class.blink::CompositorFilterOperations", %"class.blink::CompositorFilterOperations"* %0, i64 0, i32 1
  %76 = call %"class.WTF::StringImpl"* @_ZNK5blink9FloatRect8ToStringEv(%"class.blink::FloatRect"* %75) #10
  call void @_ZN3WTFplINS_6StringEPKcS1_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend"* nonnull sret %2, %"class.WTF::StringAppend.15"* nonnull dereferenceable(16) %3, %"class.WTF::StringImpl"* %76)
  %77 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_EcvS1_Ev(%"class.WTF::StringAppend"* nonnull %2)
  %78 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %2, i64 0, i32 1, i32 0, i32 0
  %79 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %78, align 8
  %80 = icmp eq %"class.WTF::StringImpl"* %79, null
  br i1 %80, label %94, label %81

81:                                               ; preds = %72
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 0
  %87 = load i32, i32* %86, align 4
  br i1 %85, label %88, label %90

88:                                               ; preds = %81
  %89 = add i32 %87, -1
  store i32 %89, i32* %86, align 4
  br label %90

90:                                               ; preds = %88, %81
  %91 = phi i32 [ %89, %88 ], [ %87, %81 ]
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %94

93:                                               ; preds = %90
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %79) #10
  br label %94

94:                                               ; preds = %93, %90, %72
  %95 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %96 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %95, align 8
  %97 = icmp eq %"class.WTF::StringImpl"* %96, null
  br i1 %97, label %111, label %98

98:                                               ; preds = %94
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %100 = load atomic i32, i32* %99 monotonic, align 4
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 0
  %104 = load i32, i32* %103, align 4
  br i1 %102, label %105, label %107

105:                                              ; preds = %98
  %106 = add i32 %104, -1
  store i32 %106, i32* %103, align 4
  br label %107

107:                                              ; preds = %105, %98
  %108 = phi i32 [ %106, %105 ], [ %104, %98 ]
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %111

110:                                              ; preds = %107
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %96) #10
  br label %111

111:                                              ; preds = %94, %107, %110
  %112 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %73, align 8
  %113 = icmp eq %"class.WTF::StringImpl"* %112, null
  br i1 %113, label %127, label %114

114:                                              ; preds = %111
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %112, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %116 = load atomic i32, i32* %115 monotonic, align 4
  %117 = and i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %112, i64 0, i32 0
  %120 = load i32, i32* %119, align 4
  br i1 %118, label %121, label %123

121:                                              ; preds = %114
  %122 = add i32 %120, -1
  store i32 %122, i32* %119, align 4
  br label %123

123:                                              ; preds = %121, %114
  %124 = phi i32 [ %122, %121 ], [ %120, %114 ]
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %127

126:                                              ; preds = %123
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %112) #10
  br label %127

127:                                              ; preds = %111, %123, %126
  %128 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %129 = icmp eq %"class.WTF::StringImpl"* %128, null
  br i1 %129, label %143, label %130

130:                                              ; preds = %127
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %128, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %132 = load atomic i32, i32* %131 monotonic, align 4
  %133 = and i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %128, i64 0, i32 0
  %136 = load i32, i32* %135, align 4
  br i1 %134, label %137, label %139

137:                                              ; preds = %130
  %138 = add i32 %136, -1
  store i32 %138, i32* %135, align 4
  br label %139

139:                                              ; preds = %137, %130
  %140 = phi i32 [ %138, %137 ], [ %136, %130 ]
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %143

142:                                              ; preds = %139
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %128) #10
  br label %143

143:                                              ; preds = %127, %139, %142
  %144 = load i8, i8* %12, align 1
  %145 = icmp slt i8 %144, 0
  br i1 %145, label %146, label %149

146:                                              ; preds = %143
  %147 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = load i8*, i8** %147, align 8
  call void @_ZdlPv(i8* %148) #12
  br label %149

149:                                              ; preds = %143, %146
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #10
  ret %"class.WTF::StringImpl"* %77
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_6StringEPKcS1_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend"* noalias sret, %"class.WTF::StringAppend.15"* dereferenceable(16), %"class.WTF::StringImpl"*) local_unnamed_addr #1 comdat {
  %4 = getelementptr inbounds %"class.WTF::StringAppend.15", %"class.WTF::StringAppend.15"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #10
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !5

21:                                               ; preds = %12
  tail call void @llvm.trap() #10
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %3, %7, %22
  %25 = getelementptr inbounds %"class.WTF::StringAppend.15", %"class.WTF::StringAppend.15"* %1, i64 0, i32 1
  %26 = bitcast i8** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %28, label %46, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %48

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i33
  %38 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %37, i33 1) #10
  %39 = extractvalue { i33, i1 } %38, 1
  %40 = extractvalue { i33, i1 } %38, 0
  %41 = icmp slt i33 %40, 0
  %42 = or i1 %39, %41
  br i1 %42, label %43, label %44, !prof !5

43:                                               ; preds = %34
  tail call void @llvm.trap() #10
  unreachable

44:                                               ; preds = %34
  %45 = trunc i33 %40 to i32
  store i32 %45, i32* %35, align 4
  br label %48

46:                                               ; preds = %24
  %47 = inttoptr i64 %27 to i8*
  tail call void @_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_(%"class.WTF::StringAppend"* %0, %"class.WTF::StringImpl"* %5, i8* %47, %"class.WTF::StringImpl"* null)
  br label %61

48:                                               ; preds = %29, %44
  %49 = inttoptr i64 %27 to i8*
  tail call void @_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_(%"class.WTF::StringAppend"* %0, %"class.WTF::StringImpl"* %5, i8* %49, %"class.WTF::StringImpl"* nonnull %2)
  %50 = load atomic i32, i32* %30 monotonic, align 4
  %51 = and i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  br i1 %52, label %55, label %57

55:                                               ; preds = %48
  %56 = add i32 %54, -1
  store i32 %56, i32* %53, align 4
  br label %57

57:                                               ; preds = %55, %48
  %58 = phi i32 [ %56, %55 ], [ %54, %48 ]
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %57
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #10
  br label %61

61:                                               ; preds = %46, %57, %60
  ret void
}

declare void @_ZNK2cc16FilterOperations8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.cc::FilterOperations"*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK5blink9FloatRect8ToStringEv(%"class.blink::FloatRect"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_EcvS1_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.24", align 8
  %3 = alloca i8*, align 8
  %4 = alloca i16*, align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  %11 = select i1 %10, %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"* %9
  %12 = bitcast %"class.WTF::StringTypeAdapter.24"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #10
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false) #10
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.24"* nonnull %2, i8* %14) #10
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #10
  br i1 %18, label %62, label %19

19:                                               ; preds = %1
  %20 = icmp eq %"class.WTF::StringImpl"* %6, null
  %21 = select i1 %20, %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"* %6
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %62, label %26

26:                                               ; preds = %19
  %27 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %28 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %29 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %28, i8** nonnull dereferenceable(8) %3) #10
  %30 = load i8*, i8** %3, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPh(%"class.WTF::StringAppend"* %0, i8* %30)
  %31 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %31, label %98, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  br i1 %36, label %39, label %49

39:                                               ; preds = %32
  %40 = zext i32 %38 to i33
  %41 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #10
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !5

46:                                               ; preds = %39
  call void @llvm.trap() #10
  unreachable

47:                                               ; preds = %39
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %37, align 4
  br label %49

49:                                               ; preds = %32, %47
  %50 = phi i32 [ %48, %47 ], [ %38, %32 ]
  %51 = ptrtoint %"class.WTF::StringImpl"* %29 to i64
  %52 = load atomic i32, i32* %33 monotonic, align 4
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %49
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %57 = add i32 %50, -1
  store i32 %57, i32* %56, align 4
  br label %58

58:                                               ; preds = %55, %49
  %59 = phi i32 [ %57, %55 ], [ %50, %49 ]
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %98

61:                                               ; preds = %58
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %29) #10
  br label %98

62:                                               ; preds = %19, %1
  %63 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %63) #10
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %4, align 8
  %64 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %65 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %64, i16** nonnull dereferenceable(8) %4) #10
  %66 = load i16*, i16** %4, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPDs(%"class.WTF::StringAppend"* %0, i16* %66)
  %67 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %67, label %98, label %68

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  br i1 %72, label %75, label %85

75:                                               ; preds = %68
  %76 = zext i32 %74 to i33
  %77 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %76, i33 1) #10
  %78 = extractvalue { i33, i1 } %77, 1
  %79 = extractvalue { i33, i1 } %77, 0
  %80 = icmp slt i33 %79, 0
  %81 = or i1 %78, %80
  br i1 %81, label %82, label %83, !prof !5

82:                                               ; preds = %75
  call void @llvm.trap() #10
  unreachable

83:                                               ; preds = %75
  %84 = trunc i33 %79 to i32
  store i32 %84, i32* %73, align 4
  br label %85

85:                                               ; preds = %68, %83
  %86 = phi i32 [ %84, %83 ], [ %74, %68 ]
  %87 = ptrtoint %"class.WTF::StringImpl"* %65 to i64
  %88 = load atomic i32, i32* %69 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %94

91:                                               ; preds = %85
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %93 = add i32 %86, -1
  store i32 %93, i32* %92, align 4
  br label %94

94:                                               ; preds = %91, %85
  %95 = phi i32 [ %93, %91 ], [ %86, %85 ]
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %94
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %65) #10
  br label %98

98:                                               ; preds = %97, %94, %62, %61, %58, %26
  %99 = phi i8* [ %27, %26 ], [ %27, %58 ], [ %27, %61 ], [ %63, %62 ], [ %63, %94 ], [ %63, %97 ]
  %100 = phi i64 [ 0, %26 ], [ %51, %58 ], [ %51, %61 ], [ 0, %62 ], [ %87, %94 ], [ %87, %97 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %99) #10
  %101 = inttoptr i64 %100 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %101
}

declare void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEf(%"class.cc::FilterOperation"*, i32, float) unnamed_addr #2

declare void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeERA20_Kf(%"class.cc::FilterOperation"*, i32, [20 x float]* dereferenceable(80)) unnamed_addr #2

declare void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEf10SkTileMode(%"class.cc::FilterOperation"*, i32, float, i32) unnamed_addr #2

declare void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeERKN3gfx5PointEfj(%"class.cc::FilterOperation"*, i32, %"class.gfx::Point"* dereferenceable(8), float, i32) unnamed_addr #2

declare void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeEfi(%"class.cc::FilterOperation"*, i32, float, i32) unnamed_addr #2

declare void @_ZN2cc15FilterOperationC1ENS0_10FilterTypeE5sk_spINS_11PaintFilterEE(%"class.cc::FilterOperation"*, i32, %class.sk_sp*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #6

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #7

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) float* @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load float*, float** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds float, float* %24, i64 %25
  ret float* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_(%"class.WTF::StringAppend"*, %"class.WTF::StringImpl"*, i8*, %"class.WTF::StringImpl"*) unnamed_addr #1 comdat align 2 {
  %5 = ptrtoint i8* %2 to i64
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1, %"class.WTF::StringImpl"** %6, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #10
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !5

22:                                               ; preds = %13
  tail call void @llvm.trap() #10
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %4, %8, %23
  %26 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  store i64 %5, i64* %27, align 8
  %28 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %3, %"class.WTF::StringImpl"** %28, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %29, label %59, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %47

37:                                               ; preds = %30
  %38 = zext i32 %36 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #10
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !5

44:                                               ; preds = %37
  tail call void @llvm.trap() #10
  unreachable

45:                                               ; preds = %37
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %35, align 4
  br label %47

47:                                               ; preds = %30, %45
  %48 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %49 = load atomic i32, i32* %31 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %54 = add i32 %48, -1
  store i32 %54, i32* %53, align 4
  br label %55

55:                                               ; preds = %52, %47
  %56 = phi i32 [ %54, %52 ], [ %48, %47 ]
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #10
  br label %59

59:                                               ; preds = %25, %55, %58
  br i1 %7, label %73, label %60

60:                                               ; preds = %59
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  br i1 %64, label %67, label %69

67:                                               ; preds = %60
  %68 = add i32 %66, -1
  store i32 %68, i32* %65, align 4
  br label %69

69:                                               ; preds = %67, %60
  %70 = phi i32 [ %68, %67 ], [ %66, %60 ]
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %69
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #10
  br label %73

73:                                               ; preds = %59, %69, %72
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.15"* %8) #10
  %18 = add i32 %17, %16
  %19 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #10
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.15"* %8) #10
  %22 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp ult i32 %18, %21
  br i1 %23, label %25, label %24

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %20, align 8
  br label %34

25:                                               ; preds = %15
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #10
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0), i8* %26, i8* %27) #10
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %20, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.4, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #10
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #10
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #10
  %35 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #10
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %18, %16
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %36, align 8
  br label %49

40:                                               ; preds = %34
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #10
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0), i8* %41, i8* %42) #10
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %36, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.4, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #10
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #10
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #10
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPh(%"class.WTF::StringAppend"*, i8*) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.22", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.24", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.22", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.22"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.22", %"class.WTF::StringTypeAdapter.22"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::StringTypeAdapter.22", %"class.WTF::StringTypeAdapter.22"* %5, i64 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.22"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %22

16:                                               ; preds = %2
  %17 = ptrtoint %"class.WTF::StringImpl"* %12 to i64
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  %21 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  br label %22

22:                                               ; preds = %14, %16
  %23 = phi i8* [ null, %14 ], [ %21, %16 ]
  %24 = phi i64 [ %15, %14 ], [ %17, %16 ]
  %25 = phi i32 [ 0, %14 ], [ %19, %16 ]
  %26 = bitcast %"class.WTF::StringTypeAdapter.22"* %5 to i64*
  store i64 %24, i64* %26, align 8
  store i8* %23, i8** %8, align 8
  store i32 %25, i32* %9, align 8
  %27 = bitcast %"class.WTF::StringTypeAdapter.22"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #10
  %28 = getelementptr inbounds %"class.WTF::StringTypeAdapter.22", %"class.WTF::StringTypeAdapter.22"* %3, i64 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.WTF::StringTypeAdapter.22", %"class.WTF::StringTypeAdapter.22"* %3, i64 0, i32 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 24, i1 false) #10
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %22
  %34 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %41

35:                                               ; preds = %22
  %36 = ptrtoint %"class.WTF::StringImpl"* %31 to i64
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 1
  %40 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  br label %41

41:                                               ; preds = %33, %35
  %42 = phi i8* [ null, %33 ], [ %40, %35 ]
  %43 = phi i64 [ %34, %33 ], [ %36, %35 ]
  %44 = phi i32 [ 0, %33 ], [ %38, %35 ]
  %45 = bitcast %"class.WTF::StringTypeAdapter.22"* %3 to i64*
  store i64 %43, i64* %45, align 8
  store i8* %42, i8** %28, align 8
  store i32 %44, i32* %29, align 8
  %46 = bitcast %"class.WTF::StringTypeAdapter.24"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #10
  %47 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 16, i1 false) #10
  %48 = load i8*, i8** %47, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.24"* nonnull %4, i8* %48) #10
  %49 = getelementptr inbounds %"class.WTF::StringTypeAdapter.22", %"class.WTF::StringTypeAdapter.22"* %3, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.23"* nonnull %49, i8* %1) #10
  %50 = load i32, i32* %29, align 8
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.24"* nonnull %4, i8* %52) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #10
  %53 = getelementptr inbounds %"class.WTF::StringTypeAdapter.22", %"class.WTF::StringTypeAdapter.22"* %5, i64 0, i32 0
  %54 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.15"* %6) #10
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.23"* nonnull %53, i8* %56) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #10
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPDs(%"class.WTF::StringAppend"*, i16*) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.22", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.24", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.22", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.22"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.22", %"class.WTF::StringTypeAdapter.22"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::StringTypeAdapter.22", %"class.WTF::StringTypeAdapter.22"* %5, i64 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.22"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %22

16:                                               ; preds = %2
  %17 = ptrtoint %"class.WTF::StringImpl"* %12 to i64
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  %21 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  br label %22

22:                                               ; preds = %14, %16
  %23 = phi i8* [ null, %14 ], [ %21, %16 ]
  %24 = phi i64 [ %15, %14 ], [ %17, %16 ]
  %25 = phi i32 [ 0, %14 ], [ %19, %16 ]
  %26 = bitcast %"class.WTF::StringTypeAdapter.22"* %5 to i64*
  store i64 %24, i64* %26, align 8
  store i8* %23, i8** %8, align 8
  store i32 %25, i32* %9, align 8
  %27 = bitcast %"class.WTF::StringTypeAdapter.22"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #10
  %28 = getelementptr inbounds %"class.WTF::StringTypeAdapter.22", %"class.WTF::StringTypeAdapter.22"* %3, i64 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.WTF::StringTypeAdapter.22", %"class.WTF::StringTypeAdapter.22"* %3, i64 0, i32 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 24, i1 false) #10
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %22
  %34 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %41

35:                                               ; preds = %22
  %36 = ptrtoint %"class.WTF::StringImpl"* %31 to i64
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 1
  %40 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  br label %41

41:                                               ; preds = %33, %35
  %42 = phi i8* [ null, %33 ], [ %40, %35 ]
  %43 = phi i64 [ %34, %33 ], [ %36, %35 ]
  %44 = phi i32 [ 0, %33 ], [ %38, %35 ]
  %45 = bitcast %"class.WTF::StringTypeAdapter.22"* %3 to i64*
  store i64 %43, i64* %45, align 8
  store i8* %42, i8** %28, align 8
  store i32 %44, i32* %29, align 8
  %46 = bitcast %"class.WTF::StringTypeAdapter.24"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #10
  %47 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 16, i1 false) #10
  %48 = load i8*, i8** %47, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.24"* nonnull %4, i8* %48) #10
  %49 = getelementptr inbounds %"class.WTF::StringTypeAdapter.22", %"class.WTF::StringTypeAdapter.22"* %3, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.23"* nonnull %49, i16* %1) #10
  %50 = load i32, i32* %29, align 8
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds i16, i16* %1, i64 %51
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.24"* nonnull %4, i16* %52) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #10
  %53 = getelementptr inbounds %"class.WTF::StringTypeAdapter.22", %"class.WTF::StringTypeAdapter.22"* %5, i64 0, i32 0
  %54 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.15"* %6) #10
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i16, i16* %1, i64 %55
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.23"* nonnull %53, i16* %56) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #10
  ret void
}

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.24"*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.15"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.24", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.15", %"class.WTF::StringAppend.15"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = bitcast %"class.WTF::StringTypeAdapter.24"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #10
  %18 = getelementptr inbounds %"class.WTF::StringTypeAdapter.24", %"class.WTF::StringTypeAdapter.24"* %4, i64 0, i32 1
  %19 = getelementptr inbounds %"class.WTF::StringAppend.15", %"class.WTF::StringAppend.15"* %0, i64 0, i32 1
  %20 = bitcast %"class.WTF::StringTypeAdapter.24"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 16, i1 false)
  %21 = load i8*, i8** %19, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.24"* nonnull %4, i8* %21) #10
  %22 = load i32, i32* %18, align 8
  %23 = add i32 %22, %16
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #10
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %16
  br i1 %27, label %29, label %28

28:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %15
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #10
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0), i8* %30, i8* %31) #10
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.4, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #10
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #10
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #10
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #10
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = load i32, i32* %18, align 8
  %42 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42)
  %43 = icmp ult i32 %23, %41
  br i1 %43, label %45, label %44

44:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* null, i8** %40, align 8
  br label %54

45:                                               ; preds = %38
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #10
  %47 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %41) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0), i8* %46, i8* %47) #10
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* %49, i8** %40, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.4, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #10
  %53 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #10
  br label %54

54:                                               ; preds = %44, %45, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #10
  ret i32 %23
}

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.23"*, i8*) local_unnamed_addr #2

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.24"*, i8*) local_unnamed_addr #2

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.23"*, i16*) local_unnamed_addr #2

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.24"*, i16*) local_unnamed_addr #2

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind }
attributes #11 = { nounwind readonly }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN2cc15FilterOperation21CreateReferenceFilterE5sk_spINS_11PaintFilterEE: argument 0"}
!4 = distinct !{!4, !"_ZN2cc15FilterOperation21CreateReferenceFilterE5sk_spINS_11PaintFilterEE"}
!5 = !{!"branch_weights", i32 1, i32 2000}
