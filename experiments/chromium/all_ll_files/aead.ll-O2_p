; ModuleID = '../../crypto/aead.cc'
source_filename = "../../crypto/aead.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.crypto::Aead" = type { %"class.absl::optional", %struct.evp_aead_st* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::span" }
%"class.base::span" = type { %"struct.base::internal::ExtentStorage", i8* }
%"struct.base::internal::ExtentStorage" = type { i64 }
%struct.evp_aead_st = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.0 }
%union.anon.0 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i8* }
%"class.bssl::internal::StackAllocated" = type { %struct.evp_aead_ctx_st }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%struct.engine_st = type opaque
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.absl::optional.7" = type { %"class.absl::optional_internal::optional_data.8" }
%"class.absl::optional_internal::optional_data.8" = type { %"class.absl::optional_internal::optional_data_base.9" }
%"class.absl::optional_internal::optional_data_base.9" = type { %"class.absl::optional_internal::optional_data_dtor_base.10" }
%"class.absl::optional_internal::optional_data_dtor_base.10" = type { i8, %union.anon.11 }
%union.anon.11 = type { %"class.std::__1::vector" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@.str = private unnamed_addr constant [21 x i8] c"../../crypto/aead.cc\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"max_output_length >= plaintext.size()\00", align 1
@.str.2 = private unnamed_addr constant [87 x i8] c"Seal(plaintext, nonce, additional_data, ret.data(), &output_length, max_output_length)\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"max_output_length + 1 >= plaintext.size()\00", align 1
@.str.4 = private unnamed_addr constant [42 x i8] c"max_output_length + 1 > max_output_length\00", align 1

@_ZN6crypto4AeadC1ENS0_13AeadAlgorithmE = hidden unnamed_addr alias void (%"class.crypto::Aead"*, i32), void (%"class.crypto::Aead"*, i32)* @_ZN6crypto4AeadC2ENS0_13AeadAlgorithmE
@_ZN6crypto4AeadD1Ev = hidden unnamed_addr alias void (%"class.crypto::Aead"*), void (%"class.crypto::Aead"*)* @_ZN6crypto4AeadD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6crypto4AeadC2ENS0_13AeadAlgorithmE(%"class.crypto::Aead"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %3, align 8
  tail call void @_ZN6crypto17EnsureOpenSSLInitEv() #10
  switch i32 %1, label %15 [
    i32 0, label %4
    i32 1, label %6
    i32 2, label %8
    i32 3, label %10
  ]

4:                                                ; preds = %2
  %5 = tail call %struct.evp_aead_st* @EVP_aead_aes_128_ctr_hmac_sha256() #10
  br label %12

6:                                                ; preds = %2
  %7 = tail call %struct.evp_aead_st* @EVP_aead_aes_256_gcm() #10
  br label %12

8:                                                ; preds = %2
  %9 = tail call %struct.evp_aead_st* @EVP_aead_aes_256_gcm_siv() #10
  br label %12

10:                                               ; preds = %2
  %11 = tail call %struct.evp_aead_st* @EVP_aead_chacha20_poly1305() #10
  br label %12

12:                                               ; preds = %4, %6, %8, %10
  %13 = phi %struct.evp_aead_st* [ %11, %10 ], [ %9, %8 ], [ %7, %6 ], [ %5, %4 ]
  %14 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 1
  store %struct.evp_aead_st* %13, %struct.evp_aead_st** %14, align 8
  br label %15

15:                                               ; preds = %12, %2
  ret void
}

declare void @_ZN6crypto17EnsureOpenSSLInitEv() local_unnamed_addr #1

declare %struct.evp_aead_st* @EVP_aead_aes_128_ctr_hmac_sha256() local_unnamed_addr #1

declare %struct.evp_aead_st* @EVP_aead_aes_256_gcm() local_unnamed_addr #1

declare %struct.evp_aead_st* @EVP_aead_aes_256_gcm_siv() local_unnamed_addr #1

declare %struct.evp_aead_st* @EVP_aead_chacha20_poly1305() local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6crypto4AeadD2Ev(%"class.crypto::Aead"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6crypto4Aead4InitEN4base4spanIKhLm18446744073709551615EEE(%"class.crypto::Aead"* nocapture, i64, i8*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i64 %1, i64* %7, align 8
  %8 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  store i8* %2, i8** %8, align 8
  br i1 %6, label %9, label %10

9:                                                ; preds = %3
  store i8 1, i8* %4, align 8
  br label %10

10:                                               ; preds = %3, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6crypto4Aead4InitEPKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.crypto::Aead"* nocapture, %"class.std::__1::basic_string"*) local_unnamed_addr #3 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %10 = select i1 %6, i8* %8, i8* %9
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = zext i8 %5 to i64
  %14 = select i1 %6, i64 %12, i64 %13
  %15 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  %18 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i64 %14, i64* %18, align 8
  %19 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  store i8* %10, i8** %19, align 8
  br i1 %17, label %20, label %21

20:                                               ; preds = %2
  store i8 1, i8* %15, align 8
  br label %21

21:                                               ; preds = %2, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6crypto4Aead4SealEN4base4spanIKhLm18446744073709551615EEES4_S4_(%"class.std::__1::vector"* noalias sret, %"class.crypto::Aead"* nocapture readonly, i64, i8*, i64, i8*, %"class.base::span"* nocapture readonly byval(%"class.base::span") align 8) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.bssl::internal::StackAllocated", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = alloca i64, align 8
  %11 = alloca %"class.logging::CheckError", align 8
  %12 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %1, i64 0, i32 1
  %13 = load %struct.evp_aead_st*, %struct.evp_aead_st** %12, align 8
  %14 = tail call i64 @EVP_AEAD_max_overhead(%struct.evp_aead_st* %13) #10
  %15 = add i64 %14, %2
  %16 = icmp ult i64 %15, %2
  br i1 %16, label %17, label %20

17:                                               ; preds = %7
  %18 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i32 58, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #10
  %19 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  br label %20

20:                                               ; preds = %7, %17
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %22 = bitcast %"class.std::__1::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #10
  %23 = bitcast i8** %21 to i64*
  %24 = bitcast %"class.std::__1::vector"* %0 to i64*
  %25 = icmp eq i64 %15, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %0, i64 %15) #10
  %28 = load i8*, i8** %27, align 8
  br label %29

29:                                               ; preds = %20, %26
  %30 = phi i8* [ %28, %26 ], [ null, %20 ]
  %31 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #10
  store i64 -6148914691236517206, i64* %10, align 8
  %32 = getelementptr inbounds %"class.base::span", %"class.base::span"* %6, i64 0, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %"class.base::span", %"class.base::span"* %6, i64 0, i32 1
  %35 = load i8*, i8** %34, align 8
  %36 = bitcast %"class.bssl::internal::StackAllocated"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 600, i8* nonnull %36) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 -86, i64 600, i1 false) #10
  %37 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %8, i64 0, i32 0
  call void @EVP_AEAD_CTX_zero(%struct.evp_aead_ctx_st* nonnull %37) #10
  %38 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i8, i8* %38, align 8, !range !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %42, !prof !3

41:                                               ; preds = %29
  call void @llvm.trap() #10
  unreachable

42:                                               ; preds = %29
  %43 = load %struct.evp_aead_st*, %struct.evp_aead_st** %12, align 8
  %44 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = call i32 @EVP_AEAD_CTX_init(%struct.evp_aead_ctx_st* nonnull %37, %struct.evp_aead_st* %43, i8* %45, i64 %47, i64 0, %struct.engine_st* null) #10
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %42
  call void @EVP_AEAD_CTX_cleanup(%struct.evp_aead_ctx_st* nonnull %37) #10
  call void @llvm.lifetime.end.p0i8(i64 600, i8* nonnull %36) #10
  br label %54

51:                                               ; preds = %42
  %52 = call i32 @EVP_AEAD_CTX_seal(%struct.evp_aead_ctx_st* nonnull %37, i8* %30, i64* nonnull %10, i64 %15, i8* %5, i64 %4, i8* %3, i64 %2, i8* %35, i64 %33) #10
  %53 = icmp eq i32 %52, 0
  call void @EVP_AEAD_CTX_cleanup(%struct.evp_aead_ctx_st* nonnull %37) #10
  call void @llvm.lifetime.end.p0i8(i64 600, i8* nonnull %36) #10
  br i1 %53, label %54, label %57

54:                                               ; preds = %51, %50
  %55 = bitcast %"class.logging::CheckError"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %11, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.2, i64 0, i64 0)) #10
  %56 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %11) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %11) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #10
  br label %57

57:                                               ; preds = %51, %54
  %58 = load i64, i64* %10, align 8
  %59 = load i64, i64* %23, align 8
  %60 = load i64, i64* %24, align 8
  %61 = sub i64 %59, %60
  %62 = icmp ugt i64 %58, %61
  %63 = inttoptr i64 %60 to i8*
  br i1 %62, label %64, label %66

64:                                               ; preds = %57
  %65 = sub i64 %58, %61
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %0, i64 %65) #10
  br label %70

66:                                               ; preds = %57
  %67 = icmp ult i64 %58, %61
  br i1 %67, label %68, label %70

68:                                               ; preds = %66
  %69 = getelementptr inbounds i8, i8* %63, i64 %58
  store i8* %69, i8** %21, align 8
  br label %70

70:                                               ; preds = %64, %66, %68
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare i64 @EVP_AEAD_max_overhead(%struct.evp_aead_st*) local_unnamed_addr #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6crypto4Aead4SealEN4base4spanIKhLm18446744073709551615EEES4_S4_PhPmm(%"class.crypto::Aead"* nocapture readonly, i64, i8*, i64, i8*, %"class.base::span"* nocapture readonly byval(%"class.base::span") align 8, i8*, i64*, i64) local_unnamed_addr #0 align 2 {
  %10 = alloca %"class.bssl::internal::StackAllocated", align 8
  %11 = bitcast %"class.bssl::internal::StackAllocated"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 600, i8* nonnull %11) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 600, i1 false)
  %12 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %10, i64 0, i32 0
  call void @EVP_AEAD_CTX_zero(%struct.evp_aead_ctx_st* nonnull %12) #10
  %13 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8, i8* %13, align 8, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %17, !prof !3

16:                                               ; preds = %9
  call void @llvm.trap() #10
  unreachable

17:                                               ; preds = %9
  %18 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 1
  %19 = load %struct.evp_aead_st*, %struct.evp_aead_st** %18, align 8
  %20 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = call i32 @EVP_AEAD_CTX_init(%struct.evp_aead_ctx_st* nonnull %12, %struct.evp_aead_st* %19, i8* %21, i64 %23, i64 0, %struct.engine_st* null) #10
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %17
  %27 = getelementptr inbounds %"class.base::span", %"class.base::span"* %5, i64 0, i32 1
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.base::span", %"class.base::span"* %5, i64 0, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = call i32 @EVP_AEAD_CTX_seal(%struct.evp_aead_ctx_st* nonnull %12, i8* %6, i64* %7, i64 %8, i8* %4, i64 %3, i8* %2, i64 %1, i8* %28, i64 %30) #10
  %32 = icmp ne i32 %31, 0
  br label %33

33:                                               ; preds = %26, %17
  %34 = phi i1 [ false, %17 ], [ %32, %26 ]
  call void @EVP_AEAD_CTX_cleanup(%struct.evp_aead_ctx_st* nonnull %12) #10
  call void @llvm.lifetime.end.p0i8(i64 600, i8* nonnull %11) #10
  ret i1 %34
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6crypto4Aead4SealEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEES6_S6_PNS3_12basic_stringIcS5_NS3_9allocatorIcEEEE(%"class.crypto::Aead"* nocapture readonly, i8*, i64, i8*, i64, %"class.base::BasicStringPiece"* nocapture readonly byval(%"class.base::BasicStringPiece") align 8, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.bssl::internal::StackAllocated", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = alloca i64, align 8
  %11 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 1
  %12 = load %struct.evp_aead_st*, %struct.evp_aead_st** %11, align 8
  %13 = tail call i64 @EVP_AEAD_max_overhead(%struct.evp_aead_st* %12) #10
  %14 = add i64 %13, %2
  %15 = add i64 %14, 1
  %16 = icmp ult i64 %15, %2
  br i1 %16, label %17, label %20

17:                                               ; preds = %7
  %18 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0)) #10
  %19 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  br label %20

20:                                               ; preds = %7, %17
  %21 = call i8* @_ZN4base9WriteIntoEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEm(%"class.std::__1::basic_string"* %6, i64 %15) #10
  %22 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #10
  store i64 -6148914691236517206, i64* %10, align 8
  %23 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.bssl::internal::StackAllocated"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 600, i8* nonnull %27) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 600, i1 false) #10
  %28 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %8, i64 0, i32 0
  call void @EVP_AEAD_CTX_zero(%struct.evp_aead_ctx_st* nonnull %28) #10
  %29 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %33, !prof !3

32:                                               ; preds = %20
  call void @llvm.trap() #10
  unreachable

33:                                               ; preds = %20
  %34 = load %struct.evp_aead_st*, %struct.evp_aead_st** %11, align 8
  %35 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = call i32 @EVP_AEAD_CTX_init(%struct.evp_aead_ctx_st* nonnull %28, %struct.evp_aead_st* %34, i8* %36, i64 %38, i64 0, %struct.engine_st* null) #10
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %33
  call void @EVP_AEAD_CTX_cleanup(%struct.evp_aead_ctx_st* nonnull %28) #10
  call void @llvm.lifetime.end.p0i8(i64 600, i8* nonnull %27) #10
  br label %45

42:                                               ; preds = %33
  %43 = call i32 @EVP_AEAD_CTX_seal(%struct.evp_aead_ctx_st* nonnull %28, i8* %21, i64* nonnull %10, i64 %14, i8* %3, i64 %4, i8* %1, i64 %2, i8* %24, i64 %26) #10
  %44 = icmp eq i32 %43, 0
  call void @EVP_AEAD_CTX_cleanup(%struct.evp_aead_ctx_st* nonnull %28) #10
  call void @llvm.lifetime.end.p0i8(i64 600, i8* nonnull %27) #10
  br i1 %44, label %45, label %56

45:                                               ; preds = %42, %41
  %46 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %46, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %53, align 8
  br label %58

54:                                               ; preds = %45
  %55 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  store i8 0, i8* %55, align 1
  store i8 0, i8* %47, align 1
  br label %58

56:                                               ; preds = %42
  %57 = load i64, i64* %10, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %6, i64 %57, i8 signext 0) #10
  br label %58

58:                                               ; preds = %54, %50, %56
  %59 = phi i1 [ true, %56 ], [ false, %50 ], [ false, %54 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #10
  ret i1 %59
}

declare i8* @_ZN4base9WriteIntoEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEm(%"class.std::__1::basic_string"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6crypto4Aead4OpenEN4base4spanIKhLm18446744073709551615EEES4_S4_(%"class.absl::optional.7"* noalias nocapture sret, %"class.crypto::Aead"* nocapture readonly, i64, i8*, i64, i8*, %"class.base::span"* nocapture readonly byval(%"class.base::span") align 8) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.bssl::internal::StackAllocated", align 8
  %9 = alloca %"class.std::__1::vector", align 8
  %10 = alloca i64, align 8
  %11 = bitcast %"class.std::__1::vector"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #10
  %15 = bitcast i8** %13 to i64*
  %16 = bitcast %"class.std::__1::vector"* %9 to i64*
  %17 = icmp eq i64 %2, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %7
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* nonnull %9, i64 %2) #10
  %19 = load i8*, i8** %12, align 8
  br label %20

20:                                               ; preds = %7, %18
  %21 = phi i8* [ %19, %18 ], [ null, %7 ]
  %22 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #10
  store i64 -6148914691236517206, i64* %10, align 8
  %23 = getelementptr inbounds %"class.base::span", %"class.base::span"* %6, i64 0, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.base::span", %"class.base::span"* %6, i64 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = bitcast %"class.bssl::internal::StackAllocated"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 600, i8* nonnull %27) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 600, i1 false) #10
  %28 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %8, i64 0, i32 0
  call void @EVP_AEAD_CTX_zero(%struct.evp_aead_ctx_st* nonnull %28) #10
  %29 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %33, !prof !3

32:                                               ; preds = %20
  call void @llvm.trap() #10
  unreachable

33:                                               ; preds = %20
  %34 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %1, i64 0, i32 1
  %35 = load %struct.evp_aead_st*, %struct.evp_aead_st** %34, align 8
  %36 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = call i32 @EVP_AEAD_CTX_init(%struct.evp_aead_ctx_st* nonnull %28, %struct.evp_aead_st* %35, i8* %37, i64 %39, i64 0, %struct.engine_st* null) #10
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %33
  call void @EVP_AEAD_CTX_cleanup(%struct.evp_aead_ctx_st* nonnull %28) #10
  call void @llvm.lifetime.end.p0i8(i64 600, i8* nonnull %27) #10
  br label %74

43:                                               ; preds = %33
  %44 = call i32 @EVP_AEAD_CTX_open(%struct.evp_aead_ctx_st* nonnull %28, i8* %21, i64* nonnull %10, i64 %2, i8* %5, i64 %4, i8* %3, i64 %2, i8* %26, i64 %24) #10
  %45 = icmp eq i32 %44, 0
  call void @EVP_AEAD_CTX_cleanup(%struct.evp_aead_ctx_st* nonnull %28) #10
  call void @llvm.lifetime.end.p0i8(i64 600, i8* nonnull %27) #10
  br i1 %45, label %74, label %46

46:                                               ; preds = %43
  %47 = load i64, i64* %10, align 8
  %48 = load i64, i64* %15, align 8
  %49 = load i64, i64* %16, align 8
  %50 = sub i64 %48, %49
  %51 = icmp ugt i64 %47, %50
  %52 = inttoptr i64 %49 to i8*
  br i1 %51, label %53, label %57

53:                                               ; preds = %46
  %54 = sub i64 %47, %50
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* nonnull %9, i64 %54) #10
  %55 = load i64, i64* %16, align 8
  %56 = load i64, i64* %15, align 8
  br label %62

57:                                               ; preds = %46
  %58 = icmp ult i64 %47, %50
  br i1 %58, label %59, label %62

59:                                               ; preds = %57
  %60 = getelementptr inbounds i8, i8* %52, i64 %47
  store i8* %60, i8** %13, align 8
  %61 = ptrtoint i8* %60 to i64
  br label %62

62:                                               ; preds = %59, %57, %53
  %63 = phi i64 [ %56, %53 ], [ %48, %57 ], [ %61, %59 ]
  %64 = phi i64 [ %55, %53 ], [ %49, %57 ], [ %49, %59 ]
  %65 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %65, align 8
  %66 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %67 = bitcast %"class.std::__1::vector"* %66 to i64*
  store i64 %64, i64* %67, align 8
  %68 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %69 = bitcast i8** %68 to i64*
  store i64 %63, i64* %69, align 8
  %70 = bitcast i8** %14 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %73 = bitcast i8** %72 to i64*
  store i64 %71, i64* %73, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #10
  br label %82

74:                                               ; preds = %42, %43
  %75 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %75, align 8
  %76 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %77 = bitcast %union.anon.11* %76 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 24, i1 false) #10
  %78 = load i8*, i8** %12, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #10
  %79 = icmp eq i8* %78, null
  br i1 %79, label %82, label %80

80:                                               ; preds = %74
  %81 = ptrtoint i8* %78 to i64
  store i64 %81, i64* %15, align 8
  call void @_ZdlPv(i8* nonnull %78) #11
  br label %82

82:                                               ; preds = %62, %74, %80
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6crypto4Aead4OpenEN4base4spanIKhLm18446744073709551615EEES4_S4_PhPmm(%"class.crypto::Aead"* nocapture readonly, i64, i8*, i64, i8*, %"class.base::span"* nocapture readonly byval(%"class.base::span") align 8, i8*, i64*, i64) local_unnamed_addr #0 align 2 {
  %10 = alloca %"class.bssl::internal::StackAllocated", align 8
  %11 = bitcast %"class.bssl::internal::StackAllocated"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 600, i8* nonnull %11) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 600, i1 false)
  %12 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %10, i64 0, i32 0
  call void @EVP_AEAD_CTX_zero(%struct.evp_aead_ctx_st* nonnull %12) #10
  %13 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8, i8* %13, align 8, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %17, !prof !3

16:                                               ; preds = %9
  call void @llvm.trap() #10
  unreachable

17:                                               ; preds = %9
  %18 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 1
  %19 = load %struct.evp_aead_st*, %struct.evp_aead_st** %18, align 8
  %20 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = call i32 @EVP_AEAD_CTX_init(%struct.evp_aead_ctx_st* nonnull %12, %struct.evp_aead_st* %19, i8* %21, i64 %23, i64 0, %struct.engine_st* null) #10
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %17
  %27 = getelementptr inbounds %"class.base::span", %"class.base::span"* %5, i64 0, i32 1
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.base::span", %"class.base::span"* %5, i64 0, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = call i32 @EVP_AEAD_CTX_open(%struct.evp_aead_ctx_st* nonnull %12, i8* %6, i64* %7, i64 %8, i8* %4, i64 %3, i8* %2, i64 %1, i8* %28, i64 %30) #10
  %32 = icmp ne i32 %31, 0
  br label %33

33:                                               ; preds = %26, %17
  %34 = phi i1 [ false, %17 ], [ %32, %26 ]
  call void @EVP_AEAD_CTX_cleanup(%struct.evp_aead_ctx_st* nonnull %12) #10
  call void @llvm.lifetime.end.p0i8(i64 600, i8* nonnull %11) #10
  ret i1 %34
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6crypto4Aead4OpenEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEES6_S6_PNS3_12basic_stringIcS5_NS3_9allocatorIcEEEE(%"class.crypto::Aead"* nocapture readonly, i8*, i64, i8*, i64, %"class.base::BasicStringPiece"* nocapture readonly byval(%"class.base::BasicStringPiece") align 8, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.bssl::internal::StackAllocated", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = alloca i64, align 8
  %11 = add i64 %2, 1
  %12 = icmp eq i64 %2, -1
  br i1 %12, label %13, label %16

13:                                               ; preds = %7
  %14 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i32 113, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i64 0, i64 0)) #10
  %15 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #10
  br label %16

16:                                               ; preds = %7, %13
  %17 = call i8* @_ZN4base9WriteIntoEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEm(%"class.std::__1::basic_string"* %6, i64 %11) #10
  %18 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  store i64 -6148914691236517206, i64* %10, align 8
  %19 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.bssl::internal::StackAllocated"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 600, i8* nonnull %23) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 600, i1 false) #10
  %24 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %8, i64 0, i32 0
  call void @EVP_AEAD_CTX_zero(%struct.evp_aead_ctx_st* nonnull %24) #10
  %25 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i8, i8* %25, align 8, !range !2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %29, !prof !3

28:                                               ; preds = %16
  call void @llvm.trap() #10
  unreachable

29:                                               ; preds = %16
  %30 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 1
  %31 = load %struct.evp_aead_st*, %struct.evp_aead_st** %30, align 8
  %32 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = call i32 @EVP_AEAD_CTX_init(%struct.evp_aead_ctx_st* nonnull %24, %struct.evp_aead_st* %31, i8* %33, i64 %35, i64 0, %struct.engine_st* null) #10
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %29
  call void @EVP_AEAD_CTX_cleanup(%struct.evp_aead_ctx_st* nonnull %24) #10
  call void @llvm.lifetime.end.p0i8(i64 600, i8* nonnull %23) #10
  br label %42

39:                                               ; preds = %29
  %40 = call i32 @EVP_AEAD_CTX_open(%struct.evp_aead_ctx_st* nonnull %24, i8* %17, i64* nonnull %10, i64 %2, i8* %3, i64 %4, i8* %1, i64 %2, i8* %20, i64 %22) #10
  %41 = icmp eq i32 %40, 0
  call void @EVP_AEAD_CTX_cleanup(%struct.evp_aead_ctx_st* nonnull %24) #10
  call void @llvm.lifetime.end.p0i8(i64 600, i8* nonnull %23) #10
  br i1 %41, label %42, label %53

42:                                               ; preds = %39, %38
  %43 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %43, i64 0, i32 1, i32 0
  %45 = load i8, i8* %44, align 1
  %46 = icmp slt i8 %45, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %50, align 8
  br label %55

51:                                               ; preds = %42
  %52 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  store i8 0, i8* %52, align 1
  store i8 0, i8* %44, align 1
  br label %55

53:                                               ; preds = %39
  %54 = load i64, i64* %10, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %6, i64 %54, i8 signext 0) #10
  br label %55

55:                                               ; preds = %51, %47, %53
  %56 = phi i1 [ true, %53 ], [ false, %47 ], [ false, %51 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  ret i1 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK6crypto4Aead9KeyLengthEv(%"class.crypto::Aead"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 1
  %3 = load %struct.evp_aead_st*, %struct.evp_aead_st** %2, align 8
  %4 = tail call i64 @EVP_AEAD_key_length(%struct.evp_aead_st* %3) #10
  ret i64 %4
}

declare i64 @EVP_AEAD_key_length(%struct.evp_aead_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK6crypto4Aead11NonceLengthEv(%"class.crypto::Aead"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.crypto::Aead", %"class.crypto::Aead"* %0, i64 0, i32 1
  %3 = load %struct.evp_aead_st*, %struct.evp_aead_st** %2, align 8
  %4 = tail call i64 @EVP_AEAD_nonce_length(%struct.evp_aead_st* %3) #10
  ret i64 %4
}

declare i64 @EVP_AEAD_nonce_length(%struct.evp_aead_st*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare i32 @EVP_AEAD_CTX_init(%struct.evp_aead_ctx_st*, %struct.evp_aead_st*, i8*, i64, i64, %struct.engine_st*) local_unnamed_addr #1

declare i32 @EVP_AEAD_CTX_seal(%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64) local_unnamed_addr #1

declare i32 @EVP_AEAD_CTX_open(%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #10
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #12
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #11
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #10
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #10
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #11
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #1

declare void @EVP_AEAD_CTX_zero(%struct.evp_aead_ctx_st*) local_unnamed_addr #1

declare void @EVP_AEAD_CTX_cleanup(%struct.evp_aead_ctx_st*) local_unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
