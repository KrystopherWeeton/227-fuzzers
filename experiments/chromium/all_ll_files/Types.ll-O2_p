; ModuleID = '../../third_party/angle/src/compiler/translator/Types.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/Types.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"struct.std::__1::piecewise_construct_t" = type { i8 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.1"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.1" = type { %"class.std::__1::vector.2" }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair.4" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i8, [7 x i8] }>
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"struct.sh::TPublicType" = type { %"struct.sh::TTypeSpecifierNonArray", %"struct.sh::TLayoutQualifier", %"struct.sh::TMemoryQualifier", i32, i8, i8, i32, %"class.sh::TVector"* }
%"struct.sh::TTypeSpecifierNonArray" = type { i32, i8, i8, %"class.sh::TStructure"*, %"struct.sh::TSourceLoc", i8 }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.67", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.67" = type { %"class.std::__1::__vector_base.68" }
%"class.std::__1::__vector_base.68" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.69" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.sh::TVector.15" = type { %"class.std::__1::vector.16" }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"class.sh::TVariable"**, %"class.sh::TVariable"**, %"class.std::__1::__compressed_pair.19" }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.18, i32 }
%union.anon.18 = type { i32 }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.sh::TVariable"** }
%"class.sh::TMap" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.24", %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.32", %"class.std::__1::vector.37", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.45", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"class.std::__1::unique_ptr.39"*, %"class.std::__1::unique_ptr.39"*, %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::unique_ptr.39" = type opaque
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.std::__1::unique_ptr.39"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map.45" = type { %"class.std::__1::__tree.46" }
%"class.std::__1::__tree.46" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.47", %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"class.std::__1::tuple" = type { %"struct.std::__1::__tuple_impl" }
%"struct.std::__1::__tuple_impl" = type { %"class.std::__1::__tuple_leaf" }
%"class.std::__1::__tuple_leaf" = type { %"class.sh::TVariable"** }
%"class.std::__1::tuple.82" = type { i8 }
%"class.std::__1::basic_stringstream" = type { %"class.std::__1::basic_iostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_iostream.base" = type { %"class.std::__1::basic_istream.base", %"class.std::__1::basic_ostream.base" }
%"class.std::__1::basic_istream.base" = type { i32 (...)**, i64 }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string.56", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.59 }
%union.anon.59 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_stringbuf.64" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.60 }
%struct.anon.60 = type { i8 }
%"class.std::__1::basic_ios" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32, [4 x i8] }>
%"class.std::__1::basic_iostream" = type { %"class.std::__1::basic_istream.base", %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_ios.base" }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair.83" }
%"struct.std::__1::pair.83" = type { %"class.sh::TVariable"*, %"class.std::__1::basic_string" }

$_ZNSt3__16vectorIj14pool_allocatorIjEE6insertIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPjEEE4typeENSC_IS6_EES8_S8_ = comdat any

$_ZN2sh16InitializeStreamINSt3__118basic_stringstreamIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_v = comdat any

$_ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEED1Ev = comdat any

$_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEEaSERKS5_ = comdat any

$_ZTv0_n24_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEED1Ev = comdat any

$_ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEED0Ev = comdat any

$_ZTv0_n24_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEED0Ev = comdat any

$_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEED2Ev = comdat any

$_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEED0Ev = comdat any

$_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE7seekoffExNS_8ios_base7seekdirEj = comdat any

$_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE7seekposENS_4fposI11__mbstate_tEEj = comdat any

$_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE9underflowEv = comdat any

$_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE9pbackfailEi = comdat any

$_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE8overflowEi = comdat any

$_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEmc = comdat any

$_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEPKcm = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE3strEv = comdat any

$_ZNSt3__16__treeINS_12__value_typeIPKN2sh9TVariableENS_12basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEEEEENS_19__map_value_compareIS5_SC_NS_4lessIS5_EELb1EEES9_ISC_EE25__emplace_unique_key_argsIS5_JRKNS_21piecewise_construct_tENS_5tupleIJOS5_EEENSN_IJEEEEEENS_4pairINS_15__tree_iteratorISC_PNS_11__tree_nodeISC_PvEElEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE17__assign_no_aliasILb0EEERS5_PKcm = comdat any

$_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE = comdat any

$_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE = comdat any

$_ZTCNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE0_NS_13basic_ostreamIcS2_EE = comdat any

$_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEEE = comdat any

@.str = private unnamed_addr constant [5 x i8] c"void\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"bool\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"yuvCscStandardEXT\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"sampler2D\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"sampler3D\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"samplerCube\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"samplerExternalOES\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"__samplerExternal2DY2YEXT\00", align 1
@.str.11 = private unnamed_addr constant [14 x i8] c"sampler2DRect\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"sampler2DArray\00", align 1
@.str.13 = private unnamed_addr constant [12 x i8] c"sampler2DMS\00", align 1
@.str.14 = private unnamed_addr constant [17 x i8] c"sampler2DMSArray\00", align 1
@.str.15 = private unnamed_addr constant [17 x i8] c"samplerCubeArray\00", align 1
@.str.16 = private unnamed_addr constant [14 x i8] c"samplerBuffer\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"isampler2D\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"isampler3D\00", align 1
@.str.19 = private unnamed_addr constant [13 x i8] c"isamplerCube\00", align 1
@.str.20 = private unnamed_addr constant [16 x i8] c"isampler2DArray\00", align 1
@.str.21 = private unnamed_addr constant [13 x i8] c"isampler2DMS\00", align 1
@.str.22 = private unnamed_addr constant [18 x i8] c"isampler2DMSArray\00", align 1
@.str.23 = private unnamed_addr constant [18 x i8] c"isamplerCubeArray\00", align 1
@.str.24 = private unnamed_addr constant [15 x i8] c"isamplerBuffer\00", align 1
@.str.25 = private unnamed_addr constant [11 x i8] c"usampler2D\00", align 1
@.str.26 = private unnamed_addr constant [11 x i8] c"usampler3D\00", align 1
@.str.27 = private unnamed_addr constant [13 x i8] c"usamplerCube\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"usampler2DArray\00", align 1
@.str.29 = private unnamed_addr constant [13 x i8] c"usampler2DMS\00", align 1
@.str.30 = private unnamed_addr constant [18 x i8] c"usampler2DMSArray\00", align 1
@.str.31 = private unnamed_addr constant [18 x i8] c"usamplerCubeArray\00", align 1
@.str.32 = private unnamed_addr constant [15 x i8] c"usamplerBuffer\00", align 1
@.str.33 = private unnamed_addr constant [16 x i8] c"sampler2DShadow\00", align 1
@.str.34 = private unnamed_addr constant [18 x i8] c"samplerCubeShadow\00", align 1
@.str.35 = private unnamed_addr constant [21 x i8] c"sampler2DArrayShadow\00", align 1
@.str.36 = private unnamed_addr constant [23 x i8] c"samplerCubeArrayShadow\00", align 1
@.str.37 = private unnamed_addr constant [10 x i8] c"structure\00", align 1
@.str.38 = private unnamed_addr constant [16 x i8] c"interface block\00", align 1
@.str.39 = private unnamed_addr constant [8 x i8] c"image2D\00", align 1
@.str.40 = private unnamed_addr constant [9 x i8] c"iimage2D\00", align 1
@.str.41 = private unnamed_addr constant [9 x i8] c"uimage2D\00", align 1
@.str.42 = private unnamed_addr constant [8 x i8] c"image3D\00", align 1
@.str.43 = private unnamed_addr constant [9 x i8] c"iimage3D\00", align 1
@.str.44 = private unnamed_addr constant [9 x i8] c"uimage3D\00", align 1
@.str.45 = private unnamed_addr constant [13 x i8] c"image2DArray\00", align 1
@.str.46 = private unnamed_addr constant [14 x i8] c"iimage2DArray\00", align 1
@.str.47 = private unnamed_addr constant [14 x i8] c"uimage2DArray\00", align 1
@.str.48 = private unnamed_addr constant [10 x i8] c"imageCube\00", align 1
@.str.49 = private unnamed_addr constant [11 x i8] c"iimageCube\00", align 1
@.str.50 = private unnamed_addr constant [11 x i8] c"uimageCube\00", align 1
@.str.51 = private unnamed_addr constant [15 x i8] c"imageCubeArray\00", align 1
@.str.52 = private unnamed_addr constant [16 x i8] c"iimageCubeArray\00", align 1
@.str.53 = private unnamed_addr constant [16 x i8] c"uimageCubeArray\00", align 1
@.str.54 = private unnamed_addr constant [12 x i8] c"imageBuffer\00", align 1
@.str.55 = private unnamed_addr constant [13 x i8] c"iimageBuffer\00", align 1
@.str.56 = private unnamed_addr constant [13 x i8] c"uimageBuffer\00", align 1
@.str.57 = private unnamed_addr constant [12 x i8] c"atomic_uint\00", align 1
@.str.58 = private unnamed_addr constant [18 x i8] c"samplerVideoWEBGL\00", align 1
@.str.59 = private unnamed_addr constant [13 x i8] c"subpassInput\00", align 1
@.str.60 = private unnamed_addr constant [14 x i8] c"isubpassInput\00", align 1
@.str.61 = private unnamed_addr constant [14 x i8] c"usubpassInput\00", align 1
@.str.62 = private unnamed_addr constant [15 x i8] c"subpassInputMS\00", align 1
@.str.63 = private unnamed_addr constant [16 x i8] c"isubpassInputMS\00", align 1
@.str.64 = private unnamed_addr constant [16 x i8] c"usubpassInputMS\00", align 1
@.str.65 = private unnamed_addr constant [13 x i8] c"unknown type\00", align 1
@.str.66 = private unnamed_addr constant [5 x i8] c"mat2\00", align 1
@.str.67 = private unnamed_addr constant [7 x i8] c"mat2x3\00", align 1
@.str.68 = private unnamed_addr constant [7 x i8] c"mat2x4\00", align 1
@.str.69 = private unnamed_addr constant [7 x i8] c"mat3x2\00", align 1
@.str.70 = private unnamed_addr constant [5 x i8] c"mat3\00", align 1
@.str.71 = private unnamed_addr constant [7 x i8] c"mat3x4\00", align 1
@.str.72 = private unnamed_addr constant [7 x i8] c"mat4x2\00", align 1
@.str.73 = private unnamed_addr constant [7 x i8] c"mat4x3\00", align 1
@.str.74 = private unnamed_addr constant [5 x i8] c"mat4\00", align 1
@.str.75 = private unnamed_addr constant [5 x i8] c"vec2\00", align 1
@.str.76 = private unnamed_addr constant [5 x i8] c"vec3\00", align 1
@.str.77 = private unnamed_addr constant [5 x i8] c"vec4\00", align 1
@.str.78 = private unnamed_addr constant [6 x i8] c"ivec2\00", align 1
@.str.79 = private unnamed_addr constant [6 x i8] c"ivec3\00", align 1
@.str.80 = private unnamed_addr constant [6 x i8] c"ivec4\00", align 1
@.str.81 = private unnamed_addr constant [6 x i8] c"bvec2\00", align 1
@.str.82 = private unnamed_addr constant [6 x i8] c"bvec3\00", align 1
@.str.83 = private unnamed_addr constant [6 x i8] c"bvec4\00", align 1
@.str.84 = private unnamed_addr constant [6 x i8] c"uvec2\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"uvec3\00", align 1
@.str.86 = private unnamed_addr constant [6 x i8] c"uvec4\00", align 1
@.str.87 = private unnamed_addr constant [3 x i8] c"{s\00", align 1
@.str.88 = private unnamed_addr constant [3 x i8] c"{i\00", align 1
@.str.89 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.90 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.str.91 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.92 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.93 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE = linkonce_odr hidden unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* inttoptr (i64 112 to i8*), i8* null, i8* null, i8* bitcast (void (%"class.std::__1::basic_ostringstream"*)* @_ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEED1Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_ostringstream"*)* @_ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEED0Ev to i8*)], [5 x i8*] [i8* inttoptr (i64 -112 to i8*), i8* inttoptr (i64 -112 to i8*), i8* null, i8* bitcast (void (%"class.std::__1::basic_ostringstream"*)* @_ZTv0_n24_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEED1Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_ostringstream"*)* @_ZTv0_n24_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEED0Ev to i8*)] }, comdat, align 8
@_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE = linkonce_odr hidden unnamed_addr constant [4 x i8*] [i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i32 0, inrange i32 0, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE0_NS_13basic_ostreamIcS2_EE, i32 0, inrange i32 0, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE0_NS_13basic_ostreamIcS2_EE, i32 0, inrange i32 1, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i32 0, inrange i32 1, i32 3) to i8*)], comdat, align 8
@_ZTCNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE0_NS_13basic_ostreamIcS2_EE = linkonce_odr hidden unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* inttoptr (i64 112 to i8*), i8* null, i8* null, i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev to i8*)], [5 x i8*] [i8* inttoptr (i64 -112 to i8*), i8* inttoptr (i64 -112 to i8*), i8* null, i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev to i8*)] }, comdat, align 8
@_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEEE = linkonce_odr hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.std::__1::basic_stringbuf.64"*)* @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEED2Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_stringbuf.64"*)* @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEED0Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)* @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE to i8*), i8* bitcast (%"class.std::__1::basic_streambuf"* (%"class.std::__1::basic_streambuf"*, i8*, i64)* @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl to i8*), i8* bitcast ({ i64, i64 } (%"class.std::__1::basic_stringbuf.64"*, i64, i32, i32)* @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE7seekoffExNS_8ios_base7seekdirEj to i8*), i8* bitcast ({ i64, i64 } (%"class.std::__1::basic_stringbuf.64"*, i64, i64, i32)* @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE7seekposENS_4fposI11__mbstate_tEEj to i8*), i8* bitcast (i32 (%"class.std::__1::basic_streambuf"*)* @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv to i8*), i8* bitcast (i64 (%"class.std::__1::basic_streambuf"*)* @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv to i8*), i8* bitcast (i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)* @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl to i8*), i8* bitcast (i32 (%"class.std::__1::basic_stringbuf.64"*)* @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE9underflowEv to i8*), i8* bitcast (i32 (%"class.std::__1::basic_streambuf"*)* @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv to i8*), i8* bitcast (i32 (%"class.std::__1::basic_stringbuf.64"*, i32)* @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE9pbackfailEi to i8*), i8* bitcast (i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)* @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl to i8*), i8* bitcast (i32 (%"class.std::__1::basic_stringbuf.64"*, i32)* @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE8overflowEi to i8*)] }, comdat, align 8
@_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [5 x i8*], [5 x i8*], [5 x i8*] }, align 8
@_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant [10 x i8*], align 8
@_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [16 x i8*] }, align 8
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@_ZNSt3__1L19piecewise_constructE = internal constant %"struct.std::__1::piecewise_construct_t" undef, align 1
@switch.table._ZN2sh14getBasicStringENS_10TBasicTypeE = private unnamed_addr constant [92 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.58, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.40, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.44, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.52, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.53, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.54, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.55, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.56, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.59, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.60, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.61, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.62, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.64, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.38, i64 0, i64 0)], align 8
@switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.66, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.68, i64 0, i64 0)], align 8
@switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv.95 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.69, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i64 0, i64 0)], align 8
@switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv.96 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.72, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.73, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.74, i64 0, i64 0)], align 8
@switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv.97 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.75, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77, i64 0, i64 0)], align 8
@switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv.98 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.78, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.79, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.80, i64 0, i64 0)], align 8
@switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv.99 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.82, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.83, i64 0, i64 0)], align 8
@switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv.100 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.84, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i64 0, i64 0)], align 8

@_ZN2sh5TTypeC1Ev = hidden unnamed_addr alias void (%"class.sh::TType"*), void (%"class.sh::TType"*)* @_ZN2sh5TTypeC2Ev
@_ZN2sh5TTypeC1ENS_10TBasicTypeEhh = hidden unnamed_addr alias void (%"class.sh::TType"*, i32, i8, i8), void (%"class.sh::TType"*, i32, i8, i8)* @_ZN2sh5TTypeC2ENS_10TBasicTypeEhh
@_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh = hidden unnamed_addr alias void (%"class.sh::TType"*, i32, i32, i32, i8, i8), void (%"class.sh::TType"*, i32, i32, i32, i8, i8)* @_ZN2sh5TTypeC2ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh
@_ZN2sh5TTypeC1ERKNS_11TPublicTypeE = hidden unnamed_addr alias void (%"class.sh::TType"*, %"struct.sh::TPublicType"*), void (%"class.sh::TType"*, %"struct.sh::TPublicType"*)* @_ZN2sh5TTypeC2ERKNS_11TPublicTypeE
@_ZN2sh5TTypeC1EPKNS_10TStructureEb = hidden unnamed_addr alias void (%"class.sh::TType"*, %"class.sh::TStructure"*, i1), void (%"class.sh::TType"*, %"class.sh::TStructure"*, i1)* @_ZN2sh5TTypeC2EPKNS_10TStructureEb
@_ZN2sh5TTypeC1EPKNS_15TInterfaceBlockENS_10TQualifierENS_16TLayoutQualifierE = hidden unnamed_addr alias void (%"class.sh::TType"*, %"class.sh::TInterfaceBlock"*, i32, %"struct.sh::TLayoutQualifier"*), void (%"class.sh::TType"*, %"class.sh::TInterfaceBlock"*, i32, %"struct.sh::TLayoutQualifier"*)* @_ZN2sh5TTypeC2EPKNS_15TInterfaceBlockENS_10TQualifierENS_16TLayoutQualifierE
@_ZN2sh5TTypeC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TType"*, %"class.sh::TType"*), void (%"class.sh::TType"*, %"class.sh::TType"*)* @_ZN2sh5TTypeC2ERKS0_
@_ZN2sh20TFieldListCollectionC1EPKNS_7TVectorIPNS_6TFieldEEE = hidden unnamed_addr alias void (%"class.sh::TFieldListCollection"*, %"class.sh::TVector.1"*), void (%"class.sh::TFieldListCollection"*, %"class.sh::TVector.1"*)* @_ZN2sh20TFieldListCollectionC2EPKNS_7TVectorIPNS_6TFieldEEE

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZN2sh14getBasicStringENS_10TBasicTypeE(i32) local_unnamed_addr #0 {
  %2 = icmp ult i32 %0, 92
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [92 x i8*], [92 x i8*]* @switch.table._ZN2sh14getBasicStringENS_10TBasicTypeE, i64 0, i64 %4
  %6 = load i8*, i8** %5, align 8
  ret i8* %6

7:                                                ; preds = %1
  ret i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh5TTypeC2Ev(%"class.sh::TType"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 1
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 2
  store i32 1, i32* %4, align 8
  %5 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 3
  store i8 0, i8* %5, align 4
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 4
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 5
  %8 = bitcast %"struct.sh::TMemoryQualifier"* %7 to i40*
  store i40 0, i40* %8, align 2
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 0
  %10 = bitcast i32* %9 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %10, align 4, !alias.scope !2
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 4, i32 0, i64 0
  %12 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 7
  %13 = bitcast i32* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 -1, i64 20, i1 false) #15, !alias.scope !2
  store i32 0, i32* %12, align 4, !alias.scope !2
  %14 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 8
  store i32 -1, i32* %14, align 4, !alias.scope !2
  %15 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 9
  store i8 0, i8* %15, align 4, !alias.scope !2
  %16 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 10
  store i8 0, i8* %16, align 1, !alias.scope !2
  %17 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 12
  store i32 0, i32* %17, align 4, !alias.scope !2
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 13
  store i32 0, i32* %18, align 4, !alias.scope !2
  %19 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 14
  store i32 -1, i32* %19, align 4, !alias.scope !2
  %20 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 15
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 20
  %22 = bitcast i32* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %22, i8 0, i64 20, i1 false) #15, !alias.scope !2
  store i32 -1, i32* %21, align 4, !alias.scope !2
  %23 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 21
  store i32 -1, i32* %23, align 4, !alias.scope !2
  %24 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 22
  store i8 0, i8* %24, align 4, !alias.scope !2
  %25 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  store i8 0, i8* %25, align 8
  %26 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10
  %28 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 15
  %29 = bitcast %"class.sh::TSpan"* %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 41, i1 false) #15
  %30 = bitcast i64* %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 16, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh5TTypeC2ENS_10TBasicTypeEhh(%"class.sh::TType"*, i32, i8 zeroext, i8 zeroext) unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 1
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 2
  store i32 1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 3
  store i8 0, i8* %8, align 4
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 4
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 5
  %11 = bitcast %"struct.sh::TMemoryQualifier"* %10 to i40*
  store i40 0, i40* %11, align 2
  %12 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 0
  %13 = bitcast i32* %12 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %13, align 4, !alias.scope !5
  %14 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 4, i32 0, i64 0
  %15 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 7
  %16 = bitcast i32* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %16, i8 -1, i64 20, i1 false) #15, !alias.scope !5
  store i32 0, i32* %15, align 4, !alias.scope !5
  %17 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 8
  store i32 -1, i32* %17, align 4, !alias.scope !5
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 9
  store i8 0, i8* %18, align 4, !alias.scope !5
  %19 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 10
  store i8 0, i8* %19, align 1, !alias.scope !5
  %20 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 12
  store i32 0, i32* %20, align 4, !alias.scope !5
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 13
  store i32 0, i32* %21, align 4, !alias.scope !5
  %22 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 14
  store i32 -1, i32* %22, align 4, !alias.scope !5
  %23 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 15
  %24 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 20
  %25 = bitcast i32* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %25, i8 0, i64 20, i1 false) #15, !alias.scope !5
  store i32 -1, i32* %24, align 4, !alias.scope !5
  %26 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 21
  store i32 -1, i32* %26, align 4, !alias.scope !5
  %27 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 22
  store i8 0, i8* %27, align 4, !alias.scope !5
  %28 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  store i8 %2, i8* %28, align 8
  %29 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  store i8 %3, i8* %29, align 1
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10
  %31 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 15
  %32 = bitcast %"class.sh::TSpan"* %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 41, i1 false) #15
  %33 = bitcast i64* %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 16, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh5TTypeC2ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"*, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 1
  store i32 %2, i32* %8, align 4
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 2
  store i32 %3, i32* %9, align 8
  %10 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 3
  store i8 0, i8* %10, align 4
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 4
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 5
  %13 = bitcast %"struct.sh::TMemoryQualifier"* %12 to i40*
  store i40 0, i40* %13, align 2
  %14 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 0
  %15 = bitcast i32* %14 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %15, align 4, !alias.scope !8
  %16 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 4, i32 0, i64 0
  %17 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 7
  %18 = bitcast i32* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %18, i8 -1, i64 20, i1 false) #15, !alias.scope !8
  store i32 0, i32* %17, align 4, !alias.scope !8
  %19 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 8
  store i32 -1, i32* %19, align 4, !alias.scope !8
  %20 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 9
  store i8 0, i8* %20, align 4, !alias.scope !8
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 10
  store i8 0, i8* %21, align 1, !alias.scope !8
  %22 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 12
  store i32 0, i32* %22, align 4, !alias.scope !8
  %23 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 13
  store i32 0, i32* %23, align 4, !alias.scope !8
  %24 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 14
  store i32 -1, i32* %24, align 4, !alias.scope !8
  %25 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 15
  %26 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 20
  %27 = bitcast i32* %25 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %27, i8 0, i64 20, i1 false) #15, !alias.scope !8
  store i32 -1, i32* %26, align 4, !alias.scope !8
  %28 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 21
  store i32 -1, i32* %28, align 4, !alias.scope !8
  %29 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 22
  store i8 0, i8* %29, align 4, !alias.scope !8
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  store i8 %4, i8* %30, align 8
  %31 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  store i8 %5, i8* %31, align 1
  %32 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10
  %33 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 15
  %34 = bitcast %"class.sh::TSpan"* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 41, i1 false)
  %35 = bitcast i64* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh5TTypeC2ERKNS_11TPublicTypeE(%"class.sh::TType"* nocapture, %"struct.sh::TPublicType"* nocapture readonly dereferenceable(160)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %1, i64 0, i32 6
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %6, align 4
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %1, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 3
  %13 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %1, i64 0, i32 4
  %14 = load i8, i8* %13, align 8, !range !11
  store i8 %14, i8* %12, align 4
  %15 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 4
  %16 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %1, i64 0, i32 5
  %17 = load i8, i8* %16, align 1, !range !11
  store i8 %17, i8* %15, align 1
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 5, i32 0
  %19 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %1, i64 0, i32 2, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %18, i8* align 4 %19, i64 5, i1 false)
  %20 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7
  %21 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %1, i64 0, i32 1
  %22 = bitcast %"struct.sh::TLayoutQualifier"* %20 to i8*
  %23 = bitcast %"struct.sh::TLayoutQualifier"* %21 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %22, i8* align 8 %23, i64 92, i1 false)
  %24 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  %25 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %1, i64 0, i32 0, i32 1
  %26 = load i8, i8* %25, align 4
  store i8 %26, i8* %24, align 8
  %27 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  %28 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %1, i64 0, i32 0, i32 2
  %29 = load i8, i8* %28, align 1
  store i8 %29, i8* %27, align 1
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10
  %31 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 11
  %32 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %33 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 14
  %34 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 15
  %35 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  %36 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %1, i64 0, i32 7
  %37 = bitcast %"class.sh::TSpan"* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 41, i1 false)
  %38 = bitcast i64* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 16, i1 false)
  %39 = load %"class.sh::TVector"*, %"class.sh::TVector"** %36, align 8
  %40 = icmp eq %"class.sh::TVector"* %39, null
  br i1 %40, label %66, label %41

41:                                               ; preds = %2
  %42 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %39, i64 0, i32 0, i32 0, i32 0
  %43 = load i32*, i32** %42, align 8
  %44 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %39, i64 0, i32 0, i32 0, i32 1
  %45 = load i32*, i32** %44, align 8
  %46 = icmp eq i32* %43, %45
  br i1 %46, label %66, label %47

47:                                               ; preds = %41
  %48 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %49 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %48, i64 24) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #15
  %50 = bitcast %"class.sh::TVector"** %31 to i8**
  store i8* %49, i8** %50, align 8
  %51 = bitcast i8* %49 to %"class.std::__1::vector"*
  %52 = getelementptr inbounds i8, i8* %49, i64 8
  %53 = bitcast i8* %52 to i32**
  %54 = load i32*, i32** %53, align 8
  %55 = tail call i32* @_ZNSt3__16vectorIj14pool_allocatorIjEE6insertIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPjEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"* %51, i32* %54, i32* %43, i32* %45) #15
  %56 = load %"class.sh::TVector"*, %"class.sh::TVector"** %31, align 8
  %57 = bitcast %"class.sh::TVector"* %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %56, i64 0, i32 0, i32 0, i32 1
  %60 = bitcast i32** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %61, %58
  %63 = ashr exact i64 %62, 2
  %64 = bitcast %"class.sh::TSpan"* %30 to i64*
  store i64 %58, i64* %64, align 8
  %65 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  store i64 %63, i64* %65, align 8
  store i8* null, i8** %35, align 8
  br label %66

66:                                               ; preds = %41, %2, %47
  %67 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %1, i64 0, i32 0, i32 3
  %68 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %67, align 8
  %69 = icmp eq %"class.sh::TStructure"* %68, null
  br i1 %69, label %73, label %70

70:                                               ; preds = %66
  store %"class.sh::TStructure"* %68, %"class.sh::TStructure"** %32, align 8
  %71 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %1, i64 0, i32 0, i32 5
  %72 = load i8, i8* %71, align 8, !range !11
  store i8 %72, i8* %33, align 8
  br label %73

73:                                               ; preds = %66, %70
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh11TPublicType7isArrayEv(%"struct.sh::TPublicType"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 7
  %3 = load %"class.sh::TVector"*, %"class.sh::TVector"** %2, align 8
  %4 = icmp eq %"class.sh::TVector"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 1
  %9 = load i32*, i32** %8, align 8
  %10 = icmp ne i32* %7, %9
  br label %11

11:                                               ; preds = %1, %5
  %12 = phi i1 [ false, %1 ], [ %10, %5 ]
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh5TType10makeArraysERKNS_5TSpanIKjEE(%"class.sh::TType"* nocapture, %"class.sh::TSpan"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 11
  %4 = load %"class.sh::TVector"*, %"class.sh::TVector"** %3, align 8
  %5 = icmp eq %"class.sh::TVector"* %4, null
  %6 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0
  br i1 %5, label %7, label %12

7:                                                ; preds = %2
  %8 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %9 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %8, i64 24) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #15
  %10 = bitcast %"class.sh::TVector"** %3 to i8**
  store i8* %9, i8** %10, align 8
  %11 = bitcast i8* %9 to %"class.std::__1::vector"*
  br label %12

12:                                               ; preds = %7, %2
  %13 = phi %"class.std::__1::vector"* [ %11, %7 ], [ %6, %2 ]
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 1
  %15 = load i32*, i32** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TSpan", %"class.sh::TSpan"* %1, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds %"class.sh::TSpan", %"class.sh::TSpan"* %1, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds i32, i32* %17, i64 %19
  %21 = tail call i32* @_ZNSt3__16vectorIj14pool_allocatorIjEE6insertIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPjEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"* %13, i32* %15, i32* %17, i32* %20)
  %22 = load %"class.sh::TVector"*, %"class.sh::TVector"** %3, align 8
  %23 = bitcast %"class.sh::TVector"* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %22, i64 0, i32 0, i32 0, i32 1
  %26 = bitcast i32** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %27, %24
  %29 = ashr exact i64 %28, 2
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10
  %31 = bitcast %"class.sh::TSpan"* %30 to i64*
  store i64 %24, i64* %31, align 8
  %32 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  store i64 %29, i64* %32, align 8
  %33 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  store i8* null, i8** %33, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh5TTypeC2EPKNS_10TStructureEb(%"class.sh::TType"*, %"class.sh::TStructure"*, i1 zeroext) unnamed_addr #1 align 2 {
  %4 = zext i1 %2 to i8
  %5 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  store i32 90, i32* %5, align 8
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 0
  %8 = bitcast i32* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 15, i1 false)
  %9 = bitcast i32* %7 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %9, align 4, !alias.scope !12
  %10 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 4, i32 0, i64 0
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 7
  %12 = bitcast i32* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 -1, i64 20, i1 false) #15, !alias.scope !12
  store i32 0, i32* %11, align 4, !alias.scope !12
  %13 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 8
  store i32 -1, i32* %13, align 4, !alias.scope !12
  %14 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 9
  store i8 0, i8* %14, align 4, !alias.scope !12
  %15 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 10
  store i8 0, i8* %15, align 1, !alias.scope !12
  %16 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 12
  store i32 0, i32* %16, align 4, !alias.scope !12
  %17 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 13
  store i32 0, i32* %17, align 4, !alias.scope !12
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 14
  store i32 -1, i32* %18, align 4, !alias.scope !12
  %19 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 15
  %20 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 20
  %21 = bitcast i32* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 20, i1 false) #15, !alias.scope !12
  store i32 -1, i32* %20, align 4, !alias.scope !12
  %22 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 21
  store i32 -1, i32* %22, align 4, !alias.scope !12
  %23 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7, i32 22
  store i8 0, i8* %23, align 4, !alias.scope !12
  %24 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  store i8 1, i8* %24, align 8
  %25 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  store i8 1, i8* %25, align 1
  %26 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10
  %27 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 15
  %28 = bitcast %"class.sh::TSpan"* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 32, i1 false) #15
  %29 = bitcast i64* %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #15
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  store %"class.sh::TStructure"* %1, %"class.sh::TStructure"** %30, align 8
  %31 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 14
  store i8 %4, i8* %31, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh5TTypeC2EPKNS_15TInterfaceBlockENS_10TQualifierENS_16TLayoutQualifierE(%"class.sh::TType"*, %"class.sh::TInterfaceBlock"*, i32, %"struct.sh::TLayoutQualifier"* nocapture readonly byval(%"struct.sh::TLayoutQualifier") align 8) unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  store i32 91, i32* %5, align 8
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 1
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 2
  store i32 %2, i32* %7, align 8
  %8 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 3
  store i8 0, i8* %8, align 4
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 4
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 5
  %11 = bitcast %"struct.sh::TMemoryQualifier"* %10 to i40*
  store i40 0, i40* %11, align 2
  %12 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  store i8 1, i8* %12, align 8
  %13 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  store i8 1, i8* %13, align 1
  %14 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10
  %15 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 15
  %16 = bitcast %"class.sh::TSpan"* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 41, i1 false) #15
  %17 = bitcast i64* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 16, i1 false) #15
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7
  %19 = bitcast %"struct.sh::TLayoutQualifier"* %18 to i8*
  %20 = bitcast %"struct.sh::TLayoutQualifier"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* nonnull align 8 %20, i64 89, i1 false)
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 12
  store %"class.sh::TInterfaceBlock"* %1, %"class.sh::TInterfaceBlock"** %21, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh5TTypeC2ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* nocapture readonly dereferenceable(184)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10
  %4 = bitcast %"class.sh::TSpan"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false) #15
  %5 = tail call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %0, %"class.sh::TType"* dereferenceable(184) %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* returned, %"class.sh::TType"* nocapture readonly dereferenceable(184)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 1
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 2
  store i32 %10, i32* %11, align 8
  %12 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 3
  %13 = load i8, i8* %12, align 4, !range !11
  %14 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 3
  store i8 %13, i8* %14, align 4
  %15 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 4
  %16 = load i8, i8* %15, align 1, !range !11
  %17 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 4
  store i8 %16, i8* %17, align 1
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 5, i32 0
  %19 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 5, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %18, i8* align 1 %19, i64 5, i1 false)
  %20 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 7
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7
  %22 = bitcast %"struct.sh::TLayoutQualifier"* %21 to i8*
  %23 = bitcast %"struct.sh::TLayoutQualifier"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %22, i8* align 4 %23, i64 89, i1 false)
  %24 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 8
  %25 = load i8, i8* %24, align 8
  %26 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  store i8 %25, i8* %26, align 8
  %27 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 9
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 11
  store %"class.sh::TVector"* null, %"class.sh::TVector"** %30, align 8
  %31 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 12
  %32 = bitcast %"class.sh::TInterfaceBlock"** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 12
  %35 = bitcast %"class.sh::TInterfaceBlock"** %34 to i64*
  store i64 %33, i64* %35, align 8
  %36 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 13
  %37 = bitcast %"class.sh::TStructure"** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %40 = bitcast %"class.sh::TStructure"** %39 to i64*
  store i64 %38, i64* %40, align 8
  %41 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 14
  %42 = load i8, i8* %41, align 8, !range !11
  %43 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 14
  store i8 %42, i8* %43, align 8
  %44 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 15
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 15
  store i64 %45, i64* %46, align 8
  %47 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 16
  %48 = bitcast i8** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  %51 = bitcast i8** %50 to i64*
  store i64 %49, i64* %51, align 8
  %52 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 11
  %53 = load %"class.sh::TVector"*, %"class.sh::TVector"** %52, align 8
  %54 = icmp eq %"class.sh::TVector"* %53, null
  br i1 %54, label %261, label %55

55:                                               ; preds = %2
  %56 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %57 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %56, i64 24) #15
  %58 = load %"class.sh::TVector"*, %"class.sh::TVector"** %52, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 24, i1 false) #15
  %59 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %58, i64 0, i32 0, i32 0, i32 1
  %60 = bitcast i32** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast %"class.sh::TVector"* %58 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %61, %63
  %65 = ashr exact i64 %64, 2
  %66 = icmp eq i64 %64, 0
  br i1 %66, label %249, label %67

67:                                               ; preds = %55
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast i8* %57 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #16
  unreachable

71:                                               ; preds = %67
  %72 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %73 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %72, i64 %64) #15
  %74 = bitcast i8* %73 to i32*
  %75 = getelementptr inbounds i8, i8* %57, i64 8
  %76 = bitcast i8* %75 to i8**
  store i8* %73, i8** %76, align 8
  %77 = bitcast i8* %57 to i8**
  store i8* %73, i8** %77, align 8
  %78 = getelementptr inbounds i32, i32* %74, i64 %65
  %79 = getelementptr inbounds i8, i8* %57, i64 16
  %80 = bitcast i8* %79 to i32**
  store i32* %78, i32** %80, align 8
  %81 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %58, i64 0, i32 0, i32 0, i32 0
  %82 = load i32*, i32** %81, align 8
  %83 = bitcast i32* %82 to i8*
  %84 = ptrtoint i32* %82 to i64
  %85 = load i32*, i32** %59, align 8
  %86 = bitcast i8* %75 to i64*
  %87 = ptrtoint i8* %73 to i64
  %88 = icmp eq i32* %82, %85
  br i1 %88, label %247, label %89

89:                                               ; preds = %71
  %90 = getelementptr i32, i32* %85, i64 -1
  %91 = ptrtoint i32* %90 to i64
  %92 = sub i64 %91, %84
  %93 = lshr i64 %92, 2
  %94 = add nuw nsw i64 %93, 1
  %95 = icmp ult i64 %94, 8
  br i1 %95, label %191, label %96

96:                                               ; preds = %89
  %97 = getelementptr i32, i32* %85, i64 -1
  %98 = ptrtoint i32* %97 to i64
  %99 = sub i64 %98, %84
  %100 = lshr i64 %99, 2
  %101 = add i64 %99, 4
  %102 = and i64 %101, -4
  %103 = getelementptr i8, i8* %73, i64 %102
  %104 = add nuw nsw i64 %100, 1
  %105 = getelementptr i32, i32* %82, i64 %104
  %106 = bitcast i32* %105 to i8*
  %107 = icmp ult i8* %73, %106
  %108 = icmp ugt i8* %103, %83
  %109 = and i1 %107, %108
  br i1 %109, label %191, label %110

110:                                              ; preds = %96
  %111 = and i64 %94, 9223372036854775800
  %112 = getelementptr i32, i32* %74, i64 %111
  %113 = getelementptr i32, i32* %82, i64 %111
  %114 = add nsw i64 %111, -8
  %115 = lshr exact i64 %114, 3
  %116 = add nuw nsw i64 %115, 1
  %117 = and i64 %116, 3
  %118 = icmp ult i64 %114, 24
  br i1 %118, label %170, label %119

119:                                              ; preds = %110
  %120 = sub nsw i64 %116, %117
  br label %121

121:                                              ; preds = %121, %119
  %122 = phi i64 [ 0, %119 ], [ %167, %121 ]
  %123 = phi i64 [ %120, %119 ], [ %168, %121 ]
  %124 = getelementptr i32, i32* %74, i64 %122
  %125 = getelementptr i32, i32* %82, i64 %122
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 4, !alias.scope !15
  %128 = getelementptr i32, i32* %125, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !alias.scope !15
  %131 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %127, <4 x i32>* %131, align 4, !alias.scope !18, !noalias !15
  %132 = getelementptr i32, i32* %124, i64 4
  %133 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %133, align 4, !alias.scope !18, !noalias !15
  %134 = or i64 %122, 8
  %135 = getelementptr i32, i32* %74, i64 %134
  %136 = getelementptr i32, i32* %82, i64 %134
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4, !alias.scope !15
  %139 = getelementptr i32, i32* %136, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4, !alias.scope !15
  %142 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> %138, <4 x i32>* %142, align 4, !alias.scope !18, !noalias !15
  %143 = getelementptr i32, i32* %135, i64 4
  %144 = bitcast i32* %143 to <4 x i32>*
  store <4 x i32> %141, <4 x i32>* %144, align 4, !alias.scope !18, !noalias !15
  %145 = or i64 %122, 16
  %146 = getelementptr i32, i32* %74, i64 %145
  %147 = getelementptr i32, i32* %82, i64 %145
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4, !alias.scope !15
  %150 = getelementptr i32, i32* %147, i64 4
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 4, !alias.scope !15
  %153 = bitcast i32* %146 to <4 x i32>*
  store <4 x i32> %149, <4 x i32>* %153, align 4, !alias.scope !18, !noalias !15
  %154 = getelementptr i32, i32* %146, i64 4
  %155 = bitcast i32* %154 to <4 x i32>*
  store <4 x i32> %152, <4 x i32>* %155, align 4, !alias.scope !18, !noalias !15
  %156 = or i64 %122, 24
  %157 = getelementptr i32, i32* %74, i64 %156
  %158 = getelementptr i32, i32* %82, i64 %156
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 4, !alias.scope !15
  %161 = getelementptr i32, i32* %158, i64 4
  %162 = bitcast i32* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 4, !alias.scope !15
  %164 = bitcast i32* %157 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %164, align 4, !alias.scope !18, !noalias !15
  %165 = getelementptr i32, i32* %157, i64 4
  %166 = bitcast i32* %165 to <4 x i32>*
  store <4 x i32> %163, <4 x i32>* %166, align 4, !alias.scope !18, !noalias !15
  %167 = add i64 %122, 32
  %168 = add i64 %123, -4
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %121, !llvm.loop !20

170:                                              ; preds = %121, %110
  %171 = phi i64 [ 0, %110 ], [ %167, %121 ]
  %172 = icmp eq i64 %117, 0
  br i1 %172, label %189, label %173

173:                                              ; preds = %170, %173
  %174 = phi i64 [ %186, %173 ], [ %171, %170 ]
  %175 = phi i64 [ %187, %173 ], [ %117, %170 ]
  %176 = getelementptr i32, i32* %74, i64 %174
  %177 = getelementptr i32, i32* %82, i64 %174
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 4, !alias.scope !15
  %180 = getelementptr i32, i32* %177, i64 4
  %181 = bitcast i32* %180 to <4 x i32>*
  %182 = load <4 x i32>, <4 x i32>* %181, align 4, !alias.scope !15
  %183 = bitcast i32* %176 to <4 x i32>*
  store <4 x i32> %179, <4 x i32>* %183, align 4, !alias.scope !18, !noalias !15
  %184 = getelementptr i32, i32* %176, i64 4
  %185 = bitcast i32* %184 to <4 x i32>*
  store <4 x i32> %182, <4 x i32>* %185, align 4, !alias.scope !18, !noalias !15
  %186 = add i64 %174, 8
  %187 = add i64 %175, -1
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %173, !llvm.loop !22

189:                                              ; preds = %173, %170
  %190 = icmp eq i64 %94, %111
  br i1 %190, label %244, label %191

191:                                              ; preds = %189, %96, %89
  %192 = phi i32* [ %74, %96 ], [ %74, %89 ], [ %112, %189 ]
  %193 = phi i32* [ %82, %96 ], [ %82, %89 ], [ %113, %189 ]
  %194 = ptrtoint i32* %193 to i64
  %195 = getelementptr i32, i32* %85, i64 -1
  %196 = ptrtoint i32* %195 to i64
  %197 = sub i64 %196, %194
  %198 = lshr i64 %197, 2
  %199 = add nuw nsw i64 %198, 1
  %200 = and i64 %199, 7
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %211, label %202

202:                                              ; preds = %191, %202
  %203 = phi i32* [ %208, %202 ], [ %192, %191 ]
  %204 = phi i32* [ %207, %202 ], [ %193, %191 ]
  %205 = phi i64 [ %209, %202 ], [ %200, %191 ]
  %206 = load i32, i32* %204, align 4
  store i32 %206, i32* %203, align 4
  %207 = getelementptr inbounds i32, i32* %204, i64 1
  %208 = getelementptr inbounds i32, i32* %203, i64 1
  %209 = add i64 %205, -1
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %211, label %202, !llvm.loop !24

211:                                              ; preds = %202, %191
  %212 = phi i32* [ undef, %191 ], [ %208, %202 ]
  %213 = phi i32* [ %192, %191 ], [ %208, %202 ]
  %214 = phi i32* [ %193, %191 ], [ %207, %202 ]
  %215 = icmp ult i64 %197, 28
  br i1 %215, label %244, label %216

216:                                              ; preds = %211, %216
  %217 = phi i32* [ %242, %216 ], [ %213, %211 ]
  %218 = phi i32* [ %241, %216 ], [ %214, %211 ]
  %219 = load i32, i32* %218, align 4
  store i32 %219, i32* %217, align 4
  %220 = getelementptr inbounds i32, i32* %218, i64 1
  %221 = getelementptr inbounds i32, i32* %217, i64 1
  %222 = load i32, i32* %220, align 4
  store i32 %222, i32* %221, align 4
  %223 = getelementptr inbounds i32, i32* %218, i64 2
  %224 = getelementptr inbounds i32, i32* %217, i64 2
  %225 = load i32, i32* %223, align 4
  store i32 %225, i32* %224, align 4
  %226 = getelementptr inbounds i32, i32* %218, i64 3
  %227 = getelementptr inbounds i32, i32* %217, i64 3
  %228 = load i32, i32* %226, align 4
  store i32 %228, i32* %227, align 4
  %229 = getelementptr inbounds i32, i32* %218, i64 4
  %230 = getelementptr inbounds i32, i32* %217, i64 4
  %231 = load i32, i32* %229, align 4
  store i32 %231, i32* %230, align 4
  %232 = getelementptr inbounds i32, i32* %218, i64 5
  %233 = getelementptr inbounds i32, i32* %217, i64 5
  %234 = load i32, i32* %232, align 4
  store i32 %234, i32* %233, align 4
  %235 = getelementptr inbounds i32, i32* %218, i64 6
  %236 = getelementptr inbounds i32, i32* %217, i64 6
  %237 = load i32, i32* %235, align 4
  store i32 %237, i32* %236, align 4
  %238 = getelementptr inbounds i32, i32* %218, i64 7
  %239 = getelementptr inbounds i32, i32* %217, i64 7
  %240 = load i32, i32* %238, align 4
  store i32 %240, i32* %239, align 4
  %241 = getelementptr inbounds i32, i32* %218, i64 8
  %242 = getelementptr inbounds i32, i32* %217, i64 8
  %243 = icmp eq i32* %241, %85
  br i1 %243, label %244, label %216, !llvm.loop !25

244:                                              ; preds = %211, %216, %189
  %245 = phi i32* [ %112, %189 ], [ %212, %211 ], [ %242, %216 ]
  %246 = ptrtoint i32* %245 to i64
  br label %247

247:                                              ; preds = %244, %71
  %248 = phi i64 [ %87, %71 ], [ %246, %244 ]
  store i64 %248, i64* %86, align 8
  br label %249

249:                                              ; preds = %55, %247
  %250 = bitcast %"class.sh::TVector"** %30 to i8**
  store i8* %57, i8** %250, align 8
  %251 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10
  %252 = bitcast i8* %57 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = bitcast %"class.sh::TSpan"* %251 to i64*
  store i64 %253, i64* %254, align 8
  %255 = getelementptr inbounds i8, i8* %57, i64 8
  %256 = bitcast i8* %255 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = load i64, i64* %252, align 8
  %259 = sub i64 %257, %258
  %260 = ashr exact i64 %259, 2
  br label %269

261:                                              ; preds = %2
  %262 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 10
  %263 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10
  %264 = bitcast %"class.sh::TSpan"* %262 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = bitcast %"class.sh::TSpan"* %263 to i64*
  store i64 %265, i64* %266, align 8
  %267 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 10, i32 1
  %268 = load i64, i64* %267, align 8
  br label %269

269:                                              ; preds = %261, %249
  %270 = phi i64 [ %268, %261 ], [ %260, %249 ]
  %271 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  store i64 %270, i64* %271, align 8
  ret %"class.sh::TType"* %0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh5TType16canBeConstructedEv(%"class.sh::TType"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %4 [
    i32 1, label %5
    i32 3, label %5
    i32 4, label %5
    i32 5, label %5
    i32 90, label %5
  ]

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %1, %1, %1, %1, %1, %4
  %6 = phi i1 [ false, %4 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK2sh5TType24getBuiltInTypeNameStringEv(%"class.sh::TType"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  %3 = load i8, i8* %2, align 8
  %4 = icmp ugt i8 %3, 1
  br i1 %4, label %5, label %36

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  %7 = load i8, i8* %6, align 1
  %8 = icmp ugt i8 %7, 1
  br i1 %8, label %9, label %19

9:                                                ; preds = %5
  switch i8 %3, label %68 [
    i8 2, label %10
    i8 3, label %13
    i8 4, label %16
  ]

10:                                               ; preds = %9
  %11 = add i8 %7, -2
  %12 = icmp ult i8 %11, 3
  br i1 %12, label %40, label %68

13:                                               ; preds = %9
  %14 = add i8 %7, -2
  %15 = icmp ult i8 %14, 3
  br i1 %15, label %44, label %68

16:                                               ; preds = %9
  %17 = add i8 %7, -2
  %18 = icmp ult i8 %17, 3
  br i1 %18, label %48, label %68

19:                                               ; preds = %5
  %20 = icmp eq i8 %7, 1
  br i1 %20, label %21, label %36

21:                                               ; preds = %19
  %22 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  %23 = load i32, i32* %22, align 8
  switch i32 %23, label %68 [
    i32 1, label %24
    i32 3, label %27
    i32 5, label %30
    i32 4, label %33
  ]

24:                                               ; preds = %21
  %25 = add i8 %3, -2
  %26 = icmp ult i8 %25, 3
  br i1 %26, label %52, label %68

27:                                               ; preds = %21
  %28 = add i8 %3, -2
  %29 = icmp ult i8 %28, 3
  br i1 %29, label %56, label %68

30:                                               ; preds = %21
  %31 = add i8 %3, -2
  %32 = icmp ult i8 %31, 3
  br i1 %32, label %60, label %68

33:                                               ; preds = %21
  %34 = add i8 %3, -2
  %35 = icmp ult i8 %34, 3
  br i1 %35, label %64, label %68

36:                                               ; preds = %1, %19
  %37 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = tail call i8* @_ZN2sh14getBasicStringENS_10TBasicTypeE(i32 %38) #15
  br label %68

40:                                               ; preds = %10
  %41 = sext i8 %11 to i64
  %42 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv, i64 0, i64 %41
  %43 = load i8*, i8** %42, align 8
  ret i8* %43

44:                                               ; preds = %13
  %45 = sext i8 %14 to i64
  %46 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv.95, i64 0, i64 %45
  %47 = load i8*, i8** %46, align 8
  ret i8* %47

48:                                               ; preds = %16
  %49 = sext i8 %17 to i64
  %50 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv.96, i64 0, i64 %49
  %51 = load i8*, i8** %50, align 8
  ret i8* %51

52:                                               ; preds = %24
  %53 = sext i8 %25 to i64
  %54 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv.97, i64 0, i64 %53
  %55 = load i8*, i8** %54, align 8
  ret i8* %55

56:                                               ; preds = %27
  %57 = sext i8 %28 to i64
  %58 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv.98, i64 0, i64 %57
  %59 = load i8*, i8** %58, align 8
  ret i8* %59

60:                                               ; preds = %30
  %61 = sext i8 %31 to i64
  %62 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv.99, i64 0, i64 %61
  %63 = load i8*, i8** %62, align 8
  ret i8* %63

64:                                               ; preds = %33
  %65 = sext i8 %34 to i64
  %66 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table._ZNK2sh5TType24getBuiltInTypeNameStringEv.100, i64 0, i64 %65
  %67 = load i8*, i8** %66, align 8
  ret i8* %67

68:                                               ; preds = %33, %30, %27, %24, %16, %13, %10, %21, %9, %36
  %69 = phi i8* [ %39, %36 ], [ null, %9 ], [ null, %21 ], [ null, %10 ], [ null, %13 ], [ null, %16 ], [ null, %24 ], [ null, %27 ], [ null, %30 ], [ null, %33 ]
  ret i8* %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2sh5TType23getDeepestStructNestingEv(%"class.sh::TType"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %3 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %2, align 8
  %4 = icmp eq %"class.sh::TStructure"* %3, null
  br i1 %4, label %46, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %3, i64 0, i32 2, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %46

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %3, i64 0, i32 2
  %11 = bitcast %"class.sh::TFieldListCollection"* %10 to %"class.std::__1::vector.2"**
  %12 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %12, i64 0, i32 0, i32 1
  %14 = bitcast %"class.sh::TField"*** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.std::__1::vector.2"* %12 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %15, %17
  br i1 %18, label %44, label %19

19:                                               ; preds = %9, %19
  %20 = phi %"class.std::__1::vector.2"* [ %33, %19 ], [ %12, %9 ]
  %21 = phi i64 [ %32, %19 ], [ 0, %9 ]
  %22 = phi i32 [ %31, %19 ], [ 0, %9 ]
  %23 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %20, i64 0, i32 0, i32 0
  %24 = load %"class.sh::TField"**, %"class.sh::TField"*** %23, align 8
  %25 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %24, i64 %21
  %26 = load %"class.sh::TField"*, %"class.sh::TField"** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %26, i64 0, i32 0
  %28 = load %"class.sh::TType"*, %"class.sh::TType"** %27, align 8
  %29 = tail call i32 @_ZNK2sh5TType23getDeepestStructNestingEv(%"class.sh::TType"* %28) #15
  %30 = icmp slt i32 %22, %29
  %31 = select i1 %30, i32 %29, i32 %22
  %32 = add nuw i64 %21, 1
  %33 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %11, align 8
  %34 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %33, i64 0, i32 0, i32 1
  %35 = bitcast %"class.sh::TField"*** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = bitcast %"class.std::__1::vector.2"* %33 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = sub i64 %36, %38
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %32, %40
  br i1 %41, label %19, label %42

42:                                               ; preds = %19
  %43 = add i32 %31, 1
  br label %44

44:                                               ; preds = %42, %9
  %45 = phi i32 [ 1, %9 ], [ %43, %42 ]
  store i32 %45, i32* %6, align 8
  br label %46

46:                                               ; preds = %44, %5, %1
  %47 = phi i32 [ 0, %1 ], [ %7, %5 ], [ %45, %44 ]
  ret i32 %47
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2sh20TFieldListCollection14deepestNestingEv(%"class.sh::TFieldListCollection"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sh::TFieldListCollection", %"class.sh::TFieldListCollection"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %41

5:                                                ; preds = %1
  %6 = bitcast %"class.sh::TFieldListCollection"* %0 to %"class.std::__1::vector.2"**
  %7 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %7, i64 0, i32 0, i32 1
  %9 = bitcast %"class.sh::TField"*** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.2"* %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %10, %12
  br i1 %13, label %39, label %14

14:                                               ; preds = %5, %14
  %15 = phi %"class.std::__1::vector.2"* [ %28, %14 ], [ %7, %5 ]
  %16 = phi i64 [ %27, %14 ], [ 0, %5 ]
  %17 = phi i32 [ %26, %14 ], [ 0, %5 ]
  %18 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %15, i64 0, i32 0, i32 0
  %19 = load %"class.sh::TField"**, %"class.sh::TField"*** %18, align 8
  %20 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %19, i64 %16
  %21 = load %"class.sh::TField"*, %"class.sh::TField"** %20, align 8
  %22 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %21, i64 0, i32 0
  %23 = load %"class.sh::TType"*, %"class.sh::TType"** %22, align 8
  %24 = tail call i32 @_ZNK2sh5TType23getDeepestStructNestingEv(%"class.sh::TType"* %23) #15
  %25 = icmp slt i32 %17, %24
  %26 = select i1 %25, i32 %24, i32 %17
  %27 = add nuw i64 %16, 1
  %28 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %6, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %28, i64 0, i32 0, i32 1
  %30 = bitcast %"class.sh::TField"*** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.std::__1::vector.2"* %28 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %31, %33
  %35 = ashr exact i64 %34, 3
  %36 = icmp ult i64 %27, %35
  br i1 %36, label %14, label %37

37:                                               ; preds = %14
  %38 = add i32 %26, 1
  br label %39

39:                                               ; preds = %37, %5
  %40 = phi i32 [ 1, %5 ], [ %38, %37 ]
  store i32 %40, i32* %2, align 8
  br label %41

41:                                               ; preds = %39, %1
  %42 = phi i32 [ %40, %39 ], [ %3, %1 ]
  ret i32 %42
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh5TType16isNamelessStructEv(%"class.sh::TType"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %3 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %2, align 8
  %4 = icmp eq %"class.sh::TStructure"* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %3, i64 0, i32 0, i32 2
  %7 = load i8, i8* %6, align 4
  %8 = icmp eq i8 %7, 3
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh5TType27isStructureContainingArraysEv(%"class.sh::TType"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %3 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %2, align 8
  %4 = icmp eq %"class.sh::TStructure"* %3, null
  br i1 %4, label %27, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %3, i64 0, i32 2
  %7 = bitcast %"class.sh::TFieldListCollection"* %6 to %"class.std::__1::vector.2"**
  %8 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %8, i64 0, i32 0, i32 0
  %10 = load %"class.sh::TField"**, %"class.sh::TField"*** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %8, i64 0, i32 0, i32 1
  %12 = load %"class.sh::TField"**, %"class.sh::TField"*** %11, align 8
  %13 = icmp eq %"class.sh::TField"** %10, %12
  br i1 %13, label %27, label %16

14:                                               ; preds = %24
  %15 = icmp eq %"class.sh::TField"** %26, %12
  br i1 %15, label %27, label %16

16:                                               ; preds = %5, %14
  %17 = phi %"class.sh::TField"** [ %26, %14 ], [ %10, %5 ]
  %18 = load %"class.sh::TField"*, %"class.sh::TField"** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %18, i64 0, i32 0
  %20 = load %"class.sh::TType"*, %"class.sh::TType"** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %20, i64 0, i32 10, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %16
  %25 = tail call zeroext i1 @_ZNK2sh5TType27isStructureContainingArraysEv(%"class.sh::TType"* %20) #15
  %26 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %17, i64 1
  br i1 %25, label %27, label %14

27:                                               ; preds = %24, %14, %16, %5, %1
  %28 = phi i1 [ false, %1 ], [ false, %5 ], [ true, %24 ], [ false, %14 ], [ true, %16 ]
  ret i1 %28
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh20TFieldListCollection14containsArraysEv(%"class.sh::TFieldListCollection"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = bitcast %"class.sh::TFieldListCollection"* %0 to %"class.std::__1::vector.2"**
  %3 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.sh::TField"**, %"class.sh::TField"*** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %3, i64 0, i32 0, i32 1
  %7 = load %"class.sh::TField"**, %"class.sh::TField"*** %6, align 8
  %8 = icmp eq %"class.sh::TField"** %5, %7
  br i1 %8, label %22, label %11

9:                                                ; preds = %19
  %10 = icmp eq %"class.sh::TField"** %21, %7
  br i1 %10, label %22, label %11

11:                                               ; preds = %1, %9
  %12 = phi %"class.sh::TField"** [ %21, %9 ], [ %5, %1 ]
  %13 = load %"class.sh::TField"*, %"class.sh::TField"** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %13, i64 0, i32 0
  %15 = load %"class.sh::TType"*, %"class.sh::TType"** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %15, i64 0, i32 10, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %11
  %20 = tail call zeroext i1 @_ZNK2sh5TType27isStructureContainingArraysEv(%"class.sh::TType"* %15)
  %21 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %12, i64 1
  br i1 %20, label %22, label %9

22:                                               ; preds = %19, %9, %11, %1
  %23 = phi i1 [ false, %1 ], [ true, %11 ], [ false, %9 ], [ true, %19 ]
  ret i1 %23
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh5TType29isStructureContainingMatricesEv(%"class.sh::TType"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %3 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %2, align 8
  %4 = icmp eq %"class.sh::TStructure"* %3, null
  br i1 %4, label %31, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %3, i64 0, i32 2
  %7 = bitcast %"class.sh::TFieldListCollection"* %6 to %"class.std::__1::vector.2"**
  %8 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %8, i64 0, i32 0, i32 0
  %10 = load %"class.sh::TField"**, %"class.sh::TField"*** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %8, i64 0, i32 0, i32 1
  %12 = load %"class.sh::TField"**, %"class.sh::TField"*** %11, align 8
  %13 = icmp eq %"class.sh::TField"** %10, %12
  br i1 %13, label %31, label %16

14:                                               ; preds = %28
  %15 = icmp eq %"class.sh::TField"** %30, %12
  br i1 %15, label %31, label %16

16:                                               ; preds = %5, %14
  %17 = phi %"class.sh::TField"** [ %30, %14 ], [ %10, %5 ]
  %18 = load %"class.sh::TField"*, %"class.sh::TField"** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %18, i64 0, i32 0
  %20 = load %"class.sh::TType"*, %"class.sh::TType"** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %20, i64 0, i32 8
  %22 = load i8, i8* %21, align 8
  %23 = icmp ugt i8 %22, 1
  br i1 %23, label %24, label %28

24:                                               ; preds = %16
  %25 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %20, i64 0, i32 9
  %26 = load i8, i8* %25, align 1
  %27 = icmp ugt i8 %26, 1
  br i1 %27, label %31, label %28

28:                                               ; preds = %16, %24
  %29 = tail call zeroext i1 @_ZNK2sh5TType29isStructureContainingMatricesEv(%"class.sh::TType"* %20) #15
  %30 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %17, i64 1
  br i1 %29, label %31, label %14

31:                                               ; preds = %24, %28, %14, %5, %1
  %32 = phi i1 [ false, %1 ], [ false, %5 ], [ true, %24 ], [ true, %28 ], [ false, %14 ]
  ret i1 %32
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh20TFieldListCollection16containsMatricesEv(%"class.sh::TFieldListCollection"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = bitcast %"class.sh::TFieldListCollection"* %0 to %"class.std::__1::vector.2"**
  %3 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.sh::TField"**, %"class.sh::TField"*** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %3, i64 0, i32 0, i32 1
  %7 = load %"class.sh::TField"**, %"class.sh::TField"*** %6, align 8
  %8 = icmp eq %"class.sh::TField"** %5, %7
  br i1 %8, label %26, label %11

9:                                                ; preds = %23
  %10 = icmp eq %"class.sh::TField"** %25, %7
  br i1 %10, label %26, label %11

11:                                               ; preds = %1, %9
  %12 = phi %"class.sh::TField"** [ %25, %9 ], [ %5, %1 ]
  %13 = load %"class.sh::TField"*, %"class.sh::TField"** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %13, i64 0, i32 0
  %15 = load %"class.sh::TType"*, %"class.sh::TType"** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %15, i64 0, i32 8
  %17 = load i8, i8* %16, align 8
  %18 = icmp ugt i8 %17, 1
  br i1 %18, label %19, label %23

19:                                               ; preds = %11
  %20 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %15, i64 0, i32 9
  %21 = load i8, i8* %20, align 1
  %22 = icmp ugt i8 %21, 1
  br i1 %22, label %26, label %23

23:                                               ; preds = %11, %19
  %24 = tail call zeroext i1 @_ZNK2sh5TType29isStructureContainingMatricesEv(%"class.sh::TType"* %15)
  %25 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %12, i64 1
  br i1 %24, label %26, label %9

26:                                               ; preds = %19, %23, %9, %1
  %27 = phi i1 [ false, %1 ], [ false, %9 ], [ true, %23 ], [ true, %19 ]
  ret i1 %27
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh5TType25isStructureContainingTypeENS_10TBasicTypeE(%"class.sh::TType"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %4 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %3, align 8
  %5 = icmp eq %"class.sh::TStructure"* %4, null
  br i1 %5, label %28, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %4, i64 0, i32 2
  %8 = bitcast %"class.sh::TFieldListCollection"* %7 to %"class.std::__1::vector.2"**
  %9 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %9, i64 0, i32 0, i32 0
  %11 = load %"class.sh::TField"**, %"class.sh::TField"*** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %9, i64 0, i32 0, i32 1
  %13 = load %"class.sh::TField"**, %"class.sh::TField"*** %12, align 8
  %14 = icmp eq %"class.sh::TField"** %11, %13
  br i1 %14, label %28, label %17

15:                                               ; preds = %25
  %16 = icmp eq %"class.sh::TField"** %27, %13
  br i1 %16, label %28, label %17

17:                                               ; preds = %6, %15
  %18 = phi %"class.sh::TField"** [ %27, %15 ], [ %11, %6 ]
  %19 = load %"class.sh::TField"*, %"class.sh::TField"** %18, align 8
  %20 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %19, i64 0, i32 0
  %21 = load %"class.sh::TType"*, %"class.sh::TType"** %20, align 8
  %22 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %21, i64 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, %1
  br i1 %24, label %28, label %25

25:                                               ; preds = %17
  %26 = tail call zeroext i1 @_ZNK2sh5TType25isStructureContainingTypeENS_10TBasicTypeE(%"class.sh::TType"* %21, i32 %1) #15
  %27 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %18, i64 1
  br i1 %26, label %28, label %15

28:                                               ; preds = %17, %25, %15, %6, %2
  %29 = phi i1 [ false, %2 ], [ false, %6 ], [ true, %17 ], [ true, %25 ], [ false, %15 ]
  ret i1 %29
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh20TFieldListCollection12containsTypeENS_10TBasicTypeE(%"class.sh::TFieldListCollection"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = bitcast %"class.sh::TFieldListCollection"* %0 to %"class.std::__1::vector.2"**
  %4 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %4, i64 0, i32 0, i32 0
  %6 = load %"class.sh::TField"**, %"class.sh::TField"*** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %4, i64 0, i32 0, i32 1
  %8 = load %"class.sh::TField"**, %"class.sh::TField"*** %7, align 8
  %9 = icmp eq %"class.sh::TField"** %6, %8
  br i1 %9, label %23, label %12

10:                                               ; preds = %20
  %11 = icmp eq %"class.sh::TField"** %22, %8
  br i1 %11, label %23, label %12

12:                                               ; preds = %2, %10
  %13 = phi %"class.sh::TField"** [ %22, %10 ], [ %6, %2 ]
  %14 = load %"class.sh::TField"*, %"class.sh::TField"** %13, align 8
  %15 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %14, i64 0, i32 0
  %16 = load %"class.sh::TType"*, %"class.sh::TType"** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %16, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, %1
  br i1 %19, label %23, label %20

20:                                               ; preds = %12
  %21 = tail call zeroext i1 @_ZNK2sh5TType25isStructureContainingTypeENS_10TBasicTypeE(%"class.sh::TType"* %16, i32 %1)
  %22 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %13, i64 1
  br i1 %21, label %23, label %10

23:                                               ; preds = %12, %20, %10, %2
  %24 = phi i1 [ false, %2 ], [ false, %10 ], [ true, %20 ], [ true, %12 ]
  ret i1 %24
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh5TType29isStructureContainingSamplersEv(%"class.sh::TType"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %3 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %2, align 8
  %4 = icmp eq %"class.sh::TStructure"* %3, null
  br i1 %4, label %28, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %3, i64 0, i32 2
  %7 = bitcast %"class.sh::TFieldListCollection"* %6 to %"class.std::__1::vector.2"**
  %8 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %8, i64 0, i32 0, i32 0
  %10 = load %"class.sh::TField"**, %"class.sh::TField"*** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %8, i64 0, i32 0, i32 1
  %12 = load %"class.sh::TField"**, %"class.sh::TField"*** %11, align 8
  %13 = icmp eq %"class.sh::TField"** %10, %12
  br i1 %13, label %28, label %16

14:                                               ; preds = %25
  %15 = icmp eq %"class.sh::TField"** %27, %12
  br i1 %15, label %28, label %16

16:                                               ; preds = %5, %14
  %17 = phi %"class.sh::TField"** [ %27, %14 ], [ %10, %5 ]
  %18 = load %"class.sh::TField"*, %"class.sh::TField"** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %18, i64 0, i32 0
  %20 = load %"class.sh::TType"*, %"class.sh::TType"** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = add i32 %22, -8
  %24 = icmp ult i32 %23, 43
  br i1 %24, label %28, label %25

25:                                               ; preds = %16
  %26 = tail call zeroext i1 @_ZNK2sh5TType29isStructureContainingSamplersEv(%"class.sh::TType"* %20) #15
  %27 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %17, i64 1
  br i1 %26, label %28, label %14

28:                                               ; preds = %16, %25, %14, %5, %1
  %29 = phi i1 [ false, %1 ], [ false, %5 ], [ true, %16 ], [ true, %25 ], [ false, %14 ]
  ret i1 %29
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh20TFieldListCollection16containsSamplersEv(%"class.sh::TFieldListCollection"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = bitcast %"class.sh::TFieldListCollection"* %0 to %"class.std::__1::vector.2"**
  %3 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.sh::TField"**, %"class.sh::TField"*** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %3, i64 0, i32 0, i32 1
  %7 = load %"class.sh::TField"**, %"class.sh::TField"*** %6, align 8
  %8 = icmp eq %"class.sh::TField"** %5, %7
  br i1 %8, label %23, label %11

9:                                                ; preds = %20
  %10 = icmp eq %"class.sh::TField"** %22, %7
  br i1 %10, label %23, label %11

11:                                               ; preds = %1, %9
  %12 = phi %"class.sh::TField"** [ %22, %9 ], [ %5, %1 ]
  %13 = load %"class.sh::TField"*, %"class.sh::TField"** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %13, i64 0, i32 0
  %15 = load %"class.sh::TType"*, %"class.sh::TType"** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %15, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = add i32 %17, -8
  %19 = icmp ult i32 %18, 43
  br i1 %19, label %23, label %20

20:                                               ; preds = %11
  %21 = tail call zeroext i1 @_ZNK2sh5TType29isStructureContainingSamplersEv(%"class.sh::TType"* %15)
  %22 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %12, i64 1
  br i1 %21, label %23, label %9

23:                                               ; preds = %11, %20, %9, %1
  %24 = phi i1 [ false, %1 ], [ false, %9 ], [ true, %20 ], [ true, %11 ]
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2sh5TType27canReplaceWithConstantUnionEv(%"class.sh::TType"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %78

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %7 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %6, align 8
  %8 = icmp eq %"class.sh::TStructure"* %7, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %5
  %10 = tail call zeroext i1 @_ZNK2sh5TType27isStructureContainingArraysEv(%"class.sh::TType"* %0)
  br i1 %10, label %78, label %11

11:                                               ; preds = %9
  %12 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 90
  br i1 %14, label %15, label %22

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %7, i64 0, i32 2, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %75

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %7, i64 0, i32 2
  %21 = tail call i64 @_ZNK2sh20TFieldListCollection19calculateObjectSizeEv(%"class.sh::TFieldListCollection"* %20) #15
  store i64 %21, i64* %16, align 8
  br label %30

22:                                               ; preds = %11
  %23 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  %24 = load i8, i8* %23, align 8
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = mul nuw nsw i64 %28, %25
  br label %30

30:                                               ; preds = %22, %19
  %31 = phi i64 [ %29, %22 ], [ %21, %19 ]
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %78, label %33

33:                                               ; preds = %30
  %34 = load i64, i64* %2, align 8
  %35 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = getelementptr inbounds i32, i32* %36, i64 %34
  %38 = icmp eq i64 %34, 0
  br i1 %38, label %75, label %39

39:                                               ; preds = %33
  %40 = shl nsw i64 %34, 2
  %41 = add i64 %40, -4
  %42 = and i64 %41, 4
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %52

44:                                               ; preds = %39
  %45 = load i32, i32* %36, align 4
  %46 = zext i32 %45 to i64
  %47 = udiv i64 2147483647, %31
  %48 = icmp ult i64 %47, %46
  %49 = mul i64 %31, %46
  %50 = select i1 %48, i64 2147483647, i64 %49
  %51 = getelementptr inbounds i32, i32* %36, i64 1
  br label %52

52:                                               ; preds = %44, %39
  %53 = phi i64 [ undef, %39 ], [ %50, %44 ]
  %54 = phi i32* [ %36, %39 ], [ %51, %44 ]
  %55 = phi i64 [ %31, %39 ], [ %50, %44 ]
  %56 = icmp eq i64 %41, 0
  br i1 %56, label %75, label %57

57:                                               ; preds = %52, %57
  %58 = phi i32* [ %73, %57 ], [ %54, %52 ]
  %59 = phi i64 [ %72, %57 ], [ %55, %52 ]
  %60 = load i32, i32* %58, align 4
  %61 = zext i32 %60 to i64
  %62 = udiv i64 2147483647, %59
  %63 = icmp ult i64 %62, %61
  %64 = mul i64 %59, %61
  %65 = select i1 %63, i64 2147483647, i64 %64
  %66 = getelementptr inbounds i32, i32* %58, i64 1
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i64
  %69 = udiv i64 2147483647, %65
  %70 = icmp ult i64 %69, %68
  %71 = mul i64 %65, %68
  %72 = select i1 %70, i64 2147483647, i64 %71
  %73 = getelementptr inbounds i32, i32* %58, i64 2
  %74 = icmp eq i32* %73, %37
  br i1 %74, label %75, label %57

75:                                               ; preds = %52, %57, %15, %33
  %76 = phi i64 [ %31, %33 ], [ %17, %15 ], [ %53, %52 ], [ %72, %57 ]
  %77 = icmp ult i64 %76, 17
  ret i1 %77

78:                                               ; preds = %1, %30, %9, %5
  %79 = phi i1 [ false, %1 ], [ true, %5 ], [ false, %9 ], [ true, %30 ]
  ret i1 %79
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 90
  br i1 %4, label %5, label %17

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %7 = bitcast %"class.sh::TStructure"** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 32
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %28

13:                                               ; preds = %5
  %14 = getelementptr inbounds i8, i8* %8, i64 24
  %15 = bitcast i8* %14 to %"class.sh::TFieldListCollection"*
  %16 = tail call i64 @_ZNK2sh20TFieldListCollection19calculateObjectSizeEv(%"class.sh::TFieldListCollection"* %15) #15
  store i64 %16, i64* %10, align 8
  br label %25

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  %19 = load i8, i8* %18, align 8
  %20 = zext i8 %19 to i64
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = mul nuw nsw i64 %23, %20
  br label %25

25:                                               ; preds = %13, %17
  %26 = phi i64 [ %24, %17 ], [ %16, %13 ]
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %72, label %28

28:                                               ; preds = %5, %25
  %29 = phi i64 [ %26, %25 ], [ %11, %5 ]
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 0
  %31 = load i32*, i32** %30, align 8
  %32 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds i32, i32* %31, i64 %33
  %35 = icmp eq i64 %33, 0
  br i1 %35, label %72, label %36

36:                                               ; preds = %28
  %37 = shl nsw i64 %33, 2
  %38 = add i64 %37, -4
  %39 = and i64 %38, 4
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %49

41:                                               ; preds = %36
  %42 = load i32, i32* %31, align 4
  %43 = zext i32 %42 to i64
  %44 = udiv i64 2147483647, %29
  %45 = icmp ult i64 %44, %43
  %46 = mul i64 %29, %43
  %47 = select i1 %45, i64 2147483647, i64 %46
  %48 = getelementptr inbounds i32, i32* %31, i64 1
  br label %49

49:                                               ; preds = %41, %36
  %50 = phi i64 [ undef, %36 ], [ %47, %41 ]
  %51 = phi i32* [ %31, %36 ], [ %48, %41 ]
  %52 = phi i64 [ %29, %36 ], [ %47, %41 ]
  %53 = icmp eq i64 %38, 0
  br i1 %53, label %72, label %54

54:                                               ; preds = %49, %54
  %55 = phi i32* [ %70, %54 ], [ %51, %49 ]
  %56 = phi i64 [ %69, %54 ], [ %52, %49 ]
  %57 = load i32, i32* %55, align 4
  %58 = zext i32 %57 to i64
  %59 = udiv i64 2147483647, %56
  %60 = icmp ult i64 %59, %58
  %61 = mul i64 %56, %58
  %62 = select i1 %60, i64 2147483647, i64 %61
  %63 = getelementptr inbounds i32, i32* %55, i64 1
  %64 = load i32, i32* %63, align 4
  %65 = zext i32 %64 to i64
  %66 = udiv i64 2147483647, %62
  %67 = icmp ult i64 %66, %65
  %68 = mul i64 %62, %65
  %69 = select i1 %67, i64 2147483647, i64 %68
  %70 = getelementptr inbounds i32, i32* %55, i64 2
  %71 = icmp eq i32* %70, %34
  br i1 %71, label %72, label %54

72:                                               ; preds = %49, %54, %28, %25
  %73 = phi i64 [ 0, %25 ], [ %29, %28 ], [ %50, %49 ], [ %69, %54 ]
  ret i64 %73
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZNK2sh5TType16buildMangledNameEv(%"class.sh::TType"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca [20 x i8], align 16
  %6 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #15
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  %11 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = load i8, i8* %10, align 8
  %13 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = shl nuw nsw i32 %15, 2
  %17 = zext i8 %12 to i32
  %18 = add nsw i32 %17, -4
  %19 = add nsw i32 %18, %16
  %20 = add nsw i32 %19, -1
  %21 = icmp ult i32 %20, 10
  %22 = trunc i32 %19 to i8
  %23 = select i1 %21, i8 47, i8 54
  %24 = add i8 %23, %22
  %25 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  store i8 1, i8* %26, align 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 %24, i64 1, i1 false) #15
  %27 = getelementptr inbounds i8, i8* %6, i64 1
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = icmp sgt i32 %29, 89
  br i1 %30, label %53, label %31

31:                                               ; preds = %1
  %32 = icmp slt i32 %29, 26
  br i1 %32, label %33, label %36

33:                                               ; preds = %31
  %34 = trunc i32 %29 to i8
  %35 = add i8 %34, 65
  br label %48

36:                                               ; preds = %31
  %37 = icmp slt i32 %29, 52
  br i1 %37, label %38, label %41

38:                                               ; preds = %36
  %39 = trunc i32 %29 to i8
  %40 = add nuw nsw i8 %39, 71
  br label %48

41:                                               ; preds = %36
  %42 = icmp slt i32 %29, 78
  %43 = trunc i32 %29 to i8
  br i1 %42, label %44, label %46

44:                                               ; preds = %41
  %45 = add nuw nsw i8 %43, 13
  br label %48

46:                                               ; preds = %41
  %47 = add nuw nsw i8 %43, 19
  br label %48

48:                                               ; preds = %46, %44, %38, %33
  %49 = phi i8 [ %47, %46 ], [ %45, %44 ], [ %40, %38 ], [ %35, %33 ]
  %50 = phi i8 [ 49, %46 ], [ 49, %44 ], [ 48, %38 ], [ 48, %33 ]
  store i8 %50, i8* %27, align 1
  %51 = getelementptr inbounds i8, i8* %6, i64 2
  store i8 3, i8* %26, align 1
  store i8 %49, i8* %51, align 2
  %52 = getelementptr inbounds i8, i8* %6, i64 3
  br label %288

53:                                               ; preds = %1
  switch i32 %29, label %290 [
    i32 90, label %54
    i32 91, label %175
  ]

54:                                               ; preds = %53
  %55 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.87, i64 0, i64 0), i64 2) #15
  %56 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %57 = bitcast %"class.sh::TStructure"** %56 to %"class.sh::TSymbol"**
  %58 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %57, align 8
  %59 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %58, i64 0, i32 2
  %60 = load i8, i8* %59, align 4
  %61 = icmp eq i8 %60, 3
  br i1 %61, label %62, label %64

62:                                               ; preds = %54
  %63 = bitcast %"class.sh::TSymbol"* %58 to i8*
  br label %73

64:                                               ; preds = %54
  %65 = call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %58) #15
  %66 = extractvalue { i8*, i64 } %65, 0
  %67 = icmp eq i8* %66, null
  %68 = select i1 %67, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.93, i64 0, i64 0), i8* %66
  %69 = call i64 @strlen(i8* %68) #15
  %70 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %68, i64 %69) #15
  %71 = bitcast %"class.sh::TStructure"** %56 to i8**
  %72 = load i8*, i8** %71, align 8
  br label %73

73:                                               ; preds = %62, %64
  %74 = phi i8* [ %63, %62 ], [ %72, %64 ]
  %75 = getelementptr inbounds i8, i8* %74, i64 24
  %76 = getelementptr inbounds i8, i8* %74, i64 48
  %77 = getelementptr inbounds i8, i8* %74, i64 71
  %78 = load i8, i8* %77, align 1
  %79 = icmp slt i8 %78, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %73
  %81 = getelementptr inbounds i8, i8* %74, i64 56
  %82 = bitcast i8* %81 to i64*
  %83 = load i64, i64* %82, align 8
  br label %86

84:                                               ; preds = %73
  %85 = zext i8 %78 to i64
  br label %86

86:                                               ; preds = %84, %80
  %87 = phi i64 [ %83, %80 ], [ %85, %84 ]
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %116

89:                                               ; preds = %86
  %90 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %90) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %90, i8 0, i64 24, i1 false) #15, !alias.scope !26
  %91 = bitcast i8* %75 to %"class.std::__1::vector.2"**
  %92 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %91, align 8, !noalias !26
  %93 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %92, i64 0, i32 0, i32 0
  %94 = load %"class.sh::TField"**, %"class.sh::TField"*** %93, align 8, !noalias !26
  %95 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %92, i64 0, i32 0, i32 1
  %96 = load %"class.sh::TField"**, %"class.sh::TField"*** %95, align 8, !noalias !26
  %97 = icmp eq %"class.sh::TField"** %94, %96
  br i1 %97, label %114, label %98

98:                                               ; preds = %89, %108
  %99 = phi %"class.sh::TField"** [ %112, %108 ], [ %94, %89 ]
  %100 = load %"class.sh::TField"*, %"class.sh::TField"** %99, align 8
  %101 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %100, i64 0, i32 0
  %102 = load %"class.sh::TType"*, %"class.sh::TType"** %101, align 8
  %103 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %102, i64 0, i32 16
  %104 = load i8*, i8** %103, align 8
  %105 = icmp eq i8* %104, null
  br i1 %105, label %106, label %108

106:                                              ; preds = %98
  %107 = call i8* @_ZNK2sh5TType16buildMangledNameEv(%"class.sh::TType"* %102) #15
  store i8* %107, i8** %103, align 8
  br label %108

108:                                              ; preds = %106, %98
  %109 = phi i8* [ %107, %106 ], [ %104, %98 ]
  %110 = call i64 @strlen(i8* %109) #15
  %111 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %2, i8* %109, i64 %110) #15
  %112 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %99, i64 1
  %113 = icmp eq %"class.sh::TField"** %112, %96
  br i1 %113, label %114, label %98

114:                                              ; preds = %108, %89
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* nonnull align 8 %90, i64 24, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %90) #15
  %115 = load i8, i8* %77, align 1
  br label %116

116:                                              ; preds = %86, %114
  %117 = phi i8 [ %78, %86 ], [ %115, %114 ]
  %118 = icmp slt i8 %117, 0
  %119 = bitcast i8* %76 to i8**
  %120 = load i8*, i8** %119, align 8
  %121 = getelementptr inbounds i8, i8* %74, i64 56
  %122 = bitcast i8* %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = zext i8 %117 to i64
  %125 = select i1 %118, i8* %120, i8* %76
  %126 = select i1 %118, i64 %123, i64 %124
  %127 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %125, i64 %126) #15
  %128 = load i8, i8* %26, align 1
  %129 = icmp slt i8 %128, 0
  br i1 %129, label %132, label %130

130:                                              ; preds = %116
  %131 = zext i8 %128 to i64
  br label %137

132:                                              ; preds = %116
  %133 = load i64, i64* %9, align 8
  %134 = and i64 %133, 9223372036854775807
  %135 = add nsw i64 %134, -1
  %136 = load i64, i64* %8, align 8
  br label %137

137:                                              ; preds = %132, %130
  %138 = phi i64 [ 22, %130 ], [ %135, %132 ]
  %139 = phi i64 [ %131, %130 ], [ %136, %132 ]
  %140 = icmp eq i64 %139, %138
  br i1 %140, label %141, label %162

141:                                              ; preds = %137
  %142 = load i8*, i8** %7, align 8
  %143 = select i1 %129, i8* %142, i8* %6
  %144 = icmp ult i64 %138, 9223372036854775783
  br i1 %144, label %145, label %154

145:                                              ; preds = %141
  %146 = add nuw nsw i64 %138, 1
  %147 = shl i64 %138, 1
  %148 = icmp ult i64 %146, %147
  %149 = select i1 %148, i64 %147, i64 %146
  %150 = icmp ult i64 %149, 23
  br i1 %150, label %154, label %151

151:                                              ; preds = %145
  %152 = add nuw i64 %149, 16
  %153 = and i64 %152, -16
  br label %154

154:                                              ; preds = %151, %145, %141
  %155 = phi i64 [ %153, %151 ], [ 23, %145 ], [ -17, %141 ]
  %156 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %157 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %156, i64 %155) #15
  %158 = icmp eq i64 %138, 0
  br i1 %158, label %160, label %159

159:                                              ; preds = %154
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %157, i8* align 1 %143, i64 %138, i1 false) #15
  br label %160

160:                                              ; preds = %159, %154
  store i8* %157, i8** %7, align 8
  %161 = or i64 %155, -9223372036854775808
  store i64 %161, i64* %9, align 8
  br label %168

162:                                              ; preds = %137
  br i1 %129, label %163, label %165

163:                                              ; preds = %162
  %164 = load i8*, i8** %7, align 8
  br label %168

165:                                              ; preds = %162
  %166 = trunc i64 %139 to i8
  %167 = add i8 %166, 1
  store i8 %167, i8* %26, align 1
  br label %171

168:                                              ; preds = %163, %160
  %169 = phi i8* [ %164, %163 ], [ %157, %160 ]
  %170 = add i64 %139, 1
  store i64 %170, i64* %8, align 8
  br label %171

171:                                              ; preds = %165, %168
  %172 = phi i8* [ %6, %165 ], [ %169, %168 ]
  %173 = getelementptr inbounds i8, i8* %172, i64 %139
  store i8 125, i8* %173, align 1
  %174 = getelementptr inbounds i8, i8* %173, i64 1
  br label %288

175:                                              ; preds = %53
  %176 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.88, i64 0, i64 0), i64 2) #15
  %177 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 12
  %178 = bitcast %"class.sh::TInterfaceBlock"** %177 to %"class.sh::TSymbol"**
  %179 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %178, align 8
  %180 = call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %179) #15
  %181 = extractvalue { i8*, i64 } %180, 0
  %182 = icmp eq i8* %181, null
  %183 = select i1 %182, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.93, i64 0, i64 0), i8* %181
  %184 = call i64 @strlen(i8* %183) #15
  %185 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %183, i64 %184) #15
  %186 = bitcast %"class.sh::TInterfaceBlock"** %177 to i8**
  %187 = load i8*, i8** %186, align 8
  %188 = getelementptr inbounds i8, i8* %187, i64 24
  %189 = getelementptr inbounds i8, i8* %187, i64 48
  %190 = getelementptr inbounds i8, i8* %187, i64 71
  %191 = load i8, i8* %190, align 1
  %192 = icmp slt i8 %191, 0
  br i1 %192, label %193, label %197

193:                                              ; preds = %175
  %194 = getelementptr inbounds i8, i8* %187, i64 56
  %195 = bitcast i8* %194 to i64*
  %196 = load i64, i64* %195, align 8
  br label %199

197:                                              ; preds = %175
  %198 = zext i8 %191 to i64
  br label %199

199:                                              ; preds = %197, %193
  %200 = phi i64 [ %196, %193 ], [ %198, %197 ]
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %202, label %229

202:                                              ; preds = %199
  %203 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %203) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %203, i8 0, i64 24, i1 false) #15, !alias.scope !29
  %204 = bitcast i8* %188 to %"class.std::__1::vector.2"**
  %205 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %204, align 8, !noalias !29
  %206 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %205, i64 0, i32 0, i32 0
  %207 = load %"class.sh::TField"**, %"class.sh::TField"*** %206, align 8, !noalias !29
  %208 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %205, i64 0, i32 0, i32 1
  %209 = load %"class.sh::TField"**, %"class.sh::TField"*** %208, align 8, !noalias !29
  %210 = icmp eq %"class.sh::TField"** %207, %209
  br i1 %210, label %227, label %211

211:                                              ; preds = %202, %221
  %212 = phi %"class.sh::TField"** [ %225, %221 ], [ %207, %202 ]
  %213 = load %"class.sh::TField"*, %"class.sh::TField"** %212, align 8
  %214 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %213, i64 0, i32 0
  %215 = load %"class.sh::TType"*, %"class.sh::TType"** %214, align 8
  %216 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %215, i64 0, i32 16
  %217 = load i8*, i8** %216, align 8
  %218 = icmp eq i8* %217, null
  br i1 %218, label %219, label %221

219:                                              ; preds = %211
  %220 = call i8* @_ZNK2sh5TType16buildMangledNameEv(%"class.sh::TType"* %215) #15
  store i8* %220, i8** %216, align 8
  br label %221

221:                                              ; preds = %219, %211
  %222 = phi i8* [ %220, %219 ], [ %217, %211 ]
  %223 = call i64 @strlen(i8* %222) #15
  %224 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %3, i8* %222, i64 %223) #15
  %225 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %212, i64 1
  %226 = icmp eq %"class.sh::TField"** %225, %209
  br i1 %226, label %227, label %211

227:                                              ; preds = %221, %202
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %189, i8* nonnull align 8 %203, i64 24, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %203) #15
  %228 = load i8, i8* %190, align 1
  br label %229

229:                                              ; preds = %199, %227
  %230 = phi i8 [ %191, %199 ], [ %228, %227 ]
  %231 = icmp slt i8 %230, 0
  %232 = bitcast i8* %189 to i8**
  %233 = load i8*, i8** %232, align 8
  %234 = getelementptr inbounds i8, i8* %187, i64 56
  %235 = bitcast i8* %234 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = zext i8 %230 to i64
  %238 = select i1 %231, i8* %233, i8* %189
  %239 = select i1 %231, i64 %236, i64 %237
  %240 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %238, i64 %239) #15
  %241 = load i8, i8* %26, align 1
  %242 = icmp slt i8 %241, 0
  br i1 %242, label %245, label %243

243:                                              ; preds = %229
  %244 = zext i8 %241 to i64
  br label %250

245:                                              ; preds = %229
  %246 = load i64, i64* %9, align 8
  %247 = and i64 %246, 9223372036854775807
  %248 = add nsw i64 %247, -1
  %249 = load i64, i64* %8, align 8
  br label %250

250:                                              ; preds = %245, %243
  %251 = phi i64 [ 22, %243 ], [ %248, %245 ]
  %252 = phi i64 [ %244, %243 ], [ %249, %245 ]
  %253 = icmp eq i64 %252, %251
  br i1 %253, label %254, label %275

254:                                              ; preds = %250
  %255 = load i8*, i8** %7, align 8
  %256 = select i1 %242, i8* %255, i8* %6
  %257 = icmp ult i64 %251, 9223372036854775783
  br i1 %257, label %258, label %267

258:                                              ; preds = %254
  %259 = add nuw nsw i64 %251, 1
  %260 = shl i64 %251, 1
  %261 = icmp ult i64 %259, %260
  %262 = select i1 %261, i64 %260, i64 %259
  %263 = icmp ult i64 %262, 23
  br i1 %263, label %267, label %264

264:                                              ; preds = %258
  %265 = add nuw i64 %262, 16
  %266 = and i64 %265, -16
  br label %267

267:                                              ; preds = %264, %258, %254
  %268 = phi i64 [ %266, %264 ], [ 23, %258 ], [ -17, %254 ]
  %269 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %270 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %269, i64 %268) #15
  %271 = icmp eq i64 %251, 0
  br i1 %271, label %273, label %272

272:                                              ; preds = %267
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %270, i8* align 1 %256, i64 %251, i1 false) #15
  br label %273

273:                                              ; preds = %272, %267
  store i8* %270, i8** %7, align 8
  %274 = or i64 %268, -9223372036854775808
  store i64 %274, i64* %9, align 8
  br label %281

275:                                              ; preds = %250
  br i1 %242, label %276, label %278

276:                                              ; preds = %275
  %277 = load i8*, i8** %7, align 8
  br label %281

278:                                              ; preds = %275
  %279 = trunc i64 %252 to i8
  %280 = add i8 %279, 1
  store i8 %280, i8* %26, align 1
  br label %284

281:                                              ; preds = %276, %273
  %282 = phi i8* [ %277, %276 ], [ %270, %273 ]
  %283 = add i64 %252, 1
  store i64 %283, i64* %8, align 8
  br label %284

284:                                              ; preds = %278, %281
  %285 = phi i8* [ %6, %278 ], [ %282, %281 ]
  %286 = getelementptr inbounds i8, i8* %285, i64 %252
  store i8 125, i8* %286, align 1
  %287 = getelementptr inbounds i8, i8* %286, i64 1
  br label %288

288:                                              ; preds = %48, %284, %171
  %289 = phi i8* [ %174, %171 ], [ %287, %284 ], [ %52, %48 ]
  store i8 0, i8* %289, align 1
  br label %290

290:                                              ; preds = %288, %53
  %291 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 0
  %292 = load i32*, i32** %291, align 8
  %293 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  %294 = load i64, i64* %293, align 8
  %295 = getelementptr inbounds i32, i32* %292, i64 %294
  %296 = icmp eq i64 %294, 0
  br i1 %296, label %299, label %297

297:                                              ; preds = %290
  %298 = getelementptr inbounds [20 x i8], [20 x i8]* %5, i64 0, i64 0
  br label %310

299:                                              ; preds = %357, %290
  %300 = load i8, i8* %26, align 1
  %301 = icmp slt i8 %300, 0
  %302 = load i8*, i8** %7, align 8
  %303 = load i64, i64* %8, align 8
  %304 = zext i8 %300 to i64
  %305 = select i1 %301, i8* %302, i8* %6
  %306 = select i1 %301, i64 %303, i64 %304
  %307 = add i64 %306, 1
  %308 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %309 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %308, i64 %307) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %309, i8* align 1 %305, i64 %307, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #15
  ret i8* %309

310:                                              ; preds = %297, %357
  %311 = phi i32* [ %292, %297 ], [ %363, %357 ]
  %312 = load i32, i32* %311, align 4
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %298) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %298, i8 -86, i64 20, i1 false)
  %313 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %298, i64 20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.89, i64 0, i64 0), i32 %312) #15
  %314 = load i8, i8* %26, align 1
  %315 = icmp slt i8 %314, 0
  br i1 %315, label %318, label %316

316:                                              ; preds = %310
  %317 = zext i8 %314 to i64
  br label %323

318:                                              ; preds = %310
  %319 = load i64, i64* %9, align 8
  %320 = and i64 %319, 9223372036854775807
  %321 = add nsw i64 %320, -1
  %322 = load i64, i64* %8, align 8
  br label %323

323:                                              ; preds = %318, %316
  %324 = phi i64 [ 22, %316 ], [ %321, %318 ]
  %325 = phi i64 [ %317, %316 ], [ %322, %318 ]
  %326 = icmp eq i64 %325, %324
  br i1 %326, label %327, label %348

327:                                              ; preds = %323
  %328 = load i8*, i8** %7, align 8
  %329 = select i1 %315, i8* %328, i8* %6
  %330 = icmp ult i64 %324, 9223372036854775783
  br i1 %330, label %331, label %340

331:                                              ; preds = %327
  %332 = add nuw nsw i64 %324, 1
  %333 = shl i64 %324, 1
  %334 = icmp ult i64 %332, %333
  %335 = select i1 %334, i64 %333, i64 %332
  %336 = icmp ult i64 %335, 23
  br i1 %336, label %340, label %337

337:                                              ; preds = %331
  %338 = add nuw i64 %335, 16
  %339 = and i64 %338, -16
  br label %340

340:                                              ; preds = %337, %331, %327
  %341 = phi i64 [ %339, %337 ], [ 23, %331 ], [ -17, %327 ]
  %342 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %343 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %342, i64 %341) #15
  %344 = icmp eq i64 %324, 0
  br i1 %344, label %346, label %345

345:                                              ; preds = %340
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %343, i8* align 1 %329, i64 %324, i1 false) #15
  br label %346

346:                                              ; preds = %345, %340
  store i8* %343, i8** %7, align 8
  %347 = or i64 %341, -9223372036854775808
  store i64 %347, i64* %9, align 8
  br label %354

348:                                              ; preds = %323
  br i1 %315, label %349, label %351

349:                                              ; preds = %348
  %350 = load i8*, i8** %7, align 8
  br label %354

351:                                              ; preds = %348
  %352 = trunc i64 %325 to i8
  %353 = add i8 %352, 1
  store i8 %353, i8* %26, align 1
  br label %357

354:                                              ; preds = %349, %346
  %355 = phi i8* [ %350, %349 ], [ %343, %346 ]
  %356 = add i64 %325, 1
  store i64 %356, i64* %8, align 8
  br label %357

357:                                              ; preds = %351, %354
  %358 = phi i8* [ %6, %351 ], [ %355, %354 ]
  %359 = getelementptr inbounds i8, i8* %358, i64 %325
  store i8 120, i8* %359, align 1
  %360 = getelementptr inbounds i8, i8* %359, i64 1
  store i8 0, i8* %360, align 1
  %361 = call i64 @strlen(i8* nonnull %298) #15
  %362 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* nonnull %298, i64 %361) #15
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %298) #15
  %363 = getelementptr inbounds i32, i32* %311, i64 1
  %364 = icmp eq i32* %363, %295
  br i1 %364, label %299, label %310
}

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK2sh20TFieldListCollection16mangledFieldListEv(%"class.sh::TFieldListCollection"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = getelementptr inbounds %"class.sh::TFieldListCollection", %"class.sh::TFieldListCollection"* %0, i64 0, i32 3
  %4 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.sh::TFieldListCollection", %"class.sh::TFieldListCollection"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  br label %13

11:                                               ; preds = %1
  %12 = zext i8 %6 to i64
  br label %13

13:                                               ; preds = %8, %11
  %14 = phi i64 [ %10, %8 ], [ %12, %11 ]
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %43

16:                                               ; preds = %13
  %17 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 24, i1 false) #15, !alias.scope !32
  %18 = bitcast %"class.sh::TFieldListCollection"* %0 to %"class.std::__1::vector.2"**
  %19 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %18, align 8, !noalias !32
  %20 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %19, i64 0, i32 0, i32 0
  %21 = load %"class.sh::TField"**, %"class.sh::TField"*** %20, align 8, !noalias !32
  %22 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %19, i64 0, i32 0, i32 1
  %23 = load %"class.sh::TField"**, %"class.sh::TField"*** %22, align 8, !noalias !32
  %24 = icmp eq %"class.sh::TField"** %21, %23
  br i1 %24, label %41, label %25

25:                                               ; preds = %16, %35
  %26 = phi %"class.sh::TField"** [ %39, %35 ], [ %21, %16 ]
  %27 = load %"class.sh::TField"*, %"class.sh::TField"** %26, align 8
  %28 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %27, i64 0, i32 0
  %29 = load %"class.sh::TType"*, %"class.sh::TType"** %28, align 8
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %29, i64 0, i32 16
  %31 = load i8*, i8** %30, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %25
  %34 = call i8* @_ZNK2sh5TType16buildMangledNameEv(%"class.sh::TType"* %29) #15
  store i8* %34, i8** %30, align 8
  br label %35

35:                                               ; preds = %25, %33
  %36 = phi i8* [ %31, %25 ], [ %34, %33 ]
  %37 = call i64 @strlen(i8* %36) #15
  %38 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %2, i8* %36, i64 %37) #15
  %39 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %26, i64 1
  %40 = icmp eq %"class.sh::TField"** %39, %23
  br i1 %40, label %41, label %25

41:                                               ; preds = %35, %16
  %42 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* nonnull align 8 %17, i64 24, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #15
  br label %43

43:                                               ; preds = %41, %13
  ret %"class.std::__1::basic_string"* %3
}

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2sh20TFieldListCollection10objectSizeEv(%"class.sh::TFieldListCollection"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sh::TFieldListCollection", %"class.sh::TFieldListCollection"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %99

5:                                                ; preds = %1
  %6 = bitcast %"class.sh::TFieldListCollection"* %0 to %"class.std::__1::vector.2"**
  %7 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %7, i64 0, i32 0, i32 0
  %9 = load %"class.sh::TField"**, %"class.sh::TField"*** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %7, i64 0, i32 0, i32 1
  %11 = load %"class.sh::TField"**, %"class.sh::TField"*** %10, align 8
  %12 = icmp eq %"class.sh::TField"** %9, %11
  br i1 %12, label %97, label %13

13:                                               ; preds = %5, %89
  %14 = phi i64 [ %94, %89 ], [ 0, %5 ]
  %15 = phi %"class.sh::TField"** [ %95, %89 ], [ %9, %5 ]
  %16 = load %"class.sh::TField"*, %"class.sh::TField"** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %16, i64 0, i32 0
  %18 = load %"class.sh::TType"*, %"class.sh::TType"** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %18, i64 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 90
  br i1 %21, label %22, label %34

22:                                               ; preds = %13
  %23 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %18, i64 0, i32 13
  %24 = bitcast %"class.sh::TStructure"** %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 32
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %45

30:                                               ; preds = %22
  %31 = getelementptr inbounds i8, i8* %25, i64 24
  %32 = bitcast i8* %31 to %"class.sh::TFieldListCollection"*
  %33 = tail call i64 @_ZNK2sh20TFieldListCollection19calculateObjectSizeEv(%"class.sh::TFieldListCollection"* %32) #15
  store i64 %33, i64* %27, align 8
  br label %42

34:                                               ; preds = %13
  %35 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %18, i64 0, i32 8
  %36 = load i8, i8* %35, align 8
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %18, i64 0, i32 9
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = mul nuw nsw i64 %40, %37
  br label %42

42:                                               ; preds = %30, %34
  %43 = phi i64 [ %41, %34 ], [ %33, %30 ]
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %89, label %45

45:                                               ; preds = %22, %42
  %46 = phi i64 [ %43, %42 ], [ %28, %22 ]
  %47 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %18, i64 0, i32 10, i32 0
  %48 = load i32*, i32** %47, align 8
  %49 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %18, i64 0, i32 10, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds i32, i32* %48, i64 %50
  %52 = icmp eq i64 %50, 0
  br i1 %52, label %89, label %53

53:                                               ; preds = %45
  %54 = shl nsw i64 %50, 2
  %55 = add i64 %54, -4
  %56 = and i64 %55, 4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %66

58:                                               ; preds = %53
  %59 = load i32, i32* %48, align 4
  %60 = zext i32 %59 to i64
  %61 = udiv i64 2147483647, %46
  %62 = icmp ult i64 %61, %60
  %63 = mul i64 %46, %60
  %64 = select i1 %62, i64 2147483647, i64 %63
  %65 = getelementptr inbounds i32, i32* %48, i64 1
  br label %66

66:                                               ; preds = %58, %53
  %67 = phi i64 [ %64, %58 ], [ undef, %53 ]
  %68 = phi i32* [ %65, %58 ], [ %48, %53 ]
  %69 = phi i64 [ %64, %58 ], [ %46, %53 ]
  %70 = icmp eq i64 %55, 0
  br i1 %70, label %89, label %71

71:                                               ; preds = %66, %71
  %72 = phi i32* [ %87, %71 ], [ %68, %66 ]
  %73 = phi i64 [ %86, %71 ], [ %69, %66 ]
  %74 = load i32, i32* %72, align 4
  %75 = zext i32 %74 to i64
  %76 = udiv i64 2147483647, %73
  %77 = icmp ult i64 %76, %75
  %78 = mul i64 %73, %75
  %79 = select i1 %77, i64 2147483647, i64 %78
  %80 = getelementptr inbounds i32, i32* %72, i64 1
  %81 = load i32, i32* %80, align 4
  %82 = zext i32 %81 to i64
  %83 = udiv i64 2147483647, %79
  %84 = icmp ult i64 %83, %82
  %85 = mul i64 %79, %82
  %86 = select i1 %84, i64 2147483647, i64 %85
  %87 = getelementptr inbounds i32, i32* %72, i64 2
  %88 = icmp eq i32* %87, %51
  br i1 %88, label %89, label %71

89:                                               ; preds = %66, %71, %45, %42
  %90 = phi i64 [ 0, %42 ], [ %46, %45 ], [ %67, %66 ], [ %86, %71 ]
  %91 = sub i64 2147483647, %14
  %92 = icmp ugt i64 %90, %91
  %93 = add i64 %90, %14
  %94 = select i1 %92, i64 2147483647, i64 %93
  %95 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %15, i64 1
  %96 = icmp eq %"class.sh::TField"** %95, %11
  br i1 %96, label %97, label %13

97:                                               ; preds = %89, %5
  %98 = phi i64 [ 0, %5 ], [ %94, %89 ]
  store i64 %98, i64* %2, align 8
  br label %99

99:                                               ; preds = %97, %1
  %100 = phi i64 [ %98, %97 ], [ %3, %1 ]
  ret i64 %100
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK2sh5TType16getLocationCountEv(%"class.sh::TType"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 90
  br i1 %4, label %5, label %32

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %7 = bitcast %"class.sh::TStructure"** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 24
  %10 = bitcast i8* %9 to %"class.std::__1::vector.2"**
  %11 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %11, i64 0, i32 0, i32 0
  %13 = load %"class.sh::TField"**, %"class.sh::TField"*** %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %11, i64 0, i32 0, i32 1
  %15 = load %"class.sh::TField"**, %"class.sh::TField"*** %14, align 8
  %16 = icmp eq %"class.sh::TField"** %13, %15
  br i1 %16, label %73, label %17

17:                                               ; preds = %5, %17
  %18 = phi i32 [ %27, %17 ], [ 0, %5 ]
  %19 = phi %"class.sh::TField"** [ %28, %17 ], [ %13, %5 ]
  %20 = load %"class.sh::TField"*, %"class.sh::TField"** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %20, i64 0, i32 0
  %22 = load %"class.sh::TType"*, %"class.sh::TType"** %21, align 8
  %23 = tail call i32 @_ZNK2sh5TType16getLocationCountEv(%"class.sh::TType"* %22) #15
  %24 = sub nsw i32 2147483647, %18
  %25 = icmp sgt i32 %23, %24
  %26 = add nsw i32 %23, %18
  %27 = select i1 %25, i32 2147483647, i32 %26
  %28 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %19, i64 1
  %29 = icmp eq %"class.sh::TField"** %28, %15
  br i1 %29, label %30, label %17

30:                                               ; preds = %17
  %31 = icmp eq i32 %27, 0
  br i1 %31, label %73, label %32

32:                                               ; preds = %1, %30
  %33 = phi i32 [ %27, %30 ], [ 1, %1 ]
  %34 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 0
  %35 = load i32*, i32** %34, align 8
  %36 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds i32, i32* %35, i64 %37
  %39 = icmp eq i64 %37, 0
  br i1 %39, label %73, label %40

40:                                               ; preds = %32
  %41 = shl nsw i64 %37, 2
  %42 = add i64 %41, -4
  %43 = and i64 %42, 4
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %52

45:                                               ; preds = %40
  %46 = load i32, i32* %35, align 4
  %47 = sdiv i32 2147483647, %33
  %48 = icmp ugt i32 %46, %47
  %49 = mul nsw i32 %46, %33
  %50 = select i1 %48, i32 2147483647, i32 %49
  %51 = getelementptr inbounds i32, i32* %35, i64 1
  br label %52

52:                                               ; preds = %45, %40
  %53 = phi i32 [ undef, %40 ], [ %50, %45 ]
  %54 = phi i32* [ %35, %40 ], [ %51, %45 ]
  %55 = phi i32 [ %33, %40 ], [ %50, %45 ]
  %56 = icmp eq i64 %42, 0
  br i1 %56, label %73, label %57

57:                                               ; preds = %52, %57
  %58 = phi i32* [ %71, %57 ], [ %54, %52 ]
  %59 = phi i32 [ %70, %57 ], [ %55, %52 ]
  %60 = load i32, i32* %58, align 4
  %61 = sdiv i32 2147483647, %59
  %62 = icmp ugt i32 %60, %61
  %63 = mul nsw i32 %60, %59
  %64 = select i1 %62, i32 2147483647, i32 %63
  %65 = getelementptr inbounds i32, i32* %58, i64 1
  %66 = load i32, i32* %65, align 4
  %67 = sdiv i32 2147483647, %64
  %68 = icmp ugt i32 %66, %67
  %69 = mul nsw i32 %66, %64
  %70 = select i1 %68, i32 2147483647, i32 %69
  %71 = getelementptr inbounds i32, i32* %58, i64 2
  %72 = icmp eq i32* %71, %38
  br i1 %72, label %73, label %57

73:                                               ; preds = %52, %57, %5, %32, %30
  %74 = phi i32 [ 0, %30 ], [ %33, %32 ], [ 0, %5 ], [ %53, %52 ], [ %70, %57 ]
  ret i32 %74
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK2sh20TFieldListCollection16getLocationCountEv(%"class.sh::TFieldListCollection"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = bitcast %"class.sh::TFieldListCollection"* %0 to %"class.std::__1::vector.2"**
  %3 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.sh::TField"**, %"class.sh::TField"*** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %3, i64 0, i32 0, i32 1
  %7 = load %"class.sh::TField"**, %"class.sh::TField"*** %6, align 8
  %8 = icmp eq %"class.sh::TField"** %5, %7
  br i1 %8, label %9, label %11

9:                                                ; preds = %11, %1
  %10 = phi i32 [ 0, %1 ], [ %21, %11 ]
  ret i32 %10

11:                                               ; preds = %1, %11
  %12 = phi i32 [ %21, %11 ], [ 0, %1 ]
  %13 = phi %"class.sh::TField"** [ %22, %11 ], [ %5, %1 ]
  %14 = load %"class.sh::TField"*, %"class.sh::TField"** %13, align 8
  %15 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %14, i64 0, i32 0
  %16 = load %"class.sh::TType"*, %"class.sh::TType"** %15, align 8
  %17 = tail call i32 @_ZNK2sh5TType16getLocationCountEv(%"class.sh::TType"* %16)
  %18 = sub nsw i32 2147483647, %12
  %19 = icmp sgt i32 %17, %18
  %20 = add nsw i32 %17, %12
  %21 = select i1 %19, i32 2147483647, i32 %20
  %22 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %13, i64 1
  %23 = icmp eq %"class.sh::TField"** %22, %7
  br i1 %23, label %9, label %11
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2sh5TType19getArraySizeProductEv(%"class.sh::TType"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i32, i32* %3, i64 %5
  %7 = icmp eq i64 %5, 0
  br i1 %7, label %103, label %8

8:                                                ; preds = %1
  %9 = shl nsw i64 %5, 2
  %10 = add i64 %9, -4
  %11 = lshr exact i64 %10, 2
  %12 = add nuw nsw i64 %11, 1
  %13 = icmp ult i64 %12, 8
  br i1 %13, label %14, label %17

14:                                               ; preds = %93, %8
  %15 = phi i32 [ 1, %8 ], [ %101, %93 ]
  %16 = phi i32* [ %3, %8 ], [ %19, %93 ]
  br label %105

17:                                               ; preds = %8
  %18 = and i64 %12, 9223372036854775800
  %19 = getelementptr i32, i32* %3, i64 %18
  %20 = add nsw i64 %18, -8
  %21 = lshr exact i64 %20, 3
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 3
  %24 = icmp ult i64 %20, 24
  br i1 %24, label %70, label %25

25:                                               ; preds = %17
  %26 = sub nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %67, %27 ]
  %29 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %25 ], [ %65, %27 ]
  %30 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %25 ], [ %66, %27 ]
  %31 = phi i64 [ %26, %25 ], [ %68, %27 ]
  %32 = getelementptr i32, i32* %3, i64 %28
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 4
  %35 = getelementptr i32, i32* %32, i64 4
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 4
  %38 = mul <4 x i32> %34, %29
  %39 = mul <4 x i32> %37, %30
  %40 = or i64 %28, 8
  %41 = getelementptr i32, i32* %3, i64 %40
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = getelementptr i32, i32* %41, i64 4
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4
  %47 = mul <4 x i32> %43, %38
  %48 = mul <4 x i32> %46, %39
  %49 = or i64 %28, 16
  %50 = getelementptr i32, i32* %3, i64 %49
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 4
  %53 = getelementptr i32, i32* %50, i64 4
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 4
  %56 = mul <4 x i32> %52, %47
  %57 = mul <4 x i32> %55, %48
  %58 = or i64 %28, 24
  %59 = getelementptr i32, i32* %3, i64 %58
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4
  %62 = getelementptr i32, i32* %59, i64 4
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 4
  %65 = mul <4 x i32> %61, %56
  %66 = mul <4 x i32> %64, %57
  %67 = add i64 %28, 32
  %68 = add i64 %31, -4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %27, !llvm.loop !35

70:                                               ; preds = %27, %17
  %71 = phi <4 x i32> [ undef, %17 ], [ %65, %27 ]
  %72 = phi <4 x i32> [ undef, %17 ], [ %66, %27 ]
  %73 = phi i64 [ 0, %17 ], [ %67, %27 ]
  %74 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %17 ], [ %65, %27 ]
  %75 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %17 ], [ %66, %27 ]
  %76 = icmp eq i64 %23, 0
  br i1 %76, label %93, label %77

77:                                               ; preds = %70, %77
  %78 = phi i64 [ %90, %77 ], [ %73, %70 ]
  %79 = phi <4 x i32> [ %88, %77 ], [ %74, %70 ]
  %80 = phi <4 x i32> [ %89, %77 ], [ %75, %70 ]
  %81 = phi i64 [ %91, %77 ], [ %23, %70 ]
  %82 = getelementptr i32, i32* %3, i64 %78
  %83 = bitcast i32* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 4
  %85 = getelementptr i32, i32* %82, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 4
  %88 = mul <4 x i32> %84, %79
  %89 = mul <4 x i32> %87, %80
  %90 = add i64 %78, 8
  %91 = add i64 %81, -1
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %77, !llvm.loop !36

93:                                               ; preds = %77, %70
  %94 = phi <4 x i32> [ %71, %70 ], [ %88, %77 ]
  %95 = phi <4 x i32> [ %72, %70 ], [ %89, %77 ]
  %96 = mul <4 x i32> %95, %94
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %98 = mul <4 x i32> %96, %97
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %100 = mul <4 x i32> %98, %99
  %101 = extractelement <4 x i32> %100, i32 0
  %102 = icmp eq i64 %12, %18
  br i1 %102, label %103, label %14

103:                                              ; preds = %105, %93, %1
  %104 = phi i32 [ 1, %1 ], [ %101, %93 ], [ %109, %105 ]
  ret i32 %104

105:                                              ; preds = %14, %105
  %106 = phi i32 [ %109, %105 ], [ %15, %14 ]
  %107 = phi i32* [ %110, %105 ], [ %16, %14 ]
  %108 = load i32, i32* %107, align 4
  %109 = mul i32 %108, %106
  %110 = getelementptr inbounds i32, i32* %107, i64 1
  %111 = icmp eq i32* %110, %6
  br i1 %111, label %103, label %105, !llvm.loop !37
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh5TType14isUnsizedArrayEv(%"class.sh::TType"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i32, i32* %3, i64 %5
  %7 = icmp eq i64 %5, 0
  br i1 %7, label %15, label %10

8:                                                ; preds = %10
  %9 = icmp eq i32* %14, %6
  br i1 %9, label %15, label %10

10:                                               ; preds = %1, %8
  %11 = phi i32* [ %14, %8 ], [ %3, %1 ]
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds i32, i32* %11, i64 1
  br i1 %13, label %15, label %8

15:                                               ; preds = %8, %10, %1
  %16 = phi i1 [ false, %1 ], [ true, %10 ], [ false, %8 ]
  ret i1 %16
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh5TType16sameNonArrayTypeERKS0_(%"class.sh::TType"* nocapture readonly, %"class.sh::TType"* nocapture readonly dereferenceable(184)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %26

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  %10 = load i8, i8* %9, align 8
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 8
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %10, %12
  br i1 %13, label %14, label %26

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 9
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %16, %18
  br i1 %19, label %20, label %26

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %22 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 13
  %24 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %23, align 8
  %25 = icmp eq %"class.sh::TStructure"* %22, %24
  br label %26

26:                                               ; preds = %20, %14, %8, %2
  %27 = phi i1 [ false, %14 ], [ false, %8 ], [ false, %2 ], [ %25, %20 ]
  ret i1 %27
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh5TType15isElementTypeOfERKS0_(%"class.sh::TType"* nocapture readonly, %"class.sh::TType"* nocapture readonly dereferenceable(184)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %50

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  %10 = load i8, i8* %9, align 8
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 8
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %10, %12
  br i1 %13, label %14, label %50

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 9
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %16, %18
  br i1 %19, label %20, label %50

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %22 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 13
  %24 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %23, align 8
  %25 = icmp eq %"class.sh::TStructure"* %22, %24
  br i1 %25, label %26, label %50

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 10, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %30, 1
  %32 = icmp eq i64 %28, %31
  br i1 %32, label %33, label %50

33:                                               ; preds = %26
  %34 = icmp eq i64 %30, 0
  br i1 %34, label %50, label %35

35:                                               ; preds = %33
  %36 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 0
  %37 = load i32*, i32** %36, align 8
  %38 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 10, i32 0
  %39 = load i32*, i32** %38, align 8
  br label %42

40:                                               ; preds = %42
  %41 = icmp ult i64 %49, %30
  br i1 %41, label %42, label %50

42:                                               ; preds = %35, %40
  %43 = phi i64 [ 0, %35 ], [ %49, %40 ]
  %44 = getelementptr inbounds i32, i32* %37, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds i32, i32* %39, i64 %43
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %45, %47
  %49 = add nuw i64 %43, 1
  br i1 %48, label %40, label %50

50:                                               ; preds = %42, %40, %33, %20, %26, %14, %8, %2
  %51 = phi i1 [ false, %2 ], [ false, %8 ], [ false, %14 ], [ false, %26 ], [ false, %20 ], [ true, %33 ], [ false, %42 ], [ true, %40 ]
  ret i1 %51
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2sh5TType17sizeUnsizedArraysERKNS_5TSpanIKjEE(%"class.sh::TType"* nocapture, %"class.sh::TSpan"* nocapture readonly dereferenceable(16)) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 0
  %8 = getelementptr inbounds %"class.sh::TSpan", %"class.sh::TSpan"* %1, i64 0, i32 1
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 11
  %10 = bitcast %"class.sh::TVector"** %9 to %"class.std::__1::vector"**
  %11 = getelementptr inbounds %"class.sh::TSpan", %"class.sh::TSpan"* %1, i64 0, i32 0
  br label %14

12:                                               ; preds = %33, %2
  %13 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  store i8* null, i8** %13, align 8
  ret void

14:                                               ; preds = %6, %33
  %15 = phi i64 [ 0, %6 ], [ %34, %33 ]
  %16 = load i32*, i32** %7, align 8
  %17 = getelementptr inbounds i32, i32* %16, i64 %15
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %33

20:                                               ; preds = %14
  %21 = load i64, i64* %8, align 8
  %22 = icmp ult i64 %15, %21
  br i1 %22, label %23, label %27

23:                                               ; preds = %20
  %24 = load i32*, i32** %11, align 8
  %25 = getelementptr inbounds i32, i32* %24, i64 %15
  %26 = load i32, i32* %25, align 4
  br label %27

27:                                               ; preds = %20, %23
  %28 = phi i32 [ %26, %23 ], [ 1, %20 ]
  %29 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %10, align 8
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %29, i64 0, i32 0, i32 0
  %31 = load i32*, i32** %30, align 8
  %32 = getelementptr inbounds i32, i32* %31, i64 %15
  store i32 %28, i32* %32, align 4
  br label %33

33:                                               ; preds = %27, %14
  %34 = add nuw i64 %15, 1
  %35 = load i64, i64* %3, align 8
  %36 = icmp ult i64 %34, %35
  br i1 %36, label %14, label %12
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2sh5TType25sizeOutermostUnsizedArrayEj(%"class.sh::TType"* nocapture readonly, i32) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 11
  %4 = bitcast %"class.sh::TVector"** %3 to %"class.std::__1::vector"**
  %5 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %7 = load i32*, i32** %6, align 8
  %8 = getelementptr inbounds i32, i32* %7, i64 -1
  store i32 %1, i32* %8, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2sh5TType12setBasicTypeENS_10TBasicTypeE(%"class.sh::TType"* nocapture, i32) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, %1
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  store i32 %1, i32* %3, align 8
  %7 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  store i8* null, i8** %7, align 8
  br label %8

8:                                                ; preds = %2, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2sh5TType14setPrimarySizeEh(%"class.sh::TType"* nocapture, i8 zeroext) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  %4 = load i8, i8* %3, align 8
  %5 = icmp eq i8 %4, %1
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  store i8 %1, i8* %3, align 8
  %7 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  store i8* null, i8** %7, align 8
  br label %8

8:                                                ; preds = %2, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2sh5TType16setSecondarySizeEh(%"class.sh::TType"* nocapture, i8 zeroext) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, %1
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  store i8 %1, i8* %3, align 1
  %7 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  store i8* null, i8** %7, align 8
  br label %8

8:                                                ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"* nocapture, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 11
  %4 = load %"class.sh::TVector"*, %"class.sh::TVector"** %3, align 8
  %5 = icmp eq %"class.sh::TVector"* %4, null
  %6 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0
  br i1 %5, label %7, label %12

7:                                                ; preds = %2
  %8 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %9 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %8, i64 24) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #15
  %10 = bitcast %"class.sh::TVector"** %3 to i8**
  store i8* %9, i8** %10, align 8
  %11 = bitcast i8* %9 to %"class.std::__1::vector"*
  br label %12

12:                                               ; preds = %7, %2
  %13 = phi %"class.std::__1::vector"* [ %11, %7 ], [ %6, %2 ]
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 1
  %15 = load i32*, i32** %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = icmp eq i32* %15, %17
  %19 = ptrtoint i32* %17 to i64
  br i1 %18, label %24, label %20

20:                                               ; preds = %12
  store i32 %1, i32* %15, align 4
  %21 = getelementptr inbounds i32, i32* %15, i64 1
  %22 = ptrtoint i32* %21 to i64
  %23 = bitcast i32** %14 to i64*
  store i64 %22, i64* %23, align 8
  br label %218

24:                                               ; preds = %12
  %25 = ptrtoint i32* %15 to i64
  %26 = bitcast i32** %14 to i64*
  %27 = bitcast %"class.std::__1::vector"* %13 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %25, %28
  %30 = ashr exact i64 %29, 2
  %31 = add nsw i64 %30, 1
  %32 = icmp ugt i64 %31, 4611686018427387903
  br i1 %32, label %33, label %35

33:                                               ; preds = %24
  %34 = bitcast %"class.std::__1::vector"* %13 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %34) #16
  unreachable

35:                                               ; preds = %24
  %36 = bitcast i32** %16 to i64*
  %37 = sub i64 %19, %28
  %38 = ashr exact i64 %37, 2
  %39 = icmp ult i64 %38, 2305843009213693951
  br i1 %39, label %40, label %45

40:                                               ; preds = %35
  %41 = ashr exact i64 %37, 1
  %42 = icmp ult i64 %41, %31
  %43 = select i1 %42, i64 %31, i64 %41
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %40, %35
  %46 = phi i64 [ %43, %40 ], [ 4611686018427387903, %35 ]
  %47 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %48 = shl i64 %46, 2
  %49 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %47, i64 %48) #15
  %50 = bitcast i8* %49 to i32*
  br label %51

51:                                               ; preds = %45, %40
  %52 = phi i64 [ %46, %45 ], [ 0, %40 ]
  %53 = phi i32* [ %50, %45 ], [ null, %40 ]
  %54 = getelementptr inbounds i32, i32* %53, i64 %30
  %55 = getelementptr inbounds i32, i32* %53, i64 %52
  %56 = ptrtoint i32* %55 to i64
  store i32 %1, i32* %54, align 4
  %57 = getelementptr inbounds i32, i32* %54, i64 1
  %58 = ptrtoint i32* %57 to i64
  %59 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 0
  %60 = load i32*, i32** %59, align 8
  %61 = ptrtoint i32* %60 to i64
  %62 = load i32*, i32** %14, align 8
  %63 = icmp eq i32* %62, %60
  br i1 %63, label %215, label %64

64:                                               ; preds = %51
  %65 = getelementptr i32, i32* %62, i64 -1
  %66 = ptrtoint i32* %65 to i64
  %67 = sub i64 %66, %61
  %68 = lshr i64 %67, 2
  %69 = add nuw nsw i64 %68, 1
  %70 = icmp ult i64 %69, 8
  br i1 %70, label %163, label %71

71:                                               ; preds = %64
  %72 = getelementptr i32, i32* %62, i64 -1
  %73 = ptrtoint i32* %72 to i64
  %74 = sub i64 %73, %61
  %75 = lshr i64 %74, 2
  %76 = xor i64 %75, -1
  %77 = add nsw i64 %30, %76
  %78 = getelementptr i32, i32* %53, i64 %77
  %79 = xor i64 %75, -1
  %80 = getelementptr i32, i32* %62, i64 %79
  %81 = icmp ult i32* %78, %62
  %82 = icmp ult i32* %80, %54
  %83 = and i1 %81, %82
  br i1 %83, label %163, label %84

84:                                               ; preds = %71
  %85 = and i64 %69, 9223372036854775800
  %86 = sub nsw i64 0, %85
  %87 = getelementptr i32, i32* %54, i64 %86
  %88 = sub nsw i64 0, %85
  %89 = getelementptr i32, i32* %62, i64 %88
  %90 = add nsw i64 %85, -8
  %91 = lshr exact i64 %90, 3
  %92 = add nuw nsw i64 %91, 1
  %93 = and i64 %92, 1
  %94 = icmp eq i64 %90, 0
  br i1 %94, label %141, label %95

95:                                               ; preds = %84
  %96 = sub nuw nsw i64 %92, %93
  %97 = getelementptr i32, i32* %54, i64 -1
  %98 = getelementptr i32, i32* %62, i64 -1
  %99 = getelementptr i32, i32* %54, i64 -1
  %100 = getelementptr i32, i32* %62, i64 -1
  br label %101

101:                                              ; preds = %101, %95
  %102 = phi i64 [ 0, %95 ], [ %136, %101 ]
  %103 = phi i64 [ %96, %95 ], [ %137, %101 ]
  %104 = sub i64 0, %102
  %105 = sub i64 0, %102
  %106 = getelementptr inbounds i32, i32* %97, i64 %104
  %107 = getelementptr inbounds i32, i32* %98, i64 %105
  %108 = getelementptr inbounds i32, i32* %107, i64 -3
  %109 = bitcast i32* %108 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !39
  %111 = getelementptr inbounds i32, i32* %107, i64 -4
  %112 = getelementptr inbounds i32, i32* %111, i64 -3
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4, !alias.scope !39
  %115 = getelementptr inbounds i32, i32* %106, i64 -3
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %116, align 4, !alias.scope !42, !noalias !39
  %117 = getelementptr inbounds i32, i32* %106, i64 -4
  %118 = getelementptr inbounds i32, i32* %117, i64 -3
  %119 = bitcast i32* %118 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %119, align 4, !alias.scope !42, !noalias !39
  %120 = sub nuw nsw i64 -8, %102
  %121 = sub nuw nsw i64 -8, %102
  %122 = getelementptr inbounds i32, i32* %99, i64 %120
  %123 = getelementptr inbounds i32, i32* %100, i64 %121
  %124 = getelementptr inbounds i32, i32* %123, i64 -3
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !39
  %127 = getelementptr inbounds i32, i32* %123, i64 -4
  %128 = getelementptr inbounds i32, i32* %127, i64 -3
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !alias.scope !39
  %131 = getelementptr inbounds i32, i32* %122, i64 -3
  %132 = bitcast i32* %131 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %132, align 4, !alias.scope !42, !noalias !39
  %133 = getelementptr inbounds i32, i32* %122, i64 -4
  %134 = getelementptr inbounds i32, i32* %133, i64 -3
  %135 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %135, align 4, !alias.scope !42, !noalias !39
  %136 = add i64 %102, 16
  %137 = add i64 %103, -2
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %101, !llvm.loop !44

139:                                              ; preds = %101
  %140 = sub nuw nsw i64 -16, %102
  br label %141

141:                                              ; preds = %139, %84
  %142 = phi i64 [ 0, %84 ], [ %140, %139 ]
  %143 = icmp eq i64 %93, 0
  br i1 %143, label %161, label %144

144:                                              ; preds = %141
  %145 = getelementptr i32, i32* %54, i64 -1
  %146 = getelementptr i32, i32* %62, i64 -1
  %147 = getelementptr inbounds i32, i32* %145, i64 %142
  %148 = getelementptr inbounds i32, i32* %146, i64 %142
  %149 = getelementptr inbounds i32, i32* %148, i64 -3
  %150 = bitcast i32* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 4, !alias.scope !39
  %152 = getelementptr inbounds i32, i32* %148, i64 -4
  %153 = getelementptr inbounds i32, i32* %152, i64 -3
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4, !alias.scope !39
  %156 = getelementptr inbounds i32, i32* %147, i64 -3
  %157 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %151, <4 x i32>* %157, align 4, !alias.scope !42, !noalias !39
  %158 = getelementptr inbounds i32, i32* %147, i64 -4
  %159 = getelementptr inbounds i32, i32* %158, i64 -3
  %160 = bitcast i32* %159 to <4 x i32>*
  store <4 x i32> %155, <4 x i32>* %160, align 4, !alias.scope !42, !noalias !39
  br label %161

161:                                              ; preds = %141, %144
  %162 = icmp eq i64 %69, %85
  br i1 %162, label %215, label %163

163:                                              ; preds = %161, %71, %64
  %164 = phi i32* [ %54, %71 ], [ %54, %64 ], [ %87, %161 ]
  %165 = phi i32* [ %62, %71 ], [ %62, %64 ], [ %89, %161 ]
  %166 = getelementptr i32, i32* %165, i64 -1
  %167 = ptrtoint i32* %166 to i64
  %168 = sub i64 %167, %61
  %169 = lshr i64 %168, 2
  %170 = add nuw nsw i64 %169, 1
  %171 = and i64 %170, 7
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %182, label %173

173:                                              ; preds = %163, %173
  %174 = phi i32* [ %177, %173 ], [ %164, %163 ]
  %175 = phi i32* [ %178, %173 ], [ %165, %163 ]
  %176 = phi i64 [ %180, %173 ], [ %171, %163 ]
  %177 = getelementptr inbounds i32, i32* %174, i64 -1
  %178 = getelementptr inbounds i32, i32* %175, i64 -1
  %179 = load i32, i32* %178, align 4
  store i32 %179, i32* %177, align 4
  %180 = add i64 %176, -1
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %182, label %173, !llvm.loop !45

182:                                              ; preds = %173, %163
  %183 = phi i32* [ undef, %163 ], [ %177, %173 ]
  %184 = phi i32* [ %164, %163 ], [ %177, %173 ]
  %185 = phi i32* [ %165, %163 ], [ %178, %173 ]
  %186 = icmp ult i64 %168, 28
  br i1 %186, label %215, label %187

187:                                              ; preds = %182, %187
  %188 = phi i32* [ %211, %187 ], [ %184, %182 ]
  %189 = phi i32* [ %212, %187 ], [ %185, %182 ]
  %190 = getelementptr inbounds i32, i32* %188, i64 -1
  %191 = getelementptr inbounds i32, i32* %189, i64 -1
  %192 = load i32, i32* %191, align 4
  store i32 %192, i32* %190, align 4
  %193 = getelementptr inbounds i32, i32* %188, i64 -2
  %194 = getelementptr inbounds i32, i32* %189, i64 -2
  %195 = load i32, i32* %194, align 4
  store i32 %195, i32* %193, align 4
  %196 = getelementptr inbounds i32, i32* %188, i64 -3
  %197 = getelementptr inbounds i32, i32* %189, i64 -3
  %198 = load i32, i32* %197, align 4
  store i32 %198, i32* %196, align 4
  %199 = getelementptr inbounds i32, i32* %188, i64 -4
  %200 = getelementptr inbounds i32, i32* %189, i64 -4
  %201 = load i32, i32* %200, align 4
  store i32 %201, i32* %199, align 4
  %202 = getelementptr inbounds i32, i32* %188, i64 -5
  %203 = getelementptr inbounds i32, i32* %189, i64 -5
  %204 = load i32, i32* %203, align 4
  store i32 %204, i32* %202, align 4
  %205 = getelementptr inbounds i32, i32* %188, i64 -6
  %206 = getelementptr inbounds i32, i32* %189, i64 -6
  %207 = load i32, i32* %206, align 4
  store i32 %207, i32* %205, align 4
  %208 = getelementptr inbounds i32, i32* %188, i64 -7
  %209 = getelementptr inbounds i32, i32* %189, i64 -7
  %210 = load i32, i32* %209, align 4
  store i32 %210, i32* %208, align 4
  %211 = getelementptr inbounds i32, i32* %188, i64 -8
  %212 = getelementptr inbounds i32, i32* %189, i64 -8
  %213 = load i32, i32* %212, align 4
  store i32 %213, i32* %211, align 4
  %214 = icmp eq i32* %212, %60
  br i1 %214, label %215, label %187, !llvm.loop !46

215:                                              ; preds = %182, %187, %161, %51
  %216 = phi i32* [ %54, %51 ], [ %87, %161 ], [ %183, %182 ], [ %211, %187 ]
  %217 = ptrtoint i32* %216 to i64
  store i64 %217, i64* %27, align 8
  store i64 %58, i64* %26, align 8
  store i64 %56, i64* %36, align 8
  br label %218

218:                                              ; preds = %20, %215
  %219 = load %"class.sh::TVector"*, %"class.sh::TVector"** %3, align 8
  %220 = bitcast %"class.sh::TVector"* %219 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %219, i64 0, i32 0, i32 0, i32 1
  %223 = bitcast i32** %222 to i64*
  %224 = load i64, i64* %223, align 8
  %225 = sub i64 %224, %221
  %226 = ashr exact i64 %225, 2
  %227 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10
  %228 = bitcast %"class.sh::TSpan"* %227 to i64*
  store i64 %221, i64* %228, align 8
  %229 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  store i64 %226, i64* %229, align 8
  %230 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  store i8* null, i8** %230, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNSt3__16vectorIj14pool_allocatorIjEE6insertIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPjEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"*, i32*, i32*, i32*) local_unnamed_addr #1 comdat align 2 {
  %5 = bitcast i32* %2 to i8*
  %6 = bitcast i32* %1 to i8*
  %7 = ptrtoint i32* %1 to i64
  %8 = ptrtoint i32* %2 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %10 = ptrtoint i32* %3 to i64
  %11 = sub i64 %10, %8
  %12 = ashr exact i64 %11, 2
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %845

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = load i32*, i32** %18, align 8
  %20 = ptrtoint i32* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast i32** %18 to i64*
  br i1 %23, label %339, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 2
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %196

29:                                               ; preds = %25
  %30 = getelementptr inbounds i32, i32* %2, i64 %27
  %31 = icmp eq i32* %30, %3
  br i1 %31, label %191, label %32

32:                                               ; preds = %29
  %33 = xor i64 %27, -1
  %34 = getelementptr i32, i32* %3, i64 %33
  %35 = ptrtoint i32* %34 to i64
  %36 = sub i64 %35, %8
  %37 = lshr i64 %36, 2
  %38 = add nuw nsw i64 %37, 1
  %39 = icmp ult i64 %38, 8
  br i1 %39, label %135, label %40

40:                                               ; preds = %32
  %41 = xor i64 %27, -1
  %42 = getelementptr i32, i32* %3, i64 %41
  %43 = ptrtoint i32* %42 to i64
  %44 = sub i64 %43, %8
  %45 = lshr i64 %44, 2
  %46 = add nuw nsw i64 %45, 1
  %47 = getelementptr i32, i32* %19, i64 %46
  %48 = add nsw i64 %27, %45
  %49 = add i64 %48, 1
  %50 = getelementptr i32, i32* %2, i64 %49
  %51 = icmp ult i32* %19, %50
  %52 = icmp ult i32* %30, %47
  %53 = and i1 %51, %52
  br i1 %53, label %135, label %54

54:                                               ; preds = %40
  %55 = and i64 %38, 9223372036854775800
  %56 = getelementptr i32, i32* %19, i64 %55
  %57 = getelementptr i32, i32* %30, i64 %55
  %58 = add nsw i64 %55, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 24
  br i1 %62, label %114, label %63

63:                                               ; preds = %54
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i32, i32* %19, i64 %66
  %69 = getelementptr i32, i32* %30, i64 %66
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4, !alias.scope !47
  %72 = getelementptr i32, i32* %69, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !alias.scope !47
  %75 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %75, align 4, !alias.scope !50, !noalias !47
  %76 = getelementptr i32, i32* %68, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %77, align 4, !alias.scope !50, !noalias !47
  %78 = or i64 %66, 8
  %79 = getelementptr i32, i32* %19, i64 %78
  %80 = getelementptr i32, i32* %30, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !47
  %83 = getelementptr i32, i32* %80, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 4, !alias.scope !47
  %86 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %86, align 4, !alias.scope !50, !noalias !47
  %87 = getelementptr i32, i32* %79, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %88, align 4, !alias.scope !50, !noalias !47
  %89 = or i64 %66, 16
  %90 = getelementptr i32, i32* %19, i64 %89
  %91 = getelementptr i32, i32* %30, i64 %89
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !47
  %94 = getelementptr i32, i32* %91, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !alias.scope !47
  %97 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %97, align 4, !alias.scope !50, !noalias !47
  %98 = getelementptr i32, i32* %90, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %99, align 4, !alias.scope !50, !noalias !47
  %100 = or i64 %66, 24
  %101 = getelementptr i32, i32* %19, i64 %100
  %102 = getelementptr i32, i32* %30, i64 %100
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !47
  %105 = getelementptr i32, i32* %102, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4, !alias.scope !47
  %108 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %108, align 4, !alias.scope !50, !noalias !47
  %109 = getelementptr i32, i32* %101, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %110, align 4, !alias.scope !50, !noalias !47
  %111 = add i64 %66, 32
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !52

114:                                              ; preds = %65, %54
  %115 = phi i64 [ 0, %54 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i32, i32* %19, i64 %118
  %121 = getelementptr i32, i32* %30, i64 %118
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4, !alias.scope !47
  %124 = getelementptr i32, i32* %121, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !47
  %127 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %127, align 4, !alias.scope !50, !noalias !47
  %128 = getelementptr i32, i32* %120, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 4, !alias.scope !50, !noalias !47
  %130 = add i64 %118, 8
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !53

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %38, %55
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %40, %32
  %136 = phi i32* [ %19, %40 ], [ %19, %32 ], [ %56, %133 ]
  %137 = phi i32* [ %30, %40 ], [ %30, %32 ], [ %57, %133 ]
  %138 = ptrtoint i32* %137 to i64
  %139 = getelementptr i32, i32* %3, i64 -1
  %140 = ptrtoint i32* %139 to i64
  %141 = sub i64 %140, %138
  %142 = lshr i64 %141, 2
  %143 = add nuw nsw i64 %142, 1
  %144 = and i64 %143, 7
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %155, label %146

146:                                              ; preds = %135, %146
  %147 = phi i32* [ %152, %146 ], [ %136, %135 ]
  %148 = phi i32* [ %151, %146 ], [ %137, %135 ]
  %149 = phi i64 [ %153, %146 ], [ %144, %135 ]
  %150 = load i32, i32* %148, align 4
  store i32 %150, i32* %147, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 1
  %152 = getelementptr inbounds i32, i32* %147, i64 1
  %153 = add i64 %149, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %146, !llvm.loop !54

155:                                              ; preds = %146, %135
  %156 = phi i32* [ undef, %135 ], [ %152, %146 ]
  %157 = phi i32* [ %136, %135 ], [ %152, %146 ]
  %158 = phi i32* [ %137, %135 ], [ %151, %146 ]
  %159 = icmp ult i64 %141, 28
  br i1 %159, label %188, label %160

160:                                              ; preds = %155, %160
  %161 = phi i32* [ %186, %160 ], [ %157, %155 ]
  %162 = phi i32* [ %185, %160 ], [ %158, %155 ]
  %163 = load i32, i32* %162, align 4
  store i32 %163, i32* %161, align 4
  %164 = getelementptr inbounds i32, i32* %162, i64 1
  %165 = getelementptr inbounds i32, i32* %161, i64 1
  %166 = load i32, i32* %164, align 4
  store i32 %166, i32* %165, align 4
  %167 = getelementptr inbounds i32, i32* %162, i64 2
  %168 = getelementptr inbounds i32, i32* %161, i64 2
  %169 = load i32, i32* %167, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %162, i64 3
  %171 = getelementptr inbounds i32, i32* %161, i64 3
  %172 = load i32, i32* %170, align 4
  store i32 %172, i32* %171, align 4
  %173 = getelementptr inbounds i32, i32* %162, i64 4
  %174 = getelementptr inbounds i32, i32* %161, i64 4
  %175 = load i32, i32* %173, align 4
  store i32 %175, i32* %174, align 4
  %176 = getelementptr inbounds i32, i32* %162, i64 5
  %177 = getelementptr inbounds i32, i32* %161, i64 5
  %178 = load i32, i32* %176, align 4
  store i32 %178, i32* %177, align 4
  %179 = getelementptr inbounds i32, i32* %162, i64 6
  %180 = getelementptr inbounds i32, i32* %161, i64 6
  %181 = load i32, i32* %179, align 4
  store i32 %181, i32* %180, align 4
  %182 = getelementptr inbounds i32, i32* %162, i64 7
  %183 = getelementptr inbounds i32, i32* %161, i64 7
  %184 = load i32, i32* %182, align 4
  store i32 %184, i32* %183, align 4
  %185 = getelementptr inbounds i32, i32* %162, i64 8
  %186 = getelementptr inbounds i32, i32* %161, i64 8
  %187 = icmp eq i32* %185, %3
  br i1 %187, label %188, label %160, !llvm.loop !55

188:                                              ; preds = %155, %160, %133
  %189 = phi i32* [ %56, %133 ], [ %156, %155 ], [ %186, %160 ]
  %190 = ptrtoint i32* %189 to i64
  br label %191

191:                                              ; preds = %188, %29
  %192 = phi i64 [ %20, %29 ], [ %190, %188 ]
  store i64 %192, i64* %24, align 8
  %193 = icmp sgt i64 %26, 0
  br i1 %193, label %194, label %845

194:                                              ; preds = %191
  %195 = inttoptr i64 %192 to i32*
  br label %196

196:                                              ; preds = %194, %25
  %197 = phi i64 [ %192, %194 ], [ %20, %25 ]
  %198 = phi i32* [ %195, %194 ], [ %19, %25 ]
  %199 = phi i32* [ %30, %194 ], [ %3, %25 ]
  %200 = getelementptr inbounds i32, i32* %1, i64 %12
  %201 = ptrtoint i32* %200 to i64
  %202 = sub i64 %197, %201
  %203 = ashr exact i64 %202, 2
  %204 = getelementptr inbounds i32, i32* %1, i64 %203
  %205 = icmp ult i32* %204, %19
  br i1 %205, label %206, label %319

206:                                              ; preds = %196
  %207 = sub nsw i64 0, %203
  %208 = getelementptr i32, i32* %19, i64 %207
  %209 = bitcast i32* %208 to i8*
  %210 = xor i64 %7, -1
  %211 = getelementptr i8, i8* %209, i64 %210
  %212 = ptrtoint i8* %211 to i64
  %213 = lshr i64 %212, 2
  %214 = add nuw nsw i64 %213, 1
  %215 = icmp ult i64 %214, 8
  br i1 %215, label %216, label %219

216:                                              ; preds = %314, %219, %206
  %217 = phi i32* [ %198, %219 ], [ %198, %206 ], [ %237, %314 ]
  %218 = phi i32* [ %204, %219 ], [ %204, %206 ], [ %238, %314 ]
  br label %327

219:                                              ; preds = %206
  %220 = sub nsw i64 0, %203
  %221 = getelementptr i32, i32* %19, i64 %220
  %222 = bitcast i32* %221 to i8*
  %223 = xor i64 %7, -1
  %224 = getelementptr i8, i8* %222, i64 %223
  %225 = ptrtoint i8* %224 to i64
  %226 = lshr i64 %225, 2
  %227 = add nuw nsw i64 %226, 1
  %228 = getelementptr i32, i32* %198, i64 %227
  %229 = add nsw i64 %203, %226
  %230 = add i64 %229, 1
  %231 = getelementptr i32, i32* %1, i64 %230
  %232 = icmp ult i32* %198, %231
  %233 = icmp ult i32* %204, %228
  %234 = and i1 %232, %233
  br i1 %234, label %216, label %235

235:                                              ; preds = %219
  %236 = and i64 %214, 9223372036854775800
  %237 = getelementptr i32, i32* %198, i64 %236
  %238 = getelementptr i32, i32* %204, i64 %236
  %239 = add nsw i64 %236, -8
  %240 = lshr exact i64 %239, 3
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 3
  %243 = icmp ult i64 %239, 24
  br i1 %243, label %295, label %244

244:                                              ; preds = %235
  %245 = sub nsw i64 %241, %242
  br label %246

246:                                              ; preds = %246, %244
  %247 = phi i64 [ 0, %244 ], [ %292, %246 ]
  %248 = phi i64 [ %245, %244 ], [ %293, %246 ]
  %249 = getelementptr i32, i32* %198, i64 %247
  %250 = getelementptr i32, i32* %204, i64 %247
  %251 = bitcast i32* %250 to <4 x i32>*
  %252 = load <4 x i32>, <4 x i32>* %251, align 4, !alias.scope !56
  %253 = getelementptr i32, i32* %250, i64 4
  %254 = bitcast i32* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 4, !alias.scope !56
  %256 = bitcast i32* %249 to <4 x i32>*
  store <4 x i32> %252, <4 x i32>* %256, align 4, !alias.scope !59, !noalias !56
  %257 = getelementptr i32, i32* %249, i64 4
  %258 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %258, align 4, !alias.scope !59, !noalias !56
  %259 = or i64 %247, 8
  %260 = getelementptr i32, i32* %198, i64 %259
  %261 = getelementptr i32, i32* %204, i64 %259
  %262 = bitcast i32* %261 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 4, !alias.scope !56
  %264 = getelementptr i32, i32* %261, i64 4
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4, !alias.scope !56
  %267 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> %263, <4 x i32>* %267, align 4, !alias.scope !59, !noalias !56
  %268 = getelementptr i32, i32* %260, i64 4
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> %266, <4 x i32>* %269, align 4, !alias.scope !59, !noalias !56
  %270 = or i64 %247, 16
  %271 = getelementptr i32, i32* %198, i64 %270
  %272 = getelementptr i32, i32* %204, i64 %270
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4, !alias.scope !56
  %275 = getelementptr i32, i32* %272, i64 4
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 4, !alias.scope !56
  %278 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %278, align 4, !alias.scope !59, !noalias !56
  %279 = getelementptr i32, i32* %271, i64 4
  %280 = bitcast i32* %279 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %280, align 4, !alias.scope !59, !noalias !56
  %281 = or i64 %247, 24
  %282 = getelementptr i32, i32* %198, i64 %281
  %283 = getelementptr i32, i32* %204, i64 %281
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4, !alias.scope !56
  %286 = getelementptr i32, i32* %283, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 4, !alias.scope !56
  %289 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> %285, <4 x i32>* %289, align 4, !alias.scope !59, !noalias !56
  %290 = getelementptr i32, i32* %282, i64 4
  %291 = bitcast i32* %290 to <4 x i32>*
  store <4 x i32> %288, <4 x i32>* %291, align 4, !alias.scope !59, !noalias !56
  %292 = add i64 %247, 32
  %293 = add i64 %248, -4
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %246, !llvm.loop !61

295:                                              ; preds = %246, %235
  %296 = phi i64 [ 0, %235 ], [ %292, %246 ]
  %297 = icmp eq i64 %242, 0
  br i1 %297, label %314, label %298

298:                                              ; preds = %295, %298
  %299 = phi i64 [ %311, %298 ], [ %296, %295 ]
  %300 = phi i64 [ %312, %298 ], [ %242, %295 ]
  %301 = getelementptr i32, i32* %198, i64 %299
  %302 = getelementptr i32, i32* %204, i64 %299
  %303 = bitcast i32* %302 to <4 x i32>*
  %304 = load <4 x i32>, <4 x i32>* %303, align 4, !alias.scope !56
  %305 = getelementptr i32, i32* %302, i64 4
  %306 = bitcast i32* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 4, !alias.scope !56
  %308 = bitcast i32* %301 to <4 x i32>*
  store <4 x i32> %304, <4 x i32>* %308, align 4, !alias.scope !59, !noalias !56
  %309 = getelementptr i32, i32* %301, i64 4
  %310 = bitcast i32* %309 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %310, align 4, !alias.scope !59, !noalias !56
  %311 = add i64 %299, 8
  %312 = add i64 %300, -1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %314, label %298, !llvm.loop !62

314:                                              ; preds = %298, %295
  %315 = icmp eq i64 %214, %236
  br i1 %315, label %316, label %216

316:                                              ; preds = %327, %314
  %317 = phi i32* [ %237, %314 ], [ %332, %327 ]
  %318 = ptrtoint i32* %317 to i64
  br label %319

319:                                              ; preds = %316, %196
  %320 = phi i64 [ %318, %316 ], [ %197, %196 ]
  store i64 %320, i64* %24, align 8
  %321 = icmp eq i64 %202, 0
  br i1 %321, label %334, label %322

322:                                              ; preds = %319
  %323 = sub nsw i64 0, %203
  %324 = getelementptr inbounds i32, i32* %198, i64 %323
  %325 = bitcast i32* %324 to i8*
  %326 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %325, i8* align 4 %326, i64 %202, i1 false) #15
  br label %334

327:                                              ; preds = %216, %327
  %328 = phi i32* [ %332, %327 ], [ %217, %216 ]
  %329 = phi i32* [ %331, %327 ], [ %218, %216 ]
  %330 = load i32, i32* %329, align 4
  store i32 %330, i32* %328, align 4
  %331 = getelementptr inbounds i32, i32* %329, i64 1
  %332 = getelementptr inbounds i32, i32* %328, i64 1
  %333 = icmp ult i32* %331, %19
  br i1 %333, label %327, label %316, !llvm.loop !63

334:                                              ; preds = %319, %322
  %335 = ptrtoint i32* %199 to i64
  %336 = sub i64 %335, %8
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %845, label %338

338:                                              ; preds = %334
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %5, i64 %336, i1 false) #15
  br label %845

339:                                              ; preds = %14
  %340 = bitcast %"class.std::__1::vector"* %0 to i64*
  %341 = load i64, i64* %340, align 8
  %342 = sub i64 %20, %341
  %343 = ashr exact i64 %342, 2
  %344 = add nsw i64 %343, %12
  %345 = icmp ugt i64 %344, 4611686018427387903
  br i1 %345, label %346, label %348

346:                                              ; preds = %339
  %347 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %347) #16
  unreachable

348:                                              ; preds = %339
  %349 = sub i64 %17, %341
  %350 = ashr exact i64 %349, 2
  %351 = icmp ult i64 %350, 2305843009213693951
  br i1 %351, label %355, label %352

352:                                              ; preds = %348
  %353 = sub i64 %7, %341
  %354 = ashr exact i64 %353, 2
  br label %362

355:                                              ; preds = %348
  %356 = ashr exact i64 %349, 1
  %357 = icmp ult i64 %356, %344
  %358 = select i1 %357, i64 %344, i64 %356
  %359 = sub i64 %7, %341
  %360 = ashr exact i64 %359, 2
  %361 = icmp eq i64 %358, 0
  br i1 %361, label %369, label %362

362:                                              ; preds = %352, %355
  %363 = phi i64 [ %354, %352 ], [ %360, %355 ]
  %364 = phi i64 [ 4611686018427387903, %352 ], [ %358, %355 ]
  %365 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %366 = shl i64 %364, 2
  %367 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %365, i64 %366) #15
  %368 = bitcast i8* %367 to i32*
  br label %369

369:                                              ; preds = %362, %355
  %370 = phi i64 [ %363, %362 ], [ %360, %355 ]
  %371 = phi i64 [ %364, %362 ], [ 0, %355 ]
  %372 = phi i32* [ %368, %362 ], [ null, %355 ]
  %373 = getelementptr inbounds i32, i32* %372, i64 %370
  %374 = getelementptr inbounds i32, i32* %372, i64 %371
  %375 = ptrtoint i32* %374 to i64
  %376 = getelementptr inbounds i32, i32* %373, i64 %12
  %377 = add i64 %11, -4
  %378 = lshr i64 %377, 2
  %379 = add nuw nsw i64 %378, 1
  %380 = icmp ult i64 %379, 8
  br i1 %380, label %473, label %381

381:                                              ; preds = %369
  %382 = add i64 %11, -4
  %383 = lshr i64 %382, 2
  %384 = add nsw i64 %370, %383
  %385 = add i64 %384, 1
  %386 = getelementptr i32, i32* %372, i64 %385
  %387 = add nuw nsw i64 %383, 1
  %388 = getelementptr i32, i32* %2, i64 %387
  %389 = icmp ult i32* %373, %388
  %390 = icmp ugt i32* %386, %2
  %391 = and i1 %389, %390
  br i1 %391, label %473, label %392

392:                                              ; preds = %381
  %393 = and i64 %379, 9223372036854775800
  %394 = getelementptr i32, i32* %373, i64 %393
  %395 = getelementptr i32, i32* %2, i64 %393
  %396 = add nsw i64 %393, -8
  %397 = lshr exact i64 %396, 3
  %398 = add nuw nsw i64 %397, 1
  %399 = and i64 %398, 3
  %400 = icmp ult i64 %396, 24
  br i1 %400, label %452, label %401

401:                                              ; preds = %392
  %402 = sub nsw i64 %398, %399
  br label %403

403:                                              ; preds = %403, %401
  %404 = phi i64 [ 0, %401 ], [ %449, %403 ]
  %405 = phi i64 [ %402, %401 ], [ %450, %403 ]
  %406 = getelementptr i32, i32* %373, i64 %404
  %407 = getelementptr i32, i32* %2, i64 %404
  %408 = bitcast i32* %407 to <4 x i32>*
  %409 = load <4 x i32>, <4 x i32>* %408, align 4, !alias.scope !64
  %410 = getelementptr i32, i32* %407, i64 4
  %411 = bitcast i32* %410 to <4 x i32>*
  %412 = load <4 x i32>, <4 x i32>* %411, align 4, !alias.scope !64
  %413 = bitcast i32* %406 to <4 x i32>*
  store <4 x i32> %409, <4 x i32>* %413, align 4, !alias.scope !67, !noalias !64
  %414 = getelementptr i32, i32* %406, i64 4
  %415 = bitcast i32* %414 to <4 x i32>*
  store <4 x i32> %412, <4 x i32>* %415, align 4, !alias.scope !67, !noalias !64
  %416 = or i64 %404, 8
  %417 = getelementptr i32, i32* %373, i64 %416
  %418 = getelementptr i32, i32* %2, i64 %416
  %419 = bitcast i32* %418 to <4 x i32>*
  %420 = load <4 x i32>, <4 x i32>* %419, align 4, !alias.scope !64
  %421 = getelementptr i32, i32* %418, i64 4
  %422 = bitcast i32* %421 to <4 x i32>*
  %423 = load <4 x i32>, <4 x i32>* %422, align 4, !alias.scope !64
  %424 = bitcast i32* %417 to <4 x i32>*
  store <4 x i32> %420, <4 x i32>* %424, align 4, !alias.scope !67, !noalias !64
  %425 = getelementptr i32, i32* %417, i64 4
  %426 = bitcast i32* %425 to <4 x i32>*
  store <4 x i32> %423, <4 x i32>* %426, align 4, !alias.scope !67, !noalias !64
  %427 = or i64 %404, 16
  %428 = getelementptr i32, i32* %373, i64 %427
  %429 = getelementptr i32, i32* %2, i64 %427
  %430 = bitcast i32* %429 to <4 x i32>*
  %431 = load <4 x i32>, <4 x i32>* %430, align 4, !alias.scope !64
  %432 = getelementptr i32, i32* %429, i64 4
  %433 = bitcast i32* %432 to <4 x i32>*
  %434 = load <4 x i32>, <4 x i32>* %433, align 4, !alias.scope !64
  %435 = bitcast i32* %428 to <4 x i32>*
  store <4 x i32> %431, <4 x i32>* %435, align 4, !alias.scope !67, !noalias !64
  %436 = getelementptr i32, i32* %428, i64 4
  %437 = bitcast i32* %436 to <4 x i32>*
  store <4 x i32> %434, <4 x i32>* %437, align 4, !alias.scope !67, !noalias !64
  %438 = or i64 %404, 24
  %439 = getelementptr i32, i32* %373, i64 %438
  %440 = getelementptr i32, i32* %2, i64 %438
  %441 = bitcast i32* %440 to <4 x i32>*
  %442 = load <4 x i32>, <4 x i32>* %441, align 4, !alias.scope !64
  %443 = getelementptr i32, i32* %440, i64 4
  %444 = bitcast i32* %443 to <4 x i32>*
  %445 = load <4 x i32>, <4 x i32>* %444, align 4, !alias.scope !64
  %446 = bitcast i32* %439 to <4 x i32>*
  store <4 x i32> %442, <4 x i32>* %446, align 4, !alias.scope !67, !noalias !64
  %447 = getelementptr i32, i32* %439, i64 4
  %448 = bitcast i32* %447 to <4 x i32>*
  store <4 x i32> %445, <4 x i32>* %448, align 4, !alias.scope !67, !noalias !64
  %449 = add i64 %404, 32
  %450 = add i64 %405, -4
  %451 = icmp eq i64 %450, 0
  br i1 %451, label %452, label %403, !llvm.loop !69

452:                                              ; preds = %403, %392
  %453 = phi i64 [ 0, %392 ], [ %449, %403 ]
  %454 = icmp eq i64 %399, 0
  br i1 %454, label %471, label %455

455:                                              ; preds = %452, %455
  %456 = phi i64 [ %468, %455 ], [ %453, %452 ]
  %457 = phi i64 [ %469, %455 ], [ %399, %452 ]
  %458 = getelementptr i32, i32* %373, i64 %456
  %459 = getelementptr i32, i32* %2, i64 %456
  %460 = bitcast i32* %459 to <4 x i32>*
  %461 = load <4 x i32>, <4 x i32>* %460, align 4, !alias.scope !64
  %462 = getelementptr i32, i32* %459, i64 4
  %463 = bitcast i32* %462 to <4 x i32>*
  %464 = load <4 x i32>, <4 x i32>* %463, align 4, !alias.scope !64
  %465 = bitcast i32* %458 to <4 x i32>*
  store <4 x i32> %461, <4 x i32>* %465, align 4, !alias.scope !67, !noalias !64
  %466 = getelementptr i32, i32* %458, i64 4
  %467 = bitcast i32* %466 to <4 x i32>*
  store <4 x i32> %464, <4 x i32>* %467, align 4, !alias.scope !67, !noalias !64
  %468 = add i64 %456, 8
  %469 = add i64 %457, -1
  %470 = icmp eq i64 %469, 0
  br i1 %470, label %471, label %455, !llvm.loop !70

471:                                              ; preds = %455, %452
  %472 = icmp eq i64 %379, %393
  br i1 %472, label %527, label %473

473:                                              ; preds = %471, %381, %369
  %474 = phi i32* [ %373, %381 ], [ %373, %369 ], [ %394, %471 ]
  %475 = phi i32* [ %2, %381 ], [ %2, %369 ], [ %395, %471 ]
  %476 = ptrtoint i32* %474 to i64
  %477 = add nsw i64 %370, %12
  %478 = add nsw i64 %477, -1
  %479 = getelementptr i32, i32* %372, i64 %478
  %480 = ptrtoint i32* %479 to i64
  %481 = sub i64 %480, %476
  %482 = lshr i64 %481, 2
  %483 = add nuw nsw i64 %482, 1
  %484 = and i64 %483, 7
  %485 = icmp eq i64 %484, 0
  br i1 %485, label %495, label %486

486:                                              ; preds = %473, %486
  %487 = phi i32* [ %491, %486 ], [ %474, %473 ]
  %488 = phi i32* [ %492, %486 ], [ %475, %473 ]
  %489 = phi i64 [ %493, %486 ], [ %484, %473 ]
  %490 = load i32, i32* %488, align 4
  store i32 %490, i32* %487, align 4
  %491 = getelementptr inbounds i32, i32* %487, i64 1
  %492 = getelementptr inbounds i32, i32* %488, i64 1
  %493 = add i64 %489, -1
  %494 = icmp eq i64 %493, 0
  br i1 %494, label %495, label %486, !llvm.loop !71

495:                                              ; preds = %486, %473
  %496 = phi i32* [ %474, %473 ], [ %491, %486 ]
  %497 = phi i32* [ %475, %473 ], [ %492, %486 ]
  %498 = icmp ult i64 %481, 28
  br i1 %498, label %527, label %499

499:                                              ; preds = %495, %499
  %500 = phi i32* [ %524, %499 ], [ %496, %495 ]
  %501 = phi i32* [ %525, %499 ], [ %497, %495 ]
  %502 = load i32, i32* %501, align 4
  store i32 %502, i32* %500, align 4
  %503 = getelementptr inbounds i32, i32* %500, i64 1
  %504 = getelementptr inbounds i32, i32* %501, i64 1
  %505 = load i32, i32* %504, align 4
  store i32 %505, i32* %503, align 4
  %506 = getelementptr inbounds i32, i32* %500, i64 2
  %507 = getelementptr inbounds i32, i32* %501, i64 2
  %508 = load i32, i32* %507, align 4
  store i32 %508, i32* %506, align 4
  %509 = getelementptr inbounds i32, i32* %500, i64 3
  %510 = getelementptr inbounds i32, i32* %501, i64 3
  %511 = load i32, i32* %510, align 4
  store i32 %511, i32* %509, align 4
  %512 = getelementptr inbounds i32, i32* %500, i64 4
  %513 = getelementptr inbounds i32, i32* %501, i64 4
  %514 = load i32, i32* %513, align 4
  store i32 %514, i32* %512, align 4
  %515 = getelementptr inbounds i32, i32* %500, i64 5
  %516 = getelementptr inbounds i32, i32* %501, i64 5
  %517 = load i32, i32* %516, align 4
  store i32 %517, i32* %515, align 4
  %518 = getelementptr inbounds i32, i32* %500, i64 6
  %519 = getelementptr inbounds i32, i32* %501, i64 6
  %520 = load i32, i32* %519, align 4
  store i32 %520, i32* %518, align 4
  %521 = getelementptr inbounds i32, i32* %500, i64 7
  %522 = getelementptr inbounds i32, i32* %501, i64 7
  %523 = load i32, i32* %522, align 4
  store i32 %523, i32* %521, align 4
  %524 = getelementptr inbounds i32, i32* %500, i64 8
  %525 = getelementptr inbounds i32, i32* %501, i64 8
  %526 = icmp eq i32* %376, %524
  br i1 %526, label %527, label %499, !llvm.loop !72

527:                                              ; preds = %495, %499, %471
  %528 = load i32*, i32** %9, align 8
  %529 = ptrtoint i32* %528 to i64
  %530 = icmp eq i32* %528, %1
  br i1 %530, label %682, label %531

531:                                              ; preds = %527
  %532 = getelementptr i32, i32* %1, i64 -1
  %533 = ptrtoint i32* %532 to i64
  %534 = sub i64 %533, %529
  %535 = lshr i64 %534, 2
  %536 = add nuw nsw i64 %535, 1
  %537 = icmp ult i64 %536, 8
  br i1 %537, label %630, label %538

538:                                              ; preds = %531
  %539 = getelementptr i32, i32* %1, i64 -1
  %540 = ptrtoint i32* %539 to i64
  %541 = sub i64 %540, %529
  %542 = lshr i64 %541, 2
  %543 = xor i64 %542, -1
  %544 = add nsw i64 %370, %543
  %545 = getelementptr i32, i32* %372, i64 %544
  %546 = xor i64 %542, -1
  %547 = getelementptr i32, i32* %1, i64 %546
  %548 = icmp ult i32* %545, %1
  %549 = icmp ult i32* %547, %373
  %550 = and i1 %548, %549
  br i1 %550, label %630, label %551

551:                                              ; preds = %538
  %552 = and i64 %536, 9223372036854775800
  %553 = sub nsw i64 0, %552
  %554 = getelementptr i32, i32* %373, i64 %553
  %555 = sub nsw i64 0, %552
  %556 = getelementptr i32, i32* %1, i64 %555
  %557 = add nsw i64 %552, -8
  %558 = lshr exact i64 %557, 3
  %559 = add nuw nsw i64 %558, 1
  %560 = and i64 %559, 1
  %561 = icmp eq i64 %557, 0
  br i1 %561, label %606, label %562

562:                                              ; preds = %551
  %563 = sub nuw nsw i64 %559, %560
  %564 = getelementptr i32, i32* %373, i64 -1
  %565 = getelementptr i32, i32* %1, i64 -1
  %566 = getelementptr i32, i32* %373, i64 -1
  %567 = getelementptr i32, i32* %1, i64 -1
  br label %568

568:                                              ; preds = %568, %562
  %569 = phi i64 [ 0, %562 ], [ %603, %568 ]
  %570 = phi i64 [ %563, %562 ], [ %604, %568 ]
  %571 = sub i64 0, %569
  %572 = sub i64 0, %569
  %573 = getelementptr inbounds i32, i32* %564, i64 %571
  %574 = getelementptr inbounds i32, i32* %565, i64 %572
  %575 = getelementptr inbounds i32, i32* %574, i64 -3
  %576 = bitcast i32* %575 to <4 x i32>*
  %577 = load <4 x i32>, <4 x i32>* %576, align 4, !alias.scope !73
  %578 = getelementptr inbounds i32, i32* %574, i64 -4
  %579 = getelementptr inbounds i32, i32* %578, i64 -3
  %580 = bitcast i32* %579 to <4 x i32>*
  %581 = load <4 x i32>, <4 x i32>* %580, align 4, !alias.scope !73
  %582 = getelementptr inbounds i32, i32* %573, i64 -3
  %583 = bitcast i32* %582 to <4 x i32>*
  store <4 x i32> %577, <4 x i32>* %583, align 4, !alias.scope !76, !noalias !73
  %584 = getelementptr inbounds i32, i32* %573, i64 -4
  %585 = getelementptr inbounds i32, i32* %584, i64 -3
  %586 = bitcast i32* %585 to <4 x i32>*
  store <4 x i32> %581, <4 x i32>* %586, align 4, !alias.scope !76, !noalias !73
  %587 = sub nuw nsw i64 -8, %569
  %588 = sub nuw nsw i64 -8, %569
  %589 = getelementptr inbounds i32, i32* %566, i64 %587
  %590 = getelementptr inbounds i32, i32* %567, i64 %588
  %591 = getelementptr inbounds i32, i32* %590, i64 -3
  %592 = bitcast i32* %591 to <4 x i32>*
  %593 = load <4 x i32>, <4 x i32>* %592, align 4, !alias.scope !73
  %594 = getelementptr inbounds i32, i32* %590, i64 -4
  %595 = getelementptr inbounds i32, i32* %594, i64 -3
  %596 = bitcast i32* %595 to <4 x i32>*
  %597 = load <4 x i32>, <4 x i32>* %596, align 4, !alias.scope !73
  %598 = getelementptr inbounds i32, i32* %589, i64 -3
  %599 = bitcast i32* %598 to <4 x i32>*
  store <4 x i32> %593, <4 x i32>* %599, align 4, !alias.scope !76, !noalias !73
  %600 = getelementptr inbounds i32, i32* %589, i64 -4
  %601 = getelementptr inbounds i32, i32* %600, i64 -3
  %602 = bitcast i32* %601 to <4 x i32>*
  store <4 x i32> %597, <4 x i32>* %602, align 4, !alias.scope !76, !noalias !73
  %603 = add i64 %569, 16
  %604 = add i64 %570, -2
  %605 = icmp eq i64 %604, 0
  br i1 %605, label %606, label %568, !llvm.loop !78

606:                                              ; preds = %568, %551
  %607 = phi i64 [ 0, %551 ], [ %603, %568 ]
  %608 = icmp eq i64 %560, 0
  br i1 %608, label %628, label %609

609:                                              ; preds = %606
  %610 = sub i64 0, %607
  %611 = getelementptr i32, i32* %373, i64 -1
  %612 = sub i64 0, %607
  %613 = getelementptr i32, i32* %1, i64 -1
  %614 = getelementptr inbounds i32, i32* %611, i64 %610
  %615 = getelementptr inbounds i32, i32* %613, i64 %612
  %616 = getelementptr inbounds i32, i32* %615, i64 -3
  %617 = bitcast i32* %616 to <4 x i32>*
  %618 = load <4 x i32>, <4 x i32>* %617, align 4, !alias.scope !73
  %619 = getelementptr inbounds i32, i32* %615, i64 -4
  %620 = getelementptr inbounds i32, i32* %619, i64 -3
  %621 = bitcast i32* %620 to <4 x i32>*
  %622 = load <4 x i32>, <4 x i32>* %621, align 4, !alias.scope !73
  %623 = getelementptr inbounds i32, i32* %614, i64 -3
  %624 = bitcast i32* %623 to <4 x i32>*
  store <4 x i32> %618, <4 x i32>* %624, align 4, !alias.scope !76, !noalias !73
  %625 = getelementptr inbounds i32, i32* %614, i64 -4
  %626 = getelementptr inbounds i32, i32* %625, i64 -3
  %627 = bitcast i32* %626 to <4 x i32>*
  store <4 x i32> %622, <4 x i32>* %627, align 4, !alias.scope !76, !noalias !73
  br label %628

628:                                              ; preds = %606, %609
  %629 = icmp eq i64 %536, %552
  br i1 %629, label %682, label %630

630:                                              ; preds = %628, %538, %531
  %631 = phi i32* [ %373, %538 ], [ %373, %531 ], [ %554, %628 ]
  %632 = phi i32* [ %1, %538 ], [ %1, %531 ], [ %556, %628 ]
  %633 = getelementptr i32, i32* %632, i64 -1
  %634 = ptrtoint i32* %633 to i64
  %635 = sub i64 %634, %529
  %636 = lshr i64 %635, 2
  %637 = add nuw nsw i64 %636, 1
  %638 = and i64 %637, 7
  %639 = icmp eq i64 %638, 0
  br i1 %639, label %649, label %640

640:                                              ; preds = %630, %640
  %641 = phi i32* [ %644, %640 ], [ %631, %630 ]
  %642 = phi i32* [ %645, %640 ], [ %632, %630 ]
  %643 = phi i64 [ %647, %640 ], [ %638, %630 ]
  %644 = getelementptr inbounds i32, i32* %641, i64 -1
  %645 = getelementptr inbounds i32, i32* %642, i64 -1
  %646 = load i32, i32* %645, align 4
  store i32 %646, i32* %644, align 4
  %647 = add i64 %643, -1
  %648 = icmp eq i64 %647, 0
  br i1 %648, label %649, label %640, !llvm.loop !79

649:                                              ; preds = %640, %630
  %650 = phi i32* [ undef, %630 ], [ %644, %640 ]
  %651 = phi i32* [ %631, %630 ], [ %644, %640 ]
  %652 = phi i32* [ %632, %630 ], [ %645, %640 ]
  %653 = icmp ult i64 %635, 28
  br i1 %653, label %682, label %654

654:                                              ; preds = %649, %654
  %655 = phi i32* [ %678, %654 ], [ %651, %649 ]
  %656 = phi i32* [ %679, %654 ], [ %652, %649 ]
  %657 = getelementptr inbounds i32, i32* %655, i64 -1
  %658 = getelementptr inbounds i32, i32* %656, i64 -1
  %659 = load i32, i32* %658, align 4
  store i32 %659, i32* %657, align 4
  %660 = getelementptr inbounds i32, i32* %655, i64 -2
  %661 = getelementptr inbounds i32, i32* %656, i64 -2
  %662 = load i32, i32* %661, align 4
  store i32 %662, i32* %660, align 4
  %663 = getelementptr inbounds i32, i32* %655, i64 -3
  %664 = getelementptr inbounds i32, i32* %656, i64 -3
  %665 = load i32, i32* %664, align 4
  store i32 %665, i32* %663, align 4
  %666 = getelementptr inbounds i32, i32* %655, i64 -4
  %667 = getelementptr inbounds i32, i32* %656, i64 -4
  %668 = load i32, i32* %667, align 4
  store i32 %668, i32* %666, align 4
  %669 = getelementptr inbounds i32, i32* %655, i64 -5
  %670 = getelementptr inbounds i32, i32* %656, i64 -5
  %671 = load i32, i32* %670, align 4
  store i32 %671, i32* %669, align 4
  %672 = getelementptr inbounds i32, i32* %655, i64 -6
  %673 = getelementptr inbounds i32, i32* %656, i64 -6
  %674 = load i32, i32* %673, align 4
  store i32 %674, i32* %672, align 4
  %675 = getelementptr inbounds i32, i32* %655, i64 -7
  %676 = getelementptr inbounds i32, i32* %656, i64 -7
  %677 = load i32, i32* %676, align 4
  store i32 %677, i32* %675, align 4
  %678 = getelementptr inbounds i32, i32* %655, i64 -8
  %679 = getelementptr inbounds i32, i32* %656, i64 -8
  %680 = load i32, i32* %679, align 4
  store i32 %680, i32* %678, align 4
  %681 = icmp eq i32* %679, %528
  br i1 %681, label %682, label %654, !llvm.loop !80

682:                                              ; preds = %649, %654, %628, %527
  %683 = phi i32* [ %373, %527 ], [ %554, %628 ], [ %650, %649 ], [ %678, %654 ]
  %684 = load i32*, i32** %18, align 8
  %685 = icmp eq i32* %684, %1
  br i1 %685, label %841, label %686

686:                                              ; preds = %682
  %687 = getelementptr i32, i32* %684, i64 -1
  %688 = ptrtoint i32* %687 to i64
  %689 = sub i64 %688, %7
  %690 = lshr i64 %689, 2
  %691 = add nuw nsw i64 %690, 1
  %692 = icmp ult i64 %691, 8
  br i1 %692, label %788, label %693

693:                                              ; preds = %686
  %694 = add nsw i64 %370, %12
  %695 = getelementptr i32, i32* %684, i64 -1
  %696 = ptrtoint i32* %695 to i64
  %697 = sub i64 %696, %7
  %698 = lshr i64 %697, 2
  %699 = add nsw i64 %694, %698
  %700 = add i64 %699, 1
  %701 = getelementptr i32, i32* %372, i64 %700
  %702 = add nuw nsw i64 %698, 1
  %703 = getelementptr i32, i32* %1, i64 %702
  %704 = icmp ult i32* %376, %703
  %705 = icmp ugt i32* %701, %1
  %706 = and i1 %704, %705
  br i1 %706, label %788, label %707

707:                                              ; preds = %693
  %708 = and i64 %691, 9223372036854775800
  %709 = getelementptr i32, i32* %376, i64 %708
  %710 = getelementptr i32, i32* %1, i64 %708
  %711 = add nsw i64 %708, -8
  %712 = lshr exact i64 %711, 3
  %713 = add nuw nsw i64 %712, 1
  %714 = and i64 %713, 3
  %715 = icmp ult i64 %711, 24
  br i1 %715, label %767, label %716

716:                                              ; preds = %707
  %717 = sub nsw i64 %713, %714
  br label %718

718:                                              ; preds = %718, %716
  %719 = phi i64 [ 0, %716 ], [ %764, %718 ]
  %720 = phi i64 [ %717, %716 ], [ %765, %718 ]
  %721 = getelementptr i32, i32* %376, i64 %719
  %722 = getelementptr i32, i32* %1, i64 %719
  %723 = bitcast i32* %722 to <4 x i32>*
  %724 = load <4 x i32>, <4 x i32>* %723, align 4, !alias.scope !81
  %725 = getelementptr i32, i32* %722, i64 4
  %726 = bitcast i32* %725 to <4 x i32>*
  %727 = load <4 x i32>, <4 x i32>* %726, align 4, !alias.scope !81
  %728 = bitcast i32* %721 to <4 x i32>*
  store <4 x i32> %724, <4 x i32>* %728, align 4, !alias.scope !84, !noalias !81
  %729 = getelementptr i32, i32* %721, i64 4
  %730 = bitcast i32* %729 to <4 x i32>*
  store <4 x i32> %727, <4 x i32>* %730, align 4, !alias.scope !84, !noalias !81
  %731 = or i64 %719, 8
  %732 = getelementptr i32, i32* %376, i64 %731
  %733 = getelementptr i32, i32* %1, i64 %731
  %734 = bitcast i32* %733 to <4 x i32>*
  %735 = load <4 x i32>, <4 x i32>* %734, align 4, !alias.scope !81
  %736 = getelementptr i32, i32* %733, i64 4
  %737 = bitcast i32* %736 to <4 x i32>*
  %738 = load <4 x i32>, <4 x i32>* %737, align 4, !alias.scope !81
  %739 = bitcast i32* %732 to <4 x i32>*
  store <4 x i32> %735, <4 x i32>* %739, align 4, !alias.scope !84, !noalias !81
  %740 = getelementptr i32, i32* %732, i64 4
  %741 = bitcast i32* %740 to <4 x i32>*
  store <4 x i32> %738, <4 x i32>* %741, align 4, !alias.scope !84, !noalias !81
  %742 = or i64 %719, 16
  %743 = getelementptr i32, i32* %376, i64 %742
  %744 = getelementptr i32, i32* %1, i64 %742
  %745 = bitcast i32* %744 to <4 x i32>*
  %746 = load <4 x i32>, <4 x i32>* %745, align 4, !alias.scope !81
  %747 = getelementptr i32, i32* %744, i64 4
  %748 = bitcast i32* %747 to <4 x i32>*
  %749 = load <4 x i32>, <4 x i32>* %748, align 4, !alias.scope !81
  %750 = bitcast i32* %743 to <4 x i32>*
  store <4 x i32> %746, <4 x i32>* %750, align 4, !alias.scope !84, !noalias !81
  %751 = getelementptr i32, i32* %743, i64 4
  %752 = bitcast i32* %751 to <4 x i32>*
  store <4 x i32> %749, <4 x i32>* %752, align 4, !alias.scope !84, !noalias !81
  %753 = or i64 %719, 24
  %754 = getelementptr i32, i32* %376, i64 %753
  %755 = getelementptr i32, i32* %1, i64 %753
  %756 = bitcast i32* %755 to <4 x i32>*
  %757 = load <4 x i32>, <4 x i32>* %756, align 4, !alias.scope !81
  %758 = getelementptr i32, i32* %755, i64 4
  %759 = bitcast i32* %758 to <4 x i32>*
  %760 = load <4 x i32>, <4 x i32>* %759, align 4, !alias.scope !81
  %761 = bitcast i32* %754 to <4 x i32>*
  store <4 x i32> %757, <4 x i32>* %761, align 4, !alias.scope !84, !noalias !81
  %762 = getelementptr i32, i32* %754, i64 4
  %763 = bitcast i32* %762 to <4 x i32>*
  store <4 x i32> %760, <4 x i32>* %763, align 4, !alias.scope !84, !noalias !81
  %764 = add i64 %719, 32
  %765 = add i64 %720, -4
  %766 = icmp eq i64 %765, 0
  br i1 %766, label %767, label %718, !llvm.loop !86

767:                                              ; preds = %718, %707
  %768 = phi i64 [ 0, %707 ], [ %764, %718 ]
  %769 = icmp eq i64 %714, 0
  br i1 %769, label %786, label %770

770:                                              ; preds = %767, %770
  %771 = phi i64 [ %783, %770 ], [ %768, %767 ]
  %772 = phi i64 [ %784, %770 ], [ %714, %767 ]
  %773 = getelementptr i32, i32* %376, i64 %771
  %774 = getelementptr i32, i32* %1, i64 %771
  %775 = bitcast i32* %774 to <4 x i32>*
  %776 = load <4 x i32>, <4 x i32>* %775, align 4, !alias.scope !81
  %777 = getelementptr i32, i32* %774, i64 4
  %778 = bitcast i32* %777 to <4 x i32>*
  %779 = load <4 x i32>, <4 x i32>* %778, align 4, !alias.scope !81
  %780 = bitcast i32* %773 to <4 x i32>*
  store <4 x i32> %776, <4 x i32>* %780, align 4, !alias.scope !84, !noalias !81
  %781 = getelementptr i32, i32* %773, i64 4
  %782 = bitcast i32* %781 to <4 x i32>*
  store <4 x i32> %779, <4 x i32>* %782, align 4, !alias.scope !84, !noalias !81
  %783 = add i64 %771, 8
  %784 = add i64 %772, -1
  %785 = icmp eq i64 %784, 0
  br i1 %785, label %786, label %770, !llvm.loop !87

786:                                              ; preds = %770, %767
  %787 = icmp eq i64 %691, %708
  br i1 %787, label %841, label %788

788:                                              ; preds = %786, %693, %686
  %789 = phi i32* [ %376, %693 ], [ %376, %686 ], [ %709, %786 ]
  %790 = phi i32* [ %1, %693 ], [ %1, %686 ], [ %710, %786 ]
  %791 = ptrtoint i32* %790 to i64
  %792 = getelementptr i32, i32* %684, i64 -1
  %793 = ptrtoint i32* %792 to i64
  %794 = sub i64 %793, %791
  %795 = lshr i64 %794, 2
  %796 = add nuw nsw i64 %795, 1
  %797 = and i64 %796, 7
  %798 = icmp eq i64 %797, 0
  br i1 %798, label %808, label %799

799:                                              ; preds = %788, %799
  %800 = phi i32* [ %805, %799 ], [ %789, %788 ]
  %801 = phi i32* [ %804, %799 ], [ %790, %788 ]
  %802 = phi i64 [ %806, %799 ], [ %797, %788 ]
  %803 = load i32, i32* %801, align 4
  store i32 %803, i32* %800, align 4
  %804 = getelementptr inbounds i32, i32* %801, i64 1
  %805 = getelementptr inbounds i32, i32* %800, i64 1
  %806 = add i64 %802, -1
  %807 = icmp eq i64 %806, 0
  br i1 %807, label %808, label %799, !llvm.loop !88

808:                                              ; preds = %799, %788
  %809 = phi i32* [ undef, %788 ], [ %805, %799 ]
  %810 = phi i32* [ %789, %788 ], [ %805, %799 ]
  %811 = phi i32* [ %790, %788 ], [ %804, %799 ]
  %812 = icmp ult i64 %794, 28
  br i1 %812, label %841, label %813

813:                                              ; preds = %808, %813
  %814 = phi i32* [ %839, %813 ], [ %810, %808 ]
  %815 = phi i32* [ %838, %813 ], [ %811, %808 ]
  %816 = load i32, i32* %815, align 4
  store i32 %816, i32* %814, align 4
  %817 = getelementptr inbounds i32, i32* %815, i64 1
  %818 = getelementptr inbounds i32, i32* %814, i64 1
  %819 = load i32, i32* %817, align 4
  store i32 %819, i32* %818, align 4
  %820 = getelementptr inbounds i32, i32* %815, i64 2
  %821 = getelementptr inbounds i32, i32* %814, i64 2
  %822 = load i32, i32* %820, align 4
  store i32 %822, i32* %821, align 4
  %823 = getelementptr inbounds i32, i32* %815, i64 3
  %824 = getelementptr inbounds i32, i32* %814, i64 3
  %825 = load i32, i32* %823, align 4
  store i32 %825, i32* %824, align 4
  %826 = getelementptr inbounds i32, i32* %815, i64 4
  %827 = getelementptr inbounds i32, i32* %814, i64 4
  %828 = load i32, i32* %826, align 4
  store i32 %828, i32* %827, align 4
  %829 = getelementptr inbounds i32, i32* %815, i64 5
  %830 = getelementptr inbounds i32, i32* %814, i64 5
  %831 = load i32, i32* %829, align 4
  store i32 %831, i32* %830, align 4
  %832 = getelementptr inbounds i32, i32* %815, i64 6
  %833 = getelementptr inbounds i32, i32* %814, i64 6
  %834 = load i32, i32* %832, align 4
  store i32 %834, i32* %833, align 4
  %835 = getelementptr inbounds i32, i32* %815, i64 7
  %836 = getelementptr inbounds i32, i32* %814, i64 7
  %837 = load i32, i32* %835, align 4
  store i32 %837, i32* %836, align 4
  %838 = getelementptr inbounds i32, i32* %815, i64 8
  %839 = getelementptr inbounds i32, i32* %814, i64 8
  %840 = icmp eq i32* %838, %684
  br i1 %840, label %841, label %813, !llvm.loop !89

841:                                              ; preds = %808, %813, %786, %682
  %842 = phi i32* [ %376, %682 ], [ %709, %786 ], [ %809, %808 ], [ %839, %813 ]
  %843 = ptrtoint i32* %683 to i64
  %844 = ptrtoint i32* %842 to i64
  store i64 %843, i64* %340, align 8
  store i64 %844, i64* %24, align 8
  store i64 %375, i64* %16, align 8
  ret i32* %373

845:                                              ; preds = %191, %334, %338, %4
  ret i32* %1
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2sh5TType12setArraySizeEmj(%"class.sh::TType"* nocapture, i64, i32) local_unnamed_addr #7 align 2 {
  %4 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 0
  %5 = load i32*, i32** %4, align 8
  %6 = getelementptr inbounds i32, i32* %5, i64 %1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, %2
  br i1 %8, label %17, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 11
  %11 = bitcast %"class.sh::TVector"** %10 to %"class.std::__1::vector"**
  %12 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 0
  %14 = load i32*, i32** %13, align 8
  %15 = getelementptr inbounds i32, i32* %14, i64 %1
  store i32 %2, i32* %15, align 4
  %16 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  store i8* null, i8** %16, align 8
  br label %17

17:                                               ; preds = %3, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh5TType18toArrayElementTypeEv(%"class.sh::TType"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 11
  %3 = bitcast %"class.sh::TVector"** %2 to %"class.std::__1::vector"**
  %4 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds i32, i32* %6, i64 -1
  store i32* %7, i32** %5, align 8
  %8 = load %"class.sh::TVector"*, %"class.sh::TVector"** %2, align 8
  %9 = bitcast %"class.sh::TVector"* %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %8, i64 0, i32 0, i32 0, i32 1
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %13, %10
  %15 = ashr exact i64 %14, 2
  %16 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10
  %17 = bitcast %"class.sh::TSpan"* %16 to i64*
  store i64 %10, i64* %17, align 8
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  store i64 %15, i64* %18, align 8
  %19 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  store i8* null, i8** %19, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh5TType15toArrayBaseTypeEv(%"class.sh::TType"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 11
  %7 = load %"class.sh::TVector"*, %"class.sh::TVector"** %6, align 8
  %8 = icmp eq %"class.sh::TVector"* %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = bitcast %"class.sh::TVector"* %7 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %7, i64 0, i32 0, i32 0, i32 1
  %13 = bitcast i32** %12 to i64*
  store i64 %11, i64* %13, align 8
  br label %14

14:                                               ; preds = %5, %9
  %15 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10
  %16 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  store i8* null, i8** %16, align 8
  %17 = bitcast %"class.sh::TSpan"* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 16, i1 false)
  br label %18

18:                                               ; preds = %1, %14
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2sh5TType17setInterfaceBlockEPKNS_15TInterfaceBlockE(%"class.sh::TType"* nocapture, %"class.sh::TInterfaceBlock"*) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 12
  %4 = load %"class.sh::TInterfaceBlock"*, %"class.sh::TInterfaceBlock"** %3, align 8
  %5 = icmp eq %"class.sh::TInterfaceBlock"* %4, %1
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  store %"class.sh::TInterfaceBlock"* %1, %"class.sh::TInterfaceBlock"** %3, align 8
  %7 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  store i8* null, i8** %7, align 8
  br label %8

8:                                                ; preds = %2, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2sh5TType22setInterfaceBlockFieldEPKNS_15TInterfaceBlockEm(%"class.sh::TType"* nocapture, %"class.sh::TInterfaceBlock"*, i64) local_unnamed_addr #7 align 2 {
  %4 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 12
  %5 = load %"class.sh::TInterfaceBlock"*, %"class.sh::TInterfaceBlock"** %4, align 8
  %6 = icmp eq %"class.sh::TInterfaceBlock"* %5, %1
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  store %"class.sh::TInterfaceBlock"* %1, %"class.sh::TInterfaceBlock"** %4, align 8
  %8 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  store i8* null, i8** %8, align 8
  br label %9

9:                                                ; preds = %3, %7
  %10 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 15
  store i64 %2, i64* %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZNK2sh5TType14getMangledNameEv(%"class.sh::TType"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = tail call i8* @_ZNK2sh5TType16buildMangledNameEv(%"class.sh::TType"* %0)
  store i8* %6, i8** %2, align 8
  br label %7

7:                                                ; preds = %5, %1
  %8 = phi i8* [ %6, %5 ], [ %3, %1 ]
  ret i8* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh5TType7realizeEv(%"class.sh::TType"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 16
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = tail call i8* @_ZNK2sh5TType16buildMangledNameEv(%"class.sh::TType"* %0) #15
  store i8* %6, i8** %2, align 8
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2sh5TType20createSamplerSymbolsERKNS_15ImmutableStringERKNSt3__112basic_stringIcNS4_11char_traitsIcEE14pool_allocatorIcEEEPNS_7TVectorIPKNS_9TVariableEEEPNS_4TMapISG_SA_NS4_4lessISG_EEEEPNS_12TSymbolTableE(%"class.sh::TType"* nocapture readonly, %"class.sh::ImmutableString"* dereferenceable(16), %"class.std::__1::basic_string"* dereferenceable(24), %"class.sh::TVector.15"*, %"class.sh::TMap"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #1 align 2 {
  %7 = alloca %"class.std::__1::tuple", align 8
  %8 = alloca %"class.std::__1::tuple.82", align 1
  %9 = alloca %"class.sh::TType", align 8
  %10 = alloca %"class.std::__1::basic_stringstream", align 8
  %11 = alloca %"class.std::__1::basic_ostringstream", align 8
  %12 = alloca %"class.sh::ImmutableString", align 8
  %13 = alloca %"class.std::__1::basic_string.56", align 8
  %14 = alloca %"class.std::__1::basic_string", align 8
  %15 = alloca %"class.sh::TVariable"*, align 8
  %16 = tail call zeroext i1 @_ZNK2sh5TType29isStructureContainingSamplersEv(%"class.sh::TType"* %0)
  br i1 %16, label %17, label %165

17:                                               ; preds = %6
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %158, label %21

21:                                               ; preds = %17
  %22 = bitcast %"class.sh::TType"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %22) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 184, i1 false)
  %23 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %9, i64 0, i32 10
  %24 = bitcast %"class.sh::TSpan"* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false) #15
  %25 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %9, %"class.sh::TType"* dereferenceable(184) %0) #15
  %26 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %9, i64 0, i32 11
  %27 = bitcast %"class.sh::TVector"** %26 to %"class.std::__1::vector"**
  %28 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %27, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %28, i64 0, i32 0, i32 1
  %30 = load i32*, i32** %29, align 8
  %31 = getelementptr inbounds i32, i32* %30, i64 -1
  store i32* %31, i32** %29, align 8
  %32 = load %"class.sh::TVector"*, %"class.sh::TVector"** %26, align 8
  %33 = bitcast %"class.sh::TVector"* %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %32, i64 0, i32 0, i32 0, i32 1
  %36 = bitcast i32** %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %37, %34
  %39 = ashr exact i64 %38, 2
  %40 = bitcast %"class.sh::TSpan"* %23 to i64*
  store i64 %34, i64* %40, align 8
  %41 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %9, i64 0, i32 10, i32 1
  store i64 %39, i64* %41, align 8
  %42 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %9, i64 0, i32 16
  store i8* null, i8** %42, align 8
  %43 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 0
  %44 = load i32*, i32** %43, align 8
  %45 = load i64, i64* %18, align 8
  %46 = add i64 %45, -1
  %47 = getelementptr inbounds i32, i32* %44, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %106, label %50

50:                                               ; preds = %21
  %51 = bitcast %"class.std::__1::basic_stringstream"* %10 to i8*
  %52 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %10, i64 0, i32 0, i32 1
  %53 = bitcast %"class.std::__1::basic_ostream.base"* %52 to %"class.std::__1::basic_ostream"*
  %54 = bitcast %"class.std::__1::basic_ostringstream"* %11 to i8*
  %55 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %11, i64 0, i32 2
  %56 = getelementptr inbounds %"class.std::__1::basic_ios.base", %"class.std::__1::basic_ios.base"* %55, i64 0, i32 0, i32 0
  %57 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %11, i64 0, i32 0, i32 0
  %58 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %11, i64 0, i32 1
  %59 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %58, i64 0, i32 0
  %60 = bitcast %"class.std::__1::basic_ostringstream"* %11 to i64*
  %61 = bitcast %"class.std::__1::basic_ios.base"* %55 to i64*
  %62 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %11, i64 0, i32 2, i32 0
  %63 = bitcast %"class.std::__1::basic_stringbuf.64"* %58 to i8*
  %64 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %11, i64 0, i32 2, i32 1
  %65 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %11, i64 0, i32 2, i32 2
  %66 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %58, i64 0, i32 0, i32 0
  %67 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %11, i64 0, i32 1, i32 1
  %68 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %11, i64 0, i32 1, i32 3
  %69 = bitcast %"class.std::__1::basic_string"* %67 to i8*
  %70 = bitcast %"class.std::__1::basic_ostringstream"* %11 to %"class.std::__1::basic_ostream"*
  %71 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"*
  %72 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"* %71, i64 0, i32 1, i32 0
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %75 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %76 = bitcast %"class.sh::ImmutableString"* %12 to i8*
  %77 = bitcast %"class.std::__1::basic_string.56"* %13 to i8*
  %78 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %10, i64 0, i32 1
  %79 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %12, i64 0, i32 0
  %80 = bitcast %"class.std::__1::basic_string.56"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %81 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %80, i64 0, i32 1, i32 0
  %82 = getelementptr inbounds %"class.std::__1::basic_string.56", %"class.std::__1::basic_string.56"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = getelementptr inbounds %"class.std::__1::basic_string.56", %"class.std::__1::basic_string.56"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %84 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %12, i64 0, i32 1
  %85 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  %86 = bitcast %"class.std::__1::basic_ios.base"* %55 to %"class.std::__1::basic_ios"*
  %87 = load i64, i64* bitcast ([10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE to i64*), align 8
  %88 = bitcast %"class.std::__1::basic_stringstream"* %10 to i64*
  %89 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 8) to i64*), align 8
  %90 = inttoptr i64 %87 to i8*
  %91 = getelementptr i8, i8* %90, i64 -24
  %92 = bitcast i8* %91 to i64*
  %93 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 9) to i64*), align 8
  %94 = bitcast %"class.std::__1::basic_ostream.base"* %52 to i64*
  %95 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %78, i64 0, i32 0, i32 0
  %96 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %10, i64 0, i32 1, i32 1
  %97 = bitcast %"class.std::__1::basic_string.56"* %96 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %98 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %97, i64 0, i32 1, i32 0
  %99 = getelementptr inbounds %"class.std::__1::basic_string.56", %"class.std::__1::basic_string.56"* %96, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %100 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %78, i64 0, i32 0
  %101 = bitcast %"class.std::__1::basic_stringstream"* %10 to %"class.std::__1::basic_iostream"*
  %102 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %10, i64 0, i32 2
  %103 = bitcast %"class.std::__1::basic_ios.base"* %102 to %"class.std::__1::basic_ios"*
  %104 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %11, i64 0, i32 1
  %105 = bitcast %"class.std::__1::basic_stringbuf.64"* %104 to i8*
  br label %107

106:                                              ; preds = %150, %21
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %22) #15
  br label %413

107:                                              ; preds = %50, %150
  %108 = phi i32 [ 0, %50 ], [ %151, %150 ]
  call void @llvm.lifetime.start.p0i8(i64 280, i8* nonnull %51) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 280, i1 false)
  call void @_ZN2sh16InitializeStreamINSt3__118basic_stringstreamIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_v(%"class.std::__1::basic_stringstream"* nonnull sret %10)
  %109 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZlsRNSt3__113basic_ostreamIcNS_11char_traitsIcEEEERKN2sh15ImmutableStringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %53, %"class.sh::ImmutableString"* dereferenceable(16) %1) #15
  %110 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %109, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.90, i64 0, i64 0), i64 1) #15
  %111 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(%"class.std::__1::basic_ostream"* %110, i32 %108) #15
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %54) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %105, i8 -86, i64 256, i1 false)
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE0_NS_13basic_ostreamIcS2_EE, i64 0, inrange i32 0, i64 3) to i64), i64* %60, align 8
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE0_NS_13basic_ostreamIcS2_EE, i64 0, inrange i32 1, i64 3) to i64), i64* %61, align 8
  call void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"* %62, i8* %63) #15
  store %"class.std::__1::basic_ostream"* null, %"class.std::__1::basic_ostream"** %64, align 8
  store i32 -1, i32* %65, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %57, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %56, align 8
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"* %59) #15
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %66, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 32, i1 false) #15
  store i32 16, i32* %68, align 8
  %112 = load i8, i8* %72, align 1
  %113 = icmp slt i8 %112, 0
  %114 = load i8*, i8** %73, align 8
  %115 = load i64, i64* %74, align 8
  %116 = zext i8 %112 to i64
  %117 = select i1 %113, i8* %114, i8* %75
  %118 = select i1 %113, i64 %115, i64 %116
  %119 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %70, i8* %117, i64 %118) #15
  %120 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %119, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.91, i64 0, i64 0), i64 1) #15
  %121 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(%"class.std::__1::basic_ostream"* %120, i32 %108) #15
  %122 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %121, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.92, i64 0, i64 0), i64 1) #15
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %76) #15
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %77) #15
  call void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string.56"* nonnull sret %13, %"class.std::__1::basic_stringbuf"* %78) #15
  %123 = load i8, i8* %81, align 1
  %124 = icmp slt i8 %123, 0
  %125 = load i8*, i8** %82, align 8
  %126 = load i64, i64* %83, align 8
  %127 = zext i8 %123 to i64
  %128 = select i1 %124, i8* %125, i8* %77
  %129 = select i1 %124, i64 %126, i64 %127
  %130 = add i64 %129, 1
  %131 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %132 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %131, i64 %130) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %132, i8* align 1 %128, i64 %130, i1 false) #15
  store i8* %132, i8** %79, align 8
  %133 = load i8, i8* %81, align 1
  %134 = icmp slt i8 %133, 0
  %135 = load i64, i64* %83, align 8
  %136 = zext i8 %133 to i64
  %137 = select i1 %134, i64 %135, i64 %136
  store i64 %137, i64* %84, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %85) #15
  call void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE3strEv(%"class.std::__1::basic_string"* nonnull sret %14, %"class.std::__1::basic_stringbuf.64"* %58) #15
  call void @_ZNK2sh5TType20createSamplerSymbolsERKNS_15ImmutableStringERKNSt3__112basic_stringIcNS4_11char_traitsIcEE14pool_allocatorIcEEEPNS_7TVectorIPKNS_9TVariableEEEPNS_4TMapISG_SA_NS4_4lessISG_EEEEPNS_12TSymbolTableE(%"class.sh::TType"* nonnull %9, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %12, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %14, %"class.sh::TVector.15"* %3, %"class.sh::TMap"* %4, %"class.sh::TSymbolTable"* %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %85) #15
  %138 = load i8, i8* %81, align 1
  %139 = icmp slt i8 %138, 0
  br i1 %139, label %140, label %142

140:                                              ; preds = %107
  %141 = load i8*, i8** %82, align 8
  call void @_ZdlPv(i8* %141) #17
  br label %142

142:                                              ; preds = %107, %140
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %77) #15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %76) #15
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 3) to i64), i64* %60, align 8
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 1, i64 3) to i64), i64* %61, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %66, align 8
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %59) #15
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* nonnull %70, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, i64 1)) #15
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %86) #15
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %54) #15
  store i64 %87, i64* %88, align 8
  %143 = load i64, i64* %92, align 8
  %144 = getelementptr inbounds i8, i8* %51, i64 %143
  %145 = bitcast i8* %144 to i64*
  store i64 %89, i64* %145, align 8
  store i64 %93, i64* %94, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %95, align 8
  %146 = load i8, i8* %98, align 1
  %147 = icmp slt i8 %146, 0
  br i1 %147, label %148, label %150

148:                                              ; preds = %142
  %149 = load i8*, i8** %99, align 8
  call void @_ZdlPv(i8* %149) #17
  br label %150

150:                                              ; preds = %142, %148
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %100) #15
  call void @_ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_iostream"* nonnull %101, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1)) #15
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %103) #15
  call void @llvm.lifetime.end.p0i8(i64 280, i8* nonnull %51) #15
  %151 = add nuw i32 %108, 1
  %152 = load i32*, i32** %43, align 8
  %153 = load i64, i64* %18, align 8
  %154 = add i64 %153, -1
  %155 = getelementptr inbounds i32, i32* %152, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = icmp ult i32 %151, %156
  br i1 %157, label %107, label %106

158:                                              ; preds = %17
  %159 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %160 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %159, align 8
  %161 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %1, i64 0, i32 0
  %162 = load i8*, i8** %161, align 8
  %163 = icmp eq i8* %162, null
  %164 = select i1 %163, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.93, i64 0, i64 0), i8* %162
  tail call void @_ZNK2sh10TStructure20createSamplerSymbolsEPKcRKNSt3__112basic_stringIcNS3_11char_traitsIcEE14pool_allocatorIcEEEPNS_7TVectorIPKNS_9TVariableEEEPNS_4TMapISF_S9_NS3_4lessISF_EEEEPNS_12TSymbolTableE(%"class.sh::TStructure"* %160, i8* %164, %"class.std::__1::basic_string"* dereferenceable(24) %2, %"class.sh::TVector.15"* %3, %"class.sh::TMap"* %4, %"class.sh::TSymbolTable"* %5) #15
  br label %413

165:                                              ; preds = %6
  %166 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %167 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %166, i64 40) #15
  %168 = bitcast i8* %167 to %"class.sh::TVariable"*
  %169 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %170 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %169, i64 184) #15
  %171 = bitcast i8* %170 to %"class.sh::TType"*
  %172 = getelementptr inbounds i8, i8* %170, i64 120
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %172, i8 0, i64 16, i1 false) #15
  %173 = tail call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %171, %"class.sh::TType"* dereferenceable(184) %0) #15
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %168, %"class.sh::TSymbolTable"* %5, %"class.sh::ImmutableString"* dereferenceable(16) %1, %"class.sh::TType"* %171, i8 zeroext 2, i8 zeroext 0) #15
  %174 = ptrtoint i8* %167 to i64
  %175 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %3, i64 0, i32 0, i32 0, i32 1
  %176 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %175, align 8
  %177 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %178 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %177, align 8
  %179 = icmp ult %"class.sh::TVariable"** %176, %178
  %180 = ptrtoint %"class.sh::TVariable"** %178 to i64
  br i1 %179, label %181, label %186

181:                                              ; preds = %165
  %182 = bitcast %"class.sh::TVariable"** %176 to i64*
  store i64 %174, i64* %182, align 8
  %183 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %176, i64 1
  %184 = ptrtoint %"class.sh::TVariable"** %183 to i64
  %185 = bitcast %"class.sh::TVariable"*** %175 to i64*
  store i64 %184, i64* %185, align 8
  br label %399

186:                                              ; preds = %165
  %187 = ptrtoint %"class.sh::TVariable"** %176 to i64
  %188 = bitcast %"class.sh::TVariable"*** %175 to i64*
  %189 = bitcast %"class.sh::TVector.15"* %3 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = sub i64 %187, %190
  %192 = ashr exact i64 %191, 3
  %193 = add nsw i64 %192, 1
  %194 = icmp ugt i64 %193, 2305843009213693951
  br i1 %194, label %195, label %197

195:                                              ; preds = %186
  %196 = bitcast %"class.sh::TVector.15"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %196) #16
  unreachable

197:                                              ; preds = %186
  %198 = bitcast %"class.sh::TVariable"*** %177 to i64*
  %199 = sub i64 %180, %190
  %200 = ashr exact i64 %199, 3
  %201 = icmp ult i64 %200, 1152921504606846975
  br i1 %201, label %202, label %207

202:                                              ; preds = %197
  %203 = ashr exact i64 %199, 2
  %204 = icmp ult i64 %203, %193
  %205 = select i1 %204, i64 %193, i64 %203
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %213, label %207

207:                                              ; preds = %202, %197
  %208 = phi i64 [ %205, %202 ], [ 2305843009213693951, %197 ]
  %209 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %210 = shl i64 %208, 3
  %211 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %209, i64 %210) #15
  %212 = bitcast i8* %211 to %"class.sh::TVariable"**
  br label %213

213:                                              ; preds = %207, %202
  %214 = phi i64 [ %208, %207 ], [ 0, %202 ]
  %215 = phi %"class.sh::TVariable"** [ %212, %207 ], [ null, %202 ]
  %216 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %215, i64 %192
  %217 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %215, i64 %214
  %218 = ptrtoint %"class.sh::TVariable"** %217 to i64
  %219 = bitcast %"class.sh::TVariable"** %216 to i64*
  store i64 %174, i64* %219, align 8
  %220 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %216, i64 1
  %221 = ptrtoint %"class.sh::TVariable"** %220 to i64
  %222 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %3, i64 0, i32 0, i32 0, i32 0
  %223 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %222, align 8
  %224 = ptrtoint %"class.sh::TVariable"** %223 to i64
  %225 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %175, align 8
  %226 = icmp eq %"class.sh::TVariable"** %225, %223
  br i1 %226, label %396, label %227

227:                                              ; preds = %213
  %228 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %225, i64 -1
  %229 = ptrtoint %"class.sh::TVariable"** %228 to i64
  %230 = sub i64 %229, %224
  %231 = lshr i64 %230, 3
  %232 = add nuw nsw i64 %231, 1
  %233 = icmp ult i64 %232, 4
  br i1 %233, label %326, label %234

234:                                              ; preds = %227
  %235 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %225, i64 -1
  %236 = ptrtoint %"class.sh::TVariable"** %235 to i64
  %237 = sub i64 %236, %224
  %238 = lshr i64 %237, 3
  %239 = xor i64 %238, -1
  %240 = add nsw i64 %192, %239
  %241 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %215, i64 %240
  %242 = xor i64 %238, -1
  %243 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %225, i64 %242
  %244 = icmp ult %"class.sh::TVariable"** %241, %225
  %245 = icmp ult %"class.sh::TVariable"** %243, %216
  %246 = and i1 %244, %245
  br i1 %246, label %326, label %247

247:                                              ; preds = %234
  %248 = and i64 %232, 4611686018427387900
  %249 = sub nsw i64 0, %248
  %250 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %216, i64 %249
  %251 = sub nsw i64 0, %248
  %252 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %225, i64 %251
  %253 = add nsw i64 %248, -4
  %254 = lshr exact i64 %253, 2
  %255 = add nuw nsw i64 %254, 1
  %256 = and i64 %255, 1
  %257 = icmp eq i64 %253, 0
  br i1 %257, label %304, label %258

258:                                              ; preds = %247
  %259 = sub nuw nsw i64 %255, %256
  %260 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %216, i64 -1
  %261 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %225, i64 -1
  %262 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %216, i64 -1
  %263 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %225, i64 -1
  br label %264

264:                                              ; preds = %264, %258
  %265 = phi i64 [ 0, %258 ], [ %299, %264 ]
  %266 = phi i64 [ %259, %258 ], [ %300, %264 ]
  %267 = sub i64 0, %265
  %268 = sub i64 0, %265
  %269 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %260, i64 %267
  %270 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %261, i64 %268
  %271 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %270, i64 -1
  %272 = bitcast %"class.sh::TVariable"** %271 to <2 x i64>*
  %273 = load <2 x i64>, <2 x i64>* %272, align 8, !alias.scope !90
  %274 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %270, i64 -2
  %275 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %274, i64 -1
  %276 = bitcast %"class.sh::TVariable"** %275 to <2 x i64>*
  %277 = load <2 x i64>, <2 x i64>* %276, align 8, !alias.scope !90
  %278 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %269, i64 -1
  %279 = bitcast %"class.sh::TVariable"** %278 to <2 x i64>*
  store <2 x i64> %273, <2 x i64>* %279, align 8, !alias.scope !93, !noalias !90
  %280 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %269, i64 -2
  %281 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %280, i64 -1
  %282 = bitcast %"class.sh::TVariable"** %281 to <2 x i64>*
  store <2 x i64> %277, <2 x i64>* %282, align 8, !alias.scope !93, !noalias !90
  %283 = sub nuw nsw i64 -4, %265
  %284 = sub nuw nsw i64 -4, %265
  %285 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %262, i64 %283
  %286 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %263, i64 %284
  %287 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %286, i64 -1
  %288 = bitcast %"class.sh::TVariable"** %287 to <2 x i64>*
  %289 = load <2 x i64>, <2 x i64>* %288, align 8, !alias.scope !90
  %290 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %286, i64 -2
  %291 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %290, i64 -1
  %292 = bitcast %"class.sh::TVariable"** %291 to <2 x i64>*
  %293 = load <2 x i64>, <2 x i64>* %292, align 8, !alias.scope !90
  %294 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %285, i64 -1
  %295 = bitcast %"class.sh::TVariable"** %294 to <2 x i64>*
  store <2 x i64> %289, <2 x i64>* %295, align 8, !alias.scope !93, !noalias !90
  %296 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %285, i64 -2
  %297 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %296, i64 -1
  %298 = bitcast %"class.sh::TVariable"** %297 to <2 x i64>*
  store <2 x i64> %293, <2 x i64>* %298, align 8, !alias.scope !93, !noalias !90
  %299 = add i64 %265, 8
  %300 = add i64 %266, -2
  %301 = icmp eq i64 %300, 0
  br i1 %301, label %302, label %264, !llvm.loop !95

302:                                              ; preds = %264
  %303 = sub nuw nsw i64 -8, %265
  br label %304

304:                                              ; preds = %302, %247
  %305 = phi i64 [ 0, %247 ], [ %303, %302 ]
  %306 = icmp eq i64 %256, 0
  br i1 %306, label %324, label %307

307:                                              ; preds = %304
  %308 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %216, i64 -1
  %309 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %225, i64 -1
  %310 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %308, i64 %305
  %311 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %309, i64 %305
  %312 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %311, i64 -1
  %313 = bitcast %"class.sh::TVariable"** %312 to <2 x i64>*
  %314 = load <2 x i64>, <2 x i64>* %313, align 8, !alias.scope !90
  %315 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %311, i64 -2
  %316 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %315, i64 -1
  %317 = bitcast %"class.sh::TVariable"** %316 to <2 x i64>*
  %318 = load <2 x i64>, <2 x i64>* %317, align 8, !alias.scope !90
  %319 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %310, i64 -1
  %320 = bitcast %"class.sh::TVariable"** %319 to <2 x i64>*
  store <2 x i64> %314, <2 x i64>* %320, align 8, !alias.scope !93, !noalias !90
  %321 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %310, i64 -2
  %322 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %321, i64 -1
  %323 = bitcast %"class.sh::TVariable"** %322 to <2 x i64>*
  store <2 x i64> %318, <2 x i64>* %323, align 8, !alias.scope !93, !noalias !90
  br label %324

324:                                              ; preds = %304, %307
  %325 = icmp eq i64 %232, %248
  br i1 %325, label %396, label %326

326:                                              ; preds = %324, %234, %227
  %327 = phi %"class.sh::TVariable"** [ %216, %234 ], [ %216, %227 ], [ %250, %324 ]
  %328 = phi %"class.sh::TVariable"** [ %225, %234 ], [ %225, %227 ], [ %252, %324 ]
  %329 = getelementptr %"class.sh::TVariable"*, %"class.sh::TVariable"** %328, i64 -1
  %330 = ptrtoint %"class.sh::TVariable"** %329 to i64
  %331 = sub i64 %330, %224
  %332 = lshr i64 %331, 3
  %333 = add nuw nsw i64 %332, 1
  %334 = and i64 %333, 7
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %347, label %336

336:                                              ; preds = %326, %336
  %337 = phi %"class.sh::TVariable"** [ %340, %336 ], [ %327, %326 ]
  %338 = phi %"class.sh::TVariable"** [ %341, %336 ], [ %328, %326 ]
  %339 = phi i64 [ %345, %336 ], [ %334, %326 ]
  %340 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %337, i64 -1
  %341 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %338, i64 -1
  %342 = bitcast %"class.sh::TVariable"** %341 to i64*
  %343 = load i64, i64* %342, align 8
  %344 = bitcast %"class.sh::TVariable"** %340 to i64*
  store i64 %343, i64* %344, align 8
  %345 = add i64 %339, -1
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %347, label %336, !llvm.loop !96

347:                                              ; preds = %336, %326
  %348 = phi %"class.sh::TVariable"** [ undef, %326 ], [ %340, %336 ]
  %349 = phi %"class.sh::TVariable"** [ %327, %326 ], [ %340, %336 ]
  %350 = phi %"class.sh::TVariable"** [ %328, %326 ], [ %341, %336 ]
  %351 = icmp ult i64 %331, 56
  br i1 %351, label %396, label %352

352:                                              ; preds = %347, %352
  %353 = phi %"class.sh::TVariable"** [ %390, %352 ], [ %349, %347 ]
  %354 = phi %"class.sh::TVariable"** [ %391, %352 ], [ %350, %347 ]
  %355 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %353, i64 -1
  %356 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %354, i64 -1
  %357 = bitcast %"class.sh::TVariable"** %356 to i64*
  %358 = load i64, i64* %357, align 8
  %359 = bitcast %"class.sh::TVariable"** %355 to i64*
  store i64 %358, i64* %359, align 8
  %360 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %353, i64 -2
  %361 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %354, i64 -2
  %362 = bitcast %"class.sh::TVariable"** %361 to i64*
  %363 = load i64, i64* %362, align 8
  %364 = bitcast %"class.sh::TVariable"** %360 to i64*
  store i64 %363, i64* %364, align 8
  %365 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %353, i64 -3
  %366 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %354, i64 -3
  %367 = bitcast %"class.sh::TVariable"** %366 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = bitcast %"class.sh::TVariable"** %365 to i64*
  store i64 %368, i64* %369, align 8
  %370 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %353, i64 -4
  %371 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %354, i64 -4
  %372 = bitcast %"class.sh::TVariable"** %371 to i64*
  %373 = load i64, i64* %372, align 8
  %374 = bitcast %"class.sh::TVariable"** %370 to i64*
  store i64 %373, i64* %374, align 8
  %375 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %353, i64 -5
  %376 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %354, i64 -5
  %377 = bitcast %"class.sh::TVariable"** %376 to i64*
  %378 = load i64, i64* %377, align 8
  %379 = bitcast %"class.sh::TVariable"** %375 to i64*
  store i64 %378, i64* %379, align 8
  %380 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %353, i64 -6
  %381 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %354, i64 -6
  %382 = bitcast %"class.sh::TVariable"** %381 to i64*
  %383 = load i64, i64* %382, align 8
  %384 = bitcast %"class.sh::TVariable"** %380 to i64*
  store i64 %383, i64* %384, align 8
  %385 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %353, i64 -7
  %386 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %354, i64 -7
  %387 = bitcast %"class.sh::TVariable"** %386 to i64*
  %388 = load i64, i64* %387, align 8
  %389 = bitcast %"class.sh::TVariable"** %385 to i64*
  store i64 %388, i64* %389, align 8
  %390 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %353, i64 -8
  %391 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %354, i64 -8
  %392 = bitcast %"class.sh::TVariable"** %391 to i64*
  %393 = load i64, i64* %392, align 8
  %394 = bitcast %"class.sh::TVariable"** %390 to i64*
  store i64 %393, i64* %394, align 8
  %395 = icmp eq %"class.sh::TVariable"** %391, %223
  br i1 %395, label %396, label %352, !llvm.loop !97

396:                                              ; preds = %347, %352, %324, %213
  %397 = phi %"class.sh::TVariable"** [ %216, %213 ], [ %250, %324 ], [ %348, %347 ], [ %390, %352 ]
  %398 = ptrtoint %"class.sh::TVariable"** %397 to i64
  store i64 %398, i64* %189, align 8
  store i64 %221, i64* %188, align 8
  store i64 %218, i64* %198, align 8
  br label %399

399:                                              ; preds = %181, %396
  %400 = icmp eq %"class.sh::TMap"* %4, null
  br i1 %400, label %413, label %401

401:                                              ; preds = %399
  %402 = bitcast %"class.sh::TVariable"** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %402) #15
  %403 = bitcast %"class.sh::TVariable"** %15 to i8**
  store i8* %167, i8** %403, align 8
  %404 = getelementptr inbounds %"class.sh::TMap", %"class.sh::TMap"* %4, i64 0, i32 0, i32 0
  %405 = bitcast %"class.std::__1::tuple"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %405) #15
  %406 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %7, i64 0, i32 0, i32 0, i32 0
  store %"class.sh::TVariable"** %15, %"class.sh::TVariable"*** %406, align 8
  %407 = getelementptr inbounds %"class.std::__1::tuple.82", %"class.std::__1::tuple.82"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %407) #15
  %408 = call { %"class.std::__1::__tree_end_node"*, i8 } @_ZNSt3__16__treeINS_12__value_typeIPKN2sh9TVariableENS_12basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEEEEENS_19__map_value_compareIS5_SC_NS_4lessIS5_EELb1EEES9_ISC_EE25__emplace_unique_key_argsIS5_JRKNS_21piecewise_construct_tENS_5tupleIJOS5_EEENSN_IJEEEEEENS_4pairINS_15__tree_iteratorISC_PNS_11__tree_nodeISC_PvEElEEbEERKT_DpOT0_(%"class.std::__1::__tree"* %404, %"class.sh::TVariable"** nonnull dereferenceable(8) %15, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %7, %"class.std::__1::tuple.82"* nonnull dereferenceable(1) %8) #15
  %409 = extractvalue { %"class.std::__1::__tree_end_node"*, i8 } %408, 0
  %410 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %409, i64 5
  %411 = bitcast %"class.std::__1::__tree_end_node"* %410 to %"class.std::__1::basic_string"*
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %407) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %405) #15
  %412 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEEaSERKS5_(%"class.std::__1::basic_string"* %411, %"class.std::__1::basic_string"* dereferenceable(24) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %402) #15
  br label %413

413:                                              ; preds = %401, %399, %106, %158
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16InitializeStreamINSt3__118basic_stringstreamIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEET_v(%"class.std::__1::basic_stringstream"* noalias sret) local_unnamed_addr #1 comdat {
  %2 = alloca %"class.std::__1::locale", align 8
  %3 = alloca %"class.std::__1::locale", align 8
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = bitcast %"class.std::__1::basic_stringstream"* %0 to i8*
  %6 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast i64* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 272, i1 false)
  %8 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %0, i64 0, i32 2, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 2, i64 3) to i32 (...)**), i32 (...)*** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %0, i64 0, i32 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %11, i64 0, i32 0
  %13 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 2) to i64*), align 8
  %14 = bitcast %"class.std::__1::basic_stringstream"* %0 to i64*
  store i64 %13, i64* %14, align 8
  %15 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 3) to i64*), align 8
  %16 = bitcast %"class.std::__1::basic_stringstream"* %0 to i8**
  %17 = inttoptr i64 %13 to i8*
  %18 = getelementptr i8, i8* %17, i64 -24
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds i8, i8* %5, i64 %20
  %22 = bitcast i8* %21 to i64*
  store i64 %15, i64* %22, align 8
  %23 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %0, i64 0, i32 0, i32 0, i32 1
  store i64 0, i64* %23, align 8
  %24 = load i8*, i8** %16, align 8
  %25 = getelementptr i8, i8* %24, i64 -24
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %5, i64 %27
  %29 = bitcast i8* %28 to %"class.std::__1::ios_base"*
  %30 = bitcast %"class.std::__1::basic_stringbuf"* %11 to i8*
  tail call void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"* %29, i8* %30) #15
  %31 = getelementptr inbounds i8, i8* %28, i64 136
  %32 = bitcast i8* %31 to %"class.std::__1::basic_ostream"**
  store %"class.std::__1::basic_ostream"* null, %"class.std::__1::basic_ostream"** %32, align 8
  %33 = getelementptr inbounds i8, i8* %28, i64 144
  %34 = bitcast i8* %33 to i32*
  store i32 -1, i32* %34, align 8
  %35 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %0, i64 0, i32 0, i32 1
  %36 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 4) to i64*), align 8
  %37 = bitcast %"class.std::__1::basic_ostream.base"* %35 to i64*
  store i64 %36, i64* %37, align 8
  %38 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 5) to i64*), align 8
  %39 = inttoptr i64 %36 to i8*
  %40 = getelementptr i8, i8* %39, i64 -24
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::basic_ostream.base"* %35 to i8*
  %44 = getelementptr inbounds i8, i8* %43, i64 %42
  %45 = bitcast i8* %44 to i64*
  store i64 %38, i64* %45, align 8
  %46 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1) to i64*), align 8
  store i64 %46, i64* %14, align 8
  %47 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 6) to i64*), align 8
  %48 = inttoptr i64 %46 to i8*
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %5, i64 %51
  %53 = bitcast i8* %52 to i64*
  store i64 %47, i64* %53, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 2, i64 3) to i32 (...)**), i32 (...)*** %8, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %10, align 8
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"* %12) #15
  %54 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %11, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %54, align 8
  %55 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %0, i64 0, i32 1, i32 1
  %56 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %0, i64 0, i32 1, i32 3
  %57 = bitcast %"class.std::__1::basic_string.56"* %55 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 32, i1 false) #15
  store i32 24, i32* %56, align 8
  %58 = load i8*, i8** %16, align 8
  %59 = getelementptr i8, i8* %58, i64 -24
  %60 = bitcast i8* %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds i8, i8* %5, i64 %61
  %63 = tail call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() #15
  %64 = bitcast %"class.std::__1::locale"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64)
  %65 = bitcast %"class.std::__1::locale"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %65)
  %66 = getelementptr inbounds %"class.std::__1::locale", %"class.std::__1::locale"* %4, i64 0, i32 0
  store %"class.std::__1::locale::__imp"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::locale::__imp"*), %"class.std::__1::locale::__imp"** %66, align 8, !alias.scope !98
  %67 = bitcast i8* %62 to %"class.std::__1::ios_base"*
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %67) #15
  call void @_ZNSt3__18ios_base5imbueERKNS_6localeE(%"class.std::__1::locale"* nonnull sret %2, %"class.std::__1::ios_base"* %67, %"class.std::__1::locale"* dereferenceable(8) %63) #15
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %2) #15
  %68 = getelementptr inbounds i8, i8* %62, i64 40
  %69 = bitcast i8* %68 to %"class.std::__1::basic_streambuf"**
  %70 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %69, align 8, !noalias !98
  %71 = icmp eq %"class.std::__1::basic_streambuf"* %70, null
  br i1 %71, label %80, label %72

72:                                               ; preds = %1
  %73 = bitcast %"class.std::__1::basic_streambuf"* %70 to void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)***
  %74 = load void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)**, void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)*** %73, align 8, !noalias !101
  %75 = getelementptr inbounds void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)*, void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)** %74, i64 2
  %76 = load void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)*, void (%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"*)** %75, align 8, !noalias !101
  call void %76(%"class.std::__1::basic_streambuf"* nonnull %70, %"class.std::__1::locale"* dereferenceable(8) %63) #15, !noalias !101
  %77 = getelementptr inbounds %"class.std::__1::locale", %"class.std::__1::locale"* %3, i64 0, i32 0
  store %"class.std::__1::locale::__imp"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::locale::__imp"*), %"class.std::__1::locale::__imp"** %77, align 8, !alias.scope !101, !noalias !98
  %78 = getelementptr inbounds %"class.std::__1::basic_streambuf", %"class.std::__1::basic_streambuf"* %70, i64 0, i32 1
  call void @_ZNSt3__16localeC1ERKS0_(%"class.std::__1::locale"* nonnull %3, %"class.std::__1::locale"* dereferenceable(8) %78) #15
  %79 = call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16localeaSERKS0_(%"class.std::__1::locale"* %78, %"class.std::__1::locale"* dereferenceable(8) %63) #15
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %3) #15
  br label %80

80:                                               ; preds = %1, %72
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %65)
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #15
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZlsRNSt3__113basic_ostreamIcNS_11char_traitsIcEEEERKN2sh15ImmutableStringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.sh::ImmutableString"* dereferenceable(16)) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(%"class.std::__1::basic_ostream"*, i32) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEED1Ev(%"class.std::__1::basic_ostringstream"*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %"class.std::__1::basic_ostringstream"* %0 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  %3 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %0, i64 0, i32 2
  %4 = bitcast %"class.std::__1::basic_ios.base"* %3 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %5 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %5, i64 0, i32 0
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %7) #15
  %8 = bitcast %"class.std::__1::basic_ostringstream"* %0 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %8, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, i64 1)) #15
  %9 = bitcast %"class.std::__1::basic_ios.base"* %3 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %9) #15
  ret void
}

declare void @_ZNK2sh10TStructure20createSamplerSymbolsEPKcRKNSt3__112basic_stringIcNS3_11char_traitsIcEE14pool_allocatorIcEEEPNS_7TVectorIPKNS_9TVariableEEEPNS_4TMapISF_S9_NS3_4lessISF_EEEEPNS_12TSymbolTableE(%"class.sh::TStructure"*, i8*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.sh::TVector.15"*, %"class.sh::TMap"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #5

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEEaSERKS5_(%"class.std::__1::basic_string"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp eq %"class.std::__1::basic_string"* %0, %1
  br i1 %3, label %57, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  %9 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %8, label %47, label %13

13:                                               ; preds = %4
  br i1 %12, label %17, label %14

14:                                               ; preds = %13
  %15 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %16 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false)
  br label %57

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = icmp ult i64 %21, 23
  br i1 %22, label %23, label %30

23:                                               ; preds = %17
  %24 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %25 = trunc i64 %21 to i8
  store i8 %25, i8* %6, align 1
  %26 = icmp eq i64 %21, 0
  br i1 %26, label %28, label %27

27:                                               ; preds = %23
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 %19, i64 %21, i1 false) #15
  br label %28

28:                                               ; preds = %27, %23
  %29 = getelementptr inbounds i8, i8* %24, i64 %21
  store i8 0, i8* %29, align 1
  br label %57

30:                                               ; preds = %17
  %31 = add i64 %21, -22
  %32 = icmp ugt i64 %31, -40
  br i1 %32, label %33, label %35

33:                                               ; preds = %30
  %34 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %34) #16
  unreachable

35:                                               ; preds = %30
  %36 = icmp ugt i64 %21, 44
  %37 = select i1 %36, i64 %21, i64 44
  %38 = add nuw i64 %37, 16
  %39 = and i64 %38, -16
  %40 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %41 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %40, i64 %39) #15
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %19, i64 %21, i1 false) #15
  %42 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %41, i8** %42, align 8
  %43 = or i64 %39, -9223372036854775808
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %21, i64* %45, align 8
  %46 = getelementptr inbounds i8, i8* %41, i64 %21
  store i8 0, i8* %46, align 1
  br label %57

47:                                               ; preds = %4
  %48 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %53 = zext i8 %11 to i64
  %54 = select i1 %12, i8* %49, i8* %52
  %55 = select i1 %12, i64 %51, i64 %53
  %56 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %0, i8* %54, i64 %55)
  br label %57

57:                                               ; preds = %35, %28, %14, %2, %47
  %58 = phi %"class.std::__1::basic_string"* [ %56, %47 ], [ %0, %2 ], [ %0, %14 ], [ %0, %28 ], [ %0, %35 ]
  ret %"class.std::__1::basic_string"* %58
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh20TFieldListCollectionC2EPKNS_7TVectorIPNS_6TFieldEEE(%"class.sh::TFieldListCollection"* nocapture, %"class.sh::TVector.1"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sh::TFieldListCollection", %"class.sh::TFieldListCollection"* %0, i64 0, i32 0
  store %"class.sh::TVector.1"* %1, %"class.sh::TVector.1"** %3, align 8
  %4 = getelementptr inbounds %"class.sh::TFieldListCollection", %"class.sh::TFieldListCollection"* %0, i64 0, i32 1
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %"class.sh::TFieldListCollection", %"class.sh::TFieldListCollection"* %0, i64 0, i32 2
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %"class.sh::TFieldListCollection", %"class.sh::TFieldListCollection"* %0, i64 0, i32 3
  %7 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2sh20TFieldListCollection21buildMangledFieldListEv(%"class.std::__1::basic_string"* noalias sret, %"class.sh::TFieldListCollection"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #15
  %4 = bitcast %"class.sh::TFieldListCollection"* %1 to %"class.std::__1::vector.2"**
  %5 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %5, i64 0, i32 0, i32 0
  %7 = load %"class.sh::TField"**, %"class.sh::TField"*** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %5, i64 0, i32 0, i32 1
  %9 = load %"class.sh::TField"**, %"class.sh::TField"*** %8, align 8
  %10 = icmp eq %"class.sh::TField"** %7, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %22, %2
  ret void

12:                                               ; preds = %2, %22
  %13 = phi %"class.sh::TField"** [ %26, %22 ], [ %7, %2 ]
  %14 = load %"class.sh::TField"*, %"class.sh::TField"** %13, align 8
  %15 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %14, i64 0, i32 0
  %16 = load %"class.sh::TType"*, %"class.sh::TType"** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %16, i64 0, i32 16
  %18 = load i8*, i8** %17, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %20, label %22

20:                                               ; preds = %12
  %21 = tail call i8* @_ZNK2sh5TType16buildMangledNameEv(%"class.sh::TType"* %16) #15
  store i8* %21, i8** %17, align 8
  br label %22

22:                                               ; preds = %12, %20
  %23 = phi i8* [ %18, %12 ], [ %21, %20 ]
  %24 = tail call i64 @strlen(i8* %23) #15
  %25 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %23, i64 %24) #15
  %26 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %13, i64 1
  %27 = icmp eq %"class.sh::TField"** %26, %9
  br i1 %27, label %11, label %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2sh20TFieldListCollection19calculateObjectSizeEv(%"class.sh::TFieldListCollection"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = bitcast %"class.sh::TFieldListCollection"* %0 to %"class.std::__1::vector.2"**
  %3 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.sh::TField"**, %"class.sh::TField"*** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %3, i64 0, i32 0, i32 1
  %7 = load %"class.sh::TField"**, %"class.sh::TField"*** %6, align 8
  %8 = icmp eq %"class.sh::TField"** %5, %7
  br i1 %8, label %9, label %11

9:                                                ; preds = %87, %1
  %10 = phi i64 [ 0, %1 ], [ %92, %87 ]
  ret i64 %10

11:                                               ; preds = %1, %87
  %12 = phi i64 [ %92, %87 ], [ 0, %1 ]
  %13 = phi %"class.sh::TField"** [ %93, %87 ], [ %5, %1 ]
  %14 = load %"class.sh::TField"*, %"class.sh::TField"** %13, align 8
  %15 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %14, i64 0, i32 0
  %16 = load %"class.sh::TType"*, %"class.sh::TType"** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %16, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 90
  br i1 %19, label %20, label %32

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %16, i64 0, i32 13
  %22 = bitcast %"class.sh::TStructure"** %21 to i8**
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 32
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %43

28:                                               ; preds = %20
  %29 = getelementptr inbounds i8, i8* %23, i64 24
  %30 = bitcast i8* %29 to %"class.sh::TFieldListCollection"*
  %31 = tail call i64 @_ZNK2sh20TFieldListCollection19calculateObjectSizeEv(%"class.sh::TFieldListCollection"* %30) #15
  store i64 %31, i64* %25, align 8
  br label %40

32:                                               ; preds = %11
  %33 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %16, i64 0, i32 8
  %34 = load i8, i8* %33, align 8
  %35 = zext i8 %34 to i64
  %36 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %16, i64 0, i32 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = mul nuw nsw i64 %38, %35
  br label %40

40:                                               ; preds = %28, %32
  %41 = phi i64 [ %39, %32 ], [ %31, %28 ]
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %87, label %43

43:                                               ; preds = %20, %40
  %44 = phi i64 [ %41, %40 ], [ %26, %20 ]
  %45 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %16, i64 0, i32 10, i32 0
  %46 = load i32*, i32** %45, align 8
  %47 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %16, i64 0, i32 10, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds i32, i32* %46, i64 %48
  %50 = icmp eq i64 %48, 0
  br i1 %50, label %87, label %51

51:                                               ; preds = %43
  %52 = shl nsw i64 %48, 2
  %53 = add i64 %52, -4
  %54 = and i64 %53, 4
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %64

56:                                               ; preds = %51
  %57 = load i32, i32* %46, align 4
  %58 = zext i32 %57 to i64
  %59 = udiv i64 2147483647, %44
  %60 = icmp ult i64 %59, %58
  %61 = mul i64 %44, %58
  %62 = select i1 %60, i64 2147483647, i64 %61
  %63 = getelementptr inbounds i32, i32* %46, i64 1
  br label %64

64:                                               ; preds = %56, %51
  %65 = phi i64 [ %62, %56 ], [ undef, %51 ]
  %66 = phi i32* [ %63, %56 ], [ %46, %51 ]
  %67 = phi i64 [ %62, %56 ], [ %44, %51 ]
  %68 = icmp eq i64 %53, 0
  br i1 %68, label %87, label %69

69:                                               ; preds = %64, %69
  %70 = phi i32* [ %85, %69 ], [ %66, %64 ]
  %71 = phi i64 [ %84, %69 ], [ %67, %64 ]
  %72 = load i32, i32* %70, align 4
  %73 = zext i32 %72 to i64
  %74 = udiv i64 2147483647, %71
  %75 = icmp ult i64 %74, %73
  %76 = mul i64 %71, %73
  %77 = select i1 %75, i64 2147483647, i64 %76
  %78 = getelementptr inbounds i32, i32* %70, i64 1
  %79 = load i32, i32* %78, align 4
  %80 = zext i32 %79 to i64
  %81 = udiv i64 2147483647, %77
  %82 = icmp ult i64 %81, %80
  %83 = mul i64 %77, %80
  %84 = select i1 %82, i64 2147483647, i64 %83
  %85 = getelementptr inbounds i32, i32* %70, i64 2
  %86 = icmp eq i32* %85, %49
  br i1 %86, label %87, label %69

87:                                               ; preds = %64, %69, %43, %40
  %88 = phi i64 [ 0, %40 ], [ %44, %43 ], [ %65, %64 ], [ %84, %69 ]
  %89 = sub i64 2147483647, %12
  %90 = icmp ugt i64 %88, %89
  %91 = add i64 %88, %12
  %92 = select i1 %90, i64 2147483647, i64 %91
  %93 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %13, i64 1
  %94 = icmp eq %"class.sh::TField"** %93, %7
  br i1 %94, label %9, label %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2sh20TFieldListCollection23calculateDeepestNestingEv(%"class.sh::TFieldListCollection"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = bitcast %"class.sh::TFieldListCollection"* %0 to %"class.std::__1::vector.2"**
  %3 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %3, i64 0, i32 0, i32 1
  %5 = bitcast %"class.sh::TField"*** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.2"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %12, label %14

10:                                               ; preds = %14
  %11 = add i32 %26, 1
  br label %12

12:                                               ; preds = %10, %1
  %13 = phi i32 [ 1, %1 ], [ %11, %10 ]
  ret i32 %13

14:                                               ; preds = %1, %14
  %15 = phi %"class.std::__1::vector.2"* [ %28, %14 ], [ %3, %1 ]
  %16 = phi i64 [ %27, %14 ], [ 0, %1 ]
  %17 = phi i32 [ %26, %14 ], [ 0, %1 ]
  %18 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %15, i64 0, i32 0, i32 0
  %19 = load %"class.sh::TField"**, %"class.sh::TField"*** %18, align 8
  %20 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %19, i64 %16
  %21 = load %"class.sh::TField"*, %"class.sh::TField"** %20, align 8
  %22 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %21, i64 0, i32 0
  %23 = load %"class.sh::TType"*, %"class.sh::TType"** %22, align 8
  %24 = tail call i32 @_ZNK2sh5TType23getDeepestStructNestingEv(%"class.sh::TType"* %23)
  %25 = icmp slt i32 %17, %24
  %26 = select i1 %25, i32 %24, i32 %17
  %27 = add nuw i64 %16, 1
  %28 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %2, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %28, i64 0, i32 0, i32 1
  %30 = bitcast %"class.sh::TField"*** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.std::__1::vector.2"* %28 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %31, %33
  %35 = ashr exact i64 %34, 3
  %36 = icmp ult i64 %27, %35
  br i1 %36, label %14, label %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh11TPublicType10initializeERKNS_22TTypeSpecifierNonArrayENS_10TQualifierE(%"struct.sh::TPublicType"* nocapture, %"struct.sh::TTypeSpecifierNonArray"* nocapture readonly dereferenceable(40), i32) local_unnamed_addr #1 align 2 {
  %4 = bitcast %"struct.sh::TPublicType"* %0 to i8*
  %5 = bitcast %"struct.sh::TTypeSpecifierNonArray"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 40, i1 false)
  %6 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 0
  %7 = bitcast i32* %6 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %7, align 8
  %8 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 4
  %9 = bitcast %"struct.sh::WorkGroupSize"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 -1, i64 20, i1 false)
  %10 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 7
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 8
  store i32 -1, i32* %11, align 8
  %12 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 9
  store i8 0, i8* %12, align 4
  %13 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 10
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 12
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 13
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 14
  store i32 -1, i32* %16, align 8
  %17 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 15
  %18 = bitcast i32* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %18, i8 0, i64 20, i1 false)
  %19 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 20
  store i32 -1, i32* %19, align 8
  %20 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 21
  store i32 -1, i32* %20, align 4
  %21 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 22
  store i8 0, i8* %21, align 8
  %22 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 2
  %23 = bitcast %"struct.sh::TMemoryQualifier"* %22 to i40*
  store i40 0, i40* %23, align 4
  %24 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 3
  store i32 %2, i32* %24, align 4
  %25 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 4
  store i8 0, i8* %25, align 8
  %26 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 6
  store i32 0, i32* %27, align 4
  %28 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 7
  store %"class.sh::TVector"* null, %"class.sh::TVector"** %28, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh11TPublicType19initializeBasicTypeENS_10TBasicTypeE(%"struct.sh::TPublicType"* nocapture, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 0, i32 0
  store i32 %1, i32* %3, align 8
  %4 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 0, i32 1
  store i8 1, i8* %4, align 4
  %5 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 0, i32 2
  store i8 1, i8* %5, align 1
  %6 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 0
  %7 = bitcast i32* %6 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %7, align 8
  %8 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 4
  %9 = bitcast %"struct.sh::WorkGroupSize"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 -1, i64 20, i1 false)
  %10 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 7
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 8
  store i32 -1, i32* %11, align 8
  %12 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 9
  store i8 0, i8* %12, align 4
  %13 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 10
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 12
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 13
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 14
  store i32 -1, i32* %16, align 8
  %17 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 15
  %18 = bitcast i32* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %18, i8 0, i64 20, i1 false)
  %19 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 20
  store i32 -1, i32* %19, align 8
  %20 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 21
  store i32 -1, i32* %20, align 4
  %21 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 1, i32 22
  store i8 0, i8* %21, align 8
  %22 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 2
  %23 = bitcast %"struct.sh::TMemoryQualifier"* %22 to i40*
  store i40 0, i40* %23, align 4
  %24 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 3
  store i32 0, i32* %24, align 4
  %25 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 4
  store i8 0, i8* %25, align 8
  %26 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 6
  store i32 0, i32* %27, align 4
  %28 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 7
  store %"class.sh::TVector"* null, %"class.sh::TVector"** %28, align 8
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh11TPublicType27isStructureContainingArraysEv(%"struct.sh::TPublicType"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 0, i32 3
  %3 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %2, align 8
  %4 = icmp eq %"class.sh::TStructure"* %3, null
  br i1 %4, label %27, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %3, i64 0, i32 2
  %7 = bitcast %"class.sh::TFieldListCollection"* %6 to %"class.std::__1::vector.2"**
  %8 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %8, i64 0, i32 0, i32 0
  %10 = load %"class.sh::TField"**, %"class.sh::TField"*** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %8, i64 0, i32 0, i32 1
  %12 = load %"class.sh::TField"**, %"class.sh::TField"*** %11, align 8
  %13 = icmp eq %"class.sh::TField"** %10, %12
  br i1 %13, label %27, label %16

14:                                               ; preds = %24
  %15 = icmp eq %"class.sh::TField"** %26, %12
  br i1 %15, label %27, label %16

16:                                               ; preds = %5, %14
  %17 = phi %"class.sh::TField"** [ %26, %14 ], [ %10, %5 ]
  %18 = load %"class.sh::TField"*, %"class.sh::TField"** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %18, i64 0, i32 0
  %20 = load %"class.sh::TType"*, %"class.sh::TType"** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %20, i64 0, i32 10, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %16
  %25 = tail call zeroext i1 @_ZNK2sh5TType27isStructureContainingArraysEv(%"class.sh::TType"* %20) #15
  %26 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %17, i64 1
  br i1 %25, label %27, label %14

27:                                               ; preds = %24, %16, %14, %5, %1
  %28 = phi i1 [ false, %1 ], [ false, %5 ], [ true, %24 ], [ false, %14 ], [ true, %16 ]
  ret i1 %28
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh11TPublicType25isStructureContainingTypeENS_10TBasicTypeE(%"struct.sh::TPublicType"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 0, i32 3
  %4 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %3, align 8
  %5 = icmp eq %"class.sh::TStructure"* %4, null
  br i1 %5, label %28, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %4, i64 0, i32 2
  %8 = bitcast %"class.sh::TFieldListCollection"* %7 to %"class.std::__1::vector.2"**
  %9 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %9, i64 0, i32 0, i32 0
  %11 = load %"class.sh::TField"**, %"class.sh::TField"*** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %9, i64 0, i32 0, i32 1
  %13 = load %"class.sh::TField"**, %"class.sh::TField"*** %12, align 8
  %14 = icmp eq %"class.sh::TField"** %11, %13
  br i1 %14, label %28, label %17

15:                                               ; preds = %25
  %16 = icmp eq %"class.sh::TField"** %27, %13
  br i1 %16, label %28, label %17

17:                                               ; preds = %6, %15
  %18 = phi %"class.sh::TField"** [ %27, %15 ], [ %11, %6 ]
  %19 = load %"class.sh::TField"*, %"class.sh::TField"** %18, align 8
  %20 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %19, i64 0, i32 0
  %21 = load %"class.sh::TType"*, %"class.sh::TType"** %20, align 8
  %22 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %21, i64 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, %1
  br i1 %24, label %28, label %25

25:                                               ; preds = %17
  %26 = tail call zeroext i1 @_ZNK2sh5TType25isStructureContainingTypeENS_10TBasicTypeE(%"class.sh::TType"* %21, i32 %1) #15
  %27 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %18, i64 1
  br i1 %26, label %28, label %15

28:                                               ; preds = %25, %17, %15, %6, %2
  %29 = phi i1 [ false, %2 ], [ false, %6 ], [ true, %17 ], [ true, %25 ], [ false, %15 ]
  ret i1 %29
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2sh11TPublicType13setArraySizesEPNS_7TVectorIjEE(%"struct.sh::TPublicType"* nocapture, %"class.sh::TVector"*) local_unnamed_addr #9 align 2 {
  %3 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 7
  store %"class.sh::TVector"* %1, %"class.sh::TVector"** %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2sh11TPublicType14clearArraynessEv(%"struct.sh::TPublicType"* nocapture) local_unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 7
  store %"class.sh::TVector"* null, %"class.sh::TVector"** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh11TPublicType11isAggregateEv(%"struct.sh::TPublicType"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 7
  %3 = load %"class.sh::TVector"*, %"class.sh::TVector"** %2, align 8
  %4 = icmp eq %"class.sh::TVector"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 1
  %9 = load i32*, i32** %8, align 8
  %10 = icmp eq i32* %7, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %5, %1
  %12 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 0, i32 1
  %13 = load i8, i8* %12, align 4
  %14 = icmp ugt i8 %13, 1
  br i1 %14, label %15, label %19

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"struct.sh::TPublicType", %"struct.sh::TPublicType"* %0, i64 0, i32 0, i32 2
  %17 = load i8, i8* %16, align 1
  %18 = icmp ne i8 %17, 0
  ret i1 %18

19:                                               ; preds = %5, %11
  %20 = phi i1 [ true, %5 ], [ false, %11 ]
  ret i1 %20
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #5

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"*) unnamed_addr #11

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZTv0_n24_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEED1Ev(%"class.std::__1::basic_ostringstream"*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %"class.std::__1::basic_ostringstream"* %0 to i8*
  %3 = bitcast %"class.std::__1::basic_ostringstream"* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 -24
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 %7
  %9 = bitcast i8* %8 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  %10 = getelementptr inbounds i8, i8* %8, i64 112
  %11 = bitcast i8* %10 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 8
  %13 = bitcast i8* %12 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = bitcast i8* %12 to %"class.std::__1::basic_streambuf"*
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %14) #15
  %15 = bitcast i8* %8 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %15, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, i64 1)) #15
  %16 = bitcast i8* %10 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %16) #15
  ret void
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(%"class.std::__1::basic_ostream"*) unnamed_addr #11

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(%"class.std::__1::basic_ostream"*) unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
declare void @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(%"class.std::__1::basic_ostream"*) unnamed_addr #1 align 2

; Function Attrs: nounwind ssp uwtable
declare void @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(%"class.std::__1::basic_ostream"*) unnamed_addr #1 align 2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEED0Ev(%"class.std::__1::basic_ostringstream"*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %"class.std::__1::basic_ostringstream"* %0 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  %3 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %0, i64 0, i32 2
  %4 = bitcast %"class.std::__1::basic_ios.base"* %3 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %5 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %5, i64 0, i32 0
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %7) #15
  %8 = bitcast %"class.std::__1::basic_ostringstream"* %0 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %8, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, i64 1)) #15
  %9 = bitcast %"class.std::__1::basic_ios.base"* %3 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %9) #15
  %10 = bitcast %"class.std::__1::basic_ostringstream"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #17
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZTv0_n24_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEED0Ev(%"class.std::__1::basic_ostringstream"*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %"class.std::__1::basic_ostringstream"* %0 to i8*
  %3 = bitcast %"class.std::__1::basic_ostringstream"* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 -24
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 %7
  %9 = bitcast i8* %8 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  %10 = getelementptr inbounds i8, i8* %8, i64 112
  %11 = bitcast i8* %10 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 8
  %13 = bitcast i8* %12 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = bitcast i8* %12 to %"class.std::__1::basic_streambuf"*
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %14) #15
  %15 = bitcast i8* %8 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %15, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, i64 1)) #15
  %16 = bitcast i8* %10 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %16) #15
  tail call void @_ZdlPv(i8* %8) #17
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEED2Ev(%"class.std::__1::basic_stringbuf.64"*) unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %3) #15
  ret void
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"*, i8**) unnamed_addr #11

; Function Attrs: nounwind
declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #11

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEED0Ev(%"class.std::__1::basic_stringbuf.64"*) unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %3) #15
  %4 = bitcast %"class.std::__1::basic_stringbuf.64"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #17
  ret void
}

declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE(%"class.std::__1::basic_streambuf"*, %"class.std::__1::locale"* dereferenceable(8)) unnamed_addr #5

declare %"class.std::__1::basic_streambuf"* @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl(%"class.std::__1::basic_streambuf"*, i8*, i64) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i64 } @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE7seekoffExNS_8ios_base7seekdirEj(%"class.std::__1::basic_stringbuf.64"*, i64, i32, i32) unnamed_addr #1 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 6
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ult i8* %6, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %4
  store i8* %8, i8** %5, align 8
  br label %11

11:                                               ; preds = %10, %4
  %12 = phi i8* [ %8, %10 ], [ %6, %4 ]
  %13 = and i32 %3, 24
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %94, label %15

15:                                               ; preds = %11
  %16 = icmp eq i32 %13, 24
  %17 = icmp eq i32 %2, 1
  %18 = and i1 %17, %16
  br i1 %18, label %94, label %19

19:                                               ; preds = %15
  %20 = icmp eq i8* %12, null
  br i1 %20, label %37, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 1
  %23 = bitcast %"class.std::__1::basic_string"* %22 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  br label %32

30:                                               ; preds = %21
  %31 = bitcast %"class.std::__1::basic_string"* %22 to i8*
  br label %32

32:                                               ; preds = %27, %30
  %33 = phi i8* [ %29, %27 ], [ %31, %30 ]
  %34 = ptrtoint i8* %12 to i64
  %35 = ptrtoint i8* %33 to i64
  %36 = sub i64 %34, %35
  br label %37

37:                                               ; preds = %19, %32
  %38 = phi i64 [ %36, %32 ], [ 0, %19 ]
  switch i32 %2, label %94 [
    i32 0, label %57
    i32 1, label %39
    i32 2, label %56
  ]

39:                                               ; preds = %37
  %40 = and i32 %3, 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %50, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 3
  %44 = bitcast i8** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 2
  %47 = bitcast i8** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %45, %48
  br label %57

50:                                               ; preds = %39
  %51 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 5
  %52 = bitcast i8** %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = ptrtoint i8* %8 to i64
  %55 = sub i64 %54, %53
  br label %57

56:                                               ; preds = %37
  br label %57

57:                                               ; preds = %37, %42, %50, %56
  %58 = phi i64 [ %38, %56 ], [ %49, %42 ], [ %55, %50 ], [ 0, %37 ]
  %59 = add nsw i64 %58, %1
  %60 = icmp slt i64 %59, 0
  %61 = icmp slt i64 %38, %59
  %62 = or i1 %60, %61
  br i1 %62, label %94, label %63

63:                                               ; preds = %57
  %64 = icmp eq i64 %59, 0
  %65 = and i32 %3, 8
  br i1 %64, label %77, label %66

66:                                               ; preds = %63
  %67 = icmp eq i32 %65, 0
  br i1 %67, label %72, label %68

68:                                               ; preds = %66
  %69 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 3
  %70 = load i8*, i8** %69, align 8
  %71 = icmp eq i8* %70, null
  br i1 %71, label %94, label %72

72:                                               ; preds = %66, %68
  %73 = and i32 %3, 16
  %74 = icmp ne i32 %73, 0
  %75 = icmp eq i8* %8, null
  %76 = and i1 %74, %75
  br i1 %76, label %94, label %77

77:                                               ; preds = %63, %72
  %78 = icmp eq i32 %65, 0
  br i1 %78, label %85, label %79

79:                                               ; preds = %77
  %80 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 2
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 %59
  %83 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 3
  store i8* %82, i8** %83, align 8
  %84 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 4
  store i8* %12, i8** %84, align 8
  br label %85

85:                                               ; preds = %77, %79
  %86 = and i32 %3, 16
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %94, label %88

88:                                               ; preds = %85
  %89 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 5
  %90 = load i8*, i8** %89, align 8
  %91 = shl i64 %59, 32
  %92 = ashr exact i64 %91, 32
  %93 = getelementptr inbounds i8, i8* %90, i64 %92
  store i8* %93, i8** %7, align 8
  br label %94

94:                                               ; preds = %72, %88, %85, %68, %57, %37, %15, %11
  %95 = phi i64 [ -1, %11 ], [ -1, %15 ], [ -1, %37 ], [ -1, %57 ], [ -1, %68 ], [ %59, %85 ], [ %59, %88 ], [ -1, %72 ]
  %96 = insertvalue { i64, i64 } { i64 0, i64 undef }, i64 %95, 1
  ret { i64, i64 } %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i64 } @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE7seekposENS_4fposI11__mbstate_tEEj(%"class.std::__1::basic_stringbuf.64"*, i64, i64, i32) unnamed_addr #1 comdat align 2 {
  %5 = bitcast %"class.std::__1::basic_stringbuf.64"* %0 to { i64, i64 } (%"class.std::__1::basic_stringbuf.64"*, i64, i32, i32)***
  %6 = load { i64, i64 } (%"class.std::__1::basic_stringbuf.64"*, i64, i32, i32)**, { i64, i64 } (%"class.std::__1::basic_stringbuf.64"*, i64, i32, i32)*** %5, align 8
  %7 = getelementptr inbounds { i64, i64 } (%"class.std::__1::basic_stringbuf.64"*, i64, i32, i32)*, { i64, i64 } (%"class.std::__1::basic_stringbuf.64"*, i64, i32, i32)** %6, i64 4
  %8 = load { i64, i64 } (%"class.std::__1::basic_stringbuf.64"*, i64, i32, i32)*, { i64, i64 } (%"class.std::__1::basic_stringbuf.64"*, i64, i32, i32)** %7, align 8
  %9 = tail call { i64, i64 } %8(%"class.std::__1::basic_stringbuf.64"* %0, i64 %2, i32 0, i32 %3) #15
  ret { i64, i64 } %9
}

declare i32 @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv(%"class.std::__1::basic_streambuf"*) unnamed_addr #5

declare i64 @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv(%"class.std::__1::basic_streambuf"*) unnamed_addr #5

declare i64 @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl(%"class.std::__1::basic_streambuf"*, i8*, i64) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE9underflowEv(%"class.std::__1::basic_stringbuf.64"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 6
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ult i8* %3, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store i8* %5, i8** %2, align 8
  br label %8

8:                                                ; preds = %7, %1
  %9 = phi i8* [ %5, %7 ], [ %3, %1 ]
  %10 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %27, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 4
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ult i8* %16, %9
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  store i8* %9, i8** %15, align 8
  br label %19

19:                                               ; preds = %18, %14
  %20 = phi i8* [ %9, %18 ], [ %16, %14 ]
  %21 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 3
  %22 = load i8*, i8** %21, align 8
  %23 = icmp ult i8* %22, %20
  br i1 %23, label %24, label %27

24:                                               ; preds = %19
  %25 = load i8, i8* %22, align 1
  %26 = zext i8 %25 to i32
  br label %27

27:                                               ; preds = %19, %8, %24
  %28 = phi i32 [ %26, %24 ], [ -1, %8 ], [ -1, %19 ]
  ret i32 %28
}

declare i32 @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv(%"class.std::__1::basic_streambuf"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE9pbackfailEi(%"class.std::__1::basic_stringbuf.64"*, i32) unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 6
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  store i8* %6, i8** %3, align 8
  br label %9

9:                                                ; preds = %8, %2
  %10 = phi i8* [ %6, %8 ], [ %4, %2 ]
  %11 = ptrtoint i8* %10 to i64
  %12 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 2
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 3
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ult i8* %13, %15
  br i1 %16, label %17, label %37

17:                                               ; preds = %9
  %18 = icmp eq i32 %1, -1
  br i1 %18, label %19, label %23

19:                                               ; preds = %17
  %20 = getelementptr inbounds i8, i8* %15, i64 -1
  store i8* %20, i8** %14, align 8
  %21 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 4
  %22 = bitcast i8** %21 to i64*
  store i64 %11, i64* %22, align 8
  br label %37

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 3
  %25 = load i32, i32* %24, align 8
  %26 = and i32 %25, 16
  %27 = icmp eq i32 %26, 0
  %28 = trunc i32 %1 to i8
  br i1 %27, label %29, label %33

29:                                               ; preds = %23
  %30 = getelementptr inbounds i8, i8* %15, i64 -1
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, %28
  br i1 %32, label %33, label %37

33:                                               ; preds = %23, %29
  %34 = getelementptr inbounds i8, i8* %15, i64 -1
  store i8* %34, i8** %14, align 8
  %35 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 4
  %36 = bitcast i8** %35 to i64*
  store i64 %11, i64* %36, align 8
  store i8 %28, i8* %34, align 1
  br label %37

37:                                               ; preds = %9, %29, %33, %19
  %38 = phi i32 [ 0, %19 ], [ %1, %33 ], [ -1, %29 ], [ -1, %9 ]
  ret i32 %38
}

declare i64 @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl(%"class.std::__1::basic_streambuf"*, i8*, i64) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE8overflowEi(%"class.std::__1::basic_stringbuf.64"*, i32) unnamed_addr #1 comdat align 2 {
  %3 = alloca i8*, align 8
  %4 = icmp eq i32 %1, -1
  br i1 %4, label %191, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 3
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 2
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %9, %12
  %14 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 6
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 7
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %15, %17
  br i1 %18, label %23, label %19

19:                                               ; preds = %5
  %20 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 2
  %21 = load i8*, i8** %20, align 8
  %22 = bitcast i8** %20 to i64*
  br label %147

23:                                               ; preds = %5
  %24 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 3
  %25 = load i32, i32* %24, align 8
  %26 = and i32 %25, 16
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %191, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 5
  %30 = bitcast i8** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = ptrtoint i8* %15 to i64
  %33 = sub i64 %32, %31
  %34 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 2
  %35 = bitcast i8** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %36, %31
  %38 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 1
  %39 = bitcast %"class.std::__1::basic_string"* %38 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = icmp slt i8 %41, 0
  br i1 %42, label %45, label %43

43:                                               ; preds = %28
  %44 = zext i8 %41 to i64
  br label %52

45:                                               ; preds = %28
  %46 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 9223372036854775807
  %49 = add nsw i64 %48, -1
  %50 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  br label %52

52:                                               ; preds = %45, %43
  %53 = phi i64 [ 22, %43 ], [ %49, %45 ]
  %54 = phi i64 [ %44, %43 ], [ %51, %45 ]
  %55 = icmp eq i64 %54, %53
  br i1 %55, label %56, label %84

56:                                               ; preds = %52
  br i1 %42, label %57, label %60

57:                                               ; preds = %56
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  br label %62

60:                                               ; preds = %56
  %61 = bitcast %"class.std::__1::basic_string"* %38 to i8*
  br label %62

62:                                               ; preds = %60, %57
  %63 = phi i8* [ %59, %57 ], [ %61, %60 ]
  %64 = icmp ult i64 %53, 9223372036854775783
  br i1 %64, label %65, label %74

65:                                               ; preds = %62
  %66 = add nuw nsw i64 %53, 1
  %67 = shl i64 %53, 1
  %68 = icmp ult i64 %66, %67
  %69 = select i1 %68, i64 %67, i64 %66
  %70 = icmp ult i64 %69, 23
  br i1 %70, label %74, label %71

71:                                               ; preds = %65
  %72 = add nuw i64 %69, 16
  %73 = and i64 %72, -16
  br label %74

74:                                               ; preds = %71, %65, %62
  %75 = phi i64 [ %73, %71 ], [ 23, %65 ], [ -17, %62 ]
  %76 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %77 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %76, i64 %75) #15
  %78 = icmp eq i64 %53, 0
  br i1 %78, label %80, label %79

79:                                               ; preds = %74
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %77, i8* align 1 %63, i64 %53, i1 false) #15
  br label %80

80:                                               ; preds = %79, %74
  %81 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %77, i8** %81, align 8
  %82 = or i64 %75, -9223372036854775808
  %83 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %82, i64* %83, align 8
  br label %92

84:                                               ; preds = %52
  br i1 %42, label %85, label %88

85:                                               ; preds = %84
  %86 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  br label %92

88:                                               ; preds = %84
  %89 = bitcast %"class.std::__1::basic_string"* %38 to i8*
  %90 = trunc i64 %54 to i8
  %91 = add i8 %90, 1
  store i8 %91, i8* %40, align 1
  br label %96

92:                                               ; preds = %85, %80
  %93 = phi i8* [ %87, %85 ], [ %77, %80 ]
  %94 = add i64 %54, 1
  %95 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %94, i64* %95, align 8
  br label %96

96:                                               ; preds = %88, %92
  %97 = phi i8* [ %89, %88 ], [ %93, %92 ]
  %98 = getelementptr inbounds i8, i8* %97, i64 %54
  store i8 0, i8* %98, align 1
  %99 = getelementptr inbounds i8, i8* %98, i64 1
  store i8 0, i8* %99, align 1
  %100 = load i8, i8* %40, align 1
  %101 = icmp slt i8 %100, 0
  br i1 %101, label %102, label %109

102:                                              ; preds = %96
  %103 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %104 = load i64, i64* %103, align 8
  %105 = and i64 %104, 9223372036854775807
  %106 = add nsw i64 %105, -1
  %107 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %108 = load i64, i64* %107, align 8
  br label %111

109:                                              ; preds = %96
  %110 = zext i8 %100 to i64
  br label %111

111:                                              ; preds = %109, %102
  %112 = phi i64 [ %106, %102 ], [ 22, %109 ]
  %113 = phi i64 [ %108, %102 ], [ %110, %109 ]
  %114 = icmp ugt i64 %112, %113
  br i1 %114, label %115, label %118

115:                                              ; preds = %111
  %116 = sub i64 %112, %113
  %117 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEmc(%"class.std::__1::basic_string"* %38, i64 %116, i8 signext 0) #15
  br label %128

118:                                              ; preds = %111
  br i1 %101, label %119, label %124

119:                                              ; preds = %118
  %120 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 %112
  store i8 0, i8* %122, align 1
  %123 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %112, i64* %123, align 8
  br label %128

124:                                              ; preds = %118
  %125 = bitcast %"class.std::__1::basic_string"* %38 to i8*
  %126 = getelementptr inbounds i8, i8* %125, i64 %112
  store i8 0, i8* %126, align 1
  %127 = trunc i64 %112 to i8
  store i8 %127, i8* %40, align 1
  br label %130

128:                                              ; preds = %119, %115
  %129 = load i8, i8* %40, align 1
  br label %130

130:                                              ; preds = %128, %124
  %131 = phi i8 [ %129, %128 ], [ %127, %124 ]
  %132 = icmp slt i8 %131, 0
  br i1 %132, label %133, label %138

133:                                              ; preds = %130
  %134 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load i8*, i8** %134, align 8
  %136 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %137 = load i64, i64* %136, align 8
  br label %141

138:                                              ; preds = %130
  %139 = bitcast %"class.std::__1::basic_string"* %38 to i8*
  %140 = zext i8 %131 to i64
  br label %141

141:                                              ; preds = %133, %138
  %142 = phi i8* [ %135, %133 ], [ %139, %138 ]
  %143 = phi i64 [ %137, %133 ], [ %140, %138 ]
  %144 = getelementptr inbounds i8, i8* %142, i64 %143
  store i8* %142, i8** %29, align 8
  store i8* %144, i8** %16, align 8
  %145 = getelementptr inbounds i8, i8* %142, i64 %33
  store i8* %145, i8** %14, align 8
  %146 = getelementptr inbounds i8, i8* %142, i64 %37
  store i8* %146, i8** %34, align 8
  br label %147

147:                                              ; preds = %19, %141
  %148 = phi i64* [ %22, %19 ], [ %35, %141 ]
  %149 = phi i8* [ %17, %19 ], [ %144, %141 ]
  %150 = phi i8* [ %21, %19 ], [ %146, %141 ]
  %151 = phi i8* [ %15, %19 ], [ %145, %141 ]
  %152 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %152)
  %153 = getelementptr inbounds i8, i8* %151, i64 1
  store i8* %153, i8** %3, align 8
  %154 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 2
  %155 = icmp ult i8* %153, %150
  %156 = select i1 %155, i8** %154, i8** %3
  %157 = bitcast i8** %156 to i64*
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %148, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %152)
  %159 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 3
  %160 = load i32, i32* %159, align 8
  %161 = and i32 %160, 8
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %179, label %163

163:                                              ; preds = %147
  %164 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 1
  %165 = bitcast %"class.std::__1::basic_string"* %164 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"*
  %166 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"* %165, i64 0, i32 1, i32 0
  %167 = load i8, i8* %166, align 1
  %168 = icmp slt i8 %167, 0
  br i1 %168, label %169, label %172

169:                                              ; preds = %163
  %170 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %171 = load i8*, i8** %170, align 8
  br label %174

172:                                              ; preds = %163
  %173 = bitcast %"class.std::__1::basic_string"* %164 to i8*
  br label %174

174:                                              ; preds = %169, %172
  %175 = phi i8* [ %171, %169 ], [ %173, %172 ]
  %176 = getelementptr inbounds i8, i8* %175, i64 %13
  store i8* %175, i8** %10, align 8
  store i8* %176, i8** %7, align 8
  %177 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %0, i64 0, i32 0, i32 4
  %178 = bitcast i8** %177 to i64*
  store i64 %158, i64* %178, align 8
  br label %179

179:                                              ; preds = %147, %174
  %180 = icmp eq i8* %151, %149
  br i1 %180, label %181, label %188

181:                                              ; preds = %179
  %182 = and i32 %1, 255
  %183 = bitcast %"class.std::__1::basic_stringbuf.64"* %0 to i32 (%"class.std::__1::basic_streambuf"*, i32)***
  %184 = load i32 (%"class.std::__1::basic_streambuf"*, i32)**, i32 (%"class.std::__1::basic_streambuf"*, i32)*** %183, align 8
  %185 = getelementptr inbounds i32 (%"class.std::__1::basic_streambuf"*, i32)*, i32 (%"class.std::__1::basic_streambuf"*, i32)** %184, i64 13
  %186 = load i32 (%"class.std::__1::basic_streambuf"*, i32)*, i32 (%"class.std::__1::basic_streambuf"*, i32)** %185, align 8
  %187 = tail call i32 %186(%"class.std::__1::basic_streambuf"* %6, i32 %182) #15
  br label %191

188:                                              ; preds = %179
  %189 = trunc i32 %1 to i8
  store i8* %153, i8** %14, align 8
  store i8 %189, i8* %151, align 1
  %190 = and i32 %1, 255
  br label %191

191:                                              ; preds = %2, %188, %181, %23
  %192 = phi i32 [ -1, %23 ], [ %187, %181 ], [ %190, %188 ], [ 0, %2 ]
  ret i32 %192
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #1 comdat align 2 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %77, label %5

5:                                                ; preds = %3
  %6 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = and i64 %12, 9223372036854775807
  %14 = add nsw i64 %13, -1
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  br label %19

17:                                               ; preds = %5
  %18 = zext i8 %8 to i64
  br label %19

19:                                               ; preds = %10, %17
  %20 = phi i64 [ %14, %10 ], [ 22, %17 ]
  %21 = phi i64 [ %16, %10 ], [ %18, %17 ]
  %22 = sub i64 %20, %21
  %23 = icmp ult i64 %22, %1
  br i1 %23, label %24, label %58

24:                                               ; preds = %19
  %25 = add i64 %21, %1
  %26 = sub i64 %25, %20
  %27 = sub i64 -17, %20
  %28 = icmp ult i64 %27, %26
  br i1 %28, label %29, label %31

29:                                               ; preds = %24
  %30 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %30) #16
  unreachable

31:                                               ; preds = %24
  br i1 %9, label %32, label %35

32:                                               ; preds = %31
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  br label %37

35:                                               ; preds = %31
  %36 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %37

37:                                               ; preds = %35, %32
  %38 = phi i8* [ %34, %32 ], [ %36, %35 ]
  %39 = icmp ult i64 %20, 9223372036854775783
  br i1 %39, label %40, label %48

40:                                               ; preds = %37
  %41 = shl i64 %20, 1
  %42 = icmp ult i64 %25, %41
  %43 = select i1 %42, i64 %41, i64 %25
  %44 = icmp ult i64 %43, 23
  br i1 %44, label %48, label %45

45:                                               ; preds = %40
  %46 = add i64 %43, 16
  %47 = and i64 %46, -16
  br label %48

48:                                               ; preds = %45, %40, %37
  %49 = phi i64 [ %47, %45 ], [ 23, %40 ], [ -17, %37 ]
  %50 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %51 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %50, i64 %49) #15
  %52 = icmp eq i64 %21, 0
  br i1 %52, label %54, label %53

53:                                               ; preds = %48
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %38, i64 %21, i1 false) #15
  br label %54

54:                                               ; preds = %53, %48
  %55 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %51, i8** %55, align 8
  %56 = or i64 %49, -9223372036854775808
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %56, i64* %57, align 8
  br label %60

58:                                               ; preds = %19
  %59 = icmp slt i8 %8, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %54, %58
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  br label %65

63:                                               ; preds = %58
  %64 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %65

65:                                               ; preds = %60, %63
  %66 = phi i8* [ %62, %60 ], [ %64, %63 ]
  %67 = getelementptr inbounds i8, i8* %66, i64 %21
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %67, i8 %2, i64 %1, i1 false) #15
  %68 = add i64 %21, %1
  %69 = load i8, i8* %7, align 1
  %70 = icmp slt i8 %69, 0
  br i1 %70, label %71, label %73

71:                                               ; preds = %65
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %68, i64* %72, align 8
  br label %75

73:                                               ; preds = %65
  %74 = trunc i64 %68 to i8
  store i8 %74, i8* %7, align 1
  br label %75

75:                                               ; preds = %71, %73
  %76 = getelementptr inbounds i8, i8* %66, i64 %68
  store i8 0, i8* %76, align 1
  br label %77

77:                                               ; preds = %3, %75
  ret %"class.std::__1::basic_string"* %0
}

; Function Attrs: nounwind
declare void @_ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_iostream"*, i8**) unnamed_addr #11

declare void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string.56"* sret, %"class.std::__1::basic_stringbuf"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1 comdat align 2 {
  %4 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %15

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = and i64 %10, 9223372036854775807
  %12 = add nsw i64 %11, -1
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  br label %17

15:                                               ; preds = %3
  %16 = zext i8 %6 to i64
  br label %17

17:                                               ; preds = %8, %15
  %18 = phi i64 [ %12, %8 ], [ 22, %15 ]
  %19 = phi i64 [ %14, %8 ], [ %16, %15 ]
  %20 = sub i64 %18, %19
  %21 = icmp ult i64 %20, %2
  br i1 %21, label %42, label %22

22:                                               ; preds = %17
  %23 = icmp eq i64 %2, 0
  br i1 %23, label %81, label %24

24:                                               ; preds = %22
  br i1 %7, label %25, label %28

25:                                               ; preds = %24
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  br label %30

28:                                               ; preds = %24
  %29 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %30

30:                                               ; preds = %25, %28
  %31 = phi i8* [ %27, %25 ], [ %29, %28 ]
  %32 = getelementptr inbounds i8, i8* %31, i64 %19
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %1, i64 %2, i1 false) #15
  %33 = add i64 %19, %2
  %34 = load i8, i8* %5, align 1
  %35 = icmp slt i8 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %33, i64* %37, align 8
  br label %40

38:                                               ; preds = %30
  %39 = trunc i64 %33 to i8
  store i8 %39, i8* %5, align 1
  br label %40

40:                                               ; preds = %36, %38
  %41 = getelementptr inbounds i8, i8* %31, i64 %33
  br label %79

42:                                               ; preds = %17
  %43 = add i64 %19, %2
  %44 = sub i64 %43, %18
  %45 = sub i64 -18, %18
  %46 = icmp ult i64 %45, %44
  br i1 %46, label %47, label %49

47:                                               ; preds = %42
  %48 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %48) #16
  unreachable

49:                                               ; preds = %42
  br i1 %7, label %50, label %53

50:                                               ; preds = %49
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  br label %55

53:                                               ; preds = %49
  %54 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %55

55:                                               ; preds = %53, %50
  %56 = phi i8* [ %52, %50 ], [ %54, %53 ]
  %57 = icmp ult i64 %18, 9223372036854775783
  br i1 %57, label %58, label %66

58:                                               ; preds = %55
  %59 = shl i64 %18, 1
  %60 = icmp ult i64 %43, %59
  %61 = select i1 %60, i64 %59, i64 %43
  %62 = icmp ult i64 %61, 23
  br i1 %62, label %66, label %63

63:                                               ; preds = %58
  %64 = add i64 %61, 16
  %65 = and i64 %64, -16
  br label %66

66:                                               ; preds = %63, %58, %55
  %67 = phi i64 [ %65, %63 ], [ 23, %58 ], [ -17, %55 ]
  %68 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %69 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %68, i64 %67) #15
  %70 = icmp eq i64 %19, 0
  br i1 %70, label %72, label %71

71:                                               ; preds = %66
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %69, i8* align 1 %56, i64 %19, i1 false) #15
  br label %72

72:                                               ; preds = %71, %66
  %73 = getelementptr inbounds i8, i8* %69, i64 %19
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %1, i64 %2, i1 false) #15
  %74 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %69, i8** %74, align 8
  %75 = or i64 %67, -9223372036854775808
  %76 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %43, i64* %77, align 8
  %78 = getelementptr inbounds i8, i8* %69, i64 %43
  br label %79

79:                                               ; preds = %72, %40
  %80 = phi i8* [ %41, %40 ], [ %78, %72 ]
  store i8 0, i8* %80, align 1
  br label %81

81:                                               ; preds = %79, %22
  ret %"class.std::__1::basic_string"* %0
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #13

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

declare dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #11

declare void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"*, i8*) local_unnamed_addr #5

declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #5

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #5

declare void @_ZNSt3__18ios_base5imbueERKNS_6localeE(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*, %"class.std::__1::locale"* dereferenceable(8)) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZNSt3__16localeC1ERKS0_(%"class.std::__1::locale"*, %"class.std::__1::locale"* dereferenceable(8)) unnamed_addr #11

; Function Attrs: nounwind
declare dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16localeaSERKS0_(%"class.std::__1::locale"*, %"class.std::__1::locale"* dereferenceable(8)) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #1 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #15
  %7 = load i8, i8* %6, align 8, !range !11
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #15
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #15
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #15
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #15
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #15
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #15
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #15
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #1 comdat {
  %7 = alloca %"class.std::__1::basic_string.56", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #15
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string.56"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #15
  %32 = getelementptr inbounds %"class.std::__1::basic_string.56", %"class.std::__1::basic_string.56"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string.56"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string.56", %"class.std::__1::basic_string.56"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string.56", %"class.std::__1::basic_string.56"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #17
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string.56"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string.56"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #15
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #15
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #17
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #15
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #15
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #11

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #14

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #5

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEE14pool_allocatorIcEE3strEv(%"class.std::__1::basic_string"* noalias sret, %"class.std::__1::basic_stringbuf.64"*) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 16
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %149, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %1, i64 0, i32 2
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %1, i64 0, i32 0, i32 6
  %11 = load i8*, i8** %10, align 8
  %12 = icmp ult i8* %9, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %7
  store i8* %11, i8** %8, align 8
  br label %14

14:                                               ; preds = %13, %7
  %15 = phi i8* [ %11, %13 ], [ %9, %7 ]
  %16 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %1, i64 0, i32 0, i32 5
  %17 = load i8*, i8** %16, align 8
  %18 = ptrtoint i8* %17 to i64
  %19 = ptrtoint i8* %15 to i64
  %20 = sub i64 %19, %18
  %21 = icmp ugt i64 %20, -17
  br i1 %21, label %22, label %24

22:                                               ; preds = %14
  %23 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %23) #16
  unreachable

24:                                               ; preds = %14
  %25 = icmp ult i64 %20, 23
  br i1 %25, label %26, label %31

26:                                               ; preds = %24
  %27 = trunc i64 %20 to i8
  %28 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  store i8 %27, i8* %29, align 1
  %30 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %40

31:                                               ; preds = %24
  %32 = add nuw i64 %20, 16
  %33 = and i64 %32, -16
  %34 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %35 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %34, i64 %33) #15
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %35, i8** %36, align 8
  %37 = or i64 %33, -9223372036854775808
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %37, i64* %38, align 8
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %20, i64* %39, align 8
  br label %40

40:                                               ; preds = %31, %26
  %41 = phi i8* [ %30, %26 ], [ %35, %31 ]
  %42 = icmp eq i8* %17, %15
  br i1 %42, label %147, label %43

43:                                               ; preds = %40
  %44 = sub i64 0, %18
  %45 = getelementptr i8, i8* %15, i64 %44
  %46 = ptrtoint i8* %45 to i64
  %47 = icmp ult i8* %45, inttoptr (i64 32 to i8*)
  br i1 %47, label %137, label %48

48:                                               ; preds = %43
  %49 = sub i64 0, %18
  %50 = getelementptr i8, i8* %15, i64 %49
  %51 = ptrtoint i8* %50 to i64
  %52 = getelementptr i8, i8* %41, i64 %51
  %53 = icmp ult i8* %41, %15
  %54 = icmp ult i8* %17, %52
  %55 = and i1 %53, %54
  br i1 %55, label %137, label %56

56:                                               ; preds = %48
  %57 = and i64 %46, -32
  %58 = getelementptr i8, i8* %17, i64 %57
  %59 = getelementptr i8, i8* %41, i64 %57
  %60 = add i64 %57, -32
  %61 = lshr exact i64 %60, 5
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 3
  %64 = icmp ult i64 %60, 96
  br i1 %64, label %116, label %65

65:                                               ; preds = %56
  %66 = sub nsw i64 %62, %63
  br label %67

67:                                               ; preds = %67, %65
  %68 = phi i64 [ 0, %65 ], [ %113, %67 ]
  %69 = phi i64 [ %66, %65 ], [ %114, %67 ]
  %70 = getelementptr i8, i8* %17, i64 %68
  %71 = getelementptr i8, i8* %41, i64 %68
  %72 = bitcast i8* %70 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !104
  %74 = getelementptr i8, i8* %70, i64 16
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1, !alias.scope !104
  %77 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %77, align 1, !alias.scope !107, !noalias !104
  %78 = getelementptr i8, i8* %71, i64 16
  %79 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %76, <16 x i8>* %79, align 1, !alias.scope !107, !noalias !104
  %80 = or i64 %68, 32
  %81 = getelementptr i8, i8* %17, i64 %80
  %82 = getelementptr i8, i8* %41, i64 %80
  %83 = bitcast i8* %81 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !104
  %85 = getelementptr i8, i8* %81, i64 16
  %86 = bitcast i8* %85 to <16 x i8>*
  %87 = load <16 x i8>, <16 x i8>* %86, align 1, !alias.scope !104
  %88 = bitcast i8* %82 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %88, align 1, !alias.scope !107, !noalias !104
  %89 = getelementptr i8, i8* %82, i64 16
  %90 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %87, <16 x i8>* %90, align 1, !alias.scope !107, !noalias !104
  %91 = or i64 %68, 64
  %92 = getelementptr i8, i8* %17, i64 %91
  %93 = getelementptr i8, i8* %41, i64 %91
  %94 = bitcast i8* %92 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !104
  %96 = getelementptr i8, i8* %92, i64 16
  %97 = bitcast i8* %96 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1, !alias.scope !104
  %99 = bitcast i8* %93 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %99, align 1, !alias.scope !107, !noalias !104
  %100 = getelementptr i8, i8* %93, i64 16
  %101 = bitcast i8* %100 to <16 x i8>*
  store <16 x i8> %98, <16 x i8>* %101, align 1, !alias.scope !107, !noalias !104
  %102 = or i64 %68, 96
  %103 = getelementptr i8, i8* %17, i64 %102
  %104 = getelementptr i8, i8* %41, i64 %102
  %105 = bitcast i8* %103 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1, !alias.scope !104
  %107 = getelementptr i8, i8* %103, i64 16
  %108 = bitcast i8* %107 to <16 x i8>*
  %109 = load <16 x i8>, <16 x i8>* %108, align 1, !alias.scope !104
  %110 = bitcast i8* %104 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %110, align 1, !alias.scope !107, !noalias !104
  %111 = getelementptr i8, i8* %104, i64 16
  %112 = bitcast i8* %111 to <16 x i8>*
  store <16 x i8> %109, <16 x i8>* %112, align 1, !alias.scope !107, !noalias !104
  %113 = add i64 %68, 128
  %114 = add i64 %69, -4
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %67, !llvm.loop !109

116:                                              ; preds = %67, %56
  %117 = phi i64 [ 0, %56 ], [ %113, %67 ]
  %118 = icmp eq i64 %63, 0
  br i1 %118, label %135, label %119

119:                                              ; preds = %116, %119
  %120 = phi i64 [ %132, %119 ], [ %117, %116 ]
  %121 = phi i64 [ %133, %119 ], [ %63, %116 ]
  %122 = getelementptr i8, i8* %17, i64 %120
  %123 = getelementptr i8, i8* %41, i64 %120
  %124 = bitcast i8* %122 to <16 x i8>*
  %125 = load <16 x i8>, <16 x i8>* %124, align 1, !alias.scope !104
  %126 = getelementptr i8, i8* %122, i64 16
  %127 = bitcast i8* %126 to <16 x i8>*
  %128 = load <16 x i8>, <16 x i8>* %127, align 1, !alias.scope !104
  %129 = bitcast i8* %123 to <16 x i8>*
  store <16 x i8> %125, <16 x i8>* %129, align 1, !alias.scope !107, !noalias !104
  %130 = getelementptr i8, i8* %123, i64 16
  %131 = bitcast i8* %130 to <16 x i8>*
  store <16 x i8> %128, <16 x i8>* %131, align 1, !alias.scope !107, !noalias !104
  %132 = add i64 %120, 32
  %133 = add i64 %121, -1
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %119, !llvm.loop !110

135:                                              ; preds = %119, %116
  %136 = icmp eq i64 %57, %46
  br i1 %136, label %147, label %137

137:                                              ; preds = %135, %48, %43
  %138 = phi i8* [ %17, %48 ], [ %17, %43 ], [ %58, %135 ]
  %139 = phi i8* [ %41, %48 ], [ %41, %43 ], [ %59, %135 ]
  br label %140

140:                                              ; preds = %137, %140
  %141 = phi i8* [ %144, %140 ], [ %138, %137 ]
  %142 = phi i8* [ %145, %140 ], [ %139, %137 ]
  %143 = load i8, i8* %141, align 1
  store i8 %143, i8* %142, align 1
  %144 = getelementptr inbounds i8, i8* %141, i64 1
  %145 = getelementptr inbounds i8, i8* %142, i64 1
  %146 = icmp eq i8* %144, %15
  br i1 %146, label %147, label %140, !llvm.loop !111

147:                                              ; preds = %140, %135, %40
  %148 = phi i8* [ %41, %40 ], [ %59, %135 ], [ %145, %140 ]
  store i8 0, i8* %148, align 1
  br label %288

149:                                              ; preds = %2
  %150 = and i32 %4, 8
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %286, label %152

152:                                              ; preds = %149
  %153 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %1, i64 0, i32 0, i32 2
  %154 = load i8*, i8** %153, align 8
  %155 = ptrtoint i8* %154 to i64
  %156 = getelementptr inbounds %"class.std::__1::basic_stringbuf.64", %"class.std::__1::basic_stringbuf.64"* %1, i64 0, i32 0, i32 4
  %157 = load i8*, i8** %156, align 8
  %158 = ptrtoint i8* %157 to i64
  %159 = sub i64 %158, %155
  %160 = icmp ugt i64 %159, -17
  br i1 %160, label %161, label %163

161:                                              ; preds = %152
  %162 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %162) #16
  unreachable

163:                                              ; preds = %152
  %164 = icmp ult i64 %159, 23
  br i1 %164, label %165, label %170

165:                                              ; preds = %163
  %166 = trunc i64 %159 to i8
  %167 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"*
  %168 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__short"* %167, i64 0, i32 1, i32 0
  store i8 %166, i8* %168, align 1
  %169 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %179

170:                                              ; preds = %163
  %171 = add nuw i64 %159, 16
  %172 = and i64 %171, -16
  %173 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %174 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %173, i64 %172) #15
  %175 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %174, i8** %175, align 8
  %176 = or i64 %172, -9223372036854775808
  %177 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %176, i64* %177, align 8
  %178 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %159, i64* %178, align 8
  br label %179

179:                                              ; preds = %170, %165
  %180 = phi i8* [ %169, %165 ], [ %174, %170 ]
  %181 = icmp eq i8* %154, %157
  br i1 %181, label %284, label %182

182:                                              ; preds = %179
  %183 = ptrtoint i8* %157 to i64
  %184 = sub i64 %183, %155
  %185 = icmp ult i64 %184, 32
  br i1 %185, label %274, label %186

186:                                              ; preds = %182
  %187 = ptrtoint i8* %157 to i64
  %188 = sub i64 %187, %155
  %189 = getelementptr i8, i8* %180, i64 %188
  %190 = icmp ult i8* %180, %157
  %191 = icmp ult i8* %154, %189
  %192 = and i1 %190, %191
  br i1 %192, label %274, label %193

193:                                              ; preds = %186
  %194 = and i64 %184, -32
  %195 = getelementptr i8, i8* %154, i64 %194
  %196 = getelementptr i8, i8* %180, i64 %194
  %197 = add i64 %194, -32
  %198 = lshr exact i64 %197, 5
  %199 = add nuw nsw i64 %198, 1
  %200 = and i64 %199, 3
  %201 = icmp ult i64 %197, 96
  br i1 %201, label %253, label %202

202:                                              ; preds = %193
  %203 = sub nsw i64 %199, %200
  br label %204

204:                                              ; preds = %204, %202
  %205 = phi i64 [ 0, %202 ], [ %250, %204 ]
  %206 = phi i64 [ %203, %202 ], [ %251, %204 ]
  %207 = getelementptr i8, i8* %154, i64 %205
  %208 = getelementptr i8, i8* %180, i64 %205
  %209 = bitcast i8* %207 to <16 x i8>*
  %210 = load <16 x i8>, <16 x i8>* %209, align 1, !alias.scope !112
  %211 = getelementptr i8, i8* %207, i64 16
  %212 = bitcast i8* %211 to <16 x i8>*
  %213 = load <16 x i8>, <16 x i8>* %212, align 1, !alias.scope !112
  %214 = bitcast i8* %208 to <16 x i8>*
  store <16 x i8> %210, <16 x i8>* %214, align 1, !alias.scope !115, !noalias !112
  %215 = getelementptr i8, i8* %208, i64 16
  %216 = bitcast i8* %215 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %216, align 1, !alias.scope !115, !noalias !112
  %217 = or i64 %205, 32
  %218 = getelementptr i8, i8* %154, i64 %217
  %219 = getelementptr i8, i8* %180, i64 %217
  %220 = bitcast i8* %218 to <16 x i8>*
  %221 = load <16 x i8>, <16 x i8>* %220, align 1, !alias.scope !112
  %222 = getelementptr i8, i8* %218, i64 16
  %223 = bitcast i8* %222 to <16 x i8>*
  %224 = load <16 x i8>, <16 x i8>* %223, align 1, !alias.scope !112
  %225 = bitcast i8* %219 to <16 x i8>*
  store <16 x i8> %221, <16 x i8>* %225, align 1, !alias.scope !115, !noalias !112
  %226 = getelementptr i8, i8* %219, i64 16
  %227 = bitcast i8* %226 to <16 x i8>*
  store <16 x i8> %224, <16 x i8>* %227, align 1, !alias.scope !115, !noalias !112
  %228 = or i64 %205, 64
  %229 = getelementptr i8, i8* %154, i64 %228
  %230 = getelementptr i8, i8* %180, i64 %228
  %231 = bitcast i8* %229 to <16 x i8>*
  %232 = load <16 x i8>, <16 x i8>* %231, align 1, !alias.scope !112
  %233 = getelementptr i8, i8* %229, i64 16
  %234 = bitcast i8* %233 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !112
  %236 = bitcast i8* %230 to <16 x i8>*
  store <16 x i8> %232, <16 x i8>* %236, align 1, !alias.scope !115, !noalias !112
  %237 = getelementptr i8, i8* %230, i64 16
  %238 = bitcast i8* %237 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %238, align 1, !alias.scope !115, !noalias !112
  %239 = or i64 %205, 96
  %240 = getelementptr i8, i8* %154, i64 %239
  %241 = getelementptr i8, i8* %180, i64 %239
  %242 = bitcast i8* %240 to <16 x i8>*
  %243 = load <16 x i8>, <16 x i8>* %242, align 1, !alias.scope !112
  %244 = getelementptr i8, i8* %240, i64 16
  %245 = bitcast i8* %244 to <16 x i8>*
  %246 = load <16 x i8>, <16 x i8>* %245, align 1, !alias.scope !112
  %247 = bitcast i8* %241 to <16 x i8>*
  store <16 x i8> %243, <16 x i8>* %247, align 1, !alias.scope !115, !noalias !112
  %248 = getelementptr i8, i8* %241, i64 16
  %249 = bitcast i8* %248 to <16 x i8>*
  store <16 x i8> %246, <16 x i8>* %249, align 1, !alias.scope !115, !noalias !112
  %250 = add i64 %205, 128
  %251 = add i64 %206, -4
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %253, label %204, !llvm.loop !117

253:                                              ; preds = %204, %193
  %254 = phi i64 [ 0, %193 ], [ %250, %204 ]
  %255 = icmp eq i64 %200, 0
  br i1 %255, label %272, label %256

256:                                              ; preds = %253, %256
  %257 = phi i64 [ %269, %256 ], [ %254, %253 ]
  %258 = phi i64 [ %270, %256 ], [ %200, %253 ]
  %259 = getelementptr i8, i8* %154, i64 %257
  %260 = getelementptr i8, i8* %180, i64 %257
  %261 = bitcast i8* %259 to <16 x i8>*
  %262 = load <16 x i8>, <16 x i8>* %261, align 1, !alias.scope !112
  %263 = getelementptr i8, i8* %259, i64 16
  %264 = bitcast i8* %263 to <16 x i8>*
  %265 = load <16 x i8>, <16 x i8>* %264, align 1, !alias.scope !112
  %266 = bitcast i8* %260 to <16 x i8>*
  store <16 x i8> %262, <16 x i8>* %266, align 1, !alias.scope !115, !noalias !112
  %267 = getelementptr i8, i8* %260, i64 16
  %268 = bitcast i8* %267 to <16 x i8>*
  store <16 x i8> %265, <16 x i8>* %268, align 1, !alias.scope !115, !noalias !112
  %269 = add i64 %257, 32
  %270 = add i64 %258, -1
  %271 = icmp eq i64 %270, 0
  br i1 %271, label %272, label %256, !llvm.loop !118

272:                                              ; preds = %256, %253
  %273 = icmp eq i64 %184, %194
  br i1 %273, label %284, label %274

274:                                              ; preds = %272, %186, %182
  %275 = phi i8* [ %154, %186 ], [ %154, %182 ], [ %195, %272 ]
  %276 = phi i8* [ %180, %186 ], [ %180, %182 ], [ %196, %272 ]
  br label %277

277:                                              ; preds = %274, %277
  %278 = phi i8* [ %281, %277 ], [ %275, %274 ]
  %279 = phi i8* [ %282, %277 ], [ %276, %274 ]
  %280 = load i8, i8* %278, align 1
  store i8 %280, i8* %279, align 1
  %281 = getelementptr inbounds i8, i8* %278, i64 1
  %282 = getelementptr inbounds i8, i8* %279, i64 1
  %283 = icmp eq i8* %281, %157
  br i1 %283, label %284, label %277, !llvm.loop !119

284:                                              ; preds = %277, %272, %179
  %285 = phi i8* [ %180, %179 ], [ %196, %272 ], [ %282, %277 ]
  store i8 0, i8* %285, align 1
  br label %288

286:                                              ; preds = %149
  %287 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %287, i8 0, i64 24, i1 false) #15
  br label %288

288:                                              ; preds = %286, %284, %147
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.std::__1::__tree_end_node"*, i8 } @_ZNSt3__16__treeINS_12__value_typeIPKN2sh9TVariableENS_12basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEEEEENS_19__map_value_compareIS5_SC_NS_4lessIS5_EELb1EEES9_ISC_EE25__emplace_unique_key_argsIS5_JRKNS_21piecewise_construct_tENS_5tupleIJOS5_EEENSN_IJEEEEEENS_4pairINS_15__tree_iteratorISC_PNS_11__tree_nodeISC_PvEElEEbEERKT_DpOT0_(%"class.std::__1::__tree"*, %"class.sh::TVariable"** dereferenceable(8), %"struct.std::__1::piecewise_construct_t"* dereferenceable(1), %"class.std::__1::tuple"* dereferenceable(8), %"class.std::__1::tuple.82"* dereferenceable(1)) local_unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 1, i32 0, i32 0
  %7 = bitcast %"class.std::__1::__tree_end_node"* %6 to %"class.std::__1::__tree_node"**
  %8 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %7, align 8
  %9 = icmp eq %"class.std::__1::__tree_node"* %8, null
  br i1 %9, label %39, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %12 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %1, align 8
  br label %13

13:                                               ; preds = %35, %10
  %14 = phi %"class.std::__1::__tree_node"* [ %38, %35 ], [ %8, %10 ]
  %15 = phi %"class.std::__1::__tree_node_base"** [ %37, %35 ], [ %11, %10 ]
  %16 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %14, i64 0, i32 1, i32 0, i32 0
  %17 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %16, align 8
  %18 = icmp ult %"class.sh::TVariable"* %12, %17
  br i1 %18, label %19, label %25

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %14, i64 0, i32 0, i32 0, i32 0
  %21 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %20, align 8
  %22 = icmp eq %"class.std::__1::__tree_node_base"* %21, null
  br i1 %22, label %23, label %35

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %14, i64 0, i32 0, i32 0
  br label %41

25:                                               ; preds = %13
  %26 = icmp ult %"class.sh::TVariable"* %17, %12
  br i1 %26, label %27, label %33

27:                                               ; preds = %25
  %28 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %14, i64 0, i32 0, i32 1
  %29 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %28, align 8
  %30 = icmp eq %"class.std::__1::__tree_node_base"* %29, null
  br i1 %30, label %31, label %35

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %14, i64 0, i32 0, i32 0
  br label %41

33:                                               ; preds = %25
  %34 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %14, i64 0, i32 0, i32 0
  br label %41

35:                                               ; preds = %27, %19
  %36 = phi %"class.std::__1::__tree_node_base"* [ %21, %19 ], [ %29, %27 ]
  %37 = phi %"class.std::__1::__tree_node_base"** [ %20, %19 ], [ %28, %27 ]
  %38 = bitcast %"class.std::__1::__tree_node_base"* %36 to %"class.std::__1::__tree_node"*
  br label %13

39:                                               ; preds = %5
  %40 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %6, i64 0, i32 0
  br label %41

41:                                               ; preds = %23, %31, %33, %39
  %42 = phi %"class.std::__1::__tree_end_node"* [ %6, %39 ], [ %24, %23 ], [ %32, %31 ], [ %34, %33 ]
  %43 = phi %"class.std::__1::__tree_node_base"** [ %40, %39 ], [ %20, %23 ], [ %28, %31 ], [ %15, %33 ]
  %44 = bitcast %"class.std::__1::__tree_node_base"** %43 to %"class.std::__1::__tree_node"**
  %45 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %44, align 8
  %46 = icmp eq %"class.std::__1::__tree_node"* %45, null
  br i1 %46, label %47, label %77

47:                                               ; preds = %41
  %48 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15, !noalias !120
  %49 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %48, i64 64) #15, !noalias !120
  %50 = getelementptr inbounds i8, i8* %49, i64 32
  %51 = bitcast %"class.std::__1::tuple"* %3 to i64**
  %52 = load i64*, i64** %51, align 8, !noalias !120
  %53 = load i64, i64* %52, align 8, !noalias !120
  %54 = bitcast i8* %50 to i64*
  store i64 %53, i64* %54, align 8, !noalias !120
  %55 = getelementptr inbounds i8, i8* %49, i64 40
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #15, !noalias !120
  %56 = bitcast i8* %49 to %"class.std::__1::__tree_node"*
  %57 = bitcast i8* %49 to %"class.std::__1::__tree_node_base"*
  %58 = getelementptr inbounds i8, i8* %49, i64 16
  %59 = bitcast i8* %58 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 16, i1 false) #15
  store %"class.std::__1::__tree_end_node"* %42, %"class.std::__1::__tree_end_node"** %59, align 8
  %60 = bitcast %"class.std::__1::__tree_node_base"** %43 to i8**
  store i8* %49, i8** %60, align 8
  %61 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 0
  %62 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %61, align 8
  %63 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %62, i64 0, i32 0
  %64 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %63, align 8
  %65 = icmp eq %"class.std::__1::__tree_node_base"* %64, null
  br i1 %65, label %70, label %66

66:                                               ; preds = %47
  %67 = ptrtoint %"class.std::__1::__tree_node_base"* %64 to i64
  %68 = bitcast %"class.std::__1::__tree"* %0 to i64*
  store i64 %67, i64* %68, align 8
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %43, align 8
  br label %70

70:                                               ; preds = %47, %66
  %71 = phi %"class.std::__1::__tree_node_base"* [ %57, %47 ], [ %69, %66 ]
  %72 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %73 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %72, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %73, %"class.std::__1::__tree_node_base"* %71) #15
  %74 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 2, i32 0, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* %74, align 8
  br label %77

77:                                               ; preds = %70, %41
  %78 = phi i8 [ 1, %70 ], [ 0, %41 ]
  %79 = phi %"class.std::__1::__tree_node"* [ %56, %70 ], [ %45, %41 ]
  %80 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %79, i64 0, i32 0, i32 0
  %81 = insertvalue { %"class.std::__1::__tree_end_node"*, i8 } undef, %"class.std::__1::__tree_end_node"* %80, 0
  %82 = insertvalue { %"class.std::__1::__tree_end_node"*, i8 } %81, i8 %78, 1
  ret { %"class.std::__1::__tree_end_node"*, i8 } %82
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #1 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !11
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !11
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !11
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 9223372036854775807
  %7 = icmp ugt i64 %6, %2
  br i1 %7, label %8, label %14

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %2, i64* %11, align 8
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %42, label %13

13:                                               ; preds = %8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %1, i64 %2, i1 false) #15
  br label %42

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = add nsw i64 %6, -1
  %17 = add i64 %2, 1
  %18 = sub i64 %17, %6
  %19 = sub nuw i64 -17, %6
  %20 = icmp ult i64 %19, %18
  br i1 %20, label %21, label %23

21:                                               ; preds = %14
  %22 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %22) #16
  unreachable

23:                                               ; preds = %14
  %24 = icmp ult i64 %16, 9223372036854775783
  br i1 %24, label %25, label %33

25:                                               ; preds = %23
  %26 = shl i64 %16, 1
  %27 = icmp ugt i64 %26, %2
  %28 = select i1 %27, i64 %26, i64 %2
  %29 = icmp ult i64 %28, 23
  br i1 %29, label %33, label %30

30:                                               ; preds = %25
  %31 = add i64 %28, 16
  %32 = and i64 %31, -16
  br label %33

33:                                               ; preds = %30, %25, %23
  %34 = phi i64 [ %32, %30 ], [ 23, %25 ], [ -17, %23 ]
  %35 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #15
  %36 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %35, i64 %34) #15
  %37 = icmp eq i64 %2, 0
  br i1 %37, label %39, label %38

38:                                               ; preds = %33
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %1, i64 %2, i1 false) #15
  br label %39

39:                                               ; preds = %33, %38
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %36, i8** %40, align 8
  %41 = or i64 %34, -9223372036854775808
  store i64 %41, i64* %4, align 8
  store i64 %2, i64* %15, align 8
  br label %42

42:                                               ; preds = %13, %8, %39
  %43 = phi i8* [ %36, %39 ], [ %10, %8 ], [ %10, %13 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %2
  store i8 0, i8* %44, align 1
  ret %"class.std::__1::basic_string"* %0
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nounwind }
attributes #16 = { noreturn nounwind }
attributes #17 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!4 = distinct !{!4, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!7 = distinct !{!7, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!10 = distinct !{!10, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!11 = !{i8 0, i8 2}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!14 = distinct !{!14, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.isvectorized", i32 1}
!22 = distinct !{!22, !23}
!23 = !{!"llvm.loop.unroll.disable"}
!24 = distinct !{!24, !23}
!25 = distinct !{!25, !21}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZNK2sh20TFieldListCollection21buildMangledFieldListEv: argument 0"}
!28 = distinct !{!28, !"_ZNK2sh20TFieldListCollection21buildMangledFieldListEv"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZNK2sh20TFieldListCollection21buildMangledFieldListEv: argument 0"}
!31 = distinct !{!31, !"_ZNK2sh20TFieldListCollection21buildMangledFieldListEv"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZNK2sh20TFieldListCollection21buildMangledFieldListEv: argument 0"}
!34 = distinct !{!34, !"_ZNK2sh20TFieldListCollection21buildMangledFieldListEv"}
!35 = distinct !{!35, !21}
!36 = distinct !{!36, !23}
!37 = distinct !{!37, !38, !21}
!38 = !{!"llvm.loop.unroll.runtime.disable"}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !21}
!45 = distinct !{!45, !23}
!46 = distinct !{!46, !21}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !21}
!53 = distinct !{!53, !23}
!54 = distinct !{!54, !23}
!55 = distinct !{!55, !21}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !21}
!62 = distinct !{!62, !23}
!63 = distinct !{!63, !21}
!64 = !{!65}
!65 = distinct !{!65, !66}
!66 = distinct !{!66, !"LVerDomain"}
!67 = !{!68}
!68 = distinct !{!68, !66}
!69 = distinct !{!69, !21}
!70 = distinct !{!70, !23}
!71 = distinct !{!71, !23}
!72 = distinct !{!72, !21}
!73 = !{!74}
!74 = distinct !{!74, !75}
!75 = distinct !{!75, !"LVerDomain"}
!76 = !{!77}
!77 = distinct !{!77, !75}
!78 = distinct !{!78, !21}
!79 = distinct !{!79, !23}
!80 = distinct !{!80, !21}
!81 = !{!82}
!82 = distinct !{!82, !83}
!83 = distinct !{!83, !"LVerDomain"}
!84 = !{!85}
!85 = distinct !{!85, !83}
!86 = distinct !{!86, !21}
!87 = distinct !{!87, !23}
!88 = distinct !{!88, !23}
!89 = distinct !{!89, !21}
!90 = !{!91}
!91 = distinct !{!91, !92}
!92 = distinct !{!92, !"LVerDomain"}
!93 = !{!94}
!94 = distinct !{!94, !92}
!95 = distinct !{!95, !21}
!96 = distinct !{!96, !23}
!97 = distinct !{!97, !21}
!98 = !{!99}
!99 = distinct !{!99, !100, !"_ZNSt3__19basic_iosIcNS_11char_traitsIcEEE5imbueERKNS_6localeE: argument 0"}
!100 = distinct !{!100, !"_ZNSt3__19basic_iosIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"}
!101 = !{!102}
!102 = distinct !{!102, !103, !"_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8pubimbueERKNS_6localeE: argument 0"}
!103 = distinct !{!103, !"_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8pubimbueERKNS_6localeE"}
!104 = !{!105}
!105 = distinct !{!105, !106}
!106 = distinct !{!106, !"LVerDomain"}
!107 = !{!108}
!108 = distinct !{!108, !106}
!109 = distinct !{!109, !21}
!110 = distinct !{!110, !23}
!111 = distinct !{!111, !21}
!112 = !{!113}
!113 = distinct !{!113, !114}
!114 = distinct !{!114, !"LVerDomain"}
!115 = !{!116}
!116 = distinct !{!116, !114}
!117 = distinct !{!117, !21}
!118 = distinct !{!118, !23}
!119 = distinct !{!119, !21}
!120 = !{!121}
!121 = distinct !{!121, !122, !"_ZNSt3__16__treeINS_12__value_typeIPKN2sh9TVariableENS_12basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEEEEENS_19__map_value_compareIS5_SC_NS_4lessIS5_EELb1EEES9_ISC_EE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJOS5_EEENSN_IJEEEEEENS_10unique_ptrINS_11__tree_nodeISC_PvEENS_22__tree_node_destructorIS9_ISU_EEEEEDpOT_: argument 0"}
!122 = distinct !{!122, !"_ZNSt3__16__treeINS_12__value_typeIPKN2sh9TVariableENS_12basic_stringIcNS_11char_traitsIcEE14pool_allocatorIcEEEEENS_19__map_value_compareIS5_SC_NS_4lessIS5_EELb1EEES9_ISC_EE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJOS5_EEENSN_IJEEEEEENS_10unique_ptrINS_11__tree_nodeISC_PvEENS_22__tree_node_destructorIS9_ISU_EEEEEDpOT_"}
