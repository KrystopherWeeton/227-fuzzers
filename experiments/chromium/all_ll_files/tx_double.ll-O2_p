; ModuleID = '../../third_party/ffmpeg/libavutil/tx_double.c'
source_filename = "../../third_party/ffmpeg/libavutil/tx_double.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVComplexDouble = type { double, double }
%struct.CosTabsInitOnce = type { void ()*, i32 }
%struct.AVTXContext = type { i32, i32, i32, i32, i64, double, %struct.AVComplexDouble*, %struct.AVComplexDouble*, i32*, i32*, i32* }

@ff_cos_16_double = common hidden local_unnamed_addr global [8 x double] zeroinitializer, align 32
@ff_cos_32_double = common hidden global [16 x double] zeroinitializer, align 32
@ff_cos_64_double = common hidden global [32 x double] zeroinitializer, align 32
@ff_cos_128_double = common hidden global [64 x double] zeroinitializer, align 32
@ff_cos_256_double = common hidden global [128 x double] zeroinitializer, align 32
@ff_cos_512_double = common hidden global [256 x double] zeroinitializer, align 32
@ff_cos_1024_double = common hidden global [512 x double] zeroinitializer, align 32
@ff_cos_2048_double = common hidden global [1024 x double] zeroinitializer, align 32
@ff_cos_4096_double = common hidden global [2048 x double] zeroinitializer, align 32
@ff_cos_8192_double = common hidden global [4096 x double] zeroinitializer, align 32
@ff_cos_16384_double = common hidden global [8192 x double] zeroinitializer, align 32
@ff_cos_32768_double = common hidden global [16384 x double] zeroinitializer, align 32
@ff_cos_65536_double = common hidden global [32768 x double] zeroinitializer, align 32
@ff_cos_131072_double = common hidden global [65536 x double] zeroinitializer, align 32
@ff_cos_53_double = common hidden local_unnamed_addr global [4 x %struct.AVComplexDouble] zeroinitializer, align 32
@fft_dispatch = internal unnamed_addr constant [18 x void (%struct.AVComplexDouble*)*] [void (%struct.AVComplexDouble*)* null, void (%struct.AVComplexDouble*)* @fft2, void (%struct.AVComplexDouble*)* @fft4, void (%struct.AVComplexDouble*)* @fft8, void (%struct.AVComplexDouble*)* @fft16, void (%struct.AVComplexDouble*)* @fft32, void (%struct.AVComplexDouble*)* @fft64, void (%struct.AVComplexDouble*)* @fft128, void (%struct.AVComplexDouble*)* @fft256, void (%struct.AVComplexDouble*)* @fft512, void (%struct.AVComplexDouble*)* @fft1024, void (%struct.AVComplexDouble*)* @fft2048, void (%struct.AVComplexDouble*)* @fft4096, void (%struct.AVComplexDouble*)* @fft8192, void (%struct.AVComplexDouble*)* @fft16384, void (%struct.AVComplexDouble*)* @fft32768, void (%struct.AVComplexDouble*)* @fft65536, void (%struct.AVComplexDouble*)* @fft131072], align 16
@cos_tabs_init_once = internal global [18 x %struct.CosTabsInitOnce] [%struct.CosTabsInitOnce { void ()* @ff_init_53_tabs, i32 0 }, %struct.CosTabsInitOnce zeroinitializer, %struct.CosTabsInitOnce zeroinitializer, %struct.CosTabsInitOnce zeroinitializer, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_16, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_32, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_64, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_128, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_256, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_512, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_1024, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_2048, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_4096, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_8192, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_16384, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_32768, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_65536, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_cos_tabs_131072, i32 0 }], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_tx_init_mdct_fft_double(%struct.AVTXContext*, void (%struct.AVTXContext*, i8*, i8*, i64)** nocapture, i32, i32, i32, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %8 = tail call i32 @ff_tx_type_is_mdct(i32 %2) #8
  %9 = icmp ne i32 %8, 0
  %10 = zext i1 %9 to i32
  %11 = ashr i32 %4, %10
  %12 = srem i32 %11, 15
  %13 = icmp eq i32 %12, 0
  %14 = sdiv i32 %11, 15
  %15 = select i1 %13, i32 %14, i32 %11
  br i1 %13, label %26, label %16

16:                                               ; preds = %7
  %17 = srem i32 %15, 5
  %18 = sdiv i32 %15, 5
  %19 = icmp eq i32 %17, 0
  br i1 %19, label %26, label %20

20:                                               ; preds = %16
  %21 = srem i32 %15, 3
  %22 = sdiv i32 %15, 3
  %23 = icmp eq i32 %21, 0
  %24 = select i1 %23, i32 %22, i32 %11
  %25 = select i1 %23, i32 3, i32 1
  br label %26

26:                                               ; preds = %20, %16, %7
  %27 = phi i32 [ %14, %7 ], [ %18, %16 ], [ %24, %20 ]
  %28 = phi i32 [ 15, %7 ], [ 5, %16 ], [ %25, %20 ]
  %29 = tail call i32 @llvm.ctpop.i32(i32 %27), !range !2
  %30 = icmp ult i32 %29, 2
  %31 = add i32 %27, -2
  %32 = icmp ult i32 %31, 131071
  %33 = and i1 %32, %30
  %34 = select i1 %33, i32 %27, i32 1
  %35 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 0
  store i32 %28, i32* %35, align 8
  %36 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  store i32 %34, i32* %36, align 4
  %37 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 2
  store i32 %3, i32* %37, align 8
  %38 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 3
  store i32 %2, i32* %38, align 4
  %39 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 4
  store i64 %6, i64* %39, align 8
  %40 = icmp sgt i32 %27, 1
  %41 = and i1 %32, %30
  %42 = xor i1 %41, true
  %43 = and i1 %40, %42
  %44 = icmp eq i32 %34, 1
  %45 = or i1 %43, %44
  br i1 %45, label %46, label %62

46:                                               ; preds = %26
  %47 = xor i1 %9, true
  %48 = and i32 %11, 1
  %49 = icmp eq i32 %48, 0
  %50 = or i1 %49, %47
  %51 = and i64 %6, 1
  %52 = icmp eq i64 %51, 0
  %53 = and i1 %52, %50
  br i1 %53, label %54, label %173

54:                                               ; preds = %46
  store i32 %11, i32* %35, align 8
  store i32 1, i32* %36, align 4
  store void (%struct.AVTXContext*, i8*, i8*, i64)* @naive_fft, void (%struct.AVTXContext*, i8*, i8*, i64)** %1, align 8
  br i1 %9, label %55, label %173

55:                                               ; preds = %54
  %56 = bitcast i8* %5 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 5
  %59 = bitcast double* %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = icmp eq i32 %3, 0
  %61 = select i1 %60, void (%struct.AVTXContext*, i8*, i8*, i64)* @naive_mdct, void (%struct.AVTXContext*, i8*, i8*, i64)* @naive_imdct
  store void (%struct.AVTXContext*, i8*, i8*, i64)* %61, void (%struct.AVTXContext*, i8*, i8*, i64)** %1, align 8
  br label %173

62:                                               ; preds = %26
  %63 = icmp ne i32 %28, 1
  %64 = icmp sgt i32 %34, 1
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %93

66:                                               ; preds = %62
  %67 = tail call i32 @ff_tx_gen_compound_mapping(%struct.AVTXContext* %0) #8
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %173

69:                                               ; preds = %66
  %70 = mul nsw i32 %34, %28
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 4
  %73 = tail call noalias i8* @av_malloc(i64 %72) #8
  %74 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %75 = bitcast %struct.AVComplexDouble** %74 to i8**
  store i8* %73, i8** %75, align 8
  %76 = icmp eq i8* %73, null
  br i1 %76, label %173, label %77

77:                                               ; preds = %69
  %78 = icmp eq i32 %28, 3
  %79 = icmp eq i32 %28, 5
  %80 = select i1 %79, void (%struct.AVTXContext*, i8*, i8*, i64)* @compound_fft_5xM, void (%struct.AVTXContext*, i8*, i8*, i64)* @compound_fft_15xM
  %81 = select i1 %78, void (%struct.AVTXContext*, i8*, i8*, i64)* @compound_fft_3xM, void (%struct.AVTXContext*, i8*, i8*, i64)* %80
  store void (%struct.AVTXContext*, i8*, i8*, i64)* %81, void (%struct.AVTXContext*, i8*, i8*, i64)** %1, align 8
  br i1 %9, label %82, label %98

82:                                               ; preds = %77
  br i1 %78, label %83, label %86

83:                                               ; preds = %82
  %84 = icmp eq i32 %3, 0
  %85 = select i1 %84, void (%struct.AVTXContext*, i8*, i8*, i64)* @compound_mdct_3xM, void (%struct.AVTXContext*, i8*, i8*, i64)* @compound_imdct_3xM
  br label %91

86:                                               ; preds = %82
  %87 = icmp ne i32 %3, 0
  %88 = select i1 %87, void (%struct.AVTXContext*, i8*, i8*, i64)* @compound_imdct_5xM, void (%struct.AVTXContext*, i8*, i8*, i64)* @compound_mdct_5xM
  %89 = select i1 %87, void (%struct.AVTXContext*, i8*, i8*, i64)* @compound_imdct_15xM, void (%struct.AVTXContext*, i8*, i8*, i64)* @compound_mdct_15xM
  %90 = select i1 %79, void (%struct.AVTXContext*, i8*, i8*, i64)* %88, void (%struct.AVTXContext*, i8*, i8*, i64)* %89
  br label %91

91:                                               ; preds = %86, %83
  %92 = phi void (%struct.AVTXContext*, i8*, i8*, i64)* [ %85, %83 ], [ %90, %86 ]
  store void (%struct.AVTXContext*, i8*, i8*, i64)* %92, void (%struct.AVTXContext*, i8*, i8*, i64)** %1, align 8
  br label %98

93:                                               ; preds = %62
  %94 = icmp eq i32 %3, 0
  %95 = select i1 %94, void (%struct.AVTXContext*, i8*, i8*, i64)* @monolithic_mdct, void (%struct.AVTXContext*, i8*, i8*, i64)* @monolithic_imdct
  %96 = select i1 %9, void (%struct.AVTXContext*, i8*, i8*, i64)* %95, void (%struct.AVTXContext*, i8*, i8*, i64)* @monolithic_fft
  store void (%struct.AVTXContext*, i8*, i8*, i64)* %96, void (%struct.AVTXContext*, i8*, i8*, i64)** %1, align 8
  %97 = icmp eq i32 %28, 1
  br i1 %97, label %101, label %98

98:                                               ; preds = %93, %91, %77
  %99 = load void ()*, void ()** getelementptr inbounds ([18 x %struct.CosTabsInitOnce], [18 x %struct.CosTabsInitOnce]* @cos_tabs_init_once, i64 0, i64 0, i32 0), align 16
  %100 = tail call i32 @pthread_once(i32* getelementptr inbounds ([18 x %struct.CosTabsInitOnce], [18 x %struct.CosTabsInitOnce]* @cos_tabs_init_once, i64 0, i64 0, i32 1), void ()* %99) #8
  br label %101

101:                                              ; preds = %93, %98
  %102 = phi i1 [ true, %98 ], [ false, %93 ]
  %103 = or i1 %9, %102
  %104 = trunc i64 %6 to i32
  %105 = and i32 %104, 1
  %106 = xor i32 %105, 1
  %107 = select i1 %103, i32 0, i32 %106
  %108 = tail call i32 @ff_tx_gen_ptwo_revtab(%struct.AVTXContext* %0, i32 %107) #8
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %173

110:                                              ; preds = %101
  %111 = and i64 %6, 1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %117, label %113

113:                                              ; preds = %110
  br i1 %9, label %173, label %114

114:                                              ; preds = %113
  %115 = tail call i32 @ff_tx_gen_ptwo_inplace_revtab_idx(%struct.AVTXContext* %0) #8
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %173

117:                                              ; preds = %114, %110
  %118 = or i32 %34, 1
  %119 = tail call i32 @llvm.ctlz.i32(i32 %118, i1 true), !range !3
  %120 = xor i32 %119, 31
  %121 = icmp ult i32 %120, 4
  br i1 %121, label %133, label %122

122:                                              ; preds = %117
  %123 = add nuw nsw i32 %120, 1
  %124 = zext i32 %123 to i64
  br label %125

125:                                              ; preds = %125, %122
  %126 = phi i64 [ 4, %122 ], [ %131, %125 ]
  %127 = getelementptr inbounds [18 x %struct.CosTabsInitOnce], [18 x %struct.CosTabsInitOnce]* @cos_tabs_init_once, i64 0, i64 %126, i32 1
  %128 = getelementptr inbounds [18 x %struct.CosTabsInitOnce], [18 x %struct.CosTabsInitOnce]* @cos_tabs_init_once, i64 0, i64 %126, i32 0
  %129 = load void ()*, void ()** %128, align 16
  %130 = tail call i32 @pthread_once(i32* %127, void ()* %129) #8
  %131 = add nuw nsw i64 %126, 1
  %132 = icmp eq i64 %131, %124
  br i1 %132, label %133, label %125

133:                                              ; preds = %125, %117
  br i1 %9, label %134, label %173

134:                                              ; preds = %133
  %135 = mul nsw i32 %34, %28
  %136 = bitcast i8* %5 to double*
  %137 = load double, double* %136, align 8
  %138 = fcmp nsz olt double %137, 0.000000e+00
  %139 = sitofp i32 %135 to double
  %140 = fadd nsz double %139, 1.250000e-01
  %141 = select i1 %138, double %140, double 1.250000e-01
  %142 = sext i32 %135 to i64
  %143 = tail call i8* @av_malloc_array(i64 %142, i64 16) #8
  %144 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 6
  %145 = bitcast %struct.AVComplexDouble** %144 to i8**
  store i8* %143, i8** %145, align 8
  %146 = icmp eq i8* %143, null
  %147 = bitcast i8* %143 to %struct.AVComplexDouble*
  br i1 %146, label %173, label %148

148:                                              ; preds = %134
  %149 = tail call nsz double @llvm.fabs.f64(double %137) #8
  %150 = tail call nsz double @llvm.sqrt.f64(double %149) #8
  %151 = icmp sgt i32 %135, 0
  br i1 %151, label %152, label %173

152:                                              ; preds = %148
  %153 = zext i32 %135 to i64
  br label %154

154:                                              ; preds = %171, %152
  %155 = phi %struct.AVComplexDouble* [ %147, %152 ], [ %172, %171 ]
  %156 = phi i64 [ 0, %152 ], [ %169, %171 ]
  %157 = trunc i64 %156 to i32
  %158 = sitofp i32 %157 to double
  %159 = fadd nsz double %141, %158
  %160 = fmul nsz double %159, 0x3FF921FB54442D18
  %161 = fdiv nsz double %160, %139
  %162 = tail call nsz double @llvm.cos.f64(double %161) #8
  %163 = fmul nsz double %150, %162
  %164 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %155, i64 %156, i32 0
  store double %163, double* %164, align 8
  %165 = tail call nsz double @llvm.sin.f64(double %161) #8
  %166 = fmul nsz double %150, %165
  %167 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %144, align 8
  %168 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %167, i64 %156, i32 1
  store double %166, double* %168, align 8
  %169 = add nuw nsw i64 %156, 1
  %170 = icmp eq i64 %169, %153
  br i1 %170, label %173, label %171

171:                                              ; preds = %154
  %172 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %144, align 8
  br label %154

173:                                              ; preds = %154, %148, %134, %133, %114, %113, %101, %69, %66, %54, %55, %46
  %174 = phi i32 [ -38, %46 ], [ 0, %55 ], [ 0, %54 ], [ %67, %66 ], [ -12, %69 ], [ %108, %101 ], [ -38, %113 ], [ %115, %114 ], [ 0, %133 ], [ -12, %134 ], [ 0, %148 ], [ 0, %154 ]
  ret i32 %174
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @ff_tx_type_is_mdct(i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind ssp uwtable
define internal void @naive_fft(%struct.AVTXContext* nocapture readonly, i8* nocapture, i8* nocapture readonly, i64) #3 {
  %5 = bitcast i8* %2 to %struct.AVComplexDouble*
  %6 = bitcast i8* %1 to %struct.AVComplexDouble*
  %7 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  %12 = sitofp i32 %8 to double
  %13 = select i1 %11, double 0xC01921FB54442D18, double 0x401921FB54442D18
  %14 = fdiv nsz double %13, %12
  %15 = icmp sgt i32 %8, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %4
  %17 = zext i32 %8 to i64
  br label %18

18:                                               ; preds = %16, %24
  %19 = phi i64 [ 0, %16 ], [ %27, %24 ]
  %20 = trunc i64 %19 to i32
  %21 = sitofp i32 %20 to double
  %22 = fmul nsz double %14, %21
  br label %29

23:                                               ; preds = %24, %4
  ret void

24:                                               ; preds = %29
  %25 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %6, i64 %19, i32 0
  %26 = bitcast double* %25 to <2 x double>*
  store <2 x double> %54, <2 x double>* %26, align 8
  %27 = add nuw nsw i64 %19, 1
  %28 = icmp eq i64 %27, %17
  br i1 %28, label %23, label %18

29:                                               ; preds = %29, %18
  %30 = phi i64 [ 0, %18 ], [ %55, %29 ]
  %31 = phi <2 x double> [ zeroinitializer, %18 ], [ %54, %29 ]
  %32 = trunc i64 %30 to i32
  %33 = sitofp i32 %32 to double
  %34 = fmul nsz double %22, %33
  %35 = tail call nsz double @llvm.cos.f64(double %34)
  %36 = tail call nsz double @llvm.sin.f64(double %34)
  %37 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %30, i32 0
  %38 = load double, double* %37, align 8
  %39 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %30, i32 1
  %40 = load double, double* %39, align 8
  %41 = insertelement <2 x double> undef, double %35, i32 0
  %42 = insertelement <2 x double> %41, double %36, i32 1
  %43 = insertelement <2 x double> undef, double %38, i32 0
  %44 = shufflevector <2 x double> %43, <2 x double> undef, <2 x i32> zeroinitializer
  %45 = fmul nsz <2 x double> %42, %44
  %46 = insertelement <2 x double> undef, double %36, i32 0
  %47 = insertelement <2 x double> %46, double %35, i32 1
  %48 = insertelement <2 x double> undef, double %40, i32 0
  %49 = shufflevector <2 x double> %48, <2 x double> undef, <2 x i32> zeroinitializer
  %50 = fmul nsz <2 x double> %47, %49
  %51 = fsub nsz <2 x double> %45, %50
  %52 = fadd nsz <2 x double> %45, %50
  %53 = shufflevector <2 x double> %51, <2 x double> %52, <2 x i32> <i32 0, i32 3>
  %54 = fadd nsz <2 x double> %31, %53
  %55 = add nuw nsw i64 %30, 1
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %24, label %29
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @naive_imdct(%struct.AVTXContext* nocapture readonly, i8* nocapture, i8* nocapture readonly, i64) #3 {
  %5 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = shl nsw i32 %6, 1
  %8 = bitcast i8* %2 to double*
  %9 = bitcast i8* %1 to double*
  %10 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 5
  %11 = load double, double* %10, align 8
  %12 = sitofp i32 %7 to double
  %13 = fmul nsz double %12, 4.000000e+00
  %14 = fdiv nsz double 0x400921FB54442D18, %13
  %15 = lshr i64 %3, 3
  %16 = icmp sgt i32 %6, 0
  br i1 %16, label %17, label %23

17:                                               ; preds = %4
  %18 = shl i32 %6, 2
  %19 = mul nsw i32 %6, 6
  %20 = sext i32 %7 to i64
  %21 = sext i32 %6 to i64
  %22 = zext i32 %6 to i64
  br label %24

23:                                               ; preds = %38, %4
  ret void

24:                                               ; preds = %17, %38
  %25 = phi i64 [ 0, %17 ], [ %45, %38 ]
  %26 = phi i32 [ 0, %17 ], [ %46, %38 ]
  %27 = shl nuw nsw i32 %26, 1
  %28 = xor i32 %27, -1
  %29 = add i32 %18, %28
  %30 = sitofp i32 %29 to double
  %31 = fmul nsz double %14, %30
  %32 = trunc i64 %25 to i32
  %33 = shl i32 %32, 1
  %34 = add nsw i32 %33, %19
  %35 = or i32 %34, 1
  %36 = sitofp i32 %35 to double
  %37 = fmul nsz double %14, %36
  br label %48

38:                                               ; preds = %48
  %39 = fmul nsz double %11, %64
  %40 = getelementptr inbounds double, double* %9, i64 %25
  store double %39, double* %40, align 8
  %41 = fmul nsz double %11, %66
  %42 = fsub nsz double -0.000000e+00, %41
  %43 = add nsw i64 %25, %21
  %44 = getelementptr inbounds double, double* %9, i64 %43
  store double %42, double* %44, align 8
  %45 = add nuw nsw i64 %25, 1
  %46 = add nuw nsw i32 %26, 1
  %47 = icmp eq i64 %45, %22
  br i1 %47, label %23, label %24

48:                                               ; preds = %24, %48
  %49 = phi i64 [ 0, %24 ], [ %67, %48 ]
  %50 = phi double [ 0.000000e+00, %24 ], [ %66, %48 ]
  %51 = phi double [ 0.000000e+00, %24 ], [ %64, %48 ]
  %52 = trunc i64 %49 to i32
  %53 = shl i32 %52, 1
  %54 = or i32 %53, 1
  %55 = sitofp i32 %54 to double
  %56 = fmul nsz double %31, %55
  %57 = tail call nsz double @llvm.cos.f64(double %56)
  %58 = fmul nsz double %37, %55
  %59 = tail call nsz double @llvm.cos.f64(double %58)
  %60 = mul nuw nsw i64 %15, %49
  %61 = getelementptr inbounds double, double* %8, i64 %60
  %62 = load double, double* %61, align 8
  %63 = fmul nsz double %57, %62
  %64 = fadd nsz double %51, %63
  %65 = fmul nsz double %59, %62
  %66 = fadd nsz double %50, %65
  %67 = add nuw nsw i64 %49, 1
  %68 = icmp slt i64 %67, %20
  br i1 %68, label %48, label %38
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @naive_mdct(%struct.AVTXContext* nocapture readonly, i8* nocapture, i8* nocapture readonly, i64) #3 {
  %5 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = shl nsw i32 %6, 1
  %8 = bitcast i8* %2 to double*
  %9 = bitcast i8* %1 to double*
  %10 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 5
  %11 = load double, double* %10, align 8
  %12 = sitofp i32 %7 to double
  %13 = fmul nsz double %12, 4.000000e+00
  %14 = fdiv nsz double 0x400921FB54442D18, %13
  %15 = lshr i64 %3, 3
  %16 = icmp sgt i32 %6, 0
  br i1 %16, label %17, label %26

17:                                               ; preds = %4
  %18 = shl nsw i32 %6, 2
  %19 = sext i32 %18 to i64
  %20 = sext i32 %7 to i64
  br label %21

21:                                               ; preds = %27, %17
  %22 = phi i64 [ 0, %17 ], [ %31, %27 ]
  %23 = trunc i64 %22 to i32
  %24 = shl i32 %23, 1
  %25 = or i32 %24, 1
  br label %33

26:                                               ; preds = %27, %4
  ret void

27:                                               ; preds = %33
  %28 = fmul nsz double %11, %47
  %29 = mul nsw i64 %15, %22
  %30 = getelementptr inbounds double, double* %9, i64 %29
  store double %28, double* %30, align 8
  %31 = add nuw nsw i64 %22, 1
  %32 = icmp slt i64 %31, %20
  br i1 %32, label %21, label %26

33:                                               ; preds = %21, %33
  %34 = phi i64 [ 0, %21 ], [ %48, %33 ]
  %35 = phi double [ 0.000000e+00, %21 ], [ %47, %33 ]
  %36 = trunc i64 %34 to i32
  %37 = shl i32 %36, 1
  %38 = or i32 %37, 1
  %39 = add nsw i32 %38, %7
  %40 = mul nsw i32 %39, %25
  %41 = getelementptr inbounds double, double* %8, i64 %34
  %42 = load double, double* %41, align 8
  %43 = sitofp i32 %40 to double
  %44 = fmul nsz double %14, %43
  %45 = tail call nsz double @llvm.cos.f64(double %44)
  %46 = fmul nsz double %45, %42
  %47 = fadd nsz double %35, %46
  %48 = add nuw nsw i64 %34, 1
  %49 = icmp slt i64 %48, %19
  br i1 %49, label %33, label %27
}

declare i32 @ff_tx_gen_compound_mapping(%struct.AVTXContext*) local_unnamed_addr #2

declare noalias i8* @av_malloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @compound_fft_3xM(%struct.AVTXContext* nocapture readonly, i8* nocapture, i8* nocapture readonly, i64) #0 {
  %5 = alloca [3 x %struct.AVComplexDouble], align 16
  %6 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 8
  %9 = load i32*, i32** %8, align 8
  %10 = mul nsw i32 %7, 3
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i32, i32* %9, i64 %11
  %13 = bitcast i8* %2 to %struct.AVComplexDouble*
  %14 = bitcast i8* %1 to %struct.AVComplexDouble*
  %15 = bitcast [3 x %struct.AVComplexDouble]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %15) #8
  %16 = getelementptr inbounds [3 x %struct.AVComplexDouble], [3 x %struct.AVComplexDouble]* %5, i64 0, i64 1, i32 0
  %17 = getelementptr inbounds [3 x %struct.AVComplexDouble], [3 x %struct.AVComplexDouble]* %5, i64 0, i64 2, i32 0
  %18 = or i32 %7, 1
  %19 = tail call i32 @llvm.ctlz.i32(i32 %18, i1 true), !range !3
  %20 = xor i32 %19, 31
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [18 x void (%struct.AVComplexDouble*)*], [18 x void (%struct.AVComplexDouble*)*]* @fft_dispatch, i64 0, i64 %21
  %23 = bitcast [3 x %struct.AVComplexDouble]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -1, i64 48, i1 false)
  %24 = load void (%struct.AVComplexDouble*)*, void (%struct.AVComplexDouble*)** %22, align 8
  %25 = icmp sgt i32 %7, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %4
  %27 = sext i32 %7 to i64
  br label %99

28:                                               ; preds = %4
  %29 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %30 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  %31 = sext i32 %7 to i64
  %32 = shl nsw i64 %31, 1
  %33 = zext i32 %7 to i64
  %34 = bitcast [3 x %struct.AVComplexDouble]* %5 to i8*
  %35 = getelementptr inbounds [3 x %struct.AVComplexDouble], [3 x %struct.AVComplexDouble]* %5, i64 0, i64 1
  %36 = bitcast %struct.AVComplexDouble* %35 to i8*
  %37 = getelementptr inbounds [3 x %struct.AVComplexDouble], [3 x %struct.AVComplexDouble]* %5, i64 0, i64 2
  %38 = bitcast %struct.AVComplexDouble* %37 to i8*
  %39 = bitcast double* %16 to <2 x double>*
  %40 = bitcast double* %17 to <2 x double>*
  %41 = bitcast [3 x %struct.AVComplexDouble]* %5 to <2 x double>*
  br label %42

42:                                               ; preds = %42, %28
  %43 = phi i64 [ 0, %28 ], [ %97, %42 ]
  %44 = mul i64 %43, 3
  %45 = and i64 %44, 4294967295
  %46 = getelementptr inbounds i32, i32* %9, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %48
  %50 = bitcast %struct.AVComplexDouble* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %34, i8* align 8 %50, i64 16, i1 false)
  %51 = add nuw nsw i64 %45, 1
  %52 = getelementptr inbounds i32, i32* %9, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %54
  %56 = bitcast %struct.AVComplexDouble* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %36, i8* align 8 %56, i64 16, i1 false)
  %57 = add nuw nsw i64 %45, 2
  %58 = getelementptr inbounds i32, i32* %9, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %60
  %62 = bitcast %struct.AVComplexDouble* %61 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %38, i8* align 8 %62, i64 16, i1 false)
  %63 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %29, align 8
  %64 = load i32*, i32** %30, align 8
  %65 = getelementptr inbounds i32, i32* %64, i64 %43
  %66 = load i32, i32* %65, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %63, i64 %67
  %69 = load <2 x double>, <2 x double>* %39, align 16
  %70 = load <2 x double>, <2 x double>* %40, align 16
  %71 = fsub nsz <2 x double> %69, %70
  %72 = shufflevector <2 x double> %71, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %73 = fadd nsz <2 x double> %69, %70
  %74 = load <2 x double>, <2 x double>* %41, align 16
  %75 = fadd nsz <2 x double> %74, %73
  %76 = bitcast %struct.AVComplexDouble* %68 to <2 x double>*
  store <2 x double> %75, <2 x double>* %76, align 8
  %77 = load <2 x double>, <2 x double>* bitcast ([4 x %struct.AVComplexDouble]* @ff_cos_53_double to <2 x double>*), align 32
  %78 = fmul nsz <2 x double> %72, %77
  %79 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 1, i32 0), align 16
  %80 = insertelement <2 x double> undef, double %79, i32 0
  %81 = shufflevector <2 x double> %80, <2 x double> undef, <2 x i32> zeroinitializer
  %82 = fmul nsz <2 x double> %73, %81
  %83 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %68, i64 %31, i32 0
  %84 = fsub nsz <2 x double> %74, %82
  %85 = fadd nsz <2 x double> %84, %78
  %86 = fsub nsz <2 x double> %84, %78
  %87 = shufflevector <2 x double> %85, <2 x double> %86, <2 x i32> <i32 0, i32 3>
  %88 = bitcast double* %83 to <2 x double>*
  store <2 x double> %87, <2 x double>* %88, align 8
  %89 = extractelement <2 x double> %84, i32 0
  %90 = extractelement <2 x double> %78, i32 0
  %91 = fsub nsz double %89, %90
  %92 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %68, i64 %32, i32 0
  store double %91, double* %92, align 8
  %93 = extractelement <2 x double> %84, i32 1
  %94 = extractelement <2 x double> %78, i32 1
  %95 = fadd nsz double %94, %93
  %96 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %68, i64 %32, i32 1
  store double %95, double* %96, align 8
  %97 = add nuw nsw i64 %43, 1
  %98 = icmp eq i64 %97, %33
  br i1 %98, label %99, label %42

99:                                               ; preds = %42, %26
  %100 = phi i64 [ %27, %26 ], [ %31, %42 ]
  %101 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %102 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %101, align 8
  tail call void %24(%struct.AVComplexDouble* %102) #8
  %103 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %101, align 8
  %104 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %103, i64 %100
  tail call void %24(%struct.AVComplexDouble* %104) #8
  %105 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %101, align 8
  %106 = shl nsw i64 %100, 1
  %107 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %105, i64 %106
  tail call void %24(%struct.AVComplexDouble* %107) #8
  br i1 %25, label %109, label %108

108:                                              ; preds = %109, %99
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %15) #8
  ret void

109:                                              ; preds = %99, %109
  %110 = phi i64 [ %119, %109 ], [ 0, %99 ]
  %111 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %14, i64 %110
  %112 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %101, align 8
  %113 = getelementptr inbounds i32, i32* %12, i64 %110
  %114 = load i32, i32* %113, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %112, i64 %115
  %117 = bitcast %struct.AVComplexDouble* %111 to i8*
  %118 = bitcast %struct.AVComplexDouble* %116 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %118, i64 16, i1 false)
  %119 = add nuw nsw i64 %110, 1
  %120 = icmp slt i64 %119, %11
  br i1 %120, label %109, label %108
}

; Function Attrs: nounwind ssp uwtable
define internal void @compound_fft_5xM(%struct.AVTXContext* nocapture readonly, i8* nocapture, i8* nocapture readonly, i64) #0 {
  %5 = alloca [5 x %struct.AVComplexDouble], align 16
  %6 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 8
  %9 = load i32*, i32** %8, align 8
  %10 = mul nsw i32 %7, 5
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i32, i32* %9, i64 %11
  %13 = bitcast i8* %2 to %struct.AVComplexDouble*
  %14 = bitcast i8* %1 to %struct.AVComplexDouble*
  %15 = bitcast [5 x %struct.AVComplexDouble]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %15) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -1, i64 80, i1 false)
  %16 = or i32 %7, 1
  %17 = tail call i32 @llvm.ctlz.i32(i32 %16, i1 true), !range !3
  %18 = xor i32 %17, 31
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [18 x void (%struct.AVComplexDouble*)*], [18 x void (%struct.AVComplexDouble*)*]* @fft_dispatch, i64 0, i64 %19
  %21 = load void (%struct.AVComplexDouble*)*, void (%struct.AVComplexDouble*)** %20, align 8
  %22 = icmp sgt i32 %7, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %4
  %24 = sext i32 %7 to i64
  %25 = mul nsw i64 %24, 3
  br label %155

26:                                               ; preds = %4
  %27 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %28 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  %29 = sext i32 %7 to i64
  %30 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 1, i32 0
  %31 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 4, i32 0
  %32 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 2, i32 0
  %33 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 3, i32 0
  %34 = shl nsw i64 %29, 1
  %35 = mul nsw i64 %29, 3
  %36 = shl nsw i64 %29, 2
  %37 = zext i32 %7 to i64
  %38 = bitcast [5 x %struct.AVComplexDouble]* %5 to i8*
  %39 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 1
  %40 = bitcast %struct.AVComplexDouble* %39 to i8*
  %41 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 2
  %42 = bitcast %struct.AVComplexDouble* %41 to i8*
  %43 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 3
  %44 = bitcast %struct.AVComplexDouble* %43 to i8*
  %45 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 4
  %46 = bitcast %struct.AVComplexDouble* %45 to i8*
  %47 = bitcast double* %30 to <2 x double>*
  %48 = bitcast double* %31 to <2 x double>*
  %49 = bitcast double* %32 to <2 x double>*
  %50 = bitcast double* %33 to <2 x double>*
  %51 = bitcast [5 x %struct.AVComplexDouble]* %5 to <2 x double>*
  br label %52

52:                                               ; preds = %52, %26
  %53 = phi i64 [ 0, %26 ], [ %153, %52 ]
  %54 = mul i64 %53, 5
  %55 = and i64 %54, 4294967295
  %56 = getelementptr inbounds i32, i32* %9, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %58
  %60 = bitcast %struct.AVComplexDouble* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %38, i8* align 8 %60, i64 16, i1 false)
  %61 = add nuw nsw i64 %55, 1
  %62 = getelementptr inbounds i32, i32* %9, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %64
  %66 = bitcast %struct.AVComplexDouble* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %40, i8* align 8 %66, i64 16, i1 false)
  %67 = add nuw nsw i64 %55, 2
  %68 = getelementptr inbounds i32, i32* %9, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %70
  %72 = bitcast %struct.AVComplexDouble* %71 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %42, i8* align 8 %72, i64 16, i1 false)
  %73 = add nuw nsw i64 %55, 3
  %74 = getelementptr inbounds i32, i32* %9, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %76
  %78 = bitcast %struct.AVComplexDouble* %77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %44, i8* align 8 %78, i64 16, i1 false)
  %79 = add nuw nsw i64 %55, 4
  %80 = getelementptr inbounds i32, i32* %9, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %82
  %84 = bitcast %struct.AVComplexDouble* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %46, i8* align 8 %84, i64 16, i1 false)
  %85 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %27, align 8
  %86 = load i32*, i32** %28, align 8
  %87 = getelementptr inbounds i32, i32* %86, i64 %53
  %88 = load i32, i32* %87, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %85, i64 %89
  %91 = load <2 x double>, <2 x double>* %47, align 16
  %92 = load <2 x double>, <2 x double>* %48, align 16
  %93 = fsub nsz <2 x double> %91, %92
  %94 = shufflevector <2 x double> %93, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %95 = fadd nsz <2 x double> %91, %92
  %96 = load <2 x double>, <2 x double>* %49, align 16
  %97 = load <2 x double>, <2 x double>* %50, align 16
  %98 = fsub nsz <2 x double> %96, %97
  %99 = shufflevector <2 x double> %98, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %100 = fadd nsz <2 x double> %96, %97
  %101 = load <2 x double>, <2 x double>* %51, align 16
  %102 = fadd nsz <2 x double> %95, %101
  %103 = fadd nsz <2 x double> %100, %102
  %104 = bitcast %struct.AVComplexDouble* %90 to <2 x double>*
  store <2 x double> %103, <2 x double>* %104, align 8
  %105 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 0), align 32
  %106 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 0), align 16
  %107 = insertelement <2 x double> undef, double %105, i32 0
  %108 = shufflevector <2 x double> %107, <2 x double> undef, <2 x i32> zeroinitializer
  %109 = fmul nsz <2 x double> %100, %108
  %110 = insertelement <2 x double> undef, double %106, i32 0
  %111 = shufflevector <2 x double> %110, <2 x double> undef, <2 x i32> zeroinitializer
  %112 = fmul nsz <2 x double> %95, %111
  %113 = fsub nsz <2 x double> %109, %112
  %114 = fmul nsz <2 x double> %95, %108
  %115 = fmul nsz <2 x double> %100, %111
  %116 = fsub nsz <2 x double> %114, %115
  %117 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 1), align 8
  %118 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 1), align 8
  %119 = insertelement <2 x double> undef, double %117, i32 0
  %120 = shufflevector <2 x double> %119, <2 x double> undef, <2 x i32> zeroinitializer
  %121 = fmul nsz <2 x double> %99, %120
  %122 = insertelement <2 x double> undef, double %118, i32 0
  %123 = shufflevector <2 x double> %122, <2 x double> undef, <2 x i32> zeroinitializer
  %124 = fmul nsz <2 x double> %94, %123
  %125 = fsub nsz <2 x double> %121, %124
  %126 = fmul nsz <2 x double> %94, %120
  %127 = fmul nsz <2 x double> %99, %123
  %128 = fadd nsz <2 x double> %126, %127
  %129 = fadd nsz <2 x double> %116, %128
  %130 = fsub nsz <2 x double> %116, %128
  %131 = shufflevector <2 x double> %129, <2 x double> %130, <2 x i32> <i32 0, i32 3>
  %132 = fsub nsz <2 x double> %116, %128
  %133 = fadd nsz <2 x double> %116, %128
  %134 = shufflevector <2 x double> %132, <2 x double> %133, <2 x i32> <i32 0, i32 3>
  %135 = fadd nsz <2 x double> %113, %125
  %136 = fsub nsz <2 x double> %113, %125
  %137 = shufflevector <2 x double> %135, <2 x double> %136, <2 x i32> <i32 0, i32 3>
  %138 = fsub nsz <2 x double> %113, %125
  %139 = fadd nsz <2 x double> %113, %125
  %140 = shufflevector <2 x double> %138, <2 x double> %139, <2 x i32> <i32 0, i32 3>
  %141 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %90, i64 %29, i32 0
  %142 = fadd nsz <2 x double> %101, %131
  %143 = bitcast double* %141 to <2 x double>*
  store <2 x double> %142, <2 x double>* %143, align 8
  %144 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %90, i64 %34, i32 0
  %145 = fadd nsz <2 x double> %101, %140
  %146 = bitcast double* %144 to <2 x double>*
  store <2 x double> %145, <2 x double>* %146, align 8
  %147 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %90, i64 %35, i32 0
  %148 = fadd nsz <2 x double> %101, %137
  %149 = bitcast double* %147 to <2 x double>*
  store <2 x double> %148, <2 x double>* %149, align 8
  %150 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %90, i64 %36, i32 0
  %151 = fadd nsz <2 x double> %101, %134
  %152 = bitcast double* %150 to <2 x double>*
  store <2 x double> %151, <2 x double>* %152, align 8
  %153 = add nuw nsw i64 %53, 1
  %154 = icmp eq i64 %153, %37
  br i1 %154, label %155, label %52

155:                                              ; preds = %52, %23
  %156 = phi i64 [ %25, %23 ], [ %35, %52 ]
  %157 = phi i64 [ %24, %23 ], [ %29, %52 ]
  %158 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %159 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %158, align 8
  tail call void %21(%struct.AVComplexDouble* %159) #8
  %160 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %158, align 8
  %161 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %160, i64 %157
  tail call void %21(%struct.AVComplexDouble* %161) #8
  %162 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %158, align 8
  %163 = shl nsw i64 %157, 1
  %164 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %162, i64 %163
  tail call void %21(%struct.AVComplexDouble* %164) #8
  %165 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %158, align 8
  %166 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %165, i64 %156
  tail call void %21(%struct.AVComplexDouble* %166) #8
  %167 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %158, align 8
  %168 = shl nsw i64 %157, 2
  %169 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %167, i64 %168
  tail call void %21(%struct.AVComplexDouble* %169) #8
  br i1 %22, label %171, label %170

170:                                              ; preds = %171, %155
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %15) #8
  ret void

171:                                              ; preds = %155, %171
  %172 = phi i64 [ %181, %171 ], [ 0, %155 ]
  %173 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %14, i64 %172
  %174 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %158, align 8
  %175 = getelementptr inbounds i32, i32* %12, i64 %172
  %176 = load i32, i32* %175, align 4
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %174, i64 %177
  %179 = bitcast %struct.AVComplexDouble* %173 to i8*
  %180 = bitcast %struct.AVComplexDouble* %178 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %179, i8* align 8 %180, i64 16, i1 false)
  %181 = add nuw nsw i64 %172, 1
  %182 = icmp slt i64 %181, %11
  br i1 %182, label %171, label %170
}

; Function Attrs: nounwind ssp uwtable
define internal void @compound_fft_15xM(%struct.AVTXContext* nocapture readonly, i8* nocapture, i8* nocapture readonly, i64) #0 {
  %5 = alloca [15 x %struct.AVComplexDouble], align 16
  %6 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 8
  %9 = load i32*, i32** %8, align 8
  %10 = mul nsw i32 %7, 15
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i32, i32* %9, i64 %11
  %13 = bitcast i8* %2 to %struct.AVComplexDouble*
  %14 = bitcast i8* %1 to %struct.AVComplexDouble*
  %15 = bitcast [15 x %struct.AVComplexDouble]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %15) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -1, i64 240, i1 false)
  %16 = or i32 %7, 1
  %17 = tail call i32 @llvm.ctlz.i32(i32 %16, i1 true), !range !3
  %18 = xor i32 %17, 31
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [18 x void (%struct.AVComplexDouble*)*], [18 x void (%struct.AVComplexDouble*)*]* @fft_dispatch, i64 0, i64 %19
  %21 = load void (%struct.AVComplexDouble*)*, void (%struct.AVComplexDouble*)** %20, align 8
  %22 = icmp sgt i32 %7, 0
  br i1 %22, label %35, label %23

23:                                               ; preds = %4
  %24 = sext i32 %7 to i64
  %25 = mul nsw i64 %24, 3
  %26 = mul nsw i64 %24, 5
  %27 = mul nsw i64 %24, 6
  %28 = mul nsw i64 %24, 7
  %29 = mul nsw i64 %24, 9
  %30 = mul nsw i64 %24, 10
  %31 = mul nsw i64 %24, 11
  %32 = mul nsw i64 %24, 12
  %33 = mul nsw i64 %24, 13
  %34 = mul nsw i64 %24, 14
  br label %536

35:                                               ; preds = %4
  %36 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %37 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  %38 = sext i32 %7 to i64
  %39 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 1, i32 0
  %40 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 2, i32 0
  %41 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 4, i32 0
  %42 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 5, i32 0
  %43 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 3, i32 0
  %44 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 7, i32 0
  %45 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 8, i32 0
  %46 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 6, i32 0
  %47 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 10, i32 0
  %48 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 11, i32 0
  %49 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 9, i32 0
  %50 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 13, i32 0
  %51 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 14, i32 0
  %52 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 12, i32 0
  %53 = mul nsw i64 %38, 6
  %54 = mul nsw i64 %38, 12
  %55 = mul nsw i64 %38, 3
  %56 = mul nsw i64 %38, 9
  %57 = mul nsw i64 %38, 10
  %58 = mul nsw i64 %38, 7
  %59 = mul nsw i64 %38, 13
  %60 = shl nsw i64 %38, 2
  %61 = mul nsw i64 %38, 5
  %62 = mul nsw i64 %38, 11
  %63 = shl nsw i64 %38, 1
  %64 = shl nsw i64 %38, 3
  %65 = mul nsw i64 %38, 14
  %66 = zext i32 %7 to i64
  %67 = bitcast [15 x %struct.AVComplexDouble]* %5 to i8*
  %68 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 1
  %69 = bitcast %struct.AVComplexDouble* %68 to i8*
  %70 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 2
  %71 = bitcast %struct.AVComplexDouble* %70 to i8*
  %72 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 3
  %73 = bitcast %struct.AVComplexDouble* %72 to i8*
  %74 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 4
  %75 = bitcast %struct.AVComplexDouble* %74 to i8*
  %76 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 5
  %77 = bitcast %struct.AVComplexDouble* %76 to i8*
  %78 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 6
  %79 = bitcast %struct.AVComplexDouble* %78 to i8*
  %80 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 7
  %81 = bitcast %struct.AVComplexDouble* %80 to i8*
  %82 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 8
  %83 = bitcast %struct.AVComplexDouble* %82 to i8*
  %84 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 9
  %85 = bitcast %struct.AVComplexDouble* %84 to i8*
  %86 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 10
  %87 = bitcast %struct.AVComplexDouble* %86 to i8*
  %88 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 11
  %89 = bitcast %struct.AVComplexDouble* %88 to i8*
  %90 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 12
  %91 = bitcast %struct.AVComplexDouble* %90 to i8*
  %92 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 13
  %93 = bitcast %struct.AVComplexDouble* %92 to i8*
  %94 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 14
  %95 = bitcast %struct.AVComplexDouble* %94 to i8*
  %96 = bitcast double* %39 to <2 x double>*
  %97 = bitcast double* %40 to <2 x double>*
  %98 = bitcast [15 x %struct.AVComplexDouble]* %5 to <2 x double>*
  %99 = bitcast double* %41 to <2 x double>*
  %100 = bitcast double* %42 to <2 x double>*
  %101 = bitcast double* %43 to <2 x double>*
  %102 = bitcast double* %50 to <2 x double>*
  %103 = bitcast double* %51 to <2 x double>*
  %104 = bitcast double* %52 to <2 x double>*
  %105 = bitcast double* %44 to <2 x double>*
  %106 = bitcast double* %45 to <2 x double>*
  %107 = bitcast double* %46 to <2 x double>*
  %108 = bitcast double* %47 to <2 x double>*
  %109 = bitcast double* %48 to <2 x double>*
  %110 = bitcast double* %49 to <2 x double>*
  br label %111

111:                                              ; preds = %111, %35
  %112 = phi i64 [ 0, %35 ], [ %534, %111 ]
  %113 = mul i64 %112, 15
  %114 = and i64 %113, 4294967295
  %115 = getelementptr inbounds i32, i32* %9, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %117
  %119 = bitcast %struct.AVComplexDouble* %118 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %67, i8* align 8 %119, i64 16, i1 false)
  %120 = add nuw nsw i64 %114, 1
  %121 = getelementptr inbounds i32, i32* %9, i64 %120
  %122 = load i32, i32* %121, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %123
  %125 = bitcast %struct.AVComplexDouble* %124 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %69, i8* align 8 %125, i64 16, i1 false)
  %126 = add nuw nsw i64 %114, 2
  %127 = getelementptr inbounds i32, i32* %9, i64 %126
  %128 = load i32, i32* %127, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %129
  %131 = bitcast %struct.AVComplexDouble* %130 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %71, i8* align 8 %131, i64 16, i1 false)
  %132 = add nuw nsw i64 %114, 3
  %133 = getelementptr inbounds i32, i32* %9, i64 %132
  %134 = load i32, i32* %133, align 4
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %135
  %137 = bitcast %struct.AVComplexDouble* %136 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %73, i8* align 8 %137, i64 16, i1 false)
  %138 = add nuw nsw i64 %114, 4
  %139 = getelementptr inbounds i32, i32* %9, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %141
  %143 = bitcast %struct.AVComplexDouble* %142 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %75, i8* align 8 %143, i64 16, i1 false)
  %144 = add nuw nsw i64 %114, 5
  %145 = getelementptr inbounds i32, i32* %9, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %147
  %149 = bitcast %struct.AVComplexDouble* %148 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %77, i8* align 8 %149, i64 16, i1 false)
  %150 = add nuw nsw i64 %114, 6
  %151 = getelementptr inbounds i32, i32* %9, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %153
  %155 = bitcast %struct.AVComplexDouble* %154 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %79, i8* align 8 %155, i64 16, i1 false)
  %156 = add nuw nsw i64 %114, 7
  %157 = getelementptr inbounds i32, i32* %9, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %159
  %161 = bitcast %struct.AVComplexDouble* %160 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %81, i8* align 8 %161, i64 16, i1 false)
  %162 = add nuw nsw i64 %114, 8
  %163 = getelementptr inbounds i32, i32* %9, i64 %162
  %164 = load i32, i32* %163, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %165
  %167 = bitcast %struct.AVComplexDouble* %166 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %83, i8* align 8 %167, i64 16, i1 false)
  %168 = add nuw nsw i64 %114, 9
  %169 = getelementptr inbounds i32, i32* %9, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %171
  %173 = bitcast %struct.AVComplexDouble* %172 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %85, i8* align 8 %173, i64 16, i1 false)
  %174 = add nuw nsw i64 %114, 10
  %175 = getelementptr inbounds i32, i32* %9, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %177
  %179 = bitcast %struct.AVComplexDouble* %178 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %87, i8* align 8 %179, i64 16, i1 false)
  %180 = add nuw nsw i64 %114, 11
  %181 = getelementptr inbounds i32, i32* %9, i64 %180
  %182 = load i32, i32* %181, align 4
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %183
  %185 = bitcast %struct.AVComplexDouble* %184 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %89, i8* align 8 %185, i64 16, i1 false)
  %186 = add nuw nsw i64 %114, 12
  %187 = getelementptr inbounds i32, i32* %9, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %189
  %191 = bitcast %struct.AVComplexDouble* %190 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %91, i8* align 8 %191, i64 16, i1 false)
  %192 = add nuw nsw i64 %114, 13
  %193 = getelementptr inbounds i32, i32* %9, i64 %192
  %194 = load i32, i32* %193, align 4
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %195
  %197 = bitcast %struct.AVComplexDouble* %196 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %93, i8* align 8 %197, i64 16, i1 false)
  %198 = add nuw nsw i64 %114, 14
  %199 = getelementptr inbounds i32, i32* %9, i64 %198
  %200 = load i32, i32* %199, align 4
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %13, i64 %201
  %203 = bitcast %struct.AVComplexDouble* %202 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %95, i8* align 8 %203, i64 16, i1 false)
  %204 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %36, align 8
  %205 = load i32*, i32** %37, align 8
  %206 = getelementptr inbounds i32, i32* %205, i64 %112
  %207 = load i32, i32* %206, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %204, i64 %208
  %210 = load <2 x double>, <2 x double>* bitcast ([4 x %struct.AVComplexDouble]* @ff_cos_53_double to <2 x double>*), align 32
  %211 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 1, i32 0), align 16
  %212 = load <2 x double>, <2 x double>* %96, align 16
  %213 = load <2 x double>, <2 x double>* %97, align 16
  %214 = extractelement <2 x double> %213, i32 1
  %215 = fadd nsz <2 x double> %212, %213
  %216 = load <2 x double>, <2 x double>* %98, align 16
  %217 = fadd nsz <2 x double> %216, %215
  %218 = extractelement <2 x double> %215, i32 0
  %219 = extractelement <2 x double> %216, i32 0
  %220 = load <2 x double>, <2 x double>* %99, align 16
  %221 = load <2 x double>, <2 x double>* %100, align 16
  %222 = extractelement <2 x double> %220, i32 0
  %223 = extractelement <2 x double> %221, i32 0
  %224 = fsub nsz double %222, %223
  %225 = fadd nsz <2 x double> %220, %221
  %226 = load <2 x double>, <2 x double>* %101, align 16
  %227 = extractelement <2 x double> %210, i32 1
  %228 = fmul nsz double %227, %224
  %229 = extractelement <2 x double> %225, i32 1
  %230 = fmul nsz double %211, %229
  %231 = shufflevector <2 x double> %212, <2 x double> %226, <2 x i32> <i32 1, i32 3>
  %232 = insertelement <2 x double> undef, double %214, i32 0
  %233 = insertelement <2 x double> %232, double %230, i32 1
  %234 = fsub nsz <2 x double> %231, %233
  %235 = extractelement <2 x double> %210, i32 0
  %236 = insertelement <2 x double> %210, double %228, i32 1
  %237 = fmul nsz <2 x double> %234, %236
  %238 = fsub nsz <2 x double> %234, %236
  %239 = shufflevector <2 x double> %237, <2 x double> %238, <2 x i32> <i32 0, i32 3>
  %240 = load <2 x double>, <2 x double>* %102, align 16
  %241 = load <2 x double>, <2 x double>* %103, align 16
  %242 = extractelement <2 x double> %240, i32 0
  %243 = extractelement <2 x double> %241, i32 0
  %244 = fsub nsz double %242, %243
  %245 = fadd nsz <2 x double> %240, %241
  %246 = load <2 x double>, <2 x double>* %104, align 16
  %247 = insertelement <2 x double> undef, double %211, i32 0
  %248 = insertelement <2 x double> %210, double %211, i32 0
  %249 = insertelement <2 x double> undef, double %218, i32 0
  %250 = insertelement <2 x double> %249, double %244, i32 1
  %251 = fmul nsz <2 x double> %248, %250
  %252 = extractelement <2 x double> %245, i32 1
  %253 = fmul nsz double %211, %252
  %254 = extractelement <2 x double> %246, i32 1
  %255 = fsub nsz double %254, %253
  %256 = insertelement <2 x double> undef, double %219, i32 0
  %257 = insertelement <2 x double> %256, double %255, i32 1
  %258 = fsub nsz <2 x double> %257, %251
  %259 = extractelement <2 x double> %237, i32 0
  %260 = extractelement <2 x double> %258, i32 0
  %261 = fsub nsz double %260, %259
  %262 = extractelement <2 x double> %220, i32 1
  %263 = extractelement <2 x double> %221, i32 1
  %264 = fsub nsz double %262, %263
  %265 = insertelement <2 x double> %210, double %211, i32 1
  %266 = insertelement <2 x double> %215, double %264, i32 0
  %267 = fmul nsz <2 x double> %265, %266
  %268 = extractelement <2 x double> %225, i32 0
  %269 = fmul nsz double %211, %268
  %270 = extractelement <2 x double> %226, i32 0
  %271 = fsub nsz double %270, %269
  %272 = insertelement <2 x double> %216, double %271, i32 0
  %273 = fadd nsz <2 x double> %272, %267
  %274 = fsub nsz <2 x double> %272, %267
  %275 = shufflevector <2 x double> %273, <2 x double> %274, <2 x i32> <i32 0, i32 3>
  %276 = extractelement <2 x double> %240, i32 1
  %277 = extractelement <2 x double> %241, i32 1
  %278 = fsub nsz double %276, %277
  %279 = fmul nsz double %235, %278
  %280 = extractelement <2 x double> %245, i32 0
  %281 = fmul nsz double %211, %280
  %282 = shufflevector <2 x double> %246, <2 x double> %212, <2 x i32> <i32 0, i32 2>
  %283 = insertelement <2 x double> undef, double %281, i32 0
  %284 = shufflevector <2 x double> %283, <2 x double> %213, <2 x i32> <i32 0, i32 2>
  %285 = fsub nsz <2 x double> %282, %284
  %286 = insertelement <2 x double> %210, double %279, i32 0
  %287 = fadd nsz <2 x double> %286, %285
  %288 = fmul nsz <2 x double> %286, %285
  %289 = shufflevector <2 x double> %287, <2 x double> %288, <2 x i32> <i32 0, i32 3>
  %290 = extractelement <2 x double> %274, i32 1
  %291 = extractelement <2 x double> %288, i32 1
  %292 = fadd nsz double %291, %290
  %293 = fadd nsz <2 x double> %226, %225
  %294 = extractelement <2 x double> %267, i32 0
  %295 = fsub nsz double %271, %294
  %296 = extractelement <2 x double> %234, i32 1
  %297 = fadd nsz double %228, %296
  %298 = load <2 x double>, <2 x double>* %105, align 16
  %299 = load <2 x double>, <2 x double>* %106, align 16
  %300 = fsub nsz <2 x double> %298, %299
  %301 = shufflevector <2 x double> %300, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %302 = fadd nsz <2 x double> %298, %299
  %303 = load <2 x double>, <2 x double>* %107, align 16
  %304 = fadd nsz <2 x double> %303, %302
  %305 = fmul nsz <2 x double> %210, %301
  %306 = shufflevector <2 x double> %247, <2 x double> undef, <2 x i32> zeroinitializer
  %307 = fmul nsz <2 x double> %306, %302
  %308 = fsub nsz <2 x double> %303, %307
  %309 = fadd nsz <2 x double> %308, %305
  %310 = fsub nsz <2 x double> %308, %305
  %311 = shufflevector <2 x double> %309, <2 x double> %310, <2 x i32> <i32 0, i32 3>
  %312 = extractelement <2 x double> %308, i32 0
  %313 = extractelement <2 x double> %305, i32 0
  %314 = fsub nsz double %312, %313
  %315 = extractelement <2 x double> %308, i32 1
  %316 = extractelement <2 x double> %305, i32 1
  %317 = fadd nsz double %316, %315
  %318 = load <2 x double>, <2 x double>* %108, align 16
  %319 = load <2 x double>, <2 x double>* %109, align 16
  %320 = fsub nsz <2 x double> %318, %319
  %321 = shufflevector <2 x double> %320, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %322 = fadd nsz <2 x double> %318, %319
  %323 = load <2 x double>, <2 x double>* %110, align 16
  %324 = fadd nsz <2 x double> %323, %322
  %325 = fmul nsz <2 x double> %210, %321
  %326 = fmul nsz <2 x double> %306, %322
  %327 = fsub nsz <2 x double> %323, %326
  %328 = fadd nsz <2 x double> %327, %325
  %329 = fsub nsz <2 x double> %327, %325
  %330 = shufflevector <2 x double> %328, <2 x double> %329, <2 x i32> <i32 0, i32 3>
  %331 = extractelement <2 x double> %327, i32 0
  %332 = extractelement <2 x double> %325, i32 0
  %333 = fsub nsz double %331, %332
  %334 = extractelement <2 x double> %327, i32 1
  %335 = extractelement <2 x double> %325, i32 1
  %336 = fadd nsz double %335, %334
  %337 = fadd nsz <2 x double> %246, %245
  %338 = extractelement <2 x double> %285, i32 0
  %339 = fsub nsz double %338, %279
  %340 = extractelement <2 x double> %251, i32 1
  %341 = fadd nsz double %340, %255
  %342 = fsub nsz <2 x double> %293, %337
  %343 = shufflevector <2 x double> %342, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %344 = fadd nsz <2 x double> %293, %337
  %345 = fsub nsz <2 x double> %304, %324
  %346 = shufflevector <2 x double> %345, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %347 = fadd nsz <2 x double> %304, %324
  %348 = fadd nsz <2 x double> %217, %344
  %349 = fadd nsz <2 x double> %347, %348
  %350 = bitcast %struct.AVComplexDouble* %209 to <2 x double>*
  store <2 x double> %349, <2 x double>* %350, align 8
  %351 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 0), align 32
  %352 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 0), align 16
  %353 = insertelement <2 x double> undef, double %351, i32 0
  %354 = shufflevector <2 x double> %353, <2 x double> undef, <2 x i32> zeroinitializer
  %355 = fmul nsz <2 x double> %347, %354
  %356 = insertelement <2 x double> undef, double %352, i32 0
  %357 = shufflevector <2 x double> %356, <2 x double> undef, <2 x i32> zeroinitializer
  %358 = fmul nsz <2 x double> %344, %357
  %359 = fsub nsz <2 x double> %355, %358
  %360 = fmul nsz <2 x double> %344, %354
  %361 = fmul nsz <2 x double> %347, %357
  %362 = fsub nsz <2 x double> %360, %361
  %363 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 1), align 8
  %364 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 1), align 8
  %365 = insertelement <2 x double> undef, double %363, i32 0
  %366 = shufflevector <2 x double> %365, <2 x double> undef, <2 x i32> zeroinitializer
  %367 = fmul nsz <2 x double> %346, %366
  %368 = insertelement <2 x double> undef, double %364, i32 0
  %369 = shufflevector <2 x double> %368, <2 x double> undef, <2 x i32> zeroinitializer
  %370 = fmul nsz <2 x double> %343, %369
  %371 = fsub nsz <2 x double> %367, %370
  %372 = fmul nsz <2 x double> %343, %366
  %373 = fmul nsz <2 x double> %346, %369
  %374 = fadd nsz <2 x double> %372, %373
  %375 = fadd nsz <2 x double> %362, %374
  %376 = fsub nsz <2 x double> %362, %374
  %377 = shufflevector <2 x double> %375, <2 x double> %376, <2 x i32> <i32 0, i32 3>
  %378 = fsub nsz <2 x double> %362, %374
  %379 = fadd nsz <2 x double> %362, %374
  %380 = shufflevector <2 x double> %378, <2 x double> %379, <2 x i32> <i32 0, i32 3>
  %381 = fadd nsz <2 x double> %359, %371
  %382 = fsub nsz <2 x double> %359, %371
  %383 = shufflevector <2 x double> %381, <2 x double> %382, <2 x i32> <i32 0, i32 3>
  %384 = fsub nsz <2 x double> %359, %371
  %385 = fadd nsz <2 x double> %359, %371
  %386 = shufflevector <2 x double> %384, <2 x double> %385, <2 x i32> <i32 0, i32 3>
  %387 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %53, i32 0
  %388 = fadd nsz <2 x double> %217, %377
  %389 = bitcast double* %387 to <2 x double>*
  store <2 x double> %388, <2 x double>* %389, align 8
  %390 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %54, i32 0
  %391 = fadd nsz <2 x double> %217, %386
  %392 = bitcast double* %390 to <2 x double>*
  store <2 x double> %391, <2 x double>* %392, align 8
  %393 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %55, i32 0
  %394 = fadd nsz <2 x double> %217, %383
  %395 = bitcast double* %393 to <2 x double>*
  store <2 x double> %394, <2 x double>* %395, align 8
  %396 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %56, i32 0
  %397 = fadd nsz <2 x double> %217, %380
  %398 = bitcast double* %396 to <2 x double>*
  store <2 x double> %397, <2 x double>* %398, align 8
  %399 = fadd nsz <2 x double> %275, %289
  %400 = fsub nsz <2 x double> %275, %289
  %401 = shufflevector <2 x double> %399, <2 x double> %400, <2 x i32> <i32 0, i32 3>
  %402 = shufflevector <2 x double> %238, <2 x double> %273, <2 x i32> <i32 1, i32 2>
  %403 = shufflevector <2 x double> %258, <2 x double> %287, <2 x i32> <i32 1, i32 2>
  %404 = fsub nsz <2 x double> %402, %403
  %405 = fadd nsz <2 x double> %239, %258
  %406 = fsub nsz <2 x double> %311, %330
  %407 = shufflevector <2 x double> %406, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %408 = fadd nsz <2 x double> %311, %330
  %409 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %57, i32 0
  %410 = fadd nsz <2 x double> %405, %401
  %411 = fadd nsz <2 x double> %408, %410
  %412 = bitcast double* %409 to <2 x double>*
  store <2 x double> %411, <2 x double>* %412, align 8
  %413 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 0), align 32
  %414 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 0), align 16
  %415 = insertelement <2 x double> undef, double %413, i32 0
  %416 = shufflevector <2 x double> %415, <2 x double> undef, <2 x i32> zeroinitializer
  %417 = fmul nsz <2 x double> %408, %416
  %418 = shufflevector <2 x double> %399, <2 x double> %405, <2 x i32> <i32 0, i32 3>
  %419 = insertelement <2 x double> undef, double %414, i32 0
  %420 = shufflevector <2 x double> %419, <2 x double> undef, <2 x i32> zeroinitializer
  %421 = fmul nsz <2 x double> %418, %420
  %422 = fsub nsz <2 x double> %417, %421
  %423 = fmul nsz <2 x double> %418, %416
  %424 = fmul nsz <2 x double> %408, %420
  %425 = fsub nsz <2 x double> %423, %424
  %426 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 1), align 8
  %427 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 1), align 8
  %428 = insertelement <2 x double> undef, double %426, i32 0
  %429 = shufflevector <2 x double> %428, <2 x double> undef, <2 x i32> zeroinitializer
  %430 = fmul nsz <2 x double> %407, %429
  %431 = insertelement <2 x double> undef, double %427, i32 0
  %432 = shufflevector <2 x double> %431, <2 x double> undef, <2 x i32> zeroinitializer
  %433 = fmul nsz <2 x double> %404, %432
  %434 = fsub nsz <2 x double> %430, %433
  %435 = fmul nsz <2 x double> %404, %429
  %436 = fmul nsz <2 x double> %407, %432
  %437 = fadd nsz <2 x double> %435, %436
  %438 = fadd nsz <2 x double> %425, %437
  %439 = fsub nsz <2 x double> %425, %437
  %440 = shufflevector <2 x double> %438, <2 x double> %439, <2 x i32> <i32 0, i32 3>
  %441 = fsub nsz <2 x double> %425, %437
  %442 = fadd nsz <2 x double> %425, %437
  %443 = shufflevector <2 x double> %441, <2 x double> %442, <2 x i32> <i32 0, i32 3>
  %444 = fadd nsz <2 x double> %422, %434
  %445 = fsub nsz <2 x double> %422, %434
  %446 = shufflevector <2 x double> %444, <2 x double> %445, <2 x i32> <i32 0, i32 3>
  %447 = fsub nsz <2 x double> %422, %434
  %448 = fadd nsz <2 x double> %422, %434
  %449 = shufflevector <2 x double> %447, <2 x double> %448, <2 x i32> <i32 0, i32 3>
  %450 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %38, i32 0
  %451 = shufflevector <2 x double> %405, <2 x double> %400, <2 x i32> <i32 0, i32 3>
  %452 = fadd nsz <2 x double> %451, %440
  %453 = bitcast double* %450 to <2 x double>*
  store <2 x double> %452, <2 x double>* %453, align 8
  %454 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %58, i32 0
  %455 = fadd nsz <2 x double> %451, %449
  %456 = bitcast double* %454 to <2 x double>*
  store <2 x double> %455, <2 x double>* %456, align 8
  %457 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %59, i32 0
  %458 = fadd nsz <2 x double> %451, %446
  %459 = bitcast double* %457 to <2 x double>*
  store <2 x double> %458, <2 x double>* %459, align 8
  %460 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %60, i32 0
  %461 = fadd nsz <2 x double> %451, %443
  %462 = bitcast double* %460 to <2 x double>*
  store <2 x double> %461, <2 x double>* %462, align 8
  %463 = fsub nsz double %295, %339
  %464 = fadd nsz double %295, %339
  %465 = fsub nsz double %297, %341
  %466 = fadd nsz double %297, %341
  %467 = fsub nsz double %314, %333
  %468 = fadd nsz double %314, %333
  %469 = fsub nsz double %317, %336
  %470 = fadd nsz double %317, %336
  %471 = fadd nsz double %261, %464
  %472 = fadd nsz double %468, %471
  %473 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %61, i32 0
  store double %472, double* %473, align 8
  %474 = fadd nsz double %292, %466
  %475 = fadd nsz double %470, %474
  %476 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %61, i32 1
  store double %475, double* %476, align 8
  %477 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 0), align 32
  %478 = fmul nsz double %468, %477
  %479 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 0), align 16
  %480 = fmul nsz double %464, %479
  %481 = fsub nsz double %478, %480
  %482 = fmul nsz double %464, %477
  %483 = fmul nsz double %468, %479
  %484 = fsub nsz double %482, %483
  %485 = fmul nsz double %470, %477
  %486 = fmul nsz double %466, %479
  %487 = fsub nsz double %485, %486
  %488 = fmul nsz double %466, %477
  %489 = fmul nsz double %470, %479
  %490 = fsub nsz double %488, %489
  %491 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 1), align 8
  %492 = fmul nsz double %469, %491
  %493 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 1), align 8
  %494 = fmul nsz double %465, %493
  %495 = fsub nsz double %492, %494
  %496 = fmul nsz double %465, %491
  %497 = fmul nsz double %469, %493
  %498 = fadd nsz double %496, %497
  %499 = fmul nsz double %467, %491
  %500 = fmul nsz double %463, %493
  %501 = fsub nsz double %499, %500
  %502 = fmul nsz double %463, %491
  %503 = fmul nsz double %467, %493
  %504 = fadd nsz double %502, %503
  %505 = fsub nsz double %484, %498
  %506 = fadd nsz double %484, %498
  %507 = fsub nsz double %490, %504
  %508 = fadd nsz double %490, %504
  %509 = fsub nsz double %481, %495
  %510 = fadd nsz double %481, %495
  %511 = fsub nsz double %487, %501
  %512 = fadd nsz double %487, %501
  %513 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %62, i32 0
  %514 = insertelement <2 x double> undef, double %261, i32 0
  %515 = insertelement <2 x double> %514, double %507, i32 1
  %516 = insertelement <2 x double> undef, double %506, i32 0
  %517 = insertelement <2 x double> %516, double %292, i32 1
  %518 = fadd nsz <2 x double> %515, %517
  %519 = bitcast double* %513 to <2 x double>*
  store <2 x double> %518, <2 x double>* %519, align 8
  %520 = fadd nsz double %261, %509
  %521 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %63, i32 0
  store double %520, double* %521, align 8
  %522 = fadd nsz double %292, %512
  %523 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %63, i32 1
  store double %522, double* %523, align 8
  %524 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %64, i32 0
  %525 = insertelement <2 x double> %514, double %511, i32 1
  %526 = insertelement <2 x double> undef, double %510, i32 0
  %527 = insertelement <2 x double> %526, double %292, i32 1
  %528 = fadd nsz <2 x double> %525, %527
  %529 = bitcast double* %524 to <2 x double>*
  store <2 x double> %528, <2 x double>* %529, align 8
  %530 = fadd nsz double %261, %505
  %531 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %65, i32 0
  store double %530, double* %531, align 8
  %532 = fadd nsz double %292, %508
  %533 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %209, i64 %65, i32 1
  store double %532, double* %533, align 8
  %534 = add nuw nsw i64 %112, 1
  %535 = icmp eq i64 %534, %66
  br i1 %535, label %536, label %111

536:                                              ; preds = %111, %23
  %537 = phi i64 [ %34, %23 ], [ %65, %111 ]
  %538 = phi i64 [ %33, %23 ], [ %59, %111 ]
  %539 = phi i64 [ %32, %23 ], [ %54, %111 ]
  %540 = phi i64 [ %31, %23 ], [ %62, %111 ]
  %541 = phi i64 [ %30, %23 ], [ %57, %111 ]
  %542 = phi i64 [ %29, %23 ], [ %56, %111 ]
  %543 = phi i64 [ %28, %23 ], [ %58, %111 ]
  %544 = phi i64 [ %27, %23 ], [ %53, %111 ]
  %545 = phi i64 [ %26, %23 ], [ %61, %111 ]
  %546 = phi i64 [ %25, %23 ], [ %55, %111 ]
  %547 = phi i64 [ %24, %23 ], [ %38, %111 ]
  %548 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %549 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  tail call void %21(%struct.AVComplexDouble* %549) #8
  %550 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %551 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %550, i64 %547
  tail call void %21(%struct.AVComplexDouble* %551) #8
  %552 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %553 = shl nsw i64 %547, 1
  %554 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %552, i64 %553
  tail call void %21(%struct.AVComplexDouble* %554) #8
  %555 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %556 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %555, i64 %546
  tail call void %21(%struct.AVComplexDouble* %556) #8
  %557 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %558 = shl nsw i64 %547, 2
  %559 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %557, i64 %558
  tail call void %21(%struct.AVComplexDouble* %559) #8
  %560 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %561 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %560, i64 %545
  tail call void %21(%struct.AVComplexDouble* %561) #8
  %562 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %563 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %562, i64 %544
  tail call void %21(%struct.AVComplexDouble* %563) #8
  %564 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %565 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %564, i64 %543
  tail call void %21(%struct.AVComplexDouble* %565) #8
  %566 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %567 = shl nsw i64 %547, 3
  %568 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %566, i64 %567
  tail call void %21(%struct.AVComplexDouble* %568) #8
  %569 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %570 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %569, i64 %542
  tail call void %21(%struct.AVComplexDouble* %570) #8
  %571 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %572 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %571, i64 %541
  tail call void %21(%struct.AVComplexDouble* %572) #8
  %573 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %574 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %573, i64 %540
  tail call void %21(%struct.AVComplexDouble* %574) #8
  %575 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %576 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %575, i64 %539
  tail call void %21(%struct.AVComplexDouble* %576) #8
  %577 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %578 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %577, i64 %538
  tail call void %21(%struct.AVComplexDouble* %578) #8
  %579 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %580 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %579, i64 %537
  tail call void %21(%struct.AVComplexDouble* %580) #8
  br i1 %22, label %582, label %581

581:                                              ; preds = %582, %536
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %15) #8
  ret void

582:                                              ; preds = %536, %582
  %583 = phi i64 [ %592, %582 ], [ 0, %536 ]
  %584 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %14, i64 %583
  %585 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %548, align 8
  %586 = getelementptr inbounds i32, i32* %12, i64 %583
  %587 = load i32, i32* %586, align 4
  %588 = sext i32 %587 to i64
  %589 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %585, i64 %588
  %590 = bitcast %struct.AVComplexDouble* %584 to i8*
  %591 = bitcast %struct.AVComplexDouble* %589 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %590, i8* align 8 %591, i64 16, i1 false)
  %592 = add nuw nsw i64 %583, 1
  %593 = icmp slt i64 %592, %11
  br i1 %593, label %582, label %581
}

; Function Attrs: nounwind ssp uwtable
define internal void @compound_imdct_3xM(%struct.AVTXContext* nocapture readonly, i8* nocapture, i8* nocapture readonly, i64) #0 {
  %5 = bitcast i8* %1 to %struct.AVComplexDouble*
  %6 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 6
  %7 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %6, align 8
  %8 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = mul nsw i32 %9, 3
  %11 = ashr i32 %10, 1
  %12 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 8
  %13 = load i32*, i32** %12, align 8
  %14 = sext i32 %10 to i64
  %15 = getelementptr inbounds i32, i32* %13, i64 %14
  %16 = bitcast i8* %2 to double*
  %17 = or i32 %9, 1
  %18 = tail call i32 @llvm.ctlz.i32(i32 %17, i1 true), !range !3
  %19 = xor i32 %18, 31
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [18 x void (%struct.AVComplexDouble*)*], [18 x void (%struct.AVComplexDouble*)*]* @fft_dispatch, i64 0, i64 %20
  %22 = load void (%struct.AVComplexDouble*)*, void (%struct.AVComplexDouble*)** %21, align 8
  %23 = lshr i64 %3, 3
  %24 = mul i32 %9, 6
  %25 = add nsw i32 %24, -1
  %26 = sext i32 %25 to i64
  %27 = mul nsw i64 %23, %26
  %28 = getelementptr inbounds double, double* %16, i64 %27
  %29 = icmp sgt i32 %9, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %4
  %31 = sext i32 %9 to i64
  br label %174

32:                                               ; preds = %4
  %33 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %34 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  %35 = sext i32 %9 to i64
  %36 = shl nsw i64 %35, 1
  %37 = zext i32 %9 to i64
  br label %38

38:                                               ; preds = %38, %32
  %39 = phi i64 [ 0, %32 ], [ %172, %38 ]
  %40 = mul i64 %39, 3
  %41 = and i64 %40, 4294967295
  %42 = getelementptr inbounds i32, i32* %13, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = sub nsw i32 0, %43
  %45 = sext i32 %44 to i64
  %46 = mul nsw i64 %23, %45
  %47 = getelementptr inbounds double, double* %28, i64 %46
  %48 = load double, double* %47, align 8
  %49 = sext i32 %43 to i64
  %50 = mul nsw i64 %23, %49
  %51 = getelementptr inbounds double, double* %16, i64 %50
  %52 = load double, double* %51, align 8
  %53 = ashr i32 %43, 1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %54, i32 0
  %56 = load double, double* %55, align 8
  %57 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %54, i32 1
  %58 = load double, double* %57, align 8
  %59 = insertelement <2 x double> undef, double %52, i32 0
  %60 = insertelement <2 x double> %59, double %48, i32 1
  %61 = insertelement <2 x double> undef, double %58, i32 0
  %62 = shufflevector <2 x double> %61, <2 x double> undef, <2 x i32> zeroinitializer
  %63 = fmul nsz <2 x double> %60, %62
  %64 = insertelement <2 x double> undef, double %48, i32 0
  %65 = insertelement <2 x double> %64, double %52, i32 1
  %66 = insertelement <2 x double> undef, double %56, i32 0
  %67 = shufflevector <2 x double> %66, <2 x double> undef, <2 x i32> zeroinitializer
  %68 = fmul nsz <2 x double> %65, %67
  %69 = fsub nsz <2 x double> %68, %63
  %70 = fadd nsz <2 x double> %68, %63
  %71 = shufflevector <2 x double> %69, <2 x double> %70, <2 x i32> <i32 0, i32 3>
  %72 = add nuw nsw i64 %41, 1
  %73 = getelementptr inbounds i32, i32* %13, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = sub nsw i32 0, %74
  %76 = sext i32 %75 to i64
  %77 = mul nsw i64 %23, %76
  %78 = getelementptr inbounds double, double* %28, i64 %77
  %79 = load double, double* %78, align 8
  %80 = sext i32 %74 to i64
  %81 = mul nsw i64 %23, %80
  %82 = getelementptr inbounds double, double* %16, i64 %81
  %83 = load double, double* %82, align 8
  %84 = ashr i32 %74, 1
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %85, i32 0
  %87 = load double, double* %86, align 8
  %88 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %85, i32 1
  %89 = load double, double* %88, align 8
  %90 = insertelement <2 x double> undef, double %83, i32 0
  %91 = insertelement <2 x double> %90, double %79, i32 1
  %92 = insertelement <2 x double> undef, double %89, i32 0
  %93 = shufflevector <2 x double> %92, <2 x double> undef, <2 x i32> zeroinitializer
  %94 = fmul nsz <2 x double> %91, %93
  %95 = insertelement <2 x double> undef, double %79, i32 0
  %96 = insertelement <2 x double> %95, double %83, i32 1
  %97 = insertelement <2 x double> undef, double %87, i32 0
  %98 = shufflevector <2 x double> %97, <2 x double> undef, <2 x i32> zeroinitializer
  %99 = fmul nsz <2 x double> %96, %98
  %100 = fsub nsz <2 x double> %99, %94
  %101 = fadd nsz <2 x double> %99, %94
  %102 = shufflevector <2 x double> %100, <2 x double> %101, <2 x i32> <i32 0, i32 3>
  %103 = add nuw nsw i64 %41, 2
  %104 = getelementptr inbounds i32, i32* %13, i64 %103
  %105 = load i32, i32* %104, align 4
  %106 = sub nsw i32 0, %105
  %107 = sext i32 %106 to i64
  %108 = mul nsw i64 %23, %107
  %109 = getelementptr inbounds double, double* %28, i64 %108
  %110 = load double, double* %109, align 8
  %111 = sext i32 %105 to i64
  %112 = mul nsw i64 %23, %111
  %113 = getelementptr inbounds double, double* %16, i64 %112
  %114 = load double, double* %113, align 8
  %115 = ashr i32 %105, 1
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %116, i32 0
  %118 = load double, double* %117, align 8
  %119 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %116, i32 1
  %120 = load double, double* %119, align 8
  %121 = insertelement <2 x double> undef, double %114, i32 0
  %122 = insertelement <2 x double> %121, double %110, i32 1
  %123 = insertelement <2 x double> undef, double %120, i32 0
  %124 = shufflevector <2 x double> %123, <2 x double> undef, <2 x i32> zeroinitializer
  %125 = fmul nsz <2 x double> %122, %124
  %126 = insertelement <2 x double> undef, double %110, i32 0
  %127 = insertelement <2 x double> %126, double %114, i32 1
  %128 = insertelement <2 x double> undef, double %118, i32 0
  %129 = shufflevector <2 x double> %128, <2 x double> undef, <2 x i32> zeroinitializer
  %130 = fmul nsz <2 x double> %127, %129
  %131 = fsub nsz <2 x double> %130, %125
  %132 = fadd nsz <2 x double> %130, %125
  %133 = shufflevector <2 x double> %131, <2 x double> %132, <2 x i32> <i32 0, i32 3>
  %134 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %33, align 8
  %135 = load i32*, i32** %34, align 8
  %136 = getelementptr inbounds i32, i32* %135, i64 %39
  %137 = load i32, i32* %136, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %134, i64 %138
  %140 = shufflevector <2 x double> %101, <2 x double> %100, <2 x i32> <i32 1, i32 2>
  %141 = shufflevector <2 x double> %132, <2 x double> %131, <2 x i32> <i32 1, i32 2>
  %142 = fsub nsz <2 x double> %140, %141
  %143 = fadd nsz <2 x double> %102, %133
  %144 = extractelement <2 x double> %69, i32 0
  %145 = extractelement <2 x double> %143, i32 0
  %146 = fadd nsz double %144, %145
  %147 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %139, i64 0, i32 0
  store double %146, double* %147, align 8
  %148 = extractelement <2 x double> %70, i32 1
  %149 = extractelement <2 x double> %143, i32 1
  %150 = fadd nsz double %149, %148
  %151 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %134, i64 %138, i32 1
  store double %150, double* %151, align 8
  %152 = load <2 x double>, <2 x double>* bitcast ([4 x %struct.AVComplexDouble]* @ff_cos_53_double to <2 x double>*), align 32
  %153 = fmul nsz <2 x double> %142, %152
  %154 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 1, i32 0), align 16
  %155 = insertelement <2 x double> undef, double %154, i32 0
  %156 = shufflevector <2 x double> %155, <2 x double> undef, <2 x i32> zeroinitializer
  %157 = fmul nsz <2 x double> %143, %156
  %158 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %139, i64 %35, i32 0
  %159 = fsub nsz <2 x double> %71, %157
  %160 = fadd nsz <2 x double> %159, %153
  %161 = fsub nsz <2 x double> %159, %153
  %162 = shufflevector <2 x double> %160, <2 x double> %161, <2 x i32> <i32 0, i32 3>
  %163 = bitcast double* %158 to <2 x double>*
  store <2 x double> %162, <2 x double>* %163, align 8
  %164 = extractelement <2 x double> %159, i32 0
  %165 = extractelement <2 x double> %153, i32 0
  %166 = fsub nsz double %164, %165
  %167 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %139, i64 %36, i32 0
  store double %166, double* %167, align 8
  %168 = extractelement <2 x double> %159, i32 1
  %169 = extractelement <2 x double> %153, i32 1
  %170 = fadd nsz double %169, %168
  %171 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %139, i64 %36, i32 1
  store double %170, double* %171, align 8
  %172 = add nuw nsw i64 %39, 1
  %173 = icmp eq i64 %172, %37
  br i1 %173, label %174, label %38

174:                                              ; preds = %38, %30
  %175 = phi i64 [ %31, %30 ], [ %35, %38 ]
  %176 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %177 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %176, align 8
  tail call void %22(%struct.AVComplexDouble* %177) #8
  %178 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %176, align 8
  %179 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %178, i64 %175
  tail call void %22(%struct.AVComplexDouble* %179) #8
  %180 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %176, align 8
  %181 = shl nsw i64 %175, 1
  %182 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %180, i64 %181
  tail call void %22(%struct.AVComplexDouble* %182) #8
  %183 = icmp sgt i32 %10, 1
  br i1 %183, label %184, label %186

184:                                              ; preds = %174
  %185 = sext i32 %11 to i64
  br label %187

186:                                              ; preds = %187, %174
  ret void

187:                                              ; preds = %184, %187
  %188 = phi i64 [ 0, %184 ], [ %235, %187 ]
  %189 = add nsw i64 %188, %185
  %190 = xor i64 %188, -1
  %191 = add nsw i64 %185, %190
  %192 = getelementptr inbounds i32, i32* %15, i64 %189
  %193 = load i32, i32* %192, align 4
  %194 = getelementptr inbounds i32, i32* %15, i64 %191
  %195 = load i32, i32* %194, align 4
  %196 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %176, align 8
  %197 = sext i32 %195 to i64
  %198 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %196, i64 %197, i32 1
  %199 = load double, double* %198, align 8
  %200 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %196, i64 %197, i32 0
  %201 = load double, double* %200, align 8
  %202 = sext i32 %193 to i64
  %203 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %196, i64 %202, i32 1
  %204 = load double, double* %203, align 8
  %205 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %196, i64 %202, i32 0
  %206 = load double, double* %205, align 8
  %207 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %191, i32 1
  %208 = load double, double* %207, align 8
  %209 = fmul nsz double %199, %208
  %210 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %191, i32 0
  %211 = load double, double* %210, align 8
  %212 = fmul nsz double %201, %211
  %213 = fsub nsz double %209, %212
  %214 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %191, i32 0
  store double %213, double* %214, align 8
  %215 = load double, double* %210, align 8
  %216 = fmul nsz double %199, %215
  %217 = load double, double* %207, align 8
  %218 = fmul nsz double %201, %217
  %219 = fadd nsz double %216, %218
  %220 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %189, i32 1
  store double %219, double* %220, align 8
  %221 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %189, i32 1
  %222 = load double, double* %221, align 8
  %223 = fmul nsz double %204, %222
  %224 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %189, i32 0
  %225 = load double, double* %224, align 8
  %226 = fmul nsz double %206, %225
  %227 = fsub nsz double %223, %226
  %228 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %189, i32 0
  store double %227, double* %228, align 8
  %229 = load double, double* %224, align 8
  %230 = fmul nsz double %204, %229
  %231 = load double, double* %221, align 8
  %232 = fmul nsz double %206, %231
  %233 = fadd nsz double %230, %232
  %234 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %191, i32 1
  store double %233, double* %234, align 8
  %235 = add nuw nsw i64 %188, 1
  %236 = icmp slt i64 %235, %185
  br i1 %236, label %187, label %186
}

; Function Attrs: nounwind ssp uwtable
define internal void @compound_mdct_3xM(%struct.AVTXContext* nocapture readonly, i8* nocapture, i8* nocapture readonly, i64) #0 {
  %5 = bitcast i8* %2 to double*
  %6 = bitcast i8* %1 to double*
  %7 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 6
  %8 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %7, align 8
  %9 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = mul nsw i32 %10, 3
  %12 = mul i32 %10, 9
  %13 = ashr i32 %11, 1
  %14 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 8
  %15 = load i32*, i32** %14, align 8
  %16 = sext i32 %11 to i64
  %17 = getelementptr inbounds i32, i32* %15, i64 %16
  %18 = or i32 %10, 1
  %19 = tail call i32 @llvm.ctlz.i32(i32 %18, i1 true), !range !3
  %20 = xor i32 %19, 31
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [18 x void (%struct.AVComplexDouble*)*], [18 x void (%struct.AVComplexDouble*)*]* @fft_dispatch, i64 0, i64 %21
  %23 = load void (%struct.AVComplexDouble*)*, void (%struct.AVComplexDouble*)** %22, align 8
  %24 = lshr i64 %3, 3
  %25 = icmp sgt i32 %10, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %4
  %27 = sext i32 %10 to i64
  br label %47

28:                                               ; preds = %4
  %29 = mul i32 %10, 15
  %30 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %31 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  %32 = sext i32 %10 to i64
  %33 = shl nsw i64 %32, 1
  %34 = zext i32 %10 to i64
  br label %35

35:                                               ; preds = %277, %28
  %36 = phi i64 [ 0, %28 ], [ %334, %277 ]
  %37 = mul i64 %36, 3
  %38 = and i64 %37, 4294967295
  %39 = getelementptr inbounds i32, i32* %15, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = icmp slt i32 %40, %11
  %42 = add nsw i32 %40, %11
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds double, double* %5, i64 %43
  %45 = load double, double* %44, align 8
  %46 = xor i32 %40, -1
  br i1 %41, label %57, label %72

47:                                               ; preds = %277, %26
  %48 = phi i64 [ %27, %26 ], [ %32, %277 ]
  %49 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %50 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %49, align 8
  tail call void %23(%struct.AVComplexDouble* %50) #8
  %51 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %49, align 8
  %52 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %51, i64 %48
  tail call void %23(%struct.AVComplexDouble* %52) #8
  %53 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %49, align 8
  %54 = shl nsw i64 %48, 1
  %55 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %53, i64 %54
  tail call void %23(%struct.AVComplexDouble* %55) #8
  %56 = icmp sgt i32 %11, 1
  br i1 %56, label %119, label %121

57:                                               ; preds = %35
  %58 = add i32 %11, %46
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds double, double* %5, i64 %59
  %61 = load double, double* %60, align 8
  %62 = add nsw i32 %40, %12
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds double, double* %5, i64 %63
  %65 = load double, double* %64, align 8
  %66 = add i32 %12, %46
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds double, double* %5, i64 %67
  %69 = load double, double* %68, align 8
  %70 = fsub nsz double -0.000000e+00, %69
  %71 = fsub nsz double %70, %65
  br label %87

72:                                               ; preds = %35
  %73 = add i32 %29, %46
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds double, double* %5, i64 %74
  %76 = load double, double* %75, align 8
  %77 = fsub nsz double -0.000000e+00, %76
  %78 = sub i32 %40, %11
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds double, double* %5, i64 %79
  %81 = load double, double* %80, align 8
  %82 = add i32 %12, %46
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds double, double* %5, i64 %83
  %85 = load double, double* %84, align 8
  %86 = fsub nsz double %81, %85
  br label %87

87:                                               ; preds = %57, %72
  %88 = phi double [ %61, %57 ], [ %77, %72 ]
  %89 = phi double [ %71, %57 ], [ %86, %72 ]
  %90 = fsub nsz double %88, %45
  %91 = ashr i32 %40, 1
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %92, i32 0
  %94 = load double, double* %93, align 8
  %95 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %92, i32 1
  %96 = load double, double* %95, align 8
  %97 = insertelement <2 x double> undef, double %90, i32 0
  %98 = insertelement <2 x double> %97, double %89, i32 1
  %99 = insertelement <2 x double> undef, double %96, i32 0
  %100 = shufflevector <2 x double> %99, <2 x double> undef, <2 x i32> zeroinitializer
  %101 = fmul nsz <2 x double> %98, %100
  %102 = insertelement <2 x double> undef, double %89, i32 0
  %103 = insertelement <2 x double> %102, double %90, i32 1
  %104 = insertelement <2 x double> undef, double %94, i32 0
  %105 = shufflevector <2 x double> %104, <2 x double> undef, <2 x i32> zeroinitializer
  %106 = fmul nsz <2 x double> %103, %105
  %107 = fadd nsz <2 x double> %106, %101
  %108 = fsub nsz <2 x double> %106, %101
  %109 = shufflevector <2 x double> %107, <2 x double> %108, <2 x i32> <i32 0, i32 3>
  %110 = add nuw nsw i64 %38, 1
  %111 = getelementptr inbounds i32, i32* %15, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = icmp slt i32 %112, %11
  %114 = add nsw i32 %112, %11
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds double, double* %5, i64 %115
  %117 = load double, double* %116, align 8
  %118 = xor i32 %112, -1
  br i1 %113, label %200, label %185

119:                                              ; preds = %47
  %120 = sext i32 %13 to i64
  br label %122

121:                                              ; preds = %122, %47
  ret void

122:                                              ; preds = %119, %122
  %123 = phi i64 [ 0, %119 ], [ %182, %122 ]
  %124 = phi i32 [ 0, %119 ], [ %183, %122 ]
  %125 = add nsw i64 %123, %120
  %126 = add nsw i32 %124, %13
  %127 = xor i64 %123, -1
  %128 = xor i32 %124, -1
  %129 = add nsw i64 %120, %127
  %130 = add nsw i32 %13, %128
  %131 = getelementptr inbounds i32, i32* %17, i64 %125
  %132 = load i32, i32* %131, align 4
  %133 = getelementptr inbounds i32, i32* %17, i64 %129
  %134 = load i32, i32* %133, align 4
  %135 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %49, align 8
  %136 = sext i32 %134 to i64
  %137 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %135, i64 %136, i32 0
  %138 = load double, double* %137, align 8
  %139 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %135, i64 %136, i32 1
  %140 = load double, double* %139, align 8
  %141 = sext i32 %132 to i64
  %142 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %135, i64 %141, i32 0
  %143 = load double, double* %142, align 8
  %144 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %135, i64 %141, i32 1
  %145 = load double, double* %144, align 8
  %146 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %125, i32 1
  %147 = load double, double* %146, align 8
  %148 = fmul nsz double %143, %147
  %149 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %125, i32 0
  %150 = load double, double* %149, align 8
  %151 = fmul nsz double %145, %150
  %152 = fsub nsz double %148, %151
  %153 = shl nsw i32 %130, 1
  %154 = sext i32 %153 to i64
  %155 = mul nsw i64 %24, %154
  %156 = add nsw i64 %155, %24
  %157 = getelementptr inbounds double, double* %6, i64 %156
  store double %152, double* %157, align 8
  %158 = load double, double* %149, align 8
  %159 = fmul nsz double %143, %158
  %160 = load double, double* %146, align 8
  %161 = fmul nsz double %145, %160
  %162 = fadd nsz double %159, %161
  %163 = shl nsw i32 %126, 1
  %164 = sext i32 %163 to i64
  %165 = mul nsw i64 %24, %164
  %166 = getelementptr inbounds double, double* %6, i64 %165
  store double %162, double* %166, align 8
  %167 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %129, i32 1
  %168 = load double, double* %167, align 8
  %169 = fmul nsz double %138, %168
  %170 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %129, i32 0
  %171 = load double, double* %170, align 8
  %172 = fmul nsz double %140, %171
  %173 = fsub nsz double %169, %172
  %174 = add nsw i64 %165, %24
  %175 = getelementptr inbounds double, double* %6, i64 %174
  store double %173, double* %175, align 8
  %176 = load double, double* %170, align 8
  %177 = fmul nsz double %138, %176
  %178 = load double, double* %167, align 8
  %179 = fmul nsz double %140, %178
  %180 = fadd nsz double %177, %179
  %181 = getelementptr inbounds double, double* %6, i64 %155
  store double %180, double* %181, align 8
  %182 = add nuw nsw i64 %123, 1
  %183 = add nuw nsw i32 %124, 1
  %184 = icmp slt i64 %182, %120
  br i1 %184, label %122, label %121

185:                                              ; preds = %87
  %186 = add i32 %29, %118
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds double, double* %5, i64 %187
  %189 = load double, double* %188, align 8
  %190 = fsub nsz double -0.000000e+00, %189
  %191 = sub i32 %112, %11
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds double, double* %5, i64 %192
  %194 = load double, double* %193, align 8
  %195 = add i32 %12, %118
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds double, double* %5, i64 %196
  %198 = load double, double* %197, align 8
  %199 = fsub nsz double %194, %198
  br label %215

200:                                              ; preds = %87
  %201 = add i32 %11, %118
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds double, double* %5, i64 %202
  %204 = load double, double* %203, align 8
  %205 = add nsw i32 %112, %12
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds double, double* %5, i64 %206
  %208 = load double, double* %207, align 8
  %209 = add i32 %12, %118
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds double, double* %5, i64 %210
  %212 = load double, double* %211, align 8
  %213 = fsub nsz double -0.000000e+00, %212
  %214 = fsub nsz double %213, %208
  br label %215

215:                                              ; preds = %200, %185
  %216 = phi double [ %204, %200 ], [ %190, %185 ]
  %217 = phi double [ %214, %200 ], [ %199, %185 ]
  %218 = fsub nsz double %216, %117
  %219 = ashr i32 %112, 1
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %220, i32 0
  %222 = load double, double* %221, align 8
  %223 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %220, i32 1
  %224 = load double, double* %223, align 8
  %225 = insertelement <2 x double> undef, double %218, i32 0
  %226 = insertelement <2 x double> %225, double %217, i32 1
  %227 = insertelement <2 x double> undef, double %224, i32 0
  %228 = shufflevector <2 x double> %227, <2 x double> undef, <2 x i32> zeroinitializer
  %229 = fmul nsz <2 x double> %226, %228
  %230 = insertelement <2 x double> undef, double %217, i32 0
  %231 = insertelement <2 x double> %230, double %218, i32 1
  %232 = insertelement <2 x double> undef, double %222, i32 0
  %233 = shufflevector <2 x double> %232, <2 x double> undef, <2 x i32> zeroinitializer
  %234 = fmul nsz <2 x double> %231, %233
  %235 = fadd nsz <2 x double> %234, %229
  %236 = fsub nsz <2 x double> %234, %229
  %237 = shufflevector <2 x double> %235, <2 x double> %236, <2 x i32> <i32 0, i32 3>
  %238 = add nuw nsw i64 %38, 2
  %239 = getelementptr inbounds i32, i32* %15, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = icmp slt i32 %240, %11
  %242 = add nsw i32 %240, %11
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds double, double* %5, i64 %243
  %245 = load double, double* %244, align 8
  %246 = xor i32 %240, -1
  br i1 %241, label %262, label %247

247:                                              ; preds = %215
  %248 = add i32 %29, %246
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds double, double* %5, i64 %249
  %251 = load double, double* %250, align 8
  %252 = fsub nsz double -0.000000e+00, %251
  %253 = sub i32 %240, %11
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds double, double* %5, i64 %254
  %256 = load double, double* %255, align 8
  %257 = add i32 %12, %246
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds double, double* %5, i64 %258
  %260 = load double, double* %259, align 8
  %261 = fsub nsz double %256, %260
  br label %277

262:                                              ; preds = %215
  %263 = add i32 %11, %246
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds double, double* %5, i64 %264
  %266 = load double, double* %265, align 8
  %267 = add nsw i32 %240, %12
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds double, double* %5, i64 %268
  %270 = load double, double* %269, align 8
  %271 = add i32 %12, %246
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds double, double* %5, i64 %272
  %274 = load double, double* %273, align 8
  %275 = fsub nsz double -0.000000e+00, %274
  %276 = fsub nsz double %275, %270
  br label %277

277:                                              ; preds = %262, %247
  %278 = phi double [ %266, %262 ], [ %252, %247 ]
  %279 = phi double [ %276, %262 ], [ %261, %247 ]
  %280 = fsub nsz double %278, %245
  %281 = ashr i32 %240, 1
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %282, i32 0
  %284 = load double, double* %283, align 8
  %285 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %282, i32 1
  %286 = load double, double* %285, align 8
  %287 = insertelement <2 x double> undef, double %280, i32 0
  %288 = insertelement <2 x double> %287, double %279, i32 1
  %289 = insertelement <2 x double> undef, double %286, i32 0
  %290 = shufflevector <2 x double> %289, <2 x double> undef, <2 x i32> zeroinitializer
  %291 = fmul nsz <2 x double> %288, %290
  %292 = insertelement <2 x double> undef, double %279, i32 0
  %293 = insertelement <2 x double> %292, double %280, i32 1
  %294 = insertelement <2 x double> undef, double %284, i32 0
  %295 = shufflevector <2 x double> %294, <2 x double> undef, <2 x i32> zeroinitializer
  %296 = fmul nsz <2 x double> %293, %295
  %297 = fadd nsz <2 x double> %296, %291
  %298 = fsub nsz <2 x double> %296, %291
  %299 = shufflevector <2 x double> %297, <2 x double> %298, <2 x i32> <i32 0, i32 3>
  %300 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %30, align 8
  %301 = load i32*, i32** %31, align 8
  %302 = getelementptr inbounds i32, i32* %301, i64 %36
  %303 = load i32, i32* %302, align 4
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %300, i64 %304
  %306 = shufflevector <2 x double> %236, <2 x double> %235, <2 x i32> <i32 1, i32 2>
  %307 = shufflevector <2 x double> %298, <2 x double> %297, <2 x i32> <i32 1, i32 2>
  %308 = fsub nsz <2 x double> %306, %307
  %309 = fadd nsz <2 x double> %237, %299
  %310 = shufflevector <2 x double> %107, <2 x double> %309, <2 x i32> <i32 0, i32 3>
  %311 = shufflevector <2 x double> %309, <2 x double> %108, <2 x i32> <i32 0, i32 3>
  %312 = fadd nsz <2 x double> %310, %311
  %313 = bitcast %struct.AVComplexDouble* %305 to <2 x double>*
  store <2 x double> %312, <2 x double>* %313, align 8
  %314 = load <2 x double>, <2 x double>* bitcast ([4 x %struct.AVComplexDouble]* @ff_cos_53_double to <2 x double>*), align 32
  %315 = fmul nsz <2 x double> %308, %314
  %316 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 1, i32 0), align 16
  %317 = insertelement <2 x double> undef, double %316, i32 0
  %318 = shufflevector <2 x double> %317, <2 x double> undef, <2 x i32> zeroinitializer
  %319 = fmul nsz <2 x double> %309, %318
  %320 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %305, i64 %32, i32 0
  %321 = fsub nsz <2 x double> %109, %319
  %322 = fadd nsz <2 x double> %321, %315
  %323 = fsub nsz <2 x double> %321, %315
  %324 = shufflevector <2 x double> %322, <2 x double> %323, <2 x i32> <i32 0, i32 3>
  %325 = bitcast double* %320 to <2 x double>*
  store <2 x double> %324, <2 x double>* %325, align 8
  %326 = extractelement <2 x double> %321, i32 0
  %327 = extractelement <2 x double> %315, i32 0
  %328 = fsub nsz double %326, %327
  %329 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %305, i64 %33, i32 0
  store double %328, double* %329, align 8
  %330 = extractelement <2 x double> %321, i32 1
  %331 = extractelement <2 x double> %315, i32 1
  %332 = fadd nsz double %331, %330
  %333 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %305, i64 %33, i32 1
  store double %332, double* %333, align 8
  %334 = add nuw nsw i64 %36, 1
  %335 = icmp eq i64 %334, %34
  br i1 %335, label %47, label %35
}

; Function Attrs: nounwind ssp uwtable
define internal void @compound_imdct_5xM(%struct.AVTXContext* nocapture readonly, i8* nocapture, i8* nocapture readonly, i64) #0 {
  %5 = bitcast i8* %1 to %struct.AVComplexDouble*
  %6 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 6
  %7 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %6, align 8
  %8 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = mul nsw i32 %9, 5
  %11 = ashr i32 %10, 1
  %12 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 8
  %13 = load i32*, i32** %12, align 8
  %14 = sext i32 %10 to i64
  %15 = getelementptr inbounds i32, i32* %13, i64 %14
  %16 = bitcast i8* %2 to double*
  %17 = or i32 %9, 1
  %18 = tail call i32 @llvm.ctlz.i32(i32 %17, i1 true), !range !3
  %19 = xor i32 %18, 31
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [18 x void (%struct.AVComplexDouble*)*], [18 x void (%struct.AVComplexDouble*)*]* @fft_dispatch, i64 0, i64 %20
  %22 = load void (%struct.AVComplexDouble*)*, void (%struct.AVComplexDouble*)** %21, align 8
  %23 = lshr i64 %3, 3
  %24 = mul i32 %9, 10
  %25 = add nsw i32 %24, -1
  %26 = sext i32 %25 to i64
  %27 = mul nsw i64 %23, %26
  %28 = getelementptr inbounds double, double* %16, i64 %27
  %29 = icmp sgt i32 %9, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %4
  %31 = sext i32 %9 to i64
  %32 = mul nsw i64 %31, 3
  br label %281

33:                                               ; preds = %4
  %34 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %35 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  %36 = sext i32 %9 to i64
  %37 = shl nsw i64 %36, 1
  %38 = mul nsw i64 %36, 3
  %39 = shl nsw i64 %36, 2
  %40 = zext i32 %9 to i64
  br label %41

41:                                               ; preds = %41, %33
  %42 = phi i64 [ 0, %33 ], [ %279, %41 ]
  %43 = mul i64 %42, 5
  %44 = and i64 %43, 4294967295
  %45 = getelementptr inbounds i32, i32* %13, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = sub nsw i32 0, %46
  %48 = sext i32 %47 to i64
  %49 = mul nsw i64 %23, %48
  %50 = getelementptr inbounds double, double* %28, i64 %49
  %51 = load double, double* %50, align 8
  %52 = sext i32 %46 to i64
  %53 = mul nsw i64 %23, %52
  %54 = getelementptr inbounds double, double* %16, i64 %53
  %55 = load double, double* %54, align 8
  %56 = ashr i32 %46, 1
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %57, i32 0
  %59 = load double, double* %58, align 8
  %60 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %57, i32 1
  %61 = load double, double* %60, align 8
  %62 = insertelement <2 x double> undef, double %55, i32 0
  %63 = insertelement <2 x double> %62, double %51, i32 1
  %64 = insertelement <2 x double> undef, double %61, i32 0
  %65 = shufflevector <2 x double> %64, <2 x double> undef, <2 x i32> zeroinitializer
  %66 = fmul nsz <2 x double> %63, %65
  %67 = insertelement <2 x double> undef, double %51, i32 0
  %68 = insertelement <2 x double> %67, double %55, i32 1
  %69 = insertelement <2 x double> undef, double %59, i32 0
  %70 = shufflevector <2 x double> %69, <2 x double> undef, <2 x i32> zeroinitializer
  %71 = fmul nsz <2 x double> %68, %70
  %72 = fsub nsz <2 x double> %71, %66
  %73 = fadd nsz <2 x double> %71, %66
  %74 = shufflevector <2 x double> %72, <2 x double> %73, <2 x i32> <i32 0, i32 3>
  %75 = add nuw nsw i64 %44, 1
  %76 = getelementptr inbounds i32, i32* %13, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = sub nsw i32 0, %77
  %79 = sext i32 %78 to i64
  %80 = mul nsw i64 %23, %79
  %81 = getelementptr inbounds double, double* %28, i64 %80
  %82 = load double, double* %81, align 8
  %83 = sext i32 %77 to i64
  %84 = mul nsw i64 %23, %83
  %85 = getelementptr inbounds double, double* %16, i64 %84
  %86 = load double, double* %85, align 8
  %87 = ashr i32 %77, 1
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %88, i32 0
  %90 = load double, double* %89, align 8
  %91 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %88, i32 1
  %92 = load double, double* %91, align 8
  %93 = insertelement <2 x double> undef, double %86, i32 0
  %94 = insertelement <2 x double> %93, double %82, i32 1
  %95 = insertelement <2 x double> undef, double %92, i32 0
  %96 = shufflevector <2 x double> %95, <2 x double> undef, <2 x i32> zeroinitializer
  %97 = fmul nsz <2 x double> %94, %96
  %98 = insertelement <2 x double> undef, double %82, i32 0
  %99 = insertelement <2 x double> %98, double %86, i32 1
  %100 = insertelement <2 x double> undef, double %90, i32 0
  %101 = shufflevector <2 x double> %100, <2 x double> undef, <2 x i32> zeroinitializer
  %102 = fmul nsz <2 x double> %99, %101
  %103 = fsub nsz <2 x double> %102, %97
  %104 = fadd nsz <2 x double> %102, %97
  %105 = shufflevector <2 x double> %103, <2 x double> %104, <2 x i32> <i32 0, i32 3>
  %106 = add nuw nsw i64 %44, 2
  %107 = getelementptr inbounds i32, i32* %13, i64 %106
  %108 = load i32, i32* %107, align 4
  %109 = sub nsw i32 0, %108
  %110 = sext i32 %109 to i64
  %111 = mul nsw i64 %23, %110
  %112 = getelementptr inbounds double, double* %28, i64 %111
  %113 = load double, double* %112, align 8
  %114 = sext i32 %108 to i64
  %115 = mul nsw i64 %23, %114
  %116 = getelementptr inbounds double, double* %16, i64 %115
  %117 = load double, double* %116, align 8
  %118 = ashr i32 %108, 1
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %119, i32 0
  %121 = load double, double* %120, align 8
  %122 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %119, i32 1
  %123 = load double, double* %122, align 8
  %124 = insertelement <2 x double> undef, double %117, i32 0
  %125 = insertelement <2 x double> %124, double %113, i32 1
  %126 = insertelement <2 x double> undef, double %123, i32 0
  %127 = shufflevector <2 x double> %126, <2 x double> undef, <2 x i32> zeroinitializer
  %128 = fmul nsz <2 x double> %125, %127
  %129 = insertelement <2 x double> undef, double %113, i32 0
  %130 = insertelement <2 x double> %129, double %117, i32 1
  %131 = insertelement <2 x double> undef, double %121, i32 0
  %132 = shufflevector <2 x double> %131, <2 x double> undef, <2 x i32> zeroinitializer
  %133 = fmul nsz <2 x double> %130, %132
  %134 = fsub nsz <2 x double> %133, %128
  %135 = fadd nsz <2 x double> %133, %128
  %136 = shufflevector <2 x double> %134, <2 x double> %135, <2 x i32> <i32 0, i32 3>
  %137 = add nuw nsw i64 %44, 3
  %138 = getelementptr inbounds i32, i32* %13, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = sub nsw i32 0, %139
  %141 = sext i32 %140 to i64
  %142 = mul nsw i64 %23, %141
  %143 = getelementptr inbounds double, double* %28, i64 %142
  %144 = load double, double* %143, align 8
  %145 = sext i32 %139 to i64
  %146 = mul nsw i64 %23, %145
  %147 = getelementptr inbounds double, double* %16, i64 %146
  %148 = load double, double* %147, align 8
  %149 = ashr i32 %139, 1
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %150, i32 0
  %152 = load double, double* %151, align 8
  %153 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %150, i32 1
  %154 = load double, double* %153, align 8
  %155 = insertelement <2 x double> undef, double %148, i32 0
  %156 = insertelement <2 x double> %155, double %144, i32 1
  %157 = insertelement <2 x double> undef, double %154, i32 0
  %158 = shufflevector <2 x double> %157, <2 x double> undef, <2 x i32> zeroinitializer
  %159 = fmul nsz <2 x double> %156, %158
  %160 = insertelement <2 x double> undef, double %144, i32 0
  %161 = insertelement <2 x double> %160, double %148, i32 1
  %162 = insertelement <2 x double> undef, double %152, i32 0
  %163 = shufflevector <2 x double> %162, <2 x double> undef, <2 x i32> zeroinitializer
  %164 = fmul nsz <2 x double> %161, %163
  %165 = fsub nsz <2 x double> %164, %159
  %166 = fadd nsz <2 x double> %164, %159
  %167 = shufflevector <2 x double> %165, <2 x double> %166, <2 x i32> <i32 0, i32 3>
  %168 = add nuw nsw i64 %44, 4
  %169 = getelementptr inbounds i32, i32* %13, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = sub nsw i32 0, %170
  %172 = sext i32 %171 to i64
  %173 = mul nsw i64 %23, %172
  %174 = getelementptr inbounds double, double* %28, i64 %173
  %175 = load double, double* %174, align 8
  %176 = sext i32 %170 to i64
  %177 = mul nsw i64 %23, %176
  %178 = getelementptr inbounds double, double* %16, i64 %177
  %179 = load double, double* %178, align 8
  %180 = ashr i32 %170, 1
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %181, i32 0
  %183 = load double, double* %182, align 8
  %184 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %181, i32 1
  %185 = load double, double* %184, align 8
  %186 = insertelement <2 x double> undef, double %179, i32 0
  %187 = insertelement <2 x double> %186, double %175, i32 1
  %188 = insertelement <2 x double> undef, double %185, i32 0
  %189 = shufflevector <2 x double> %188, <2 x double> undef, <2 x i32> zeroinitializer
  %190 = fmul nsz <2 x double> %187, %189
  %191 = insertelement <2 x double> undef, double %175, i32 0
  %192 = insertelement <2 x double> %191, double %179, i32 1
  %193 = insertelement <2 x double> undef, double %183, i32 0
  %194 = shufflevector <2 x double> %193, <2 x double> undef, <2 x i32> zeroinitializer
  %195 = fmul nsz <2 x double> %192, %194
  %196 = fsub nsz <2 x double> %195, %190
  %197 = fadd nsz <2 x double> %195, %190
  %198 = shufflevector <2 x double> %196, <2 x double> %197, <2 x i32> <i32 0, i32 3>
  %199 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %34, align 8
  %200 = load i32*, i32** %35, align 8
  %201 = getelementptr inbounds i32, i32* %200, i64 %42
  %202 = load i32, i32* %201, align 4
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %199, i64 %203
  %205 = shufflevector <2 x double> %104, <2 x double> %103, <2 x i32> <i32 1, i32 2>
  %206 = shufflevector <2 x double> %197, <2 x double> %196, <2 x i32> <i32 1, i32 2>
  %207 = fsub nsz <2 x double> %205, %206
  %208 = fadd nsz <2 x double> %105, %198
  %209 = shufflevector <2 x double> %135, <2 x double> %134, <2 x i32> <i32 1, i32 2>
  %210 = shufflevector <2 x double> %166, <2 x double> %165, <2 x i32> <i32 1, i32 2>
  %211 = fsub nsz <2 x double> %209, %210
  %212 = fadd nsz <2 x double> %136, %167
  %213 = extractelement <2 x double> %72, i32 0
  %214 = extractelement <2 x double> %208, i32 0
  %215 = fadd nsz double %214, %213
  %216 = extractelement <2 x double> %212, i32 0
  %217 = fadd nsz double %216, %215
  %218 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %204, i64 0, i32 0
  store double %217, double* %218, align 8
  %219 = extractelement <2 x double> %73, i32 1
  %220 = extractelement <2 x double> %208, i32 1
  %221 = fadd nsz double %220, %219
  %222 = extractelement <2 x double> %212, i32 1
  %223 = fadd nsz double %222, %221
  %224 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %199, i64 %203, i32 1
  store double %223, double* %224, align 8
  %225 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 0), align 32
  %226 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 0), align 16
  %227 = insertelement <2 x double> undef, double %225, i32 0
  %228 = shufflevector <2 x double> %227, <2 x double> undef, <2 x i32> zeroinitializer
  %229 = fmul nsz <2 x double> %212, %228
  %230 = insertelement <2 x double> undef, double %226, i32 0
  %231 = shufflevector <2 x double> %230, <2 x double> undef, <2 x i32> zeroinitializer
  %232 = fmul nsz <2 x double> %208, %231
  %233 = fsub nsz <2 x double> %229, %232
  %234 = fmul nsz <2 x double> %208, %228
  %235 = fmul nsz <2 x double> %212, %231
  %236 = fsub nsz <2 x double> %234, %235
  %237 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 1), align 8
  %238 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 1), align 8
  %239 = insertelement <2 x double> undef, double %237, i32 0
  %240 = shufflevector <2 x double> %239, <2 x double> undef, <2 x i32> zeroinitializer
  %241 = fmul nsz <2 x double> %211, %240
  %242 = insertelement <2 x double> undef, double %238, i32 0
  %243 = shufflevector <2 x double> %242, <2 x double> undef, <2 x i32> zeroinitializer
  %244 = fmul nsz <2 x double> %207, %243
  %245 = fsub nsz <2 x double> %241, %244
  %246 = fmul nsz <2 x double> %207, %240
  %247 = fmul nsz <2 x double> %211, %243
  %248 = fadd nsz <2 x double> %246, %247
  %249 = extractelement <2 x double> %236, i32 0
  %250 = extractelement <2 x double> %248, i32 0
  %251 = fadd nsz double %249, %250
  %252 = extractelement <2 x double> %236, i32 1
  %253 = extractelement <2 x double> %248, i32 1
  %254 = fsub nsz double %252, %253
  %255 = fsub nsz <2 x double> %236, %248
  %256 = fadd nsz <2 x double> %236, %248
  %257 = shufflevector <2 x double> %255, <2 x double> %256, <2 x i32> <i32 0, i32 3>
  %258 = fadd nsz <2 x double> %233, %245
  %259 = fsub nsz <2 x double> %233, %245
  %260 = shufflevector <2 x double> %258, <2 x double> %259, <2 x i32> <i32 0, i32 3>
  %261 = fsub nsz <2 x double> %233, %245
  %262 = fadd nsz <2 x double> %233, %245
  %263 = shufflevector <2 x double> %261, <2 x double> %262, <2 x i32> <i32 0, i32 3>
  %264 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %204, i64 %36, i32 0
  %265 = insertelement <2 x double> undef, double %213, i32 0
  %266 = insertelement <2 x double> %265, double %254, i32 1
  %267 = insertelement <2 x double> %73, double %251, i32 0
  %268 = fadd nsz <2 x double> %266, %267
  %269 = bitcast double* %264 to <2 x double>*
  store <2 x double> %268, <2 x double>* %269, align 8
  %270 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %204, i64 %37, i32 0
  %271 = fadd nsz <2 x double> %74, %263
  %272 = bitcast double* %270 to <2 x double>*
  store <2 x double> %271, <2 x double>* %272, align 8
  %273 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %204, i64 %38, i32 0
  %274 = fadd nsz <2 x double> %74, %260
  %275 = bitcast double* %273 to <2 x double>*
  store <2 x double> %274, <2 x double>* %275, align 8
  %276 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %204, i64 %39, i32 0
  %277 = fadd nsz <2 x double> %74, %257
  %278 = bitcast double* %276 to <2 x double>*
  store <2 x double> %277, <2 x double>* %278, align 8
  %279 = add nuw nsw i64 %42, 1
  %280 = icmp eq i64 %279, %40
  br i1 %280, label %281, label %41

281:                                              ; preds = %41, %30
  %282 = phi i64 [ %32, %30 ], [ %38, %41 ]
  %283 = phi i64 [ %31, %30 ], [ %36, %41 ]
  %284 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %285 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %284, align 8
  tail call void %22(%struct.AVComplexDouble* %285) #8
  %286 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %284, align 8
  %287 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %286, i64 %283
  tail call void %22(%struct.AVComplexDouble* %287) #8
  %288 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %284, align 8
  %289 = shl nsw i64 %283, 1
  %290 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %288, i64 %289
  tail call void %22(%struct.AVComplexDouble* %290) #8
  %291 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %284, align 8
  %292 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %291, i64 %282
  tail call void %22(%struct.AVComplexDouble* %292) #8
  %293 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %284, align 8
  %294 = shl nsw i64 %283, 2
  %295 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %293, i64 %294
  tail call void %22(%struct.AVComplexDouble* %295) #8
  %296 = icmp sgt i32 %10, 1
  br i1 %296, label %297, label %299

297:                                              ; preds = %281
  %298 = sext i32 %11 to i64
  br label %300

299:                                              ; preds = %300, %281
  ret void

300:                                              ; preds = %297, %300
  %301 = phi i64 [ 0, %297 ], [ %348, %300 ]
  %302 = add nsw i64 %301, %298
  %303 = xor i64 %301, -1
  %304 = add nsw i64 %298, %303
  %305 = getelementptr inbounds i32, i32* %15, i64 %302
  %306 = load i32, i32* %305, align 4
  %307 = getelementptr inbounds i32, i32* %15, i64 %304
  %308 = load i32, i32* %307, align 4
  %309 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %284, align 8
  %310 = sext i32 %308 to i64
  %311 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %309, i64 %310, i32 1
  %312 = load double, double* %311, align 8
  %313 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %309, i64 %310, i32 0
  %314 = load double, double* %313, align 8
  %315 = sext i32 %306 to i64
  %316 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %309, i64 %315, i32 1
  %317 = load double, double* %316, align 8
  %318 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %309, i64 %315, i32 0
  %319 = load double, double* %318, align 8
  %320 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %304, i32 1
  %321 = load double, double* %320, align 8
  %322 = fmul nsz double %312, %321
  %323 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %304, i32 0
  %324 = load double, double* %323, align 8
  %325 = fmul nsz double %314, %324
  %326 = fsub nsz double %322, %325
  %327 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %304, i32 0
  store double %326, double* %327, align 8
  %328 = load double, double* %323, align 8
  %329 = fmul nsz double %312, %328
  %330 = load double, double* %320, align 8
  %331 = fmul nsz double %314, %330
  %332 = fadd nsz double %329, %331
  %333 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %302, i32 1
  store double %332, double* %333, align 8
  %334 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %302, i32 1
  %335 = load double, double* %334, align 8
  %336 = fmul nsz double %317, %335
  %337 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %302, i32 0
  %338 = load double, double* %337, align 8
  %339 = fmul nsz double %319, %338
  %340 = fsub nsz double %336, %339
  %341 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %302, i32 0
  store double %340, double* %341, align 8
  %342 = load double, double* %337, align 8
  %343 = fmul nsz double %317, %342
  %344 = load double, double* %334, align 8
  %345 = fmul nsz double %319, %344
  %346 = fadd nsz double %343, %345
  %347 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %304, i32 1
  store double %346, double* %347, align 8
  %348 = add nuw nsw i64 %301, 1
  %349 = icmp slt i64 %348, %298
  br i1 %349, label %300, label %299
}

; Function Attrs: nounwind ssp uwtable
define internal void @compound_mdct_5xM(%struct.AVTXContext* nocapture readonly, i8* nocapture, i8* nocapture readonly, i64) #0 {
  %5 = alloca [5 x %struct.AVComplexDouble], align 16
  %6 = bitcast i8* %2 to double*
  %7 = bitcast i8* %1 to double*
  %8 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 6
  %9 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %8, align 8
  %10 = bitcast [5 x %struct.AVComplexDouble]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %10) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 80, i1 false)
  %11 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = mul nsw i32 %12, 5
  %14 = mul i32 %12, 15
  %15 = ashr i32 %13, 1
  %16 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 8
  %17 = load i32*, i32** %16, align 8
  %18 = sext i32 %13 to i64
  %19 = getelementptr inbounds i32, i32* %17, i64 %18
  %20 = or i32 %12, 1
  %21 = tail call i32 @llvm.ctlz.i32(i32 %20, i1 true), !range !3
  %22 = xor i32 %21, 31
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds [18 x void (%struct.AVComplexDouble*)*], [18 x void (%struct.AVComplexDouble*)*]* @fft_dispatch, i64 0, i64 %23
  %25 = load void (%struct.AVComplexDouble*)*, void (%struct.AVComplexDouble*)** %24, align 8
  %26 = lshr i64 %3, 3
  %27 = icmp sgt i32 %12, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %4
  %29 = sext i32 %12 to i64
  %30 = mul nsw i64 %29, 3
  br label %53

31:                                               ; preds = %4
  %32 = mul i32 %12, 25
  %33 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %34 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  %35 = sext i32 %12 to i64
  %36 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 1, i32 0
  %37 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 4, i32 0
  %38 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 2, i32 0
  %39 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 3, i32 0
  %40 = shl nsw i64 %35, 1
  %41 = mul nsw i64 %35, 3
  %42 = shl nsw i64 %35, 2
  %43 = zext i32 %12 to i64
  %44 = bitcast double* %36 to <2 x double>*
  %45 = bitcast double* %37 to <2 x double>*
  %46 = bitcast double* %38 to <2 x double>*
  %47 = bitcast double* %39 to <2 x double>*
  %48 = bitcast [5 x %struct.AVComplexDouble]* %5 to <2 x double>*
  br label %49

49:                                               ; preds = %69, %31
  %50 = phi i64 [ 0, %31 ], [ %138, %69 ]
  %51 = mul i64 %50, 5
  %52 = and i64 %51, 4294967295
  br label %140

53:                                               ; preds = %69, %28
  %54 = phi i64 [ %30, %28 ], [ %41, %69 ]
  %55 = phi i64 [ %29, %28 ], [ %35, %69 ]
  %56 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %57 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %56, align 8
  tail call void %25(%struct.AVComplexDouble* %57) #8
  %58 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %56, align 8
  %59 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %58, i64 %55
  tail call void %25(%struct.AVComplexDouble* %59) #8
  %60 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %56, align 8
  %61 = shl nsw i64 %55, 1
  %62 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %60, i64 %61
  tail call void %25(%struct.AVComplexDouble* %62) #8
  %63 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %56, align 8
  %64 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %63, i64 %54
  tail call void %25(%struct.AVComplexDouble* %64) #8
  %65 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %56, align 8
  %66 = shl nsw i64 %55, 2
  %67 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %65, i64 %66
  tail call void %25(%struct.AVComplexDouble* %67) #8
  %68 = icmp sgt i32 %13, 1
  br i1 %68, label %201, label %203

69:                                               ; preds = %181
  %70 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %33, align 8
  %71 = load i32*, i32** %34, align 8
  %72 = getelementptr inbounds i32, i32* %71, i64 %50
  %73 = load i32, i32* %72, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %70, i64 %74
  %76 = load <2 x double>, <2 x double>* %44, align 16
  %77 = load <2 x double>, <2 x double>* %45, align 16
  %78 = fsub nsz <2 x double> %76, %77
  %79 = shufflevector <2 x double> %78, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %80 = fadd nsz <2 x double> %76, %77
  %81 = load <2 x double>, <2 x double>* %46, align 16
  %82 = load <2 x double>, <2 x double>* %47, align 16
  %83 = fsub nsz <2 x double> %81, %82
  %84 = shufflevector <2 x double> %83, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %85 = fadd nsz <2 x double> %81, %82
  %86 = load <2 x double>, <2 x double>* %48, align 16
  %87 = fadd nsz <2 x double> %80, %86
  %88 = fadd nsz <2 x double> %85, %87
  %89 = bitcast %struct.AVComplexDouble* %75 to <2 x double>*
  store <2 x double> %88, <2 x double>* %89, align 8
  %90 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 0), align 32
  %91 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 0), align 16
  %92 = insertelement <2 x double> undef, double %90, i32 0
  %93 = shufflevector <2 x double> %92, <2 x double> undef, <2 x i32> zeroinitializer
  %94 = fmul nsz <2 x double> %85, %93
  %95 = insertelement <2 x double> undef, double %91, i32 0
  %96 = shufflevector <2 x double> %95, <2 x double> undef, <2 x i32> zeroinitializer
  %97 = fmul nsz <2 x double> %80, %96
  %98 = fsub nsz <2 x double> %94, %97
  %99 = fmul nsz <2 x double> %80, %93
  %100 = fmul nsz <2 x double> %85, %96
  %101 = fsub nsz <2 x double> %99, %100
  %102 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 1), align 8
  %103 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 1), align 8
  %104 = insertelement <2 x double> undef, double %102, i32 0
  %105 = shufflevector <2 x double> %104, <2 x double> undef, <2 x i32> zeroinitializer
  %106 = fmul nsz <2 x double> %84, %105
  %107 = insertelement <2 x double> undef, double %103, i32 0
  %108 = shufflevector <2 x double> %107, <2 x double> undef, <2 x i32> zeroinitializer
  %109 = fmul nsz <2 x double> %79, %108
  %110 = fsub nsz <2 x double> %106, %109
  %111 = fmul nsz <2 x double> %79, %105
  %112 = fmul nsz <2 x double> %84, %108
  %113 = fadd nsz <2 x double> %111, %112
  %114 = fadd nsz <2 x double> %101, %113
  %115 = fsub nsz <2 x double> %101, %113
  %116 = shufflevector <2 x double> %114, <2 x double> %115, <2 x i32> <i32 0, i32 3>
  %117 = fsub nsz <2 x double> %101, %113
  %118 = fadd nsz <2 x double> %101, %113
  %119 = shufflevector <2 x double> %117, <2 x double> %118, <2 x i32> <i32 0, i32 3>
  %120 = fadd nsz <2 x double> %98, %110
  %121 = fsub nsz <2 x double> %98, %110
  %122 = shufflevector <2 x double> %120, <2 x double> %121, <2 x i32> <i32 0, i32 3>
  %123 = fsub nsz <2 x double> %98, %110
  %124 = fadd nsz <2 x double> %98, %110
  %125 = shufflevector <2 x double> %123, <2 x double> %124, <2 x i32> <i32 0, i32 3>
  %126 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %75, i64 %35, i32 0
  %127 = fadd nsz <2 x double> %86, %116
  %128 = bitcast double* %126 to <2 x double>*
  store <2 x double> %127, <2 x double>* %128, align 8
  %129 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %75, i64 %40, i32 0
  %130 = fadd nsz <2 x double> %86, %125
  %131 = bitcast double* %129 to <2 x double>*
  store <2 x double> %130, <2 x double>* %131, align 8
  %132 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %75, i64 %41, i32 0
  %133 = fadd nsz <2 x double> %86, %122
  %134 = bitcast double* %132 to <2 x double>*
  store <2 x double> %133, <2 x double>* %134, align 8
  %135 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %75, i64 %42, i32 0
  %136 = fadd nsz <2 x double> %86, %119
  %137 = bitcast double* %135 to <2 x double>*
  store <2 x double> %136, <2 x double>* %137, align 8
  %138 = add nuw nsw i64 %50, 1
  %139 = icmp eq i64 %138, %43
  br i1 %139, label %53, label %49

140:                                              ; preds = %181, %49
  %141 = phi i64 [ 0, %49 ], [ %199, %181 ]
  %142 = add nuw nsw i64 %141, %52
  %143 = getelementptr inbounds i32, i32* %17, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = icmp slt i32 %144, %13
  %146 = add nsw i32 %144, %13
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds double, double* %6, i64 %147
  %149 = load double, double* %148, align 8
  %150 = xor i32 %144, -1
  br i1 %145, label %151, label %166

151:                                              ; preds = %140
  %152 = add i32 %13, %150
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds double, double* %6, i64 %153
  %155 = load double, double* %154, align 8
  %156 = add nsw i32 %144, %14
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds double, double* %6, i64 %157
  %159 = load double, double* %158, align 8
  %160 = add i32 %14, %150
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds double, double* %6, i64 %161
  %163 = load double, double* %162, align 8
  %164 = fsub nsz double -0.000000e+00, %163
  %165 = fsub nsz double %164, %159
  br label %181

166:                                              ; preds = %140
  %167 = add i32 %32, %150
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds double, double* %6, i64 %168
  %170 = load double, double* %169, align 8
  %171 = fsub nsz double -0.000000e+00, %170
  %172 = sub i32 %144, %13
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds double, double* %6, i64 %173
  %175 = load double, double* %174, align 8
  %176 = add i32 %14, %150
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds double, double* %6, i64 %177
  %179 = load double, double* %178, align 8
  %180 = fsub nsz double %175, %179
  br label %181

181:                                              ; preds = %151, %166
  %182 = phi double [ %155, %151 ], [ %171, %166 ]
  %183 = phi double [ %165, %151 ], [ %180, %166 ]
  %184 = fsub nsz double %182, %149
  %185 = ashr i32 %144, 1
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %186, i32 0
  %188 = load double, double* %187, align 8
  %189 = fmul nsz double %184, %188
  %190 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %186, i32 1
  %191 = load double, double* %190, align 8
  %192 = fmul nsz double %183, %191
  %193 = fsub nsz double %189, %192
  %194 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 %141, i32 1
  store double %193, double* %194, align 8
  %195 = fmul nsz double %184, %191
  %196 = fmul nsz double %183, %188
  %197 = fadd nsz double %196, %195
  %198 = getelementptr inbounds [5 x %struct.AVComplexDouble], [5 x %struct.AVComplexDouble]* %5, i64 0, i64 %141, i32 0
  store double %197, double* %198, align 16
  %199 = add nuw nsw i64 %141, 1
  %200 = icmp eq i64 %199, 5
  br i1 %200, label %69, label %140

201:                                              ; preds = %53
  %202 = sext i32 %15 to i64
  br label %204

203:                                              ; preds = %204, %53
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %10) #8
  ret void

204:                                              ; preds = %201, %204
  %205 = phi i64 [ 0, %201 ], [ %264, %204 ]
  %206 = phi i32 [ 0, %201 ], [ %265, %204 ]
  %207 = add nsw i64 %205, %202
  %208 = add nsw i32 %206, %15
  %209 = xor i64 %205, -1
  %210 = xor i32 %206, -1
  %211 = add nsw i64 %202, %209
  %212 = add nsw i32 %15, %210
  %213 = getelementptr inbounds i32, i32* %19, i64 %207
  %214 = load i32, i32* %213, align 4
  %215 = getelementptr inbounds i32, i32* %19, i64 %211
  %216 = load i32, i32* %215, align 4
  %217 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %56, align 8
  %218 = sext i32 %216 to i64
  %219 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %217, i64 %218, i32 0
  %220 = load double, double* %219, align 8
  %221 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %217, i64 %218, i32 1
  %222 = load double, double* %221, align 8
  %223 = sext i32 %214 to i64
  %224 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %217, i64 %223, i32 0
  %225 = load double, double* %224, align 8
  %226 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %217, i64 %223, i32 1
  %227 = load double, double* %226, align 8
  %228 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %207, i32 1
  %229 = load double, double* %228, align 8
  %230 = fmul nsz double %225, %229
  %231 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %207, i32 0
  %232 = load double, double* %231, align 8
  %233 = fmul nsz double %227, %232
  %234 = fsub nsz double %230, %233
  %235 = shl nsw i32 %212, 1
  %236 = sext i32 %235 to i64
  %237 = mul nsw i64 %26, %236
  %238 = add nsw i64 %237, %26
  %239 = getelementptr inbounds double, double* %7, i64 %238
  store double %234, double* %239, align 8
  %240 = load double, double* %231, align 8
  %241 = fmul nsz double %225, %240
  %242 = load double, double* %228, align 8
  %243 = fmul nsz double %227, %242
  %244 = fadd nsz double %241, %243
  %245 = shl nsw i32 %208, 1
  %246 = sext i32 %245 to i64
  %247 = mul nsw i64 %26, %246
  %248 = getelementptr inbounds double, double* %7, i64 %247
  store double %244, double* %248, align 8
  %249 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %211, i32 1
  %250 = load double, double* %249, align 8
  %251 = fmul nsz double %220, %250
  %252 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %211, i32 0
  %253 = load double, double* %252, align 8
  %254 = fmul nsz double %222, %253
  %255 = fsub nsz double %251, %254
  %256 = add nsw i64 %247, %26
  %257 = getelementptr inbounds double, double* %7, i64 %256
  store double %255, double* %257, align 8
  %258 = load double, double* %252, align 8
  %259 = fmul nsz double %220, %258
  %260 = load double, double* %249, align 8
  %261 = fmul nsz double %222, %260
  %262 = fadd nsz double %259, %261
  %263 = getelementptr inbounds double, double* %7, i64 %237
  store double %262, double* %263, align 8
  %264 = add nuw nsw i64 %205, 1
  %265 = add nuw nsw i32 %206, 1
  %266 = icmp slt i64 %264, %202
  br i1 %266, label %204, label %203
}

; Function Attrs: nounwind ssp uwtable
define internal void @compound_imdct_15xM(%struct.AVTXContext* nocapture readonly, i8* nocapture, i8* nocapture readonly, i64) #0 {
  %5 = alloca [15 x %struct.AVComplexDouble], align 16
  %6 = bitcast [15 x %struct.AVComplexDouble]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -1, i64 240, i1 false)
  %7 = bitcast i8* %1 to %struct.AVComplexDouble*
  %8 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 6
  %9 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %8, align 8
  %10 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = mul nsw i32 %11, 15
  %13 = ashr i32 %12, 1
  %14 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 8
  %15 = load i32*, i32** %14, align 8
  %16 = sext i32 %12 to i64
  %17 = getelementptr inbounds i32, i32* %15, i64 %16
  %18 = bitcast i8* %2 to double*
  %19 = or i32 %11, 1
  %20 = tail call i32 @llvm.ctlz.i32(i32 %19, i1 true), !range !3
  %21 = xor i32 %20, 31
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds [18 x void (%struct.AVComplexDouble*)*], [18 x void (%struct.AVComplexDouble*)*]* @fft_dispatch, i64 0, i64 %22
  %24 = load void (%struct.AVComplexDouble*)*, void (%struct.AVComplexDouble*)** %23, align 8
  %25 = lshr i64 %3, 3
  %26 = mul i32 %11, 30
  %27 = add nsw i32 %26, -1
  %28 = sext i32 %27 to i64
  %29 = mul nsw i64 %25, %28
  %30 = getelementptr inbounds double, double* %18, i64 %29
  %31 = icmp sgt i32 %11, 0
  br i1 %31, label %44, label %32

32:                                               ; preds = %4
  %33 = sext i32 %11 to i64
  %34 = mul nsw i64 %33, 3
  %35 = mul nsw i64 %33, 5
  %36 = mul nsw i64 %33, 6
  %37 = mul nsw i64 %33, 7
  %38 = mul nsw i64 %33, 9
  %39 = mul nsw i64 %33, 10
  %40 = mul nsw i64 %33, 11
  %41 = mul nsw i64 %33, 12
  %42 = mul nsw i64 %33, 13
  %43 = mul nsw i64 %33, 14
  br label %95

44:                                               ; preds = %4
  %45 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %46 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  %47 = sext i32 %11 to i64
  %48 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 1, i32 0
  %49 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 2, i32 0
  %50 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 4, i32 0
  %51 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 5, i32 0
  %52 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 3, i32 0
  %53 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 7, i32 0
  %54 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 8, i32 0
  %55 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 6, i32 0
  %56 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 10, i32 0
  %57 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 11, i32 0
  %58 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 9, i32 0
  %59 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 13, i32 0
  %60 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 14, i32 0
  %61 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 12, i32 0
  %62 = mul nsw i64 %47, 6
  %63 = mul nsw i64 %47, 12
  %64 = mul nsw i64 %47, 3
  %65 = mul nsw i64 %47, 9
  %66 = mul nsw i64 %47, 10
  %67 = mul nsw i64 %47, 7
  %68 = mul nsw i64 %47, 13
  %69 = shl nsw i64 %47, 2
  %70 = mul nsw i64 %47, 5
  %71 = mul nsw i64 %47, 11
  %72 = shl nsw i64 %47, 1
  %73 = shl nsw i64 %47, 3
  %74 = mul nsw i64 %47, 14
  %75 = zext i32 %11 to i64
  %76 = bitcast double* %48 to <2 x double>*
  %77 = bitcast double* %49 to <2 x double>*
  %78 = bitcast [15 x %struct.AVComplexDouble]* %5 to <2 x double>*
  %79 = bitcast double* %50 to <2 x double>*
  %80 = bitcast double* %51 to <2 x double>*
  %81 = bitcast double* %52 to <2 x double>*
  %82 = bitcast double* %59 to <2 x double>*
  %83 = bitcast double* %60 to <2 x double>*
  %84 = bitcast double* %61 to <2 x double>*
  %85 = bitcast double* %53 to <2 x double>*
  %86 = bitcast double* %54 to <2 x double>*
  %87 = bitcast double* %55 to <2 x double>*
  %88 = bitcast double* %56 to <2 x double>*
  %89 = bitcast double* %57 to <2 x double>*
  %90 = bitcast double* %58 to <2 x double>*
  br label %91

91:                                               ; preds = %141, %44
  %92 = phi i64 [ 0, %44 ], [ %472, %141 ]
  %93 = mul i64 %92, 15
  %94 = and i64 %93, 4294967295
  br label %474

95:                                               ; preds = %141, %32
  %96 = phi i64 [ %43, %32 ], [ %74, %141 ]
  %97 = phi i64 [ %42, %32 ], [ %68, %141 ]
  %98 = phi i64 [ %41, %32 ], [ %63, %141 ]
  %99 = phi i64 [ %40, %32 ], [ %71, %141 ]
  %100 = phi i64 [ %39, %32 ], [ %66, %141 ]
  %101 = phi i64 [ %38, %32 ], [ %65, %141 ]
  %102 = phi i64 [ %37, %32 ], [ %67, %141 ]
  %103 = phi i64 [ %36, %32 ], [ %62, %141 ]
  %104 = phi i64 [ %35, %32 ], [ %70, %141 ]
  %105 = phi i64 [ %34, %32 ], [ %64, %141 ]
  %106 = phi i64 [ %33, %32 ], [ %47, %141 ]
  %107 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %108 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  tail call void %24(%struct.AVComplexDouble* %108) #8
  %109 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %110 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %109, i64 %106
  tail call void %24(%struct.AVComplexDouble* %110) #8
  %111 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %112 = shl nsw i64 %106, 1
  %113 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %111, i64 %112
  tail call void %24(%struct.AVComplexDouble* %113) #8
  %114 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %115 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %114, i64 %105
  tail call void %24(%struct.AVComplexDouble* %115) #8
  %116 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %117 = shl nsw i64 %106, 2
  %118 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %116, i64 %117
  tail call void %24(%struct.AVComplexDouble* %118) #8
  %119 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %120 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %119, i64 %104
  tail call void %24(%struct.AVComplexDouble* %120) #8
  %121 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %122 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %121, i64 %103
  tail call void %24(%struct.AVComplexDouble* %122) #8
  %123 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %124 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %123, i64 %102
  tail call void %24(%struct.AVComplexDouble* %124) #8
  %125 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %126 = shl nsw i64 %106, 3
  %127 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %125, i64 %126
  tail call void %24(%struct.AVComplexDouble* %127) #8
  %128 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %129 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %128, i64 %101
  tail call void %24(%struct.AVComplexDouble* %129) #8
  %130 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %131 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %130, i64 %100
  tail call void %24(%struct.AVComplexDouble* %131) #8
  %132 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %133 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %132, i64 %99
  tail call void %24(%struct.AVComplexDouble* %133) #8
  %134 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %135 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %134, i64 %98
  tail call void %24(%struct.AVComplexDouble* %135) #8
  %136 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %137 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %136, i64 %97
  tail call void %24(%struct.AVComplexDouble* %137) #8
  %138 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %139 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %138, i64 %96
  tail call void %24(%struct.AVComplexDouble* %139) #8
  %140 = icmp sgt i32 %12, 1
  br i1 %140, label %505, label %507

141:                                              ; preds = %474
  %142 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %45, align 8
  %143 = load i32*, i32** %46, align 8
  %144 = getelementptr inbounds i32, i32* %143, i64 %92
  %145 = load i32, i32* %144, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %142, i64 %146
  %148 = load <2 x double>, <2 x double>* bitcast ([4 x %struct.AVComplexDouble]* @ff_cos_53_double to <2 x double>*), align 32
  %149 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 1, i32 0), align 16
  %150 = load <2 x double>, <2 x double>* %76, align 16
  %151 = load <2 x double>, <2 x double>* %77, align 16
  %152 = extractelement <2 x double> %151, i32 1
  %153 = fadd nsz <2 x double> %150, %151
  %154 = load <2 x double>, <2 x double>* %78, align 16
  %155 = fadd nsz <2 x double> %154, %153
  %156 = extractelement <2 x double> %153, i32 0
  %157 = extractelement <2 x double> %154, i32 0
  %158 = load <2 x double>, <2 x double>* %79, align 16
  %159 = load <2 x double>, <2 x double>* %80, align 16
  %160 = extractelement <2 x double> %158, i32 0
  %161 = extractelement <2 x double> %159, i32 0
  %162 = fsub nsz double %160, %161
  %163 = fadd nsz <2 x double> %158, %159
  %164 = load <2 x double>, <2 x double>* %81, align 16
  %165 = extractelement <2 x double> %148, i32 1
  %166 = fmul nsz double %165, %162
  %167 = extractelement <2 x double> %163, i32 1
  %168 = fmul nsz double %149, %167
  %169 = shufflevector <2 x double> %150, <2 x double> %164, <2 x i32> <i32 1, i32 3>
  %170 = insertelement <2 x double> undef, double %152, i32 0
  %171 = insertelement <2 x double> %170, double %168, i32 1
  %172 = fsub nsz <2 x double> %169, %171
  %173 = extractelement <2 x double> %148, i32 0
  %174 = insertelement <2 x double> %148, double %166, i32 1
  %175 = fmul nsz <2 x double> %172, %174
  %176 = fsub nsz <2 x double> %172, %174
  %177 = shufflevector <2 x double> %175, <2 x double> %176, <2 x i32> <i32 0, i32 3>
  %178 = load <2 x double>, <2 x double>* %82, align 16
  %179 = load <2 x double>, <2 x double>* %83, align 16
  %180 = extractelement <2 x double> %178, i32 0
  %181 = extractelement <2 x double> %179, i32 0
  %182 = fsub nsz double %180, %181
  %183 = fadd nsz <2 x double> %178, %179
  %184 = load <2 x double>, <2 x double>* %84, align 16
  %185 = insertelement <2 x double> undef, double %149, i32 0
  %186 = insertelement <2 x double> %148, double %149, i32 0
  %187 = insertelement <2 x double> undef, double %156, i32 0
  %188 = insertelement <2 x double> %187, double %182, i32 1
  %189 = fmul nsz <2 x double> %186, %188
  %190 = extractelement <2 x double> %183, i32 1
  %191 = fmul nsz double %149, %190
  %192 = extractelement <2 x double> %184, i32 1
  %193 = fsub nsz double %192, %191
  %194 = insertelement <2 x double> undef, double %157, i32 0
  %195 = insertelement <2 x double> %194, double %193, i32 1
  %196 = fsub nsz <2 x double> %195, %189
  %197 = extractelement <2 x double> %175, i32 0
  %198 = extractelement <2 x double> %196, i32 0
  %199 = fsub nsz double %198, %197
  %200 = extractelement <2 x double> %158, i32 1
  %201 = extractelement <2 x double> %159, i32 1
  %202 = fsub nsz double %200, %201
  %203 = insertelement <2 x double> %148, double %149, i32 1
  %204 = insertelement <2 x double> %153, double %202, i32 0
  %205 = fmul nsz <2 x double> %203, %204
  %206 = extractelement <2 x double> %163, i32 0
  %207 = fmul nsz double %149, %206
  %208 = extractelement <2 x double> %164, i32 0
  %209 = fsub nsz double %208, %207
  %210 = insertelement <2 x double> %154, double %209, i32 0
  %211 = fadd nsz <2 x double> %210, %205
  %212 = fsub nsz <2 x double> %210, %205
  %213 = shufflevector <2 x double> %211, <2 x double> %212, <2 x i32> <i32 0, i32 3>
  %214 = extractelement <2 x double> %178, i32 1
  %215 = extractelement <2 x double> %179, i32 1
  %216 = fsub nsz double %214, %215
  %217 = fmul nsz double %173, %216
  %218 = extractelement <2 x double> %183, i32 0
  %219 = fmul nsz double %149, %218
  %220 = shufflevector <2 x double> %184, <2 x double> %150, <2 x i32> <i32 0, i32 2>
  %221 = insertelement <2 x double> undef, double %219, i32 0
  %222 = shufflevector <2 x double> %221, <2 x double> %151, <2 x i32> <i32 0, i32 2>
  %223 = fsub nsz <2 x double> %220, %222
  %224 = insertelement <2 x double> %148, double %217, i32 0
  %225 = fadd nsz <2 x double> %224, %223
  %226 = fmul nsz <2 x double> %224, %223
  %227 = shufflevector <2 x double> %225, <2 x double> %226, <2 x i32> <i32 0, i32 3>
  %228 = extractelement <2 x double> %212, i32 1
  %229 = extractelement <2 x double> %226, i32 1
  %230 = fadd nsz double %229, %228
  %231 = fadd nsz <2 x double> %164, %163
  %232 = extractelement <2 x double> %205, i32 0
  %233 = fsub nsz double %209, %232
  %234 = extractelement <2 x double> %172, i32 1
  %235 = fadd nsz double %166, %234
  %236 = load <2 x double>, <2 x double>* %85, align 16
  %237 = load <2 x double>, <2 x double>* %86, align 16
  %238 = fsub nsz <2 x double> %236, %237
  %239 = shufflevector <2 x double> %238, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %240 = fadd nsz <2 x double> %236, %237
  %241 = load <2 x double>, <2 x double>* %87, align 16
  %242 = fadd nsz <2 x double> %241, %240
  %243 = fmul nsz <2 x double> %148, %239
  %244 = shufflevector <2 x double> %185, <2 x double> undef, <2 x i32> zeroinitializer
  %245 = fmul nsz <2 x double> %244, %240
  %246 = fsub nsz <2 x double> %241, %245
  %247 = fadd nsz <2 x double> %246, %243
  %248 = fsub nsz <2 x double> %246, %243
  %249 = shufflevector <2 x double> %247, <2 x double> %248, <2 x i32> <i32 0, i32 3>
  %250 = extractelement <2 x double> %246, i32 0
  %251 = extractelement <2 x double> %243, i32 0
  %252 = fsub nsz double %250, %251
  %253 = extractelement <2 x double> %246, i32 1
  %254 = extractelement <2 x double> %243, i32 1
  %255 = fadd nsz double %254, %253
  %256 = load <2 x double>, <2 x double>* %88, align 16
  %257 = load <2 x double>, <2 x double>* %89, align 16
  %258 = fsub nsz <2 x double> %256, %257
  %259 = shufflevector <2 x double> %258, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %260 = fadd nsz <2 x double> %256, %257
  %261 = load <2 x double>, <2 x double>* %90, align 16
  %262 = fadd nsz <2 x double> %261, %260
  %263 = fmul nsz <2 x double> %148, %259
  %264 = fmul nsz <2 x double> %244, %260
  %265 = fsub nsz <2 x double> %261, %264
  %266 = fadd nsz <2 x double> %265, %263
  %267 = fsub nsz <2 x double> %265, %263
  %268 = shufflevector <2 x double> %266, <2 x double> %267, <2 x i32> <i32 0, i32 3>
  %269 = extractelement <2 x double> %265, i32 0
  %270 = extractelement <2 x double> %263, i32 0
  %271 = fsub nsz double %269, %270
  %272 = extractelement <2 x double> %265, i32 1
  %273 = extractelement <2 x double> %263, i32 1
  %274 = fadd nsz double %273, %272
  %275 = fadd nsz <2 x double> %184, %183
  %276 = extractelement <2 x double> %223, i32 0
  %277 = fsub nsz double %276, %217
  %278 = extractelement <2 x double> %189, i32 1
  %279 = fadd nsz double %278, %193
  %280 = fsub nsz <2 x double> %231, %275
  %281 = shufflevector <2 x double> %280, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %282 = fadd nsz <2 x double> %231, %275
  %283 = fsub nsz <2 x double> %242, %262
  %284 = shufflevector <2 x double> %283, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %285 = fadd nsz <2 x double> %242, %262
  %286 = fadd nsz <2 x double> %155, %282
  %287 = fadd nsz <2 x double> %285, %286
  %288 = bitcast %struct.AVComplexDouble* %147 to <2 x double>*
  store <2 x double> %287, <2 x double>* %288, align 8
  %289 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 0), align 32
  %290 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 0), align 16
  %291 = insertelement <2 x double> undef, double %289, i32 0
  %292 = shufflevector <2 x double> %291, <2 x double> undef, <2 x i32> zeroinitializer
  %293 = fmul nsz <2 x double> %285, %292
  %294 = insertelement <2 x double> undef, double %290, i32 0
  %295 = shufflevector <2 x double> %294, <2 x double> undef, <2 x i32> zeroinitializer
  %296 = fmul nsz <2 x double> %282, %295
  %297 = fsub nsz <2 x double> %293, %296
  %298 = fmul nsz <2 x double> %282, %292
  %299 = fmul nsz <2 x double> %285, %295
  %300 = fsub nsz <2 x double> %298, %299
  %301 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 1), align 8
  %302 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 1), align 8
  %303 = insertelement <2 x double> undef, double %301, i32 0
  %304 = shufflevector <2 x double> %303, <2 x double> undef, <2 x i32> zeroinitializer
  %305 = fmul nsz <2 x double> %284, %304
  %306 = insertelement <2 x double> undef, double %302, i32 0
  %307 = shufflevector <2 x double> %306, <2 x double> undef, <2 x i32> zeroinitializer
  %308 = fmul nsz <2 x double> %281, %307
  %309 = fsub nsz <2 x double> %305, %308
  %310 = fmul nsz <2 x double> %281, %304
  %311 = fmul nsz <2 x double> %284, %307
  %312 = fadd nsz <2 x double> %310, %311
  %313 = fadd nsz <2 x double> %300, %312
  %314 = fsub nsz <2 x double> %300, %312
  %315 = shufflevector <2 x double> %313, <2 x double> %314, <2 x i32> <i32 0, i32 3>
  %316 = fsub nsz <2 x double> %300, %312
  %317 = fadd nsz <2 x double> %300, %312
  %318 = shufflevector <2 x double> %316, <2 x double> %317, <2 x i32> <i32 0, i32 3>
  %319 = fadd nsz <2 x double> %297, %309
  %320 = fsub nsz <2 x double> %297, %309
  %321 = shufflevector <2 x double> %319, <2 x double> %320, <2 x i32> <i32 0, i32 3>
  %322 = fsub nsz <2 x double> %297, %309
  %323 = fadd nsz <2 x double> %297, %309
  %324 = shufflevector <2 x double> %322, <2 x double> %323, <2 x i32> <i32 0, i32 3>
  %325 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %62, i32 0
  %326 = fadd nsz <2 x double> %155, %315
  %327 = bitcast double* %325 to <2 x double>*
  store <2 x double> %326, <2 x double>* %327, align 8
  %328 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %63, i32 0
  %329 = fadd nsz <2 x double> %155, %324
  %330 = bitcast double* %328 to <2 x double>*
  store <2 x double> %329, <2 x double>* %330, align 8
  %331 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %64, i32 0
  %332 = fadd nsz <2 x double> %155, %321
  %333 = bitcast double* %331 to <2 x double>*
  store <2 x double> %332, <2 x double>* %333, align 8
  %334 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %65, i32 0
  %335 = fadd nsz <2 x double> %155, %318
  %336 = bitcast double* %334 to <2 x double>*
  store <2 x double> %335, <2 x double>* %336, align 8
  %337 = fadd nsz <2 x double> %213, %227
  %338 = fsub nsz <2 x double> %213, %227
  %339 = shufflevector <2 x double> %337, <2 x double> %338, <2 x i32> <i32 0, i32 3>
  %340 = shufflevector <2 x double> %176, <2 x double> %211, <2 x i32> <i32 1, i32 2>
  %341 = shufflevector <2 x double> %196, <2 x double> %225, <2 x i32> <i32 1, i32 2>
  %342 = fsub nsz <2 x double> %340, %341
  %343 = fadd nsz <2 x double> %177, %196
  %344 = fsub nsz <2 x double> %249, %268
  %345 = shufflevector <2 x double> %344, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %346 = fadd nsz <2 x double> %249, %268
  %347 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %66, i32 0
  %348 = fadd nsz <2 x double> %343, %339
  %349 = fadd nsz <2 x double> %346, %348
  %350 = bitcast double* %347 to <2 x double>*
  store <2 x double> %349, <2 x double>* %350, align 8
  %351 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 0), align 32
  %352 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 0), align 16
  %353 = insertelement <2 x double> undef, double %351, i32 0
  %354 = shufflevector <2 x double> %353, <2 x double> undef, <2 x i32> zeroinitializer
  %355 = fmul nsz <2 x double> %346, %354
  %356 = shufflevector <2 x double> %337, <2 x double> %343, <2 x i32> <i32 0, i32 3>
  %357 = insertelement <2 x double> undef, double %352, i32 0
  %358 = shufflevector <2 x double> %357, <2 x double> undef, <2 x i32> zeroinitializer
  %359 = fmul nsz <2 x double> %356, %358
  %360 = fsub nsz <2 x double> %355, %359
  %361 = fmul nsz <2 x double> %356, %354
  %362 = fmul nsz <2 x double> %346, %358
  %363 = fsub nsz <2 x double> %361, %362
  %364 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 1), align 8
  %365 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 1), align 8
  %366 = insertelement <2 x double> undef, double %364, i32 0
  %367 = shufflevector <2 x double> %366, <2 x double> undef, <2 x i32> zeroinitializer
  %368 = fmul nsz <2 x double> %345, %367
  %369 = insertelement <2 x double> undef, double %365, i32 0
  %370 = shufflevector <2 x double> %369, <2 x double> undef, <2 x i32> zeroinitializer
  %371 = fmul nsz <2 x double> %342, %370
  %372 = fsub nsz <2 x double> %368, %371
  %373 = fmul nsz <2 x double> %342, %367
  %374 = fmul nsz <2 x double> %345, %370
  %375 = fadd nsz <2 x double> %373, %374
  %376 = fadd nsz <2 x double> %363, %375
  %377 = fsub nsz <2 x double> %363, %375
  %378 = shufflevector <2 x double> %376, <2 x double> %377, <2 x i32> <i32 0, i32 3>
  %379 = fsub nsz <2 x double> %363, %375
  %380 = fadd nsz <2 x double> %363, %375
  %381 = shufflevector <2 x double> %379, <2 x double> %380, <2 x i32> <i32 0, i32 3>
  %382 = fadd nsz <2 x double> %360, %372
  %383 = fsub nsz <2 x double> %360, %372
  %384 = shufflevector <2 x double> %382, <2 x double> %383, <2 x i32> <i32 0, i32 3>
  %385 = fsub nsz <2 x double> %360, %372
  %386 = fadd nsz <2 x double> %360, %372
  %387 = shufflevector <2 x double> %385, <2 x double> %386, <2 x i32> <i32 0, i32 3>
  %388 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %47, i32 0
  %389 = shufflevector <2 x double> %343, <2 x double> %338, <2 x i32> <i32 0, i32 3>
  %390 = fadd nsz <2 x double> %389, %378
  %391 = bitcast double* %388 to <2 x double>*
  store <2 x double> %390, <2 x double>* %391, align 8
  %392 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %67, i32 0
  %393 = fadd nsz <2 x double> %389, %387
  %394 = bitcast double* %392 to <2 x double>*
  store <2 x double> %393, <2 x double>* %394, align 8
  %395 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %68, i32 0
  %396 = fadd nsz <2 x double> %389, %384
  %397 = bitcast double* %395 to <2 x double>*
  store <2 x double> %396, <2 x double>* %397, align 8
  %398 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %69, i32 0
  %399 = fadd nsz <2 x double> %389, %381
  %400 = bitcast double* %398 to <2 x double>*
  store <2 x double> %399, <2 x double>* %400, align 8
  %401 = fsub nsz double %233, %277
  %402 = fadd nsz double %233, %277
  %403 = fsub nsz double %235, %279
  %404 = fadd nsz double %235, %279
  %405 = fsub nsz double %252, %271
  %406 = fadd nsz double %252, %271
  %407 = fsub nsz double %255, %274
  %408 = fadd nsz double %255, %274
  %409 = fadd nsz double %199, %402
  %410 = fadd nsz double %406, %409
  %411 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %70, i32 0
  store double %410, double* %411, align 8
  %412 = fadd nsz double %230, %404
  %413 = fadd nsz double %408, %412
  %414 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %70, i32 1
  store double %413, double* %414, align 8
  %415 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 0), align 32
  %416 = fmul nsz double %406, %415
  %417 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 0), align 16
  %418 = fmul nsz double %402, %417
  %419 = fsub nsz double %416, %418
  %420 = fmul nsz double %402, %415
  %421 = fmul nsz double %406, %417
  %422 = fsub nsz double %420, %421
  %423 = fmul nsz double %408, %415
  %424 = fmul nsz double %404, %417
  %425 = fsub nsz double %423, %424
  %426 = fmul nsz double %404, %415
  %427 = fmul nsz double %408, %417
  %428 = fsub nsz double %426, %427
  %429 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 1), align 8
  %430 = fmul nsz double %407, %429
  %431 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 1), align 8
  %432 = fmul nsz double %403, %431
  %433 = fsub nsz double %430, %432
  %434 = fmul nsz double %403, %429
  %435 = fmul nsz double %407, %431
  %436 = fadd nsz double %434, %435
  %437 = fmul nsz double %405, %429
  %438 = fmul nsz double %401, %431
  %439 = fsub nsz double %437, %438
  %440 = fmul nsz double %401, %429
  %441 = fmul nsz double %405, %431
  %442 = fadd nsz double %440, %441
  %443 = fsub nsz double %422, %436
  %444 = fadd nsz double %422, %436
  %445 = fsub nsz double %428, %442
  %446 = fadd nsz double %428, %442
  %447 = fsub nsz double %419, %433
  %448 = fadd nsz double %419, %433
  %449 = fsub nsz double %425, %439
  %450 = fadd nsz double %425, %439
  %451 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %71, i32 0
  %452 = insertelement <2 x double> undef, double %199, i32 0
  %453 = insertelement <2 x double> %452, double %445, i32 1
  %454 = insertelement <2 x double> undef, double %444, i32 0
  %455 = insertelement <2 x double> %454, double %230, i32 1
  %456 = fadd nsz <2 x double> %453, %455
  %457 = bitcast double* %451 to <2 x double>*
  store <2 x double> %456, <2 x double>* %457, align 8
  %458 = fadd nsz double %199, %447
  %459 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %72, i32 0
  store double %458, double* %459, align 8
  %460 = fadd nsz double %230, %450
  %461 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %72, i32 1
  store double %460, double* %461, align 8
  %462 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %73, i32 0
  %463 = insertelement <2 x double> %452, double %449, i32 1
  %464 = insertelement <2 x double> undef, double %448, i32 0
  %465 = insertelement <2 x double> %464, double %230, i32 1
  %466 = fadd nsz <2 x double> %463, %465
  %467 = bitcast double* %462 to <2 x double>*
  store <2 x double> %466, <2 x double>* %467, align 8
  %468 = fadd nsz double %199, %443
  %469 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %74, i32 0
  store double %468, double* %469, align 8
  %470 = fadd nsz double %230, %446
  %471 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 %74, i32 1
  store double %470, double* %471, align 8
  %472 = add nuw nsw i64 %92, 1
  %473 = icmp eq i64 %472, %75
  br i1 %473, label %95, label %91

474:                                              ; preds = %474, %91
  %475 = phi i64 [ 0, %91 ], [ %503, %474 ]
  %476 = add nuw nsw i64 %475, %94
  %477 = getelementptr inbounds i32, i32* %15, i64 %476
  %478 = load i32, i32* %477, align 4
  %479 = sub nsw i32 0, %478
  %480 = sext i32 %479 to i64
  %481 = mul nsw i64 %25, %480
  %482 = getelementptr inbounds double, double* %30, i64 %481
  %483 = load double, double* %482, align 8
  %484 = sext i32 %478 to i64
  %485 = mul nsw i64 %25, %484
  %486 = getelementptr inbounds double, double* %18, i64 %485
  %487 = load double, double* %486, align 8
  %488 = ashr i32 %478, 1
  %489 = sext i32 %488 to i64
  %490 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %489, i32 0
  %491 = load double, double* %490, align 8
  %492 = fmul nsz double %483, %491
  %493 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %489, i32 1
  %494 = load double, double* %493, align 8
  %495 = fmul nsz double %487, %494
  %496 = fsub nsz double %492, %495
  %497 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 %475, i32 0
  store double %496, double* %497, align 16
  %498 = fmul nsz double %483, %494
  %499 = load double, double* %490, align 8
  %500 = fmul nsz double %487, %499
  %501 = fadd nsz double %498, %500
  %502 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 %475, i32 1
  store double %501, double* %502, align 8
  %503 = add nuw nsw i64 %475, 1
  %504 = icmp eq i64 %503, 15
  br i1 %504, label %141, label %474

505:                                              ; preds = %95
  %506 = sext i32 %13 to i64
  br label %508

507:                                              ; preds = %508, %95
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %6) #8
  ret void

508:                                              ; preds = %505, %508
  %509 = phi i64 [ 0, %505 ], [ %556, %508 ]
  %510 = add nsw i64 %509, %506
  %511 = xor i64 %509, -1
  %512 = add nsw i64 %506, %511
  %513 = getelementptr inbounds i32, i32* %17, i64 %510
  %514 = load i32, i32* %513, align 4
  %515 = getelementptr inbounds i32, i32* %17, i64 %512
  %516 = load i32, i32* %515, align 4
  %517 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %107, align 8
  %518 = sext i32 %516 to i64
  %519 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %517, i64 %518, i32 1
  %520 = load double, double* %519, align 8
  %521 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %517, i64 %518, i32 0
  %522 = load double, double* %521, align 8
  %523 = sext i32 %514 to i64
  %524 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %517, i64 %523, i32 1
  %525 = load double, double* %524, align 8
  %526 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %517, i64 %523, i32 0
  %527 = load double, double* %526, align 8
  %528 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %512, i32 1
  %529 = load double, double* %528, align 8
  %530 = fmul nsz double %520, %529
  %531 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %512, i32 0
  %532 = load double, double* %531, align 8
  %533 = fmul nsz double %522, %532
  %534 = fsub nsz double %530, %533
  %535 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %512, i32 0
  store double %534, double* %535, align 8
  %536 = load double, double* %531, align 8
  %537 = fmul nsz double %520, %536
  %538 = load double, double* %528, align 8
  %539 = fmul nsz double %522, %538
  %540 = fadd nsz double %537, %539
  %541 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %510, i32 1
  store double %540, double* %541, align 8
  %542 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %510, i32 1
  %543 = load double, double* %542, align 8
  %544 = fmul nsz double %525, %543
  %545 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %510, i32 0
  %546 = load double, double* %545, align 8
  %547 = fmul nsz double %527, %546
  %548 = fsub nsz double %544, %547
  %549 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %510, i32 0
  store double %548, double* %549, align 8
  %550 = load double, double* %545, align 8
  %551 = fmul nsz double %525, %550
  %552 = load double, double* %542, align 8
  %553 = fmul nsz double %527, %552
  %554 = fadd nsz double %551, %553
  %555 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %512, i32 1
  store double %554, double* %555, align 8
  %556 = add nuw nsw i64 %509, 1
  %557 = icmp slt i64 %556, %506
  br i1 %557, label %508, label %507
}

; Function Attrs: nounwind ssp uwtable
define internal void @compound_mdct_15xM(%struct.AVTXContext* nocapture readonly, i8* nocapture, i8* nocapture readonly, i64) #0 {
  %5 = alloca [15 x %struct.AVComplexDouble], align 16
  %6 = bitcast i8* %2 to double*
  %7 = bitcast i8* %1 to double*
  %8 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 6
  %9 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %8, align 8
  %10 = bitcast [15 x %struct.AVComplexDouble]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %10) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 240, i1 false)
  %11 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = mul nsw i32 %12, 15
  %14 = mul i32 %12, 45
  %15 = ashr i32 %13, 1
  %16 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 8
  %17 = load i32*, i32** %16, align 8
  %18 = sext i32 %13 to i64
  %19 = getelementptr inbounds i32, i32* %17, i64 %18
  %20 = or i32 %12, 1
  %21 = tail call i32 @llvm.ctlz.i32(i32 %20, i1 true), !range !3
  %22 = xor i32 %21, 31
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds [18 x void (%struct.AVComplexDouble*)*], [18 x void (%struct.AVComplexDouble*)*]* @fft_dispatch, i64 0, i64 %23
  %25 = load void (%struct.AVComplexDouble*)*, void (%struct.AVComplexDouble*)** %24, align 8
  %26 = lshr i64 %3, 3
  %27 = icmp sgt i32 %12, 0
  br i1 %27, label %40, label %28

28:                                               ; preds = %4
  %29 = sext i32 %12 to i64
  %30 = mul nsw i64 %29, 3
  %31 = mul nsw i64 %29, 5
  %32 = mul nsw i64 %29, 6
  %33 = mul nsw i64 %29, 7
  %34 = mul nsw i64 %29, 9
  %35 = mul nsw i64 %29, 10
  %36 = mul nsw i64 %29, 11
  %37 = mul nsw i64 %29, 12
  %38 = mul nsw i64 %29, 13
  %39 = mul nsw i64 %29, 14
  br label %92

40:                                               ; preds = %4
  %41 = mul i32 %12, 75
  %42 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %43 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  %44 = sext i32 %12 to i64
  %45 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 1, i32 0
  %46 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 2, i32 0
  %47 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 4, i32 0
  %48 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 5, i32 0
  %49 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 3, i32 0
  %50 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 7, i32 0
  %51 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 8, i32 0
  %52 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 6, i32 0
  %53 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 10, i32 0
  %54 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 11, i32 0
  %55 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 9, i32 0
  %56 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 13, i32 0
  %57 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 14, i32 0
  %58 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 12, i32 0
  %59 = mul nsw i64 %44, 6
  %60 = mul nsw i64 %44, 12
  %61 = mul nsw i64 %44, 3
  %62 = mul nsw i64 %44, 9
  %63 = mul nsw i64 %44, 10
  %64 = mul nsw i64 %44, 7
  %65 = mul nsw i64 %44, 13
  %66 = shl nsw i64 %44, 2
  %67 = mul nsw i64 %44, 5
  %68 = mul nsw i64 %44, 11
  %69 = shl nsw i64 %44, 1
  %70 = shl nsw i64 %44, 3
  %71 = mul nsw i64 %44, 14
  %72 = zext i32 %12 to i64
  %73 = bitcast double* %45 to <2 x double>*
  %74 = bitcast double* %46 to <2 x double>*
  %75 = bitcast [15 x %struct.AVComplexDouble]* %5 to <2 x double>*
  %76 = bitcast double* %47 to <2 x double>*
  %77 = bitcast double* %48 to <2 x double>*
  %78 = bitcast double* %49 to <2 x double>*
  %79 = bitcast double* %56 to <2 x double>*
  %80 = bitcast double* %57 to <2 x double>*
  %81 = bitcast double* %58 to <2 x double>*
  %82 = bitcast double* %50 to <2 x double>*
  %83 = bitcast double* %51 to <2 x double>*
  %84 = bitcast double* %52 to <2 x double>*
  %85 = bitcast double* %53 to <2 x double>*
  %86 = bitcast double* %54 to <2 x double>*
  %87 = bitcast double* %55 to <2 x double>*
  br label %88

88:                                               ; preds = %138, %40
  %89 = phi i64 [ 0, %40 ], [ %469, %138 ]
  %90 = mul i64 %89, 15
  %91 = and i64 %90, 4294967295
  br label %471

92:                                               ; preds = %138, %28
  %93 = phi i64 [ %39, %28 ], [ %71, %138 ]
  %94 = phi i64 [ %38, %28 ], [ %65, %138 ]
  %95 = phi i64 [ %37, %28 ], [ %60, %138 ]
  %96 = phi i64 [ %36, %28 ], [ %68, %138 ]
  %97 = phi i64 [ %35, %28 ], [ %63, %138 ]
  %98 = phi i64 [ %34, %28 ], [ %62, %138 ]
  %99 = phi i64 [ %33, %28 ], [ %64, %138 ]
  %100 = phi i64 [ %32, %28 ], [ %59, %138 ]
  %101 = phi i64 [ %31, %28 ], [ %67, %138 ]
  %102 = phi i64 [ %30, %28 ], [ %61, %138 ]
  %103 = phi i64 [ %29, %28 ], [ %44, %138 ]
  %104 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 7
  %105 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  tail call void %25(%struct.AVComplexDouble* %105) #8
  %106 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %107 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %106, i64 %103
  tail call void %25(%struct.AVComplexDouble* %107) #8
  %108 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %109 = shl nsw i64 %103, 1
  %110 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %108, i64 %109
  tail call void %25(%struct.AVComplexDouble* %110) #8
  %111 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %112 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %111, i64 %102
  tail call void %25(%struct.AVComplexDouble* %112) #8
  %113 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %114 = shl nsw i64 %103, 2
  %115 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %113, i64 %114
  tail call void %25(%struct.AVComplexDouble* %115) #8
  %116 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %117 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %116, i64 %101
  tail call void %25(%struct.AVComplexDouble* %117) #8
  %118 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %119 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %118, i64 %100
  tail call void %25(%struct.AVComplexDouble* %119) #8
  %120 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %121 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %120, i64 %99
  tail call void %25(%struct.AVComplexDouble* %121) #8
  %122 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %123 = shl nsw i64 %103, 3
  %124 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %122, i64 %123
  tail call void %25(%struct.AVComplexDouble* %124) #8
  %125 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %126 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %125, i64 %98
  tail call void %25(%struct.AVComplexDouble* %126) #8
  %127 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %128 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %127, i64 %97
  tail call void %25(%struct.AVComplexDouble* %128) #8
  %129 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %130 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %129, i64 %96
  tail call void %25(%struct.AVComplexDouble* %130) #8
  %131 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %132 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %131, i64 %95
  tail call void %25(%struct.AVComplexDouble* %132) #8
  %133 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %134 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %133, i64 %94
  tail call void %25(%struct.AVComplexDouble* %134) #8
  %135 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %136 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %135, i64 %93
  tail call void %25(%struct.AVComplexDouble* %136) #8
  %137 = icmp sgt i32 %13, 1
  br i1 %137, label %533, label %535

138:                                              ; preds = %512
  %139 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %42, align 8
  %140 = load i32*, i32** %43, align 8
  %141 = getelementptr inbounds i32, i32* %140, i64 %89
  %142 = load i32, i32* %141, align 4
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %139, i64 %143
  %145 = load <2 x double>, <2 x double>* bitcast ([4 x %struct.AVComplexDouble]* @ff_cos_53_double to <2 x double>*), align 32
  %146 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 1, i32 0), align 16
  %147 = load <2 x double>, <2 x double>* %73, align 16
  %148 = load <2 x double>, <2 x double>* %74, align 16
  %149 = extractelement <2 x double> %148, i32 1
  %150 = fadd nsz <2 x double> %147, %148
  %151 = load <2 x double>, <2 x double>* %75, align 16
  %152 = fadd nsz <2 x double> %151, %150
  %153 = extractelement <2 x double> %150, i32 0
  %154 = extractelement <2 x double> %151, i32 0
  %155 = load <2 x double>, <2 x double>* %76, align 16
  %156 = load <2 x double>, <2 x double>* %77, align 16
  %157 = extractelement <2 x double> %155, i32 0
  %158 = extractelement <2 x double> %156, i32 0
  %159 = fsub nsz double %157, %158
  %160 = fadd nsz <2 x double> %155, %156
  %161 = load <2 x double>, <2 x double>* %78, align 16
  %162 = extractelement <2 x double> %145, i32 1
  %163 = fmul nsz double %162, %159
  %164 = extractelement <2 x double> %160, i32 1
  %165 = fmul nsz double %146, %164
  %166 = shufflevector <2 x double> %147, <2 x double> %161, <2 x i32> <i32 1, i32 3>
  %167 = insertelement <2 x double> undef, double %149, i32 0
  %168 = insertelement <2 x double> %167, double %165, i32 1
  %169 = fsub nsz <2 x double> %166, %168
  %170 = extractelement <2 x double> %145, i32 0
  %171 = insertelement <2 x double> %145, double %163, i32 1
  %172 = fmul nsz <2 x double> %169, %171
  %173 = fsub nsz <2 x double> %169, %171
  %174 = shufflevector <2 x double> %172, <2 x double> %173, <2 x i32> <i32 0, i32 3>
  %175 = load <2 x double>, <2 x double>* %79, align 16
  %176 = load <2 x double>, <2 x double>* %80, align 16
  %177 = extractelement <2 x double> %175, i32 0
  %178 = extractelement <2 x double> %176, i32 0
  %179 = fsub nsz double %177, %178
  %180 = fadd nsz <2 x double> %175, %176
  %181 = load <2 x double>, <2 x double>* %81, align 16
  %182 = insertelement <2 x double> undef, double %146, i32 0
  %183 = insertelement <2 x double> %145, double %146, i32 0
  %184 = insertelement <2 x double> undef, double %153, i32 0
  %185 = insertelement <2 x double> %184, double %179, i32 1
  %186 = fmul nsz <2 x double> %183, %185
  %187 = extractelement <2 x double> %180, i32 1
  %188 = fmul nsz double %146, %187
  %189 = extractelement <2 x double> %181, i32 1
  %190 = fsub nsz double %189, %188
  %191 = insertelement <2 x double> undef, double %154, i32 0
  %192 = insertelement <2 x double> %191, double %190, i32 1
  %193 = fsub nsz <2 x double> %192, %186
  %194 = extractelement <2 x double> %172, i32 0
  %195 = extractelement <2 x double> %193, i32 0
  %196 = fsub nsz double %195, %194
  %197 = extractelement <2 x double> %155, i32 1
  %198 = extractelement <2 x double> %156, i32 1
  %199 = fsub nsz double %197, %198
  %200 = insertelement <2 x double> %145, double %146, i32 1
  %201 = insertelement <2 x double> %150, double %199, i32 0
  %202 = fmul nsz <2 x double> %200, %201
  %203 = extractelement <2 x double> %160, i32 0
  %204 = fmul nsz double %146, %203
  %205 = extractelement <2 x double> %161, i32 0
  %206 = fsub nsz double %205, %204
  %207 = insertelement <2 x double> %151, double %206, i32 0
  %208 = fadd nsz <2 x double> %207, %202
  %209 = fsub nsz <2 x double> %207, %202
  %210 = shufflevector <2 x double> %208, <2 x double> %209, <2 x i32> <i32 0, i32 3>
  %211 = extractelement <2 x double> %175, i32 1
  %212 = extractelement <2 x double> %176, i32 1
  %213 = fsub nsz double %211, %212
  %214 = fmul nsz double %170, %213
  %215 = extractelement <2 x double> %180, i32 0
  %216 = fmul nsz double %146, %215
  %217 = shufflevector <2 x double> %181, <2 x double> %147, <2 x i32> <i32 0, i32 2>
  %218 = insertelement <2 x double> undef, double %216, i32 0
  %219 = shufflevector <2 x double> %218, <2 x double> %148, <2 x i32> <i32 0, i32 2>
  %220 = fsub nsz <2 x double> %217, %219
  %221 = insertelement <2 x double> %145, double %214, i32 0
  %222 = fadd nsz <2 x double> %221, %220
  %223 = fmul nsz <2 x double> %221, %220
  %224 = shufflevector <2 x double> %222, <2 x double> %223, <2 x i32> <i32 0, i32 3>
  %225 = extractelement <2 x double> %209, i32 1
  %226 = extractelement <2 x double> %223, i32 1
  %227 = fadd nsz double %226, %225
  %228 = fadd nsz <2 x double> %161, %160
  %229 = extractelement <2 x double> %202, i32 0
  %230 = fsub nsz double %206, %229
  %231 = extractelement <2 x double> %169, i32 1
  %232 = fadd nsz double %163, %231
  %233 = load <2 x double>, <2 x double>* %82, align 16
  %234 = load <2 x double>, <2 x double>* %83, align 16
  %235 = fsub nsz <2 x double> %233, %234
  %236 = shufflevector <2 x double> %235, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %237 = fadd nsz <2 x double> %233, %234
  %238 = load <2 x double>, <2 x double>* %84, align 16
  %239 = fadd nsz <2 x double> %238, %237
  %240 = fmul nsz <2 x double> %145, %236
  %241 = shufflevector <2 x double> %182, <2 x double> undef, <2 x i32> zeroinitializer
  %242 = fmul nsz <2 x double> %241, %237
  %243 = fsub nsz <2 x double> %238, %242
  %244 = fadd nsz <2 x double> %243, %240
  %245 = fsub nsz <2 x double> %243, %240
  %246 = shufflevector <2 x double> %244, <2 x double> %245, <2 x i32> <i32 0, i32 3>
  %247 = extractelement <2 x double> %243, i32 0
  %248 = extractelement <2 x double> %240, i32 0
  %249 = fsub nsz double %247, %248
  %250 = extractelement <2 x double> %243, i32 1
  %251 = extractelement <2 x double> %240, i32 1
  %252 = fadd nsz double %251, %250
  %253 = load <2 x double>, <2 x double>* %85, align 16
  %254 = load <2 x double>, <2 x double>* %86, align 16
  %255 = fsub nsz <2 x double> %253, %254
  %256 = shufflevector <2 x double> %255, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %257 = fadd nsz <2 x double> %253, %254
  %258 = load <2 x double>, <2 x double>* %87, align 16
  %259 = fadd nsz <2 x double> %258, %257
  %260 = fmul nsz <2 x double> %145, %256
  %261 = fmul nsz <2 x double> %241, %257
  %262 = fsub nsz <2 x double> %258, %261
  %263 = fadd nsz <2 x double> %262, %260
  %264 = fsub nsz <2 x double> %262, %260
  %265 = shufflevector <2 x double> %263, <2 x double> %264, <2 x i32> <i32 0, i32 3>
  %266 = extractelement <2 x double> %262, i32 0
  %267 = extractelement <2 x double> %260, i32 0
  %268 = fsub nsz double %266, %267
  %269 = extractelement <2 x double> %262, i32 1
  %270 = extractelement <2 x double> %260, i32 1
  %271 = fadd nsz double %270, %269
  %272 = fadd nsz <2 x double> %181, %180
  %273 = extractelement <2 x double> %220, i32 0
  %274 = fsub nsz double %273, %214
  %275 = extractelement <2 x double> %186, i32 1
  %276 = fadd nsz double %275, %190
  %277 = fsub nsz <2 x double> %228, %272
  %278 = shufflevector <2 x double> %277, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %279 = fadd nsz <2 x double> %228, %272
  %280 = fsub nsz <2 x double> %239, %259
  %281 = shufflevector <2 x double> %280, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %282 = fadd nsz <2 x double> %239, %259
  %283 = fadd nsz <2 x double> %152, %279
  %284 = fadd nsz <2 x double> %282, %283
  %285 = bitcast %struct.AVComplexDouble* %144 to <2 x double>*
  store <2 x double> %284, <2 x double>* %285, align 8
  %286 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 0), align 32
  %287 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 0), align 16
  %288 = insertelement <2 x double> undef, double %286, i32 0
  %289 = shufflevector <2 x double> %288, <2 x double> undef, <2 x i32> zeroinitializer
  %290 = fmul nsz <2 x double> %282, %289
  %291 = insertelement <2 x double> undef, double %287, i32 0
  %292 = shufflevector <2 x double> %291, <2 x double> undef, <2 x i32> zeroinitializer
  %293 = fmul nsz <2 x double> %279, %292
  %294 = fsub nsz <2 x double> %290, %293
  %295 = fmul nsz <2 x double> %279, %289
  %296 = fmul nsz <2 x double> %282, %292
  %297 = fsub nsz <2 x double> %295, %296
  %298 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 1), align 8
  %299 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 1), align 8
  %300 = insertelement <2 x double> undef, double %298, i32 0
  %301 = shufflevector <2 x double> %300, <2 x double> undef, <2 x i32> zeroinitializer
  %302 = fmul nsz <2 x double> %281, %301
  %303 = insertelement <2 x double> undef, double %299, i32 0
  %304 = shufflevector <2 x double> %303, <2 x double> undef, <2 x i32> zeroinitializer
  %305 = fmul nsz <2 x double> %278, %304
  %306 = fsub nsz <2 x double> %302, %305
  %307 = fmul nsz <2 x double> %278, %301
  %308 = fmul nsz <2 x double> %281, %304
  %309 = fadd nsz <2 x double> %307, %308
  %310 = fadd nsz <2 x double> %297, %309
  %311 = fsub nsz <2 x double> %297, %309
  %312 = shufflevector <2 x double> %310, <2 x double> %311, <2 x i32> <i32 0, i32 3>
  %313 = fsub nsz <2 x double> %297, %309
  %314 = fadd nsz <2 x double> %297, %309
  %315 = shufflevector <2 x double> %313, <2 x double> %314, <2 x i32> <i32 0, i32 3>
  %316 = fadd nsz <2 x double> %294, %306
  %317 = fsub nsz <2 x double> %294, %306
  %318 = shufflevector <2 x double> %316, <2 x double> %317, <2 x i32> <i32 0, i32 3>
  %319 = fsub nsz <2 x double> %294, %306
  %320 = fadd nsz <2 x double> %294, %306
  %321 = shufflevector <2 x double> %319, <2 x double> %320, <2 x i32> <i32 0, i32 3>
  %322 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %59, i32 0
  %323 = fadd nsz <2 x double> %152, %312
  %324 = bitcast double* %322 to <2 x double>*
  store <2 x double> %323, <2 x double>* %324, align 8
  %325 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %60, i32 0
  %326 = fadd nsz <2 x double> %152, %321
  %327 = bitcast double* %325 to <2 x double>*
  store <2 x double> %326, <2 x double>* %327, align 8
  %328 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %61, i32 0
  %329 = fadd nsz <2 x double> %152, %318
  %330 = bitcast double* %328 to <2 x double>*
  store <2 x double> %329, <2 x double>* %330, align 8
  %331 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %62, i32 0
  %332 = fadd nsz <2 x double> %152, %315
  %333 = bitcast double* %331 to <2 x double>*
  store <2 x double> %332, <2 x double>* %333, align 8
  %334 = fadd nsz <2 x double> %210, %224
  %335 = fsub nsz <2 x double> %210, %224
  %336 = shufflevector <2 x double> %334, <2 x double> %335, <2 x i32> <i32 0, i32 3>
  %337 = shufflevector <2 x double> %173, <2 x double> %208, <2 x i32> <i32 1, i32 2>
  %338 = shufflevector <2 x double> %193, <2 x double> %222, <2 x i32> <i32 1, i32 2>
  %339 = fsub nsz <2 x double> %337, %338
  %340 = fadd nsz <2 x double> %174, %193
  %341 = fsub nsz <2 x double> %246, %265
  %342 = shufflevector <2 x double> %341, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %343 = fadd nsz <2 x double> %246, %265
  %344 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %63, i32 0
  %345 = fadd nsz <2 x double> %340, %336
  %346 = fadd nsz <2 x double> %343, %345
  %347 = bitcast double* %344 to <2 x double>*
  store <2 x double> %346, <2 x double>* %347, align 8
  %348 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 0), align 32
  %349 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 0), align 16
  %350 = insertelement <2 x double> undef, double %348, i32 0
  %351 = shufflevector <2 x double> %350, <2 x double> undef, <2 x i32> zeroinitializer
  %352 = fmul nsz <2 x double> %343, %351
  %353 = shufflevector <2 x double> %334, <2 x double> %340, <2 x i32> <i32 0, i32 3>
  %354 = insertelement <2 x double> undef, double %349, i32 0
  %355 = shufflevector <2 x double> %354, <2 x double> undef, <2 x i32> zeroinitializer
  %356 = fmul nsz <2 x double> %353, %355
  %357 = fsub nsz <2 x double> %352, %356
  %358 = fmul nsz <2 x double> %353, %351
  %359 = fmul nsz <2 x double> %343, %355
  %360 = fsub nsz <2 x double> %358, %359
  %361 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 1), align 8
  %362 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 1), align 8
  %363 = insertelement <2 x double> undef, double %361, i32 0
  %364 = shufflevector <2 x double> %363, <2 x double> undef, <2 x i32> zeroinitializer
  %365 = fmul nsz <2 x double> %342, %364
  %366 = insertelement <2 x double> undef, double %362, i32 0
  %367 = shufflevector <2 x double> %366, <2 x double> undef, <2 x i32> zeroinitializer
  %368 = fmul nsz <2 x double> %339, %367
  %369 = fsub nsz <2 x double> %365, %368
  %370 = fmul nsz <2 x double> %339, %364
  %371 = fmul nsz <2 x double> %342, %367
  %372 = fadd nsz <2 x double> %370, %371
  %373 = fadd nsz <2 x double> %360, %372
  %374 = fsub nsz <2 x double> %360, %372
  %375 = shufflevector <2 x double> %373, <2 x double> %374, <2 x i32> <i32 0, i32 3>
  %376 = fsub nsz <2 x double> %360, %372
  %377 = fadd nsz <2 x double> %360, %372
  %378 = shufflevector <2 x double> %376, <2 x double> %377, <2 x i32> <i32 0, i32 3>
  %379 = fadd nsz <2 x double> %357, %369
  %380 = fsub nsz <2 x double> %357, %369
  %381 = shufflevector <2 x double> %379, <2 x double> %380, <2 x i32> <i32 0, i32 3>
  %382 = fsub nsz <2 x double> %357, %369
  %383 = fadd nsz <2 x double> %357, %369
  %384 = shufflevector <2 x double> %382, <2 x double> %383, <2 x i32> <i32 0, i32 3>
  %385 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %44, i32 0
  %386 = shufflevector <2 x double> %340, <2 x double> %335, <2 x i32> <i32 0, i32 3>
  %387 = fadd nsz <2 x double> %386, %375
  %388 = bitcast double* %385 to <2 x double>*
  store <2 x double> %387, <2 x double>* %388, align 8
  %389 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %64, i32 0
  %390 = fadd nsz <2 x double> %386, %384
  %391 = bitcast double* %389 to <2 x double>*
  store <2 x double> %390, <2 x double>* %391, align 8
  %392 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %65, i32 0
  %393 = fadd nsz <2 x double> %386, %381
  %394 = bitcast double* %392 to <2 x double>*
  store <2 x double> %393, <2 x double>* %394, align 8
  %395 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %66, i32 0
  %396 = fadd nsz <2 x double> %386, %378
  %397 = bitcast double* %395 to <2 x double>*
  store <2 x double> %396, <2 x double>* %397, align 8
  %398 = fsub nsz double %230, %274
  %399 = fadd nsz double %230, %274
  %400 = fsub nsz double %232, %276
  %401 = fadd nsz double %232, %276
  %402 = fsub nsz double %249, %268
  %403 = fadd nsz double %249, %268
  %404 = fsub nsz double %252, %271
  %405 = fadd nsz double %252, %271
  %406 = fadd nsz double %196, %399
  %407 = fadd nsz double %403, %406
  %408 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %67, i32 0
  store double %407, double* %408, align 8
  %409 = fadd nsz double %227, %401
  %410 = fadd nsz double %405, %409
  %411 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %67, i32 1
  store double %410, double* %411, align 8
  %412 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 0), align 32
  %413 = fmul nsz double %403, %412
  %414 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 0), align 16
  %415 = fmul nsz double %399, %414
  %416 = fsub nsz double %413, %415
  %417 = fmul nsz double %399, %412
  %418 = fmul nsz double %403, %414
  %419 = fsub nsz double %417, %418
  %420 = fmul nsz double %405, %412
  %421 = fmul nsz double %401, %414
  %422 = fsub nsz double %420, %421
  %423 = fmul nsz double %401, %412
  %424 = fmul nsz double %405, %414
  %425 = fsub nsz double %423, %424
  %426 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 1), align 8
  %427 = fmul nsz double %404, %426
  %428 = load double, double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 1), align 8
  %429 = fmul nsz double %400, %428
  %430 = fsub nsz double %427, %429
  %431 = fmul nsz double %400, %426
  %432 = fmul nsz double %404, %428
  %433 = fadd nsz double %431, %432
  %434 = fmul nsz double %402, %426
  %435 = fmul nsz double %398, %428
  %436 = fsub nsz double %434, %435
  %437 = fmul nsz double %398, %426
  %438 = fmul nsz double %402, %428
  %439 = fadd nsz double %437, %438
  %440 = fsub nsz double %419, %433
  %441 = fadd nsz double %419, %433
  %442 = fsub nsz double %425, %439
  %443 = fadd nsz double %425, %439
  %444 = fsub nsz double %416, %430
  %445 = fadd nsz double %416, %430
  %446 = fsub nsz double %422, %436
  %447 = fadd nsz double %422, %436
  %448 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %68, i32 0
  %449 = insertelement <2 x double> undef, double %196, i32 0
  %450 = insertelement <2 x double> %449, double %442, i32 1
  %451 = insertelement <2 x double> undef, double %441, i32 0
  %452 = insertelement <2 x double> %451, double %227, i32 1
  %453 = fadd nsz <2 x double> %450, %452
  %454 = bitcast double* %448 to <2 x double>*
  store <2 x double> %453, <2 x double>* %454, align 8
  %455 = fadd nsz double %196, %444
  %456 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %69, i32 0
  store double %455, double* %456, align 8
  %457 = fadd nsz double %227, %447
  %458 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %69, i32 1
  store double %457, double* %458, align 8
  %459 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %70, i32 0
  %460 = insertelement <2 x double> %449, double %446, i32 1
  %461 = insertelement <2 x double> undef, double %445, i32 0
  %462 = insertelement <2 x double> %461, double %227, i32 1
  %463 = fadd nsz <2 x double> %460, %462
  %464 = bitcast double* %459 to <2 x double>*
  store <2 x double> %463, <2 x double>* %464, align 8
  %465 = fadd nsz double %196, %440
  %466 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %71, i32 0
  store double %465, double* %466, align 8
  %467 = fadd nsz double %227, %443
  %468 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %144, i64 %71, i32 1
  store double %467, double* %468, align 8
  %469 = add nuw nsw i64 %89, 1
  %470 = icmp eq i64 %469, %72
  br i1 %470, label %92, label %88

471:                                              ; preds = %512, %88
  %472 = phi i64 [ 0, %88 ], [ %531, %512 ]
  %473 = add nuw nsw i64 %472, %91
  %474 = getelementptr inbounds i32, i32* %17, i64 %473
  %475 = load i32, i32* %474, align 4
  %476 = icmp slt i32 %475, %13
  %477 = add nsw i32 %475, %13
  %478 = sext i32 %477 to i64
  %479 = getelementptr inbounds double, double* %6, i64 %478
  %480 = load double, double* %479, align 8
  %481 = xor i32 %475, -1
  br i1 %476, label %482, label %497

482:                                              ; preds = %471
  %483 = add i32 %13, %481
  %484 = sext i32 %483 to i64
  %485 = getelementptr inbounds double, double* %6, i64 %484
  %486 = load double, double* %485, align 8
  %487 = add nsw i32 %475, %14
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds double, double* %6, i64 %488
  %490 = load double, double* %489, align 8
  %491 = add i32 %14, %481
  %492 = sext i32 %491 to i64
  %493 = getelementptr inbounds double, double* %6, i64 %492
  %494 = load double, double* %493, align 8
  %495 = fsub nsz double -0.000000e+00, %494
  %496 = fsub nsz double %495, %490
  br label %512

497:                                              ; preds = %471
  %498 = add i32 %41, %481
  %499 = sext i32 %498 to i64
  %500 = getelementptr inbounds double, double* %6, i64 %499
  %501 = load double, double* %500, align 8
  %502 = fsub nsz double -0.000000e+00, %501
  %503 = sub i32 %475, %13
  %504 = sext i32 %503 to i64
  %505 = getelementptr inbounds double, double* %6, i64 %504
  %506 = load double, double* %505, align 8
  %507 = add i32 %14, %481
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds double, double* %6, i64 %508
  %510 = load double, double* %509, align 8
  %511 = fsub nsz double %506, %510
  br label %512

512:                                              ; preds = %482, %497
  %513 = phi double [ %486, %482 ], [ %502, %497 ]
  %514 = phi double [ %496, %482 ], [ %511, %497 ]
  %515 = fsub nsz double %513, %480
  %516 = ashr i32 %475, 1
  %517 = sext i32 %516 to i64
  %518 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %517, i32 0
  %519 = load double, double* %518, align 8
  %520 = fmul nsz double %515, %519
  %521 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %517, i32 1
  %522 = load double, double* %521, align 8
  %523 = fmul nsz double %514, %522
  %524 = fsub nsz double %520, %523
  %525 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 %472, i32 1
  store double %524, double* %525, align 8
  %526 = fmul nsz double %515, %522
  %527 = load double, double* %518, align 8
  %528 = fmul nsz double %514, %527
  %529 = fadd nsz double %526, %528
  %530 = getelementptr inbounds [15 x %struct.AVComplexDouble], [15 x %struct.AVComplexDouble]* %5, i64 0, i64 %472, i32 0
  store double %529, double* %530, align 16
  %531 = add nuw nsw i64 %472, 1
  %532 = icmp eq i64 %531, 15
  br i1 %532, label %138, label %471

533:                                              ; preds = %92
  %534 = sext i32 %15 to i64
  br label %536

535:                                              ; preds = %536, %92
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %10) #8
  ret void

536:                                              ; preds = %533, %536
  %537 = phi i64 [ 0, %533 ], [ %596, %536 ]
  %538 = phi i32 [ 0, %533 ], [ %597, %536 ]
  %539 = add nsw i64 %537, %534
  %540 = add nsw i32 %538, %15
  %541 = xor i64 %537, -1
  %542 = xor i32 %538, -1
  %543 = add nsw i64 %534, %541
  %544 = add nsw i32 %15, %542
  %545 = getelementptr inbounds i32, i32* %19, i64 %539
  %546 = load i32, i32* %545, align 4
  %547 = getelementptr inbounds i32, i32* %19, i64 %543
  %548 = load i32, i32* %547, align 4
  %549 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %104, align 8
  %550 = sext i32 %548 to i64
  %551 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %549, i64 %550, i32 0
  %552 = load double, double* %551, align 8
  %553 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %549, i64 %550, i32 1
  %554 = load double, double* %553, align 8
  %555 = sext i32 %546 to i64
  %556 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %549, i64 %555, i32 0
  %557 = load double, double* %556, align 8
  %558 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %549, i64 %555, i32 1
  %559 = load double, double* %558, align 8
  %560 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %539, i32 1
  %561 = load double, double* %560, align 8
  %562 = fmul nsz double %557, %561
  %563 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %539, i32 0
  %564 = load double, double* %563, align 8
  %565 = fmul nsz double %559, %564
  %566 = fsub nsz double %562, %565
  %567 = shl nsw i32 %544, 1
  %568 = sext i32 %567 to i64
  %569 = mul nsw i64 %26, %568
  %570 = add nsw i64 %569, %26
  %571 = getelementptr inbounds double, double* %7, i64 %570
  store double %566, double* %571, align 8
  %572 = load double, double* %563, align 8
  %573 = fmul nsz double %557, %572
  %574 = load double, double* %560, align 8
  %575 = fmul nsz double %559, %574
  %576 = fadd nsz double %573, %575
  %577 = shl nsw i32 %540, 1
  %578 = sext i32 %577 to i64
  %579 = mul nsw i64 %26, %578
  %580 = getelementptr inbounds double, double* %7, i64 %579
  store double %576, double* %580, align 8
  %581 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %543, i32 1
  %582 = load double, double* %581, align 8
  %583 = fmul nsz double %552, %582
  %584 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %543, i32 0
  %585 = load double, double* %584, align 8
  %586 = fmul nsz double %554, %585
  %587 = fsub nsz double %583, %586
  %588 = add nsw i64 %579, %26
  %589 = getelementptr inbounds double, double* %7, i64 %588
  store double %587, double* %589, align 8
  %590 = load double, double* %584, align 8
  %591 = fmul nsz double %552, %590
  %592 = load double, double* %581, align 8
  %593 = fmul nsz double %554, %592
  %594 = fadd nsz double %591, %593
  %595 = getelementptr inbounds double, double* %7, i64 %569
  store double %594, double* %595, align 8
  %596 = add nuw nsw i64 %537, 1
  %597 = add nuw nsw i32 %538, 1
  %598 = icmp slt i64 %596, %534
  br i1 %598, label %536, label %535
}

; Function Attrs: nounwind ssp uwtable
define internal void @monolithic_fft(%struct.AVTXContext* nocapture readonly, i8*, i8* nocapture readonly, i64) #0 {
  %5 = bitcast i8* %2 to %struct.AVComplexDouble*
  %6 = bitcast i8* %1 to %struct.AVComplexDouble*
  %7 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = or i32 %8, 1
  %10 = tail call i32 @llvm.ctlz.i32(i32 %9, i1 true), !range !3
  %11 = xor i32 %10, 31
  %12 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %25

16:                                               ; preds = %4
  %17 = icmp sgt i32 %8, 0
  br i1 %17, label %18, label %92

18:                                               ; preds = %16
  %19 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  %20 = zext i32 %8 to i64
  %21 = and i64 %20, 1
  %22 = icmp eq i32 %8, 1
  br i1 %22, label %80, label %23

23:                                               ; preds = %18
  %24 = sub nsw i64 %20, %21
  br label %57

25:                                               ; preds = %4
  %26 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 10
  %27 = load i32*, i32** %26, align 8
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  br label %30

30:                                               ; preds = %52, %25
  %31 = phi i32 [ %28, %25 ], [ %55, %52 ]
  %32 = phi i32* [ %27, %25 ], [ %53, %52 ]
  %33 = sext i32 %31 to i64
  %34 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %6, i64 %33, i32 0
  %35 = bitcast double* %34 to <2 x double>*
  %36 = load <2 x double>, <2 x double>* %35, align 8
  %37 = load i32*, i32** %29, align 8
  %38 = getelementptr inbounds i32, i32* %37, i64 %33
  %39 = load i32, i32* %38, align 4
  br label %40

40:                                               ; preds = %40, %30
  %41 = phi i32 [ %39, %30 ], [ %50, %40 ]
  %42 = phi <2 x double> [ %36, %30 ], [ %46, %40 ]
  %43 = sext i32 %41 to i64
  %44 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %6, i64 %43, i32 0
  %45 = bitcast double* %44 to <2 x double>*
  %46 = load <2 x double>, <2 x double>* %45, align 8
  %47 = bitcast double* %44 to <2 x double>*
  store <2 x double> %42, <2 x double>* %47, align 8
  %48 = load i32*, i32** %29, align 8
  %49 = getelementptr inbounds i32, i32* %48, i64 %43
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, %31
  br i1 %51, label %52, label %40

52:                                               ; preds = %40
  %53 = getelementptr inbounds i32, i32* %32, i64 1
  %54 = bitcast double* %34 to <2 x double>*
  store <2 x double> %46, <2 x double>* %54, align 8
  %55 = load i32, i32* %53, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %92, label %30

57:                                               ; preds = %57, %23
  %58 = phi i64 [ 0, %23 ], [ %77, %57 ]
  %59 = phi i64 [ %24, %23 ], [ %78, %57 ]
  %60 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %6, i64 %58
  %61 = load i32*, i32** %19, align 8
  %62 = getelementptr inbounds i32, i32* %61, i64 %58
  %63 = load i32, i32* %62, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %64
  %66 = bitcast %struct.AVComplexDouble* %60 to i8*
  %67 = bitcast %struct.AVComplexDouble* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 16, i1 false)
  %68 = or i64 %58, 1
  %69 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %6, i64 %68
  %70 = load i32*, i32** %19, align 8
  %71 = getelementptr inbounds i32, i32* %70, i64 %68
  %72 = load i32, i32* %71, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %73
  %75 = bitcast %struct.AVComplexDouble* %69 to i8*
  %76 = bitcast %struct.AVComplexDouble* %74 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 16, i1 false)
  %77 = add nuw nsw i64 %58, 2
  %78 = add i64 %59, -2
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %57

80:                                               ; preds = %57, %18
  %81 = phi i64 [ 0, %18 ], [ %77, %57 ]
  %82 = icmp eq i64 %21, 0
  br i1 %82, label %92, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %6, i64 %81
  %85 = load i32*, i32** %19, align 8
  %86 = getelementptr inbounds i32, i32* %85, i64 %81
  %87 = load i32, i32* %86, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %88
  %90 = bitcast %struct.AVComplexDouble* %84 to i8*
  %91 = bitcast %struct.AVComplexDouble* %89 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 16, i1 false)
  br label %92

92:                                               ; preds = %52, %83, %80, %16
  %93 = zext i32 %11 to i64
  %94 = getelementptr inbounds [18 x void (%struct.AVComplexDouble*)*], [18 x void (%struct.AVComplexDouble*)*]* @fft_dispatch, i64 0, i64 %93
  %95 = load void (%struct.AVComplexDouble*)*, void (%struct.AVComplexDouble*)** %94, align 8
  tail call void %95(%struct.AVComplexDouble* %6) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @monolithic_imdct(%struct.AVTXContext* nocapture readonly, i8*, i8* nocapture readonly, i64) #0 {
  %5 = bitcast i8* %1 to %struct.AVComplexDouble*
  %6 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 6
  %7 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %6, align 8
  %8 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = ashr i32 %9, 1
  %11 = bitcast i8* %2 to double*
  %12 = or i32 %9, 1
  %13 = tail call i32 @llvm.ctlz.i32(i32 %12, i1 true), !range !3
  %14 = xor i32 %13, 31
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [18 x void (%struct.AVComplexDouble*)*], [18 x void (%struct.AVComplexDouble*)*]* @fft_dispatch, i64 0, i64 %15
  %17 = load void (%struct.AVComplexDouble*)*, void (%struct.AVComplexDouble*)** %16, align 8
  %18 = lshr i64 %3, 3
  %19 = shl i32 %9, 1
  %20 = add nsw i32 %19, -1
  %21 = sext i32 %20 to i64
  %22 = mul nsw i64 %18, %21
  %23 = getelementptr inbounds double, double* %11, i64 %22
  %24 = icmp sgt i32 %9, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %4
  tail call void %17(%struct.AVComplexDouble* %5) #8
  br label %67

26:                                               ; preds = %4
  %27 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  %28 = zext i32 %9 to i64
  br label %33

29:                                               ; preds = %33
  tail call void %17(%struct.AVComplexDouble* %5) #8
  %30 = icmp sgt i32 %9, 1
  br i1 %30, label %31, label %67

31:                                               ; preds = %29
  %32 = sext i32 %10 to i64
  br label %68

33:                                               ; preds = %33, %26
  %34 = phi i64 [ 0, %26 ], [ %65, %33 ]
  %35 = mul nsw i64 %34, -2
  %36 = mul nsw i64 %18, %35
  %37 = getelementptr inbounds double, double* %23, i64 %36
  %38 = load double, double* %37, align 8
  %39 = shl nuw nsw i64 %34, 1
  %40 = mul nuw nsw i64 %18, %39
  %41 = getelementptr inbounds double, double* %11, i64 %40
  %42 = load double, double* %41, align 8
  %43 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %34, i32 0
  %44 = load double, double* %43, align 8
  %45 = fmul nsz double %38, %44
  %46 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %34, i32 1
  %47 = load double, double* %46, align 8
  %48 = fmul nsz double %42, %47
  %49 = fsub nsz double %45, %48
  %50 = load i32*, i32** %27, align 8
  %51 = getelementptr inbounds i32, i32* %50, i64 %34
  %52 = load i32, i32* %51, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %53, i32 0
  store double %49, double* %54, align 8
  %55 = load double, double* %46, align 8
  %56 = fmul nsz double %38, %55
  %57 = load double, double* %43, align 8
  %58 = fmul nsz double %42, %57
  %59 = fadd nsz double %56, %58
  %60 = load i32*, i32** %27, align 8
  %61 = getelementptr inbounds i32, i32* %60, i64 %34
  %62 = load i32, i32* %61, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %63, i32 1
  store double %59, double* %64, align 8
  %65 = add nuw nsw i64 %34, 1
  %66 = icmp eq i64 %65, %28
  br i1 %66, label %29, label %33

67:                                               ; preds = %68, %25, %29
  ret void

68:                                               ; preds = %31, %68
  %69 = phi i64 [ 0, %31 ], [ %105, %68 ]
  %70 = add nsw i64 %69, %32
  %71 = xor i64 %69, -1
  %72 = add nsw i64 %32, %71
  %73 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %72, i32 1
  %74 = load double, double* %73, align 8
  %75 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %72, i32 0
  %76 = load double, double* %75, align 8
  %77 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %70, i32 1
  %78 = load double, double* %77, align 8
  %79 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %5, i64 %70, i32 0
  %80 = load double, double* %79, align 8
  %81 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %72, i32 1
  %82 = load double, double* %81, align 8
  %83 = fmul nsz double %74, %82
  %84 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %72, i32 0
  %85 = load double, double* %84, align 8
  %86 = fmul nsz double %76, %85
  %87 = fsub nsz double %83, %86
  store double %87, double* %75, align 8
  %88 = load double, double* %84, align 8
  %89 = fmul nsz double %74, %88
  %90 = load double, double* %81, align 8
  %91 = fmul nsz double %76, %90
  %92 = fadd nsz double %89, %91
  store double %92, double* %77, align 8
  %93 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %70, i32 1
  %94 = load double, double* %93, align 8
  %95 = fmul nsz double %78, %94
  %96 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %7, i64 %70, i32 0
  %97 = load double, double* %96, align 8
  %98 = fmul nsz double %80, %97
  %99 = fsub nsz double %95, %98
  store double %99, double* %79, align 8
  %100 = load double, double* %96, align 8
  %101 = fmul nsz double %78, %100
  %102 = load double, double* %93, align 8
  %103 = fmul nsz double %80, %102
  %104 = fadd nsz double %101, %103
  store double %104, double* %73, align 8
  %105 = add nuw nsw i64 %69, 1
  %106 = icmp slt i64 %105, %32
  br i1 %106, label %68, label %67
}

; Function Attrs: nounwind ssp uwtable
define internal void @monolithic_mdct(%struct.AVTXContext* nocapture readonly, i8*, i8* nocapture readonly, i64) #0 {
  %5 = bitcast i8* %2 to double*
  %6 = bitcast i8* %1 to double*
  %7 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 6
  %8 = load %struct.AVComplexDouble*, %struct.AVComplexDouble** %7, align 8
  %9 = bitcast i8* %1 to %struct.AVComplexDouble*
  %10 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = mul nsw i32 %11, 3
  %13 = ashr i32 %11, 1
  %14 = or i32 %11, 1
  %15 = tail call i32 @llvm.ctlz.i32(i32 %14, i1 true), !range !3
  %16 = xor i32 %15, 31
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds [18 x void (%struct.AVComplexDouble*)*], [18 x void (%struct.AVComplexDouble*)*]* @fft_dispatch, i64 0, i64 %17
  %19 = load void (%struct.AVComplexDouble*)*, void (%struct.AVComplexDouble*)** %18, align 8
  %20 = lshr i64 %3, 3
  %21 = icmp sgt i32 %11, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %4
  tail call void %19(%struct.AVComplexDouble* %9) #8
  br label %102

23:                                               ; preds = %4
  %24 = mul nsw i32 %11, 5
  %25 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  %26 = sext i32 %11 to i64
  %27 = sext i32 %12 to i64
  %28 = zext i32 %11 to i64
  br label %33

29:                                               ; preds = %73
  tail call void %19(%struct.AVComplexDouble* %9) #8
  %30 = icmp sgt i32 %11, 1
  br i1 %30, label %31, label %102

31:                                               ; preds = %29
  %32 = sext i32 %13 to i64
  br label %103

33:                                               ; preds = %73, %23
  %34 = phi i64 [ 0, %23 ], [ %99, %73 ]
  %35 = phi i32 [ 0, %23 ], [ %100, %73 ]
  %36 = shl nuw nsw i64 %34, 1
  %37 = shl nuw nsw i32 %35, 1
  %38 = icmp slt i64 %36, %26
  %39 = add nsw i64 %36, %26
  %40 = getelementptr inbounds double, double* %5, i64 %39
  %41 = load double, double* %40, align 8
  %42 = xor i32 %37, -1
  br i1 %38, label %43, label %57

43:                                               ; preds = %33
  %44 = add i32 %11, %42
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double, double* %5, i64 %45
  %47 = load double, double* %46, align 8
  %48 = add nsw i64 %36, %27
  %49 = getelementptr inbounds double, double* %5, i64 %48
  %50 = load double, double* %49, align 8
  %51 = add i32 %12, %42
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds double, double* %5, i64 %52
  %54 = load double, double* %53, align 8
  %55 = fsub nsz double -0.000000e+00, %54
  %56 = fsub nsz double %55, %50
  br label %73

57:                                               ; preds = %33
  %58 = add i32 %24, %42
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds double, double* %5, i64 %59
  %61 = load double, double* %60, align 8
  %62 = fsub nsz double -0.000000e+00, %61
  %63 = trunc i64 %36 to i32
  %64 = sub i32 %63, %11
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds double, double* %5, i64 %65
  %67 = load double, double* %66, align 8
  %68 = add i32 %12, %42
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds double, double* %5, i64 %69
  %71 = load double, double* %70, align 8
  %72 = fsub nsz double %67, %71
  br label %73

73:                                               ; preds = %43, %57
  %74 = phi double [ %47, %43 ], [ %62, %57 ]
  %75 = phi double [ %56, %43 ], [ %72, %57 ]
  %76 = fsub nsz double %74, %41
  %77 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %34, i32 0
  %78 = load double, double* %77, align 8
  %79 = fmul nsz double %76, %78
  %80 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %34, i32 1
  %81 = load double, double* %80, align 8
  %82 = fmul nsz double %75, %81
  %83 = fsub nsz double %79, %82
  %84 = load i32*, i32** %25, align 8
  %85 = getelementptr inbounds i32, i32* %84, i64 %34
  %86 = load i32, i32* %85, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %87, i32 1
  store double %83, double* %88, align 8
  %89 = load double, double* %80, align 8
  %90 = fmul nsz double %76, %89
  %91 = load double, double* %77, align 8
  %92 = fmul nsz double %75, %91
  %93 = fadd nsz double %90, %92
  %94 = load i32*, i32** %25, align 8
  %95 = getelementptr inbounds i32, i32* %94, i64 %34
  %96 = load i32, i32* %95, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %97, i32 0
  store double %93, double* %98, align 8
  %99 = add nuw nsw i64 %34, 1
  %100 = add nuw nsw i32 %35, 1
  %101 = icmp eq i64 %99, %28
  br i1 %101, label %29, label %33

102:                                              ; preds = %103, %22, %29
  ret void

103:                                              ; preds = %31, %103
  %104 = phi i64 [ 0, %31 ], [ %156, %103 ]
  %105 = phi i32 [ 0, %31 ], [ %157, %103 ]
  %106 = add nsw i64 %104, %32
  %107 = add nsw i32 %105, %13
  %108 = xor i64 %104, -1
  %109 = xor i32 %105, -1
  %110 = add nsw i64 %32, %108
  %111 = add nsw i32 %13, %109
  %112 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %110, i32 0
  %113 = load double, double* %112, align 8
  %114 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %110, i32 1
  %115 = load double, double* %114, align 8
  %116 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %106, i32 0
  %117 = load double, double* %116, align 8
  %118 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %9, i64 %106, i32 1
  %119 = load double, double* %118, align 8
  %120 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %106, i32 1
  %121 = load double, double* %120, align 8
  %122 = fmul nsz double %117, %121
  %123 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %106, i32 0
  %124 = load double, double* %123, align 8
  %125 = fmul nsz double %119, %124
  %126 = fsub nsz double %122, %125
  %127 = shl nsw i32 %111, 1
  %128 = sext i32 %127 to i64
  %129 = mul nsw i64 %20, %128
  %130 = add nsw i64 %129, %20
  %131 = getelementptr inbounds double, double* %6, i64 %130
  store double %126, double* %131, align 8
  %132 = load double, double* %123, align 8
  %133 = fmul nsz double %117, %132
  %134 = load double, double* %120, align 8
  %135 = fmul nsz double %119, %134
  %136 = fadd nsz double %133, %135
  %137 = shl nsw i32 %107, 1
  %138 = sext i32 %137 to i64
  %139 = mul nsw i64 %20, %138
  %140 = getelementptr inbounds double, double* %6, i64 %139
  store double %136, double* %140, align 8
  %141 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %110, i32 1
  %142 = load double, double* %141, align 8
  %143 = fmul nsz double %113, %142
  %144 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %8, i64 %110, i32 0
  %145 = load double, double* %144, align 8
  %146 = fmul nsz double %115, %145
  %147 = fsub nsz double %143, %146
  %148 = add nsw i64 %139, %20
  %149 = getelementptr inbounds double, double* %6, i64 %148
  store double %147, double* %149, align 8
  %150 = load double, double* %144, align 8
  %151 = fmul nsz double %113, %150
  %152 = load double, double* %141, align 8
  %153 = fmul nsz double %115, %152
  %154 = fadd nsz double %151, %153
  %155 = getelementptr inbounds double, double* %6, i64 %129
  store double %154, double* %155, align 8
  %156 = add nuw nsw i64 %104, 1
  %157 = add nuw nsw i32 %105, 1
  %158 = icmp slt i64 %156, %32
  br i1 %158, label %103, label %102
}

declare i32 @ff_tx_gen_ptwo_revtab(%struct.AVTXContext*, i32) local_unnamed_addr #2

declare i32 @ff_tx_gen_ptwo_inplace_revtab_idx(%struct.AVTXContext*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.cos.f64(double) #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sin.f64(double) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft2(%struct.AVComplexDouble* nocapture) #5 {
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1, i32 0
  %3 = bitcast %struct.AVComplexDouble* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = bitcast double* %2 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = fsub nsz <2 x double> %4, %6
  %8 = fadd nsz <2 x double> %4, %6
  %9 = bitcast %struct.AVComplexDouble* %0 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 8
  %10 = bitcast double* %2 to <2 x double>*
  store <2 x double> %7, <2 x double>* %10, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft4(%struct.AVComplexDouble* nocapture) #5 {
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1, i32 0
  %3 = bitcast %struct.AVComplexDouble* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = bitcast double* %2 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 3, i32 0
  %8 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 2, i32 0
  %9 = bitcast double* %8 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = bitcast double* %7 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = shufflevector <2 x double> %4, <2 x double> %12, <2 x i32> <i32 0, i32 2>
  %14 = shufflevector <2 x double> %6, <2 x double> %10, <2 x i32> <i32 0, i32 2>
  %15 = fsub nsz <2 x double> %13, %14
  %16 = fadd nsz <2 x double> %4, %6
  %17 = fadd nsz <2 x double> %12, %10
  %18 = shufflevector <2 x double> %10, <2 x double> %4, <2 x i32> <i32 1, i32 3>
  %19 = shufflevector <2 x double> %12, <2 x double> %6, <2 x i32> <i32 1, i32 3>
  %20 = fsub nsz <2 x double> %18, %19
  %21 = shufflevector <2 x double> %15, <2 x double> %20, <2 x i32> <i32 0, i32 3>
  %22 = shufflevector <2 x double> %20, <2 x double> %15, <2 x i32> <i32 0, i32 3>
  %23 = fsub nsz <2 x double> %21, %22
  %24 = bitcast double* %7 to <2 x double>*
  store <2 x double> %23, <2 x double>* %24, align 8
  %25 = fadd nsz <2 x double> %15, %20
  %26 = bitcast double* %2 to <2 x double>*
  store <2 x double> %25, <2 x double>* %26, align 8
  %27 = fsub nsz <2 x double> %16, %17
  %28 = bitcast double* %8 to <2 x double>*
  store <2 x double> %27, <2 x double>* %28, align 8
  %29 = fadd nsz <2 x double> %16, %17
  %30 = bitcast %struct.AVComplexDouble* %0 to <2 x double>*
  store <2 x double> %29, <2 x double>* %30, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft8(%struct.AVComplexDouble*) #5 {
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1, i32 0
  %3 = bitcast %struct.AVComplexDouble* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = bitcast double* %2 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 3, i32 0
  %8 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 2, i32 0
  %9 = bitcast double* %8 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = bitcast double* %7 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = shufflevector <2 x double> %4, <2 x double> %12, <2 x i32> <i32 0, i32 2>
  %14 = shufflevector <2 x double> %6, <2 x double> %10, <2 x i32> <i32 0, i32 2>
  %15 = fsub nsz <2 x double> %13, %14
  %16 = fadd nsz <2 x double> %4, %6
  %17 = fadd nsz <2 x double> %12, %10
  %18 = shufflevector <2 x double> %10, <2 x double> %4, <2 x i32> <i32 1, i32 3>
  %19 = shufflevector <2 x double> %12, <2 x double> %6, <2 x i32> <i32 1, i32 3>
  %20 = fsub nsz <2 x double> %18, %19
  %21 = shufflevector <2 x double> %15, <2 x double> %20, <2 x i32> <i32 0, i32 3>
  %22 = shufflevector <2 x double> %20, <2 x double> %15, <2 x i32> <i32 0, i32 3>
  %23 = fsub nsz <2 x double> %21, %22
  %24 = fadd nsz <2 x double> %15, %20
  %25 = fsub nsz <2 x double> %16, %17
  %26 = fadd nsz <2 x double> %16, %17
  %27 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 4, i32 0
  %28 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 5, i32 0
  %29 = bitcast double* %27 to <2 x double>*
  %30 = load <2 x double>, <2 x double>* %29, align 8
  %31 = bitcast double* %28 to <2 x double>*
  %32 = load <2 x double>, <2 x double>* %31, align 8
  %33 = fadd nsz <2 x double> %30, %32
  %34 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 6, i32 0
  %35 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 7, i32 0
  %36 = bitcast double* %34 to <2 x double>*
  %37 = load <2 x double>, <2 x double>* %36, align 8
  %38 = bitcast double* %35 to <2 x double>*
  %39 = load <2 x double>, <2 x double>* %38, align 8
  %40 = shufflevector <2 x double> %30, <2 x double> %37, <2 x i32> <i32 0, i32 2>
  %41 = shufflevector <2 x double> %32, <2 x double> %39, <2 x i32> <i32 0, i32 2>
  %42 = fsub nsz <2 x double> %40, %41
  %43 = fadd nsz <2 x double> %37, %39
  %44 = shufflevector <2 x double> %30, <2 x double> %37, <2 x i32> <i32 1, i32 3>
  %45 = shufflevector <2 x double> %32, <2 x double> %39, <2 x i32> <i32 1, i32 3>
  %46 = fsub nsz <2 x double> %44, %45
  %47 = fadd nsz <2 x double> %33, %43
  %48 = shufflevector <2 x double> %33, <2 x double> %43, <2 x i32> <i32 1, i32 2>
  %49 = shufflevector <2 x double> %43, <2 x double> %33, <2 x i32> <i32 1, i32 2>
  %50 = fsub nsz <2 x double> %48, %49
  %51 = fsub nsz <2 x double> %25, %50
  %52 = bitcast double* %34 to <2 x double>*
  store <2 x double> %51, <2 x double>* %52, align 8
  %53 = fadd nsz <2 x double> %25, %50
  %54 = bitcast double* %8 to <2 x double>*
  store <2 x double> %53, <2 x double>* %54, align 8
  %55 = fsub nsz <2 x double> %26, %47
  %56 = bitcast double* %27 to <2 x double>*
  store <2 x double> %55, <2 x double>* %56, align 8
  %57 = fadd nsz <2 x double> %26, %47
  %58 = bitcast %struct.AVComplexDouble* %0 to <2 x double>*
  store <2 x double> %57, <2 x double>* %58, align 8
  %59 = fmul nsz <2 x double> %42, <double 0x3FE6A09E667F3BCD, double 0x3FE6A09E667F3BCD>
  %60 = fmul nsz <2 x double> %46, <double 0x3FE6A09E667F3BCD, double 0x3FE6A09E667F3BCD>
  %61 = shufflevector <2 x double> %59, <2 x double> %60, <2 x i32> <i32 1, i32 2>
  %62 = shufflevector <2 x double> %60, <2 x double> %59, <2 x i32> <i32 1, i32 2>
  %63 = fsub nsz <2 x double> %61, %62
  %64 = fadd nsz <2 x double> %59, %60
  %65 = fadd nsz <2 x double> %64, %63
  %66 = fsub nsz <2 x double> %63, %64
  %67 = shufflevector <2 x double> %66, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %68 = fsub nsz <2 x double> %23, %67
  %69 = bitcast double* %35 to <2 x double>*
  store <2 x double> %68, <2 x double>* %69, align 8
  %70 = fadd nsz <2 x double> %23, %67
  %71 = bitcast double* %7 to <2 x double>*
  store <2 x double> %70, <2 x double>* %71, align 8
  %72 = fsub nsz <2 x double> %24, %65
  %73 = bitcast double* %28 to <2 x double>*
  store <2 x double> %72, <2 x double>* %73, align 8
  %74 = fadd nsz <2 x double> %24, %65
  %75 = bitcast double* %2 to <2 x double>*
  store <2 x double> %74, <2 x double>* %75, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft16(%struct.AVComplexDouble*) #5 {
  %2 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @ff_cos_16_double, i64 0, i64 1), align 8
  %3 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @ff_cos_16_double, i64 0, i64 3), align 8
  tail call void @fft8(%struct.AVComplexDouble* %0)
  %4 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 8, i32 0
  %5 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 9, i32 0
  %6 = bitcast double* %4 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 9, i32 1
  %9 = bitcast double* %5 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 11, i32 0
  %12 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 10, i32 0
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 10, i32 1
  %15 = bitcast double* %14 to <2 x double>*
  %16 = load <2 x double>, <2 x double>* %15, align 8
  %17 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 13, i32 1
  %18 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 12, i32 0
  %19 = bitcast double* %18 to <2 x double>*
  %20 = load <2 x double>, <2 x double>* %19, align 8
  %21 = shufflevector <2 x double> %20, <2 x double> %7, <2 x i32> <i32 1, i32 2>
  %22 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 13, i32 0
  %23 = bitcast double* %22 to <2 x double>*
  %24 = load <2 x double>, <2 x double>* %23, align 8
  %25 = shufflevector <2 x double> %24, <2 x double> %10, <2 x i32> <i32 1, i32 2>
  %26 = fadd nsz <2 x double> %21, %25
  %27 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 14, i32 1
  %28 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 15, i32 1
  %29 = load double, double* %28, align 8
  %30 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 15, i32 0
  %31 = bitcast double* %27 to <2 x double>*
  %32 = load <2 x double>, <2 x double>* %31, align 8
  %33 = shufflevector <2 x double> %32, <2 x double> %16, <2 x i32> <i32 0, i32 3>
  %34 = insertelement <2 x double> undef, double %29, i32 0
  %35 = insertelement <2 x double> %34, double %13, i32 1
  %36 = fadd nsz <2 x double> %33, %35
  %37 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 11, i32 1
  %38 = load double, double* %37, align 8
  %39 = shufflevector <2 x double> %7, <2 x double> %20, <2 x i32> <i32 1, i32 2>
  %40 = shufflevector <2 x double> %10, <2 x double> %24, <2 x i32> <i32 1, i32 2>
  %41 = fadd nsz <2 x double> %39, %40
  %42 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 14, i32 0
  %43 = load double, double* %42, align 8
  %44 = shufflevector <2 x double> %16, <2 x double> %32, <2 x i32> <i32 0, i32 3>
  %45 = insertelement <2 x double> undef, double %38, i32 0
  %46 = insertelement <2 x double> %45, double %43, i32 1
  %47 = fadd nsz <2 x double> %44, %46
  %48 = shufflevector <2 x double> %26, <2 x double> %41, <2 x i32> <i32 1, i32 3>
  %49 = shufflevector <2 x double> %36, <2 x double> %47, <2 x i32> <i32 1, i32 3>
  %50 = fsub nsz <2 x double> %48, %49
  %51 = extractelement <2 x double> %50, i32 0
  store double %51, double* %12, align 8
  %52 = fsub nsz <2 x double> %7, %10
  %53 = insertelement <2 x double> %45, double %13, i32 1
  %54 = fsub nsz <2 x double> %16, %53
  %55 = fsub nsz <2 x double> %52, %54
  %56 = bitcast double* %11 to <2 x double>*
  store <2 x double> %55, <2 x double>* %56, align 8
  %57 = fadd nsz <2 x double> %52, %54
  %58 = bitcast double* %5 to <2 x double>*
  store <2 x double> %57, <2 x double>* %58, align 8
  %59 = fadd nsz <2 x double> %41, %47
  %60 = fsub nsz <2 x double> %20, %24
  %61 = insertelement <2 x double> %34, double %43, i32 1
  %62 = fsub nsz <2 x double> %32, %61
  %63 = extractelement <2 x double> %60, i32 1
  %64 = extractelement <2 x double> %62, i32 1
  %65 = fadd nsz double %64, %63
  store double %65, double* %17, align 8
  %66 = fsub nsz <2 x double> %60, %62
  %67 = bitcast double* %30 to <2 x double>*
  store <2 x double> %66, <2 x double>* %67, align 8
  %68 = extractelement <2 x double> %60, i32 0
  %69 = extractelement <2 x double> %62, i32 0
  %70 = fadd nsz double %68, %69
  store double %70, double* %22, align 8
  %71 = shufflevector <2 x double> %41, <2 x double> %26, <2 x i32> <i32 0, i32 2>
  %72 = shufflevector <2 x double> %47, <2 x double> %36, <2 x i32> <i32 0, i32 2>
  %73 = fsub nsz <2 x double> %71, %72
  %74 = fadd nsz <2 x double> %26, %36
  %75 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 0, i32 0
  %76 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 0, i32 1
  %77 = bitcast %struct.AVComplexDouble* %0 to <2 x double>*
  %78 = load <2 x double>, <2 x double>* %77, align 8
  %79 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 4, i32 0
  %80 = bitcast double* %79 to <2 x double>*
  %81 = load <2 x double>, <2 x double>* %80, align 8
  %82 = fadd nsz <2 x double> %74, %59
  %83 = shufflevector <2 x double> %82, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %84 = extractelement <2 x double> %78, i32 0
  %85 = extractelement <2 x double> %82, i32 1
  %86 = fadd nsz double %85, %84
  store double %86, double* %75, align 8
  %87 = fsub nsz <2 x double> %59, %74
  %88 = fsub nsz <2 x double> %81, %87
  %89 = bitcast double* %18 to <2 x double>*
  store <2 x double> %88, <2 x double>* %89, align 8
  %90 = fadd nsz <2 x double> %87, %81
  %91 = bitcast double* %79 to <2 x double>*
  store <2 x double> %90, <2 x double>* %91, align 8
  %92 = fsub nsz <2 x double> %78, %83
  %93 = bitcast double* %4 to <2 x double>*
  store <2 x double> %92, <2 x double>* %93, align 8
  %94 = extractelement <2 x double> %78, i32 1
  %95 = extractelement <2 x double> %82, i32 0
  %96 = fmul nsz <2 x double> %50, <double 0x3FE6A09E667F3BCD, double 0x3FE6A09E667F3BCD>
  %97 = fmul nsz <2 x double> %73, <double 0x3FE6A09E667F3BCD, double 0x3FE6A09E667F3BCD>
  %98 = shufflevector <2 x double> %96, <2 x double> %97, <2 x i32> <i32 1, i32 2>
  %99 = shufflevector <2 x double> %97, <2 x double> %96, <2 x i32> <i32 1, i32 2>
  %100 = fsub nsz <2 x double> %98, %99
  %101 = fadd nsz <2 x double> %96, %97
  %102 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 2, i32 0
  %103 = bitcast double* %102 to <2 x double>*
  %104 = load <2 x double>, <2 x double>* %103, align 8
  %105 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 6, i32 0
  %106 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 6, i32 1
  %107 = load double, double* %106, align 8
  %108 = extractelement <2 x double> %101, i32 0
  %109 = extractelement <2 x double> %100, i32 0
  %110 = fsub nsz double %109, %108
  %111 = fadd nsz <2 x double> %101, %100
  %112 = fsub nsz double %107, %110
  store double %112, double* %27, align 8
  %113 = load double, double* %5, align 8
  %114 = fmul nsz double %2, %113
  %115 = load double, double* %8, align 8
  %116 = fsub nsz double -0.000000e+00, %3
  %117 = fmul nsz double %115, %116
  %118 = fsub nsz double %114, %117
  %119 = fmul nsz double %2, %70
  %120 = fmul nsz double %3, %65
  %121 = fsub nsz double %119, %120
  %122 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 5, i32 1
  %123 = bitcast double* %122 to <2 x double>*
  %124 = load <2 x double>, <2 x double>* %123, align 8
  %125 = insertelement <2 x double> %100, double %121, i32 0
  %126 = insertelement <2 x double> %101, double %118, i32 0
  %127 = fsub nsz <2 x double> %125, %126
  %128 = extractelement <2 x double> %124, i32 1
  %129 = extractelement <2 x double> %127, i32 1
  %130 = insertelement <2 x double> undef, double %128, i32 0
  %131 = insertelement <2 x double> %130, double %110, i32 1
  %132 = insertelement <2 x double> undef, double %129, i32 0
  %133 = insertelement <2 x double> %132, double %107, i32 1
  %134 = fadd nsz <2 x double> %131, %133
  %135 = bitcast double* %105 to <2 x double>*
  store <2 x double> %134, <2 x double>* %135, align 8
  %136 = extractelement <2 x double> %104, i32 1
  %137 = extractelement <2 x double> %111, i32 1
  %138 = fsub nsz double %136, %137
  store double %138, double* %14, align 8
  %139 = fadd nsz <2 x double> %104, %111
  %140 = bitcast double* %102 to <2 x double>*
  store <2 x double> %139, <2 x double>* %140, align 8
  %141 = fmul nsz double %113, %116
  %142 = fmul nsz double %2, %115
  %143 = fadd nsz double %141, %142
  %144 = fmul nsz double %3, %70
  %145 = fmul nsz double %2, %65
  %146 = fadd nsz double %144, %145
  %147 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1, i32 0
  %148 = load double, double* %147, align 8
  %149 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1, i32 1
  %150 = load double, double* %149, align 8
  %151 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 5, i32 0
  %152 = load double, double* %151, align 8
  %153 = fadd nsz double %118, %121
  %154 = fsub nsz double %148, %153
  store double %154, double* %5, align 8
  %155 = insertelement <2 x double> undef, double %95, i32 0
  %156 = insertelement <2 x double> %155, double %148, i32 1
  %157 = insertelement <2 x double> undef, double %94, i32 0
  %158 = insertelement <2 x double> %157, double %153, i32 1
  %159 = fadd nsz <2 x double> %156, %158
  %160 = bitcast double* %76 to <2 x double>*
  store <2 x double> %159, <2 x double>* %160, align 8
  %161 = fsub nsz <2 x double> %124, %127
  %162 = bitcast double* %17 to <2 x double>*
  store <2 x double> %161, <2 x double>* %162, align 8
  %163 = fsub nsz double %143, %146
  %164 = fadd nsz double %143, %146
  %165 = fsub nsz double %152, %163
  store double %165, double* %22, align 8
  %166 = insertelement <2 x double> undef, double %152, i32 0
  %167 = shufflevector <2 x double> %166, <2 x double> %127, <2 x i32> <i32 0, i32 2>
  %168 = insertelement <2 x double> undef, double %163, i32 0
  %169 = shufflevector <2 x double> %168, <2 x double> %124, <2 x i32> <i32 0, i32 2>
  %170 = fadd nsz <2 x double> %167, %169
  %171 = bitcast double* %151 to <2 x double>*
  store <2 x double> %170, <2 x double>* %171, align 8
  %172 = insertelement <2 x double> undef, double %150, i32 0
  %173 = shufflevector <2 x double> %172, <2 x double> %104, <2 x i32> <i32 0, i32 2>
  %174 = insertelement <2 x double> undef, double %164, i32 0
  %175 = shufflevector <2 x double> %174, <2 x double> %111, <2 x i32> <i32 0, i32 2>
  %176 = fsub nsz <2 x double> %173, %175
  %177 = bitcast double* %8 to <2 x double>*
  store <2 x double> %176, <2 x double>* %177, align 8
  %178 = fadd nsz double %150, %164
  store double %178, double* %149, align 8
  %179 = load double, double* %11, align 8
  %180 = fmul nsz double %3, %179
  %181 = load double, double* %37, align 8
  %182 = fsub nsz double -0.000000e+00, %2
  %183 = fmul nsz double %181, %182
  %184 = fsub nsz double %180, %183
  %185 = fmul nsz double %179, %182
  %186 = fmul nsz double %3, %181
  %187 = fadd nsz double %185, %186
  %188 = load double, double* %30, align 8
  %189 = fmul nsz double %3, %188
  %190 = load double, double* %28, align 8
  %191 = fmul nsz double %2, %190
  %192 = fsub nsz double %189, %191
  %193 = fmul nsz double %2, %188
  %194 = fmul nsz double %3, %190
  %195 = fadd nsz double %193, %194
  %196 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 3, i32 0
  %197 = load double, double* %196, align 8
  %198 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 3, i32 1
  %199 = load double, double* %198, align 8
  %200 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 7, i32 0
  %201 = load double, double* %200, align 8
  %202 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 7, i32 1
  %203 = load double, double* %202, align 8
  %204 = fsub nsz double %192, %184
  %205 = fadd nsz double %184, %192
  %206 = fsub nsz double %197, %205
  store double %206, double* %11, align 8
  %207 = fadd nsz double %197, %205
  store double %207, double* %196, align 8
  %208 = fsub nsz double %203, %204
  store double %208, double* %28, align 8
  %209 = fadd nsz double %204, %203
  store double %209, double* %202, align 8
  %210 = fsub nsz double %187, %195
  %211 = fadd nsz double %187, %195
  %212 = fsub nsz double %201, %210
  store double %212, double* %30, align 8
  %213 = fadd nsz double %201, %210
  store double %213, double* %200, align 8
  %214 = fsub nsz double %199, %211
  store double %214, double* %37, align 8
  %215 = fadd nsz double %199, %211
  store double %215, double* %198, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft32(%struct.AVComplexDouble*) #5 {
  tail call void @fft16(%struct.AVComplexDouble* %0)
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 16
  tail call void @fft8(%struct.AVComplexDouble* %2)
  %3 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 24
  tail call void @fft8(%struct.AVComplexDouble* %3)
  tail call fastcc void @pass(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([16 x double], [16 x double]* @ff_cos_32_double, i64 0, i64 0), i32 4)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft64(%struct.AVComplexDouble*) #5 {
  tail call void @fft16(%struct.AVComplexDouble* %0) #8
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 16
  tail call void @fft8(%struct.AVComplexDouble* %2) #8
  %3 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 24
  tail call void @fft8(%struct.AVComplexDouble* %3) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([16 x double], [16 x double]* @ff_cos_32_double, i64 0, i64 0), i32 4) #8
  %4 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 32
  tail call void @fft16(%struct.AVComplexDouble* %4)
  %5 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 48
  tail call void @fft16(%struct.AVComplexDouble* %5)
  tail call fastcc void @pass(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([32 x double], [32 x double]* @ff_cos_64_double, i64 0, i64 0), i32 8)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft128(%struct.AVComplexDouble*) #5 {
  tail call void @fft16(%struct.AVComplexDouble* %0) #8
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 16
  tail call void @fft8(%struct.AVComplexDouble* %2) #8
  %3 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 24
  tail call void @fft8(%struct.AVComplexDouble* %3) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([16 x double], [16 x double]* @ff_cos_32_double, i64 0, i64 0), i32 4) #8
  %4 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 32
  tail call void @fft16(%struct.AVComplexDouble* %4) #8
  %5 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 48
  tail call void @fft16(%struct.AVComplexDouble* %5) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([32 x double], [32 x double]* @ff_cos_64_double, i64 0, i64 0), i32 8) #8
  %6 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 64
  tail call void @fft16(%struct.AVComplexDouble* %6) #8
  %7 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 80
  tail call void @fft8(%struct.AVComplexDouble* %7) #8
  %8 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 88
  tail call void @fft8(%struct.AVComplexDouble* %8) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %6, double* getelementptr inbounds ([16 x double], [16 x double]* @ff_cos_32_double, i64 0, i64 0), i32 4) #8
  %9 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 96
  tail call void @fft16(%struct.AVComplexDouble* %9) #8
  %10 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 112
  tail call void @fft8(%struct.AVComplexDouble* %10) #8
  %11 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 120
  tail call void @fft8(%struct.AVComplexDouble* %11) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %9, double* getelementptr inbounds ([16 x double], [16 x double]* @ff_cos_32_double, i64 0, i64 0), i32 4) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([64 x double], [64 x double]* @ff_cos_128_double, i64 0, i64 0), i32 16)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft256(%struct.AVComplexDouble*) #5 {
  tail call void @fft128(%struct.AVComplexDouble* %0)
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 128
  tail call void @fft16(%struct.AVComplexDouble* %2) #8
  %3 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 144
  tail call void @fft8(%struct.AVComplexDouble* %3) #8
  %4 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 152
  tail call void @fft8(%struct.AVComplexDouble* %4) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %2, double* getelementptr inbounds ([16 x double], [16 x double]* @ff_cos_32_double, i64 0, i64 0), i32 4) #8
  %5 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 160
  tail call void @fft16(%struct.AVComplexDouble* %5) #8
  %6 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 176
  tail call void @fft16(%struct.AVComplexDouble* %6) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %2, double* getelementptr inbounds ([32 x double], [32 x double]* @ff_cos_64_double, i64 0, i64 0), i32 8) #8
  %7 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 192
  tail call void @fft16(%struct.AVComplexDouble* %7) #8
  %8 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 208
  tail call void @fft8(%struct.AVComplexDouble* %8) #8
  %9 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 216
  tail call void @fft8(%struct.AVComplexDouble* %9) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %7, double* getelementptr inbounds ([16 x double], [16 x double]* @ff_cos_32_double, i64 0, i64 0), i32 4) #8
  %10 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 224
  tail call void @fft16(%struct.AVComplexDouble* %10) #8
  %11 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 240
  tail call void @fft16(%struct.AVComplexDouble* %11) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %7, double* getelementptr inbounds ([32 x double], [32 x double]* @ff_cos_64_double, i64 0, i64 0), i32 8) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([128 x double], [128 x double]* @ff_cos_256_double, i64 0, i64 0), i32 32)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft512(%struct.AVComplexDouble*) #5 {
  tail call void @fft256(%struct.AVComplexDouble* %0)
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 256
  tail call void @fft128(%struct.AVComplexDouble* %2)
  %3 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 384
  tail call void @fft128(%struct.AVComplexDouble* %3)
  tail call fastcc void @pass(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([256 x double], [256 x double]* @ff_cos_512_double, i64 0, i64 0), i32 64)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft1024(%struct.AVComplexDouble*) #5 {
  tail call void @fft256(%struct.AVComplexDouble* %0) #8
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 256
  tail call void @fft128(%struct.AVComplexDouble* %2) #8
  %3 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 384
  tail call void @fft128(%struct.AVComplexDouble* %3) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([256 x double], [256 x double]* @ff_cos_512_double, i64 0, i64 0), i32 64) #8
  %4 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 512
  tail call void @fft256(%struct.AVComplexDouble* %4)
  %5 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 768
  tail call void @fft256(%struct.AVComplexDouble* %5)
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([512 x double], [512 x double]* @ff_cos_1024_double, i64 0, i64 0), i32 128)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft2048(%struct.AVComplexDouble*) #5 {
  tail call void @fft256(%struct.AVComplexDouble* %0) #8
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 256
  tail call void @fft128(%struct.AVComplexDouble* %2) #8
  %3 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 384
  tail call void @fft128(%struct.AVComplexDouble* %3) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([256 x double], [256 x double]* @ff_cos_512_double, i64 0, i64 0), i32 64) #8
  %4 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 512
  tail call void @fft256(%struct.AVComplexDouble* %4) #8
  %5 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 768
  tail call void @fft256(%struct.AVComplexDouble* %5) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([512 x double], [512 x double]* @ff_cos_1024_double, i64 0, i64 0), i32 128) #8
  %6 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1024
  tail call void @fft256(%struct.AVComplexDouble* %6) #8
  %7 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1280
  tail call void @fft128(%struct.AVComplexDouble* %7) #8
  %8 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1408
  tail call void @fft128(%struct.AVComplexDouble* %8) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %6, double* getelementptr inbounds ([256 x double], [256 x double]* @ff_cos_512_double, i64 0, i64 0), i32 64) #8
  %9 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1536
  tail call void @fft256(%struct.AVComplexDouble* %9) #8
  %10 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1792
  tail call void @fft128(%struct.AVComplexDouble* %10) #8
  %11 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1920
  tail call void @fft128(%struct.AVComplexDouble* %11) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %9, double* getelementptr inbounds ([256 x double], [256 x double]* @ff_cos_512_double, i64 0, i64 0), i32 64) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([1024 x double], [1024 x double]* @ff_cos_2048_double, i64 0, i64 0), i32 256)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft4096(%struct.AVComplexDouble*) #5 {
  tail call void @fft2048(%struct.AVComplexDouble* %0)
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 2048
  tail call void @fft256(%struct.AVComplexDouble* %2) #8
  %3 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 2304
  tail call void @fft128(%struct.AVComplexDouble* %3) #8
  %4 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 2432
  tail call void @fft128(%struct.AVComplexDouble* %4) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %2, double* getelementptr inbounds ([256 x double], [256 x double]* @ff_cos_512_double, i64 0, i64 0), i32 64) #8
  %5 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 2560
  tail call void @fft256(%struct.AVComplexDouble* %5) #8
  %6 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 2816
  tail call void @fft256(%struct.AVComplexDouble* %6) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %2, double* getelementptr inbounds ([512 x double], [512 x double]* @ff_cos_1024_double, i64 0, i64 0), i32 128) #8
  %7 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 3072
  tail call void @fft256(%struct.AVComplexDouble* %7) #8
  %8 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 3328
  tail call void @fft128(%struct.AVComplexDouble* %8) #8
  %9 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 3456
  tail call void @fft128(%struct.AVComplexDouble* %9) #8
  tail call fastcc void @pass(%struct.AVComplexDouble* %7, double* getelementptr inbounds ([256 x double], [256 x double]* @ff_cos_512_double, i64 0, i64 0), i32 64) #8
  %10 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 3584
  tail call void @fft256(%struct.AVComplexDouble* %10) #8
  %11 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 3840
  tail call void @fft256(%struct.AVComplexDouble* %11) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %7, double* getelementptr inbounds ([512 x double], [512 x double]* @ff_cos_1024_double, i64 0, i64 0), i32 128) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([2048 x double], [2048 x double]* @ff_cos_4096_double, i64 0, i64 0), i32 512)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft8192(%struct.AVComplexDouble*) #5 {
  tail call void @fft4096(%struct.AVComplexDouble* %0)
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 4096
  tail call void @fft2048(%struct.AVComplexDouble* %2)
  %3 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 6144
  tail call void @fft2048(%struct.AVComplexDouble* %3)
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([4096 x double], [4096 x double]* @ff_cos_8192_double, i64 0, i64 0), i32 1024)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft16384(%struct.AVComplexDouble*) #5 {
  tail call void @fft4096(%struct.AVComplexDouble* %0) #8
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 4096
  tail call void @fft2048(%struct.AVComplexDouble* %2) #8
  %3 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 6144
  tail call void @fft2048(%struct.AVComplexDouble* %3) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([4096 x double], [4096 x double]* @ff_cos_8192_double, i64 0, i64 0), i32 1024) #8
  %4 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 8192
  tail call void @fft4096(%struct.AVComplexDouble* %4)
  %5 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 12288
  tail call void @fft4096(%struct.AVComplexDouble* %5)
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([8192 x double], [8192 x double]* @ff_cos_16384_double, i64 0, i64 0), i32 2048)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft32768(%struct.AVComplexDouble*) #5 {
  tail call void @fft4096(%struct.AVComplexDouble* %0) #8
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 4096
  tail call void @fft2048(%struct.AVComplexDouble* %2) #8
  %3 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 6144
  tail call void @fft2048(%struct.AVComplexDouble* %3) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([4096 x double], [4096 x double]* @ff_cos_8192_double, i64 0, i64 0), i32 1024) #8
  %4 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 8192
  tail call void @fft4096(%struct.AVComplexDouble* %4) #8
  %5 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 12288
  tail call void @fft4096(%struct.AVComplexDouble* %5) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([8192 x double], [8192 x double]* @ff_cos_16384_double, i64 0, i64 0), i32 2048) #8
  %6 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 16384
  tail call void @fft4096(%struct.AVComplexDouble* %6) #8
  %7 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 20480
  tail call void @fft2048(%struct.AVComplexDouble* %7) #8
  %8 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 22528
  tail call void @fft2048(%struct.AVComplexDouble* %8) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %6, double* getelementptr inbounds ([4096 x double], [4096 x double]* @ff_cos_8192_double, i64 0, i64 0), i32 1024) #8
  %9 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 24576
  tail call void @fft4096(%struct.AVComplexDouble* %9) #8
  %10 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 28672
  tail call void @fft2048(%struct.AVComplexDouble* %10) #8
  %11 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 30720
  tail call void @fft2048(%struct.AVComplexDouble* %11) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %9, double* getelementptr inbounds ([4096 x double], [4096 x double]* @ff_cos_8192_double, i64 0, i64 0), i32 1024) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([16384 x double], [16384 x double]* @ff_cos_32768_double, i64 0, i64 0), i32 4096)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft65536(%struct.AVComplexDouble*) #5 {
  tail call void @fft32768(%struct.AVComplexDouble* %0)
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 32768
  tail call void @fft16384(%struct.AVComplexDouble* %2)
  %3 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 49152
  tail call void @fft16384(%struct.AVComplexDouble* %3)
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([32768 x double], [32768 x double]* @ff_cos_65536_double, i64 0, i64 0), i32 8192)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft131072(%struct.AVComplexDouble*) #5 {
  tail call void @fft32768(%struct.AVComplexDouble* %0) #8
  %2 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 32768
  tail call void @fft4096(%struct.AVComplexDouble* %2) #8
  %3 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 36864
  tail call void @fft2048(%struct.AVComplexDouble* %3) #8
  %4 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 38912
  tail call void @fft2048(%struct.AVComplexDouble* %4) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %2, double* getelementptr inbounds ([4096 x double], [4096 x double]* @ff_cos_8192_double, i64 0, i64 0), i32 1024) #8
  %5 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 40960
  tail call void @fft4096(%struct.AVComplexDouble* %5) #8
  %6 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 45056
  tail call void @fft4096(%struct.AVComplexDouble* %6) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %2, double* getelementptr inbounds ([8192 x double], [8192 x double]* @ff_cos_16384_double, i64 0, i64 0), i32 2048) #8
  %7 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 49152
  tail call void @fft4096(%struct.AVComplexDouble* %7) #8
  %8 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 53248
  tail call void @fft2048(%struct.AVComplexDouble* %8) #8
  %9 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 55296
  tail call void @fft2048(%struct.AVComplexDouble* %9) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %7, double* getelementptr inbounds ([4096 x double], [4096 x double]* @ff_cos_8192_double, i64 0, i64 0), i32 1024) #8
  %10 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 57344
  tail call void @fft4096(%struct.AVComplexDouble* %10) #8
  %11 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 61440
  tail call void @fft4096(%struct.AVComplexDouble* %11) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %7, double* getelementptr inbounds ([8192 x double], [8192 x double]* @ff_cos_16384_double, i64 0, i64 0), i32 2048) #8
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([32768 x double], [32768 x double]* @ff_cos_65536_double, i64 0, i64 0), i32 8192) #8
  %12 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 65536
  tail call void @fft32768(%struct.AVComplexDouble* %12)
  %13 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 98304
  tail call void @fft32768(%struct.AVComplexDouble* %13)
  tail call fastcc void @pass_big(%struct.AVComplexDouble* %0, double* getelementptr inbounds ([65536 x double], [65536 x double]* @ff_cos_131072_double, i64 0, i64 0), i32 16384)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @pass(%struct.AVComplexDouble* nocapture, double* nocapture readonly, i32) unnamed_addr #5 {
  %4 = shl i32 %2, 1
  %5 = shl i32 %2, 2
  %6 = mul i32 %2, 6
  %7 = sext i32 %4 to i64
  %8 = getelementptr inbounds double, double* %1, i64 %7
  %9 = add i32 %2, -1
  %10 = sext i32 %5 to i64
  %11 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %10, i32 0
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %10, i32 1
  %14 = load double, double* %13, align 8
  %15 = sext i32 %6 to i64
  %16 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %15, i32 0
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %15, i32 1
  %19 = load double, double* %18, align 8
  %20 = fadd nsz double %12, %17
  %21 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 0, i32 0
  %22 = load double, double* %21, align 8
  %23 = fsub nsz double %22, %20
  store double %23, double* %11, align 8
  %24 = load double, double* %21, align 8
  %25 = fadd nsz double %20, %24
  store double %25, double* %21, align 8
  %26 = insertelement <2 x double> undef, double %14, i32 0
  %27 = insertelement <2 x double> %26, double %17, i32 1
  %28 = insertelement <2 x double> undef, double %19, i32 0
  %29 = insertelement <2 x double> %28, double %12, i32 1
  %30 = fsub nsz <2 x double> %27, %29
  %31 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %7, i32 0
  %32 = bitcast double* %31 to <2 x double>*
  %33 = load <2 x double>, <2 x double>* %32, align 8
  %34 = fsub nsz <2 x double> %33, %30
  %35 = bitcast double* %16 to <2 x double>*
  store <2 x double> %34, <2 x double>* %35, align 8
  %36 = fadd nsz double %14, %19
  %37 = bitcast double* %31 to <2 x double>*
  %38 = load <2 x double>, <2 x double>* %37, align 8
  %39 = fadd nsz <2 x double> %30, %38
  %40 = bitcast double* %31 to <2 x double>*
  store <2 x double> %39, <2 x double>* %40, align 8
  %41 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 0, i32 1
  %42 = load double, double* %41, align 8
  %43 = fsub nsz double %42, %36
  store double %43, double* %13, align 8
  %44 = load double, double* %41, align 8
  %45 = fadd nsz double %36, %44
  store double %45, double* %41, align 8
  %46 = or i32 %5, 1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %47, i32 0
  %49 = load double, double* %48, align 8
  %50 = getelementptr inbounds double, double* %1, i64 1
  %51 = load double, double* %50, align 8
  %52 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %47, i32 1
  %53 = load double, double* %52, align 8
  %54 = getelementptr inbounds double, double* %8, i64 -1
  %55 = load double, double* %54, align 8
  %56 = fsub nsz double -0.000000e+00, %55
  %57 = or i32 %6, 1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %58, i32 0
  %60 = load double, double* %59, align 8
  %61 = insertelement <2 x double> undef, double %51, i32 0
  %62 = shufflevector <2 x double> %61, <2 x double> undef, <2 x i32> zeroinitializer
  %63 = insertelement <2 x double> undef, double %53, i32 0
  %64 = insertelement <2 x double> %63, double %60, i32 1
  %65 = fmul nsz <2 x double> %62, %64
  %66 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %58, i32 1
  %67 = load double, double* %66, align 8
  %68 = insertelement <2 x double> undef, double %49, i32 0
  %69 = insertelement <2 x double> %68, double %55, i32 1
  %70 = insertelement <2 x double> undef, double %56, i32 0
  %71 = insertelement <2 x double> %70, double %67, i32 1
  %72 = fmul nsz <2 x double> %69, %71
  %73 = fadd nsz <2 x double> %65, %72
  %74 = fsub nsz <2 x double> %65, %72
  %75 = shufflevector <2 x double> %73, <2 x double> %74, <2 x i32> <i32 0, i32 3>
  %76 = insertelement <2 x double> undef, double %55, i32 0
  %77 = insertelement <2 x double> %76, double %49, i32 1
  %78 = insertelement <2 x double> undef, double %60, i32 0
  %79 = insertelement <2 x double> %78, double %51, i32 1
  %80 = fmul nsz <2 x double> %77, %79
  %81 = insertelement <2 x double> %61, double %53, i32 1
  %82 = insertelement <2 x double> undef, double %67, i32 0
  %83 = insertelement <2 x double> %82, double %56, i32 1
  %84 = fmul nsz <2 x double> %81, %83
  %85 = fadd nsz <2 x double> %80, %84
  %86 = fsub nsz <2 x double> %80, %84
  %87 = shufflevector <2 x double> %85, <2 x double> %86, <2 x i32> <i32 0, i32 3>
  %88 = extractelement <2 x double> %74, i32 1
  %89 = extractelement <2 x double> %86, i32 1
  %90 = fadd nsz double %89, %88
  %91 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1, i32 0
  %92 = load double, double* %91, align 8
  %93 = fsub nsz double %92, %90
  store double %93, double* %48, align 8
  %94 = load double, double* %91, align 8
  %95 = fadd nsz double %94, %90
  store double %95, double* %91, align 8
  %96 = or i32 %4, 1
  %97 = sext i32 %96 to i64
  %98 = fsub nsz <2 x double> %75, %87
  %99 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %97, i32 0
  %100 = bitcast double* %99 to <2 x double>*
  %101 = load <2 x double>, <2 x double>* %100, align 8
  %102 = fsub nsz <2 x double> %101, %98
  %103 = bitcast double* %59 to <2 x double>*
  store <2 x double> %102, <2 x double>* %103, align 8
  %104 = extractelement <2 x double> %73, i32 0
  %105 = extractelement <2 x double> %85, i32 0
  %106 = fadd nsz double %104, %105
  %107 = bitcast double* %99 to <2 x double>*
  %108 = load <2 x double>, <2 x double>* %107, align 8
  %109 = fadd nsz <2 x double> %98, %108
  %110 = bitcast double* %99 to <2 x double>*
  store <2 x double> %109, <2 x double>* %110, align 8
  %111 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1, i32 1
  %112 = load double, double* %111, align 8
  %113 = fsub nsz double %112, %106
  store double %113, double* %52, align 8
  %114 = load double, double* %111, align 8
  %115 = fadd nsz double %106, %114
  store double %115, double* %111, align 8
  br label %116

116:                                              ; preds = %116, %3
  %117 = phi %struct.AVComplexDouble* [ %0, %3 ], [ %121, %116 ]
  %118 = phi double* [ %1, %3 ], [ %122, %116 ]
  %119 = phi i32 [ %9, %3 ], [ %254, %116 ]
  %120 = phi double* [ %8, %3 ], [ %123, %116 ]
  %121 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %117, i64 2
  %122 = getelementptr inbounds double, double* %118, i64 2
  %123 = getelementptr inbounds double, double* %120, i64 -2
  %124 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %121, i64 %10
  %125 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %124, i64 0, i32 0
  %126 = load double, double* %125, align 8
  %127 = load double, double* %122, align 8
  %128 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %124, i64 0, i32 1
  %129 = load double, double* %128, align 8
  %130 = load double, double* %123, align 8
  %131 = fsub nsz double -0.000000e+00, %130
  %132 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %121, i64 %15
  %133 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %132, i64 0, i32 0
  %134 = load double, double* %133, align 8
  %135 = insertelement <2 x double> undef, double %127, i32 0
  %136 = shufflevector <2 x double> %135, <2 x double> undef, <2 x i32> zeroinitializer
  %137 = insertelement <2 x double> undef, double %129, i32 0
  %138 = insertelement <2 x double> %137, double %134, i32 1
  %139 = fmul nsz <2 x double> %136, %138
  %140 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %132, i64 0, i32 1
  %141 = load double, double* %140, align 8
  %142 = insertelement <2 x double> undef, double %126, i32 0
  %143 = insertelement <2 x double> %142, double %130, i32 1
  %144 = insertelement <2 x double> undef, double %131, i32 0
  %145 = insertelement <2 x double> %144, double %141, i32 1
  %146 = fmul nsz <2 x double> %143, %145
  %147 = fadd nsz <2 x double> %139, %146
  %148 = fsub nsz <2 x double> %139, %146
  %149 = shufflevector <2 x double> %147, <2 x double> %148, <2 x i32> <i32 0, i32 3>
  %150 = insertelement <2 x double> undef, double %130, i32 0
  %151 = insertelement <2 x double> %150, double %126, i32 1
  %152 = insertelement <2 x double> undef, double %134, i32 0
  %153 = insertelement <2 x double> %152, double %127, i32 1
  %154 = fmul nsz <2 x double> %151, %153
  %155 = insertelement <2 x double> %135, double %129, i32 1
  %156 = insertelement <2 x double> undef, double %141, i32 0
  %157 = insertelement <2 x double> %156, double %131, i32 1
  %158 = fmul nsz <2 x double> %155, %157
  %159 = fadd nsz <2 x double> %154, %158
  %160 = fsub nsz <2 x double> %154, %158
  %161 = shufflevector <2 x double> %159, <2 x double> %160, <2 x i32> <i32 0, i32 3>
  %162 = extractelement <2 x double> %148, i32 1
  %163 = extractelement <2 x double> %160, i32 1
  %164 = fadd nsz double %163, %162
  %165 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %121, i64 0, i32 0
  %166 = load double, double* %165, align 8
  %167 = fsub nsz double %166, %164
  store double %167, double* %125, align 8
  %168 = load double, double* %165, align 8
  %169 = fadd nsz double %168, %164
  store double %169, double* %165, align 8
  %170 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %121, i64 %7
  %171 = fsub nsz <2 x double> %149, %161
  %172 = bitcast %struct.AVComplexDouble* %170 to <2 x double>*
  %173 = load <2 x double>, <2 x double>* %172, align 8
  %174 = fsub nsz <2 x double> %173, %171
  %175 = bitcast %struct.AVComplexDouble* %132 to <2 x double>*
  store <2 x double> %174, <2 x double>* %175, align 8
  %176 = extractelement <2 x double> %147, i32 0
  %177 = extractelement <2 x double> %159, i32 0
  %178 = fadd nsz double %176, %177
  %179 = bitcast %struct.AVComplexDouble* %170 to <2 x double>*
  %180 = load <2 x double>, <2 x double>* %179, align 8
  %181 = fadd nsz <2 x double> %171, %180
  %182 = bitcast %struct.AVComplexDouble* %170 to <2 x double>*
  store <2 x double> %181, <2 x double>* %182, align 8
  %183 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %117, i64 2, i32 1
  %184 = load double, double* %183, align 8
  %185 = fsub nsz double %184, %178
  store double %185, double* %128, align 8
  %186 = load double, double* %183, align 8
  %187 = fadd nsz double %178, %186
  store double %187, double* %183, align 8
  %188 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %121, i64 %47
  %189 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %188, i64 0, i32 0
  %190 = load double, double* %189, align 8
  %191 = getelementptr inbounds double, double* %118, i64 3
  %192 = load double, double* %191, align 8
  %193 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %188, i64 0, i32 1
  %194 = load double, double* %193, align 8
  %195 = getelementptr inbounds double, double* %120, i64 -3
  %196 = load double, double* %195, align 8
  %197 = fsub nsz double -0.000000e+00, %196
  %198 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %121, i64 %58
  %199 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %198, i64 0, i32 0
  %200 = load double, double* %199, align 8
  %201 = insertelement <2 x double> undef, double %192, i32 0
  %202 = shufflevector <2 x double> %201, <2 x double> undef, <2 x i32> zeroinitializer
  %203 = insertelement <2 x double> undef, double %194, i32 0
  %204 = insertelement <2 x double> %203, double %200, i32 1
  %205 = fmul nsz <2 x double> %202, %204
  %206 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %198, i64 0, i32 1
  %207 = load double, double* %206, align 8
  %208 = insertelement <2 x double> undef, double %190, i32 0
  %209 = insertelement <2 x double> %208, double %196, i32 1
  %210 = insertelement <2 x double> undef, double %197, i32 0
  %211 = insertelement <2 x double> %210, double %207, i32 1
  %212 = fmul nsz <2 x double> %209, %211
  %213 = fadd nsz <2 x double> %205, %212
  %214 = fsub nsz <2 x double> %205, %212
  %215 = shufflevector <2 x double> %213, <2 x double> %214, <2 x i32> <i32 0, i32 3>
  %216 = insertelement <2 x double> undef, double %196, i32 0
  %217 = insertelement <2 x double> %216, double %190, i32 1
  %218 = insertelement <2 x double> undef, double %200, i32 0
  %219 = insertelement <2 x double> %218, double %192, i32 1
  %220 = fmul nsz <2 x double> %217, %219
  %221 = insertelement <2 x double> %201, double %194, i32 1
  %222 = insertelement <2 x double> undef, double %207, i32 0
  %223 = insertelement <2 x double> %222, double %197, i32 1
  %224 = fmul nsz <2 x double> %221, %223
  %225 = fadd nsz <2 x double> %220, %224
  %226 = fsub nsz <2 x double> %220, %224
  %227 = shufflevector <2 x double> %225, <2 x double> %226, <2 x i32> <i32 0, i32 3>
  %228 = extractelement <2 x double> %214, i32 1
  %229 = extractelement <2 x double> %226, i32 1
  %230 = fadd nsz double %229, %228
  %231 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %117, i64 3, i32 0
  %232 = load double, double* %231, align 8
  %233 = fsub nsz double %232, %230
  store double %233, double* %189, align 8
  %234 = load double, double* %231, align 8
  %235 = fadd nsz double %234, %230
  store double %235, double* %231, align 8
  %236 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %121, i64 %97
  %237 = fsub nsz <2 x double> %215, %227
  %238 = bitcast %struct.AVComplexDouble* %236 to <2 x double>*
  %239 = load <2 x double>, <2 x double>* %238, align 8
  %240 = fsub nsz <2 x double> %239, %237
  %241 = bitcast %struct.AVComplexDouble* %198 to <2 x double>*
  store <2 x double> %240, <2 x double>* %241, align 8
  %242 = extractelement <2 x double> %213, i32 0
  %243 = extractelement <2 x double> %225, i32 0
  %244 = fadd nsz double %242, %243
  %245 = bitcast %struct.AVComplexDouble* %236 to <2 x double>*
  %246 = load <2 x double>, <2 x double>* %245, align 8
  %247 = fadd nsz <2 x double> %237, %246
  %248 = bitcast %struct.AVComplexDouble* %236 to <2 x double>*
  store <2 x double> %247, <2 x double>* %248, align 8
  %249 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %117, i64 3, i32 1
  %250 = load double, double* %249, align 8
  %251 = fsub nsz double %250, %244
  store double %251, double* %193, align 8
  %252 = load double, double* %249, align 8
  %253 = fadd nsz double %244, %252
  store double %253, double* %249, align 8
  %254 = add i32 %119, -1
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %256, label %116

256:                                              ; preds = %116
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @pass_big(%struct.AVComplexDouble* nocapture, double* nocapture readonly, i32) unnamed_addr #5 {
  %4 = shl i32 %2, 1
  %5 = shl i32 %2, 2
  %6 = mul i32 %2, 6
  %7 = sext i32 %4 to i64
  %8 = getelementptr inbounds double, double* %1, i64 %7
  %9 = add i32 %2, -1
  %10 = sext i32 %5 to i64
  %11 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %10, i32 0
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %10, i32 1
  %14 = load double, double* %13, align 8
  %15 = sext i32 %6 to i64
  %16 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %15, i32 0
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %15, i32 1
  %19 = load double, double* %18, align 8
  %20 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 0, i32 0
  %21 = load double, double* %20, align 8
  %22 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 0, i32 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %7, i32 0
  %25 = bitcast double* %24 to <2 x double>*
  %26 = load <2 x double>, <2 x double>* %25, align 8
  %27 = fadd nsz double %12, %17
  %28 = fsub nsz double %21, %27
  store double %28, double* %11, align 8
  %29 = fadd nsz double %27, %21
  store double %29, double* %20, align 8
  %30 = insertelement <2 x double> undef, double %14, i32 0
  %31 = insertelement <2 x double> %30, double %17, i32 1
  %32 = insertelement <2 x double> undef, double %19, i32 0
  %33 = insertelement <2 x double> %32, double %12, i32 1
  %34 = fsub nsz <2 x double> %31, %33
  %35 = fsub nsz <2 x double> %26, %34
  %36 = bitcast double* %16 to <2 x double>*
  store <2 x double> %35, <2 x double>* %36, align 8
  %37 = fadd nsz double %14, %19
  %38 = fadd nsz <2 x double> %34, %26
  %39 = bitcast double* %24 to <2 x double>*
  store <2 x double> %38, <2 x double>* %39, align 8
  %40 = fsub nsz double %23, %37
  store double %40, double* %13, align 8
  %41 = fadd nsz double %37, %23
  store double %41, double* %22, align 8
  %42 = or i32 %5, 1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %43, i32 0
  %45 = getelementptr inbounds double, double* %1, i64 1
  %46 = load double, double* %45, align 8
  %47 = bitcast double* %44 to <2 x double>*
  %48 = load <2 x double>, <2 x double>* %47, align 8
  %49 = getelementptr inbounds double, double* %8, i64 -1
  %50 = load double, double* %49, align 8
  %51 = fsub nsz double -0.000000e+00, %50
  %52 = shufflevector <2 x double> %48, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %53 = insertelement <2 x double> undef, double %51, i32 0
  %54 = shufflevector <2 x double> %53, <2 x double> undef, <2 x i32> zeroinitializer
  %55 = fmul nsz <2 x double> %52, %54
  %56 = insertelement <2 x double> undef, double %46, i32 0
  %57 = shufflevector <2 x double> %56, <2 x double> undef, <2 x i32> zeroinitializer
  %58 = fmul nsz <2 x double> %48, %57
  %59 = fsub nsz <2 x double> %58, %55
  %60 = fadd nsz <2 x double> %58, %55
  %61 = shufflevector <2 x double> %59, <2 x double> %60, <2 x i32> <i32 0, i32 3>
  %62 = or i32 %6, 1
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %63, i32 0
  %65 = load double, double* %64, align 8
  %66 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %63, i32 1
  %67 = load double, double* %66, align 8
  %68 = insertelement <2 x double> %56, double %50, i32 1
  %69 = insertelement <2 x double> undef, double %65, i32 0
  %70 = shufflevector <2 x double> %69, <2 x double> undef, <2 x i32> zeroinitializer
  %71 = fmul nsz <2 x double> %68, %70
  %72 = insertelement <2 x double> undef, double %50, i32 0
  %73 = insertelement <2 x double> %72, double %46, i32 1
  %74 = insertelement <2 x double> undef, double %67, i32 0
  %75 = shufflevector <2 x double> %74, <2 x double> undef, <2 x i32> zeroinitializer
  %76 = fmul nsz <2 x double> %73, %75
  %77 = fsub nsz <2 x double> %71, %76
  %78 = fadd nsz <2 x double> %71, %76
  %79 = shufflevector <2 x double> %77, <2 x double> %78, <2 x i32> <i32 0, i32 3>
  %80 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 1, i32 0
  %81 = bitcast double* %80 to <2 x double>*
  %82 = load <2 x double>, <2 x double>* %81, align 8
  %83 = or i32 %4, 1
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %84, i32 0
  %86 = load double, double* %85, align 8
  %87 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %0, i64 %84, i32 1
  %88 = load double, double* %87, align 8
  %89 = extractelement <2 x double> %59, i32 0
  %90 = extractelement <2 x double> %77, i32 0
  %91 = fsub nsz double %90, %89
  %92 = fadd nsz <2 x double> %61, %79
  %93 = fsub nsz double %88, %91
  store double %93, double* %66, align 8
  %94 = fadd nsz double %91, %88
  store double %94, double* %87, align 8
  %95 = fsub nsz <2 x double> %82, %92
  %96 = bitcast double* %44 to <2 x double>*
  store <2 x double> %95, <2 x double>* %96, align 8
  %97 = extractelement <2 x double> %60, i32 1
  %98 = extractelement <2 x double> %78, i32 1
  %99 = fsub nsz double %97, %98
  %100 = fsub nsz double %86, %99
  %101 = fadd nsz <2 x double> %82, %92
  %102 = bitcast double* %80 to <2 x double>*
  store <2 x double> %101, <2 x double>* %102, align 8
  store double %100, double* %64, align 8
  %103 = fadd nsz double %86, %99
  store double %103, double* %85, align 8
  br label %104

104:                                              ; preds = %104, %3
  %105 = phi double* [ %8, %3 ], [ %111, %104 ]
  %106 = phi i32 [ %9, %3 ], [ %225, %104 ]
  %107 = phi double* [ %1, %3 ], [ %110, %104 ]
  %108 = phi %struct.AVComplexDouble* [ %0, %3 ], [ %109, %104 ]
  %109 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %108, i64 2
  %110 = getelementptr inbounds double, double* %107, i64 2
  %111 = getelementptr inbounds double, double* %105, i64 -2
  %112 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %109, i64 %10
  %113 = load double, double* %110, align 8
  %114 = bitcast %struct.AVComplexDouble* %112 to <2 x double>*
  %115 = load <2 x double>, <2 x double>* %114, align 8
  %116 = load double, double* %111, align 8
  %117 = fsub nsz double -0.000000e+00, %116
  %118 = shufflevector <2 x double> %115, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %119 = insertelement <2 x double> undef, double %117, i32 0
  %120 = shufflevector <2 x double> %119, <2 x double> undef, <2 x i32> zeroinitializer
  %121 = fmul nsz <2 x double> %118, %120
  %122 = insertelement <2 x double> undef, double %113, i32 0
  %123 = shufflevector <2 x double> %122, <2 x double> undef, <2 x i32> zeroinitializer
  %124 = fmul nsz <2 x double> %115, %123
  %125 = fsub nsz <2 x double> %124, %121
  %126 = fadd nsz <2 x double> %124, %121
  %127 = shufflevector <2 x double> %125, <2 x double> %126, <2 x i32> <i32 0, i32 3>
  %128 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %109, i64 %15
  %129 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %128, i64 0, i32 0
  %130 = load double, double* %129, align 8
  %131 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %128, i64 0, i32 1
  %132 = load double, double* %131, align 8
  %133 = insertelement <2 x double> %122, double %116, i32 1
  %134 = insertelement <2 x double> undef, double %130, i32 0
  %135 = shufflevector <2 x double> %134, <2 x double> undef, <2 x i32> zeroinitializer
  %136 = fmul nsz <2 x double> %133, %135
  %137 = insertelement <2 x double> undef, double %116, i32 0
  %138 = insertelement <2 x double> %137, double %113, i32 1
  %139 = insertelement <2 x double> undef, double %132, i32 0
  %140 = shufflevector <2 x double> %139, <2 x double> undef, <2 x i32> zeroinitializer
  %141 = fmul nsz <2 x double> %138, %140
  %142 = fsub nsz <2 x double> %136, %141
  %143 = fadd nsz <2 x double> %136, %141
  %144 = shufflevector <2 x double> %142, <2 x double> %143, <2 x i32> <i32 0, i32 3>
  %145 = bitcast %struct.AVComplexDouble* %109 to <2 x double>*
  %146 = load <2 x double>, <2 x double>* %145, align 8
  %147 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %109, i64 %7
  %148 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 0, i32 0
  %149 = load double, double* %148, align 8
  %150 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %147, i64 0, i32 1
  %151 = load double, double* %150, align 8
  %152 = extractelement <2 x double> %125, i32 0
  %153 = extractelement <2 x double> %142, i32 0
  %154 = fsub nsz double %153, %152
  %155 = fadd nsz <2 x double> %127, %144
  %156 = fsub nsz double %151, %154
  store double %156, double* %131, align 8
  %157 = fadd nsz double %154, %151
  store double %157, double* %150, align 8
  %158 = fsub nsz <2 x double> %146, %155
  %159 = bitcast %struct.AVComplexDouble* %112 to <2 x double>*
  store <2 x double> %158, <2 x double>* %159, align 8
  %160 = extractelement <2 x double> %126, i32 1
  %161 = extractelement <2 x double> %143, i32 1
  %162 = fsub nsz double %160, %161
  %163 = fsub nsz double %149, %162
  %164 = fadd nsz <2 x double> %146, %155
  %165 = bitcast %struct.AVComplexDouble* %109 to <2 x double>*
  store <2 x double> %164, <2 x double>* %165, align 8
  store double %163, double* %129, align 8
  %166 = fadd nsz double %149, %162
  store double %166, double* %148, align 8
  %167 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %109, i64 %43
  %168 = getelementptr inbounds double, double* %107, i64 3
  %169 = load double, double* %168, align 8
  %170 = bitcast %struct.AVComplexDouble* %167 to <2 x double>*
  %171 = load <2 x double>, <2 x double>* %170, align 8
  %172 = getelementptr inbounds double, double* %105, i64 -3
  %173 = load double, double* %172, align 8
  %174 = fsub nsz double -0.000000e+00, %173
  %175 = shufflevector <2 x double> %171, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %176 = insertelement <2 x double> undef, double %174, i32 0
  %177 = shufflevector <2 x double> %176, <2 x double> undef, <2 x i32> zeroinitializer
  %178 = fmul nsz <2 x double> %175, %177
  %179 = insertelement <2 x double> undef, double %169, i32 0
  %180 = shufflevector <2 x double> %179, <2 x double> undef, <2 x i32> zeroinitializer
  %181 = fmul nsz <2 x double> %171, %180
  %182 = fsub nsz <2 x double> %181, %178
  %183 = fadd nsz <2 x double> %181, %178
  %184 = shufflevector <2 x double> %182, <2 x double> %183, <2 x i32> <i32 0, i32 3>
  %185 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %109, i64 %63
  %186 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %185, i64 0, i32 0
  %187 = load double, double* %186, align 8
  %188 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %185, i64 0, i32 1
  %189 = load double, double* %188, align 8
  %190 = insertelement <2 x double> %179, double %173, i32 1
  %191 = insertelement <2 x double> undef, double %187, i32 0
  %192 = shufflevector <2 x double> %191, <2 x double> undef, <2 x i32> zeroinitializer
  %193 = fmul nsz <2 x double> %190, %192
  %194 = insertelement <2 x double> undef, double %173, i32 0
  %195 = insertelement <2 x double> %194, double %169, i32 1
  %196 = insertelement <2 x double> undef, double %189, i32 0
  %197 = shufflevector <2 x double> %196, <2 x double> undef, <2 x i32> zeroinitializer
  %198 = fmul nsz <2 x double> %195, %197
  %199 = fsub nsz <2 x double> %193, %198
  %200 = fadd nsz <2 x double> %193, %198
  %201 = shufflevector <2 x double> %199, <2 x double> %200, <2 x i32> <i32 0, i32 3>
  %202 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %108, i64 3, i32 0
  %203 = bitcast double* %202 to <2 x double>*
  %204 = load <2 x double>, <2 x double>* %203, align 8
  %205 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %109, i64 %84
  %206 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %205, i64 0, i32 0
  %207 = load double, double* %206, align 8
  %208 = getelementptr inbounds %struct.AVComplexDouble, %struct.AVComplexDouble* %205, i64 0, i32 1
  %209 = load double, double* %208, align 8
  %210 = extractelement <2 x double> %182, i32 0
  %211 = extractelement <2 x double> %199, i32 0
  %212 = fsub nsz double %211, %210
  %213 = fadd nsz <2 x double> %184, %201
  %214 = fsub nsz double %209, %212
  store double %214, double* %188, align 8
  %215 = fadd nsz double %212, %209
  store double %215, double* %208, align 8
  %216 = fsub nsz <2 x double> %204, %213
  %217 = bitcast %struct.AVComplexDouble* %167 to <2 x double>*
  store <2 x double> %216, <2 x double>* %217, align 8
  %218 = extractelement <2 x double> %183, i32 1
  %219 = extractelement <2 x double> %200, i32 1
  %220 = fsub nsz double %218, %219
  %221 = fsub nsz double %207, %220
  %222 = fadd nsz <2 x double> %204, %213
  %223 = bitcast double* %202 to <2 x double>*
  store <2 x double> %222, <2 x double>* %223, align 8
  store double %221, double* %186, align 8
  %224 = fadd nsz double %207, %220
  store double %224, double* %206, align 8
  %225 = add i32 %106, -1
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %104

227:                                              ; preds = %104
  ret void
}

declare i32 @pthread_once(i32*, void ()*) local_unnamed_addr #2

; Function Attrs: cold nofree norecurse nounwind optsize ssp uwtable writeonly
define internal void @ff_init_53_tabs() #6 {
  store <2 x double> <double 0x3FEBB67AE8584CAB, double 0x3FEBB67AE8584CAB>, <2 x double>* bitcast ([4 x %struct.AVComplexDouble]* @ff_cos_53_double to <2 x double>*), align 32
  store <2 x double> <double 0x3FE0000000000001, double 0x3FE0000000000001>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 1, i32 0) to <2 x double>*), align 16
  store <2 x double> <double 0x3FD3C6EF372FE950, double 0x3FEE6F0E134454FF>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 2, i32 0) to <2 x double>*), align 32
  store <2 x double> <double 0x3FE9E3779B97F4A8, double 0x3FE2CF2304755A5E>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x %struct.AVComplexDouble], [4 x %struct.AVComplexDouble]* @ff_cos_53_double, i64 0, i64 3, i32 0) to <2 x double>*), align 16
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_16() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3FD921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [8 x double], [8 x double]* @ff_cos_16_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 5
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [8 x double], [8 x double]* @ff_cos_16_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 8, %11
  %16 = getelementptr inbounds [8 x double], [8 x double]* @ff_cos_16_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 4
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_32() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3FC921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [16 x double], [16 x double]* @ff_cos_32_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 9
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [16 x double], [16 x double]* @ff_cos_32_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 16, %11
  %16 = getelementptr inbounds [16 x double], [16 x double]* @ff_cos_32_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 8
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_64() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3FB921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [32 x double], [32 x double]* @ff_cos_64_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 17
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [32 x double], [32 x double]* @ff_cos_64_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 32, %11
  %16 = getelementptr inbounds [32 x double], [32 x double]* @ff_cos_64_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 16
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_128() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3FA921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [64 x double], [64 x double]* @ff_cos_128_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 33
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [64 x double], [64 x double]* @ff_cos_128_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 64, %11
  %16 = getelementptr inbounds [64 x double], [64 x double]* @ff_cos_128_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 32
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_256() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F9921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [128 x double], [128 x double]* @ff_cos_256_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 65
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [128 x double], [128 x double]* @ff_cos_256_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 128, %11
  %16 = getelementptr inbounds [128 x double], [128 x double]* @ff_cos_256_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 64
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_512() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F8921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [256 x double], [256 x double]* @ff_cos_512_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 129
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [256 x double], [256 x double]* @ff_cos_512_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 256, %11
  %16 = getelementptr inbounds [256 x double], [256 x double]* @ff_cos_512_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 128
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_1024() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F7921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [512 x double], [512 x double]* @ff_cos_1024_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 257
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [512 x double], [512 x double]* @ff_cos_1024_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 512, %11
  %16 = getelementptr inbounds [512 x double], [512 x double]* @ff_cos_1024_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 256
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_2048() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F6921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [1024 x double], [1024 x double]* @ff_cos_2048_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 513
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [1024 x double], [1024 x double]* @ff_cos_2048_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 1024, %11
  %16 = getelementptr inbounds [1024 x double], [1024 x double]* @ff_cos_2048_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 512
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_4096() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F5921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [2048 x double], [2048 x double]* @ff_cos_4096_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 1025
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [2048 x double], [2048 x double]* @ff_cos_4096_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 2048, %11
  %16 = getelementptr inbounds [2048 x double], [2048 x double]* @ff_cos_4096_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 1024
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_8192() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F4921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [4096 x double], [4096 x double]* @ff_cos_8192_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 2049
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [4096 x double], [4096 x double]* @ff_cos_8192_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 4096, %11
  %16 = getelementptr inbounds [4096 x double], [4096 x double]* @ff_cos_8192_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 2048
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_16384() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F3921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [8192 x double], [8192 x double]* @ff_cos_16384_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 4097
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [8192 x double], [8192 x double]* @ff_cos_16384_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 8192, %11
  %16 = getelementptr inbounds [8192 x double], [8192 x double]* @ff_cos_16384_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 4096
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_32768() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F2921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [16384 x double], [16384 x double]* @ff_cos_32768_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 8193
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [16384 x double], [16384 x double]* @ff_cos_32768_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 16384, %11
  %16 = getelementptr inbounds [16384 x double], [16384 x double]* @ff_cos_32768_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 8192
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_65536() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F1921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [32768 x double], [32768 x double]* @ff_cos_65536_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 16385
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [32768 x double], [32768 x double]* @ff_cos_65536_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 32768, %11
  %16 = getelementptr inbounds [32768 x double], [32768 x double]* @ff_cos_65536_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 16384
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_cos_tabs_131072() #7 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %8, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F0921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = getelementptr inbounds [65536 x double], [65536 x double]* @ff_cos_131072_double, i64 0, i64 %2
  store double %6, double* %7, align 8
  %8 = add nuw nsw i64 %2, 1
  %9 = icmp eq i64 %8, 32769
  br i1 %9, label %10, label %1

10:                                               ; preds = %1, %10
  %11 = phi i64 [ %18, %10 ], [ 1, %1 ]
  %12 = getelementptr inbounds [65536 x double], [65536 x double]* @ff_cos_131072_double, i64 0, i64 %11
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub nuw nsw i64 65536, %11
  %16 = getelementptr inbounds [65536 x double], [65536 x double]* @ff_cos_131072_double, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 32768
  br i1 %19, label %20, label %10

20:                                               ; preds = %10
  ret void
}

declare i8* @av_malloc_array(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sqrt.f64(double) #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold nofree norecurse nounwind optsize ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold nofree nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{i32 0, i32 32}
