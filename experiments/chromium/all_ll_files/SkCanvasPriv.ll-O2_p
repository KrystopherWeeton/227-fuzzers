; ModuleID = '../../third_party/skia/src/core/SkCanvasPriv.cpp'
source_filename = "../../third_party/skia/src/core/SkCanvasPriv.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%class.SkAutoCanvasMatrixPaint = type <{ %class.SkCanvas*, i32, [4 x i8] }>
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp, [384 x i64], %class.sk_sp.0, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.9" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.0 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type { %class.SkRefCnt.base, %class.SkMatrixProvider, %class.SkMarkerStack*, %struct.SkImageInfo, %class.SkSurfaceProps, %class.SkM44, %class.SkM44 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkMatrixProvider = type { i32 (...)**, %class.SkM44, %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.2, i32, i32 }
%class.sk_sp.2 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkM44 = type { [16 x float] }
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%class.SkPaint = type <{ %class.sk_sp.15, %class.sk_sp.16, %class.sk_sp.17, %class.sk_sp.18, %class.sk_sp.19, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.15 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.sk_sp.16 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.17 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.18 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.19 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp.26*, i32, [4 x i8], void (%class.sk_sp.27*, %class.SkReadBuffer*)**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.20" }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.27*, %class.SkReadBuffer*)* }
%class.sk_sp.27 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.sk_sp.26 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%struct.SkDeserialProcs = type { void (%class.sk_sp.28*, i8*, i64, i8*)*, i8*, void (%class.sk_sp.33*, i8*, i64, i8*)*, i8*, void (%class.sk_sp.26*, i8*, i64, i8*)*, i8* }
%class.sk_sp.28 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.29", [7 x i8] }>
%"struct.std::__1::atomic.29" = type { %"struct.std::__1::__atomic_base.30" }
%"struct.std::__1::__atomic_base.30" = type { %"struct.std::__1::__cxx_atomic_impl.31" }
%"struct.std::__1::__cxx_atomic_impl.31" = type { %"struct.std::__1::__cxx_atomic_base_impl.32" }
%"struct.std::__1::__cxx_atomic_base_impl.32" = type { i8 }
%class.sk_sp.33 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%"struct.SkCanvas::Lattice" = type { i32*, i32*, i8*, i32, i32, %struct.SkIRect*, i32* }
%class.SkWriter32 = type { i8*, i64, i64, i8*, %class.SkAutoTMalloc }
%class.SkAutoTMalloc = type { %"class.std::__1::unique_ptr.34" }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { i8* }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.38*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.38*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.38*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.38 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.39, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.39 = type { %"struct.std::__1::atomic" }
%class.SkAutoSMalloc = type { i8*, i64, [256 x i32] }
%"struct.SkCanvas::ImageSetEntry" = type <{ %class.sk_sp.40, %struct.SkRect, %struct.SkRect, i32, float, i32, i8, [3 x i8] }>
%class.sk_sp.40 = type { %class.SkImage* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }

@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN23SkAutoCanvasMatrixPaintC1EP8SkCanvasPK8SkMatrixPK7SkPaintRK6SkRect = hidden unnamed_addr alias void (%class.SkAutoCanvasMatrixPaint*, %class.SkCanvas*, %class.SkMatrix*, %class.SkPaint*, %struct.SkRect*), void (%class.SkAutoCanvasMatrixPaint*, %class.SkCanvas*, %class.SkMatrix*, %class.SkPaint*, %struct.SkRect*)* @_ZN23SkAutoCanvasMatrixPaintC2EP8SkCanvasPK8SkMatrixPK7SkPaintRK6SkRect
@_ZN23SkAutoCanvasMatrixPaintD1Ev = hidden unnamed_addr alias void (%class.SkAutoCanvasMatrixPaint*), void (%class.SkAutoCanvasMatrixPaint*)* @_ZN23SkAutoCanvasMatrixPaintD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkAutoCanvasMatrixPaintC2EP8SkCanvasPK8SkMatrixPK7SkPaintRK6SkRect(%class.SkAutoCanvasMatrixPaint* nocapture, %class.SkCanvas*, %class.SkMatrix*, %class.SkPaint*, %struct.SkRect* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %6 = alloca %struct.SkRect, align 4
  %7 = getelementptr inbounds %class.SkAutoCanvasMatrixPaint, %class.SkAutoCanvasMatrixPaint* %0, i64 0, i32 0
  store %class.SkCanvas* %1, %class.SkCanvas** %7, align 8
  %8 = getelementptr inbounds %class.SkAutoCanvasMatrixPaint, %class.SkAutoCanvasMatrixPaint* %0, i64 0, i32 1
  %9 = tail call i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas* %1) #5
  store i32 %9, i32* %8, align 8
  %10 = icmp eq %class.SkPaint* %3, null
  br i1 %10, label %17, label %11

11:                                               ; preds = %5
  %12 = bitcast %struct.SkRect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #5
  %13 = bitcast %struct.SkRect* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %12, i8* align 4 %13, i64 16, i1 false)
  %14 = icmp eq %class.SkMatrix* %2, null
  br i1 %14, label %21, label %15

15:                                               ; preds = %11
  %16 = call zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix* nonnull %2, %struct.SkRect* nonnull %6, %struct.SkRect* nonnull dereferenceable(16) %6, i32 1) #5
  br label %21

17:                                               ; preds = %5
  %18 = icmp eq %class.SkMatrix* %2, null
  br i1 %18, label %25, label %19

19:                                               ; preds = %17
  %20 = tail call i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas* %1) #5
  br label %24

21:                                               ; preds = %15, %11
  %22 = call i32 @_ZN8SkCanvas9saveLayerEPK6SkRectPK7SkPaint(%class.SkCanvas* %1, %struct.SkRect* nonnull %6, %class.SkPaint* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #5
  %23 = icmp eq %class.SkMatrix* %2, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %19, %21
  call void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas* %1, %class.SkMatrix* nonnull dereferenceable(40) %2) #5
  br label %25

25:                                               ; preds = %17, %21, %24
  ret void
}

declare i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare i32 @_ZN8SkCanvas9saveLayerEPK6SkRectPK7SkPaint(%class.SkCanvas*, %struct.SkRect*, %class.SkPaint*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas*) local_unnamed_addr #1

declare void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkAutoCanvasMatrixPaintD2Ev(%class.SkAutoCanvasMatrixPaint* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkAutoCanvasMatrixPaint, %class.SkAutoCanvasMatrixPaint* %0, i64 0, i32 0
  %3 = load %class.SkCanvas*, %class.SkCanvas** %2, align 8
  %4 = getelementptr inbounds %class.SkAutoCanvasMatrixPaint, %class.SkAutoCanvasMatrixPaint* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  tail call void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas* %3, i32 %5) #5
  ret void
}

declare void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12SkCanvasPriv11ReadLatticeER12SkReadBufferPN8SkCanvas7LatticeE(%class.SkReadBuffer* dereferenceable(136), %"struct.SkCanvas::Lattice"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZN12SkReadBuffer7readIntEv(%class.SkReadBuffer* %0) #5
  %4 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 3
  store i32 %3, i32* %4, align 8
  %5 = sext i32 %3 to i64
  %6 = tail call i8* @_ZN12SkReadBuffer4skipEmm(%class.SkReadBuffer* %0, i64 %5, i64 4) #5
  %7 = bitcast %"struct.SkCanvas::Lattice"* %1 to i8**
  store i8* %6, i8** %7, align 8
  %8 = tail call i32 @_ZN12SkReadBuffer7readIntEv(%class.SkReadBuffer* %0) #5
  %9 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 4
  store i32 %8, i32* %9, align 4
  %10 = sext i32 %8 to i64
  %11 = tail call i8* @_ZN12SkReadBuffer4skipEmm(%class.SkReadBuffer* %0, i64 %10, i64 4) #5
  %12 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 1
  %13 = bitcast i32** %12 to i8**
  store i8* %11, i8** %13, align 8
  %14 = tail call i32 @_ZN12SkReadBuffer7readIntEv(%class.SkReadBuffer* %0) #5
  %15 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 2
  store i8* null, i8** %15, align 8
  %16 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 6
  store i32* null, i32** %16, align 8
  %17 = icmp eq i32 %14, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = sext i32 %14 to i64
  %20 = tail call i8* @_ZN12SkReadBuffer4skipEmm(%class.SkReadBuffer* %0, i64 %19, i64 1) #5
  store i8* %20, i8** %15, align 8
  %21 = tail call i8* @_ZN12SkReadBuffer4skipEmm(%class.SkReadBuffer* %0, i64 %19, i64 4) #5
  %22 = bitcast i32** %16 to i8**
  store i8* %21, i8** %22, align 8
  br label %23

23:                                               ; preds = %2, %18
  %24 = tail call i8* @_ZN12SkReadBuffer4skipEm(%class.SkReadBuffer* %0, i64 16) #5
  %25 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 5
  %26 = bitcast %struct.SkIRect** %25 to i8**
  store i8* %24, i8** %26, align 8
  %27 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %0, i64 0, i32 13
  %28 = load i8, i8* %27, align 8, !range !2
  %29 = icmp eq i8 %28, 0
  ret i1 %29
}

declare i32 @_ZN12SkReadBuffer7readIntEv(%class.SkReadBuffer*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN12SkCanvasPriv12WriteLatticeEPvRKN8SkCanvas7LatticeE(i8*, %"struct.SkCanvas::Lattice"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkWriter32, align 8
  %4 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  %7 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  br i1 %6, label %9, label %12

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 4
  %11 = load i32, i32* %10, align 4
  br label %18

12:                                               ; preds = %2
  %13 = add nsw i32 %8, 1
  %14 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 1
  %17 = mul nsw i32 %16, %13
  br label %18

18:                                               ; preds = %9, %12
  %19 = phi i32 [ %15, %12 ], [ %11, %9 ]
  %20 = phi i32 [ %17, %12 ], [ 0, %9 ]
  %21 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 3
  %22 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 4
  %23 = add i32 %8, 3
  %24 = add i32 %23, %19
  %25 = sext i32 %24 to i64
  %26 = shl nsw i64 %25, 2
  %27 = sext i32 %20 to i64
  %28 = add nsw i64 %27, 3
  %29 = and i64 %28, -4
  %30 = shl nsw i64 %27, 2
  %31 = add nsw i64 %30, 16
  %32 = add nsw i64 %31, %29
  %33 = add nsw i64 %32, %26
  %34 = icmp eq i8* %0, null
  br i1 %34, label %154, label %35

35:                                               ; preds = %18
  %36 = bitcast %class.SkWriter32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %36) #5
  %37 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %3, i64 0, i32 0
  %38 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %3, i64 0, i32 1
  %39 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %3, i64 0, i32 2
  %40 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %3, i64 0, i32 3
  %41 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %3, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %42 = getelementptr inbounds %class.SkWriter32, %class.SkWriter32* %3, i64 0, i32 4
  %43 = bitcast %class.SkAutoTMalloc* %42 to i64*
  store i64 0, i64* %43, align 8
  store i8* %0, i8** %37, align 8
  store i64 %33, i64* %38, align 8
  store i64 0, i64* %39, align 8
  store i8* %0, i8** %40, align 8
  %44 = icmp eq i64 %33, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %35
  %46 = bitcast i8* %0 to i32*
  br label %50

47:                                               ; preds = %35
  call void @_ZN10SkWriter3213growToAtLeastEm(%class.SkWriter32* nonnull %3, i64 4) #5
  %48 = bitcast %class.SkWriter32* %3 to i32**
  %49 = load i32*, i32** %48, align 8
  br label %50

50:                                               ; preds = %45, %47
  %51 = phi i32* [ %46, %45 ], [ %49, %47 ]
  store i64 4, i64* %39, align 8
  store i32 %8, i32* %51, align 4
  %52 = bitcast %"struct.SkCanvas::Lattice"* %1 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = load i32, i32* %21, align 8
  %55 = sext i32 %54 to i64
  %56 = shl nsw i64 %55, 2
  %57 = load i64, i64* %39, align 8
  %58 = add i64 %56, %57
  %59 = load i64, i64* %38, align 8
  %60 = icmp ugt i64 %58, %59
  br i1 %60, label %61, label %62

61:                                               ; preds = %50
  call void @_ZN10SkWriter3213growToAtLeastEm(%class.SkWriter32* nonnull %3, i64 %58) #5
  br label %62

62:                                               ; preds = %61, %50
  store i64 %58, i64* %39, align 8
  %63 = icmp eq i32 %54, 0
  br i1 %63, label %68, label %64

64:                                               ; preds = %62
  %65 = load i8*, i8** %37, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %57
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* align 1 %53, i64 %56, i1 false) #5
  %67 = load i64, i64* %39, align 8
  br label %68

68:                                               ; preds = %62, %64
  %69 = phi i64 [ %58, %62 ], [ %67, %64 ]
  %70 = load i32, i32* %22, align 4
  %71 = add i64 %69, 4
  %72 = load i64, i64* %38, align 8
  %73 = icmp ugt i64 %71, %72
  br i1 %73, label %74, label %75

74:                                               ; preds = %68
  call void @_ZN10SkWriter3213growToAtLeastEm(%class.SkWriter32* nonnull %3, i64 %71) #5
  br label %75

75:                                               ; preds = %68, %74
  store i64 %71, i64* %39, align 8
  %76 = load i8*, i8** %37, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 %69
  %78 = bitcast i8* %77 to i32*
  store i32 %70, i32* %78, align 4
  %79 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 1
  %80 = bitcast i32** %79 to i8**
  %81 = load i8*, i8** %80, align 8
  %82 = load i32, i32* %22, align 4
  %83 = sext i32 %82 to i64
  %84 = shl nsw i64 %83, 2
  %85 = load i64, i64* %39, align 8
  %86 = add i64 %84, %85
  %87 = load i64, i64* %38, align 8
  %88 = icmp ugt i64 %86, %87
  br i1 %88, label %89, label %90

89:                                               ; preds = %75
  call void @_ZN10SkWriter3213growToAtLeastEm(%class.SkWriter32* nonnull %3, i64 %86) #5
  br label %90

90:                                               ; preds = %89, %75
  store i64 %86, i64* %39, align 8
  %91 = icmp eq i32 %82, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %90
  %93 = load i8*, i8** %37, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 %85
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %94, i8* align 1 %81, i64 %84, i1 false) #5
  %95 = load i64, i64* %39, align 8
  br label %96

96:                                               ; preds = %90, %92
  %97 = phi i64 [ %86, %90 ], [ %95, %92 ]
  %98 = add i64 %97, 4
  %99 = load i64, i64* %38, align 8
  %100 = icmp ugt i64 %98, %99
  br i1 %100, label %101, label %102

101:                                              ; preds = %96
  call void @_ZN10SkWriter3213growToAtLeastEm(%class.SkWriter32* nonnull %3, i64 %98) #5
  br label %102

102:                                              ; preds = %96, %101
  store i64 %98, i64* %39, align 8
  %103 = load i8*, i8** %37, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 %97
  %105 = bitcast i8* %104 to i32*
  store i32 %20, i32* %105, align 4
  %106 = load i8*, i8** %4, align 8
  %107 = load i64, i64* %39, align 8
  %108 = add i64 %107, %29
  %109 = load i64, i64* %38, align 8
  %110 = icmp ugt i64 %108, %109
  br i1 %110, label %111, label %112

111:                                              ; preds = %102
  call void @_ZN10SkWriter3213growToAtLeastEm(%class.SkWriter32* nonnull %3, i64 %108) #5
  br label %112

112:                                              ; preds = %111, %102
  store i64 %108, i64* %39, align 8
  %113 = load i8*, i8** %37, align 8
  %114 = getelementptr inbounds i8, i8* %113, i64 %107
  %115 = icmp eq i64 %29, %27
  br i1 %115, label %121, label %116

116:                                              ; preds = %112
  %117 = bitcast i8* %114 to i32*
  %118 = lshr i64 %28, 2
  %119 = add nsw i64 %118, -1
  %120 = getelementptr inbounds i32, i32* %117, i64 %119
  store i32 0, i32* %120, align 4
  br label %121

121:                                              ; preds = %116, %112
  %122 = icmp eq i32 %20, 0
  br i1 %122, label %124, label %123

123:                                              ; preds = %121
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %106, i64 %27, i1 false) #5
  br label %124

124:                                              ; preds = %121, %123
  %125 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 6
  %126 = bitcast i32** %125 to i8**
  %127 = load i8*, i8** %126, align 8
  %128 = load i64, i64* %39, align 8
  %129 = add i64 %128, %30
  %130 = load i64, i64* %38, align 8
  %131 = icmp ugt i64 %129, %130
  br i1 %131, label %132, label %133

132:                                              ; preds = %124
  call void @_ZN10SkWriter3213growToAtLeastEm(%class.SkWriter32* nonnull %3, i64 %129) #5
  br label %133

133:                                              ; preds = %132, %124
  store i64 %129, i64* %39, align 8
  br i1 %122, label %138, label %134

134:                                              ; preds = %133
  %135 = load i8*, i8** %37, align 8
  %136 = getelementptr inbounds i8, i8* %135, i64 %128
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %136, i8* align 1 %127, i64 %30, i1 false) #5
  %137 = load i64, i64* %39, align 8
  br label %138

138:                                              ; preds = %133, %134
  %139 = phi i64 [ %129, %133 ], [ %137, %134 ]
  %140 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 5
  %141 = bitcast %struct.SkIRect** %140 to i8**
  %142 = load i8*, i8** %141, align 8
  %143 = add i64 %139, 16
  %144 = load i64, i64* %38, align 8
  %145 = icmp ugt i64 %143, %144
  br i1 %145, label %146, label %147

146:                                              ; preds = %138
  call void @_ZN10SkWriter3213growToAtLeastEm(%class.SkWriter32* nonnull %3, i64 %143) #5
  br label %147

147:                                              ; preds = %138, %146
  store i64 %143, i64* %39, align 8
  %148 = load i8*, i8** %37, align 8
  %149 = getelementptr inbounds i8, i8* %148, i64 %139
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %149, i8* align 1 %142, i64 16, i1 false) #5
  %150 = load i8*, i8** %41, align 8
  store i8* null, i8** %41, align 8
  %151 = icmp eq i8* %150, null
  br i1 %151, label %153, label %152

152:                                              ; preds = %147
  call void @_Z7sk_freePv(i8* nonnull %150) #5
  br label %153

153:                                              ; preds = %147, %152
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %36) #5
  br label %154

154:                                              ; preds = %18, %153
  ret i64 %33
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkCanvasPriv12WriteLatticeER13SkWriteBufferRKN8SkCanvas7LatticeE(%class.SkWriteBuffer* dereferenceable(56), %"struct.SkCanvas::Lattice"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkAutoSMalloc, align 8
  %4 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  %7 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  br i1 %6, label %9, label %12

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 4
  %11 = load i32, i32* %10, align 4
  br label %19

12:                                               ; preds = %2
  %13 = add nsw i32 %8, 1
  %14 = getelementptr inbounds %"struct.SkCanvas::Lattice", %"struct.SkCanvas::Lattice"* %1, i64 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 1
  %17 = mul nsw i32 %16, %13
  %18 = sext i32 %17 to i64
  br label %19

19:                                               ; preds = %9, %12
  %20 = phi i32 [ %15, %12 ], [ %11, %9 ]
  %21 = phi i64 [ %18, %12 ], [ 0, %9 ]
  %22 = add i32 %8, 3
  %23 = add i32 %22, %20
  %24 = sext i32 %23 to i64
  %25 = shl nsw i64 %24, 2
  %26 = add nsw i64 %21, 3
  %27 = and i64 %26, -4
  %28 = shl nsw i64 %21, 2
  %29 = add nsw i64 %28, 16
  %30 = add nsw i64 %29, %27
  %31 = add nsw i64 %30, %25
  %32 = bitcast %class.SkAutoSMalloc* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1040, i8* nonnull %32) #5
  %33 = getelementptr inbounds %class.SkAutoSMalloc, %class.SkAutoSMalloc* %3, i64 0, i32 2
  %34 = bitcast [256 x i32]* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 1024, i1 false)
  %35 = getelementptr inbounds %class.SkAutoSMalloc, %class.SkAutoSMalloc* %3, i64 0, i32 2, i64 0
  %36 = bitcast %class.SkAutoSMalloc* %3 to i32**
  store i32* %35, i32** %36, align 8
  %37 = getelementptr inbounds %class.SkAutoSMalloc, %class.SkAutoSMalloc* %3, i64 0, i32 1
  store i64 1024, i64* %37, align 8
  %38 = icmp ult i64 %31, 1025
  %39 = bitcast i32* %35 to i8*
  br i1 %38, label %43, label %40

40:                                               ; preds = %19
  %41 = getelementptr inbounds %class.SkAutoSMalloc, %class.SkAutoSMalloc* %3, i64 0, i32 0
  %42 = call i8* @_Z15sk_malloc_flagsmj(i64 %31, i32 2) #5
  store i8* %42, i8** %41, align 8
  store i64 %31, i64* %37, align 8
  br label %43

43:                                               ; preds = %19, %40
  %44 = phi i8* [ %39, %19 ], [ %42, %40 ]
  %45 = getelementptr inbounds %class.SkAutoSMalloc, %class.SkAutoSMalloc* %3, i64 0, i32 0
  %46 = call i64 @_ZN12SkCanvasPriv12WriteLatticeEPvRKN8SkCanvas7LatticeE(i8* %44, %"struct.SkCanvas::Lattice"* dereferenceable(48) %1)
  %47 = load i8*, i8** %45, align 8
  %48 = bitcast %class.SkWriteBuffer* %0 to void (%class.SkWriteBuffer*, i8*, i64)***
  %49 = load void (%class.SkWriteBuffer*, i8*, i64)**, void (%class.SkWriteBuffer*, i8*, i64)*** %48, align 8
  %50 = getelementptr inbounds void (%class.SkWriteBuffer*, i8*, i64)*, void (%class.SkWriteBuffer*, i8*, i64)** %49, i64 2
  %51 = load void (%class.SkWriteBuffer*, i8*, i64)*, void (%class.SkWriteBuffer*, i8*, i64)** %50, align 8
  call void %51(%class.SkWriteBuffer* %0, i8* %47, i64 %31) #5
  %52 = load i8*, i8** %45, align 8
  %53 = icmp eq i8* %52, %39
  br i1 %53, label %55, label %54

54:                                               ; preds = %43
  call void @_Z7sk_freePv(i8* %52) #5
  br label %55

55:                                               ; preds = %43, %54
  call void @llvm.lifetime.end.p0i8(i64 1040, i8* nonnull %32) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN12SkCanvasPriv25GetDstClipAndMatrixCountsEPKN8SkCanvas13ImageSetEntryEiPiS4_(%"struct.SkCanvas::ImageSetEntry"* nocapture readonly, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #3 align 2 {
  %5 = icmp sgt i32 %1, 0
  br i1 %5, label %6, label %33

6:                                                ; preds = %4
  %7 = zext i32 %1 to i64
  %8 = and i64 %7, 1
  %9 = icmp eq i32 %1, 1
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = sub nsw i64 %7, %8
  br label %36

12:                                               ; preds = %36, %6
  %13 = phi i32 [ undef, %6 ], [ %55, %36 ]
  %14 = phi i32 [ undef, %6 ], [ %59, %36 ]
  %15 = phi i64 [ 0, %6 ], [ %60, %36 ]
  %16 = phi i32 [ -1, %6 ], [ %59, %36 ]
  %17 = phi i32 [ 0, %6 ], [ %55, %36 ]
  %18 = icmp eq i64 %8, 0
  br i1 %18, label %29, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"struct.SkCanvas::ImageSetEntry", %"struct.SkCanvas::ImageSetEntry"* %0, i64 %15, i32 3
  %21 = load i32, i32* %20, align 8
  %22 = icmp sgt i32 %21, %16
  %23 = select i1 %22, i32 %21, i32 %16
  %24 = getelementptr inbounds %"struct.SkCanvas::ImageSetEntry", %"struct.SkCanvas::ImageSetEntry"* %0, i64 %15, i32 6
  %25 = load i8, i8* %24, align 4, !range !2
  %26 = shl nuw nsw i8 %25, 2
  %27 = zext i8 %26 to i32
  %28 = add nuw nsw i32 %17, %27
  br label %29

29:                                               ; preds = %12, %19
  %30 = phi i32 [ %13, %12 ], [ %28, %19 ]
  %31 = phi i32 [ %14, %12 ], [ %23, %19 ]
  %32 = add i32 %31, 1
  br label %33

33:                                               ; preds = %29, %4
  %34 = phi i32 [ 0, %4 ], [ %30, %29 ]
  %35 = phi i32 [ 0, %4 ], [ %32, %29 ]
  store i32 %34, i32* %2, align 4
  store i32 %35, i32* %3, align 4
  ret void

36:                                               ; preds = %36, %10
  %37 = phi i64 [ 0, %10 ], [ %60, %36 ]
  %38 = phi i32 [ -1, %10 ], [ %59, %36 ]
  %39 = phi i32 [ 0, %10 ], [ %55, %36 ]
  %40 = phi i64 [ %11, %10 ], [ %61, %36 ]
  %41 = getelementptr inbounds %"struct.SkCanvas::ImageSetEntry", %"struct.SkCanvas::ImageSetEntry"* %0, i64 %37, i32 6
  %42 = load i8, i8* %41, align 4, !range !2
  %43 = shl nuw nsw i8 %42, 2
  %44 = zext i8 %43 to i32
  %45 = add nuw nsw i32 %39, %44
  %46 = getelementptr inbounds %"struct.SkCanvas::ImageSetEntry", %"struct.SkCanvas::ImageSetEntry"* %0, i64 %37, i32 3
  %47 = load i32, i32* %46, align 8
  %48 = icmp sgt i32 %47, %38
  %49 = select i1 %48, i32 %47, i32 %38
  %50 = or i64 %37, 1
  %51 = getelementptr inbounds %"struct.SkCanvas::ImageSetEntry", %"struct.SkCanvas::ImageSetEntry"* %0, i64 %50, i32 6
  %52 = load i8, i8* %51, align 4, !range !2
  %53 = shl nuw nsw i8 %52, 2
  %54 = zext i8 %53 to i32
  %55 = add nuw nsw i32 %45, %54
  %56 = getelementptr inbounds %"struct.SkCanvas::ImageSetEntry", %"struct.SkCanvas::ImageSetEntry"* %0, i64 %50, i32 3
  %57 = load i32, i32* %56, align 8
  %58 = icmp sgt i32 %57, %49
  %59 = select i1 %58, i32 %57, i32 %49
  %60 = add nuw nsw i64 %37, 2
  %61 = add i64 %40, -2
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %12, label %36
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12SkCanvasPriv14ValidateMarkerEPKc(i8* readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::locale", align 8
  %3 = icmp eq i8* %0, null
  br i1 %3, label %47, label %4

4:                                                ; preds = %1
  %5 = bitcast %"class.std::__1::locale"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = getelementptr inbounds %"class.std::__1::locale", %"class.std::__1::locale"* %2, i64 0, i32 0
  store %"class.std::__1::locale::__imp"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::locale::__imp"*), %"class.std::__1::locale::__imp"** %6, align 8
  %7 = tail call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() #5
  call void @_ZNSt3__16localeC1ERKS0_(%"class.std::__1::locale"* nonnull %2, %"class.std::__1::locale"* dereferenceable(8) %7) #5
  %8 = load i8, i8* %0, align 1
  %9 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %2, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #5
  %10 = icmp sgt i8 %8, -1
  br i1 %10, label %11, label %45

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::locale::facet", %"class.std::__1::locale::facet"* %9, i64 1
  %13 = bitcast %"class.std::__1::locale::facet"* %12 to i16**
  %14 = load i16*, i16** %13, align 8
  %15 = sext i8 %8 to i64
  %16 = getelementptr inbounds i16, i16* %14, i64 %15
  %17 = load i16, i16* %16, align 2
  %18 = and i16 %17, 1024
  %19 = icmp eq i16 %18, 0
  br i1 %19, label %45, label %20

20:                                               ; preds = %11
  %21 = getelementptr inbounds i8, i8* %0, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %45, label %24

24:                                               ; preds = %20, %41
  %25 = phi i8 [ %43, %41 ], [ %22, %20 ]
  %26 = phi i8* [ %42, %41 ], [ %21, %20 ]
  %27 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %2, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #5
  %28 = icmp sgt i8 %25, -1
  br i1 %28, label %29, label %38

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.std::__1::locale::facet", %"class.std::__1::locale::facet"* %27, i64 1
  %31 = bitcast %"class.std::__1::locale::facet"* %30 to i16**
  %32 = load i16*, i16** %31, align 8
  %33 = sext i8 %25 to i64
  %34 = getelementptr inbounds i16, i16* %32, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = and i16 %35, 3072
  %37 = icmp eq i16 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %29, %24
  %39 = load i8, i8* %26, align 1
  %40 = icmp eq i8 %39, 95
  br i1 %40, label %41, label %45

41:                                               ; preds = %29, %38
  %42 = getelementptr inbounds i8, i8* %26, i64 1
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %24

45:                                               ; preds = %38, %41, %20, %11, %4
  %46 = phi i1 [ false, %11 ], [ false, %4 ], [ true, %20 ], [ false, %38 ], [ true, %41 ]
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %2) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  br label %47

47:                                               ; preds = %1, %45
  %48 = phi i1 [ %46, %45 ], [ false, %1 ]
  ret i1 %48
}

declare dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt3__16localeC1ERKS0_(%"class.std::__1::locale"*, %"class.std::__1::locale"* dereferenceable(8)) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #4

declare zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix*, %struct.SkRect*, %struct.SkRect* dereferenceable(16), i32) local_unnamed_addr #1

declare void @_ZN10SkWriter3213growToAtLeastEm(%class.SkWriter32*, i64) local_unnamed_addr #1

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #1

declare i8* @_ZN12SkReadBuffer4skipEmm(%class.SkReadBuffer*, i64, i64) local_unnamed_addr #1

declare i8* @_ZN12SkReadBuffer4skipEm(%class.SkReadBuffer*, i64) local_unnamed_addr #1

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #1

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
