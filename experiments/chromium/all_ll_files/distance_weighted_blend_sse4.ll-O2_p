; ModuleID = '../../third_party/libgav1/src/src/dsp/x86/distance_weighted_blend_sse4.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/x86/distance_weighted_blend_sse4.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp32DistanceWeightedBlendInit_SSE4_1Ev() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #4
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 10
  store void (i8*, i8*, i8, i8, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_128DistanceWeightedBlend_SSE4_1EPKvS4_hhiiPvl, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)** %2, align 8
  %3 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #4
  %4 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %3, i64 0, i32 10
  store void (i8*, i8*, i8, i8, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_128DistanceWeightedBlend_SSE4_1EPKvS4_hhiiPvl, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)** %4, align 8
  ret void
}

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_128DistanceWeightedBlend_SSE4_1EPKvS4_hhiiPvl(i8* readonly, i8* readonly, i8 zeroext, i8 zeroext, i32, i32, i8* nocapture, i64) #2 {
  %9 = bitcast i8* %0 to i16*
  %10 = bitcast i8* %1 to i16*
  switch i32 %4, label %694 [
    i32 4, label %11
    i32 8, label %341
  ]

11:                                               ; preds = %8
  switch i32 %5, label %250 [
    i32 4, label %12
    i32 8, label %93
  ]

12:                                               ; preds = %11
  %13 = zext i8 %2 to i32
  %14 = zext i8 %3 to i32
  %15 = shl nuw nsw i32 %14, 16
  %16 = or i32 %15, %13
  %17 = insertelement <4 x i32> undef, i32 %16, i32 0
  %18 = shufflevector <4 x i32> %17, <4 x i32> undef, <4 x i32> zeroinitializer
  %19 = bitcast <4 x i32> %18 to <8 x i16>
  %20 = bitcast i8* %0 to i64*
  %21 = load i64, i64* %20, align 1
  %22 = insertelement <2 x i64> undef, i64 %21, i32 0
  %23 = bitcast i8* %1 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = insertelement <2 x i64> undef, i64 %24, i32 0
  %26 = getelementptr inbounds i8, i8* %0, i64 8
  %27 = getelementptr inbounds i8, i8* %1, i64 8
  %28 = bitcast <2 x i64> %22 to <4 x float>
  %29 = bitcast i8* %26 to <2 x float>*
  %30 = load <2 x float>, <2 x float>* %29, align 1
  %31 = shufflevector <2 x float> %30, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x float> %28, <4 x float> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = bitcast <2 x i64> %25 to <4 x float>
  %34 = bitcast i8* %27 to <2 x float>*
  %35 = load <2 x float>, <2 x float>* %34, align 1
  %36 = shufflevector <2 x float> %35, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <4 x float> %33, <4 x float> %36, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %38 = getelementptr inbounds i8, i8* %0, i64 16
  %39 = getelementptr inbounds i8, i8* %1, i64 16
  %40 = bitcast <4 x float> %32 to <8 x i16>
  %41 = bitcast <4 x float> %37 to <8 x i16>
  %42 = shufflevector <8 x i16> %40, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %43 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %42, <8 x i16> %19) #4
  %44 = add <4 x i32> %43, <i32 128, i32 128, i32 128, i32 128>
  %45 = ashr <4 x i32> %44, <i32 8, i32 8, i32 8, i32 8>
  %46 = shufflevector <8 x i16> %40, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %47 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %46, <8 x i16> %19) #4
  %48 = add <4 x i32> %47, <i32 128, i32 128, i32 128, i32 128>
  %49 = ashr <4 x i32> %48, <i32 8, i32 8, i32 8, i32 8>
  %50 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %45, <4 x i32> %49) #4
  %51 = bitcast i8* %38 to i64*
  %52 = load i64, i64* %51, align 1
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = bitcast i8* %39 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = insertelement <2 x i64> undef, i64 %55, i32 0
  %57 = getelementptr inbounds i8, i8* %0, i64 24
  %58 = getelementptr inbounds i8, i8* %1, i64 24
  %59 = bitcast <2 x i64> %53 to <4 x float>
  %60 = bitcast i8* %57 to <2 x float>*
  %61 = load <2 x float>, <2 x float>* %60, align 1
  %62 = shufflevector <2 x float> %61, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <4 x float> %59, <4 x float> %62, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %64 = bitcast <2 x i64> %56 to <4 x float>
  %65 = bitcast i8* %58 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 1
  %67 = shufflevector <2 x float> %66, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <4 x float> %64, <4 x float> %67, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %69 = bitcast <4 x float> %63 to <8 x i16>
  %70 = bitcast <4 x float> %68 to <8 x i16>
  %71 = shufflevector <8 x i16> %69, <8 x i16> %70, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %72 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %71, <8 x i16> %19) #4
  %73 = add <4 x i32> %72, <i32 128, i32 128, i32 128, i32 128>
  %74 = ashr <4 x i32> %73, <i32 8, i32 8, i32 8, i32 8>
  %75 = shufflevector <8 x i16> %69, <8 x i16> %70, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %76 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %75, <8 x i16> %19) #4
  %77 = add <4 x i32> %76, <i32 128, i32 128, i32 128, i32 128>
  %78 = ashr <4 x i32> %77, <i32 8, i32 8, i32 8, i32 8>
  %79 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %74, <4 x i32> %78) #4
  %80 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %50, <8 x i16> %79) #4
  %81 = bitcast <16 x i8> %80 to <4 x i32>
  %82 = extractelement <4 x i32> %81, i32 0
  %83 = bitcast i8* %6 to i32*
  store i32 %82, i32* %83, align 1
  %84 = getelementptr inbounds i8, i8* %6, i64 %7
  %85 = extractelement <4 x i32> %81, i64 1
  %86 = bitcast i8* %84 to i32*
  store i32 %85, i32* %86, align 1
  %87 = getelementptr inbounds i8, i8* %84, i64 %7
  %88 = extractelement <4 x i32> %81, i64 2
  %89 = bitcast i8* %87 to i32*
  store i32 %88, i32* %89, align 1
  %90 = getelementptr inbounds i8, i8* %87, i64 %7
  %91 = extractelement <4 x i32> %81, i64 3
  %92 = bitcast i8* %90 to i32*
  store i32 %91, i32* %92, align 1
  br label %751

93:                                               ; preds = %11
  %94 = zext i8 %2 to i32
  %95 = zext i8 %3 to i32
  %96 = shl nuw nsw i32 %95, 16
  %97 = or i32 %96, %94
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = bitcast <4 x i32> %99 to <8 x i16>
  %101 = bitcast i8* %0 to i64*
  %102 = load i64, i64* %101, align 1
  %103 = insertelement <2 x i64> undef, i64 %102, i32 0
  %104 = bitcast i8* %1 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = insertelement <2 x i64> undef, i64 %105, i32 0
  %107 = getelementptr inbounds i8, i8* %0, i64 8
  %108 = getelementptr inbounds i8, i8* %1, i64 8
  %109 = bitcast <2 x i64> %103 to <4 x float>
  %110 = bitcast i8* %107 to <2 x float>*
  %111 = load <2 x float>, <2 x float>* %110, align 1
  %112 = shufflevector <2 x float> %111, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %113 = shufflevector <4 x float> %109, <4 x float> %112, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %114 = bitcast <2 x i64> %106 to <4 x float>
  %115 = bitcast i8* %108 to <2 x float>*
  %116 = load <2 x float>, <2 x float>* %115, align 1
  %117 = shufflevector <2 x float> %116, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %118 = shufflevector <4 x float> %114, <4 x float> %117, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %119 = getelementptr inbounds i8, i8* %0, i64 16
  %120 = getelementptr inbounds i8, i8* %1, i64 16
  %121 = bitcast <4 x float> %113 to <8 x i16>
  %122 = bitcast <4 x float> %118 to <8 x i16>
  %123 = shufflevector <8 x i16> %121, <8 x i16> %122, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %124 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %123, <8 x i16> %100) #4
  %125 = add <4 x i32> %124, <i32 128, i32 128, i32 128, i32 128>
  %126 = ashr <4 x i32> %125, <i32 8, i32 8, i32 8, i32 8>
  %127 = shufflevector <8 x i16> %121, <8 x i16> %122, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %127, <8 x i16> %100) #4
  %129 = add <4 x i32> %128, <i32 128, i32 128, i32 128, i32 128>
  %130 = ashr <4 x i32> %129, <i32 8, i32 8, i32 8, i32 8>
  %131 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %126, <4 x i32> %130) #4
  %132 = bitcast i8* %119 to i64*
  %133 = load i64, i64* %132, align 1
  %134 = insertelement <2 x i64> undef, i64 %133, i32 0
  %135 = bitcast i8* %120 to i64*
  %136 = load i64, i64* %135, align 1
  %137 = insertelement <2 x i64> undef, i64 %136, i32 0
  %138 = getelementptr inbounds i8, i8* %0, i64 24
  %139 = getelementptr inbounds i8, i8* %1, i64 24
  %140 = bitcast <2 x i64> %134 to <4 x float>
  %141 = bitcast i8* %138 to <2 x float>*
  %142 = load <2 x float>, <2 x float>* %141, align 1
  %143 = shufflevector <2 x float> %142, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %144 = shufflevector <4 x float> %140, <4 x float> %143, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %145 = bitcast <2 x i64> %137 to <4 x float>
  %146 = bitcast i8* %139 to <2 x float>*
  %147 = load <2 x float>, <2 x float>* %146, align 1
  %148 = shufflevector <2 x float> %147, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %149 = shufflevector <4 x float> %145, <4 x float> %148, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %150 = getelementptr inbounds i8, i8* %0, i64 32
  %151 = getelementptr inbounds i8, i8* %1, i64 32
  %152 = bitcast <4 x float> %144 to <8 x i16>
  %153 = bitcast <4 x float> %149 to <8 x i16>
  %154 = shufflevector <8 x i16> %152, <8 x i16> %153, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %155 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %154, <8 x i16> %100) #4
  %156 = add <4 x i32> %155, <i32 128, i32 128, i32 128, i32 128>
  %157 = ashr <4 x i32> %156, <i32 8, i32 8, i32 8, i32 8>
  %158 = shufflevector <8 x i16> %152, <8 x i16> %153, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %159 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %158, <8 x i16> %100) #4
  %160 = add <4 x i32> %159, <i32 128, i32 128, i32 128, i32 128>
  %161 = ashr <4 x i32> %160, <i32 8, i32 8, i32 8, i32 8>
  %162 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %157, <4 x i32> %161) #4
  %163 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %131, <8 x i16> %162) #4
  %164 = bitcast <16 x i8> %163 to <4 x i32>
  %165 = extractelement <4 x i32> %164, i32 0
  %166 = bitcast i8* %6 to i32*
  store i32 %165, i32* %166, align 1
  %167 = getelementptr inbounds i8, i8* %6, i64 %7
  %168 = extractelement <4 x i32> %164, i64 1
  %169 = bitcast i8* %167 to i32*
  store i32 %168, i32* %169, align 1
  %170 = getelementptr inbounds i8, i8* %167, i64 %7
  %171 = extractelement <4 x i32> %164, i64 2
  %172 = bitcast i8* %170 to i32*
  store i32 %171, i32* %172, align 1
  %173 = getelementptr inbounds i8, i8* %170, i64 %7
  %174 = extractelement <4 x i32> %164, i64 3
  %175 = bitcast i8* %173 to i32*
  store i32 %174, i32* %175, align 1
  %176 = getelementptr inbounds i8, i8* %173, i64 %7
  %177 = bitcast i8* %150 to i64*
  %178 = load i64, i64* %177, align 1
  %179 = insertelement <2 x i64> undef, i64 %178, i32 0
  %180 = bitcast i8* %151 to i64*
  %181 = load i64, i64* %180, align 1
  %182 = insertelement <2 x i64> undef, i64 %181, i32 0
  %183 = getelementptr inbounds i8, i8* %0, i64 40
  %184 = getelementptr inbounds i8, i8* %1, i64 40
  %185 = bitcast <2 x i64> %179 to <4 x float>
  %186 = bitcast i8* %183 to <2 x float>*
  %187 = load <2 x float>, <2 x float>* %186, align 1
  %188 = shufflevector <2 x float> %187, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %189 = shufflevector <4 x float> %185, <4 x float> %188, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %190 = bitcast <2 x i64> %182 to <4 x float>
  %191 = bitcast i8* %184 to <2 x float>*
  %192 = load <2 x float>, <2 x float>* %191, align 1
  %193 = shufflevector <2 x float> %192, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %194 = shufflevector <4 x float> %190, <4 x float> %193, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %195 = getelementptr inbounds i8, i8* %0, i64 48
  %196 = getelementptr inbounds i8, i8* %1, i64 48
  %197 = bitcast <4 x float> %189 to <8 x i16>
  %198 = bitcast <4 x float> %194 to <8 x i16>
  %199 = shufflevector <8 x i16> %197, <8 x i16> %198, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %200 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %199, <8 x i16> %100) #4
  %201 = add <4 x i32> %200, <i32 128, i32 128, i32 128, i32 128>
  %202 = ashr <4 x i32> %201, <i32 8, i32 8, i32 8, i32 8>
  %203 = shufflevector <8 x i16> %197, <8 x i16> %198, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %204 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %203, <8 x i16> %100) #4
  %205 = add <4 x i32> %204, <i32 128, i32 128, i32 128, i32 128>
  %206 = ashr <4 x i32> %205, <i32 8, i32 8, i32 8, i32 8>
  %207 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %202, <4 x i32> %206) #4
  %208 = bitcast i8* %195 to i64*
  %209 = load i64, i64* %208, align 1
  %210 = insertelement <2 x i64> undef, i64 %209, i32 0
  %211 = bitcast i8* %196 to i64*
  %212 = load i64, i64* %211, align 1
  %213 = insertelement <2 x i64> undef, i64 %212, i32 0
  %214 = getelementptr inbounds i8, i8* %0, i64 56
  %215 = getelementptr inbounds i8, i8* %1, i64 56
  %216 = bitcast <2 x i64> %210 to <4 x float>
  %217 = bitcast i8* %214 to <2 x float>*
  %218 = load <2 x float>, <2 x float>* %217, align 1
  %219 = shufflevector <2 x float> %218, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %220 = shufflevector <4 x float> %216, <4 x float> %219, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %221 = bitcast <2 x i64> %213 to <4 x float>
  %222 = bitcast i8* %215 to <2 x float>*
  %223 = load <2 x float>, <2 x float>* %222, align 1
  %224 = shufflevector <2 x float> %223, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %225 = shufflevector <4 x float> %221, <4 x float> %224, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %226 = bitcast <4 x float> %220 to <8 x i16>
  %227 = bitcast <4 x float> %225 to <8 x i16>
  %228 = shufflevector <8 x i16> %226, <8 x i16> %227, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %229 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %228, <8 x i16> %100) #4
  %230 = add <4 x i32> %229, <i32 128, i32 128, i32 128, i32 128>
  %231 = ashr <4 x i32> %230, <i32 8, i32 8, i32 8, i32 8>
  %232 = shufflevector <8 x i16> %226, <8 x i16> %227, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %233 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %232, <8 x i16> %100) #4
  %234 = add <4 x i32> %233, <i32 128, i32 128, i32 128, i32 128>
  %235 = ashr <4 x i32> %234, <i32 8, i32 8, i32 8, i32 8>
  %236 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %231, <4 x i32> %235) #4
  %237 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %207, <8 x i16> %236) #4
  %238 = bitcast <16 x i8> %237 to <4 x i32>
  %239 = extractelement <4 x i32> %238, i32 0
  %240 = bitcast i8* %176 to i32*
  store i32 %239, i32* %240, align 1
  %241 = getelementptr inbounds i8, i8* %176, i64 %7
  %242 = extractelement <4 x i32> %238, i64 1
  %243 = bitcast i8* %241 to i32*
  store i32 %242, i32* %243, align 1
  %244 = getelementptr inbounds i8, i8* %241, i64 %7
  %245 = extractelement <4 x i32> %238, i64 2
  %246 = bitcast i8* %244 to i32*
  store i32 %245, i32* %246, align 1
  %247 = getelementptr inbounds i8, i8* %244, i64 %7
  %248 = extractelement <4 x i32> %238, i64 3
  %249 = bitcast i8* %247 to i32*
  store i32 %248, i32* %249, align 1
  br label %751

250:                                              ; preds = %11
  %251 = zext i8 %2 to i32
  %252 = zext i8 %3 to i32
  %253 = shl nuw nsw i32 %252, 16
  %254 = or i32 %253, %251
  %255 = insertelement <4 x i32> undef, i32 %254, i32 0
  %256 = shufflevector <4 x i32> %255, <4 x i32> undef, <4 x i32> zeroinitializer
  %257 = bitcast <4 x i32> %256 to <8 x i16>
  br label %258

258:                                              ; preds = %258, %250
  %259 = phi i16* [ %9, %250 ], [ %312, %258 ]
  %260 = phi i16* [ %10, %250 ], [ %313, %258 ]
  %261 = phi i8* [ %6, %250 ], [ %338, %258 ]
  %262 = phi i32 [ 0, %250 ], [ %339, %258 ]
  %263 = bitcast i16* %259 to i64*
  %264 = load i64, i64* %263, align 1
  %265 = insertelement <2 x i64> undef, i64 %264, i32 0
  %266 = bitcast i16* %260 to i64*
  %267 = load i64, i64* %266, align 1
  %268 = insertelement <2 x i64> undef, i64 %267, i32 0
  %269 = getelementptr inbounds i16, i16* %259, i64 4
  %270 = getelementptr inbounds i16, i16* %260, i64 4
  %271 = bitcast <2 x i64> %265 to <4 x float>
  %272 = bitcast i16* %269 to <2 x float>*
  %273 = load <2 x float>, <2 x float>* %272, align 1
  %274 = shufflevector <2 x float> %273, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %275 = shufflevector <4 x float> %271, <4 x float> %274, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %276 = bitcast <2 x i64> %268 to <4 x float>
  %277 = bitcast i16* %270 to <2 x float>*
  %278 = load <2 x float>, <2 x float>* %277, align 1
  %279 = shufflevector <2 x float> %278, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %280 = shufflevector <4 x float> %276, <4 x float> %279, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %281 = getelementptr inbounds i16, i16* %259, i64 8
  %282 = getelementptr inbounds i16, i16* %260, i64 8
  %283 = bitcast <4 x float> %275 to <8 x i16>
  %284 = bitcast <4 x float> %280 to <8 x i16>
  %285 = shufflevector <8 x i16> %283, <8 x i16> %284, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %286 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %285, <8 x i16> %257) #4
  %287 = add <4 x i32> %286, <i32 128, i32 128, i32 128, i32 128>
  %288 = ashr <4 x i32> %287, <i32 8, i32 8, i32 8, i32 8>
  %289 = shufflevector <8 x i16> %283, <8 x i16> %284, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %290 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %289, <8 x i16> %257) #4
  %291 = add <4 x i32> %290, <i32 128, i32 128, i32 128, i32 128>
  %292 = ashr <4 x i32> %291, <i32 8, i32 8, i32 8, i32 8>
  %293 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %288, <4 x i32> %292) #4
  %294 = bitcast i16* %281 to i64*
  %295 = load i64, i64* %294, align 1
  %296 = insertelement <2 x i64> undef, i64 %295, i32 0
  %297 = bitcast i16* %282 to i64*
  %298 = load i64, i64* %297, align 1
  %299 = insertelement <2 x i64> undef, i64 %298, i32 0
  %300 = getelementptr inbounds i16, i16* %259, i64 12
  %301 = getelementptr inbounds i16, i16* %260, i64 12
  %302 = bitcast <2 x i64> %296 to <4 x float>
  %303 = bitcast i16* %300 to <2 x float>*
  %304 = load <2 x float>, <2 x float>* %303, align 1
  %305 = shufflevector <2 x float> %304, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %306 = shufflevector <4 x float> %302, <4 x float> %305, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %307 = bitcast <2 x i64> %299 to <4 x float>
  %308 = bitcast i16* %301 to <2 x float>*
  %309 = load <2 x float>, <2 x float>* %308, align 1
  %310 = shufflevector <2 x float> %309, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %311 = shufflevector <4 x float> %307, <4 x float> %310, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %312 = getelementptr inbounds i16, i16* %259, i64 16
  %313 = getelementptr inbounds i16, i16* %260, i64 16
  %314 = bitcast <4 x float> %306 to <8 x i16>
  %315 = bitcast <4 x float> %311 to <8 x i16>
  %316 = shufflevector <8 x i16> %314, <8 x i16> %315, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %317 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %316, <8 x i16> %257) #4
  %318 = add <4 x i32> %317, <i32 128, i32 128, i32 128, i32 128>
  %319 = ashr <4 x i32> %318, <i32 8, i32 8, i32 8, i32 8>
  %320 = shufflevector <8 x i16> %314, <8 x i16> %315, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %321 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %320, <8 x i16> %257) #4
  %322 = add <4 x i32> %321, <i32 128, i32 128, i32 128, i32 128>
  %323 = ashr <4 x i32> %322, <i32 8, i32 8, i32 8, i32 8>
  %324 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %319, <4 x i32> %323) #4
  %325 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %293, <8 x i16> %324) #4
  %326 = bitcast <16 x i8> %325 to <4 x i32>
  %327 = extractelement <4 x i32> %326, i32 0
  %328 = bitcast i8* %261 to i32*
  store i32 %327, i32* %328, align 1
  %329 = getelementptr inbounds i8, i8* %261, i64 %7
  %330 = extractelement <4 x i32> %326, i64 1
  %331 = bitcast i8* %329 to i32*
  store i32 %330, i32* %331, align 1
  %332 = getelementptr inbounds i8, i8* %329, i64 %7
  %333 = extractelement <4 x i32> %326, i64 2
  %334 = bitcast i8* %332 to i32*
  store i32 %333, i32* %334, align 1
  %335 = getelementptr inbounds i8, i8* %332, i64 %7
  %336 = extractelement <4 x i32> %326, i64 3
  %337 = bitcast i8* %335 to i32*
  store i32 %336, i32* %337, align 1
  %338 = getelementptr inbounds i8, i8* %335, i64 %7
  %339 = add nuw nsw i32 %262, 4
  %340 = icmp ult i32 %339, 16
  br i1 %340, label %258, label %751

341:                                              ; preds = %8
  switch i32 %5, label %640 [
    i32 4, label %342
    i32 8, label %425
    i32 16, label %586
  ]

342:                                              ; preds = %341
  %343 = zext i8 %2 to i32
  %344 = zext i8 %3 to i32
  %345 = shl nuw nsw i32 %344, 16
  %346 = or i32 %345, %343
  %347 = insertelement <4 x i32> undef, i32 %346, i32 0
  %348 = shufflevector <4 x i32> %347, <4 x i32> undef, <4 x i32> zeroinitializer
  %349 = bitcast <4 x i32> %348 to <8 x i16>
  %350 = bitcast i8* %0 to <8 x i16>*
  %351 = load <8 x i16>, <8 x i16>* %350, align 16
  %352 = bitcast i8* %1 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 16
  %354 = getelementptr inbounds i8, i8* %0, i64 16
  %355 = getelementptr inbounds i8, i8* %1, i64 16
  %356 = shufflevector <8 x i16> %351, <8 x i16> %353, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %357 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %356, <8 x i16> %349) #4
  %358 = add <4 x i32> %357, <i32 128, i32 128, i32 128, i32 128>
  %359 = ashr <4 x i32> %358, <i32 8, i32 8, i32 8, i32 8>
  %360 = shufflevector <8 x i16> %351, <8 x i16> %353, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %361 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %360, <8 x i16> %349) #4
  %362 = add <4 x i32> %361, <i32 128, i32 128, i32 128, i32 128>
  %363 = ashr <4 x i32> %362, <i32 8, i32 8, i32 8, i32 8>
  %364 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %359, <4 x i32> %363) #4
  %365 = bitcast i8* %354 to <8 x i16>*
  %366 = load <8 x i16>, <8 x i16>* %365, align 16
  %367 = bitcast i8* %355 to <8 x i16>*
  %368 = load <8 x i16>, <8 x i16>* %367, align 16
  %369 = getelementptr inbounds i8, i8* %0, i64 32
  %370 = getelementptr inbounds i8, i8* %1, i64 32
  %371 = shufflevector <8 x i16> %366, <8 x i16> %368, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %372 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %371, <8 x i16> %349) #4
  %373 = add <4 x i32> %372, <i32 128, i32 128, i32 128, i32 128>
  %374 = ashr <4 x i32> %373, <i32 8, i32 8, i32 8, i32 8>
  %375 = shufflevector <8 x i16> %366, <8 x i16> %368, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %376 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %375, <8 x i16> %349) #4
  %377 = add <4 x i32> %376, <i32 128, i32 128, i32 128, i32 128>
  %378 = ashr <4 x i32> %377, <i32 8, i32 8, i32 8, i32 8>
  %379 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %374, <4 x i32> %378) #4
  %380 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %364, <8 x i16> %379) #4
  %381 = bitcast <16 x i8> %380 to <2 x i64>
  %382 = extractelement <2 x i64> %381, i32 0
  %383 = bitcast i8* %6 to i64*
  store i64 %382, i64* %383, align 1
  %384 = getelementptr inbounds i8, i8* %6, i64 %7
  %385 = bitcast <16 x i8> %380 to <4 x float>
  %386 = shufflevector <4 x float> %385, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %387 = bitcast i8* %384 to <2 x float>*
  store <2 x float> %386, <2 x float>* %387, align 1
  %388 = getelementptr inbounds i8, i8* %384, i64 %7
  %389 = bitcast i8* %369 to <8 x i16>*
  %390 = load <8 x i16>, <8 x i16>* %389, align 16
  %391 = bitcast i8* %370 to <8 x i16>*
  %392 = load <8 x i16>, <8 x i16>* %391, align 16
  %393 = getelementptr inbounds i8, i8* %0, i64 48
  %394 = getelementptr inbounds i8, i8* %1, i64 48
  %395 = shufflevector <8 x i16> %390, <8 x i16> %392, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %396 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %395, <8 x i16> %349) #4
  %397 = add <4 x i32> %396, <i32 128, i32 128, i32 128, i32 128>
  %398 = ashr <4 x i32> %397, <i32 8, i32 8, i32 8, i32 8>
  %399 = shufflevector <8 x i16> %390, <8 x i16> %392, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %400 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %399, <8 x i16> %349) #4
  %401 = add <4 x i32> %400, <i32 128, i32 128, i32 128, i32 128>
  %402 = ashr <4 x i32> %401, <i32 8, i32 8, i32 8, i32 8>
  %403 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %398, <4 x i32> %402) #4
  %404 = bitcast i8* %393 to <8 x i16>*
  %405 = load <8 x i16>, <8 x i16>* %404, align 16
  %406 = bitcast i8* %394 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 16
  %408 = shufflevector <8 x i16> %405, <8 x i16> %407, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %409 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %408, <8 x i16> %349) #4
  %410 = add <4 x i32> %409, <i32 128, i32 128, i32 128, i32 128>
  %411 = ashr <4 x i32> %410, <i32 8, i32 8, i32 8, i32 8>
  %412 = shufflevector <8 x i16> %405, <8 x i16> %407, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %413 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %412, <8 x i16> %349) #4
  %414 = add <4 x i32> %413, <i32 128, i32 128, i32 128, i32 128>
  %415 = ashr <4 x i32> %414, <i32 8, i32 8, i32 8, i32 8>
  %416 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %411, <4 x i32> %415) #4
  %417 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %403, <8 x i16> %416) #4
  %418 = bitcast <16 x i8> %417 to <2 x i64>
  %419 = extractelement <2 x i64> %418, i32 0
  %420 = bitcast i8* %388 to i64*
  store i64 %419, i64* %420, align 1
  %421 = getelementptr inbounds i8, i8* %388, i64 %7
  %422 = bitcast <16 x i8> %417 to <4 x float>
  %423 = shufflevector <4 x float> %422, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %424 = bitcast i8* %421 to <2 x float>*
  store <2 x float> %423, <2 x float>* %424, align 1
  br label %751

425:                                              ; preds = %341
  %426 = zext i8 %2 to i32
  %427 = zext i8 %3 to i32
  %428 = shl nuw nsw i32 %427, 16
  %429 = or i32 %428, %426
  %430 = insertelement <4 x i32> undef, i32 %429, i32 0
  %431 = shufflevector <4 x i32> %430, <4 x i32> undef, <4 x i32> zeroinitializer
  %432 = bitcast <4 x i32> %431 to <8 x i16>
  %433 = bitcast i8* %0 to <8 x i16>*
  %434 = load <8 x i16>, <8 x i16>* %433, align 16
  %435 = bitcast i8* %1 to <8 x i16>*
  %436 = load <8 x i16>, <8 x i16>* %435, align 16
  %437 = getelementptr inbounds i8, i8* %0, i64 16
  %438 = getelementptr inbounds i8, i8* %1, i64 16
  %439 = shufflevector <8 x i16> %434, <8 x i16> %436, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %440 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %439, <8 x i16> %432) #4
  %441 = add <4 x i32> %440, <i32 128, i32 128, i32 128, i32 128>
  %442 = ashr <4 x i32> %441, <i32 8, i32 8, i32 8, i32 8>
  %443 = shufflevector <8 x i16> %434, <8 x i16> %436, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %444 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %443, <8 x i16> %432) #4
  %445 = add <4 x i32> %444, <i32 128, i32 128, i32 128, i32 128>
  %446 = ashr <4 x i32> %445, <i32 8, i32 8, i32 8, i32 8>
  %447 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %442, <4 x i32> %446) #4
  %448 = bitcast i8* %437 to <8 x i16>*
  %449 = load <8 x i16>, <8 x i16>* %448, align 16
  %450 = bitcast i8* %438 to <8 x i16>*
  %451 = load <8 x i16>, <8 x i16>* %450, align 16
  %452 = getelementptr inbounds i8, i8* %0, i64 32
  %453 = getelementptr inbounds i8, i8* %1, i64 32
  %454 = shufflevector <8 x i16> %449, <8 x i16> %451, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %455 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %454, <8 x i16> %432) #4
  %456 = add <4 x i32> %455, <i32 128, i32 128, i32 128, i32 128>
  %457 = ashr <4 x i32> %456, <i32 8, i32 8, i32 8, i32 8>
  %458 = shufflevector <8 x i16> %449, <8 x i16> %451, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %459 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %458, <8 x i16> %432) #4
  %460 = add <4 x i32> %459, <i32 128, i32 128, i32 128, i32 128>
  %461 = ashr <4 x i32> %460, <i32 8, i32 8, i32 8, i32 8>
  %462 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %457, <4 x i32> %461) #4
  %463 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %447, <8 x i16> %462) #4
  %464 = bitcast <16 x i8> %463 to <2 x i64>
  %465 = extractelement <2 x i64> %464, i32 0
  %466 = bitcast i8* %6 to i64*
  store i64 %465, i64* %466, align 1
  %467 = getelementptr inbounds i8, i8* %6, i64 %7
  %468 = bitcast <16 x i8> %463 to <4 x float>
  %469 = shufflevector <4 x float> %468, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %470 = bitcast i8* %467 to <2 x float>*
  store <2 x float> %469, <2 x float>* %470, align 1
  %471 = getelementptr inbounds i8, i8* %467, i64 %7
  %472 = bitcast i8* %452 to <8 x i16>*
  %473 = load <8 x i16>, <8 x i16>* %472, align 16
  %474 = bitcast i8* %453 to <8 x i16>*
  %475 = load <8 x i16>, <8 x i16>* %474, align 16
  %476 = getelementptr inbounds i8, i8* %0, i64 48
  %477 = getelementptr inbounds i8, i8* %1, i64 48
  %478 = shufflevector <8 x i16> %473, <8 x i16> %475, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %479 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %478, <8 x i16> %432) #4
  %480 = add <4 x i32> %479, <i32 128, i32 128, i32 128, i32 128>
  %481 = ashr <4 x i32> %480, <i32 8, i32 8, i32 8, i32 8>
  %482 = shufflevector <8 x i16> %473, <8 x i16> %475, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %483 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %482, <8 x i16> %432) #4
  %484 = add <4 x i32> %483, <i32 128, i32 128, i32 128, i32 128>
  %485 = ashr <4 x i32> %484, <i32 8, i32 8, i32 8, i32 8>
  %486 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %481, <4 x i32> %485) #4
  %487 = bitcast i8* %476 to <8 x i16>*
  %488 = load <8 x i16>, <8 x i16>* %487, align 16
  %489 = bitcast i8* %477 to <8 x i16>*
  %490 = load <8 x i16>, <8 x i16>* %489, align 16
  %491 = getelementptr inbounds i8, i8* %0, i64 64
  %492 = getelementptr inbounds i8, i8* %1, i64 64
  %493 = shufflevector <8 x i16> %488, <8 x i16> %490, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %494 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %493, <8 x i16> %432) #4
  %495 = add <4 x i32> %494, <i32 128, i32 128, i32 128, i32 128>
  %496 = ashr <4 x i32> %495, <i32 8, i32 8, i32 8, i32 8>
  %497 = shufflevector <8 x i16> %488, <8 x i16> %490, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %498 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %497, <8 x i16> %432) #4
  %499 = add <4 x i32> %498, <i32 128, i32 128, i32 128, i32 128>
  %500 = ashr <4 x i32> %499, <i32 8, i32 8, i32 8, i32 8>
  %501 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %496, <4 x i32> %500) #4
  %502 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %486, <8 x i16> %501) #4
  %503 = bitcast <16 x i8> %502 to <2 x i64>
  %504 = extractelement <2 x i64> %503, i32 0
  %505 = bitcast i8* %471 to i64*
  store i64 %504, i64* %505, align 1
  %506 = getelementptr inbounds i8, i8* %471, i64 %7
  %507 = bitcast <16 x i8> %502 to <4 x float>
  %508 = shufflevector <4 x float> %507, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %509 = bitcast i8* %506 to <2 x float>*
  store <2 x float> %508, <2 x float>* %509, align 1
  %510 = getelementptr inbounds i8, i8* %506, i64 %7
  %511 = bitcast i8* %491 to <8 x i16>*
  %512 = load <8 x i16>, <8 x i16>* %511, align 16
  %513 = bitcast i8* %492 to <8 x i16>*
  %514 = load <8 x i16>, <8 x i16>* %513, align 16
  %515 = getelementptr inbounds i8, i8* %0, i64 80
  %516 = getelementptr inbounds i8, i8* %1, i64 80
  %517 = shufflevector <8 x i16> %512, <8 x i16> %514, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %518 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %517, <8 x i16> %432) #4
  %519 = add <4 x i32> %518, <i32 128, i32 128, i32 128, i32 128>
  %520 = ashr <4 x i32> %519, <i32 8, i32 8, i32 8, i32 8>
  %521 = shufflevector <8 x i16> %512, <8 x i16> %514, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %522 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %521, <8 x i16> %432) #4
  %523 = add <4 x i32> %522, <i32 128, i32 128, i32 128, i32 128>
  %524 = ashr <4 x i32> %523, <i32 8, i32 8, i32 8, i32 8>
  %525 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %520, <4 x i32> %524) #4
  %526 = bitcast i8* %515 to <8 x i16>*
  %527 = load <8 x i16>, <8 x i16>* %526, align 16
  %528 = bitcast i8* %516 to <8 x i16>*
  %529 = load <8 x i16>, <8 x i16>* %528, align 16
  %530 = getelementptr inbounds i8, i8* %0, i64 96
  %531 = getelementptr inbounds i8, i8* %1, i64 96
  %532 = shufflevector <8 x i16> %527, <8 x i16> %529, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %533 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %532, <8 x i16> %432) #4
  %534 = add <4 x i32> %533, <i32 128, i32 128, i32 128, i32 128>
  %535 = ashr <4 x i32> %534, <i32 8, i32 8, i32 8, i32 8>
  %536 = shufflevector <8 x i16> %527, <8 x i16> %529, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %537 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %536, <8 x i16> %432) #4
  %538 = add <4 x i32> %537, <i32 128, i32 128, i32 128, i32 128>
  %539 = ashr <4 x i32> %538, <i32 8, i32 8, i32 8, i32 8>
  %540 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %535, <4 x i32> %539) #4
  %541 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %525, <8 x i16> %540) #4
  %542 = bitcast <16 x i8> %541 to <2 x i64>
  %543 = extractelement <2 x i64> %542, i32 0
  %544 = bitcast i8* %510 to i64*
  store i64 %543, i64* %544, align 1
  %545 = getelementptr inbounds i8, i8* %510, i64 %7
  %546 = bitcast <16 x i8> %541 to <4 x float>
  %547 = shufflevector <4 x float> %546, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %548 = bitcast i8* %545 to <2 x float>*
  store <2 x float> %547, <2 x float>* %548, align 1
  %549 = getelementptr inbounds i8, i8* %545, i64 %7
  %550 = bitcast i8* %530 to <8 x i16>*
  %551 = load <8 x i16>, <8 x i16>* %550, align 16
  %552 = bitcast i8* %531 to <8 x i16>*
  %553 = load <8 x i16>, <8 x i16>* %552, align 16
  %554 = getelementptr inbounds i8, i8* %0, i64 112
  %555 = getelementptr inbounds i8, i8* %1, i64 112
  %556 = shufflevector <8 x i16> %551, <8 x i16> %553, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %557 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %556, <8 x i16> %432) #4
  %558 = add <4 x i32> %557, <i32 128, i32 128, i32 128, i32 128>
  %559 = ashr <4 x i32> %558, <i32 8, i32 8, i32 8, i32 8>
  %560 = shufflevector <8 x i16> %551, <8 x i16> %553, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %561 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %560, <8 x i16> %432) #4
  %562 = add <4 x i32> %561, <i32 128, i32 128, i32 128, i32 128>
  %563 = ashr <4 x i32> %562, <i32 8, i32 8, i32 8, i32 8>
  %564 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %559, <4 x i32> %563) #4
  %565 = bitcast i8* %554 to <8 x i16>*
  %566 = load <8 x i16>, <8 x i16>* %565, align 16
  %567 = bitcast i8* %555 to <8 x i16>*
  %568 = load <8 x i16>, <8 x i16>* %567, align 16
  %569 = shufflevector <8 x i16> %566, <8 x i16> %568, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %570 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %569, <8 x i16> %432) #4
  %571 = add <4 x i32> %570, <i32 128, i32 128, i32 128, i32 128>
  %572 = ashr <4 x i32> %571, <i32 8, i32 8, i32 8, i32 8>
  %573 = shufflevector <8 x i16> %566, <8 x i16> %568, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %574 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %573, <8 x i16> %432) #4
  %575 = add <4 x i32> %574, <i32 128, i32 128, i32 128, i32 128>
  %576 = ashr <4 x i32> %575, <i32 8, i32 8, i32 8, i32 8>
  %577 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %572, <4 x i32> %576) #4
  %578 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %564, <8 x i16> %577) #4
  %579 = bitcast <16 x i8> %578 to <2 x i64>
  %580 = extractelement <2 x i64> %579, i32 0
  %581 = bitcast i8* %549 to i64*
  store i64 %580, i64* %581, align 1
  %582 = getelementptr inbounds i8, i8* %549, i64 %7
  %583 = bitcast <16 x i8> %578 to <4 x float>
  %584 = shufflevector <4 x float> %583, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %585 = bitcast i8* %582 to <2 x float>*
  store <2 x float> %584, <2 x float>* %585, align 1
  br label %751

586:                                              ; preds = %341
  %587 = zext i8 %2 to i32
  %588 = zext i8 %3 to i32
  %589 = shl nuw nsw i32 %588, 16
  %590 = or i32 %589, %587
  %591 = insertelement <4 x i32> undef, i32 %590, i32 0
  %592 = shufflevector <4 x i32> %591, <4 x i32> undef, <4 x i32> zeroinitializer
  %593 = bitcast <4 x i32> %592 to <8 x i16>
  br label %594

594:                                              ; preds = %594, %586
  %595 = phi i16* [ %9, %586 ], [ %618, %594 ]
  %596 = phi i16* [ %10, %586 ], [ %619, %594 ]
  %597 = phi i8* [ %6, %586 ], [ %637, %594 ]
  %598 = phi i32 [ 0, %586 ], [ %638, %594 ]
  %599 = bitcast i16* %595 to <8 x i16>*
  %600 = load <8 x i16>, <8 x i16>* %599, align 16
  %601 = bitcast i16* %596 to <8 x i16>*
  %602 = load <8 x i16>, <8 x i16>* %601, align 16
  %603 = getelementptr inbounds i16, i16* %595, i64 8
  %604 = getelementptr inbounds i16, i16* %596, i64 8
  %605 = shufflevector <8 x i16> %600, <8 x i16> %602, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %606 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %605, <8 x i16> %593) #4
  %607 = add <4 x i32> %606, <i32 128, i32 128, i32 128, i32 128>
  %608 = ashr <4 x i32> %607, <i32 8, i32 8, i32 8, i32 8>
  %609 = shufflevector <8 x i16> %600, <8 x i16> %602, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %610 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %609, <8 x i16> %593) #4
  %611 = add <4 x i32> %610, <i32 128, i32 128, i32 128, i32 128>
  %612 = ashr <4 x i32> %611, <i32 8, i32 8, i32 8, i32 8>
  %613 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %608, <4 x i32> %612) #4
  %614 = bitcast i16* %603 to <8 x i16>*
  %615 = load <8 x i16>, <8 x i16>* %614, align 16
  %616 = bitcast i16* %604 to <8 x i16>*
  %617 = load <8 x i16>, <8 x i16>* %616, align 16
  %618 = getelementptr inbounds i16, i16* %595, i64 16
  %619 = getelementptr inbounds i16, i16* %596, i64 16
  %620 = shufflevector <8 x i16> %615, <8 x i16> %617, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %621 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %620, <8 x i16> %593) #4
  %622 = add <4 x i32> %621, <i32 128, i32 128, i32 128, i32 128>
  %623 = ashr <4 x i32> %622, <i32 8, i32 8, i32 8, i32 8>
  %624 = shufflevector <8 x i16> %615, <8 x i16> %617, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %625 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %624, <8 x i16> %593) #4
  %626 = add <4 x i32> %625, <i32 128, i32 128, i32 128, i32 128>
  %627 = ashr <4 x i32> %626, <i32 8, i32 8, i32 8, i32 8>
  %628 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %623, <4 x i32> %627) #4
  %629 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %613, <8 x i16> %628) #4
  %630 = bitcast <16 x i8> %629 to <2 x i64>
  %631 = extractelement <2 x i64> %630, i32 0
  %632 = bitcast i8* %597 to i64*
  store i64 %631, i64* %632, align 1
  %633 = getelementptr inbounds i8, i8* %597, i64 %7
  %634 = bitcast <16 x i8> %629 to <4 x float>
  %635 = shufflevector <4 x float> %634, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %636 = bitcast i8* %633 to <2 x float>*
  store <2 x float> %635, <2 x float>* %636, align 1
  %637 = getelementptr inbounds i8, i8* %633, i64 %7
  %638 = add nuw nsw i32 %598, 2
  %639 = icmp ult i32 %638, 16
  br i1 %639, label %594, label %751

640:                                              ; preds = %341
  %641 = zext i8 %2 to i32
  %642 = zext i8 %3 to i32
  %643 = shl nuw nsw i32 %642, 16
  %644 = or i32 %643, %641
  %645 = insertelement <4 x i32> undef, i32 %644, i32 0
  %646 = shufflevector <4 x i32> %645, <4 x i32> undef, <4 x i32> zeroinitializer
  %647 = bitcast <4 x i32> %646 to <8 x i16>
  br label %648

648:                                              ; preds = %648, %640
  %649 = phi i16* [ %9, %640 ], [ %672, %648 ]
  %650 = phi i16* [ %10, %640 ], [ %673, %648 ]
  %651 = phi i8* [ %6, %640 ], [ %691, %648 ]
  %652 = phi i32 [ 0, %640 ], [ %692, %648 ]
  %653 = bitcast i16* %649 to <8 x i16>*
  %654 = load <8 x i16>, <8 x i16>* %653, align 16
  %655 = bitcast i16* %650 to <8 x i16>*
  %656 = load <8 x i16>, <8 x i16>* %655, align 16
  %657 = getelementptr inbounds i16, i16* %649, i64 8
  %658 = getelementptr inbounds i16, i16* %650, i64 8
  %659 = shufflevector <8 x i16> %654, <8 x i16> %656, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %660 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %659, <8 x i16> %647) #4
  %661 = add <4 x i32> %660, <i32 128, i32 128, i32 128, i32 128>
  %662 = ashr <4 x i32> %661, <i32 8, i32 8, i32 8, i32 8>
  %663 = shufflevector <8 x i16> %654, <8 x i16> %656, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %664 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %663, <8 x i16> %647) #4
  %665 = add <4 x i32> %664, <i32 128, i32 128, i32 128, i32 128>
  %666 = ashr <4 x i32> %665, <i32 8, i32 8, i32 8, i32 8>
  %667 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %662, <4 x i32> %666) #4
  %668 = bitcast i16* %657 to <8 x i16>*
  %669 = load <8 x i16>, <8 x i16>* %668, align 16
  %670 = bitcast i16* %658 to <8 x i16>*
  %671 = load <8 x i16>, <8 x i16>* %670, align 16
  %672 = getelementptr inbounds i16, i16* %649, i64 16
  %673 = getelementptr inbounds i16, i16* %650, i64 16
  %674 = shufflevector <8 x i16> %669, <8 x i16> %671, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %675 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %674, <8 x i16> %647) #4
  %676 = add <4 x i32> %675, <i32 128, i32 128, i32 128, i32 128>
  %677 = ashr <4 x i32> %676, <i32 8, i32 8, i32 8, i32 8>
  %678 = shufflevector <8 x i16> %669, <8 x i16> %671, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %679 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %678, <8 x i16> %647) #4
  %680 = add <4 x i32> %679, <i32 128, i32 128, i32 128, i32 128>
  %681 = ashr <4 x i32> %680, <i32 8, i32 8, i32 8, i32 8>
  %682 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %677, <4 x i32> %681) #4
  %683 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %667, <8 x i16> %682) #4
  %684 = bitcast <16 x i8> %683 to <2 x i64>
  %685 = extractelement <2 x i64> %684, i32 0
  %686 = bitcast i8* %651 to i64*
  store i64 %685, i64* %686, align 1
  %687 = getelementptr inbounds i8, i8* %651, i64 %7
  %688 = bitcast <16 x i8> %683 to <4 x float>
  %689 = shufflevector <4 x float> %688, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %690 = bitcast i8* %687 to <2 x float>*
  store <2 x float> %689, <2 x float>* %690, align 1
  %691 = getelementptr inbounds i8, i8* %687, i64 %7
  %692 = add nuw nsw i32 %652, 2
  %693 = icmp ult i32 %692, 32
  br i1 %693, label %648, label %751

694:                                              ; preds = %8
  %695 = zext i8 %2 to i32
  %696 = zext i8 %3 to i32
  %697 = shl nuw nsw i32 %696, 16
  %698 = or i32 %697, %695
  %699 = insertelement <4 x i32> undef, i32 %698, i32 0
  %700 = shufflevector <4 x i32> %699, <4 x i32> undef, <4 x i32> zeroinitializer
  %701 = bitcast <4 x i32> %700 to <8 x i16>
  %702 = sext i32 %4 to i64
  br label %703

703:                                              ; preds = %745, %694
  %704 = phi i8* [ %6, %694 ], [ %746, %745 ]
  %705 = phi i32 [ %5, %694 ], [ %749, %745 ]
  %706 = phi i16* [ %10, %694 ], [ %748, %745 ]
  %707 = phi i16* [ %9, %694 ], [ %747, %745 ]
  br label %708

708:                                              ; preds = %708, %703
  %709 = phi i64 [ %743, %708 ], [ 0, %703 ]
  %710 = getelementptr inbounds i16, i16* %707, i64 %709
  %711 = bitcast i16* %710 to <8 x i16>*
  %712 = load <8 x i16>, <8 x i16>* %711, align 16
  %713 = getelementptr inbounds i16, i16* %706, i64 %709
  %714 = bitcast i16* %713 to <8 x i16>*
  %715 = load <8 x i16>, <8 x i16>* %714, align 16
  %716 = shufflevector <8 x i16> %712, <8 x i16> %715, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %717 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %716, <8 x i16> %701) #4
  %718 = add <4 x i32> %717, <i32 128, i32 128, i32 128, i32 128>
  %719 = ashr <4 x i32> %718, <i32 8, i32 8, i32 8, i32 8>
  %720 = shufflevector <8 x i16> %712, <8 x i16> %715, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %721 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %720, <8 x i16> %701) #4
  %722 = add <4 x i32> %721, <i32 128, i32 128, i32 128, i32 128>
  %723 = ashr <4 x i32> %722, <i32 8, i32 8, i32 8, i32 8>
  %724 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %719, <4 x i32> %723) #4
  %725 = getelementptr inbounds i16, i16* %710, i64 8
  %726 = bitcast i16* %725 to <8 x i16>*
  %727 = load <8 x i16>, <8 x i16>* %726, align 16
  %728 = getelementptr inbounds i16, i16* %713, i64 8
  %729 = bitcast i16* %728 to <8 x i16>*
  %730 = load <8 x i16>, <8 x i16>* %729, align 16
  %731 = shufflevector <8 x i16> %727, <8 x i16> %730, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %732 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %731, <8 x i16> %701) #4
  %733 = add <4 x i32> %732, <i32 128, i32 128, i32 128, i32 128>
  %734 = ashr <4 x i32> %733, <i32 8, i32 8, i32 8, i32 8>
  %735 = shufflevector <8 x i16> %727, <8 x i16> %730, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %736 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %735, <8 x i16> %701) #4
  %737 = add <4 x i32> %736, <i32 128, i32 128, i32 128, i32 128>
  %738 = ashr <4 x i32> %737, <i32 8, i32 8, i32 8, i32 8>
  %739 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %734, <4 x i32> %738) #4
  %740 = getelementptr inbounds i8, i8* %704, i64 %709
  %741 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %724, <8 x i16> %739) #4
  %742 = bitcast i8* %740 to <16 x i8>*
  store <16 x i8> %741, <16 x i8>* %742, align 1
  %743 = add nuw nsw i64 %709, 16
  %744 = icmp slt i64 %743, %702
  br i1 %744, label %708, label %745

745:                                              ; preds = %708
  %746 = getelementptr inbounds i8, i8* %704, i64 %7
  %747 = getelementptr inbounds i16, i16* %707, i64 %702
  %748 = getelementptr inbounds i16, i16* %706, i64 %702
  %749 = add nsw i32 %705, -1
  %750 = icmp eq i32 %749, 0
  br i1 %750, label %751, label %703

751:                                              ; preds = %594, %648, %258, %745, %12, %93, %425, %342
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #3

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_128DistanceWeightedBlend_SSE4_1EPKvS4_hhiiPvl(i8* nocapture readonly, i8* nocapture readonly, i8 zeroext, i8 zeroext, i32, i32, i8* nocapture, i64) #2 {
  %9 = bitcast i8* %0 to i16*
  %10 = bitcast i8* %1 to i16*
  %11 = lshr i64 %7, 1
  switch i32 %4, label %695 [
    i32 4, label %12
    i32 8, label %354
  ]

12:                                               ; preds = %8
  switch i32 %5, label %237 [
    i32 4, label %13
    i32 8, label %120
  ]

13:                                               ; preds = %12
  %14 = zext i8 %2 to i32
  %15 = insertelement <4 x i32> undef, i32 %14, i32 0
  %16 = shufflevector <4 x i32> %15, <4 x i32> undef, <4 x i32> zeroinitializer
  %17 = zext i8 %3 to i32
  %18 = insertelement <4 x i32> undef, i32 %17, i32 0
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> zeroinitializer
  %20 = bitcast i8* %6 to i16*
  %21 = bitcast i8* %0 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = insertelement <2 x i64> undef, i64 %22, i32 0
  %24 = bitcast i8* %1 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = insertelement <2 x i64> undef, i64 %25, i32 0
  %27 = getelementptr inbounds i8, i8* %0, i64 8
  %28 = getelementptr inbounds i8, i8* %1, i64 8
  %29 = bitcast <2 x i64> %23 to <4 x float>
  %30 = bitcast i8* %27 to <2 x float>*
  %31 = load <2 x float>, <2 x float>* %30, align 1
  %32 = shufflevector <2 x float> %31, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x float> %29, <4 x float> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <2 x i64> %26 to <4 x float>
  %35 = bitcast i8* %28 to <2 x float>*
  %36 = load <2 x float>, <2 x float>* %35, align 1
  %37 = shufflevector <2 x float> %36, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <4 x float> %34, <4 x float> %37, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %39 = getelementptr inbounds i8, i8* %0, i64 16
  %40 = getelementptr inbounds i8, i8* %1, i64 16
  %41 = bitcast <4 x float> %33 to <8 x i16>
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = zext <4 x i16> %42 to <4 x i32>
  %44 = mul <4 x i32> %16, %43
  %45 = bitcast <4 x float> %38 to <8 x i16>
  %46 = shufflevector <8 x i16> %45, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %47 = zext <4 x i16> %46 to <4 x i32>
  %48 = mul <4 x i32> %19, %47
  %49 = add <4 x i32> %44, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %50 = add <4 x i32> %49, %48
  %51 = ashr <4 x i32> %50, <i32 8, i32 8, i32 8, i32 8>
  %52 = shufflevector <8 x i16> %41, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %53 = bitcast <8 x i16> %52 to <4 x i32>
  %54 = mul <4 x i32> %16, %53
  %55 = shufflevector <8 x i16> %45, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %56 = bitcast <8 x i16> %55 to <4 x i32>
  %57 = mul <4 x i32> %19, %56
  %58 = add <4 x i32> %54, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %59 = add <4 x i32> %58, %57
  %60 = ashr <4 x i32> %59, <i32 8, i32 8, i32 8, i32 8>
  %61 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %51, <4 x i32> %60) #4
  %62 = icmp slt <8 x i16> %61, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %63 = select <8 x i1> %62, <8 x i16> %61, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %64 = bitcast <8 x i16> %63 to <2 x i64>
  %65 = bitcast i8* %39 to i64*
  %66 = load i64, i64* %65, align 1
  %67 = insertelement <2 x i64> undef, i64 %66, i32 0
  %68 = bitcast i8* %40 to i64*
  %69 = load i64, i64* %68, align 1
  %70 = insertelement <2 x i64> undef, i64 %69, i32 0
  %71 = getelementptr inbounds i8, i8* %0, i64 24
  %72 = getelementptr inbounds i8, i8* %1, i64 24
  %73 = bitcast <2 x i64> %67 to <4 x float>
  %74 = bitcast i8* %71 to <2 x float>*
  %75 = load <2 x float>, <2 x float>* %74, align 1
  %76 = shufflevector <2 x float> %75, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %77 = shufflevector <4 x float> %73, <4 x float> %76, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %78 = bitcast <2 x i64> %70 to <4 x float>
  %79 = bitcast i8* %72 to <2 x float>*
  %80 = load <2 x float>, <2 x float>* %79, align 1
  %81 = shufflevector <2 x float> %80, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %82 = shufflevector <4 x float> %78, <4 x float> %81, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %83 = bitcast <4 x float> %77 to <8 x i16>
  %84 = shufflevector <8 x i16> %83, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %85 = zext <4 x i16> %84 to <4 x i32>
  %86 = mul <4 x i32> %16, %85
  %87 = bitcast <4 x float> %82 to <8 x i16>
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %89 = zext <4 x i16> %88 to <4 x i32>
  %90 = mul <4 x i32> %19, %89
  %91 = add <4 x i32> %86, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %92 = add <4 x i32> %91, %90
  %93 = ashr <4 x i32> %92, <i32 8, i32 8, i32 8, i32 8>
  %94 = shufflevector <8 x i16> %83, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %95 = bitcast <8 x i16> %94 to <4 x i32>
  %96 = mul <4 x i32> %16, %95
  %97 = shufflevector <8 x i16> %87, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %98 = bitcast <8 x i16> %97 to <4 x i32>
  %99 = mul <4 x i32> %19, %98
  %100 = add <4 x i32> %96, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %101 = add <4 x i32> %100, %99
  %102 = ashr <4 x i32> %101, <i32 8, i32 8, i32 8, i32 8>
  %103 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %93, <4 x i32> %102) #4
  %104 = icmp slt <8 x i16> %103, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %105 = select <8 x i1> %104, <8 x i16> %103, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %106 = bitcast <8 x i16> %105 to <2 x i64>
  %107 = extractelement <2 x i64> %64, i32 0
  %108 = bitcast i8* %6 to i64*
  store i64 %107, i64* %108, align 1
  %109 = getelementptr inbounds i16, i16* %20, i64 %11
  %110 = bitcast <8 x i16> %63 to <4 x float>
  %111 = shufflevector <4 x float> %110, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %112 = bitcast i16* %109 to <2 x float>*
  store <2 x float> %111, <2 x float>* %112, align 1
  %113 = getelementptr inbounds i16, i16* %109, i64 %11
  %114 = extractelement <2 x i64> %106, i32 0
  %115 = bitcast i16* %113 to i64*
  store i64 %114, i64* %115, align 1
  %116 = getelementptr inbounds i16, i16* %113, i64 %11
  %117 = bitcast <8 x i16> %105 to <4 x float>
  %118 = shufflevector <4 x float> %117, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %119 = bitcast i16* %116 to <2 x float>*
  store <2 x float> %118, <2 x float>* %119, align 1
  br label %778

120:                                              ; preds = %12
  %121 = bitcast i8* %6 to i16*
  %122 = zext i8 %2 to i32
  %123 = insertelement <4 x i32> undef, i32 %122, i32 0
  %124 = shufflevector <4 x i32> %123, <4 x i32> undef, <4 x i32> zeroinitializer
  %125 = zext i8 %3 to i32
  %126 = insertelement <4 x i32> undef, i32 %125, i32 0
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %128

128:                                              ; preds = %128, %120
  %129 = phi i32 [ 8, %120 ], [ %235, %128 ]
  %130 = phi i16* [ %121, %120 ], [ %234, %128 ]
  %131 = phi i16* [ %10, %120 ], [ %196, %128 ]
  %132 = phi i16* [ %9, %120 ], [ %195, %128 ]
  %133 = bitcast i16* %132 to i64*
  %134 = load i64, i64* %133, align 1
  %135 = insertelement <2 x i64> undef, i64 %134, i32 0
  %136 = bitcast i16* %131 to i64*
  %137 = load i64, i64* %136, align 1
  %138 = insertelement <2 x i64> undef, i64 %137, i32 0
  %139 = getelementptr inbounds i16, i16* %132, i64 4
  %140 = getelementptr inbounds i16, i16* %131, i64 4
  %141 = bitcast <2 x i64> %135 to <4 x float>
  %142 = bitcast i16* %139 to <2 x float>*
  %143 = load <2 x float>, <2 x float>* %142, align 1
  %144 = shufflevector <2 x float> %143, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %145 = shufflevector <4 x float> %141, <4 x float> %144, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %146 = bitcast <2 x i64> %138 to <4 x float>
  %147 = bitcast i16* %140 to <2 x float>*
  %148 = load <2 x float>, <2 x float>* %147, align 1
  %149 = shufflevector <2 x float> %148, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %150 = shufflevector <4 x float> %146, <4 x float> %149, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %151 = getelementptr inbounds i16, i16* %132, i64 8
  %152 = getelementptr inbounds i16, i16* %131, i64 8
  %153 = bitcast <4 x float> %145 to <8 x i16>
  %154 = shufflevector <8 x i16> %153, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %155 = zext <4 x i16> %154 to <4 x i32>
  %156 = mul <4 x i32> %124, %155
  %157 = bitcast <4 x float> %150 to <8 x i16>
  %158 = shufflevector <8 x i16> %157, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %159 = zext <4 x i16> %158 to <4 x i32>
  %160 = mul <4 x i32> %127, %159
  %161 = add <4 x i32> %156, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %162 = add <4 x i32> %161, %160
  %163 = ashr <4 x i32> %162, <i32 8, i32 8, i32 8, i32 8>
  %164 = shufflevector <8 x i16> %153, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %165 = bitcast <8 x i16> %164 to <4 x i32>
  %166 = mul <4 x i32> %124, %165
  %167 = shufflevector <8 x i16> %157, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %168 = bitcast <8 x i16> %167 to <4 x i32>
  %169 = mul <4 x i32> %127, %168
  %170 = add <4 x i32> %166, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %171 = add <4 x i32> %170, %169
  %172 = ashr <4 x i32> %171, <i32 8, i32 8, i32 8, i32 8>
  %173 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %163, <4 x i32> %172) #4
  %174 = icmp slt <8 x i16> %173, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %175 = select <8 x i1> %174, <8 x i16> %173, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %176 = bitcast <8 x i16> %175 to <2 x i64>
  %177 = bitcast i16* %151 to i64*
  %178 = load i64, i64* %177, align 1
  %179 = insertelement <2 x i64> undef, i64 %178, i32 0
  %180 = bitcast i16* %152 to i64*
  %181 = load i64, i64* %180, align 1
  %182 = insertelement <2 x i64> undef, i64 %181, i32 0
  %183 = getelementptr inbounds i16, i16* %132, i64 12
  %184 = getelementptr inbounds i16, i16* %131, i64 12
  %185 = bitcast <2 x i64> %179 to <4 x float>
  %186 = bitcast i16* %183 to <2 x float>*
  %187 = load <2 x float>, <2 x float>* %186, align 1
  %188 = shufflevector <2 x float> %187, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %189 = shufflevector <4 x float> %185, <4 x float> %188, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %190 = bitcast <2 x i64> %182 to <4 x float>
  %191 = bitcast i16* %184 to <2 x float>*
  %192 = load <2 x float>, <2 x float>* %191, align 1
  %193 = shufflevector <2 x float> %192, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %194 = shufflevector <4 x float> %190, <4 x float> %193, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %195 = getelementptr inbounds i16, i16* %132, i64 16
  %196 = getelementptr inbounds i16, i16* %131, i64 16
  %197 = bitcast <4 x float> %189 to <8 x i16>
  %198 = shufflevector <8 x i16> %197, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %199 = zext <4 x i16> %198 to <4 x i32>
  %200 = mul <4 x i32> %124, %199
  %201 = bitcast <4 x float> %194 to <8 x i16>
  %202 = shufflevector <8 x i16> %201, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %203 = zext <4 x i16> %202 to <4 x i32>
  %204 = mul <4 x i32> %127, %203
  %205 = add <4 x i32> %200, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %206 = add <4 x i32> %205, %204
  %207 = ashr <4 x i32> %206, <i32 8, i32 8, i32 8, i32 8>
  %208 = shufflevector <8 x i16> %197, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %209 = bitcast <8 x i16> %208 to <4 x i32>
  %210 = mul <4 x i32> %124, %209
  %211 = shufflevector <8 x i16> %201, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %212 = bitcast <8 x i16> %211 to <4 x i32>
  %213 = mul <4 x i32> %127, %212
  %214 = add <4 x i32> %210, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %215 = add <4 x i32> %214, %213
  %216 = ashr <4 x i32> %215, <i32 8, i32 8, i32 8, i32 8>
  %217 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %207, <4 x i32> %216) #4
  %218 = icmp slt <8 x i16> %217, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %219 = select <8 x i1> %218, <8 x i16> %217, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %220 = bitcast <8 x i16> %219 to <2 x i64>
  %221 = extractelement <2 x i64> %176, i32 0
  %222 = bitcast i16* %130 to i64*
  store i64 %221, i64* %222, align 1
  %223 = getelementptr inbounds i16, i16* %130, i64 %11
  %224 = bitcast <8 x i16> %175 to <4 x float>
  %225 = shufflevector <4 x float> %224, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %226 = bitcast i16* %223 to <2 x float>*
  store <2 x float> %225, <2 x float>* %226, align 1
  %227 = getelementptr inbounds i16, i16* %223, i64 %11
  %228 = extractelement <2 x i64> %220, i32 0
  %229 = bitcast i16* %227 to i64*
  store i64 %228, i64* %229, align 1
  %230 = getelementptr inbounds i16, i16* %227, i64 %11
  %231 = bitcast <8 x i16> %219 to <4 x float>
  %232 = shufflevector <4 x float> %231, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %233 = bitcast i16* %230 to <2 x float>*
  store <2 x float> %232, <2 x float>* %233, align 1
  %234 = getelementptr inbounds i16, i16* %230, i64 %11
  %235 = add nsw i32 %129, -4
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %778, label %128

237:                                              ; preds = %12
  %238 = bitcast i8* %6 to i16*
  %239 = zext i8 %2 to i32
  %240 = insertelement <4 x i32> undef, i32 %239, i32 0
  %241 = shufflevector <4 x i32> %240, <4 x i32> undef, <4 x i32> zeroinitializer
  %242 = zext i8 %3 to i32
  %243 = insertelement <4 x i32> undef, i32 %242, i32 0
  %244 = shufflevector <4 x i32> %243, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %245

245:                                              ; preds = %245, %237
  %246 = phi i32 [ 16, %237 ], [ %352, %245 ]
  %247 = phi i16* [ %238, %237 ], [ %351, %245 ]
  %248 = phi i16* [ %10, %237 ], [ %313, %245 ]
  %249 = phi i16* [ %9, %237 ], [ %312, %245 ]
  %250 = bitcast i16* %249 to i64*
  %251 = load i64, i64* %250, align 1
  %252 = insertelement <2 x i64> undef, i64 %251, i32 0
  %253 = bitcast i16* %248 to i64*
  %254 = load i64, i64* %253, align 1
  %255 = insertelement <2 x i64> undef, i64 %254, i32 0
  %256 = getelementptr inbounds i16, i16* %249, i64 4
  %257 = getelementptr inbounds i16, i16* %248, i64 4
  %258 = bitcast <2 x i64> %252 to <4 x float>
  %259 = bitcast i16* %256 to <2 x float>*
  %260 = load <2 x float>, <2 x float>* %259, align 1
  %261 = shufflevector <2 x float> %260, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %262 = shufflevector <4 x float> %258, <4 x float> %261, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %263 = bitcast <2 x i64> %255 to <4 x float>
  %264 = bitcast i16* %257 to <2 x float>*
  %265 = load <2 x float>, <2 x float>* %264, align 1
  %266 = shufflevector <2 x float> %265, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %267 = shufflevector <4 x float> %263, <4 x float> %266, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %268 = getelementptr inbounds i16, i16* %249, i64 8
  %269 = getelementptr inbounds i16, i16* %248, i64 8
  %270 = bitcast <4 x float> %262 to <8 x i16>
  %271 = shufflevector <8 x i16> %270, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %272 = zext <4 x i16> %271 to <4 x i32>
  %273 = mul <4 x i32> %241, %272
  %274 = bitcast <4 x float> %267 to <8 x i16>
  %275 = shufflevector <8 x i16> %274, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %276 = zext <4 x i16> %275 to <4 x i32>
  %277 = mul <4 x i32> %244, %276
  %278 = add <4 x i32> %273, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %279 = add <4 x i32> %278, %277
  %280 = ashr <4 x i32> %279, <i32 8, i32 8, i32 8, i32 8>
  %281 = shufflevector <8 x i16> %270, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %282 = bitcast <8 x i16> %281 to <4 x i32>
  %283 = mul <4 x i32> %241, %282
  %284 = shufflevector <8 x i16> %274, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %285 = bitcast <8 x i16> %284 to <4 x i32>
  %286 = mul <4 x i32> %244, %285
  %287 = add <4 x i32> %283, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %288 = add <4 x i32> %287, %286
  %289 = ashr <4 x i32> %288, <i32 8, i32 8, i32 8, i32 8>
  %290 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %280, <4 x i32> %289) #4
  %291 = icmp slt <8 x i16> %290, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %292 = select <8 x i1> %291, <8 x i16> %290, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %293 = bitcast <8 x i16> %292 to <2 x i64>
  %294 = bitcast i16* %268 to i64*
  %295 = load i64, i64* %294, align 1
  %296 = insertelement <2 x i64> undef, i64 %295, i32 0
  %297 = bitcast i16* %269 to i64*
  %298 = load i64, i64* %297, align 1
  %299 = insertelement <2 x i64> undef, i64 %298, i32 0
  %300 = getelementptr inbounds i16, i16* %249, i64 12
  %301 = getelementptr inbounds i16, i16* %248, i64 12
  %302 = bitcast <2 x i64> %296 to <4 x float>
  %303 = bitcast i16* %300 to <2 x float>*
  %304 = load <2 x float>, <2 x float>* %303, align 1
  %305 = shufflevector <2 x float> %304, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %306 = shufflevector <4 x float> %302, <4 x float> %305, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %307 = bitcast <2 x i64> %299 to <4 x float>
  %308 = bitcast i16* %301 to <2 x float>*
  %309 = load <2 x float>, <2 x float>* %308, align 1
  %310 = shufflevector <2 x float> %309, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %311 = shufflevector <4 x float> %307, <4 x float> %310, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %312 = getelementptr inbounds i16, i16* %249, i64 16
  %313 = getelementptr inbounds i16, i16* %248, i64 16
  %314 = bitcast <4 x float> %306 to <8 x i16>
  %315 = shufflevector <8 x i16> %314, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %316 = zext <4 x i16> %315 to <4 x i32>
  %317 = mul <4 x i32> %241, %316
  %318 = bitcast <4 x float> %311 to <8 x i16>
  %319 = shufflevector <8 x i16> %318, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %320 = zext <4 x i16> %319 to <4 x i32>
  %321 = mul <4 x i32> %244, %320
  %322 = add <4 x i32> %317, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %323 = add <4 x i32> %322, %321
  %324 = ashr <4 x i32> %323, <i32 8, i32 8, i32 8, i32 8>
  %325 = shufflevector <8 x i16> %314, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %326 = bitcast <8 x i16> %325 to <4 x i32>
  %327 = mul <4 x i32> %241, %326
  %328 = shufflevector <8 x i16> %318, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %329 = bitcast <8 x i16> %328 to <4 x i32>
  %330 = mul <4 x i32> %244, %329
  %331 = add <4 x i32> %327, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %332 = add <4 x i32> %331, %330
  %333 = ashr <4 x i32> %332, <i32 8, i32 8, i32 8, i32 8>
  %334 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %324, <4 x i32> %333) #4
  %335 = icmp slt <8 x i16> %334, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %336 = select <8 x i1> %335, <8 x i16> %334, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %337 = bitcast <8 x i16> %336 to <2 x i64>
  %338 = extractelement <2 x i64> %293, i32 0
  %339 = bitcast i16* %247 to i64*
  store i64 %338, i64* %339, align 1
  %340 = getelementptr inbounds i16, i16* %247, i64 %11
  %341 = bitcast <8 x i16> %292 to <4 x float>
  %342 = shufflevector <4 x float> %341, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %343 = bitcast i16* %340 to <2 x float>*
  store <2 x float> %342, <2 x float>* %343, align 1
  %344 = getelementptr inbounds i16, i16* %340, i64 %11
  %345 = extractelement <2 x i64> %337, i32 0
  %346 = bitcast i16* %344 to i64*
  store i64 %345, i64* %346, align 1
  %347 = getelementptr inbounds i16, i16* %344, i64 %11
  %348 = bitcast <8 x i16> %336 to <4 x float>
  %349 = shufflevector <4 x float> %348, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %350 = bitcast i16* %347 to <2 x float>*
  store <2 x float> %349, <2 x float>* %350, align 1
  %351 = getelementptr inbounds i16, i16* %347, i64 %11
  %352 = add nsw i32 %246, -4
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %778, label %245

354:                                              ; preds = %8
  switch i32 %5, label %622 [
    i32 4, label %355
    i32 8, label %476
    i32 16, label %549
  ]

355:                                              ; preds = %354
  %356 = bitcast i8* %6 to i16*
  %357 = zext i8 %2 to i32
  %358 = insertelement <4 x i32> undef, i32 %357, i32 0
  %359 = shufflevector <4 x i32> %358, <4 x i32> undef, <4 x i32> zeroinitializer
  %360 = zext i8 %3 to i32
  %361 = insertelement <4 x i32> undef, i32 %360, i32 0
  %362 = shufflevector <4 x i32> %361, <4 x i32> undef, <4 x i32> zeroinitializer
  %363 = bitcast i8* %0 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 16
  %365 = bitcast i8* %1 to <8 x i16>*
  %366 = load <8 x i16>, <8 x i16>* %365, align 16
  %367 = getelementptr inbounds i8, i8* %0, i64 16
  %368 = getelementptr inbounds i8, i8* %1, i64 16
  %369 = shufflevector <8 x i16> %364, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %370 = zext <4 x i16> %369 to <4 x i32>
  %371 = mul <4 x i32> %359, %370
  %372 = shufflevector <8 x i16> %366, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %373 = zext <4 x i16> %372 to <4 x i32>
  %374 = mul <4 x i32> %362, %373
  %375 = add <4 x i32> %371, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %376 = add <4 x i32> %375, %374
  %377 = ashr <4 x i32> %376, <i32 8, i32 8, i32 8, i32 8>
  %378 = shufflevector <8 x i16> %364, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %379 = bitcast <8 x i16> %378 to <4 x i32>
  %380 = mul <4 x i32> %359, %379
  %381 = shufflevector <8 x i16> %366, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %382 = bitcast <8 x i16> %381 to <4 x i32>
  %383 = mul <4 x i32> %362, %382
  %384 = add <4 x i32> %380, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %385 = add <4 x i32> %384, %383
  %386 = ashr <4 x i32> %385, <i32 8, i32 8, i32 8, i32 8>
  %387 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %377, <4 x i32> %386) #4
  %388 = icmp slt <8 x i16> %387, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %389 = select <8 x i1> %388, <8 x i16> %387, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %390 = bitcast i8* %367 to <8 x i16>*
  %391 = load <8 x i16>, <8 x i16>* %390, align 16
  %392 = bitcast i8* %368 to <8 x i16>*
  %393 = load <8 x i16>, <8 x i16>* %392, align 16
  %394 = getelementptr inbounds i8, i8* %0, i64 32
  %395 = getelementptr inbounds i8, i8* %1, i64 32
  %396 = shufflevector <8 x i16> %391, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %397 = zext <4 x i16> %396 to <4 x i32>
  %398 = mul <4 x i32> %359, %397
  %399 = shufflevector <8 x i16> %393, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %400 = zext <4 x i16> %399 to <4 x i32>
  %401 = mul <4 x i32> %362, %400
  %402 = add <4 x i32> %398, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %403 = add <4 x i32> %402, %401
  %404 = ashr <4 x i32> %403, <i32 8, i32 8, i32 8, i32 8>
  %405 = shufflevector <8 x i16> %391, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %406 = bitcast <8 x i16> %405 to <4 x i32>
  %407 = mul <4 x i32> %359, %406
  %408 = shufflevector <8 x i16> %393, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %409 = bitcast <8 x i16> %408 to <4 x i32>
  %410 = mul <4 x i32> %362, %409
  %411 = add <4 x i32> %407, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %412 = add <4 x i32> %411, %410
  %413 = ashr <4 x i32> %412, <i32 8, i32 8, i32 8, i32 8>
  %414 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %404, <4 x i32> %413) #4
  %415 = icmp slt <8 x i16> %414, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %416 = select <8 x i1> %415, <8 x i16> %414, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %417 = bitcast i8* %6 to <8 x i16>*
  store <8 x i16> %389, <8 x i16>* %417, align 1
  %418 = getelementptr inbounds i16, i16* %356, i64 %11
  %419 = bitcast i16* %418 to <8 x i16>*
  store <8 x i16> %416, <8 x i16>* %419, align 1
  %420 = getelementptr inbounds i16, i16* %418, i64 %11
  %421 = bitcast i8* %394 to <8 x i16>*
  %422 = load <8 x i16>, <8 x i16>* %421, align 16
  %423 = bitcast i8* %395 to <8 x i16>*
  %424 = load <8 x i16>, <8 x i16>* %423, align 16
  %425 = getelementptr inbounds i8, i8* %0, i64 48
  %426 = getelementptr inbounds i8, i8* %1, i64 48
  %427 = shufflevector <8 x i16> %422, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %428 = zext <4 x i16> %427 to <4 x i32>
  %429 = mul <4 x i32> %359, %428
  %430 = shufflevector <8 x i16> %424, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %431 = zext <4 x i16> %430 to <4 x i32>
  %432 = mul <4 x i32> %362, %431
  %433 = add <4 x i32> %429, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %434 = add <4 x i32> %433, %432
  %435 = ashr <4 x i32> %434, <i32 8, i32 8, i32 8, i32 8>
  %436 = shufflevector <8 x i16> %422, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %437 = bitcast <8 x i16> %436 to <4 x i32>
  %438 = mul <4 x i32> %359, %437
  %439 = shufflevector <8 x i16> %424, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %440 = bitcast <8 x i16> %439 to <4 x i32>
  %441 = mul <4 x i32> %362, %440
  %442 = add <4 x i32> %438, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %443 = add <4 x i32> %442, %441
  %444 = ashr <4 x i32> %443, <i32 8, i32 8, i32 8, i32 8>
  %445 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %435, <4 x i32> %444) #4
  %446 = icmp slt <8 x i16> %445, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %447 = select <8 x i1> %446, <8 x i16> %445, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %448 = bitcast i8* %425 to <8 x i16>*
  %449 = load <8 x i16>, <8 x i16>* %448, align 16
  %450 = bitcast i8* %426 to <8 x i16>*
  %451 = load <8 x i16>, <8 x i16>* %450, align 16
  %452 = shufflevector <8 x i16> %449, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %453 = zext <4 x i16> %452 to <4 x i32>
  %454 = mul <4 x i32> %359, %453
  %455 = shufflevector <8 x i16> %451, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %456 = zext <4 x i16> %455 to <4 x i32>
  %457 = mul <4 x i32> %362, %456
  %458 = add <4 x i32> %454, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %459 = add <4 x i32> %458, %457
  %460 = ashr <4 x i32> %459, <i32 8, i32 8, i32 8, i32 8>
  %461 = shufflevector <8 x i16> %449, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %462 = bitcast <8 x i16> %461 to <4 x i32>
  %463 = mul <4 x i32> %359, %462
  %464 = shufflevector <8 x i16> %451, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %465 = bitcast <8 x i16> %464 to <4 x i32>
  %466 = mul <4 x i32> %362, %465
  %467 = add <4 x i32> %463, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %468 = add <4 x i32> %467, %466
  %469 = ashr <4 x i32> %468, <i32 8, i32 8, i32 8, i32 8>
  %470 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %460, <4 x i32> %469) #4
  %471 = icmp slt <8 x i16> %470, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %472 = select <8 x i1> %471, <8 x i16> %470, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %473 = bitcast i16* %420 to <8 x i16>*
  store <8 x i16> %447, <8 x i16>* %473, align 1
  %474 = getelementptr inbounds i16, i16* %420, i64 %11
  %475 = bitcast i16* %474 to <8 x i16>*
  store <8 x i16> %472, <8 x i16>* %475, align 1
  br label %778

476:                                              ; preds = %354
  %477 = bitcast i8* %6 to i16*
  %478 = zext i8 %2 to i32
  %479 = insertelement <4 x i32> undef, i32 %478, i32 0
  %480 = shufflevector <4 x i32> %479, <4 x i32> undef, <4 x i32> zeroinitializer
  %481 = zext i8 %3 to i32
  %482 = insertelement <4 x i32> undef, i32 %481, i32 0
  %483 = shufflevector <4 x i32> %482, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %484

484:                                              ; preds = %484, %476
  %485 = phi i16* [ %477, %476 ], [ %546, %484 ]
  %486 = phi i32 [ 8, %476 ], [ %547, %484 ]
  %487 = phi i16* [ %10, %476 ], [ %521, %484 ]
  %488 = phi i16* [ %9, %476 ], [ %520, %484 ]
  %489 = bitcast i16* %488 to <8 x i16>*
  %490 = load <8 x i16>, <8 x i16>* %489, align 16
  %491 = bitcast i16* %487 to <8 x i16>*
  %492 = load <8 x i16>, <8 x i16>* %491, align 16
  %493 = getelementptr inbounds i16, i16* %488, i64 8
  %494 = getelementptr inbounds i16, i16* %487, i64 8
  %495 = shufflevector <8 x i16> %490, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %496 = zext <4 x i16> %495 to <4 x i32>
  %497 = mul <4 x i32> %480, %496
  %498 = shufflevector <8 x i16> %492, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %499 = zext <4 x i16> %498 to <4 x i32>
  %500 = mul <4 x i32> %483, %499
  %501 = add <4 x i32> %497, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %502 = add <4 x i32> %501, %500
  %503 = ashr <4 x i32> %502, <i32 8, i32 8, i32 8, i32 8>
  %504 = shufflevector <8 x i16> %490, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %505 = bitcast <8 x i16> %504 to <4 x i32>
  %506 = mul <4 x i32> %480, %505
  %507 = shufflevector <8 x i16> %492, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %508 = bitcast <8 x i16> %507 to <4 x i32>
  %509 = mul <4 x i32> %483, %508
  %510 = add <4 x i32> %506, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %511 = add <4 x i32> %510, %509
  %512 = ashr <4 x i32> %511, <i32 8, i32 8, i32 8, i32 8>
  %513 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %503, <4 x i32> %512) #4
  %514 = icmp slt <8 x i16> %513, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %515 = select <8 x i1> %514, <8 x i16> %513, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %516 = bitcast i16* %493 to <8 x i16>*
  %517 = load <8 x i16>, <8 x i16>* %516, align 16
  %518 = bitcast i16* %494 to <8 x i16>*
  %519 = load <8 x i16>, <8 x i16>* %518, align 16
  %520 = getelementptr inbounds i16, i16* %488, i64 16
  %521 = getelementptr inbounds i16, i16* %487, i64 16
  %522 = shufflevector <8 x i16> %517, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %523 = zext <4 x i16> %522 to <4 x i32>
  %524 = mul <4 x i32> %480, %523
  %525 = shufflevector <8 x i16> %519, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %526 = zext <4 x i16> %525 to <4 x i32>
  %527 = mul <4 x i32> %483, %526
  %528 = add <4 x i32> %524, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %529 = add <4 x i32> %528, %527
  %530 = ashr <4 x i32> %529, <i32 8, i32 8, i32 8, i32 8>
  %531 = shufflevector <8 x i16> %517, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %532 = bitcast <8 x i16> %531 to <4 x i32>
  %533 = mul <4 x i32> %480, %532
  %534 = shufflevector <8 x i16> %519, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %535 = bitcast <8 x i16> %534 to <4 x i32>
  %536 = mul <4 x i32> %483, %535
  %537 = add <4 x i32> %533, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %538 = add <4 x i32> %537, %536
  %539 = ashr <4 x i32> %538, <i32 8, i32 8, i32 8, i32 8>
  %540 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %530, <4 x i32> %539) #4
  %541 = icmp slt <8 x i16> %540, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %542 = select <8 x i1> %541, <8 x i16> %540, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %543 = bitcast i16* %485 to <8 x i16>*
  store <8 x i16> %515, <8 x i16>* %543, align 1
  %544 = getelementptr inbounds i16, i16* %485, i64 %11
  %545 = bitcast i16* %544 to <8 x i16>*
  store <8 x i16> %542, <8 x i16>* %545, align 1
  %546 = getelementptr inbounds i16, i16* %544, i64 %11
  %547 = add nsw i32 %486, -2
  %548 = icmp eq i32 %547, 0
  br i1 %548, label %778, label %484

549:                                              ; preds = %354
  %550 = bitcast i8* %6 to i16*
  %551 = zext i8 %2 to i32
  %552 = insertelement <4 x i32> undef, i32 %551, i32 0
  %553 = shufflevector <4 x i32> %552, <4 x i32> undef, <4 x i32> zeroinitializer
  %554 = zext i8 %3 to i32
  %555 = insertelement <4 x i32> undef, i32 %554, i32 0
  %556 = shufflevector <4 x i32> %555, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %557

557:                                              ; preds = %557, %549
  %558 = phi i16* [ %550, %549 ], [ %619, %557 ]
  %559 = phi i32 [ 16, %549 ], [ %620, %557 ]
  %560 = phi i16* [ %10, %549 ], [ %594, %557 ]
  %561 = phi i16* [ %9, %549 ], [ %593, %557 ]
  %562 = bitcast i16* %561 to <8 x i16>*
  %563 = load <8 x i16>, <8 x i16>* %562, align 16
  %564 = bitcast i16* %560 to <8 x i16>*
  %565 = load <8 x i16>, <8 x i16>* %564, align 16
  %566 = getelementptr inbounds i16, i16* %561, i64 8
  %567 = getelementptr inbounds i16, i16* %560, i64 8
  %568 = shufflevector <8 x i16> %563, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %569 = zext <4 x i16> %568 to <4 x i32>
  %570 = mul <4 x i32> %553, %569
  %571 = shufflevector <8 x i16> %565, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %572 = zext <4 x i16> %571 to <4 x i32>
  %573 = mul <4 x i32> %556, %572
  %574 = add <4 x i32> %570, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %575 = add <4 x i32> %574, %573
  %576 = ashr <4 x i32> %575, <i32 8, i32 8, i32 8, i32 8>
  %577 = shufflevector <8 x i16> %563, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %578 = bitcast <8 x i16> %577 to <4 x i32>
  %579 = mul <4 x i32> %553, %578
  %580 = shufflevector <8 x i16> %565, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %581 = bitcast <8 x i16> %580 to <4 x i32>
  %582 = mul <4 x i32> %556, %581
  %583 = add <4 x i32> %579, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %584 = add <4 x i32> %583, %582
  %585 = ashr <4 x i32> %584, <i32 8, i32 8, i32 8, i32 8>
  %586 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %576, <4 x i32> %585) #4
  %587 = icmp slt <8 x i16> %586, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %588 = select <8 x i1> %587, <8 x i16> %586, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %589 = bitcast i16* %566 to <8 x i16>*
  %590 = load <8 x i16>, <8 x i16>* %589, align 16
  %591 = bitcast i16* %567 to <8 x i16>*
  %592 = load <8 x i16>, <8 x i16>* %591, align 16
  %593 = getelementptr inbounds i16, i16* %561, i64 16
  %594 = getelementptr inbounds i16, i16* %560, i64 16
  %595 = shufflevector <8 x i16> %590, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %596 = zext <4 x i16> %595 to <4 x i32>
  %597 = mul <4 x i32> %553, %596
  %598 = shufflevector <8 x i16> %592, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %599 = zext <4 x i16> %598 to <4 x i32>
  %600 = mul <4 x i32> %556, %599
  %601 = add <4 x i32> %597, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %602 = add <4 x i32> %601, %600
  %603 = ashr <4 x i32> %602, <i32 8, i32 8, i32 8, i32 8>
  %604 = shufflevector <8 x i16> %590, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %605 = bitcast <8 x i16> %604 to <4 x i32>
  %606 = mul <4 x i32> %553, %605
  %607 = shufflevector <8 x i16> %592, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %608 = bitcast <8 x i16> %607 to <4 x i32>
  %609 = mul <4 x i32> %556, %608
  %610 = add <4 x i32> %606, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %611 = add <4 x i32> %610, %609
  %612 = ashr <4 x i32> %611, <i32 8, i32 8, i32 8, i32 8>
  %613 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %603, <4 x i32> %612) #4
  %614 = icmp slt <8 x i16> %613, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %615 = select <8 x i1> %614, <8 x i16> %613, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %616 = bitcast i16* %558 to <8 x i16>*
  store <8 x i16> %588, <8 x i16>* %616, align 1
  %617 = getelementptr inbounds i16, i16* %558, i64 %11
  %618 = bitcast i16* %617 to <8 x i16>*
  store <8 x i16> %615, <8 x i16>* %618, align 1
  %619 = getelementptr inbounds i16, i16* %617, i64 %11
  %620 = add nsw i32 %559, -2
  %621 = icmp eq i32 %620, 0
  br i1 %621, label %778, label %557

622:                                              ; preds = %354
  %623 = bitcast i8* %6 to i16*
  %624 = zext i8 %2 to i32
  %625 = insertelement <4 x i32> undef, i32 %624, i32 0
  %626 = shufflevector <4 x i32> %625, <4 x i32> undef, <4 x i32> zeroinitializer
  %627 = zext i8 %3 to i32
  %628 = insertelement <4 x i32> undef, i32 %627, i32 0
  %629 = shufflevector <4 x i32> %628, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %630

630:                                              ; preds = %630, %622
  %631 = phi i16* [ %623, %622 ], [ %692, %630 ]
  %632 = phi i32 [ 32, %622 ], [ %693, %630 ]
  %633 = phi i16* [ %10, %622 ], [ %667, %630 ]
  %634 = phi i16* [ %9, %622 ], [ %666, %630 ]
  %635 = bitcast i16* %634 to <8 x i16>*
  %636 = load <8 x i16>, <8 x i16>* %635, align 16
  %637 = bitcast i16* %633 to <8 x i16>*
  %638 = load <8 x i16>, <8 x i16>* %637, align 16
  %639 = getelementptr inbounds i16, i16* %634, i64 8
  %640 = getelementptr inbounds i16, i16* %633, i64 8
  %641 = shufflevector <8 x i16> %636, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %642 = zext <4 x i16> %641 to <4 x i32>
  %643 = mul <4 x i32> %626, %642
  %644 = shufflevector <8 x i16> %638, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %645 = zext <4 x i16> %644 to <4 x i32>
  %646 = mul <4 x i32> %629, %645
  %647 = add <4 x i32> %643, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %648 = add <4 x i32> %647, %646
  %649 = ashr <4 x i32> %648, <i32 8, i32 8, i32 8, i32 8>
  %650 = shufflevector <8 x i16> %636, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %651 = bitcast <8 x i16> %650 to <4 x i32>
  %652 = mul <4 x i32> %626, %651
  %653 = shufflevector <8 x i16> %638, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %654 = bitcast <8 x i16> %653 to <4 x i32>
  %655 = mul <4 x i32> %629, %654
  %656 = add <4 x i32> %652, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %657 = add <4 x i32> %656, %655
  %658 = ashr <4 x i32> %657, <i32 8, i32 8, i32 8, i32 8>
  %659 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %649, <4 x i32> %658) #4
  %660 = icmp slt <8 x i16> %659, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %661 = select <8 x i1> %660, <8 x i16> %659, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %662 = bitcast i16* %639 to <8 x i16>*
  %663 = load <8 x i16>, <8 x i16>* %662, align 16
  %664 = bitcast i16* %640 to <8 x i16>*
  %665 = load <8 x i16>, <8 x i16>* %664, align 16
  %666 = getelementptr inbounds i16, i16* %634, i64 16
  %667 = getelementptr inbounds i16, i16* %633, i64 16
  %668 = shufflevector <8 x i16> %663, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %669 = zext <4 x i16> %668 to <4 x i32>
  %670 = mul <4 x i32> %626, %669
  %671 = shufflevector <8 x i16> %665, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %672 = zext <4 x i16> %671 to <4 x i32>
  %673 = mul <4 x i32> %629, %672
  %674 = add <4 x i32> %670, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %675 = add <4 x i32> %674, %673
  %676 = ashr <4 x i32> %675, <i32 8, i32 8, i32 8, i32 8>
  %677 = shufflevector <8 x i16> %663, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %678 = bitcast <8 x i16> %677 to <4 x i32>
  %679 = mul <4 x i32> %626, %678
  %680 = shufflevector <8 x i16> %665, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %681 = bitcast <8 x i16> %680 to <4 x i32>
  %682 = mul <4 x i32> %629, %681
  %683 = add <4 x i32> %679, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %684 = add <4 x i32> %683, %682
  %685 = ashr <4 x i32> %684, <i32 8, i32 8, i32 8, i32 8>
  %686 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %676, <4 x i32> %685) #4
  %687 = icmp slt <8 x i16> %686, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %688 = select <8 x i1> %687, <8 x i16> %686, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %689 = bitcast i16* %631 to <8 x i16>*
  store <8 x i16> %661, <8 x i16>* %689, align 1
  %690 = getelementptr inbounds i16, i16* %631, i64 %11
  %691 = bitcast i16* %690 to <8 x i16>*
  store <8 x i16> %688, <8 x i16>* %691, align 1
  %692 = getelementptr inbounds i16, i16* %690, i64 %11
  %693 = add nsw i32 %632, -2
  %694 = icmp eq i32 %693, 0
  br i1 %694, label %778, label %630

695:                                              ; preds = %8
  %696 = bitcast i8* %6 to i16*
  %697 = zext i8 %2 to i32
  %698 = insertelement <4 x i32> undef, i32 %697, i32 0
  %699 = shufflevector <4 x i32> %698, <4 x i32> undef, <4 x i32> zeroinitializer
  %700 = zext i8 %3 to i32
  %701 = insertelement <4 x i32> undef, i32 %700, i32 0
  %702 = shufflevector <4 x i32> %701, <4 x i32> undef, <4 x i32> zeroinitializer
  %703 = sext i32 %4 to i64
  br label %704

704:                                              ; preds = %772, %695
  %705 = phi i16* [ %696, %695 ], [ %773, %772 ]
  %706 = phi i32 [ %5, %695 ], [ %776, %772 ]
  %707 = phi i16* [ %10, %695 ], [ %775, %772 ]
  %708 = phi i16* [ %9, %695 ], [ %774, %772 ]
  br label %709

709:                                              ; preds = %709, %704
  %710 = phi i64 [ %770, %709 ], [ 0, %704 ]
  %711 = getelementptr inbounds i16, i16* %708, i64 %710
  %712 = bitcast i16* %711 to <8 x i16>*
  %713 = load <8 x i16>, <8 x i16>* %712, align 16
  %714 = getelementptr inbounds i16, i16* %707, i64 %710
  %715 = bitcast i16* %714 to <8 x i16>*
  %716 = load <8 x i16>, <8 x i16>* %715, align 16
  %717 = shufflevector <8 x i16> %713, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %718 = zext <4 x i16> %717 to <4 x i32>
  %719 = mul <4 x i32> %699, %718
  %720 = shufflevector <8 x i16> %716, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %721 = zext <4 x i16> %720 to <4 x i32>
  %722 = mul <4 x i32> %702, %721
  %723 = add <4 x i32> %719, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %724 = add <4 x i32> %723, %722
  %725 = ashr <4 x i32> %724, <i32 8, i32 8, i32 8, i32 8>
  %726 = shufflevector <8 x i16> %713, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %727 = bitcast <8 x i16> %726 to <4 x i32>
  %728 = mul <4 x i32> %699, %727
  %729 = shufflevector <8 x i16> %716, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %730 = bitcast <8 x i16> %729 to <4 x i32>
  %731 = mul <4 x i32> %702, %730
  %732 = add <4 x i32> %728, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %733 = add <4 x i32> %732, %731
  %734 = ashr <4 x i32> %733, <i32 8, i32 8, i32 8, i32 8>
  %735 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %725, <4 x i32> %734) #4
  %736 = icmp slt <8 x i16> %735, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %737 = select <8 x i1> %736, <8 x i16> %735, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %738 = getelementptr inbounds i16, i16* %711, i64 8
  %739 = bitcast i16* %738 to <8 x i16>*
  %740 = load <8 x i16>, <8 x i16>* %739, align 16
  %741 = getelementptr inbounds i16, i16* %714, i64 8
  %742 = bitcast i16* %741 to <8 x i16>*
  %743 = load <8 x i16>, <8 x i16>* %742, align 16
  %744 = shufflevector <8 x i16> %740, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %745 = zext <4 x i16> %744 to <4 x i32>
  %746 = mul <4 x i32> %699, %745
  %747 = shufflevector <8 x i16> %743, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %748 = zext <4 x i16> %747 to <4 x i32>
  %749 = mul <4 x i32> %702, %748
  %750 = add <4 x i32> %746, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %751 = add <4 x i32> %750, %749
  %752 = ashr <4 x i32> %751, <i32 8, i32 8, i32 8, i32 8>
  %753 = shufflevector <8 x i16> %740, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %754 = bitcast <8 x i16> %753 to <4 x i32>
  %755 = mul <4 x i32> %699, %754
  %756 = shufflevector <8 x i16> %743, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %757 = bitcast <8 x i16> %756 to <4 x i32>
  %758 = mul <4 x i32> %702, %757
  %759 = add <4 x i32> %755, <i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %760 = add <4 x i32> %759, %758
  %761 = ashr <4 x i32> %760, <i32 8, i32 8, i32 8, i32 8>
  %762 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %752, <4 x i32> %761) #4
  %763 = icmp slt <8 x i16> %762, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %764 = select <8 x i1> %763, <8 x i16> %762, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %765 = getelementptr inbounds i16, i16* %705, i64 %710
  %766 = bitcast i16* %765 to <8 x i16>*
  store <8 x i16> %737, <8 x i16>* %766, align 1
  %767 = or i64 %710, 8
  %768 = getelementptr inbounds i16, i16* %705, i64 %767
  %769 = bitcast i16* %768 to <8 x i16>*
  store <8 x i16> %764, <8 x i16>* %769, align 1
  %770 = add nuw nsw i64 %710, 16
  %771 = icmp slt i64 %770, %703
  br i1 %771, label %709, label %772

772:                                              ; preds = %709
  %773 = getelementptr inbounds i16, i16* %705, i64 %11
  %774 = getelementptr inbounds i16, i16* %708, i64 %703
  %775 = getelementptr inbounds i16, i16* %707, i64 %703
  %776 = add nsw i32 %706, -1
  %777 = icmp eq i32 %776, 0
  br i1 %777, label %778, label %704

778:                                              ; preds = %557, %484, %630, %128, %245, %772, %13, %355
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
