; ModuleID = '../../third_party/webrtc/modules/audio_coding/neteq/merge.cc'
source_filename = "../../third_party/webrtc/modules/audio_coding/neteq/merge.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::Merge" = type { i32 (...)**, i32, i64, i32, i64, %"class.webrtc::Expand"*, %"class.webrtc::SyncBuffer"*, [100 x i16], [40 x i16], %"class.webrtc::AudioMultiVector", %"class.std::__1::vector.10" }
%"class.webrtc::AudioMultiVector" = type { i32 (...)**, %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.webrtc::AudioVector"**, %"class.webrtc::AudioVector"**, %"class.std::__1::__compressed_pair.1" }
%"class.webrtc::AudioVector" = type { i32 (...)**, %"class.std::__1::unique_ptr", i64, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i16* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.webrtc::AudioVector"** }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { i16*, i16*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.webrtc::Expand" = type { i32 (...)**, %"class.webrtc::RandomVector"*, %"class.webrtc::SyncBuffer"*, i8, i32, i64, i32, %"class.webrtc::BackgroundNoise"*, %"class.webrtc::StatisticsCalculator"*, i64, i64, [3 x i64], i32, i32, i8, i64, %"class.std::__1::unique_ptr.4" }
%"class.webrtc::RandomVector" = type opaque
%"class.webrtc::BackgroundNoise" = type opaque
%"class.webrtc::StatisticsCalculator" = type opaque
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.webrtc::Expand::ChannelParameters"* }
%"struct.webrtc::Expand::ChannelParameters" = type { i16, [7 x i16], [6 x i16], i16, i16, i16, i16, %"class.webrtc::AudioVector", %"class.webrtc::AudioVector", i8, i32 }
%"class.webrtc::SyncBuffer" = type { %"class.webrtc::AudioMultiVector", i64, i32, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIsNS_9allocatorIsEEE8__appendEm = comdat any

@_ZTVN6webrtc5MergeE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::Merge"*)* @_ZN6webrtc5MergeD2Ev to i8*), i8* bitcast (void (%"class.webrtc::Merge"*)* @_ZN6webrtc5MergeD0Ev to i8*), i8* bitcast (i64 (%"class.webrtc::Merge"*, i16*, i64, %"class.webrtc::AudioMultiVector"*)* @_ZN6webrtc5Merge7ProcessEPsmPNS_16AudioMultiVectorE to i8*), i8* bitcast (i64 (%"class.webrtc::Merge"*)* @_ZN6webrtc5Merge21RequiredFutureSamplesEv to i8*)] }, align 8
@WebRtcSpl_MaxAbsValueW16 = external local_unnamed_addr constant i16 (i16*, i64)*, align 8
@_ZN6webrtc9DspHelper18kDownsample8kHzTblE = external constant [3 x i16], align 2
@_ZN6webrtc9DspHelper19kDownsample16kHzTblE = external constant [5 x i16], align 2
@_ZN6webrtc9DspHelper19kDownsample32kHzTblE = external constant [7 x i16], align 2
@_ZN6webrtc9DspHelper19kDownsample48kHzTblE = external constant [7 x i16], align 2
@WebRtcSpl_DownsampleFast = external local_unnamed_addr constant i32 (i16*, i64, i16*, i64, i16*, i64, i32, i64)*, align 8
@WebRtcSpl_MaxAbsValueW32 = external local_unnamed_addr constant i32 (i32*, i64)*, align 8

@_ZN6webrtc5MergeC1EimPNS_6ExpandEPNS_10SyncBufferE = hidden unnamed_addr alias void (%"class.webrtc::Merge"*, i32, i64, %"class.webrtc::Expand"*, %"class.webrtc::SyncBuffer"*), void (%"class.webrtc::Merge"*, i32, i64, %"class.webrtc::Expand"*, %"class.webrtc::SyncBuffer"*)* @_ZN6webrtc5MergeC2EimPNS_6ExpandEPNS_10SyncBufferE
@_ZN6webrtc5MergeD1Ev = hidden unnamed_addr alias void (%"class.webrtc::Merge"*), void (%"class.webrtc::Merge"*)* @_ZN6webrtc5MergeD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc5MergeC2EimPNS_6ExpandEPNS_10SyncBufferE(%"class.webrtc::Merge"*, i32, i64, %"class.webrtc::Expand"*, %"class.webrtc::SyncBuffer"*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc5MergeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 1
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 2
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 3
  %10 = sdiv i32 %1, 8000
  store i32 %10, i32* %9, align 8
  %11 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 4
  %12 = sdiv i32 %1, 100
  %13 = sext i32 %12 to i64
  store i64 %13, i64* %11, align 8
  %14 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 5
  store %"class.webrtc::Expand"* %3, %"class.webrtc::Expand"** %14, align 8
  %15 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 6
  store %"class.webrtc::SyncBuffer"* %4, %"class.webrtc::SyncBuffer"** %15, align 8
  %16 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 9
  tail call void @_ZN6webrtc16AudioMultiVectorC1Em(%"class.webrtc::AudioMultiVector"* %16, i64 %2) #10
  %17 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 10
  %18 = bitcast %"class.std::__1::vector.10"* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #10
  ret void
}

declare void @_ZN6webrtc16AudioMultiVectorC1Em(%"class.webrtc::AudioMultiVector"*, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc5MergeD2Ev(%"class.webrtc::Merge"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc5MergeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 10, i32 0, i32 0
  %4 = load i16*, i16** %3, align 8
  %5 = icmp eq i16* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i16* %4 to i64
  %8 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 10, i32 0, i32 1
  %9 = bitcast i16** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i16* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #11
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 9
  tail call void @_ZN6webrtc16AudioMultiVectorD1Ev(%"class.webrtc::AudioMultiVector"* %12) #10
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6webrtc16AudioMultiVectorD1Ev(%"class.webrtc::AudioMultiVector"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc5MergeD0Ev(%"class.webrtc::Merge"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc5MergeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 10, i32 0, i32 0
  %4 = load i16*, i16** %3, align 8
  %5 = icmp eq i16* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i16* %4 to i64
  %8 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 10, i32 0, i32 1
  %9 = bitcast i16** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i16* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #11
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 9
  tail call void @_ZN6webrtc16AudioMultiVectorD1Ev(%"class.webrtc::AudioMultiVector"* %12) #10
  %13 = bitcast %"class.webrtc::Merge"* %0 to i8*
  tail call void @_ZdlPv(i8* %13) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN6webrtc5Merge7ProcessEPsmPNS_16AudioMultiVectorE(%"class.webrtc::Merge"*, i16*, i64, %"class.webrtc::AudioMultiVector"*) unnamed_addr #0 align 2 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %"class.webrtc::AudioMultiVector", align 8
  %8 = alloca i16, align 2
  %9 = alloca i16, align 2
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %202, label %11

11:                                               ; preds = %4
  %12 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #10
  store i64 -6148914691236517206, i64* %5, align 8
  %13 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #10
  store i64 -6148914691236517206, i64* %6, align 8
  %14 = call i64 @_ZN6webrtc5Merge17GetExpandedSignalEPmS1_(%"class.webrtc::Merge"* %0, i64* nonnull %5, i64* nonnull %6)
  %15 = bitcast %"class.webrtc::AudioMultiVector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %15) #10
  %16 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 2
  %17 = bitcast %"class.webrtc::AudioMultiVector"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 40, i1 false)
  %18 = load i64, i64* %16, align 8
  call void @_ZN6webrtc16AudioMultiVectorC1Em(%"class.webrtc::AudioMultiVector"* nonnull %7, i64 %18) #10
  call void @_ZN6webrtc16AudioMultiVector19PushBackInterleavedEN3rtc9ArrayViewIKsLln4711EEE(%"class.webrtc::AudioMultiVector"* nonnull %7, i16* %1, i64 %2) #10
  %19 = call i64 @_ZNK6webrtc16AudioMultiVector4SizeEv(%"class.webrtc::AudioMultiVector"* nonnull %7) #10
  %20 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %19, i64 2)
  %21 = extractvalue { i64, i1 } %20, 1
  %22 = extractvalue { i64, i1 } %20, 0
  %23 = select i1 %21, i64 -1, i64 %22
  %24 = call i8* @_Znam(i64 %23) #11
  %25 = bitcast i8* %24 to i16*
  %26 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 2)
  %27 = extractvalue { i64, i1 } %26, 1
  %28 = extractvalue { i64, i1 } %26, 0
  %29 = select i1 %27, i64 -1, i64 %28
  %30 = call i8* @_Znam(i64 %29) #11
  %31 = bitcast i8* %30 to i16*
  %32 = load i64, i64* %16, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %11
  %35 = bitcast %"class.webrtc::AudioMultiVector"* %3 to void (%"class.webrtc::AudioMultiVector"*, i64)***
  br label %55

36:                                               ; preds = %11
  %37 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 9
  %38 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 1
  %39 = load i32 (i16*, i64, i16*, i64, i16*, i64, i32, i64)*, i32 (i16*, i64, i16*, i64, i16*, i64, i32, i64)** @WebRtcSpl_DownsampleFast, align 8
  %40 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 7, i64 0
  %41 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 8, i64 0
  %42 = load i64, i64* %5, align 8
  %43 = load i64, i64* %6, align 8
  %44 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 10
  %45 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 10, i32 0, i32 1
  %46 = bitcast i16** %45 to i64*
  %47 = bitcast %"class.std::__1::vector.10"* %44 to i64*
  %48 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %44, i64 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 3
  %50 = bitcast i16* %8 to i8*
  %51 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 5
  %52 = bitcast i16* %9 to i8*
  %53 = bitcast %"class.std::__1::vector.10"* %44 to i8**
  %54 = bitcast %"class.webrtc::AudioMultiVector"* %3 to void (%"class.webrtc::AudioMultiVector"*, i64)***
  br label %71

55:                                               ; preds = %192, %34
  %56 = phi void (%"class.webrtc::AudioMultiVector"*, i64)*** [ %35, %34 ], [ %54, %192 ]
  %57 = phi i64 [ 0, %34 ], [ %125, %192 ]
  %58 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 6
  %59 = load %"class.webrtc::SyncBuffer"*, %"class.webrtc::SyncBuffer"** %58, align 8
  %60 = load i64, i64* %5, align 8
  %61 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %59, i64 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = bitcast %"class.webrtc::SyncBuffer"* %59 to void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)***
  %64 = load void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)**, void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)*** %63, align 8
  %65 = getelementptr inbounds void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)*, void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)** %64, i64 20
  %66 = load void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)*, void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)** %65, align 8
  call void %66(%"class.webrtc::SyncBuffer"* %59, %"class.webrtc::AudioMultiVector"* dereferenceable(40) %3, i64 %60, i64 %62) #10
  %67 = load void (%"class.webrtc::AudioMultiVector"*, i64)**, void (%"class.webrtc::AudioMultiVector"*, i64)*** %56, align 8
  %68 = getelementptr inbounds void (%"class.webrtc::AudioMultiVector"*, i64)*, void (%"class.webrtc::AudioMultiVector"*, i64)** %67, i64 7
  %69 = load void (%"class.webrtc::AudioMultiVector"*, i64)*, void (%"class.webrtc::AudioMultiVector"*, i64)** %68, align 8
  call void %69(%"class.webrtc::AudioMultiVector"* %3, i64 %60) #10
  %70 = sub i64 %57, %60
  call void @_ZdaPv(i8* nonnull %30) #11
  call void @_ZdaPv(i8* nonnull %24) #11
  call void @_ZN6webrtc16AudioMultiVectorD1Ev(%"class.webrtc::AudioMultiVector"* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #10
  br label %202

71:                                               ; preds = %36, %192
  %72 = phi i64 [ 0, %36 ], [ %199, %192 ]
  %73 = phi i64 [ 0, %36 ], [ %124, %192 ]
  %74 = call dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"* nonnull %7, i64 %72) #10
  %75 = bitcast %"class.webrtc::AudioVector"* %74 to void (%"class.webrtc::AudioVector"*, i64, i64, i16*)***
  %76 = load void (%"class.webrtc::AudioVector"*, i64, i64, i16*)**, void (%"class.webrtc::AudioVector"*, i64, i64, i16*)*** %75, align 8
  %77 = getelementptr inbounds void (%"class.webrtc::AudioVector"*, i64, i64, i16*)*, void (%"class.webrtc::AudioVector"*, i64, i64, i16*)** %76, i64 4
  %78 = load void (%"class.webrtc::AudioVector"*, i64, i64, i16*)*, void (%"class.webrtc::AudioVector"*, i64, i64, i16*)** %77, align 8
  call void %78(%"class.webrtc::AudioVector"* %74, i64 %19, i64 0, i16* nonnull %25) #10
  %79 = call dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"* %37, i64 %72) #10
  %80 = bitcast %"class.webrtc::AudioVector"* %79 to void (%"class.webrtc::AudioVector"*, i64, i64, i16*)***
  %81 = load void (%"class.webrtc::AudioVector"*, i64, i64, i16*)**, void (%"class.webrtc::AudioVector"*, i64, i64, i16*)*** %80, align 8
  %82 = getelementptr inbounds void (%"class.webrtc::AudioVector"*, i64, i64, i16*)*, void (%"class.webrtc::AudioVector"*, i64, i64, i16*)** %81, i64 4
  %83 = load void (%"class.webrtc::AudioVector"*, i64, i64, i16*)*, void (%"class.webrtc::AudioVector"*, i64, i64, i16*)** %82, align 8
  call void %83(%"class.webrtc::AudioVector"* %79, i64 %14, i64 0, i16* nonnull %31) #10
  %84 = call signext i16 @_ZNK6webrtc5Merge13SignalScalingEPKsmS2_(%"class.webrtc::Merge"* %0, i16* nonnull %25, i64 %19, i16* nonnull %31)
  %85 = icmp slt i16 %84, 16384
  %86 = select i1 %85, i16 %84, i16 16384
  %87 = icmp eq i64 %72, 0
  br i1 %87, label %88, label %123

88:                                               ; preds = %71
  %89 = load i32, i32* %38, align 8
  %90 = sdiv i32 %89, 4000
  %91 = sdiv i32 %89, 100
  %92 = sext i32 %91 to i64
  switch i32 %89, label %95 [
    i32 8000, label %96
    i32 16000, label %93
    i32 32000, label %94
  ]

93:                                               ; preds = %88
  br label %96

94:                                               ; preds = %88
  br label %96

95:                                               ; preds = %88
  br label %96

96:                                               ; preds = %95, %94, %93, %88
  %97 = phi i16* [ getelementptr inbounds ([5 x i16], [5 x i16]* @_ZN6webrtc9DspHelper19kDownsample16kHzTblE, i64 0, i64 0), %93 ], [ getelementptr inbounds ([7 x i16], [7 x i16]* @_ZN6webrtc9DspHelper19kDownsample32kHzTblE, i64 0, i64 0), %94 ], [ getelementptr inbounds ([7 x i16], [7 x i16]* @_ZN6webrtc9DspHelper19kDownsample48kHzTblE, i64 0, i64 0), %95 ], [ getelementptr inbounds ([3 x i16], [3 x i16]* @_ZN6webrtc9DspHelper18kDownsample8kHzTblE, i64 0, i64 0), %88 ]
  %98 = phi i64 [ 5, %93 ], [ 7, %94 ], [ 7, %95 ], [ 3, %88 ]
  %99 = add nsw i64 %98, -1
  %100 = getelementptr inbounds i16, i16* %31, i64 %99
  %101 = sub i64 %14, %99
  %102 = call i32 %39(i16* %100, i64 %101, i16* %40, i64 100, i16* nonnull %97, i64 %98, i32 %90, i64 0) #10
  %103 = icmp ugt i64 %19, %92
  br i1 %103, label %117, label %104

104:                                              ; preds = %96
  %105 = call i64 @llvm.usub.sat.i64(i64 %19, i64 %99) #10
  %106 = sext i32 %90 to i64
  %107 = udiv i64 %105, %106
  %108 = icmp ult i64 %105, %106
  br i1 %108, label %112, label %109

109:                                              ; preds = %104
  %110 = getelementptr inbounds i16, i16* %25, i64 %99
  %111 = call i32 %39(i16* %110, i64 %105, i16* %41, i64 %107, i16* %97, i64 %98, i32 %90, i64 0) #10
  br label %112

112:                                              ; preds = %109, %104
  %113 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 8, i64 %107
  %114 = bitcast i16* %113 to i8*
  %115 = shl i64 %107, 1
  %116 = sub i64 80, %115
  call void @llvm.memset.p0i8.i64(i8* align 2 %114, i8 0, i64 %116, i1 false) #10
  br label %121

117:                                              ; preds = %96
  %118 = getelementptr inbounds i16, i16* %25, i64 %99
  %119 = sub i64 %19, %99
  %120 = call i32 %39(i16* %118, i64 %119, i16* %41, i64 40, i16* %97, i64 %98, i32 %90, i64 0) #10
  br label %121

121:                                              ; preds = %112, %117
  %122 = call i64 @_ZNK6webrtc5Merge22CorrelateAndPeakSearchEmmm(%"class.webrtc::Merge"* %0, i64 %42, i64 %19, i64 %43)
  br label %123

123:                                              ; preds = %121, %71
  %124 = phi i64 [ %122, %121 ], [ %73, %71 ]
  %125 = add i64 %124, %19
  %126 = load i64, i64* %46, align 8
  %127 = load i64, i64* %47, align 8
  %128 = sub i64 %126, %127
  %129 = ashr exact i64 %128, 1
  %130 = icmp ugt i64 %125, %129
  %131 = inttoptr i64 %127 to i16*
  br i1 %130, label %132, label %135

132:                                              ; preds = %123
  %133 = sub i64 %125, %129
  call void @_ZNSt3__16vectorIsNS_9allocatorIsEEE8__appendEm(%"class.std::__1::vector.10"* %44, i64 %133) #10
  %134 = load i16*, i16** %48, align 8
  br label %139

135:                                              ; preds = %123
  %136 = icmp ult i64 %125, %129
  br i1 %136, label %137, label %139

137:                                              ; preds = %135
  %138 = getelementptr inbounds i16, i16* %131, i64 %125
  store i16* %138, i16** %45, align 8
  br label %139

139:                                              ; preds = %132, %135, %137
  %140 = phi i16* [ %134, %132 ], [ %131, %135 ], [ %131, %137 ]
  %141 = getelementptr inbounds i16, i16* %140, i64 %124
  %142 = load i32, i32* %49, align 8
  %143 = sext i32 %142 to i64
  %144 = mul nsw i64 %143, 60
  %145 = sub i64 %14, %124
  %146 = icmp ult i64 %145, %144
  %147 = select i1 %146, i64 %145, i64 %144
  %148 = icmp ult i64 %19, %147
  %149 = select i1 %148, i64 %19, i64 %147
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %50) #10
  store i16 -21846, i16* %8, align 2
  %150 = load %"class.webrtc::Expand"*, %"class.webrtc::Expand"** %51, align 8
  %151 = getelementptr inbounds %"class.webrtc::Expand", %"class.webrtc::Expand"* %150, i64 0, i32 16, i32 0, i32 0, i32 0
  %152 = load %"struct.webrtc::Expand::ChannelParameters"*, %"struct.webrtc::Expand::ChannelParameters"** %151, align 8
  %153 = getelementptr inbounds %"struct.webrtc::Expand::ChannelParameters", %"struct.webrtc::Expand::ChannelParameters"* %152, i64 %72, i32 0
  %154 = load i16, i16* %153, align 8
  %155 = icmp slt i16 %154, %86
  %156 = select i1 %155, i16 %86, i16 %154
  store i16 %156, i16* %8, align 2
  %157 = icmp slt i16 %156, 16384
  br i1 %157, label %158, label %173

158:                                              ; preds = %139
  %159 = sext i16 %156 to i32
  %160 = shl nsw i32 %159, 6
  %161 = sub nsw i32 1048576, %160
  %162 = sext i32 %161 to i64
  %163 = udiv i64 %162, %19
  %164 = trunc i64 %163 to i32
  %165 = sdiv i32 4194, %142
  %166 = icmp slt i32 %165, %164
  %167 = select i1 %166, i32 %164, i32 %165
  %168 = call i32 @_ZN6webrtc9DspHelper10RampSignalEPsmii(i16* nonnull %25, i64 %149, i32 %159, i32 %167) #10
  %169 = trunc i32 %168 to i16
  store i16 %169, i16* %8, align 2
  %170 = getelementptr inbounds i16, i16* %25, i64 %149
  %171 = sub i64 %19, %149
  %172 = getelementptr inbounds i16, i16* %141, i64 %149
  call void @_ZN6webrtc9DspHelper12UnmuteSignalEPKsmPsiS3_(i16* %170, i64 %171, i16* nonnull %8, i32 %167, i16* %172) #10
  br label %180

173:                                              ; preds = %139
  %174 = getelementptr inbounds i16, i16* %141, i64 %149
  %175 = bitcast i16* %174 to i8*
  %176 = getelementptr inbounds i16, i16* %25, i64 %149
  %177 = bitcast i16* %176 to i8*
  %178 = sub i64 %19, %149
  %179 = shl i64 %178, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %175, i8* align 2 %177, i64 %179, i1 false)
  br label %180

180:                                              ; preds = %173, %158
  %181 = add i64 %149, 1
  %182 = udiv i64 16384, %181
  %183 = trunc i64 %182 to i16
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %52) #10
  %184 = sub nuw nsw i16 16384, %183
  store i16 %184, i16* %9, align 2
  %185 = load i8*, i8** %53, align 8
  %186 = shl i64 %124, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %185, i8* nonnull align 2 %30, i64 %186, i1 false)
  %187 = getelementptr inbounds i16, i16* %31, i64 %124
  call void @_ZN6webrtc9DspHelper9CrossFadeEPKsS2_mPssS3_(i16* %187, i16* nonnull %25, i64 %149, i16* nonnull %9, i16 signext %183, i16* %141) #10
  br i1 %87, label %188, label %192

188:                                              ; preds = %180
  %189 = load void (%"class.webrtc::AudioMultiVector"*, i64)**, void (%"class.webrtc::AudioMultiVector"*, i64)*** %54, align 8
  %190 = getelementptr inbounds void (%"class.webrtc::AudioMultiVector"*, i64)*, void (%"class.webrtc::AudioMultiVector"*, i64)** %189, i64 16
  %191 = load void (%"class.webrtc::AudioMultiVector"*, i64)*, void (%"class.webrtc::AudioMultiVector"*, i64)** %190, align 8
  call void %191(%"class.webrtc::AudioMultiVector"* %3, i64 %125) #10
  br label %192

192:                                              ; preds = %180, %188
  %193 = call dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"* %3, i64 %72) #10
  %194 = load i16*, i16** %48, align 8
  %195 = bitcast %"class.webrtc::AudioVector"* %193 to void (%"class.webrtc::AudioVector"*, i16*, i64, i64)***
  %196 = load void (%"class.webrtc::AudioVector"*, i16*, i64, i64)**, void (%"class.webrtc::AudioVector"*, i16*, i64, i64)*** %195, align 8
  %197 = getelementptr inbounds void (%"class.webrtc::AudioVector"*, i16*, i64, i64)*, void (%"class.webrtc::AudioVector"*, i16*, i64, i64)** %196, i64 16
  %198 = load void (%"class.webrtc::AudioVector"*, i16*, i64, i64)*, void (%"class.webrtc::AudioVector"*, i16*, i64, i64)** %197, align 8
  call void %198(%"class.webrtc::AudioVector"* %193, i16* %194, i64 %125, i64 0) #10
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %52) #10
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %50) #10
  %199 = add nuw i64 %72, 1
  %200 = load i64, i64* %16, align 8
  %201 = icmp ult i64 %199, %200
  br i1 %201, label %71, label %55

202:                                              ; preds = %4, %55
  %203 = phi i64 [ %70, %55 ], [ 0, %4 ]
  ret i64 %203
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN6webrtc5Merge17GetExpandedSignalEPmS1_(%"class.webrtc::Merge"*, i64* nocapture, i64* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.webrtc::AudioMultiVector", align 8
  %5 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 6
  %6 = load %"class.webrtc::SyncBuffer"*, %"class.webrtc::SyncBuffer"** %5, align 8
  %7 = tail call i64 @_ZNK6webrtc10SyncBuffer12FutureLengthEv(%"class.webrtc::SyncBuffer"* %6) #10
  store i64 %7, i64* %1, align 8
  %8 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 5
  %9 = load %"class.webrtc::Expand"*, %"class.webrtc::Expand"** %8, align 8
  %10 = bitcast %"class.webrtc::Expand"* %9 to void (%"class.webrtc::Expand"*)***
  %11 = load void (%"class.webrtc::Expand"*)**, void (%"class.webrtc::Expand"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.webrtc::Expand"*)*, void (%"class.webrtc::Expand"*)** %11, i64 5
  %13 = load void (%"class.webrtc::Expand"*)*, void (%"class.webrtc::Expand"*)** %12, align 8
  tail call void %13(%"class.webrtc::Expand"* %9) #10
  %14 = load i64, i64* %1, align 8
  %15 = icmp ugt i64 %14, 1259
  br i1 %15, label %16, label %25

16:                                               ; preds = %3
  %17 = add i64 %14, -1260
  %18 = load %"class.webrtc::SyncBuffer"*, %"class.webrtc::SyncBuffer"** %5, align 8
  %19 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %18, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"class.webrtc::SyncBuffer"* %18 to void (%"class.webrtc::SyncBuffer"*, i64, i64)***
  %22 = load void (%"class.webrtc::SyncBuffer"*, i64, i64)**, void (%"class.webrtc::SyncBuffer"*, i64, i64)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.webrtc::SyncBuffer"*, i64, i64)*, void (%"class.webrtc::SyncBuffer"*, i64, i64)** %22, i64 19
  %24 = load void (%"class.webrtc::SyncBuffer"*, i64, i64)*, void (%"class.webrtc::SyncBuffer"*, i64, i64)** %23, align 8
  tail call void %24(%"class.webrtc::SyncBuffer"* %18, i64 %17, i64 %20) #10
  store i64 1260, i64* %1, align 8
  br label %25

25:                                               ; preds = %16, %3
  %26 = bitcast %"class.webrtc::AudioMultiVector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %26) #10
  %27 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 2
  %28 = bitcast %"class.webrtc::AudioMultiVector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 40, i1 false)
  %29 = load i64, i64* %27, align 8
  call void @_ZN6webrtc16AudioMultiVectorC1Em(%"class.webrtc::AudioMultiVector"* nonnull %4, i64 %29) #10
  %30 = load %"class.webrtc::Expand"*, %"class.webrtc::Expand"** %8, align 8
  %31 = bitcast %"class.webrtc::Expand"* %30 to i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)***
  %32 = load i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)**, i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)*** %31, align 8
  %33 = getelementptr inbounds i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)*, i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)** %32, i64 3
  %34 = load i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)*, i32 (%"class.webrtc::Expand"*, %"class.webrtc::AudioMultiVector"*)** %33, align 8
  %35 = call i32 %34(%"class.webrtc::Expand"* %30, %"class.webrtc::AudioMultiVector"* nonnull %4) #10
  %36 = call i64 @_ZNK6webrtc16AudioMultiVector4SizeEv(%"class.webrtc::AudioMultiVector"* nonnull %4) #10
  store i64 %36, i64* %2, align 8
  %37 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 9
  call void @_ZN6webrtc16AudioMultiVector5ClearEv(%"class.webrtc::AudioMultiVector"* %37) #10
  %38 = load %"class.webrtc::SyncBuffer"*, %"class.webrtc::SyncBuffer"** %5, align 8
  %39 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %38, i64 0, i32 0
  %40 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %38, i64 0, i32 1
  %41 = load i64, i64* %40, align 8
  call void @_ZN6webrtc16AudioMultiVector17PushBackFromIndexERKS0_m(%"class.webrtc::AudioMultiVector"* %37, %"class.webrtc::AudioMultiVector"* dereferenceable(40) %39, i64 %41) #10
  %42 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 3
  %43 = load i32, i32* %42, align 8
  %44 = mul nsw i32 %43, 202
  %45 = sext i32 %44 to i64
  %46 = call i64 @_ZNK6webrtc16AudioMultiVector4SizeEv(%"class.webrtc::AudioMultiVector"* %37) #10
  %47 = icmp ult i64 %46, %45
  br i1 %47, label %48, label %57

48:                                               ; preds = %25
  %49 = call i64 @_ZNK6webrtc16AudioMultiVector4SizeEv(%"class.webrtc::AudioMultiVector"* %37) #10
  %50 = icmp ult i64 %49, %45
  br i1 %50, label %51, label %54

51:                                               ; preds = %48, %51
  call void @_ZN6webrtc16AudioMultiVector8PushBackERKS0_(%"class.webrtc::AudioMultiVector"* %37, %"class.webrtc::AudioMultiVector"* nonnull dereferenceable(40) %4) #10
  %52 = call i64 @_ZNK6webrtc16AudioMultiVector4SizeEv(%"class.webrtc::AudioMultiVector"* %37) #10
  %53 = icmp ult i64 %52, %45
  br i1 %53, label %51, label %54

54:                                               ; preds = %51, %48
  %55 = call i64 @_ZNK6webrtc16AudioMultiVector4SizeEv(%"class.webrtc::AudioMultiVector"* %37) #10
  %56 = sub i64 %55, %45
  call void @_ZN6webrtc16AudioMultiVector7PopBackEm(%"class.webrtc::AudioMultiVector"* %37, i64 %56) #10
  br label %57

57:                                               ; preds = %54, %25
  call void @_ZN6webrtc16AudioMultiVectorD1Ev(%"class.webrtc::AudioMultiVector"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %26) #10
  ret i64 %45
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN6webrtc16AudioMultiVector19PushBackInterleavedEN3rtc9ArrayViewIKsLln4711EEE(%"class.webrtc::AudioMultiVector"*, i16*, i64) local_unnamed_addr #1

declare i64 @_ZNK6webrtc16AudioMultiVector4SizeEv(%"class.webrtc::AudioMultiVector"*) unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #6

declare dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @_ZNK6webrtc5Merge13SignalScalingEPKsmS2_(%"class.webrtc::Merge"* nocapture readonly, i16*, i64, i16*) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %6 to i64
  %8 = shl nsw i64 %7, 6
  %9 = icmp ult i64 %8, %2
  %10 = select i1 %9, i64 %8, i64 %2
  %11 = load i16 (i16*, i64)*, i16 (i16*, i64)** @WebRtcSpl_MaxAbsValueW16, align 8
  %12 = tail call signext i16 %11(i16* %3, i64 %10) #10
  %13 = sext i16 %12 to i32
  %14 = mul nsw i32 %13, %13
  %15 = trunc i64 %10 to i32
  %16 = sdiv i32 2147483647, %15
  %17 = sdiv i32 %14, %16
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %4
  %20 = ashr i32 %17, 31
  %21 = xor i32 %20, %17
  %22 = tail call i32 @llvm.ctlz.i32(i32 %21, i1 false) #10, !range !2
  %23 = sub nuw nsw i32 32, %22
  br label %24

24:                                               ; preds = %4, %19
  %25 = phi i32 [ %23, %19 ], [ 0, %4 ]
  %26 = tail call i32 @WebRtcSpl_DotProductWithScale(i16* %3, i16* %3, i64 %10, i32 %25) #10
  %27 = tail call signext i16 %11(i16* %1, i64 %10) #10
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %28
  %30 = sdiv i32 %29, %16
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %37, label %32

32:                                               ; preds = %24
  %33 = ashr i32 %30, 31
  %34 = xor i32 %33, %30
  %35 = tail call i32 @llvm.ctlz.i32(i32 %34, i1 false) #10, !range !2
  %36 = sub nuw nsw i32 32, %35
  br label %37

37:                                               ; preds = %24, %32
  %38 = phi i32 [ %36, %32 ], [ 0, %24 ]
  %39 = tail call i32 @WebRtcSpl_DotProductWithScale(i16* %1, i16* %1, i64 %10, i32 %38) #10
  %40 = icmp sgt i32 %38, %25
  %41 = sub nsw i32 %38, %25
  %42 = sub nsw i32 %25, %38
  %43 = select i1 %40, i32 %41, i32 0
  %44 = ashr i32 %26, %43
  %45 = select i1 %40, i32 0, i32 %42
  %46 = ashr i32 %39, %45
  %47 = icmp sgt i32 %46, %44
  br i1 %47, label %48, label %75

48:                                               ; preds = %37
  %49 = icmp eq i32 %46, 0
  br i1 %49, label %62, label %50

50:                                               ; preds = %48
  %51 = ashr i32 %46, 31
  %52 = xor i32 %51, %46
  %53 = tail call i32 @llvm.ctlz.i32(i32 %52, i1 false) #10, !range !2
  %54 = trunc i32 %53 to i16
  %55 = add nsw i16 %54, -18
  %56 = sext i16 %55 to i32
  %57 = icmp sgt i16 %55, -1
  %58 = shl i32 %46, %56
  %59 = sub nsw i32 0, %56
  %60 = ashr i32 %46, %59
  %61 = select i1 %57, i32 %58, i32 %60
  br label %62

62:                                               ; preds = %50, %48
  %63 = phi i32 [ -17, %48 ], [ %56, %50 ]
  %64 = phi i32 [ 0, %48 ], [ %61, %50 ]
  %65 = add nsw i32 %63, 14
  %66 = icmp sgt i32 %65, -1
  %67 = shl i32 %44, %65
  %68 = sub nsw i32 -14, %63
  %69 = ashr i32 %44, %68
  %70 = select i1 %66, i32 %67, i32 %69
  %71 = sdiv i32 %70, %64
  %72 = shl i32 %71, 14
  %73 = tail call i32 @WebRtcSpl_SqrtFloor(i32 %72) #10
  %74 = trunc i32 %73 to i16
  br label %75

75:                                               ; preds = %37, %62
  %76 = phi i16 [ %74, %62 ], [ 16384, %37 ]
  ret i16 %76
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc5Merge10DownsampleEPKsmS2_m(%"class.webrtc::Merge"*, i16*, i64, i16*, i64) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = sdiv i32 %7, 4000
  %9 = sdiv i32 %7, 100
  %10 = sext i32 %9 to i64
  switch i32 %7, label %13 [
    i32 8000, label %14
    i32 16000, label %11
    i32 32000, label %12
  ]

11:                                               ; preds = %5
  br label %14

12:                                               ; preds = %5
  br label %14

13:                                               ; preds = %5
  br label %14

14:                                               ; preds = %5, %11, %13, %12
  %15 = phi i16* [ getelementptr inbounds ([5 x i16], [5 x i16]* @_ZN6webrtc9DspHelper19kDownsample16kHzTblE, i64 0, i64 0), %11 ], [ getelementptr inbounds ([7 x i16], [7 x i16]* @_ZN6webrtc9DspHelper19kDownsample32kHzTblE, i64 0, i64 0), %12 ], [ getelementptr inbounds ([7 x i16], [7 x i16]* @_ZN6webrtc9DspHelper19kDownsample48kHzTblE, i64 0, i64 0), %13 ], [ getelementptr inbounds ([3 x i16], [3 x i16]* @_ZN6webrtc9DspHelper18kDownsample8kHzTblE, i64 0, i64 0), %5 ]
  %16 = phi i64 [ 5, %11 ], [ 7, %12 ], [ 7, %13 ], [ 3, %5 ]
  %17 = add nsw i64 %16, -1
  %18 = load i32 (i16*, i64, i16*, i64, i16*, i64, i32, i64)*, i32 (i16*, i64, i16*, i64, i16*, i64, i32, i64)** @WebRtcSpl_DownsampleFast, align 8
  %19 = getelementptr inbounds i16, i16* %3, i64 %17
  %20 = sub i64 %4, %17
  %21 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 7, i64 0
  %22 = tail call i32 %18(i16* %19, i64 %20, i16* %21, i64 100, i16* nonnull %15, i64 %16, i32 %8, i64 0) #10
  %23 = icmp ult i64 %10, %2
  br i1 %23, label %38, label %24

24:                                               ; preds = %14
  %25 = tail call i64 @llvm.usub.sat.i64(i64 %2, i64 %17)
  %26 = sext i32 %8 to i64
  %27 = udiv i64 %25, %26
  %28 = icmp ult i64 %25, %26
  br i1 %28, label %33, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds i16, i16* %1, i64 %17
  %31 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 8, i64 0
  %32 = tail call i32 %18(i16* %30, i64 %25, i16* %31, i64 %27, i16* %15, i64 %16, i32 %8, i64 0) #10
  br label %33

33:                                               ; preds = %24, %29
  %34 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 8, i64 %27
  %35 = bitcast i16* %34 to i8*
  %36 = shl i64 %27, 1
  %37 = sub i64 80, %36
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %35, i8 0, i64 %37, i1 false)
  br label %43

38:                                               ; preds = %14
  %39 = getelementptr inbounds i16, i16* %1, i64 %17
  %40 = sub i64 %2, %17
  %41 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 8, i64 0
  %42 = tail call i32 %18(i16* %39, i64 %40, i16* %41, i64 40, i16* %15, i64 %16, i32 %8, i64 0) #10
  br label %43

43:                                               ; preds = %38, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK6webrtc5Merge22CorrelateAndPeakSearchEmmm(%"class.webrtc::Merge"*, i64, i64, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca [60 x i32], align 16
  %6 = alloca i64, align 8
  %7 = alloca i16, align 2
  %8 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 5
  %9 = load %"class.webrtc::Expand"*, %"class.webrtc::Expand"** %8, align 8
  %10 = getelementptr inbounds %"class.webrtc::Expand", %"class.webrtc::Expand"* %9, i64 0, i32 10
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 3
  %13 = load i32, i32* %12, align 8
  %14 = shl nsw i32 %13, 1
  %15 = sext i32 %14 to i64
  %16 = udiv i64 %11, %15
  %17 = add i64 %16, 1
  %18 = icmp ult i64 %17, 60
  %19 = select i1 %18, i64 %17, i64 60
  %20 = bitcast [60 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %20) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 240, i1 false)
  %21 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 8, i64 0
  %22 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 7, i64 0
  %23 = getelementptr inbounds [60 x i32], [60 x i32]* %5, i64 0, i64 0
  %24 = call i32 @_ZN6webrtc29CrossCorrelationWithAutoShiftEPKsS1_mmiPi(i16* %21, i16* %22, i64 40, i64 %19, i32 1, i32* nonnull %23) #10
  %25 = load %"class.webrtc::Expand"*, %"class.webrtc::Expand"** %8, align 8
  %26 = bitcast %"class.webrtc::Expand"* %25 to i64 (%"class.webrtc::Expand"*)***
  %27 = load i64 (%"class.webrtc::Expand"*)**, i64 (%"class.webrtc::Expand"*)*** %26, align 8
  %28 = getelementptr inbounds i64 (%"class.webrtc::Expand"*)*, i64 (%"class.webrtc::Expand"*)** %27, i64 6
  %29 = load i64 (%"class.webrtc::Expand"*)*, i64 (%"class.webrtc::Expand"*)** %28, align 8
  %30 = call i64 %29(%"class.webrtc::Expand"* %25) #10
  %31 = add i64 %30, -1
  %32 = shl i64 %31, 1
  %33 = add i64 %32, 60
  %34 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %33, i64 2)
  %35 = extractvalue { i64, i1 } %34, 1
  %36 = extractvalue { i64, i1 } %34, 0
  %37 = select i1 %35, i64 -1, i64 %36
  %38 = call i8* @_Znam(i64 %37) #11
  %39 = bitcast i8* %38 to i16*
  %40 = shl i64 %33, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %38, i8 0, i64 %40, i1 false)
  %41 = getelementptr inbounds i16, i16* %39, i64 %31
  %42 = load i32 (i32*, i64)*, i32 (i32*, i64)** @WebRtcSpl_MaxAbsValueW32, align 8
  %43 = call i32 %42(i32* nonnull %23, i64 %19) #10
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %4
  %46 = ashr i32 %43, 31
  %47 = xor i32 %46, %43
  %48 = call i32 @llvm.ctlz.i32(i32 %47, i1 false) #10, !range !2
  %49 = sub nsw i32 18, %48
  %50 = icmp ugt i32 %47, 16383
  br i1 %50, label %51, label %53

51:                                               ; preds = %4, %45
  %52 = phi i32 [ %49, %45 ], [ 17, %4 ]
  br label %53

53:                                               ; preds = %45, %51
  %54 = phi i32 [ %52, %51 ], [ 0, %45 ]
  call void @WebRtcSpl_VectorBitShiftW32ToW16(i16* %41, i64 %19, i32* nonnull %23, i32 %54) #10
  %55 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 4
  %56 = load i64, i64* %55, align 8
  %57 = load %"class.webrtc::Expand"*, %"class.webrtc::Expand"** %8, align 8
  %58 = bitcast %"class.webrtc::Expand"* %57 to i64 (%"class.webrtc::Expand"*)***
  %59 = load i64 (%"class.webrtc::Expand"*)**, i64 (%"class.webrtc::Expand"*)*** %58, align 8
  %60 = getelementptr inbounds i64 (%"class.webrtc::Expand"*)*, i64 (%"class.webrtc::Expand"*)** %59, i64 6
  %61 = load i64 (%"class.webrtc::Expand"*)*, i64 (%"class.webrtc::Expand"*)** %60, align 8
  %62 = call i64 %61(%"class.webrtc::Expand"* %57) #10
  %63 = add i64 %62, %56
  %64 = icmp ugt i64 %63, %1
  %65 = select i1 %64, i64 %63, i64 %1
  %66 = call i64 @llvm.usub.sat.i64(i64 %65, i64 %2)
  %67 = load i32, i32* %12, align 8
  %68 = shl nsw i32 %67, 1
  %69 = sext i32 %68 to i64
  %70 = udiv i64 %66, %69
  %71 = add i64 %30, 59
  %72 = sub i64 %71, %70
  %73 = icmp ult i64 %72, %19
  %74 = select i1 %73, i64 %72, i64 %19
  %75 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %75) #10
  store i64 -6148914691236517206, i64* %6, align 8
  %76 = bitcast i16* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %76) #10
  store i16 -21846, i16* %7, align 2
  %77 = getelementptr inbounds i16, i16* %41, i64 %70
  call void @_ZN6webrtc9DspHelper13PeakDetectionEPsmmiPmS1_(i16* %77, i64 %74, i64 1, i32 %67, i64* nonnull %6, i16* nonnull %7) #10
  %78 = load i64, i64* %6, align 8
  %79 = add i64 %78, %66
  br label %80

80:                                               ; preds = %80, %53
  %81 = phi i64 [ %79, %53 ], [ %96, %80 ]
  store i64 %81, i64* %6, align 8
  %82 = add i64 %81, %2
  %83 = load i64, i64* %55, align 8
  %84 = load %"class.webrtc::Expand"*, %"class.webrtc::Expand"** %8, align 8
  %85 = bitcast %"class.webrtc::Expand"* %84 to i64 (%"class.webrtc::Expand"*)***
  %86 = load i64 (%"class.webrtc::Expand"*)**, i64 (%"class.webrtc::Expand"*)*** %85, align 8
  %87 = getelementptr inbounds i64 (%"class.webrtc::Expand"*)*, i64 (%"class.webrtc::Expand"*)** %86, i64 6
  %88 = load i64 (%"class.webrtc::Expand"*)*, i64 (%"class.webrtc::Expand"*)** %87, align 8
  %89 = call i64 %88(%"class.webrtc::Expand"* %84) #10
  %90 = add i64 %89, %83
  %91 = icmp ult i64 %82, %90
  %92 = load i64, i64* %6, align 8
  %93 = add i64 %92, %2
  %94 = icmp ult i64 %93, %1
  %95 = or i1 %91, %94
  %96 = add i64 %92, %3
  br i1 %95, label %80, label %97

97:                                               ; preds = %80
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %76) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75) #10
  call void @_ZdaPv(i8* nonnull %38) #11
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %20) #10
  ret i64 %92
}

declare i32 @_ZN6webrtc9DspHelper10RampSignalEPsmii(i16*, i64, i32, i32) local_unnamed_addr #1

declare void @_ZN6webrtc9DspHelper12UnmuteSignalEPKsmPsiS3_(i16*, i64, i16*, i32, i16*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZN6webrtc9DspHelper9CrossFadeEPKsS2_mPssS3_(i16*, i16*, i64, i16*, i16 signext, i16*) local_unnamed_addr #1

declare i64 @_ZNK6webrtc10SyncBuffer12FutureLengthEv(%"class.webrtc::SyncBuffer"*) local_unnamed_addr #1

declare void @_ZN6webrtc16AudioMultiVector5ClearEv(%"class.webrtc::AudioMultiVector"*) unnamed_addr #1

declare void @_ZN6webrtc16AudioMultiVector17PushBackFromIndexERKS0_m(%"class.webrtc::AudioMultiVector"*, %"class.webrtc::AudioMultiVector"* dereferenceable(40), i64) unnamed_addr #1

declare void @_ZN6webrtc16AudioMultiVector8PushBackERKS0_(%"class.webrtc::AudioMultiVector"*, %"class.webrtc::AudioMultiVector"* dereferenceable(40)) unnamed_addr #1

declare void @_ZN6webrtc16AudioMultiVector7PopBackEm(%"class.webrtc::AudioMultiVector"*, i64) unnamed_addr #1

declare i32 @WebRtcSpl_DotProductWithScale(i16*, i16*, i64, i32) local_unnamed_addr #1

declare i32 @WebRtcSpl_SqrtFloor(i32) local_unnamed_addr #1

declare i32 @_ZN6webrtc29CrossCorrelationWithAutoShiftEPKsS1_mmiPi(i16*, i16*, i64, i64, i32, i32*) local_unnamed_addr #1

declare void @WebRtcSpl_VectorBitShiftW32ToW16(i16*, i64, i32*, i32) local_unnamed_addr #1

declare void @_ZN6webrtc9DspHelper13PeakDetectionEPsmmiPmS1_(i16*, i64, i64, i32, i64*, i16*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN6webrtc5Merge21RequiredFutureSamplesEv(%"class.webrtc::Merge"* nocapture readonly) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = sdiv i32 %3, 100
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds %"class.webrtc::Merge", %"class.webrtc::Merge"* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = mul i64 %7, %5
  ret i64 %8
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIsNS_9allocatorIsEEE8__appendEm(%"class.std::__1::vector.10"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i16** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i16** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 1
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i16*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i16, i16* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i16, i16* %13, i64 %18
  %20 = bitcast i16* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 2
  %25 = and i64 %24, -2
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint i16* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %81

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.10"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 1
  %34 = add i64 %33, %1
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.10"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 1
  %41 = icmp ult i64 %40, 4611686018427387903
  %42 = icmp ult i64 %39, %34
  %43 = select i1 %42, i64 %34, i64 %39
  %44 = select i1 %41, i64 %43, i64 9223372036854775807
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %53, label %46

46:                                               ; preds = %38
  %47 = icmp slt i64 %44, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %46
  tail call void @abort() #12
  unreachable

49:                                               ; preds = %46
  %50 = shl i64 %44, 1
  %51 = tail call i8* @_Znwm(i64 %50) #11
  %52 = bitcast i8* %51 to i16*
  br label %53

53:                                               ; preds = %49, %38
  %54 = phi i16* [ %52, %49 ], [ null, %38 ]
  %55 = getelementptr inbounds i16, i16* %54, i64 %33
  %56 = getelementptr inbounds i16, i16* %54, i64 %44
  %57 = getelementptr inbounds i16, i16* %55, i64 %1
  %58 = bitcast i16* %55 to i8*
  %59 = shl i64 %1, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %58, i8 0, i64 %59, i1 false) #10
  %60 = ptrtoint i16* %56 to i64
  %61 = ptrtoint i16* %57 to i64
  %62 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 0
  %63 = load i16*, i16** %62, align 8
  %64 = load i64, i64* %7, align 8
  %65 = ptrtoint i16* %63 to i64
  %66 = sub i64 %64, %65
  %67 = ashr exact i64 %66, 1
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds i16, i16* %55, i64 %68
  %70 = ptrtoint i16* %69 to i64
  %71 = icmp sgt i64 %66, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %53
  %73 = bitcast i16* %69 to i8*
  %74 = bitcast i16* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %74, i64 %66, i1 false) #10
  %75 = load i16*, i16** %62, align 8
  br label %76

76:                                               ; preds = %53, %72
  %77 = phi i16* [ %63, %53 ], [ %75, %72 ]
  store i64 %70, i64* %30, align 8
  store i64 %61, i64* %7, align 8
  store i64 %60, i64* %4, align 8
  %78 = icmp eq i16* %77, null
  br i1 %78, label %81, label %79

79:                                               ; preds = %76
  %80 = bitcast i16* %77 to i8*
  tail call void @_ZdlPv(i8* %80) #11
  br label %81

81:                                               ; preds = %79, %76, %27
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
