; ModuleID = '../../third_party/skia/src/gpu/text/GrDistanceFieldAdjustTable.cpp'
source_filename = "../../third_party/skia/src/gpu/text/GrDistanceFieldAdjustTable.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrDistanceFieldAdjustTable = type { float*, float* }

@_ZZN26GrDistanceFieldAdjustTable3GetEvE4dfat = internal unnamed_addr global %class.GrDistanceFieldAdjustTable* null, align 8
@_ZGVZN26GrDistanceFieldAdjustTable3GetEvE4dfat = internal global i64 0, align 8

@_ZN26GrDistanceFieldAdjustTableC1Ev = hidden unnamed_addr alias void (%class.GrDistanceFieldAdjustTable*), void (%class.GrDistanceFieldAdjustTable*)* @_ZN26GrDistanceFieldAdjustTableC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull float* @_Z27build_distance_adjust_tableff(float, float) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #7
  store i32 -1431655766, i32* %3, align 4
  %6 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #7
  store i32 -1431655766, i32* %4, align 4
  %7 = call i64 @_ZN15SkScalerContext15GetGammaLUTSizeEfffPiS0_(float 0x3FC99999A0000000, float %0, float %1, i32* nonnull %3, i32* nonnull %4) #7
  %8 = load i32, i32* %4, align 4
  %9 = sext i32 %8 to i64
  %10 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %9, i64 4)
  %11 = extractvalue { i64, i1 } %10, 1
  %12 = extractvalue { i64, i1 } %10, 0
  %13 = select i1 %11, i64 -1, i64 %12
  %14 = call i8* @_Znam(i64 %13) #8
  %15 = bitcast i8* %14 to float*
  %16 = trunc i64 %7 to i32
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %2
  %19 = shl i64 %7, 32
  %20 = ashr exact i64 %19, 32
  %21 = call i8* @_Znam(i64 %20) #8
  br label %22

22:                                               ; preds = %2, %18
  %23 = phi i8* [ null, %2 ], [ %21, %18 ]
  %24 = call zeroext i1 @_ZN15SkScalerContext15GetGammaLUTDataEfffPh(float 0x3FC99999A0000000, float %0, float %1, i8* %23) #7
  %25 = load i32, i32* %4, align 4
  %26 = icmp sgt i32 %25, 0
  br i1 %24, label %31, label %27

27:                                               ; preds = %22
  br i1 %26, label %28, label %79

28:                                               ; preds = %27
  %29 = zext i32 %25 to i64
  %30 = shl nuw nsw i64 %29, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %14, i8 0, i64 %30, i1 false)
  br label %79

31:                                               ; preds = %22
  br i1 %26, label %32, label %79

32:                                               ; preds = %31
  %33 = load i32, i32* %3, align 4
  %34 = add i32 %33, -1
  %35 = icmp sgt i32 %34, 0
  %36 = sext i32 %33 to i64
  %37 = sext i32 %25 to i64
  %38 = zext i32 %34 to i64
  br label %39

39:                                               ; preds = %32, %76
  %40 = phi i64 [ 0, %32 ], [ %77, %76 ]
  %41 = mul nsw i64 %40, %36
  %42 = getelementptr inbounds i8, i8* %23, i64 %41
  br i1 %35, label %43, label %76

43:                                               ; preds = %39, %74
  %44 = phi i64 [ %48, %74 ], [ 0, %39 ]
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = icmp sgt i8 %46, -1
  %48 = add nuw nsw i64 %44, 1
  br i1 %47, label %49, label %74

49:                                               ; preds = %43
  %50 = getelementptr inbounds i8, i8* %42, i64 %48
  %51 = load i8, i8* %50, align 1
  %52 = icmp slt i8 %51, 0
  br i1 %52, label %53, label %74

53:                                               ; preds = %49
  %54 = trunc i64 %44 to i32
  %55 = zext i8 %46 to i32
  %56 = zext i8 %51 to i32
  %57 = uitofp i8 %46 to float
  %58 = fsub float 1.275000e+02, %57
  %59 = sub nuw nsw i32 %56, %55
  %60 = sitofp i32 %59 to float
  %61 = fdiv float %58, %60
  %62 = sitofp i32 %54 to float
  %63 = fadd float %61, %62
  %64 = fdiv float %63, 2.550000e+02
  %65 = fmul float %64, 4.000000e+00
  %66 = fadd float %65, -6.000000e+00
  %67 = fmul float %64, %66
  %68 = fadd float %67, 5.000000e+00
  %69 = fmul float %64, %68
  %70 = fdiv float %69, 3.000000e+00
  %71 = fmul float %70, 0x3FF4CCCCC0000000
  %72 = fadd float %71, 0xBFE4CCCCC0000000
  %73 = getelementptr inbounds float, float* %15, i64 %40
  store float %72, float* %73, align 4
  br label %76

74:                                               ; preds = %43, %49
  %75 = icmp eq i64 %48, %38
  br i1 %75, label %76, label %43

76:                                               ; preds = %74, %39, %53
  %77 = add nuw nsw i64 %40, 1
  %78 = icmp slt i64 %77, %37
  br i1 %78, label %39, label %79

79:                                               ; preds = %76, %28, %27, %31
  %80 = icmp eq i8* %23, null
  br i1 %80, label %82, label %81

81:                                               ; preds = %79
  call void @_ZdaPv(i8* nonnull %23) #8
  br label %82

82:                                               ; preds = %79, %81
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #7
  ret float* %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZN15SkScalerContext15GetGammaLUTSizeEfffPiS0_(float, float, float, i32*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

declare zeroext i1 @_ZN15SkScalerContext15GetGammaLUTDataEfffPh(float, float, float, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrDistanceFieldAdjustTable* @_ZN26GrDistanceFieldAdjustTable3GetEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN26GrDistanceFieldAdjustTable3GetEvE4dfat to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %13, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN26GrDistanceFieldAdjustTable3GetEvE4dfat) #7
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %3
  %7 = tail call i8* @_Znwm(i64 16) #8
  %8 = tail call float* @_Z27build_distance_adjust_tableff(float 0x3FF3333340000000, float 0x3FF3333340000000) #7
  %9 = bitcast i8* %7 to float**
  store float* %8, float** %9, align 8
  %10 = tail call float* @_Z27build_distance_adjust_tableff(float 1.000000e+00, float 1.000000e+00) #7
  %11 = getelementptr inbounds i8, i8* %7, i64 8
  %12 = bitcast i8* %11 to float**
  store float* %10, float** %12, align 8
  store i8* %7, i8** bitcast (%class.GrDistanceFieldAdjustTable** @_ZZN26GrDistanceFieldAdjustTable3GetEvE4dfat to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN26GrDistanceFieldAdjustTable3GetEvE4dfat) #7
  br label %13

13:                                               ; preds = %3, %6, %0
  %14 = load %class.GrDistanceFieldAdjustTable*, %class.GrDistanceFieldAdjustTable** @_ZZN26GrDistanceFieldAdjustTable3GetEvE4dfat, align 8
  ret %class.GrDistanceFieldAdjustTable* %14
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN26GrDistanceFieldAdjustTableC2Ev(%class.GrDistanceFieldAdjustTable* nocapture) unnamed_addr #0 align 2 {
  %2 = tail call float* @_Z27build_distance_adjust_tableff(float 0x3FF3333340000000, float 0x3FF3333340000000)
  %3 = getelementptr inbounds %class.GrDistanceFieldAdjustTable, %class.GrDistanceFieldAdjustTable* %0, i64 0, i32 0
  store float* %2, float** %3, align 8
  %4 = tail call float* @_Z27build_distance_adjust_tableff(float 1.000000e+00, float 1.000000e+00)
  %5 = getelementptr inbounds %class.GrDistanceFieldAdjustTable, %class.GrDistanceFieldAdjustTable* %0, i64 0, i32 1
  store float* %4, float** %5, align 8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
