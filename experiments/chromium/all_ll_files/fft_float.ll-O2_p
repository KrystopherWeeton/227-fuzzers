; ModuleID = '../../third_party/ffmpeg/libavcodec/fft_float.c'
source_filename = "../../third_party/ffmpeg/libavcodec/fft_float.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.CosTabsInitOnce = type { void ()*, i32 }
%struct.FFTComplex = type { float, float }
%struct.FFTContext = type { i32, i32, i16*, %struct.FFTComplex*, i32, i32, float*, float*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, i32, i32, i32* }

@cos_tabs_init_once = internal global [18 x %struct.CosTabsInitOnce] [%struct.CosTabsInitOnce zeroinitializer, %struct.CosTabsInitOnce zeroinitializer, %struct.CosTabsInitOnce zeroinitializer, %struct.CosTabsInitOnce zeroinitializer, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_16, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_32, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_64, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_128, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_256, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_512, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_1024, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_2048, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_4096, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_8192, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_16384, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_32768, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_65536, i32 0 }, %struct.CosTabsInitOnce { void ()* @init_ff_cos_tabs_131072, i32 0 }], align 16
@ff_cos_16 = common hidden global [8 x float] zeroinitializer, align 32
@ff_cos_32 = common hidden global [16 x float] zeroinitializer, align 32
@ff_cos_64 = common hidden global [32 x float] zeroinitializer, align 32
@ff_cos_128 = common hidden global [64 x float] zeroinitializer, align 32
@ff_cos_256 = common hidden global [128 x float] zeroinitializer, align 32
@ff_cos_512 = common hidden global [256 x float] zeroinitializer, align 32
@ff_cos_1024 = common hidden global [512 x float] zeroinitializer, align 32
@ff_cos_2048 = common hidden global [1024 x float] zeroinitializer, align 32
@ff_cos_4096 = common hidden global [2048 x float] zeroinitializer, align 32
@ff_cos_8192 = common hidden global [4096 x float] zeroinitializer, align 32
@ff_cos_16384 = common hidden global [8192 x float] zeroinitializer, align 32
@ff_cos_32768 = common hidden global [16384 x float] zeroinitializer, align 32
@ff_cos_65536 = common hidden global [32768 x float] zeroinitializer, align 32
@ff_cos_131072 = common hidden global [65536 x float] zeroinitializer, align 32
@ff_cos_tabs = hidden local_unnamed_addr constant [18 x float*] [float* null, float* null, float* null, float* null, float* getelementptr inbounds ([8 x float], [8 x float]* @ff_cos_16, i32 0, i32 0), float* getelementptr inbounds ([16 x float], [16 x float]* @ff_cos_32, i32 0, i32 0), float* getelementptr inbounds ([32 x float], [32 x float]* @ff_cos_64, i32 0, i32 0), float* getelementptr inbounds ([64 x float], [64 x float]* @ff_cos_128, i32 0, i32 0), float* getelementptr inbounds ([128 x float], [128 x float]* @ff_cos_256, i32 0, i32 0), float* getelementptr inbounds ([256 x float], [256 x float]* @ff_cos_512, i32 0, i32 0), float* getelementptr inbounds ([512 x float], [512 x float]* @ff_cos_1024, i32 0, i32 0), float* getelementptr inbounds ([1024 x float], [1024 x float]* @ff_cos_2048, i32 0, i32 0), float* getelementptr inbounds ([2048 x float], [2048 x float]* @ff_cos_4096, i32 0, i32 0), float* getelementptr inbounds ([4096 x float], [4096 x float]* @ff_cos_8192, i32 0, i32 0), float* getelementptr inbounds ([8192 x float], [8192 x float]* @ff_cos_16384, i32 0, i32 0), float* getelementptr inbounds ([16384 x float], [16384 x float]* @ff_cos_32768, i32 0, i32 0), float* getelementptr inbounds ([32768 x float], [32768 x float]* @ff_cos_65536, i32 0, i32 0), float* getelementptr inbounds ([65536 x float], [65536 x float]* @ff_cos_131072, i32 0, i32 0)], align 16
@avx_tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 4, i32 1, i32 5, i32 8, i32 12, i32 9, i32 13, i32 2, i32 6, i32 3, i32 7, i32 10, i32 14, i32 11, i32 15], align 16
@fft_dispatch = internal unnamed_addr constant [16 x void (%struct.FFTComplex*)*] [void (%struct.FFTComplex*)* @fft4, void (%struct.FFTComplex*)* @fft8, void (%struct.FFTComplex*)* @fft16, void (%struct.FFTComplex*)* @fft32, void (%struct.FFTComplex*)* @fft64, void (%struct.FFTComplex*)* @fft128, void (%struct.FFTComplex*)* @fft256, void (%struct.FFTComplex*)* @fft512, void (%struct.FFTComplex*)* @fft1024, void (%struct.FFTComplex*)* @fft2048, void (%struct.FFTComplex*)* @fft4096, void (%struct.FFTComplex*)* @fft8192, void (%struct.FFTComplex*)* @fft16384, void (%struct.FFTComplex*)* @fft32768, void (%struct.FFTComplex*)* @fft65536, void (%struct.FFTComplex*)* @fft131072], align 16

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_init_ff_cos_tabs(i32) local_unnamed_addr #0 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr inbounds [18 x %struct.CosTabsInitOnce], [18 x %struct.CosTabsInitOnce]* @cos_tabs_init_once, i64 0, i64 %2, i32 1
  %4 = getelementptr inbounds [18 x %struct.CosTabsInitOnce], [18 x %struct.CosTabsInitOnce]* @cos_tabs_init_once, i64 0, i64 %2, i32 0
  %5 = load void ()*, void ()** %4, align 16
  %6 = tail call i32 @pthread_once(i32* %3, void ()* %5) #8
  ret void
}

declare i32 @pthread_once(i32*, void ()*) local_unnamed_addr #1

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden i32 @ff_fft_init(%struct.FFTContext*, i32, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 2
  store i16* null, i16** %4, align 8
  %5 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 15
  store i32* null, i32** %5, align 8
  %6 = add i32 %1, -2
  %7 = icmp ugt i32 %6, 15
  br i1 %7, label %156, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 0
  store i32 %1, i32* %9, align 8
  %10 = shl i32 1, %1
  %11 = icmp slt i32 %1, 17
  %12 = sext i32 %10 to i64
  br i1 %11, label %13, label %18

13:                                               ; preds = %8
  %14 = shl nsw i64 %12, 1
  %15 = tail call noalias i8* @av_malloc(i64 %14) #8
  %16 = bitcast i16** %4 to i8**
  store i8* %15, i8** %16, align 8
  %17 = icmp eq i8* %15, null
  br i1 %17, label %156, label %23

18:                                               ; preds = %8
  %19 = shl nsw i64 %12, 2
  %20 = tail call noalias i8* @av_malloc(i64 %19) #8
  %21 = bitcast i32** %5 to i8**
  store i8* %20, i8** %21, align 8
  %22 = icmp eq i8* %20, null
  br i1 %22, label %156, label %23

23:                                               ; preds = %13, %18
  %24 = shl nsw i64 %12, 3
  %25 = tail call noalias i8* @av_malloc(i64 %24) #8
  %26 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 3
  %27 = bitcast %struct.FFTComplex** %26 to i8**
  store i8* %25, i8** %27, align 8
  %28 = icmp eq i8* %25, null
  br i1 %28, label %156, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 1
  store i32 %2, i32* %30, align 4
  %31 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 13
  store i32 0, i32* %31, align 8
  %32 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 8
  %33 = bitcast void (%struct.FFTContext*, %struct.FFTComplex*)** %32 to <2 x void (%struct.FFTContext*, %struct.FFTComplex*)*>*
  store <2 x void (%struct.FFTContext*, %struct.FFTComplex*)*> <void (%struct.FFTContext*, %struct.FFTComplex*)* @fft_permute_c, void (%struct.FFTContext*, %struct.FFTComplex*)* @fft_calc_c>, <2 x void (%struct.FFTContext*, %struct.FFTComplex*)*>* %33, align 8
  %34 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 10
  %35 = bitcast void (%struct.FFTContext*, float*, float*)** %34 to <2 x void (%struct.FFTContext*, float*, float*)*>*
  store <2 x void (%struct.FFTContext*, float*, float*)*> <void (%struct.FFTContext*, float*, float*)* @ff_imdct_calc_c, void (%struct.FFTContext*, float*, float*)* @ff_imdct_half_c>, <2 x void (%struct.FFTContext*, float*, float*)*>* %35, align 8
  %36 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 12
  store void (%struct.FFTContext*, float*, float*)* @ff_mdct_calc_c, void (%struct.FFTContext*, float*, float*)** %36, align 8
  tail call void @ff_fft_init_x86(%struct.FFTContext* %0) #8
  %37 = icmp slt i32 %1, 4
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nuw nsw i32 %1, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %41, %38
  %42 = phi i64 [ 4, %38 ], [ %47, %41 ]
  %43 = getelementptr inbounds [18 x %struct.CosTabsInitOnce], [18 x %struct.CosTabsInitOnce]* @cos_tabs_init_once, i64 0, i64 %42, i32 1
  %44 = getelementptr inbounds [18 x %struct.CosTabsInitOnce], [18 x %struct.CosTabsInitOnce]* @cos_tabs_init_once, i64 0, i64 %42, i32 0
  %45 = load void ()*, void ()** %44, align 16
  %46 = tail call i32 @pthread_once(i32* %43, void ()* %45) #8
  %47 = add nuw nsw i64 %42, 1
  %48 = icmp eq i64 %47, %40
  br i1 %48, label %49, label %41

49:                                               ; preds = %41, %29
  %50 = load i32, i32* %31, align 8
  %51 = icmp eq i32 %50, 2
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  tail call fastcc void @fft_perm_avx(%struct.FFTContext* %0) #9
  br label %161

53:                                               ; preds = %49
  %54 = load i16*, i16** %4, align 8
  %55 = icmp eq i16* %54, null
  br i1 %55, label %105, label %56

56:                                               ; preds = %53
  %57 = icmp eq i32 %50, 1
  %58 = icmp ne i32 %1, 31
  br i1 %57, label %69, label %59

59:                                               ; preds = %56
  br i1 %58, label %60, label %105

60:                                               ; preds = %59
  %61 = add nsw i32 %10, -1
  %62 = load i32, i32* %30, align 4
  %63 = tail call fastcc i32 @split_radix_permutation(i32 0, i32 %10, i32 %62)
  %64 = sub nsw i32 0, %63
  %65 = and i32 %61, %64
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i16, i16* %54, i64 %66
  store i16 0, i16* %67, align 2
  %68 = icmp sgt i32 %10, 1
  br i1 %68, label %93, label %105

69:                                               ; preds = %56
  br i1 %58, label %70, label %105

70:                                               ; preds = %69
  %71 = add nsw i32 %10, -1
  br label %72

72:                                               ; preds = %91, %70
  %73 = phi i16* [ %54, %70 ], [ %92, %91 ]
  %74 = phi i32 [ 0, %70 ], [ %89, %91 ]
  %75 = and i32 %74, 65532
  %76 = lshr i32 %74, 1
  %77 = and i32 %76, 1
  %78 = or i32 %77, %75
  %79 = shl nuw i32 %74, 1
  %80 = and i32 %79, 2
  %81 = or i32 %78, %80
  %82 = load i32, i32* %30, align 4
  %83 = tail call fastcc i32 @split_radix_permutation(i32 %74, i32 %10, i32 %82)
  %84 = sub nsw i32 0, %83
  %85 = and i32 %71, %84
  %86 = trunc i32 %81 to i16
  %87 = sext i32 %85 to i64
  %88 = getelementptr inbounds i16, i16* %73, i64 %87
  store i16 %86, i16* %88, align 2
  %89 = add nuw nsw i32 %74, 1
  %90 = icmp slt i32 %89, %10
  br i1 %90, label %91, label %105

91:                                               ; preds = %72
  %92 = load i16*, i16** %4, align 8
  br label %72

93:                                               ; preds = %60, %93
  %94 = phi i32 [ %103, %93 ], [ 1, %60 ]
  %95 = load i16*, i16** %4, align 8
  %96 = load i32, i32* %30, align 4
  %97 = tail call fastcc i32 @split_radix_permutation(i32 %94, i32 %10, i32 %96)
  %98 = sub nsw i32 0, %97
  %99 = and i32 %61, %98
  %100 = trunc i32 %94 to i16
  %101 = sext i32 %99 to i64
  %102 = getelementptr inbounds i16, i16* %95, i64 %101
  store i16 %100, i16* %102, align 2
  %103 = add nuw nsw i32 %94, 1
  %104 = icmp slt i32 %103, %10
  br i1 %104, label %93, label %105

105:                                              ; preds = %93, %72, %60, %59, %69, %53
  %106 = load i32*, i32** %5, align 8
  %107 = icmp eq i32* %106, null
  br i1 %107, label %161, label %108

108:                                              ; preds = %105
  %109 = load i32, i32* %31, align 8
  %110 = icmp eq i32 %109, 1
  %111 = icmp ne i32 %1, 31
  br i1 %110, label %122, label %112

112:                                              ; preds = %108
  br i1 %111, label %113, label %161

113:                                              ; preds = %112
  %114 = add nsw i32 %10, -1
  %115 = load i32, i32* %30, align 4
  %116 = tail call fastcc i32 @split_radix_permutation(i32 0, i32 %10, i32 %115)
  %117 = sub nsw i32 0, %116
  %118 = and i32 %114, %117
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i32, i32* %106, i64 %119
  store i32 0, i32* %120, align 4
  %121 = icmp sgt i32 %10, 1
  br i1 %121, label %145, label %161

122:                                              ; preds = %108
  br i1 %111, label %123, label %161

123:                                              ; preds = %122
  %124 = add nsw i32 %10, -1
  br label %125

125:                                              ; preds = %143, %123
  %126 = phi i32* [ %106, %123 ], [ %144, %143 ]
  %127 = phi i32 [ 0, %123 ], [ %141, %143 ]
  %128 = and i32 %127, 2147483644
  %129 = lshr i32 %127, 1
  %130 = and i32 %129, 1
  %131 = or i32 %130, %128
  %132 = shl nuw i32 %127, 1
  %133 = and i32 %132, 2
  %134 = or i32 %131, %133
  %135 = load i32, i32* %30, align 4
  %136 = tail call fastcc i32 @split_radix_permutation(i32 %127, i32 %10, i32 %135)
  %137 = sub nsw i32 0, %136
  %138 = and i32 %124, %137
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i32, i32* %126, i64 %139
  store i32 %134, i32* %140, align 4
  %141 = add nuw nsw i32 %127, 1
  %142 = icmp slt i32 %141, %10
  br i1 %142, label %143, label %161

143:                                              ; preds = %125
  %144 = load i32*, i32** %5, align 8
  br label %125

145:                                              ; preds = %113, %145
  %146 = phi i32 [ %154, %145 ], [ 1, %113 ]
  %147 = load i32*, i32** %5, align 8
  %148 = load i32, i32* %30, align 4
  %149 = tail call fastcc i32 @split_radix_permutation(i32 %146, i32 %10, i32 %148)
  %150 = sub nsw i32 0, %149
  %151 = and i32 %114, %150
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i32, i32* %147, i64 %152
  store i32 %146, i32* %153, align 4
  %154 = add nuw nsw i32 %146, 1
  %155 = icmp slt i32 %154, %10
  br i1 %155, label %145, label %161

156:                                              ; preds = %13, %23, %18, %3
  %157 = bitcast i16** %4 to i8*
  tail call void @av_freep(i8* %157) #8
  %158 = bitcast i32** %5 to i8*
  tail call void @av_freep(i8* %158) #8
  %159 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 3
  %160 = bitcast %struct.FFTComplex** %159 to i8*
  tail call void @av_freep(i8* %160) #8
  br label %161

161:                                              ; preds = %145, %125, %113, %112, %122, %52, %105, %156
  %162 = phi i32 [ -1, %156 ], [ 0, %105 ], [ 0, %52 ], [ 0, %122 ], [ 0, %112 ], [ 0, %113 ], [ 0, %125 ], [ 0, %145 ]
  ret i32 %162
}

declare noalias i8* @av_malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @fft_permute_c(%struct.FFTContext* nocapture readonly, %struct.FFTComplex* nocapture) #2 {
  %3 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 2
  %4 = load i16*, i16** %3, align 8
  %5 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 15
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = shl i32 1, %8
  %10 = icmp eq i16* %4, null
  %11 = icmp ne i32 %8, 31
  br i1 %10, label %16, label %12

12:                                               ; preds = %2
  br i1 %11, label %13, label %46

13:                                               ; preds = %12
  %14 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 3
  %15 = sext i32 %9 to i64
  br label %20

16:                                               ; preds = %2
  br i1 %11, label %17, label %46

17:                                               ; preds = %16
  %18 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 3
  %19 = sext i32 %9 to i64
  br label %33

20:                                               ; preds = %13, %20
  %21 = phi i64 [ 0, %13 ], [ %31, %20 ]
  %22 = load %struct.FFTComplex*, %struct.FFTComplex** %14, align 8
  %23 = getelementptr inbounds i16, i16* %4, i64 %21
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i64
  %26 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %22, i64 %25
  %27 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %1, i64 %21
  %28 = bitcast %struct.FFTComplex* %27 to i64*
  %29 = bitcast %struct.FFTComplex* %26 to i64*
  %30 = load i64, i64* %28, align 4
  store i64 %30, i64* %29, align 4
  %31 = add nuw nsw i64 %21, 1
  %32 = icmp slt i64 %31, %15
  br i1 %32, label %20, label %46

33:                                               ; preds = %17, %33
  %34 = phi i64 [ 0, %17 ], [ %44, %33 ]
  %35 = load %struct.FFTComplex*, %struct.FFTComplex** %18, align 8
  %36 = getelementptr inbounds i32, i32* %6, i64 %34
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %35, i64 %38
  %40 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %1, i64 %34
  %41 = bitcast %struct.FFTComplex* %40 to i64*
  %42 = bitcast %struct.FFTComplex* %39 to i64*
  %43 = load i64, i64* %41, align 4
  store i64 %43, i64* %42, align 4
  %44 = add nuw nsw i64 %34, 1
  %45 = icmp slt i64 %44, %19
  br i1 %45, label %33, label %46

46:                                               ; preds = %20, %33, %12, %16
  %47 = bitcast %struct.FFTComplex* %1 to i8*
  %48 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 3
  %49 = bitcast %struct.FFTComplex** %48 to i8**
  %50 = load i8*, i8** %49, align 8
  %51 = sext i32 %9 to i64
  %52 = shl nsw i64 %51, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %47, i8* align 4 %50, i64 %52, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fft_calc_c(%struct.FFTContext* nocapture readonly, %struct.FFTComplex*) #2 {
  %3 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = add nsw i32 %4, -2
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds [16 x void (%struct.FFTComplex*)*], [16 x void (%struct.FFTComplex*)*]* @fft_dispatch, i64 0, i64 %6
  %8 = load void (%struct.FFTComplex*)*, void (%struct.FFTComplex*)** %7, align 8
  tail call void %8(%struct.FFTComplex* %1) #8
  ret void
}

declare void @ff_imdct_calc_c(%struct.FFTContext*, float*, float*) #1

declare void @ff_imdct_half_c(%struct.FFTContext*, float*, float*) #1

declare void @ff_mdct_calc_c(%struct.FFTContext*, float*, float*) #1

declare void @ff_fft_init_x86(%struct.FFTContext*) local_unnamed_addr #1

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal fastcc void @fft_perm_avx(%struct.FFTContext* nocapture readonly) unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = shl i32 1, %3
  %5 = icmp eq i32 %3, 31
  br i1 %5, label %72, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 2
  %8 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 1
  %9 = add nsw i32 %4, -1
  %10 = sext i32 %4 to i64
  br label %11

11:                                               ; preds = %6, %69
  %12 = phi i64 [ 0, %6 ], [ %70, %69 ]
  %13 = trunc i64 %12 to i32
  br label %14

14:                                               ; preds = %11, %23
  %15 = phi i32 [ %28, %23 ], [ %13, %11 ]
  %16 = phi i32 [ %29, %23 ], [ %4, %11 ]
  br label %17

17:                                               ; preds = %20, %14
  %18 = phi i32 [ %21, %20 ], [ %16, %14 ]
  %19 = icmp slt i32 %18, 33
  br i1 %19, label %30, label %20

20:                                               ; preds = %17
  %21 = lshr i32 %18, 1
  %22 = icmp sgt i32 %21, %15
  br i1 %22, label %17, label %23

23:                                               ; preds = %20
  %24 = mul nsw i32 %18, 3
  %25 = sdiv i32 %24, 4
  %26 = icmp slt i32 %15, %25
  %27 = select i1 %26, i32 %21, i32 %25
  %28 = sub nsw i32 %15, %27
  %29 = lshr i32 %18, 2
  br label %14

30:                                               ; preds = %17
  %31 = icmp slt i32 %15, 16
  br i1 %31, label %49, label %32

32:                                               ; preds = %30, %32
  %33 = phi i64 [ %47, %32 ], [ 0, %30 ]
  %34 = getelementptr inbounds [16 x i32], [16 x i32]* @avx_tab, i64 0, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = add nsw i32 %35, %13
  %37 = trunc i32 %36 to i16
  %38 = load i16*, i16** %7, align 8
  %39 = add nuw nsw i64 %33, %12
  %40 = load i32, i32* %8, align 4
  %41 = trunc i64 %39 to i32
  %42 = tail call fastcc i32 @split_radix_permutation(i32 %41, i32 %4, i32 %40)
  %43 = sub nsw i32 0, %42
  %44 = and i32 %9, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i16, i16* %38, i64 %45
  store i16 %37, i16* %46, align 2
  %47 = add nuw nsw i64 %33, 1
  %48 = icmp eq i64 %47, 16
  br i1 %48, label %69, label %32

49:                                               ; preds = %30, %49
  %50 = phi i32 [ %67, %49 ], [ 0, %30 ]
  %51 = add nuw nsw i32 %50, %13
  %52 = and i32 %51, 65528
  %53 = lshr i32 %51, 1
  %54 = and i32 %53, 3
  %55 = or i32 %54, %52
  %56 = shl i32 %51, 2
  %57 = and i32 %56, 4
  %58 = or i32 %55, %57
  %59 = trunc i32 %58 to i16
  %60 = load i16*, i16** %7, align 8
  %61 = load i32, i32* %8, align 4
  %62 = tail call fastcc i32 @split_radix_permutation(i32 %51, i32 %4, i32 %61)
  %63 = sub nsw i32 0, %62
  %64 = and i32 %9, %63
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i16, i16* %60, i64 %65
  store i16 %59, i16* %66, align 2
  %67 = add nuw nsw i32 %50, 1
  %68 = icmp eq i32 %67, 16
  br i1 %68, label %69, label %49

69:                                               ; preds = %32, %49
  %70 = add nuw nsw i64 %12, 16
  %71 = icmp slt i64 %70, %10
  br i1 %71, label %11, label %72

72:                                               ; preds = %69, %1
  ret void
}

; Function Attrs: nounwind readnone ssp uwtable
define internal fastcc i32 @split_radix_permutation(i32, i32, i32) unnamed_addr #4 {
  %4 = icmp slt i32 %1, 3
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = and i32 %0, 1
  br label %26

7:                                                ; preds = %3
  %8 = lshr i32 %1, 1
  %9 = and i32 %8, %0
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %7
  %12 = tail call fastcc i32 @split_radix_permutation(i32 %0, i32 %8, i32 %2)
  %13 = shl nsw i32 %12, 1
  ret i32 %13

14:                                               ; preds = %7
  %15 = lshr i32 %1, 2
  %16 = and i32 %15, %0
  %17 = icmp eq i32 %16, 0
  %18 = zext i1 %17 to i32
  %19 = icmp eq i32 %18, %2
  %20 = tail call fastcc i32 @split_radix_permutation(i32 %0, i32 %15, i32 %2)
  %21 = shl nsw i32 %20, 2
  br i1 %19, label %22, label %24

22:                                               ; preds = %14
  %23 = or i32 %21, 1
  br label %26

24:                                               ; preds = %14
  %25 = add nsw i32 %21, -1
  br label %26

26:                                               ; preds = %24, %22, %5
  %27 = phi i32 [ %6, %5 ], [ %23, %22 ], [ %25, %24 ]
  ret i32 %27
}

declare void @av_freep(i8*) local_unnamed_addr #1

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_fft_end(%struct.FFTContext*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 2
  %3 = bitcast i16** %2 to i8*
  tail call void @av_freep(i8* %3) #8
  %4 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 15
  %5 = bitcast i32** %4 to i8*
  tail call void @av_freep(i8* %5) #8
  %6 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 3
  %7 = bitcast %struct.FFTComplex** %6 to i8*
  tail call void @av_freep(i8* %7) #8
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_16() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3FD921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [8 x float], [8 x float]* @ff_cos_16, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 5
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [8 x float], [8 x float]* @ff_cos_16, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 8, %12
  %17 = getelementptr inbounds [8 x float], [8 x float]* @ff_cos_16, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 4
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_32() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3FC921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [16 x float], [16 x float]* @ff_cos_32, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 9
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [16 x float], [16 x float]* @ff_cos_32, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 16, %12
  %17 = getelementptr inbounds [16 x float], [16 x float]* @ff_cos_32, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 8
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_64() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3FB921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [32 x float], [32 x float]* @ff_cos_64, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 17
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [32 x float], [32 x float]* @ff_cos_64, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 32, %12
  %17 = getelementptr inbounds [32 x float], [32 x float]* @ff_cos_64, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 16
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_128() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3FA921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [64 x float], [64 x float]* @ff_cos_128, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 33
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [64 x float], [64 x float]* @ff_cos_128, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 64, %12
  %17 = getelementptr inbounds [64 x float], [64 x float]* @ff_cos_128, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 32
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_256() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F9921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [128 x float], [128 x float]* @ff_cos_256, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 65
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [128 x float], [128 x float]* @ff_cos_256, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 128, %12
  %17 = getelementptr inbounds [128 x float], [128 x float]* @ff_cos_256, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 64
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_512() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F8921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [256 x float], [256 x float]* @ff_cos_512, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 129
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [256 x float], [256 x float]* @ff_cos_512, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 256, %12
  %17 = getelementptr inbounds [256 x float], [256 x float]* @ff_cos_512, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 128
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_1024() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F7921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [512 x float], [512 x float]* @ff_cos_1024, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 257
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [512 x float], [512 x float]* @ff_cos_1024, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 512, %12
  %17 = getelementptr inbounds [512 x float], [512 x float]* @ff_cos_1024, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 256
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_2048() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F6921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [1024 x float], [1024 x float]* @ff_cos_2048, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 513
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [1024 x float], [1024 x float]* @ff_cos_2048, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 1024, %12
  %17 = getelementptr inbounds [1024 x float], [1024 x float]* @ff_cos_2048, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 512
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_4096() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F5921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [2048 x float], [2048 x float]* @ff_cos_4096, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 1025
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [2048 x float], [2048 x float]* @ff_cos_4096, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 2048, %12
  %17 = getelementptr inbounds [2048 x float], [2048 x float]* @ff_cos_4096, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 1024
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_8192() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F4921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [4096 x float], [4096 x float]* @ff_cos_8192, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 2049
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [4096 x float], [4096 x float]* @ff_cos_8192, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 4096, %12
  %17 = getelementptr inbounds [4096 x float], [4096 x float]* @ff_cos_8192, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 2048
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_16384() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F3921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [8192 x float], [8192 x float]* @ff_cos_16384, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 4097
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [8192 x float], [8192 x float]* @ff_cos_16384, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 8192, %12
  %17 = getelementptr inbounds [8192 x float], [8192 x float]* @ff_cos_16384, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 4096
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_32768() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F2921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [16384 x float], [16384 x float]* @ff_cos_32768, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 8193
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [16384 x float], [16384 x float]* @ff_cos_32768, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 16384, %12
  %17 = getelementptr inbounds [16384 x float], [16384 x float]* @ff_cos_32768, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 8192
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_65536() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F1921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [32768 x float], [32768 x float]* @ff_cos_65536, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 16385
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [32768 x float], [32768 x float]* @ff_cos_65536, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 32768, %12
  %17 = getelementptr inbounds [32768 x float], [32768 x float]* @ff_cos_65536, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 16384
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: cold nofree nounwind optsize ssp uwtable
define internal void @init_ff_cos_tabs_131072() #3 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %9, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul nsz double %4, 0x3F0921FB54442D18
  %6 = tail call nsz double @llvm.cos.f64(double %5) #8
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds [65536 x float], [65536 x float]* @ff_cos_131072, i64 0, i64 %2
  store float %7, float* %8, align 4
  %9 = add nuw nsw i64 %2, 1
  %10 = icmp eq i64 %9, 32769
  br i1 %10, label %11, label %1

11:                                               ; preds = %1, %11
  %12 = phi i64 [ %19, %11 ], [ 1, %1 ]
  %13 = getelementptr inbounds [65536 x float], [65536 x float]* @ff_cos_131072, i64 0, i64 %12
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sub nuw nsw i64 65536, %12
  %17 = getelementptr inbounds [65536 x float], [65536 x float]* @ff_cos_131072, i64 0, i64 %16
  %18 = bitcast float* %17 to i32*
  store i32 %15, i32* %18, align 4
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 32768
  br i1 %20, label %21, label %11

21:                                               ; preds = %11
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.cos.f64(double) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft4(%struct.FFTComplex* nocapture) #7 {
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 0, i32 0
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1, i32 0
  %4 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 2, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1, i32 1
  %8 = bitcast %struct.FFTComplex* %0 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 4
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %11 = fadd nsz <4 x float> %10, %9
  %12 = fsub nsz <4 x float> %10, %9
  %13 = shufflevector <4 x float> %11, <4 x float> %12, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %14 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 2, i32 1
  %15 = bitcast float* %14 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 4
  %17 = shufflevector <2 x float> %16, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %18 = shufflevector <2 x float> %17, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %19 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 3, i32 1
  %20 = load float, float* %19, align 4
  %21 = insertelement <2 x float> undef, float %5, i32 0
  %22 = insertelement <2 x float> %21, float %20, i32 1
  %23 = shufflevector <2 x float> %22, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %24 = fadd nsz <4 x float> %18, %23
  %25 = fsub nsz <4 x float> %18, %23
  %26 = shufflevector <4 x float> %24, <4 x float> %25, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %27 = extractelement <4 x float> %11, i32 0
  %28 = extractelement <4 x float> %24, i32 0
  %29 = fadd nsz float %27, %28
  store float %29, float* %2, align 4
  %30 = extractelement <4 x float> %12, i32 3
  %31 = extractelement <4 x float> %25, i32 3
  %32 = fadd nsz float %31, %30
  store float %32, float* %7, align 4
  %33 = extractelement <4 x float> %12, i32 2
  %34 = extractelement <4 x float> %25, i32 2
  %35 = fadd nsz float %33, %34
  store float %35, float* %3, align 4
  %36 = fsub nsz <4 x float> %13, %26
  %37 = bitcast float* %4 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4
  %38 = extractelement <4 x float> %11, i32 1
  %39 = extractelement <4 x float> %24, i32 1
  %40 = fadd nsz float %38, %39
  store float %40, float* %6, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft8(%struct.FFTComplex*) #7 {
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 0, i32 0
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1, i32 0
  %4 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 2, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1, i32 1
  %8 = bitcast %struct.FFTComplex* %0 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 4
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %11 = fadd nsz <4 x float> %10, %9
  %12 = fsub nsz <4 x float> %10, %9
  %13 = shufflevector <4 x float> %11, <4 x float> %12, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %14 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 2, i32 1
  %15 = bitcast float* %14 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 4
  %17 = shufflevector <2 x float> %16, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %18 = shufflevector <2 x float> %17, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %19 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 3, i32 1
  %20 = load float, float* %19, align 4
  %21 = insertelement <2 x float> undef, float %5, i32 0
  %22 = insertelement <2 x float> %21, float %20, i32 1
  %23 = shufflevector <2 x float> %22, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %24 = fadd nsz <4 x float> %18, %23
  %25 = fsub nsz <4 x float> %18, %23
  %26 = shufflevector <4 x float> %24, <4 x float> %25, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %27 = fsub nsz <4 x float> %13, %26
  %28 = shufflevector <4 x float> %11, <4 x float> %12, <4 x i32> <i32 0, i32 1, i32 6, i32 undef>
  %29 = shufflevector <4 x float> %28, <4 x float> %25, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %30 = shufflevector <4 x float> %24, <4 x float> %25, <4 x i32> <i32 0, i32 1, i32 6, i32 undef>
  %31 = shufflevector <4 x float> %30, <4 x float> %12, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %32 = fadd nsz <4 x float> %29, %31
  %33 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 4, i32 0
  %34 = load float, float* %33, align 4
  %35 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 5, i32 0
  %36 = load float, float* %35, align 4
  %37 = fsub nsz float %34, %36
  %38 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 4, i32 1
  %39 = load float, float* %38, align 4
  %40 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 5, i32 1
  %41 = load float, float* %40, align 4
  %42 = fsub nsz float %39, %41
  %43 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 6, i32 0
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 7, i32 0
  %46 = load float, float* %45, align 4
  %47 = fsub nsz float %44, %46
  %48 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 6, i32 1
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 7, i32 1
  %51 = load float, float* %50, align 4
  %52 = fsub nsz float %49, %51
  %53 = fmul nsz float %37, 0x3FE6A09E60000000
  %54 = fmul nsz float %42, 0x3FE6A09E60000000
  %55 = fmul nsz float %47, 0x3FE6A09E60000000
  %56 = fmul nsz float %52, 0x3FE6A09E60000000
  %57 = insertelement <4 x float> undef, float %39, i32 0
  %58 = insertelement <4 x float> %57, float %44, i32 1
  %59 = insertelement <4 x float> %58, float %54, i32 2
  %60 = insertelement <4 x float> %59, float %55, i32 3
  %61 = insertelement <4 x float> undef, float %41, i32 0
  %62 = insertelement <4 x float> %61, float %46, i32 1
  %63 = insertelement <4 x float> %62, float %53, i32 2
  %64 = insertelement <4 x float> %63, float %56, i32 3
  %65 = fadd nsz <4 x float> %60, %64
  %66 = fsub nsz <4 x float> %60, %64
  %67 = shufflevector <4 x float> %65, <4 x float> %66, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %68 = insertelement <4 x float> undef, float %49, i32 0
  %69 = insertelement <4 x float> %68, float %34, i32 1
  %70 = insertelement <4 x float> %69, float %55, i32 2
  %71 = insertelement <4 x float> %70, float %53, i32 3
  %72 = insertelement <4 x float> undef, float %51, i32 0
  %73 = insertelement <4 x float> %72, float %36, i32 1
  %74 = insertelement <4 x float> %73, float %56, i32 2
  %75 = insertelement <4 x float> %74, float %54, i32 3
  %76 = fadd nsz <4 x float> %71, %75
  %77 = shufflevector <4 x float> %65, <4 x float> %76, <4 x i32> <i32 5, i32 0, i32 7, i32 undef>
  %78 = shufflevector <4 x float> %77, <4 x float> %66, <4 x i32> <i32 0, i32 1, i32 2, i32 6>
  %79 = shufflevector <4 x float> %65, <4 x float> %76, <4 x i32> <i32 1, i32 4, i32 undef, i32 undef>
  %80 = shufflevector <4 x float> %79, <4 x float> %66, <4 x i32> <i32 0, i32 1, i32 7, i32 undef>
  %81 = shufflevector <4 x float> %80, <4 x float> %76, <4 x i32> <i32 0, i32 1, i32 2, i32 6>
  %82 = fadd nsz <4 x float> %78, %81
  %83 = extractelement <4 x float> %32, i32 0
  %84 = extractelement <4 x float> %82, i32 0
  %85 = fadd nsz float %83, %84
  store float %85, float* %2, align 4
  %86 = fsub nsz <4 x float> %67, %76
  %87 = extractelement <4 x float> %32, i32 1
  %88 = extractelement <4 x float> %82, i32 1
  %89 = fadd nsz float %87, %88
  store float %89, float* %6, align 4
  %90 = extractelement <4 x float> %32, i32 2
  %91 = extractelement <4 x float> %82, i32 2
  %92 = fadd nsz float %90, %91
  store float %92, float* %3, align 4
  %93 = fsub nsz <4 x float> %27, %86
  %94 = bitcast float* %43 to <4 x float>*
  store <4 x float> %93, <4 x float>* %94, align 4
  %95 = fadd nsz <4 x float> %27, %86
  %96 = bitcast float* %4 to <4 x float>*
  store <4 x float> %95, <4 x float>* %96, align 4
  %97 = fsub nsz <4 x float> %32, %82
  %98 = bitcast float* %33 to <4 x float>*
  store <4 x float> %97, <4 x float>* %98, align 4
  %99 = extractelement <4 x float> %32, i32 3
  %100 = extractelement <4 x float> %82, i32 3
  %101 = fadd nsz float %99, %100
  store float %101, float* %7, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft16(%struct.FFTComplex*) #7 {
  %2 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @ff_cos_16, i64 0, i64 1), align 4
  %3 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @ff_cos_16, i64 0, i64 3), align 4
  tail call void @fft8(%struct.FFTComplex* %0)
  %4 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 8, i32 0
  %5 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 9, i32 0
  %6 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 8, i32 1
  %7 = bitcast float* %4 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 9, i32 1
  %10 = bitcast float* %5 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = extractelement <2 x float> %8, i32 0
  %13 = extractelement <2 x float> %11, i32 0
  %14 = fadd nsz float %12, %13
  %15 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 11, i32 0
  %16 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 10, i32 0
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 10, i32 1
  %19 = bitcast float* %18 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = extractelement <2 x float> %20, i32 1
  %22 = fadd nsz float %21, %17
  %23 = fsub nsz float %14, %22
  store float %23, float* %16, align 4
  %24 = fadd nsz float %14, %22
  %25 = fsub nsz <2 x float> %8, %11
  %26 = extractelement <2 x float> %8, i32 1
  %27 = extractelement <2 x float> %11, i32 1
  %28 = fadd nsz float %26, %27
  %29 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 11, i32 1
  %30 = load float, float* %29, align 4
  %31 = extractelement <2 x float> %20, i32 0
  %32 = fadd nsz float %31, %30
  %33 = fadd nsz float %28, %32
  %34 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 12, i32 0
  %35 = load float, float* %34, align 4
  %36 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 13, i32 0
  %37 = load float, float* %36, align 4
  %38 = fadd nsz float %35, %37
  %39 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 15, i32 0
  %40 = load float, float* %39, align 4
  %41 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 14, i32 0
  %42 = load float, float* %41, align 4
  %43 = fadd nsz float %40, %42
  %44 = fadd nsz float %38, %43
  %45 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 12, i32 1
  %46 = load float, float* %45, align 4
  %47 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 13, i32 1
  %48 = load float, float* %47, align 4
  %49 = fadd nsz float %46, %48
  %50 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 14, i32 1
  %51 = load float, float* %50, align 4
  %52 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 15, i32 1
  %53 = load float, float* %52, align 4
  %54 = fadd nsz float %51, %53
  %55 = fadd nsz float %49, %54
  %56 = insertelement <4 x float> undef, float %31, i32 0
  %57 = insertelement <4 x float> %56, float %21, i32 1
  %58 = insertelement <4 x float> %57, float %33, i32 2
  %59 = insertelement <4 x float> %58, float %44, i32 3
  %60 = insertelement <4 x float> undef, float %30, i32 0
  %61 = insertelement <4 x float> %60, float %17, i32 1
  %62 = insertelement <4 x float> %61, float %55, i32 2
  %63 = insertelement <4 x float> %62, float %24, i32 3
  %64 = fsub nsz <4 x float> %59, %63
  %65 = extractelement <4 x float> %64, i32 1
  %66 = extractelement <2 x float> %25, i32 1
  %67 = fadd nsz float %65, %66
  store float %67, float* %9, align 4
  %68 = extractelement <4 x float> %64, i32 0
  %69 = extractelement <2 x float> %25, i32 0
  %70 = fadd nsz float %69, %68
  store float %70, float* %5, align 4
  %71 = fsub nsz float %28, %32
  %72 = fsub nsz float %35, %37
  %73 = fsub nsz float %40, %42
  %74 = fsub nsz float %38, %43
  %75 = fsub nsz float %46, %48
  %76 = fsub nsz float %51, %53
  %77 = fsub nsz float %75, %73
  store float %77, float* %52, align 4
  %78 = fadd nsz float %73, %75
  store float %78, float* %47, align 4
  %79 = fsub nsz float %72, %76
  store float %79, float* %39, align 4
  %80 = fadd nsz float %72, %76
  store float %80, float* %36, align 4
  %81 = fsub nsz float %49, %54
  %82 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 0, i32 0
  %83 = load float, float* %82, align 4
  %84 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 0, i32 1
  %85 = load float, float* %84, align 4
  %86 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 4, i32 0
  %87 = load float, float* %86, align 4
  %88 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 4, i32 1
  %89 = load float, float* %88, align 4
  %90 = fadd nsz float %24, %44
  %91 = fsub nsz float %83, %90
  store float %91, float* %4, align 4
  %92 = fadd nsz float %90, %83
  store float %92, float* %82, align 4
  %93 = extractelement <4 x float> %64, i32 3
  %94 = fadd nsz float %93, %89
  store float %94, float* %88, align 4
  %95 = fadd nsz float %55, %33
  %96 = insertelement <4 x float> undef, float %69, i32 0
  %97 = insertelement <4 x float> %96, float %66, i32 1
  %98 = insertelement <4 x float> %97, float %87, i32 2
  %99 = insertelement <4 x float> %98, float %89, i32 3
  %100 = fsub nsz <4 x float> %99, %64
  %101 = bitcast float* %15 to <4 x float>*
  store <4 x float> %100, <4 x float>* %101, align 4
  %102 = extractelement <4 x float> %64, i32 2
  %103 = fadd nsz float %102, %87
  store float %103, float* %86, align 4
  %104 = fsub nsz float %85, %95
  store float %104, float* %6, align 4
  %105 = fadd nsz float %95, %85
  store float %105, float* %84, align 4
  %106 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 2, i32 0
  %107 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 2, i32 1
  %108 = load float, float* %5, align 4
  %109 = fmul nsz float %2, %108
  %110 = load float, float* %9, align 4
  %111 = fsub nsz float -0.000000e+00, %3
  %112 = fmul nsz float %110, %111
  %113 = insertelement <4 x float> undef, float %108, i32 0
  %114 = insertelement <4 x float> %113, float %2, i32 1
  %115 = insertelement <4 x float> %114, float %71, i32 2
  %116 = insertelement <4 x float> %115, float %74, i32 3
  %117 = insertelement <4 x float> <float undef, float undef, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>, float %111, i32 0
  %118 = insertelement <4 x float> %117, float %80, i32 1
  %119 = fmul nsz <4 x float> %116, %118
  %120 = insertelement <4 x float> undef, float %2, i32 0
  %121 = insertelement <4 x float> %120, float %3, i32 1
  %122 = insertelement <4 x float> %121, float %23, i32 2
  %123 = insertelement <4 x float> %122, float %81, i32 3
  %124 = insertelement <4 x float> <float undef, float undef, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>, float %110, i32 0
  %125 = insertelement <4 x float> %124, float %78, i32 1
  %126 = fmul nsz <4 x float> %123, %125
  %127 = fadd nsz <4 x float> %119, %126
  %128 = fsub nsz <4 x float> %119, %126
  %129 = shufflevector <4 x float> %127, <4 x float> %128, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %130 = fmul nsz float %3, %80
  %131 = fmul nsz float %2, %78
  %132 = insertelement <4 x float> undef, float %130, i32 0
  %133 = insertelement <4 x float> %132, float %109, i32 1
  %134 = shufflevector <4 x float> %133, <4 x float> %119, <4 x i32> <i32 0, i32 1, i32 7, i32 undef>
  %135 = shufflevector <4 x float> %134, <4 x float> %126, <4 x i32> <i32 0, i32 1, i32 2, i32 6>
  %136 = insertelement <4 x float> undef, float %131, i32 0
  %137 = insertelement <4 x float> %136, float %112, i32 1
  %138 = shufflevector <4 x float> %137, <4 x float> %126, <4 x i32> <i32 0, i32 1, i32 7, i32 undef>
  %139 = shufflevector <4 x float> %138, <4 x float> %119, <4 x i32> <i32 0, i32 1, i32 2, i32 6>
  %140 = fadd nsz <4 x float> %135, %139
  %141 = fsub nsz <4 x float> %135, %139
  %142 = shufflevector <4 x float> %140, <4 x float> %141, <4 x i32> <i32 0, i32 5, i32 2, i32 3>
  %143 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1, i32 0
  %144 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1, i32 1
  %145 = bitcast float* %143 to <4 x float>*
  %146 = load <4 x float>, <4 x float>* %145, align 4
  %147 = shufflevector <4 x float> %141, <4 x float> %127, <4 x i32> <i32 1, i32 4, i32 undef, i32 undef>
  %148 = shufflevector <4 x float> %147, <4 x float> %140, <4 x i32> <i32 0, i32 1, i32 7, i32 undef>
  %149 = shufflevector <4 x float> %148, <4 x float> %128, <4 x i32> <i32 0, i32 1, i32 2, i32 6>
  %150 = shufflevector <4 x float> %128, <4 x float> %140, <4 x i32> <i32 1, i32 4, i32 3, i32 6>
  %151 = fadd nsz <4 x float> %149, %150
  %152 = extractelement <4 x float> %146, i32 2
  %153 = extractelement <4 x float> %151, i32 2
  %154 = fadd nsz float %152, %153
  store float %154, float* %106, align 4
  %155 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 5, i32 0
  %156 = bitcast float* %155 to <4 x float>*
  %157 = load <4 x float>, <4 x float>* %156, align 4
  %158 = fsub nsz <4 x float> %129, %142
  %159 = extractelement <4 x float> %146, i32 3
  %160 = extractelement <4 x float> %151, i32 3
  %161 = fadd nsz float %159, %160
  store float %161, float* %107, align 4
  %162 = extractelement <4 x float> %146, i32 0
  %163 = extractelement <4 x float> %151, i32 0
  %164 = fadd nsz float %162, %163
  store float %164, float* %143, align 4
  %165 = fsub nsz <4 x float> %157, %158
  %166 = bitcast float* %36 to <4 x float>*
  store <4 x float> %165, <4 x float>* %166, align 4
  %167 = fadd nsz <4 x float> %157, %158
  %168 = bitcast float* %155 to <4 x float>*
  store <4 x float> %167, <4 x float>* %168, align 4
  %169 = fsub nsz <4 x float> %146, %151
  %170 = bitcast float* %5 to <4 x float>*
  store <4 x float> %169, <4 x float>* %170, align 4
  %171 = extractelement <4 x float> %146, i32 1
  %172 = extractelement <4 x float> %151, i32 1
  %173 = fadd nsz float %171, %172
  store float %173, float* %144, align 4
  %174 = load float, float* %15, align 4
  %175 = fmul nsz float %3, %174
  %176 = load float, float* %29, align 4
  %177 = fsub nsz float -0.000000e+00, %2
  %178 = fmul nsz float %176, %177
  %179 = fsub nsz float %175, %178
  %180 = fmul nsz float %174, %177
  %181 = fmul nsz float %3, %176
  %182 = fadd nsz float %180, %181
  %183 = load float, float* %39, align 4
  %184 = fmul nsz float %3, %183
  %185 = load float, float* %52, align 4
  %186 = fmul nsz float %2, %185
  %187 = fsub nsz float %184, %186
  %188 = fmul nsz float %2, %183
  %189 = fmul nsz float %3, %185
  %190 = fadd nsz float %188, %189
  %191 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 3, i32 0
  %192 = load float, float* %191, align 4
  %193 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 3, i32 1
  %194 = load float, float* %193, align 4
  %195 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 7, i32 0
  %196 = load float, float* %195, align 4
  %197 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 7, i32 1
  %198 = load float, float* %197, align 4
  %199 = fsub nsz float %187, %179
  %200 = fadd nsz float %179, %187
  %201 = fsub nsz float %192, %200
  store float %201, float* %15, align 4
  %202 = fadd nsz float %192, %200
  store float %202, float* %191, align 4
  %203 = fsub nsz float %198, %199
  store float %203, float* %52, align 4
  %204 = fadd nsz float %199, %198
  store float %204, float* %197, align 4
  %205 = fsub nsz float %182, %190
  %206 = fadd nsz float %182, %190
  %207 = fsub nsz float %196, %205
  store float %207, float* %39, align 4
  %208 = fadd nsz float %196, %205
  store float %208, float* %195, align 4
  %209 = fsub nsz float %194, %206
  store float %209, float* %29, align 4
  %210 = fadd nsz float %194, %206
  store float %210, float* %193, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft32(%struct.FFTComplex*) #7 {
  tail call void @fft16(%struct.FFTComplex* %0)
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 16
  tail call void @fft8(%struct.FFTComplex* %2)
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 24
  tail call void @fft8(%struct.FFTComplex* %3)
  tail call fastcc void @pass(%struct.FFTComplex* %0, float* getelementptr inbounds ([16 x float], [16 x float]* @ff_cos_32, i64 0, i64 0), i32 4)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft64(%struct.FFTComplex*) #7 {
  tail call void @fft16(%struct.FFTComplex* %0) #8
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 16
  tail call void @fft8(%struct.FFTComplex* %2) #8
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 24
  tail call void @fft8(%struct.FFTComplex* %3) #8
  tail call fastcc void @pass(%struct.FFTComplex* %0, float* getelementptr inbounds ([16 x float], [16 x float]* @ff_cos_32, i64 0, i64 0), i32 4) #8
  %4 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 32
  tail call void @fft16(%struct.FFTComplex* %4)
  %5 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 48
  tail call void @fft16(%struct.FFTComplex* %5)
  tail call fastcc void @pass(%struct.FFTComplex* %0, float* getelementptr inbounds ([32 x float], [32 x float]* @ff_cos_64, i64 0, i64 0), i32 8)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft128(%struct.FFTComplex*) #7 {
  tail call void @fft16(%struct.FFTComplex* %0) #8
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 16
  tail call void @fft8(%struct.FFTComplex* %2) #8
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 24
  tail call void @fft8(%struct.FFTComplex* %3) #8
  tail call fastcc void @pass(%struct.FFTComplex* %0, float* getelementptr inbounds ([16 x float], [16 x float]* @ff_cos_32, i64 0, i64 0), i32 4) #8
  %4 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 32
  tail call void @fft16(%struct.FFTComplex* %4) #8
  %5 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 48
  tail call void @fft16(%struct.FFTComplex* %5) #8
  tail call fastcc void @pass(%struct.FFTComplex* %0, float* getelementptr inbounds ([32 x float], [32 x float]* @ff_cos_64, i64 0, i64 0), i32 8) #8
  %6 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 64
  tail call void @fft16(%struct.FFTComplex* %6) #8
  %7 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 80
  tail call void @fft8(%struct.FFTComplex* %7) #8
  %8 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 88
  tail call void @fft8(%struct.FFTComplex* %8) #8
  tail call fastcc void @pass(%struct.FFTComplex* %6, float* getelementptr inbounds ([16 x float], [16 x float]* @ff_cos_32, i64 0, i64 0), i32 4) #8
  %9 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 96
  tail call void @fft16(%struct.FFTComplex* %9) #8
  %10 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 112
  tail call void @fft8(%struct.FFTComplex* %10) #8
  %11 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 120
  tail call void @fft8(%struct.FFTComplex* %11) #8
  tail call fastcc void @pass(%struct.FFTComplex* %9, float* getelementptr inbounds ([16 x float], [16 x float]* @ff_cos_32, i64 0, i64 0), i32 4) #8
  tail call fastcc void @pass(%struct.FFTComplex* %0, float* getelementptr inbounds ([64 x float], [64 x float]* @ff_cos_128, i64 0, i64 0), i32 16)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft256(%struct.FFTComplex*) #7 {
  tail call void @fft128(%struct.FFTComplex* %0)
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 128
  tail call void @fft16(%struct.FFTComplex* %2) #8
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 144
  tail call void @fft8(%struct.FFTComplex* %3) #8
  %4 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 152
  tail call void @fft8(%struct.FFTComplex* %4) #8
  tail call fastcc void @pass(%struct.FFTComplex* %2, float* getelementptr inbounds ([16 x float], [16 x float]* @ff_cos_32, i64 0, i64 0), i32 4) #8
  %5 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 160
  tail call void @fft16(%struct.FFTComplex* %5) #8
  %6 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 176
  tail call void @fft16(%struct.FFTComplex* %6) #8
  tail call fastcc void @pass(%struct.FFTComplex* %2, float* getelementptr inbounds ([32 x float], [32 x float]* @ff_cos_64, i64 0, i64 0), i32 8) #8
  %7 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 192
  tail call void @fft16(%struct.FFTComplex* %7) #8
  %8 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 208
  tail call void @fft8(%struct.FFTComplex* %8) #8
  %9 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 216
  tail call void @fft8(%struct.FFTComplex* %9) #8
  tail call fastcc void @pass(%struct.FFTComplex* %7, float* getelementptr inbounds ([16 x float], [16 x float]* @ff_cos_32, i64 0, i64 0), i32 4) #8
  %10 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 224
  tail call void @fft16(%struct.FFTComplex* %10) #8
  %11 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 240
  tail call void @fft16(%struct.FFTComplex* %11) #8
  tail call fastcc void @pass(%struct.FFTComplex* %7, float* getelementptr inbounds ([32 x float], [32 x float]* @ff_cos_64, i64 0, i64 0), i32 8) #8
  tail call fastcc void @pass(%struct.FFTComplex* %0, float* getelementptr inbounds ([128 x float], [128 x float]* @ff_cos_256, i64 0, i64 0), i32 32)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft512(%struct.FFTComplex*) #7 {
  tail call void @fft256(%struct.FFTComplex* %0)
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 256
  tail call void @fft128(%struct.FFTComplex* %2)
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 384
  tail call void @fft128(%struct.FFTComplex* %3)
  tail call fastcc void @pass(%struct.FFTComplex* %0, float* getelementptr inbounds ([256 x float], [256 x float]* @ff_cos_512, i64 0, i64 0), i32 64)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft1024(%struct.FFTComplex*) #7 {
  tail call void @fft256(%struct.FFTComplex* %0) #8
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 256
  tail call void @fft128(%struct.FFTComplex* %2) #8
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 384
  tail call void @fft128(%struct.FFTComplex* %3) #8
  tail call fastcc void @pass(%struct.FFTComplex* %0, float* getelementptr inbounds ([256 x float], [256 x float]* @ff_cos_512, i64 0, i64 0), i32 64) #8
  %4 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 512
  tail call void @fft256(%struct.FFTComplex* %4)
  %5 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 768
  tail call void @fft256(%struct.FFTComplex* %5)
  tail call fastcc void @pass_big(%struct.FFTComplex* %0, float* getelementptr inbounds ([512 x float], [512 x float]* @ff_cos_1024, i64 0, i64 0), i32 128)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft2048(%struct.FFTComplex*) #7 {
  tail call void @fft256(%struct.FFTComplex* %0) #8
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 256
  tail call void @fft128(%struct.FFTComplex* %2) #8
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 384
  tail call void @fft128(%struct.FFTComplex* %3) #8
  tail call fastcc void @pass(%struct.FFTComplex* %0, float* getelementptr inbounds ([256 x float], [256 x float]* @ff_cos_512, i64 0, i64 0), i32 64) #8
  %4 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 512
  tail call void @fft256(%struct.FFTComplex* %4) #8
  %5 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 768
  tail call void @fft256(%struct.FFTComplex* %5) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %0, float* getelementptr inbounds ([512 x float], [512 x float]* @ff_cos_1024, i64 0, i64 0), i32 128) #8
  %6 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1024
  tail call void @fft256(%struct.FFTComplex* %6) #8
  %7 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1280
  tail call void @fft128(%struct.FFTComplex* %7) #8
  %8 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1408
  tail call void @fft128(%struct.FFTComplex* %8) #8
  tail call fastcc void @pass(%struct.FFTComplex* %6, float* getelementptr inbounds ([256 x float], [256 x float]* @ff_cos_512, i64 0, i64 0), i32 64) #8
  %9 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1536
  tail call void @fft256(%struct.FFTComplex* %9) #8
  %10 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1792
  tail call void @fft128(%struct.FFTComplex* %10) #8
  %11 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1920
  tail call void @fft128(%struct.FFTComplex* %11) #8
  tail call fastcc void @pass(%struct.FFTComplex* %9, float* getelementptr inbounds ([256 x float], [256 x float]* @ff_cos_512, i64 0, i64 0), i32 64) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %0, float* getelementptr inbounds ([1024 x float], [1024 x float]* @ff_cos_2048, i64 0, i64 0), i32 256)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft4096(%struct.FFTComplex*) #7 {
  tail call void @fft2048(%struct.FFTComplex* %0)
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 2048
  tail call void @fft256(%struct.FFTComplex* %2) #8
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 2304
  tail call void @fft128(%struct.FFTComplex* %3) #8
  %4 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 2432
  tail call void @fft128(%struct.FFTComplex* %4) #8
  tail call fastcc void @pass(%struct.FFTComplex* %2, float* getelementptr inbounds ([256 x float], [256 x float]* @ff_cos_512, i64 0, i64 0), i32 64) #8
  %5 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 2560
  tail call void @fft256(%struct.FFTComplex* %5) #8
  %6 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 2816
  tail call void @fft256(%struct.FFTComplex* %6) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %2, float* getelementptr inbounds ([512 x float], [512 x float]* @ff_cos_1024, i64 0, i64 0), i32 128) #8
  %7 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 3072
  tail call void @fft256(%struct.FFTComplex* %7) #8
  %8 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 3328
  tail call void @fft128(%struct.FFTComplex* %8) #8
  %9 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 3456
  tail call void @fft128(%struct.FFTComplex* %9) #8
  tail call fastcc void @pass(%struct.FFTComplex* %7, float* getelementptr inbounds ([256 x float], [256 x float]* @ff_cos_512, i64 0, i64 0), i32 64) #8
  %10 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 3584
  tail call void @fft256(%struct.FFTComplex* %10) #8
  %11 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 3840
  tail call void @fft256(%struct.FFTComplex* %11) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %7, float* getelementptr inbounds ([512 x float], [512 x float]* @ff_cos_1024, i64 0, i64 0), i32 128) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %0, float* getelementptr inbounds ([2048 x float], [2048 x float]* @ff_cos_4096, i64 0, i64 0), i32 512)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft8192(%struct.FFTComplex*) #7 {
  tail call void @fft4096(%struct.FFTComplex* %0)
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 4096
  tail call void @fft2048(%struct.FFTComplex* %2)
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 6144
  tail call void @fft2048(%struct.FFTComplex* %3)
  tail call fastcc void @pass_big(%struct.FFTComplex* %0, float* getelementptr inbounds ([4096 x float], [4096 x float]* @ff_cos_8192, i64 0, i64 0), i32 1024)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft16384(%struct.FFTComplex*) #7 {
  tail call void @fft4096(%struct.FFTComplex* %0) #8
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 4096
  tail call void @fft2048(%struct.FFTComplex* %2) #8
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 6144
  tail call void @fft2048(%struct.FFTComplex* %3) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %0, float* getelementptr inbounds ([4096 x float], [4096 x float]* @ff_cos_8192, i64 0, i64 0), i32 1024) #8
  %4 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 8192
  tail call void @fft4096(%struct.FFTComplex* %4)
  %5 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 12288
  tail call void @fft4096(%struct.FFTComplex* %5)
  tail call fastcc void @pass_big(%struct.FFTComplex* %0, float* getelementptr inbounds ([8192 x float], [8192 x float]* @ff_cos_16384, i64 0, i64 0), i32 2048)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft32768(%struct.FFTComplex*) #7 {
  tail call void @fft4096(%struct.FFTComplex* %0) #8
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 4096
  tail call void @fft2048(%struct.FFTComplex* %2) #8
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 6144
  tail call void @fft2048(%struct.FFTComplex* %3) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %0, float* getelementptr inbounds ([4096 x float], [4096 x float]* @ff_cos_8192, i64 0, i64 0), i32 1024) #8
  %4 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 8192
  tail call void @fft4096(%struct.FFTComplex* %4) #8
  %5 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 12288
  tail call void @fft4096(%struct.FFTComplex* %5) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %0, float* getelementptr inbounds ([8192 x float], [8192 x float]* @ff_cos_16384, i64 0, i64 0), i32 2048) #8
  %6 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 16384
  tail call void @fft4096(%struct.FFTComplex* %6) #8
  %7 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 20480
  tail call void @fft2048(%struct.FFTComplex* %7) #8
  %8 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 22528
  tail call void @fft2048(%struct.FFTComplex* %8) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %6, float* getelementptr inbounds ([4096 x float], [4096 x float]* @ff_cos_8192, i64 0, i64 0), i32 1024) #8
  %9 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 24576
  tail call void @fft4096(%struct.FFTComplex* %9) #8
  %10 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 28672
  tail call void @fft2048(%struct.FFTComplex* %10) #8
  %11 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 30720
  tail call void @fft2048(%struct.FFTComplex* %11) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %9, float* getelementptr inbounds ([4096 x float], [4096 x float]* @ff_cos_8192, i64 0, i64 0), i32 1024) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %0, float* getelementptr inbounds ([16384 x float], [16384 x float]* @ff_cos_32768, i64 0, i64 0), i32 4096)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft65536(%struct.FFTComplex*) #7 {
  tail call void @fft32768(%struct.FFTComplex* %0)
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 32768
  tail call void @fft16384(%struct.FFTComplex* %2)
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 49152
  tail call void @fft16384(%struct.FFTComplex* %3)
  tail call fastcc void @pass_big(%struct.FFTComplex* %0, float* getelementptr inbounds ([32768 x float], [32768 x float]* @ff_cos_65536, i64 0, i64 0), i32 8192)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft131072(%struct.FFTComplex*) #7 {
  tail call void @fft32768(%struct.FFTComplex* %0) #8
  %2 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 32768
  tail call void @fft4096(%struct.FFTComplex* %2) #8
  %3 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 36864
  tail call void @fft2048(%struct.FFTComplex* %3) #8
  %4 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 38912
  tail call void @fft2048(%struct.FFTComplex* %4) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %2, float* getelementptr inbounds ([4096 x float], [4096 x float]* @ff_cos_8192, i64 0, i64 0), i32 1024) #8
  %5 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 40960
  tail call void @fft4096(%struct.FFTComplex* %5) #8
  %6 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 45056
  tail call void @fft4096(%struct.FFTComplex* %6) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %2, float* getelementptr inbounds ([8192 x float], [8192 x float]* @ff_cos_16384, i64 0, i64 0), i32 2048) #8
  %7 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 49152
  tail call void @fft4096(%struct.FFTComplex* %7) #8
  %8 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 53248
  tail call void @fft2048(%struct.FFTComplex* %8) #8
  %9 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 55296
  tail call void @fft2048(%struct.FFTComplex* %9) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %7, float* getelementptr inbounds ([4096 x float], [4096 x float]* @ff_cos_8192, i64 0, i64 0), i32 1024) #8
  %10 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 57344
  tail call void @fft4096(%struct.FFTComplex* %10) #8
  %11 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 61440
  tail call void @fft4096(%struct.FFTComplex* %11) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %7, float* getelementptr inbounds ([8192 x float], [8192 x float]* @ff_cos_16384, i64 0, i64 0), i32 2048) #8
  tail call fastcc void @pass_big(%struct.FFTComplex* %0, float* getelementptr inbounds ([32768 x float], [32768 x float]* @ff_cos_65536, i64 0, i64 0), i32 8192) #8
  %12 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 65536
  tail call void @fft32768(%struct.FFTComplex* %12)
  %13 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 98304
  tail call void @fft32768(%struct.FFTComplex* %13)
  tail call fastcc void @pass_big(%struct.FFTComplex* %0, float* getelementptr inbounds ([65536 x float], [65536 x float]* @ff_cos_131072, i64 0, i64 0), i32 16384)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @pass(%struct.FFTComplex* nocapture, float* nocapture readonly, i32) unnamed_addr #7 {
  %4 = shl i32 %2, 1
  %5 = shl i32 %2, 2
  %6 = mul i32 %2, 6
  %7 = sext i32 %4 to i64
  %8 = getelementptr inbounds float, float* %1, i64 %7
  %9 = add i32 %2, -1
  %10 = sext i32 %5 to i64
  %11 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %10, i32 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %10, i32 1
  %14 = load float, float* %13, align 4
  %15 = sext i32 %6 to i64
  %16 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %15, i32 0
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %15, i32 1
  %19 = load float, float* %18, align 4
  %20 = fsub nsz float %17, %12
  %21 = fadd nsz float %12, %17
  %22 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 0, i32 0
  %23 = load float, float* %22, align 4
  %24 = fsub nsz float %23, %21
  store float %24, float* %11, align 4
  %25 = load float, float* %22, align 4
  %26 = fadd nsz float %21, %25
  store float %26, float* %22, align 4
  %27 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %7, i32 1
  %28 = load float, float* %27, align 4
  %29 = fsub nsz float %28, %20
  store float %29, float* %18, align 4
  %30 = load float, float* %27, align 4
  %31 = fadd nsz float %20, %30
  store float %31, float* %27, align 4
  %32 = fsub nsz float %14, %19
  %33 = fadd nsz float %14, %19
  %34 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %7, i32 0
  %35 = load float, float* %34, align 4
  %36 = fsub nsz float %35, %32
  store float %36, float* %16, align 4
  %37 = load float, float* %34, align 4
  %38 = fadd nsz float %32, %37
  store float %38, float* %34, align 4
  %39 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 0, i32 1
  %40 = load float, float* %39, align 4
  %41 = fsub nsz float %40, %33
  store float %41, float* %13, align 4
  %42 = load float, float* %39, align 4
  %43 = fadd nsz float %33, %42
  store float %43, float* %39, align 4
  %44 = or i32 %5, 1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %45, i32 0
  %47 = load float, float* %46, align 4
  %48 = getelementptr inbounds float, float* %1, i64 1
  %49 = load float, float* %48, align 4
  %50 = fmul nsz float %47, %49
  %51 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %45, i32 1
  %52 = load float, float* %51, align 4
  %53 = getelementptr inbounds float, float* %8, i64 -1
  %54 = load float, float* %53, align 4
  %55 = fsub nsz float -0.000000e+00, %54
  %56 = fmul nsz float %52, %55
  %57 = fsub nsz float %50, %56
  %58 = fmul nsz float %47, %55
  %59 = fmul nsz float %49, %52
  %60 = fadd nsz float %59, %58
  %61 = or i32 %6, 1
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %62, i32 0
  %64 = load float, float* %63, align 4
  %65 = fmul nsz float %49, %64
  %66 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %62, i32 1
  %67 = load float, float* %66, align 4
  %68 = fmul nsz float %54, %67
  %69 = fsub nsz float %65, %68
  %70 = fmul nsz float %54, %64
  %71 = fmul nsz float %49, %67
  %72 = fadd nsz float %70, %71
  %73 = fsub nsz float %69, %57
  %74 = fadd nsz float %57, %69
  %75 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1, i32 0
  %76 = load float, float* %75, align 4
  %77 = fsub nsz float %76, %74
  store float %77, float* %46, align 4
  %78 = load float, float* %75, align 4
  %79 = fadd nsz float %78, %74
  store float %79, float* %75, align 4
  %80 = or i32 %4, 1
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %81, i32 1
  %83 = load float, float* %82, align 4
  %84 = fsub nsz float %83, %73
  store float %84, float* %66, align 4
  %85 = load float, float* %82, align 4
  %86 = fadd nsz float %73, %85
  store float %86, float* %82, align 4
  %87 = fsub nsz float %60, %72
  %88 = fadd nsz float %60, %72
  %89 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %81, i32 0
  %90 = load float, float* %89, align 4
  %91 = fsub nsz float %90, %87
  store float %91, float* %63, align 4
  %92 = load float, float* %89, align 4
  %93 = fadd nsz float %87, %92
  store float %93, float* %89, align 4
  %94 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1, i32 1
  %95 = load float, float* %94, align 4
  %96 = fsub nsz float %95, %88
  store float %96, float* %51, align 4
  %97 = load float, float* %94, align 4
  %98 = fadd nsz float %88, %97
  store float %98, float* %94, align 4
  br label %99

99:                                               ; preds = %99, %3
  %100 = phi %struct.FFTComplex* [ %0, %3 ], [ %104, %99 ]
  %101 = phi float* [ %1, %3 ], [ %105, %99 ]
  %102 = phi i32 [ %9, %3 ], [ %209, %99 ]
  %103 = phi float* [ %8, %3 ], [ %106, %99 ]
  %104 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %100, i64 2
  %105 = getelementptr inbounds float, float* %101, i64 2
  %106 = getelementptr inbounds float, float* %103, i64 -2
  %107 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %104, i64 %10
  %108 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %107, i64 0, i32 0
  %109 = load float, float* %108, align 4
  %110 = load float, float* %105, align 4
  %111 = fmul nsz float %109, %110
  %112 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %107, i64 0, i32 1
  %113 = load float, float* %112, align 4
  %114 = load float, float* %106, align 4
  %115 = fsub nsz float -0.000000e+00, %114
  %116 = fmul nsz float %113, %115
  %117 = fsub nsz float %111, %116
  %118 = fmul nsz float %109, %115
  %119 = fmul nsz float %110, %113
  %120 = fadd nsz float %119, %118
  %121 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %104, i64 %15
  %122 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %121, i64 0, i32 0
  %123 = load float, float* %122, align 4
  %124 = fmul nsz float %110, %123
  %125 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %121, i64 0, i32 1
  %126 = load float, float* %125, align 4
  %127 = fmul nsz float %114, %126
  %128 = fsub nsz float %124, %127
  %129 = fmul nsz float %114, %123
  %130 = fmul nsz float %110, %126
  %131 = fadd nsz float %129, %130
  %132 = fsub nsz float %128, %117
  %133 = fadd nsz float %117, %128
  %134 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %104, i64 0, i32 0
  %135 = load float, float* %134, align 4
  %136 = fsub nsz float %135, %133
  store float %136, float* %108, align 4
  %137 = load float, float* %134, align 4
  %138 = fadd nsz float %137, %133
  store float %138, float* %134, align 4
  %139 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %104, i64 %7
  %140 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %139, i64 0, i32 1
  %141 = load float, float* %140, align 4
  %142 = fsub nsz float %141, %132
  store float %142, float* %125, align 4
  %143 = load float, float* %140, align 4
  %144 = fadd nsz float %132, %143
  store float %144, float* %140, align 4
  %145 = fsub nsz float %120, %131
  %146 = fadd nsz float %120, %131
  %147 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %139, i64 0, i32 0
  %148 = load float, float* %147, align 4
  %149 = fsub nsz float %148, %145
  store float %149, float* %122, align 4
  %150 = load float, float* %147, align 4
  %151 = fadd nsz float %145, %150
  store float %151, float* %147, align 4
  %152 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %100, i64 2, i32 1
  %153 = load float, float* %152, align 4
  %154 = fsub nsz float %153, %146
  store float %154, float* %112, align 4
  %155 = load float, float* %152, align 4
  %156 = fadd nsz float %146, %155
  store float %156, float* %152, align 4
  %157 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %104, i64 %45
  %158 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %157, i64 0, i32 0
  %159 = load float, float* %158, align 4
  %160 = getelementptr inbounds float, float* %101, i64 3
  %161 = load float, float* %160, align 4
  %162 = fmul nsz float %159, %161
  %163 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %157, i64 0, i32 1
  %164 = load float, float* %163, align 4
  %165 = getelementptr inbounds float, float* %103, i64 -3
  %166 = load float, float* %165, align 4
  %167 = fsub nsz float -0.000000e+00, %166
  %168 = fmul nsz float %164, %167
  %169 = fsub nsz float %162, %168
  %170 = fmul nsz float %159, %167
  %171 = fmul nsz float %161, %164
  %172 = fadd nsz float %171, %170
  %173 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %104, i64 %62
  %174 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %173, i64 0, i32 0
  %175 = load float, float* %174, align 4
  %176 = fmul nsz float %161, %175
  %177 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %173, i64 0, i32 1
  %178 = load float, float* %177, align 4
  %179 = fmul nsz float %166, %178
  %180 = fsub nsz float %176, %179
  %181 = fmul nsz float %166, %175
  %182 = fmul nsz float %161, %178
  %183 = fadd nsz float %181, %182
  %184 = fsub nsz float %180, %169
  %185 = fadd nsz float %169, %180
  %186 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %100, i64 3, i32 0
  %187 = load float, float* %186, align 4
  %188 = fsub nsz float %187, %185
  store float %188, float* %158, align 4
  %189 = load float, float* %186, align 4
  %190 = fadd nsz float %189, %185
  store float %190, float* %186, align 4
  %191 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %104, i64 %81
  %192 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %191, i64 0, i32 1
  %193 = load float, float* %192, align 4
  %194 = fsub nsz float %193, %184
  store float %194, float* %177, align 4
  %195 = load float, float* %192, align 4
  %196 = fadd nsz float %184, %195
  store float %196, float* %192, align 4
  %197 = fsub nsz float %172, %183
  %198 = fadd nsz float %172, %183
  %199 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %191, i64 0, i32 0
  %200 = load float, float* %199, align 4
  %201 = fsub nsz float %200, %197
  store float %201, float* %174, align 4
  %202 = load float, float* %199, align 4
  %203 = fadd nsz float %197, %202
  store float %203, float* %199, align 4
  %204 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %100, i64 3, i32 1
  %205 = load float, float* %204, align 4
  %206 = fsub nsz float %205, %198
  store float %206, float* %163, align 4
  %207 = load float, float* %204, align 4
  %208 = fadd nsz float %198, %207
  store float %208, float* %204, align 4
  %209 = add i32 %102, -1
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %99

211:                                              ; preds = %99
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @pass_big(%struct.FFTComplex* nocapture, float* nocapture readonly, i32) unnamed_addr #7 {
  %4 = shl i32 %2, 1
  %5 = shl i32 %2, 2
  %6 = mul i32 %2, 6
  %7 = sext i32 %4 to i64
  %8 = getelementptr inbounds float, float* %1, i64 %7
  %9 = add i32 %2, -1
  %10 = sext i32 %5 to i64
  %11 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %10, i32 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %10, i32 1
  %14 = load float, float* %13, align 4
  %15 = sext i32 %6 to i64
  %16 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %15, i32 0
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %15, i32 1
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 0, i32 0
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %7, i32 0
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %7, i32 1
  %27 = load float, float* %26, align 4
  %28 = fsub nsz float %17, %12
  %29 = fadd nsz float %12, %17
  %30 = fsub nsz float %21, %29
  store float %30, float* %11, align 4
  %31 = fadd nsz float %29, %21
  store float %31, float* %20, align 4
  %32 = fsub nsz float %27, %28
  store float %32, float* %18, align 4
  %33 = fadd nsz float %28, %27
  store float %33, float* %26, align 4
  %34 = fsub nsz float %14, %19
  %35 = fadd nsz float %14, %19
  %36 = fsub nsz float %25, %34
  store float %36, float* %16, align 4
  %37 = fadd nsz float %34, %25
  store float %37, float* %24, align 4
  %38 = fsub nsz float %23, %35
  store float %38, float* %13, align 4
  %39 = fadd nsz float %35, %23
  store float %39, float* %22, align 4
  %40 = or i32 %5, 1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %41, i32 0
  %43 = load float, float* %42, align 4
  %44 = getelementptr inbounds float, float* %1, i64 1
  %45 = load float, float* %44, align 4
  %46 = fmul nsz float %43, %45
  %47 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %41, i32 1
  %48 = load float, float* %47, align 4
  %49 = getelementptr inbounds float, float* %8, i64 -1
  %50 = load float, float* %49, align 4
  %51 = fsub nsz float -0.000000e+00, %50
  %52 = fmul nsz float %48, %51
  %53 = fsub nsz float %46, %52
  %54 = fmul nsz float %43, %51
  %55 = fmul nsz float %45, %48
  %56 = fadd nsz float %55, %54
  %57 = or i32 %6, 1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %58, i32 0
  %60 = load float, float* %59, align 4
  %61 = fmul nsz float %45, %60
  %62 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %58, i32 1
  %63 = load float, float* %62, align 4
  %64 = fmul nsz float %50, %63
  %65 = fsub nsz float %61, %64
  %66 = fmul nsz float %50, %60
  %67 = fmul nsz float %45, %63
  %68 = fadd nsz float %66, %67
  %69 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1, i32 0
  %70 = load float, float* %69, align 4
  %71 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 1, i32 1
  %72 = load float, float* %71, align 4
  %73 = or i32 %4, 1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %74, i32 0
  %76 = load float, float* %75, align 4
  %77 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %0, i64 %74, i32 1
  %78 = load float, float* %77, align 4
  %79 = fsub nsz float %65, %53
  %80 = fadd nsz float %53, %65
  %81 = fsub nsz float %70, %80
  store float %81, float* %42, align 4
  %82 = fadd nsz float %70, %80
  store float %82, float* %69, align 4
  %83 = fsub nsz float %78, %79
  store float %83, float* %62, align 4
  %84 = fadd nsz float %79, %78
  store float %84, float* %77, align 4
  %85 = fsub nsz float %56, %68
  %86 = fadd nsz float %56, %68
  %87 = fsub nsz float %76, %85
  store float %87, float* %59, align 4
  %88 = fadd nsz float %76, %85
  store float %88, float* %75, align 4
  %89 = fsub nsz float %72, %86
  store float %89, float* %47, align 4
  %90 = fadd nsz float %72, %86
  store float %90, float* %71, align 4
  br label %91

91:                                               ; preds = %91, %3
  %92 = phi float* [ %8, %3 ], [ %98, %91 ]
  %93 = phi i32 [ %9, %3 ], [ %193, %91 ]
  %94 = phi float* [ %1, %3 ], [ %97, %91 ]
  %95 = phi %struct.FFTComplex* [ %0, %3 ], [ %96, %91 ]
  %96 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %95, i64 2
  %97 = getelementptr inbounds float, float* %94, i64 2
  %98 = getelementptr inbounds float, float* %92, i64 -2
  %99 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %96, i64 %10
  %100 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %99, i64 0, i32 0
  %101 = load float, float* %100, align 4
  %102 = load float, float* %97, align 4
  %103 = fmul nsz float %101, %102
  %104 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %99, i64 0, i32 1
  %105 = load float, float* %104, align 4
  %106 = load float, float* %98, align 4
  %107 = fsub nsz float -0.000000e+00, %106
  %108 = fmul nsz float %105, %107
  %109 = fsub nsz float %103, %108
  %110 = fmul nsz float %101, %107
  %111 = fmul nsz float %102, %105
  %112 = fadd nsz float %111, %110
  %113 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %96, i64 %15
  %114 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %113, i64 0, i32 0
  %115 = load float, float* %114, align 4
  %116 = fmul nsz float %102, %115
  %117 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %113, i64 0, i32 1
  %118 = load float, float* %117, align 4
  %119 = fmul nsz float %106, %118
  %120 = fsub nsz float %116, %119
  %121 = fmul nsz float %106, %115
  %122 = fmul nsz float %102, %118
  %123 = fadd nsz float %121, %122
  %124 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %96, i64 0, i32 0
  %125 = load float, float* %124, align 4
  %126 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %95, i64 2, i32 1
  %127 = load float, float* %126, align 4
  %128 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %96, i64 %7
  %129 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %128, i64 0, i32 0
  %130 = load float, float* %129, align 4
  %131 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %128, i64 0, i32 1
  %132 = load float, float* %131, align 4
  %133 = fsub nsz float %120, %109
  %134 = fadd nsz float %109, %120
  %135 = fsub nsz float %125, %134
  store float %135, float* %100, align 4
  %136 = fadd nsz float %125, %134
  store float %136, float* %124, align 4
  %137 = fsub nsz float %132, %133
  store float %137, float* %117, align 4
  %138 = fadd nsz float %133, %132
  store float %138, float* %131, align 4
  %139 = fsub nsz float %112, %123
  %140 = fadd nsz float %112, %123
  %141 = fsub nsz float %130, %139
  store float %141, float* %114, align 4
  %142 = fadd nsz float %130, %139
  store float %142, float* %129, align 4
  %143 = fsub nsz float %127, %140
  store float %143, float* %104, align 4
  %144 = fadd nsz float %127, %140
  store float %144, float* %126, align 4
  %145 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %96, i64 %41
  %146 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %145, i64 0, i32 0
  %147 = load float, float* %146, align 4
  %148 = getelementptr inbounds float, float* %94, i64 3
  %149 = load float, float* %148, align 4
  %150 = fmul nsz float %147, %149
  %151 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %145, i64 0, i32 1
  %152 = load float, float* %151, align 4
  %153 = getelementptr inbounds float, float* %92, i64 -3
  %154 = load float, float* %153, align 4
  %155 = fsub nsz float -0.000000e+00, %154
  %156 = fmul nsz float %152, %155
  %157 = fsub nsz float %150, %156
  %158 = fmul nsz float %147, %155
  %159 = fmul nsz float %149, %152
  %160 = fadd nsz float %159, %158
  %161 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %96, i64 %58
  %162 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %161, i64 0, i32 0
  %163 = load float, float* %162, align 4
  %164 = fmul nsz float %149, %163
  %165 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %161, i64 0, i32 1
  %166 = load float, float* %165, align 4
  %167 = fmul nsz float %154, %166
  %168 = fsub nsz float %164, %167
  %169 = fmul nsz float %154, %163
  %170 = fmul nsz float %149, %166
  %171 = fadd nsz float %169, %170
  %172 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %95, i64 3, i32 0
  %173 = load float, float* %172, align 4
  %174 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %95, i64 3, i32 1
  %175 = load float, float* %174, align 4
  %176 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %96, i64 %74
  %177 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %176, i64 0, i32 0
  %178 = load float, float* %177, align 4
  %179 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %176, i64 0, i32 1
  %180 = load float, float* %179, align 4
  %181 = fsub nsz float %168, %157
  %182 = fadd nsz float %157, %168
  %183 = fsub nsz float %173, %182
  store float %183, float* %146, align 4
  %184 = fadd nsz float %173, %182
  store float %184, float* %172, align 4
  %185 = fsub nsz float %180, %181
  store float %185, float* %165, align 4
  %186 = fadd nsz float %181, %180
  store float %186, float* %179, align 4
  %187 = fsub nsz float %160, %171
  %188 = fadd nsz float %160, %171
  %189 = fsub nsz float %178, %187
  store float %189, float* %162, align 4
  %190 = fadd nsz float %178, %187
  store float %190, float* %177, align 4
  %191 = fsub nsz float %175, %188
  store float %191, float* %151, align 4
  %192 = fadd nsz float %175, %188
  store float %192, float* %174, align 4
  %193 = add i32 %93, -1
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %91

195:                                              ; preds = %91
  ret void
}

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold nofree nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { cold }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
